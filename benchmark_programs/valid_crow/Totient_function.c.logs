
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for totient()

; ModuleID = './Totient_function.c.bc'
source_filename = "./Totient_function.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [17 x i8] c" n    %c   prime\00", align 1
@.str.1 = private unnamed_addr constant [18 x i8] c"\0A---------------\0A\00", align 1
@.str.2 = private unnamed_addr constant [16 x i8] c"%2d   %2d   %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"True\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"False\00", align 1
@.str.5 = private unnamed_addr constant [34 x i8] c"\0ANumber of primes up to %6d =%4d\0A\00", align 1
@.str.6 = private unnamed_addr constant [35 x i8] c"\0ANumber of primes up to %6d = %4d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @totient(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %tot = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  store i32 %0, i32* %tot, align 4
  store i32 2, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %1, %2
  %3 = load i32, i32* %n.addr, align 4
  %cmp = icmp sle i32 %mul, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %n.addr, align 4
  %5 = load i32, i32* %i, align 4
  %rem = srem i32 %4, %5
  %cmp1 = icmp eq i32 %rem, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %6 = load i32, i32* %n.addr, align 4
  %7 = load i32, i32* %i, align 4
  %rem2 = srem i32 %6, %7
  %cmp3 = icmp eq i32 %rem2, 0
  br i1 %cmp3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %8 = load i32, i32* %i, align 4
  %9 = load i32, i32* %n.addr, align 4
  %div = sdiv i32 %9, %8
  store i32 %div, i32* %n.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %10 = load i32, i32* %tot, align 4
  %11 = load i32, i32* %i, align 4
  %div4 = sdiv i32 %10, %11
  %12 = load i32, i32* %tot, align 4
  %sub = sub nsw i32 %12, %div4
  store i32 %sub, i32* %tot, align 4
  br label %if.end

if.end:                                           ; preds = %while.end, %for.body
  %13 = load i32, i32* %i, align 4
  %cmp5 = icmp eq i32 %13, 2
  br i1 %cmp5, label %if.then6, label %if.end7

if.then6:                                         ; preds = %if.end
  store i32 1, i32* %i, align 4
  br label %if.end7

if.end7:                                          ; preds = %if.then6, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end7
  %14 = load i32, i32* %i, align 4
  %add = add nsw i32 %14, 2
  store i32 %add, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load i32, i32* %n.addr, align 4
  %cmp8 = icmp sgt i32 %15, 1
  br i1 %cmp8, label %if.then9, label %if.end12

if.then9:                                         ; preds = %for.end
  %16 = load i32, i32* %tot, align 4
  %17 = load i32, i32* %n.addr, align 4
  %div10 = sdiv i32 %16, %17
  %18 = load i32, i32* %tot, align 4
  %sub11 = sub nsw i32 %18, %div10
  store i32 %sub11, i32* %tot, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then9, %for.end
  %19 = load i32, i32* %tot, align 4
  ret i32 %19
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %count = alloca i32, align 4
  %n = alloca i32, align 4
  %tot = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 0, i32* %count, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i32 0, i32 0), i32 237)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i32 0, i32 0))
  store i32 1, i32* %n, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %n, align 4
  %cmp = icmp sle i32 %0, 25
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %n, align 4
  %call2 = call i32 @totient(i32 %1)
  store i32 %call2, i32* %tot, align 4
  %2 = load i32, i32* %n, align 4
  %sub = sub nsw i32 %2, 1
  %3 = load i32, i32* %tot, align 4
  %cmp3 = icmp eq i32 %sub, %3
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %4 = load i32, i32* %count, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %count, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %5 = load i32, i32* %n, align 4
  %6 = load i32, i32* %tot, align 4
  %7 = load i32, i32* %n, align 4
  %sub4 = sub nsw i32 %7, 1
  %8 = load i32, i32* %tot, align 4
  %cmp5 = icmp eq i32 %sub4, %8
  %9 = zext i1 %cmp5 to i64
  %cond = select i1 %cmp5, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i32 0, i32 0), i32 %5, i32 %6, i8* %cond)
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %10 = load i32, i32* %n, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %n, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %11 = load i32, i32* %count, align 4
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.5, i32 0, i32 0), i32 25, i32 %11)
  store i32 26, i32* %n, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc25, %for.end
  %12 = load i32, i32* %n, align 4
  %cmp10 = icmp sle i32 %12, 100000
  br i1 %cmp10, label %for.body11, label %for.end27

for.body11:                                       ; preds = %for.cond9
  %13 = load i32, i32* %n, align 4
  %call12 = call i32 @totient(i32 %13)
  store i32 %call12, i32* %tot, align 4
  %14 = load i32, i32* %tot, align 4
  %15 = load i32, i32* %n, align 4
  %sub13 = sub nsw i32 %15, 1
  %cmp14 = icmp eq i32 %14, %sub13
  br i1 %cmp14, label %if.then15, label %if.end17

if.then15:                                        ; preds = %for.body11
  %16 = load i32, i32* %count, align 4
  %inc16 = add nsw i32 %16, 1
  store i32 %inc16, i32* %count, align 4
  br label %if.end17

if.end17:                                         ; preds = %if.then15, %for.body11
  %17 = load i32, i32* %n, align 4
  %cmp18 = icmp eq i32 %17, 100
  br i1 %cmp18, label %if.then22, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end17
  %18 = load i32, i32* %n, align 4
  %cmp19 = icmp eq i32 %18, 1000
  br i1 %cmp19, label %if.then22, label %lor.lhs.false20

lor.lhs.false20:                                  ; preds = %lor.lhs.false
  %19 = load i32, i32* %n, align 4
  %rem = srem i32 %19, 10000
  %cmp21 = icmp eq i32 %rem, 0
  br i1 %cmp21, label %if.then22, label %if.end24

if.then22:                                        ; preds = %lor.lhs.false20, %lor.lhs.false, %if.end17
  %20 = load i32, i32* %n, align 4
  %21 = load i32, i32* %count, align 4
  %call23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.6, i32 0, i32 0), i32 %20, i32 %21)
  br label %if.end24

if.end24:                                         ; preds = %if.then22, %lor.lhs.false20
  br label %for.inc25

for.inc25:                                        ; preds = %if.end24
  %22 = load i32, i32* %n, align 4
  %inc26 = add nsw i32 %22, 1
  store i32 %inc26, i32* %n, align 4
  br label %for.cond9

for.end27:                                        ; preds = %for.cond9
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %1, %2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sle i32 %mul, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
%3:i32 = var
%4:i1 = sle %2, %3
infer %4

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem = srem i32 %4, %5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = srem %0, %1
infer %2

; *****
; For LLVM instruction:
;  %cmp1 = icmp eq i32 %rem, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = srem %0, %1
%3:i1 = eq 0:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem2 = srem i32 %6, %7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = srem %0, %1
infer %2

; *****
; For LLVM instruction:
;  %cmp3 = icmp eq i32 %rem2, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = srem %0, %1
%3:i1 = eq 0:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div = sdiv i32 %9, %8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sdiv %0, %1
infer %2

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %tot, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div4 = sdiv i32 %10, %11
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sdiv %0, %1
infer %2

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %tot, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %12, %div4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = sdiv %1, %2
%4:i32 = subnsw %0, %3
infer %4

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp5 = icmp eq i32 %13, 2
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %14, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp8 = icmp sgt i32 %15, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %tot, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div10 = sdiv i32 %16, %17
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sdiv %0, %1
infer %2

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %tot, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub11 = sub nsw i32 %18, %div10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = sdiv %1, %2
%4:i32 = subnsw %0, %3
infer %4

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %tot, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
%3:i32 = var
%4:i1 = sle %2, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = srem %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -120454654
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = srem %0, %1
%3:i1 = eq 0:i32, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = sdiv %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = sdiv %1, %2
%4:i32 = subnsw %0, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741825
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = var
%2:i32 = sdiv %0, %1

Cost = 5
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 2:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 2:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 2
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741826
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for totient()

; entering Souper's runOnFunction() for main()

; ModuleID = './Totient_function.c.bc'
source_filename = "./Totient_function.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [17 x i8] c" n    %c   prime\00", align 1
@.str.1 = private unnamed_addr constant [18 x i8] c"\0A---------------\0A\00", align 1
@.str.2 = private unnamed_addr constant [16 x i8] c"%2d   %2d   %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"True\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"False\00", align 1
@.str.5 = private unnamed_addr constant [34 x i8] c"\0ANumber of primes up to %6d =%4d\0A\00", align 1
@.str.6 = private unnamed_addr constant [35 x i8] c"\0ANumber of primes up to %6d = %4d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @totient(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %tot = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  store i32 %0, i32* %tot, align 4
  store i32 2, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %1, %2
  %3 = load i32, i32* %n.addr, align 4
  %cmp = icmp sle i32 %mul, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %n.addr, align 4
  %5 = load i32, i32* %i, align 4
  %rem = srem i32 %4, %5
  %cmp1 = icmp eq i32 %rem, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %6 = load i32, i32* %n.addr, align 4
  %7 = load i32, i32* %i, align 4
  %rem2 = srem i32 %6, %7
  %cmp3 = icmp eq i32 %rem2, 0
  br i1 %cmp3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %8 = load i32, i32* %i, align 4
  %9 = load i32, i32* %n.addr, align 4
  %div = sdiv i32 %9, %8
  store i32 %div, i32* %n.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %10 = load i32, i32* %tot, align 4
  %11 = load i32, i32* %i, align 4
  %div4 = sdiv i32 %10, %11
  %12 = load i32, i32* %tot, align 4
  %sub = sub nsw i32 %12, %div4
  store i32 %sub, i32* %tot, align 4
  br label %if.end

if.end:                                           ; preds = %while.end, %for.body
  %13 = load i32, i32* %i, align 4
  %cmp5 = icmp eq i32 %13, 2
  br i1 %cmp5, label %if.then6, label %if.end7

if.then6:                                         ; preds = %if.end
  store i32 1, i32* %i, align 4
  br label %if.end7

if.end7:                                          ; preds = %if.then6, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end7
  %14 = load i32, i32* %i, align 4
  %add = add nsw i32 %14, 2
  store i32 %add, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load i32, i32* %n.addr, align 4
  %cmp8 = icmp sgt i32 %15, 1
  br i1 %cmp8, label %if.then9, label %if.end12

if.then9:                                         ; preds = %for.end
  %16 = load i32, i32* %tot, align 4
  %17 = load i32, i32* %n.addr, align 4
  %div10 = sdiv i32 %16, %17
  %18 = load i32, i32* %tot, align 4
  %sub11 = sub nsw i32 %18, %div10
  store i32 %sub11, i32* %tot, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then9, %for.end
  %19 = load i32, i32* %tot, align 4
  ret i32 %19
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %count = alloca i32, align 4
  %n = alloca i32, align 4
  %tot = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 0, i32* %count, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i32 0, i32 0), i32 237)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i32 0, i32 0))
  store i32 1, i32* %n, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %n, align 4
  %cmp = icmp sle i32 %0, 25
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %n, align 4
  %call2 = call i32 @totient(i32 %1)
  store i32 %call2, i32* %tot, align 4
  %2 = load i32, i32* %n, align 4
  %sub = sub nsw i32 %2, 1
  %3 = load i32, i32* %tot, align 4
  %cmp3 = icmp eq i32 %sub, %3
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %4 = load i32, i32* %count, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %count, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %5 = load i32, i32* %n, align 4
  %6 = load i32, i32* %tot, align 4
  %7 = load i32, i32* %n, align 4
  %sub4 = sub nsw i32 %7, 1
  %8 = load i32, i32* %tot, align 4
  %cmp5 = icmp eq i32 %sub4, %8
  %9 = zext i1 %cmp5 to i64
  %cond = select i1 %cmp5, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i32 0, i32 0), i32 %5, i32 %6, i8* %cond)
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %10 = load i32, i32* %n, align 4
  %inc7 = add nsw i32 %10, 1
  store i32 %inc7, i32* %n, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %11 = load i32, i32* %count, align 4
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.5, i32 0, i32 0), i32 25, i32 %11)
  store i32 26, i32* %n, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc25, %for.end
  %12 = load i32, i32* %n, align 4
  %cmp10 = icmp sle i32 %12, 100000
  br i1 %cmp10, label %for.body11, label %for.end27

for.body11:                                       ; preds = %for.cond9
  %13 = load i32, i32* %n, align 4
  %call12 = call i32 @totient(i32 %13)
  store i32 %call12, i32* %tot, align 4
  %14 = load i32, i32* %tot, align 4
  %15 = load i32, i32* %n, align 4
  %sub13 = sub nsw i32 %15, 1
  %cmp14 = icmp eq i32 %14, %sub13
  br i1 %cmp14, label %if.then15, label %if.end17

if.then15:                                        ; preds = %for.body11
  %16 = load i32, i32* %count, align 4
  %inc16 = add nsw i32 %16, 1
  store i32 %inc16, i32* %count, align 4
  br label %if.end17

if.end17:                                         ; preds = %if.then15, %for.body11
  %17 = load i32, i32* %n, align 4
  %cmp18 = icmp eq i32 %17, 100
  br i1 %cmp18, label %if.then22, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end17
  %18 = load i32, i32* %n, align 4
  %cmp19 = icmp eq i32 %18, 1000
  br i1 %cmp19, label %if.then22, label %lor.lhs.false20

lor.lhs.false20:                                  ; preds = %lor.lhs.false
  %19 = load i32, i32* %n, align 4
  %rem = srem i32 %19, 10000
  %cmp21 = icmp eq i32 %rem, 0
  br i1 %cmp21, label %if.then22, label %if.end24

if.then22:                                        ; preds = %lor.lhs.false20, %lor.lhs.false, %if.end17
  %20 = load i32, i32* %n, align 4
  %21 = load i32, i32* %count, align 4
  %call23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.6, i32 0, i32 0), i32 %20, i32 %21)
  br label %if.end24

if.end24:                                         ; preds = %if.then22, %lor.lhs.false20
  br label %for.inc25

for.inc25:                                        ; preds = %if.end24
  %22 = load i32, i32* %n, align 4
  %inc26 = add nsw i32 %22, 1
  store i32 %inc26, i32* %n, align 4
  br label %for.cond9

for.end27:                                        ; preds = %for.cond9
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sle i32 %0, 25
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle %0, 25:i32
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call2 = call i32 @totient(i32 %1)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %2, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %tot, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp3 = icmp eq i32 %sub, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = eq %0, %2
infer %3

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %count, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %4, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %tot, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub4 = sub nsw i32 %7, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %tot, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp5 = icmp eq i32 %sub4, %8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = eq %0, %2
infer %3

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc7 = add nsw i32 %10, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %count, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp10 = icmp sle i32 %12, 100000
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle %0, 100000:i32
infer %1

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call12 = call i32 @totient(i32 %13)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %tot, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub13 = sub nsw i32 %15, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp14 = icmp eq i32 %14, %sub13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = eq %0, %2
infer %3

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %count, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc16 = add nsw i32 %16, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp18 = icmp eq i32 %17, 100
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 100:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp19 = icmp eq i32 %18, 1000
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 1000:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem = srem i32 %19, 10000
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 10000:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp21 = icmp eq i32 %rem, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 10000:i32
%2:i1 = eq 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %count, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc26 = add nsw i32 %22, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle %0, 25:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = eq %0, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle %0, 100000:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 100:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 1000:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem %0, 10000:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 8548
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem %0, 10000:i32
%2:i1 = eq 0:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
