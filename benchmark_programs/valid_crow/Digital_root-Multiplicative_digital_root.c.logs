
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for _mdr()

; ModuleID = './Digital_root-Multiplicative_digital_root.c.bc'
source_filename = "./Digital_root-Multiplicative_digital_root.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@__const.main.values = private unnamed_addr constant [4 x i32] [i32 123321, i32 7739, i32 893, i32 899998], align 16
@.str = private unnamed_addr constant [21 x i8] c"Number    MDR    MP\0A\00", align 1
@.str.1 = private unnamed_addr constant [17 x i8] c"%6d   %3d   %3d\0A\00", align 1
@.str.2 = private unnamed_addr constant [16 x i8] c"\0AMDR: [n0..n4]\0A\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"%3d: [\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"%d%s\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.6 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.7 = private unnamed_addr constant [3 x i8] c"]\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @_mdr(i32* %rmdr, i32* %rmp, i64 %n) #0 {
entry:
  %rmdr.addr = alloca i32*, align 4
  %rmp.addr = alloca i32*, align 4
  %n.addr = alloca i64, align 8
  %r = alloca i32, align 4
  store i32* %rmdr, i32** %rmdr.addr, align 4
  store i32* %rmp, i32** %rmp.addr, align 4
  store i64 %n, i64* %n.addr, align 8
  %0 = load i64, i64* %n.addr, align 8
  %tobool = icmp ne i64 %0, 0
  %1 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i32 1, i32 0
  store i32 %cond, i32* %r, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %2 = load i64, i64* %n.addr, align 8
  %tobool1 = icmp ne i64 %2, 0
  br i1 %tobool1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i64, i64* %n.addr, align 8
  %rem = srem i64 %3, 10
  %4 = load i32, i32* %r, align 4
  %conv = sext i32 %4 to i64
  %mul = mul nsw i64 %conv, %rem
  %conv2 = trunc i64 %mul to i32
  store i32 %conv2, i32* %r, align 4
  %5 = load i64, i64* %n.addr, align 8
  %div = sdiv i64 %5, 10
  store i64 %div, i64* %n.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %6 = load i32*, i32** %rmp.addr, align 4
  %7 = load i32, i32* %6, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %6, align 4
  %8 = load i32, i32* %r, align 4
  %cmp = icmp sge i32 %8, 10
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %while.end
  %9 = load i32*, i32** %rmdr.addr, align 4
  %10 = load i32*, i32** %rmp.addr, align 4
  %11 = load i32, i32* %r, align 4
  %conv4 = sext i32 %11 to i64
  call void @_mdr(i32* %9, i32* %10, i64 %conv4)
  br label %if.end

if.else:                                          ; preds = %while.end
  %12 = load i32, i32* %r, align 4
  %13 = load i32*, i32** %rmdr.addr, align 4
  store i32 %12, i32* %13, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %vmdr = alloca i32, align 4
  %vmp = alloca i32, align 4
  %values = alloca [4 x i32], align 16
  %vsize = alloca i32, align 4
  %table = alloca [10 x [5 x i32]], align 16
  %tfill = alloca [10 x i32], align 16
  %total = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [4 x i32]* %values to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([4 x i32]* @__const.main.values to i8*), i32 16, i1 false)
  store i32 4, i32* %vsize, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %1, 4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %do.body

do.body:                                          ; preds = %for.body
  store i32 0, i32* %vmp, align 4
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* %values, i32 0, i32 %2
  %3 = load i32, i32* %arrayidx, align 4
  %conv = sext i32 %3 to i64
  call void @_mdr(i32* %vmdr, i32* %vmp, i64 %conv)
  br label %do.end

do.end:                                           ; preds = %do.body
  %4 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [4 x i32], [4 x i32]* %values, i32 0, i32 %4
  %5 = load i32, i32* %arrayidx1, align 4
  %6 = load i32, i32* %vmdr, align 4
  %7 = load i32, i32* %vmp, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i32 0, i32 0), i32 %5, i32 %6, i32 %7)
  br label %for.inc

for.inc:                                          ; preds = %do.end
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %9 = bitcast [10 x [5 x i32]]* %table to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %9, i8 0, i32 200, i1 false)
  %10 = bitcast [10 x i32]* %tfill to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %10, i8 0, i32 40, i1 false)
  store i32 0, i32* %total, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc18, %for.end
  %11 = load i32, i32* %total, align 4
  %cmp4 = icmp slt i32 %11, 50
  br i1 %cmp4, label %for.body6, label %for.end20

for.body6:                                        ; preds = %for.cond3
  br label %do.body7

do.body7:                                         ; preds = %for.body6
  store i32 0, i32* %vmp, align 4
  %12 = load i32, i32* %i, align 4
  %conv8 = sext i32 %12 to i64
  call void @_mdr(i32* %vmdr, i32* %vmp, i64 %conv8)
  br label %do.end9

do.end9:                                          ; preds = %do.body7
  %13 = load i32, i32* %vmdr, align 4
  %arrayidx10 = getelementptr inbounds [10 x i32], [10 x i32]* %tfill, i32 0, i32 %13
  %14 = load i32, i32* %arrayidx10, align 4
  %cmp11 = icmp slt i32 %14, 5
  br i1 %cmp11, label %if.then, label %if.end

if.then:                                          ; preds = %do.end9
  %15 = load i32, i32* %i, align 4
  %16 = load i32, i32* %vmdr, align 4
  %arrayidx13 = getelementptr inbounds [10 x [5 x i32]], [10 x [5 x i32]]* %table, i32 0, i32 %16
  %17 = load i32, i32* %vmdr, align 4
  %arrayidx14 = getelementptr inbounds [10 x i32], [10 x i32]* %tfill, i32 0, i32 %17
  %18 = load i32, i32* %arrayidx14, align 4
  %inc15 = add nsw i32 %18, 1
  store i32 %inc15, i32* %arrayidx14, align 4
  %arrayidx16 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx13, i32 0, i32 %18
  store i32 %15, i32* %arrayidx16, align 4
  %19 = load i32, i32* %total, align 4
  %inc17 = add nsw i32 %19, 1
  store i32 %inc17, i32* %total, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %do.end9
  br label %for.inc18

for.inc18:                                        ; preds = %if.end
  %20 = load i32, i32* %i, align 4
  %inc19 = add nsw i32 %20, 1
  store i32 %inc19, i32* %i, align 4
  br label %for.cond3

for.end20:                                        ; preds = %for.cond3
  %call21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond22

for.cond22:                                       ; preds = %for.inc40, %for.end20
  %21 = load i32, i32* %i, align 4
  %cmp23 = icmp slt i32 %21, 10
  br i1 %cmp23, label %for.body25, label %for.end42

for.body25:                                       ; preds = %for.cond22
  %22 = load i32, i32* %i, align 4
  %call26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0), i32 %22)
  store i32 0, i32* %j, align 4
  br label %for.cond27

for.cond27:                                       ; preds = %for.inc36, %for.body25
  %23 = load i32, i32* %j, align 4
  %cmp28 = icmp slt i32 %23, 5
  br i1 %cmp28, label %for.body30, label %for.end38

for.body30:                                       ; preds = %for.cond27
  %24 = load i32, i32* %i, align 4
  %arrayidx31 = getelementptr inbounds [10 x [5 x i32]], [10 x [5 x i32]]* %table, i32 0, i32 %24
  %25 = load i32, i32* %j, align 4
  %arrayidx32 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx31, i32 0, i32 %25
  %26 = load i32, i32* %arrayidx32, align 4
  %27 = load i32, i32* %j, align 4
  %cmp33 = icmp ne i32 %27, 4
  %28 = zext i1 %cmp33 to i64
  %cond = select i1 %cmp33, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.6, i32 0, i32 0)
  %call35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i32 %26, i8* %cond)
  br label %for.inc36

for.inc36:                                        ; preds = %for.body30
  %29 = load i32, i32* %j, align 4
  %inc37 = add nsw i32 %29, 1
  store i32 %inc37, i32* %j, align 4
  br label %for.cond27

for.end38:                                        ; preds = %for.cond27
  %call39 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i32 0, i32 0))
  br label %for.inc40

for.inc40:                                        ; preds = %for.end38
  %30 = load i32, i32* %i, align 4
  %inc41 = add nsw i32 %30, 1
  store i32 %inc41, i32* %i, align 4
  br label %for.cond22

for.end42:                                        ; preds = %for.cond22
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn writeonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i64, i64* %n.addr, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i64 %0, 0
; Looking for a replacement for:
%0:i64 = var
%1:i1 = ne 0:i64, %0
infer %1

; *****
; For LLVM instruction:
;  %cond = select i1 %tobool, i32 1, i32 0
; Looking for a replacement for:
%0:i64 = var
%1:i1 = ne 0:i64, %0 (hasExternalUses)
%2:i32 = select %1, 1:i32, 0:i32
infer %2

; *****
; For LLVM instruction:
;  %2 = load i64, i64* %n.addr, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool1 = icmp ne i64 %2, 0
; Looking for a replacement for:
%0:i64 = var
%1:i1 = ne 0:i64, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i64, i64* %n.addr, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %rem = srem i64 %3, 10
; Looking for a replacement for:
%0:i64 = var
%1:i64 = srem %0, 10:i64
infer %1 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %r, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i32 %4 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0
infer %1 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %mul = mul nsw i64 %conv, %rem
; Looking for a replacement for:
%0:i64 = var
%1:i64 = srem %0, 10:i64
%2:i32 = var
%3:i64 = sext %2
%4:i64 = mulnsw %1, %3
infer %4 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %conv2 = trunc i64 %mul to i32
; Looking for a replacement for:
%0:i64 = var
%1:i64 = srem %0, 10:i64
%2:i32 = var
%3:i64 = sext %2
%4:i64 = mulnsw %1, %3
%5:i32 = trunc %4
infer %5

; *****
; For LLVM instruction:
;  %5 = load i64, i64* %n.addr, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %div = sdiv i64 %5, 10
; Looking for a replacement for:
%0:i64 = var
%1:i64 = sdiv %0, 10:i64
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %6, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %7, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %r, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sge i32 %8, 10
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 10:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %r, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %conv4 = sext i32 %11 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %r, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i64 = var
infer %0


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i1 = ne 0:i64, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i1 = ne 0:i64, %0 (hasExternalUses)
%2:i32 = select %1, 1:i32, 0:i32
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = srem %0, 10:i64
infer %1 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0
infer %1 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = srem %0, 10:i64
%2:i32 = var
%3:i64 = sext %2
%4:i64 = mulnsw %1, %3
infer %4 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i64 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = srem %0, 10:i64
%2:i32 = var
%3:i64 = sext %2
%4:i64 = mulnsw %1, %3
%5:i32 = trunc %4
infer %5


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = sdiv %0, 10:i64
infer %1


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle 10:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0
infer %1


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for _mdr()

; entering Souper's runOnFunction() for main()

; ModuleID = './Digital_root-Multiplicative_digital_root.c.bc'
source_filename = "./Digital_root-Multiplicative_digital_root.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@__const.main.values = private unnamed_addr constant [4 x i32] [i32 123321, i32 7739, i32 893, i32 899998], align 16
@.str = private unnamed_addr constant [21 x i8] c"Number    MDR    MP\0A\00", align 1
@.str.1 = private unnamed_addr constant [17 x i8] c"%6d   %3d   %3d\0A\00", align 1
@.str.2 = private unnamed_addr constant [16 x i8] c"\0AMDR: [n0..n4]\0A\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"%3d: [\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"%d%s\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.6 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.7 = private unnamed_addr constant [3 x i8] c"]\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @_mdr(i32* %rmdr, i32* %rmp, i64 %n) #0 {
entry:
  %rmdr.addr = alloca i32*, align 4
  %rmp.addr = alloca i32*, align 4
  %n.addr = alloca i64, align 8
  %r = alloca i32, align 4
  store i32* %rmdr, i32** %rmdr.addr, align 4
  store i32* %rmp, i32** %rmp.addr, align 4
  store i64 %n, i64* %n.addr, align 8
  %0 = load i64, i64* %n.addr, align 8
  %tobool = icmp ne i64 %0, 0
  %1 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i32 1, i32 0
  store i32 %cond, i32* %r, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %2 = load i64, i64* %n.addr, align 8
  %tobool1 = icmp ne i64 %2, 0
  br i1 %tobool1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i64, i64* %n.addr, align 8
  %rem = srem i64 %3, 10
  %4 = load i32, i32* %r, align 4
  %conv = sext i32 %4 to i64
  %mul = mul nsw i64 %conv, %rem
  %conv2 = trunc i64 %mul to i32
  store i32 %conv2, i32* %r, align 4
  %5 = load i64, i64* %n.addr, align 8
  %div = sdiv i64 %5, 10
  store i64 %div, i64* %n.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %6 = load i32*, i32** %rmp.addr, align 4
  %7 = load i32, i32* %6, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %6, align 4
  %8 = load i32, i32* %r, align 4
  %cmp = icmp sge i32 %8, 10
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %while.end
  %9 = load i32*, i32** %rmdr.addr, align 4
  %10 = load i32*, i32** %rmp.addr, align 4
  %11 = load i32, i32* %r, align 4
  %conv4 = sext i32 %11 to i64
  call void @_mdr(i32* %9, i32* %10, i64 %conv4)
  br label %if.end

if.else:                                          ; preds = %while.end
  %12 = load i32, i32* %r, align 4
  %13 = load i32*, i32** %rmdr.addr, align 4
  store i32 %12, i32* %13, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %vmdr = alloca i32, align 4
  %vmp = alloca i32, align 4
  %values = alloca [4 x i32], align 16
  %vsize = alloca i32, align 4
  %table = alloca [10 x [5 x i32]], align 16
  %tfill = alloca [10 x i32], align 16
  %total = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [4 x i32]* %values to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([4 x i32]* @__const.main.values to i8*), i32 16, i1 false)
  store i32 4, i32* %vsize, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %1, 4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %do.body

do.body:                                          ; preds = %for.body
  store i32 0, i32* %vmp, align 4
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* %values, i32 0, i32 %2
  %3 = load i32, i32* %arrayidx, align 4
  %conv = sext i32 %3 to i64
  call void @_mdr(i32* %vmdr, i32* %vmp, i64 %conv)
  br label %do.end

do.end:                                           ; preds = %do.body
  %4 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [4 x i32], [4 x i32]* %values, i32 0, i32 %4
  %5 = load i32, i32* %arrayidx1, align 4
  %6 = load i32, i32* %vmdr, align 4
  %7 = load i32, i32* %vmp, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i32 0, i32 0), i32 %5, i32 %6, i32 %7)
  br label %for.inc

for.inc:                                          ; preds = %do.end
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %9 = bitcast [10 x [5 x i32]]* %table to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %9, i8 0, i32 200, i1 false)
  %10 = bitcast [10 x i32]* %tfill to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %10, i8 0, i32 40, i1 false)
  store i32 0, i32* %total, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc18, %for.end
  %11 = load i32, i32* %total, align 4
  %cmp4 = icmp slt i32 %11, 50
  br i1 %cmp4, label %for.body6, label %for.end20

for.body6:                                        ; preds = %for.cond3
  br label %do.body7

do.body7:                                         ; preds = %for.body6
  store i32 0, i32* %vmp, align 4
  %12 = load i32, i32* %i, align 4
  %conv8 = sext i32 %12 to i64
  call void @_mdr(i32* %vmdr, i32* %vmp, i64 %conv8)
  br label %do.end9

do.end9:                                          ; preds = %do.body7
  %13 = load i32, i32* %vmdr, align 4
  %arrayidx10 = getelementptr inbounds [10 x i32], [10 x i32]* %tfill, i32 0, i32 %13
  %14 = load i32, i32* %arrayidx10, align 4
  %cmp11 = icmp slt i32 %14, 5
  br i1 %cmp11, label %if.then, label %if.end

if.then:                                          ; preds = %do.end9
  %15 = load i32, i32* %i, align 4
  %16 = load i32, i32* %vmdr, align 4
  %arrayidx13 = getelementptr inbounds [10 x [5 x i32]], [10 x [5 x i32]]* %table, i32 0, i32 %16
  %17 = load i32, i32* %vmdr, align 4
  %arrayidx14 = getelementptr inbounds [10 x i32], [10 x i32]* %tfill, i32 0, i32 %17
  %18 = load i32, i32* %arrayidx14, align 4
  %inc15 = add nsw i32 %18, 1
  store i32 %inc15, i32* %arrayidx14, align 4
  %arrayidx16 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx13, i32 0, i32 %18
  store i32 %15, i32* %arrayidx16, align 4
  %19 = load i32, i32* %total, align 4
  %inc17 = add nsw i32 %19, 1
  store i32 %inc17, i32* %total, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %do.end9
  br label %for.inc18

for.inc18:                                        ; preds = %if.end
  %20 = load i32, i32* %i, align 4
  %inc19 = add nsw i32 %20, 1
  store i32 %inc19, i32* %i, align 4
  br label %for.cond3

for.end20:                                        ; preds = %for.cond3
  %call21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond22

for.cond22:                                       ; preds = %for.inc40, %for.end20
  %21 = load i32, i32* %i, align 4
  %cmp23 = icmp slt i32 %21, 10
  br i1 %cmp23, label %for.body25, label %for.end42

for.body25:                                       ; preds = %for.cond22
  %22 = load i32, i32* %i, align 4
  %call26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0), i32 %22)
  store i32 0, i32* %j, align 4
  br label %for.cond27

for.cond27:                                       ; preds = %for.inc36, %for.body25
  %23 = load i32, i32* %j, align 4
  %cmp28 = icmp slt i32 %23, 5
  br i1 %cmp28, label %for.body30, label %for.end38

for.body30:                                       ; preds = %for.cond27
  %24 = load i32, i32* %i, align 4
  %arrayidx31 = getelementptr inbounds [10 x [5 x i32]], [10 x [5 x i32]]* %table, i32 0, i32 %24
  %25 = load i32, i32* %j, align 4
  %arrayidx32 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx31, i32 0, i32 %25
  %26 = load i32, i32* %arrayidx32, align 4
  %27 = load i32, i32* %j, align 4
  %cmp33 = icmp ne i32 %27, 4
  %28 = zext i1 %cmp33 to i64
  %cond = select i1 %cmp33, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.6, i32 0, i32 0)
  %call35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i32 %26, i8* %cond)
  br label %for.inc36

for.inc36:                                        ; preds = %for.body30
  %29 = load i32, i32* %j, align 4
  %inc37 = add nsw i32 %29, 1
  store i32 %inc37, i32* %j, align 4
  br label %for.cond27

for.end38:                                        ; preds = %for.cond27
  %call39 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i32 0, i32 0))
  br label %for.inc40

for.inc40:                                        ; preds = %for.end38
  %30 = load i32, i32* %i, align 4
  %inc41 = add nsw i32 %30, 1
  store i32 %inc41, i32* %i, align 4
  br label %for.cond22

for.end42:                                        ; preds = %for.cond22
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn writeonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %1, 4
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 4:i32
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i32 %3 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %arrayidx1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %vmdr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %vmp, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %8, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %total, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp4 = icmp slt i32 %11, 50
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 50:i32
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %conv8 = sext i32 %12 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %vmdr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %arrayidx10, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp11 = icmp slt i32 %14, 5
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 5:i32
infer %1

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %vmdr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %vmdr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %arrayidx14, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc15 = add nsw i32 %18, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %total, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc17 = add nsw i32 %19, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc19 = add nsw i32 %20, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp23 = icmp slt i32 %21, 10
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 10:i32
infer %1

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp28 = icmp slt i32 %23, 5
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 5:i32
infer %1

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %arrayidx32, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp33 = icmp ne i32 %27, 4
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc37 = add nsw i32 %29, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc41 = add nsw i32 %30, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 4:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 50:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 5:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 10:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 4:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
