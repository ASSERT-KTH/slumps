
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for anynacci()

; ModuleID = './Fibonacci_n-step_number_sequences.c.bc'
source_filename = "./Fibonacci_n-step_number_sequences.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@__const.main.fibo = private unnamed_addr constant [3 x i32] [i32 1, i32 1, i32 0], align 4
@__const.main.tribo = private unnamed_addr constant [4 x i32] [i32 1, i32 1, i32 2, i32 0], align 16
@__const.main.tetra = private unnamed_addr constant [5 x i32] [i32 1, i32 1, i32 2, i32 4, i32 0], align 16
@__const.main.luca = private unnamed_addr constant [3 x i32] [i32 2, i32 1, i32 0], align 4
@.str = private unnamed_addr constant [40 x i8] c"\0AFibonacci\09Tribonacci\09Tetranacci\09Lucas\0A\00", align 1
@.str.1 = private unnamed_addr constant [16 x i8] c"\0A%d\09\09%d\09\09%d\09\09%d\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32* @anynacci(i32* %seedArray, i32 %howMany) #0 {
entry:
  %seedArray.addr = alloca i32*, align 4
  %howMany.addr = alloca i32, align 4
  %result = alloca i32*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %initialCardinality = alloca i32, align 4
  store i32* %seedArray, i32** %seedArray.addr, align 4
  store i32 %howMany, i32* %howMany.addr, align 4
  %0 = load i32, i32* %howMany.addr, align 4
  %mul = mul i32 %0, 4
  %call = call noalias i8* @malloc(i32 %mul)
  %1 = bitcast i8* %call to i32*
  store i32* %1, i32** %result, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32*, i32** %seedArray.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %2, i32 %3
  %4 = load i32, i32* %arrayidx, align 4
  %cmp = icmp ne i32 %4, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %6 = load i32, i32* %i, align 4
  store i32 %6, i32* %initialCardinality, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc6, %for.end
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %initialCardinality, align 4
  %cmp2 = icmp slt i32 %7, %8
  br i1 %cmp2, label %for.body3, label %for.end8

for.body3:                                        ; preds = %for.cond1
  %9 = load i32*, i32** %seedArray.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %9, i32 %10
  %11 = load i32, i32* %arrayidx4, align 4
  %12 = load i32*, i32** %result, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %12, i32 %13
  store i32 %11, i32* %arrayidx5, align 4
  br label %for.inc6

for.inc6:                                         ; preds = %for.body3
  %14 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %14, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond1

for.end8:                                         ; preds = %for.cond1
  %15 = load i32, i32* %initialCardinality, align 4
  store i32 %15, i32* %i, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc21, %for.end8
  %16 = load i32, i32* %i, align 4
  %17 = load i32, i32* %howMany.addr, align 4
  %cmp10 = icmp slt i32 %16, %17
  br i1 %cmp10, label %for.body11, label %for.end23

for.body11:                                       ; preds = %for.cond9
  %18 = load i32*, i32** %result, align 4
  %19 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds i32, i32* %18, i32 %19
  store i32 0, i32* %arrayidx12, align 4
  %20 = load i32, i32* %i, align 4
  %21 = load i32, i32* %initialCardinality, align 4
  %sub = sub nsw i32 %20, %21
  store i32 %sub, i32* %j, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc18, %for.body11
  %22 = load i32, i32* %j, align 4
  %23 = load i32, i32* %i, align 4
  %cmp14 = icmp slt i32 %22, %23
  br i1 %cmp14, label %for.body15, label %for.end20

for.body15:                                       ; preds = %for.cond13
  %24 = load i32*, i32** %result, align 4
  %25 = load i32, i32* %j, align 4
  %arrayidx16 = getelementptr inbounds i32, i32* %24, i32 %25
  %26 = load i32, i32* %arrayidx16, align 4
  %27 = load i32*, i32** %result, align 4
  %28 = load i32, i32* %i, align 4
  %arrayidx17 = getelementptr inbounds i32, i32* %27, i32 %28
  %29 = load i32, i32* %arrayidx17, align 4
  %add = add nsw i32 %29, %26
  store i32 %add, i32* %arrayidx17, align 4
  br label %for.inc18

for.inc18:                                        ; preds = %for.body15
  %30 = load i32, i32* %j, align 4
  %inc19 = add nsw i32 %30, 1
  store i32 %inc19, i32* %j, align 4
  br label %for.cond13

for.end20:                                        ; preds = %for.cond13
  br label %for.inc21

for.inc21:                                        ; preds = %for.end20
  %31 = load i32, i32* %i, align 4
  %inc22 = add nsw i32 %31, 1
  store i32 %inc22, i32* %i, align 4
  br label %for.cond9

for.end23:                                        ; preds = %for.cond9
  %32 = load i32*, i32** %result, align 4
  ret i32* %32
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %fibo = alloca [3 x i32], align 4
  %tribo = alloca [4 x i32], align 16
  %tetra = alloca [5 x i32], align 16
  %luca = alloca [3 x i32], align 4
  %fibonacci = alloca i32*, align 4
  %tribonacci = alloca i32*, align 4
  %tetranacci = alloca i32*, align 4
  %lucas = alloca i32*, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [3 x i32]* %fibo to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 bitcast ([3 x i32]* @__const.main.fibo to i8*), i32 12, i1 false)
  %1 = bitcast [4 x i32]* %tribo to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %1, i8* align 16 bitcast ([4 x i32]* @__const.main.tribo to i8*), i32 16, i1 false)
  %2 = bitcast [5 x i32]* %tetra to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %2, i8* align 16 bitcast ([5 x i32]* @__const.main.tetra to i8*), i32 20, i1 false)
  %3 = bitcast [3 x i32]* %luca to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %3, i8* align 4 bitcast ([3 x i32]* @__const.main.luca to i8*), i32 12, i1 false)
  %arraydecay = getelementptr inbounds [3 x i32], [3 x i32]* %fibo, i32 0, i32 0
  %call = call i32* @anynacci(i32* %arraydecay, i32 10)
  store i32* %call, i32** %fibonacci, align 4
  %arraydecay1 = getelementptr inbounds [4 x i32], [4 x i32]* %tribo, i32 0, i32 0
  %call2 = call i32* @anynacci(i32* %arraydecay1, i32 10)
  store i32* %call2, i32** %tribonacci, align 4
  %arraydecay3 = getelementptr inbounds [5 x i32], [5 x i32]* %tetra, i32 0, i32 0
  %call4 = call i32* @anynacci(i32* %arraydecay3, i32 10)
  store i32* %call4, i32** %tetranacci, align 4
  %arraydecay5 = getelementptr inbounds [3 x i32], [3 x i32]* %luca, i32 0, i32 0
  %call6 = call i32* @anynacci(i32* %arraydecay5, i32 10)
  store i32* %call6, i32** %lucas, align 4
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %4, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i32*, i32** %fibonacci, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %5, i32 %6
  %7 = load i32, i32* %arrayidx, align 4
  %8 = load i32*, i32** %tribonacci, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %8, i32 %9
  %10 = load i32, i32* %arrayidx8, align 4
  %11 = load i32*, i32** %tetranacci, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds i32, i32* %11, i32 %12
  %13 = load i32, i32* %arrayidx9, align 4
  %14 = load i32*, i32** %lucas, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %14, i32 %15
  %16 = load i32, i32* %arrayidx10, align 4
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i32 0, i32 0), i32 %7, i32 %10, i32 %13, i32 %16)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %17 = load i32, i32* %i, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %howMany.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul i32 %0, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ne i32 %4, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %5, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %initialCardinality, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp slt i32 %7, %8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %arrayidx4, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc7 = add nsw i32 %14, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %initialCardinality, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %howMany.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp10 = icmp slt i32 %16, %17
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %initialCardinality, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %20, %21
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp14 = icmp slt i32 %22, %23
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %arrayidx16, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %arrayidx17, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %29, %26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc19 = add nsw i32 %30, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc22 = add nsw i32 %31, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147418112
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for anynacci()

; entering Souper's runOnFunction() for main()

; ModuleID = './Fibonacci_n-step_number_sequences.c.bc'
source_filename = "./Fibonacci_n-step_number_sequences.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@__const.main.fibo = private unnamed_addr constant [3 x i32] [i32 1, i32 1, i32 0], align 4
@__const.main.tribo = private unnamed_addr constant [4 x i32] [i32 1, i32 1, i32 2, i32 0], align 16
@__const.main.tetra = private unnamed_addr constant [5 x i32] [i32 1, i32 1, i32 2, i32 4, i32 0], align 16
@__const.main.luca = private unnamed_addr constant [3 x i32] [i32 2, i32 1, i32 0], align 4
@.str = private unnamed_addr constant [40 x i8] c"\0AFibonacci\09Tribonacci\09Tetranacci\09Lucas\0A\00", align 1
@.str.1 = private unnamed_addr constant [16 x i8] c"\0A%d\09\09%d\09\09%d\09\09%d\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32* @anynacci(i32* %seedArray, i32 %howMany) #0 {
entry:
  %seedArray.addr = alloca i32*, align 4
  %howMany.addr = alloca i32, align 4
  %result = alloca i32*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %initialCardinality = alloca i32, align 4
  store i32* %seedArray, i32** %seedArray.addr, align 4
  store i32 %howMany, i32* %howMany.addr, align 4
  %0 = load i32, i32* %howMany.addr, align 4
  %mul = mul i32 %0, 4
  %call = call noalias i8* @malloc(i32 %mul)
  %1 = bitcast i8* %call to i32*
  store i32* %1, i32** %result, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32*, i32** %seedArray.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %2, i32 %3
  %4 = load i32, i32* %arrayidx, align 4
  %cmp = icmp ne i32 %4, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %6 = load i32, i32* %i, align 4
  store i32 %6, i32* %initialCardinality, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc6, %for.end
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %initialCardinality, align 4
  %cmp2 = icmp slt i32 %7, %8
  br i1 %cmp2, label %for.body3, label %for.end8

for.body3:                                        ; preds = %for.cond1
  %9 = load i32*, i32** %seedArray.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %9, i32 %10
  %11 = load i32, i32* %arrayidx4, align 4
  %12 = load i32*, i32** %result, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %12, i32 %13
  store i32 %11, i32* %arrayidx5, align 4
  br label %for.inc6

for.inc6:                                         ; preds = %for.body3
  %14 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %14, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond1

for.end8:                                         ; preds = %for.cond1
  %15 = load i32, i32* %initialCardinality, align 4
  store i32 %15, i32* %i, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc21, %for.end8
  %16 = load i32, i32* %i, align 4
  %17 = load i32, i32* %howMany.addr, align 4
  %cmp10 = icmp slt i32 %16, %17
  br i1 %cmp10, label %for.body11, label %for.end23

for.body11:                                       ; preds = %for.cond9
  %18 = load i32*, i32** %result, align 4
  %19 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds i32, i32* %18, i32 %19
  store i32 0, i32* %arrayidx12, align 4
  %20 = load i32, i32* %i, align 4
  %21 = load i32, i32* %initialCardinality, align 4
  %sub = sub nsw i32 %20, %21
  store i32 %sub, i32* %j, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc18, %for.body11
  %22 = load i32, i32* %j, align 4
  %23 = load i32, i32* %i, align 4
  %cmp14 = icmp slt i32 %22, %23
  br i1 %cmp14, label %for.body15, label %for.end20

for.body15:                                       ; preds = %for.cond13
  %24 = load i32*, i32** %result, align 4
  %25 = load i32, i32* %j, align 4
  %arrayidx16 = getelementptr inbounds i32, i32* %24, i32 %25
  %26 = load i32, i32* %arrayidx16, align 4
  %27 = load i32*, i32** %result, align 4
  %28 = load i32, i32* %i, align 4
  %arrayidx17 = getelementptr inbounds i32, i32* %27, i32 %28
  %29 = load i32, i32* %arrayidx17, align 4
  %add = add nsw i32 %29, %26
  store i32 %add, i32* %arrayidx17, align 4
  br label %for.inc18

for.inc18:                                        ; preds = %for.body15
  %30 = load i32, i32* %j, align 4
  %inc19 = add nsw i32 %30, 1
  store i32 %inc19, i32* %j, align 4
  br label %for.cond13

for.end20:                                        ; preds = %for.cond13
  br label %for.inc21

for.inc21:                                        ; preds = %for.end20
  %31 = load i32, i32* %i, align 4
  %inc22 = add nsw i32 %31, 1
  store i32 %inc22, i32* %i, align 4
  br label %for.cond9

for.end23:                                        ; preds = %for.cond9
  %32 = load i32*, i32** %result, align 4
  ret i32* %32
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %fibo = alloca [3 x i32], align 4
  %tribo = alloca [4 x i32], align 16
  %tetra = alloca [5 x i32], align 16
  %luca = alloca [3 x i32], align 4
  %fibonacci = alloca i32*, align 4
  %tribonacci = alloca i32*, align 4
  %tetranacci = alloca i32*, align 4
  %lucas = alloca i32*, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [3 x i32]* %fibo to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 bitcast ([3 x i32]* @__const.main.fibo to i8*), i32 12, i1 false)
  %1 = bitcast [4 x i32]* %tribo to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %1, i8* align 16 bitcast ([4 x i32]* @__const.main.tribo to i8*), i32 16, i1 false)
  %2 = bitcast [5 x i32]* %tetra to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %2, i8* align 16 bitcast ([5 x i32]* @__const.main.tetra to i8*), i32 20, i1 false)
  %3 = bitcast [3 x i32]* %luca to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %3, i8* align 4 bitcast ([3 x i32]* @__const.main.luca to i8*), i32 12, i1 false)
  %arraydecay = getelementptr inbounds [3 x i32], [3 x i32]* %fibo, i32 0, i32 0
  %call = call i32* @anynacci(i32* %arraydecay, i32 10)
  store i32* %call, i32** %fibonacci, align 4
  %arraydecay1 = getelementptr inbounds [4 x i32], [4 x i32]* %tribo, i32 0, i32 0
  %call2 = call i32* @anynacci(i32* %arraydecay1, i32 10)
  store i32* %call2, i32** %tribonacci, align 4
  %arraydecay3 = getelementptr inbounds [5 x i32], [5 x i32]* %tetra, i32 0, i32 0
  %call4 = call i32* @anynacci(i32* %arraydecay3, i32 10)
  store i32* %call4, i32** %tetranacci, align 4
  %arraydecay5 = getelementptr inbounds [3 x i32], [3 x i32]* %luca, i32 0, i32 0
  %call6 = call i32* @anynacci(i32* %arraydecay5, i32 10)
  store i32* %call6, i32** %lucas, align 4
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %4, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i32*, i32** %fibonacci, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %5, i32 %6
  %7 = load i32, i32* %arrayidx, align 4
  %8 = load i32*, i32** %tribonacci, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %8, i32 %9
  %10 = load i32, i32* %arrayidx8, align 4
  %11 = load i32*, i32** %tetranacci, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds i32, i32* %11, i32 %12
  %13 = load i32, i32* %arrayidx9, align 4
  %14 = load i32*, i32** %lucas, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %14, i32 %15
  %16 = load i32, i32* %arrayidx10, align 4
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i32 0, i32 0), i32 %7, i32 %10, i32 %13, i32 %16)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %17 = load i32, i32* %i, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %4, 10
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 10:i32
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %arrayidx8, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %arrayidx9, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %arrayidx10, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %17, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 10:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
