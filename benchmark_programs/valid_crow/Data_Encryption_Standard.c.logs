
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for encrypt()

; ModuleID = './Data_Encryption_Standard.c.bc'
source_filename = "./Data_Encryption_Standard.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.String = type { i8*, i32 }

@.str = private unnamed_addr constant [14 x i8] c"Key     : %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"Message : %s\0A\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"Encoded : %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"Decoded : %s\0A\0A\00", align 1
@__const.main.keys = private unnamed_addr constant [3 x [8 x i8]] [[8 x i8] c"\134Wy\9B\BC\DF\F1", [8 x i8] c"\0E2\922\EAm\0Ds", [8 x i8] c"\0E2\922\EAm\0Ds"], align 16
@__const.main.message1 = private unnamed_addr constant [8 x i8] c"\01#Eg\89\AB\CD\EF", align 1
@__const.main.message2 = private unnamed_addr constant [8 x i8] c"\87\87\87\87\87\87\87\87", align 1
@__const.main.message3 = private unnamed_addr constant [38 x i8] c"Your lips are smoother than vaseline\0D\0A", align 16
@PC1 = internal constant [56 x i8] c"91)!\19\11\09\01:2*\22\1A\12\0A\02;3+#\1B\13\0B\03<4,$?7/'\1F\17\0F\07>6.&\1E\16\0E\06=5-%\1D\15\0D\05\1C\14\0C\04", align 16
@SHIFTS = internal constant [16 x i8] c"\01\01\02\02\02\02\02\02\01\02\02\02\02\02\02\01", align 16
@PC2 = internal constant [48 x i8] c"\0E\11\0B\18\01\05\03\1C\0F\06\15\0A\17\13\0C\04\1A\08\10\07\1B\14\0D\02)4\1F%/7\1E(3-!0,1'8\225.*2$\1D ", align 16
@IP = internal constant [64 x i8] c":2*\22\1A\12\0A\02<4,$\1C\14\0C\04>6.&\1E\16\0E\06@80( \18\10\0891)!\19\11\09\01;3+#\1B\13\0B\03=5-%\1D\15\0D\05?7/'\1F\17\0F\07", align 16
@IP2 = internal constant [64 x i8] c"(\080\108\18@ '\07/\0F7\17?\1F&\06.\0E6\16>\1E%\05-\0D5\15=\1D$\04,\0C4\14<\1C#\03+\0B3\13;\1B\22\02*\0A2\12:\1A!\01)\091\119\19", align 16
@E = internal constant [48 x i8] c" \01\02\03\04\05\04\05\06\07\08\09\08\09\0A\0B\0C\0D\0C\0D\0E\0F\10\11\10\11\12\13\14\15\14\15\16\17\18\19\18\19\1A\1B\1C\1D\1C\1D\1E\1F \01", align 16
@S = internal constant [8 x [64 x i8]] [[64 x i8] c"\0E\04\0D\01\02\0F\0B\08\03\0A\06\0C\05\09\00\07\00\0F\07\04\0E\02\0D\01\0A\06\0C\0B\09\05\03\08\04\01\0E\08\0D\06\02\0B\0F\0C\09\07\03\0A\05\00\0F\0C\08\02\04\09\01\07\05\0B\03\0E\0A\00\06\0D", [64 x i8] c"\0F\01\08\0E\06\0B\03\04\09\07\02\0D\0C\00\05\0A\03\0D\04\07\0F\02\08\0E\0C\00\01\0A\06\09\0B\05\00\0E\07\0B\0A\04\0D\01\05\08\0C\06\09\03\02\0F\0D\08\0A\01\03\0F\04\02\0B\06\07\0C\00\05\0E\09", [64 x i8] c"\0A\00\09\0E\06\03\0F\05\01\0D\0C\07\0B\04\02\08\0D\07\00\09\03\04\06\0A\02\08\05\0E\0C\0B\0F\01\0D\06\04\09\08\0F\03\00\0B\01\02\0C\05\0A\0E\07\01\0A\0D\00\06\09\08\07\04\0F\0E\03\0B\05\02\0C", [64 x i8] c"\07\0D\0E\03\00\06\09\0A\01\02\08\05\0B\0C\04\0F\0D\08\0B\05\06\0F\00\03\04\07\02\0C\01\0A\0E\09\0A\06\09\00\0C\0B\07\0D\0F\01\03\0E\05\02\08\04\03\0F\00\06\0A\01\0D\08\09\04\05\0B\0C\07\02\0E", [64 x i8] c"\02\0C\04\01\07\0A\0B\06\08\05\03\0F\0D\00\0E\09\0E\0B\02\0C\04\07\0D\01\05\00\0F\0A\03\09\08\06\04\02\01\0B\0A\0D\07\08\0F\09\0C\05\06\03\00\0E\0B\08\0C\07\01\0E\02\0D\06\0F\00\09\0A\04\05\03", [64 x i8] c"\0C\01\0A\0F\09\02\06\08\00\0D\03\04\0E\07\05\0B\0A\0F\04\02\07\0C\09\05\06\01\0D\0E\00\0B\03\08\09\0E\0F\05\02\08\0C\03\07\00\04\0A\01\0D\0B\06\04\03\02\0C\09\05\0F\0A\0B\0E\01\07\06\00\08\0D", [64 x i8] c"\04\0B\02\0E\0F\00\08\0D\03\0C\09\07\05\0A\06\01\0D\00\0B\07\04\09\01\0A\0E\03\05\0C\02\0F\08\06\01\04\0B\0D\0C\03\07\0E\0A\0F\06\08\00\05\09\02\06\0B\0D\08\01\04\0A\07\09\05\00\0F\0E\02\03\0C", [64 x i8] c"\0D\02\08\04\06\0F\0B\01\0A\09\03\0E\05\00\0C\07\01\0F\0D\08\0A\03\07\04\0C\05\06\0B\00\0E\09\02\07\0B\04\01\09\0C\0E\02\00\06\0A\0D\0F\03\05\08\02\01\0E\07\04\0A\08\0D\0F\0C\09\00\03\05\06\0B"], align 16
@P = internal constant [32 x i8] c"\10\07\14\15\1D\0C\1C\11\01\0F\17\1A\05\12\1F\0A\02\08\18\0E \1B\03\09\13\0D\1E\06\16\0B\04\19", align 16
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @encrypt(%struct.String* noalias sret align 4 %agg.result, i8* %key, i8* %message, i32 %len) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %message.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %ks = alloca [17 x [6 x i8]], align 16
  %padByte = alloca i8, align 1
  %i = alloca i32, align 4
  store i8* %key, i8** %key.addr, align 4
  store i8* %message, i8** %message.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = bitcast %struct.String* %agg.result to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  %1 = load i8*, i8** %key.addr, align 4
  %arraydecay = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  call void @getSubKeys(i8* %1, [6 x i8]* %arraydecay)
  %2 = load i32, i32* %len.addr, align 4
  %rem = srem i32 %2, 8
  %sub = sub nsw i32 8, %rem
  %conv = trunc i32 %sub to i8
  store i8 %conv, i8* %padByte, align 1
  %3 = load i32, i32* %len.addr, align 4
  %4 = load i8, i8* %padByte, align 1
  %conv1 = zext i8 %4 to i32
  %add = add nsw i32 %3, %conv1
  %len2 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  store i32 %add, i32* %len2, align 4
  %len3 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %5 = load i32, i32* %len3, align 4
  %call = call noalias i8* @malloc(i32 %5)
  %data = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  store i8* %call, i8** %data, align 4
  %data4 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %6 = load i8*, i8** %data4, align 4
  %7 = load i8*, i8** %message.addr, align 4
  %8 = load i32, i32* %len.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %6, i8* align 1 %7, i32 %8, i1 false)
  %data5 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %9 = load i8*, i8** %data5, align 4
  %10 = load i32, i32* %len.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %9, i32 %10
  %11 = load i8, i8* %padByte, align 1
  %conv6 = zext i8 %11 to i32
  %12 = trunc i32 %conv6 to i8
  %13 = load i8, i8* %padByte, align 1
  %conv7 = zext i8 %13 to i32
  call void @llvm.memset.p0i8.i32(i8* align 1 %arrayidx, i8 %12, i32 %conv7, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %14 = load i32, i32* %i, align 4
  %len8 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %15 = load i32, i32* %len8, align 4
  %cmp = icmp slt i32 %14, %15
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %data10 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %16 = load i8*, i8** %data10, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds i8, i8* %16, i32 %17
  %arraydecay12 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  %data13 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %18 = load i8*, i8** %data13, align 4
  %19 = load i32, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds i8, i8* %18, i32 %19
  call void @processMessage(i8* %arrayidx11, [6 x i8]* %arraydecay12, i8* %arrayidx14)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %20 = load i32, i32* %i, align 4
  %add15 = add nsw i32 %20, 8
  store i32 %add15, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define internal void @getSubKeys(i8* %key, [6 x i8]* %ks) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %ks.addr = alloca [6 x i8]*, align 4
  %c = alloca [17 x [7 x i8]], align 16
  %d = alloca [17 x [4 x i8]], align 16
  %kp = alloca [7 x i8], align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i8* %key, i8** %key.addr, align 4
  store [6 x i8]* %ks, [6 x i8]** %ks.addr, align 4
  %arraydecay = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 0
  %0 = bitcast [7 x i8]* %arraydecay to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 119, i1 false)
  %arraydecay1 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 0
  %1 = bitcast [4 x i8]* %arraydecay1 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %1, i8 0, i32 68, i1 false)
  %2 = load [6 x i8]*, [6 x i8]** %ks.addr, align 4
  %3 = bitcast [6 x i8]* %2 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 1 %3, i8 0, i32 102, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %4, 56
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay2 = getelementptr inbounds [7 x i8], [7 x i8]* %kp, i32 0, i32 0
  %5 = load i32, i32* %i, align 4
  %6 = load i8*, i8** %key.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [56 x i8], [56 x i8]* @PC1, i32 0, i32 %7
  %8 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %8 to i32
  %sub = sub nsw i32 %conv, 1
  %call = call i32 @peekBit(i8* %6, i32 %sub)
  call void @pokeBit(i8* %arraydecay2, i32 %5, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc15, %for.end
  %10 = load i32, i32* %i, align 4
  %cmp4 = icmp slt i32 %10, 28
  br i1 %cmp4, label %for.body6, label %for.end17

for.body6:                                        ; preds = %for.cond3
  %arrayidx7 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 0
  %arraydecay8 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx7, i32 0, i32 0
  %11 = load i32, i32* %i, align 4
  %arraydecay9 = getelementptr inbounds [7 x i8], [7 x i8]* %kp, i32 0, i32 0
  %12 = load i32, i32* %i, align 4
  %call10 = call i32 @peekBit(i8* %arraydecay9, i32 %12)
  call void @pokeBit(i8* %arraydecay8, i32 %11, i32 %call10)
  %arrayidx11 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 0
  %arraydecay12 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx11, i32 0, i32 0
  %13 = load i32, i32* %i, align 4
  %arraydecay13 = getelementptr inbounds [7 x i8], [7 x i8]* %kp, i32 0, i32 0
  %14 = load i32, i32* %i, align 4
  %add = add nsw i32 %14, 28
  %call14 = call i32 @peekBit(i8* %arraydecay13, i32 %add)
  call void @pokeBit(i8* %arraydecay12, i32 %13, i32 %call14)
  br label %for.inc15

for.inc15:                                        ; preds = %for.body6
  %15 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %15, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond3

for.end17:                                        ; preds = %for.cond3
  store i32 1, i32* %i, align 4
  br label %for.cond18

for.cond18:                                       ; preds = %for.inc38, %for.end17
  %16 = load i32, i32* %i, align 4
  %cmp19 = icmp slt i32 %16, 17
  br i1 %cmp19, label %for.body21, label %for.end40

for.body21:                                       ; preds = %for.cond18
  %17 = load i32, i32* %i, align 4
  %sub22 = sub nsw i32 %17, 1
  %arrayidx23 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %sub22
  %arraydecay24 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx23, i32 0, i32 0
  %18 = load i32, i32* %i, align 4
  %sub25 = sub nsw i32 %18, 1
  %arrayidx26 = getelementptr inbounds [16 x i8], [16 x i8]* @SHIFTS, i32 0, i32 %sub25
  %19 = load i8, i8* %arrayidx26, align 1
  %conv27 = zext i8 %19 to i32
  %20 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %20
  %arraydecay29 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx28, i32 0, i32 0
  call void @shiftLeft(i8* %arraydecay24, i32 28, i32 %conv27, i8* %arraydecay29)
  %21 = load i32, i32* %i, align 4
  %sub30 = sub nsw i32 %21, 1
  %arrayidx31 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 %sub30
  %arraydecay32 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx31, i32 0, i32 0
  %22 = load i32, i32* %i, align 4
  %sub33 = sub nsw i32 %22, 1
  %arrayidx34 = getelementptr inbounds [16 x i8], [16 x i8]* @SHIFTS, i32 0, i32 %sub33
  %23 = load i8, i8* %arrayidx34, align 1
  %conv35 = zext i8 %23 to i32
  %24 = load i32, i32* %i, align 4
  %arrayidx36 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 %24
  %arraydecay37 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx36, i32 0, i32 0
  call void @shiftLeft(i8* %arraydecay32, i32 28, i32 %conv35, i8* %arraydecay37)
  br label %for.inc38

for.inc38:                                        ; preds = %for.body21
  %25 = load i32, i32* %i, align 4
  %inc39 = add nsw i32 %25, 1
  store i32 %inc39, i32* %i, align 4
  br label %for.cond18

for.end40:                                        ; preds = %for.cond18
  store i32 1, i32* %i, align 4
  br label %for.cond41

for.cond41:                                       ; preds = %for.inc58, %for.end40
  %26 = load i32, i32* %i, align 4
  %cmp42 = icmp slt i32 %26, 17
  br i1 %cmp42, label %for.body44, label %for.end60

for.body44:                                       ; preds = %for.cond41
  store i32 28, i32* %j, align 4
  br label %for.cond45

for.cond45:                                       ; preds = %for.inc55, %for.body44
  %27 = load i32, i32* %j, align 4
  %cmp46 = icmp slt i32 %27, 56
  br i1 %cmp46, label %for.body48, label %for.end57

for.body48:                                       ; preds = %for.cond45
  %28 = load i32, i32* %i, align 4
  %arrayidx49 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %28
  %arraydecay50 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx49, i32 0, i32 0
  %29 = load i32, i32* %j, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx51 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 %30
  %arraydecay52 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx51, i32 0, i32 0
  %31 = load i32, i32* %j, align 4
  %sub53 = sub nsw i32 %31, 28
  %call54 = call i32 @peekBit(i8* %arraydecay52, i32 %sub53)
  call void @pokeBit(i8* %arraydecay50, i32 %29, i32 %call54)
  br label %for.inc55

for.inc55:                                        ; preds = %for.body48
  %32 = load i32, i32* %j, align 4
  %inc56 = add nsw i32 %32, 1
  store i32 %inc56, i32* %j, align 4
  br label %for.cond45

for.end57:                                        ; preds = %for.cond45
  br label %for.inc58

for.inc58:                                        ; preds = %for.end57
  %33 = load i32, i32* %i, align 4
  %inc59 = add nsw i32 %33, 1
  store i32 %inc59, i32* %i, align 4
  br label %for.cond41

for.end60:                                        ; preds = %for.cond41
  store i32 1, i32* %i, align 4
  br label %for.cond61

for.cond61:                                       ; preds = %for.inc80, %for.end60
  %34 = load i32, i32* %i, align 4
  %cmp62 = icmp slt i32 %34, 17
  br i1 %cmp62, label %for.body64, label %for.end82

for.body64:                                       ; preds = %for.cond61
  store i32 0, i32* %j, align 4
  br label %for.cond65

for.cond65:                                       ; preds = %for.inc77, %for.body64
  %35 = load i32, i32* %j, align 4
  %cmp66 = icmp slt i32 %35, 48
  br i1 %cmp66, label %for.body68, label %for.end79

for.body68:                                       ; preds = %for.cond65
  %36 = load [6 x i8]*, [6 x i8]** %ks.addr, align 4
  %37 = load i32, i32* %i, align 4
  %arrayidx69 = getelementptr inbounds [6 x i8], [6 x i8]* %36, i32 %37
  %arraydecay70 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx69, i32 0, i32 0
  %38 = load i32, i32* %j, align 4
  %39 = load i32, i32* %i, align 4
  %arrayidx71 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %39
  %arraydecay72 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx71, i32 0, i32 0
  %40 = load i32, i32* %j, align 4
  %arrayidx73 = getelementptr inbounds [48 x i8], [48 x i8]* @PC2, i32 0, i32 %40
  %41 = load i8, i8* %arrayidx73, align 1
  %conv74 = zext i8 %41 to i32
  %sub75 = sub nsw i32 %conv74, 1
  %call76 = call i32 @peekBit(i8* %arraydecay72, i32 %sub75)
  call void @pokeBit(i8* %arraydecay70, i32 %38, i32 %call76)
  br label %for.inc77

for.inc77:                                        ; preds = %for.body68
  %42 = load i32, i32* %j, align 4
  %inc78 = add nsw i32 %42, 1
  store i32 %inc78, i32* %j, align 4
  br label %for.cond65

for.end79:                                        ; preds = %for.cond65
  br label %for.inc80

for.inc80:                                        ; preds = %for.end79
  %43 = load i32, i32* %i, align 4
  %inc81 = add nsw i32 %43, 1
  store i32 %inc81, i32* %i, align 4
  br label %for.cond61

for.end82:                                        ; preds = %for.cond61
  ret void
}

declare noalias i8* @malloc(i32 %0) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: noinline nounwind optnone
define internal void @processMessage(i8* %message, [6 x i8]* %ks, i8* %ep) #0 {
entry:
  %message.addr = alloca i8*, align 4
  %ks.addr = alloca [6 x i8]*, align 4
  %ep.addr = alloca i8*, align 4
  %left = alloca [17 x [4 x i8]], align 16
  %right = alloca [17 x [4 x i8]], align 16
  %mp = alloca [8 x i8], align 1
  %e = alloca [8 x i8], align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %fs = alloca [4 x i8], align 1
  store i8* %message, i8** %message.addr, align 4
  store [6 x i8]* %ks, [6 x i8]** %ks.addr, align 4
  store i8* %ep, i8** %ep.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 64
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %mp, i32 0, i32 0
  %1 = load i32, i32* %i, align 4
  %2 = load i8*, i8** %message.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [64 x i8], [64 x i8]* @IP, i32 0, i32 %3
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %sub = sub nsw i32 %conv, 1
  %call = call i32 @peekBit(i8* %2, i32 %sub)
  call void @pokeBit(i8* %arraydecay, i32 %1, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc13, %for.end
  %6 = load i32, i32* %i, align 4
  %cmp2 = icmp slt i32 %6, 32
  br i1 %cmp2, label %for.body4, label %for.end15

for.body4:                                        ; preds = %for.cond1
  %arrayidx5 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 0
  %arraydecay6 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx5, i32 0, i32 0
  %7 = load i32, i32* %i, align 4
  %arraydecay7 = getelementptr inbounds [8 x i8], [8 x i8]* %mp, i32 0, i32 0
  %8 = load i32, i32* %i, align 4
  %call8 = call i32 @peekBit(i8* %arraydecay7, i32 %8)
  call void @pokeBit(i8* %arraydecay6, i32 %7, i32 %call8)
  %arrayidx9 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 0
  %arraydecay10 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx9, i32 0, i32 0
  %9 = load i32, i32* %i, align 4
  %arraydecay11 = getelementptr inbounds [8 x i8], [8 x i8]* %mp, i32 0, i32 0
  %10 = load i32, i32* %i, align 4
  %add = add nsw i32 %10, 32
  %call12 = call i32 @peekBit(i8* %arraydecay11, i32 %add)
  call void @pokeBit(i8* %arraydecay10, i32 %9, i32 %call12)
  br label %for.inc13

for.inc13:                                        ; preds = %for.body4
  %11 = load i32, i32* %i, align 4
  %inc14 = add nsw i32 %11, 1
  store i32 %inc14, i32* %i, align 4
  br label %for.cond1

for.end15:                                        ; preds = %for.cond1
  store i32 1, i32* %i, align 4
  br label %for.cond16

for.cond16:                                       ; preds = %for.inc50, %for.end15
  %12 = load i32, i32* %i, align 4
  %cmp17 = icmp slt i32 %12, 17
  br i1 %cmp17, label %for.body19, label %for.end52

for.body19:                                       ; preds = %for.cond16
  %13 = load i32, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 %13
  %arraydecay21 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx20, i32 0, i32 0
  %14 = load i32, i32* %i, align 4
  %sub22 = sub nsw i32 %14, 1
  %arrayidx23 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 %sub22
  %arraydecay24 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx23, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %arraydecay21, i8* align 4 %arraydecay24, i32 4, i1 false)
  %15 = load i32, i32* %i, align 4
  %sub25 = sub nsw i32 %15, 1
  %arrayidx26 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 %sub25
  %arraydecay27 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx26, i32 0, i32 0
  %16 = load [6 x i8]*, [6 x i8]** %ks.addr, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds [6 x i8], [6 x i8]* %16, i32 %17
  %arraydecay29 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx28, i32 0, i32 0
  %arraydecay30 = getelementptr inbounds [4 x i8], [4 x i8]* %fs, i32 0, i32 0
  call void @f(i8* %arraydecay27, i8* %arraydecay29, i8* %arraydecay30)
  store i32 0, i32* %j, align 4
  br label %for.cond31

for.cond31:                                       ; preds = %for.inc42, %for.body19
  %18 = load i32, i32* %j, align 4
  %cmp32 = icmp slt i32 %18, 4
  br i1 %cmp32, label %for.body34, label %for.end44

for.body34:                                       ; preds = %for.cond31
  %19 = load i32, i32* %j, align 4
  %arrayidx35 = getelementptr inbounds [4 x i8], [4 x i8]* %fs, i32 0, i32 %19
  %20 = load i8, i8* %arrayidx35, align 1
  %conv36 = zext i8 %20 to i32
  %21 = load i32, i32* %i, align 4
  %sub37 = sub nsw i32 %21, 1
  %arrayidx38 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 %sub37
  %22 = load i32, i32* %j, align 4
  %arrayidx39 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx38, i32 0, i32 %22
  %23 = load i8, i8* %arrayidx39, align 1
  %conv40 = zext i8 %23 to i32
  %xor = xor i32 %conv40, %conv36
  %conv41 = trunc i32 %xor to i8
  store i8 %conv41, i8* %arrayidx39, align 1
  br label %for.inc42

for.inc42:                                        ; preds = %for.body34
  %24 = load i32, i32* %j, align 4
  %inc43 = add nsw i32 %24, 1
  store i32 %inc43, i32* %j, align 4
  br label %for.cond31

for.end44:                                        ; preds = %for.cond31
  %25 = load i32, i32* %i, align 4
  %arrayidx45 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 %25
  %arraydecay46 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx45, i32 0, i32 0
  %26 = load i32, i32* %i, align 4
  %sub47 = sub nsw i32 %26, 1
  %arrayidx48 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 %sub47
  %arraydecay49 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx48, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %arraydecay46, i8* align 4 %arraydecay49, i32 4, i1 false)
  br label %for.inc50

for.inc50:                                        ; preds = %for.end44
  %27 = load i32, i32* %i, align 4
  %inc51 = add nsw i32 %27, 1
  store i32 %inc51, i32* %i, align 4
  br label %for.cond16

for.end52:                                        ; preds = %for.cond16
  store i32 0, i32* %i, align 4
  br label %for.cond53

for.cond53:                                       ; preds = %for.inc61, %for.end52
  %28 = load i32, i32* %i, align 4
  %cmp54 = icmp slt i32 %28, 32
  br i1 %cmp54, label %for.body56, label %for.end63

for.body56:                                       ; preds = %for.cond53
  %arraydecay57 = getelementptr inbounds [8 x i8], [8 x i8]* %e, i32 0, i32 0
  %29 = load i32, i32* %i, align 4
  %arrayidx58 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 16
  %arraydecay59 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx58, i32 0, i32 0
  %30 = load i32, i32* %i, align 4
  %call60 = call i32 @peekBit(i8* %arraydecay59, i32 %30)
  call void @pokeBit(i8* %arraydecay57, i32 %29, i32 %call60)
  br label %for.inc61

for.inc61:                                        ; preds = %for.body56
  %31 = load i32, i32* %i, align 4
  %inc62 = add nsw i32 %31, 1
  store i32 %inc62, i32* %i, align 4
  br label %for.cond53

for.end63:                                        ; preds = %for.cond53
  store i32 32, i32* %i, align 4
  br label %for.cond64

for.cond64:                                       ; preds = %for.inc73, %for.end63
  %32 = load i32, i32* %i, align 4
  %cmp65 = icmp slt i32 %32, 64
  br i1 %cmp65, label %for.body67, label %for.end75

for.body67:                                       ; preds = %for.cond64
  %arraydecay68 = getelementptr inbounds [8 x i8], [8 x i8]* %e, i32 0, i32 0
  %33 = load i32, i32* %i, align 4
  %arrayidx69 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 16
  %arraydecay70 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx69, i32 0, i32 0
  %34 = load i32, i32* %i, align 4
  %sub71 = sub nsw i32 %34, 32
  %call72 = call i32 @peekBit(i8* %arraydecay70, i32 %sub71)
  call void @pokeBit(i8* %arraydecay68, i32 %33, i32 %call72)
  br label %for.inc73

for.inc73:                                        ; preds = %for.body67
  %35 = load i32, i32* %i, align 4
  %inc74 = add nsw i32 %35, 1
  store i32 %inc74, i32* %i, align 4
  br label %for.cond64

for.end75:                                        ; preds = %for.cond64
  store i32 0, i32* %i, align 4
  br label %for.cond76

for.cond76:                                       ; preds = %for.inc85, %for.end75
  %36 = load i32, i32* %i, align 4
  %cmp77 = icmp slt i32 %36, 64
  br i1 %cmp77, label %for.body79, label %for.end87

for.body79:                                       ; preds = %for.cond76
  %37 = load i8*, i8** %ep.addr, align 4
  %38 = load i32, i32* %i, align 4
  %arraydecay80 = getelementptr inbounds [8 x i8], [8 x i8]* %e, i32 0, i32 0
  %39 = load i32, i32* %i, align 4
  %arrayidx81 = getelementptr inbounds [64 x i8], [64 x i8]* @IP2, i32 0, i32 %39
  %40 = load i8, i8* %arrayidx81, align 1
  %conv82 = zext i8 %40 to i32
  %sub83 = sub nsw i32 %conv82, 1
  %call84 = call i32 @peekBit(i8* %arraydecay80, i32 %sub83)
  call void @pokeBit(i8* %37, i32 %38, i32 %call84)
  br label %for.inc85

for.inc85:                                        ; preds = %for.body79
  %41 = load i32, i32* %i, align 4
  %inc86 = add nsw i32 %41, 1
  store i32 %inc86, i32* %i, align 4
  br label %for.cond76

for.end87:                                        ; preds = %for.cond76
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @decrypt(%struct.String* noalias sret align 4 %agg.result, i8* %key, i8* %message, i32 %len) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %message.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %ks = alloca [17 x [6 x i8]], align 16
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %padByte = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8* %key, i8** %key.addr, align 4
  store i8* %message, i8** %message.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = bitcast %struct.String* %agg.result to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  %1 = load i8*, i8** %key.addr, align 4
  %arraydecay = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  call void @getSubKeys(i8* %1, [6 x i8]* %arraydecay)
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc12, %entry
  %2 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, 9
  br i1 %cmp, label %for.body, label %for.end14

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %3, 6
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %4
  %5 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx, i32 0, i32 %5
  %6 = load i8, i8* %arrayidx4, align 1
  store i8 %6, i8* %temp, align 1
  %7 = load i32, i32* %i, align 4
  %sub = sub nsw i32 17, %7
  %arrayidx5 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %sub
  %8 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx5, i32 0, i32 %8
  %9 = load i8, i8* %arrayidx6, align 1
  %10 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %10
  %11 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx7, i32 0, i32 %11
  store i8 %9, i8* %arrayidx8, align 1
  %12 = load i8, i8* %temp, align 1
  %13 = load i32, i32* %i, align 4
  %sub9 = sub nsw i32 17, %13
  %arrayidx10 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %sub9
  %14 = load i32, i32* %j, align 4
  %arrayidx11 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx10, i32 0, i32 %14
  store i8 %12, i8* %arrayidx11, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %15 = load i32, i32* %j, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc12

for.inc12:                                        ; preds = %for.end
  %16 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %16, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond

for.end14:                                        ; preds = %for.cond
  %17 = load i32, i32* %len.addr, align 4
  %call = call noalias i8* @malloc(i32 %17)
  %data = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  store i8* %call, i8** %data, align 4
  %data15 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %18 = load i8*, i8** %data15, align 4
  %19 = load i8*, i8** %message.addr, align 4
  %20 = load i32, i32* %len.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %18, i8* align 1 %19, i32 %20, i1 false)
  %21 = load i32, i32* %len.addr, align 4
  %len16 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  store i32 %21, i32* %len16, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond17

for.cond17:                                       ; preds = %for.inc26, %for.end14
  %22 = load i32, i32* %i, align 4
  %len18 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %23 = load i32, i32* %len18, align 4
  %cmp19 = icmp slt i32 %22, %23
  br i1 %cmp19, label %for.body20, label %for.end27

for.body20:                                       ; preds = %for.cond17
  %data21 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %24 = load i8*, i8** %data21, align 4
  %25 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds i8, i8* %24, i32 %25
  %arraydecay23 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  %data24 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %26 = load i8*, i8** %data24, align 4
  %27 = load i32, i32* %i, align 4
  %arrayidx25 = getelementptr inbounds i8, i8* %26, i32 %27
  call void @processMessage(i8* %arrayidx22, [6 x i8]* %arraydecay23, i8* %arrayidx25)
  br label %for.inc26

for.inc26:                                        ; preds = %for.body20
  %28 = load i32, i32* %i, align 4
  %add = add nsw i32 %28, 8
  store i32 %add, i32* %i, align 4
  br label %for.cond17

for.end27:                                        ; preds = %for.cond17
  %data28 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %29 = load i8*, i8** %data28, align 4
  %30 = load i32, i32* %len.addr, align 4
  %sub29 = sub nsw i32 %30, 1
  %arrayidx30 = getelementptr inbounds i8, i8* %29, i32 %sub29
  %31 = load i8, i8* %arrayidx30, align 1
  store i8 %31, i8* %padByte, align 1
  %32 = load i8, i8* %padByte, align 1
  %conv = zext i8 %32 to i32
  %len31 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %33 = load i32, i32* %len31, align 4
  %sub32 = sub nsw i32 %33, %conv
  store i32 %sub32, i32* %len31, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @driver(i8* %key, i8* %message, i32 %len) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %message.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %encoded = alloca %struct.String, align 4
  %decoded = alloca %struct.String, align 4
  %buffer = alloca [128 x i8], align 16
  %tmp = alloca %struct.String, align 4
  %tmp9 = alloca %struct.String, align 4
  store i8* %key, i8** %key.addr, align 4
  store i8* %message, i8** %message.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load i8*, i8** %key.addr, align 4
  %arraydecay = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %0, i32 8, i8* %arraydecay)
  %arraydecay1 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i32 0, i32 0), i8* %arraydecay1)
  %1 = load i8*, i8** %message.addr, align 4
  %2 = load i32, i32* %len.addr, align 4
  %arraydecay2 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %1, i32 %2, i8* %arraydecay2)
  %arraydecay3 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0), i8* %arraydecay3)
  %3 = load i8*, i8** %key.addr, align 4
  %4 = load i8*, i8** %message.addr, align 4
  %5 = load i32, i32* %len.addr, align 4
  call void @encrypt(%struct.String* sret align 4 %tmp, i8* %3, i8* %4, i32 %5)
  %6 = bitcast %struct.String* %encoded to i8*
  %7 = bitcast %struct.String* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %6, i8* align 4 %7, i32 8, i1 false)
  %data = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  %8 = load i8*, i8** %data, align 4
  %len5 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 1
  %9 = load i32, i32* %len5, align 4
  %arraydecay6 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %8, i32 %9, i8* %arraydecay6)
  %arraydecay7 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0), i8* %arraydecay7)
  %10 = load i8*, i8** %key.addr, align 4
  %data10 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  %11 = load i8*, i8** %data10, align 4
  %len11 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 1
  %12 = load i32, i32* %len11, align 4
  call void @decrypt(%struct.String* sret align 4 %tmp9, i8* %10, i8* %11, i32 %12)
  %13 = bitcast %struct.String* %decoded to i8*
  %14 = bitcast %struct.String* %tmp9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %13, i8* align 4 %14, i32 8, i1 false)
  %data12 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 0
  %15 = load i8*, i8** %data12, align 4
  %len13 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 1
  %16 = load i32, i32* %len13, align 4
  %arraydecay14 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %15, i32 %16, i8* %arraydecay14)
  %arraydecay15 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0), i8* %arraydecay15)
  %len17 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 1
  %17 = load i32, i32* %len17, align 4
  %cmp = icmp sgt i32 %17, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %data18 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  %18 = load i8*, i8** %data18, align 4
  call void @free(i8* %18)
  %data19 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  store i8* null, i8** %data19, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %len20 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 1
  %19 = load i32, i32* %len20, align 4
  %cmp21 = icmp sgt i32 %19, 0
  br i1 %cmp21, label %if.then22, label %if.end25

if.then22:                                        ; preds = %if.end
  %data23 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 0
  %20 = load i8*, i8** %data23, align 4
  call void @free(i8* %20)
  %data24 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 0
  store i8* null, i8** %data24, align 4
  br label %if.end25

if.end25:                                         ; preds = %if.then22, %if.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @printBytes(i8* %ptr, i32 %len, i8* %out) #0 {
entry:
  %ptr.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  store i8* %ptr, i8** %ptr.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %len.addr, align 4
  %dec = add nsw i32 %0, -1
  store i32 %dec, i32* %len.addr, align 4
  %cmp = icmp sgt i32 %0, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i8*, i8** %ptr.addr, align 4
  %2 = load i8, i8* %1, align 1
  %conv = zext i8 %2 to i32
  %shr = ashr i32 %conv, 4
  %conv1 = trunc i32 %shr to i8
  %call = call signext i8 @toHex(i8 zeroext %conv1)
  %3 = load i8*, i8** %out.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %3, i32 1
  store i8* %incdec.ptr, i8** %out.addr, align 4
  store i8 %call, i8* %3, align 1
  %4 = load i8*, i8** %ptr.addr, align 4
  %5 = load i8, i8* %4, align 1
  %conv2 = zext i8 %5 to i32
  %and = and i32 %conv2, 15
  %conv3 = trunc i32 %and to i8
  %call4 = call signext i8 @toHex(i8 zeroext %conv3)
  %6 = load i8*, i8** %out.addr, align 4
  %incdec.ptr5 = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr5, i8** %out.addr, align 4
  store i8 %call4, i8* %6, align 1
  %7 = load i8*, i8** %ptr.addr, align 4
  %incdec.ptr6 = getelementptr inbounds i8, i8* %7, i32 1
  store i8* %incdec.ptr6, i8** %ptr.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %8 = load i8*, i8** %out.addr, align 4
  store i8 0, i8* %8, align 1
  ret void
}

declare i32 @printf(i8* %0, ...) #2

declare void @free(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %keys = alloca [3 x [8 x i8]], align 16
  %message1 = alloca [8 x i8], align 1
  %message2 = alloca [8 x i8], align 1
  %message3 = alloca [38 x i8], align 16
  %len = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [3 x [8 x i8]]* %keys to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([3 x [8 x i8]], [3 x [8 x i8]]* @__const.main.keys, i32 0, i32 0, i32 0), i32 24, i1 false)
  %1 = bitcast [8 x i8]* %message1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %1, i8* align 1 getelementptr inbounds ([8 x i8], [8 x i8]* @__const.main.message1, i32 0, i32 0), i32 8, i1 false)
  %2 = bitcast [8 x i8]* %message2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %2, i8* align 1 getelementptr inbounds ([8 x i8], [8 x i8]* @__const.main.message2, i32 0, i32 0), i32 8, i1 false)
  %3 = bitcast [38 x i8]* %message3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %3, i8* align 16 getelementptr inbounds ([38 x i8], [38 x i8]* @__const.main.message3, i32 0, i32 0), i32 38, i1 false)
  store i32 8, i32* %len, align 4
  %arrayidx = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* %keys, i32 0, i32 0
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %arrayidx, i32 0, i32 0
  %arraydecay1 = getelementptr inbounds [8 x i8], [8 x i8]* %message1, i32 0, i32 0
  %4 = load i32, i32* %len, align 4
  call void @driver(i8* %arraydecay, i8* %arraydecay1, i32 %4)
  store i32 8, i32* %len, align 4
  %arrayidx2 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* %keys, i32 0, i32 1
  %arraydecay3 = getelementptr inbounds [8 x i8], [8 x i8]* %arrayidx2, i32 0, i32 0
  %arraydecay4 = getelementptr inbounds [8 x i8], [8 x i8]* %message2, i32 0, i32 0
  %5 = load i32, i32* %len, align 4
  call void @driver(i8* %arraydecay3, i8* %arraydecay4, i32 %5)
  store i32 38, i32* %len, align 4
  %arrayidx5 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* %keys, i32 0, i32 2
  %arraydecay6 = getelementptr inbounds [8 x i8], [8 x i8]* %arrayidx5, i32 0, i32 0
  %arraydecay7 = getelementptr inbounds [38 x i8], [38 x i8]* %message3, i32 0, i32 0
  %6 = load i32, i32* %len, align 4
  call void @driver(i8* %arraydecay6, i8* %arraydecay7, i32 %6)
  ret i32 0
}

; Function Attrs: noinline nounwind optnone
define internal void @pokeBit(i8* %dst, i32 %index, i32 %value) #0 {
entry:
  %dst.addr = alloca i8*, align 4
  %index.addr = alloca i32, align 4
  %value.addr = alloca i32, align 4
  %cell = alloca i32, align 4
  %bit = alloca i32, align 4
  store i8* %dst, i8** %dst.addr, align 4
  store i32 %index, i32* %index.addr, align 4
  store i32 %value, i32* %value.addr, align 4
  %0 = load i32, i32* %index.addr, align 4
  %div = sdiv i32 %0, 8
  store i32 %div, i32* %cell, align 4
  %1 = load i32, i32* %index.addr, align 4
  %rem = srem i32 %1, 8
  %sub = sub nsw i32 7, %rem
  store i32 %sub, i32* %bit, align 4
  %2 = load i32, i32* %value.addr, align 4
  %cmp = icmp eq i32 %2, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %bit, align 4
  %shl = shl i32 1, %3
  %neg = xor i32 %shl, -1
  %4 = load i8*, i8** %dst.addr, align 4
  %5 = load i32, i32* %cell, align 4
  %arrayidx = getelementptr inbounds i8, i8* %4, i32 %5
  %6 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %6 to i32
  %and = and i32 %conv, %neg
  %conv1 = trunc i32 %and to i8
  store i8 %conv1, i8* %arrayidx, align 1
  br label %if.end

if.else:                                          ; preds = %entry
  %7 = load i32, i32* %bit, align 4
  %shl2 = shl i32 1, %7
  %8 = load i8*, i8** %dst.addr, align 4
  %9 = load i32, i32* %cell, align 4
  %arrayidx3 = getelementptr inbounds i8, i8* %8, i32 %9
  %10 = load i8, i8* %arrayidx3, align 1
  %conv4 = zext i8 %10 to i32
  %or = or i32 %conv4, %shl2
  %conv5 = trunc i32 %or to i8
  store i8 %conv5, i8* %arrayidx3, align 1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i32 @peekBit(i8* %src, i32 %index) #0 {
entry:
  %src.addr = alloca i8*, align 4
  %index.addr = alloca i32, align 4
  %cell = alloca i32, align 4
  %bit = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 4
  store i32 %index, i32* %index.addr, align 4
  %0 = load i32, i32* %index.addr, align 4
  %div = sdiv i32 %0, 8
  store i32 %div, i32* %cell, align 4
  %1 = load i32, i32* %index.addr, align 4
  %rem = srem i32 %1, 8
  %sub = sub nsw i32 7, %rem
  store i32 %sub, i32* %bit, align 4
  %2 = load i8*, i8** %src.addr, align 4
  %3 = load i32, i32* %cell, align 4
  %arrayidx = getelementptr inbounds i8, i8* %2, i32 %3
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %5 = load i32, i32* %bit, align 4
  %shl = shl i32 1, %5
  %and = and i32 %conv, %shl
  %cmp = icmp ne i32 %and, 0
  %conv1 = zext i1 %cmp to i32
  ret i32 %conv1
}

; Function Attrs: noinline nounwind optnone
define internal void @shiftLeft(i8* %src, i32 %len, i32 %times, i8* %dst) #0 {
entry:
  %src.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %times.addr = alloca i32, align 4
  %dst.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %t = alloca i32, align 4
  %temp = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %times, i32* %times.addr, align 4
  store i8* %dst, i8** %dst.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp sle i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8*, i8** %dst.addr, align 4
  %3 = load i32, i32* %i, align 4
  %4 = load i8*, i8** %src.addr, align 4
  %5 = load i32, i32* %i, align 4
  %call = call i32 @peekBit(i8* %4, i32 %5)
  call void @pokeBit(i8* %2, i32 %3, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %t, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc13, %for.end
  %7 = load i32, i32* %t, align 4
  %8 = load i32, i32* %times.addr, align 4
  %cmp2 = icmp sle i32 %7, %8
  br i1 %cmp2, label %for.body3, label %for.end15

for.body3:                                        ; preds = %for.cond1
  %9 = load i8*, i8** %dst.addr, align 4
  %call4 = call i32 @peekBit(i8* %9, i32 0)
  store i32 %call4, i32* %temp, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc9, %for.body3
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %len.addr, align 4
  %cmp6 = icmp sle i32 %10, %11
  br i1 %cmp6, label %for.body7, label %for.end11

for.body7:                                        ; preds = %for.cond5
  %12 = load i8*, i8** %dst.addr, align 4
  %13 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %13, 1
  %14 = load i8*, i8** %dst.addr, align 4
  %15 = load i32, i32* %i, align 4
  %call8 = call i32 @peekBit(i8* %14, i32 %15)
  call void @pokeBit(i8* %12, i32 %sub, i32 %call8)
  br label %for.inc9

for.inc9:                                         ; preds = %for.body7
  %16 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %16, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond5

for.end11:                                        ; preds = %for.cond5
  %17 = load i8*, i8** %dst.addr, align 4
  %18 = load i32, i32* %len.addr, align 4
  %sub12 = sub nsw i32 %18, 1
  %19 = load i32, i32* %temp, align 4
  call void @pokeBit(i8* %17, i32 %sub12, i32 %19)
  br label %for.inc13

for.inc13:                                        ; preds = %for.end11
  %20 = load i32, i32* %t, align 4
  %inc14 = add nsw i32 %20, 1
  store i32 %inc14, i32* %t, align 4
  br label %for.cond1

for.end15:                                        ; preds = %for.cond1
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @f(i8* %r, i8* %ks, i8* %sp) #0 {
entry:
  %r.addr = alloca i8*, align 4
  %ks.addr = alloca i8*, align 4
  %sp.addr = alloca i8*, align 4
  %er = alloca [6 x i8], align 1
  %sr = alloca [4 x i8], align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %b = alloca [6 x i32], align 16
  %k = alloca i32, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %m = alloca i32, align 4
  %n = alloca i32, align 4
  %p = alloca i32, align 4
  store i8* %r, i8** %r.addr, align 4
  store i8* %ks, i8** %ks.addr, align 4
  store i8* %sp, i8** %sp.addr, align 4
  %arraydecay = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  call void @llvm.memset.p0i8.i32(i8* align 1 %arraydecay, i8 0, i32 6, i1 false)
  %arraydecay1 = getelementptr inbounds [4 x i8], [4 x i8]* %sr, i32 0, i32 0
  call void @llvm.memset.p0i8.i32(i8* align 1 %arraydecay1, i8 0, i32 4, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 48
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay2 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  %1 = load i32, i32* %i, align 4
  %2 = load i8*, i8** %r.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [48 x i8], [48 x i8]* @E, i32 0, i32 %3
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %sub = sub nsw i32 %conv, 1
  %call = call i32 @peekBit(i8* %2, i32 %sub)
  call void @pokeBit(i8* %arraydecay2, i32 %1, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc12, %for.end
  %6 = load i32, i32* %i, align 4
  %cmp4 = icmp slt i32 %6, 6
  br i1 %cmp4, label %for.body6, label %for.end14

for.body6:                                        ; preds = %for.cond3
  %7 = load i8*, i8** %ks.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds i8, i8* %7, i32 %8
  %9 = load i8, i8* %arrayidx7, align 1
  %conv8 = zext i8 %9 to i32
  %10 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 %10
  %11 = load i8, i8* %arrayidx9, align 1
  %conv10 = zext i8 %11 to i32
  %xor = xor i32 %conv10, %conv8
  %conv11 = trunc i32 %xor to i8
  store i8 %conv11, i8* %arrayidx9, align 1
  br label %for.inc12

for.inc12:                                        ; preds = %for.body6
  %12 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %12, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond3

for.end14:                                        ; preds = %for.cond3
  store i32 0, i32* %i, align 4
  br label %for.cond15

for.cond15:                                       ; preds = %for.inc59, %for.end14
  %13 = load i32, i32* %i, align 4
  %cmp16 = icmp slt i32 %13, 8
  br i1 %cmp16, label %for.body18, label %for.end61

for.body18:                                       ; preds = %for.cond15
  %14 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %14, 6
  store i32 %mul, i32* %j, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond19

for.cond19:                                       ; preds = %for.inc28, %for.body18
  %15 = load i32, i32* %k, align 4
  %cmp20 = icmp slt i32 %15, 6
  br i1 %cmp20, label %for.body22, label %for.end30

for.body22:                                       ; preds = %for.cond19
  %arraydecay23 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  %16 = load i32, i32* %j, align 4
  %17 = load i32, i32* %k, align 4
  %add = add nsw i32 %16, %17
  %call24 = call i32 @peekBit(i8* %arraydecay23, i32 %add)
  %cmp25 = icmp ne i32 %call24, 0
  %18 = zext i1 %cmp25 to i64
  %cond = select i1 %cmp25, i32 1, i32 0
  %19 = load i32, i32* %k, align 4
  %arrayidx27 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 %19
  store i32 %cond, i32* %arrayidx27, align 4
  br label %for.inc28

for.inc28:                                        ; preds = %for.body22
  %20 = load i32, i32* %k, align 4
  %inc29 = add nsw i32 %20, 1
  store i32 %inc29, i32* %k, align 4
  br label %for.cond19

for.end30:                                        ; preds = %for.cond19
  %arrayidx31 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 0
  %21 = load i32, i32* %arrayidx31, align 16
  %mul32 = mul nsw i32 2, %21
  %arrayidx33 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 5
  %22 = load i32, i32* %arrayidx33, align 4
  %add34 = add nsw i32 %mul32, %22
  store i32 %add34, i32* %row, align 4
  %arrayidx35 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 1
  %23 = load i32, i32* %arrayidx35, align 4
  %mul36 = mul nsw i32 8, %23
  %arrayidx37 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 2
  %24 = load i32, i32* %arrayidx37, align 8
  %mul38 = mul nsw i32 4, %24
  %add39 = add nsw i32 %mul36, %mul38
  %arrayidx40 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 3
  %25 = load i32, i32* %arrayidx40, align 4
  %mul41 = mul nsw i32 2, %25
  %add42 = add nsw i32 %add39, %mul41
  %arrayidx43 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 4
  %26 = load i32, i32* %arrayidx43, align 16
  %add44 = add nsw i32 %add42, %26
  store i32 %add44, i32* %col, align 4
  %27 = load i32, i32* %i, align 4
  %arrayidx45 = getelementptr inbounds [8 x [64 x i8]], [8 x [64 x i8]]* @S, i32 0, i32 %27
  %28 = load i32, i32* %row, align 4
  %mul46 = mul nsw i32 %28, 16
  %29 = load i32, i32* %col, align 4
  %add47 = add nsw i32 %mul46, %29
  %arrayidx48 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx45, i32 0, i32 %add47
  %30 = load i8, i8* %arrayidx48, align 1
  %conv49 = zext i8 %30 to i32
  store i32 %conv49, i32* %m, align 4
  store i32 1, i32* %n, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end30
  %31 = load i32, i32* %m, align 4
  %cmp50 = icmp sgt i32 %31, 0
  br i1 %cmp50, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %32 = load i32, i32* %m, align 4
  %rem = srem i32 %32, 2
  store i32 %rem, i32* %p, align 4
  %arraydecay52 = getelementptr inbounds [4 x i8], [4 x i8]* %sr, i32 0, i32 0
  %33 = load i32, i32* %i, align 4
  %add53 = add nsw i32 %33, 1
  %mul54 = mul nsw i32 %add53, 4
  %34 = load i32, i32* %n, align 4
  %sub55 = sub nsw i32 %mul54, %34
  %35 = load i32, i32* %p, align 4
  %cmp56 = icmp eq i32 %35, 1
  %conv57 = zext i1 %cmp56 to i32
  call void @pokeBit(i8* %arraydecay52, i32 %sub55, i32 %conv57)
  %36 = load i32, i32* %m, align 4
  %div = sdiv i32 %36, 2
  store i32 %div, i32* %m, align 4
  %37 = load i32, i32* %n, align 4
  %inc58 = add nsw i32 %37, 1
  store i32 %inc58, i32* %n, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %for.inc59

for.inc59:                                        ; preds = %while.end
  %38 = load i32, i32* %i, align 4
  %inc60 = add nsw i32 %38, 1
  store i32 %inc60, i32* %i, align 4
  br label %for.cond15

for.end61:                                        ; preds = %for.cond15
  store i32 0, i32* %i, align 4
  br label %for.cond62

for.cond62:                                       ; preds = %for.inc71, %for.end61
  %39 = load i32, i32* %i, align 4
  %cmp63 = icmp slt i32 %39, 32
  br i1 %cmp63, label %for.body65, label %for.end73

for.body65:                                       ; preds = %for.cond62
  %40 = load i8*, i8** %sp.addr, align 4
  %41 = load i32, i32* %i, align 4
  %arraydecay66 = getelementptr inbounds [4 x i8], [4 x i8]* %sr, i32 0, i32 0
  %42 = load i32, i32* %i, align 4
  %arrayidx67 = getelementptr inbounds [32 x i8], [32 x i8]* @P, i32 0, i32 %42
  %43 = load i8, i8* %arrayidx67, align 1
  %conv68 = zext i8 %43 to i32
  %sub69 = sub nsw i32 %conv68, 1
  %call70 = call i32 @peekBit(i8* %arraydecay66, i32 %sub69)
  call void @pokeBit(i8* %40, i32 %41, i32 %call70)
  br label %for.inc71

for.inc71:                                        ; preds = %for.body65
  %44 = load i32, i32* %i, align 4
  %inc72 = add nsw i32 %44, 1
  store i32 %inc72, i32* %i, align 4
  br label %for.cond62

for.end73:                                        ; preds = %for.cond62
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal signext i8 @toHex(i8 zeroext %in) #0 {
entry:
  %retval = alloca i8, align 1
  %in.addr = alloca i8, align 1
  store i8 %in, i8* %in.addr, align 1
  %0 = load i8, i8* %in.addr, align 1
  %conv = zext i8 %0 to i32
  %cmp = icmp sle i32 0, %conv
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i8, i8* %in.addr, align 1
  %conv2 = zext i8 %1 to i32
  %cmp3 = icmp slt i32 %conv2, 10
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %2 = load i8, i8* %in.addr, align 1
  %conv5 = zext i8 %2 to i32
  %add = add nsw i32 48, %conv5
  %conv6 = trunc i32 %add to i8
  store i8 %conv6, i8* %retval, align 1
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %3 = load i8, i8* %in.addr, align 1
  %conv7 = zext i8 %3 to i32
  %cmp8 = icmp sle i32 10, %conv7
  br i1 %cmp8, label %land.lhs.true10, label %if.end18

land.lhs.true10:                                  ; preds = %if.end
  %4 = load i8, i8* %in.addr, align 1
  %conv11 = zext i8 %4 to i32
  %cmp12 = icmp sle i32 %conv11, 15
  br i1 %cmp12, label %if.then14, label %if.end18

if.then14:                                        ; preds = %land.lhs.true10
  %5 = load i8, i8* %in.addr, align 1
  %conv15 = zext i8 %5 to i32
  %add16 = add nsw i32 65, %conv15
  %sub = sub nsw i32 %add16, 10
  %conv17 = trunc i32 %sub to i8
  store i8 %conv17, i8* %retval, align 1
  br label %return

if.end18:                                         ; preds = %land.lhs.true10, %if.end
  store i8 0, i8* %retval, align 1
  br label %return

return:                                           ; preds = %if.end18, %if.then14, %if.then
  %6 = load i8, i8* %retval, align 1
  ret i8 %6
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem = srem i32 %2, 8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 8:i32
infer %1 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 8, %rem
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 8:i32
%2:i32 = subnsw 8:i32, %1
infer %2 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %conv = trunc i32 %sub to i8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 8:i32
%2:i32 = subnsw 8:i32, %1
%3:i8 = trunc %2
infer %3

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i8, i8* %padByte, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv1 = zext i8 %4 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %add = add nsw i32 %3, %conv1
; Looking for a replacement for:
%0:i32 = var
%1:i8 = var
%2:i32 = zext %1
%3:i32 = addnsw %0, %2
infer %3

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %len3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i8, i8* %padByte, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv6 = zext i8 %11 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %12 = trunc i32 %conv6 to i8
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
%2:i8 = trunc %1
infer %2

; *****
; For LLVM instruction:
;  %13 = load i8, i8* %padByte, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv7 = zext i8 %13 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %len8, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %14, %15
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add15 = add nsw i32 %20, 8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 8:i32, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem %0, 8:i32
infer %1 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem %0, 8:i32
%2:i32 = subnsw 8:i32, %1
infer %2 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 8
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 5
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = srem %0, 8:i32

Cost = 5
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem %0, 8:i32
%2:i32 = subnsw 8:i32, %1
%3:i8 = trunc %2
infer %3


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 8
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 5
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = zext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 255
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i8 = var
%2:i32 = zext %1
%3:i32 = addnsw %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147483646
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var
%1:i32 = zext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = zext %0
infer %1 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 255
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = zext %0
%2:i8 = trunc %1
infer %2


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is UNSAT
Dataflow Pruned 0/0
There are 2 Guesses
There are 1 RHSs before deduplication
There are 1 RHSs after deduplication
"
; No valid RHS in the list
#########################################################

Module before replacement:
; ModuleID = './Data_Encryption_Standard.c.bc'
source_filename = "./Data_Encryption_Standard.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.String = type { i8*, i32 }

@.str = private unnamed_addr constant [14 x i8] c"Key     : %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"Message : %s\0A\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"Encoded : %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"Decoded : %s\0A\0A\00", align 1
@__const.main.keys = private unnamed_addr constant [3 x [8 x i8]] [[8 x i8] c"\134Wy\9B\BC\DF\F1", [8 x i8] c"\0E2\922\EAm\0Ds", [8 x i8] c"\0E2\922\EAm\0Ds"], align 16
@__const.main.message1 = private unnamed_addr constant [8 x i8] c"\01#Eg\89\AB\CD\EF", align 1
@__const.main.message2 = private unnamed_addr constant [8 x i8] c"\87\87\87\87\87\87\87\87", align 1
@__const.main.message3 = private unnamed_addr constant [38 x i8] c"Your lips are smoother than vaseline\0D\0A", align 16
@PC1 = internal constant [56 x i8] c"91)!\19\11\09\01:2*\22\1A\12\0A\02;3+#\1B\13\0B\03<4,$?7/'\1F\17\0F\07>6.&\1E\16\0E\06=5-%\1D\15\0D\05\1C\14\0C\04", align 16
@SHIFTS = internal constant [16 x i8] c"\01\01\02\02\02\02\02\02\01\02\02\02\02\02\02\01", align 16
@PC2 = internal constant [48 x i8] c"\0E\11\0B\18\01\05\03\1C\0F\06\15\0A\17\13\0C\04\1A\08\10\07\1B\14\0D\02)4\1F%/7\1E(3-!0,1'8\225.*2$\1D ", align 16
@IP = internal constant [64 x i8] c":2*\22\1A\12\0A\02<4,$\1C\14\0C\04>6.&\1E\16\0E\06@80( \18\10\0891)!\19\11\09\01;3+#\1B\13\0B\03=5-%\1D\15\0D\05?7/'\1F\17\0F\07", align 16
@IP2 = internal constant [64 x i8] c"(\080\108\18@ '\07/\0F7\17?\1F&\06.\0E6\16>\1E%\05-\0D5\15=\1D$\04,\0C4\14<\1C#\03+\0B3\13;\1B\22\02*\0A2\12:\1A!\01)\091\119\19", align 16
@E = internal constant [48 x i8] c" \01\02\03\04\05\04\05\06\07\08\09\08\09\0A\0B\0C\0D\0C\0D\0E\0F\10\11\10\11\12\13\14\15\14\15\16\17\18\19\18\19\1A\1B\1C\1D\1C\1D\1E\1F \01", align 16
@S = internal constant [8 x [64 x i8]] [[64 x i8] c"\0E\04\0D\01\02\0F\0B\08\03\0A\06\0C\05\09\00\07\00\0F\07\04\0E\02\0D\01\0A\06\0C\0B\09\05\03\08\04\01\0E\08\0D\06\02\0B\0F\0C\09\07\03\0A\05\00\0F\0C\08\02\04\09\01\07\05\0B\03\0E\0A\00\06\0D", [64 x i8] c"\0F\01\08\0E\06\0B\03\04\09\07\02\0D\0C\00\05\0A\03\0D\04\07\0F\02\08\0E\0C\00\01\0A\06\09\0B\05\00\0E\07\0B\0A\04\0D\01\05\08\0C\06\09\03\02\0F\0D\08\0A\01\03\0F\04\02\0B\06\07\0C\00\05\0E\09", [64 x i8] c"\0A\00\09\0E\06\03\0F\05\01\0D\0C\07\0B\04\02\08\0D\07\00\09\03\04\06\0A\02\08\05\0E\0C\0B\0F\01\0D\06\04\09\08\0F\03\00\0B\01\02\0C\05\0A\0E\07\01\0A\0D\00\06\09\08\07\04\0F\0E\03\0B\05\02\0C", [64 x i8] c"\07\0D\0E\03\00\06\09\0A\01\02\08\05\0B\0C\04\0F\0D\08\0B\05\06\0F\00\03\04\07\02\0C\01\0A\0E\09\0A\06\09\00\0C\0B\07\0D\0F\01\03\0E\05\02\08\04\03\0F\00\06\0A\01\0D\08\09\04\05\0B\0C\07\02\0E", [64 x i8] c"\02\0C\04\01\07\0A\0B\06\08\05\03\0F\0D\00\0E\09\0E\0B\02\0C\04\07\0D\01\05\00\0F\0A\03\09\08\06\04\02\01\0B\0A\0D\07\08\0F\09\0C\05\06\03\00\0E\0B\08\0C\07\01\0E\02\0D\06\0F\00\09\0A\04\05\03", [64 x i8] c"\0C\01\0A\0F\09\02\06\08\00\0D\03\04\0E\07\05\0B\0A\0F\04\02\07\0C\09\05\06\01\0D\0E\00\0B\03\08\09\0E\0F\05\02\08\0C\03\07\00\04\0A\01\0D\0B\06\04\03\02\0C\09\05\0F\0A\0B\0E\01\07\06\00\08\0D", [64 x i8] c"\04\0B\02\0E\0F\00\08\0D\03\0C\09\07\05\0A\06\01\0D\00\0B\07\04\09\01\0A\0E\03\05\0C\02\0F\08\06\01\04\0B\0D\0C\03\07\0E\0A\0F\06\08\00\05\09\02\06\0B\0D\08\01\04\0A\07\09\05\00\0F\0E\02\03\0C", [64 x i8] c"\0D\02\08\04\06\0F\0B\01\0A\09\03\0E\05\00\0C\07\01\0F\0D\08\0A\03\07\04\0C\05\06\0B\00\0E\09\02\07\0B\04\01\09\0C\0E\02\00\06\0A\0D\0F\03\05\08\02\01\0E\07\04\0A\08\0D\0F\0C\09\00\03\05\06\0B"], align 16
@P = internal constant [32 x i8] c"\10\07\14\15\1D\0C\1C\11\01\0F\17\1A\05\12\1F\0A\02\08\18\0E \1B\03\09\13\0D\1E\06\16\0B\04\19", align 16
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @encrypt(%struct.String* noalias sret align 4 %agg.result, i8* %key, i8* %message, i32 %len) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %message.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %ks = alloca [17 x [6 x i8]], align 16
  %padByte = alloca i8, align 1
  %i = alloca i32, align 4
  store i8* %key, i8** %key.addr, align 4
  store i8* %message, i8** %message.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = bitcast %struct.String* %agg.result to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  %1 = load i8*, i8** %key.addr, align 4
  %arraydecay = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  call void @getSubKeys(i8* %1, [6 x i8]* %arraydecay)
  %2 = load i32, i32* %len.addr, align 4
  %rem = srem i32 %2, 8
  %sub = sub nsw i32 8, %rem
  %conv = trunc i32 %sub to i8
  store i8 %conv, i8* %padByte, align 1
  %3 = load i32, i32* %len.addr, align 4
  %4 = load i8, i8* %padByte, align 1
  %conv1 = zext i8 %4 to i32
  %add = add nsw i32 %3, %conv1
  %len2 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  store i32 %add, i32* %len2, align 4
  %len3 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %5 = load i32, i32* %len3, align 4
  %call = call noalias i8* @malloc(i32 %5)
  %data = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  store i8* %call, i8** %data, align 4
  %data4 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %6 = load i8*, i8** %data4, align 4
  %7 = load i8*, i8** %message.addr, align 4
  %8 = load i32, i32* %len.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %6, i8* align 1 %7, i32 %8, i1 false)
  %data5 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %9 = load i8*, i8** %data5, align 4
  %10 = load i32, i32* %len.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %9, i32 %10
  %11 = load i8, i8* %padByte, align 1
  %conv6 = zext i8 %11 to i32
  %12 = trunc i32 %conv6 to i8
  %13 = load i8, i8* %padByte, align 1
  %conv7 = zext i8 %13 to i32
  call void @llvm.memset.p0i8.i32(i8* align 1 %arrayidx, i8 %12, i32 %conv7, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %14 = load i32, i32* %i, align 4
  %len8 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %15 = load i32, i32* %len8, align 4
  %cmp = icmp slt i32 %14, %15
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %data10 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %16 = load i8*, i8** %data10, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds i8, i8* %16, i32 %17
  %arraydecay12 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  %data13 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %18 = load i8*, i8** %data13, align 4
  %19 = load i32, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds i8, i8* %18, i32 %19
  call void @processMessage(i8* %arrayidx11, [6 x i8]* %arraydecay12, i8* %arrayidx14)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %20 = load i32, i32* %i, align 4
  %add15 = add nsw i32 %20, 8
  store i32 %add15, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define internal void @getSubKeys(i8* %key, [6 x i8]* %ks) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %ks.addr = alloca [6 x i8]*, align 4
  %c = alloca [17 x [7 x i8]], align 16
  %d = alloca [17 x [4 x i8]], align 16
  %kp = alloca [7 x i8], align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i8* %key, i8** %key.addr, align 4
  store [6 x i8]* %ks, [6 x i8]** %ks.addr, align 4
  %arraydecay = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 0
  %0 = bitcast [7 x i8]* %arraydecay to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 119, i1 false)
  %arraydecay1 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 0
  %1 = bitcast [4 x i8]* %arraydecay1 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %1, i8 0, i32 68, i1 false)
  %2 = load [6 x i8]*, [6 x i8]** %ks.addr, align 4
  %3 = bitcast [6 x i8]* %2 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 1 %3, i8 0, i32 102, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %4, 56
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay2 = getelementptr inbounds [7 x i8], [7 x i8]* %kp, i32 0, i32 0
  %5 = load i32, i32* %i, align 4
  %6 = load i8*, i8** %key.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [56 x i8], [56 x i8]* @PC1, i32 0, i32 %7
  %8 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %8 to i32
  %sub = sub nsw i32 %conv, 1
  %call = call i32 @peekBit(i8* %6, i32 %sub)
  call void @pokeBit(i8* %arraydecay2, i32 %5, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc15, %for.end
  %10 = load i32, i32* %i, align 4
  %cmp4 = icmp slt i32 %10, 28
  br i1 %cmp4, label %for.body6, label %for.end17

for.body6:                                        ; preds = %for.cond3
  %arrayidx7 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 0
  %arraydecay8 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx7, i32 0, i32 0
  %11 = load i32, i32* %i, align 4
  %arraydecay9 = getelementptr inbounds [7 x i8], [7 x i8]* %kp, i32 0, i32 0
  %12 = load i32, i32* %i, align 4
  %call10 = call i32 @peekBit(i8* %arraydecay9, i32 %12)
  call void @pokeBit(i8* %arraydecay8, i32 %11, i32 %call10)
  %arrayidx11 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 0
  %arraydecay12 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx11, i32 0, i32 0
  %13 = load i32, i32* %i, align 4
  %arraydecay13 = getelementptr inbounds [7 x i8], [7 x i8]* %kp, i32 0, i32 0
  %14 = load i32, i32* %i, align 4
  %add = add nsw i32 %14, 28
  %call14 = call i32 @peekBit(i8* %arraydecay13, i32 %add)
  call void @pokeBit(i8* %arraydecay12, i32 %13, i32 %call14)
  br label %for.inc15

for.inc15:                                        ; preds = %for.body6
  %15 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %15, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond3

for.end17:                                        ; preds = %for.cond3
  store i32 1, i32* %i, align 4
  br label %for.cond18

for.cond18:                                       ; preds = %for.inc38, %for.end17
  %16 = load i32, i32* %i, align 4
  %cmp19 = icmp slt i32 %16, 17
  br i1 %cmp19, label %for.body21, label %for.end40

for.body21:                                       ; preds = %for.cond18
  %17 = load i32, i32* %i, align 4
  %sub22 = sub nsw i32 %17, 1
  %arrayidx23 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %sub22
  %arraydecay24 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx23, i32 0, i32 0
  %18 = load i32, i32* %i, align 4
  %sub25 = sub nsw i32 %18, 1
  %arrayidx26 = getelementptr inbounds [16 x i8], [16 x i8]* @SHIFTS, i32 0, i32 %sub25
  %19 = load i8, i8* %arrayidx26, align 1
  %conv27 = zext i8 %19 to i32
  %20 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %20
  %arraydecay29 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx28, i32 0, i32 0
  call void @shiftLeft(i8* %arraydecay24, i32 28, i32 %conv27, i8* %arraydecay29)
  %21 = load i32, i32* %i, align 4
  %sub30 = sub nsw i32 %21, 1
  %arrayidx31 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 %sub30
  %arraydecay32 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx31, i32 0, i32 0
  %22 = load i32, i32* %i, align 4
  %sub33 = sub nsw i32 %22, 1
  %arrayidx34 = getelementptr inbounds [16 x i8], [16 x i8]* @SHIFTS, i32 0, i32 %sub33
  %23 = load i8, i8* %arrayidx34, align 1
  %conv35 = zext i8 %23 to i32
  %24 = load i32, i32* %i, align 4
  %arrayidx36 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 %24
  %arraydecay37 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx36, i32 0, i32 0
  call void @shiftLeft(i8* %arraydecay32, i32 28, i32 %conv35, i8* %arraydecay37)
  br label %for.inc38

for.inc38:                                        ; preds = %for.body21
  %25 = load i32, i32* %i, align 4
  %inc39 = add nsw i32 %25, 1
  store i32 %inc39, i32* %i, align 4
  br label %for.cond18

for.end40:                                        ; preds = %for.cond18
  store i32 1, i32* %i, align 4
  br label %for.cond41

for.cond41:                                       ; preds = %for.inc58, %for.end40
  %26 = load i32, i32* %i, align 4
  %cmp42 = icmp slt i32 %26, 17
  br i1 %cmp42, label %for.body44, label %for.end60

for.body44:                                       ; preds = %for.cond41
  store i32 28, i32* %j, align 4
  br label %for.cond45

for.cond45:                                       ; preds = %for.inc55, %for.body44
  %27 = load i32, i32* %j, align 4
  %cmp46 = icmp slt i32 %27, 56
  br i1 %cmp46, label %for.body48, label %for.end57

for.body48:                                       ; preds = %for.cond45
  %28 = load i32, i32* %i, align 4
  %arrayidx49 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %28
  %arraydecay50 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx49, i32 0, i32 0
  %29 = load i32, i32* %j, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx51 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 %30
  %arraydecay52 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx51, i32 0, i32 0
  %31 = load i32, i32* %j, align 4
  %sub53 = sub nsw i32 %31, 28
  %call54 = call i32 @peekBit(i8* %arraydecay52, i32 %sub53)
  call void @pokeBit(i8* %arraydecay50, i32 %29, i32 %call54)
  br label %for.inc55

for.inc55:                                        ; preds = %for.body48
  %32 = load i32, i32* %j, align 4
  %inc56 = add nsw i32 %32, 1
  store i32 %inc56, i32* %j, align 4
  br label %for.cond45

for.end57:                                        ; preds = %for.cond45
  br label %for.inc58

for.inc58:                                        ; preds = %for.end57
  %33 = load i32, i32* %i, align 4
  %inc59 = add nsw i32 %33, 1
  store i32 %inc59, i32* %i, align 4
  br label %for.cond41

for.end60:                                        ; preds = %for.cond41
  store i32 1, i32* %i, align 4
  br label %for.cond61

for.cond61:                                       ; preds = %for.inc80, %for.end60
  %34 = load i32, i32* %i, align 4
  %cmp62 = icmp slt i32 %34, 17
  br i1 %cmp62, label %for.body64, label %for.end82

for.body64:                                       ; preds = %for.cond61
  store i32 0, i32* %j, align 4
  br label %for.cond65

for.cond65:                                       ; preds = %for.inc77, %for.body64
  %35 = load i32, i32* %j, align 4
  %cmp66 = icmp slt i32 %35, 48
  br i1 %cmp66, label %for.body68, label %for.end79

for.body68:                                       ; preds = %for.cond65
  %36 = load [6 x i8]*, [6 x i8]** %ks.addr, align 4
  %37 = load i32, i32* %i, align 4
  %arrayidx69 = getelementptr inbounds [6 x i8], [6 x i8]* %36, i32 %37
  %arraydecay70 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx69, i32 0, i32 0
  %38 = load i32, i32* %j, align 4
  %39 = load i32, i32* %i, align 4
  %arrayidx71 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %39
  %arraydecay72 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx71, i32 0, i32 0
  %40 = load i32, i32* %j, align 4
  %arrayidx73 = getelementptr inbounds [48 x i8], [48 x i8]* @PC2, i32 0, i32 %40
  %41 = load i8, i8* %arrayidx73, align 1
  %conv74 = zext i8 %41 to i32
  %sub75 = sub nsw i32 %conv74, 1
  %call76 = call i32 @peekBit(i8* %arraydecay72, i32 %sub75)
  call void @pokeBit(i8* %arraydecay70, i32 %38, i32 %call76)
  br label %for.inc77

for.inc77:                                        ; preds = %for.body68
  %42 = load i32, i32* %j, align 4
  %inc78 = add nsw i32 %42, 1
  store i32 %inc78, i32* %j, align 4
  br label %for.cond65

for.end79:                                        ; preds = %for.cond65
  br label %for.inc80

for.inc80:                                        ; preds = %for.end79
  %43 = load i32, i32* %i, align 4
  %inc81 = add nsw i32 %43, 1
  store i32 %inc81, i32* %i, align 4
  br label %for.cond61

for.end82:                                        ; preds = %for.cond61
  ret void
}

declare noalias i8* @malloc(i32 %0) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: noinline nounwind optnone
define internal void @processMessage(i8* %message, [6 x i8]* %ks, i8* %ep) #0 {
entry:
  %message.addr = alloca i8*, align 4
  %ks.addr = alloca [6 x i8]*, align 4
  %ep.addr = alloca i8*, align 4
  %left = alloca [17 x [4 x i8]], align 16
  %right = alloca [17 x [4 x i8]], align 16
  %mp = alloca [8 x i8], align 1
  %e = alloca [8 x i8], align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %fs = alloca [4 x i8], align 1
  store i8* %message, i8** %message.addr, align 4
  store [6 x i8]* %ks, [6 x i8]** %ks.addr, align 4
  store i8* %ep, i8** %ep.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 64
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %mp, i32 0, i32 0
  %1 = load i32, i32* %i, align 4
  %2 = load i8*, i8** %message.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [64 x i8], [64 x i8]* @IP, i32 0, i32 %3
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %sub = sub nsw i32 %conv, 1
  %call = call i32 @peekBit(i8* %2, i32 %sub)
  call void @pokeBit(i8* %arraydecay, i32 %1, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc13, %for.end
  %6 = load i32, i32* %i, align 4
  %cmp2 = icmp slt i32 %6, 32
  br i1 %cmp2, label %for.body4, label %for.end15

for.body4:                                        ; preds = %for.cond1
  %arrayidx5 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 0
  %arraydecay6 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx5, i32 0, i32 0
  %7 = load i32, i32* %i, align 4
  %arraydecay7 = getelementptr inbounds [8 x i8], [8 x i8]* %mp, i32 0, i32 0
  %8 = load i32, i32* %i, align 4
  %call8 = call i32 @peekBit(i8* %arraydecay7, i32 %8)
  call void @pokeBit(i8* %arraydecay6, i32 %7, i32 %call8)
  %arrayidx9 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 0
  %arraydecay10 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx9, i32 0, i32 0
  %9 = load i32, i32* %i, align 4
  %arraydecay11 = getelementptr inbounds [8 x i8], [8 x i8]* %mp, i32 0, i32 0
  %10 = load i32, i32* %i, align 4
  %add = add nsw i32 %10, 32
  %call12 = call i32 @peekBit(i8* %arraydecay11, i32 %add)
  call void @pokeBit(i8* %arraydecay10, i32 %9, i32 %call12)
  br label %for.inc13

for.inc13:                                        ; preds = %for.body4
  %11 = load i32, i32* %i, align 4
  %inc14 = add nsw i32 %11, 1
  store i32 %inc14, i32* %i, align 4
  br label %for.cond1

for.end15:                                        ; preds = %for.cond1
  store i32 1, i32* %i, align 4
  br label %for.cond16

for.cond16:                                       ; preds = %for.inc50, %for.end15
  %12 = load i32, i32* %i, align 4
  %cmp17 = icmp slt i32 %12, 17
  br i1 %cmp17, label %for.body19, label %for.end52

for.body19:                                       ; preds = %for.cond16
  %13 = load i32, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 %13
  %arraydecay21 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx20, i32 0, i32 0
  %14 = load i32, i32* %i, align 4
  %sub22 = sub nsw i32 %14, 1
  %arrayidx23 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 %sub22
  %arraydecay24 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx23, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %arraydecay21, i8* align 4 %arraydecay24, i32 4, i1 false)
  %15 = load i32, i32* %i, align 4
  %sub25 = sub nsw i32 %15, 1
  %arrayidx26 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 %sub25
  %arraydecay27 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx26, i32 0, i32 0
  %16 = load [6 x i8]*, [6 x i8]** %ks.addr, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds [6 x i8], [6 x i8]* %16, i32 %17
  %arraydecay29 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx28, i32 0, i32 0
  %arraydecay30 = getelementptr inbounds [4 x i8], [4 x i8]* %fs, i32 0, i32 0
  call void @f(i8* %arraydecay27, i8* %arraydecay29, i8* %arraydecay30)
  store i32 0, i32* %j, align 4
  br label %for.cond31

for.cond31:                                       ; preds = %for.inc42, %for.body19
  %18 = load i32, i32* %j, align 4
  %cmp32 = icmp slt i32 %18, 4
  br i1 %cmp32, label %for.body34, label %for.end44

for.body34:                                       ; preds = %for.cond31
  %19 = load i32, i32* %j, align 4
  %arrayidx35 = getelementptr inbounds [4 x i8], [4 x i8]* %fs, i32 0, i32 %19
  %20 = load i8, i8* %arrayidx35, align 1
  %conv36 = zext i8 %20 to i32
  %21 = load i32, i32* %i, align 4
  %sub37 = sub nsw i32 %21, 1
  %arrayidx38 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 %sub37
  %22 = load i32, i32* %j, align 4
  %arrayidx39 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx38, i32 0, i32 %22
  %23 = load i8, i8* %arrayidx39, align 1
  %conv40 = zext i8 %23 to i32
  %xor = xor i32 %conv40, %conv36
  %conv41 = trunc i32 %xor to i8
  store i8 %conv41, i8* %arrayidx39, align 1
  br label %for.inc42

for.inc42:                                        ; preds = %for.body34
  %24 = load i32, i32* %j, align 4
  %inc43 = add nsw i32 %24, 1
  store i32 %inc43, i32* %j, align 4
  br label %for.cond31

for.end44:                                        ; preds = %for.cond31
  %25 = load i32, i32* %i, align 4
  %arrayidx45 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 %25
  %arraydecay46 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx45, i32 0, i32 0
  %26 = load i32, i32* %i, align 4
  %sub47 = sub nsw i32 %26, 1
  %arrayidx48 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 %sub47
  %arraydecay49 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx48, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %arraydecay46, i8* align 4 %arraydecay49, i32 4, i1 false)
  br label %for.inc50

for.inc50:                                        ; preds = %for.end44
  %27 = load i32, i32* %i, align 4
  %inc51 = add nsw i32 %27, 1
  store i32 %inc51, i32* %i, align 4
  br label %for.cond16

for.end52:                                        ; preds = %for.cond16
  store i32 0, i32* %i, align 4
  br label %for.cond53

for.cond53:                                       ; preds = %for.inc61, %for.end52
  %28 = load i32, i32* %i, align 4
  %cmp54 = icmp slt i32 %28, 32
  br i1 %cmp54, label %for.body56, label %for.end63

for.body56:                                       ; preds = %for.cond53
  %arraydecay57 = getelementptr inbounds [8 x i8], [8 x i8]* %e, i32 0, i32 0
  %29 = load i32, i32* %i, align 4
  %arrayidx58 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 16
  %arraydecay59 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx58, i32 0, i32 0
  %30 = load i32, i32* %i, align 4
  %call60 = call i32 @peekBit(i8* %arraydecay59, i32 %30)
  call void @pokeBit(i8* %arraydecay57, i32 %29, i32 %call60)
  br label %for.inc61

for.inc61:                                        ; preds = %for.body56
  %31 = load i32, i32* %i, align 4
  %inc62 = add nsw i32 %31, 1
  store i32 %inc62, i32* %i, align 4
  br label %for.cond53

for.end63:                                        ; preds = %for.cond53
  store i32 32, i32* %i, align 4
  br label %for.cond64

for.cond64:                                       ; preds = %for.inc73, %for.end63
  %32 = load i32, i32* %i, align 4
  %cmp65 = icmp slt i32 %32, 64
  br i1 %cmp65, label %for.body67, label %for.end75

for.body67:                                       ; preds = %for.cond64
  %arraydecay68 = getelementptr inbounds [8 x i8], [8 x i8]* %e, i32 0, i32 0
  %33 = load i32, i32* %i, align 4
  %arrayidx69 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 16
  %arraydecay70 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx69, i32 0, i32 0
  %34 = load i32, i32* %i, align 4
  %sub71 = sub nsw i32 %34, 32
  %call72 = call i32 @peekBit(i8* %arraydecay70, i32 %sub71)
  call void @pokeBit(i8* %arraydecay68, i32 %33, i32 %call72)
  br label %for.inc73

for.inc73:                                        ; preds = %for.body67
  %35 = load i32, i32* %i, align 4
  %inc74 = add nsw i32 %35, 1
  store i32 %inc74, i32* %i, align 4
  br label %for.cond64

for.end75:                                        ; preds = %for.cond64
  store i32 0, i32* %i, align 4
  br label %for.cond76

for.cond76:                                       ; preds = %for.inc85, %for.end75
  %36 = load i32, i32* %i, align 4
  %cmp77 = icmp slt i32 %36, 64
  br i1 %cmp77, label %for.body79, label %for.end87

for.body79:                                       ; preds = %for.cond76
  %37 = load i8*, i8** %ep.addr, align 4
  %38 = load i32, i32* %i, align 4
  %arraydecay80 = getelementptr inbounds [8 x i8], [8 x i8]* %e, i32 0, i32 0
  %39 = load i32, i32* %i, align 4
  %arrayidx81 = getelementptr inbounds [64 x i8], [64 x i8]* @IP2, i32 0, i32 %39
  %40 = load i8, i8* %arrayidx81, align 1
  %conv82 = zext i8 %40 to i32
  %sub83 = sub nsw i32 %conv82, 1
  %call84 = call i32 @peekBit(i8* %arraydecay80, i32 %sub83)
  call void @pokeBit(i8* %37, i32 %38, i32 %call84)
  br label %for.inc85

for.inc85:                                        ; preds = %for.body79
  %41 = load i32, i32* %i, align 4
  %inc86 = add nsw i32 %41, 1
  store i32 %inc86, i32* %i, align 4
  br label %for.cond76

for.end87:                                        ; preds = %for.cond76
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @decrypt(%struct.String* noalias sret align 4 %agg.result, i8* %key, i8* %message, i32 %len) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %message.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %ks = alloca [17 x [6 x i8]], align 16
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %padByte = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8* %key, i8** %key.addr, align 4
  store i8* %message, i8** %message.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = bitcast %struct.String* %agg.result to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  %1 = load i8*, i8** %key.addr, align 4
  %arraydecay = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  call void @getSubKeys(i8* %1, [6 x i8]* %arraydecay)
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc12, %entry
  %2 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, 9
  br i1 %cmp, label %for.body, label %for.end14

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %3, 6
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %4
  %5 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx, i32 0, i32 %5
  %6 = load i8, i8* %arrayidx4, align 1
  store i8 %6, i8* %temp, align 1
  %7 = load i32, i32* %i, align 4
  %sub = sub nsw i32 17, %7
  %arrayidx5 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %sub
  %8 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx5, i32 0, i32 %8
  %9 = load i8, i8* %arrayidx6, align 1
  %10 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %10
  %11 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx7, i32 0, i32 %11
  store i8 %9, i8* %arrayidx8, align 1
  %12 = load i8, i8* %temp, align 1
  %13 = load i32, i32* %i, align 4
  %sub9 = sub nsw i32 17, %13
  %arrayidx10 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %sub9
  %14 = load i32, i32* %j, align 4
  %arrayidx11 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx10, i32 0, i32 %14
  store i8 %12, i8* %arrayidx11, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %15 = load i32, i32* %j, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc12

for.inc12:                                        ; preds = %for.end
  %16 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %16, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond

for.end14:                                        ; preds = %for.cond
  %17 = load i32, i32* %len.addr, align 4
  %call = call noalias i8* @malloc(i32 %17)
  %data = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  store i8* %call, i8** %data, align 4
  %data15 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %18 = load i8*, i8** %data15, align 4
  %19 = load i8*, i8** %message.addr, align 4
  %20 = load i32, i32* %len.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %18, i8* align 1 %19, i32 %20, i1 false)
  %21 = load i32, i32* %len.addr, align 4
  %len16 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  store i32 %21, i32* %len16, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond17

for.cond17:                                       ; preds = %for.inc26, %for.end14
  %22 = load i32, i32* %i, align 4
  %len18 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %23 = load i32, i32* %len18, align 4
  %cmp19 = icmp slt i32 %22, %23
  br i1 %cmp19, label %for.body20, label %for.end27

for.body20:                                       ; preds = %for.cond17
  %data21 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %24 = load i8*, i8** %data21, align 4
  %25 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds i8, i8* %24, i32 %25
  %arraydecay23 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  %data24 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %26 = load i8*, i8** %data24, align 4
  %27 = load i32, i32* %i, align 4
  %arrayidx25 = getelementptr inbounds i8, i8* %26, i32 %27
  call void @processMessage(i8* %arrayidx22, [6 x i8]* %arraydecay23, i8* %arrayidx25)
  br label %for.inc26

for.inc26:                                        ; preds = %for.body20
  %28 = load i32, i32* %i, align 4
  %add = add nsw i32 %28, 8
  store i32 %add, i32* %i, align 4
  br label %for.cond17

for.end27:                                        ; preds = %for.cond17
  %data28 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %29 = load i8*, i8** %data28, align 4
  %30 = load i32, i32* %len.addr, align 4
  %sub29 = sub nsw i32 %30, 1
  %arrayidx30 = getelementptr inbounds i8, i8* %29, i32 %sub29
  %31 = load i8, i8* %arrayidx30, align 1
  store i8 %31, i8* %padByte, align 1
  %32 = load i8, i8* %padByte, align 1
  %conv = zext i8 %32 to i32
  %len31 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %33 = load i32, i32* %len31, align 4
  %sub32 = sub nsw i32 %33, %conv
  store i32 %sub32, i32* %len31, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @driver(i8* %key, i8* %message, i32 %len) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %message.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %encoded = alloca %struct.String, align 4
  %decoded = alloca %struct.String, align 4
  %buffer = alloca [128 x i8], align 16
  %tmp = alloca %struct.String, align 4
  %tmp9 = alloca %struct.String, align 4
  store i8* %key, i8** %key.addr, align 4
  store i8* %message, i8** %message.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load i8*, i8** %key.addr, align 4
  %arraydecay = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %0, i32 8, i8* %arraydecay)
  %arraydecay1 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i32 0, i32 0), i8* %arraydecay1)
  %1 = load i8*, i8** %message.addr, align 4
  %2 = load i32, i32* %len.addr, align 4
  %arraydecay2 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %1, i32 %2, i8* %arraydecay2)
  %arraydecay3 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0), i8* %arraydecay3)
  %3 = load i8*, i8** %key.addr, align 4
  %4 = load i8*, i8** %message.addr, align 4
  %5 = load i32, i32* %len.addr, align 4
  call void @encrypt(%struct.String* sret align 4 %tmp, i8* %3, i8* %4, i32 %5)
  %6 = bitcast %struct.String* %encoded to i8*
  %7 = bitcast %struct.String* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %6, i8* align 4 %7, i32 8, i1 false)
  %data = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  %8 = load i8*, i8** %data, align 4
  %len5 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 1
  %9 = load i32, i32* %len5, align 4
  %arraydecay6 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %8, i32 %9, i8* %arraydecay6)
  %arraydecay7 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0), i8* %arraydecay7)
  %10 = load i8*, i8** %key.addr, align 4
  %data10 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  %11 = load i8*, i8** %data10, align 4
  %len11 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 1
  %12 = load i32, i32* %len11, align 4
  call void @decrypt(%struct.String* sret align 4 %tmp9, i8* %10, i8* %11, i32 %12)
  %13 = bitcast %struct.String* %decoded to i8*
  %14 = bitcast %struct.String* %tmp9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %13, i8* align 4 %14, i32 8, i1 false)
  %data12 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 0
  %15 = load i8*, i8** %data12, align 4
  %len13 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 1
  %16 = load i32, i32* %len13, align 4
  %arraydecay14 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %15, i32 %16, i8* %arraydecay14)
  %arraydecay15 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0), i8* %arraydecay15)
  %len17 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 1
  %17 = load i32, i32* %len17, align 4
  %cmp = icmp sgt i32 %17, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %data18 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  %18 = load i8*, i8** %data18, align 4
  call void @free(i8* %18)
  %data19 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  store i8* null, i8** %data19, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %len20 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 1
  %19 = load i32, i32* %len20, align 4
  %cmp21 = icmp sgt i32 %19, 0
  br i1 %cmp21, label %if.then22, label %if.end25

if.then22:                                        ; preds = %if.end
  %data23 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 0
  %20 = load i8*, i8** %data23, align 4
  call void @free(i8* %20)
  %data24 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 0
  store i8* null, i8** %data24, align 4
  br label %if.end25

if.end25:                                         ; preds = %if.then22, %if.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @printBytes(i8* %ptr, i32 %len, i8* %out) #0 {
entry:
  %ptr.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  store i8* %ptr, i8** %ptr.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %len.addr, align 4
  %dec = add nsw i32 %0, -1
  store i32 %dec, i32* %len.addr, align 4
  %cmp = icmp sgt i32 %0, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i8*, i8** %ptr.addr, align 4
  %2 = load i8, i8* %1, align 1
  %conv = zext i8 %2 to i32
  %shr = ashr i32 %conv, 4
  %conv1 = trunc i32 %shr to i8
  %call = call signext i8 @toHex(i8 zeroext %conv1)
  %3 = load i8*, i8** %out.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %3, i32 1
  store i8* %incdec.ptr, i8** %out.addr, align 4
  store i8 %call, i8* %3, align 1
  %4 = load i8*, i8** %ptr.addr, align 4
  %5 = load i8, i8* %4, align 1
  %conv2 = zext i8 %5 to i32
  %and = and i32 %conv2, 15
  %conv3 = trunc i32 %and to i8
  %call4 = call signext i8 @toHex(i8 zeroext %conv3)
  %6 = load i8*, i8** %out.addr, align 4
  %incdec.ptr5 = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr5, i8** %out.addr, align 4
  store i8 %call4, i8* %6, align 1
  %7 = load i8*, i8** %ptr.addr, align 4
  %incdec.ptr6 = getelementptr inbounds i8, i8* %7, i32 1
  store i8* %incdec.ptr6, i8** %ptr.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %8 = load i8*, i8** %out.addr, align 4
  store i8 0, i8* %8, align 1
  ret void
}

declare i32 @printf(i8* %0, ...) #2

declare void @free(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %keys = alloca [3 x [8 x i8]], align 16
  %message1 = alloca [8 x i8], align 1
  %message2 = alloca [8 x i8], align 1
  %message3 = alloca [38 x i8], align 16
  %len = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [3 x [8 x i8]]* %keys to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([3 x [8 x i8]], [3 x [8 x i8]]* @__const.main.keys, i32 0, i32 0, i32 0), i32 24, i1 false)
  %1 = bitcast [8 x i8]* %message1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %1, i8* align 1 getelementptr inbounds ([8 x i8], [8 x i8]* @__const.main.message1, i32 0, i32 0), i32 8, i1 false)
  %2 = bitcast [8 x i8]* %message2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %2, i8* align 1 getelementptr inbounds ([8 x i8], [8 x i8]* @__const.main.message2, i32 0, i32 0), i32 8, i1 false)
  %3 = bitcast [38 x i8]* %message3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %3, i8* align 16 getelementptr inbounds ([38 x i8], [38 x i8]* @__const.main.message3, i32 0, i32 0), i32 38, i1 false)
  store i32 8, i32* %len, align 4
  %arrayidx = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* %keys, i32 0, i32 0
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %arrayidx, i32 0, i32 0
  %arraydecay1 = getelementptr inbounds [8 x i8], [8 x i8]* %message1, i32 0, i32 0
  %4 = load i32, i32* %len, align 4
  call void @driver(i8* %arraydecay, i8* %arraydecay1, i32 %4)
  store i32 8, i32* %len, align 4
  %arrayidx2 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* %keys, i32 0, i32 1
  %arraydecay3 = getelementptr inbounds [8 x i8], [8 x i8]* %arrayidx2, i32 0, i32 0
  %arraydecay4 = getelementptr inbounds [8 x i8], [8 x i8]* %message2, i32 0, i32 0
  %5 = load i32, i32* %len, align 4
  call void @driver(i8* %arraydecay3, i8* %arraydecay4, i32 %5)
  store i32 38, i32* %len, align 4
  %arrayidx5 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* %keys, i32 0, i32 2
  %arraydecay6 = getelementptr inbounds [8 x i8], [8 x i8]* %arrayidx5, i32 0, i32 0
  %arraydecay7 = getelementptr inbounds [38 x i8], [38 x i8]* %message3, i32 0, i32 0
  %6 = load i32, i32* %len, align 4
  call void @driver(i8* %arraydecay6, i8* %arraydecay7, i32 %6)
  ret i32 0
}

; Function Attrs: noinline nounwind optnone
define internal void @pokeBit(i8* %dst, i32 %index, i32 %value) #0 {
entry:
  %dst.addr = alloca i8*, align 4
  %index.addr = alloca i32, align 4
  %value.addr = alloca i32, align 4
  %cell = alloca i32, align 4
  %bit = alloca i32, align 4
  store i8* %dst, i8** %dst.addr, align 4
  store i32 %index, i32* %index.addr, align 4
  store i32 %value, i32* %value.addr, align 4
  %0 = load i32, i32* %index.addr, align 4
  %div = sdiv i32 %0, 8
  store i32 %div, i32* %cell, align 4
  %1 = load i32, i32* %index.addr, align 4
  %rem = srem i32 %1, 8
  %sub = sub nsw i32 7, %rem
  store i32 %sub, i32* %bit, align 4
  %2 = load i32, i32* %value.addr, align 4
  %cmp = icmp eq i32 %2, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %bit, align 4
  %shl = shl i32 1, %3
  %neg = xor i32 %shl, -1
  %4 = load i8*, i8** %dst.addr, align 4
  %5 = load i32, i32* %cell, align 4
  %arrayidx = getelementptr inbounds i8, i8* %4, i32 %5
  %6 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %6 to i32
  %and = and i32 %conv, %neg
  %conv1 = trunc i32 %and to i8
  store i8 %conv1, i8* %arrayidx, align 1
  br label %if.end

if.else:                                          ; preds = %entry
  %7 = load i32, i32* %bit, align 4
  %shl2 = shl i32 1, %7
  %8 = load i8*, i8** %dst.addr, align 4
  %9 = load i32, i32* %cell, align 4
  %arrayidx3 = getelementptr inbounds i8, i8* %8, i32 %9
  %10 = load i8, i8* %arrayidx3, align 1
  %conv4 = zext i8 %10 to i32
  %or = or i32 %conv4, %shl2
  %conv5 = trunc i32 %or to i8
  store i8 %conv5, i8* %arrayidx3, align 1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i32 @peekBit(i8* %src, i32 %index) #0 {
entry:
  %src.addr = alloca i8*, align 4
  %index.addr = alloca i32, align 4
  %cell = alloca i32, align 4
  %bit = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 4
  store i32 %index, i32* %index.addr, align 4
  %0 = load i32, i32* %index.addr, align 4
  %div = sdiv i32 %0, 8
  store i32 %div, i32* %cell, align 4
  %1 = load i32, i32* %index.addr, align 4
  %rem = srem i32 %1, 8
  %sub = sub nsw i32 7, %rem
  store i32 %sub, i32* %bit, align 4
  %2 = load i8*, i8** %src.addr, align 4
  %3 = load i32, i32* %cell, align 4
  %arrayidx = getelementptr inbounds i8, i8* %2, i32 %3
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %5 = load i32, i32* %bit, align 4
  %shl = shl i32 1, %5
  %and = and i32 %conv, %shl
  %cmp = icmp ne i32 %and, 0
  %conv1 = zext i1 %cmp to i32
  ret i32 %conv1
}

; Function Attrs: noinline nounwind optnone
define internal void @shiftLeft(i8* %src, i32 %len, i32 %times, i8* %dst) #0 {
entry:
  %src.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %times.addr = alloca i32, align 4
  %dst.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %t = alloca i32, align 4
  %temp = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %times, i32* %times.addr, align 4
  store i8* %dst, i8** %dst.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp sle i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8*, i8** %dst.addr, align 4
  %3 = load i32, i32* %i, align 4
  %4 = load i8*, i8** %src.addr, align 4
  %5 = load i32, i32* %i, align 4
  %call = call i32 @peekBit(i8* %4, i32 %5)
  call void @pokeBit(i8* %2, i32 %3, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %t, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc13, %for.end
  %7 = load i32, i32* %t, align 4
  %8 = load i32, i32* %times.addr, align 4
  %cmp2 = icmp sle i32 %7, %8
  br i1 %cmp2, label %for.body3, label %for.end15

for.body3:                                        ; preds = %for.cond1
  %9 = load i8*, i8** %dst.addr, align 4
  %call4 = call i32 @peekBit(i8* %9, i32 0)
  store i32 %call4, i32* %temp, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc9, %for.body3
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %len.addr, align 4
  %cmp6 = icmp sle i32 %10, %11
  br i1 %cmp6, label %for.body7, label %for.end11

for.body7:                                        ; preds = %for.cond5
  %12 = load i8*, i8** %dst.addr, align 4
  %13 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %13, 1
  %14 = load i8*, i8** %dst.addr, align 4
  %15 = load i32, i32* %i, align 4
  %call8 = call i32 @peekBit(i8* %14, i32 %15)
  call void @pokeBit(i8* %12, i32 %sub, i32 %call8)
  br label %for.inc9

for.inc9:                                         ; preds = %for.body7
  %16 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %16, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond5

for.end11:                                        ; preds = %for.cond5
  %17 = load i8*, i8** %dst.addr, align 4
  %18 = load i32, i32* %len.addr, align 4
  %sub12 = sub nsw i32 %18, 1
  %19 = load i32, i32* %temp, align 4
  call void @pokeBit(i8* %17, i32 %sub12, i32 %19)
  br label %for.inc13

for.inc13:                                        ; preds = %for.end11
  %20 = load i32, i32* %t, align 4
  %inc14 = add nsw i32 %20, 1
  store i32 %inc14, i32* %t, align 4
  br label %for.cond1

for.end15:                                        ; preds = %for.cond1
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @f(i8* %r, i8* %ks, i8* %sp) #0 {
entry:
  %r.addr = alloca i8*, align 4
  %ks.addr = alloca i8*, align 4
  %sp.addr = alloca i8*, align 4
  %er = alloca [6 x i8], align 1
  %sr = alloca [4 x i8], align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %b = alloca [6 x i32], align 16
  %k = alloca i32, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %m = alloca i32, align 4
  %n = alloca i32, align 4
  %p = alloca i32, align 4
  store i8* %r, i8** %r.addr, align 4
  store i8* %ks, i8** %ks.addr, align 4
  store i8* %sp, i8** %sp.addr, align 4
  %arraydecay = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  call void @llvm.memset.p0i8.i32(i8* align 1 %arraydecay, i8 0, i32 6, i1 false)
  %arraydecay1 = getelementptr inbounds [4 x i8], [4 x i8]* %sr, i32 0, i32 0
  call void @llvm.memset.p0i8.i32(i8* align 1 %arraydecay1, i8 0, i32 4, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 48
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay2 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  %1 = load i32, i32* %i, align 4
  %2 = load i8*, i8** %r.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [48 x i8], [48 x i8]* @E, i32 0, i32 %3
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %sub = sub nsw i32 %conv, 1
  %call = call i32 @peekBit(i8* %2, i32 %sub)
  call void @pokeBit(i8* %arraydecay2, i32 %1, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc12, %for.end
  %6 = load i32, i32* %i, align 4
  %cmp4 = icmp slt i32 %6, 6
  br i1 %cmp4, label %for.body6, label %for.end14

for.body6:                                        ; preds = %for.cond3
  %7 = load i8*, i8** %ks.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds i8, i8* %7, i32 %8
  %9 = load i8, i8* %arrayidx7, align 1
  %conv8 = zext i8 %9 to i32
  %10 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 %10
  %11 = load i8, i8* %arrayidx9, align 1
  %conv10 = zext i8 %11 to i32
  %xor = xor i32 %conv10, %conv8
  %conv11 = trunc i32 %xor to i8
  store i8 %conv11, i8* %arrayidx9, align 1
  br label %for.inc12

for.inc12:                                        ; preds = %for.body6
  %12 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %12, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond3

for.end14:                                        ; preds = %for.cond3
  store i32 0, i32* %i, align 4
  br label %for.cond15

for.cond15:                                       ; preds = %for.inc59, %for.end14
  %13 = load i32, i32* %i, align 4
  %cmp16 = icmp slt i32 %13, 8
  br i1 %cmp16, label %for.body18, label %for.end61

for.body18:                                       ; preds = %for.cond15
  %14 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %14, 6
  store i32 %mul, i32* %j, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond19

for.cond19:                                       ; preds = %for.inc28, %for.body18
  %15 = load i32, i32* %k, align 4
  %cmp20 = icmp slt i32 %15, 6
  br i1 %cmp20, label %for.body22, label %for.end30

for.body22:                                       ; preds = %for.cond19
  %arraydecay23 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  %16 = load i32, i32* %j, align 4
  %17 = load i32, i32* %k, align 4
  %add = add nsw i32 %16, %17
  %call24 = call i32 @peekBit(i8* %arraydecay23, i32 %add)
  %cmp25 = icmp ne i32 %call24, 0
  %18 = zext i1 %cmp25 to i64
  %cond = select i1 %cmp25, i32 1, i32 0
  %19 = load i32, i32* %k, align 4
  %arrayidx27 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 %19
  store i32 %cond, i32* %arrayidx27, align 4
  br label %for.inc28

for.inc28:                                        ; preds = %for.body22
  %20 = load i32, i32* %k, align 4
  %inc29 = add nsw i32 %20, 1
  store i32 %inc29, i32* %k, align 4
  br label %for.cond19

for.end30:                                        ; preds = %for.cond19
  %arrayidx31 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 0
  %21 = load i32, i32* %arrayidx31, align 16
  %mul32 = mul nsw i32 2, %21
  %arrayidx33 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 5
  %22 = load i32, i32* %arrayidx33, align 4
  %add34 = add nsw i32 %mul32, %22
  store i32 %add34, i32* %row, align 4
  %arrayidx35 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 1
  %23 = load i32, i32* %arrayidx35, align 4
  %mul36 = mul nsw i32 8, %23
  %arrayidx37 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 2
  %24 = load i32, i32* %arrayidx37, align 8
  %mul38 = mul nsw i32 4, %24
  %add39 = add nsw i32 %mul36, %mul38
  %arrayidx40 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 3
  %25 = load i32, i32* %arrayidx40, align 4
  %mul41 = mul nsw i32 2, %25
  %add42 = add nsw i32 %add39, %mul41
  %arrayidx43 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 4
  %26 = load i32, i32* %arrayidx43, align 16
  %add44 = add nsw i32 %add42, %26
  store i32 %add44, i32* %col, align 4
  %27 = load i32, i32* %i, align 4
  %arrayidx45 = getelementptr inbounds [8 x [64 x i8]], [8 x [64 x i8]]* @S, i32 0, i32 %27
  %28 = load i32, i32* %row, align 4
  %mul46 = mul nsw i32 %28, 16
  %29 = load i32, i32* %col, align 4
  %add47 = add nsw i32 %mul46, %29
  %arrayidx48 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx45, i32 0, i32 %add47
  %30 = load i8, i8* %arrayidx48, align 1
  %conv49 = zext i8 %30 to i32
  store i32 %conv49, i32* %m, align 4
  store i32 1, i32* %n, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end30
  %31 = load i32, i32* %m, align 4
  %cmp50 = icmp sgt i32 %31, 0
  br i1 %cmp50, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %32 = load i32, i32* %m, align 4
  %rem = srem i32 %32, 2
  store i32 %rem, i32* %p, align 4
  %arraydecay52 = getelementptr inbounds [4 x i8], [4 x i8]* %sr, i32 0, i32 0
  %33 = load i32, i32* %i, align 4
  %add53 = add nsw i32 %33, 1
  %mul54 = mul nsw i32 %add53, 4
  %34 = load i32, i32* %n, align 4
  %sub55 = sub nsw i32 %mul54, %34
  %35 = load i32, i32* %p, align 4
  %cmp56 = icmp eq i32 %35, 1
  %conv57 = zext i1 %cmp56 to i32
  call void @pokeBit(i8* %arraydecay52, i32 %sub55, i32 %conv57)
  %36 = load i32, i32* %m, align 4
  %div = sdiv i32 %36, 2
  store i32 %div, i32* %m, align 4
  %37 = load i32, i32* %n, align 4
  %inc58 = add nsw i32 %37, 1
  store i32 %inc58, i32* %n, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %for.inc59

for.inc59:                                        ; preds = %while.end
  %38 = load i32, i32* %i, align 4
  %inc60 = add nsw i32 %38, 1
  store i32 %inc60, i32* %i, align 4
  br label %for.cond15

for.end61:                                        ; preds = %for.cond15
  store i32 0, i32* %i, align 4
  br label %for.cond62

for.cond62:                                       ; preds = %for.inc71, %for.end61
  %39 = load i32, i32* %i, align 4
  %cmp63 = icmp slt i32 %39, 32
  br i1 %cmp63, label %for.body65, label %for.end73

for.body65:                                       ; preds = %for.cond62
  %40 = load i8*, i8** %sp.addr, align 4
  %41 = load i32, i32* %i, align 4
  %arraydecay66 = getelementptr inbounds [4 x i8], [4 x i8]* %sr, i32 0, i32 0
  %42 = load i32, i32* %i, align 4
  %arrayidx67 = getelementptr inbounds [32 x i8], [32 x i8]* @P, i32 0, i32 %42
  %43 = load i8, i8* %arrayidx67, align 1
  %conv68 = zext i8 %43 to i32
  %sub69 = sub nsw i32 %conv68, 1
  %call70 = call i32 @peekBit(i8* %arraydecay66, i32 %sub69)
  call void @pokeBit(i8* %40, i32 %41, i32 %call70)
  br label %for.inc71

for.inc71:                                        ; preds = %for.body65
  %44 = load i32, i32* %i, align 4
  %inc72 = add nsw i32 %44, 1
  store i32 %inc72, i32* %i, align 4
  br label %for.cond62

for.end73:                                        ; preds = %for.cond62
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal signext i8 @toHex(i8 zeroext %in) #0 {
entry:
  %retval = alloca i8, align 1
  %in.addr = alloca i8, align 1
  store i8 %in, i8* %in.addr, align 1
  %0 = load i8, i8* %in.addr, align 1
  %conv = zext i8 %0 to i32
  %cmp = icmp sle i32 0, %conv
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i8, i8* %in.addr, align 1
  %conv2 = zext i8 %1 to i32
  %cmp3 = icmp slt i32 %conv2, 10
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %2 = load i8, i8* %in.addr, align 1
  %conv5 = zext i8 %2 to i32
  %add = add nsw i32 48, %conv5
  %conv6 = trunc i32 %add to i8
  store i8 %conv6, i8* %retval, align 1
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %3 = load i8, i8* %in.addr, align 1
  %conv7 = zext i8 %3 to i32
  %cmp8 = icmp sle i32 10, %conv7
  br i1 %cmp8, label %land.lhs.true10, label %if.end18

land.lhs.true10:                                  ; preds = %if.end
  %4 = load i8, i8* %in.addr, align 1
  %conv11 = zext i8 %4 to i32
  %cmp12 = icmp sle i32 %conv11, 15
  br i1 %cmp12, label %if.then14, label %if.end18

if.then14:                                        ; preds = %land.lhs.true10
  %5 = load i8, i8* %in.addr, align 1
  %conv15 = zext i8 %5 to i32
  %add16 = add nsw i32 65, %conv15
  %sub = sub nsw i32 %add16, 10
  %conv17 = trunc i32 %sub to i8
  store i8 %conv17, i8* %retval, align 1
  br label %return

if.end18:                                         ; preds = %land.lhs.true10, %if.end
  store i8 0, i8* %retval, align 1
  br label %return

return:                                           ; preds = %if.end18, %if.then14, %if.then
  %6 = load i8, i8* %retval, align 1
  ret i8 %6
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; Replacing "  %12 = trunc i32 %conv6 to i8"
; from ""
; with "  %11 = load i8, i8* %padByte, align 1" in:
"%0:i8 = var
%1:i32 = zext %0
%2:i8 = trunc %1
cand %2 %0
"
; with "  %11 = load i8, i8* %padByte, align 1"

Module after replacement:
; ModuleID = './Data_Encryption_Standard.c.bc'
source_filename = "./Data_Encryption_Standard.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.String = type { i8*, i32 }

@.str = private unnamed_addr constant [14 x i8] c"Key     : %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"Message : %s\0A\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"Encoded : %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"Decoded : %s\0A\0A\00", align 1
@__const.main.keys = private unnamed_addr constant [3 x [8 x i8]] [[8 x i8] c"\134Wy\9B\BC\DF\F1", [8 x i8] c"\0E2\922\EAm\0Ds", [8 x i8] c"\0E2\922\EAm\0Ds"], align 16
@__const.main.message1 = private unnamed_addr constant [8 x i8] c"\01#Eg\89\AB\CD\EF", align 1
@__const.main.message2 = private unnamed_addr constant [8 x i8] c"\87\87\87\87\87\87\87\87", align 1
@__const.main.message3 = private unnamed_addr constant [38 x i8] c"Your lips are smoother than vaseline\0D\0A", align 16
@PC1 = internal constant [56 x i8] c"91)!\19\11\09\01:2*\22\1A\12\0A\02;3+#\1B\13\0B\03<4,$?7/'\1F\17\0F\07>6.&\1E\16\0E\06=5-%\1D\15\0D\05\1C\14\0C\04", align 16
@SHIFTS = internal constant [16 x i8] c"\01\01\02\02\02\02\02\02\01\02\02\02\02\02\02\01", align 16
@PC2 = internal constant [48 x i8] c"\0E\11\0B\18\01\05\03\1C\0F\06\15\0A\17\13\0C\04\1A\08\10\07\1B\14\0D\02)4\1F%/7\1E(3-!0,1'8\225.*2$\1D ", align 16
@IP = internal constant [64 x i8] c":2*\22\1A\12\0A\02<4,$\1C\14\0C\04>6.&\1E\16\0E\06@80( \18\10\0891)!\19\11\09\01;3+#\1B\13\0B\03=5-%\1D\15\0D\05?7/'\1F\17\0F\07", align 16
@IP2 = internal constant [64 x i8] c"(\080\108\18@ '\07/\0F7\17?\1F&\06.\0E6\16>\1E%\05-\0D5\15=\1D$\04,\0C4\14<\1C#\03+\0B3\13;\1B\22\02*\0A2\12:\1A!\01)\091\119\19", align 16
@E = internal constant [48 x i8] c" \01\02\03\04\05\04\05\06\07\08\09\08\09\0A\0B\0C\0D\0C\0D\0E\0F\10\11\10\11\12\13\14\15\14\15\16\17\18\19\18\19\1A\1B\1C\1D\1C\1D\1E\1F \01", align 16
@S = internal constant [8 x [64 x i8]] [[64 x i8] c"\0E\04\0D\01\02\0F\0B\08\03\0A\06\0C\05\09\00\07\00\0F\07\04\0E\02\0D\01\0A\06\0C\0B\09\05\03\08\04\01\0E\08\0D\06\02\0B\0F\0C\09\07\03\0A\05\00\0F\0C\08\02\04\09\01\07\05\0B\03\0E\0A\00\06\0D", [64 x i8] c"\0F\01\08\0E\06\0B\03\04\09\07\02\0D\0C\00\05\0A\03\0D\04\07\0F\02\08\0E\0C\00\01\0A\06\09\0B\05\00\0E\07\0B\0A\04\0D\01\05\08\0C\06\09\03\02\0F\0D\08\0A\01\03\0F\04\02\0B\06\07\0C\00\05\0E\09", [64 x i8] c"\0A\00\09\0E\06\03\0F\05\01\0D\0C\07\0B\04\02\08\0D\07\00\09\03\04\06\0A\02\08\05\0E\0C\0B\0F\01\0D\06\04\09\08\0F\03\00\0B\01\02\0C\05\0A\0E\07\01\0A\0D\00\06\09\08\07\04\0F\0E\03\0B\05\02\0C", [64 x i8] c"\07\0D\0E\03\00\06\09\0A\01\02\08\05\0B\0C\04\0F\0D\08\0B\05\06\0F\00\03\04\07\02\0C\01\0A\0E\09\0A\06\09\00\0C\0B\07\0D\0F\01\03\0E\05\02\08\04\03\0F\00\06\0A\01\0D\08\09\04\05\0B\0C\07\02\0E", [64 x i8] c"\02\0C\04\01\07\0A\0B\06\08\05\03\0F\0D\00\0E\09\0E\0B\02\0C\04\07\0D\01\05\00\0F\0A\03\09\08\06\04\02\01\0B\0A\0D\07\08\0F\09\0C\05\06\03\00\0E\0B\08\0C\07\01\0E\02\0D\06\0F\00\09\0A\04\05\03", [64 x i8] c"\0C\01\0A\0F\09\02\06\08\00\0D\03\04\0E\07\05\0B\0A\0F\04\02\07\0C\09\05\06\01\0D\0E\00\0B\03\08\09\0E\0F\05\02\08\0C\03\07\00\04\0A\01\0D\0B\06\04\03\02\0C\09\05\0F\0A\0B\0E\01\07\06\00\08\0D", [64 x i8] c"\04\0B\02\0E\0F\00\08\0D\03\0C\09\07\05\0A\06\01\0D\00\0B\07\04\09\01\0A\0E\03\05\0C\02\0F\08\06\01\04\0B\0D\0C\03\07\0E\0A\0F\06\08\00\05\09\02\06\0B\0D\08\01\04\0A\07\09\05\00\0F\0E\02\03\0C", [64 x i8] c"\0D\02\08\04\06\0F\0B\01\0A\09\03\0E\05\00\0C\07\01\0F\0D\08\0A\03\07\04\0C\05\06\0B\00\0E\09\02\07\0B\04\01\09\0C\0E\02\00\06\0A\0D\0F\03\05\08\02\01\0E\07\04\0A\08\0D\0F\0C\09\00\03\05\06\0B"], align 16
@P = internal constant [32 x i8] c"\10\07\14\15\1D\0C\1C\11\01\0F\17\1A\05\12\1F\0A\02\08\18\0E \1B\03\09\13\0D\1E\06\16\0B\04\19", align 16
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @encrypt(%struct.String* noalias sret align 4 %agg.result, i8* %key, i8* %message, i32 %len) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %message.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %ks = alloca [17 x [6 x i8]], align 16
  %padByte = alloca i8, align 1
  %i = alloca i32, align 4
  store i8* %key, i8** %key.addr, align 4
  store i8* %message, i8** %message.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = bitcast %struct.String* %agg.result to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  %1 = load i8*, i8** %key.addr, align 4
  %arraydecay = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  call void @getSubKeys(i8* %1, [6 x i8]* %arraydecay)
  %2 = load i32, i32* %len.addr, align 4
  %rem = srem i32 %2, 8
  %sub = sub nsw i32 8, %rem
  %conv = trunc i32 %sub to i8
  store i8 %conv, i8* %padByte, align 1
  %3 = load i32, i32* %len.addr, align 4
  %4 = load i8, i8* %padByte, align 1
  %conv1 = zext i8 %4 to i32
  %add = add nsw i32 %3, %conv1
  %len2 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  store i32 %add, i32* %len2, align 4
  %len3 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %5 = load i32, i32* %len3, align 4
  %call = call noalias i8* @malloc(i32 %5)
  %data = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  store i8* %call, i8** %data, align 4
  %data4 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %6 = load i8*, i8** %data4, align 4
  %7 = load i8*, i8** %message.addr, align 4
  %8 = load i32, i32* %len.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %6, i8* align 1 %7, i32 %8, i1 false)
  %data5 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %9 = load i8*, i8** %data5, align 4
  %10 = load i32, i32* %len.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %9, i32 %10
  %11 = load i8, i8* %padByte, align 1
  %12 = load i8, i8* %padByte, align 1
  %conv7 = zext i8 %12 to i32
  call void @llvm.memset.p0i8.i32(i8* align 1 %arrayidx, i8 %11, i32 %conv7, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %13 = load i32, i32* %i, align 4
  %len8 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %14 = load i32, i32* %len8, align 4
  %cmp = icmp slt i32 %13, %14
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %data10 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %15 = load i8*, i8** %data10, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds i8, i8* %15, i32 %16
  %arraydecay12 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  %data13 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %17 = load i8*, i8** %data13, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds i8, i8* %17, i32 %18
  call void @processMessage(i8* %arrayidx11, [6 x i8]* %arraydecay12, i8* %arrayidx14)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %19 = load i32, i32* %i, align 4
  %add15 = add nsw i32 %19, 8
  store i32 %add15, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define internal void @getSubKeys(i8* %key, [6 x i8]* %ks) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %ks.addr = alloca [6 x i8]*, align 4
  %c = alloca [17 x [7 x i8]], align 16
  %d = alloca [17 x [4 x i8]], align 16
  %kp = alloca [7 x i8], align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i8* %key, i8** %key.addr, align 4
  store [6 x i8]* %ks, [6 x i8]** %ks.addr, align 4
  %arraydecay = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 0
  %0 = bitcast [7 x i8]* %arraydecay to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 119, i1 false)
  %arraydecay1 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 0
  %1 = bitcast [4 x i8]* %arraydecay1 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %1, i8 0, i32 68, i1 false)
  %2 = load [6 x i8]*, [6 x i8]** %ks.addr, align 4
  %3 = bitcast [6 x i8]* %2 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 1 %3, i8 0, i32 102, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %4, 56
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay2 = getelementptr inbounds [7 x i8], [7 x i8]* %kp, i32 0, i32 0
  %5 = load i32, i32* %i, align 4
  %6 = load i8*, i8** %key.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [56 x i8], [56 x i8]* @PC1, i32 0, i32 %7
  %8 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %8 to i32
  %sub = sub nsw i32 %conv, 1
  %call = call i32 @peekBit(i8* %6, i32 %sub)
  call void @pokeBit(i8* %arraydecay2, i32 %5, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc15, %for.end
  %10 = load i32, i32* %i, align 4
  %cmp4 = icmp slt i32 %10, 28
  br i1 %cmp4, label %for.body6, label %for.end17

for.body6:                                        ; preds = %for.cond3
  %arrayidx7 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 0
  %arraydecay8 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx7, i32 0, i32 0
  %11 = load i32, i32* %i, align 4
  %arraydecay9 = getelementptr inbounds [7 x i8], [7 x i8]* %kp, i32 0, i32 0
  %12 = load i32, i32* %i, align 4
  %call10 = call i32 @peekBit(i8* %arraydecay9, i32 %12)
  call void @pokeBit(i8* %arraydecay8, i32 %11, i32 %call10)
  %arrayidx11 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 0
  %arraydecay12 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx11, i32 0, i32 0
  %13 = load i32, i32* %i, align 4
  %arraydecay13 = getelementptr inbounds [7 x i8], [7 x i8]* %kp, i32 0, i32 0
  %14 = load i32, i32* %i, align 4
  %add = add nsw i32 %14, 28
  %call14 = call i32 @peekBit(i8* %arraydecay13, i32 %add)
  call void @pokeBit(i8* %arraydecay12, i32 %13, i32 %call14)
  br label %for.inc15

for.inc15:                                        ; preds = %for.body6
  %15 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %15, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond3

for.end17:                                        ; preds = %for.cond3
  store i32 1, i32* %i, align 4
  br label %for.cond18

for.cond18:                                       ; preds = %for.inc38, %for.end17
  %16 = load i32, i32* %i, align 4
  %cmp19 = icmp slt i32 %16, 17
  br i1 %cmp19, label %for.body21, label %for.end40

for.body21:                                       ; preds = %for.cond18
  %17 = load i32, i32* %i, align 4
  %sub22 = sub nsw i32 %17, 1
  %arrayidx23 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %sub22
  %arraydecay24 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx23, i32 0, i32 0
  %18 = load i32, i32* %i, align 4
  %sub25 = sub nsw i32 %18, 1
  %arrayidx26 = getelementptr inbounds [16 x i8], [16 x i8]* @SHIFTS, i32 0, i32 %sub25
  %19 = load i8, i8* %arrayidx26, align 1
  %conv27 = zext i8 %19 to i32
  %20 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %20
  %arraydecay29 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx28, i32 0, i32 0
  call void @shiftLeft(i8* %arraydecay24, i32 28, i32 %conv27, i8* %arraydecay29)
  %21 = load i32, i32* %i, align 4
  %sub30 = sub nsw i32 %21, 1
  %arrayidx31 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 %sub30
  %arraydecay32 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx31, i32 0, i32 0
  %22 = load i32, i32* %i, align 4
  %sub33 = sub nsw i32 %22, 1
  %arrayidx34 = getelementptr inbounds [16 x i8], [16 x i8]* @SHIFTS, i32 0, i32 %sub33
  %23 = load i8, i8* %arrayidx34, align 1
  %conv35 = zext i8 %23 to i32
  %24 = load i32, i32* %i, align 4
  %arrayidx36 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 %24
  %arraydecay37 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx36, i32 0, i32 0
  call void @shiftLeft(i8* %arraydecay32, i32 28, i32 %conv35, i8* %arraydecay37)
  br label %for.inc38

for.inc38:                                        ; preds = %for.body21
  %25 = load i32, i32* %i, align 4
  %inc39 = add nsw i32 %25, 1
  store i32 %inc39, i32* %i, align 4
  br label %for.cond18

for.end40:                                        ; preds = %for.cond18
  store i32 1, i32* %i, align 4
  br label %for.cond41

for.cond41:                                       ; preds = %for.inc58, %for.end40
  %26 = load i32, i32* %i, align 4
  %cmp42 = icmp slt i32 %26, 17
  br i1 %cmp42, label %for.body44, label %for.end60

for.body44:                                       ; preds = %for.cond41
  store i32 28, i32* %j, align 4
  br label %for.cond45

for.cond45:                                       ; preds = %for.inc55, %for.body44
  %27 = load i32, i32* %j, align 4
  %cmp46 = icmp slt i32 %27, 56
  br i1 %cmp46, label %for.body48, label %for.end57

for.body48:                                       ; preds = %for.cond45
  %28 = load i32, i32* %i, align 4
  %arrayidx49 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %28
  %arraydecay50 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx49, i32 0, i32 0
  %29 = load i32, i32* %j, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx51 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 %30
  %arraydecay52 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx51, i32 0, i32 0
  %31 = load i32, i32* %j, align 4
  %sub53 = sub nsw i32 %31, 28
  %call54 = call i32 @peekBit(i8* %arraydecay52, i32 %sub53)
  call void @pokeBit(i8* %arraydecay50, i32 %29, i32 %call54)
  br label %for.inc55

for.inc55:                                        ; preds = %for.body48
  %32 = load i32, i32* %j, align 4
  %inc56 = add nsw i32 %32, 1
  store i32 %inc56, i32* %j, align 4
  br label %for.cond45

for.end57:                                        ; preds = %for.cond45
  br label %for.inc58

for.inc58:                                        ; preds = %for.end57
  %33 = load i32, i32* %i, align 4
  %inc59 = add nsw i32 %33, 1
  store i32 %inc59, i32* %i, align 4
  br label %for.cond41

for.end60:                                        ; preds = %for.cond41
  store i32 1, i32* %i, align 4
  br label %for.cond61

for.cond61:                                       ; preds = %for.inc80, %for.end60
  %34 = load i32, i32* %i, align 4
  %cmp62 = icmp slt i32 %34, 17
  br i1 %cmp62, label %for.body64, label %for.end82

for.body64:                                       ; preds = %for.cond61
  store i32 0, i32* %j, align 4
  br label %for.cond65

for.cond65:                                       ; preds = %for.inc77, %for.body64
  %35 = load i32, i32* %j, align 4
  %cmp66 = icmp slt i32 %35, 48
  br i1 %cmp66, label %for.body68, label %for.end79

for.body68:                                       ; preds = %for.cond65
  %36 = load [6 x i8]*, [6 x i8]** %ks.addr, align 4
  %37 = load i32, i32* %i, align 4
  %arrayidx69 = getelementptr inbounds [6 x i8], [6 x i8]* %36, i32 %37
  %arraydecay70 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx69, i32 0, i32 0
  %38 = load i32, i32* %j, align 4
  %39 = load i32, i32* %i, align 4
  %arrayidx71 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %39
  %arraydecay72 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx71, i32 0, i32 0
  %40 = load i32, i32* %j, align 4
  %arrayidx73 = getelementptr inbounds [48 x i8], [48 x i8]* @PC2, i32 0, i32 %40
  %41 = load i8, i8* %arrayidx73, align 1
  %conv74 = zext i8 %41 to i32
  %sub75 = sub nsw i32 %conv74, 1
  %call76 = call i32 @peekBit(i8* %arraydecay72, i32 %sub75)
  call void @pokeBit(i8* %arraydecay70, i32 %38, i32 %call76)
  br label %for.inc77

for.inc77:                                        ; preds = %for.body68
  %42 = load i32, i32* %j, align 4
  %inc78 = add nsw i32 %42, 1
  store i32 %inc78, i32* %j, align 4
  br label %for.cond65

for.end79:                                        ; preds = %for.cond65
  br label %for.inc80

for.inc80:                                        ; preds = %for.end79
  %43 = load i32, i32* %i, align 4
  %inc81 = add nsw i32 %43, 1
  store i32 %inc81, i32* %i, align 4
  br label %for.cond61

for.end82:                                        ; preds = %for.cond61
  ret void
}

declare noalias i8* @malloc(i32 %0) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: noinline nounwind optnone
define internal void @processMessage(i8* %message, [6 x i8]* %ks, i8* %ep) #0 {
entry:
  %message.addr = alloca i8*, align 4
  %ks.addr = alloca [6 x i8]*, align 4
  %ep.addr = alloca i8*, align 4
  %left = alloca [17 x [4 x i8]], align 16
  %right = alloca [17 x [4 x i8]], align 16
  %mp = alloca [8 x i8], align 1
  %e = alloca [8 x i8], align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %fs = alloca [4 x i8], align 1
  store i8* %message, i8** %message.addr, align 4
  store [6 x i8]* %ks, [6 x i8]** %ks.addr, align 4
  store i8* %ep, i8** %ep.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 64
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %mp, i32 0, i32 0
  %1 = load i32, i32* %i, align 4
  %2 = load i8*, i8** %message.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [64 x i8], [64 x i8]* @IP, i32 0, i32 %3
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %sub = sub nsw i32 %conv, 1
  %call = call i32 @peekBit(i8* %2, i32 %sub)
  call void @pokeBit(i8* %arraydecay, i32 %1, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc13, %for.end
  %6 = load i32, i32* %i, align 4
  %cmp2 = icmp slt i32 %6, 32
  br i1 %cmp2, label %for.body4, label %for.end15

for.body4:                                        ; preds = %for.cond1
  %arrayidx5 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 0
  %arraydecay6 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx5, i32 0, i32 0
  %7 = load i32, i32* %i, align 4
  %arraydecay7 = getelementptr inbounds [8 x i8], [8 x i8]* %mp, i32 0, i32 0
  %8 = load i32, i32* %i, align 4
  %call8 = call i32 @peekBit(i8* %arraydecay7, i32 %8)
  call void @pokeBit(i8* %arraydecay6, i32 %7, i32 %call8)
  %arrayidx9 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 0
  %arraydecay10 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx9, i32 0, i32 0
  %9 = load i32, i32* %i, align 4
  %arraydecay11 = getelementptr inbounds [8 x i8], [8 x i8]* %mp, i32 0, i32 0
  %10 = load i32, i32* %i, align 4
  %add = add nsw i32 %10, 32
  %call12 = call i32 @peekBit(i8* %arraydecay11, i32 %add)
  call void @pokeBit(i8* %arraydecay10, i32 %9, i32 %call12)
  br label %for.inc13

for.inc13:                                        ; preds = %for.body4
  %11 = load i32, i32* %i, align 4
  %inc14 = add nsw i32 %11, 1
  store i32 %inc14, i32* %i, align 4
  br label %for.cond1

for.end15:                                        ; preds = %for.cond1
  store i32 1, i32* %i, align 4
  br label %for.cond16

for.cond16:                                       ; preds = %for.inc50, %for.end15
  %12 = load i32, i32* %i, align 4
  %cmp17 = icmp slt i32 %12, 17
  br i1 %cmp17, label %for.body19, label %for.end52

for.body19:                                       ; preds = %for.cond16
  %13 = load i32, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 %13
  %arraydecay21 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx20, i32 0, i32 0
  %14 = load i32, i32* %i, align 4
  %sub22 = sub nsw i32 %14, 1
  %arrayidx23 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 %sub22
  %arraydecay24 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx23, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %arraydecay21, i8* align 4 %arraydecay24, i32 4, i1 false)
  %15 = load i32, i32* %i, align 4
  %sub25 = sub nsw i32 %15, 1
  %arrayidx26 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 %sub25
  %arraydecay27 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx26, i32 0, i32 0
  %16 = load [6 x i8]*, [6 x i8]** %ks.addr, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds [6 x i8], [6 x i8]* %16, i32 %17
  %arraydecay29 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx28, i32 0, i32 0
  %arraydecay30 = getelementptr inbounds [4 x i8], [4 x i8]* %fs, i32 0, i32 0
  call void @f(i8* %arraydecay27, i8* %arraydecay29, i8* %arraydecay30)
  store i32 0, i32* %j, align 4
  br label %for.cond31

for.cond31:                                       ; preds = %for.inc42, %for.body19
  %18 = load i32, i32* %j, align 4
  %cmp32 = icmp slt i32 %18, 4
  br i1 %cmp32, label %for.body34, label %for.end44

for.body34:                                       ; preds = %for.cond31
  %19 = load i32, i32* %j, align 4
  %arrayidx35 = getelementptr inbounds [4 x i8], [4 x i8]* %fs, i32 0, i32 %19
  %20 = load i8, i8* %arrayidx35, align 1
  %conv36 = zext i8 %20 to i32
  %21 = load i32, i32* %i, align 4
  %sub37 = sub nsw i32 %21, 1
  %arrayidx38 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 %sub37
  %22 = load i32, i32* %j, align 4
  %arrayidx39 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx38, i32 0, i32 %22
  %23 = load i8, i8* %arrayidx39, align 1
  %conv40 = zext i8 %23 to i32
  %xor = xor i32 %conv40, %conv36
  %conv41 = trunc i32 %xor to i8
  store i8 %conv41, i8* %arrayidx39, align 1
  br label %for.inc42

for.inc42:                                        ; preds = %for.body34
  %24 = load i32, i32* %j, align 4
  %inc43 = add nsw i32 %24, 1
  store i32 %inc43, i32* %j, align 4
  br label %for.cond31

for.end44:                                        ; preds = %for.cond31
  %25 = load i32, i32* %i, align 4
  %arrayidx45 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 %25
  %arraydecay46 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx45, i32 0, i32 0
  %26 = load i32, i32* %i, align 4
  %sub47 = sub nsw i32 %26, 1
  %arrayidx48 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 %sub47
  %arraydecay49 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx48, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %arraydecay46, i8* align 4 %arraydecay49, i32 4, i1 false)
  br label %for.inc50

for.inc50:                                        ; preds = %for.end44
  %27 = load i32, i32* %i, align 4
  %inc51 = add nsw i32 %27, 1
  store i32 %inc51, i32* %i, align 4
  br label %for.cond16

for.end52:                                        ; preds = %for.cond16
  store i32 0, i32* %i, align 4
  br label %for.cond53

for.cond53:                                       ; preds = %for.inc61, %for.end52
  %28 = load i32, i32* %i, align 4
  %cmp54 = icmp slt i32 %28, 32
  br i1 %cmp54, label %for.body56, label %for.end63

for.body56:                                       ; preds = %for.cond53
  %arraydecay57 = getelementptr inbounds [8 x i8], [8 x i8]* %e, i32 0, i32 0
  %29 = load i32, i32* %i, align 4
  %arrayidx58 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 16
  %arraydecay59 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx58, i32 0, i32 0
  %30 = load i32, i32* %i, align 4
  %call60 = call i32 @peekBit(i8* %arraydecay59, i32 %30)
  call void @pokeBit(i8* %arraydecay57, i32 %29, i32 %call60)
  br label %for.inc61

for.inc61:                                        ; preds = %for.body56
  %31 = load i32, i32* %i, align 4
  %inc62 = add nsw i32 %31, 1
  store i32 %inc62, i32* %i, align 4
  br label %for.cond53

for.end63:                                        ; preds = %for.cond53
  store i32 32, i32* %i, align 4
  br label %for.cond64

for.cond64:                                       ; preds = %for.inc73, %for.end63
  %32 = load i32, i32* %i, align 4
  %cmp65 = icmp slt i32 %32, 64
  br i1 %cmp65, label %for.body67, label %for.end75

for.body67:                                       ; preds = %for.cond64
  %arraydecay68 = getelementptr inbounds [8 x i8], [8 x i8]* %e, i32 0, i32 0
  %33 = load i32, i32* %i, align 4
  %arrayidx69 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 16
  %arraydecay70 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx69, i32 0, i32 0
  %34 = load i32, i32* %i, align 4
  %sub71 = sub nsw i32 %34, 32
  %call72 = call i32 @peekBit(i8* %arraydecay70, i32 %sub71)
  call void @pokeBit(i8* %arraydecay68, i32 %33, i32 %call72)
  br label %for.inc73

for.inc73:                                        ; preds = %for.body67
  %35 = load i32, i32* %i, align 4
  %inc74 = add nsw i32 %35, 1
  store i32 %inc74, i32* %i, align 4
  br label %for.cond64

for.end75:                                        ; preds = %for.cond64
  store i32 0, i32* %i, align 4
  br label %for.cond76

for.cond76:                                       ; preds = %for.inc85, %for.end75
  %36 = load i32, i32* %i, align 4
  %cmp77 = icmp slt i32 %36, 64
  br i1 %cmp77, label %for.body79, label %for.end87

for.body79:                                       ; preds = %for.cond76
  %37 = load i8*, i8** %ep.addr, align 4
  %38 = load i32, i32* %i, align 4
  %arraydecay80 = getelementptr inbounds [8 x i8], [8 x i8]* %e, i32 0, i32 0
  %39 = load i32, i32* %i, align 4
  %arrayidx81 = getelementptr inbounds [64 x i8], [64 x i8]* @IP2, i32 0, i32 %39
  %40 = load i8, i8* %arrayidx81, align 1
  %conv82 = zext i8 %40 to i32
  %sub83 = sub nsw i32 %conv82, 1
  %call84 = call i32 @peekBit(i8* %arraydecay80, i32 %sub83)
  call void @pokeBit(i8* %37, i32 %38, i32 %call84)
  br label %for.inc85

for.inc85:                                        ; preds = %for.body79
  %41 = load i32, i32* %i, align 4
  %inc86 = add nsw i32 %41, 1
  store i32 %inc86, i32* %i, align 4
  br label %for.cond76

for.end87:                                        ; preds = %for.cond76
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @decrypt(%struct.String* noalias sret align 4 %agg.result, i8* %key, i8* %message, i32 %len) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %message.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %ks = alloca [17 x [6 x i8]], align 16
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %padByte = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8* %key, i8** %key.addr, align 4
  store i8* %message, i8** %message.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = bitcast %struct.String* %agg.result to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  %1 = load i8*, i8** %key.addr, align 4
  %arraydecay = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  call void @getSubKeys(i8* %1, [6 x i8]* %arraydecay)
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc12, %entry
  %2 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, 9
  br i1 %cmp, label %for.body, label %for.end14

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %3, 6
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %4
  %5 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx, i32 0, i32 %5
  %6 = load i8, i8* %arrayidx4, align 1
  store i8 %6, i8* %temp, align 1
  %7 = load i32, i32* %i, align 4
  %sub = sub nsw i32 17, %7
  %arrayidx5 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %sub
  %8 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx5, i32 0, i32 %8
  %9 = load i8, i8* %arrayidx6, align 1
  %10 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %10
  %11 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx7, i32 0, i32 %11
  store i8 %9, i8* %arrayidx8, align 1
  %12 = load i8, i8* %temp, align 1
  %13 = load i32, i32* %i, align 4
  %sub9 = sub nsw i32 17, %13
  %arrayidx10 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %sub9
  %14 = load i32, i32* %j, align 4
  %arrayidx11 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx10, i32 0, i32 %14
  store i8 %12, i8* %arrayidx11, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %15 = load i32, i32* %j, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc12

for.inc12:                                        ; preds = %for.end
  %16 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %16, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond

for.end14:                                        ; preds = %for.cond
  %17 = load i32, i32* %len.addr, align 4
  %call = call noalias i8* @malloc(i32 %17)
  %data = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  store i8* %call, i8** %data, align 4
  %data15 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %18 = load i8*, i8** %data15, align 4
  %19 = load i8*, i8** %message.addr, align 4
  %20 = load i32, i32* %len.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %18, i8* align 1 %19, i32 %20, i1 false)
  %21 = load i32, i32* %len.addr, align 4
  %len16 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  store i32 %21, i32* %len16, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond17

for.cond17:                                       ; preds = %for.inc26, %for.end14
  %22 = load i32, i32* %i, align 4
  %len18 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %23 = load i32, i32* %len18, align 4
  %cmp19 = icmp slt i32 %22, %23
  br i1 %cmp19, label %for.body20, label %for.end27

for.body20:                                       ; preds = %for.cond17
  %data21 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %24 = load i8*, i8** %data21, align 4
  %25 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds i8, i8* %24, i32 %25
  %arraydecay23 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  %data24 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %26 = load i8*, i8** %data24, align 4
  %27 = load i32, i32* %i, align 4
  %arrayidx25 = getelementptr inbounds i8, i8* %26, i32 %27
  call void @processMessage(i8* %arrayidx22, [6 x i8]* %arraydecay23, i8* %arrayidx25)
  br label %for.inc26

for.inc26:                                        ; preds = %for.body20
  %28 = load i32, i32* %i, align 4
  %add = add nsw i32 %28, 8
  store i32 %add, i32* %i, align 4
  br label %for.cond17

for.end27:                                        ; preds = %for.cond17
  %data28 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %29 = load i8*, i8** %data28, align 4
  %30 = load i32, i32* %len.addr, align 4
  %sub29 = sub nsw i32 %30, 1
  %arrayidx30 = getelementptr inbounds i8, i8* %29, i32 %sub29
  %31 = load i8, i8* %arrayidx30, align 1
  store i8 %31, i8* %padByte, align 1
  %32 = load i8, i8* %padByte, align 1
  %conv = zext i8 %32 to i32
  %len31 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %33 = load i32, i32* %len31, align 4
  %sub32 = sub nsw i32 %33, %conv
  store i32 %sub32, i32* %len31, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @driver(i8* %key, i8* %message, i32 %len) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %message.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %encoded = alloca %struct.String, align 4
  %decoded = alloca %struct.String, align 4
  %buffer = alloca [128 x i8], align 16
  %tmp = alloca %struct.String, align 4
  %tmp9 = alloca %struct.String, align 4
  store i8* %key, i8** %key.addr, align 4
  store i8* %message, i8** %message.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load i8*, i8** %key.addr, align 4
  %arraydecay = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %0, i32 8, i8* %arraydecay)
  %arraydecay1 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i32 0, i32 0), i8* %arraydecay1)
  %1 = load i8*, i8** %message.addr, align 4
  %2 = load i32, i32* %len.addr, align 4
  %arraydecay2 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %1, i32 %2, i8* %arraydecay2)
  %arraydecay3 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0), i8* %arraydecay3)
  %3 = load i8*, i8** %key.addr, align 4
  %4 = load i8*, i8** %message.addr, align 4
  %5 = load i32, i32* %len.addr, align 4
  call void @encrypt(%struct.String* sret align 4 %tmp, i8* %3, i8* %4, i32 %5)
  %6 = bitcast %struct.String* %encoded to i8*
  %7 = bitcast %struct.String* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %6, i8* align 4 %7, i32 8, i1 false)
  %data = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  %8 = load i8*, i8** %data, align 4
  %len5 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 1
  %9 = load i32, i32* %len5, align 4
  %arraydecay6 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %8, i32 %9, i8* %arraydecay6)
  %arraydecay7 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0), i8* %arraydecay7)
  %10 = load i8*, i8** %key.addr, align 4
  %data10 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  %11 = load i8*, i8** %data10, align 4
  %len11 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 1
  %12 = load i32, i32* %len11, align 4
  call void @decrypt(%struct.String* sret align 4 %tmp9, i8* %10, i8* %11, i32 %12)
  %13 = bitcast %struct.String* %decoded to i8*
  %14 = bitcast %struct.String* %tmp9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %13, i8* align 4 %14, i32 8, i1 false)
  %data12 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 0
  %15 = load i8*, i8** %data12, align 4
  %len13 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 1
  %16 = load i32, i32* %len13, align 4
  %arraydecay14 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %15, i32 %16, i8* %arraydecay14)
  %arraydecay15 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0), i8* %arraydecay15)
  %len17 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 1
  %17 = load i32, i32* %len17, align 4
  %cmp = icmp sgt i32 %17, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %data18 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  %18 = load i8*, i8** %data18, align 4
  call void @free(i8* %18)
  %data19 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  store i8* null, i8** %data19, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %len20 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 1
  %19 = load i32, i32* %len20, align 4
  %cmp21 = icmp sgt i32 %19, 0
  br i1 %cmp21, label %if.then22, label %if.end25

if.then22:                                        ; preds = %if.end
  %data23 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 0
  %20 = load i8*, i8** %data23, align 4
  call void @free(i8* %20)
  %data24 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 0
  store i8* null, i8** %data24, align 4
  br label %if.end25

if.end25:                                         ; preds = %if.then22, %if.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @printBytes(i8* %ptr, i32 %len, i8* %out) #0 {
entry:
  %ptr.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  store i8* %ptr, i8** %ptr.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %len.addr, align 4
  %dec = add nsw i32 %0, -1
  store i32 %dec, i32* %len.addr, align 4
  %cmp = icmp sgt i32 %0, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i8*, i8** %ptr.addr, align 4
  %2 = load i8, i8* %1, align 1
  %conv = zext i8 %2 to i32
  %shr = ashr i32 %conv, 4
  %conv1 = trunc i32 %shr to i8
  %call = call signext i8 @toHex(i8 zeroext %conv1)
  %3 = load i8*, i8** %out.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %3, i32 1
  store i8* %incdec.ptr, i8** %out.addr, align 4
  store i8 %call, i8* %3, align 1
  %4 = load i8*, i8** %ptr.addr, align 4
  %5 = load i8, i8* %4, align 1
  %conv2 = zext i8 %5 to i32
  %and = and i32 %conv2, 15
  %conv3 = trunc i32 %and to i8
  %call4 = call signext i8 @toHex(i8 zeroext %conv3)
  %6 = load i8*, i8** %out.addr, align 4
  %incdec.ptr5 = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr5, i8** %out.addr, align 4
  store i8 %call4, i8* %6, align 1
  %7 = load i8*, i8** %ptr.addr, align 4
  %incdec.ptr6 = getelementptr inbounds i8, i8* %7, i32 1
  store i8* %incdec.ptr6, i8** %ptr.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %8 = load i8*, i8** %out.addr, align 4
  store i8 0, i8* %8, align 1
  ret void
}

declare i32 @printf(i8* %0, ...) #2

declare void @free(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %keys = alloca [3 x [8 x i8]], align 16
  %message1 = alloca [8 x i8], align 1
  %message2 = alloca [8 x i8], align 1
  %message3 = alloca [38 x i8], align 16
  %len = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [3 x [8 x i8]]* %keys to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([3 x [8 x i8]], [3 x [8 x i8]]* @__const.main.keys, i32 0, i32 0, i32 0), i32 24, i1 false)
  %1 = bitcast [8 x i8]* %message1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %1, i8* align 1 getelementptr inbounds ([8 x i8], [8 x i8]* @__const.main.message1, i32 0, i32 0), i32 8, i1 false)
  %2 = bitcast [8 x i8]* %message2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %2, i8* align 1 getelementptr inbounds ([8 x i8], [8 x i8]* @__const.main.message2, i32 0, i32 0), i32 8, i1 false)
  %3 = bitcast [38 x i8]* %message3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %3, i8* align 16 getelementptr inbounds ([38 x i8], [38 x i8]* @__const.main.message3, i32 0, i32 0), i32 38, i1 false)
  store i32 8, i32* %len, align 4
  %arrayidx = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* %keys, i32 0, i32 0
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %arrayidx, i32 0, i32 0
  %arraydecay1 = getelementptr inbounds [8 x i8], [8 x i8]* %message1, i32 0, i32 0
  %4 = load i32, i32* %len, align 4
  call void @driver(i8* %arraydecay, i8* %arraydecay1, i32 %4)
  store i32 8, i32* %len, align 4
  %arrayidx2 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* %keys, i32 0, i32 1
  %arraydecay3 = getelementptr inbounds [8 x i8], [8 x i8]* %arrayidx2, i32 0, i32 0
  %arraydecay4 = getelementptr inbounds [8 x i8], [8 x i8]* %message2, i32 0, i32 0
  %5 = load i32, i32* %len, align 4
  call void @driver(i8* %arraydecay3, i8* %arraydecay4, i32 %5)
  store i32 38, i32* %len, align 4
  %arrayidx5 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* %keys, i32 0, i32 2
  %arraydecay6 = getelementptr inbounds [8 x i8], [8 x i8]* %arrayidx5, i32 0, i32 0
  %arraydecay7 = getelementptr inbounds [38 x i8], [38 x i8]* %message3, i32 0, i32 0
  %6 = load i32, i32* %len, align 4
  call void @driver(i8* %arraydecay6, i8* %arraydecay7, i32 %6)
  ret i32 0
}

; Function Attrs: noinline nounwind optnone
define internal void @pokeBit(i8* %dst, i32 %index, i32 %value) #0 {
entry:
  %dst.addr = alloca i8*, align 4
  %index.addr = alloca i32, align 4
  %value.addr = alloca i32, align 4
  %cell = alloca i32, align 4
  %bit = alloca i32, align 4
  store i8* %dst, i8** %dst.addr, align 4
  store i32 %index, i32* %index.addr, align 4
  store i32 %value, i32* %value.addr, align 4
  %0 = load i32, i32* %index.addr, align 4
  %div = sdiv i32 %0, 8
  store i32 %div, i32* %cell, align 4
  %1 = load i32, i32* %index.addr, align 4
  %rem = srem i32 %1, 8
  %sub = sub nsw i32 7, %rem
  store i32 %sub, i32* %bit, align 4
  %2 = load i32, i32* %value.addr, align 4
  %cmp = icmp eq i32 %2, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %bit, align 4
  %shl = shl i32 1, %3
  %neg = xor i32 %shl, -1
  %4 = load i8*, i8** %dst.addr, align 4
  %5 = load i32, i32* %cell, align 4
  %arrayidx = getelementptr inbounds i8, i8* %4, i32 %5
  %6 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %6 to i32
  %and = and i32 %conv, %neg
  %conv1 = trunc i32 %and to i8
  store i8 %conv1, i8* %arrayidx, align 1
  br label %if.end

if.else:                                          ; preds = %entry
  %7 = load i32, i32* %bit, align 4
  %shl2 = shl i32 1, %7
  %8 = load i8*, i8** %dst.addr, align 4
  %9 = load i32, i32* %cell, align 4
  %arrayidx3 = getelementptr inbounds i8, i8* %8, i32 %9
  %10 = load i8, i8* %arrayidx3, align 1
  %conv4 = zext i8 %10 to i32
  %or = or i32 %conv4, %shl2
  %conv5 = trunc i32 %or to i8
  store i8 %conv5, i8* %arrayidx3, align 1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i32 @peekBit(i8* %src, i32 %index) #0 {
entry:
  %src.addr = alloca i8*, align 4
  %index.addr = alloca i32, align 4
  %cell = alloca i32, align 4
  %bit = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 4
  store i32 %index, i32* %index.addr, align 4
  %0 = load i32, i32* %index.addr, align 4
  %div = sdiv i32 %0, 8
  store i32 %div, i32* %cell, align 4
  %1 = load i32, i32* %index.addr, align 4
  %rem = srem i32 %1, 8
  %sub = sub nsw i32 7, %rem
  store i32 %sub, i32* %bit, align 4
  %2 = load i8*, i8** %src.addr, align 4
  %3 = load i32, i32* %cell, align 4
  %arrayidx = getelementptr inbounds i8, i8* %2, i32 %3
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %5 = load i32, i32* %bit, align 4
  %shl = shl i32 1, %5
  %and = and i32 %conv, %shl
  %cmp = icmp ne i32 %and, 0
  %conv1 = zext i1 %cmp to i32
  ret i32 %conv1
}

; Function Attrs: noinline nounwind optnone
define internal void @shiftLeft(i8* %src, i32 %len, i32 %times, i8* %dst) #0 {
entry:
  %src.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %times.addr = alloca i32, align 4
  %dst.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %t = alloca i32, align 4
  %temp = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %times, i32* %times.addr, align 4
  store i8* %dst, i8** %dst.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp sle i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8*, i8** %dst.addr, align 4
  %3 = load i32, i32* %i, align 4
  %4 = load i8*, i8** %src.addr, align 4
  %5 = load i32, i32* %i, align 4
  %call = call i32 @peekBit(i8* %4, i32 %5)
  call void @pokeBit(i8* %2, i32 %3, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %t, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc13, %for.end
  %7 = load i32, i32* %t, align 4
  %8 = load i32, i32* %times.addr, align 4
  %cmp2 = icmp sle i32 %7, %8
  br i1 %cmp2, label %for.body3, label %for.end15

for.body3:                                        ; preds = %for.cond1
  %9 = load i8*, i8** %dst.addr, align 4
  %call4 = call i32 @peekBit(i8* %9, i32 0)
  store i32 %call4, i32* %temp, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc9, %for.body3
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %len.addr, align 4
  %cmp6 = icmp sle i32 %10, %11
  br i1 %cmp6, label %for.body7, label %for.end11

for.body7:                                        ; preds = %for.cond5
  %12 = load i8*, i8** %dst.addr, align 4
  %13 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %13, 1
  %14 = load i8*, i8** %dst.addr, align 4
  %15 = load i32, i32* %i, align 4
  %call8 = call i32 @peekBit(i8* %14, i32 %15)
  call void @pokeBit(i8* %12, i32 %sub, i32 %call8)
  br label %for.inc9

for.inc9:                                         ; preds = %for.body7
  %16 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %16, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond5

for.end11:                                        ; preds = %for.cond5
  %17 = load i8*, i8** %dst.addr, align 4
  %18 = load i32, i32* %len.addr, align 4
  %sub12 = sub nsw i32 %18, 1
  %19 = load i32, i32* %temp, align 4
  call void @pokeBit(i8* %17, i32 %sub12, i32 %19)
  br label %for.inc13

for.inc13:                                        ; preds = %for.end11
  %20 = load i32, i32* %t, align 4
  %inc14 = add nsw i32 %20, 1
  store i32 %inc14, i32* %t, align 4
  br label %for.cond1

for.end15:                                        ; preds = %for.cond1
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @f(i8* %r, i8* %ks, i8* %sp) #0 {
entry:
  %r.addr = alloca i8*, align 4
  %ks.addr = alloca i8*, align 4
  %sp.addr = alloca i8*, align 4
  %er = alloca [6 x i8], align 1
  %sr = alloca [4 x i8], align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %b = alloca [6 x i32], align 16
  %k = alloca i32, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %m = alloca i32, align 4
  %n = alloca i32, align 4
  %p = alloca i32, align 4
  store i8* %r, i8** %r.addr, align 4
  store i8* %ks, i8** %ks.addr, align 4
  store i8* %sp, i8** %sp.addr, align 4
  %arraydecay = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  call void @llvm.memset.p0i8.i32(i8* align 1 %arraydecay, i8 0, i32 6, i1 false)
  %arraydecay1 = getelementptr inbounds [4 x i8], [4 x i8]* %sr, i32 0, i32 0
  call void @llvm.memset.p0i8.i32(i8* align 1 %arraydecay1, i8 0, i32 4, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 48
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay2 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  %1 = load i32, i32* %i, align 4
  %2 = load i8*, i8** %r.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [48 x i8], [48 x i8]* @E, i32 0, i32 %3
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %sub = sub nsw i32 %conv, 1
  %call = call i32 @peekBit(i8* %2, i32 %sub)
  call void @pokeBit(i8* %arraydecay2, i32 %1, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc12, %for.end
  %6 = load i32, i32* %i, align 4
  %cmp4 = icmp slt i32 %6, 6
  br i1 %cmp4, label %for.body6, label %for.end14

for.body6:                                        ; preds = %for.cond3
  %7 = load i8*, i8** %ks.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds i8, i8* %7, i32 %8
  %9 = load i8, i8* %arrayidx7, align 1
  %conv8 = zext i8 %9 to i32
  %10 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 %10
  %11 = load i8, i8* %arrayidx9, align 1
  %conv10 = zext i8 %11 to i32
  %xor = xor i32 %conv10, %conv8
  %conv11 = trunc i32 %xor to i8
  store i8 %conv11, i8* %arrayidx9, align 1
  br label %for.inc12

for.inc12:                                        ; preds = %for.body6
  %12 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %12, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond3

for.end14:                                        ; preds = %for.cond3
  store i32 0, i32* %i, align 4
  br label %for.cond15

for.cond15:                                       ; preds = %for.inc59, %for.end14
  %13 = load i32, i32* %i, align 4
  %cmp16 = icmp slt i32 %13, 8
  br i1 %cmp16, label %for.body18, label %for.end61

for.body18:                                       ; preds = %for.cond15
  %14 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %14, 6
  store i32 %mul, i32* %j, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond19

for.cond19:                                       ; preds = %for.inc28, %for.body18
  %15 = load i32, i32* %k, align 4
  %cmp20 = icmp slt i32 %15, 6
  br i1 %cmp20, label %for.body22, label %for.end30

for.body22:                                       ; preds = %for.cond19
  %arraydecay23 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  %16 = load i32, i32* %j, align 4
  %17 = load i32, i32* %k, align 4
  %add = add nsw i32 %16, %17
  %call24 = call i32 @peekBit(i8* %arraydecay23, i32 %add)
  %cmp25 = icmp ne i32 %call24, 0
  %18 = zext i1 %cmp25 to i64
  %cond = select i1 %cmp25, i32 1, i32 0
  %19 = load i32, i32* %k, align 4
  %arrayidx27 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 %19
  store i32 %cond, i32* %arrayidx27, align 4
  br label %for.inc28

for.inc28:                                        ; preds = %for.body22
  %20 = load i32, i32* %k, align 4
  %inc29 = add nsw i32 %20, 1
  store i32 %inc29, i32* %k, align 4
  br label %for.cond19

for.end30:                                        ; preds = %for.cond19
  %arrayidx31 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 0
  %21 = load i32, i32* %arrayidx31, align 16
  %mul32 = mul nsw i32 2, %21
  %arrayidx33 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 5
  %22 = load i32, i32* %arrayidx33, align 4
  %add34 = add nsw i32 %mul32, %22
  store i32 %add34, i32* %row, align 4
  %arrayidx35 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 1
  %23 = load i32, i32* %arrayidx35, align 4
  %mul36 = mul nsw i32 8, %23
  %arrayidx37 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 2
  %24 = load i32, i32* %arrayidx37, align 8
  %mul38 = mul nsw i32 4, %24
  %add39 = add nsw i32 %mul36, %mul38
  %arrayidx40 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 3
  %25 = load i32, i32* %arrayidx40, align 4
  %mul41 = mul nsw i32 2, %25
  %add42 = add nsw i32 %add39, %mul41
  %arrayidx43 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 4
  %26 = load i32, i32* %arrayidx43, align 16
  %add44 = add nsw i32 %add42, %26
  store i32 %add44, i32* %col, align 4
  %27 = load i32, i32* %i, align 4
  %arrayidx45 = getelementptr inbounds [8 x [64 x i8]], [8 x [64 x i8]]* @S, i32 0, i32 %27
  %28 = load i32, i32* %row, align 4
  %mul46 = mul nsw i32 %28, 16
  %29 = load i32, i32* %col, align 4
  %add47 = add nsw i32 %mul46, %29
  %arrayidx48 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx45, i32 0, i32 %add47
  %30 = load i8, i8* %arrayidx48, align 1
  %conv49 = zext i8 %30 to i32
  store i32 %conv49, i32* %m, align 4
  store i32 1, i32* %n, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end30
  %31 = load i32, i32* %m, align 4
  %cmp50 = icmp sgt i32 %31, 0
  br i1 %cmp50, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %32 = load i32, i32* %m, align 4
  %rem = srem i32 %32, 2
  store i32 %rem, i32* %p, align 4
  %arraydecay52 = getelementptr inbounds [4 x i8], [4 x i8]* %sr, i32 0, i32 0
  %33 = load i32, i32* %i, align 4
  %add53 = add nsw i32 %33, 1
  %mul54 = mul nsw i32 %add53, 4
  %34 = load i32, i32* %n, align 4
  %sub55 = sub nsw i32 %mul54, %34
  %35 = load i32, i32* %p, align 4
  %cmp56 = icmp eq i32 %35, 1
  %conv57 = zext i1 %cmp56 to i32
  call void @pokeBit(i8* %arraydecay52, i32 %sub55, i32 %conv57)
  %36 = load i32, i32* %m, align 4
  %div = sdiv i32 %36, 2
  store i32 %div, i32* %m, align 4
  %37 = load i32, i32* %n, align 4
  %inc58 = add nsw i32 %37, 1
  store i32 %inc58, i32* %n, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %for.inc59

for.inc59:                                        ; preds = %while.end
  %38 = load i32, i32* %i, align 4
  %inc60 = add nsw i32 %38, 1
  store i32 %inc60, i32* %i, align 4
  br label %for.cond15

for.end61:                                        ; preds = %for.cond15
  store i32 0, i32* %i, align 4
  br label %for.cond62

for.cond62:                                       ; preds = %for.inc71, %for.end61
  %39 = load i32, i32* %i, align 4
  %cmp63 = icmp slt i32 %39, 32
  br i1 %cmp63, label %for.body65, label %for.end73

for.body65:                                       ; preds = %for.cond62
  %40 = load i8*, i8** %sp.addr, align 4
  %41 = load i32, i32* %i, align 4
  %arraydecay66 = getelementptr inbounds [4 x i8], [4 x i8]* %sr, i32 0, i32 0
  %42 = load i32, i32* %i, align 4
  %arrayidx67 = getelementptr inbounds [32 x i8], [32 x i8]* @P, i32 0, i32 %42
  %43 = load i8, i8* %arrayidx67, align 1
  %conv68 = zext i8 %43 to i32
  %sub69 = sub nsw i32 %conv68, 1
  %call70 = call i32 @peekBit(i8* %arraydecay66, i32 %sub69)
  call void @pokeBit(i8* %40, i32 %41, i32 %call70)
  br label %for.inc71

for.inc71:                                        ; preds = %for.body65
  %44 = load i32, i32* %i, align 4
  %inc72 = add nsw i32 %44, 1
  store i32 %inc72, i32* %i, align 4
  br label %for.cond62

for.end73:                                        ; preds = %for.cond62
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal signext i8 @toHex(i8 zeroext %in) #0 {
entry:
  %retval = alloca i8, align 1
  %in.addr = alloca i8, align 1
  store i8 %in, i8* %in.addr, align 1
  %0 = load i8, i8* %in.addr, align 1
  %conv = zext i8 %0 to i32
  %cmp = icmp sle i32 0, %conv
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i8, i8* %in.addr, align 1
  %conv2 = zext i8 %1 to i32
  %cmp3 = icmp slt i32 %conv2, 10
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %2 = load i8, i8* %in.addr, align 1
  %conv5 = zext i8 %2 to i32
  %add = add nsw i32 48, %conv5
  %conv6 = trunc i32 %add to i8
  store i8 %conv6, i8* %retval, align 1
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %3 = load i8, i8* %in.addr, align 1
  %conv7 = zext i8 %3 to i32
  %cmp8 = icmp sle i32 10, %conv7
  br i1 %cmp8, label %land.lhs.true10, label %if.end18

land.lhs.true10:                                  ; preds = %if.end
  %4 = load i8, i8* %in.addr, align 1
  %conv11 = zext i8 %4 to i32
  %cmp12 = icmp sle i32 %conv11, 15
  br i1 %cmp12, label %if.then14, label %if.end18

if.then14:                                        ; preds = %land.lhs.true10
  %5 = load i8, i8* %in.addr, align 1
  %conv15 = zext i8 %5 to i32
  %add16 = add nsw i32 65, %conv15
  %sub = sub nsw i32 %add16, 10
  %conv17 = trunc i32 %sub to i8
  store i8 %conv17, i8* %retval, align 1
  br label %return

if.end18:                                         ; preds = %land.lhs.true10, %if.end
  store i8 0, i8* %retval, align 1
  br label %return

return:                                           ; preds = %if.end18, %if.then14, %if.then
  %6 = load i8, i8* %retval, align 1
  ret i8 %6
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

#########################################################
; exiting Souper's runOnFunction() for encrypt()
rescanning function after transformation was applied

; entering Souper's runOnFunction() for encrypt()

; ModuleID = './Data_Encryption_Standard.c.bc'
source_filename = "./Data_Encryption_Standard.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.String = type { i8*, i32 }

@.str = private unnamed_addr constant [14 x i8] c"Key     : %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"Message : %s\0A\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"Encoded : %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"Decoded : %s\0A\0A\00", align 1
@__const.main.keys = private unnamed_addr constant [3 x [8 x i8]] [[8 x i8] c"\134Wy\9B\BC\DF\F1", [8 x i8] c"\0E2\922\EAm\0Ds", [8 x i8] c"\0E2\922\EAm\0Ds"], align 16
@__const.main.message1 = private unnamed_addr constant [8 x i8] c"\01#Eg\89\AB\CD\EF", align 1
@__const.main.message2 = private unnamed_addr constant [8 x i8] c"\87\87\87\87\87\87\87\87", align 1
@__const.main.message3 = private unnamed_addr constant [38 x i8] c"Your lips are smoother than vaseline\0D\0A", align 16
@PC1 = internal constant [56 x i8] c"91)!\19\11\09\01:2*\22\1A\12\0A\02;3+#\1B\13\0B\03<4,$?7/'\1F\17\0F\07>6.&\1E\16\0E\06=5-%\1D\15\0D\05\1C\14\0C\04", align 16
@SHIFTS = internal constant [16 x i8] c"\01\01\02\02\02\02\02\02\01\02\02\02\02\02\02\01", align 16
@PC2 = internal constant [48 x i8] c"\0E\11\0B\18\01\05\03\1C\0F\06\15\0A\17\13\0C\04\1A\08\10\07\1B\14\0D\02)4\1F%/7\1E(3-!0,1'8\225.*2$\1D ", align 16
@IP = internal constant [64 x i8] c":2*\22\1A\12\0A\02<4,$\1C\14\0C\04>6.&\1E\16\0E\06@80( \18\10\0891)!\19\11\09\01;3+#\1B\13\0B\03=5-%\1D\15\0D\05?7/'\1F\17\0F\07", align 16
@IP2 = internal constant [64 x i8] c"(\080\108\18@ '\07/\0F7\17?\1F&\06.\0E6\16>\1E%\05-\0D5\15=\1D$\04,\0C4\14<\1C#\03+\0B3\13;\1B\22\02*\0A2\12:\1A!\01)\091\119\19", align 16
@E = internal constant [48 x i8] c" \01\02\03\04\05\04\05\06\07\08\09\08\09\0A\0B\0C\0D\0C\0D\0E\0F\10\11\10\11\12\13\14\15\14\15\16\17\18\19\18\19\1A\1B\1C\1D\1C\1D\1E\1F \01", align 16
@S = internal constant [8 x [64 x i8]] [[64 x i8] c"\0E\04\0D\01\02\0F\0B\08\03\0A\06\0C\05\09\00\07\00\0F\07\04\0E\02\0D\01\0A\06\0C\0B\09\05\03\08\04\01\0E\08\0D\06\02\0B\0F\0C\09\07\03\0A\05\00\0F\0C\08\02\04\09\01\07\05\0B\03\0E\0A\00\06\0D", [64 x i8] c"\0F\01\08\0E\06\0B\03\04\09\07\02\0D\0C\00\05\0A\03\0D\04\07\0F\02\08\0E\0C\00\01\0A\06\09\0B\05\00\0E\07\0B\0A\04\0D\01\05\08\0C\06\09\03\02\0F\0D\08\0A\01\03\0F\04\02\0B\06\07\0C\00\05\0E\09", [64 x i8] c"\0A\00\09\0E\06\03\0F\05\01\0D\0C\07\0B\04\02\08\0D\07\00\09\03\04\06\0A\02\08\05\0E\0C\0B\0F\01\0D\06\04\09\08\0F\03\00\0B\01\02\0C\05\0A\0E\07\01\0A\0D\00\06\09\08\07\04\0F\0E\03\0B\05\02\0C", [64 x i8] c"\07\0D\0E\03\00\06\09\0A\01\02\08\05\0B\0C\04\0F\0D\08\0B\05\06\0F\00\03\04\07\02\0C\01\0A\0E\09\0A\06\09\00\0C\0B\07\0D\0F\01\03\0E\05\02\08\04\03\0F\00\06\0A\01\0D\08\09\04\05\0B\0C\07\02\0E", [64 x i8] c"\02\0C\04\01\07\0A\0B\06\08\05\03\0F\0D\00\0E\09\0E\0B\02\0C\04\07\0D\01\05\00\0F\0A\03\09\08\06\04\02\01\0B\0A\0D\07\08\0F\09\0C\05\06\03\00\0E\0B\08\0C\07\01\0E\02\0D\06\0F\00\09\0A\04\05\03", [64 x i8] c"\0C\01\0A\0F\09\02\06\08\00\0D\03\04\0E\07\05\0B\0A\0F\04\02\07\0C\09\05\06\01\0D\0E\00\0B\03\08\09\0E\0F\05\02\08\0C\03\07\00\04\0A\01\0D\0B\06\04\03\02\0C\09\05\0F\0A\0B\0E\01\07\06\00\08\0D", [64 x i8] c"\04\0B\02\0E\0F\00\08\0D\03\0C\09\07\05\0A\06\01\0D\00\0B\07\04\09\01\0A\0E\03\05\0C\02\0F\08\06\01\04\0B\0D\0C\03\07\0E\0A\0F\06\08\00\05\09\02\06\0B\0D\08\01\04\0A\07\09\05\00\0F\0E\02\03\0C", [64 x i8] c"\0D\02\08\04\06\0F\0B\01\0A\09\03\0E\05\00\0C\07\01\0F\0D\08\0A\03\07\04\0C\05\06\0B\00\0E\09\02\07\0B\04\01\09\0C\0E\02\00\06\0A\0D\0F\03\05\08\02\01\0E\07\04\0A\08\0D\0F\0C\09\00\03\05\06\0B"], align 16
@P = internal constant [32 x i8] c"\10\07\14\15\1D\0C\1C\11\01\0F\17\1A\05\12\1F\0A\02\08\18\0E \1B\03\09\13\0D\1E\06\16\0B\04\19", align 16
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @encrypt(%struct.String* noalias sret align 4 %agg.result, i8* %key, i8* %message, i32 %len) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %message.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %ks = alloca [17 x [6 x i8]], align 16
  %padByte = alloca i8, align 1
  %i = alloca i32, align 4
  store i8* %key, i8** %key.addr, align 4
  store i8* %message, i8** %message.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = bitcast %struct.String* %agg.result to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  %1 = load i8*, i8** %key.addr, align 4
  %arraydecay = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  call void @getSubKeys(i8* %1, [6 x i8]* %arraydecay)
  %2 = load i32, i32* %len.addr, align 4
  %rem = srem i32 %2, 8
  %sub = sub nsw i32 8, %rem
  %conv = trunc i32 %sub to i8
  store i8 %conv, i8* %padByte, align 1
  %3 = load i32, i32* %len.addr, align 4
  %4 = load i8, i8* %padByte, align 1
  %conv1 = zext i8 %4 to i32
  %add = add nsw i32 %3, %conv1
  %len2 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  store i32 %add, i32* %len2, align 4
  %len3 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %5 = load i32, i32* %len3, align 4
  %call = call noalias i8* @malloc(i32 %5)
  %data = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  store i8* %call, i8** %data, align 4
  %data4 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %6 = load i8*, i8** %data4, align 4
  %7 = load i8*, i8** %message.addr, align 4
  %8 = load i32, i32* %len.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %6, i8* align 1 %7, i32 %8, i1 false)
  %data5 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %9 = load i8*, i8** %data5, align 4
  %10 = load i32, i32* %len.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %9, i32 %10
  %11 = load i8, i8* %padByte, align 1
  %12 = load i8, i8* %padByte, align 1
  %conv7 = zext i8 %12 to i32
  call void @llvm.memset.p0i8.i32(i8* align 1 %arrayidx, i8 %11, i32 %conv7, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %13 = load i32, i32* %i, align 4
  %len8 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %14 = load i32, i32* %len8, align 4
  %cmp = icmp slt i32 %13, %14
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %data10 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %15 = load i8*, i8** %data10, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds i8, i8* %15, i32 %16
  %arraydecay12 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  %data13 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %17 = load i8*, i8** %data13, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds i8, i8* %17, i32 %18
  call void @processMessage(i8* %arrayidx11, [6 x i8]* %arraydecay12, i8* %arrayidx14)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %19 = load i32, i32* %i, align 4
  %add15 = add nsw i32 %19, 8
  store i32 %add15, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define internal void @getSubKeys(i8* %key, [6 x i8]* %ks) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %ks.addr = alloca [6 x i8]*, align 4
  %c = alloca [17 x [7 x i8]], align 16
  %d = alloca [17 x [4 x i8]], align 16
  %kp = alloca [7 x i8], align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i8* %key, i8** %key.addr, align 4
  store [6 x i8]* %ks, [6 x i8]** %ks.addr, align 4
  %arraydecay = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 0
  %0 = bitcast [7 x i8]* %arraydecay to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 119, i1 false)
  %arraydecay1 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 0
  %1 = bitcast [4 x i8]* %arraydecay1 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %1, i8 0, i32 68, i1 false)
  %2 = load [6 x i8]*, [6 x i8]** %ks.addr, align 4
  %3 = bitcast [6 x i8]* %2 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 1 %3, i8 0, i32 102, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %4, 56
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay2 = getelementptr inbounds [7 x i8], [7 x i8]* %kp, i32 0, i32 0
  %5 = load i32, i32* %i, align 4
  %6 = load i8*, i8** %key.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [56 x i8], [56 x i8]* @PC1, i32 0, i32 %7
  %8 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %8 to i32
  %sub = sub nsw i32 %conv, 1
  %call = call i32 @peekBit(i8* %6, i32 %sub)
  call void @pokeBit(i8* %arraydecay2, i32 %5, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc15, %for.end
  %10 = load i32, i32* %i, align 4
  %cmp4 = icmp slt i32 %10, 28
  br i1 %cmp4, label %for.body6, label %for.end17

for.body6:                                        ; preds = %for.cond3
  %arrayidx7 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 0
  %arraydecay8 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx7, i32 0, i32 0
  %11 = load i32, i32* %i, align 4
  %arraydecay9 = getelementptr inbounds [7 x i8], [7 x i8]* %kp, i32 0, i32 0
  %12 = load i32, i32* %i, align 4
  %call10 = call i32 @peekBit(i8* %arraydecay9, i32 %12)
  call void @pokeBit(i8* %arraydecay8, i32 %11, i32 %call10)
  %arrayidx11 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 0
  %arraydecay12 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx11, i32 0, i32 0
  %13 = load i32, i32* %i, align 4
  %arraydecay13 = getelementptr inbounds [7 x i8], [7 x i8]* %kp, i32 0, i32 0
  %14 = load i32, i32* %i, align 4
  %add = add nsw i32 %14, 28
  %call14 = call i32 @peekBit(i8* %arraydecay13, i32 %add)
  call void @pokeBit(i8* %arraydecay12, i32 %13, i32 %call14)
  br label %for.inc15

for.inc15:                                        ; preds = %for.body6
  %15 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %15, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond3

for.end17:                                        ; preds = %for.cond3
  store i32 1, i32* %i, align 4
  br label %for.cond18

for.cond18:                                       ; preds = %for.inc38, %for.end17
  %16 = load i32, i32* %i, align 4
  %cmp19 = icmp slt i32 %16, 17
  br i1 %cmp19, label %for.body21, label %for.end40

for.body21:                                       ; preds = %for.cond18
  %17 = load i32, i32* %i, align 4
  %sub22 = sub nsw i32 %17, 1
  %arrayidx23 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %sub22
  %arraydecay24 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx23, i32 0, i32 0
  %18 = load i32, i32* %i, align 4
  %sub25 = sub nsw i32 %18, 1
  %arrayidx26 = getelementptr inbounds [16 x i8], [16 x i8]* @SHIFTS, i32 0, i32 %sub25
  %19 = load i8, i8* %arrayidx26, align 1
  %conv27 = zext i8 %19 to i32
  %20 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %20
  %arraydecay29 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx28, i32 0, i32 0
  call void @shiftLeft(i8* %arraydecay24, i32 28, i32 %conv27, i8* %arraydecay29)
  %21 = load i32, i32* %i, align 4
  %sub30 = sub nsw i32 %21, 1
  %arrayidx31 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 %sub30
  %arraydecay32 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx31, i32 0, i32 0
  %22 = load i32, i32* %i, align 4
  %sub33 = sub nsw i32 %22, 1
  %arrayidx34 = getelementptr inbounds [16 x i8], [16 x i8]* @SHIFTS, i32 0, i32 %sub33
  %23 = load i8, i8* %arrayidx34, align 1
  %conv35 = zext i8 %23 to i32
  %24 = load i32, i32* %i, align 4
  %arrayidx36 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 %24
  %arraydecay37 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx36, i32 0, i32 0
  call void @shiftLeft(i8* %arraydecay32, i32 28, i32 %conv35, i8* %arraydecay37)
  br label %for.inc38

for.inc38:                                        ; preds = %for.body21
  %25 = load i32, i32* %i, align 4
  %inc39 = add nsw i32 %25, 1
  store i32 %inc39, i32* %i, align 4
  br label %for.cond18

for.end40:                                        ; preds = %for.cond18
  store i32 1, i32* %i, align 4
  br label %for.cond41

for.cond41:                                       ; preds = %for.inc58, %for.end40
  %26 = load i32, i32* %i, align 4
  %cmp42 = icmp slt i32 %26, 17
  br i1 %cmp42, label %for.body44, label %for.end60

for.body44:                                       ; preds = %for.cond41
  store i32 28, i32* %j, align 4
  br label %for.cond45

for.cond45:                                       ; preds = %for.inc55, %for.body44
  %27 = load i32, i32* %j, align 4
  %cmp46 = icmp slt i32 %27, 56
  br i1 %cmp46, label %for.body48, label %for.end57

for.body48:                                       ; preds = %for.cond45
  %28 = load i32, i32* %i, align 4
  %arrayidx49 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %28
  %arraydecay50 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx49, i32 0, i32 0
  %29 = load i32, i32* %j, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx51 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 %30
  %arraydecay52 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx51, i32 0, i32 0
  %31 = load i32, i32* %j, align 4
  %sub53 = sub nsw i32 %31, 28
  %call54 = call i32 @peekBit(i8* %arraydecay52, i32 %sub53)
  call void @pokeBit(i8* %arraydecay50, i32 %29, i32 %call54)
  br label %for.inc55

for.inc55:                                        ; preds = %for.body48
  %32 = load i32, i32* %j, align 4
  %inc56 = add nsw i32 %32, 1
  store i32 %inc56, i32* %j, align 4
  br label %for.cond45

for.end57:                                        ; preds = %for.cond45
  br label %for.inc58

for.inc58:                                        ; preds = %for.end57
  %33 = load i32, i32* %i, align 4
  %inc59 = add nsw i32 %33, 1
  store i32 %inc59, i32* %i, align 4
  br label %for.cond41

for.end60:                                        ; preds = %for.cond41
  store i32 1, i32* %i, align 4
  br label %for.cond61

for.cond61:                                       ; preds = %for.inc80, %for.end60
  %34 = load i32, i32* %i, align 4
  %cmp62 = icmp slt i32 %34, 17
  br i1 %cmp62, label %for.body64, label %for.end82

for.body64:                                       ; preds = %for.cond61
  store i32 0, i32* %j, align 4
  br label %for.cond65

for.cond65:                                       ; preds = %for.inc77, %for.body64
  %35 = load i32, i32* %j, align 4
  %cmp66 = icmp slt i32 %35, 48
  br i1 %cmp66, label %for.body68, label %for.end79

for.body68:                                       ; preds = %for.cond65
  %36 = load [6 x i8]*, [6 x i8]** %ks.addr, align 4
  %37 = load i32, i32* %i, align 4
  %arrayidx69 = getelementptr inbounds [6 x i8], [6 x i8]* %36, i32 %37
  %arraydecay70 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx69, i32 0, i32 0
  %38 = load i32, i32* %j, align 4
  %39 = load i32, i32* %i, align 4
  %arrayidx71 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %39
  %arraydecay72 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx71, i32 0, i32 0
  %40 = load i32, i32* %j, align 4
  %arrayidx73 = getelementptr inbounds [48 x i8], [48 x i8]* @PC2, i32 0, i32 %40
  %41 = load i8, i8* %arrayidx73, align 1
  %conv74 = zext i8 %41 to i32
  %sub75 = sub nsw i32 %conv74, 1
  %call76 = call i32 @peekBit(i8* %arraydecay72, i32 %sub75)
  call void @pokeBit(i8* %arraydecay70, i32 %38, i32 %call76)
  br label %for.inc77

for.inc77:                                        ; preds = %for.body68
  %42 = load i32, i32* %j, align 4
  %inc78 = add nsw i32 %42, 1
  store i32 %inc78, i32* %j, align 4
  br label %for.cond65

for.end79:                                        ; preds = %for.cond65
  br label %for.inc80

for.inc80:                                        ; preds = %for.end79
  %43 = load i32, i32* %i, align 4
  %inc81 = add nsw i32 %43, 1
  store i32 %inc81, i32* %i, align 4
  br label %for.cond61

for.end82:                                        ; preds = %for.cond61
  ret void
}

declare noalias i8* @malloc(i32 %0) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: noinline nounwind optnone
define internal void @processMessage(i8* %message, [6 x i8]* %ks, i8* %ep) #0 {
entry:
  %message.addr = alloca i8*, align 4
  %ks.addr = alloca [6 x i8]*, align 4
  %ep.addr = alloca i8*, align 4
  %left = alloca [17 x [4 x i8]], align 16
  %right = alloca [17 x [4 x i8]], align 16
  %mp = alloca [8 x i8], align 1
  %e = alloca [8 x i8], align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %fs = alloca [4 x i8], align 1
  store i8* %message, i8** %message.addr, align 4
  store [6 x i8]* %ks, [6 x i8]** %ks.addr, align 4
  store i8* %ep, i8** %ep.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 64
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %mp, i32 0, i32 0
  %1 = load i32, i32* %i, align 4
  %2 = load i8*, i8** %message.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [64 x i8], [64 x i8]* @IP, i32 0, i32 %3
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %sub = sub nsw i32 %conv, 1
  %call = call i32 @peekBit(i8* %2, i32 %sub)
  call void @pokeBit(i8* %arraydecay, i32 %1, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc13, %for.end
  %6 = load i32, i32* %i, align 4
  %cmp2 = icmp slt i32 %6, 32
  br i1 %cmp2, label %for.body4, label %for.end15

for.body4:                                        ; preds = %for.cond1
  %arrayidx5 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 0
  %arraydecay6 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx5, i32 0, i32 0
  %7 = load i32, i32* %i, align 4
  %arraydecay7 = getelementptr inbounds [8 x i8], [8 x i8]* %mp, i32 0, i32 0
  %8 = load i32, i32* %i, align 4
  %call8 = call i32 @peekBit(i8* %arraydecay7, i32 %8)
  call void @pokeBit(i8* %arraydecay6, i32 %7, i32 %call8)
  %arrayidx9 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 0
  %arraydecay10 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx9, i32 0, i32 0
  %9 = load i32, i32* %i, align 4
  %arraydecay11 = getelementptr inbounds [8 x i8], [8 x i8]* %mp, i32 0, i32 0
  %10 = load i32, i32* %i, align 4
  %add = add nsw i32 %10, 32
  %call12 = call i32 @peekBit(i8* %arraydecay11, i32 %add)
  call void @pokeBit(i8* %arraydecay10, i32 %9, i32 %call12)
  br label %for.inc13

for.inc13:                                        ; preds = %for.body4
  %11 = load i32, i32* %i, align 4
  %inc14 = add nsw i32 %11, 1
  store i32 %inc14, i32* %i, align 4
  br label %for.cond1

for.end15:                                        ; preds = %for.cond1
  store i32 1, i32* %i, align 4
  br label %for.cond16

for.cond16:                                       ; preds = %for.inc50, %for.end15
  %12 = load i32, i32* %i, align 4
  %cmp17 = icmp slt i32 %12, 17
  br i1 %cmp17, label %for.body19, label %for.end52

for.body19:                                       ; preds = %for.cond16
  %13 = load i32, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 %13
  %arraydecay21 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx20, i32 0, i32 0
  %14 = load i32, i32* %i, align 4
  %sub22 = sub nsw i32 %14, 1
  %arrayidx23 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 %sub22
  %arraydecay24 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx23, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %arraydecay21, i8* align 4 %arraydecay24, i32 4, i1 false)
  %15 = load i32, i32* %i, align 4
  %sub25 = sub nsw i32 %15, 1
  %arrayidx26 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 %sub25
  %arraydecay27 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx26, i32 0, i32 0
  %16 = load [6 x i8]*, [6 x i8]** %ks.addr, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds [6 x i8], [6 x i8]* %16, i32 %17
  %arraydecay29 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx28, i32 0, i32 0
  %arraydecay30 = getelementptr inbounds [4 x i8], [4 x i8]* %fs, i32 0, i32 0
  call void @f(i8* %arraydecay27, i8* %arraydecay29, i8* %arraydecay30)
  store i32 0, i32* %j, align 4
  br label %for.cond31

for.cond31:                                       ; preds = %for.inc42, %for.body19
  %18 = load i32, i32* %j, align 4
  %cmp32 = icmp slt i32 %18, 4
  br i1 %cmp32, label %for.body34, label %for.end44

for.body34:                                       ; preds = %for.cond31
  %19 = load i32, i32* %j, align 4
  %arrayidx35 = getelementptr inbounds [4 x i8], [4 x i8]* %fs, i32 0, i32 %19
  %20 = load i8, i8* %arrayidx35, align 1
  %conv36 = zext i8 %20 to i32
  %21 = load i32, i32* %i, align 4
  %sub37 = sub nsw i32 %21, 1
  %arrayidx38 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 %sub37
  %22 = load i32, i32* %j, align 4
  %arrayidx39 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx38, i32 0, i32 %22
  %23 = load i8, i8* %arrayidx39, align 1
  %conv40 = zext i8 %23 to i32
  %xor = xor i32 %conv40, %conv36
  %conv41 = trunc i32 %xor to i8
  store i8 %conv41, i8* %arrayidx39, align 1
  br label %for.inc42

for.inc42:                                        ; preds = %for.body34
  %24 = load i32, i32* %j, align 4
  %inc43 = add nsw i32 %24, 1
  store i32 %inc43, i32* %j, align 4
  br label %for.cond31

for.end44:                                        ; preds = %for.cond31
  %25 = load i32, i32* %i, align 4
  %arrayidx45 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 %25
  %arraydecay46 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx45, i32 0, i32 0
  %26 = load i32, i32* %i, align 4
  %sub47 = sub nsw i32 %26, 1
  %arrayidx48 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 %sub47
  %arraydecay49 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx48, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %arraydecay46, i8* align 4 %arraydecay49, i32 4, i1 false)
  br label %for.inc50

for.inc50:                                        ; preds = %for.end44
  %27 = load i32, i32* %i, align 4
  %inc51 = add nsw i32 %27, 1
  store i32 %inc51, i32* %i, align 4
  br label %for.cond16

for.end52:                                        ; preds = %for.cond16
  store i32 0, i32* %i, align 4
  br label %for.cond53

for.cond53:                                       ; preds = %for.inc61, %for.end52
  %28 = load i32, i32* %i, align 4
  %cmp54 = icmp slt i32 %28, 32
  br i1 %cmp54, label %for.body56, label %for.end63

for.body56:                                       ; preds = %for.cond53
  %arraydecay57 = getelementptr inbounds [8 x i8], [8 x i8]* %e, i32 0, i32 0
  %29 = load i32, i32* %i, align 4
  %arrayidx58 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 16
  %arraydecay59 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx58, i32 0, i32 0
  %30 = load i32, i32* %i, align 4
  %call60 = call i32 @peekBit(i8* %arraydecay59, i32 %30)
  call void @pokeBit(i8* %arraydecay57, i32 %29, i32 %call60)
  br label %for.inc61

for.inc61:                                        ; preds = %for.body56
  %31 = load i32, i32* %i, align 4
  %inc62 = add nsw i32 %31, 1
  store i32 %inc62, i32* %i, align 4
  br label %for.cond53

for.end63:                                        ; preds = %for.cond53
  store i32 32, i32* %i, align 4
  br label %for.cond64

for.cond64:                                       ; preds = %for.inc73, %for.end63
  %32 = load i32, i32* %i, align 4
  %cmp65 = icmp slt i32 %32, 64
  br i1 %cmp65, label %for.body67, label %for.end75

for.body67:                                       ; preds = %for.cond64
  %arraydecay68 = getelementptr inbounds [8 x i8], [8 x i8]* %e, i32 0, i32 0
  %33 = load i32, i32* %i, align 4
  %arrayidx69 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 16
  %arraydecay70 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx69, i32 0, i32 0
  %34 = load i32, i32* %i, align 4
  %sub71 = sub nsw i32 %34, 32
  %call72 = call i32 @peekBit(i8* %arraydecay70, i32 %sub71)
  call void @pokeBit(i8* %arraydecay68, i32 %33, i32 %call72)
  br label %for.inc73

for.inc73:                                        ; preds = %for.body67
  %35 = load i32, i32* %i, align 4
  %inc74 = add nsw i32 %35, 1
  store i32 %inc74, i32* %i, align 4
  br label %for.cond64

for.end75:                                        ; preds = %for.cond64
  store i32 0, i32* %i, align 4
  br label %for.cond76

for.cond76:                                       ; preds = %for.inc85, %for.end75
  %36 = load i32, i32* %i, align 4
  %cmp77 = icmp slt i32 %36, 64
  br i1 %cmp77, label %for.body79, label %for.end87

for.body79:                                       ; preds = %for.cond76
  %37 = load i8*, i8** %ep.addr, align 4
  %38 = load i32, i32* %i, align 4
  %arraydecay80 = getelementptr inbounds [8 x i8], [8 x i8]* %e, i32 0, i32 0
  %39 = load i32, i32* %i, align 4
  %arrayidx81 = getelementptr inbounds [64 x i8], [64 x i8]* @IP2, i32 0, i32 %39
  %40 = load i8, i8* %arrayidx81, align 1
  %conv82 = zext i8 %40 to i32
  %sub83 = sub nsw i32 %conv82, 1
  %call84 = call i32 @peekBit(i8* %arraydecay80, i32 %sub83)
  call void @pokeBit(i8* %37, i32 %38, i32 %call84)
  br label %for.inc85

for.inc85:                                        ; preds = %for.body79
  %41 = load i32, i32* %i, align 4
  %inc86 = add nsw i32 %41, 1
  store i32 %inc86, i32* %i, align 4
  br label %for.cond76

for.end87:                                        ; preds = %for.cond76
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @decrypt(%struct.String* noalias sret align 4 %agg.result, i8* %key, i8* %message, i32 %len) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %message.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %ks = alloca [17 x [6 x i8]], align 16
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %padByte = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8* %key, i8** %key.addr, align 4
  store i8* %message, i8** %message.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = bitcast %struct.String* %agg.result to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  %1 = load i8*, i8** %key.addr, align 4
  %arraydecay = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  call void @getSubKeys(i8* %1, [6 x i8]* %arraydecay)
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc12, %entry
  %2 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, 9
  br i1 %cmp, label %for.body, label %for.end14

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %3, 6
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %4
  %5 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx, i32 0, i32 %5
  %6 = load i8, i8* %arrayidx4, align 1
  store i8 %6, i8* %temp, align 1
  %7 = load i32, i32* %i, align 4
  %sub = sub nsw i32 17, %7
  %arrayidx5 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %sub
  %8 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx5, i32 0, i32 %8
  %9 = load i8, i8* %arrayidx6, align 1
  %10 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %10
  %11 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx7, i32 0, i32 %11
  store i8 %9, i8* %arrayidx8, align 1
  %12 = load i8, i8* %temp, align 1
  %13 = load i32, i32* %i, align 4
  %sub9 = sub nsw i32 17, %13
  %arrayidx10 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %sub9
  %14 = load i32, i32* %j, align 4
  %arrayidx11 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx10, i32 0, i32 %14
  store i8 %12, i8* %arrayidx11, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %15 = load i32, i32* %j, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc12

for.inc12:                                        ; preds = %for.end
  %16 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %16, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond

for.end14:                                        ; preds = %for.cond
  %17 = load i32, i32* %len.addr, align 4
  %call = call noalias i8* @malloc(i32 %17)
  %data = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  store i8* %call, i8** %data, align 4
  %data15 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %18 = load i8*, i8** %data15, align 4
  %19 = load i8*, i8** %message.addr, align 4
  %20 = load i32, i32* %len.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %18, i8* align 1 %19, i32 %20, i1 false)
  %21 = load i32, i32* %len.addr, align 4
  %len16 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  store i32 %21, i32* %len16, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond17

for.cond17:                                       ; preds = %for.inc26, %for.end14
  %22 = load i32, i32* %i, align 4
  %len18 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %23 = load i32, i32* %len18, align 4
  %cmp19 = icmp slt i32 %22, %23
  br i1 %cmp19, label %for.body20, label %for.end27

for.body20:                                       ; preds = %for.cond17
  %data21 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %24 = load i8*, i8** %data21, align 4
  %25 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds i8, i8* %24, i32 %25
  %arraydecay23 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  %data24 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %26 = load i8*, i8** %data24, align 4
  %27 = load i32, i32* %i, align 4
  %arrayidx25 = getelementptr inbounds i8, i8* %26, i32 %27
  call void @processMessage(i8* %arrayidx22, [6 x i8]* %arraydecay23, i8* %arrayidx25)
  br label %for.inc26

for.inc26:                                        ; preds = %for.body20
  %28 = load i32, i32* %i, align 4
  %add = add nsw i32 %28, 8
  store i32 %add, i32* %i, align 4
  br label %for.cond17

for.end27:                                        ; preds = %for.cond17
  %data28 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %29 = load i8*, i8** %data28, align 4
  %30 = load i32, i32* %len.addr, align 4
  %sub29 = sub nsw i32 %30, 1
  %arrayidx30 = getelementptr inbounds i8, i8* %29, i32 %sub29
  %31 = load i8, i8* %arrayidx30, align 1
  store i8 %31, i8* %padByte, align 1
  %32 = load i8, i8* %padByte, align 1
  %conv = zext i8 %32 to i32
  %len31 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %33 = load i32, i32* %len31, align 4
  %sub32 = sub nsw i32 %33, %conv
  store i32 %sub32, i32* %len31, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @driver(i8* %key, i8* %message, i32 %len) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %message.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %encoded = alloca %struct.String, align 4
  %decoded = alloca %struct.String, align 4
  %buffer = alloca [128 x i8], align 16
  %tmp = alloca %struct.String, align 4
  %tmp9 = alloca %struct.String, align 4
  store i8* %key, i8** %key.addr, align 4
  store i8* %message, i8** %message.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load i8*, i8** %key.addr, align 4
  %arraydecay = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %0, i32 8, i8* %arraydecay)
  %arraydecay1 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i32 0, i32 0), i8* %arraydecay1)
  %1 = load i8*, i8** %message.addr, align 4
  %2 = load i32, i32* %len.addr, align 4
  %arraydecay2 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %1, i32 %2, i8* %arraydecay2)
  %arraydecay3 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0), i8* %arraydecay3)
  %3 = load i8*, i8** %key.addr, align 4
  %4 = load i8*, i8** %message.addr, align 4
  %5 = load i32, i32* %len.addr, align 4
  call void @encrypt(%struct.String* sret align 4 %tmp, i8* %3, i8* %4, i32 %5)
  %6 = bitcast %struct.String* %encoded to i8*
  %7 = bitcast %struct.String* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %6, i8* align 4 %7, i32 8, i1 false)
  %data = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  %8 = load i8*, i8** %data, align 4
  %len5 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 1
  %9 = load i32, i32* %len5, align 4
  %arraydecay6 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %8, i32 %9, i8* %arraydecay6)
  %arraydecay7 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0), i8* %arraydecay7)
  %10 = load i8*, i8** %key.addr, align 4
  %data10 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  %11 = load i8*, i8** %data10, align 4
  %len11 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 1
  %12 = load i32, i32* %len11, align 4
  call void @decrypt(%struct.String* sret align 4 %tmp9, i8* %10, i8* %11, i32 %12)
  %13 = bitcast %struct.String* %decoded to i8*
  %14 = bitcast %struct.String* %tmp9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %13, i8* align 4 %14, i32 8, i1 false)
  %data12 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 0
  %15 = load i8*, i8** %data12, align 4
  %len13 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 1
  %16 = load i32, i32* %len13, align 4
  %arraydecay14 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %15, i32 %16, i8* %arraydecay14)
  %arraydecay15 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0), i8* %arraydecay15)
  %len17 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 1
  %17 = load i32, i32* %len17, align 4
  %cmp = icmp sgt i32 %17, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %data18 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  %18 = load i8*, i8** %data18, align 4
  call void @free(i8* %18)
  %data19 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  store i8* null, i8** %data19, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %len20 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 1
  %19 = load i32, i32* %len20, align 4
  %cmp21 = icmp sgt i32 %19, 0
  br i1 %cmp21, label %if.then22, label %if.end25

if.then22:                                        ; preds = %if.end
  %data23 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 0
  %20 = load i8*, i8** %data23, align 4
  call void @free(i8* %20)
  %data24 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 0
  store i8* null, i8** %data24, align 4
  br label %if.end25

if.end25:                                         ; preds = %if.then22, %if.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @printBytes(i8* %ptr, i32 %len, i8* %out) #0 {
entry:
  %ptr.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  store i8* %ptr, i8** %ptr.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %len.addr, align 4
  %dec = add nsw i32 %0, -1
  store i32 %dec, i32* %len.addr, align 4
  %cmp = icmp sgt i32 %0, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i8*, i8** %ptr.addr, align 4
  %2 = load i8, i8* %1, align 1
  %conv = zext i8 %2 to i32
  %shr = ashr i32 %conv, 4
  %conv1 = trunc i32 %shr to i8
  %call = call signext i8 @toHex(i8 zeroext %conv1)
  %3 = load i8*, i8** %out.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %3, i32 1
  store i8* %incdec.ptr, i8** %out.addr, align 4
  store i8 %call, i8* %3, align 1
  %4 = load i8*, i8** %ptr.addr, align 4
  %5 = load i8, i8* %4, align 1
  %conv2 = zext i8 %5 to i32
  %and = and i32 %conv2, 15
  %conv3 = trunc i32 %and to i8
  %call4 = call signext i8 @toHex(i8 zeroext %conv3)
  %6 = load i8*, i8** %out.addr, align 4
  %incdec.ptr5 = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr5, i8** %out.addr, align 4
  store i8 %call4, i8* %6, align 1
  %7 = load i8*, i8** %ptr.addr, align 4
  %incdec.ptr6 = getelementptr inbounds i8, i8* %7, i32 1
  store i8* %incdec.ptr6, i8** %ptr.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %8 = load i8*, i8** %out.addr, align 4
  store i8 0, i8* %8, align 1
  ret void
}

declare i32 @printf(i8* %0, ...) #2

declare void @free(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %keys = alloca [3 x [8 x i8]], align 16
  %message1 = alloca [8 x i8], align 1
  %message2 = alloca [8 x i8], align 1
  %message3 = alloca [38 x i8], align 16
  %len = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [3 x [8 x i8]]* %keys to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([3 x [8 x i8]], [3 x [8 x i8]]* @__const.main.keys, i32 0, i32 0, i32 0), i32 24, i1 false)
  %1 = bitcast [8 x i8]* %message1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %1, i8* align 1 getelementptr inbounds ([8 x i8], [8 x i8]* @__const.main.message1, i32 0, i32 0), i32 8, i1 false)
  %2 = bitcast [8 x i8]* %message2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %2, i8* align 1 getelementptr inbounds ([8 x i8], [8 x i8]* @__const.main.message2, i32 0, i32 0), i32 8, i1 false)
  %3 = bitcast [38 x i8]* %message3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %3, i8* align 16 getelementptr inbounds ([38 x i8], [38 x i8]* @__const.main.message3, i32 0, i32 0), i32 38, i1 false)
  store i32 8, i32* %len, align 4
  %arrayidx = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* %keys, i32 0, i32 0
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %arrayidx, i32 0, i32 0
  %arraydecay1 = getelementptr inbounds [8 x i8], [8 x i8]* %message1, i32 0, i32 0
  %4 = load i32, i32* %len, align 4
  call void @driver(i8* %arraydecay, i8* %arraydecay1, i32 %4)
  store i32 8, i32* %len, align 4
  %arrayidx2 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* %keys, i32 0, i32 1
  %arraydecay3 = getelementptr inbounds [8 x i8], [8 x i8]* %arrayidx2, i32 0, i32 0
  %arraydecay4 = getelementptr inbounds [8 x i8], [8 x i8]* %message2, i32 0, i32 0
  %5 = load i32, i32* %len, align 4
  call void @driver(i8* %arraydecay3, i8* %arraydecay4, i32 %5)
  store i32 38, i32* %len, align 4
  %arrayidx5 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* %keys, i32 0, i32 2
  %arraydecay6 = getelementptr inbounds [8 x i8], [8 x i8]* %arrayidx5, i32 0, i32 0
  %arraydecay7 = getelementptr inbounds [38 x i8], [38 x i8]* %message3, i32 0, i32 0
  %6 = load i32, i32* %len, align 4
  call void @driver(i8* %arraydecay6, i8* %arraydecay7, i32 %6)
  ret i32 0
}

; Function Attrs: noinline nounwind optnone
define internal void @pokeBit(i8* %dst, i32 %index, i32 %value) #0 {
entry:
  %dst.addr = alloca i8*, align 4
  %index.addr = alloca i32, align 4
  %value.addr = alloca i32, align 4
  %cell = alloca i32, align 4
  %bit = alloca i32, align 4
  store i8* %dst, i8** %dst.addr, align 4
  store i32 %index, i32* %index.addr, align 4
  store i32 %value, i32* %value.addr, align 4
  %0 = load i32, i32* %index.addr, align 4
  %div = sdiv i32 %0, 8
  store i32 %div, i32* %cell, align 4
  %1 = load i32, i32* %index.addr, align 4
  %rem = srem i32 %1, 8
  %sub = sub nsw i32 7, %rem
  store i32 %sub, i32* %bit, align 4
  %2 = load i32, i32* %value.addr, align 4
  %cmp = icmp eq i32 %2, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %bit, align 4
  %shl = shl i32 1, %3
  %neg = xor i32 %shl, -1
  %4 = load i8*, i8** %dst.addr, align 4
  %5 = load i32, i32* %cell, align 4
  %arrayidx = getelementptr inbounds i8, i8* %4, i32 %5
  %6 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %6 to i32
  %and = and i32 %conv, %neg
  %conv1 = trunc i32 %and to i8
  store i8 %conv1, i8* %arrayidx, align 1
  br label %if.end

if.else:                                          ; preds = %entry
  %7 = load i32, i32* %bit, align 4
  %shl2 = shl i32 1, %7
  %8 = load i8*, i8** %dst.addr, align 4
  %9 = load i32, i32* %cell, align 4
  %arrayidx3 = getelementptr inbounds i8, i8* %8, i32 %9
  %10 = load i8, i8* %arrayidx3, align 1
  %conv4 = zext i8 %10 to i32
  %or = or i32 %conv4, %shl2
  %conv5 = trunc i32 %or to i8
  store i8 %conv5, i8* %arrayidx3, align 1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i32 @peekBit(i8* %src, i32 %index) #0 {
entry:
  %src.addr = alloca i8*, align 4
  %index.addr = alloca i32, align 4
  %cell = alloca i32, align 4
  %bit = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 4
  store i32 %index, i32* %index.addr, align 4
  %0 = load i32, i32* %index.addr, align 4
  %div = sdiv i32 %0, 8
  store i32 %div, i32* %cell, align 4
  %1 = load i32, i32* %index.addr, align 4
  %rem = srem i32 %1, 8
  %sub = sub nsw i32 7, %rem
  store i32 %sub, i32* %bit, align 4
  %2 = load i8*, i8** %src.addr, align 4
  %3 = load i32, i32* %cell, align 4
  %arrayidx = getelementptr inbounds i8, i8* %2, i32 %3
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %5 = load i32, i32* %bit, align 4
  %shl = shl i32 1, %5
  %and = and i32 %conv, %shl
  %cmp = icmp ne i32 %and, 0
  %conv1 = zext i1 %cmp to i32
  ret i32 %conv1
}

; Function Attrs: noinline nounwind optnone
define internal void @shiftLeft(i8* %src, i32 %len, i32 %times, i8* %dst) #0 {
entry:
  %src.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %times.addr = alloca i32, align 4
  %dst.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %t = alloca i32, align 4
  %temp = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %times, i32* %times.addr, align 4
  store i8* %dst, i8** %dst.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp sle i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8*, i8** %dst.addr, align 4
  %3 = load i32, i32* %i, align 4
  %4 = load i8*, i8** %src.addr, align 4
  %5 = load i32, i32* %i, align 4
  %call = call i32 @peekBit(i8* %4, i32 %5)
  call void @pokeBit(i8* %2, i32 %3, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %t, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc13, %for.end
  %7 = load i32, i32* %t, align 4
  %8 = load i32, i32* %times.addr, align 4
  %cmp2 = icmp sle i32 %7, %8
  br i1 %cmp2, label %for.body3, label %for.end15

for.body3:                                        ; preds = %for.cond1
  %9 = load i8*, i8** %dst.addr, align 4
  %call4 = call i32 @peekBit(i8* %9, i32 0)
  store i32 %call4, i32* %temp, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc9, %for.body3
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %len.addr, align 4
  %cmp6 = icmp sle i32 %10, %11
  br i1 %cmp6, label %for.body7, label %for.end11

for.body7:                                        ; preds = %for.cond5
  %12 = load i8*, i8** %dst.addr, align 4
  %13 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %13, 1
  %14 = load i8*, i8** %dst.addr, align 4
  %15 = load i32, i32* %i, align 4
  %call8 = call i32 @peekBit(i8* %14, i32 %15)
  call void @pokeBit(i8* %12, i32 %sub, i32 %call8)
  br label %for.inc9

for.inc9:                                         ; preds = %for.body7
  %16 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %16, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond5

for.end11:                                        ; preds = %for.cond5
  %17 = load i8*, i8** %dst.addr, align 4
  %18 = load i32, i32* %len.addr, align 4
  %sub12 = sub nsw i32 %18, 1
  %19 = load i32, i32* %temp, align 4
  call void @pokeBit(i8* %17, i32 %sub12, i32 %19)
  br label %for.inc13

for.inc13:                                        ; preds = %for.end11
  %20 = load i32, i32* %t, align 4
  %inc14 = add nsw i32 %20, 1
  store i32 %inc14, i32* %t, align 4
  br label %for.cond1

for.end15:                                        ; preds = %for.cond1
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @f(i8* %r, i8* %ks, i8* %sp) #0 {
entry:
  %r.addr = alloca i8*, align 4
  %ks.addr = alloca i8*, align 4
  %sp.addr = alloca i8*, align 4
  %er = alloca [6 x i8], align 1
  %sr = alloca [4 x i8], align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %b = alloca [6 x i32], align 16
  %k = alloca i32, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %m = alloca i32, align 4
  %n = alloca i32, align 4
  %p = alloca i32, align 4
  store i8* %r, i8** %r.addr, align 4
  store i8* %ks, i8** %ks.addr, align 4
  store i8* %sp, i8** %sp.addr, align 4
  %arraydecay = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  call void @llvm.memset.p0i8.i32(i8* align 1 %arraydecay, i8 0, i32 6, i1 false)
  %arraydecay1 = getelementptr inbounds [4 x i8], [4 x i8]* %sr, i32 0, i32 0
  call void @llvm.memset.p0i8.i32(i8* align 1 %arraydecay1, i8 0, i32 4, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 48
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay2 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  %1 = load i32, i32* %i, align 4
  %2 = load i8*, i8** %r.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [48 x i8], [48 x i8]* @E, i32 0, i32 %3
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %sub = sub nsw i32 %conv, 1
  %call = call i32 @peekBit(i8* %2, i32 %sub)
  call void @pokeBit(i8* %arraydecay2, i32 %1, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc12, %for.end
  %6 = load i32, i32* %i, align 4
  %cmp4 = icmp slt i32 %6, 6
  br i1 %cmp4, label %for.body6, label %for.end14

for.body6:                                        ; preds = %for.cond3
  %7 = load i8*, i8** %ks.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds i8, i8* %7, i32 %8
  %9 = load i8, i8* %arrayidx7, align 1
  %conv8 = zext i8 %9 to i32
  %10 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 %10
  %11 = load i8, i8* %arrayidx9, align 1
  %conv10 = zext i8 %11 to i32
  %xor = xor i32 %conv10, %conv8
  %conv11 = trunc i32 %xor to i8
  store i8 %conv11, i8* %arrayidx9, align 1
  br label %for.inc12

for.inc12:                                        ; preds = %for.body6
  %12 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %12, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond3

for.end14:                                        ; preds = %for.cond3
  store i32 0, i32* %i, align 4
  br label %for.cond15

for.cond15:                                       ; preds = %for.inc59, %for.end14
  %13 = load i32, i32* %i, align 4
  %cmp16 = icmp slt i32 %13, 8
  br i1 %cmp16, label %for.body18, label %for.end61

for.body18:                                       ; preds = %for.cond15
  %14 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %14, 6
  store i32 %mul, i32* %j, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond19

for.cond19:                                       ; preds = %for.inc28, %for.body18
  %15 = load i32, i32* %k, align 4
  %cmp20 = icmp slt i32 %15, 6
  br i1 %cmp20, label %for.body22, label %for.end30

for.body22:                                       ; preds = %for.cond19
  %arraydecay23 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  %16 = load i32, i32* %j, align 4
  %17 = load i32, i32* %k, align 4
  %add = add nsw i32 %16, %17
  %call24 = call i32 @peekBit(i8* %arraydecay23, i32 %add)
  %cmp25 = icmp ne i32 %call24, 0
  %18 = zext i1 %cmp25 to i64
  %cond = select i1 %cmp25, i32 1, i32 0
  %19 = load i32, i32* %k, align 4
  %arrayidx27 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 %19
  store i32 %cond, i32* %arrayidx27, align 4
  br label %for.inc28

for.inc28:                                        ; preds = %for.body22
  %20 = load i32, i32* %k, align 4
  %inc29 = add nsw i32 %20, 1
  store i32 %inc29, i32* %k, align 4
  br label %for.cond19

for.end30:                                        ; preds = %for.cond19
  %arrayidx31 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 0
  %21 = load i32, i32* %arrayidx31, align 16
  %mul32 = mul nsw i32 2, %21
  %arrayidx33 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 5
  %22 = load i32, i32* %arrayidx33, align 4
  %add34 = add nsw i32 %mul32, %22
  store i32 %add34, i32* %row, align 4
  %arrayidx35 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 1
  %23 = load i32, i32* %arrayidx35, align 4
  %mul36 = mul nsw i32 8, %23
  %arrayidx37 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 2
  %24 = load i32, i32* %arrayidx37, align 8
  %mul38 = mul nsw i32 4, %24
  %add39 = add nsw i32 %mul36, %mul38
  %arrayidx40 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 3
  %25 = load i32, i32* %arrayidx40, align 4
  %mul41 = mul nsw i32 2, %25
  %add42 = add nsw i32 %add39, %mul41
  %arrayidx43 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 4
  %26 = load i32, i32* %arrayidx43, align 16
  %add44 = add nsw i32 %add42, %26
  store i32 %add44, i32* %col, align 4
  %27 = load i32, i32* %i, align 4
  %arrayidx45 = getelementptr inbounds [8 x [64 x i8]], [8 x [64 x i8]]* @S, i32 0, i32 %27
  %28 = load i32, i32* %row, align 4
  %mul46 = mul nsw i32 %28, 16
  %29 = load i32, i32* %col, align 4
  %add47 = add nsw i32 %mul46, %29
  %arrayidx48 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx45, i32 0, i32 %add47
  %30 = load i8, i8* %arrayidx48, align 1
  %conv49 = zext i8 %30 to i32
  store i32 %conv49, i32* %m, align 4
  store i32 1, i32* %n, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end30
  %31 = load i32, i32* %m, align 4
  %cmp50 = icmp sgt i32 %31, 0
  br i1 %cmp50, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %32 = load i32, i32* %m, align 4
  %rem = srem i32 %32, 2
  store i32 %rem, i32* %p, align 4
  %arraydecay52 = getelementptr inbounds [4 x i8], [4 x i8]* %sr, i32 0, i32 0
  %33 = load i32, i32* %i, align 4
  %add53 = add nsw i32 %33, 1
  %mul54 = mul nsw i32 %add53, 4
  %34 = load i32, i32* %n, align 4
  %sub55 = sub nsw i32 %mul54, %34
  %35 = load i32, i32* %p, align 4
  %cmp56 = icmp eq i32 %35, 1
  %conv57 = zext i1 %cmp56 to i32
  call void @pokeBit(i8* %arraydecay52, i32 %sub55, i32 %conv57)
  %36 = load i32, i32* %m, align 4
  %div = sdiv i32 %36, 2
  store i32 %div, i32* %m, align 4
  %37 = load i32, i32* %n, align 4
  %inc58 = add nsw i32 %37, 1
  store i32 %inc58, i32* %n, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %for.inc59

for.inc59:                                        ; preds = %while.end
  %38 = load i32, i32* %i, align 4
  %inc60 = add nsw i32 %38, 1
  store i32 %inc60, i32* %i, align 4
  br label %for.cond15

for.end61:                                        ; preds = %for.cond15
  store i32 0, i32* %i, align 4
  br label %for.cond62

for.cond62:                                       ; preds = %for.inc71, %for.end61
  %39 = load i32, i32* %i, align 4
  %cmp63 = icmp slt i32 %39, 32
  br i1 %cmp63, label %for.body65, label %for.end73

for.body65:                                       ; preds = %for.cond62
  %40 = load i8*, i8** %sp.addr, align 4
  %41 = load i32, i32* %i, align 4
  %arraydecay66 = getelementptr inbounds [4 x i8], [4 x i8]* %sr, i32 0, i32 0
  %42 = load i32, i32* %i, align 4
  %arrayidx67 = getelementptr inbounds [32 x i8], [32 x i8]* @P, i32 0, i32 %42
  %43 = load i8, i8* %arrayidx67, align 1
  %conv68 = zext i8 %43 to i32
  %sub69 = sub nsw i32 %conv68, 1
  %call70 = call i32 @peekBit(i8* %arraydecay66, i32 %sub69)
  call void @pokeBit(i8* %40, i32 %41, i32 %call70)
  br label %for.inc71

for.inc71:                                        ; preds = %for.body65
  %44 = load i32, i32* %i, align 4
  %inc72 = add nsw i32 %44, 1
  store i32 %inc72, i32* %i, align 4
  br label %for.cond62

for.end73:                                        ; preds = %for.cond62
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal signext i8 @toHex(i8 zeroext %in) #0 {
entry:
  %retval = alloca i8, align 1
  %in.addr = alloca i8, align 1
  store i8 %in, i8* %in.addr, align 1
  %0 = load i8, i8* %in.addr, align 1
  %conv = zext i8 %0 to i32
  %cmp = icmp sle i32 0, %conv
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i8, i8* %in.addr, align 1
  %conv2 = zext i8 %1 to i32
  %cmp3 = icmp slt i32 %conv2, 10
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %2 = load i8, i8* %in.addr, align 1
  %conv5 = zext i8 %2 to i32
  %add = add nsw i32 48, %conv5
  %conv6 = trunc i32 %add to i8
  store i8 %conv6, i8* %retval, align 1
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %3 = load i8, i8* %in.addr, align 1
  %conv7 = zext i8 %3 to i32
  %cmp8 = icmp sle i32 10, %conv7
  br i1 %cmp8, label %land.lhs.true10, label %if.end18

land.lhs.true10:                                  ; preds = %if.end
  %4 = load i8, i8* %in.addr, align 1
  %conv11 = zext i8 %4 to i32
  %cmp12 = icmp sle i32 %conv11, 15
  br i1 %cmp12, label %if.then14, label %if.end18

if.then14:                                        ; preds = %land.lhs.true10
  %5 = load i8, i8* %in.addr, align 1
  %conv15 = zext i8 %5 to i32
  %add16 = add nsw i32 65, %conv15
  %sub = sub nsw i32 %add16, 10
  %conv17 = trunc i32 %sub to i8
  store i8 %conv17, i8* %retval, align 1
  br label %return

if.end18:                                         ; preds = %land.lhs.true10, %if.end
  store i8 0, i8* %retval, align 1
  br label %return

return:                                           ; preds = %if.end18, %if.then14, %if.then
  %6 = load i8, i8* %retval, align 1
  ret i8 %6
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem = srem i32 %2, 8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 8:i32
infer %1 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 8, %rem
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 8:i32
%2:i32 = subnsw 8:i32, %1
infer %2 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %conv = trunc i32 %sub to i8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 8:i32
%2:i32 = subnsw 8:i32, %1
%3:i8 = trunc %2
infer %3

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i8, i8* %padByte, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv1 = zext i8 %4 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %add = add nsw i32 %3, %conv1
; Looking for a replacement for:
%0:i32 = var
%1:i8 = var
%2:i32 = zext %1
%3:i32 = addnsw %0, %2
infer %3

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %len3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i8, i8* %padByte, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i8, i8* %padByte, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv7 = zext i8 %12 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %len8, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %13, %14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add15 = add nsw i32 %19, 8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 8:i32, %0
infer %1
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 8:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 8
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 10
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for encrypt()

; entering Souper's runOnFunction() for ./Data_Encryption_Standard.c.bc:getSubKeys()

; ModuleID = './Data_Encryption_Standard.c.bc'
source_filename = "./Data_Encryption_Standard.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.String = type { i8*, i32 }

@.str = private unnamed_addr constant [14 x i8] c"Key     : %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"Message : %s\0A\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"Encoded : %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"Decoded : %s\0A\0A\00", align 1
@__const.main.keys = private unnamed_addr constant [3 x [8 x i8]] [[8 x i8] c"\134Wy\9B\BC\DF\F1", [8 x i8] c"\0E2\922\EAm\0Ds", [8 x i8] c"\0E2\922\EAm\0Ds"], align 16
@__const.main.message1 = private unnamed_addr constant [8 x i8] c"\01#Eg\89\AB\CD\EF", align 1
@__const.main.message2 = private unnamed_addr constant [8 x i8] c"\87\87\87\87\87\87\87\87", align 1
@__const.main.message3 = private unnamed_addr constant [38 x i8] c"Your lips are smoother than vaseline\0D\0A", align 16
@PC1 = internal constant [56 x i8] c"91)!\19\11\09\01:2*\22\1A\12\0A\02;3+#\1B\13\0B\03<4,$?7/'\1F\17\0F\07>6.&\1E\16\0E\06=5-%\1D\15\0D\05\1C\14\0C\04", align 16
@SHIFTS = internal constant [16 x i8] c"\01\01\02\02\02\02\02\02\01\02\02\02\02\02\02\01", align 16
@PC2 = internal constant [48 x i8] c"\0E\11\0B\18\01\05\03\1C\0F\06\15\0A\17\13\0C\04\1A\08\10\07\1B\14\0D\02)4\1F%/7\1E(3-!0,1'8\225.*2$\1D ", align 16
@IP = internal constant [64 x i8] c":2*\22\1A\12\0A\02<4,$\1C\14\0C\04>6.&\1E\16\0E\06@80( \18\10\0891)!\19\11\09\01;3+#\1B\13\0B\03=5-%\1D\15\0D\05?7/'\1F\17\0F\07", align 16
@IP2 = internal constant [64 x i8] c"(\080\108\18@ '\07/\0F7\17?\1F&\06.\0E6\16>\1E%\05-\0D5\15=\1D$\04,\0C4\14<\1C#\03+\0B3\13;\1B\22\02*\0A2\12:\1A!\01)\091\119\19", align 16
@E = internal constant [48 x i8] c" \01\02\03\04\05\04\05\06\07\08\09\08\09\0A\0B\0C\0D\0C\0D\0E\0F\10\11\10\11\12\13\14\15\14\15\16\17\18\19\18\19\1A\1B\1C\1D\1C\1D\1E\1F \01", align 16
@S = internal constant [8 x [64 x i8]] [[64 x i8] c"\0E\04\0D\01\02\0F\0B\08\03\0A\06\0C\05\09\00\07\00\0F\07\04\0E\02\0D\01\0A\06\0C\0B\09\05\03\08\04\01\0E\08\0D\06\02\0B\0F\0C\09\07\03\0A\05\00\0F\0C\08\02\04\09\01\07\05\0B\03\0E\0A\00\06\0D", [64 x i8] c"\0F\01\08\0E\06\0B\03\04\09\07\02\0D\0C\00\05\0A\03\0D\04\07\0F\02\08\0E\0C\00\01\0A\06\09\0B\05\00\0E\07\0B\0A\04\0D\01\05\08\0C\06\09\03\02\0F\0D\08\0A\01\03\0F\04\02\0B\06\07\0C\00\05\0E\09", [64 x i8] c"\0A\00\09\0E\06\03\0F\05\01\0D\0C\07\0B\04\02\08\0D\07\00\09\03\04\06\0A\02\08\05\0E\0C\0B\0F\01\0D\06\04\09\08\0F\03\00\0B\01\02\0C\05\0A\0E\07\01\0A\0D\00\06\09\08\07\04\0F\0E\03\0B\05\02\0C", [64 x i8] c"\07\0D\0E\03\00\06\09\0A\01\02\08\05\0B\0C\04\0F\0D\08\0B\05\06\0F\00\03\04\07\02\0C\01\0A\0E\09\0A\06\09\00\0C\0B\07\0D\0F\01\03\0E\05\02\08\04\03\0F\00\06\0A\01\0D\08\09\04\05\0B\0C\07\02\0E", [64 x i8] c"\02\0C\04\01\07\0A\0B\06\08\05\03\0F\0D\00\0E\09\0E\0B\02\0C\04\07\0D\01\05\00\0F\0A\03\09\08\06\04\02\01\0B\0A\0D\07\08\0F\09\0C\05\06\03\00\0E\0B\08\0C\07\01\0E\02\0D\06\0F\00\09\0A\04\05\03", [64 x i8] c"\0C\01\0A\0F\09\02\06\08\00\0D\03\04\0E\07\05\0B\0A\0F\04\02\07\0C\09\05\06\01\0D\0E\00\0B\03\08\09\0E\0F\05\02\08\0C\03\07\00\04\0A\01\0D\0B\06\04\03\02\0C\09\05\0F\0A\0B\0E\01\07\06\00\08\0D", [64 x i8] c"\04\0B\02\0E\0F\00\08\0D\03\0C\09\07\05\0A\06\01\0D\00\0B\07\04\09\01\0A\0E\03\05\0C\02\0F\08\06\01\04\0B\0D\0C\03\07\0E\0A\0F\06\08\00\05\09\02\06\0B\0D\08\01\04\0A\07\09\05\00\0F\0E\02\03\0C", [64 x i8] c"\0D\02\08\04\06\0F\0B\01\0A\09\03\0E\05\00\0C\07\01\0F\0D\08\0A\03\07\04\0C\05\06\0B\00\0E\09\02\07\0B\04\01\09\0C\0E\02\00\06\0A\0D\0F\03\05\08\02\01\0E\07\04\0A\08\0D\0F\0C\09\00\03\05\06\0B"], align 16
@P = internal constant [32 x i8] c"\10\07\14\15\1D\0C\1C\11\01\0F\17\1A\05\12\1F\0A\02\08\18\0E \1B\03\09\13\0D\1E\06\16\0B\04\19", align 16
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @encrypt(%struct.String* noalias sret align 4 %agg.result, i8* %key, i8* %message, i32 %len) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %message.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %ks = alloca [17 x [6 x i8]], align 16
  %padByte = alloca i8, align 1
  %i = alloca i32, align 4
  store i8* %key, i8** %key.addr, align 4
  store i8* %message, i8** %message.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = bitcast %struct.String* %agg.result to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  %1 = load i8*, i8** %key.addr, align 4
  %arraydecay = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  call void @getSubKeys(i8* %1, [6 x i8]* %arraydecay)
  %2 = load i32, i32* %len.addr, align 4
  %rem = srem i32 %2, 8
  %sub = sub nsw i32 8, %rem
  %conv = trunc i32 %sub to i8
  store i8 %conv, i8* %padByte, align 1
  %3 = load i32, i32* %len.addr, align 4
  %4 = load i8, i8* %padByte, align 1
  %conv1 = zext i8 %4 to i32
  %add = add nsw i32 %3, %conv1
  %len2 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  store i32 %add, i32* %len2, align 4
  %len3 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %5 = load i32, i32* %len3, align 4
  %call = call noalias i8* @malloc(i32 %5)
  %data = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  store i8* %call, i8** %data, align 4
  %data4 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %6 = load i8*, i8** %data4, align 4
  %7 = load i8*, i8** %message.addr, align 4
  %8 = load i32, i32* %len.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %6, i8* align 1 %7, i32 %8, i1 false)
  %data5 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %9 = load i8*, i8** %data5, align 4
  %10 = load i32, i32* %len.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %9, i32 %10
  %11 = load i8, i8* %padByte, align 1
  %12 = load i8, i8* %padByte, align 1
  %conv7 = zext i8 %12 to i32
  call void @llvm.memset.p0i8.i32(i8* align 1 %arrayidx, i8 %11, i32 %conv7, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %13 = load i32, i32* %i, align 4
  %len8 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %14 = load i32, i32* %len8, align 4
  %cmp = icmp slt i32 %13, %14
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %data10 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %15 = load i8*, i8** %data10, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds i8, i8* %15, i32 %16
  %arraydecay12 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  %data13 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %17 = load i8*, i8** %data13, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds i8, i8* %17, i32 %18
  call void @processMessage(i8* %arrayidx11, [6 x i8]* %arraydecay12, i8* %arrayidx14)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %19 = load i32, i32* %i, align 4
  %add15 = add nsw i32 %19, 8
  store i32 %add15, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define internal void @getSubKeys(i8* %key, [6 x i8]* %ks) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %ks.addr = alloca [6 x i8]*, align 4
  %c = alloca [17 x [7 x i8]], align 16
  %d = alloca [17 x [4 x i8]], align 16
  %kp = alloca [7 x i8], align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i8* %key, i8** %key.addr, align 4
  store [6 x i8]* %ks, [6 x i8]** %ks.addr, align 4
  %arraydecay = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 0
  %0 = bitcast [7 x i8]* %arraydecay to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 119, i1 false)
  %arraydecay1 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 0
  %1 = bitcast [4 x i8]* %arraydecay1 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %1, i8 0, i32 68, i1 false)
  %2 = load [6 x i8]*, [6 x i8]** %ks.addr, align 4
  %3 = bitcast [6 x i8]* %2 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 1 %3, i8 0, i32 102, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %4, 56
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay2 = getelementptr inbounds [7 x i8], [7 x i8]* %kp, i32 0, i32 0
  %5 = load i32, i32* %i, align 4
  %6 = load i8*, i8** %key.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [56 x i8], [56 x i8]* @PC1, i32 0, i32 %7
  %8 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %8 to i32
  %sub = sub nsw i32 %conv, 1
  %call = call i32 @peekBit(i8* %6, i32 %sub)
  call void @pokeBit(i8* %arraydecay2, i32 %5, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc15, %for.end
  %10 = load i32, i32* %i, align 4
  %cmp4 = icmp slt i32 %10, 28
  br i1 %cmp4, label %for.body6, label %for.end17

for.body6:                                        ; preds = %for.cond3
  %arrayidx7 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 0
  %arraydecay8 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx7, i32 0, i32 0
  %11 = load i32, i32* %i, align 4
  %arraydecay9 = getelementptr inbounds [7 x i8], [7 x i8]* %kp, i32 0, i32 0
  %12 = load i32, i32* %i, align 4
  %call10 = call i32 @peekBit(i8* %arraydecay9, i32 %12)
  call void @pokeBit(i8* %arraydecay8, i32 %11, i32 %call10)
  %arrayidx11 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 0
  %arraydecay12 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx11, i32 0, i32 0
  %13 = load i32, i32* %i, align 4
  %arraydecay13 = getelementptr inbounds [7 x i8], [7 x i8]* %kp, i32 0, i32 0
  %14 = load i32, i32* %i, align 4
  %add = add nsw i32 %14, 28
  %call14 = call i32 @peekBit(i8* %arraydecay13, i32 %add)
  call void @pokeBit(i8* %arraydecay12, i32 %13, i32 %call14)
  br label %for.inc15

for.inc15:                                        ; preds = %for.body6
  %15 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %15, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond3

for.end17:                                        ; preds = %for.cond3
  store i32 1, i32* %i, align 4
  br label %for.cond18

for.cond18:                                       ; preds = %for.inc38, %for.end17
  %16 = load i32, i32* %i, align 4
  %cmp19 = icmp slt i32 %16, 17
  br i1 %cmp19, label %for.body21, label %for.end40

for.body21:                                       ; preds = %for.cond18
  %17 = load i32, i32* %i, align 4
  %sub22 = sub nsw i32 %17, 1
  %arrayidx23 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %sub22
  %arraydecay24 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx23, i32 0, i32 0
  %18 = load i32, i32* %i, align 4
  %sub25 = sub nsw i32 %18, 1
  %arrayidx26 = getelementptr inbounds [16 x i8], [16 x i8]* @SHIFTS, i32 0, i32 %sub25
  %19 = load i8, i8* %arrayidx26, align 1
  %conv27 = zext i8 %19 to i32
  %20 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %20
  %arraydecay29 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx28, i32 0, i32 0
  call void @shiftLeft(i8* %arraydecay24, i32 28, i32 %conv27, i8* %arraydecay29)
  %21 = load i32, i32* %i, align 4
  %sub30 = sub nsw i32 %21, 1
  %arrayidx31 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 %sub30
  %arraydecay32 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx31, i32 0, i32 0
  %22 = load i32, i32* %i, align 4
  %sub33 = sub nsw i32 %22, 1
  %arrayidx34 = getelementptr inbounds [16 x i8], [16 x i8]* @SHIFTS, i32 0, i32 %sub33
  %23 = load i8, i8* %arrayidx34, align 1
  %conv35 = zext i8 %23 to i32
  %24 = load i32, i32* %i, align 4
  %arrayidx36 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 %24
  %arraydecay37 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx36, i32 0, i32 0
  call void @shiftLeft(i8* %arraydecay32, i32 28, i32 %conv35, i8* %arraydecay37)
  br label %for.inc38

for.inc38:                                        ; preds = %for.body21
  %25 = load i32, i32* %i, align 4
  %inc39 = add nsw i32 %25, 1
  store i32 %inc39, i32* %i, align 4
  br label %for.cond18

for.end40:                                        ; preds = %for.cond18
  store i32 1, i32* %i, align 4
  br label %for.cond41

for.cond41:                                       ; preds = %for.inc58, %for.end40
  %26 = load i32, i32* %i, align 4
  %cmp42 = icmp slt i32 %26, 17
  br i1 %cmp42, label %for.body44, label %for.end60

for.body44:                                       ; preds = %for.cond41
  store i32 28, i32* %j, align 4
  br label %for.cond45

for.cond45:                                       ; preds = %for.inc55, %for.body44
  %27 = load i32, i32* %j, align 4
  %cmp46 = icmp slt i32 %27, 56
  br i1 %cmp46, label %for.body48, label %for.end57

for.body48:                                       ; preds = %for.cond45
  %28 = load i32, i32* %i, align 4
  %arrayidx49 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %28
  %arraydecay50 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx49, i32 0, i32 0
  %29 = load i32, i32* %j, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx51 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 %30
  %arraydecay52 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx51, i32 0, i32 0
  %31 = load i32, i32* %j, align 4
  %sub53 = sub nsw i32 %31, 28
  %call54 = call i32 @peekBit(i8* %arraydecay52, i32 %sub53)
  call void @pokeBit(i8* %arraydecay50, i32 %29, i32 %call54)
  br label %for.inc55

for.inc55:                                        ; preds = %for.body48
  %32 = load i32, i32* %j, align 4
  %inc56 = add nsw i32 %32, 1
  store i32 %inc56, i32* %j, align 4
  br label %for.cond45

for.end57:                                        ; preds = %for.cond45
  br label %for.inc58

for.inc58:                                        ; preds = %for.end57
  %33 = load i32, i32* %i, align 4
  %inc59 = add nsw i32 %33, 1
  store i32 %inc59, i32* %i, align 4
  br label %for.cond41

for.end60:                                        ; preds = %for.cond41
  store i32 1, i32* %i, align 4
  br label %for.cond61

for.cond61:                                       ; preds = %for.inc80, %for.end60
  %34 = load i32, i32* %i, align 4
  %cmp62 = icmp slt i32 %34, 17
  br i1 %cmp62, label %for.body64, label %for.end82

for.body64:                                       ; preds = %for.cond61
  store i32 0, i32* %j, align 4
  br label %for.cond65

for.cond65:                                       ; preds = %for.inc77, %for.body64
  %35 = load i32, i32* %j, align 4
  %cmp66 = icmp slt i32 %35, 48
  br i1 %cmp66, label %for.body68, label %for.end79

for.body68:                                       ; preds = %for.cond65
  %36 = load [6 x i8]*, [6 x i8]** %ks.addr, align 4
  %37 = load i32, i32* %i, align 4
  %arrayidx69 = getelementptr inbounds [6 x i8], [6 x i8]* %36, i32 %37
  %arraydecay70 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx69, i32 0, i32 0
  %38 = load i32, i32* %j, align 4
  %39 = load i32, i32* %i, align 4
  %arrayidx71 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %39
  %arraydecay72 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx71, i32 0, i32 0
  %40 = load i32, i32* %j, align 4
  %arrayidx73 = getelementptr inbounds [48 x i8], [48 x i8]* @PC2, i32 0, i32 %40
  %41 = load i8, i8* %arrayidx73, align 1
  %conv74 = zext i8 %41 to i32
  %sub75 = sub nsw i32 %conv74, 1
  %call76 = call i32 @peekBit(i8* %arraydecay72, i32 %sub75)
  call void @pokeBit(i8* %arraydecay70, i32 %38, i32 %call76)
  br label %for.inc77

for.inc77:                                        ; preds = %for.body68
  %42 = load i32, i32* %j, align 4
  %inc78 = add nsw i32 %42, 1
  store i32 %inc78, i32* %j, align 4
  br label %for.cond65

for.end79:                                        ; preds = %for.cond65
  br label %for.inc80

for.inc80:                                        ; preds = %for.end79
  %43 = load i32, i32* %i, align 4
  %inc81 = add nsw i32 %43, 1
  store i32 %inc81, i32* %i, align 4
  br label %for.cond61

for.end82:                                        ; preds = %for.cond61
  ret void
}

declare noalias i8* @malloc(i32 %0) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: noinline nounwind optnone
define internal void @processMessage(i8* %message, [6 x i8]* %ks, i8* %ep) #0 {
entry:
  %message.addr = alloca i8*, align 4
  %ks.addr = alloca [6 x i8]*, align 4
  %ep.addr = alloca i8*, align 4
  %left = alloca [17 x [4 x i8]], align 16
  %right = alloca [17 x [4 x i8]], align 16
  %mp = alloca [8 x i8], align 1
  %e = alloca [8 x i8], align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %fs = alloca [4 x i8], align 1
  store i8* %message, i8** %message.addr, align 4
  store [6 x i8]* %ks, [6 x i8]** %ks.addr, align 4
  store i8* %ep, i8** %ep.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 64
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %mp, i32 0, i32 0
  %1 = load i32, i32* %i, align 4
  %2 = load i8*, i8** %message.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [64 x i8], [64 x i8]* @IP, i32 0, i32 %3
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %sub = sub nsw i32 %conv, 1
  %call = call i32 @peekBit(i8* %2, i32 %sub)
  call void @pokeBit(i8* %arraydecay, i32 %1, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc13, %for.end
  %6 = load i32, i32* %i, align 4
  %cmp2 = icmp slt i32 %6, 32
  br i1 %cmp2, label %for.body4, label %for.end15

for.body4:                                        ; preds = %for.cond1
  %arrayidx5 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 0
  %arraydecay6 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx5, i32 0, i32 0
  %7 = load i32, i32* %i, align 4
  %arraydecay7 = getelementptr inbounds [8 x i8], [8 x i8]* %mp, i32 0, i32 0
  %8 = load i32, i32* %i, align 4
  %call8 = call i32 @peekBit(i8* %arraydecay7, i32 %8)
  call void @pokeBit(i8* %arraydecay6, i32 %7, i32 %call8)
  %arrayidx9 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 0
  %arraydecay10 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx9, i32 0, i32 0
  %9 = load i32, i32* %i, align 4
  %arraydecay11 = getelementptr inbounds [8 x i8], [8 x i8]* %mp, i32 0, i32 0
  %10 = load i32, i32* %i, align 4
  %add = add nsw i32 %10, 32
  %call12 = call i32 @peekBit(i8* %arraydecay11, i32 %add)
  call void @pokeBit(i8* %arraydecay10, i32 %9, i32 %call12)
  br label %for.inc13

for.inc13:                                        ; preds = %for.body4
  %11 = load i32, i32* %i, align 4
  %inc14 = add nsw i32 %11, 1
  store i32 %inc14, i32* %i, align 4
  br label %for.cond1

for.end15:                                        ; preds = %for.cond1
  store i32 1, i32* %i, align 4
  br label %for.cond16

for.cond16:                                       ; preds = %for.inc50, %for.end15
  %12 = load i32, i32* %i, align 4
  %cmp17 = icmp slt i32 %12, 17
  br i1 %cmp17, label %for.body19, label %for.end52

for.body19:                                       ; preds = %for.cond16
  %13 = load i32, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 %13
  %arraydecay21 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx20, i32 0, i32 0
  %14 = load i32, i32* %i, align 4
  %sub22 = sub nsw i32 %14, 1
  %arrayidx23 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 %sub22
  %arraydecay24 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx23, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %arraydecay21, i8* align 4 %arraydecay24, i32 4, i1 false)
  %15 = load i32, i32* %i, align 4
  %sub25 = sub nsw i32 %15, 1
  %arrayidx26 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 %sub25
  %arraydecay27 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx26, i32 0, i32 0
  %16 = load [6 x i8]*, [6 x i8]** %ks.addr, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds [6 x i8], [6 x i8]* %16, i32 %17
  %arraydecay29 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx28, i32 0, i32 0
  %arraydecay30 = getelementptr inbounds [4 x i8], [4 x i8]* %fs, i32 0, i32 0
  call void @f(i8* %arraydecay27, i8* %arraydecay29, i8* %arraydecay30)
  store i32 0, i32* %j, align 4
  br label %for.cond31

for.cond31:                                       ; preds = %for.inc42, %for.body19
  %18 = load i32, i32* %j, align 4
  %cmp32 = icmp slt i32 %18, 4
  br i1 %cmp32, label %for.body34, label %for.end44

for.body34:                                       ; preds = %for.cond31
  %19 = load i32, i32* %j, align 4
  %arrayidx35 = getelementptr inbounds [4 x i8], [4 x i8]* %fs, i32 0, i32 %19
  %20 = load i8, i8* %arrayidx35, align 1
  %conv36 = zext i8 %20 to i32
  %21 = load i32, i32* %i, align 4
  %sub37 = sub nsw i32 %21, 1
  %arrayidx38 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 %sub37
  %22 = load i32, i32* %j, align 4
  %arrayidx39 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx38, i32 0, i32 %22
  %23 = load i8, i8* %arrayidx39, align 1
  %conv40 = zext i8 %23 to i32
  %xor = xor i32 %conv40, %conv36
  %conv41 = trunc i32 %xor to i8
  store i8 %conv41, i8* %arrayidx39, align 1
  br label %for.inc42

for.inc42:                                        ; preds = %for.body34
  %24 = load i32, i32* %j, align 4
  %inc43 = add nsw i32 %24, 1
  store i32 %inc43, i32* %j, align 4
  br label %for.cond31

for.end44:                                        ; preds = %for.cond31
  %25 = load i32, i32* %i, align 4
  %arrayidx45 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 %25
  %arraydecay46 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx45, i32 0, i32 0
  %26 = load i32, i32* %i, align 4
  %sub47 = sub nsw i32 %26, 1
  %arrayidx48 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 %sub47
  %arraydecay49 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx48, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %arraydecay46, i8* align 4 %arraydecay49, i32 4, i1 false)
  br label %for.inc50

for.inc50:                                        ; preds = %for.end44
  %27 = load i32, i32* %i, align 4
  %inc51 = add nsw i32 %27, 1
  store i32 %inc51, i32* %i, align 4
  br label %for.cond16

for.end52:                                        ; preds = %for.cond16
  store i32 0, i32* %i, align 4
  br label %for.cond53

for.cond53:                                       ; preds = %for.inc61, %for.end52
  %28 = load i32, i32* %i, align 4
  %cmp54 = icmp slt i32 %28, 32
  br i1 %cmp54, label %for.body56, label %for.end63

for.body56:                                       ; preds = %for.cond53
  %arraydecay57 = getelementptr inbounds [8 x i8], [8 x i8]* %e, i32 0, i32 0
  %29 = load i32, i32* %i, align 4
  %arrayidx58 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 16
  %arraydecay59 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx58, i32 0, i32 0
  %30 = load i32, i32* %i, align 4
  %call60 = call i32 @peekBit(i8* %arraydecay59, i32 %30)
  call void @pokeBit(i8* %arraydecay57, i32 %29, i32 %call60)
  br label %for.inc61

for.inc61:                                        ; preds = %for.body56
  %31 = load i32, i32* %i, align 4
  %inc62 = add nsw i32 %31, 1
  store i32 %inc62, i32* %i, align 4
  br label %for.cond53

for.end63:                                        ; preds = %for.cond53
  store i32 32, i32* %i, align 4
  br label %for.cond64

for.cond64:                                       ; preds = %for.inc73, %for.end63
  %32 = load i32, i32* %i, align 4
  %cmp65 = icmp slt i32 %32, 64
  br i1 %cmp65, label %for.body67, label %for.end75

for.body67:                                       ; preds = %for.cond64
  %arraydecay68 = getelementptr inbounds [8 x i8], [8 x i8]* %e, i32 0, i32 0
  %33 = load i32, i32* %i, align 4
  %arrayidx69 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 16
  %arraydecay70 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx69, i32 0, i32 0
  %34 = load i32, i32* %i, align 4
  %sub71 = sub nsw i32 %34, 32
  %call72 = call i32 @peekBit(i8* %arraydecay70, i32 %sub71)
  call void @pokeBit(i8* %arraydecay68, i32 %33, i32 %call72)
  br label %for.inc73

for.inc73:                                        ; preds = %for.body67
  %35 = load i32, i32* %i, align 4
  %inc74 = add nsw i32 %35, 1
  store i32 %inc74, i32* %i, align 4
  br label %for.cond64

for.end75:                                        ; preds = %for.cond64
  store i32 0, i32* %i, align 4
  br label %for.cond76

for.cond76:                                       ; preds = %for.inc85, %for.end75
  %36 = load i32, i32* %i, align 4
  %cmp77 = icmp slt i32 %36, 64
  br i1 %cmp77, label %for.body79, label %for.end87

for.body79:                                       ; preds = %for.cond76
  %37 = load i8*, i8** %ep.addr, align 4
  %38 = load i32, i32* %i, align 4
  %arraydecay80 = getelementptr inbounds [8 x i8], [8 x i8]* %e, i32 0, i32 0
  %39 = load i32, i32* %i, align 4
  %arrayidx81 = getelementptr inbounds [64 x i8], [64 x i8]* @IP2, i32 0, i32 %39
  %40 = load i8, i8* %arrayidx81, align 1
  %conv82 = zext i8 %40 to i32
  %sub83 = sub nsw i32 %conv82, 1
  %call84 = call i32 @peekBit(i8* %arraydecay80, i32 %sub83)
  call void @pokeBit(i8* %37, i32 %38, i32 %call84)
  br label %for.inc85

for.inc85:                                        ; preds = %for.body79
  %41 = load i32, i32* %i, align 4
  %inc86 = add nsw i32 %41, 1
  store i32 %inc86, i32* %i, align 4
  br label %for.cond76

for.end87:                                        ; preds = %for.cond76
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @decrypt(%struct.String* noalias sret align 4 %agg.result, i8* %key, i8* %message, i32 %len) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %message.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %ks = alloca [17 x [6 x i8]], align 16
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %padByte = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8* %key, i8** %key.addr, align 4
  store i8* %message, i8** %message.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = bitcast %struct.String* %agg.result to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  %1 = load i8*, i8** %key.addr, align 4
  %arraydecay = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  call void @getSubKeys(i8* %1, [6 x i8]* %arraydecay)
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc12, %entry
  %2 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, 9
  br i1 %cmp, label %for.body, label %for.end14

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %3, 6
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %4
  %5 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx, i32 0, i32 %5
  %6 = load i8, i8* %arrayidx4, align 1
  store i8 %6, i8* %temp, align 1
  %7 = load i32, i32* %i, align 4
  %sub = sub nsw i32 17, %7
  %arrayidx5 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %sub
  %8 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx5, i32 0, i32 %8
  %9 = load i8, i8* %arrayidx6, align 1
  %10 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %10
  %11 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx7, i32 0, i32 %11
  store i8 %9, i8* %arrayidx8, align 1
  %12 = load i8, i8* %temp, align 1
  %13 = load i32, i32* %i, align 4
  %sub9 = sub nsw i32 17, %13
  %arrayidx10 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %sub9
  %14 = load i32, i32* %j, align 4
  %arrayidx11 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx10, i32 0, i32 %14
  store i8 %12, i8* %arrayidx11, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %15 = load i32, i32* %j, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc12

for.inc12:                                        ; preds = %for.end
  %16 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %16, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond

for.end14:                                        ; preds = %for.cond
  %17 = load i32, i32* %len.addr, align 4
  %call = call noalias i8* @malloc(i32 %17)
  %data = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  store i8* %call, i8** %data, align 4
  %data15 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %18 = load i8*, i8** %data15, align 4
  %19 = load i8*, i8** %message.addr, align 4
  %20 = load i32, i32* %len.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %18, i8* align 1 %19, i32 %20, i1 false)
  %21 = load i32, i32* %len.addr, align 4
  %len16 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  store i32 %21, i32* %len16, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond17

for.cond17:                                       ; preds = %for.inc26, %for.end14
  %22 = load i32, i32* %i, align 4
  %len18 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %23 = load i32, i32* %len18, align 4
  %cmp19 = icmp slt i32 %22, %23
  br i1 %cmp19, label %for.body20, label %for.end27

for.body20:                                       ; preds = %for.cond17
  %data21 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %24 = load i8*, i8** %data21, align 4
  %25 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds i8, i8* %24, i32 %25
  %arraydecay23 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  %data24 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %26 = load i8*, i8** %data24, align 4
  %27 = load i32, i32* %i, align 4
  %arrayidx25 = getelementptr inbounds i8, i8* %26, i32 %27
  call void @processMessage(i8* %arrayidx22, [6 x i8]* %arraydecay23, i8* %arrayidx25)
  br label %for.inc26

for.inc26:                                        ; preds = %for.body20
  %28 = load i32, i32* %i, align 4
  %add = add nsw i32 %28, 8
  store i32 %add, i32* %i, align 4
  br label %for.cond17

for.end27:                                        ; preds = %for.cond17
  %data28 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %29 = load i8*, i8** %data28, align 4
  %30 = load i32, i32* %len.addr, align 4
  %sub29 = sub nsw i32 %30, 1
  %arrayidx30 = getelementptr inbounds i8, i8* %29, i32 %sub29
  %31 = load i8, i8* %arrayidx30, align 1
  store i8 %31, i8* %padByte, align 1
  %32 = load i8, i8* %padByte, align 1
  %conv = zext i8 %32 to i32
  %len31 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %33 = load i32, i32* %len31, align 4
  %sub32 = sub nsw i32 %33, %conv
  store i32 %sub32, i32* %len31, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @driver(i8* %key, i8* %message, i32 %len) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %message.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %encoded = alloca %struct.String, align 4
  %decoded = alloca %struct.String, align 4
  %buffer = alloca [128 x i8], align 16
  %tmp = alloca %struct.String, align 4
  %tmp9 = alloca %struct.String, align 4
  store i8* %key, i8** %key.addr, align 4
  store i8* %message, i8** %message.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load i8*, i8** %key.addr, align 4
  %arraydecay = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %0, i32 8, i8* %arraydecay)
  %arraydecay1 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i32 0, i32 0), i8* %arraydecay1)
  %1 = load i8*, i8** %message.addr, align 4
  %2 = load i32, i32* %len.addr, align 4
  %arraydecay2 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %1, i32 %2, i8* %arraydecay2)
  %arraydecay3 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0), i8* %arraydecay3)
  %3 = load i8*, i8** %key.addr, align 4
  %4 = load i8*, i8** %message.addr, align 4
  %5 = load i32, i32* %len.addr, align 4
  call void @encrypt(%struct.String* sret align 4 %tmp, i8* %3, i8* %4, i32 %5)
  %6 = bitcast %struct.String* %encoded to i8*
  %7 = bitcast %struct.String* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %6, i8* align 4 %7, i32 8, i1 false)
  %data = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  %8 = load i8*, i8** %data, align 4
  %len5 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 1
  %9 = load i32, i32* %len5, align 4
  %arraydecay6 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %8, i32 %9, i8* %arraydecay6)
  %arraydecay7 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0), i8* %arraydecay7)
  %10 = load i8*, i8** %key.addr, align 4
  %data10 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  %11 = load i8*, i8** %data10, align 4
  %len11 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 1
  %12 = load i32, i32* %len11, align 4
  call void @decrypt(%struct.String* sret align 4 %tmp9, i8* %10, i8* %11, i32 %12)
  %13 = bitcast %struct.String* %decoded to i8*
  %14 = bitcast %struct.String* %tmp9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %13, i8* align 4 %14, i32 8, i1 false)
  %data12 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 0
  %15 = load i8*, i8** %data12, align 4
  %len13 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 1
  %16 = load i32, i32* %len13, align 4
  %arraydecay14 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %15, i32 %16, i8* %arraydecay14)
  %arraydecay15 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0), i8* %arraydecay15)
  %len17 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 1
  %17 = load i32, i32* %len17, align 4
  %cmp = icmp sgt i32 %17, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %data18 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  %18 = load i8*, i8** %data18, align 4
  call void @free(i8* %18)
  %data19 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  store i8* null, i8** %data19, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %len20 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 1
  %19 = load i32, i32* %len20, align 4
  %cmp21 = icmp sgt i32 %19, 0
  br i1 %cmp21, label %if.then22, label %if.end25

if.then22:                                        ; preds = %if.end
  %data23 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 0
  %20 = load i8*, i8** %data23, align 4
  call void @free(i8* %20)
  %data24 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 0
  store i8* null, i8** %data24, align 4
  br label %if.end25

if.end25:                                         ; preds = %if.then22, %if.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @printBytes(i8* %ptr, i32 %len, i8* %out) #0 {
entry:
  %ptr.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  store i8* %ptr, i8** %ptr.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %len.addr, align 4
  %dec = add nsw i32 %0, -1
  store i32 %dec, i32* %len.addr, align 4
  %cmp = icmp sgt i32 %0, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i8*, i8** %ptr.addr, align 4
  %2 = load i8, i8* %1, align 1
  %conv = zext i8 %2 to i32
  %shr = ashr i32 %conv, 4
  %conv1 = trunc i32 %shr to i8
  %call = call signext i8 @toHex(i8 zeroext %conv1)
  %3 = load i8*, i8** %out.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %3, i32 1
  store i8* %incdec.ptr, i8** %out.addr, align 4
  store i8 %call, i8* %3, align 1
  %4 = load i8*, i8** %ptr.addr, align 4
  %5 = load i8, i8* %4, align 1
  %conv2 = zext i8 %5 to i32
  %and = and i32 %conv2, 15
  %conv3 = trunc i32 %and to i8
  %call4 = call signext i8 @toHex(i8 zeroext %conv3)
  %6 = load i8*, i8** %out.addr, align 4
  %incdec.ptr5 = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr5, i8** %out.addr, align 4
  store i8 %call4, i8* %6, align 1
  %7 = load i8*, i8** %ptr.addr, align 4
  %incdec.ptr6 = getelementptr inbounds i8, i8* %7, i32 1
  store i8* %incdec.ptr6, i8** %ptr.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %8 = load i8*, i8** %out.addr, align 4
  store i8 0, i8* %8, align 1
  ret void
}

declare i32 @printf(i8* %0, ...) #2

declare void @free(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %keys = alloca [3 x [8 x i8]], align 16
  %message1 = alloca [8 x i8], align 1
  %message2 = alloca [8 x i8], align 1
  %message3 = alloca [38 x i8], align 16
  %len = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [3 x [8 x i8]]* %keys to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([3 x [8 x i8]], [3 x [8 x i8]]* @__const.main.keys, i32 0, i32 0, i32 0), i32 24, i1 false)
  %1 = bitcast [8 x i8]* %message1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %1, i8* align 1 getelementptr inbounds ([8 x i8], [8 x i8]* @__const.main.message1, i32 0, i32 0), i32 8, i1 false)
  %2 = bitcast [8 x i8]* %message2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %2, i8* align 1 getelementptr inbounds ([8 x i8], [8 x i8]* @__const.main.message2, i32 0, i32 0), i32 8, i1 false)
  %3 = bitcast [38 x i8]* %message3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %3, i8* align 16 getelementptr inbounds ([38 x i8], [38 x i8]* @__const.main.message3, i32 0, i32 0), i32 38, i1 false)
  store i32 8, i32* %len, align 4
  %arrayidx = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* %keys, i32 0, i32 0
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %arrayidx, i32 0, i32 0
  %arraydecay1 = getelementptr inbounds [8 x i8], [8 x i8]* %message1, i32 0, i32 0
  %4 = load i32, i32* %len, align 4
  call void @driver(i8* %arraydecay, i8* %arraydecay1, i32 %4)
  store i32 8, i32* %len, align 4
  %arrayidx2 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* %keys, i32 0, i32 1
  %arraydecay3 = getelementptr inbounds [8 x i8], [8 x i8]* %arrayidx2, i32 0, i32 0
  %arraydecay4 = getelementptr inbounds [8 x i8], [8 x i8]* %message2, i32 0, i32 0
  %5 = load i32, i32* %len, align 4
  call void @driver(i8* %arraydecay3, i8* %arraydecay4, i32 %5)
  store i32 38, i32* %len, align 4
  %arrayidx5 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* %keys, i32 0, i32 2
  %arraydecay6 = getelementptr inbounds [8 x i8], [8 x i8]* %arrayidx5, i32 0, i32 0
  %arraydecay7 = getelementptr inbounds [38 x i8], [38 x i8]* %message3, i32 0, i32 0
  %6 = load i32, i32* %len, align 4
  call void @driver(i8* %arraydecay6, i8* %arraydecay7, i32 %6)
  ret i32 0
}

; Function Attrs: noinline nounwind optnone
define internal void @pokeBit(i8* %dst, i32 %index, i32 %value) #0 {
entry:
  %dst.addr = alloca i8*, align 4
  %index.addr = alloca i32, align 4
  %value.addr = alloca i32, align 4
  %cell = alloca i32, align 4
  %bit = alloca i32, align 4
  store i8* %dst, i8** %dst.addr, align 4
  store i32 %index, i32* %index.addr, align 4
  store i32 %value, i32* %value.addr, align 4
  %0 = load i32, i32* %index.addr, align 4
  %div = sdiv i32 %0, 8
  store i32 %div, i32* %cell, align 4
  %1 = load i32, i32* %index.addr, align 4
  %rem = srem i32 %1, 8
  %sub = sub nsw i32 7, %rem
  store i32 %sub, i32* %bit, align 4
  %2 = load i32, i32* %value.addr, align 4
  %cmp = icmp eq i32 %2, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %bit, align 4
  %shl = shl i32 1, %3
  %neg = xor i32 %shl, -1
  %4 = load i8*, i8** %dst.addr, align 4
  %5 = load i32, i32* %cell, align 4
  %arrayidx = getelementptr inbounds i8, i8* %4, i32 %5
  %6 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %6 to i32
  %and = and i32 %conv, %neg
  %conv1 = trunc i32 %and to i8
  store i8 %conv1, i8* %arrayidx, align 1
  br label %if.end

if.else:                                          ; preds = %entry
  %7 = load i32, i32* %bit, align 4
  %shl2 = shl i32 1, %7
  %8 = load i8*, i8** %dst.addr, align 4
  %9 = load i32, i32* %cell, align 4
  %arrayidx3 = getelementptr inbounds i8, i8* %8, i32 %9
  %10 = load i8, i8* %arrayidx3, align 1
  %conv4 = zext i8 %10 to i32
  %or = or i32 %conv4, %shl2
  %conv5 = trunc i32 %or to i8
  store i8 %conv5, i8* %arrayidx3, align 1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i32 @peekBit(i8* %src, i32 %index) #0 {
entry:
  %src.addr = alloca i8*, align 4
  %index.addr = alloca i32, align 4
  %cell = alloca i32, align 4
  %bit = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 4
  store i32 %index, i32* %index.addr, align 4
  %0 = load i32, i32* %index.addr, align 4
  %div = sdiv i32 %0, 8
  store i32 %div, i32* %cell, align 4
  %1 = load i32, i32* %index.addr, align 4
  %rem = srem i32 %1, 8
  %sub = sub nsw i32 7, %rem
  store i32 %sub, i32* %bit, align 4
  %2 = load i8*, i8** %src.addr, align 4
  %3 = load i32, i32* %cell, align 4
  %arrayidx = getelementptr inbounds i8, i8* %2, i32 %3
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %5 = load i32, i32* %bit, align 4
  %shl = shl i32 1, %5
  %and = and i32 %conv, %shl
  %cmp = icmp ne i32 %and, 0
  %conv1 = zext i1 %cmp to i32
  ret i32 %conv1
}

; Function Attrs: noinline nounwind optnone
define internal void @shiftLeft(i8* %src, i32 %len, i32 %times, i8* %dst) #0 {
entry:
  %src.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %times.addr = alloca i32, align 4
  %dst.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %t = alloca i32, align 4
  %temp = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %times, i32* %times.addr, align 4
  store i8* %dst, i8** %dst.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp sle i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8*, i8** %dst.addr, align 4
  %3 = load i32, i32* %i, align 4
  %4 = load i8*, i8** %src.addr, align 4
  %5 = load i32, i32* %i, align 4
  %call = call i32 @peekBit(i8* %4, i32 %5)
  call void @pokeBit(i8* %2, i32 %3, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %t, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc13, %for.end
  %7 = load i32, i32* %t, align 4
  %8 = load i32, i32* %times.addr, align 4
  %cmp2 = icmp sle i32 %7, %8
  br i1 %cmp2, label %for.body3, label %for.end15

for.body3:                                        ; preds = %for.cond1
  %9 = load i8*, i8** %dst.addr, align 4
  %call4 = call i32 @peekBit(i8* %9, i32 0)
  store i32 %call4, i32* %temp, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc9, %for.body3
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %len.addr, align 4
  %cmp6 = icmp sle i32 %10, %11
  br i1 %cmp6, label %for.body7, label %for.end11

for.body7:                                        ; preds = %for.cond5
  %12 = load i8*, i8** %dst.addr, align 4
  %13 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %13, 1
  %14 = load i8*, i8** %dst.addr, align 4
  %15 = load i32, i32* %i, align 4
  %call8 = call i32 @peekBit(i8* %14, i32 %15)
  call void @pokeBit(i8* %12, i32 %sub, i32 %call8)
  br label %for.inc9

for.inc9:                                         ; preds = %for.body7
  %16 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %16, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond5

for.end11:                                        ; preds = %for.cond5
  %17 = load i8*, i8** %dst.addr, align 4
  %18 = load i32, i32* %len.addr, align 4
  %sub12 = sub nsw i32 %18, 1
  %19 = load i32, i32* %temp, align 4
  call void @pokeBit(i8* %17, i32 %sub12, i32 %19)
  br label %for.inc13

for.inc13:                                        ; preds = %for.end11
  %20 = load i32, i32* %t, align 4
  %inc14 = add nsw i32 %20, 1
  store i32 %inc14, i32* %t, align 4
  br label %for.cond1

for.end15:                                        ; preds = %for.cond1
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @f(i8* %r, i8* %ks, i8* %sp) #0 {
entry:
  %r.addr = alloca i8*, align 4
  %ks.addr = alloca i8*, align 4
  %sp.addr = alloca i8*, align 4
  %er = alloca [6 x i8], align 1
  %sr = alloca [4 x i8], align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %b = alloca [6 x i32], align 16
  %k = alloca i32, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %m = alloca i32, align 4
  %n = alloca i32, align 4
  %p = alloca i32, align 4
  store i8* %r, i8** %r.addr, align 4
  store i8* %ks, i8** %ks.addr, align 4
  store i8* %sp, i8** %sp.addr, align 4
  %arraydecay = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  call void @llvm.memset.p0i8.i32(i8* align 1 %arraydecay, i8 0, i32 6, i1 false)
  %arraydecay1 = getelementptr inbounds [4 x i8], [4 x i8]* %sr, i32 0, i32 0
  call void @llvm.memset.p0i8.i32(i8* align 1 %arraydecay1, i8 0, i32 4, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 48
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay2 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  %1 = load i32, i32* %i, align 4
  %2 = load i8*, i8** %r.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [48 x i8], [48 x i8]* @E, i32 0, i32 %3
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %sub = sub nsw i32 %conv, 1
  %call = call i32 @peekBit(i8* %2, i32 %sub)
  call void @pokeBit(i8* %arraydecay2, i32 %1, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc12, %for.end
  %6 = load i32, i32* %i, align 4
  %cmp4 = icmp slt i32 %6, 6
  br i1 %cmp4, label %for.body6, label %for.end14

for.body6:                                        ; preds = %for.cond3
  %7 = load i8*, i8** %ks.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds i8, i8* %7, i32 %8
  %9 = load i8, i8* %arrayidx7, align 1
  %conv8 = zext i8 %9 to i32
  %10 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 %10
  %11 = load i8, i8* %arrayidx9, align 1
  %conv10 = zext i8 %11 to i32
  %xor = xor i32 %conv10, %conv8
  %conv11 = trunc i32 %xor to i8
  store i8 %conv11, i8* %arrayidx9, align 1
  br label %for.inc12

for.inc12:                                        ; preds = %for.body6
  %12 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %12, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond3

for.end14:                                        ; preds = %for.cond3
  store i32 0, i32* %i, align 4
  br label %for.cond15

for.cond15:                                       ; preds = %for.inc59, %for.end14
  %13 = load i32, i32* %i, align 4
  %cmp16 = icmp slt i32 %13, 8
  br i1 %cmp16, label %for.body18, label %for.end61

for.body18:                                       ; preds = %for.cond15
  %14 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %14, 6
  store i32 %mul, i32* %j, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond19

for.cond19:                                       ; preds = %for.inc28, %for.body18
  %15 = load i32, i32* %k, align 4
  %cmp20 = icmp slt i32 %15, 6
  br i1 %cmp20, label %for.body22, label %for.end30

for.body22:                                       ; preds = %for.cond19
  %arraydecay23 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  %16 = load i32, i32* %j, align 4
  %17 = load i32, i32* %k, align 4
  %add = add nsw i32 %16, %17
  %call24 = call i32 @peekBit(i8* %arraydecay23, i32 %add)
  %cmp25 = icmp ne i32 %call24, 0
  %18 = zext i1 %cmp25 to i64
  %cond = select i1 %cmp25, i32 1, i32 0
  %19 = load i32, i32* %k, align 4
  %arrayidx27 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 %19
  store i32 %cond, i32* %arrayidx27, align 4
  br label %for.inc28

for.inc28:                                        ; preds = %for.body22
  %20 = load i32, i32* %k, align 4
  %inc29 = add nsw i32 %20, 1
  store i32 %inc29, i32* %k, align 4
  br label %for.cond19

for.end30:                                        ; preds = %for.cond19
  %arrayidx31 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 0
  %21 = load i32, i32* %arrayidx31, align 16
  %mul32 = mul nsw i32 2, %21
  %arrayidx33 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 5
  %22 = load i32, i32* %arrayidx33, align 4
  %add34 = add nsw i32 %mul32, %22
  store i32 %add34, i32* %row, align 4
  %arrayidx35 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 1
  %23 = load i32, i32* %arrayidx35, align 4
  %mul36 = mul nsw i32 8, %23
  %arrayidx37 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 2
  %24 = load i32, i32* %arrayidx37, align 8
  %mul38 = mul nsw i32 4, %24
  %add39 = add nsw i32 %mul36, %mul38
  %arrayidx40 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 3
  %25 = load i32, i32* %arrayidx40, align 4
  %mul41 = mul nsw i32 2, %25
  %add42 = add nsw i32 %add39, %mul41
  %arrayidx43 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 4
  %26 = load i32, i32* %arrayidx43, align 16
  %add44 = add nsw i32 %add42, %26
  store i32 %add44, i32* %col, align 4
  %27 = load i32, i32* %i, align 4
  %arrayidx45 = getelementptr inbounds [8 x [64 x i8]], [8 x [64 x i8]]* @S, i32 0, i32 %27
  %28 = load i32, i32* %row, align 4
  %mul46 = mul nsw i32 %28, 16
  %29 = load i32, i32* %col, align 4
  %add47 = add nsw i32 %mul46, %29
  %arrayidx48 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx45, i32 0, i32 %add47
  %30 = load i8, i8* %arrayidx48, align 1
  %conv49 = zext i8 %30 to i32
  store i32 %conv49, i32* %m, align 4
  store i32 1, i32* %n, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end30
  %31 = load i32, i32* %m, align 4
  %cmp50 = icmp sgt i32 %31, 0
  br i1 %cmp50, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %32 = load i32, i32* %m, align 4
  %rem = srem i32 %32, 2
  store i32 %rem, i32* %p, align 4
  %arraydecay52 = getelementptr inbounds [4 x i8], [4 x i8]* %sr, i32 0, i32 0
  %33 = load i32, i32* %i, align 4
  %add53 = add nsw i32 %33, 1
  %mul54 = mul nsw i32 %add53, 4
  %34 = load i32, i32* %n, align 4
  %sub55 = sub nsw i32 %mul54, %34
  %35 = load i32, i32* %p, align 4
  %cmp56 = icmp eq i32 %35, 1
  %conv57 = zext i1 %cmp56 to i32
  call void @pokeBit(i8* %arraydecay52, i32 %sub55, i32 %conv57)
  %36 = load i32, i32* %m, align 4
  %div = sdiv i32 %36, 2
  store i32 %div, i32* %m, align 4
  %37 = load i32, i32* %n, align 4
  %inc58 = add nsw i32 %37, 1
  store i32 %inc58, i32* %n, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %for.inc59

for.inc59:                                        ; preds = %while.end
  %38 = load i32, i32* %i, align 4
  %inc60 = add nsw i32 %38, 1
  store i32 %inc60, i32* %i, align 4
  br label %for.cond15

for.end61:                                        ; preds = %for.cond15
  store i32 0, i32* %i, align 4
  br label %for.cond62

for.cond62:                                       ; preds = %for.inc71, %for.end61
  %39 = load i32, i32* %i, align 4
  %cmp63 = icmp slt i32 %39, 32
  br i1 %cmp63, label %for.body65, label %for.end73

for.body65:                                       ; preds = %for.cond62
  %40 = load i8*, i8** %sp.addr, align 4
  %41 = load i32, i32* %i, align 4
  %arraydecay66 = getelementptr inbounds [4 x i8], [4 x i8]* %sr, i32 0, i32 0
  %42 = load i32, i32* %i, align 4
  %arrayidx67 = getelementptr inbounds [32 x i8], [32 x i8]* @P, i32 0, i32 %42
  %43 = load i8, i8* %arrayidx67, align 1
  %conv68 = zext i8 %43 to i32
  %sub69 = sub nsw i32 %conv68, 1
  %call70 = call i32 @peekBit(i8* %arraydecay66, i32 %sub69)
  call void @pokeBit(i8* %40, i32 %41, i32 %call70)
  br label %for.inc71

for.inc71:                                        ; preds = %for.body65
  %44 = load i32, i32* %i, align 4
  %inc72 = add nsw i32 %44, 1
  store i32 %inc72, i32* %i, align 4
  br label %for.cond62

for.end73:                                        ; preds = %for.cond62
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal signext i8 @toHex(i8 zeroext %in) #0 {
entry:
  %retval = alloca i8, align 1
  %in.addr = alloca i8, align 1
  store i8 %in, i8* %in.addr, align 1
  %0 = load i8, i8* %in.addr, align 1
  %conv = zext i8 %0 to i32
  %cmp = icmp sle i32 0, %conv
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i8, i8* %in.addr, align 1
  %conv2 = zext i8 %1 to i32
  %cmp3 = icmp slt i32 %conv2, 10
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %2 = load i8, i8* %in.addr, align 1
  %conv5 = zext i8 %2 to i32
  %add = add nsw i32 48, %conv5
  %conv6 = trunc i32 %add to i8
  store i8 %conv6, i8* %retval, align 1
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %3 = load i8, i8* %in.addr, align 1
  %conv7 = zext i8 %3 to i32
  %cmp8 = icmp sle i32 10, %conv7
  br i1 %cmp8, label %land.lhs.true10, label %if.end18

land.lhs.true10:                                  ; preds = %if.end
  %4 = load i8, i8* %in.addr, align 1
  %conv11 = zext i8 %4 to i32
  %cmp12 = icmp sle i32 %conv11, 15
  br i1 %cmp12, label %if.then14, label %if.end18

if.then14:                                        ; preds = %land.lhs.true10
  %5 = load i8, i8* %in.addr, align 1
  %conv15 = zext i8 %5 to i32
  %add16 = add nsw i32 65, %conv15
  %sub = sub nsw i32 %add16, 10
  %conv17 = trunc i32 %sub to i8
  store i8 %conv17, i8* %retval, align 1
  br label %return

if.end18:                                         ; preds = %land.lhs.true10, %if.end
  store i8 0, i8* %retval, align 1
  br label %return

return:                                           ; preds = %if.end18, %if.then14, %if.then
  %6 = load i8, i8* %retval, align 1
  ret i8 %6
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %4, 56
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 56:i32
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i8, i8* %arrayidx, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = zext i8 %8 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %conv, 1
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
%2:i32 = subnsw %1, 1:i32
infer %2

; *****
; For LLVM instruction:
;  %call = call i32 @peekBit(i8* %6, i32 %sub)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %9, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp4 = icmp slt i32 %10, 28
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 28:i32
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call10 = call i32 @peekBit(i8* %arraydecay9, i32 %12)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %14, 28
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 28:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call14 = call i32 @peekBit(i8* %arraydecay13, i32 %add)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc16 = add nsw i32 %15, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp19 = icmp slt i32 %16, 17
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 17:i32
infer %1

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub22 = sub nsw i32 %17, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub25 = sub nsw i32 %18, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %19 = load i8, i8* %arrayidx26, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv27 = zext i8 %19 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub30 = sub nsw i32 %21, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub33 = sub nsw i32 %22, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %23 = load i8, i8* %arrayidx34, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv35 = zext i8 %23 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc39 = add nsw i32 %25, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp42 = icmp slt i32 %26, 17
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 17:i32
infer %1

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp46 = icmp slt i32 %27, 56
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 56:i32
infer %1

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub53 = sub nsw i32 %31, 28
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 28:i32
infer %1

; *****
; For LLVM instruction:
;  %call54 = call i32 @peekBit(i8* %arraydecay52, i32 %sub53)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc56 = add nsw i32 %32, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc59 = add nsw i32 %33, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp62 = icmp slt i32 %34, 17
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 17:i32
infer %1

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp66 = icmp slt i32 %35, 48
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 48:i32
infer %1

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %38 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %40 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %41 = load i8, i8* %arrayidx73, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv74 = zext i8 %41 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %sub75 = sub nsw i32 %conv74, 1
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
%2:i32 = subnsw %1, 1:i32
infer %2

; *****
; For LLVM instruction:
;  %call76 = call i32 @peekBit(i8* %arraydecay72, i32 %sub75)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %42 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc78 = add nsw i32 %42, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %43 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc81 = add nsw i32 %43, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 56:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = zext %0
%2:i32 = subnsw %1, 1:i32
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 63
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = zext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 28:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 28:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 28
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 29
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 17:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 28:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -28
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 48:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for ./Data_Encryption_Standard.c.bc:getSubKeys()

; entering Souper's runOnFunction() for ./Data_Encryption_Standard.c.bc:processMessage()

; ModuleID = './Data_Encryption_Standard.c.bc'
source_filename = "./Data_Encryption_Standard.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.String = type { i8*, i32 }

@.str = private unnamed_addr constant [14 x i8] c"Key     : %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"Message : %s\0A\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"Encoded : %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"Decoded : %s\0A\0A\00", align 1
@__const.main.keys = private unnamed_addr constant [3 x [8 x i8]] [[8 x i8] c"\134Wy\9B\BC\DF\F1", [8 x i8] c"\0E2\922\EAm\0Ds", [8 x i8] c"\0E2\922\EAm\0Ds"], align 16
@__const.main.message1 = private unnamed_addr constant [8 x i8] c"\01#Eg\89\AB\CD\EF", align 1
@__const.main.message2 = private unnamed_addr constant [8 x i8] c"\87\87\87\87\87\87\87\87", align 1
@__const.main.message3 = private unnamed_addr constant [38 x i8] c"Your lips are smoother than vaseline\0D\0A", align 16
@PC1 = internal constant [56 x i8] c"91)!\19\11\09\01:2*\22\1A\12\0A\02;3+#\1B\13\0B\03<4,$?7/'\1F\17\0F\07>6.&\1E\16\0E\06=5-%\1D\15\0D\05\1C\14\0C\04", align 16
@SHIFTS = internal constant [16 x i8] c"\01\01\02\02\02\02\02\02\01\02\02\02\02\02\02\01", align 16
@PC2 = internal constant [48 x i8] c"\0E\11\0B\18\01\05\03\1C\0F\06\15\0A\17\13\0C\04\1A\08\10\07\1B\14\0D\02)4\1F%/7\1E(3-!0,1'8\225.*2$\1D ", align 16
@IP = internal constant [64 x i8] c":2*\22\1A\12\0A\02<4,$\1C\14\0C\04>6.&\1E\16\0E\06@80( \18\10\0891)!\19\11\09\01;3+#\1B\13\0B\03=5-%\1D\15\0D\05?7/'\1F\17\0F\07", align 16
@IP2 = internal constant [64 x i8] c"(\080\108\18@ '\07/\0F7\17?\1F&\06.\0E6\16>\1E%\05-\0D5\15=\1D$\04,\0C4\14<\1C#\03+\0B3\13;\1B\22\02*\0A2\12:\1A!\01)\091\119\19", align 16
@E = internal constant [48 x i8] c" \01\02\03\04\05\04\05\06\07\08\09\08\09\0A\0B\0C\0D\0C\0D\0E\0F\10\11\10\11\12\13\14\15\14\15\16\17\18\19\18\19\1A\1B\1C\1D\1C\1D\1E\1F \01", align 16
@S = internal constant [8 x [64 x i8]] [[64 x i8] c"\0E\04\0D\01\02\0F\0B\08\03\0A\06\0C\05\09\00\07\00\0F\07\04\0E\02\0D\01\0A\06\0C\0B\09\05\03\08\04\01\0E\08\0D\06\02\0B\0F\0C\09\07\03\0A\05\00\0F\0C\08\02\04\09\01\07\05\0B\03\0E\0A\00\06\0D", [64 x i8] c"\0F\01\08\0E\06\0B\03\04\09\07\02\0D\0C\00\05\0A\03\0D\04\07\0F\02\08\0E\0C\00\01\0A\06\09\0B\05\00\0E\07\0B\0A\04\0D\01\05\08\0C\06\09\03\02\0F\0D\08\0A\01\03\0F\04\02\0B\06\07\0C\00\05\0E\09", [64 x i8] c"\0A\00\09\0E\06\03\0F\05\01\0D\0C\07\0B\04\02\08\0D\07\00\09\03\04\06\0A\02\08\05\0E\0C\0B\0F\01\0D\06\04\09\08\0F\03\00\0B\01\02\0C\05\0A\0E\07\01\0A\0D\00\06\09\08\07\04\0F\0E\03\0B\05\02\0C", [64 x i8] c"\07\0D\0E\03\00\06\09\0A\01\02\08\05\0B\0C\04\0F\0D\08\0B\05\06\0F\00\03\04\07\02\0C\01\0A\0E\09\0A\06\09\00\0C\0B\07\0D\0F\01\03\0E\05\02\08\04\03\0F\00\06\0A\01\0D\08\09\04\05\0B\0C\07\02\0E", [64 x i8] c"\02\0C\04\01\07\0A\0B\06\08\05\03\0F\0D\00\0E\09\0E\0B\02\0C\04\07\0D\01\05\00\0F\0A\03\09\08\06\04\02\01\0B\0A\0D\07\08\0F\09\0C\05\06\03\00\0E\0B\08\0C\07\01\0E\02\0D\06\0F\00\09\0A\04\05\03", [64 x i8] c"\0C\01\0A\0F\09\02\06\08\00\0D\03\04\0E\07\05\0B\0A\0F\04\02\07\0C\09\05\06\01\0D\0E\00\0B\03\08\09\0E\0F\05\02\08\0C\03\07\00\04\0A\01\0D\0B\06\04\03\02\0C\09\05\0F\0A\0B\0E\01\07\06\00\08\0D", [64 x i8] c"\04\0B\02\0E\0F\00\08\0D\03\0C\09\07\05\0A\06\01\0D\00\0B\07\04\09\01\0A\0E\03\05\0C\02\0F\08\06\01\04\0B\0D\0C\03\07\0E\0A\0F\06\08\00\05\09\02\06\0B\0D\08\01\04\0A\07\09\05\00\0F\0E\02\03\0C", [64 x i8] c"\0D\02\08\04\06\0F\0B\01\0A\09\03\0E\05\00\0C\07\01\0F\0D\08\0A\03\07\04\0C\05\06\0B\00\0E\09\02\07\0B\04\01\09\0C\0E\02\00\06\0A\0D\0F\03\05\08\02\01\0E\07\04\0A\08\0D\0F\0C\09\00\03\05\06\0B"], align 16
@P = internal constant [32 x i8] c"\10\07\14\15\1D\0C\1C\11\01\0F\17\1A\05\12\1F\0A\02\08\18\0E \1B\03\09\13\0D\1E\06\16\0B\04\19", align 16
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @encrypt(%struct.String* noalias sret align 4 %agg.result, i8* %key, i8* %message, i32 %len) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %message.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %ks = alloca [17 x [6 x i8]], align 16
  %padByte = alloca i8, align 1
  %i = alloca i32, align 4
  store i8* %key, i8** %key.addr, align 4
  store i8* %message, i8** %message.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = bitcast %struct.String* %agg.result to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  %1 = load i8*, i8** %key.addr, align 4
  %arraydecay = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  call void @getSubKeys(i8* %1, [6 x i8]* %arraydecay)
  %2 = load i32, i32* %len.addr, align 4
  %rem = srem i32 %2, 8
  %sub = sub nsw i32 8, %rem
  %conv = trunc i32 %sub to i8
  store i8 %conv, i8* %padByte, align 1
  %3 = load i32, i32* %len.addr, align 4
  %4 = load i8, i8* %padByte, align 1
  %conv1 = zext i8 %4 to i32
  %add = add nsw i32 %3, %conv1
  %len2 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  store i32 %add, i32* %len2, align 4
  %len3 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %5 = load i32, i32* %len3, align 4
  %call = call noalias i8* @malloc(i32 %5)
  %data = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  store i8* %call, i8** %data, align 4
  %data4 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %6 = load i8*, i8** %data4, align 4
  %7 = load i8*, i8** %message.addr, align 4
  %8 = load i32, i32* %len.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %6, i8* align 1 %7, i32 %8, i1 false)
  %data5 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %9 = load i8*, i8** %data5, align 4
  %10 = load i32, i32* %len.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %9, i32 %10
  %11 = load i8, i8* %padByte, align 1
  %12 = load i8, i8* %padByte, align 1
  %conv7 = zext i8 %12 to i32
  call void @llvm.memset.p0i8.i32(i8* align 1 %arrayidx, i8 %11, i32 %conv7, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %13 = load i32, i32* %i, align 4
  %len8 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %14 = load i32, i32* %len8, align 4
  %cmp = icmp slt i32 %13, %14
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %data10 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %15 = load i8*, i8** %data10, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds i8, i8* %15, i32 %16
  %arraydecay12 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  %data13 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %17 = load i8*, i8** %data13, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds i8, i8* %17, i32 %18
  call void @processMessage(i8* %arrayidx11, [6 x i8]* %arraydecay12, i8* %arrayidx14)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %19 = load i32, i32* %i, align 4
  %add15 = add nsw i32 %19, 8
  store i32 %add15, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define internal void @getSubKeys(i8* %key, [6 x i8]* %ks) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %ks.addr = alloca [6 x i8]*, align 4
  %c = alloca [17 x [7 x i8]], align 16
  %d = alloca [17 x [4 x i8]], align 16
  %kp = alloca [7 x i8], align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i8* %key, i8** %key.addr, align 4
  store [6 x i8]* %ks, [6 x i8]** %ks.addr, align 4
  %arraydecay = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 0
  %0 = bitcast [7 x i8]* %arraydecay to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 119, i1 false)
  %arraydecay1 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 0
  %1 = bitcast [4 x i8]* %arraydecay1 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %1, i8 0, i32 68, i1 false)
  %2 = load [6 x i8]*, [6 x i8]** %ks.addr, align 4
  %3 = bitcast [6 x i8]* %2 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 1 %3, i8 0, i32 102, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %4, 56
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay2 = getelementptr inbounds [7 x i8], [7 x i8]* %kp, i32 0, i32 0
  %5 = load i32, i32* %i, align 4
  %6 = load i8*, i8** %key.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [56 x i8], [56 x i8]* @PC1, i32 0, i32 %7
  %8 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %8 to i32
  %sub = sub nsw i32 %conv, 1
  %call = call i32 @peekBit(i8* %6, i32 %sub)
  call void @pokeBit(i8* %arraydecay2, i32 %5, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc15, %for.end
  %10 = load i32, i32* %i, align 4
  %cmp4 = icmp slt i32 %10, 28
  br i1 %cmp4, label %for.body6, label %for.end17

for.body6:                                        ; preds = %for.cond3
  %arrayidx7 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 0
  %arraydecay8 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx7, i32 0, i32 0
  %11 = load i32, i32* %i, align 4
  %arraydecay9 = getelementptr inbounds [7 x i8], [7 x i8]* %kp, i32 0, i32 0
  %12 = load i32, i32* %i, align 4
  %call10 = call i32 @peekBit(i8* %arraydecay9, i32 %12)
  call void @pokeBit(i8* %arraydecay8, i32 %11, i32 %call10)
  %arrayidx11 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 0
  %arraydecay12 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx11, i32 0, i32 0
  %13 = load i32, i32* %i, align 4
  %arraydecay13 = getelementptr inbounds [7 x i8], [7 x i8]* %kp, i32 0, i32 0
  %14 = load i32, i32* %i, align 4
  %add = add nsw i32 %14, 28
  %call14 = call i32 @peekBit(i8* %arraydecay13, i32 %add)
  call void @pokeBit(i8* %arraydecay12, i32 %13, i32 %call14)
  br label %for.inc15

for.inc15:                                        ; preds = %for.body6
  %15 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %15, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond3

for.end17:                                        ; preds = %for.cond3
  store i32 1, i32* %i, align 4
  br label %for.cond18

for.cond18:                                       ; preds = %for.inc38, %for.end17
  %16 = load i32, i32* %i, align 4
  %cmp19 = icmp slt i32 %16, 17
  br i1 %cmp19, label %for.body21, label %for.end40

for.body21:                                       ; preds = %for.cond18
  %17 = load i32, i32* %i, align 4
  %sub22 = sub nsw i32 %17, 1
  %arrayidx23 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %sub22
  %arraydecay24 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx23, i32 0, i32 0
  %18 = load i32, i32* %i, align 4
  %sub25 = sub nsw i32 %18, 1
  %arrayidx26 = getelementptr inbounds [16 x i8], [16 x i8]* @SHIFTS, i32 0, i32 %sub25
  %19 = load i8, i8* %arrayidx26, align 1
  %conv27 = zext i8 %19 to i32
  %20 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %20
  %arraydecay29 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx28, i32 0, i32 0
  call void @shiftLeft(i8* %arraydecay24, i32 28, i32 %conv27, i8* %arraydecay29)
  %21 = load i32, i32* %i, align 4
  %sub30 = sub nsw i32 %21, 1
  %arrayidx31 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 %sub30
  %arraydecay32 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx31, i32 0, i32 0
  %22 = load i32, i32* %i, align 4
  %sub33 = sub nsw i32 %22, 1
  %arrayidx34 = getelementptr inbounds [16 x i8], [16 x i8]* @SHIFTS, i32 0, i32 %sub33
  %23 = load i8, i8* %arrayidx34, align 1
  %conv35 = zext i8 %23 to i32
  %24 = load i32, i32* %i, align 4
  %arrayidx36 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 %24
  %arraydecay37 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx36, i32 0, i32 0
  call void @shiftLeft(i8* %arraydecay32, i32 28, i32 %conv35, i8* %arraydecay37)
  br label %for.inc38

for.inc38:                                        ; preds = %for.body21
  %25 = load i32, i32* %i, align 4
  %inc39 = add nsw i32 %25, 1
  store i32 %inc39, i32* %i, align 4
  br label %for.cond18

for.end40:                                        ; preds = %for.cond18
  store i32 1, i32* %i, align 4
  br label %for.cond41

for.cond41:                                       ; preds = %for.inc58, %for.end40
  %26 = load i32, i32* %i, align 4
  %cmp42 = icmp slt i32 %26, 17
  br i1 %cmp42, label %for.body44, label %for.end60

for.body44:                                       ; preds = %for.cond41
  store i32 28, i32* %j, align 4
  br label %for.cond45

for.cond45:                                       ; preds = %for.inc55, %for.body44
  %27 = load i32, i32* %j, align 4
  %cmp46 = icmp slt i32 %27, 56
  br i1 %cmp46, label %for.body48, label %for.end57

for.body48:                                       ; preds = %for.cond45
  %28 = load i32, i32* %i, align 4
  %arrayidx49 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %28
  %arraydecay50 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx49, i32 0, i32 0
  %29 = load i32, i32* %j, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx51 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 %30
  %arraydecay52 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx51, i32 0, i32 0
  %31 = load i32, i32* %j, align 4
  %sub53 = sub nsw i32 %31, 28
  %call54 = call i32 @peekBit(i8* %arraydecay52, i32 %sub53)
  call void @pokeBit(i8* %arraydecay50, i32 %29, i32 %call54)
  br label %for.inc55

for.inc55:                                        ; preds = %for.body48
  %32 = load i32, i32* %j, align 4
  %inc56 = add nsw i32 %32, 1
  store i32 %inc56, i32* %j, align 4
  br label %for.cond45

for.end57:                                        ; preds = %for.cond45
  br label %for.inc58

for.inc58:                                        ; preds = %for.end57
  %33 = load i32, i32* %i, align 4
  %inc59 = add nsw i32 %33, 1
  store i32 %inc59, i32* %i, align 4
  br label %for.cond41

for.end60:                                        ; preds = %for.cond41
  store i32 1, i32* %i, align 4
  br label %for.cond61

for.cond61:                                       ; preds = %for.inc80, %for.end60
  %34 = load i32, i32* %i, align 4
  %cmp62 = icmp slt i32 %34, 17
  br i1 %cmp62, label %for.body64, label %for.end82

for.body64:                                       ; preds = %for.cond61
  store i32 0, i32* %j, align 4
  br label %for.cond65

for.cond65:                                       ; preds = %for.inc77, %for.body64
  %35 = load i32, i32* %j, align 4
  %cmp66 = icmp slt i32 %35, 48
  br i1 %cmp66, label %for.body68, label %for.end79

for.body68:                                       ; preds = %for.cond65
  %36 = load [6 x i8]*, [6 x i8]** %ks.addr, align 4
  %37 = load i32, i32* %i, align 4
  %arrayidx69 = getelementptr inbounds [6 x i8], [6 x i8]* %36, i32 %37
  %arraydecay70 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx69, i32 0, i32 0
  %38 = load i32, i32* %j, align 4
  %39 = load i32, i32* %i, align 4
  %arrayidx71 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %39
  %arraydecay72 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx71, i32 0, i32 0
  %40 = load i32, i32* %j, align 4
  %arrayidx73 = getelementptr inbounds [48 x i8], [48 x i8]* @PC2, i32 0, i32 %40
  %41 = load i8, i8* %arrayidx73, align 1
  %conv74 = zext i8 %41 to i32
  %sub75 = sub nsw i32 %conv74, 1
  %call76 = call i32 @peekBit(i8* %arraydecay72, i32 %sub75)
  call void @pokeBit(i8* %arraydecay70, i32 %38, i32 %call76)
  br label %for.inc77

for.inc77:                                        ; preds = %for.body68
  %42 = load i32, i32* %j, align 4
  %inc78 = add nsw i32 %42, 1
  store i32 %inc78, i32* %j, align 4
  br label %for.cond65

for.end79:                                        ; preds = %for.cond65
  br label %for.inc80

for.inc80:                                        ; preds = %for.end79
  %43 = load i32, i32* %i, align 4
  %inc81 = add nsw i32 %43, 1
  store i32 %inc81, i32* %i, align 4
  br label %for.cond61

for.end82:                                        ; preds = %for.cond61
  ret void
}

declare noalias i8* @malloc(i32 %0) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: noinline nounwind optnone
define internal void @processMessage(i8* %message, [6 x i8]* %ks, i8* %ep) #0 {
entry:
  %message.addr = alloca i8*, align 4
  %ks.addr = alloca [6 x i8]*, align 4
  %ep.addr = alloca i8*, align 4
  %left = alloca [17 x [4 x i8]], align 16
  %right = alloca [17 x [4 x i8]], align 16
  %mp = alloca [8 x i8], align 1
  %e = alloca [8 x i8], align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %fs = alloca [4 x i8], align 1
  store i8* %message, i8** %message.addr, align 4
  store [6 x i8]* %ks, [6 x i8]** %ks.addr, align 4
  store i8* %ep, i8** %ep.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 64
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %mp, i32 0, i32 0
  %1 = load i32, i32* %i, align 4
  %2 = load i8*, i8** %message.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [64 x i8], [64 x i8]* @IP, i32 0, i32 %3
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %sub = sub nsw i32 %conv, 1
  %call = call i32 @peekBit(i8* %2, i32 %sub)
  call void @pokeBit(i8* %arraydecay, i32 %1, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc13, %for.end
  %6 = load i32, i32* %i, align 4
  %cmp2 = icmp slt i32 %6, 32
  br i1 %cmp2, label %for.body4, label %for.end15

for.body4:                                        ; preds = %for.cond1
  %arrayidx5 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 0
  %arraydecay6 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx5, i32 0, i32 0
  %7 = load i32, i32* %i, align 4
  %arraydecay7 = getelementptr inbounds [8 x i8], [8 x i8]* %mp, i32 0, i32 0
  %8 = load i32, i32* %i, align 4
  %call8 = call i32 @peekBit(i8* %arraydecay7, i32 %8)
  call void @pokeBit(i8* %arraydecay6, i32 %7, i32 %call8)
  %arrayidx9 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 0
  %arraydecay10 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx9, i32 0, i32 0
  %9 = load i32, i32* %i, align 4
  %arraydecay11 = getelementptr inbounds [8 x i8], [8 x i8]* %mp, i32 0, i32 0
  %10 = load i32, i32* %i, align 4
  %add = add nsw i32 %10, 32
  %call12 = call i32 @peekBit(i8* %arraydecay11, i32 %add)
  call void @pokeBit(i8* %arraydecay10, i32 %9, i32 %call12)
  br label %for.inc13

for.inc13:                                        ; preds = %for.body4
  %11 = load i32, i32* %i, align 4
  %inc14 = add nsw i32 %11, 1
  store i32 %inc14, i32* %i, align 4
  br label %for.cond1

for.end15:                                        ; preds = %for.cond1
  store i32 1, i32* %i, align 4
  br label %for.cond16

for.cond16:                                       ; preds = %for.inc50, %for.end15
  %12 = load i32, i32* %i, align 4
  %cmp17 = icmp slt i32 %12, 17
  br i1 %cmp17, label %for.body19, label %for.end52

for.body19:                                       ; preds = %for.cond16
  %13 = load i32, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 %13
  %arraydecay21 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx20, i32 0, i32 0
  %14 = load i32, i32* %i, align 4
  %sub22 = sub nsw i32 %14, 1
  %arrayidx23 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 %sub22
  %arraydecay24 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx23, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %arraydecay21, i8* align 4 %arraydecay24, i32 4, i1 false)
  %15 = load i32, i32* %i, align 4
  %sub25 = sub nsw i32 %15, 1
  %arrayidx26 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 %sub25
  %arraydecay27 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx26, i32 0, i32 0
  %16 = load [6 x i8]*, [6 x i8]** %ks.addr, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds [6 x i8], [6 x i8]* %16, i32 %17
  %arraydecay29 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx28, i32 0, i32 0
  %arraydecay30 = getelementptr inbounds [4 x i8], [4 x i8]* %fs, i32 0, i32 0
  call void @f(i8* %arraydecay27, i8* %arraydecay29, i8* %arraydecay30)
  store i32 0, i32* %j, align 4
  br label %for.cond31

for.cond31:                                       ; preds = %for.inc42, %for.body19
  %18 = load i32, i32* %j, align 4
  %cmp32 = icmp slt i32 %18, 4
  br i1 %cmp32, label %for.body34, label %for.end44

for.body34:                                       ; preds = %for.cond31
  %19 = load i32, i32* %j, align 4
  %arrayidx35 = getelementptr inbounds [4 x i8], [4 x i8]* %fs, i32 0, i32 %19
  %20 = load i8, i8* %arrayidx35, align 1
  %conv36 = zext i8 %20 to i32
  %21 = load i32, i32* %i, align 4
  %sub37 = sub nsw i32 %21, 1
  %arrayidx38 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 %sub37
  %22 = load i32, i32* %j, align 4
  %arrayidx39 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx38, i32 0, i32 %22
  %23 = load i8, i8* %arrayidx39, align 1
  %conv40 = zext i8 %23 to i32
  %xor = xor i32 %conv40, %conv36
  %conv41 = trunc i32 %xor to i8
  store i8 %conv41, i8* %arrayidx39, align 1
  br label %for.inc42

for.inc42:                                        ; preds = %for.body34
  %24 = load i32, i32* %j, align 4
  %inc43 = add nsw i32 %24, 1
  store i32 %inc43, i32* %j, align 4
  br label %for.cond31

for.end44:                                        ; preds = %for.cond31
  %25 = load i32, i32* %i, align 4
  %arrayidx45 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 %25
  %arraydecay46 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx45, i32 0, i32 0
  %26 = load i32, i32* %i, align 4
  %sub47 = sub nsw i32 %26, 1
  %arrayidx48 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 %sub47
  %arraydecay49 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx48, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %arraydecay46, i8* align 4 %arraydecay49, i32 4, i1 false)
  br label %for.inc50

for.inc50:                                        ; preds = %for.end44
  %27 = load i32, i32* %i, align 4
  %inc51 = add nsw i32 %27, 1
  store i32 %inc51, i32* %i, align 4
  br label %for.cond16

for.end52:                                        ; preds = %for.cond16
  store i32 0, i32* %i, align 4
  br label %for.cond53

for.cond53:                                       ; preds = %for.inc61, %for.end52
  %28 = load i32, i32* %i, align 4
  %cmp54 = icmp slt i32 %28, 32
  br i1 %cmp54, label %for.body56, label %for.end63

for.body56:                                       ; preds = %for.cond53
  %arraydecay57 = getelementptr inbounds [8 x i8], [8 x i8]* %e, i32 0, i32 0
  %29 = load i32, i32* %i, align 4
  %arrayidx58 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 16
  %arraydecay59 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx58, i32 0, i32 0
  %30 = load i32, i32* %i, align 4
  %call60 = call i32 @peekBit(i8* %arraydecay59, i32 %30)
  call void @pokeBit(i8* %arraydecay57, i32 %29, i32 %call60)
  br label %for.inc61

for.inc61:                                        ; preds = %for.body56
  %31 = load i32, i32* %i, align 4
  %inc62 = add nsw i32 %31, 1
  store i32 %inc62, i32* %i, align 4
  br label %for.cond53

for.end63:                                        ; preds = %for.cond53
  store i32 32, i32* %i, align 4
  br label %for.cond64

for.cond64:                                       ; preds = %for.inc73, %for.end63
  %32 = load i32, i32* %i, align 4
  %cmp65 = icmp slt i32 %32, 64
  br i1 %cmp65, label %for.body67, label %for.end75

for.body67:                                       ; preds = %for.cond64
  %arraydecay68 = getelementptr inbounds [8 x i8], [8 x i8]* %e, i32 0, i32 0
  %33 = load i32, i32* %i, align 4
  %arrayidx69 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 16
  %arraydecay70 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx69, i32 0, i32 0
  %34 = load i32, i32* %i, align 4
  %sub71 = sub nsw i32 %34, 32
  %call72 = call i32 @peekBit(i8* %arraydecay70, i32 %sub71)
  call void @pokeBit(i8* %arraydecay68, i32 %33, i32 %call72)
  br label %for.inc73

for.inc73:                                        ; preds = %for.body67
  %35 = load i32, i32* %i, align 4
  %inc74 = add nsw i32 %35, 1
  store i32 %inc74, i32* %i, align 4
  br label %for.cond64

for.end75:                                        ; preds = %for.cond64
  store i32 0, i32* %i, align 4
  br label %for.cond76

for.cond76:                                       ; preds = %for.inc85, %for.end75
  %36 = load i32, i32* %i, align 4
  %cmp77 = icmp slt i32 %36, 64
  br i1 %cmp77, label %for.body79, label %for.end87

for.body79:                                       ; preds = %for.cond76
  %37 = load i8*, i8** %ep.addr, align 4
  %38 = load i32, i32* %i, align 4
  %arraydecay80 = getelementptr inbounds [8 x i8], [8 x i8]* %e, i32 0, i32 0
  %39 = load i32, i32* %i, align 4
  %arrayidx81 = getelementptr inbounds [64 x i8], [64 x i8]* @IP2, i32 0, i32 %39
  %40 = load i8, i8* %arrayidx81, align 1
  %conv82 = zext i8 %40 to i32
  %sub83 = sub nsw i32 %conv82, 1
  %call84 = call i32 @peekBit(i8* %arraydecay80, i32 %sub83)
  call void @pokeBit(i8* %37, i32 %38, i32 %call84)
  br label %for.inc85

for.inc85:                                        ; preds = %for.body79
  %41 = load i32, i32* %i, align 4
  %inc86 = add nsw i32 %41, 1
  store i32 %inc86, i32* %i, align 4
  br label %for.cond76

for.end87:                                        ; preds = %for.cond76
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @decrypt(%struct.String* noalias sret align 4 %agg.result, i8* %key, i8* %message, i32 %len) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %message.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %ks = alloca [17 x [6 x i8]], align 16
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %padByte = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8* %key, i8** %key.addr, align 4
  store i8* %message, i8** %message.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = bitcast %struct.String* %agg.result to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  %1 = load i8*, i8** %key.addr, align 4
  %arraydecay = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  call void @getSubKeys(i8* %1, [6 x i8]* %arraydecay)
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc12, %entry
  %2 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, 9
  br i1 %cmp, label %for.body, label %for.end14

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %3, 6
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %4
  %5 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx, i32 0, i32 %5
  %6 = load i8, i8* %arrayidx4, align 1
  store i8 %6, i8* %temp, align 1
  %7 = load i32, i32* %i, align 4
  %sub = sub nsw i32 17, %7
  %arrayidx5 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %sub
  %8 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx5, i32 0, i32 %8
  %9 = load i8, i8* %arrayidx6, align 1
  %10 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %10
  %11 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx7, i32 0, i32 %11
  store i8 %9, i8* %arrayidx8, align 1
  %12 = load i8, i8* %temp, align 1
  %13 = load i32, i32* %i, align 4
  %sub9 = sub nsw i32 17, %13
  %arrayidx10 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %sub9
  %14 = load i32, i32* %j, align 4
  %arrayidx11 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx10, i32 0, i32 %14
  store i8 %12, i8* %arrayidx11, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %15 = load i32, i32* %j, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc12

for.inc12:                                        ; preds = %for.end
  %16 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %16, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond

for.end14:                                        ; preds = %for.cond
  %17 = load i32, i32* %len.addr, align 4
  %call = call noalias i8* @malloc(i32 %17)
  %data = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  store i8* %call, i8** %data, align 4
  %data15 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %18 = load i8*, i8** %data15, align 4
  %19 = load i8*, i8** %message.addr, align 4
  %20 = load i32, i32* %len.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %18, i8* align 1 %19, i32 %20, i1 false)
  %21 = load i32, i32* %len.addr, align 4
  %len16 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  store i32 %21, i32* %len16, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond17

for.cond17:                                       ; preds = %for.inc26, %for.end14
  %22 = load i32, i32* %i, align 4
  %len18 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %23 = load i32, i32* %len18, align 4
  %cmp19 = icmp slt i32 %22, %23
  br i1 %cmp19, label %for.body20, label %for.end27

for.body20:                                       ; preds = %for.cond17
  %data21 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %24 = load i8*, i8** %data21, align 4
  %25 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds i8, i8* %24, i32 %25
  %arraydecay23 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  %data24 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %26 = load i8*, i8** %data24, align 4
  %27 = load i32, i32* %i, align 4
  %arrayidx25 = getelementptr inbounds i8, i8* %26, i32 %27
  call void @processMessage(i8* %arrayidx22, [6 x i8]* %arraydecay23, i8* %arrayidx25)
  br label %for.inc26

for.inc26:                                        ; preds = %for.body20
  %28 = load i32, i32* %i, align 4
  %add = add nsw i32 %28, 8
  store i32 %add, i32* %i, align 4
  br label %for.cond17

for.end27:                                        ; preds = %for.cond17
  %data28 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %29 = load i8*, i8** %data28, align 4
  %30 = load i32, i32* %len.addr, align 4
  %sub29 = sub nsw i32 %30, 1
  %arrayidx30 = getelementptr inbounds i8, i8* %29, i32 %sub29
  %31 = load i8, i8* %arrayidx30, align 1
  store i8 %31, i8* %padByte, align 1
  %32 = load i8, i8* %padByte, align 1
  %conv = zext i8 %32 to i32
  %len31 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %33 = load i32, i32* %len31, align 4
  %sub32 = sub nsw i32 %33, %conv
  store i32 %sub32, i32* %len31, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @driver(i8* %key, i8* %message, i32 %len) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %message.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %encoded = alloca %struct.String, align 4
  %decoded = alloca %struct.String, align 4
  %buffer = alloca [128 x i8], align 16
  %tmp = alloca %struct.String, align 4
  %tmp9 = alloca %struct.String, align 4
  store i8* %key, i8** %key.addr, align 4
  store i8* %message, i8** %message.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load i8*, i8** %key.addr, align 4
  %arraydecay = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %0, i32 8, i8* %arraydecay)
  %arraydecay1 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i32 0, i32 0), i8* %arraydecay1)
  %1 = load i8*, i8** %message.addr, align 4
  %2 = load i32, i32* %len.addr, align 4
  %arraydecay2 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %1, i32 %2, i8* %arraydecay2)
  %arraydecay3 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0), i8* %arraydecay3)
  %3 = load i8*, i8** %key.addr, align 4
  %4 = load i8*, i8** %message.addr, align 4
  %5 = load i32, i32* %len.addr, align 4
  call void @encrypt(%struct.String* sret align 4 %tmp, i8* %3, i8* %4, i32 %5)
  %6 = bitcast %struct.String* %encoded to i8*
  %7 = bitcast %struct.String* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %6, i8* align 4 %7, i32 8, i1 false)
  %data = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  %8 = load i8*, i8** %data, align 4
  %len5 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 1
  %9 = load i32, i32* %len5, align 4
  %arraydecay6 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %8, i32 %9, i8* %arraydecay6)
  %arraydecay7 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0), i8* %arraydecay7)
  %10 = load i8*, i8** %key.addr, align 4
  %data10 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  %11 = load i8*, i8** %data10, align 4
  %len11 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 1
  %12 = load i32, i32* %len11, align 4
  call void @decrypt(%struct.String* sret align 4 %tmp9, i8* %10, i8* %11, i32 %12)
  %13 = bitcast %struct.String* %decoded to i8*
  %14 = bitcast %struct.String* %tmp9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %13, i8* align 4 %14, i32 8, i1 false)
  %data12 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 0
  %15 = load i8*, i8** %data12, align 4
  %len13 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 1
  %16 = load i32, i32* %len13, align 4
  %arraydecay14 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %15, i32 %16, i8* %arraydecay14)
  %arraydecay15 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0), i8* %arraydecay15)
  %len17 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 1
  %17 = load i32, i32* %len17, align 4
  %cmp = icmp sgt i32 %17, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %data18 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  %18 = load i8*, i8** %data18, align 4
  call void @free(i8* %18)
  %data19 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  store i8* null, i8** %data19, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %len20 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 1
  %19 = load i32, i32* %len20, align 4
  %cmp21 = icmp sgt i32 %19, 0
  br i1 %cmp21, label %if.then22, label %if.end25

if.then22:                                        ; preds = %if.end
  %data23 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 0
  %20 = load i8*, i8** %data23, align 4
  call void @free(i8* %20)
  %data24 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 0
  store i8* null, i8** %data24, align 4
  br label %if.end25

if.end25:                                         ; preds = %if.then22, %if.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @printBytes(i8* %ptr, i32 %len, i8* %out) #0 {
entry:
  %ptr.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  store i8* %ptr, i8** %ptr.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %len.addr, align 4
  %dec = add nsw i32 %0, -1
  store i32 %dec, i32* %len.addr, align 4
  %cmp = icmp sgt i32 %0, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i8*, i8** %ptr.addr, align 4
  %2 = load i8, i8* %1, align 1
  %conv = zext i8 %2 to i32
  %shr = ashr i32 %conv, 4
  %conv1 = trunc i32 %shr to i8
  %call = call signext i8 @toHex(i8 zeroext %conv1)
  %3 = load i8*, i8** %out.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %3, i32 1
  store i8* %incdec.ptr, i8** %out.addr, align 4
  store i8 %call, i8* %3, align 1
  %4 = load i8*, i8** %ptr.addr, align 4
  %5 = load i8, i8* %4, align 1
  %conv2 = zext i8 %5 to i32
  %and = and i32 %conv2, 15
  %conv3 = trunc i32 %and to i8
  %call4 = call signext i8 @toHex(i8 zeroext %conv3)
  %6 = load i8*, i8** %out.addr, align 4
  %incdec.ptr5 = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr5, i8** %out.addr, align 4
  store i8 %call4, i8* %6, align 1
  %7 = load i8*, i8** %ptr.addr, align 4
  %incdec.ptr6 = getelementptr inbounds i8, i8* %7, i32 1
  store i8* %incdec.ptr6, i8** %ptr.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %8 = load i8*, i8** %out.addr, align 4
  store i8 0, i8* %8, align 1
  ret void
}

declare i32 @printf(i8* %0, ...) #2

declare void @free(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %keys = alloca [3 x [8 x i8]], align 16
  %message1 = alloca [8 x i8], align 1
  %message2 = alloca [8 x i8], align 1
  %message3 = alloca [38 x i8], align 16
  %len = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [3 x [8 x i8]]* %keys to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([3 x [8 x i8]], [3 x [8 x i8]]* @__const.main.keys, i32 0, i32 0, i32 0), i32 24, i1 false)
  %1 = bitcast [8 x i8]* %message1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %1, i8* align 1 getelementptr inbounds ([8 x i8], [8 x i8]* @__const.main.message1, i32 0, i32 0), i32 8, i1 false)
  %2 = bitcast [8 x i8]* %message2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %2, i8* align 1 getelementptr inbounds ([8 x i8], [8 x i8]* @__const.main.message2, i32 0, i32 0), i32 8, i1 false)
  %3 = bitcast [38 x i8]* %message3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %3, i8* align 16 getelementptr inbounds ([38 x i8], [38 x i8]* @__const.main.message3, i32 0, i32 0), i32 38, i1 false)
  store i32 8, i32* %len, align 4
  %arrayidx = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* %keys, i32 0, i32 0
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %arrayidx, i32 0, i32 0
  %arraydecay1 = getelementptr inbounds [8 x i8], [8 x i8]* %message1, i32 0, i32 0
  %4 = load i32, i32* %len, align 4
  call void @driver(i8* %arraydecay, i8* %arraydecay1, i32 %4)
  store i32 8, i32* %len, align 4
  %arrayidx2 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* %keys, i32 0, i32 1
  %arraydecay3 = getelementptr inbounds [8 x i8], [8 x i8]* %arrayidx2, i32 0, i32 0
  %arraydecay4 = getelementptr inbounds [8 x i8], [8 x i8]* %message2, i32 0, i32 0
  %5 = load i32, i32* %len, align 4
  call void @driver(i8* %arraydecay3, i8* %arraydecay4, i32 %5)
  store i32 38, i32* %len, align 4
  %arrayidx5 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* %keys, i32 0, i32 2
  %arraydecay6 = getelementptr inbounds [8 x i8], [8 x i8]* %arrayidx5, i32 0, i32 0
  %arraydecay7 = getelementptr inbounds [38 x i8], [38 x i8]* %message3, i32 0, i32 0
  %6 = load i32, i32* %len, align 4
  call void @driver(i8* %arraydecay6, i8* %arraydecay7, i32 %6)
  ret i32 0
}

; Function Attrs: noinline nounwind optnone
define internal void @pokeBit(i8* %dst, i32 %index, i32 %value) #0 {
entry:
  %dst.addr = alloca i8*, align 4
  %index.addr = alloca i32, align 4
  %value.addr = alloca i32, align 4
  %cell = alloca i32, align 4
  %bit = alloca i32, align 4
  store i8* %dst, i8** %dst.addr, align 4
  store i32 %index, i32* %index.addr, align 4
  store i32 %value, i32* %value.addr, align 4
  %0 = load i32, i32* %index.addr, align 4
  %div = sdiv i32 %0, 8
  store i32 %div, i32* %cell, align 4
  %1 = load i32, i32* %index.addr, align 4
  %rem = srem i32 %1, 8
  %sub = sub nsw i32 7, %rem
  store i32 %sub, i32* %bit, align 4
  %2 = load i32, i32* %value.addr, align 4
  %cmp = icmp eq i32 %2, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %bit, align 4
  %shl = shl i32 1, %3
  %neg = xor i32 %shl, -1
  %4 = load i8*, i8** %dst.addr, align 4
  %5 = load i32, i32* %cell, align 4
  %arrayidx = getelementptr inbounds i8, i8* %4, i32 %5
  %6 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %6 to i32
  %and = and i32 %conv, %neg
  %conv1 = trunc i32 %and to i8
  store i8 %conv1, i8* %arrayidx, align 1
  br label %if.end

if.else:                                          ; preds = %entry
  %7 = load i32, i32* %bit, align 4
  %shl2 = shl i32 1, %7
  %8 = load i8*, i8** %dst.addr, align 4
  %9 = load i32, i32* %cell, align 4
  %arrayidx3 = getelementptr inbounds i8, i8* %8, i32 %9
  %10 = load i8, i8* %arrayidx3, align 1
  %conv4 = zext i8 %10 to i32
  %or = or i32 %conv4, %shl2
  %conv5 = trunc i32 %or to i8
  store i8 %conv5, i8* %arrayidx3, align 1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i32 @peekBit(i8* %src, i32 %index) #0 {
entry:
  %src.addr = alloca i8*, align 4
  %index.addr = alloca i32, align 4
  %cell = alloca i32, align 4
  %bit = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 4
  store i32 %index, i32* %index.addr, align 4
  %0 = load i32, i32* %index.addr, align 4
  %div = sdiv i32 %0, 8
  store i32 %div, i32* %cell, align 4
  %1 = load i32, i32* %index.addr, align 4
  %rem = srem i32 %1, 8
  %sub = sub nsw i32 7, %rem
  store i32 %sub, i32* %bit, align 4
  %2 = load i8*, i8** %src.addr, align 4
  %3 = load i32, i32* %cell, align 4
  %arrayidx = getelementptr inbounds i8, i8* %2, i32 %3
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %5 = load i32, i32* %bit, align 4
  %shl = shl i32 1, %5
  %and = and i32 %conv, %shl
  %cmp = icmp ne i32 %and, 0
  %conv1 = zext i1 %cmp to i32
  ret i32 %conv1
}

; Function Attrs: noinline nounwind optnone
define internal void @shiftLeft(i8* %src, i32 %len, i32 %times, i8* %dst) #0 {
entry:
  %src.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %times.addr = alloca i32, align 4
  %dst.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %t = alloca i32, align 4
  %temp = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %times, i32* %times.addr, align 4
  store i8* %dst, i8** %dst.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp sle i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8*, i8** %dst.addr, align 4
  %3 = load i32, i32* %i, align 4
  %4 = load i8*, i8** %src.addr, align 4
  %5 = load i32, i32* %i, align 4
  %call = call i32 @peekBit(i8* %4, i32 %5)
  call void @pokeBit(i8* %2, i32 %3, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %t, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc13, %for.end
  %7 = load i32, i32* %t, align 4
  %8 = load i32, i32* %times.addr, align 4
  %cmp2 = icmp sle i32 %7, %8
  br i1 %cmp2, label %for.body3, label %for.end15

for.body3:                                        ; preds = %for.cond1
  %9 = load i8*, i8** %dst.addr, align 4
  %call4 = call i32 @peekBit(i8* %9, i32 0)
  store i32 %call4, i32* %temp, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc9, %for.body3
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %len.addr, align 4
  %cmp6 = icmp sle i32 %10, %11
  br i1 %cmp6, label %for.body7, label %for.end11

for.body7:                                        ; preds = %for.cond5
  %12 = load i8*, i8** %dst.addr, align 4
  %13 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %13, 1
  %14 = load i8*, i8** %dst.addr, align 4
  %15 = load i32, i32* %i, align 4
  %call8 = call i32 @peekBit(i8* %14, i32 %15)
  call void @pokeBit(i8* %12, i32 %sub, i32 %call8)
  br label %for.inc9

for.inc9:                                         ; preds = %for.body7
  %16 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %16, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond5

for.end11:                                        ; preds = %for.cond5
  %17 = load i8*, i8** %dst.addr, align 4
  %18 = load i32, i32* %len.addr, align 4
  %sub12 = sub nsw i32 %18, 1
  %19 = load i32, i32* %temp, align 4
  call void @pokeBit(i8* %17, i32 %sub12, i32 %19)
  br label %for.inc13

for.inc13:                                        ; preds = %for.end11
  %20 = load i32, i32* %t, align 4
  %inc14 = add nsw i32 %20, 1
  store i32 %inc14, i32* %t, align 4
  br label %for.cond1

for.end15:                                        ; preds = %for.cond1
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @f(i8* %r, i8* %ks, i8* %sp) #0 {
entry:
  %r.addr = alloca i8*, align 4
  %ks.addr = alloca i8*, align 4
  %sp.addr = alloca i8*, align 4
  %er = alloca [6 x i8], align 1
  %sr = alloca [4 x i8], align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %b = alloca [6 x i32], align 16
  %k = alloca i32, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %m = alloca i32, align 4
  %n = alloca i32, align 4
  %p = alloca i32, align 4
  store i8* %r, i8** %r.addr, align 4
  store i8* %ks, i8** %ks.addr, align 4
  store i8* %sp, i8** %sp.addr, align 4
  %arraydecay = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  call void @llvm.memset.p0i8.i32(i8* align 1 %arraydecay, i8 0, i32 6, i1 false)
  %arraydecay1 = getelementptr inbounds [4 x i8], [4 x i8]* %sr, i32 0, i32 0
  call void @llvm.memset.p0i8.i32(i8* align 1 %arraydecay1, i8 0, i32 4, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 48
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay2 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  %1 = load i32, i32* %i, align 4
  %2 = load i8*, i8** %r.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [48 x i8], [48 x i8]* @E, i32 0, i32 %3
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %sub = sub nsw i32 %conv, 1
  %call = call i32 @peekBit(i8* %2, i32 %sub)
  call void @pokeBit(i8* %arraydecay2, i32 %1, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc12, %for.end
  %6 = load i32, i32* %i, align 4
  %cmp4 = icmp slt i32 %6, 6
  br i1 %cmp4, label %for.body6, label %for.end14

for.body6:                                        ; preds = %for.cond3
  %7 = load i8*, i8** %ks.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds i8, i8* %7, i32 %8
  %9 = load i8, i8* %arrayidx7, align 1
  %conv8 = zext i8 %9 to i32
  %10 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 %10
  %11 = load i8, i8* %arrayidx9, align 1
  %conv10 = zext i8 %11 to i32
  %xor = xor i32 %conv10, %conv8
  %conv11 = trunc i32 %xor to i8
  store i8 %conv11, i8* %arrayidx9, align 1
  br label %for.inc12

for.inc12:                                        ; preds = %for.body6
  %12 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %12, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond3

for.end14:                                        ; preds = %for.cond3
  store i32 0, i32* %i, align 4
  br label %for.cond15

for.cond15:                                       ; preds = %for.inc59, %for.end14
  %13 = load i32, i32* %i, align 4
  %cmp16 = icmp slt i32 %13, 8
  br i1 %cmp16, label %for.body18, label %for.end61

for.body18:                                       ; preds = %for.cond15
  %14 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %14, 6
  store i32 %mul, i32* %j, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond19

for.cond19:                                       ; preds = %for.inc28, %for.body18
  %15 = load i32, i32* %k, align 4
  %cmp20 = icmp slt i32 %15, 6
  br i1 %cmp20, label %for.body22, label %for.end30

for.body22:                                       ; preds = %for.cond19
  %arraydecay23 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  %16 = load i32, i32* %j, align 4
  %17 = load i32, i32* %k, align 4
  %add = add nsw i32 %16, %17
  %call24 = call i32 @peekBit(i8* %arraydecay23, i32 %add)
  %cmp25 = icmp ne i32 %call24, 0
  %18 = zext i1 %cmp25 to i64
  %cond = select i1 %cmp25, i32 1, i32 0
  %19 = load i32, i32* %k, align 4
  %arrayidx27 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 %19
  store i32 %cond, i32* %arrayidx27, align 4
  br label %for.inc28

for.inc28:                                        ; preds = %for.body22
  %20 = load i32, i32* %k, align 4
  %inc29 = add nsw i32 %20, 1
  store i32 %inc29, i32* %k, align 4
  br label %for.cond19

for.end30:                                        ; preds = %for.cond19
  %arrayidx31 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 0
  %21 = load i32, i32* %arrayidx31, align 16
  %mul32 = mul nsw i32 2, %21
  %arrayidx33 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 5
  %22 = load i32, i32* %arrayidx33, align 4
  %add34 = add nsw i32 %mul32, %22
  store i32 %add34, i32* %row, align 4
  %arrayidx35 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 1
  %23 = load i32, i32* %arrayidx35, align 4
  %mul36 = mul nsw i32 8, %23
  %arrayidx37 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 2
  %24 = load i32, i32* %arrayidx37, align 8
  %mul38 = mul nsw i32 4, %24
  %add39 = add nsw i32 %mul36, %mul38
  %arrayidx40 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 3
  %25 = load i32, i32* %arrayidx40, align 4
  %mul41 = mul nsw i32 2, %25
  %add42 = add nsw i32 %add39, %mul41
  %arrayidx43 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 4
  %26 = load i32, i32* %arrayidx43, align 16
  %add44 = add nsw i32 %add42, %26
  store i32 %add44, i32* %col, align 4
  %27 = load i32, i32* %i, align 4
  %arrayidx45 = getelementptr inbounds [8 x [64 x i8]], [8 x [64 x i8]]* @S, i32 0, i32 %27
  %28 = load i32, i32* %row, align 4
  %mul46 = mul nsw i32 %28, 16
  %29 = load i32, i32* %col, align 4
  %add47 = add nsw i32 %mul46, %29
  %arrayidx48 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx45, i32 0, i32 %add47
  %30 = load i8, i8* %arrayidx48, align 1
  %conv49 = zext i8 %30 to i32
  store i32 %conv49, i32* %m, align 4
  store i32 1, i32* %n, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end30
  %31 = load i32, i32* %m, align 4
  %cmp50 = icmp sgt i32 %31, 0
  br i1 %cmp50, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %32 = load i32, i32* %m, align 4
  %rem = srem i32 %32, 2
  store i32 %rem, i32* %p, align 4
  %arraydecay52 = getelementptr inbounds [4 x i8], [4 x i8]* %sr, i32 0, i32 0
  %33 = load i32, i32* %i, align 4
  %add53 = add nsw i32 %33, 1
  %mul54 = mul nsw i32 %add53, 4
  %34 = load i32, i32* %n, align 4
  %sub55 = sub nsw i32 %mul54, %34
  %35 = load i32, i32* %p, align 4
  %cmp56 = icmp eq i32 %35, 1
  %conv57 = zext i1 %cmp56 to i32
  call void @pokeBit(i8* %arraydecay52, i32 %sub55, i32 %conv57)
  %36 = load i32, i32* %m, align 4
  %div = sdiv i32 %36, 2
  store i32 %div, i32* %m, align 4
  %37 = load i32, i32* %n, align 4
  %inc58 = add nsw i32 %37, 1
  store i32 %inc58, i32* %n, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %for.inc59

for.inc59:                                        ; preds = %while.end
  %38 = load i32, i32* %i, align 4
  %inc60 = add nsw i32 %38, 1
  store i32 %inc60, i32* %i, align 4
  br label %for.cond15

for.end61:                                        ; preds = %for.cond15
  store i32 0, i32* %i, align 4
  br label %for.cond62

for.cond62:                                       ; preds = %for.inc71, %for.end61
  %39 = load i32, i32* %i, align 4
  %cmp63 = icmp slt i32 %39, 32
  br i1 %cmp63, label %for.body65, label %for.end73

for.body65:                                       ; preds = %for.cond62
  %40 = load i8*, i8** %sp.addr, align 4
  %41 = load i32, i32* %i, align 4
  %arraydecay66 = getelementptr inbounds [4 x i8], [4 x i8]* %sr, i32 0, i32 0
  %42 = load i32, i32* %i, align 4
  %arrayidx67 = getelementptr inbounds [32 x i8], [32 x i8]* @P, i32 0, i32 %42
  %43 = load i8, i8* %arrayidx67, align 1
  %conv68 = zext i8 %43 to i32
  %sub69 = sub nsw i32 %conv68, 1
  %call70 = call i32 @peekBit(i8* %arraydecay66, i32 %sub69)
  call void @pokeBit(i8* %40, i32 %41, i32 %call70)
  br label %for.inc71

for.inc71:                                        ; preds = %for.body65
  %44 = load i32, i32* %i, align 4
  %inc72 = add nsw i32 %44, 1
  store i32 %inc72, i32* %i, align 4
  br label %for.cond62

for.end73:                                        ; preds = %for.cond62
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal signext i8 @toHex(i8 zeroext %in) #0 {
entry:
  %retval = alloca i8, align 1
  %in.addr = alloca i8, align 1
  store i8 %in, i8* %in.addr, align 1
  %0 = load i8, i8* %in.addr, align 1
  %conv = zext i8 %0 to i32
  %cmp = icmp sle i32 0, %conv
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i8, i8* %in.addr, align 1
  %conv2 = zext i8 %1 to i32
  %cmp3 = icmp slt i32 %conv2, 10
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %2 = load i8, i8* %in.addr, align 1
  %conv5 = zext i8 %2 to i32
  %add = add nsw i32 48, %conv5
  %conv6 = trunc i32 %add to i8
  store i8 %conv6, i8* %retval, align 1
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %3 = load i8, i8* %in.addr, align 1
  %conv7 = zext i8 %3 to i32
  %cmp8 = icmp sle i32 10, %conv7
  br i1 %cmp8, label %land.lhs.true10, label %if.end18

land.lhs.true10:                                  ; preds = %if.end
  %4 = load i8, i8* %in.addr, align 1
  %conv11 = zext i8 %4 to i32
  %cmp12 = icmp sle i32 %conv11, 15
  br i1 %cmp12, label %if.then14, label %if.end18

if.then14:                                        ; preds = %land.lhs.true10
  %5 = load i8, i8* %in.addr, align 1
  %conv15 = zext i8 %5 to i32
  %add16 = add nsw i32 65, %conv15
  %sub = sub nsw i32 %add16, 10
  %conv17 = trunc i32 %sub to i8
  store i8 %conv17, i8* %retval, align 1
  br label %return

if.end18:                                         ; preds = %land.lhs.true10, %if.end
  store i8 0, i8* %retval, align 1
  br label %return

return:                                           ; preds = %if.end18, %if.then14, %if.then
  %6 = load i8, i8* %retval, align 1
  ret i8 %6
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, 64
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 64:i32
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i8, i8* %arrayidx, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = zext i8 %4 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %conv, 1
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
%2:i32 = subnsw %1, 1:i32
infer %2

; *****
; For LLVM instruction:
;  %call = call i32 @peekBit(i8* %2, i32 %sub)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %5, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp slt i32 %6, 32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 32:i32
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call8 = call i32 @peekBit(i8* %arraydecay7, i32 %8)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %10, 32
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 32:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call12 = call i32 @peekBit(i8* %arraydecay11, i32 %add)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc14 = add nsw i32 %11, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp17 = icmp slt i32 %12, 17
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 17:i32
infer %1

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub22 = sub nsw i32 %14, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub25 = sub nsw i32 %15, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp32 = icmp slt i32 %18, 4
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 4:i32
infer %1

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i8, i8* %arrayidx35, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv36 = zext i8 %20 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub37 = sub nsw i32 %21, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i8, i8* %arrayidx39, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv40 = zext i8 %23 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %xor = xor i32 %conv40, %conv36
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
%2:i8 = var
%3:i32 = zext %2
%4:i32 = xor %1, %3
infer %4 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %conv41 = trunc i32 %xor to i8
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
%2:i8 = var
%3:i32 = zext %2
%4:i32 = xor %1, %3
%5:i8 = trunc %4
infer %5

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc43 = add nsw i32 %24, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub47 = sub nsw i32 %26, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc51 = add nsw i32 %27, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp54 = icmp slt i32 %28, 32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 32:i32
infer %1

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call60 = call i32 @peekBit(i8* %arraydecay59, i32 %30)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc62 = add nsw i32 %31, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp65 = icmp slt i32 %32, 64
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 64:i32
infer %1

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub71 = sub nsw i32 %34, 32
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 32:i32
infer %1

; *****
; For LLVM instruction:
;  %call72 = call i32 @peekBit(i8* %arraydecay70, i32 %sub71)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc74 = add nsw i32 %35, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp77 = icmp slt i32 %36, 64
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 64:i32
infer %1

; *****
; For LLVM instruction:
;  %38 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %40 = load i8, i8* %arrayidx81, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv82 = zext i8 %40 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %sub83 = sub nsw i32 %conv82, 1
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
%2:i32 = subnsw %1, 1:i32
infer %2

; *****
; For LLVM instruction:
;  %call84 = call i32 @peekBit(i8* %arraydecay80, i32 %sub83)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %41 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc86 = add nsw i32 %41, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 64:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 32:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 32:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 32
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 40
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 4:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = zext %0
%2:i8 = var
%3:i32 = zext %2
%4:i32 = xor %1, %3
infer %4 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 128
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = zext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var
%1:i32 = zext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = zext %0
%2:i8 = var
%3:i32 = zext %2
%4:i32 = xor %1, %3
%5:i8 = trunc %4
infer %5


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -128
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 32:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -32
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -24
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for ./Data_Encryption_Standard.c.bc:processMessage()

; entering Souper's runOnFunction() for decrypt()

; ModuleID = './Data_Encryption_Standard.c.bc'
source_filename = "./Data_Encryption_Standard.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.String = type { i8*, i32 }

@.str = private unnamed_addr constant [14 x i8] c"Key     : %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"Message : %s\0A\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"Encoded : %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"Decoded : %s\0A\0A\00", align 1
@__const.main.keys = private unnamed_addr constant [3 x [8 x i8]] [[8 x i8] c"\134Wy\9B\BC\DF\F1", [8 x i8] c"\0E2\922\EAm\0Ds", [8 x i8] c"\0E2\922\EAm\0Ds"], align 16
@__const.main.message1 = private unnamed_addr constant [8 x i8] c"\01#Eg\89\AB\CD\EF", align 1
@__const.main.message2 = private unnamed_addr constant [8 x i8] c"\87\87\87\87\87\87\87\87", align 1
@__const.main.message3 = private unnamed_addr constant [38 x i8] c"Your lips are smoother than vaseline\0D\0A", align 16
@PC1 = internal constant [56 x i8] c"91)!\19\11\09\01:2*\22\1A\12\0A\02;3+#\1B\13\0B\03<4,$?7/'\1F\17\0F\07>6.&\1E\16\0E\06=5-%\1D\15\0D\05\1C\14\0C\04", align 16
@SHIFTS = internal constant [16 x i8] c"\01\01\02\02\02\02\02\02\01\02\02\02\02\02\02\01", align 16
@PC2 = internal constant [48 x i8] c"\0E\11\0B\18\01\05\03\1C\0F\06\15\0A\17\13\0C\04\1A\08\10\07\1B\14\0D\02)4\1F%/7\1E(3-!0,1'8\225.*2$\1D ", align 16
@IP = internal constant [64 x i8] c":2*\22\1A\12\0A\02<4,$\1C\14\0C\04>6.&\1E\16\0E\06@80( \18\10\0891)!\19\11\09\01;3+#\1B\13\0B\03=5-%\1D\15\0D\05?7/'\1F\17\0F\07", align 16
@IP2 = internal constant [64 x i8] c"(\080\108\18@ '\07/\0F7\17?\1F&\06.\0E6\16>\1E%\05-\0D5\15=\1D$\04,\0C4\14<\1C#\03+\0B3\13;\1B\22\02*\0A2\12:\1A!\01)\091\119\19", align 16
@E = internal constant [48 x i8] c" \01\02\03\04\05\04\05\06\07\08\09\08\09\0A\0B\0C\0D\0C\0D\0E\0F\10\11\10\11\12\13\14\15\14\15\16\17\18\19\18\19\1A\1B\1C\1D\1C\1D\1E\1F \01", align 16
@S = internal constant [8 x [64 x i8]] [[64 x i8] c"\0E\04\0D\01\02\0F\0B\08\03\0A\06\0C\05\09\00\07\00\0F\07\04\0E\02\0D\01\0A\06\0C\0B\09\05\03\08\04\01\0E\08\0D\06\02\0B\0F\0C\09\07\03\0A\05\00\0F\0C\08\02\04\09\01\07\05\0B\03\0E\0A\00\06\0D", [64 x i8] c"\0F\01\08\0E\06\0B\03\04\09\07\02\0D\0C\00\05\0A\03\0D\04\07\0F\02\08\0E\0C\00\01\0A\06\09\0B\05\00\0E\07\0B\0A\04\0D\01\05\08\0C\06\09\03\02\0F\0D\08\0A\01\03\0F\04\02\0B\06\07\0C\00\05\0E\09", [64 x i8] c"\0A\00\09\0E\06\03\0F\05\01\0D\0C\07\0B\04\02\08\0D\07\00\09\03\04\06\0A\02\08\05\0E\0C\0B\0F\01\0D\06\04\09\08\0F\03\00\0B\01\02\0C\05\0A\0E\07\01\0A\0D\00\06\09\08\07\04\0F\0E\03\0B\05\02\0C", [64 x i8] c"\07\0D\0E\03\00\06\09\0A\01\02\08\05\0B\0C\04\0F\0D\08\0B\05\06\0F\00\03\04\07\02\0C\01\0A\0E\09\0A\06\09\00\0C\0B\07\0D\0F\01\03\0E\05\02\08\04\03\0F\00\06\0A\01\0D\08\09\04\05\0B\0C\07\02\0E", [64 x i8] c"\02\0C\04\01\07\0A\0B\06\08\05\03\0F\0D\00\0E\09\0E\0B\02\0C\04\07\0D\01\05\00\0F\0A\03\09\08\06\04\02\01\0B\0A\0D\07\08\0F\09\0C\05\06\03\00\0E\0B\08\0C\07\01\0E\02\0D\06\0F\00\09\0A\04\05\03", [64 x i8] c"\0C\01\0A\0F\09\02\06\08\00\0D\03\04\0E\07\05\0B\0A\0F\04\02\07\0C\09\05\06\01\0D\0E\00\0B\03\08\09\0E\0F\05\02\08\0C\03\07\00\04\0A\01\0D\0B\06\04\03\02\0C\09\05\0F\0A\0B\0E\01\07\06\00\08\0D", [64 x i8] c"\04\0B\02\0E\0F\00\08\0D\03\0C\09\07\05\0A\06\01\0D\00\0B\07\04\09\01\0A\0E\03\05\0C\02\0F\08\06\01\04\0B\0D\0C\03\07\0E\0A\0F\06\08\00\05\09\02\06\0B\0D\08\01\04\0A\07\09\05\00\0F\0E\02\03\0C", [64 x i8] c"\0D\02\08\04\06\0F\0B\01\0A\09\03\0E\05\00\0C\07\01\0F\0D\08\0A\03\07\04\0C\05\06\0B\00\0E\09\02\07\0B\04\01\09\0C\0E\02\00\06\0A\0D\0F\03\05\08\02\01\0E\07\04\0A\08\0D\0F\0C\09\00\03\05\06\0B"], align 16
@P = internal constant [32 x i8] c"\10\07\14\15\1D\0C\1C\11\01\0F\17\1A\05\12\1F\0A\02\08\18\0E \1B\03\09\13\0D\1E\06\16\0B\04\19", align 16
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @encrypt(%struct.String* noalias sret align 4 %agg.result, i8* %key, i8* %message, i32 %len) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %message.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %ks = alloca [17 x [6 x i8]], align 16
  %padByte = alloca i8, align 1
  %i = alloca i32, align 4
  store i8* %key, i8** %key.addr, align 4
  store i8* %message, i8** %message.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = bitcast %struct.String* %agg.result to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  %1 = load i8*, i8** %key.addr, align 4
  %arraydecay = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  call void @getSubKeys(i8* %1, [6 x i8]* %arraydecay)
  %2 = load i32, i32* %len.addr, align 4
  %rem = srem i32 %2, 8
  %sub = sub nsw i32 8, %rem
  %conv = trunc i32 %sub to i8
  store i8 %conv, i8* %padByte, align 1
  %3 = load i32, i32* %len.addr, align 4
  %4 = load i8, i8* %padByte, align 1
  %conv1 = zext i8 %4 to i32
  %add = add nsw i32 %3, %conv1
  %len2 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  store i32 %add, i32* %len2, align 4
  %len3 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %5 = load i32, i32* %len3, align 4
  %call = call noalias i8* @malloc(i32 %5)
  %data = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  store i8* %call, i8** %data, align 4
  %data4 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %6 = load i8*, i8** %data4, align 4
  %7 = load i8*, i8** %message.addr, align 4
  %8 = load i32, i32* %len.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %6, i8* align 1 %7, i32 %8, i1 false)
  %data5 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %9 = load i8*, i8** %data5, align 4
  %10 = load i32, i32* %len.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %9, i32 %10
  %11 = load i8, i8* %padByte, align 1
  %12 = load i8, i8* %padByte, align 1
  %conv7 = zext i8 %12 to i32
  call void @llvm.memset.p0i8.i32(i8* align 1 %arrayidx, i8 %11, i32 %conv7, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %13 = load i32, i32* %i, align 4
  %len8 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %14 = load i32, i32* %len8, align 4
  %cmp = icmp slt i32 %13, %14
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %data10 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %15 = load i8*, i8** %data10, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds i8, i8* %15, i32 %16
  %arraydecay12 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  %data13 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %17 = load i8*, i8** %data13, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds i8, i8* %17, i32 %18
  call void @processMessage(i8* %arrayidx11, [6 x i8]* %arraydecay12, i8* %arrayidx14)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %19 = load i32, i32* %i, align 4
  %add15 = add nsw i32 %19, 8
  store i32 %add15, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define internal void @getSubKeys(i8* %key, [6 x i8]* %ks) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %ks.addr = alloca [6 x i8]*, align 4
  %c = alloca [17 x [7 x i8]], align 16
  %d = alloca [17 x [4 x i8]], align 16
  %kp = alloca [7 x i8], align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i8* %key, i8** %key.addr, align 4
  store [6 x i8]* %ks, [6 x i8]** %ks.addr, align 4
  %arraydecay = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 0
  %0 = bitcast [7 x i8]* %arraydecay to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 119, i1 false)
  %arraydecay1 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 0
  %1 = bitcast [4 x i8]* %arraydecay1 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %1, i8 0, i32 68, i1 false)
  %2 = load [6 x i8]*, [6 x i8]** %ks.addr, align 4
  %3 = bitcast [6 x i8]* %2 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 1 %3, i8 0, i32 102, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %4, 56
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay2 = getelementptr inbounds [7 x i8], [7 x i8]* %kp, i32 0, i32 0
  %5 = load i32, i32* %i, align 4
  %6 = load i8*, i8** %key.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [56 x i8], [56 x i8]* @PC1, i32 0, i32 %7
  %8 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %8 to i32
  %sub = sub nsw i32 %conv, 1
  %call = call i32 @peekBit(i8* %6, i32 %sub)
  call void @pokeBit(i8* %arraydecay2, i32 %5, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc15, %for.end
  %10 = load i32, i32* %i, align 4
  %cmp4 = icmp slt i32 %10, 28
  br i1 %cmp4, label %for.body6, label %for.end17

for.body6:                                        ; preds = %for.cond3
  %arrayidx7 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 0
  %arraydecay8 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx7, i32 0, i32 0
  %11 = load i32, i32* %i, align 4
  %arraydecay9 = getelementptr inbounds [7 x i8], [7 x i8]* %kp, i32 0, i32 0
  %12 = load i32, i32* %i, align 4
  %call10 = call i32 @peekBit(i8* %arraydecay9, i32 %12)
  call void @pokeBit(i8* %arraydecay8, i32 %11, i32 %call10)
  %arrayidx11 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 0
  %arraydecay12 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx11, i32 0, i32 0
  %13 = load i32, i32* %i, align 4
  %arraydecay13 = getelementptr inbounds [7 x i8], [7 x i8]* %kp, i32 0, i32 0
  %14 = load i32, i32* %i, align 4
  %add = add nsw i32 %14, 28
  %call14 = call i32 @peekBit(i8* %arraydecay13, i32 %add)
  call void @pokeBit(i8* %arraydecay12, i32 %13, i32 %call14)
  br label %for.inc15

for.inc15:                                        ; preds = %for.body6
  %15 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %15, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond3

for.end17:                                        ; preds = %for.cond3
  store i32 1, i32* %i, align 4
  br label %for.cond18

for.cond18:                                       ; preds = %for.inc38, %for.end17
  %16 = load i32, i32* %i, align 4
  %cmp19 = icmp slt i32 %16, 17
  br i1 %cmp19, label %for.body21, label %for.end40

for.body21:                                       ; preds = %for.cond18
  %17 = load i32, i32* %i, align 4
  %sub22 = sub nsw i32 %17, 1
  %arrayidx23 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %sub22
  %arraydecay24 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx23, i32 0, i32 0
  %18 = load i32, i32* %i, align 4
  %sub25 = sub nsw i32 %18, 1
  %arrayidx26 = getelementptr inbounds [16 x i8], [16 x i8]* @SHIFTS, i32 0, i32 %sub25
  %19 = load i8, i8* %arrayidx26, align 1
  %conv27 = zext i8 %19 to i32
  %20 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %20
  %arraydecay29 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx28, i32 0, i32 0
  call void @shiftLeft(i8* %arraydecay24, i32 28, i32 %conv27, i8* %arraydecay29)
  %21 = load i32, i32* %i, align 4
  %sub30 = sub nsw i32 %21, 1
  %arrayidx31 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 %sub30
  %arraydecay32 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx31, i32 0, i32 0
  %22 = load i32, i32* %i, align 4
  %sub33 = sub nsw i32 %22, 1
  %arrayidx34 = getelementptr inbounds [16 x i8], [16 x i8]* @SHIFTS, i32 0, i32 %sub33
  %23 = load i8, i8* %arrayidx34, align 1
  %conv35 = zext i8 %23 to i32
  %24 = load i32, i32* %i, align 4
  %arrayidx36 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 %24
  %arraydecay37 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx36, i32 0, i32 0
  call void @shiftLeft(i8* %arraydecay32, i32 28, i32 %conv35, i8* %arraydecay37)
  br label %for.inc38

for.inc38:                                        ; preds = %for.body21
  %25 = load i32, i32* %i, align 4
  %inc39 = add nsw i32 %25, 1
  store i32 %inc39, i32* %i, align 4
  br label %for.cond18

for.end40:                                        ; preds = %for.cond18
  store i32 1, i32* %i, align 4
  br label %for.cond41

for.cond41:                                       ; preds = %for.inc58, %for.end40
  %26 = load i32, i32* %i, align 4
  %cmp42 = icmp slt i32 %26, 17
  br i1 %cmp42, label %for.body44, label %for.end60

for.body44:                                       ; preds = %for.cond41
  store i32 28, i32* %j, align 4
  br label %for.cond45

for.cond45:                                       ; preds = %for.inc55, %for.body44
  %27 = load i32, i32* %j, align 4
  %cmp46 = icmp slt i32 %27, 56
  br i1 %cmp46, label %for.body48, label %for.end57

for.body48:                                       ; preds = %for.cond45
  %28 = load i32, i32* %i, align 4
  %arrayidx49 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %28
  %arraydecay50 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx49, i32 0, i32 0
  %29 = load i32, i32* %j, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx51 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 %30
  %arraydecay52 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx51, i32 0, i32 0
  %31 = load i32, i32* %j, align 4
  %sub53 = sub nsw i32 %31, 28
  %call54 = call i32 @peekBit(i8* %arraydecay52, i32 %sub53)
  call void @pokeBit(i8* %arraydecay50, i32 %29, i32 %call54)
  br label %for.inc55

for.inc55:                                        ; preds = %for.body48
  %32 = load i32, i32* %j, align 4
  %inc56 = add nsw i32 %32, 1
  store i32 %inc56, i32* %j, align 4
  br label %for.cond45

for.end57:                                        ; preds = %for.cond45
  br label %for.inc58

for.inc58:                                        ; preds = %for.end57
  %33 = load i32, i32* %i, align 4
  %inc59 = add nsw i32 %33, 1
  store i32 %inc59, i32* %i, align 4
  br label %for.cond41

for.end60:                                        ; preds = %for.cond41
  store i32 1, i32* %i, align 4
  br label %for.cond61

for.cond61:                                       ; preds = %for.inc80, %for.end60
  %34 = load i32, i32* %i, align 4
  %cmp62 = icmp slt i32 %34, 17
  br i1 %cmp62, label %for.body64, label %for.end82

for.body64:                                       ; preds = %for.cond61
  store i32 0, i32* %j, align 4
  br label %for.cond65

for.cond65:                                       ; preds = %for.inc77, %for.body64
  %35 = load i32, i32* %j, align 4
  %cmp66 = icmp slt i32 %35, 48
  br i1 %cmp66, label %for.body68, label %for.end79

for.body68:                                       ; preds = %for.cond65
  %36 = load [6 x i8]*, [6 x i8]** %ks.addr, align 4
  %37 = load i32, i32* %i, align 4
  %arrayidx69 = getelementptr inbounds [6 x i8], [6 x i8]* %36, i32 %37
  %arraydecay70 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx69, i32 0, i32 0
  %38 = load i32, i32* %j, align 4
  %39 = load i32, i32* %i, align 4
  %arrayidx71 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %39
  %arraydecay72 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx71, i32 0, i32 0
  %40 = load i32, i32* %j, align 4
  %arrayidx73 = getelementptr inbounds [48 x i8], [48 x i8]* @PC2, i32 0, i32 %40
  %41 = load i8, i8* %arrayidx73, align 1
  %conv74 = zext i8 %41 to i32
  %sub75 = sub nsw i32 %conv74, 1
  %call76 = call i32 @peekBit(i8* %arraydecay72, i32 %sub75)
  call void @pokeBit(i8* %arraydecay70, i32 %38, i32 %call76)
  br label %for.inc77

for.inc77:                                        ; preds = %for.body68
  %42 = load i32, i32* %j, align 4
  %inc78 = add nsw i32 %42, 1
  store i32 %inc78, i32* %j, align 4
  br label %for.cond65

for.end79:                                        ; preds = %for.cond65
  br label %for.inc80

for.inc80:                                        ; preds = %for.end79
  %43 = load i32, i32* %i, align 4
  %inc81 = add nsw i32 %43, 1
  store i32 %inc81, i32* %i, align 4
  br label %for.cond61

for.end82:                                        ; preds = %for.cond61
  ret void
}

declare noalias i8* @malloc(i32 %0) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: noinline nounwind optnone
define internal void @processMessage(i8* %message, [6 x i8]* %ks, i8* %ep) #0 {
entry:
  %message.addr = alloca i8*, align 4
  %ks.addr = alloca [6 x i8]*, align 4
  %ep.addr = alloca i8*, align 4
  %left = alloca [17 x [4 x i8]], align 16
  %right = alloca [17 x [4 x i8]], align 16
  %mp = alloca [8 x i8], align 1
  %e = alloca [8 x i8], align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %fs = alloca [4 x i8], align 1
  store i8* %message, i8** %message.addr, align 4
  store [6 x i8]* %ks, [6 x i8]** %ks.addr, align 4
  store i8* %ep, i8** %ep.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 64
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %mp, i32 0, i32 0
  %1 = load i32, i32* %i, align 4
  %2 = load i8*, i8** %message.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [64 x i8], [64 x i8]* @IP, i32 0, i32 %3
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %sub = sub nsw i32 %conv, 1
  %call = call i32 @peekBit(i8* %2, i32 %sub)
  call void @pokeBit(i8* %arraydecay, i32 %1, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc13, %for.end
  %6 = load i32, i32* %i, align 4
  %cmp2 = icmp slt i32 %6, 32
  br i1 %cmp2, label %for.body4, label %for.end15

for.body4:                                        ; preds = %for.cond1
  %arrayidx5 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 0
  %arraydecay6 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx5, i32 0, i32 0
  %7 = load i32, i32* %i, align 4
  %arraydecay7 = getelementptr inbounds [8 x i8], [8 x i8]* %mp, i32 0, i32 0
  %8 = load i32, i32* %i, align 4
  %call8 = call i32 @peekBit(i8* %arraydecay7, i32 %8)
  call void @pokeBit(i8* %arraydecay6, i32 %7, i32 %call8)
  %arrayidx9 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 0
  %arraydecay10 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx9, i32 0, i32 0
  %9 = load i32, i32* %i, align 4
  %arraydecay11 = getelementptr inbounds [8 x i8], [8 x i8]* %mp, i32 0, i32 0
  %10 = load i32, i32* %i, align 4
  %add = add nsw i32 %10, 32
  %call12 = call i32 @peekBit(i8* %arraydecay11, i32 %add)
  call void @pokeBit(i8* %arraydecay10, i32 %9, i32 %call12)
  br label %for.inc13

for.inc13:                                        ; preds = %for.body4
  %11 = load i32, i32* %i, align 4
  %inc14 = add nsw i32 %11, 1
  store i32 %inc14, i32* %i, align 4
  br label %for.cond1

for.end15:                                        ; preds = %for.cond1
  store i32 1, i32* %i, align 4
  br label %for.cond16

for.cond16:                                       ; preds = %for.inc50, %for.end15
  %12 = load i32, i32* %i, align 4
  %cmp17 = icmp slt i32 %12, 17
  br i1 %cmp17, label %for.body19, label %for.end52

for.body19:                                       ; preds = %for.cond16
  %13 = load i32, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 %13
  %arraydecay21 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx20, i32 0, i32 0
  %14 = load i32, i32* %i, align 4
  %sub22 = sub nsw i32 %14, 1
  %arrayidx23 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 %sub22
  %arraydecay24 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx23, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %arraydecay21, i8* align 4 %arraydecay24, i32 4, i1 false)
  %15 = load i32, i32* %i, align 4
  %sub25 = sub nsw i32 %15, 1
  %arrayidx26 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 %sub25
  %arraydecay27 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx26, i32 0, i32 0
  %16 = load [6 x i8]*, [6 x i8]** %ks.addr, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds [6 x i8], [6 x i8]* %16, i32 %17
  %arraydecay29 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx28, i32 0, i32 0
  %arraydecay30 = getelementptr inbounds [4 x i8], [4 x i8]* %fs, i32 0, i32 0
  call void @f(i8* %arraydecay27, i8* %arraydecay29, i8* %arraydecay30)
  store i32 0, i32* %j, align 4
  br label %for.cond31

for.cond31:                                       ; preds = %for.inc42, %for.body19
  %18 = load i32, i32* %j, align 4
  %cmp32 = icmp slt i32 %18, 4
  br i1 %cmp32, label %for.body34, label %for.end44

for.body34:                                       ; preds = %for.cond31
  %19 = load i32, i32* %j, align 4
  %arrayidx35 = getelementptr inbounds [4 x i8], [4 x i8]* %fs, i32 0, i32 %19
  %20 = load i8, i8* %arrayidx35, align 1
  %conv36 = zext i8 %20 to i32
  %21 = load i32, i32* %i, align 4
  %sub37 = sub nsw i32 %21, 1
  %arrayidx38 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 %sub37
  %22 = load i32, i32* %j, align 4
  %arrayidx39 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx38, i32 0, i32 %22
  %23 = load i8, i8* %arrayidx39, align 1
  %conv40 = zext i8 %23 to i32
  %xor = xor i32 %conv40, %conv36
  %conv41 = trunc i32 %xor to i8
  store i8 %conv41, i8* %arrayidx39, align 1
  br label %for.inc42

for.inc42:                                        ; preds = %for.body34
  %24 = load i32, i32* %j, align 4
  %inc43 = add nsw i32 %24, 1
  store i32 %inc43, i32* %j, align 4
  br label %for.cond31

for.end44:                                        ; preds = %for.cond31
  %25 = load i32, i32* %i, align 4
  %arrayidx45 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 %25
  %arraydecay46 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx45, i32 0, i32 0
  %26 = load i32, i32* %i, align 4
  %sub47 = sub nsw i32 %26, 1
  %arrayidx48 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 %sub47
  %arraydecay49 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx48, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %arraydecay46, i8* align 4 %arraydecay49, i32 4, i1 false)
  br label %for.inc50

for.inc50:                                        ; preds = %for.end44
  %27 = load i32, i32* %i, align 4
  %inc51 = add nsw i32 %27, 1
  store i32 %inc51, i32* %i, align 4
  br label %for.cond16

for.end52:                                        ; preds = %for.cond16
  store i32 0, i32* %i, align 4
  br label %for.cond53

for.cond53:                                       ; preds = %for.inc61, %for.end52
  %28 = load i32, i32* %i, align 4
  %cmp54 = icmp slt i32 %28, 32
  br i1 %cmp54, label %for.body56, label %for.end63

for.body56:                                       ; preds = %for.cond53
  %arraydecay57 = getelementptr inbounds [8 x i8], [8 x i8]* %e, i32 0, i32 0
  %29 = load i32, i32* %i, align 4
  %arrayidx58 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 16
  %arraydecay59 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx58, i32 0, i32 0
  %30 = load i32, i32* %i, align 4
  %call60 = call i32 @peekBit(i8* %arraydecay59, i32 %30)
  call void @pokeBit(i8* %arraydecay57, i32 %29, i32 %call60)
  br label %for.inc61

for.inc61:                                        ; preds = %for.body56
  %31 = load i32, i32* %i, align 4
  %inc62 = add nsw i32 %31, 1
  store i32 %inc62, i32* %i, align 4
  br label %for.cond53

for.end63:                                        ; preds = %for.cond53
  store i32 32, i32* %i, align 4
  br label %for.cond64

for.cond64:                                       ; preds = %for.inc73, %for.end63
  %32 = load i32, i32* %i, align 4
  %cmp65 = icmp slt i32 %32, 64
  br i1 %cmp65, label %for.body67, label %for.end75

for.body67:                                       ; preds = %for.cond64
  %arraydecay68 = getelementptr inbounds [8 x i8], [8 x i8]* %e, i32 0, i32 0
  %33 = load i32, i32* %i, align 4
  %arrayidx69 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 16
  %arraydecay70 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx69, i32 0, i32 0
  %34 = load i32, i32* %i, align 4
  %sub71 = sub nsw i32 %34, 32
  %call72 = call i32 @peekBit(i8* %arraydecay70, i32 %sub71)
  call void @pokeBit(i8* %arraydecay68, i32 %33, i32 %call72)
  br label %for.inc73

for.inc73:                                        ; preds = %for.body67
  %35 = load i32, i32* %i, align 4
  %inc74 = add nsw i32 %35, 1
  store i32 %inc74, i32* %i, align 4
  br label %for.cond64

for.end75:                                        ; preds = %for.cond64
  store i32 0, i32* %i, align 4
  br label %for.cond76

for.cond76:                                       ; preds = %for.inc85, %for.end75
  %36 = load i32, i32* %i, align 4
  %cmp77 = icmp slt i32 %36, 64
  br i1 %cmp77, label %for.body79, label %for.end87

for.body79:                                       ; preds = %for.cond76
  %37 = load i8*, i8** %ep.addr, align 4
  %38 = load i32, i32* %i, align 4
  %arraydecay80 = getelementptr inbounds [8 x i8], [8 x i8]* %e, i32 0, i32 0
  %39 = load i32, i32* %i, align 4
  %arrayidx81 = getelementptr inbounds [64 x i8], [64 x i8]* @IP2, i32 0, i32 %39
  %40 = load i8, i8* %arrayidx81, align 1
  %conv82 = zext i8 %40 to i32
  %sub83 = sub nsw i32 %conv82, 1
  %call84 = call i32 @peekBit(i8* %arraydecay80, i32 %sub83)
  call void @pokeBit(i8* %37, i32 %38, i32 %call84)
  br label %for.inc85

for.inc85:                                        ; preds = %for.body79
  %41 = load i32, i32* %i, align 4
  %inc86 = add nsw i32 %41, 1
  store i32 %inc86, i32* %i, align 4
  br label %for.cond76

for.end87:                                        ; preds = %for.cond76
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @decrypt(%struct.String* noalias sret align 4 %agg.result, i8* %key, i8* %message, i32 %len) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %message.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %ks = alloca [17 x [6 x i8]], align 16
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %padByte = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8* %key, i8** %key.addr, align 4
  store i8* %message, i8** %message.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = bitcast %struct.String* %agg.result to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  %1 = load i8*, i8** %key.addr, align 4
  %arraydecay = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  call void @getSubKeys(i8* %1, [6 x i8]* %arraydecay)
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc12, %entry
  %2 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, 9
  br i1 %cmp, label %for.body, label %for.end14

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %3, 6
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %4
  %5 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx, i32 0, i32 %5
  %6 = load i8, i8* %arrayidx4, align 1
  store i8 %6, i8* %temp, align 1
  %7 = load i32, i32* %i, align 4
  %sub = sub nsw i32 17, %7
  %arrayidx5 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %sub
  %8 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx5, i32 0, i32 %8
  %9 = load i8, i8* %arrayidx6, align 1
  %10 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %10
  %11 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx7, i32 0, i32 %11
  store i8 %9, i8* %arrayidx8, align 1
  %12 = load i8, i8* %temp, align 1
  %13 = load i32, i32* %i, align 4
  %sub9 = sub nsw i32 17, %13
  %arrayidx10 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %sub9
  %14 = load i32, i32* %j, align 4
  %arrayidx11 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx10, i32 0, i32 %14
  store i8 %12, i8* %arrayidx11, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %15 = load i32, i32* %j, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc12

for.inc12:                                        ; preds = %for.end
  %16 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %16, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond

for.end14:                                        ; preds = %for.cond
  %17 = load i32, i32* %len.addr, align 4
  %call = call noalias i8* @malloc(i32 %17)
  %data = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  store i8* %call, i8** %data, align 4
  %data15 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %18 = load i8*, i8** %data15, align 4
  %19 = load i8*, i8** %message.addr, align 4
  %20 = load i32, i32* %len.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %18, i8* align 1 %19, i32 %20, i1 false)
  %21 = load i32, i32* %len.addr, align 4
  %len16 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  store i32 %21, i32* %len16, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond17

for.cond17:                                       ; preds = %for.inc26, %for.end14
  %22 = load i32, i32* %i, align 4
  %len18 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %23 = load i32, i32* %len18, align 4
  %cmp19 = icmp slt i32 %22, %23
  br i1 %cmp19, label %for.body20, label %for.end27

for.body20:                                       ; preds = %for.cond17
  %data21 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %24 = load i8*, i8** %data21, align 4
  %25 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds i8, i8* %24, i32 %25
  %arraydecay23 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  %data24 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %26 = load i8*, i8** %data24, align 4
  %27 = load i32, i32* %i, align 4
  %arrayidx25 = getelementptr inbounds i8, i8* %26, i32 %27
  call void @processMessage(i8* %arrayidx22, [6 x i8]* %arraydecay23, i8* %arrayidx25)
  br label %for.inc26

for.inc26:                                        ; preds = %for.body20
  %28 = load i32, i32* %i, align 4
  %add = add nsw i32 %28, 8
  store i32 %add, i32* %i, align 4
  br label %for.cond17

for.end27:                                        ; preds = %for.cond17
  %data28 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %29 = load i8*, i8** %data28, align 4
  %30 = load i32, i32* %len.addr, align 4
  %sub29 = sub nsw i32 %30, 1
  %arrayidx30 = getelementptr inbounds i8, i8* %29, i32 %sub29
  %31 = load i8, i8* %arrayidx30, align 1
  store i8 %31, i8* %padByte, align 1
  %32 = load i8, i8* %padByte, align 1
  %conv = zext i8 %32 to i32
  %len31 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %33 = load i32, i32* %len31, align 4
  %sub32 = sub nsw i32 %33, %conv
  store i32 %sub32, i32* %len31, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @driver(i8* %key, i8* %message, i32 %len) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %message.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %encoded = alloca %struct.String, align 4
  %decoded = alloca %struct.String, align 4
  %buffer = alloca [128 x i8], align 16
  %tmp = alloca %struct.String, align 4
  %tmp9 = alloca %struct.String, align 4
  store i8* %key, i8** %key.addr, align 4
  store i8* %message, i8** %message.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load i8*, i8** %key.addr, align 4
  %arraydecay = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %0, i32 8, i8* %arraydecay)
  %arraydecay1 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i32 0, i32 0), i8* %arraydecay1)
  %1 = load i8*, i8** %message.addr, align 4
  %2 = load i32, i32* %len.addr, align 4
  %arraydecay2 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %1, i32 %2, i8* %arraydecay2)
  %arraydecay3 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0), i8* %arraydecay3)
  %3 = load i8*, i8** %key.addr, align 4
  %4 = load i8*, i8** %message.addr, align 4
  %5 = load i32, i32* %len.addr, align 4
  call void @encrypt(%struct.String* sret align 4 %tmp, i8* %3, i8* %4, i32 %5)
  %6 = bitcast %struct.String* %encoded to i8*
  %7 = bitcast %struct.String* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %6, i8* align 4 %7, i32 8, i1 false)
  %data = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  %8 = load i8*, i8** %data, align 4
  %len5 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 1
  %9 = load i32, i32* %len5, align 4
  %arraydecay6 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %8, i32 %9, i8* %arraydecay6)
  %arraydecay7 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0), i8* %arraydecay7)
  %10 = load i8*, i8** %key.addr, align 4
  %data10 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  %11 = load i8*, i8** %data10, align 4
  %len11 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 1
  %12 = load i32, i32* %len11, align 4
  call void @decrypt(%struct.String* sret align 4 %tmp9, i8* %10, i8* %11, i32 %12)
  %13 = bitcast %struct.String* %decoded to i8*
  %14 = bitcast %struct.String* %tmp9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %13, i8* align 4 %14, i32 8, i1 false)
  %data12 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 0
  %15 = load i8*, i8** %data12, align 4
  %len13 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 1
  %16 = load i32, i32* %len13, align 4
  %arraydecay14 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %15, i32 %16, i8* %arraydecay14)
  %arraydecay15 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0), i8* %arraydecay15)
  %len17 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 1
  %17 = load i32, i32* %len17, align 4
  %cmp = icmp sgt i32 %17, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %data18 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  %18 = load i8*, i8** %data18, align 4
  call void @free(i8* %18)
  %data19 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  store i8* null, i8** %data19, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %len20 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 1
  %19 = load i32, i32* %len20, align 4
  %cmp21 = icmp sgt i32 %19, 0
  br i1 %cmp21, label %if.then22, label %if.end25

if.then22:                                        ; preds = %if.end
  %data23 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 0
  %20 = load i8*, i8** %data23, align 4
  call void @free(i8* %20)
  %data24 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 0
  store i8* null, i8** %data24, align 4
  br label %if.end25

if.end25:                                         ; preds = %if.then22, %if.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @printBytes(i8* %ptr, i32 %len, i8* %out) #0 {
entry:
  %ptr.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  store i8* %ptr, i8** %ptr.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %len.addr, align 4
  %dec = add nsw i32 %0, -1
  store i32 %dec, i32* %len.addr, align 4
  %cmp = icmp sgt i32 %0, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i8*, i8** %ptr.addr, align 4
  %2 = load i8, i8* %1, align 1
  %conv = zext i8 %2 to i32
  %shr = ashr i32 %conv, 4
  %conv1 = trunc i32 %shr to i8
  %call = call signext i8 @toHex(i8 zeroext %conv1)
  %3 = load i8*, i8** %out.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %3, i32 1
  store i8* %incdec.ptr, i8** %out.addr, align 4
  store i8 %call, i8* %3, align 1
  %4 = load i8*, i8** %ptr.addr, align 4
  %5 = load i8, i8* %4, align 1
  %conv2 = zext i8 %5 to i32
  %and = and i32 %conv2, 15
  %conv3 = trunc i32 %and to i8
  %call4 = call signext i8 @toHex(i8 zeroext %conv3)
  %6 = load i8*, i8** %out.addr, align 4
  %incdec.ptr5 = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr5, i8** %out.addr, align 4
  store i8 %call4, i8* %6, align 1
  %7 = load i8*, i8** %ptr.addr, align 4
  %incdec.ptr6 = getelementptr inbounds i8, i8* %7, i32 1
  store i8* %incdec.ptr6, i8** %ptr.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %8 = load i8*, i8** %out.addr, align 4
  store i8 0, i8* %8, align 1
  ret void
}

declare i32 @printf(i8* %0, ...) #2

declare void @free(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %keys = alloca [3 x [8 x i8]], align 16
  %message1 = alloca [8 x i8], align 1
  %message2 = alloca [8 x i8], align 1
  %message3 = alloca [38 x i8], align 16
  %len = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [3 x [8 x i8]]* %keys to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([3 x [8 x i8]], [3 x [8 x i8]]* @__const.main.keys, i32 0, i32 0, i32 0), i32 24, i1 false)
  %1 = bitcast [8 x i8]* %message1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %1, i8* align 1 getelementptr inbounds ([8 x i8], [8 x i8]* @__const.main.message1, i32 0, i32 0), i32 8, i1 false)
  %2 = bitcast [8 x i8]* %message2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %2, i8* align 1 getelementptr inbounds ([8 x i8], [8 x i8]* @__const.main.message2, i32 0, i32 0), i32 8, i1 false)
  %3 = bitcast [38 x i8]* %message3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %3, i8* align 16 getelementptr inbounds ([38 x i8], [38 x i8]* @__const.main.message3, i32 0, i32 0), i32 38, i1 false)
  store i32 8, i32* %len, align 4
  %arrayidx = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* %keys, i32 0, i32 0
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %arrayidx, i32 0, i32 0
  %arraydecay1 = getelementptr inbounds [8 x i8], [8 x i8]* %message1, i32 0, i32 0
  %4 = load i32, i32* %len, align 4
  call void @driver(i8* %arraydecay, i8* %arraydecay1, i32 %4)
  store i32 8, i32* %len, align 4
  %arrayidx2 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* %keys, i32 0, i32 1
  %arraydecay3 = getelementptr inbounds [8 x i8], [8 x i8]* %arrayidx2, i32 0, i32 0
  %arraydecay4 = getelementptr inbounds [8 x i8], [8 x i8]* %message2, i32 0, i32 0
  %5 = load i32, i32* %len, align 4
  call void @driver(i8* %arraydecay3, i8* %arraydecay4, i32 %5)
  store i32 38, i32* %len, align 4
  %arrayidx5 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* %keys, i32 0, i32 2
  %arraydecay6 = getelementptr inbounds [8 x i8], [8 x i8]* %arrayidx5, i32 0, i32 0
  %arraydecay7 = getelementptr inbounds [38 x i8], [38 x i8]* %message3, i32 0, i32 0
  %6 = load i32, i32* %len, align 4
  call void @driver(i8* %arraydecay6, i8* %arraydecay7, i32 %6)
  ret i32 0
}

; Function Attrs: noinline nounwind optnone
define internal void @pokeBit(i8* %dst, i32 %index, i32 %value) #0 {
entry:
  %dst.addr = alloca i8*, align 4
  %index.addr = alloca i32, align 4
  %value.addr = alloca i32, align 4
  %cell = alloca i32, align 4
  %bit = alloca i32, align 4
  store i8* %dst, i8** %dst.addr, align 4
  store i32 %index, i32* %index.addr, align 4
  store i32 %value, i32* %value.addr, align 4
  %0 = load i32, i32* %index.addr, align 4
  %div = sdiv i32 %0, 8
  store i32 %div, i32* %cell, align 4
  %1 = load i32, i32* %index.addr, align 4
  %rem = srem i32 %1, 8
  %sub = sub nsw i32 7, %rem
  store i32 %sub, i32* %bit, align 4
  %2 = load i32, i32* %value.addr, align 4
  %cmp = icmp eq i32 %2, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %bit, align 4
  %shl = shl i32 1, %3
  %neg = xor i32 %shl, -1
  %4 = load i8*, i8** %dst.addr, align 4
  %5 = load i32, i32* %cell, align 4
  %arrayidx = getelementptr inbounds i8, i8* %4, i32 %5
  %6 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %6 to i32
  %and = and i32 %conv, %neg
  %conv1 = trunc i32 %and to i8
  store i8 %conv1, i8* %arrayidx, align 1
  br label %if.end

if.else:                                          ; preds = %entry
  %7 = load i32, i32* %bit, align 4
  %shl2 = shl i32 1, %7
  %8 = load i8*, i8** %dst.addr, align 4
  %9 = load i32, i32* %cell, align 4
  %arrayidx3 = getelementptr inbounds i8, i8* %8, i32 %9
  %10 = load i8, i8* %arrayidx3, align 1
  %conv4 = zext i8 %10 to i32
  %or = or i32 %conv4, %shl2
  %conv5 = trunc i32 %or to i8
  store i8 %conv5, i8* %arrayidx3, align 1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i32 @peekBit(i8* %src, i32 %index) #0 {
entry:
  %src.addr = alloca i8*, align 4
  %index.addr = alloca i32, align 4
  %cell = alloca i32, align 4
  %bit = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 4
  store i32 %index, i32* %index.addr, align 4
  %0 = load i32, i32* %index.addr, align 4
  %div = sdiv i32 %0, 8
  store i32 %div, i32* %cell, align 4
  %1 = load i32, i32* %index.addr, align 4
  %rem = srem i32 %1, 8
  %sub = sub nsw i32 7, %rem
  store i32 %sub, i32* %bit, align 4
  %2 = load i8*, i8** %src.addr, align 4
  %3 = load i32, i32* %cell, align 4
  %arrayidx = getelementptr inbounds i8, i8* %2, i32 %3
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %5 = load i32, i32* %bit, align 4
  %shl = shl i32 1, %5
  %and = and i32 %conv, %shl
  %cmp = icmp ne i32 %and, 0
  %conv1 = zext i1 %cmp to i32
  ret i32 %conv1
}

; Function Attrs: noinline nounwind optnone
define internal void @shiftLeft(i8* %src, i32 %len, i32 %times, i8* %dst) #0 {
entry:
  %src.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %times.addr = alloca i32, align 4
  %dst.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %t = alloca i32, align 4
  %temp = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %times, i32* %times.addr, align 4
  store i8* %dst, i8** %dst.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp sle i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8*, i8** %dst.addr, align 4
  %3 = load i32, i32* %i, align 4
  %4 = load i8*, i8** %src.addr, align 4
  %5 = load i32, i32* %i, align 4
  %call = call i32 @peekBit(i8* %4, i32 %5)
  call void @pokeBit(i8* %2, i32 %3, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %t, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc13, %for.end
  %7 = load i32, i32* %t, align 4
  %8 = load i32, i32* %times.addr, align 4
  %cmp2 = icmp sle i32 %7, %8
  br i1 %cmp2, label %for.body3, label %for.end15

for.body3:                                        ; preds = %for.cond1
  %9 = load i8*, i8** %dst.addr, align 4
  %call4 = call i32 @peekBit(i8* %9, i32 0)
  store i32 %call4, i32* %temp, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc9, %for.body3
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %len.addr, align 4
  %cmp6 = icmp sle i32 %10, %11
  br i1 %cmp6, label %for.body7, label %for.end11

for.body7:                                        ; preds = %for.cond5
  %12 = load i8*, i8** %dst.addr, align 4
  %13 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %13, 1
  %14 = load i8*, i8** %dst.addr, align 4
  %15 = load i32, i32* %i, align 4
  %call8 = call i32 @peekBit(i8* %14, i32 %15)
  call void @pokeBit(i8* %12, i32 %sub, i32 %call8)
  br label %for.inc9

for.inc9:                                         ; preds = %for.body7
  %16 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %16, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond5

for.end11:                                        ; preds = %for.cond5
  %17 = load i8*, i8** %dst.addr, align 4
  %18 = load i32, i32* %len.addr, align 4
  %sub12 = sub nsw i32 %18, 1
  %19 = load i32, i32* %temp, align 4
  call void @pokeBit(i8* %17, i32 %sub12, i32 %19)
  br label %for.inc13

for.inc13:                                        ; preds = %for.end11
  %20 = load i32, i32* %t, align 4
  %inc14 = add nsw i32 %20, 1
  store i32 %inc14, i32* %t, align 4
  br label %for.cond1

for.end15:                                        ; preds = %for.cond1
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @f(i8* %r, i8* %ks, i8* %sp) #0 {
entry:
  %r.addr = alloca i8*, align 4
  %ks.addr = alloca i8*, align 4
  %sp.addr = alloca i8*, align 4
  %er = alloca [6 x i8], align 1
  %sr = alloca [4 x i8], align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %b = alloca [6 x i32], align 16
  %k = alloca i32, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %m = alloca i32, align 4
  %n = alloca i32, align 4
  %p = alloca i32, align 4
  store i8* %r, i8** %r.addr, align 4
  store i8* %ks, i8** %ks.addr, align 4
  store i8* %sp, i8** %sp.addr, align 4
  %arraydecay = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  call void @llvm.memset.p0i8.i32(i8* align 1 %arraydecay, i8 0, i32 6, i1 false)
  %arraydecay1 = getelementptr inbounds [4 x i8], [4 x i8]* %sr, i32 0, i32 0
  call void @llvm.memset.p0i8.i32(i8* align 1 %arraydecay1, i8 0, i32 4, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 48
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay2 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  %1 = load i32, i32* %i, align 4
  %2 = load i8*, i8** %r.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [48 x i8], [48 x i8]* @E, i32 0, i32 %3
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %sub = sub nsw i32 %conv, 1
  %call = call i32 @peekBit(i8* %2, i32 %sub)
  call void @pokeBit(i8* %arraydecay2, i32 %1, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc12, %for.end
  %6 = load i32, i32* %i, align 4
  %cmp4 = icmp slt i32 %6, 6
  br i1 %cmp4, label %for.body6, label %for.end14

for.body6:                                        ; preds = %for.cond3
  %7 = load i8*, i8** %ks.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds i8, i8* %7, i32 %8
  %9 = load i8, i8* %arrayidx7, align 1
  %conv8 = zext i8 %9 to i32
  %10 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 %10
  %11 = load i8, i8* %arrayidx9, align 1
  %conv10 = zext i8 %11 to i32
  %xor = xor i32 %conv10, %conv8
  %conv11 = trunc i32 %xor to i8
  store i8 %conv11, i8* %arrayidx9, align 1
  br label %for.inc12

for.inc12:                                        ; preds = %for.body6
  %12 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %12, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond3

for.end14:                                        ; preds = %for.cond3
  store i32 0, i32* %i, align 4
  br label %for.cond15

for.cond15:                                       ; preds = %for.inc59, %for.end14
  %13 = load i32, i32* %i, align 4
  %cmp16 = icmp slt i32 %13, 8
  br i1 %cmp16, label %for.body18, label %for.end61

for.body18:                                       ; preds = %for.cond15
  %14 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %14, 6
  store i32 %mul, i32* %j, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond19

for.cond19:                                       ; preds = %for.inc28, %for.body18
  %15 = load i32, i32* %k, align 4
  %cmp20 = icmp slt i32 %15, 6
  br i1 %cmp20, label %for.body22, label %for.end30

for.body22:                                       ; preds = %for.cond19
  %arraydecay23 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  %16 = load i32, i32* %j, align 4
  %17 = load i32, i32* %k, align 4
  %add = add nsw i32 %16, %17
  %call24 = call i32 @peekBit(i8* %arraydecay23, i32 %add)
  %cmp25 = icmp ne i32 %call24, 0
  %18 = zext i1 %cmp25 to i64
  %cond = select i1 %cmp25, i32 1, i32 0
  %19 = load i32, i32* %k, align 4
  %arrayidx27 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 %19
  store i32 %cond, i32* %arrayidx27, align 4
  br label %for.inc28

for.inc28:                                        ; preds = %for.body22
  %20 = load i32, i32* %k, align 4
  %inc29 = add nsw i32 %20, 1
  store i32 %inc29, i32* %k, align 4
  br label %for.cond19

for.end30:                                        ; preds = %for.cond19
  %arrayidx31 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 0
  %21 = load i32, i32* %arrayidx31, align 16
  %mul32 = mul nsw i32 2, %21
  %arrayidx33 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 5
  %22 = load i32, i32* %arrayidx33, align 4
  %add34 = add nsw i32 %mul32, %22
  store i32 %add34, i32* %row, align 4
  %arrayidx35 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 1
  %23 = load i32, i32* %arrayidx35, align 4
  %mul36 = mul nsw i32 8, %23
  %arrayidx37 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 2
  %24 = load i32, i32* %arrayidx37, align 8
  %mul38 = mul nsw i32 4, %24
  %add39 = add nsw i32 %mul36, %mul38
  %arrayidx40 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 3
  %25 = load i32, i32* %arrayidx40, align 4
  %mul41 = mul nsw i32 2, %25
  %add42 = add nsw i32 %add39, %mul41
  %arrayidx43 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 4
  %26 = load i32, i32* %arrayidx43, align 16
  %add44 = add nsw i32 %add42, %26
  store i32 %add44, i32* %col, align 4
  %27 = load i32, i32* %i, align 4
  %arrayidx45 = getelementptr inbounds [8 x [64 x i8]], [8 x [64 x i8]]* @S, i32 0, i32 %27
  %28 = load i32, i32* %row, align 4
  %mul46 = mul nsw i32 %28, 16
  %29 = load i32, i32* %col, align 4
  %add47 = add nsw i32 %mul46, %29
  %arrayidx48 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx45, i32 0, i32 %add47
  %30 = load i8, i8* %arrayidx48, align 1
  %conv49 = zext i8 %30 to i32
  store i32 %conv49, i32* %m, align 4
  store i32 1, i32* %n, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end30
  %31 = load i32, i32* %m, align 4
  %cmp50 = icmp sgt i32 %31, 0
  br i1 %cmp50, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %32 = load i32, i32* %m, align 4
  %rem = srem i32 %32, 2
  store i32 %rem, i32* %p, align 4
  %arraydecay52 = getelementptr inbounds [4 x i8], [4 x i8]* %sr, i32 0, i32 0
  %33 = load i32, i32* %i, align 4
  %add53 = add nsw i32 %33, 1
  %mul54 = mul nsw i32 %add53, 4
  %34 = load i32, i32* %n, align 4
  %sub55 = sub nsw i32 %mul54, %34
  %35 = load i32, i32* %p, align 4
  %cmp56 = icmp eq i32 %35, 1
  %conv57 = zext i1 %cmp56 to i32
  call void @pokeBit(i8* %arraydecay52, i32 %sub55, i32 %conv57)
  %36 = load i32, i32* %m, align 4
  %div = sdiv i32 %36, 2
  store i32 %div, i32* %m, align 4
  %37 = load i32, i32* %n, align 4
  %inc58 = add nsw i32 %37, 1
  store i32 %inc58, i32* %n, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %for.inc59

for.inc59:                                        ; preds = %while.end
  %38 = load i32, i32* %i, align 4
  %inc60 = add nsw i32 %38, 1
  store i32 %inc60, i32* %i, align 4
  br label %for.cond15

for.end61:                                        ; preds = %for.cond15
  store i32 0, i32* %i, align 4
  br label %for.cond62

for.cond62:                                       ; preds = %for.inc71, %for.end61
  %39 = load i32, i32* %i, align 4
  %cmp63 = icmp slt i32 %39, 32
  br i1 %cmp63, label %for.body65, label %for.end73

for.body65:                                       ; preds = %for.cond62
  %40 = load i8*, i8** %sp.addr, align 4
  %41 = load i32, i32* %i, align 4
  %arraydecay66 = getelementptr inbounds [4 x i8], [4 x i8]* %sr, i32 0, i32 0
  %42 = load i32, i32* %i, align 4
  %arrayidx67 = getelementptr inbounds [32 x i8], [32 x i8]* @P, i32 0, i32 %42
  %43 = load i8, i8* %arrayidx67, align 1
  %conv68 = zext i8 %43 to i32
  %sub69 = sub nsw i32 %conv68, 1
  %call70 = call i32 @peekBit(i8* %arraydecay66, i32 %sub69)
  call void @pokeBit(i8* %40, i32 %41, i32 %call70)
  br label %for.inc71

for.inc71:                                        ; preds = %for.body65
  %44 = load i32, i32* %i, align 4
  %inc72 = add nsw i32 %44, 1
  store i32 %inc72, i32* %i, align 4
  br label %for.cond62

for.end73:                                        ; preds = %for.cond62
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal signext i8 @toHex(i8 zeroext %in) #0 {
entry:
  %retval = alloca i8, align 1
  %in.addr = alloca i8, align 1
  store i8 %in, i8* %in.addr, align 1
  %0 = load i8, i8* %in.addr, align 1
  %conv = zext i8 %0 to i32
  %cmp = icmp sle i32 0, %conv
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i8, i8* %in.addr, align 1
  %conv2 = zext i8 %1 to i32
  %cmp3 = icmp slt i32 %conv2, 10
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %2 = load i8, i8* %in.addr, align 1
  %conv5 = zext i8 %2 to i32
  %add = add nsw i32 48, %conv5
  %conv6 = trunc i32 %add to i8
  store i8 %conv6, i8* %retval, align 1
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %3 = load i8, i8* %in.addr, align 1
  %conv7 = zext i8 %3 to i32
  %cmp8 = icmp sle i32 10, %conv7
  br i1 %cmp8, label %land.lhs.true10, label %if.end18

land.lhs.true10:                                  ; preds = %if.end
  %4 = load i8, i8* %in.addr, align 1
  %conv11 = zext i8 %4 to i32
  %cmp12 = icmp sle i32 %conv11, 15
  br i1 %cmp12, label %if.then14, label %if.end18

if.then14:                                        ; preds = %land.lhs.true10
  %5 = load i8, i8* %in.addr, align 1
  %conv15 = zext i8 %5 to i32
  %add16 = add nsw i32 65, %conv15
  %sub = sub nsw i32 %add16, 10
  %conv17 = trunc i32 %sub to i8
  store i8 %conv17, i8* %retval, align 1
  br label %return

if.end18:                                         ; preds = %land.lhs.true10, %if.end
  store i8 0, i8* %retval, align 1
  br label %return

return:                                           ; preds = %if.end18, %if.then14, %if.then
  %6 = load i8, i8* %retval, align 1
  ret i8 %6
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %2, 9
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 9:i32
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp slt i32 %3, 6
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 6:i32
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i8, i8* %arrayidx4, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 17, %7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw 17:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i8, i8* %arrayidx6, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i8, i8* %temp, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub9 = sub nsw i32 17, %13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw 17:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %15, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc13 = add nsw i32 %16, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %len18, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp19 = icmp slt i32 %22, %23
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %28, 8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 8:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub29 = sub nsw i32 %30, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %31 = load i8, i8* %arrayidx30, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %32 = load i8, i8* %padByte, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = zext i8 %32 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %len31, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub32 = sub nsw i32 %33, %conv
; Looking for a replacement for:
%0:i32 = var
%1:i8 = var
%2:i32 = zext %1
%3:i32 = subnsw %0, %2
infer %3
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 9:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 6:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw 17:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 17
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -268435439
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i8 = var
%2:i32 = zext %1
%3:i32 = subnsw %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1609210866
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var
%1:i32 = zext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for decrypt()

; entering Souper's runOnFunction() for driver()

; ModuleID = './Data_Encryption_Standard.c.bc'
source_filename = "./Data_Encryption_Standard.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.String = type { i8*, i32 }

@.str = private unnamed_addr constant [14 x i8] c"Key     : %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"Message : %s\0A\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"Encoded : %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"Decoded : %s\0A\0A\00", align 1
@__const.main.keys = private unnamed_addr constant [3 x [8 x i8]] [[8 x i8] c"\134Wy\9B\BC\DF\F1", [8 x i8] c"\0E2\922\EAm\0Ds", [8 x i8] c"\0E2\922\EAm\0Ds"], align 16
@__const.main.message1 = private unnamed_addr constant [8 x i8] c"\01#Eg\89\AB\CD\EF", align 1
@__const.main.message2 = private unnamed_addr constant [8 x i8] c"\87\87\87\87\87\87\87\87", align 1
@__const.main.message3 = private unnamed_addr constant [38 x i8] c"Your lips are smoother than vaseline\0D\0A", align 16
@PC1 = internal constant [56 x i8] c"91)!\19\11\09\01:2*\22\1A\12\0A\02;3+#\1B\13\0B\03<4,$?7/'\1F\17\0F\07>6.&\1E\16\0E\06=5-%\1D\15\0D\05\1C\14\0C\04", align 16
@SHIFTS = internal constant [16 x i8] c"\01\01\02\02\02\02\02\02\01\02\02\02\02\02\02\01", align 16
@PC2 = internal constant [48 x i8] c"\0E\11\0B\18\01\05\03\1C\0F\06\15\0A\17\13\0C\04\1A\08\10\07\1B\14\0D\02)4\1F%/7\1E(3-!0,1'8\225.*2$\1D ", align 16
@IP = internal constant [64 x i8] c":2*\22\1A\12\0A\02<4,$\1C\14\0C\04>6.&\1E\16\0E\06@80( \18\10\0891)!\19\11\09\01;3+#\1B\13\0B\03=5-%\1D\15\0D\05?7/'\1F\17\0F\07", align 16
@IP2 = internal constant [64 x i8] c"(\080\108\18@ '\07/\0F7\17?\1F&\06.\0E6\16>\1E%\05-\0D5\15=\1D$\04,\0C4\14<\1C#\03+\0B3\13;\1B\22\02*\0A2\12:\1A!\01)\091\119\19", align 16
@E = internal constant [48 x i8] c" \01\02\03\04\05\04\05\06\07\08\09\08\09\0A\0B\0C\0D\0C\0D\0E\0F\10\11\10\11\12\13\14\15\14\15\16\17\18\19\18\19\1A\1B\1C\1D\1C\1D\1E\1F \01", align 16
@S = internal constant [8 x [64 x i8]] [[64 x i8] c"\0E\04\0D\01\02\0F\0B\08\03\0A\06\0C\05\09\00\07\00\0F\07\04\0E\02\0D\01\0A\06\0C\0B\09\05\03\08\04\01\0E\08\0D\06\02\0B\0F\0C\09\07\03\0A\05\00\0F\0C\08\02\04\09\01\07\05\0B\03\0E\0A\00\06\0D", [64 x i8] c"\0F\01\08\0E\06\0B\03\04\09\07\02\0D\0C\00\05\0A\03\0D\04\07\0F\02\08\0E\0C\00\01\0A\06\09\0B\05\00\0E\07\0B\0A\04\0D\01\05\08\0C\06\09\03\02\0F\0D\08\0A\01\03\0F\04\02\0B\06\07\0C\00\05\0E\09", [64 x i8] c"\0A\00\09\0E\06\03\0F\05\01\0D\0C\07\0B\04\02\08\0D\07\00\09\03\04\06\0A\02\08\05\0E\0C\0B\0F\01\0D\06\04\09\08\0F\03\00\0B\01\02\0C\05\0A\0E\07\01\0A\0D\00\06\09\08\07\04\0F\0E\03\0B\05\02\0C", [64 x i8] c"\07\0D\0E\03\00\06\09\0A\01\02\08\05\0B\0C\04\0F\0D\08\0B\05\06\0F\00\03\04\07\02\0C\01\0A\0E\09\0A\06\09\00\0C\0B\07\0D\0F\01\03\0E\05\02\08\04\03\0F\00\06\0A\01\0D\08\09\04\05\0B\0C\07\02\0E", [64 x i8] c"\02\0C\04\01\07\0A\0B\06\08\05\03\0F\0D\00\0E\09\0E\0B\02\0C\04\07\0D\01\05\00\0F\0A\03\09\08\06\04\02\01\0B\0A\0D\07\08\0F\09\0C\05\06\03\00\0E\0B\08\0C\07\01\0E\02\0D\06\0F\00\09\0A\04\05\03", [64 x i8] c"\0C\01\0A\0F\09\02\06\08\00\0D\03\04\0E\07\05\0B\0A\0F\04\02\07\0C\09\05\06\01\0D\0E\00\0B\03\08\09\0E\0F\05\02\08\0C\03\07\00\04\0A\01\0D\0B\06\04\03\02\0C\09\05\0F\0A\0B\0E\01\07\06\00\08\0D", [64 x i8] c"\04\0B\02\0E\0F\00\08\0D\03\0C\09\07\05\0A\06\01\0D\00\0B\07\04\09\01\0A\0E\03\05\0C\02\0F\08\06\01\04\0B\0D\0C\03\07\0E\0A\0F\06\08\00\05\09\02\06\0B\0D\08\01\04\0A\07\09\05\00\0F\0E\02\03\0C", [64 x i8] c"\0D\02\08\04\06\0F\0B\01\0A\09\03\0E\05\00\0C\07\01\0F\0D\08\0A\03\07\04\0C\05\06\0B\00\0E\09\02\07\0B\04\01\09\0C\0E\02\00\06\0A\0D\0F\03\05\08\02\01\0E\07\04\0A\08\0D\0F\0C\09\00\03\05\06\0B"], align 16
@P = internal constant [32 x i8] c"\10\07\14\15\1D\0C\1C\11\01\0F\17\1A\05\12\1F\0A\02\08\18\0E \1B\03\09\13\0D\1E\06\16\0B\04\19", align 16
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @encrypt(%struct.String* noalias sret align 4 %agg.result, i8* %key, i8* %message, i32 %len) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %message.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %ks = alloca [17 x [6 x i8]], align 16
  %padByte = alloca i8, align 1
  %i = alloca i32, align 4
  store i8* %key, i8** %key.addr, align 4
  store i8* %message, i8** %message.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = bitcast %struct.String* %agg.result to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  %1 = load i8*, i8** %key.addr, align 4
  %arraydecay = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  call void @getSubKeys(i8* %1, [6 x i8]* %arraydecay)
  %2 = load i32, i32* %len.addr, align 4
  %rem = srem i32 %2, 8
  %sub = sub nsw i32 8, %rem
  %conv = trunc i32 %sub to i8
  store i8 %conv, i8* %padByte, align 1
  %3 = load i32, i32* %len.addr, align 4
  %4 = load i8, i8* %padByte, align 1
  %conv1 = zext i8 %4 to i32
  %add = add nsw i32 %3, %conv1
  %len2 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  store i32 %add, i32* %len2, align 4
  %len3 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %5 = load i32, i32* %len3, align 4
  %call = call noalias i8* @malloc(i32 %5)
  %data = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  store i8* %call, i8** %data, align 4
  %data4 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %6 = load i8*, i8** %data4, align 4
  %7 = load i8*, i8** %message.addr, align 4
  %8 = load i32, i32* %len.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %6, i8* align 1 %7, i32 %8, i1 false)
  %data5 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %9 = load i8*, i8** %data5, align 4
  %10 = load i32, i32* %len.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %9, i32 %10
  %11 = load i8, i8* %padByte, align 1
  %12 = load i8, i8* %padByte, align 1
  %conv7 = zext i8 %12 to i32
  call void @llvm.memset.p0i8.i32(i8* align 1 %arrayidx, i8 %11, i32 %conv7, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %13 = load i32, i32* %i, align 4
  %len8 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %14 = load i32, i32* %len8, align 4
  %cmp = icmp slt i32 %13, %14
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %data10 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %15 = load i8*, i8** %data10, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds i8, i8* %15, i32 %16
  %arraydecay12 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  %data13 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %17 = load i8*, i8** %data13, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds i8, i8* %17, i32 %18
  call void @processMessage(i8* %arrayidx11, [6 x i8]* %arraydecay12, i8* %arrayidx14)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %19 = load i32, i32* %i, align 4
  %add15 = add nsw i32 %19, 8
  store i32 %add15, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define internal void @getSubKeys(i8* %key, [6 x i8]* %ks) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %ks.addr = alloca [6 x i8]*, align 4
  %c = alloca [17 x [7 x i8]], align 16
  %d = alloca [17 x [4 x i8]], align 16
  %kp = alloca [7 x i8], align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i8* %key, i8** %key.addr, align 4
  store [6 x i8]* %ks, [6 x i8]** %ks.addr, align 4
  %arraydecay = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 0
  %0 = bitcast [7 x i8]* %arraydecay to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 119, i1 false)
  %arraydecay1 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 0
  %1 = bitcast [4 x i8]* %arraydecay1 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %1, i8 0, i32 68, i1 false)
  %2 = load [6 x i8]*, [6 x i8]** %ks.addr, align 4
  %3 = bitcast [6 x i8]* %2 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 1 %3, i8 0, i32 102, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %4, 56
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay2 = getelementptr inbounds [7 x i8], [7 x i8]* %kp, i32 0, i32 0
  %5 = load i32, i32* %i, align 4
  %6 = load i8*, i8** %key.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [56 x i8], [56 x i8]* @PC1, i32 0, i32 %7
  %8 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %8 to i32
  %sub = sub nsw i32 %conv, 1
  %call = call i32 @peekBit(i8* %6, i32 %sub)
  call void @pokeBit(i8* %arraydecay2, i32 %5, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc15, %for.end
  %10 = load i32, i32* %i, align 4
  %cmp4 = icmp slt i32 %10, 28
  br i1 %cmp4, label %for.body6, label %for.end17

for.body6:                                        ; preds = %for.cond3
  %arrayidx7 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 0
  %arraydecay8 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx7, i32 0, i32 0
  %11 = load i32, i32* %i, align 4
  %arraydecay9 = getelementptr inbounds [7 x i8], [7 x i8]* %kp, i32 0, i32 0
  %12 = load i32, i32* %i, align 4
  %call10 = call i32 @peekBit(i8* %arraydecay9, i32 %12)
  call void @pokeBit(i8* %arraydecay8, i32 %11, i32 %call10)
  %arrayidx11 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 0
  %arraydecay12 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx11, i32 0, i32 0
  %13 = load i32, i32* %i, align 4
  %arraydecay13 = getelementptr inbounds [7 x i8], [7 x i8]* %kp, i32 0, i32 0
  %14 = load i32, i32* %i, align 4
  %add = add nsw i32 %14, 28
  %call14 = call i32 @peekBit(i8* %arraydecay13, i32 %add)
  call void @pokeBit(i8* %arraydecay12, i32 %13, i32 %call14)
  br label %for.inc15

for.inc15:                                        ; preds = %for.body6
  %15 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %15, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond3

for.end17:                                        ; preds = %for.cond3
  store i32 1, i32* %i, align 4
  br label %for.cond18

for.cond18:                                       ; preds = %for.inc38, %for.end17
  %16 = load i32, i32* %i, align 4
  %cmp19 = icmp slt i32 %16, 17
  br i1 %cmp19, label %for.body21, label %for.end40

for.body21:                                       ; preds = %for.cond18
  %17 = load i32, i32* %i, align 4
  %sub22 = sub nsw i32 %17, 1
  %arrayidx23 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %sub22
  %arraydecay24 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx23, i32 0, i32 0
  %18 = load i32, i32* %i, align 4
  %sub25 = sub nsw i32 %18, 1
  %arrayidx26 = getelementptr inbounds [16 x i8], [16 x i8]* @SHIFTS, i32 0, i32 %sub25
  %19 = load i8, i8* %arrayidx26, align 1
  %conv27 = zext i8 %19 to i32
  %20 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %20
  %arraydecay29 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx28, i32 0, i32 0
  call void @shiftLeft(i8* %arraydecay24, i32 28, i32 %conv27, i8* %arraydecay29)
  %21 = load i32, i32* %i, align 4
  %sub30 = sub nsw i32 %21, 1
  %arrayidx31 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 %sub30
  %arraydecay32 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx31, i32 0, i32 0
  %22 = load i32, i32* %i, align 4
  %sub33 = sub nsw i32 %22, 1
  %arrayidx34 = getelementptr inbounds [16 x i8], [16 x i8]* @SHIFTS, i32 0, i32 %sub33
  %23 = load i8, i8* %arrayidx34, align 1
  %conv35 = zext i8 %23 to i32
  %24 = load i32, i32* %i, align 4
  %arrayidx36 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 %24
  %arraydecay37 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx36, i32 0, i32 0
  call void @shiftLeft(i8* %arraydecay32, i32 28, i32 %conv35, i8* %arraydecay37)
  br label %for.inc38

for.inc38:                                        ; preds = %for.body21
  %25 = load i32, i32* %i, align 4
  %inc39 = add nsw i32 %25, 1
  store i32 %inc39, i32* %i, align 4
  br label %for.cond18

for.end40:                                        ; preds = %for.cond18
  store i32 1, i32* %i, align 4
  br label %for.cond41

for.cond41:                                       ; preds = %for.inc58, %for.end40
  %26 = load i32, i32* %i, align 4
  %cmp42 = icmp slt i32 %26, 17
  br i1 %cmp42, label %for.body44, label %for.end60

for.body44:                                       ; preds = %for.cond41
  store i32 28, i32* %j, align 4
  br label %for.cond45

for.cond45:                                       ; preds = %for.inc55, %for.body44
  %27 = load i32, i32* %j, align 4
  %cmp46 = icmp slt i32 %27, 56
  br i1 %cmp46, label %for.body48, label %for.end57

for.body48:                                       ; preds = %for.cond45
  %28 = load i32, i32* %i, align 4
  %arrayidx49 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %28
  %arraydecay50 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx49, i32 0, i32 0
  %29 = load i32, i32* %j, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx51 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 %30
  %arraydecay52 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx51, i32 0, i32 0
  %31 = load i32, i32* %j, align 4
  %sub53 = sub nsw i32 %31, 28
  %call54 = call i32 @peekBit(i8* %arraydecay52, i32 %sub53)
  call void @pokeBit(i8* %arraydecay50, i32 %29, i32 %call54)
  br label %for.inc55

for.inc55:                                        ; preds = %for.body48
  %32 = load i32, i32* %j, align 4
  %inc56 = add nsw i32 %32, 1
  store i32 %inc56, i32* %j, align 4
  br label %for.cond45

for.end57:                                        ; preds = %for.cond45
  br label %for.inc58

for.inc58:                                        ; preds = %for.end57
  %33 = load i32, i32* %i, align 4
  %inc59 = add nsw i32 %33, 1
  store i32 %inc59, i32* %i, align 4
  br label %for.cond41

for.end60:                                        ; preds = %for.cond41
  store i32 1, i32* %i, align 4
  br label %for.cond61

for.cond61:                                       ; preds = %for.inc80, %for.end60
  %34 = load i32, i32* %i, align 4
  %cmp62 = icmp slt i32 %34, 17
  br i1 %cmp62, label %for.body64, label %for.end82

for.body64:                                       ; preds = %for.cond61
  store i32 0, i32* %j, align 4
  br label %for.cond65

for.cond65:                                       ; preds = %for.inc77, %for.body64
  %35 = load i32, i32* %j, align 4
  %cmp66 = icmp slt i32 %35, 48
  br i1 %cmp66, label %for.body68, label %for.end79

for.body68:                                       ; preds = %for.cond65
  %36 = load [6 x i8]*, [6 x i8]** %ks.addr, align 4
  %37 = load i32, i32* %i, align 4
  %arrayidx69 = getelementptr inbounds [6 x i8], [6 x i8]* %36, i32 %37
  %arraydecay70 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx69, i32 0, i32 0
  %38 = load i32, i32* %j, align 4
  %39 = load i32, i32* %i, align 4
  %arrayidx71 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %39
  %arraydecay72 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx71, i32 0, i32 0
  %40 = load i32, i32* %j, align 4
  %arrayidx73 = getelementptr inbounds [48 x i8], [48 x i8]* @PC2, i32 0, i32 %40
  %41 = load i8, i8* %arrayidx73, align 1
  %conv74 = zext i8 %41 to i32
  %sub75 = sub nsw i32 %conv74, 1
  %call76 = call i32 @peekBit(i8* %arraydecay72, i32 %sub75)
  call void @pokeBit(i8* %arraydecay70, i32 %38, i32 %call76)
  br label %for.inc77

for.inc77:                                        ; preds = %for.body68
  %42 = load i32, i32* %j, align 4
  %inc78 = add nsw i32 %42, 1
  store i32 %inc78, i32* %j, align 4
  br label %for.cond65

for.end79:                                        ; preds = %for.cond65
  br label %for.inc80

for.inc80:                                        ; preds = %for.end79
  %43 = load i32, i32* %i, align 4
  %inc81 = add nsw i32 %43, 1
  store i32 %inc81, i32* %i, align 4
  br label %for.cond61

for.end82:                                        ; preds = %for.cond61
  ret void
}

declare noalias i8* @malloc(i32 %0) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: noinline nounwind optnone
define internal void @processMessage(i8* %message, [6 x i8]* %ks, i8* %ep) #0 {
entry:
  %message.addr = alloca i8*, align 4
  %ks.addr = alloca [6 x i8]*, align 4
  %ep.addr = alloca i8*, align 4
  %left = alloca [17 x [4 x i8]], align 16
  %right = alloca [17 x [4 x i8]], align 16
  %mp = alloca [8 x i8], align 1
  %e = alloca [8 x i8], align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %fs = alloca [4 x i8], align 1
  store i8* %message, i8** %message.addr, align 4
  store [6 x i8]* %ks, [6 x i8]** %ks.addr, align 4
  store i8* %ep, i8** %ep.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 64
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %mp, i32 0, i32 0
  %1 = load i32, i32* %i, align 4
  %2 = load i8*, i8** %message.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [64 x i8], [64 x i8]* @IP, i32 0, i32 %3
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %sub = sub nsw i32 %conv, 1
  %call = call i32 @peekBit(i8* %2, i32 %sub)
  call void @pokeBit(i8* %arraydecay, i32 %1, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc13, %for.end
  %6 = load i32, i32* %i, align 4
  %cmp2 = icmp slt i32 %6, 32
  br i1 %cmp2, label %for.body4, label %for.end15

for.body4:                                        ; preds = %for.cond1
  %arrayidx5 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 0
  %arraydecay6 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx5, i32 0, i32 0
  %7 = load i32, i32* %i, align 4
  %arraydecay7 = getelementptr inbounds [8 x i8], [8 x i8]* %mp, i32 0, i32 0
  %8 = load i32, i32* %i, align 4
  %call8 = call i32 @peekBit(i8* %arraydecay7, i32 %8)
  call void @pokeBit(i8* %arraydecay6, i32 %7, i32 %call8)
  %arrayidx9 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 0
  %arraydecay10 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx9, i32 0, i32 0
  %9 = load i32, i32* %i, align 4
  %arraydecay11 = getelementptr inbounds [8 x i8], [8 x i8]* %mp, i32 0, i32 0
  %10 = load i32, i32* %i, align 4
  %add = add nsw i32 %10, 32
  %call12 = call i32 @peekBit(i8* %arraydecay11, i32 %add)
  call void @pokeBit(i8* %arraydecay10, i32 %9, i32 %call12)
  br label %for.inc13

for.inc13:                                        ; preds = %for.body4
  %11 = load i32, i32* %i, align 4
  %inc14 = add nsw i32 %11, 1
  store i32 %inc14, i32* %i, align 4
  br label %for.cond1

for.end15:                                        ; preds = %for.cond1
  store i32 1, i32* %i, align 4
  br label %for.cond16

for.cond16:                                       ; preds = %for.inc50, %for.end15
  %12 = load i32, i32* %i, align 4
  %cmp17 = icmp slt i32 %12, 17
  br i1 %cmp17, label %for.body19, label %for.end52

for.body19:                                       ; preds = %for.cond16
  %13 = load i32, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 %13
  %arraydecay21 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx20, i32 0, i32 0
  %14 = load i32, i32* %i, align 4
  %sub22 = sub nsw i32 %14, 1
  %arrayidx23 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 %sub22
  %arraydecay24 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx23, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %arraydecay21, i8* align 4 %arraydecay24, i32 4, i1 false)
  %15 = load i32, i32* %i, align 4
  %sub25 = sub nsw i32 %15, 1
  %arrayidx26 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 %sub25
  %arraydecay27 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx26, i32 0, i32 0
  %16 = load [6 x i8]*, [6 x i8]** %ks.addr, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds [6 x i8], [6 x i8]* %16, i32 %17
  %arraydecay29 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx28, i32 0, i32 0
  %arraydecay30 = getelementptr inbounds [4 x i8], [4 x i8]* %fs, i32 0, i32 0
  call void @f(i8* %arraydecay27, i8* %arraydecay29, i8* %arraydecay30)
  store i32 0, i32* %j, align 4
  br label %for.cond31

for.cond31:                                       ; preds = %for.inc42, %for.body19
  %18 = load i32, i32* %j, align 4
  %cmp32 = icmp slt i32 %18, 4
  br i1 %cmp32, label %for.body34, label %for.end44

for.body34:                                       ; preds = %for.cond31
  %19 = load i32, i32* %j, align 4
  %arrayidx35 = getelementptr inbounds [4 x i8], [4 x i8]* %fs, i32 0, i32 %19
  %20 = load i8, i8* %arrayidx35, align 1
  %conv36 = zext i8 %20 to i32
  %21 = load i32, i32* %i, align 4
  %sub37 = sub nsw i32 %21, 1
  %arrayidx38 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 %sub37
  %22 = load i32, i32* %j, align 4
  %arrayidx39 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx38, i32 0, i32 %22
  %23 = load i8, i8* %arrayidx39, align 1
  %conv40 = zext i8 %23 to i32
  %xor = xor i32 %conv40, %conv36
  %conv41 = trunc i32 %xor to i8
  store i8 %conv41, i8* %arrayidx39, align 1
  br label %for.inc42

for.inc42:                                        ; preds = %for.body34
  %24 = load i32, i32* %j, align 4
  %inc43 = add nsw i32 %24, 1
  store i32 %inc43, i32* %j, align 4
  br label %for.cond31

for.end44:                                        ; preds = %for.cond31
  %25 = load i32, i32* %i, align 4
  %arrayidx45 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 %25
  %arraydecay46 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx45, i32 0, i32 0
  %26 = load i32, i32* %i, align 4
  %sub47 = sub nsw i32 %26, 1
  %arrayidx48 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 %sub47
  %arraydecay49 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx48, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %arraydecay46, i8* align 4 %arraydecay49, i32 4, i1 false)
  br label %for.inc50

for.inc50:                                        ; preds = %for.end44
  %27 = load i32, i32* %i, align 4
  %inc51 = add nsw i32 %27, 1
  store i32 %inc51, i32* %i, align 4
  br label %for.cond16

for.end52:                                        ; preds = %for.cond16
  store i32 0, i32* %i, align 4
  br label %for.cond53

for.cond53:                                       ; preds = %for.inc61, %for.end52
  %28 = load i32, i32* %i, align 4
  %cmp54 = icmp slt i32 %28, 32
  br i1 %cmp54, label %for.body56, label %for.end63

for.body56:                                       ; preds = %for.cond53
  %arraydecay57 = getelementptr inbounds [8 x i8], [8 x i8]* %e, i32 0, i32 0
  %29 = load i32, i32* %i, align 4
  %arrayidx58 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 16
  %arraydecay59 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx58, i32 0, i32 0
  %30 = load i32, i32* %i, align 4
  %call60 = call i32 @peekBit(i8* %arraydecay59, i32 %30)
  call void @pokeBit(i8* %arraydecay57, i32 %29, i32 %call60)
  br label %for.inc61

for.inc61:                                        ; preds = %for.body56
  %31 = load i32, i32* %i, align 4
  %inc62 = add nsw i32 %31, 1
  store i32 %inc62, i32* %i, align 4
  br label %for.cond53

for.end63:                                        ; preds = %for.cond53
  store i32 32, i32* %i, align 4
  br label %for.cond64

for.cond64:                                       ; preds = %for.inc73, %for.end63
  %32 = load i32, i32* %i, align 4
  %cmp65 = icmp slt i32 %32, 64
  br i1 %cmp65, label %for.body67, label %for.end75

for.body67:                                       ; preds = %for.cond64
  %arraydecay68 = getelementptr inbounds [8 x i8], [8 x i8]* %e, i32 0, i32 0
  %33 = load i32, i32* %i, align 4
  %arrayidx69 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 16
  %arraydecay70 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx69, i32 0, i32 0
  %34 = load i32, i32* %i, align 4
  %sub71 = sub nsw i32 %34, 32
  %call72 = call i32 @peekBit(i8* %arraydecay70, i32 %sub71)
  call void @pokeBit(i8* %arraydecay68, i32 %33, i32 %call72)
  br label %for.inc73

for.inc73:                                        ; preds = %for.body67
  %35 = load i32, i32* %i, align 4
  %inc74 = add nsw i32 %35, 1
  store i32 %inc74, i32* %i, align 4
  br label %for.cond64

for.end75:                                        ; preds = %for.cond64
  store i32 0, i32* %i, align 4
  br label %for.cond76

for.cond76:                                       ; preds = %for.inc85, %for.end75
  %36 = load i32, i32* %i, align 4
  %cmp77 = icmp slt i32 %36, 64
  br i1 %cmp77, label %for.body79, label %for.end87

for.body79:                                       ; preds = %for.cond76
  %37 = load i8*, i8** %ep.addr, align 4
  %38 = load i32, i32* %i, align 4
  %arraydecay80 = getelementptr inbounds [8 x i8], [8 x i8]* %e, i32 0, i32 0
  %39 = load i32, i32* %i, align 4
  %arrayidx81 = getelementptr inbounds [64 x i8], [64 x i8]* @IP2, i32 0, i32 %39
  %40 = load i8, i8* %arrayidx81, align 1
  %conv82 = zext i8 %40 to i32
  %sub83 = sub nsw i32 %conv82, 1
  %call84 = call i32 @peekBit(i8* %arraydecay80, i32 %sub83)
  call void @pokeBit(i8* %37, i32 %38, i32 %call84)
  br label %for.inc85

for.inc85:                                        ; preds = %for.body79
  %41 = load i32, i32* %i, align 4
  %inc86 = add nsw i32 %41, 1
  store i32 %inc86, i32* %i, align 4
  br label %for.cond76

for.end87:                                        ; preds = %for.cond76
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @decrypt(%struct.String* noalias sret align 4 %agg.result, i8* %key, i8* %message, i32 %len) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %message.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %ks = alloca [17 x [6 x i8]], align 16
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %padByte = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8* %key, i8** %key.addr, align 4
  store i8* %message, i8** %message.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = bitcast %struct.String* %agg.result to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  %1 = load i8*, i8** %key.addr, align 4
  %arraydecay = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  call void @getSubKeys(i8* %1, [6 x i8]* %arraydecay)
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc12, %entry
  %2 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, 9
  br i1 %cmp, label %for.body, label %for.end14

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %3, 6
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %4
  %5 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx, i32 0, i32 %5
  %6 = load i8, i8* %arrayidx4, align 1
  store i8 %6, i8* %temp, align 1
  %7 = load i32, i32* %i, align 4
  %sub = sub nsw i32 17, %7
  %arrayidx5 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %sub
  %8 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx5, i32 0, i32 %8
  %9 = load i8, i8* %arrayidx6, align 1
  %10 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %10
  %11 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx7, i32 0, i32 %11
  store i8 %9, i8* %arrayidx8, align 1
  %12 = load i8, i8* %temp, align 1
  %13 = load i32, i32* %i, align 4
  %sub9 = sub nsw i32 17, %13
  %arrayidx10 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %sub9
  %14 = load i32, i32* %j, align 4
  %arrayidx11 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx10, i32 0, i32 %14
  store i8 %12, i8* %arrayidx11, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %15 = load i32, i32* %j, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc12

for.inc12:                                        ; preds = %for.end
  %16 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %16, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond

for.end14:                                        ; preds = %for.cond
  %17 = load i32, i32* %len.addr, align 4
  %call = call noalias i8* @malloc(i32 %17)
  %data = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  store i8* %call, i8** %data, align 4
  %data15 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %18 = load i8*, i8** %data15, align 4
  %19 = load i8*, i8** %message.addr, align 4
  %20 = load i32, i32* %len.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %18, i8* align 1 %19, i32 %20, i1 false)
  %21 = load i32, i32* %len.addr, align 4
  %len16 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  store i32 %21, i32* %len16, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond17

for.cond17:                                       ; preds = %for.inc26, %for.end14
  %22 = load i32, i32* %i, align 4
  %len18 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %23 = load i32, i32* %len18, align 4
  %cmp19 = icmp slt i32 %22, %23
  br i1 %cmp19, label %for.body20, label %for.end27

for.body20:                                       ; preds = %for.cond17
  %data21 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %24 = load i8*, i8** %data21, align 4
  %25 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds i8, i8* %24, i32 %25
  %arraydecay23 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  %data24 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %26 = load i8*, i8** %data24, align 4
  %27 = load i32, i32* %i, align 4
  %arrayidx25 = getelementptr inbounds i8, i8* %26, i32 %27
  call void @processMessage(i8* %arrayidx22, [6 x i8]* %arraydecay23, i8* %arrayidx25)
  br label %for.inc26

for.inc26:                                        ; preds = %for.body20
  %28 = load i32, i32* %i, align 4
  %add = add nsw i32 %28, 8
  store i32 %add, i32* %i, align 4
  br label %for.cond17

for.end27:                                        ; preds = %for.cond17
  %data28 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %29 = load i8*, i8** %data28, align 4
  %30 = load i32, i32* %len.addr, align 4
  %sub29 = sub nsw i32 %30, 1
  %arrayidx30 = getelementptr inbounds i8, i8* %29, i32 %sub29
  %31 = load i8, i8* %arrayidx30, align 1
  store i8 %31, i8* %padByte, align 1
  %32 = load i8, i8* %padByte, align 1
  %conv = zext i8 %32 to i32
  %len31 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %33 = load i32, i32* %len31, align 4
  %sub32 = sub nsw i32 %33, %conv
  store i32 %sub32, i32* %len31, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @driver(i8* %key, i8* %message, i32 %len) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %message.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %encoded = alloca %struct.String, align 4
  %decoded = alloca %struct.String, align 4
  %buffer = alloca [128 x i8], align 16
  %tmp = alloca %struct.String, align 4
  %tmp9 = alloca %struct.String, align 4
  store i8* %key, i8** %key.addr, align 4
  store i8* %message, i8** %message.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load i8*, i8** %key.addr, align 4
  %arraydecay = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %0, i32 8, i8* %arraydecay)
  %arraydecay1 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i32 0, i32 0), i8* %arraydecay1)
  %1 = load i8*, i8** %message.addr, align 4
  %2 = load i32, i32* %len.addr, align 4
  %arraydecay2 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %1, i32 %2, i8* %arraydecay2)
  %arraydecay3 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0), i8* %arraydecay3)
  %3 = load i8*, i8** %key.addr, align 4
  %4 = load i8*, i8** %message.addr, align 4
  %5 = load i32, i32* %len.addr, align 4
  call void @encrypt(%struct.String* sret align 4 %tmp, i8* %3, i8* %4, i32 %5)
  %6 = bitcast %struct.String* %encoded to i8*
  %7 = bitcast %struct.String* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %6, i8* align 4 %7, i32 8, i1 false)
  %data = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  %8 = load i8*, i8** %data, align 4
  %len5 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 1
  %9 = load i32, i32* %len5, align 4
  %arraydecay6 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %8, i32 %9, i8* %arraydecay6)
  %arraydecay7 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0), i8* %arraydecay7)
  %10 = load i8*, i8** %key.addr, align 4
  %data10 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  %11 = load i8*, i8** %data10, align 4
  %len11 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 1
  %12 = load i32, i32* %len11, align 4
  call void @decrypt(%struct.String* sret align 4 %tmp9, i8* %10, i8* %11, i32 %12)
  %13 = bitcast %struct.String* %decoded to i8*
  %14 = bitcast %struct.String* %tmp9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %13, i8* align 4 %14, i32 8, i1 false)
  %data12 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 0
  %15 = load i8*, i8** %data12, align 4
  %len13 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 1
  %16 = load i32, i32* %len13, align 4
  %arraydecay14 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %15, i32 %16, i8* %arraydecay14)
  %arraydecay15 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0), i8* %arraydecay15)
  %len17 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 1
  %17 = load i32, i32* %len17, align 4
  %cmp = icmp sgt i32 %17, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %data18 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  %18 = load i8*, i8** %data18, align 4
  call void @free(i8* %18)
  %data19 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  store i8* null, i8** %data19, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %len20 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 1
  %19 = load i32, i32* %len20, align 4
  %cmp21 = icmp sgt i32 %19, 0
  br i1 %cmp21, label %if.then22, label %if.end25

if.then22:                                        ; preds = %if.end
  %data23 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 0
  %20 = load i8*, i8** %data23, align 4
  call void @free(i8* %20)
  %data24 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 0
  store i8* null, i8** %data24, align 4
  br label %if.end25

if.end25:                                         ; preds = %if.then22, %if.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @printBytes(i8* %ptr, i32 %len, i8* %out) #0 {
entry:
  %ptr.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  store i8* %ptr, i8** %ptr.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %len.addr, align 4
  %dec = add nsw i32 %0, -1
  store i32 %dec, i32* %len.addr, align 4
  %cmp = icmp sgt i32 %0, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i8*, i8** %ptr.addr, align 4
  %2 = load i8, i8* %1, align 1
  %conv = zext i8 %2 to i32
  %shr = ashr i32 %conv, 4
  %conv1 = trunc i32 %shr to i8
  %call = call signext i8 @toHex(i8 zeroext %conv1)
  %3 = load i8*, i8** %out.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %3, i32 1
  store i8* %incdec.ptr, i8** %out.addr, align 4
  store i8 %call, i8* %3, align 1
  %4 = load i8*, i8** %ptr.addr, align 4
  %5 = load i8, i8* %4, align 1
  %conv2 = zext i8 %5 to i32
  %and = and i32 %conv2, 15
  %conv3 = trunc i32 %and to i8
  %call4 = call signext i8 @toHex(i8 zeroext %conv3)
  %6 = load i8*, i8** %out.addr, align 4
  %incdec.ptr5 = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr5, i8** %out.addr, align 4
  store i8 %call4, i8* %6, align 1
  %7 = load i8*, i8** %ptr.addr, align 4
  %incdec.ptr6 = getelementptr inbounds i8, i8* %7, i32 1
  store i8* %incdec.ptr6, i8** %ptr.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %8 = load i8*, i8** %out.addr, align 4
  store i8 0, i8* %8, align 1
  ret void
}

declare i32 @printf(i8* %0, ...) #2

declare void @free(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %keys = alloca [3 x [8 x i8]], align 16
  %message1 = alloca [8 x i8], align 1
  %message2 = alloca [8 x i8], align 1
  %message3 = alloca [38 x i8], align 16
  %len = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [3 x [8 x i8]]* %keys to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([3 x [8 x i8]], [3 x [8 x i8]]* @__const.main.keys, i32 0, i32 0, i32 0), i32 24, i1 false)
  %1 = bitcast [8 x i8]* %message1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %1, i8* align 1 getelementptr inbounds ([8 x i8], [8 x i8]* @__const.main.message1, i32 0, i32 0), i32 8, i1 false)
  %2 = bitcast [8 x i8]* %message2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %2, i8* align 1 getelementptr inbounds ([8 x i8], [8 x i8]* @__const.main.message2, i32 0, i32 0), i32 8, i1 false)
  %3 = bitcast [38 x i8]* %message3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %3, i8* align 16 getelementptr inbounds ([38 x i8], [38 x i8]* @__const.main.message3, i32 0, i32 0), i32 38, i1 false)
  store i32 8, i32* %len, align 4
  %arrayidx = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* %keys, i32 0, i32 0
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %arrayidx, i32 0, i32 0
  %arraydecay1 = getelementptr inbounds [8 x i8], [8 x i8]* %message1, i32 0, i32 0
  %4 = load i32, i32* %len, align 4
  call void @driver(i8* %arraydecay, i8* %arraydecay1, i32 %4)
  store i32 8, i32* %len, align 4
  %arrayidx2 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* %keys, i32 0, i32 1
  %arraydecay3 = getelementptr inbounds [8 x i8], [8 x i8]* %arrayidx2, i32 0, i32 0
  %arraydecay4 = getelementptr inbounds [8 x i8], [8 x i8]* %message2, i32 0, i32 0
  %5 = load i32, i32* %len, align 4
  call void @driver(i8* %arraydecay3, i8* %arraydecay4, i32 %5)
  store i32 38, i32* %len, align 4
  %arrayidx5 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* %keys, i32 0, i32 2
  %arraydecay6 = getelementptr inbounds [8 x i8], [8 x i8]* %arrayidx5, i32 0, i32 0
  %arraydecay7 = getelementptr inbounds [38 x i8], [38 x i8]* %message3, i32 0, i32 0
  %6 = load i32, i32* %len, align 4
  call void @driver(i8* %arraydecay6, i8* %arraydecay7, i32 %6)
  ret i32 0
}

; Function Attrs: noinline nounwind optnone
define internal void @pokeBit(i8* %dst, i32 %index, i32 %value) #0 {
entry:
  %dst.addr = alloca i8*, align 4
  %index.addr = alloca i32, align 4
  %value.addr = alloca i32, align 4
  %cell = alloca i32, align 4
  %bit = alloca i32, align 4
  store i8* %dst, i8** %dst.addr, align 4
  store i32 %index, i32* %index.addr, align 4
  store i32 %value, i32* %value.addr, align 4
  %0 = load i32, i32* %index.addr, align 4
  %div = sdiv i32 %0, 8
  store i32 %div, i32* %cell, align 4
  %1 = load i32, i32* %index.addr, align 4
  %rem = srem i32 %1, 8
  %sub = sub nsw i32 7, %rem
  store i32 %sub, i32* %bit, align 4
  %2 = load i32, i32* %value.addr, align 4
  %cmp = icmp eq i32 %2, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %bit, align 4
  %shl = shl i32 1, %3
  %neg = xor i32 %shl, -1
  %4 = load i8*, i8** %dst.addr, align 4
  %5 = load i32, i32* %cell, align 4
  %arrayidx = getelementptr inbounds i8, i8* %4, i32 %5
  %6 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %6 to i32
  %and = and i32 %conv, %neg
  %conv1 = trunc i32 %and to i8
  store i8 %conv1, i8* %arrayidx, align 1
  br label %if.end

if.else:                                          ; preds = %entry
  %7 = load i32, i32* %bit, align 4
  %shl2 = shl i32 1, %7
  %8 = load i8*, i8** %dst.addr, align 4
  %9 = load i32, i32* %cell, align 4
  %arrayidx3 = getelementptr inbounds i8, i8* %8, i32 %9
  %10 = load i8, i8* %arrayidx3, align 1
  %conv4 = zext i8 %10 to i32
  %or = or i32 %conv4, %shl2
  %conv5 = trunc i32 %or to i8
  store i8 %conv5, i8* %arrayidx3, align 1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i32 @peekBit(i8* %src, i32 %index) #0 {
entry:
  %src.addr = alloca i8*, align 4
  %index.addr = alloca i32, align 4
  %cell = alloca i32, align 4
  %bit = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 4
  store i32 %index, i32* %index.addr, align 4
  %0 = load i32, i32* %index.addr, align 4
  %div = sdiv i32 %0, 8
  store i32 %div, i32* %cell, align 4
  %1 = load i32, i32* %index.addr, align 4
  %rem = srem i32 %1, 8
  %sub = sub nsw i32 7, %rem
  store i32 %sub, i32* %bit, align 4
  %2 = load i8*, i8** %src.addr, align 4
  %3 = load i32, i32* %cell, align 4
  %arrayidx = getelementptr inbounds i8, i8* %2, i32 %3
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %5 = load i32, i32* %bit, align 4
  %shl = shl i32 1, %5
  %and = and i32 %conv, %shl
  %cmp = icmp ne i32 %and, 0
  %conv1 = zext i1 %cmp to i32
  ret i32 %conv1
}

; Function Attrs: noinline nounwind optnone
define internal void @shiftLeft(i8* %src, i32 %len, i32 %times, i8* %dst) #0 {
entry:
  %src.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %times.addr = alloca i32, align 4
  %dst.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %t = alloca i32, align 4
  %temp = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %times, i32* %times.addr, align 4
  store i8* %dst, i8** %dst.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp sle i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8*, i8** %dst.addr, align 4
  %3 = load i32, i32* %i, align 4
  %4 = load i8*, i8** %src.addr, align 4
  %5 = load i32, i32* %i, align 4
  %call = call i32 @peekBit(i8* %4, i32 %5)
  call void @pokeBit(i8* %2, i32 %3, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %t, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc13, %for.end
  %7 = load i32, i32* %t, align 4
  %8 = load i32, i32* %times.addr, align 4
  %cmp2 = icmp sle i32 %7, %8
  br i1 %cmp2, label %for.body3, label %for.end15

for.body3:                                        ; preds = %for.cond1
  %9 = load i8*, i8** %dst.addr, align 4
  %call4 = call i32 @peekBit(i8* %9, i32 0)
  store i32 %call4, i32* %temp, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc9, %for.body3
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %len.addr, align 4
  %cmp6 = icmp sle i32 %10, %11
  br i1 %cmp6, label %for.body7, label %for.end11

for.body7:                                        ; preds = %for.cond5
  %12 = load i8*, i8** %dst.addr, align 4
  %13 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %13, 1
  %14 = load i8*, i8** %dst.addr, align 4
  %15 = load i32, i32* %i, align 4
  %call8 = call i32 @peekBit(i8* %14, i32 %15)
  call void @pokeBit(i8* %12, i32 %sub, i32 %call8)
  br label %for.inc9

for.inc9:                                         ; preds = %for.body7
  %16 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %16, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond5

for.end11:                                        ; preds = %for.cond5
  %17 = load i8*, i8** %dst.addr, align 4
  %18 = load i32, i32* %len.addr, align 4
  %sub12 = sub nsw i32 %18, 1
  %19 = load i32, i32* %temp, align 4
  call void @pokeBit(i8* %17, i32 %sub12, i32 %19)
  br label %for.inc13

for.inc13:                                        ; preds = %for.end11
  %20 = load i32, i32* %t, align 4
  %inc14 = add nsw i32 %20, 1
  store i32 %inc14, i32* %t, align 4
  br label %for.cond1

for.end15:                                        ; preds = %for.cond1
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @f(i8* %r, i8* %ks, i8* %sp) #0 {
entry:
  %r.addr = alloca i8*, align 4
  %ks.addr = alloca i8*, align 4
  %sp.addr = alloca i8*, align 4
  %er = alloca [6 x i8], align 1
  %sr = alloca [4 x i8], align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %b = alloca [6 x i32], align 16
  %k = alloca i32, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %m = alloca i32, align 4
  %n = alloca i32, align 4
  %p = alloca i32, align 4
  store i8* %r, i8** %r.addr, align 4
  store i8* %ks, i8** %ks.addr, align 4
  store i8* %sp, i8** %sp.addr, align 4
  %arraydecay = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  call void @llvm.memset.p0i8.i32(i8* align 1 %arraydecay, i8 0, i32 6, i1 false)
  %arraydecay1 = getelementptr inbounds [4 x i8], [4 x i8]* %sr, i32 0, i32 0
  call void @llvm.memset.p0i8.i32(i8* align 1 %arraydecay1, i8 0, i32 4, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 48
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay2 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  %1 = load i32, i32* %i, align 4
  %2 = load i8*, i8** %r.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [48 x i8], [48 x i8]* @E, i32 0, i32 %3
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %sub = sub nsw i32 %conv, 1
  %call = call i32 @peekBit(i8* %2, i32 %sub)
  call void @pokeBit(i8* %arraydecay2, i32 %1, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc12, %for.end
  %6 = load i32, i32* %i, align 4
  %cmp4 = icmp slt i32 %6, 6
  br i1 %cmp4, label %for.body6, label %for.end14

for.body6:                                        ; preds = %for.cond3
  %7 = load i8*, i8** %ks.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds i8, i8* %7, i32 %8
  %9 = load i8, i8* %arrayidx7, align 1
  %conv8 = zext i8 %9 to i32
  %10 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 %10
  %11 = load i8, i8* %arrayidx9, align 1
  %conv10 = zext i8 %11 to i32
  %xor = xor i32 %conv10, %conv8
  %conv11 = trunc i32 %xor to i8
  store i8 %conv11, i8* %arrayidx9, align 1
  br label %for.inc12

for.inc12:                                        ; preds = %for.body6
  %12 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %12, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond3

for.end14:                                        ; preds = %for.cond3
  store i32 0, i32* %i, align 4
  br label %for.cond15

for.cond15:                                       ; preds = %for.inc59, %for.end14
  %13 = load i32, i32* %i, align 4
  %cmp16 = icmp slt i32 %13, 8
  br i1 %cmp16, label %for.body18, label %for.end61

for.body18:                                       ; preds = %for.cond15
  %14 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %14, 6
  store i32 %mul, i32* %j, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond19

for.cond19:                                       ; preds = %for.inc28, %for.body18
  %15 = load i32, i32* %k, align 4
  %cmp20 = icmp slt i32 %15, 6
  br i1 %cmp20, label %for.body22, label %for.end30

for.body22:                                       ; preds = %for.cond19
  %arraydecay23 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  %16 = load i32, i32* %j, align 4
  %17 = load i32, i32* %k, align 4
  %add = add nsw i32 %16, %17
  %call24 = call i32 @peekBit(i8* %arraydecay23, i32 %add)
  %cmp25 = icmp ne i32 %call24, 0
  %18 = zext i1 %cmp25 to i64
  %cond = select i1 %cmp25, i32 1, i32 0
  %19 = load i32, i32* %k, align 4
  %arrayidx27 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 %19
  store i32 %cond, i32* %arrayidx27, align 4
  br label %for.inc28

for.inc28:                                        ; preds = %for.body22
  %20 = load i32, i32* %k, align 4
  %inc29 = add nsw i32 %20, 1
  store i32 %inc29, i32* %k, align 4
  br label %for.cond19

for.end30:                                        ; preds = %for.cond19
  %arrayidx31 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 0
  %21 = load i32, i32* %arrayidx31, align 16
  %mul32 = mul nsw i32 2, %21
  %arrayidx33 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 5
  %22 = load i32, i32* %arrayidx33, align 4
  %add34 = add nsw i32 %mul32, %22
  store i32 %add34, i32* %row, align 4
  %arrayidx35 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 1
  %23 = load i32, i32* %arrayidx35, align 4
  %mul36 = mul nsw i32 8, %23
  %arrayidx37 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 2
  %24 = load i32, i32* %arrayidx37, align 8
  %mul38 = mul nsw i32 4, %24
  %add39 = add nsw i32 %mul36, %mul38
  %arrayidx40 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 3
  %25 = load i32, i32* %arrayidx40, align 4
  %mul41 = mul nsw i32 2, %25
  %add42 = add nsw i32 %add39, %mul41
  %arrayidx43 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 4
  %26 = load i32, i32* %arrayidx43, align 16
  %add44 = add nsw i32 %add42, %26
  store i32 %add44, i32* %col, align 4
  %27 = load i32, i32* %i, align 4
  %arrayidx45 = getelementptr inbounds [8 x [64 x i8]], [8 x [64 x i8]]* @S, i32 0, i32 %27
  %28 = load i32, i32* %row, align 4
  %mul46 = mul nsw i32 %28, 16
  %29 = load i32, i32* %col, align 4
  %add47 = add nsw i32 %mul46, %29
  %arrayidx48 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx45, i32 0, i32 %add47
  %30 = load i8, i8* %arrayidx48, align 1
  %conv49 = zext i8 %30 to i32
  store i32 %conv49, i32* %m, align 4
  store i32 1, i32* %n, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end30
  %31 = load i32, i32* %m, align 4
  %cmp50 = icmp sgt i32 %31, 0
  br i1 %cmp50, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %32 = load i32, i32* %m, align 4
  %rem = srem i32 %32, 2
  store i32 %rem, i32* %p, align 4
  %arraydecay52 = getelementptr inbounds [4 x i8], [4 x i8]* %sr, i32 0, i32 0
  %33 = load i32, i32* %i, align 4
  %add53 = add nsw i32 %33, 1
  %mul54 = mul nsw i32 %add53, 4
  %34 = load i32, i32* %n, align 4
  %sub55 = sub nsw i32 %mul54, %34
  %35 = load i32, i32* %p, align 4
  %cmp56 = icmp eq i32 %35, 1
  %conv57 = zext i1 %cmp56 to i32
  call void @pokeBit(i8* %arraydecay52, i32 %sub55, i32 %conv57)
  %36 = load i32, i32* %m, align 4
  %div = sdiv i32 %36, 2
  store i32 %div, i32* %m, align 4
  %37 = load i32, i32* %n, align 4
  %inc58 = add nsw i32 %37, 1
  store i32 %inc58, i32* %n, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %for.inc59

for.inc59:                                        ; preds = %while.end
  %38 = load i32, i32* %i, align 4
  %inc60 = add nsw i32 %38, 1
  store i32 %inc60, i32* %i, align 4
  br label %for.cond15

for.end61:                                        ; preds = %for.cond15
  store i32 0, i32* %i, align 4
  br label %for.cond62

for.cond62:                                       ; preds = %for.inc71, %for.end61
  %39 = load i32, i32* %i, align 4
  %cmp63 = icmp slt i32 %39, 32
  br i1 %cmp63, label %for.body65, label %for.end73

for.body65:                                       ; preds = %for.cond62
  %40 = load i8*, i8** %sp.addr, align 4
  %41 = load i32, i32* %i, align 4
  %arraydecay66 = getelementptr inbounds [4 x i8], [4 x i8]* %sr, i32 0, i32 0
  %42 = load i32, i32* %i, align 4
  %arrayidx67 = getelementptr inbounds [32 x i8], [32 x i8]* @P, i32 0, i32 %42
  %43 = load i8, i8* %arrayidx67, align 1
  %conv68 = zext i8 %43 to i32
  %sub69 = sub nsw i32 %conv68, 1
  %call70 = call i32 @peekBit(i8* %arraydecay66, i32 %sub69)
  call void @pokeBit(i8* %40, i32 %41, i32 %call70)
  br label %for.inc71

for.inc71:                                        ; preds = %for.body65
  %44 = load i32, i32* %i, align 4
  %inc72 = add nsw i32 %44, 1
  store i32 %inc72, i32* %i, align 4
  br label %for.cond62

for.end73:                                        ; preds = %for.cond62
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal signext i8 @toHex(i8 zeroext %in) #0 {
entry:
  %retval = alloca i8, align 1
  %in.addr = alloca i8, align 1
  store i8 %in, i8* %in.addr, align 1
  %0 = load i8, i8* %in.addr, align 1
  %conv = zext i8 %0 to i32
  %cmp = icmp sle i32 0, %conv
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i8, i8* %in.addr, align 1
  %conv2 = zext i8 %1 to i32
  %cmp3 = icmp slt i32 %conv2, 10
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %2 = load i8, i8* %in.addr, align 1
  %conv5 = zext i8 %2 to i32
  %add = add nsw i32 48, %conv5
  %conv6 = trunc i32 %add to i8
  store i8 %conv6, i8* %retval, align 1
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %3 = load i8, i8* %in.addr, align 1
  %conv7 = zext i8 %3 to i32
  %cmp8 = icmp sle i32 10, %conv7
  br i1 %cmp8, label %land.lhs.true10, label %if.end18

land.lhs.true10:                                  ; preds = %if.end
  %4 = load i8, i8* %in.addr, align 1
  %conv11 = zext i8 %4 to i32
  %cmp12 = icmp sle i32 %conv11, 15
  br i1 %cmp12, label %if.then14, label %if.end18

if.then14:                                        ; preds = %land.lhs.true10
  %5 = load i8, i8* %in.addr, align 1
  %conv15 = zext i8 %5 to i32
  %add16 = add nsw i32 65, %conv15
  %sub = sub nsw i32 %add16, 10
  %conv17 = trunc i32 %sub to i8
  store i8 %conv17, i8* %retval, align 1
  br label %return

if.end18:                                         ; preds = %land.lhs.true10, %if.end
  store i8 0, i8* %retval, align 1
  br label %return

return:                                           ; preds = %if.end18, %if.then14, %if.then
  %6 = load i8, i8* %retval, align 1
  ret i8 %6
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %len5, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %len11, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %len13, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %len17, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sgt i32 %17, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %len20, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp21 = icmp sgt i32 %19, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 0:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for driver()

; entering Souper's runOnFunction() for ./Data_Encryption_Standard.c.bc:printBytes()

; ModuleID = './Data_Encryption_Standard.c.bc'
source_filename = "./Data_Encryption_Standard.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.String = type { i8*, i32 }

@.str = private unnamed_addr constant [14 x i8] c"Key     : %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"Message : %s\0A\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"Encoded : %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"Decoded : %s\0A\0A\00", align 1
@__const.main.keys = private unnamed_addr constant [3 x [8 x i8]] [[8 x i8] c"\134Wy\9B\BC\DF\F1", [8 x i8] c"\0E2\922\EAm\0Ds", [8 x i8] c"\0E2\922\EAm\0Ds"], align 16
@__const.main.message1 = private unnamed_addr constant [8 x i8] c"\01#Eg\89\AB\CD\EF", align 1
@__const.main.message2 = private unnamed_addr constant [8 x i8] c"\87\87\87\87\87\87\87\87", align 1
@__const.main.message3 = private unnamed_addr constant [38 x i8] c"Your lips are smoother than vaseline\0D\0A", align 16
@PC1 = internal constant [56 x i8] c"91)!\19\11\09\01:2*\22\1A\12\0A\02;3+#\1B\13\0B\03<4,$?7/'\1F\17\0F\07>6.&\1E\16\0E\06=5-%\1D\15\0D\05\1C\14\0C\04", align 16
@SHIFTS = internal constant [16 x i8] c"\01\01\02\02\02\02\02\02\01\02\02\02\02\02\02\01", align 16
@PC2 = internal constant [48 x i8] c"\0E\11\0B\18\01\05\03\1C\0F\06\15\0A\17\13\0C\04\1A\08\10\07\1B\14\0D\02)4\1F%/7\1E(3-!0,1'8\225.*2$\1D ", align 16
@IP = internal constant [64 x i8] c":2*\22\1A\12\0A\02<4,$\1C\14\0C\04>6.&\1E\16\0E\06@80( \18\10\0891)!\19\11\09\01;3+#\1B\13\0B\03=5-%\1D\15\0D\05?7/'\1F\17\0F\07", align 16
@IP2 = internal constant [64 x i8] c"(\080\108\18@ '\07/\0F7\17?\1F&\06.\0E6\16>\1E%\05-\0D5\15=\1D$\04,\0C4\14<\1C#\03+\0B3\13;\1B\22\02*\0A2\12:\1A!\01)\091\119\19", align 16
@E = internal constant [48 x i8] c" \01\02\03\04\05\04\05\06\07\08\09\08\09\0A\0B\0C\0D\0C\0D\0E\0F\10\11\10\11\12\13\14\15\14\15\16\17\18\19\18\19\1A\1B\1C\1D\1C\1D\1E\1F \01", align 16
@S = internal constant [8 x [64 x i8]] [[64 x i8] c"\0E\04\0D\01\02\0F\0B\08\03\0A\06\0C\05\09\00\07\00\0F\07\04\0E\02\0D\01\0A\06\0C\0B\09\05\03\08\04\01\0E\08\0D\06\02\0B\0F\0C\09\07\03\0A\05\00\0F\0C\08\02\04\09\01\07\05\0B\03\0E\0A\00\06\0D", [64 x i8] c"\0F\01\08\0E\06\0B\03\04\09\07\02\0D\0C\00\05\0A\03\0D\04\07\0F\02\08\0E\0C\00\01\0A\06\09\0B\05\00\0E\07\0B\0A\04\0D\01\05\08\0C\06\09\03\02\0F\0D\08\0A\01\03\0F\04\02\0B\06\07\0C\00\05\0E\09", [64 x i8] c"\0A\00\09\0E\06\03\0F\05\01\0D\0C\07\0B\04\02\08\0D\07\00\09\03\04\06\0A\02\08\05\0E\0C\0B\0F\01\0D\06\04\09\08\0F\03\00\0B\01\02\0C\05\0A\0E\07\01\0A\0D\00\06\09\08\07\04\0F\0E\03\0B\05\02\0C", [64 x i8] c"\07\0D\0E\03\00\06\09\0A\01\02\08\05\0B\0C\04\0F\0D\08\0B\05\06\0F\00\03\04\07\02\0C\01\0A\0E\09\0A\06\09\00\0C\0B\07\0D\0F\01\03\0E\05\02\08\04\03\0F\00\06\0A\01\0D\08\09\04\05\0B\0C\07\02\0E", [64 x i8] c"\02\0C\04\01\07\0A\0B\06\08\05\03\0F\0D\00\0E\09\0E\0B\02\0C\04\07\0D\01\05\00\0F\0A\03\09\08\06\04\02\01\0B\0A\0D\07\08\0F\09\0C\05\06\03\00\0E\0B\08\0C\07\01\0E\02\0D\06\0F\00\09\0A\04\05\03", [64 x i8] c"\0C\01\0A\0F\09\02\06\08\00\0D\03\04\0E\07\05\0B\0A\0F\04\02\07\0C\09\05\06\01\0D\0E\00\0B\03\08\09\0E\0F\05\02\08\0C\03\07\00\04\0A\01\0D\0B\06\04\03\02\0C\09\05\0F\0A\0B\0E\01\07\06\00\08\0D", [64 x i8] c"\04\0B\02\0E\0F\00\08\0D\03\0C\09\07\05\0A\06\01\0D\00\0B\07\04\09\01\0A\0E\03\05\0C\02\0F\08\06\01\04\0B\0D\0C\03\07\0E\0A\0F\06\08\00\05\09\02\06\0B\0D\08\01\04\0A\07\09\05\00\0F\0E\02\03\0C", [64 x i8] c"\0D\02\08\04\06\0F\0B\01\0A\09\03\0E\05\00\0C\07\01\0F\0D\08\0A\03\07\04\0C\05\06\0B\00\0E\09\02\07\0B\04\01\09\0C\0E\02\00\06\0A\0D\0F\03\05\08\02\01\0E\07\04\0A\08\0D\0F\0C\09\00\03\05\06\0B"], align 16
@P = internal constant [32 x i8] c"\10\07\14\15\1D\0C\1C\11\01\0F\17\1A\05\12\1F\0A\02\08\18\0E \1B\03\09\13\0D\1E\06\16\0B\04\19", align 16
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @encrypt(%struct.String* noalias sret align 4 %agg.result, i8* %key, i8* %message, i32 %len) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %message.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %ks = alloca [17 x [6 x i8]], align 16
  %padByte = alloca i8, align 1
  %i = alloca i32, align 4
  store i8* %key, i8** %key.addr, align 4
  store i8* %message, i8** %message.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = bitcast %struct.String* %agg.result to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  %1 = load i8*, i8** %key.addr, align 4
  %arraydecay = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  call void @getSubKeys(i8* %1, [6 x i8]* %arraydecay)
  %2 = load i32, i32* %len.addr, align 4
  %rem = srem i32 %2, 8
  %sub = sub nsw i32 8, %rem
  %conv = trunc i32 %sub to i8
  store i8 %conv, i8* %padByte, align 1
  %3 = load i32, i32* %len.addr, align 4
  %4 = load i8, i8* %padByte, align 1
  %conv1 = zext i8 %4 to i32
  %add = add nsw i32 %3, %conv1
  %len2 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  store i32 %add, i32* %len2, align 4
  %len3 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %5 = load i32, i32* %len3, align 4
  %call = call noalias i8* @malloc(i32 %5)
  %data = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  store i8* %call, i8** %data, align 4
  %data4 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %6 = load i8*, i8** %data4, align 4
  %7 = load i8*, i8** %message.addr, align 4
  %8 = load i32, i32* %len.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %6, i8* align 1 %7, i32 %8, i1 false)
  %data5 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %9 = load i8*, i8** %data5, align 4
  %10 = load i32, i32* %len.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %9, i32 %10
  %11 = load i8, i8* %padByte, align 1
  %12 = load i8, i8* %padByte, align 1
  %conv7 = zext i8 %12 to i32
  call void @llvm.memset.p0i8.i32(i8* align 1 %arrayidx, i8 %11, i32 %conv7, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %13 = load i32, i32* %i, align 4
  %len8 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %14 = load i32, i32* %len8, align 4
  %cmp = icmp slt i32 %13, %14
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %data10 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %15 = load i8*, i8** %data10, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds i8, i8* %15, i32 %16
  %arraydecay12 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  %data13 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %17 = load i8*, i8** %data13, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds i8, i8* %17, i32 %18
  call void @processMessage(i8* %arrayidx11, [6 x i8]* %arraydecay12, i8* %arrayidx14)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %19 = load i32, i32* %i, align 4
  %add15 = add nsw i32 %19, 8
  store i32 %add15, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define internal void @getSubKeys(i8* %key, [6 x i8]* %ks) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %ks.addr = alloca [6 x i8]*, align 4
  %c = alloca [17 x [7 x i8]], align 16
  %d = alloca [17 x [4 x i8]], align 16
  %kp = alloca [7 x i8], align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i8* %key, i8** %key.addr, align 4
  store [6 x i8]* %ks, [6 x i8]** %ks.addr, align 4
  %arraydecay = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 0
  %0 = bitcast [7 x i8]* %arraydecay to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 119, i1 false)
  %arraydecay1 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 0
  %1 = bitcast [4 x i8]* %arraydecay1 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %1, i8 0, i32 68, i1 false)
  %2 = load [6 x i8]*, [6 x i8]** %ks.addr, align 4
  %3 = bitcast [6 x i8]* %2 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 1 %3, i8 0, i32 102, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %4, 56
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay2 = getelementptr inbounds [7 x i8], [7 x i8]* %kp, i32 0, i32 0
  %5 = load i32, i32* %i, align 4
  %6 = load i8*, i8** %key.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [56 x i8], [56 x i8]* @PC1, i32 0, i32 %7
  %8 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %8 to i32
  %sub = sub nsw i32 %conv, 1
  %call = call i32 @peekBit(i8* %6, i32 %sub)
  call void @pokeBit(i8* %arraydecay2, i32 %5, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc15, %for.end
  %10 = load i32, i32* %i, align 4
  %cmp4 = icmp slt i32 %10, 28
  br i1 %cmp4, label %for.body6, label %for.end17

for.body6:                                        ; preds = %for.cond3
  %arrayidx7 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 0
  %arraydecay8 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx7, i32 0, i32 0
  %11 = load i32, i32* %i, align 4
  %arraydecay9 = getelementptr inbounds [7 x i8], [7 x i8]* %kp, i32 0, i32 0
  %12 = load i32, i32* %i, align 4
  %call10 = call i32 @peekBit(i8* %arraydecay9, i32 %12)
  call void @pokeBit(i8* %arraydecay8, i32 %11, i32 %call10)
  %arrayidx11 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 0
  %arraydecay12 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx11, i32 0, i32 0
  %13 = load i32, i32* %i, align 4
  %arraydecay13 = getelementptr inbounds [7 x i8], [7 x i8]* %kp, i32 0, i32 0
  %14 = load i32, i32* %i, align 4
  %add = add nsw i32 %14, 28
  %call14 = call i32 @peekBit(i8* %arraydecay13, i32 %add)
  call void @pokeBit(i8* %arraydecay12, i32 %13, i32 %call14)
  br label %for.inc15

for.inc15:                                        ; preds = %for.body6
  %15 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %15, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond3

for.end17:                                        ; preds = %for.cond3
  store i32 1, i32* %i, align 4
  br label %for.cond18

for.cond18:                                       ; preds = %for.inc38, %for.end17
  %16 = load i32, i32* %i, align 4
  %cmp19 = icmp slt i32 %16, 17
  br i1 %cmp19, label %for.body21, label %for.end40

for.body21:                                       ; preds = %for.cond18
  %17 = load i32, i32* %i, align 4
  %sub22 = sub nsw i32 %17, 1
  %arrayidx23 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %sub22
  %arraydecay24 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx23, i32 0, i32 0
  %18 = load i32, i32* %i, align 4
  %sub25 = sub nsw i32 %18, 1
  %arrayidx26 = getelementptr inbounds [16 x i8], [16 x i8]* @SHIFTS, i32 0, i32 %sub25
  %19 = load i8, i8* %arrayidx26, align 1
  %conv27 = zext i8 %19 to i32
  %20 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %20
  %arraydecay29 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx28, i32 0, i32 0
  call void @shiftLeft(i8* %arraydecay24, i32 28, i32 %conv27, i8* %arraydecay29)
  %21 = load i32, i32* %i, align 4
  %sub30 = sub nsw i32 %21, 1
  %arrayidx31 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 %sub30
  %arraydecay32 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx31, i32 0, i32 0
  %22 = load i32, i32* %i, align 4
  %sub33 = sub nsw i32 %22, 1
  %arrayidx34 = getelementptr inbounds [16 x i8], [16 x i8]* @SHIFTS, i32 0, i32 %sub33
  %23 = load i8, i8* %arrayidx34, align 1
  %conv35 = zext i8 %23 to i32
  %24 = load i32, i32* %i, align 4
  %arrayidx36 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 %24
  %arraydecay37 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx36, i32 0, i32 0
  call void @shiftLeft(i8* %arraydecay32, i32 28, i32 %conv35, i8* %arraydecay37)
  br label %for.inc38

for.inc38:                                        ; preds = %for.body21
  %25 = load i32, i32* %i, align 4
  %inc39 = add nsw i32 %25, 1
  store i32 %inc39, i32* %i, align 4
  br label %for.cond18

for.end40:                                        ; preds = %for.cond18
  store i32 1, i32* %i, align 4
  br label %for.cond41

for.cond41:                                       ; preds = %for.inc58, %for.end40
  %26 = load i32, i32* %i, align 4
  %cmp42 = icmp slt i32 %26, 17
  br i1 %cmp42, label %for.body44, label %for.end60

for.body44:                                       ; preds = %for.cond41
  store i32 28, i32* %j, align 4
  br label %for.cond45

for.cond45:                                       ; preds = %for.inc55, %for.body44
  %27 = load i32, i32* %j, align 4
  %cmp46 = icmp slt i32 %27, 56
  br i1 %cmp46, label %for.body48, label %for.end57

for.body48:                                       ; preds = %for.cond45
  %28 = load i32, i32* %i, align 4
  %arrayidx49 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %28
  %arraydecay50 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx49, i32 0, i32 0
  %29 = load i32, i32* %j, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx51 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 %30
  %arraydecay52 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx51, i32 0, i32 0
  %31 = load i32, i32* %j, align 4
  %sub53 = sub nsw i32 %31, 28
  %call54 = call i32 @peekBit(i8* %arraydecay52, i32 %sub53)
  call void @pokeBit(i8* %arraydecay50, i32 %29, i32 %call54)
  br label %for.inc55

for.inc55:                                        ; preds = %for.body48
  %32 = load i32, i32* %j, align 4
  %inc56 = add nsw i32 %32, 1
  store i32 %inc56, i32* %j, align 4
  br label %for.cond45

for.end57:                                        ; preds = %for.cond45
  br label %for.inc58

for.inc58:                                        ; preds = %for.end57
  %33 = load i32, i32* %i, align 4
  %inc59 = add nsw i32 %33, 1
  store i32 %inc59, i32* %i, align 4
  br label %for.cond41

for.end60:                                        ; preds = %for.cond41
  store i32 1, i32* %i, align 4
  br label %for.cond61

for.cond61:                                       ; preds = %for.inc80, %for.end60
  %34 = load i32, i32* %i, align 4
  %cmp62 = icmp slt i32 %34, 17
  br i1 %cmp62, label %for.body64, label %for.end82

for.body64:                                       ; preds = %for.cond61
  store i32 0, i32* %j, align 4
  br label %for.cond65

for.cond65:                                       ; preds = %for.inc77, %for.body64
  %35 = load i32, i32* %j, align 4
  %cmp66 = icmp slt i32 %35, 48
  br i1 %cmp66, label %for.body68, label %for.end79

for.body68:                                       ; preds = %for.cond65
  %36 = load [6 x i8]*, [6 x i8]** %ks.addr, align 4
  %37 = load i32, i32* %i, align 4
  %arrayidx69 = getelementptr inbounds [6 x i8], [6 x i8]* %36, i32 %37
  %arraydecay70 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx69, i32 0, i32 0
  %38 = load i32, i32* %j, align 4
  %39 = load i32, i32* %i, align 4
  %arrayidx71 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %39
  %arraydecay72 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx71, i32 0, i32 0
  %40 = load i32, i32* %j, align 4
  %arrayidx73 = getelementptr inbounds [48 x i8], [48 x i8]* @PC2, i32 0, i32 %40
  %41 = load i8, i8* %arrayidx73, align 1
  %conv74 = zext i8 %41 to i32
  %sub75 = sub nsw i32 %conv74, 1
  %call76 = call i32 @peekBit(i8* %arraydecay72, i32 %sub75)
  call void @pokeBit(i8* %arraydecay70, i32 %38, i32 %call76)
  br label %for.inc77

for.inc77:                                        ; preds = %for.body68
  %42 = load i32, i32* %j, align 4
  %inc78 = add nsw i32 %42, 1
  store i32 %inc78, i32* %j, align 4
  br label %for.cond65

for.end79:                                        ; preds = %for.cond65
  br label %for.inc80

for.inc80:                                        ; preds = %for.end79
  %43 = load i32, i32* %i, align 4
  %inc81 = add nsw i32 %43, 1
  store i32 %inc81, i32* %i, align 4
  br label %for.cond61

for.end82:                                        ; preds = %for.cond61
  ret void
}

declare noalias i8* @malloc(i32 %0) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: noinline nounwind optnone
define internal void @processMessage(i8* %message, [6 x i8]* %ks, i8* %ep) #0 {
entry:
  %message.addr = alloca i8*, align 4
  %ks.addr = alloca [6 x i8]*, align 4
  %ep.addr = alloca i8*, align 4
  %left = alloca [17 x [4 x i8]], align 16
  %right = alloca [17 x [4 x i8]], align 16
  %mp = alloca [8 x i8], align 1
  %e = alloca [8 x i8], align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %fs = alloca [4 x i8], align 1
  store i8* %message, i8** %message.addr, align 4
  store [6 x i8]* %ks, [6 x i8]** %ks.addr, align 4
  store i8* %ep, i8** %ep.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 64
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %mp, i32 0, i32 0
  %1 = load i32, i32* %i, align 4
  %2 = load i8*, i8** %message.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [64 x i8], [64 x i8]* @IP, i32 0, i32 %3
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %sub = sub nsw i32 %conv, 1
  %call = call i32 @peekBit(i8* %2, i32 %sub)
  call void @pokeBit(i8* %arraydecay, i32 %1, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc13, %for.end
  %6 = load i32, i32* %i, align 4
  %cmp2 = icmp slt i32 %6, 32
  br i1 %cmp2, label %for.body4, label %for.end15

for.body4:                                        ; preds = %for.cond1
  %arrayidx5 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 0
  %arraydecay6 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx5, i32 0, i32 0
  %7 = load i32, i32* %i, align 4
  %arraydecay7 = getelementptr inbounds [8 x i8], [8 x i8]* %mp, i32 0, i32 0
  %8 = load i32, i32* %i, align 4
  %call8 = call i32 @peekBit(i8* %arraydecay7, i32 %8)
  call void @pokeBit(i8* %arraydecay6, i32 %7, i32 %call8)
  %arrayidx9 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 0
  %arraydecay10 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx9, i32 0, i32 0
  %9 = load i32, i32* %i, align 4
  %arraydecay11 = getelementptr inbounds [8 x i8], [8 x i8]* %mp, i32 0, i32 0
  %10 = load i32, i32* %i, align 4
  %add = add nsw i32 %10, 32
  %call12 = call i32 @peekBit(i8* %arraydecay11, i32 %add)
  call void @pokeBit(i8* %arraydecay10, i32 %9, i32 %call12)
  br label %for.inc13

for.inc13:                                        ; preds = %for.body4
  %11 = load i32, i32* %i, align 4
  %inc14 = add nsw i32 %11, 1
  store i32 %inc14, i32* %i, align 4
  br label %for.cond1

for.end15:                                        ; preds = %for.cond1
  store i32 1, i32* %i, align 4
  br label %for.cond16

for.cond16:                                       ; preds = %for.inc50, %for.end15
  %12 = load i32, i32* %i, align 4
  %cmp17 = icmp slt i32 %12, 17
  br i1 %cmp17, label %for.body19, label %for.end52

for.body19:                                       ; preds = %for.cond16
  %13 = load i32, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 %13
  %arraydecay21 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx20, i32 0, i32 0
  %14 = load i32, i32* %i, align 4
  %sub22 = sub nsw i32 %14, 1
  %arrayidx23 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 %sub22
  %arraydecay24 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx23, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %arraydecay21, i8* align 4 %arraydecay24, i32 4, i1 false)
  %15 = load i32, i32* %i, align 4
  %sub25 = sub nsw i32 %15, 1
  %arrayidx26 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 %sub25
  %arraydecay27 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx26, i32 0, i32 0
  %16 = load [6 x i8]*, [6 x i8]** %ks.addr, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds [6 x i8], [6 x i8]* %16, i32 %17
  %arraydecay29 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx28, i32 0, i32 0
  %arraydecay30 = getelementptr inbounds [4 x i8], [4 x i8]* %fs, i32 0, i32 0
  call void @f(i8* %arraydecay27, i8* %arraydecay29, i8* %arraydecay30)
  store i32 0, i32* %j, align 4
  br label %for.cond31

for.cond31:                                       ; preds = %for.inc42, %for.body19
  %18 = load i32, i32* %j, align 4
  %cmp32 = icmp slt i32 %18, 4
  br i1 %cmp32, label %for.body34, label %for.end44

for.body34:                                       ; preds = %for.cond31
  %19 = load i32, i32* %j, align 4
  %arrayidx35 = getelementptr inbounds [4 x i8], [4 x i8]* %fs, i32 0, i32 %19
  %20 = load i8, i8* %arrayidx35, align 1
  %conv36 = zext i8 %20 to i32
  %21 = load i32, i32* %i, align 4
  %sub37 = sub nsw i32 %21, 1
  %arrayidx38 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 %sub37
  %22 = load i32, i32* %j, align 4
  %arrayidx39 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx38, i32 0, i32 %22
  %23 = load i8, i8* %arrayidx39, align 1
  %conv40 = zext i8 %23 to i32
  %xor = xor i32 %conv40, %conv36
  %conv41 = trunc i32 %xor to i8
  store i8 %conv41, i8* %arrayidx39, align 1
  br label %for.inc42

for.inc42:                                        ; preds = %for.body34
  %24 = load i32, i32* %j, align 4
  %inc43 = add nsw i32 %24, 1
  store i32 %inc43, i32* %j, align 4
  br label %for.cond31

for.end44:                                        ; preds = %for.cond31
  %25 = load i32, i32* %i, align 4
  %arrayidx45 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 %25
  %arraydecay46 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx45, i32 0, i32 0
  %26 = load i32, i32* %i, align 4
  %sub47 = sub nsw i32 %26, 1
  %arrayidx48 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 %sub47
  %arraydecay49 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx48, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %arraydecay46, i8* align 4 %arraydecay49, i32 4, i1 false)
  br label %for.inc50

for.inc50:                                        ; preds = %for.end44
  %27 = load i32, i32* %i, align 4
  %inc51 = add nsw i32 %27, 1
  store i32 %inc51, i32* %i, align 4
  br label %for.cond16

for.end52:                                        ; preds = %for.cond16
  store i32 0, i32* %i, align 4
  br label %for.cond53

for.cond53:                                       ; preds = %for.inc61, %for.end52
  %28 = load i32, i32* %i, align 4
  %cmp54 = icmp slt i32 %28, 32
  br i1 %cmp54, label %for.body56, label %for.end63

for.body56:                                       ; preds = %for.cond53
  %arraydecay57 = getelementptr inbounds [8 x i8], [8 x i8]* %e, i32 0, i32 0
  %29 = load i32, i32* %i, align 4
  %arrayidx58 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 16
  %arraydecay59 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx58, i32 0, i32 0
  %30 = load i32, i32* %i, align 4
  %call60 = call i32 @peekBit(i8* %arraydecay59, i32 %30)
  call void @pokeBit(i8* %arraydecay57, i32 %29, i32 %call60)
  br label %for.inc61

for.inc61:                                        ; preds = %for.body56
  %31 = load i32, i32* %i, align 4
  %inc62 = add nsw i32 %31, 1
  store i32 %inc62, i32* %i, align 4
  br label %for.cond53

for.end63:                                        ; preds = %for.cond53
  store i32 32, i32* %i, align 4
  br label %for.cond64

for.cond64:                                       ; preds = %for.inc73, %for.end63
  %32 = load i32, i32* %i, align 4
  %cmp65 = icmp slt i32 %32, 64
  br i1 %cmp65, label %for.body67, label %for.end75

for.body67:                                       ; preds = %for.cond64
  %arraydecay68 = getelementptr inbounds [8 x i8], [8 x i8]* %e, i32 0, i32 0
  %33 = load i32, i32* %i, align 4
  %arrayidx69 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 16
  %arraydecay70 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx69, i32 0, i32 0
  %34 = load i32, i32* %i, align 4
  %sub71 = sub nsw i32 %34, 32
  %call72 = call i32 @peekBit(i8* %arraydecay70, i32 %sub71)
  call void @pokeBit(i8* %arraydecay68, i32 %33, i32 %call72)
  br label %for.inc73

for.inc73:                                        ; preds = %for.body67
  %35 = load i32, i32* %i, align 4
  %inc74 = add nsw i32 %35, 1
  store i32 %inc74, i32* %i, align 4
  br label %for.cond64

for.end75:                                        ; preds = %for.cond64
  store i32 0, i32* %i, align 4
  br label %for.cond76

for.cond76:                                       ; preds = %for.inc85, %for.end75
  %36 = load i32, i32* %i, align 4
  %cmp77 = icmp slt i32 %36, 64
  br i1 %cmp77, label %for.body79, label %for.end87

for.body79:                                       ; preds = %for.cond76
  %37 = load i8*, i8** %ep.addr, align 4
  %38 = load i32, i32* %i, align 4
  %arraydecay80 = getelementptr inbounds [8 x i8], [8 x i8]* %e, i32 0, i32 0
  %39 = load i32, i32* %i, align 4
  %arrayidx81 = getelementptr inbounds [64 x i8], [64 x i8]* @IP2, i32 0, i32 %39
  %40 = load i8, i8* %arrayidx81, align 1
  %conv82 = zext i8 %40 to i32
  %sub83 = sub nsw i32 %conv82, 1
  %call84 = call i32 @peekBit(i8* %arraydecay80, i32 %sub83)
  call void @pokeBit(i8* %37, i32 %38, i32 %call84)
  br label %for.inc85

for.inc85:                                        ; preds = %for.body79
  %41 = load i32, i32* %i, align 4
  %inc86 = add nsw i32 %41, 1
  store i32 %inc86, i32* %i, align 4
  br label %for.cond76

for.end87:                                        ; preds = %for.cond76
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @decrypt(%struct.String* noalias sret align 4 %agg.result, i8* %key, i8* %message, i32 %len) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %message.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %ks = alloca [17 x [6 x i8]], align 16
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %padByte = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8* %key, i8** %key.addr, align 4
  store i8* %message, i8** %message.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = bitcast %struct.String* %agg.result to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  %1 = load i8*, i8** %key.addr, align 4
  %arraydecay = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  call void @getSubKeys(i8* %1, [6 x i8]* %arraydecay)
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc12, %entry
  %2 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, 9
  br i1 %cmp, label %for.body, label %for.end14

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %3, 6
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %4
  %5 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx, i32 0, i32 %5
  %6 = load i8, i8* %arrayidx4, align 1
  store i8 %6, i8* %temp, align 1
  %7 = load i32, i32* %i, align 4
  %sub = sub nsw i32 17, %7
  %arrayidx5 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %sub
  %8 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx5, i32 0, i32 %8
  %9 = load i8, i8* %arrayidx6, align 1
  %10 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %10
  %11 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx7, i32 0, i32 %11
  store i8 %9, i8* %arrayidx8, align 1
  %12 = load i8, i8* %temp, align 1
  %13 = load i32, i32* %i, align 4
  %sub9 = sub nsw i32 17, %13
  %arrayidx10 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %sub9
  %14 = load i32, i32* %j, align 4
  %arrayidx11 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx10, i32 0, i32 %14
  store i8 %12, i8* %arrayidx11, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %15 = load i32, i32* %j, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc12

for.inc12:                                        ; preds = %for.end
  %16 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %16, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond

for.end14:                                        ; preds = %for.cond
  %17 = load i32, i32* %len.addr, align 4
  %call = call noalias i8* @malloc(i32 %17)
  %data = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  store i8* %call, i8** %data, align 4
  %data15 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %18 = load i8*, i8** %data15, align 4
  %19 = load i8*, i8** %message.addr, align 4
  %20 = load i32, i32* %len.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %18, i8* align 1 %19, i32 %20, i1 false)
  %21 = load i32, i32* %len.addr, align 4
  %len16 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  store i32 %21, i32* %len16, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond17

for.cond17:                                       ; preds = %for.inc26, %for.end14
  %22 = load i32, i32* %i, align 4
  %len18 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %23 = load i32, i32* %len18, align 4
  %cmp19 = icmp slt i32 %22, %23
  br i1 %cmp19, label %for.body20, label %for.end27

for.body20:                                       ; preds = %for.cond17
  %data21 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %24 = load i8*, i8** %data21, align 4
  %25 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds i8, i8* %24, i32 %25
  %arraydecay23 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  %data24 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %26 = load i8*, i8** %data24, align 4
  %27 = load i32, i32* %i, align 4
  %arrayidx25 = getelementptr inbounds i8, i8* %26, i32 %27
  call void @processMessage(i8* %arrayidx22, [6 x i8]* %arraydecay23, i8* %arrayidx25)
  br label %for.inc26

for.inc26:                                        ; preds = %for.body20
  %28 = load i32, i32* %i, align 4
  %add = add nsw i32 %28, 8
  store i32 %add, i32* %i, align 4
  br label %for.cond17

for.end27:                                        ; preds = %for.cond17
  %data28 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %29 = load i8*, i8** %data28, align 4
  %30 = load i32, i32* %len.addr, align 4
  %sub29 = sub nsw i32 %30, 1
  %arrayidx30 = getelementptr inbounds i8, i8* %29, i32 %sub29
  %31 = load i8, i8* %arrayidx30, align 1
  store i8 %31, i8* %padByte, align 1
  %32 = load i8, i8* %padByte, align 1
  %conv = zext i8 %32 to i32
  %len31 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %33 = load i32, i32* %len31, align 4
  %sub32 = sub nsw i32 %33, %conv
  store i32 %sub32, i32* %len31, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @driver(i8* %key, i8* %message, i32 %len) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %message.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %encoded = alloca %struct.String, align 4
  %decoded = alloca %struct.String, align 4
  %buffer = alloca [128 x i8], align 16
  %tmp = alloca %struct.String, align 4
  %tmp9 = alloca %struct.String, align 4
  store i8* %key, i8** %key.addr, align 4
  store i8* %message, i8** %message.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load i8*, i8** %key.addr, align 4
  %arraydecay = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %0, i32 8, i8* %arraydecay)
  %arraydecay1 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i32 0, i32 0), i8* %arraydecay1)
  %1 = load i8*, i8** %message.addr, align 4
  %2 = load i32, i32* %len.addr, align 4
  %arraydecay2 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %1, i32 %2, i8* %arraydecay2)
  %arraydecay3 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0), i8* %arraydecay3)
  %3 = load i8*, i8** %key.addr, align 4
  %4 = load i8*, i8** %message.addr, align 4
  %5 = load i32, i32* %len.addr, align 4
  call void @encrypt(%struct.String* sret align 4 %tmp, i8* %3, i8* %4, i32 %5)
  %6 = bitcast %struct.String* %encoded to i8*
  %7 = bitcast %struct.String* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %6, i8* align 4 %7, i32 8, i1 false)
  %data = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  %8 = load i8*, i8** %data, align 4
  %len5 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 1
  %9 = load i32, i32* %len5, align 4
  %arraydecay6 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %8, i32 %9, i8* %arraydecay6)
  %arraydecay7 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0), i8* %arraydecay7)
  %10 = load i8*, i8** %key.addr, align 4
  %data10 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  %11 = load i8*, i8** %data10, align 4
  %len11 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 1
  %12 = load i32, i32* %len11, align 4
  call void @decrypt(%struct.String* sret align 4 %tmp9, i8* %10, i8* %11, i32 %12)
  %13 = bitcast %struct.String* %decoded to i8*
  %14 = bitcast %struct.String* %tmp9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %13, i8* align 4 %14, i32 8, i1 false)
  %data12 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 0
  %15 = load i8*, i8** %data12, align 4
  %len13 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 1
  %16 = load i32, i32* %len13, align 4
  %arraydecay14 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %15, i32 %16, i8* %arraydecay14)
  %arraydecay15 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0), i8* %arraydecay15)
  %len17 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 1
  %17 = load i32, i32* %len17, align 4
  %cmp = icmp sgt i32 %17, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %data18 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  %18 = load i8*, i8** %data18, align 4
  call void @free(i8* %18)
  %data19 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  store i8* null, i8** %data19, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %len20 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 1
  %19 = load i32, i32* %len20, align 4
  %cmp21 = icmp sgt i32 %19, 0
  br i1 %cmp21, label %if.then22, label %if.end25

if.then22:                                        ; preds = %if.end
  %data23 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 0
  %20 = load i8*, i8** %data23, align 4
  call void @free(i8* %20)
  %data24 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 0
  store i8* null, i8** %data24, align 4
  br label %if.end25

if.end25:                                         ; preds = %if.then22, %if.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @printBytes(i8* %ptr, i32 %len, i8* %out) #0 {
entry:
  %ptr.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  store i8* %ptr, i8** %ptr.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %len.addr, align 4
  %dec = add nsw i32 %0, -1
  store i32 %dec, i32* %len.addr, align 4
  %cmp = icmp sgt i32 %0, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i8*, i8** %ptr.addr, align 4
  %2 = load i8, i8* %1, align 1
  %conv = zext i8 %2 to i32
  %shr = ashr i32 %conv, 4
  %conv1 = trunc i32 %shr to i8
  %call = call signext i8 @toHex(i8 zeroext %conv1)
  %3 = load i8*, i8** %out.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %3, i32 1
  store i8* %incdec.ptr, i8** %out.addr, align 4
  store i8 %call, i8* %3, align 1
  %4 = load i8*, i8** %ptr.addr, align 4
  %5 = load i8, i8* %4, align 1
  %conv2 = zext i8 %5 to i32
  %and = and i32 %conv2, 15
  %conv3 = trunc i32 %and to i8
  %call4 = call signext i8 @toHex(i8 zeroext %conv3)
  %6 = load i8*, i8** %out.addr, align 4
  %incdec.ptr5 = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr5, i8** %out.addr, align 4
  store i8 %call4, i8* %6, align 1
  %7 = load i8*, i8** %ptr.addr, align 4
  %incdec.ptr6 = getelementptr inbounds i8, i8* %7, i32 1
  store i8* %incdec.ptr6, i8** %ptr.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %8 = load i8*, i8** %out.addr, align 4
  store i8 0, i8* %8, align 1
  ret void
}

declare i32 @printf(i8* %0, ...) #2

declare void @free(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %keys = alloca [3 x [8 x i8]], align 16
  %message1 = alloca [8 x i8], align 1
  %message2 = alloca [8 x i8], align 1
  %message3 = alloca [38 x i8], align 16
  %len = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [3 x [8 x i8]]* %keys to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([3 x [8 x i8]], [3 x [8 x i8]]* @__const.main.keys, i32 0, i32 0, i32 0), i32 24, i1 false)
  %1 = bitcast [8 x i8]* %message1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %1, i8* align 1 getelementptr inbounds ([8 x i8], [8 x i8]* @__const.main.message1, i32 0, i32 0), i32 8, i1 false)
  %2 = bitcast [8 x i8]* %message2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %2, i8* align 1 getelementptr inbounds ([8 x i8], [8 x i8]* @__const.main.message2, i32 0, i32 0), i32 8, i1 false)
  %3 = bitcast [38 x i8]* %message3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %3, i8* align 16 getelementptr inbounds ([38 x i8], [38 x i8]* @__const.main.message3, i32 0, i32 0), i32 38, i1 false)
  store i32 8, i32* %len, align 4
  %arrayidx = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* %keys, i32 0, i32 0
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %arrayidx, i32 0, i32 0
  %arraydecay1 = getelementptr inbounds [8 x i8], [8 x i8]* %message1, i32 0, i32 0
  %4 = load i32, i32* %len, align 4
  call void @driver(i8* %arraydecay, i8* %arraydecay1, i32 %4)
  store i32 8, i32* %len, align 4
  %arrayidx2 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* %keys, i32 0, i32 1
  %arraydecay3 = getelementptr inbounds [8 x i8], [8 x i8]* %arrayidx2, i32 0, i32 0
  %arraydecay4 = getelementptr inbounds [8 x i8], [8 x i8]* %message2, i32 0, i32 0
  %5 = load i32, i32* %len, align 4
  call void @driver(i8* %arraydecay3, i8* %arraydecay4, i32 %5)
  store i32 38, i32* %len, align 4
  %arrayidx5 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* %keys, i32 0, i32 2
  %arraydecay6 = getelementptr inbounds [8 x i8], [8 x i8]* %arrayidx5, i32 0, i32 0
  %arraydecay7 = getelementptr inbounds [38 x i8], [38 x i8]* %message3, i32 0, i32 0
  %6 = load i32, i32* %len, align 4
  call void @driver(i8* %arraydecay6, i8* %arraydecay7, i32 %6)
  ret i32 0
}

; Function Attrs: noinline nounwind optnone
define internal void @pokeBit(i8* %dst, i32 %index, i32 %value) #0 {
entry:
  %dst.addr = alloca i8*, align 4
  %index.addr = alloca i32, align 4
  %value.addr = alloca i32, align 4
  %cell = alloca i32, align 4
  %bit = alloca i32, align 4
  store i8* %dst, i8** %dst.addr, align 4
  store i32 %index, i32* %index.addr, align 4
  store i32 %value, i32* %value.addr, align 4
  %0 = load i32, i32* %index.addr, align 4
  %div = sdiv i32 %0, 8
  store i32 %div, i32* %cell, align 4
  %1 = load i32, i32* %index.addr, align 4
  %rem = srem i32 %1, 8
  %sub = sub nsw i32 7, %rem
  store i32 %sub, i32* %bit, align 4
  %2 = load i32, i32* %value.addr, align 4
  %cmp = icmp eq i32 %2, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %bit, align 4
  %shl = shl i32 1, %3
  %neg = xor i32 %shl, -1
  %4 = load i8*, i8** %dst.addr, align 4
  %5 = load i32, i32* %cell, align 4
  %arrayidx = getelementptr inbounds i8, i8* %4, i32 %5
  %6 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %6 to i32
  %and = and i32 %conv, %neg
  %conv1 = trunc i32 %and to i8
  store i8 %conv1, i8* %arrayidx, align 1
  br label %if.end

if.else:                                          ; preds = %entry
  %7 = load i32, i32* %bit, align 4
  %shl2 = shl i32 1, %7
  %8 = load i8*, i8** %dst.addr, align 4
  %9 = load i32, i32* %cell, align 4
  %arrayidx3 = getelementptr inbounds i8, i8* %8, i32 %9
  %10 = load i8, i8* %arrayidx3, align 1
  %conv4 = zext i8 %10 to i32
  %or = or i32 %conv4, %shl2
  %conv5 = trunc i32 %or to i8
  store i8 %conv5, i8* %arrayidx3, align 1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i32 @peekBit(i8* %src, i32 %index) #0 {
entry:
  %src.addr = alloca i8*, align 4
  %index.addr = alloca i32, align 4
  %cell = alloca i32, align 4
  %bit = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 4
  store i32 %index, i32* %index.addr, align 4
  %0 = load i32, i32* %index.addr, align 4
  %div = sdiv i32 %0, 8
  store i32 %div, i32* %cell, align 4
  %1 = load i32, i32* %index.addr, align 4
  %rem = srem i32 %1, 8
  %sub = sub nsw i32 7, %rem
  store i32 %sub, i32* %bit, align 4
  %2 = load i8*, i8** %src.addr, align 4
  %3 = load i32, i32* %cell, align 4
  %arrayidx = getelementptr inbounds i8, i8* %2, i32 %3
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %5 = load i32, i32* %bit, align 4
  %shl = shl i32 1, %5
  %and = and i32 %conv, %shl
  %cmp = icmp ne i32 %and, 0
  %conv1 = zext i1 %cmp to i32
  ret i32 %conv1
}

; Function Attrs: noinline nounwind optnone
define internal void @shiftLeft(i8* %src, i32 %len, i32 %times, i8* %dst) #0 {
entry:
  %src.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %times.addr = alloca i32, align 4
  %dst.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %t = alloca i32, align 4
  %temp = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %times, i32* %times.addr, align 4
  store i8* %dst, i8** %dst.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp sle i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8*, i8** %dst.addr, align 4
  %3 = load i32, i32* %i, align 4
  %4 = load i8*, i8** %src.addr, align 4
  %5 = load i32, i32* %i, align 4
  %call = call i32 @peekBit(i8* %4, i32 %5)
  call void @pokeBit(i8* %2, i32 %3, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %t, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc13, %for.end
  %7 = load i32, i32* %t, align 4
  %8 = load i32, i32* %times.addr, align 4
  %cmp2 = icmp sle i32 %7, %8
  br i1 %cmp2, label %for.body3, label %for.end15

for.body3:                                        ; preds = %for.cond1
  %9 = load i8*, i8** %dst.addr, align 4
  %call4 = call i32 @peekBit(i8* %9, i32 0)
  store i32 %call4, i32* %temp, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc9, %for.body3
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %len.addr, align 4
  %cmp6 = icmp sle i32 %10, %11
  br i1 %cmp6, label %for.body7, label %for.end11

for.body7:                                        ; preds = %for.cond5
  %12 = load i8*, i8** %dst.addr, align 4
  %13 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %13, 1
  %14 = load i8*, i8** %dst.addr, align 4
  %15 = load i32, i32* %i, align 4
  %call8 = call i32 @peekBit(i8* %14, i32 %15)
  call void @pokeBit(i8* %12, i32 %sub, i32 %call8)
  br label %for.inc9

for.inc9:                                         ; preds = %for.body7
  %16 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %16, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond5

for.end11:                                        ; preds = %for.cond5
  %17 = load i8*, i8** %dst.addr, align 4
  %18 = load i32, i32* %len.addr, align 4
  %sub12 = sub nsw i32 %18, 1
  %19 = load i32, i32* %temp, align 4
  call void @pokeBit(i8* %17, i32 %sub12, i32 %19)
  br label %for.inc13

for.inc13:                                        ; preds = %for.end11
  %20 = load i32, i32* %t, align 4
  %inc14 = add nsw i32 %20, 1
  store i32 %inc14, i32* %t, align 4
  br label %for.cond1

for.end15:                                        ; preds = %for.cond1
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @f(i8* %r, i8* %ks, i8* %sp) #0 {
entry:
  %r.addr = alloca i8*, align 4
  %ks.addr = alloca i8*, align 4
  %sp.addr = alloca i8*, align 4
  %er = alloca [6 x i8], align 1
  %sr = alloca [4 x i8], align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %b = alloca [6 x i32], align 16
  %k = alloca i32, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %m = alloca i32, align 4
  %n = alloca i32, align 4
  %p = alloca i32, align 4
  store i8* %r, i8** %r.addr, align 4
  store i8* %ks, i8** %ks.addr, align 4
  store i8* %sp, i8** %sp.addr, align 4
  %arraydecay = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  call void @llvm.memset.p0i8.i32(i8* align 1 %arraydecay, i8 0, i32 6, i1 false)
  %arraydecay1 = getelementptr inbounds [4 x i8], [4 x i8]* %sr, i32 0, i32 0
  call void @llvm.memset.p0i8.i32(i8* align 1 %arraydecay1, i8 0, i32 4, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 48
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay2 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  %1 = load i32, i32* %i, align 4
  %2 = load i8*, i8** %r.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [48 x i8], [48 x i8]* @E, i32 0, i32 %3
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %sub = sub nsw i32 %conv, 1
  %call = call i32 @peekBit(i8* %2, i32 %sub)
  call void @pokeBit(i8* %arraydecay2, i32 %1, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc12, %for.end
  %6 = load i32, i32* %i, align 4
  %cmp4 = icmp slt i32 %6, 6
  br i1 %cmp4, label %for.body6, label %for.end14

for.body6:                                        ; preds = %for.cond3
  %7 = load i8*, i8** %ks.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds i8, i8* %7, i32 %8
  %9 = load i8, i8* %arrayidx7, align 1
  %conv8 = zext i8 %9 to i32
  %10 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 %10
  %11 = load i8, i8* %arrayidx9, align 1
  %conv10 = zext i8 %11 to i32
  %xor = xor i32 %conv10, %conv8
  %conv11 = trunc i32 %xor to i8
  store i8 %conv11, i8* %arrayidx9, align 1
  br label %for.inc12

for.inc12:                                        ; preds = %for.body6
  %12 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %12, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond3

for.end14:                                        ; preds = %for.cond3
  store i32 0, i32* %i, align 4
  br label %for.cond15

for.cond15:                                       ; preds = %for.inc59, %for.end14
  %13 = load i32, i32* %i, align 4
  %cmp16 = icmp slt i32 %13, 8
  br i1 %cmp16, label %for.body18, label %for.end61

for.body18:                                       ; preds = %for.cond15
  %14 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %14, 6
  store i32 %mul, i32* %j, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond19

for.cond19:                                       ; preds = %for.inc28, %for.body18
  %15 = load i32, i32* %k, align 4
  %cmp20 = icmp slt i32 %15, 6
  br i1 %cmp20, label %for.body22, label %for.end30

for.body22:                                       ; preds = %for.cond19
  %arraydecay23 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  %16 = load i32, i32* %j, align 4
  %17 = load i32, i32* %k, align 4
  %add = add nsw i32 %16, %17
  %call24 = call i32 @peekBit(i8* %arraydecay23, i32 %add)
  %cmp25 = icmp ne i32 %call24, 0
  %18 = zext i1 %cmp25 to i64
  %cond = select i1 %cmp25, i32 1, i32 0
  %19 = load i32, i32* %k, align 4
  %arrayidx27 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 %19
  store i32 %cond, i32* %arrayidx27, align 4
  br label %for.inc28

for.inc28:                                        ; preds = %for.body22
  %20 = load i32, i32* %k, align 4
  %inc29 = add nsw i32 %20, 1
  store i32 %inc29, i32* %k, align 4
  br label %for.cond19

for.end30:                                        ; preds = %for.cond19
  %arrayidx31 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 0
  %21 = load i32, i32* %arrayidx31, align 16
  %mul32 = mul nsw i32 2, %21
  %arrayidx33 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 5
  %22 = load i32, i32* %arrayidx33, align 4
  %add34 = add nsw i32 %mul32, %22
  store i32 %add34, i32* %row, align 4
  %arrayidx35 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 1
  %23 = load i32, i32* %arrayidx35, align 4
  %mul36 = mul nsw i32 8, %23
  %arrayidx37 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 2
  %24 = load i32, i32* %arrayidx37, align 8
  %mul38 = mul nsw i32 4, %24
  %add39 = add nsw i32 %mul36, %mul38
  %arrayidx40 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 3
  %25 = load i32, i32* %arrayidx40, align 4
  %mul41 = mul nsw i32 2, %25
  %add42 = add nsw i32 %add39, %mul41
  %arrayidx43 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 4
  %26 = load i32, i32* %arrayidx43, align 16
  %add44 = add nsw i32 %add42, %26
  store i32 %add44, i32* %col, align 4
  %27 = load i32, i32* %i, align 4
  %arrayidx45 = getelementptr inbounds [8 x [64 x i8]], [8 x [64 x i8]]* @S, i32 0, i32 %27
  %28 = load i32, i32* %row, align 4
  %mul46 = mul nsw i32 %28, 16
  %29 = load i32, i32* %col, align 4
  %add47 = add nsw i32 %mul46, %29
  %arrayidx48 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx45, i32 0, i32 %add47
  %30 = load i8, i8* %arrayidx48, align 1
  %conv49 = zext i8 %30 to i32
  store i32 %conv49, i32* %m, align 4
  store i32 1, i32* %n, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end30
  %31 = load i32, i32* %m, align 4
  %cmp50 = icmp sgt i32 %31, 0
  br i1 %cmp50, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %32 = load i32, i32* %m, align 4
  %rem = srem i32 %32, 2
  store i32 %rem, i32* %p, align 4
  %arraydecay52 = getelementptr inbounds [4 x i8], [4 x i8]* %sr, i32 0, i32 0
  %33 = load i32, i32* %i, align 4
  %add53 = add nsw i32 %33, 1
  %mul54 = mul nsw i32 %add53, 4
  %34 = load i32, i32* %n, align 4
  %sub55 = sub nsw i32 %mul54, %34
  %35 = load i32, i32* %p, align 4
  %cmp56 = icmp eq i32 %35, 1
  %conv57 = zext i1 %cmp56 to i32
  call void @pokeBit(i8* %arraydecay52, i32 %sub55, i32 %conv57)
  %36 = load i32, i32* %m, align 4
  %div = sdiv i32 %36, 2
  store i32 %div, i32* %m, align 4
  %37 = load i32, i32* %n, align 4
  %inc58 = add nsw i32 %37, 1
  store i32 %inc58, i32* %n, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %for.inc59

for.inc59:                                        ; preds = %while.end
  %38 = load i32, i32* %i, align 4
  %inc60 = add nsw i32 %38, 1
  store i32 %inc60, i32* %i, align 4
  br label %for.cond15

for.end61:                                        ; preds = %for.cond15
  store i32 0, i32* %i, align 4
  br label %for.cond62

for.cond62:                                       ; preds = %for.inc71, %for.end61
  %39 = load i32, i32* %i, align 4
  %cmp63 = icmp slt i32 %39, 32
  br i1 %cmp63, label %for.body65, label %for.end73

for.body65:                                       ; preds = %for.cond62
  %40 = load i8*, i8** %sp.addr, align 4
  %41 = load i32, i32* %i, align 4
  %arraydecay66 = getelementptr inbounds [4 x i8], [4 x i8]* %sr, i32 0, i32 0
  %42 = load i32, i32* %i, align 4
  %arrayidx67 = getelementptr inbounds [32 x i8], [32 x i8]* @P, i32 0, i32 %42
  %43 = load i8, i8* %arrayidx67, align 1
  %conv68 = zext i8 %43 to i32
  %sub69 = sub nsw i32 %conv68, 1
  %call70 = call i32 @peekBit(i8* %arraydecay66, i32 %sub69)
  call void @pokeBit(i8* %40, i32 %41, i32 %call70)
  br label %for.inc71

for.inc71:                                        ; preds = %for.body65
  %44 = load i32, i32* %i, align 4
  %inc72 = add nsw i32 %44, 1
  store i32 %inc72, i32* %i, align 4
  br label %for.cond62

for.end73:                                        ; preds = %for.cond62
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal signext i8 @toHex(i8 zeroext %in) #0 {
entry:
  %retval = alloca i8, align 1
  %in.addr = alloca i8, align 1
  store i8 %in, i8* %in.addr, align 1
  %0 = load i8, i8* %in.addr, align 1
  %conv = zext i8 %0 to i32
  %cmp = icmp sle i32 0, %conv
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i8, i8* %in.addr, align 1
  %conv2 = zext i8 %1 to i32
  %cmp3 = icmp slt i32 %conv2, 10
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %2 = load i8, i8* %in.addr, align 1
  %conv5 = zext i8 %2 to i32
  %add = add nsw i32 48, %conv5
  %conv6 = trunc i32 %add to i8
  store i8 %conv6, i8* %retval, align 1
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %3 = load i8, i8* %in.addr, align 1
  %conv7 = zext i8 %3 to i32
  %cmp8 = icmp sle i32 10, %conv7
  br i1 %cmp8, label %land.lhs.true10, label %if.end18

land.lhs.true10:                                  ; preds = %if.end
  %4 = load i8, i8* %in.addr, align 1
  %conv11 = zext i8 %4 to i32
  %cmp12 = icmp sle i32 %conv11, 15
  br i1 %cmp12, label %if.then14, label %if.end18

if.then14:                                        ; preds = %land.lhs.true10
  %5 = load i8, i8* %in.addr, align 1
  %conv15 = zext i8 %5 to i32
  %add16 = add nsw i32 65, %conv15
  %sub = sub nsw i32 %add16, 10
  %conv17 = trunc i32 %sub to i8
  store i8 %conv17, i8* %retval, align 1
  br label %return

if.end18:                                         ; preds = %land.lhs.true10, %if.end
  store i8 0, i8* %retval, align 1
  br label %return

return:                                           ; preds = %if.end18, %if.then14, %if.then
  %6 = load i8, i8* %retval, align 1
  ret i8 %6
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec = add nsw i32 %0, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp = icmp sgt i32 %0, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i8, i8* %1, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0 (demandedBits=11110000)

; *****
; For LLVM instruction:
;  %conv = zext i8 %2 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1 (demandedBits=00000000000000000000111111110000)

; *****
; For LLVM instruction:
;  %shr = ashr i32 %conv, 4
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
%2:i32 = ashr %1, 4:i32
infer %2 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %conv1 = trunc i32 %shr to i8
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
%2:i32 = ashr %1, 4:i32
%3:i8 = trunc %2
infer %3

; *****
; For LLVM instruction:
;  %call = call signext i8 @toHex(i8 zeroext %conv1)
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i8, i8* %4, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0 (demandedBits=00001111)

; *****
; For LLVM instruction:
;  %conv2 = zext i8 %5 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1 (demandedBits=00000000000000000000000000001111)

; *****
; For LLVM instruction:
;  %and = and i32 %conv2, 15
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
%2:i32 = and 15:i32, %1
infer %2 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %conv3 = trunc i32 %and to i8
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
%2:i32 = and 15:i32, %1
%3:i8 = trunc %2
infer %3

; *****
; For LLVM instruction:
;  %call4 = call signext i8 @toHex(i8 zeroext %conv3)
; Looking for a replacement for:
%0:i8 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0 (demandedBits=11110000)


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -16
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = zext %0
infer %1 (demandedBits=00000000000000000000111111110000)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 240
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = zext %0
%2:i32 = ashr %1, 4:i32
infer %2 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = zext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = zext %0
%2:i32 = ashr %1, 4:i32
%3:i8 = trunc %2
infer %3


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0 (demandedBits=00001111)


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 15
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = zext %0
infer %1 (demandedBits=00000000000000000000000000001111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 15
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = zext %0
%2:i32 = and 15:i32, %1
infer %2 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 15
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = zext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = zext %0
%2:i32 = and 15:i32, %1
%3:i8 = trunc %2
infer %3


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 15
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for ./Data_Encryption_Standard.c.bc:printBytes()

; entering Souper's runOnFunction() for main()

; ModuleID = './Data_Encryption_Standard.c.bc'
source_filename = "./Data_Encryption_Standard.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.String = type { i8*, i32 }

@.str = private unnamed_addr constant [14 x i8] c"Key     : %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"Message : %s\0A\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"Encoded : %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"Decoded : %s\0A\0A\00", align 1
@__const.main.keys = private unnamed_addr constant [3 x [8 x i8]] [[8 x i8] c"\134Wy\9B\BC\DF\F1", [8 x i8] c"\0E2\922\EAm\0Ds", [8 x i8] c"\0E2\922\EAm\0Ds"], align 16
@__const.main.message1 = private unnamed_addr constant [8 x i8] c"\01#Eg\89\AB\CD\EF", align 1
@__const.main.message2 = private unnamed_addr constant [8 x i8] c"\87\87\87\87\87\87\87\87", align 1
@__const.main.message3 = private unnamed_addr constant [38 x i8] c"Your lips are smoother than vaseline\0D\0A", align 16
@PC1 = internal constant [56 x i8] c"91)!\19\11\09\01:2*\22\1A\12\0A\02;3+#\1B\13\0B\03<4,$?7/'\1F\17\0F\07>6.&\1E\16\0E\06=5-%\1D\15\0D\05\1C\14\0C\04", align 16
@SHIFTS = internal constant [16 x i8] c"\01\01\02\02\02\02\02\02\01\02\02\02\02\02\02\01", align 16
@PC2 = internal constant [48 x i8] c"\0E\11\0B\18\01\05\03\1C\0F\06\15\0A\17\13\0C\04\1A\08\10\07\1B\14\0D\02)4\1F%/7\1E(3-!0,1'8\225.*2$\1D ", align 16
@IP = internal constant [64 x i8] c":2*\22\1A\12\0A\02<4,$\1C\14\0C\04>6.&\1E\16\0E\06@80( \18\10\0891)!\19\11\09\01;3+#\1B\13\0B\03=5-%\1D\15\0D\05?7/'\1F\17\0F\07", align 16
@IP2 = internal constant [64 x i8] c"(\080\108\18@ '\07/\0F7\17?\1F&\06.\0E6\16>\1E%\05-\0D5\15=\1D$\04,\0C4\14<\1C#\03+\0B3\13;\1B\22\02*\0A2\12:\1A!\01)\091\119\19", align 16
@E = internal constant [48 x i8] c" \01\02\03\04\05\04\05\06\07\08\09\08\09\0A\0B\0C\0D\0C\0D\0E\0F\10\11\10\11\12\13\14\15\14\15\16\17\18\19\18\19\1A\1B\1C\1D\1C\1D\1E\1F \01", align 16
@S = internal constant [8 x [64 x i8]] [[64 x i8] c"\0E\04\0D\01\02\0F\0B\08\03\0A\06\0C\05\09\00\07\00\0F\07\04\0E\02\0D\01\0A\06\0C\0B\09\05\03\08\04\01\0E\08\0D\06\02\0B\0F\0C\09\07\03\0A\05\00\0F\0C\08\02\04\09\01\07\05\0B\03\0E\0A\00\06\0D", [64 x i8] c"\0F\01\08\0E\06\0B\03\04\09\07\02\0D\0C\00\05\0A\03\0D\04\07\0F\02\08\0E\0C\00\01\0A\06\09\0B\05\00\0E\07\0B\0A\04\0D\01\05\08\0C\06\09\03\02\0F\0D\08\0A\01\03\0F\04\02\0B\06\07\0C\00\05\0E\09", [64 x i8] c"\0A\00\09\0E\06\03\0F\05\01\0D\0C\07\0B\04\02\08\0D\07\00\09\03\04\06\0A\02\08\05\0E\0C\0B\0F\01\0D\06\04\09\08\0F\03\00\0B\01\02\0C\05\0A\0E\07\01\0A\0D\00\06\09\08\07\04\0F\0E\03\0B\05\02\0C", [64 x i8] c"\07\0D\0E\03\00\06\09\0A\01\02\08\05\0B\0C\04\0F\0D\08\0B\05\06\0F\00\03\04\07\02\0C\01\0A\0E\09\0A\06\09\00\0C\0B\07\0D\0F\01\03\0E\05\02\08\04\03\0F\00\06\0A\01\0D\08\09\04\05\0B\0C\07\02\0E", [64 x i8] c"\02\0C\04\01\07\0A\0B\06\08\05\03\0F\0D\00\0E\09\0E\0B\02\0C\04\07\0D\01\05\00\0F\0A\03\09\08\06\04\02\01\0B\0A\0D\07\08\0F\09\0C\05\06\03\00\0E\0B\08\0C\07\01\0E\02\0D\06\0F\00\09\0A\04\05\03", [64 x i8] c"\0C\01\0A\0F\09\02\06\08\00\0D\03\04\0E\07\05\0B\0A\0F\04\02\07\0C\09\05\06\01\0D\0E\00\0B\03\08\09\0E\0F\05\02\08\0C\03\07\00\04\0A\01\0D\0B\06\04\03\02\0C\09\05\0F\0A\0B\0E\01\07\06\00\08\0D", [64 x i8] c"\04\0B\02\0E\0F\00\08\0D\03\0C\09\07\05\0A\06\01\0D\00\0B\07\04\09\01\0A\0E\03\05\0C\02\0F\08\06\01\04\0B\0D\0C\03\07\0E\0A\0F\06\08\00\05\09\02\06\0B\0D\08\01\04\0A\07\09\05\00\0F\0E\02\03\0C", [64 x i8] c"\0D\02\08\04\06\0F\0B\01\0A\09\03\0E\05\00\0C\07\01\0F\0D\08\0A\03\07\04\0C\05\06\0B\00\0E\09\02\07\0B\04\01\09\0C\0E\02\00\06\0A\0D\0F\03\05\08\02\01\0E\07\04\0A\08\0D\0F\0C\09\00\03\05\06\0B"], align 16
@P = internal constant [32 x i8] c"\10\07\14\15\1D\0C\1C\11\01\0F\17\1A\05\12\1F\0A\02\08\18\0E \1B\03\09\13\0D\1E\06\16\0B\04\19", align 16
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @encrypt(%struct.String* noalias sret align 4 %agg.result, i8* %key, i8* %message, i32 %len) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %message.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %ks = alloca [17 x [6 x i8]], align 16
  %padByte = alloca i8, align 1
  %i = alloca i32, align 4
  store i8* %key, i8** %key.addr, align 4
  store i8* %message, i8** %message.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = bitcast %struct.String* %agg.result to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  %1 = load i8*, i8** %key.addr, align 4
  %arraydecay = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  call void @getSubKeys(i8* %1, [6 x i8]* %arraydecay)
  %2 = load i32, i32* %len.addr, align 4
  %rem = srem i32 %2, 8
  %sub = sub nsw i32 8, %rem
  %conv = trunc i32 %sub to i8
  store i8 %conv, i8* %padByte, align 1
  %3 = load i32, i32* %len.addr, align 4
  %4 = load i8, i8* %padByte, align 1
  %conv1 = zext i8 %4 to i32
  %add = add nsw i32 %3, %conv1
  %len2 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  store i32 %add, i32* %len2, align 4
  %len3 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %5 = load i32, i32* %len3, align 4
  %call = call noalias i8* @malloc(i32 %5)
  %data = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  store i8* %call, i8** %data, align 4
  %data4 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %6 = load i8*, i8** %data4, align 4
  %7 = load i8*, i8** %message.addr, align 4
  %8 = load i32, i32* %len.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %6, i8* align 1 %7, i32 %8, i1 false)
  %data5 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %9 = load i8*, i8** %data5, align 4
  %10 = load i32, i32* %len.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %9, i32 %10
  %11 = load i8, i8* %padByte, align 1
  %12 = load i8, i8* %padByte, align 1
  %conv7 = zext i8 %12 to i32
  call void @llvm.memset.p0i8.i32(i8* align 1 %arrayidx, i8 %11, i32 %conv7, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %13 = load i32, i32* %i, align 4
  %len8 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %14 = load i32, i32* %len8, align 4
  %cmp = icmp slt i32 %13, %14
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %data10 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %15 = load i8*, i8** %data10, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds i8, i8* %15, i32 %16
  %arraydecay12 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  %data13 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %17 = load i8*, i8** %data13, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds i8, i8* %17, i32 %18
  call void @processMessage(i8* %arrayidx11, [6 x i8]* %arraydecay12, i8* %arrayidx14)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %19 = load i32, i32* %i, align 4
  %add15 = add nsw i32 %19, 8
  store i32 %add15, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define internal void @getSubKeys(i8* %key, [6 x i8]* %ks) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %ks.addr = alloca [6 x i8]*, align 4
  %c = alloca [17 x [7 x i8]], align 16
  %d = alloca [17 x [4 x i8]], align 16
  %kp = alloca [7 x i8], align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i8* %key, i8** %key.addr, align 4
  store [6 x i8]* %ks, [6 x i8]** %ks.addr, align 4
  %arraydecay = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 0
  %0 = bitcast [7 x i8]* %arraydecay to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 119, i1 false)
  %arraydecay1 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 0
  %1 = bitcast [4 x i8]* %arraydecay1 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %1, i8 0, i32 68, i1 false)
  %2 = load [6 x i8]*, [6 x i8]** %ks.addr, align 4
  %3 = bitcast [6 x i8]* %2 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 1 %3, i8 0, i32 102, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %4, 56
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay2 = getelementptr inbounds [7 x i8], [7 x i8]* %kp, i32 0, i32 0
  %5 = load i32, i32* %i, align 4
  %6 = load i8*, i8** %key.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [56 x i8], [56 x i8]* @PC1, i32 0, i32 %7
  %8 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %8 to i32
  %sub = sub nsw i32 %conv, 1
  %call = call i32 @peekBit(i8* %6, i32 %sub)
  call void @pokeBit(i8* %arraydecay2, i32 %5, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc15, %for.end
  %10 = load i32, i32* %i, align 4
  %cmp4 = icmp slt i32 %10, 28
  br i1 %cmp4, label %for.body6, label %for.end17

for.body6:                                        ; preds = %for.cond3
  %arrayidx7 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 0
  %arraydecay8 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx7, i32 0, i32 0
  %11 = load i32, i32* %i, align 4
  %arraydecay9 = getelementptr inbounds [7 x i8], [7 x i8]* %kp, i32 0, i32 0
  %12 = load i32, i32* %i, align 4
  %call10 = call i32 @peekBit(i8* %arraydecay9, i32 %12)
  call void @pokeBit(i8* %arraydecay8, i32 %11, i32 %call10)
  %arrayidx11 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 0
  %arraydecay12 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx11, i32 0, i32 0
  %13 = load i32, i32* %i, align 4
  %arraydecay13 = getelementptr inbounds [7 x i8], [7 x i8]* %kp, i32 0, i32 0
  %14 = load i32, i32* %i, align 4
  %add = add nsw i32 %14, 28
  %call14 = call i32 @peekBit(i8* %arraydecay13, i32 %add)
  call void @pokeBit(i8* %arraydecay12, i32 %13, i32 %call14)
  br label %for.inc15

for.inc15:                                        ; preds = %for.body6
  %15 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %15, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond3

for.end17:                                        ; preds = %for.cond3
  store i32 1, i32* %i, align 4
  br label %for.cond18

for.cond18:                                       ; preds = %for.inc38, %for.end17
  %16 = load i32, i32* %i, align 4
  %cmp19 = icmp slt i32 %16, 17
  br i1 %cmp19, label %for.body21, label %for.end40

for.body21:                                       ; preds = %for.cond18
  %17 = load i32, i32* %i, align 4
  %sub22 = sub nsw i32 %17, 1
  %arrayidx23 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %sub22
  %arraydecay24 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx23, i32 0, i32 0
  %18 = load i32, i32* %i, align 4
  %sub25 = sub nsw i32 %18, 1
  %arrayidx26 = getelementptr inbounds [16 x i8], [16 x i8]* @SHIFTS, i32 0, i32 %sub25
  %19 = load i8, i8* %arrayidx26, align 1
  %conv27 = zext i8 %19 to i32
  %20 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %20
  %arraydecay29 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx28, i32 0, i32 0
  call void @shiftLeft(i8* %arraydecay24, i32 28, i32 %conv27, i8* %arraydecay29)
  %21 = load i32, i32* %i, align 4
  %sub30 = sub nsw i32 %21, 1
  %arrayidx31 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 %sub30
  %arraydecay32 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx31, i32 0, i32 0
  %22 = load i32, i32* %i, align 4
  %sub33 = sub nsw i32 %22, 1
  %arrayidx34 = getelementptr inbounds [16 x i8], [16 x i8]* @SHIFTS, i32 0, i32 %sub33
  %23 = load i8, i8* %arrayidx34, align 1
  %conv35 = zext i8 %23 to i32
  %24 = load i32, i32* %i, align 4
  %arrayidx36 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 %24
  %arraydecay37 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx36, i32 0, i32 0
  call void @shiftLeft(i8* %arraydecay32, i32 28, i32 %conv35, i8* %arraydecay37)
  br label %for.inc38

for.inc38:                                        ; preds = %for.body21
  %25 = load i32, i32* %i, align 4
  %inc39 = add nsw i32 %25, 1
  store i32 %inc39, i32* %i, align 4
  br label %for.cond18

for.end40:                                        ; preds = %for.cond18
  store i32 1, i32* %i, align 4
  br label %for.cond41

for.cond41:                                       ; preds = %for.inc58, %for.end40
  %26 = load i32, i32* %i, align 4
  %cmp42 = icmp slt i32 %26, 17
  br i1 %cmp42, label %for.body44, label %for.end60

for.body44:                                       ; preds = %for.cond41
  store i32 28, i32* %j, align 4
  br label %for.cond45

for.cond45:                                       ; preds = %for.inc55, %for.body44
  %27 = load i32, i32* %j, align 4
  %cmp46 = icmp slt i32 %27, 56
  br i1 %cmp46, label %for.body48, label %for.end57

for.body48:                                       ; preds = %for.cond45
  %28 = load i32, i32* %i, align 4
  %arrayidx49 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %28
  %arraydecay50 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx49, i32 0, i32 0
  %29 = load i32, i32* %j, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx51 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 %30
  %arraydecay52 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx51, i32 0, i32 0
  %31 = load i32, i32* %j, align 4
  %sub53 = sub nsw i32 %31, 28
  %call54 = call i32 @peekBit(i8* %arraydecay52, i32 %sub53)
  call void @pokeBit(i8* %arraydecay50, i32 %29, i32 %call54)
  br label %for.inc55

for.inc55:                                        ; preds = %for.body48
  %32 = load i32, i32* %j, align 4
  %inc56 = add nsw i32 %32, 1
  store i32 %inc56, i32* %j, align 4
  br label %for.cond45

for.end57:                                        ; preds = %for.cond45
  br label %for.inc58

for.inc58:                                        ; preds = %for.end57
  %33 = load i32, i32* %i, align 4
  %inc59 = add nsw i32 %33, 1
  store i32 %inc59, i32* %i, align 4
  br label %for.cond41

for.end60:                                        ; preds = %for.cond41
  store i32 1, i32* %i, align 4
  br label %for.cond61

for.cond61:                                       ; preds = %for.inc80, %for.end60
  %34 = load i32, i32* %i, align 4
  %cmp62 = icmp slt i32 %34, 17
  br i1 %cmp62, label %for.body64, label %for.end82

for.body64:                                       ; preds = %for.cond61
  store i32 0, i32* %j, align 4
  br label %for.cond65

for.cond65:                                       ; preds = %for.inc77, %for.body64
  %35 = load i32, i32* %j, align 4
  %cmp66 = icmp slt i32 %35, 48
  br i1 %cmp66, label %for.body68, label %for.end79

for.body68:                                       ; preds = %for.cond65
  %36 = load [6 x i8]*, [6 x i8]** %ks.addr, align 4
  %37 = load i32, i32* %i, align 4
  %arrayidx69 = getelementptr inbounds [6 x i8], [6 x i8]* %36, i32 %37
  %arraydecay70 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx69, i32 0, i32 0
  %38 = load i32, i32* %j, align 4
  %39 = load i32, i32* %i, align 4
  %arrayidx71 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %39
  %arraydecay72 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx71, i32 0, i32 0
  %40 = load i32, i32* %j, align 4
  %arrayidx73 = getelementptr inbounds [48 x i8], [48 x i8]* @PC2, i32 0, i32 %40
  %41 = load i8, i8* %arrayidx73, align 1
  %conv74 = zext i8 %41 to i32
  %sub75 = sub nsw i32 %conv74, 1
  %call76 = call i32 @peekBit(i8* %arraydecay72, i32 %sub75)
  call void @pokeBit(i8* %arraydecay70, i32 %38, i32 %call76)
  br label %for.inc77

for.inc77:                                        ; preds = %for.body68
  %42 = load i32, i32* %j, align 4
  %inc78 = add nsw i32 %42, 1
  store i32 %inc78, i32* %j, align 4
  br label %for.cond65

for.end79:                                        ; preds = %for.cond65
  br label %for.inc80

for.inc80:                                        ; preds = %for.end79
  %43 = load i32, i32* %i, align 4
  %inc81 = add nsw i32 %43, 1
  store i32 %inc81, i32* %i, align 4
  br label %for.cond61

for.end82:                                        ; preds = %for.cond61
  ret void
}

declare noalias i8* @malloc(i32 %0) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: noinline nounwind optnone
define internal void @processMessage(i8* %message, [6 x i8]* %ks, i8* %ep) #0 {
entry:
  %message.addr = alloca i8*, align 4
  %ks.addr = alloca [6 x i8]*, align 4
  %ep.addr = alloca i8*, align 4
  %left = alloca [17 x [4 x i8]], align 16
  %right = alloca [17 x [4 x i8]], align 16
  %mp = alloca [8 x i8], align 1
  %e = alloca [8 x i8], align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %fs = alloca [4 x i8], align 1
  store i8* %message, i8** %message.addr, align 4
  store [6 x i8]* %ks, [6 x i8]** %ks.addr, align 4
  store i8* %ep, i8** %ep.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 64
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %mp, i32 0, i32 0
  %1 = load i32, i32* %i, align 4
  %2 = load i8*, i8** %message.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [64 x i8], [64 x i8]* @IP, i32 0, i32 %3
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %sub = sub nsw i32 %conv, 1
  %call = call i32 @peekBit(i8* %2, i32 %sub)
  call void @pokeBit(i8* %arraydecay, i32 %1, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc13, %for.end
  %6 = load i32, i32* %i, align 4
  %cmp2 = icmp slt i32 %6, 32
  br i1 %cmp2, label %for.body4, label %for.end15

for.body4:                                        ; preds = %for.cond1
  %arrayidx5 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 0
  %arraydecay6 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx5, i32 0, i32 0
  %7 = load i32, i32* %i, align 4
  %arraydecay7 = getelementptr inbounds [8 x i8], [8 x i8]* %mp, i32 0, i32 0
  %8 = load i32, i32* %i, align 4
  %call8 = call i32 @peekBit(i8* %arraydecay7, i32 %8)
  call void @pokeBit(i8* %arraydecay6, i32 %7, i32 %call8)
  %arrayidx9 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 0
  %arraydecay10 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx9, i32 0, i32 0
  %9 = load i32, i32* %i, align 4
  %arraydecay11 = getelementptr inbounds [8 x i8], [8 x i8]* %mp, i32 0, i32 0
  %10 = load i32, i32* %i, align 4
  %add = add nsw i32 %10, 32
  %call12 = call i32 @peekBit(i8* %arraydecay11, i32 %add)
  call void @pokeBit(i8* %arraydecay10, i32 %9, i32 %call12)
  br label %for.inc13

for.inc13:                                        ; preds = %for.body4
  %11 = load i32, i32* %i, align 4
  %inc14 = add nsw i32 %11, 1
  store i32 %inc14, i32* %i, align 4
  br label %for.cond1

for.end15:                                        ; preds = %for.cond1
  store i32 1, i32* %i, align 4
  br label %for.cond16

for.cond16:                                       ; preds = %for.inc50, %for.end15
  %12 = load i32, i32* %i, align 4
  %cmp17 = icmp slt i32 %12, 17
  br i1 %cmp17, label %for.body19, label %for.end52

for.body19:                                       ; preds = %for.cond16
  %13 = load i32, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 %13
  %arraydecay21 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx20, i32 0, i32 0
  %14 = load i32, i32* %i, align 4
  %sub22 = sub nsw i32 %14, 1
  %arrayidx23 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 %sub22
  %arraydecay24 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx23, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %arraydecay21, i8* align 4 %arraydecay24, i32 4, i1 false)
  %15 = load i32, i32* %i, align 4
  %sub25 = sub nsw i32 %15, 1
  %arrayidx26 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 %sub25
  %arraydecay27 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx26, i32 0, i32 0
  %16 = load [6 x i8]*, [6 x i8]** %ks.addr, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds [6 x i8], [6 x i8]* %16, i32 %17
  %arraydecay29 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx28, i32 0, i32 0
  %arraydecay30 = getelementptr inbounds [4 x i8], [4 x i8]* %fs, i32 0, i32 0
  call void @f(i8* %arraydecay27, i8* %arraydecay29, i8* %arraydecay30)
  store i32 0, i32* %j, align 4
  br label %for.cond31

for.cond31:                                       ; preds = %for.inc42, %for.body19
  %18 = load i32, i32* %j, align 4
  %cmp32 = icmp slt i32 %18, 4
  br i1 %cmp32, label %for.body34, label %for.end44

for.body34:                                       ; preds = %for.cond31
  %19 = load i32, i32* %j, align 4
  %arrayidx35 = getelementptr inbounds [4 x i8], [4 x i8]* %fs, i32 0, i32 %19
  %20 = load i8, i8* %arrayidx35, align 1
  %conv36 = zext i8 %20 to i32
  %21 = load i32, i32* %i, align 4
  %sub37 = sub nsw i32 %21, 1
  %arrayidx38 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 %sub37
  %22 = load i32, i32* %j, align 4
  %arrayidx39 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx38, i32 0, i32 %22
  %23 = load i8, i8* %arrayidx39, align 1
  %conv40 = zext i8 %23 to i32
  %xor = xor i32 %conv40, %conv36
  %conv41 = trunc i32 %xor to i8
  store i8 %conv41, i8* %arrayidx39, align 1
  br label %for.inc42

for.inc42:                                        ; preds = %for.body34
  %24 = load i32, i32* %j, align 4
  %inc43 = add nsw i32 %24, 1
  store i32 %inc43, i32* %j, align 4
  br label %for.cond31

for.end44:                                        ; preds = %for.cond31
  %25 = load i32, i32* %i, align 4
  %arrayidx45 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 %25
  %arraydecay46 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx45, i32 0, i32 0
  %26 = load i32, i32* %i, align 4
  %sub47 = sub nsw i32 %26, 1
  %arrayidx48 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 %sub47
  %arraydecay49 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx48, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %arraydecay46, i8* align 4 %arraydecay49, i32 4, i1 false)
  br label %for.inc50

for.inc50:                                        ; preds = %for.end44
  %27 = load i32, i32* %i, align 4
  %inc51 = add nsw i32 %27, 1
  store i32 %inc51, i32* %i, align 4
  br label %for.cond16

for.end52:                                        ; preds = %for.cond16
  store i32 0, i32* %i, align 4
  br label %for.cond53

for.cond53:                                       ; preds = %for.inc61, %for.end52
  %28 = load i32, i32* %i, align 4
  %cmp54 = icmp slt i32 %28, 32
  br i1 %cmp54, label %for.body56, label %for.end63

for.body56:                                       ; preds = %for.cond53
  %arraydecay57 = getelementptr inbounds [8 x i8], [8 x i8]* %e, i32 0, i32 0
  %29 = load i32, i32* %i, align 4
  %arrayidx58 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 16
  %arraydecay59 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx58, i32 0, i32 0
  %30 = load i32, i32* %i, align 4
  %call60 = call i32 @peekBit(i8* %arraydecay59, i32 %30)
  call void @pokeBit(i8* %arraydecay57, i32 %29, i32 %call60)
  br label %for.inc61

for.inc61:                                        ; preds = %for.body56
  %31 = load i32, i32* %i, align 4
  %inc62 = add nsw i32 %31, 1
  store i32 %inc62, i32* %i, align 4
  br label %for.cond53

for.end63:                                        ; preds = %for.cond53
  store i32 32, i32* %i, align 4
  br label %for.cond64

for.cond64:                                       ; preds = %for.inc73, %for.end63
  %32 = load i32, i32* %i, align 4
  %cmp65 = icmp slt i32 %32, 64
  br i1 %cmp65, label %for.body67, label %for.end75

for.body67:                                       ; preds = %for.cond64
  %arraydecay68 = getelementptr inbounds [8 x i8], [8 x i8]* %e, i32 0, i32 0
  %33 = load i32, i32* %i, align 4
  %arrayidx69 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 16
  %arraydecay70 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx69, i32 0, i32 0
  %34 = load i32, i32* %i, align 4
  %sub71 = sub nsw i32 %34, 32
  %call72 = call i32 @peekBit(i8* %arraydecay70, i32 %sub71)
  call void @pokeBit(i8* %arraydecay68, i32 %33, i32 %call72)
  br label %for.inc73

for.inc73:                                        ; preds = %for.body67
  %35 = load i32, i32* %i, align 4
  %inc74 = add nsw i32 %35, 1
  store i32 %inc74, i32* %i, align 4
  br label %for.cond64

for.end75:                                        ; preds = %for.cond64
  store i32 0, i32* %i, align 4
  br label %for.cond76

for.cond76:                                       ; preds = %for.inc85, %for.end75
  %36 = load i32, i32* %i, align 4
  %cmp77 = icmp slt i32 %36, 64
  br i1 %cmp77, label %for.body79, label %for.end87

for.body79:                                       ; preds = %for.cond76
  %37 = load i8*, i8** %ep.addr, align 4
  %38 = load i32, i32* %i, align 4
  %arraydecay80 = getelementptr inbounds [8 x i8], [8 x i8]* %e, i32 0, i32 0
  %39 = load i32, i32* %i, align 4
  %arrayidx81 = getelementptr inbounds [64 x i8], [64 x i8]* @IP2, i32 0, i32 %39
  %40 = load i8, i8* %arrayidx81, align 1
  %conv82 = zext i8 %40 to i32
  %sub83 = sub nsw i32 %conv82, 1
  %call84 = call i32 @peekBit(i8* %arraydecay80, i32 %sub83)
  call void @pokeBit(i8* %37, i32 %38, i32 %call84)
  br label %for.inc85

for.inc85:                                        ; preds = %for.body79
  %41 = load i32, i32* %i, align 4
  %inc86 = add nsw i32 %41, 1
  store i32 %inc86, i32* %i, align 4
  br label %for.cond76

for.end87:                                        ; preds = %for.cond76
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @decrypt(%struct.String* noalias sret align 4 %agg.result, i8* %key, i8* %message, i32 %len) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %message.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %ks = alloca [17 x [6 x i8]], align 16
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %padByte = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8* %key, i8** %key.addr, align 4
  store i8* %message, i8** %message.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = bitcast %struct.String* %agg.result to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  %1 = load i8*, i8** %key.addr, align 4
  %arraydecay = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  call void @getSubKeys(i8* %1, [6 x i8]* %arraydecay)
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc12, %entry
  %2 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, 9
  br i1 %cmp, label %for.body, label %for.end14

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %3, 6
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %4
  %5 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx, i32 0, i32 %5
  %6 = load i8, i8* %arrayidx4, align 1
  store i8 %6, i8* %temp, align 1
  %7 = load i32, i32* %i, align 4
  %sub = sub nsw i32 17, %7
  %arrayidx5 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %sub
  %8 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx5, i32 0, i32 %8
  %9 = load i8, i8* %arrayidx6, align 1
  %10 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %10
  %11 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx7, i32 0, i32 %11
  store i8 %9, i8* %arrayidx8, align 1
  %12 = load i8, i8* %temp, align 1
  %13 = load i32, i32* %i, align 4
  %sub9 = sub nsw i32 17, %13
  %arrayidx10 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %sub9
  %14 = load i32, i32* %j, align 4
  %arrayidx11 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx10, i32 0, i32 %14
  store i8 %12, i8* %arrayidx11, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %15 = load i32, i32* %j, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc12

for.inc12:                                        ; preds = %for.end
  %16 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %16, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond

for.end14:                                        ; preds = %for.cond
  %17 = load i32, i32* %len.addr, align 4
  %call = call noalias i8* @malloc(i32 %17)
  %data = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  store i8* %call, i8** %data, align 4
  %data15 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %18 = load i8*, i8** %data15, align 4
  %19 = load i8*, i8** %message.addr, align 4
  %20 = load i32, i32* %len.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %18, i8* align 1 %19, i32 %20, i1 false)
  %21 = load i32, i32* %len.addr, align 4
  %len16 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  store i32 %21, i32* %len16, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond17

for.cond17:                                       ; preds = %for.inc26, %for.end14
  %22 = load i32, i32* %i, align 4
  %len18 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %23 = load i32, i32* %len18, align 4
  %cmp19 = icmp slt i32 %22, %23
  br i1 %cmp19, label %for.body20, label %for.end27

for.body20:                                       ; preds = %for.cond17
  %data21 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %24 = load i8*, i8** %data21, align 4
  %25 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds i8, i8* %24, i32 %25
  %arraydecay23 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  %data24 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %26 = load i8*, i8** %data24, align 4
  %27 = load i32, i32* %i, align 4
  %arrayidx25 = getelementptr inbounds i8, i8* %26, i32 %27
  call void @processMessage(i8* %arrayidx22, [6 x i8]* %arraydecay23, i8* %arrayidx25)
  br label %for.inc26

for.inc26:                                        ; preds = %for.body20
  %28 = load i32, i32* %i, align 4
  %add = add nsw i32 %28, 8
  store i32 %add, i32* %i, align 4
  br label %for.cond17

for.end27:                                        ; preds = %for.cond17
  %data28 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %29 = load i8*, i8** %data28, align 4
  %30 = load i32, i32* %len.addr, align 4
  %sub29 = sub nsw i32 %30, 1
  %arrayidx30 = getelementptr inbounds i8, i8* %29, i32 %sub29
  %31 = load i8, i8* %arrayidx30, align 1
  store i8 %31, i8* %padByte, align 1
  %32 = load i8, i8* %padByte, align 1
  %conv = zext i8 %32 to i32
  %len31 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %33 = load i32, i32* %len31, align 4
  %sub32 = sub nsw i32 %33, %conv
  store i32 %sub32, i32* %len31, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @driver(i8* %key, i8* %message, i32 %len) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %message.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %encoded = alloca %struct.String, align 4
  %decoded = alloca %struct.String, align 4
  %buffer = alloca [128 x i8], align 16
  %tmp = alloca %struct.String, align 4
  %tmp9 = alloca %struct.String, align 4
  store i8* %key, i8** %key.addr, align 4
  store i8* %message, i8** %message.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load i8*, i8** %key.addr, align 4
  %arraydecay = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %0, i32 8, i8* %arraydecay)
  %arraydecay1 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i32 0, i32 0), i8* %arraydecay1)
  %1 = load i8*, i8** %message.addr, align 4
  %2 = load i32, i32* %len.addr, align 4
  %arraydecay2 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %1, i32 %2, i8* %arraydecay2)
  %arraydecay3 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0), i8* %arraydecay3)
  %3 = load i8*, i8** %key.addr, align 4
  %4 = load i8*, i8** %message.addr, align 4
  %5 = load i32, i32* %len.addr, align 4
  call void @encrypt(%struct.String* sret align 4 %tmp, i8* %3, i8* %4, i32 %5)
  %6 = bitcast %struct.String* %encoded to i8*
  %7 = bitcast %struct.String* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %6, i8* align 4 %7, i32 8, i1 false)
  %data = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  %8 = load i8*, i8** %data, align 4
  %len5 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 1
  %9 = load i32, i32* %len5, align 4
  %arraydecay6 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %8, i32 %9, i8* %arraydecay6)
  %arraydecay7 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0), i8* %arraydecay7)
  %10 = load i8*, i8** %key.addr, align 4
  %data10 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  %11 = load i8*, i8** %data10, align 4
  %len11 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 1
  %12 = load i32, i32* %len11, align 4
  call void @decrypt(%struct.String* sret align 4 %tmp9, i8* %10, i8* %11, i32 %12)
  %13 = bitcast %struct.String* %decoded to i8*
  %14 = bitcast %struct.String* %tmp9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %13, i8* align 4 %14, i32 8, i1 false)
  %data12 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 0
  %15 = load i8*, i8** %data12, align 4
  %len13 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 1
  %16 = load i32, i32* %len13, align 4
  %arraydecay14 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %15, i32 %16, i8* %arraydecay14)
  %arraydecay15 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0), i8* %arraydecay15)
  %len17 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 1
  %17 = load i32, i32* %len17, align 4
  %cmp = icmp sgt i32 %17, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %data18 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  %18 = load i8*, i8** %data18, align 4
  call void @free(i8* %18)
  %data19 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  store i8* null, i8** %data19, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %len20 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 1
  %19 = load i32, i32* %len20, align 4
  %cmp21 = icmp sgt i32 %19, 0
  br i1 %cmp21, label %if.then22, label %if.end25

if.then22:                                        ; preds = %if.end
  %data23 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 0
  %20 = load i8*, i8** %data23, align 4
  call void @free(i8* %20)
  %data24 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 0
  store i8* null, i8** %data24, align 4
  br label %if.end25

if.end25:                                         ; preds = %if.then22, %if.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @printBytes(i8* %ptr, i32 %len, i8* %out) #0 {
entry:
  %ptr.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  store i8* %ptr, i8** %ptr.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %len.addr, align 4
  %dec = add nsw i32 %0, -1
  store i32 %dec, i32* %len.addr, align 4
  %cmp = icmp sgt i32 %0, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i8*, i8** %ptr.addr, align 4
  %2 = load i8, i8* %1, align 1
  %conv = zext i8 %2 to i32
  %shr = ashr i32 %conv, 4
  %conv1 = trunc i32 %shr to i8
  %call = call signext i8 @toHex(i8 zeroext %conv1)
  %3 = load i8*, i8** %out.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %3, i32 1
  store i8* %incdec.ptr, i8** %out.addr, align 4
  store i8 %call, i8* %3, align 1
  %4 = load i8*, i8** %ptr.addr, align 4
  %5 = load i8, i8* %4, align 1
  %conv2 = zext i8 %5 to i32
  %and = and i32 %conv2, 15
  %conv3 = trunc i32 %and to i8
  %call4 = call signext i8 @toHex(i8 zeroext %conv3)
  %6 = load i8*, i8** %out.addr, align 4
  %incdec.ptr5 = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr5, i8** %out.addr, align 4
  store i8 %call4, i8* %6, align 1
  %7 = load i8*, i8** %ptr.addr, align 4
  %incdec.ptr6 = getelementptr inbounds i8, i8* %7, i32 1
  store i8* %incdec.ptr6, i8** %ptr.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %8 = load i8*, i8** %out.addr, align 4
  store i8 0, i8* %8, align 1
  ret void
}

declare i32 @printf(i8* %0, ...) #2

declare void @free(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %keys = alloca [3 x [8 x i8]], align 16
  %message1 = alloca [8 x i8], align 1
  %message2 = alloca [8 x i8], align 1
  %message3 = alloca [38 x i8], align 16
  %len = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [3 x [8 x i8]]* %keys to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([3 x [8 x i8]], [3 x [8 x i8]]* @__const.main.keys, i32 0, i32 0, i32 0), i32 24, i1 false)
  %1 = bitcast [8 x i8]* %message1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %1, i8* align 1 getelementptr inbounds ([8 x i8], [8 x i8]* @__const.main.message1, i32 0, i32 0), i32 8, i1 false)
  %2 = bitcast [8 x i8]* %message2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %2, i8* align 1 getelementptr inbounds ([8 x i8], [8 x i8]* @__const.main.message2, i32 0, i32 0), i32 8, i1 false)
  %3 = bitcast [38 x i8]* %message3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %3, i8* align 16 getelementptr inbounds ([38 x i8], [38 x i8]* @__const.main.message3, i32 0, i32 0), i32 38, i1 false)
  store i32 8, i32* %len, align 4
  %arrayidx = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* %keys, i32 0, i32 0
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %arrayidx, i32 0, i32 0
  %arraydecay1 = getelementptr inbounds [8 x i8], [8 x i8]* %message1, i32 0, i32 0
  %4 = load i32, i32* %len, align 4
  call void @driver(i8* %arraydecay, i8* %arraydecay1, i32 %4)
  store i32 8, i32* %len, align 4
  %arrayidx2 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* %keys, i32 0, i32 1
  %arraydecay3 = getelementptr inbounds [8 x i8], [8 x i8]* %arrayidx2, i32 0, i32 0
  %arraydecay4 = getelementptr inbounds [8 x i8], [8 x i8]* %message2, i32 0, i32 0
  %5 = load i32, i32* %len, align 4
  call void @driver(i8* %arraydecay3, i8* %arraydecay4, i32 %5)
  store i32 38, i32* %len, align 4
  %arrayidx5 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* %keys, i32 0, i32 2
  %arraydecay6 = getelementptr inbounds [8 x i8], [8 x i8]* %arrayidx5, i32 0, i32 0
  %arraydecay7 = getelementptr inbounds [38 x i8], [38 x i8]* %message3, i32 0, i32 0
  %6 = load i32, i32* %len, align 4
  call void @driver(i8* %arraydecay6, i8* %arraydecay7, i32 %6)
  ret i32 0
}

; Function Attrs: noinline nounwind optnone
define internal void @pokeBit(i8* %dst, i32 %index, i32 %value) #0 {
entry:
  %dst.addr = alloca i8*, align 4
  %index.addr = alloca i32, align 4
  %value.addr = alloca i32, align 4
  %cell = alloca i32, align 4
  %bit = alloca i32, align 4
  store i8* %dst, i8** %dst.addr, align 4
  store i32 %index, i32* %index.addr, align 4
  store i32 %value, i32* %value.addr, align 4
  %0 = load i32, i32* %index.addr, align 4
  %div = sdiv i32 %0, 8
  store i32 %div, i32* %cell, align 4
  %1 = load i32, i32* %index.addr, align 4
  %rem = srem i32 %1, 8
  %sub = sub nsw i32 7, %rem
  store i32 %sub, i32* %bit, align 4
  %2 = load i32, i32* %value.addr, align 4
  %cmp = icmp eq i32 %2, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %bit, align 4
  %shl = shl i32 1, %3
  %neg = xor i32 %shl, -1
  %4 = load i8*, i8** %dst.addr, align 4
  %5 = load i32, i32* %cell, align 4
  %arrayidx = getelementptr inbounds i8, i8* %4, i32 %5
  %6 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %6 to i32
  %and = and i32 %conv, %neg
  %conv1 = trunc i32 %and to i8
  store i8 %conv1, i8* %arrayidx, align 1
  br label %if.end

if.else:                                          ; preds = %entry
  %7 = load i32, i32* %bit, align 4
  %shl2 = shl i32 1, %7
  %8 = load i8*, i8** %dst.addr, align 4
  %9 = load i32, i32* %cell, align 4
  %arrayidx3 = getelementptr inbounds i8, i8* %8, i32 %9
  %10 = load i8, i8* %arrayidx3, align 1
  %conv4 = zext i8 %10 to i32
  %or = or i32 %conv4, %shl2
  %conv5 = trunc i32 %or to i8
  store i8 %conv5, i8* %arrayidx3, align 1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i32 @peekBit(i8* %src, i32 %index) #0 {
entry:
  %src.addr = alloca i8*, align 4
  %index.addr = alloca i32, align 4
  %cell = alloca i32, align 4
  %bit = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 4
  store i32 %index, i32* %index.addr, align 4
  %0 = load i32, i32* %index.addr, align 4
  %div = sdiv i32 %0, 8
  store i32 %div, i32* %cell, align 4
  %1 = load i32, i32* %index.addr, align 4
  %rem = srem i32 %1, 8
  %sub = sub nsw i32 7, %rem
  store i32 %sub, i32* %bit, align 4
  %2 = load i8*, i8** %src.addr, align 4
  %3 = load i32, i32* %cell, align 4
  %arrayidx = getelementptr inbounds i8, i8* %2, i32 %3
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %5 = load i32, i32* %bit, align 4
  %shl = shl i32 1, %5
  %and = and i32 %conv, %shl
  %cmp = icmp ne i32 %and, 0
  %conv1 = zext i1 %cmp to i32
  ret i32 %conv1
}

; Function Attrs: noinline nounwind optnone
define internal void @shiftLeft(i8* %src, i32 %len, i32 %times, i8* %dst) #0 {
entry:
  %src.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %times.addr = alloca i32, align 4
  %dst.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %t = alloca i32, align 4
  %temp = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %times, i32* %times.addr, align 4
  store i8* %dst, i8** %dst.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp sle i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8*, i8** %dst.addr, align 4
  %3 = load i32, i32* %i, align 4
  %4 = load i8*, i8** %src.addr, align 4
  %5 = load i32, i32* %i, align 4
  %call = call i32 @peekBit(i8* %4, i32 %5)
  call void @pokeBit(i8* %2, i32 %3, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %t, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc13, %for.end
  %7 = load i32, i32* %t, align 4
  %8 = load i32, i32* %times.addr, align 4
  %cmp2 = icmp sle i32 %7, %8
  br i1 %cmp2, label %for.body3, label %for.end15

for.body3:                                        ; preds = %for.cond1
  %9 = load i8*, i8** %dst.addr, align 4
  %call4 = call i32 @peekBit(i8* %9, i32 0)
  store i32 %call4, i32* %temp, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc9, %for.body3
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %len.addr, align 4
  %cmp6 = icmp sle i32 %10, %11
  br i1 %cmp6, label %for.body7, label %for.end11

for.body7:                                        ; preds = %for.cond5
  %12 = load i8*, i8** %dst.addr, align 4
  %13 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %13, 1
  %14 = load i8*, i8** %dst.addr, align 4
  %15 = load i32, i32* %i, align 4
  %call8 = call i32 @peekBit(i8* %14, i32 %15)
  call void @pokeBit(i8* %12, i32 %sub, i32 %call8)
  br label %for.inc9

for.inc9:                                         ; preds = %for.body7
  %16 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %16, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond5

for.end11:                                        ; preds = %for.cond5
  %17 = load i8*, i8** %dst.addr, align 4
  %18 = load i32, i32* %len.addr, align 4
  %sub12 = sub nsw i32 %18, 1
  %19 = load i32, i32* %temp, align 4
  call void @pokeBit(i8* %17, i32 %sub12, i32 %19)
  br label %for.inc13

for.inc13:                                        ; preds = %for.end11
  %20 = load i32, i32* %t, align 4
  %inc14 = add nsw i32 %20, 1
  store i32 %inc14, i32* %t, align 4
  br label %for.cond1

for.end15:                                        ; preds = %for.cond1
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @f(i8* %r, i8* %ks, i8* %sp) #0 {
entry:
  %r.addr = alloca i8*, align 4
  %ks.addr = alloca i8*, align 4
  %sp.addr = alloca i8*, align 4
  %er = alloca [6 x i8], align 1
  %sr = alloca [4 x i8], align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %b = alloca [6 x i32], align 16
  %k = alloca i32, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %m = alloca i32, align 4
  %n = alloca i32, align 4
  %p = alloca i32, align 4
  store i8* %r, i8** %r.addr, align 4
  store i8* %ks, i8** %ks.addr, align 4
  store i8* %sp, i8** %sp.addr, align 4
  %arraydecay = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  call void @llvm.memset.p0i8.i32(i8* align 1 %arraydecay, i8 0, i32 6, i1 false)
  %arraydecay1 = getelementptr inbounds [4 x i8], [4 x i8]* %sr, i32 0, i32 0
  call void @llvm.memset.p0i8.i32(i8* align 1 %arraydecay1, i8 0, i32 4, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 48
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay2 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  %1 = load i32, i32* %i, align 4
  %2 = load i8*, i8** %r.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [48 x i8], [48 x i8]* @E, i32 0, i32 %3
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %sub = sub nsw i32 %conv, 1
  %call = call i32 @peekBit(i8* %2, i32 %sub)
  call void @pokeBit(i8* %arraydecay2, i32 %1, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc12, %for.end
  %6 = load i32, i32* %i, align 4
  %cmp4 = icmp slt i32 %6, 6
  br i1 %cmp4, label %for.body6, label %for.end14

for.body6:                                        ; preds = %for.cond3
  %7 = load i8*, i8** %ks.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds i8, i8* %7, i32 %8
  %9 = load i8, i8* %arrayidx7, align 1
  %conv8 = zext i8 %9 to i32
  %10 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 %10
  %11 = load i8, i8* %arrayidx9, align 1
  %conv10 = zext i8 %11 to i32
  %xor = xor i32 %conv10, %conv8
  %conv11 = trunc i32 %xor to i8
  store i8 %conv11, i8* %arrayidx9, align 1
  br label %for.inc12

for.inc12:                                        ; preds = %for.body6
  %12 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %12, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond3

for.end14:                                        ; preds = %for.cond3
  store i32 0, i32* %i, align 4
  br label %for.cond15

for.cond15:                                       ; preds = %for.inc59, %for.end14
  %13 = load i32, i32* %i, align 4
  %cmp16 = icmp slt i32 %13, 8
  br i1 %cmp16, label %for.body18, label %for.end61

for.body18:                                       ; preds = %for.cond15
  %14 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %14, 6
  store i32 %mul, i32* %j, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond19

for.cond19:                                       ; preds = %for.inc28, %for.body18
  %15 = load i32, i32* %k, align 4
  %cmp20 = icmp slt i32 %15, 6
  br i1 %cmp20, label %for.body22, label %for.end30

for.body22:                                       ; preds = %for.cond19
  %arraydecay23 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  %16 = load i32, i32* %j, align 4
  %17 = load i32, i32* %k, align 4
  %add = add nsw i32 %16, %17
  %call24 = call i32 @peekBit(i8* %arraydecay23, i32 %add)
  %cmp25 = icmp ne i32 %call24, 0
  %18 = zext i1 %cmp25 to i64
  %cond = select i1 %cmp25, i32 1, i32 0
  %19 = load i32, i32* %k, align 4
  %arrayidx27 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 %19
  store i32 %cond, i32* %arrayidx27, align 4
  br label %for.inc28

for.inc28:                                        ; preds = %for.body22
  %20 = load i32, i32* %k, align 4
  %inc29 = add nsw i32 %20, 1
  store i32 %inc29, i32* %k, align 4
  br label %for.cond19

for.end30:                                        ; preds = %for.cond19
  %arrayidx31 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 0
  %21 = load i32, i32* %arrayidx31, align 16
  %mul32 = mul nsw i32 2, %21
  %arrayidx33 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 5
  %22 = load i32, i32* %arrayidx33, align 4
  %add34 = add nsw i32 %mul32, %22
  store i32 %add34, i32* %row, align 4
  %arrayidx35 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 1
  %23 = load i32, i32* %arrayidx35, align 4
  %mul36 = mul nsw i32 8, %23
  %arrayidx37 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 2
  %24 = load i32, i32* %arrayidx37, align 8
  %mul38 = mul nsw i32 4, %24
  %add39 = add nsw i32 %mul36, %mul38
  %arrayidx40 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 3
  %25 = load i32, i32* %arrayidx40, align 4
  %mul41 = mul nsw i32 2, %25
  %add42 = add nsw i32 %add39, %mul41
  %arrayidx43 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 4
  %26 = load i32, i32* %arrayidx43, align 16
  %add44 = add nsw i32 %add42, %26
  store i32 %add44, i32* %col, align 4
  %27 = load i32, i32* %i, align 4
  %arrayidx45 = getelementptr inbounds [8 x [64 x i8]], [8 x [64 x i8]]* @S, i32 0, i32 %27
  %28 = load i32, i32* %row, align 4
  %mul46 = mul nsw i32 %28, 16
  %29 = load i32, i32* %col, align 4
  %add47 = add nsw i32 %mul46, %29
  %arrayidx48 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx45, i32 0, i32 %add47
  %30 = load i8, i8* %arrayidx48, align 1
  %conv49 = zext i8 %30 to i32
  store i32 %conv49, i32* %m, align 4
  store i32 1, i32* %n, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end30
  %31 = load i32, i32* %m, align 4
  %cmp50 = icmp sgt i32 %31, 0
  br i1 %cmp50, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %32 = load i32, i32* %m, align 4
  %rem = srem i32 %32, 2
  store i32 %rem, i32* %p, align 4
  %arraydecay52 = getelementptr inbounds [4 x i8], [4 x i8]* %sr, i32 0, i32 0
  %33 = load i32, i32* %i, align 4
  %add53 = add nsw i32 %33, 1
  %mul54 = mul nsw i32 %add53, 4
  %34 = load i32, i32* %n, align 4
  %sub55 = sub nsw i32 %mul54, %34
  %35 = load i32, i32* %p, align 4
  %cmp56 = icmp eq i32 %35, 1
  %conv57 = zext i1 %cmp56 to i32
  call void @pokeBit(i8* %arraydecay52, i32 %sub55, i32 %conv57)
  %36 = load i32, i32* %m, align 4
  %div = sdiv i32 %36, 2
  store i32 %div, i32* %m, align 4
  %37 = load i32, i32* %n, align 4
  %inc58 = add nsw i32 %37, 1
  store i32 %inc58, i32* %n, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %for.inc59

for.inc59:                                        ; preds = %while.end
  %38 = load i32, i32* %i, align 4
  %inc60 = add nsw i32 %38, 1
  store i32 %inc60, i32* %i, align 4
  br label %for.cond15

for.end61:                                        ; preds = %for.cond15
  store i32 0, i32* %i, align 4
  br label %for.cond62

for.cond62:                                       ; preds = %for.inc71, %for.end61
  %39 = load i32, i32* %i, align 4
  %cmp63 = icmp slt i32 %39, 32
  br i1 %cmp63, label %for.body65, label %for.end73

for.body65:                                       ; preds = %for.cond62
  %40 = load i8*, i8** %sp.addr, align 4
  %41 = load i32, i32* %i, align 4
  %arraydecay66 = getelementptr inbounds [4 x i8], [4 x i8]* %sr, i32 0, i32 0
  %42 = load i32, i32* %i, align 4
  %arrayidx67 = getelementptr inbounds [32 x i8], [32 x i8]* @P, i32 0, i32 %42
  %43 = load i8, i8* %arrayidx67, align 1
  %conv68 = zext i8 %43 to i32
  %sub69 = sub nsw i32 %conv68, 1
  %call70 = call i32 @peekBit(i8* %arraydecay66, i32 %sub69)
  call void @pokeBit(i8* %40, i32 %41, i32 %call70)
  br label %for.inc71

for.inc71:                                        ; preds = %for.body65
  %44 = load i32, i32* %i, align 4
  %inc72 = add nsw i32 %44, 1
  store i32 %inc72, i32* %i, align 4
  br label %for.cond62

for.end73:                                        ; preds = %for.cond62
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal signext i8 @toHex(i8 zeroext %in) #0 {
entry:
  %retval = alloca i8, align 1
  %in.addr = alloca i8, align 1
  store i8 %in, i8* %in.addr, align 1
  %0 = load i8, i8* %in.addr, align 1
  %conv = zext i8 %0 to i32
  %cmp = icmp sle i32 0, %conv
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i8, i8* %in.addr, align 1
  %conv2 = zext i8 %1 to i32
  %cmp3 = icmp slt i32 %conv2, 10
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %2 = load i8, i8* %in.addr, align 1
  %conv5 = zext i8 %2 to i32
  %add = add nsw i32 48, %conv5
  %conv6 = trunc i32 %add to i8
  store i8 %conv6, i8* %retval, align 1
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %3 = load i8, i8* %in.addr, align 1
  %conv7 = zext i8 %3 to i32
  %cmp8 = icmp sle i32 10, %conv7
  br i1 %cmp8, label %land.lhs.true10, label %if.end18

land.lhs.true10:                                  ; preds = %if.end
  %4 = load i8, i8* %in.addr, align 1
  %conv11 = zext i8 %4 to i32
  %cmp12 = icmp sle i32 %conv11, 15
  br i1 %cmp12, label %if.then14, label %if.end18

if.then14:                                        ; preds = %land.lhs.true10
  %5 = load i8, i8* %in.addr, align 1
  %conv15 = zext i8 %5 to i32
  %add16 = add nsw i32 65, %conv15
  %sub = sub nsw i32 %add16, 10
  %conv17 = trunc i32 %sub to i8
  store i8 %conv17, i8* %retval, align 1
  br label %return

if.end18:                                         ; preds = %land.lhs.true10, %if.end
  store i8 0, i8* %retval, align 1
  br label %return

return:                                           ; preds = %if.end18, %if.then14, %if.then
  %6 = load i8, i8* %retval, align 1
  ret i8 %6
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for main()

; entering Souper's runOnFunction() for ./Data_Encryption_Standard.c.bc:pokeBit()

; ModuleID = './Data_Encryption_Standard.c.bc'
source_filename = "./Data_Encryption_Standard.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.String = type { i8*, i32 }

@.str = private unnamed_addr constant [14 x i8] c"Key     : %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"Message : %s\0A\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"Encoded : %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"Decoded : %s\0A\0A\00", align 1
@__const.main.keys = private unnamed_addr constant [3 x [8 x i8]] [[8 x i8] c"\134Wy\9B\BC\DF\F1", [8 x i8] c"\0E2\922\EAm\0Ds", [8 x i8] c"\0E2\922\EAm\0Ds"], align 16
@__const.main.message1 = private unnamed_addr constant [8 x i8] c"\01#Eg\89\AB\CD\EF", align 1
@__const.main.message2 = private unnamed_addr constant [8 x i8] c"\87\87\87\87\87\87\87\87", align 1
@__const.main.message3 = private unnamed_addr constant [38 x i8] c"Your lips are smoother than vaseline\0D\0A", align 16
@PC1 = internal constant [56 x i8] c"91)!\19\11\09\01:2*\22\1A\12\0A\02;3+#\1B\13\0B\03<4,$?7/'\1F\17\0F\07>6.&\1E\16\0E\06=5-%\1D\15\0D\05\1C\14\0C\04", align 16
@SHIFTS = internal constant [16 x i8] c"\01\01\02\02\02\02\02\02\01\02\02\02\02\02\02\01", align 16
@PC2 = internal constant [48 x i8] c"\0E\11\0B\18\01\05\03\1C\0F\06\15\0A\17\13\0C\04\1A\08\10\07\1B\14\0D\02)4\1F%/7\1E(3-!0,1'8\225.*2$\1D ", align 16
@IP = internal constant [64 x i8] c":2*\22\1A\12\0A\02<4,$\1C\14\0C\04>6.&\1E\16\0E\06@80( \18\10\0891)!\19\11\09\01;3+#\1B\13\0B\03=5-%\1D\15\0D\05?7/'\1F\17\0F\07", align 16
@IP2 = internal constant [64 x i8] c"(\080\108\18@ '\07/\0F7\17?\1F&\06.\0E6\16>\1E%\05-\0D5\15=\1D$\04,\0C4\14<\1C#\03+\0B3\13;\1B\22\02*\0A2\12:\1A!\01)\091\119\19", align 16
@E = internal constant [48 x i8] c" \01\02\03\04\05\04\05\06\07\08\09\08\09\0A\0B\0C\0D\0C\0D\0E\0F\10\11\10\11\12\13\14\15\14\15\16\17\18\19\18\19\1A\1B\1C\1D\1C\1D\1E\1F \01", align 16
@S = internal constant [8 x [64 x i8]] [[64 x i8] c"\0E\04\0D\01\02\0F\0B\08\03\0A\06\0C\05\09\00\07\00\0F\07\04\0E\02\0D\01\0A\06\0C\0B\09\05\03\08\04\01\0E\08\0D\06\02\0B\0F\0C\09\07\03\0A\05\00\0F\0C\08\02\04\09\01\07\05\0B\03\0E\0A\00\06\0D", [64 x i8] c"\0F\01\08\0E\06\0B\03\04\09\07\02\0D\0C\00\05\0A\03\0D\04\07\0F\02\08\0E\0C\00\01\0A\06\09\0B\05\00\0E\07\0B\0A\04\0D\01\05\08\0C\06\09\03\02\0F\0D\08\0A\01\03\0F\04\02\0B\06\07\0C\00\05\0E\09", [64 x i8] c"\0A\00\09\0E\06\03\0F\05\01\0D\0C\07\0B\04\02\08\0D\07\00\09\03\04\06\0A\02\08\05\0E\0C\0B\0F\01\0D\06\04\09\08\0F\03\00\0B\01\02\0C\05\0A\0E\07\01\0A\0D\00\06\09\08\07\04\0F\0E\03\0B\05\02\0C", [64 x i8] c"\07\0D\0E\03\00\06\09\0A\01\02\08\05\0B\0C\04\0F\0D\08\0B\05\06\0F\00\03\04\07\02\0C\01\0A\0E\09\0A\06\09\00\0C\0B\07\0D\0F\01\03\0E\05\02\08\04\03\0F\00\06\0A\01\0D\08\09\04\05\0B\0C\07\02\0E", [64 x i8] c"\02\0C\04\01\07\0A\0B\06\08\05\03\0F\0D\00\0E\09\0E\0B\02\0C\04\07\0D\01\05\00\0F\0A\03\09\08\06\04\02\01\0B\0A\0D\07\08\0F\09\0C\05\06\03\00\0E\0B\08\0C\07\01\0E\02\0D\06\0F\00\09\0A\04\05\03", [64 x i8] c"\0C\01\0A\0F\09\02\06\08\00\0D\03\04\0E\07\05\0B\0A\0F\04\02\07\0C\09\05\06\01\0D\0E\00\0B\03\08\09\0E\0F\05\02\08\0C\03\07\00\04\0A\01\0D\0B\06\04\03\02\0C\09\05\0F\0A\0B\0E\01\07\06\00\08\0D", [64 x i8] c"\04\0B\02\0E\0F\00\08\0D\03\0C\09\07\05\0A\06\01\0D\00\0B\07\04\09\01\0A\0E\03\05\0C\02\0F\08\06\01\04\0B\0D\0C\03\07\0E\0A\0F\06\08\00\05\09\02\06\0B\0D\08\01\04\0A\07\09\05\00\0F\0E\02\03\0C", [64 x i8] c"\0D\02\08\04\06\0F\0B\01\0A\09\03\0E\05\00\0C\07\01\0F\0D\08\0A\03\07\04\0C\05\06\0B\00\0E\09\02\07\0B\04\01\09\0C\0E\02\00\06\0A\0D\0F\03\05\08\02\01\0E\07\04\0A\08\0D\0F\0C\09\00\03\05\06\0B"], align 16
@P = internal constant [32 x i8] c"\10\07\14\15\1D\0C\1C\11\01\0F\17\1A\05\12\1F\0A\02\08\18\0E \1B\03\09\13\0D\1E\06\16\0B\04\19", align 16
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @encrypt(%struct.String* noalias sret align 4 %agg.result, i8* %key, i8* %message, i32 %len) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %message.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %ks = alloca [17 x [6 x i8]], align 16
  %padByte = alloca i8, align 1
  %i = alloca i32, align 4
  store i8* %key, i8** %key.addr, align 4
  store i8* %message, i8** %message.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = bitcast %struct.String* %agg.result to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  %1 = load i8*, i8** %key.addr, align 4
  %arraydecay = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  call void @getSubKeys(i8* %1, [6 x i8]* %arraydecay)
  %2 = load i32, i32* %len.addr, align 4
  %rem = srem i32 %2, 8
  %sub = sub nsw i32 8, %rem
  %conv = trunc i32 %sub to i8
  store i8 %conv, i8* %padByte, align 1
  %3 = load i32, i32* %len.addr, align 4
  %4 = load i8, i8* %padByte, align 1
  %conv1 = zext i8 %4 to i32
  %add = add nsw i32 %3, %conv1
  %len2 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  store i32 %add, i32* %len2, align 4
  %len3 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %5 = load i32, i32* %len3, align 4
  %call = call noalias i8* @malloc(i32 %5)
  %data = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  store i8* %call, i8** %data, align 4
  %data4 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %6 = load i8*, i8** %data4, align 4
  %7 = load i8*, i8** %message.addr, align 4
  %8 = load i32, i32* %len.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %6, i8* align 1 %7, i32 %8, i1 false)
  %data5 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %9 = load i8*, i8** %data5, align 4
  %10 = load i32, i32* %len.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %9, i32 %10
  %11 = load i8, i8* %padByte, align 1
  %12 = load i8, i8* %padByte, align 1
  %conv7 = zext i8 %12 to i32
  call void @llvm.memset.p0i8.i32(i8* align 1 %arrayidx, i8 %11, i32 %conv7, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %13 = load i32, i32* %i, align 4
  %len8 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %14 = load i32, i32* %len8, align 4
  %cmp = icmp slt i32 %13, %14
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %data10 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %15 = load i8*, i8** %data10, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds i8, i8* %15, i32 %16
  %arraydecay12 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  %data13 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %17 = load i8*, i8** %data13, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds i8, i8* %17, i32 %18
  call void @processMessage(i8* %arrayidx11, [6 x i8]* %arraydecay12, i8* %arrayidx14)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %19 = load i32, i32* %i, align 4
  %add15 = add nsw i32 %19, 8
  store i32 %add15, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define internal void @getSubKeys(i8* %key, [6 x i8]* %ks) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %ks.addr = alloca [6 x i8]*, align 4
  %c = alloca [17 x [7 x i8]], align 16
  %d = alloca [17 x [4 x i8]], align 16
  %kp = alloca [7 x i8], align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i8* %key, i8** %key.addr, align 4
  store [6 x i8]* %ks, [6 x i8]** %ks.addr, align 4
  %arraydecay = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 0
  %0 = bitcast [7 x i8]* %arraydecay to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 119, i1 false)
  %arraydecay1 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 0
  %1 = bitcast [4 x i8]* %arraydecay1 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %1, i8 0, i32 68, i1 false)
  %2 = load [6 x i8]*, [6 x i8]** %ks.addr, align 4
  %3 = bitcast [6 x i8]* %2 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 1 %3, i8 0, i32 102, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %4, 56
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay2 = getelementptr inbounds [7 x i8], [7 x i8]* %kp, i32 0, i32 0
  %5 = load i32, i32* %i, align 4
  %6 = load i8*, i8** %key.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [56 x i8], [56 x i8]* @PC1, i32 0, i32 %7
  %8 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %8 to i32
  %sub = sub nsw i32 %conv, 1
  %call = call i32 @peekBit(i8* %6, i32 %sub)
  call void @pokeBit(i8* %arraydecay2, i32 %5, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc15, %for.end
  %10 = load i32, i32* %i, align 4
  %cmp4 = icmp slt i32 %10, 28
  br i1 %cmp4, label %for.body6, label %for.end17

for.body6:                                        ; preds = %for.cond3
  %arrayidx7 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 0
  %arraydecay8 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx7, i32 0, i32 0
  %11 = load i32, i32* %i, align 4
  %arraydecay9 = getelementptr inbounds [7 x i8], [7 x i8]* %kp, i32 0, i32 0
  %12 = load i32, i32* %i, align 4
  %call10 = call i32 @peekBit(i8* %arraydecay9, i32 %12)
  call void @pokeBit(i8* %arraydecay8, i32 %11, i32 %call10)
  %arrayidx11 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 0
  %arraydecay12 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx11, i32 0, i32 0
  %13 = load i32, i32* %i, align 4
  %arraydecay13 = getelementptr inbounds [7 x i8], [7 x i8]* %kp, i32 0, i32 0
  %14 = load i32, i32* %i, align 4
  %add = add nsw i32 %14, 28
  %call14 = call i32 @peekBit(i8* %arraydecay13, i32 %add)
  call void @pokeBit(i8* %arraydecay12, i32 %13, i32 %call14)
  br label %for.inc15

for.inc15:                                        ; preds = %for.body6
  %15 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %15, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond3

for.end17:                                        ; preds = %for.cond3
  store i32 1, i32* %i, align 4
  br label %for.cond18

for.cond18:                                       ; preds = %for.inc38, %for.end17
  %16 = load i32, i32* %i, align 4
  %cmp19 = icmp slt i32 %16, 17
  br i1 %cmp19, label %for.body21, label %for.end40

for.body21:                                       ; preds = %for.cond18
  %17 = load i32, i32* %i, align 4
  %sub22 = sub nsw i32 %17, 1
  %arrayidx23 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %sub22
  %arraydecay24 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx23, i32 0, i32 0
  %18 = load i32, i32* %i, align 4
  %sub25 = sub nsw i32 %18, 1
  %arrayidx26 = getelementptr inbounds [16 x i8], [16 x i8]* @SHIFTS, i32 0, i32 %sub25
  %19 = load i8, i8* %arrayidx26, align 1
  %conv27 = zext i8 %19 to i32
  %20 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %20
  %arraydecay29 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx28, i32 0, i32 0
  call void @shiftLeft(i8* %arraydecay24, i32 28, i32 %conv27, i8* %arraydecay29)
  %21 = load i32, i32* %i, align 4
  %sub30 = sub nsw i32 %21, 1
  %arrayidx31 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 %sub30
  %arraydecay32 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx31, i32 0, i32 0
  %22 = load i32, i32* %i, align 4
  %sub33 = sub nsw i32 %22, 1
  %arrayidx34 = getelementptr inbounds [16 x i8], [16 x i8]* @SHIFTS, i32 0, i32 %sub33
  %23 = load i8, i8* %arrayidx34, align 1
  %conv35 = zext i8 %23 to i32
  %24 = load i32, i32* %i, align 4
  %arrayidx36 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 %24
  %arraydecay37 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx36, i32 0, i32 0
  call void @shiftLeft(i8* %arraydecay32, i32 28, i32 %conv35, i8* %arraydecay37)
  br label %for.inc38

for.inc38:                                        ; preds = %for.body21
  %25 = load i32, i32* %i, align 4
  %inc39 = add nsw i32 %25, 1
  store i32 %inc39, i32* %i, align 4
  br label %for.cond18

for.end40:                                        ; preds = %for.cond18
  store i32 1, i32* %i, align 4
  br label %for.cond41

for.cond41:                                       ; preds = %for.inc58, %for.end40
  %26 = load i32, i32* %i, align 4
  %cmp42 = icmp slt i32 %26, 17
  br i1 %cmp42, label %for.body44, label %for.end60

for.body44:                                       ; preds = %for.cond41
  store i32 28, i32* %j, align 4
  br label %for.cond45

for.cond45:                                       ; preds = %for.inc55, %for.body44
  %27 = load i32, i32* %j, align 4
  %cmp46 = icmp slt i32 %27, 56
  br i1 %cmp46, label %for.body48, label %for.end57

for.body48:                                       ; preds = %for.cond45
  %28 = load i32, i32* %i, align 4
  %arrayidx49 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %28
  %arraydecay50 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx49, i32 0, i32 0
  %29 = load i32, i32* %j, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx51 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 %30
  %arraydecay52 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx51, i32 0, i32 0
  %31 = load i32, i32* %j, align 4
  %sub53 = sub nsw i32 %31, 28
  %call54 = call i32 @peekBit(i8* %arraydecay52, i32 %sub53)
  call void @pokeBit(i8* %arraydecay50, i32 %29, i32 %call54)
  br label %for.inc55

for.inc55:                                        ; preds = %for.body48
  %32 = load i32, i32* %j, align 4
  %inc56 = add nsw i32 %32, 1
  store i32 %inc56, i32* %j, align 4
  br label %for.cond45

for.end57:                                        ; preds = %for.cond45
  br label %for.inc58

for.inc58:                                        ; preds = %for.end57
  %33 = load i32, i32* %i, align 4
  %inc59 = add nsw i32 %33, 1
  store i32 %inc59, i32* %i, align 4
  br label %for.cond41

for.end60:                                        ; preds = %for.cond41
  store i32 1, i32* %i, align 4
  br label %for.cond61

for.cond61:                                       ; preds = %for.inc80, %for.end60
  %34 = load i32, i32* %i, align 4
  %cmp62 = icmp slt i32 %34, 17
  br i1 %cmp62, label %for.body64, label %for.end82

for.body64:                                       ; preds = %for.cond61
  store i32 0, i32* %j, align 4
  br label %for.cond65

for.cond65:                                       ; preds = %for.inc77, %for.body64
  %35 = load i32, i32* %j, align 4
  %cmp66 = icmp slt i32 %35, 48
  br i1 %cmp66, label %for.body68, label %for.end79

for.body68:                                       ; preds = %for.cond65
  %36 = load [6 x i8]*, [6 x i8]** %ks.addr, align 4
  %37 = load i32, i32* %i, align 4
  %arrayidx69 = getelementptr inbounds [6 x i8], [6 x i8]* %36, i32 %37
  %arraydecay70 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx69, i32 0, i32 0
  %38 = load i32, i32* %j, align 4
  %39 = load i32, i32* %i, align 4
  %arrayidx71 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %39
  %arraydecay72 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx71, i32 0, i32 0
  %40 = load i32, i32* %j, align 4
  %arrayidx73 = getelementptr inbounds [48 x i8], [48 x i8]* @PC2, i32 0, i32 %40
  %41 = load i8, i8* %arrayidx73, align 1
  %conv74 = zext i8 %41 to i32
  %sub75 = sub nsw i32 %conv74, 1
  %call76 = call i32 @peekBit(i8* %arraydecay72, i32 %sub75)
  call void @pokeBit(i8* %arraydecay70, i32 %38, i32 %call76)
  br label %for.inc77

for.inc77:                                        ; preds = %for.body68
  %42 = load i32, i32* %j, align 4
  %inc78 = add nsw i32 %42, 1
  store i32 %inc78, i32* %j, align 4
  br label %for.cond65

for.end79:                                        ; preds = %for.cond65
  br label %for.inc80

for.inc80:                                        ; preds = %for.end79
  %43 = load i32, i32* %i, align 4
  %inc81 = add nsw i32 %43, 1
  store i32 %inc81, i32* %i, align 4
  br label %for.cond61

for.end82:                                        ; preds = %for.cond61
  ret void
}

declare noalias i8* @malloc(i32 %0) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: noinline nounwind optnone
define internal void @processMessage(i8* %message, [6 x i8]* %ks, i8* %ep) #0 {
entry:
  %message.addr = alloca i8*, align 4
  %ks.addr = alloca [6 x i8]*, align 4
  %ep.addr = alloca i8*, align 4
  %left = alloca [17 x [4 x i8]], align 16
  %right = alloca [17 x [4 x i8]], align 16
  %mp = alloca [8 x i8], align 1
  %e = alloca [8 x i8], align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %fs = alloca [4 x i8], align 1
  store i8* %message, i8** %message.addr, align 4
  store [6 x i8]* %ks, [6 x i8]** %ks.addr, align 4
  store i8* %ep, i8** %ep.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 64
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %mp, i32 0, i32 0
  %1 = load i32, i32* %i, align 4
  %2 = load i8*, i8** %message.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [64 x i8], [64 x i8]* @IP, i32 0, i32 %3
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %sub = sub nsw i32 %conv, 1
  %call = call i32 @peekBit(i8* %2, i32 %sub)
  call void @pokeBit(i8* %arraydecay, i32 %1, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc13, %for.end
  %6 = load i32, i32* %i, align 4
  %cmp2 = icmp slt i32 %6, 32
  br i1 %cmp2, label %for.body4, label %for.end15

for.body4:                                        ; preds = %for.cond1
  %arrayidx5 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 0
  %arraydecay6 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx5, i32 0, i32 0
  %7 = load i32, i32* %i, align 4
  %arraydecay7 = getelementptr inbounds [8 x i8], [8 x i8]* %mp, i32 0, i32 0
  %8 = load i32, i32* %i, align 4
  %call8 = call i32 @peekBit(i8* %arraydecay7, i32 %8)
  call void @pokeBit(i8* %arraydecay6, i32 %7, i32 %call8)
  %arrayidx9 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 0
  %arraydecay10 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx9, i32 0, i32 0
  %9 = load i32, i32* %i, align 4
  %arraydecay11 = getelementptr inbounds [8 x i8], [8 x i8]* %mp, i32 0, i32 0
  %10 = load i32, i32* %i, align 4
  %add = add nsw i32 %10, 32
  %call12 = call i32 @peekBit(i8* %arraydecay11, i32 %add)
  call void @pokeBit(i8* %arraydecay10, i32 %9, i32 %call12)
  br label %for.inc13

for.inc13:                                        ; preds = %for.body4
  %11 = load i32, i32* %i, align 4
  %inc14 = add nsw i32 %11, 1
  store i32 %inc14, i32* %i, align 4
  br label %for.cond1

for.end15:                                        ; preds = %for.cond1
  store i32 1, i32* %i, align 4
  br label %for.cond16

for.cond16:                                       ; preds = %for.inc50, %for.end15
  %12 = load i32, i32* %i, align 4
  %cmp17 = icmp slt i32 %12, 17
  br i1 %cmp17, label %for.body19, label %for.end52

for.body19:                                       ; preds = %for.cond16
  %13 = load i32, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 %13
  %arraydecay21 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx20, i32 0, i32 0
  %14 = load i32, i32* %i, align 4
  %sub22 = sub nsw i32 %14, 1
  %arrayidx23 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 %sub22
  %arraydecay24 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx23, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %arraydecay21, i8* align 4 %arraydecay24, i32 4, i1 false)
  %15 = load i32, i32* %i, align 4
  %sub25 = sub nsw i32 %15, 1
  %arrayidx26 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 %sub25
  %arraydecay27 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx26, i32 0, i32 0
  %16 = load [6 x i8]*, [6 x i8]** %ks.addr, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds [6 x i8], [6 x i8]* %16, i32 %17
  %arraydecay29 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx28, i32 0, i32 0
  %arraydecay30 = getelementptr inbounds [4 x i8], [4 x i8]* %fs, i32 0, i32 0
  call void @f(i8* %arraydecay27, i8* %arraydecay29, i8* %arraydecay30)
  store i32 0, i32* %j, align 4
  br label %for.cond31

for.cond31:                                       ; preds = %for.inc42, %for.body19
  %18 = load i32, i32* %j, align 4
  %cmp32 = icmp slt i32 %18, 4
  br i1 %cmp32, label %for.body34, label %for.end44

for.body34:                                       ; preds = %for.cond31
  %19 = load i32, i32* %j, align 4
  %arrayidx35 = getelementptr inbounds [4 x i8], [4 x i8]* %fs, i32 0, i32 %19
  %20 = load i8, i8* %arrayidx35, align 1
  %conv36 = zext i8 %20 to i32
  %21 = load i32, i32* %i, align 4
  %sub37 = sub nsw i32 %21, 1
  %arrayidx38 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 %sub37
  %22 = load i32, i32* %j, align 4
  %arrayidx39 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx38, i32 0, i32 %22
  %23 = load i8, i8* %arrayidx39, align 1
  %conv40 = zext i8 %23 to i32
  %xor = xor i32 %conv40, %conv36
  %conv41 = trunc i32 %xor to i8
  store i8 %conv41, i8* %arrayidx39, align 1
  br label %for.inc42

for.inc42:                                        ; preds = %for.body34
  %24 = load i32, i32* %j, align 4
  %inc43 = add nsw i32 %24, 1
  store i32 %inc43, i32* %j, align 4
  br label %for.cond31

for.end44:                                        ; preds = %for.cond31
  %25 = load i32, i32* %i, align 4
  %arrayidx45 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 %25
  %arraydecay46 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx45, i32 0, i32 0
  %26 = load i32, i32* %i, align 4
  %sub47 = sub nsw i32 %26, 1
  %arrayidx48 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 %sub47
  %arraydecay49 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx48, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %arraydecay46, i8* align 4 %arraydecay49, i32 4, i1 false)
  br label %for.inc50

for.inc50:                                        ; preds = %for.end44
  %27 = load i32, i32* %i, align 4
  %inc51 = add nsw i32 %27, 1
  store i32 %inc51, i32* %i, align 4
  br label %for.cond16

for.end52:                                        ; preds = %for.cond16
  store i32 0, i32* %i, align 4
  br label %for.cond53

for.cond53:                                       ; preds = %for.inc61, %for.end52
  %28 = load i32, i32* %i, align 4
  %cmp54 = icmp slt i32 %28, 32
  br i1 %cmp54, label %for.body56, label %for.end63

for.body56:                                       ; preds = %for.cond53
  %arraydecay57 = getelementptr inbounds [8 x i8], [8 x i8]* %e, i32 0, i32 0
  %29 = load i32, i32* %i, align 4
  %arrayidx58 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 16
  %arraydecay59 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx58, i32 0, i32 0
  %30 = load i32, i32* %i, align 4
  %call60 = call i32 @peekBit(i8* %arraydecay59, i32 %30)
  call void @pokeBit(i8* %arraydecay57, i32 %29, i32 %call60)
  br label %for.inc61

for.inc61:                                        ; preds = %for.body56
  %31 = load i32, i32* %i, align 4
  %inc62 = add nsw i32 %31, 1
  store i32 %inc62, i32* %i, align 4
  br label %for.cond53

for.end63:                                        ; preds = %for.cond53
  store i32 32, i32* %i, align 4
  br label %for.cond64

for.cond64:                                       ; preds = %for.inc73, %for.end63
  %32 = load i32, i32* %i, align 4
  %cmp65 = icmp slt i32 %32, 64
  br i1 %cmp65, label %for.body67, label %for.end75

for.body67:                                       ; preds = %for.cond64
  %arraydecay68 = getelementptr inbounds [8 x i8], [8 x i8]* %e, i32 0, i32 0
  %33 = load i32, i32* %i, align 4
  %arrayidx69 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 16
  %arraydecay70 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx69, i32 0, i32 0
  %34 = load i32, i32* %i, align 4
  %sub71 = sub nsw i32 %34, 32
  %call72 = call i32 @peekBit(i8* %arraydecay70, i32 %sub71)
  call void @pokeBit(i8* %arraydecay68, i32 %33, i32 %call72)
  br label %for.inc73

for.inc73:                                        ; preds = %for.body67
  %35 = load i32, i32* %i, align 4
  %inc74 = add nsw i32 %35, 1
  store i32 %inc74, i32* %i, align 4
  br label %for.cond64

for.end75:                                        ; preds = %for.cond64
  store i32 0, i32* %i, align 4
  br label %for.cond76

for.cond76:                                       ; preds = %for.inc85, %for.end75
  %36 = load i32, i32* %i, align 4
  %cmp77 = icmp slt i32 %36, 64
  br i1 %cmp77, label %for.body79, label %for.end87

for.body79:                                       ; preds = %for.cond76
  %37 = load i8*, i8** %ep.addr, align 4
  %38 = load i32, i32* %i, align 4
  %arraydecay80 = getelementptr inbounds [8 x i8], [8 x i8]* %e, i32 0, i32 0
  %39 = load i32, i32* %i, align 4
  %arrayidx81 = getelementptr inbounds [64 x i8], [64 x i8]* @IP2, i32 0, i32 %39
  %40 = load i8, i8* %arrayidx81, align 1
  %conv82 = zext i8 %40 to i32
  %sub83 = sub nsw i32 %conv82, 1
  %call84 = call i32 @peekBit(i8* %arraydecay80, i32 %sub83)
  call void @pokeBit(i8* %37, i32 %38, i32 %call84)
  br label %for.inc85

for.inc85:                                        ; preds = %for.body79
  %41 = load i32, i32* %i, align 4
  %inc86 = add nsw i32 %41, 1
  store i32 %inc86, i32* %i, align 4
  br label %for.cond76

for.end87:                                        ; preds = %for.cond76
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @decrypt(%struct.String* noalias sret align 4 %agg.result, i8* %key, i8* %message, i32 %len) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %message.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %ks = alloca [17 x [6 x i8]], align 16
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %padByte = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8* %key, i8** %key.addr, align 4
  store i8* %message, i8** %message.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = bitcast %struct.String* %agg.result to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  %1 = load i8*, i8** %key.addr, align 4
  %arraydecay = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  call void @getSubKeys(i8* %1, [6 x i8]* %arraydecay)
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc12, %entry
  %2 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, 9
  br i1 %cmp, label %for.body, label %for.end14

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %3, 6
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %4
  %5 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx, i32 0, i32 %5
  %6 = load i8, i8* %arrayidx4, align 1
  store i8 %6, i8* %temp, align 1
  %7 = load i32, i32* %i, align 4
  %sub = sub nsw i32 17, %7
  %arrayidx5 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %sub
  %8 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx5, i32 0, i32 %8
  %9 = load i8, i8* %arrayidx6, align 1
  %10 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %10
  %11 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx7, i32 0, i32 %11
  store i8 %9, i8* %arrayidx8, align 1
  %12 = load i8, i8* %temp, align 1
  %13 = load i32, i32* %i, align 4
  %sub9 = sub nsw i32 17, %13
  %arrayidx10 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %sub9
  %14 = load i32, i32* %j, align 4
  %arrayidx11 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx10, i32 0, i32 %14
  store i8 %12, i8* %arrayidx11, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %15 = load i32, i32* %j, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc12

for.inc12:                                        ; preds = %for.end
  %16 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %16, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond

for.end14:                                        ; preds = %for.cond
  %17 = load i32, i32* %len.addr, align 4
  %call = call noalias i8* @malloc(i32 %17)
  %data = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  store i8* %call, i8** %data, align 4
  %data15 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %18 = load i8*, i8** %data15, align 4
  %19 = load i8*, i8** %message.addr, align 4
  %20 = load i32, i32* %len.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %18, i8* align 1 %19, i32 %20, i1 false)
  %21 = load i32, i32* %len.addr, align 4
  %len16 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  store i32 %21, i32* %len16, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond17

for.cond17:                                       ; preds = %for.inc26, %for.end14
  %22 = load i32, i32* %i, align 4
  %len18 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %23 = load i32, i32* %len18, align 4
  %cmp19 = icmp slt i32 %22, %23
  br i1 %cmp19, label %for.body20, label %for.end27

for.body20:                                       ; preds = %for.cond17
  %data21 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %24 = load i8*, i8** %data21, align 4
  %25 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds i8, i8* %24, i32 %25
  %arraydecay23 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  %data24 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %26 = load i8*, i8** %data24, align 4
  %27 = load i32, i32* %i, align 4
  %arrayidx25 = getelementptr inbounds i8, i8* %26, i32 %27
  call void @processMessage(i8* %arrayidx22, [6 x i8]* %arraydecay23, i8* %arrayidx25)
  br label %for.inc26

for.inc26:                                        ; preds = %for.body20
  %28 = load i32, i32* %i, align 4
  %add = add nsw i32 %28, 8
  store i32 %add, i32* %i, align 4
  br label %for.cond17

for.end27:                                        ; preds = %for.cond17
  %data28 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %29 = load i8*, i8** %data28, align 4
  %30 = load i32, i32* %len.addr, align 4
  %sub29 = sub nsw i32 %30, 1
  %arrayidx30 = getelementptr inbounds i8, i8* %29, i32 %sub29
  %31 = load i8, i8* %arrayidx30, align 1
  store i8 %31, i8* %padByte, align 1
  %32 = load i8, i8* %padByte, align 1
  %conv = zext i8 %32 to i32
  %len31 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %33 = load i32, i32* %len31, align 4
  %sub32 = sub nsw i32 %33, %conv
  store i32 %sub32, i32* %len31, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @driver(i8* %key, i8* %message, i32 %len) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %message.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %encoded = alloca %struct.String, align 4
  %decoded = alloca %struct.String, align 4
  %buffer = alloca [128 x i8], align 16
  %tmp = alloca %struct.String, align 4
  %tmp9 = alloca %struct.String, align 4
  store i8* %key, i8** %key.addr, align 4
  store i8* %message, i8** %message.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load i8*, i8** %key.addr, align 4
  %arraydecay = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %0, i32 8, i8* %arraydecay)
  %arraydecay1 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i32 0, i32 0), i8* %arraydecay1)
  %1 = load i8*, i8** %message.addr, align 4
  %2 = load i32, i32* %len.addr, align 4
  %arraydecay2 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %1, i32 %2, i8* %arraydecay2)
  %arraydecay3 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0), i8* %arraydecay3)
  %3 = load i8*, i8** %key.addr, align 4
  %4 = load i8*, i8** %message.addr, align 4
  %5 = load i32, i32* %len.addr, align 4
  call void @encrypt(%struct.String* sret align 4 %tmp, i8* %3, i8* %4, i32 %5)
  %6 = bitcast %struct.String* %encoded to i8*
  %7 = bitcast %struct.String* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %6, i8* align 4 %7, i32 8, i1 false)
  %data = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  %8 = load i8*, i8** %data, align 4
  %len5 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 1
  %9 = load i32, i32* %len5, align 4
  %arraydecay6 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %8, i32 %9, i8* %arraydecay6)
  %arraydecay7 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0), i8* %arraydecay7)
  %10 = load i8*, i8** %key.addr, align 4
  %data10 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  %11 = load i8*, i8** %data10, align 4
  %len11 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 1
  %12 = load i32, i32* %len11, align 4
  call void @decrypt(%struct.String* sret align 4 %tmp9, i8* %10, i8* %11, i32 %12)
  %13 = bitcast %struct.String* %decoded to i8*
  %14 = bitcast %struct.String* %tmp9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %13, i8* align 4 %14, i32 8, i1 false)
  %data12 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 0
  %15 = load i8*, i8** %data12, align 4
  %len13 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 1
  %16 = load i32, i32* %len13, align 4
  %arraydecay14 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %15, i32 %16, i8* %arraydecay14)
  %arraydecay15 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0), i8* %arraydecay15)
  %len17 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 1
  %17 = load i32, i32* %len17, align 4
  %cmp = icmp sgt i32 %17, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %data18 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  %18 = load i8*, i8** %data18, align 4
  call void @free(i8* %18)
  %data19 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  store i8* null, i8** %data19, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %len20 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 1
  %19 = load i32, i32* %len20, align 4
  %cmp21 = icmp sgt i32 %19, 0
  br i1 %cmp21, label %if.then22, label %if.end25

if.then22:                                        ; preds = %if.end
  %data23 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 0
  %20 = load i8*, i8** %data23, align 4
  call void @free(i8* %20)
  %data24 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 0
  store i8* null, i8** %data24, align 4
  br label %if.end25

if.end25:                                         ; preds = %if.then22, %if.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @printBytes(i8* %ptr, i32 %len, i8* %out) #0 {
entry:
  %ptr.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  store i8* %ptr, i8** %ptr.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %len.addr, align 4
  %dec = add nsw i32 %0, -1
  store i32 %dec, i32* %len.addr, align 4
  %cmp = icmp sgt i32 %0, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i8*, i8** %ptr.addr, align 4
  %2 = load i8, i8* %1, align 1
  %conv = zext i8 %2 to i32
  %shr = ashr i32 %conv, 4
  %conv1 = trunc i32 %shr to i8
  %call = call signext i8 @toHex(i8 zeroext %conv1)
  %3 = load i8*, i8** %out.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %3, i32 1
  store i8* %incdec.ptr, i8** %out.addr, align 4
  store i8 %call, i8* %3, align 1
  %4 = load i8*, i8** %ptr.addr, align 4
  %5 = load i8, i8* %4, align 1
  %conv2 = zext i8 %5 to i32
  %and = and i32 %conv2, 15
  %conv3 = trunc i32 %and to i8
  %call4 = call signext i8 @toHex(i8 zeroext %conv3)
  %6 = load i8*, i8** %out.addr, align 4
  %incdec.ptr5 = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr5, i8** %out.addr, align 4
  store i8 %call4, i8* %6, align 1
  %7 = load i8*, i8** %ptr.addr, align 4
  %incdec.ptr6 = getelementptr inbounds i8, i8* %7, i32 1
  store i8* %incdec.ptr6, i8** %ptr.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %8 = load i8*, i8** %out.addr, align 4
  store i8 0, i8* %8, align 1
  ret void
}

declare i32 @printf(i8* %0, ...) #2

declare void @free(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %keys = alloca [3 x [8 x i8]], align 16
  %message1 = alloca [8 x i8], align 1
  %message2 = alloca [8 x i8], align 1
  %message3 = alloca [38 x i8], align 16
  %len = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [3 x [8 x i8]]* %keys to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([3 x [8 x i8]], [3 x [8 x i8]]* @__const.main.keys, i32 0, i32 0, i32 0), i32 24, i1 false)
  %1 = bitcast [8 x i8]* %message1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %1, i8* align 1 getelementptr inbounds ([8 x i8], [8 x i8]* @__const.main.message1, i32 0, i32 0), i32 8, i1 false)
  %2 = bitcast [8 x i8]* %message2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %2, i8* align 1 getelementptr inbounds ([8 x i8], [8 x i8]* @__const.main.message2, i32 0, i32 0), i32 8, i1 false)
  %3 = bitcast [38 x i8]* %message3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %3, i8* align 16 getelementptr inbounds ([38 x i8], [38 x i8]* @__const.main.message3, i32 0, i32 0), i32 38, i1 false)
  store i32 8, i32* %len, align 4
  %arrayidx = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* %keys, i32 0, i32 0
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %arrayidx, i32 0, i32 0
  %arraydecay1 = getelementptr inbounds [8 x i8], [8 x i8]* %message1, i32 0, i32 0
  %4 = load i32, i32* %len, align 4
  call void @driver(i8* %arraydecay, i8* %arraydecay1, i32 %4)
  store i32 8, i32* %len, align 4
  %arrayidx2 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* %keys, i32 0, i32 1
  %arraydecay3 = getelementptr inbounds [8 x i8], [8 x i8]* %arrayidx2, i32 0, i32 0
  %arraydecay4 = getelementptr inbounds [8 x i8], [8 x i8]* %message2, i32 0, i32 0
  %5 = load i32, i32* %len, align 4
  call void @driver(i8* %arraydecay3, i8* %arraydecay4, i32 %5)
  store i32 38, i32* %len, align 4
  %arrayidx5 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* %keys, i32 0, i32 2
  %arraydecay6 = getelementptr inbounds [8 x i8], [8 x i8]* %arrayidx5, i32 0, i32 0
  %arraydecay7 = getelementptr inbounds [38 x i8], [38 x i8]* %message3, i32 0, i32 0
  %6 = load i32, i32* %len, align 4
  call void @driver(i8* %arraydecay6, i8* %arraydecay7, i32 %6)
  ret i32 0
}

; Function Attrs: noinline nounwind optnone
define internal void @pokeBit(i8* %dst, i32 %index, i32 %value) #0 {
entry:
  %dst.addr = alloca i8*, align 4
  %index.addr = alloca i32, align 4
  %value.addr = alloca i32, align 4
  %cell = alloca i32, align 4
  %bit = alloca i32, align 4
  store i8* %dst, i8** %dst.addr, align 4
  store i32 %index, i32* %index.addr, align 4
  store i32 %value, i32* %value.addr, align 4
  %0 = load i32, i32* %index.addr, align 4
  %div = sdiv i32 %0, 8
  store i32 %div, i32* %cell, align 4
  %1 = load i32, i32* %index.addr, align 4
  %rem = srem i32 %1, 8
  %sub = sub nsw i32 7, %rem
  store i32 %sub, i32* %bit, align 4
  %2 = load i32, i32* %value.addr, align 4
  %cmp = icmp eq i32 %2, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %bit, align 4
  %shl = shl i32 1, %3
  %neg = xor i32 %shl, -1
  %4 = load i8*, i8** %dst.addr, align 4
  %5 = load i32, i32* %cell, align 4
  %arrayidx = getelementptr inbounds i8, i8* %4, i32 %5
  %6 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %6 to i32
  %and = and i32 %conv, %neg
  %conv1 = trunc i32 %and to i8
  store i8 %conv1, i8* %arrayidx, align 1
  br label %if.end

if.else:                                          ; preds = %entry
  %7 = load i32, i32* %bit, align 4
  %shl2 = shl i32 1, %7
  %8 = load i8*, i8** %dst.addr, align 4
  %9 = load i32, i32* %cell, align 4
  %arrayidx3 = getelementptr inbounds i8, i8* %8, i32 %9
  %10 = load i8, i8* %arrayidx3, align 1
  %conv4 = zext i8 %10 to i32
  %or = or i32 %conv4, %shl2
  %conv5 = trunc i32 %or to i8
  store i8 %conv5, i8* %arrayidx3, align 1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i32 @peekBit(i8* %src, i32 %index) #0 {
entry:
  %src.addr = alloca i8*, align 4
  %index.addr = alloca i32, align 4
  %cell = alloca i32, align 4
  %bit = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 4
  store i32 %index, i32* %index.addr, align 4
  %0 = load i32, i32* %index.addr, align 4
  %div = sdiv i32 %0, 8
  store i32 %div, i32* %cell, align 4
  %1 = load i32, i32* %index.addr, align 4
  %rem = srem i32 %1, 8
  %sub = sub nsw i32 7, %rem
  store i32 %sub, i32* %bit, align 4
  %2 = load i8*, i8** %src.addr, align 4
  %3 = load i32, i32* %cell, align 4
  %arrayidx = getelementptr inbounds i8, i8* %2, i32 %3
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %5 = load i32, i32* %bit, align 4
  %shl = shl i32 1, %5
  %and = and i32 %conv, %shl
  %cmp = icmp ne i32 %and, 0
  %conv1 = zext i1 %cmp to i32
  ret i32 %conv1
}

; Function Attrs: noinline nounwind optnone
define internal void @shiftLeft(i8* %src, i32 %len, i32 %times, i8* %dst) #0 {
entry:
  %src.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %times.addr = alloca i32, align 4
  %dst.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %t = alloca i32, align 4
  %temp = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %times, i32* %times.addr, align 4
  store i8* %dst, i8** %dst.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp sle i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8*, i8** %dst.addr, align 4
  %3 = load i32, i32* %i, align 4
  %4 = load i8*, i8** %src.addr, align 4
  %5 = load i32, i32* %i, align 4
  %call = call i32 @peekBit(i8* %4, i32 %5)
  call void @pokeBit(i8* %2, i32 %3, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %t, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc13, %for.end
  %7 = load i32, i32* %t, align 4
  %8 = load i32, i32* %times.addr, align 4
  %cmp2 = icmp sle i32 %7, %8
  br i1 %cmp2, label %for.body3, label %for.end15

for.body3:                                        ; preds = %for.cond1
  %9 = load i8*, i8** %dst.addr, align 4
  %call4 = call i32 @peekBit(i8* %9, i32 0)
  store i32 %call4, i32* %temp, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc9, %for.body3
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %len.addr, align 4
  %cmp6 = icmp sle i32 %10, %11
  br i1 %cmp6, label %for.body7, label %for.end11

for.body7:                                        ; preds = %for.cond5
  %12 = load i8*, i8** %dst.addr, align 4
  %13 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %13, 1
  %14 = load i8*, i8** %dst.addr, align 4
  %15 = load i32, i32* %i, align 4
  %call8 = call i32 @peekBit(i8* %14, i32 %15)
  call void @pokeBit(i8* %12, i32 %sub, i32 %call8)
  br label %for.inc9

for.inc9:                                         ; preds = %for.body7
  %16 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %16, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond5

for.end11:                                        ; preds = %for.cond5
  %17 = load i8*, i8** %dst.addr, align 4
  %18 = load i32, i32* %len.addr, align 4
  %sub12 = sub nsw i32 %18, 1
  %19 = load i32, i32* %temp, align 4
  call void @pokeBit(i8* %17, i32 %sub12, i32 %19)
  br label %for.inc13

for.inc13:                                        ; preds = %for.end11
  %20 = load i32, i32* %t, align 4
  %inc14 = add nsw i32 %20, 1
  store i32 %inc14, i32* %t, align 4
  br label %for.cond1

for.end15:                                        ; preds = %for.cond1
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @f(i8* %r, i8* %ks, i8* %sp) #0 {
entry:
  %r.addr = alloca i8*, align 4
  %ks.addr = alloca i8*, align 4
  %sp.addr = alloca i8*, align 4
  %er = alloca [6 x i8], align 1
  %sr = alloca [4 x i8], align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %b = alloca [6 x i32], align 16
  %k = alloca i32, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %m = alloca i32, align 4
  %n = alloca i32, align 4
  %p = alloca i32, align 4
  store i8* %r, i8** %r.addr, align 4
  store i8* %ks, i8** %ks.addr, align 4
  store i8* %sp, i8** %sp.addr, align 4
  %arraydecay = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  call void @llvm.memset.p0i8.i32(i8* align 1 %arraydecay, i8 0, i32 6, i1 false)
  %arraydecay1 = getelementptr inbounds [4 x i8], [4 x i8]* %sr, i32 0, i32 0
  call void @llvm.memset.p0i8.i32(i8* align 1 %arraydecay1, i8 0, i32 4, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 48
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay2 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  %1 = load i32, i32* %i, align 4
  %2 = load i8*, i8** %r.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [48 x i8], [48 x i8]* @E, i32 0, i32 %3
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %sub = sub nsw i32 %conv, 1
  %call = call i32 @peekBit(i8* %2, i32 %sub)
  call void @pokeBit(i8* %arraydecay2, i32 %1, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc12, %for.end
  %6 = load i32, i32* %i, align 4
  %cmp4 = icmp slt i32 %6, 6
  br i1 %cmp4, label %for.body6, label %for.end14

for.body6:                                        ; preds = %for.cond3
  %7 = load i8*, i8** %ks.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds i8, i8* %7, i32 %8
  %9 = load i8, i8* %arrayidx7, align 1
  %conv8 = zext i8 %9 to i32
  %10 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 %10
  %11 = load i8, i8* %arrayidx9, align 1
  %conv10 = zext i8 %11 to i32
  %xor = xor i32 %conv10, %conv8
  %conv11 = trunc i32 %xor to i8
  store i8 %conv11, i8* %arrayidx9, align 1
  br label %for.inc12

for.inc12:                                        ; preds = %for.body6
  %12 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %12, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond3

for.end14:                                        ; preds = %for.cond3
  store i32 0, i32* %i, align 4
  br label %for.cond15

for.cond15:                                       ; preds = %for.inc59, %for.end14
  %13 = load i32, i32* %i, align 4
  %cmp16 = icmp slt i32 %13, 8
  br i1 %cmp16, label %for.body18, label %for.end61

for.body18:                                       ; preds = %for.cond15
  %14 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %14, 6
  store i32 %mul, i32* %j, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond19

for.cond19:                                       ; preds = %for.inc28, %for.body18
  %15 = load i32, i32* %k, align 4
  %cmp20 = icmp slt i32 %15, 6
  br i1 %cmp20, label %for.body22, label %for.end30

for.body22:                                       ; preds = %for.cond19
  %arraydecay23 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  %16 = load i32, i32* %j, align 4
  %17 = load i32, i32* %k, align 4
  %add = add nsw i32 %16, %17
  %call24 = call i32 @peekBit(i8* %arraydecay23, i32 %add)
  %cmp25 = icmp ne i32 %call24, 0
  %18 = zext i1 %cmp25 to i64
  %cond = select i1 %cmp25, i32 1, i32 0
  %19 = load i32, i32* %k, align 4
  %arrayidx27 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 %19
  store i32 %cond, i32* %arrayidx27, align 4
  br label %for.inc28

for.inc28:                                        ; preds = %for.body22
  %20 = load i32, i32* %k, align 4
  %inc29 = add nsw i32 %20, 1
  store i32 %inc29, i32* %k, align 4
  br label %for.cond19

for.end30:                                        ; preds = %for.cond19
  %arrayidx31 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 0
  %21 = load i32, i32* %arrayidx31, align 16
  %mul32 = mul nsw i32 2, %21
  %arrayidx33 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 5
  %22 = load i32, i32* %arrayidx33, align 4
  %add34 = add nsw i32 %mul32, %22
  store i32 %add34, i32* %row, align 4
  %arrayidx35 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 1
  %23 = load i32, i32* %arrayidx35, align 4
  %mul36 = mul nsw i32 8, %23
  %arrayidx37 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 2
  %24 = load i32, i32* %arrayidx37, align 8
  %mul38 = mul nsw i32 4, %24
  %add39 = add nsw i32 %mul36, %mul38
  %arrayidx40 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 3
  %25 = load i32, i32* %arrayidx40, align 4
  %mul41 = mul nsw i32 2, %25
  %add42 = add nsw i32 %add39, %mul41
  %arrayidx43 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 4
  %26 = load i32, i32* %arrayidx43, align 16
  %add44 = add nsw i32 %add42, %26
  store i32 %add44, i32* %col, align 4
  %27 = load i32, i32* %i, align 4
  %arrayidx45 = getelementptr inbounds [8 x [64 x i8]], [8 x [64 x i8]]* @S, i32 0, i32 %27
  %28 = load i32, i32* %row, align 4
  %mul46 = mul nsw i32 %28, 16
  %29 = load i32, i32* %col, align 4
  %add47 = add nsw i32 %mul46, %29
  %arrayidx48 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx45, i32 0, i32 %add47
  %30 = load i8, i8* %arrayidx48, align 1
  %conv49 = zext i8 %30 to i32
  store i32 %conv49, i32* %m, align 4
  store i32 1, i32* %n, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end30
  %31 = load i32, i32* %m, align 4
  %cmp50 = icmp sgt i32 %31, 0
  br i1 %cmp50, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %32 = load i32, i32* %m, align 4
  %rem = srem i32 %32, 2
  store i32 %rem, i32* %p, align 4
  %arraydecay52 = getelementptr inbounds [4 x i8], [4 x i8]* %sr, i32 0, i32 0
  %33 = load i32, i32* %i, align 4
  %add53 = add nsw i32 %33, 1
  %mul54 = mul nsw i32 %add53, 4
  %34 = load i32, i32* %n, align 4
  %sub55 = sub nsw i32 %mul54, %34
  %35 = load i32, i32* %p, align 4
  %cmp56 = icmp eq i32 %35, 1
  %conv57 = zext i1 %cmp56 to i32
  call void @pokeBit(i8* %arraydecay52, i32 %sub55, i32 %conv57)
  %36 = load i32, i32* %m, align 4
  %div = sdiv i32 %36, 2
  store i32 %div, i32* %m, align 4
  %37 = load i32, i32* %n, align 4
  %inc58 = add nsw i32 %37, 1
  store i32 %inc58, i32* %n, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %for.inc59

for.inc59:                                        ; preds = %while.end
  %38 = load i32, i32* %i, align 4
  %inc60 = add nsw i32 %38, 1
  store i32 %inc60, i32* %i, align 4
  br label %for.cond15

for.end61:                                        ; preds = %for.cond15
  store i32 0, i32* %i, align 4
  br label %for.cond62

for.cond62:                                       ; preds = %for.inc71, %for.end61
  %39 = load i32, i32* %i, align 4
  %cmp63 = icmp slt i32 %39, 32
  br i1 %cmp63, label %for.body65, label %for.end73

for.body65:                                       ; preds = %for.cond62
  %40 = load i8*, i8** %sp.addr, align 4
  %41 = load i32, i32* %i, align 4
  %arraydecay66 = getelementptr inbounds [4 x i8], [4 x i8]* %sr, i32 0, i32 0
  %42 = load i32, i32* %i, align 4
  %arrayidx67 = getelementptr inbounds [32 x i8], [32 x i8]* @P, i32 0, i32 %42
  %43 = load i8, i8* %arrayidx67, align 1
  %conv68 = zext i8 %43 to i32
  %sub69 = sub nsw i32 %conv68, 1
  %call70 = call i32 @peekBit(i8* %arraydecay66, i32 %sub69)
  call void @pokeBit(i8* %40, i32 %41, i32 %call70)
  br label %for.inc71

for.inc71:                                        ; preds = %for.body65
  %44 = load i32, i32* %i, align 4
  %inc72 = add nsw i32 %44, 1
  store i32 %inc72, i32* %i, align 4
  br label %for.cond62

for.end73:                                        ; preds = %for.cond62
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal signext i8 @toHex(i8 zeroext %in) #0 {
entry:
  %retval = alloca i8, align 1
  %in.addr = alloca i8, align 1
  store i8 %in, i8* %in.addr, align 1
  %0 = load i8, i8* %in.addr, align 1
  %conv = zext i8 %0 to i32
  %cmp = icmp sle i32 0, %conv
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i8, i8* %in.addr, align 1
  %conv2 = zext i8 %1 to i32
  %cmp3 = icmp slt i32 %conv2, 10
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %2 = load i8, i8* %in.addr, align 1
  %conv5 = zext i8 %2 to i32
  %add = add nsw i32 48, %conv5
  %conv6 = trunc i32 %add to i8
  store i8 %conv6, i8* %retval, align 1
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %3 = load i8, i8* %in.addr, align 1
  %conv7 = zext i8 %3 to i32
  %cmp8 = icmp sle i32 10, %conv7
  br i1 %cmp8, label %land.lhs.true10, label %if.end18

land.lhs.true10:                                  ; preds = %if.end
  %4 = load i8, i8* %in.addr, align 1
  %conv11 = zext i8 %4 to i32
  %cmp12 = icmp sle i32 %conv11, 15
  br i1 %cmp12, label %if.then14, label %if.end18

if.then14:                                        ; preds = %land.lhs.true10
  %5 = load i8, i8* %in.addr, align 1
  %conv15 = zext i8 %5 to i32
  %add16 = add nsw i32 65, %conv15
  %sub = sub nsw i32 %add16, 10
  %conv17 = trunc i32 %sub to i8
  store i8 %conv17, i8* %retval, align 1
  br label %return

if.end18:                                         ; preds = %land.lhs.true10, %if.end
  store i8 0, i8* %retval, align 1
  br label %return

return:                                           ; preds = %if.end18, %if.then14, %if.then
  %6 = load i8, i8* %retval, align 1
  ret i8 %6
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %index.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div = sdiv i32 %0, 8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sdiv %0, 8:i32
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %index.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem = srem i32 %1, 8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 8:i32
infer %1

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 7, %rem
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 8:i32
%2:i32 = subnsw 7:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %value.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %2, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %bit, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %shl = shl i32 1, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl 1:i32, %0
infer %1 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %neg = xor i32 %shl, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl 1:i32, %0
%2:i32 = xor 4294967295:i32, %1
infer %2 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %cell, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i8, i8* %arrayidx, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = zext i8 %6 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %and = and i32 %conv, %neg
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl 1:i32, %0
%2:i32 = xor 4294967295:i32, %1
%3:i8 = var
%4:i32 = zext %3
%5:i32 = and %2, %4
infer %5 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %conv1 = trunc i32 %and to i8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl 1:i32, %0
%2:i32 = xor 4294967295:i32, %1
%3:i8 = var
%4:i32 = zext %3
%5:i32 = and %2, %4
%6:i8 = trunc %5
infer %6

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %bit, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %shl2 = shl i32 1, %7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl 1:i32, %0
infer %1 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %cell, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i8, i8* %arrayidx3, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv4 = zext i8 %10 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %or = or i32 %conv4, %shl2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl 1:i32, %0
%2:i8 = var
%3:i32 = zext %2
%4:i32 = or %1, %3
infer %4 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %conv5 = trunc i32 %or to i8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl 1:i32, %0
%2:i8 = var
%3:i32 = zext %2
%4:i32 = or %1, %3
%5:i8 = trunc %4
infer %5
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sdiv %0, 8:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 158274944
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem %0, 8:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem %0, 8:i32
%2:i32 = subnsw 7:i32, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 7
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = srem %0, 8:i32

Cost = 5
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = shl 1:i32, %0
infer %1 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = shl 1:i32, %0
%2:i32 = xor 4294967295:i32, %1
infer %2 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 254
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -17
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = shl 1:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = shl 1:i32, %0
%2:i32 = xor 4294967295:i32, %1
%3:i8 = var
%4:i32 = zext %3
%5:i32 = and %2, %4
infer %5 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 127
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 239
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var
%1:i32 = zext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = shl 1:i32, %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = shl 1:i32, %0
%2:i32 = xor 4294967295:i32, %1

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 7 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = shl 1:i32, %0
%2:i32 = xor 4294967295:i32, %1
%3:i8 = var
%4:i32 = zext %3
%5:i32 = and %2, %4
%6:i8 = trunc %5
infer %6


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 127
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = shl 1:i32, %0
%2:i8 = var
%3:i32 = zext %2
%4:i32 = or %1, %3
infer %4 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 64
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = shl 1:i32, %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var
%1:i32 = zext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = shl 1:i32, %0
%2:i8 = var
%3:i32 = zext %2
%4:i32 = or %1, %3
%5:i8 = trunc %4
infer %5


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 16
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for ./Data_Encryption_Standard.c.bc:pokeBit()

; entering Souper's runOnFunction() for ./Data_Encryption_Standard.c.bc:peekBit()

; ModuleID = './Data_Encryption_Standard.c.bc'
source_filename = "./Data_Encryption_Standard.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.String = type { i8*, i32 }

@.str = private unnamed_addr constant [14 x i8] c"Key     : %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"Message : %s\0A\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"Encoded : %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"Decoded : %s\0A\0A\00", align 1
@__const.main.keys = private unnamed_addr constant [3 x [8 x i8]] [[8 x i8] c"\134Wy\9B\BC\DF\F1", [8 x i8] c"\0E2\922\EAm\0Ds", [8 x i8] c"\0E2\922\EAm\0Ds"], align 16
@__const.main.message1 = private unnamed_addr constant [8 x i8] c"\01#Eg\89\AB\CD\EF", align 1
@__const.main.message2 = private unnamed_addr constant [8 x i8] c"\87\87\87\87\87\87\87\87", align 1
@__const.main.message3 = private unnamed_addr constant [38 x i8] c"Your lips are smoother than vaseline\0D\0A", align 16
@PC1 = internal constant [56 x i8] c"91)!\19\11\09\01:2*\22\1A\12\0A\02;3+#\1B\13\0B\03<4,$?7/'\1F\17\0F\07>6.&\1E\16\0E\06=5-%\1D\15\0D\05\1C\14\0C\04", align 16
@SHIFTS = internal constant [16 x i8] c"\01\01\02\02\02\02\02\02\01\02\02\02\02\02\02\01", align 16
@PC2 = internal constant [48 x i8] c"\0E\11\0B\18\01\05\03\1C\0F\06\15\0A\17\13\0C\04\1A\08\10\07\1B\14\0D\02)4\1F%/7\1E(3-!0,1'8\225.*2$\1D ", align 16
@IP = internal constant [64 x i8] c":2*\22\1A\12\0A\02<4,$\1C\14\0C\04>6.&\1E\16\0E\06@80( \18\10\0891)!\19\11\09\01;3+#\1B\13\0B\03=5-%\1D\15\0D\05?7/'\1F\17\0F\07", align 16
@IP2 = internal constant [64 x i8] c"(\080\108\18@ '\07/\0F7\17?\1F&\06.\0E6\16>\1E%\05-\0D5\15=\1D$\04,\0C4\14<\1C#\03+\0B3\13;\1B\22\02*\0A2\12:\1A!\01)\091\119\19", align 16
@E = internal constant [48 x i8] c" \01\02\03\04\05\04\05\06\07\08\09\08\09\0A\0B\0C\0D\0C\0D\0E\0F\10\11\10\11\12\13\14\15\14\15\16\17\18\19\18\19\1A\1B\1C\1D\1C\1D\1E\1F \01", align 16
@S = internal constant [8 x [64 x i8]] [[64 x i8] c"\0E\04\0D\01\02\0F\0B\08\03\0A\06\0C\05\09\00\07\00\0F\07\04\0E\02\0D\01\0A\06\0C\0B\09\05\03\08\04\01\0E\08\0D\06\02\0B\0F\0C\09\07\03\0A\05\00\0F\0C\08\02\04\09\01\07\05\0B\03\0E\0A\00\06\0D", [64 x i8] c"\0F\01\08\0E\06\0B\03\04\09\07\02\0D\0C\00\05\0A\03\0D\04\07\0F\02\08\0E\0C\00\01\0A\06\09\0B\05\00\0E\07\0B\0A\04\0D\01\05\08\0C\06\09\03\02\0F\0D\08\0A\01\03\0F\04\02\0B\06\07\0C\00\05\0E\09", [64 x i8] c"\0A\00\09\0E\06\03\0F\05\01\0D\0C\07\0B\04\02\08\0D\07\00\09\03\04\06\0A\02\08\05\0E\0C\0B\0F\01\0D\06\04\09\08\0F\03\00\0B\01\02\0C\05\0A\0E\07\01\0A\0D\00\06\09\08\07\04\0F\0E\03\0B\05\02\0C", [64 x i8] c"\07\0D\0E\03\00\06\09\0A\01\02\08\05\0B\0C\04\0F\0D\08\0B\05\06\0F\00\03\04\07\02\0C\01\0A\0E\09\0A\06\09\00\0C\0B\07\0D\0F\01\03\0E\05\02\08\04\03\0F\00\06\0A\01\0D\08\09\04\05\0B\0C\07\02\0E", [64 x i8] c"\02\0C\04\01\07\0A\0B\06\08\05\03\0F\0D\00\0E\09\0E\0B\02\0C\04\07\0D\01\05\00\0F\0A\03\09\08\06\04\02\01\0B\0A\0D\07\08\0F\09\0C\05\06\03\00\0E\0B\08\0C\07\01\0E\02\0D\06\0F\00\09\0A\04\05\03", [64 x i8] c"\0C\01\0A\0F\09\02\06\08\00\0D\03\04\0E\07\05\0B\0A\0F\04\02\07\0C\09\05\06\01\0D\0E\00\0B\03\08\09\0E\0F\05\02\08\0C\03\07\00\04\0A\01\0D\0B\06\04\03\02\0C\09\05\0F\0A\0B\0E\01\07\06\00\08\0D", [64 x i8] c"\04\0B\02\0E\0F\00\08\0D\03\0C\09\07\05\0A\06\01\0D\00\0B\07\04\09\01\0A\0E\03\05\0C\02\0F\08\06\01\04\0B\0D\0C\03\07\0E\0A\0F\06\08\00\05\09\02\06\0B\0D\08\01\04\0A\07\09\05\00\0F\0E\02\03\0C", [64 x i8] c"\0D\02\08\04\06\0F\0B\01\0A\09\03\0E\05\00\0C\07\01\0F\0D\08\0A\03\07\04\0C\05\06\0B\00\0E\09\02\07\0B\04\01\09\0C\0E\02\00\06\0A\0D\0F\03\05\08\02\01\0E\07\04\0A\08\0D\0F\0C\09\00\03\05\06\0B"], align 16
@P = internal constant [32 x i8] c"\10\07\14\15\1D\0C\1C\11\01\0F\17\1A\05\12\1F\0A\02\08\18\0E \1B\03\09\13\0D\1E\06\16\0B\04\19", align 16
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @encrypt(%struct.String* noalias sret align 4 %agg.result, i8* %key, i8* %message, i32 %len) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %message.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %ks = alloca [17 x [6 x i8]], align 16
  %padByte = alloca i8, align 1
  %i = alloca i32, align 4
  store i8* %key, i8** %key.addr, align 4
  store i8* %message, i8** %message.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = bitcast %struct.String* %agg.result to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  %1 = load i8*, i8** %key.addr, align 4
  %arraydecay = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  call void @getSubKeys(i8* %1, [6 x i8]* %arraydecay)
  %2 = load i32, i32* %len.addr, align 4
  %rem = srem i32 %2, 8
  %sub = sub nsw i32 8, %rem
  %conv = trunc i32 %sub to i8
  store i8 %conv, i8* %padByte, align 1
  %3 = load i32, i32* %len.addr, align 4
  %4 = load i8, i8* %padByte, align 1
  %conv1 = zext i8 %4 to i32
  %add = add nsw i32 %3, %conv1
  %len2 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  store i32 %add, i32* %len2, align 4
  %len3 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %5 = load i32, i32* %len3, align 4
  %call = call noalias i8* @malloc(i32 %5)
  %data = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  store i8* %call, i8** %data, align 4
  %data4 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %6 = load i8*, i8** %data4, align 4
  %7 = load i8*, i8** %message.addr, align 4
  %8 = load i32, i32* %len.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %6, i8* align 1 %7, i32 %8, i1 false)
  %data5 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %9 = load i8*, i8** %data5, align 4
  %10 = load i32, i32* %len.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %9, i32 %10
  %11 = load i8, i8* %padByte, align 1
  %12 = load i8, i8* %padByte, align 1
  %conv7 = zext i8 %12 to i32
  call void @llvm.memset.p0i8.i32(i8* align 1 %arrayidx, i8 %11, i32 %conv7, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %13 = load i32, i32* %i, align 4
  %len8 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %14 = load i32, i32* %len8, align 4
  %cmp = icmp slt i32 %13, %14
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %data10 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %15 = load i8*, i8** %data10, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds i8, i8* %15, i32 %16
  %arraydecay12 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  %data13 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %17 = load i8*, i8** %data13, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds i8, i8* %17, i32 %18
  call void @processMessage(i8* %arrayidx11, [6 x i8]* %arraydecay12, i8* %arrayidx14)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %19 = load i32, i32* %i, align 4
  %add15 = add nsw i32 %19, 8
  store i32 %add15, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define internal void @getSubKeys(i8* %key, [6 x i8]* %ks) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %ks.addr = alloca [6 x i8]*, align 4
  %c = alloca [17 x [7 x i8]], align 16
  %d = alloca [17 x [4 x i8]], align 16
  %kp = alloca [7 x i8], align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i8* %key, i8** %key.addr, align 4
  store [6 x i8]* %ks, [6 x i8]** %ks.addr, align 4
  %arraydecay = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 0
  %0 = bitcast [7 x i8]* %arraydecay to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 119, i1 false)
  %arraydecay1 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 0
  %1 = bitcast [4 x i8]* %arraydecay1 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %1, i8 0, i32 68, i1 false)
  %2 = load [6 x i8]*, [6 x i8]** %ks.addr, align 4
  %3 = bitcast [6 x i8]* %2 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 1 %3, i8 0, i32 102, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %4, 56
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay2 = getelementptr inbounds [7 x i8], [7 x i8]* %kp, i32 0, i32 0
  %5 = load i32, i32* %i, align 4
  %6 = load i8*, i8** %key.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [56 x i8], [56 x i8]* @PC1, i32 0, i32 %7
  %8 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %8 to i32
  %sub = sub nsw i32 %conv, 1
  %call = call i32 @peekBit(i8* %6, i32 %sub)
  call void @pokeBit(i8* %arraydecay2, i32 %5, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc15, %for.end
  %10 = load i32, i32* %i, align 4
  %cmp4 = icmp slt i32 %10, 28
  br i1 %cmp4, label %for.body6, label %for.end17

for.body6:                                        ; preds = %for.cond3
  %arrayidx7 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 0
  %arraydecay8 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx7, i32 0, i32 0
  %11 = load i32, i32* %i, align 4
  %arraydecay9 = getelementptr inbounds [7 x i8], [7 x i8]* %kp, i32 0, i32 0
  %12 = load i32, i32* %i, align 4
  %call10 = call i32 @peekBit(i8* %arraydecay9, i32 %12)
  call void @pokeBit(i8* %arraydecay8, i32 %11, i32 %call10)
  %arrayidx11 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 0
  %arraydecay12 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx11, i32 0, i32 0
  %13 = load i32, i32* %i, align 4
  %arraydecay13 = getelementptr inbounds [7 x i8], [7 x i8]* %kp, i32 0, i32 0
  %14 = load i32, i32* %i, align 4
  %add = add nsw i32 %14, 28
  %call14 = call i32 @peekBit(i8* %arraydecay13, i32 %add)
  call void @pokeBit(i8* %arraydecay12, i32 %13, i32 %call14)
  br label %for.inc15

for.inc15:                                        ; preds = %for.body6
  %15 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %15, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond3

for.end17:                                        ; preds = %for.cond3
  store i32 1, i32* %i, align 4
  br label %for.cond18

for.cond18:                                       ; preds = %for.inc38, %for.end17
  %16 = load i32, i32* %i, align 4
  %cmp19 = icmp slt i32 %16, 17
  br i1 %cmp19, label %for.body21, label %for.end40

for.body21:                                       ; preds = %for.cond18
  %17 = load i32, i32* %i, align 4
  %sub22 = sub nsw i32 %17, 1
  %arrayidx23 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %sub22
  %arraydecay24 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx23, i32 0, i32 0
  %18 = load i32, i32* %i, align 4
  %sub25 = sub nsw i32 %18, 1
  %arrayidx26 = getelementptr inbounds [16 x i8], [16 x i8]* @SHIFTS, i32 0, i32 %sub25
  %19 = load i8, i8* %arrayidx26, align 1
  %conv27 = zext i8 %19 to i32
  %20 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %20
  %arraydecay29 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx28, i32 0, i32 0
  call void @shiftLeft(i8* %arraydecay24, i32 28, i32 %conv27, i8* %arraydecay29)
  %21 = load i32, i32* %i, align 4
  %sub30 = sub nsw i32 %21, 1
  %arrayidx31 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 %sub30
  %arraydecay32 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx31, i32 0, i32 0
  %22 = load i32, i32* %i, align 4
  %sub33 = sub nsw i32 %22, 1
  %arrayidx34 = getelementptr inbounds [16 x i8], [16 x i8]* @SHIFTS, i32 0, i32 %sub33
  %23 = load i8, i8* %arrayidx34, align 1
  %conv35 = zext i8 %23 to i32
  %24 = load i32, i32* %i, align 4
  %arrayidx36 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 %24
  %arraydecay37 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx36, i32 0, i32 0
  call void @shiftLeft(i8* %arraydecay32, i32 28, i32 %conv35, i8* %arraydecay37)
  br label %for.inc38

for.inc38:                                        ; preds = %for.body21
  %25 = load i32, i32* %i, align 4
  %inc39 = add nsw i32 %25, 1
  store i32 %inc39, i32* %i, align 4
  br label %for.cond18

for.end40:                                        ; preds = %for.cond18
  store i32 1, i32* %i, align 4
  br label %for.cond41

for.cond41:                                       ; preds = %for.inc58, %for.end40
  %26 = load i32, i32* %i, align 4
  %cmp42 = icmp slt i32 %26, 17
  br i1 %cmp42, label %for.body44, label %for.end60

for.body44:                                       ; preds = %for.cond41
  store i32 28, i32* %j, align 4
  br label %for.cond45

for.cond45:                                       ; preds = %for.inc55, %for.body44
  %27 = load i32, i32* %j, align 4
  %cmp46 = icmp slt i32 %27, 56
  br i1 %cmp46, label %for.body48, label %for.end57

for.body48:                                       ; preds = %for.cond45
  %28 = load i32, i32* %i, align 4
  %arrayidx49 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %28
  %arraydecay50 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx49, i32 0, i32 0
  %29 = load i32, i32* %j, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx51 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 %30
  %arraydecay52 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx51, i32 0, i32 0
  %31 = load i32, i32* %j, align 4
  %sub53 = sub nsw i32 %31, 28
  %call54 = call i32 @peekBit(i8* %arraydecay52, i32 %sub53)
  call void @pokeBit(i8* %arraydecay50, i32 %29, i32 %call54)
  br label %for.inc55

for.inc55:                                        ; preds = %for.body48
  %32 = load i32, i32* %j, align 4
  %inc56 = add nsw i32 %32, 1
  store i32 %inc56, i32* %j, align 4
  br label %for.cond45

for.end57:                                        ; preds = %for.cond45
  br label %for.inc58

for.inc58:                                        ; preds = %for.end57
  %33 = load i32, i32* %i, align 4
  %inc59 = add nsw i32 %33, 1
  store i32 %inc59, i32* %i, align 4
  br label %for.cond41

for.end60:                                        ; preds = %for.cond41
  store i32 1, i32* %i, align 4
  br label %for.cond61

for.cond61:                                       ; preds = %for.inc80, %for.end60
  %34 = load i32, i32* %i, align 4
  %cmp62 = icmp slt i32 %34, 17
  br i1 %cmp62, label %for.body64, label %for.end82

for.body64:                                       ; preds = %for.cond61
  store i32 0, i32* %j, align 4
  br label %for.cond65

for.cond65:                                       ; preds = %for.inc77, %for.body64
  %35 = load i32, i32* %j, align 4
  %cmp66 = icmp slt i32 %35, 48
  br i1 %cmp66, label %for.body68, label %for.end79

for.body68:                                       ; preds = %for.cond65
  %36 = load [6 x i8]*, [6 x i8]** %ks.addr, align 4
  %37 = load i32, i32* %i, align 4
  %arrayidx69 = getelementptr inbounds [6 x i8], [6 x i8]* %36, i32 %37
  %arraydecay70 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx69, i32 0, i32 0
  %38 = load i32, i32* %j, align 4
  %39 = load i32, i32* %i, align 4
  %arrayidx71 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %39
  %arraydecay72 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx71, i32 0, i32 0
  %40 = load i32, i32* %j, align 4
  %arrayidx73 = getelementptr inbounds [48 x i8], [48 x i8]* @PC2, i32 0, i32 %40
  %41 = load i8, i8* %arrayidx73, align 1
  %conv74 = zext i8 %41 to i32
  %sub75 = sub nsw i32 %conv74, 1
  %call76 = call i32 @peekBit(i8* %arraydecay72, i32 %sub75)
  call void @pokeBit(i8* %arraydecay70, i32 %38, i32 %call76)
  br label %for.inc77

for.inc77:                                        ; preds = %for.body68
  %42 = load i32, i32* %j, align 4
  %inc78 = add nsw i32 %42, 1
  store i32 %inc78, i32* %j, align 4
  br label %for.cond65

for.end79:                                        ; preds = %for.cond65
  br label %for.inc80

for.inc80:                                        ; preds = %for.end79
  %43 = load i32, i32* %i, align 4
  %inc81 = add nsw i32 %43, 1
  store i32 %inc81, i32* %i, align 4
  br label %for.cond61

for.end82:                                        ; preds = %for.cond61
  ret void
}

declare noalias i8* @malloc(i32 %0) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: noinline nounwind optnone
define internal void @processMessage(i8* %message, [6 x i8]* %ks, i8* %ep) #0 {
entry:
  %message.addr = alloca i8*, align 4
  %ks.addr = alloca [6 x i8]*, align 4
  %ep.addr = alloca i8*, align 4
  %left = alloca [17 x [4 x i8]], align 16
  %right = alloca [17 x [4 x i8]], align 16
  %mp = alloca [8 x i8], align 1
  %e = alloca [8 x i8], align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %fs = alloca [4 x i8], align 1
  store i8* %message, i8** %message.addr, align 4
  store [6 x i8]* %ks, [6 x i8]** %ks.addr, align 4
  store i8* %ep, i8** %ep.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 64
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %mp, i32 0, i32 0
  %1 = load i32, i32* %i, align 4
  %2 = load i8*, i8** %message.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [64 x i8], [64 x i8]* @IP, i32 0, i32 %3
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %sub = sub nsw i32 %conv, 1
  %call = call i32 @peekBit(i8* %2, i32 %sub)
  call void @pokeBit(i8* %arraydecay, i32 %1, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc13, %for.end
  %6 = load i32, i32* %i, align 4
  %cmp2 = icmp slt i32 %6, 32
  br i1 %cmp2, label %for.body4, label %for.end15

for.body4:                                        ; preds = %for.cond1
  %arrayidx5 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 0
  %arraydecay6 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx5, i32 0, i32 0
  %7 = load i32, i32* %i, align 4
  %arraydecay7 = getelementptr inbounds [8 x i8], [8 x i8]* %mp, i32 0, i32 0
  %8 = load i32, i32* %i, align 4
  %call8 = call i32 @peekBit(i8* %arraydecay7, i32 %8)
  call void @pokeBit(i8* %arraydecay6, i32 %7, i32 %call8)
  %arrayidx9 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 0
  %arraydecay10 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx9, i32 0, i32 0
  %9 = load i32, i32* %i, align 4
  %arraydecay11 = getelementptr inbounds [8 x i8], [8 x i8]* %mp, i32 0, i32 0
  %10 = load i32, i32* %i, align 4
  %add = add nsw i32 %10, 32
  %call12 = call i32 @peekBit(i8* %arraydecay11, i32 %add)
  call void @pokeBit(i8* %arraydecay10, i32 %9, i32 %call12)
  br label %for.inc13

for.inc13:                                        ; preds = %for.body4
  %11 = load i32, i32* %i, align 4
  %inc14 = add nsw i32 %11, 1
  store i32 %inc14, i32* %i, align 4
  br label %for.cond1

for.end15:                                        ; preds = %for.cond1
  store i32 1, i32* %i, align 4
  br label %for.cond16

for.cond16:                                       ; preds = %for.inc50, %for.end15
  %12 = load i32, i32* %i, align 4
  %cmp17 = icmp slt i32 %12, 17
  br i1 %cmp17, label %for.body19, label %for.end52

for.body19:                                       ; preds = %for.cond16
  %13 = load i32, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 %13
  %arraydecay21 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx20, i32 0, i32 0
  %14 = load i32, i32* %i, align 4
  %sub22 = sub nsw i32 %14, 1
  %arrayidx23 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 %sub22
  %arraydecay24 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx23, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %arraydecay21, i8* align 4 %arraydecay24, i32 4, i1 false)
  %15 = load i32, i32* %i, align 4
  %sub25 = sub nsw i32 %15, 1
  %arrayidx26 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 %sub25
  %arraydecay27 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx26, i32 0, i32 0
  %16 = load [6 x i8]*, [6 x i8]** %ks.addr, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds [6 x i8], [6 x i8]* %16, i32 %17
  %arraydecay29 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx28, i32 0, i32 0
  %arraydecay30 = getelementptr inbounds [4 x i8], [4 x i8]* %fs, i32 0, i32 0
  call void @f(i8* %arraydecay27, i8* %arraydecay29, i8* %arraydecay30)
  store i32 0, i32* %j, align 4
  br label %for.cond31

for.cond31:                                       ; preds = %for.inc42, %for.body19
  %18 = load i32, i32* %j, align 4
  %cmp32 = icmp slt i32 %18, 4
  br i1 %cmp32, label %for.body34, label %for.end44

for.body34:                                       ; preds = %for.cond31
  %19 = load i32, i32* %j, align 4
  %arrayidx35 = getelementptr inbounds [4 x i8], [4 x i8]* %fs, i32 0, i32 %19
  %20 = load i8, i8* %arrayidx35, align 1
  %conv36 = zext i8 %20 to i32
  %21 = load i32, i32* %i, align 4
  %sub37 = sub nsw i32 %21, 1
  %arrayidx38 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 %sub37
  %22 = load i32, i32* %j, align 4
  %arrayidx39 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx38, i32 0, i32 %22
  %23 = load i8, i8* %arrayidx39, align 1
  %conv40 = zext i8 %23 to i32
  %xor = xor i32 %conv40, %conv36
  %conv41 = trunc i32 %xor to i8
  store i8 %conv41, i8* %arrayidx39, align 1
  br label %for.inc42

for.inc42:                                        ; preds = %for.body34
  %24 = load i32, i32* %j, align 4
  %inc43 = add nsw i32 %24, 1
  store i32 %inc43, i32* %j, align 4
  br label %for.cond31

for.end44:                                        ; preds = %for.cond31
  %25 = load i32, i32* %i, align 4
  %arrayidx45 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 %25
  %arraydecay46 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx45, i32 0, i32 0
  %26 = load i32, i32* %i, align 4
  %sub47 = sub nsw i32 %26, 1
  %arrayidx48 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 %sub47
  %arraydecay49 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx48, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %arraydecay46, i8* align 4 %arraydecay49, i32 4, i1 false)
  br label %for.inc50

for.inc50:                                        ; preds = %for.end44
  %27 = load i32, i32* %i, align 4
  %inc51 = add nsw i32 %27, 1
  store i32 %inc51, i32* %i, align 4
  br label %for.cond16

for.end52:                                        ; preds = %for.cond16
  store i32 0, i32* %i, align 4
  br label %for.cond53

for.cond53:                                       ; preds = %for.inc61, %for.end52
  %28 = load i32, i32* %i, align 4
  %cmp54 = icmp slt i32 %28, 32
  br i1 %cmp54, label %for.body56, label %for.end63

for.body56:                                       ; preds = %for.cond53
  %arraydecay57 = getelementptr inbounds [8 x i8], [8 x i8]* %e, i32 0, i32 0
  %29 = load i32, i32* %i, align 4
  %arrayidx58 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 16
  %arraydecay59 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx58, i32 0, i32 0
  %30 = load i32, i32* %i, align 4
  %call60 = call i32 @peekBit(i8* %arraydecay59, i32 %30)
  call void @pokeBit(i8* %arraydecay57, i32 %29, i32 %call60)
  br label %for.inc61

for.inc61:                                        ; preds = %for.body56
  %31 = load i32, i32* %i, align 4
  %inc62 = add nsw i32 %31, 1
  store i32 %inc62, i32* %i, align 4
  br label %for.cond53

for.end63:                                        ; preds = %for.cond53
  store i32 32, i32* %i, align 4
  br label %for.cond64

for.cond64:                                       ; preds = %for.inc73, %for.end63
  %32 = load i32, i32* %i, align 4
  %cmp65 = icmp slt i32 %32, 64
  br i1 %cmp65, label %for.body67, label %for.end75

for.body67:                                       ; preds = %for.cond64
  %arraydecay68 = getelementptr inbounds [8 x i8], [8 x i8]* %e, i32 0, i32 0
  %33 = load i32, i32* %i, align 4
  %arrayidx69 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 16
  %arraydecay70 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx69, i32 0, i32 0
  %34 = load i32, i32* %i, align 4
  %sub71 = sub nsw i32 %34, 32
  %call72 = call i32 @peekBit(i8* %arraydecay70, i32 %sub71)
  call void @pokeBit(i8* %arraydecay68, i32 %33, i32 %call72)
  br label %for.inc73

for.inc73:                                        ; preds = %for.body67
  %35 = load i32, i32* %i, align 4
  %inc74 = add nsw i32 %35, 1
  store i32 %inc74, i32* %i, align 4
  br label %for.cond64

for.end75:                                        ; preds = %for.cond64
  store i32 0, i32* %i, align 4
  br label %for.cond76

for.cond76:                                       ; preds = %for.inc85, %for.end75
  %36 = load i32, i32* %i, align 4
  %cmp77 = icmp slt i32 %36, 64
  br i1 %cmp77, label %for.body79, label %for.end87

for.body79:                                       ; preds = %for.cond76
  %37 = load i8*, i8** %ep.addr, align 4
  %38 = load i32, i32* %i, align 4
  %arraydecay80 = getelementptr inbounds [8 x i8], [8 x i8]* %e, i32 0, i32 0
  %39 = load i32, i32* %i, align 4
  %arrayidx81 = getelementptr inbounds [64 x i8], [64 x i8]* @IP2, i32 0, i32 %39
  %40 = load i8, i8* %arrayidx81, align 1
  %conv82 = zext i8 %40 to i32
  %sub83 = sub nsw i32 %conv82, 1
  %call84 = call i32 @peekBit(i8* %arraydecay80, i32 %sub83)
  call void @pokeBit(i8* %37, i32 %38, i32 %call84)
  br label %for.inc85

for.inc85:                                        ; preds = %for.body79
  %41 = load i32, i32* %i, align 4
  %inc86 = add nsw i32 %41, 1
  store i32 %inc86, i32* %i, align 4
  br label %for.cond76

for.end87:                                        ; preds = %for.cond76
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @decrypt(%struct.String* noalias sret align 4 %agg.result, i8* %key, i8* %message, i32 %len) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %message.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %ks = alloca [17 x [6 x i8]], align 16
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %padByte = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8* %key, i8** %key.addr, align 4
  store i8* %message, i8** %message.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = bitcast %struct.String* %agg.result to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  %1 = load i8*, i8** %key.addr, align 4
  %arraydecay = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  call void @getSubKeys(i8* %1, [6 x i8]* %arraydecay)
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc12, %entry
  %2 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, 9
  br i1 %cmp, label %for.body, label %for.end14

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %3, 6
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %4
  %5 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx, i32 0, i32 %5
  %6 = load i8, i8* %arrayidx4, align 1
  store i8 %6, i8* %temp, align 1
  %7 = load i32, i32* %i, align 4
  %sub = sub nsw i32 17, %7
  %arrayidx5 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %sub
  %8 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx5, i32 0, i32 %8
  %9 = load i8, i8* %arrayidx6, align 1
  %10 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %10
  %11 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx7, i32 0, i32 %11
  store i8 %9, i8* %arrayidx8, align 1
  %12 = load i8, i8* %temp, align 1
  %13 = load i32, i32* %i, align 4
  %sub9 = sub nsw i32 17, %13
  %arrayidx10 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %sub9
  %14 = load i32, i32* %j, align 4
  %arrayidx11 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx10, i32 0, i32 %14
  store i8 %12, i8* %arrayidx11, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %15 = load i32, i32* %j, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc12

for.inc12:                                        ; preds = %for.end
  %16 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %16, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond

for.end14:                                        ; preds = %for.cond
  %17 = load i32, i32* %len.addr, align 4
  %call = call noalias i8* @malloc(i32 %17)
  %data = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  store i8* %call, i8** %data, align 4
  %data15 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %18 = load i8*, i8** %data15, align 4
  %19 = load i8*, i8** %message.addr, align 4
  %20 = load i32, i32* %len.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %18, i8* align 1 %19, i32 %20, i1 false)
  %21 = load i32, i32* %len.addr, align 4
  %len16 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  store i32 %21, i32* %len16, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond17

for.cond17:                                       ; preds = %for.inc26, %for.end14
  %22 = load i32, i32* %i, align 4
  %len18 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %23 = load i32, i32* %len18, align 4
  %cmp19 = icmp slt i32 %22, %23
  br i1 %cmp19, label %for.body20, label %for.end27

for.body20:                                       ; preds = %for.cond17
  %data21 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %24 = load i8*, i8** %data21, align 4
  %25 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds i8, i8* %24, i32 %25
  %arraydecay23 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  %data24 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %26 = load i8*, i8** %data24, align 4
  %27 = load i32, i32* %i, align 4
  %arrayidx25 = getelementptr inbounds i8, i8* %26, i32 %27
  call void @processMessage(i8* %arrayidx22, [6 x i8]* %arraydecay23, i8* %arrayidx25)
  br label %for.inc26

for.inc26:                                        ; preds = %for.body20
  %28 = load i32, i32* %i, align 4
  %add = add nsw i32 %28, 8
  store i32 %add, i32* %i, align 4
  br label %for.cond17

for.end27:                                        ; preds = %for.cond17
  %data28 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %29 = load i8*, i8** %data28, align 4
  %30 = load i32, i32* %len.addr, align 4
  %sub29 = sub nsw i32 %30, 1
  %arrayidx30 = getelementptr inbounds i8, i8* %29, i32 %sub29
  %31 = load i8, i8* %arrayidx30, align 1
  store i8 %31, i8* %padByte, align 1
  %32 = load i8, i8* %padByte, align 1
  %conv = zext i8 %32 to i32
  %len31 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %33 = load i32, i32* %len31, align 4
  %sub32 = sub nsw i32 %33, %conv
  store i32 %sub32, i32* %len31, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @driver(i8* %key, i8* %message, i32 %len) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %message.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %encoded = alloca %struct.String, align 4
  %decoded = alloca %struct.String, align 4
  %buffer = alloca [128 x i8], align 16
  %tmp = alloca %struct.String, align 4
  %tmp9 = alloca %struct.String, align 4
  store i8* %key, i8** %key.addr, align 4
  store i8* %message, i8** %message.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load i8*, i8** %key.addr, align 4
  %arraydecay = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %0, i32 8, i8* %arraydecay)
  %arraydecay1 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i32 0, i32 0), i8* %arraydecay1)
  %1 = load i8*, i8** %message.addr, align 4
  %2 = load i32, i32* %len.addr, align 4
  %arraydecay2 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %1, i32 %2, i8* %arraydecay2)
  %arraydecay3 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0), i8* %arraydecay3)
  %3 = load i8*, i8** %key.addr, align 4
  %4 = load i8*, i8** %message.addr, align 4
  %5 = load i32, i32* %len.addr, align 4
  call void @encrypt(%struct.String* sret align 4 %tmp, i8* %3, i8* %4, i32 %5)
  %6 = bitcast %struct.String* %encoded to i8*
  %7 = bitcast %struct.String* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %6, i8* align 4 %7, i32 8, i1 false)
  %data = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  %8 = load i8*, i8** %data, align 4
  %len5 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 1
  %9 = load i32, i32* %len5, align 4
  %arraydecay6 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %8, i32 %9, i8* %arraydecay6)
  %arraydecay7 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0), i8* %arraydecay7)
  %10 = load i8*, i8** %key.addr, align 4
  %data10 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  %11 = load i8*, i8** %data10, align 4
  %len11 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 1
  %12 = load i32, i32* %len11, align 4
  call void @decrypt(%struct.String* sret align 4 %tmp9, i8* %10, i8* %11, i32 %12)
  %13 = bitcast %struct.String* %decoded to i8*
  %14 = bitcast %struct.String* %tmp9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %13, i8* align 4 %14, i32 8, i1 false)
  %data12 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 0
  %15 = load i8*, i8** %data12, align 4
  %len13 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 1
  %16 = load i32, i32* %len13, align 4
  %arraydecay14 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %15, i32 %16, i8* %arraydecay14)
  %arraydecay15 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0), i8* %arraydecay15)
  %len17 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 1
  %17 = load i32, i32* %len17, align 4
  %cmp = icmp sgt i32 %17, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %data18 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  %18 = load i8*, i8** %data18, align 4
  call void @free(i8* %18)
  %data19 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  store i8* null, i8** %data19, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %len20 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 1
  %19 = load i32, i32* %len20, align 4
  %cmp21 = icmp sgt i32 %19, 0
  br i1 %cmp21, label %if.then22, label %if.end25

if.then22:                                        ; preds = %if.end
  %data23 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 0
  %20 = load i8*, i8** %data23, align 4
  call void @free(i8* %20)
  %data24 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 0
  store i8* null, i8** %data24, align 4
  br label %if.end25

if.end25:                                         ; preds = %if.then22, %if.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @printBytes(i8* %ptr, i32 %len, i8* %out) #0 {
entry:
  %ptr.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  store i8* %ptr, i8** %ptr.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %len.addr, align 4
  %dec = add nsw i32 %0, -1
  store i32 %dec, i32* %len.addr, align 4
  %cmp = icmp sgt i32 %0, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i8*, i8** %ptr.addr, align 4
  %2 = load i8, i8* %1, align 1
  %conv = zext i8 %2 to i32
  %shr = ashr i32 %conv, 4
  %conv1 = trunc i32 %shr to i8
  %call = call signext i8 @toHex(i8 zeroext %conv1)
  %3 = load i8*, i8** %out.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %3, i32 1
  store i8* %incdec.ptr, i8** %out.addr, align 4
  store i8 %call, i8* %3, align 1
  %4 = load i8*, i8** %ptr.addr, align 4
  %5 = load i8, i8* %4, align 1
  %conv2 = zext i8 %5 to i32
  %and = and i32 %conv2, 15
  %conv3 = trunc i32 %and to i8
  %call4 = call signext i8 @toHex(i8 zeroext %conv3)
  %6 = load i8*, i8** %out.addr, align 4
  %incdec.ptr5 = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr5, i8** %out.addr, align 4
  store i8 %call4, i8* %6, align 1
  %7 = load i8*, i8** %ptr.addr, align 4
  %incdec.ptr6 = getelementptr inbounds i8, i8* %7, i32 1
  store i8* %incdec.ptr6, i8** %ptr.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %8 = load i8*, i8** %out.addr, align 4
  store i8 0, i8* %8, align 1
  ret void
}

declare i32 @printf(i8* %0, ...) #2

declare void @free(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %keys = alloca [3 x [8 x i8]], align 16
  %message1 = alloca [8 x i8], align 1
  %message2 = alloca [8 x i8], align 1
  %message3 = alloca [38 x i8], align 16
  %len = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [3 x [8 x i8]]* %keys to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([3 x [8 x i8]], [3 x [8 x i8]]* @__const.main.keys, i32 0, i32 0, i32 0), i32 24, i1 false)
  %1 = bitcast [8 x i8]* %message1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %1, i8* align 1 getelementptr inbounds ([8 x i8], [8 x i8]* @__const.main.message1, i32 0, i32 0), i32 8, i1 false)
  %2 = bitcast [8 x i8]* %message2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %2, i8* align 1 getelementptr inbounds ([8 x i8], [8 x i8]* @__const.main.message2, i32 0, i32 0), i32 8, i1 false)
  %3 = bitcast [38 x i8]* %message3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %3, i8* align 16 getelementptr inbounds ([38 x i8], [38 x i8]* @__const.main.message3, i32 0, i32 0), i32 38, i1 false)
  store i32 8, i32* %len, align 4
  %arrayidx = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* %keys, i32 0, i32 0
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %arrayidx, i32 0, i32 0
  %arraydecay1 = getelementptr inbounds [8 x i8], [8 x i8]* %message1, i32 0, i32 0
  %4 = load i32, i32* %len, align 4
  call void @driver(i8* %arraydecay, i8* %arraydecay1, i32 %4)
  store i32 8, i32* %len, align 4
  %arrayidx2 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* %keys, i32 0, i32 1
  %arraydecay3 = getelementptr inbounds [8 x i8], [8 x i8]* %arrayidx2, i32 0, i32 0
  %arraydecay4 = getelementptr inbounds [8 x i8], [8 x i8]* %message2, i32 0, i32 0
  %5 = load i32, i32* %len, align 4
  call void @driver(i8* %arraydecay3, i8* %arraydecay4, i32 %5)
  store i32 38, i32* %len, align 4
  %arrayidx5 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* %keys, i32 0, i32 2
  %arraydecay6 = getelementptr inbounds [8 x i8], [8 x i8]* %arrayidx5, i32 0, i32 0
  %arraydecay7 = getelementptr inbounds [38 x i8], [38 x i8]* %message3, i32 0, i32 0
  %6 = load i32, i32* %len, align 4
  call void @driver(i8* %arraydecay6, i8* %arraydecay7, i32 %6)
  ret i32 0
}

; Function Attrs: noinline nounwind optnone
define internal void @pokeBit(i8* %dst, i32 %index, i32 %value) #0 {
entry:
  %dst.addr = alloca i8*, align 4
  %index.addr = alloca i32, align 4
  %value.addr = alloca i32, align 4
  %cell = alloca i32, align 4
  %bit = alloca i32, align 4
  store i8* %dst, i8** %dst.addr, align 4
  store i32 %index, i32* %index.addr, align 4
  store i32 %value, i32* %value.addr, align 4
  %0 = load i32, i32* %index.addr, align 4
  %div = sdiv i32 %0, 8
  store i32 %div, i32* %cell, align 4
  %1 = load i32, i32* %index.addr, align 4
  %rem = srem i32 %1, 8
  %sub = sub nsw i32 7, %rem
  store i32 %sub, i32* %bit, align 4
  %2 = load i32, i32* %value.addr, align 4
  %cmp = icmp eq i32 %2, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %bit, align 4
  %shl = shl i32 1, %3
  %neg = xor i32 %shl, -1
  %4 = load i8*, i8** %dst.addr, align 4
  %5 = load i32, i32* %cell, align 4
  %arrayidx = getelementptr inbounds i8, i8* %4, i32 %5
  %6 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %6 to i32
  %and = and i32 %conv, %neg
  %conv1 = trunc i32 %and to i8
  store i8 %conv1, i8* %arrayidx, align 1
  br label %if.end

if.else:                                          ; preds = %entry
  %7 = load i32, i32* %bit, align 4
  %shl2 = shl i32 1, %7
  %8 = load i8*, i8** %dst.addr, align 4
  %9 = load i32, i32* %cell, align 4
  %arrayidx3 = getelementptr inbounds i8, i8* %8, i32 %9
  %10 = load i8, i8* %arrayidx3, align 1
  %conv4 = zext i8 %10 to i32
  %or = or i32 %conv4, %shl2
  %conv5 = trunc i32 %or to i8
  store i8 %conv5, i8* %arrayidx3, align 1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i32 @peekBit(i8* %src, i32 %index) #0 {
entry:
  %src.addr = alloca i8*, align 4
  %index.addr = alloca i32, align 4
  %cell = alloca i32, align 4
  %bit = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 4
  store i32 %index, i32* %index.addr, align 4
  %0 = load i32, i32* %index.addr, align 4
  %div = sdiv i32 %0, 8
  store i32 %div, i32* %cell, align 4
  %1 = load i32, i32* %index.addr, align 4
  %rem = srem i32 %1, 8
  %sub = sub nsw i32 7, %rem
  store i32 %sub, i32* %bit, align 4
  %2 = load i8*, i8** %src.addr, align 4
  %3 = load i32, i32* %cell, align 4
  %arrayidx = getelementptr inbounds i8, i8* %2, i32 %3
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %5 = load i32, i32* %bit, align 4
  %shl = shl i32 1, %5
  %and = and i32 %conv, %shl
  %cmp = icmp ne i32 %and, 0
  %conv1 = zext i1 %cmp to i32
  ret i32 %conv1
}

; Function Attrs: noinline nounwind optnone
define internal void @shiftLeft(i8* %src, i32 %len, i32 %times, i8* %dst) #0 {
entry:
  %src.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %times.addr = alloca i32, align 4
  %dst.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %t = alloca i32, align 4
  %temp = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %times, i32* %times.addr, align 4
  store i8* %dst, i8** %dst.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp sle i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8*, i8** %dst.addr, align 4
  %3 = load i32, i32* %i, align 4
  %4 = load i8*, i8** %src.addr, align 4
  %5 = load i32, i32* %i, align 4
  %call = call i32 @peekBit(i8* %4, i32 %5)
  call void @pokeBit(i8* %2, i32 %3, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %t, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc13, %for.end
  %7 = load i32, i32* %t, align 4
  %8 = load i32, i32* %times.addr, align 4
  %cmp2 = icmp sle i32 %7, %8
  br i1 %cmp2, label %for.body3, label %for.end15

for.body3:                                        ; preds = %for.cond1
  %9 = load i8*, i8** %dst.addr, align 4
  %call4 = call i32 @peekBit(i8* %9, i32 0)
  store i32 %call4, i32* %temp, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc9, %for.body3
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %len.addr, align 4
  %cmp6 = icmp sle i32 %10, %11
  br i1 %cmp6, label %for.body7, label %for.end11

for.body7:                                        ; preds = %for.cond5
  %12 = load i8*, i8** %dst.addr, align 4
  %13 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %13, 1
  %14 = load i8*, i8** %dst.addr, align 4
  %15 = load i32, i32* %i, align 4
  %call8 = call i32 @peekBit(i8* %14, i32 %15)
  call void @pokeBit(i8* %12, i32 %sub, i32 %call8)
  br label %for.inc9

for.inc9:                                         ; preds = %for.body7
  %16 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %16, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond5

for.end11:                                        ; preds = %for.cond5
  %17 = load i8*, i8** %dst.addr, align 4
  %18 = load i32, i32* %len.addr, align 4
  %sub12 = sub nsw i32 %18, 1
  %19 = load i32, i32* %temp, align 4
  call void @pokeBit(i8* %17, i32 %sub12, i32 %19)
  br label %for.inc13

for.inc13:                                        ; preds = %for.end11
  %20 = load i32, i32* %t, align 4
  %inc14 = add nsw i32 %20, 1
  store i32 %inc14, i32* %t, align 4
  br label %for.cond1

for.end15:                                        ; preds = %for.cond1
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @f(i8* %r, i8* %ks, i8* %sp) #0 {
entry:
  %r.addr = alloca i8*, align 4
  %ks.addr = alloca i8*, align 4
  %sp.addr = alloca i8*, align 4
  %er = alloca [6 x i8], align 1
  %sr = alloca [4 x i8], align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %b = alloca [6 x i32], align 16
  %k = alloca i32, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %m = alloca i32, align 4
  %n = alloca i32, align 4
  %p = alloca i32, align 4
  store i8* %r, i8** %r.addr, align 4
  store i8* %ks, i8** %ks.addr, align 4
  store i8* %sp, i8** %sp.addr, align 4
  %arraydecay = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  call void @llvm.memset.p0i8.i32(i8* align 1 %arraydecay, i8 0, i32 6, i1 false)
  %arraydecay1 = getelementptr inbounds [4 x i8], [4 x i8]* %sr, i32 0, i32 0
  call void @llvm.memset.p0i8.i32(i8* align 1 %arraydecay1, i8 0, i32 4, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 48
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay2 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  %1 = load i32, i32* %i, align 4
  %2 = load i8*, i8** %r.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [48 x i8], [48 x i8]* @E, i32 0, i32 %3
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %sub = sub nsw i32 %conv, 1
  %call = call i32 @peekBit(i8* %2, i32 %sub)
  call void @pokeBit(i8* %arraydecay2, i32 %1, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc12, %for.end
  %6 = load i32, i32* %i, align 4
  %cmp4 = icmp slt i32 %6, 6
  br i1 %cmp4, label %for.body6, label %for.end14

for.body6:                                        ; preds = %for.cond3
  %7 = load i8*, i8** %ks.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds i8, i8* %7, i32 %8
  %9 = load i8, i8* %arrayidx7, align 1
  %conv8 = zext i8 %9 to i32
  %10 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 %10
  %11 = load i8, i8* %arrayidx9, align 1
  %conv10 = zext i8 %11 to i32
  %xor = xor i32 %conv10, %conv8
  %conv11 = trunc i32 %xor to i8
  store i8 %conv11, i8* %arrayidx9, align 1
  br label %for.inc12

for.inc12:                                        ; preds = %for.body6
  %12 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %12, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond3

for.end14:                                        ; preds = %for.cond3
  store i32 0, i32* %i, align 4
  br label %for.cond15

for.cond15:                                       ; preds = %for.inc59, %for.end14
  %13 = load i32, i32* %i, align 4
  %cmp16 = icmp slt i32 %13, 8
  br i1 %cmp16, label %for.body18, label %for.end61

for.body18:                                       ; preds = %for.cond15
  %14 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %14, 6
  store i32 %mul, i32* %j, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond19

for.cond19:                                       ; preds = %for.inc28, %for.body18
  %15 = load i32, i32* %k, align 4
  %cmp20 = icmp slt i32 %15, 6
  br i1 %cmp20, label %for.body22, label %for.end30

for.body22:                                       ; preds = %for.cond19
  %arraydecay23 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  %16 = load i32, i32* %j, align 4
  %17 = load i32, i32* %k, align 4
  %add = add nsw i32 %16, %17
  %call24 = call i32 @peekBit(i8* %arraydecay23, i32 %add)
  %cmp25 = icmp ne i32 %call24, 0
  %18 = zext i1 %cmp25 to i64
  %cond = select i1 %cmp25, i32 1, i32 0
  %19 = load i32, i32* %k, align 4
  %arrayidx27 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 %19
  store i32 %cond, i32* %arrayidx27, align 4
  br label %for.inc28

for.inc28:                                        ; preds = %for.body22
  %20 = load i32, i32* %k, align 4
  %inc29 = add nsw i32 %20, 1
  store i32 %inc29, i32* %k, align 4
  br label %for.cond19

for.end30:                                        ; preds = %for.cond19
  %arrayidx31 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 0
  %21 = load i32, i32* %arrayidx31, align 16
  %mul32 = mul nsw i32 2, %21
  %arrayidx33 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 5
  %22 = load i32, i32* %arrayidx33, align 4
  %add34 = add nsw i32 %mul32, %22
  store i32 %add34, i32* %row, align 4
  %arrayidx35 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 1
  %23 = load i32, i32* %arrayidx35, align 4
  %mul36 = mul nsw i32 8, %23
  %arrayidx37 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 2
  %24 = load i32, i32* %arrayidx37, align 8
  %mul38 = mul nsw i32 4, %24
  %add39 = add nsw i32 %mul36, %mul38
  %arrayidx40 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 3
  %25 = load i32, i32* %arrayidx40, align 4
  %mul41 = mul nsw i32 2, %25
  %add42 = add nsw i32 %add39, %mul41
  %arrayidx43 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 4
  %26 = load i32, i32* %arrayidx43, align 16
  %add44 = add nsw i32 %add42, %26
  store i32 %add44, i32* %col, align 4
  %27 = load i32, i32* %i, align 4
  %arrayidx45 = getelementptr inbounds [8 x [64 x i8]], [8 x [64 x i8]]* @S, i32 0, i32 %27
  %28 = load i32, i32* %row, align 4
  %mul46 = mul nsw i32 %28, 16
  %29 = load i32, i32* %col, align 4
  %add47 = add nsw i32 %mul46, %29
  %arrayidx48 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx45, i32 0, i32 %add47
  %30 = load i8, i8* %arrayidx48, align 1
  %conv49 = zext i8 %30 to i32
  store i32 %conv49, i32* %m, align 4
  store i32 1, i32* %n, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end30
  %31 = load i32, i32* %m, align 4
  %cmp50 = icmp sgt i32 %31, 0
  br i1 %cmp50, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %32 = load i32, i32* %m, align 4
  %rem = srem i32 %32, 2
  store i32 %rem, i32* %p, align 4
  %arraydecay52 = getelementptr inbounds [4 x i8], [4 x i8]* %sr, i32 0, i32 0
  %33 = load i32, i32* %i, align 4
  %add53 = add nsw i32 %33, 1
  %mul54 = mul nsw i32 %add53, 4
  %34 = load i32, i32* %n, align 4
  %sub55 = sub nsw i32 %mul54, %34
  %35 = load i32, i32* %p, align 4
  %cmp56 = icmp eq i32 %35, 1
  %conv57 = zext i1 %cmp56 to i32
  call void @pokeBit(i8* %arraydecay52, i32 %sub55, i32 %conv57)
  %36 = load i32, i32* %m, align 4
  %div = sdiv i32 %36, 2
  store i32 %div, i32* %m, align 4
  %37 = load i32, i32* %n, align 4
  %inc58 = add nsw i32 %37, 1
  store i32 %inc58, i32* %n, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %for.inc59

for.inc59:                                        ; preds = %while.end
  %38 = load i32, i32* %i, align 4
  %inc60 = add nsw i32 %38, 1
  store i32 %inc60, i32* %i, align 4
  br label %for.cond15

for.end61:                                        ; preds = %for.cond15
  store i32 0, i32* %i, align 4
  br label %for.cond62

for.cond62:                                       ; preds = %for.inc71, %for.end61
  %39 = load i32, i32* %i, align 4
  %cmp63 = icmp slt i32 %39, 32
  br i1 %cmp63, label %for.body65, label %for.end73

for.body65:                                       ; preds = %for.cond62
  %40 = load i8*, i8** %sp.addr, align 4
  %41 = load i32, i32* %i, align 4
  %arraydecay66 = getelementptr inbounds [4 x i8], [4 x i8]* %sr, i32 0, i32 0
  %42 = load i32, i32* %i, align 4
  %arrayidx67 = getelementptr inbounds [32 x i8], [32 x i8]* @P, i32 0, i32 %42
  %43 = load i8, i8* %arrayidx67, align 1
  %conv68 = zext i8 %43 to i32
  %sub69 = sub nsw i32 %conv68, 1
  %call70 = call i32 @peekBit(i8* %arraydecay66, i32 %sub69)
  call void @pokeBit(i8* %40, i32 %41, i32 %call70)
  br label %for.inc71

for.inc71:                                        ; preds = %for.body65
  %44 = load i32, i32* %i, align 4
  %inc72 = add nsw i32 %44, 1
  store i32 %inc72, i32* %i, align 4
  br label %for.cond62

for.end73:                                        ; preds = %for.cond62
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal signext i8 @toHex(i8 zeroext %in) #0 {
entry:
  %retval = alloca i8, align 1
  %in.addr = alloca i8, align 1
  store i8 %in, i8* %in.addr, align 1
  %0 = load i8, i8* %in.addr, align 1
  %conv = zext i8 %0 to i32
  %cmp = icmp sle i32 0, %conv
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i8, i8* %in.addr, align 1
  %conv2 = zext i8 %1 to i32
  %cmp3 = icmp slt i32 %conv2, 10
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %2 = load i8, i8* %in.addr, align 1
  %conv5 = zext i8 %2 to i32
  %add = add nsw i32 48, %conv5
  %conv6 = trunc i32 %add to i8
  store i8 %conv6, i8* %retval, align 1
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %3 = load i8, i8* %in.addr, align 1
  %conv7 = zext i8 %3 to i32
  %cmp8 = icmp sle i32 10, %conv7
  br i1 %cmp8, label %land.lhs.true10, label %if.end18

land.lhs.true10:                                  ; preds = %if.end
  %4 = load i8, i8* %in.addr, align 1
  %conv11 = zext i8 %4 to i32
  %cmp12 = icmp sle i32 %conv11, 15
  br i1 %cmp12, label %if.then14, label %if.end18

if.then14:                                        ; preds = %land.lhs.true10
  %5 = load i8, i8* %in.addr, align 1
  %conv15 = zext i8 %5 to i32
  %add16 = add nsw i32 65, %conv15
  %sub = sub nsw i32 %add16, 10
  %conv17 = trunc i32 %sub to i8
  store i8 %conv17, i8* %retval, align 1
  br label %return

if.end18:                                         ; preds = %land.lhs.true10, %if.end
  store i8 0, i8* %retval, align 1
  br label %return

return:                                           ; preds = %if.end18, %if.then14, %if.then
  %6 = load i8, i8* %retval, align 1
  ret i8 %6
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %index.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div = sdiv i32 %0, 8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sdiv %0, 8:i32
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %index.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem = srem i32 %1, 8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 8:i32
infer %1

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 7, %rem
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 8:i32
%2:i32 = subnsw 7:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %cell, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i8, i8* %arrayidx, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = zext i8 %4 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %bit, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %shl = shl i32 1, %5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl 1:i32, %0
infer %1 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %and = and i32 %conv, %shl
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl 1:i32, %0
%2:i8 = var
%3:i32 = zext %2
%4:i32 = and %1, %3
infer %4

; *****
; For LLVM instruction:
;  %cmp = icmp ne i32 %and, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl 1:i32, %0
%2:i8 = var
%3:i32 = zext %2
%4:i32 = and %1, %3
%5:i1 = ne 0:i32, %4
infer %5

; *****
; For LLVM instruction:
;  %conv1 = zext i1 %cmp to i32
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl 1:i32, %0
%2:i8 = var
%3:i32 = zext %2
%4:i32 = and %1, %3
%5:i1 = ne 0:i32, %4
%6:i32 = zext %5
infer %6
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = shl 1:i32, %0
%2:i8 = var
%3:i32 = zext %2
%4:i32 = and %1, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var
%1:i32 = zext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = shl 1:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = shl 1:i32, %0
%2:i8 = var
%3:i32 = zext %2
%4:i32 = and %1, %3
%5:i1 = ne 0:i32, %4
infer %5


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 7 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = shl 1:i32, %0
%2:i8 = var
%3:i32 = zext %2
%4:i32 = and %1, %3
%5:i1 = ne 0:i32, %4
%6:i32 = zext %5
infer %6


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var
%1:i32 = zext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = shl 1:i32, %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = shl 1:i32, %0
%2:i8 = var
%3:i32 = zext %2
%4:i32 = and %1, %3

Cost = 3
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for ./Data_Encryption_Standard.c.bc:peekBit()

; entering Souper's runOnFunction() for ./Data_Encryption_Standard.c.bc:shiftLeft()

; ModuleID = './Data_Encryption_Standard.c.bc'
source_filename = "./Data_Encryption_Standard.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.String = type { i8*, i32 }

@.str = private unnamed_addr constant [14 x i8] c"Key     : %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"Message : %s\0A\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"Encoded : %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"Decoded : %s\0A\0A\00", align 1
@__const.main.keys = private unnamed_addr constant [3 x [8 x i8]] [[8 x i8] c"\134Wy\9B\BC\DF\F1", [8 x i8] c"\0E2\922\EAm\0Ds", [8 x i8] c"\0E2\922\EAm\0Ds"], align 16
@__const.main.message1 = private unnamed_addr constant [8 x i8] c"\01#Eg\89\AB\CD\EF", align 1
@__const.main.message2 = private unnamed_addr constant [8 x i8] c"\87\87\87\87\87\87\87\87", align 1
@__const.main.message3 = private unnamed_addr constant [38 x i8] c"Your lips are smoother than vaseline\0D\0A", align 16
@PC1 = internal constant [56 x i8] c"91)!\19\11\09\01:2*\22\1A\12\0A\02;3+#\1B\13\0B\03<4,$?7/'\1F\17\0F\07>6.&\1E\16\0E\06=5-%\1D\15\0D\05\1C\14\0C\04", align 16
@SHIFTS = internal constant [16 x i8] c"\01\01\02\02\02\02\02\02\01\02\02\02\02\02\02\01", align 16
@PC2 = internal constant [48 x i8] c"\0E\11\0B\18\01\05\03\1C\0F\06\15\0A\17\13\0C\04\1A\08\10\07\1B\14\0D\02)4\1F%/7\1E(3-!0,1'8\225.*2$\1D ", align 16
@IP = internal constant [64 x i8] c":2*\22\1A\12\0A\02<4,$\1C\14\0C\04>6.&\1E\16\0E\06@80( \18\10\0891)!\19\11\09\01;3+#\1B\13\0B\03=5-%\1D\15\0D\05?7/'\1F\17\0F\07", align 16
@IP2 = internal constant [64 x i8] c"(\080\108\18@ '\07/\0F7\17?\1F&\06.\0E6\16>\1E%\05-\0D5\15=\1D$\04,\0C4\14<\1C#\03+\0B3\13;\1B\22\02*\0A2\12:\1A!\01)\091\119\19", align 16
@E = internal constant [48 x i8] c" \01\02\03\04\05\04\05\06\07\08\09\08\09\0A\0B\0C\0D\0C\0D\0E\0F\10\11\10\11\12\13\14\15\14\15\16\17\18\19\18\19\1A\1B\1C\1D\1C\1D\1E\1F \01", align 16
@S = internal constant [8 x [64 x i8]] [[64 x i8] c"\0E\04\0D\01\02\0F\0B\08\03\0A\06\0C\05\09\00\07\00\0F\07\04\0E\02\0D\01\0A\06\0C\0B\09\05\03\08\04\01\0E\08\0D\06\02\0B\0F\0C\09\07\03\0A\05\00\0F\0C\08\02\04\09\01\07\05\0B\03\0E\0A\00\06\0D", [64 x i8] c"\0F\01\08\0E\06\0B\03\04\09\07\02\0D\0C\00\05\0A\03\0D\04\07\0F\02\08\0E\0C\00\01\0A\06\09\0B\05\00\0E\07\0B\0A\04\0D\01\05\08\0C\06\09\03\02\0F\0D\08\0A\01\03\0F\04\02\0B\06\07\0C\00\05\0E\09", [64 x i8] c"\0A\00\09\0E\06\03\0F\05\01\0D\0C\07\0B\04\02\08\0D\07\00\09\03\04\06\0A\02\08\05\0E\0C\0B\0F\01\0D\06\04\09\08\0F\03\00\0B\01\02\0C\05\0A\0E\07\01\0A\0D\00\06\09\08\07\04\0F\0E\03\0B\05\02\0C", [64 x i8] c"\07\0D\0E\03\00\06\09\0A\01\02\08\05\0B\0C\04\0F\0D\08\0B\05\06\0F\00\03\04\07\02\0C\01\0A\0E\09\0A\06\09\00\0C\0B\07\0D\0F\01\03\0E\05\02\08\04\03\0F\00\06\0A\01\0D\08\09\04\05\0B\0C\07\02\0E", [64 x i8] c"\02\0C\04\01\07\0A\0B\06\08\05\03\0F\0D\00\0E\09\0E\0B\02\0C\04\07\0D\01\05\00\0F\0A\03\09\08\06\04\02\01\0B\0A\0D\07\08\0F\09\0C\05\06\03\00\0E\0B\08\0C\07\01\0E\02\0D\06\0F\00\09\0A\04\05\03", [64 x i8] c"\0C\01\0A\0F\09\02\06\08\00\0D\03\04\0E\07\05\0B\0A\0F\04\02\07\0C\09\05\06\01\0D\0E\00\0B\03\08\09\0E\0F\05\02\08\0C\03\07\00\04\0A\01\0D\0B\06\04\03\02\0C\09\05\0F\0A\0B\0E\01\07\06\00\08\0D", [64 x i8] c"\04\0B\02\0E\0F\00\08\0D\03\0C\09\07\05\0A\06\01\0D\00\0B\07\04\09\01\0A\0E\03\05\0C\02\0F\08\06\01\04\0B\0D\0C\03\07\0E\0A\0F\06\08\00\05\09\02\06\0B\0D\08\01\04\0A\07\09\05\00\0F\0E\02\03\0C", [64 x i8] c"\0D\02\08\04\06\0F\0B\01\0A\09\03\0E\05\00\0C\07\01\0F\0D\08\0A\03\07\04\0C\05\06\0B\00\0E\09\02\07\0B\04\01\09\0C\0E\02\00\06\0A\0D\0F\03\05\08\02\01\0E\07\04\0A\08\0D\0F\0C\09\00\03\05\06\0B"], align 16
@P = internal constant [32 x i8] c"\10\07\14\15\1D\0C\1C\11\01\0F\17\1A\05\12\1F\0A\02\08\18\0E \1B\03\09\13\0D\1E\06\16\0B\04\19", align 16
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @encrypt(%struct.String* noalias sret align 4 %agg.result, i8* %key, i8* %message, i32 %len) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %message.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %ks = alloca [17 x [6 x i8]], align 16
  %padByte = alloca i8, align 1
  %i = alloca i32, align 4
  store i8* %key, i8** %key.addr, align 4
  store i8* %message, i8** %message.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = bitcast %struct.String* %agg.result to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  %1 = load i8*, i8** %key.addr, align 4
  %arraydecay = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  call void @getSubKeys(i8* %1, [6 x i8]* %arraydecay)
  %2 = load i32, i32* %len.addr, align 4
  %rem = srem i32 %2, 8
  %sub = sub nsw i32 8, %rem
  %conv = trunc i32 %sub to i8
  store i8 %conv, i8* %padByte, align 1
  %3 = load i32, i32* %len.addr, align 4
  %4 = load i8, i8* %padByte, align 1
  %conv1 = zext i8 %4 to i32
  %add = add nsw i32 %3, %conv1
  %len2 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  store i32 %add, i32* %len2, align 4
  %len3 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %5 = load i32, i32* %len3, align 4
  %call = call noalias i8* @malloc(i32 %5)
  %data = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  store i8* %call, i8** %data, align 4
  %data4 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %6 = load i8*, i8** %data4, align 4
  %7 = load i8*, i8** %message.addr, align 4
  %8 = load i32, i32* %len.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %6, i8* align 1 %7, i32 %8, i1 false)
  %data5 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %9 = load i8*, i8** %data5, align 4
  %10 = load i32, i32* %len.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %9, i32 %10
  %11 = load i8, i8* %padByte, align 1
  %12 = load i8, i8* %padByte, align 1
  %conv7 = zext i8 %12 to i32
  call void @llvm.memset.p0i8.i32(i8* align 1 %arrayidx, i8 %11, i32 %conv7, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %13 = load i32, i32* %i, align 4
  %len8 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %14 = load i32, i32* %len8, align 4
  %cmp = icmp slt i32 %13, %14
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %data10 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %15 = load i8*, i8** %data10, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds i8, i8* %15, i32 %16
  %arraydecay12 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  %data13 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %17 = load i8*, i8** %data13, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds i8, i8* %17, i32 %18
  call void @processMessage(i8* %arrayidx11, [6 x i8]* %arraydecay12, i8* %arrayidx14)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %19 = load i32, i32* %i, align 4
  %add15 = add nsw i32 %19, 8
  store i32 %add15, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define internal void @getSubKeys(i8* %key, [6 x i8]* %ks) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %ks.addr = alloca [6 x i8]*, align 4
  %c = alloca [17 x [7 x i8]], align 16
  %d = alloca [17 x [4 x i8]], align 16
  %kp = alloca [7 x i8], align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i8* %key, i8** %key.addr, align 4
  store [6 x i8]* %ks, [6 x i8]** %ks.addr, align 4
  %arraydecay = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 0
  %0 = bitcast [7 x i8]* %arraydecay to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 119, i1 false)
  %arraydecay1 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 0
  %1 = bitcast [4 x i8]* %arraydecay1 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %1, i8 0, i32 68, i1 false)
  %2 = load [6 x i8]*, [6 x i8]** %ks.addr, align 4
  %3 = bitcast [6 x i8]* %2 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 1 %3, i8 0, i32 102, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %4, 56
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay2 = getelementptr inbounds [7 x i8], [7 x i8]* %kp, i32 0, i32 0
  %5 = load i32, i32* %i, align 4
  %6 = load i8*, i8** %key.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [56 x i8], [56 x i8]* @PC1, i32 0, i32 %7
  %8 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %8 to i32
  %sub = sub nsw i32 %conv, 1
  %call = call i32 @peekBit(i8* %6, i32 %sub)
  call void @pokeBit(i8* %arraydecay2, i32 %5, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc15, %for.end
  %10 = load i32, i32* %i, align 4
  %cmp4 = icmp slt i32 %10, 28
  br i1 %cmp4, label %for.body6, label %for.end17

for.body6:                                        ; preds = %for.cond3
  %arrayidx7 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 0
  %arraydecay8 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx7, i32 0, i32 0
  %11 = load i32, i32* %i, align 4
  %arraydecay9 = getelementptr inbounds [7 x i8], [7 x i8]* %kp, i32 0, i32 0
  %12 = load i32, i32* %i, align 4
  %call10 = call i32 @peekBit(i8* %arraydecay9, i32 %12)
  call void @pokeBit(i8* %arraydecay8, i32 %11, i32 %call10)
  %arrayidx11 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 0
  %arraydecay12 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx11, i32 0, i32 0
  %13 = load i32, i32* %i, align 4
  %arraydecay13 = getelementptr inbounds [7 x i8], [7 x i8]* %kp, i32 0, i32 0
  %14 = load i32, i32* %i, align 4
  %add = add nsw i32 %14, 28
  %call14 = call i32 @peekBit(i8* %arraydecay13, i32 %add)
  call void @pokeBit(i8* %arraydecay12, i32 %13, i32 %call14)
  br label %for.inc15

for.inc15:                                        ; preds = %for.body6
  %15 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %15, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond3

for.end17:                                        ; preds = %for.cond3
  store i32 1, i32* %i, align 4
  br label %for.cond18

for.cond18:                                       ; preds = %for.inc38, %for.end17
  %16 = load i32, i32* %i, align 4
  %cmp19 = icmp slt i32 %16, 17
  br i1 %cmp19, label %for.body21, label %for.end40

for.body21:                                       ; preds = %for.cond18
  %17 = load i32, i32* %i, align 4
  %sub22 = sub nsw i32 %17, 1
  %arrayidx23 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %sub22
  %arraydecay24 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx23, i32 0, i32 0
  %18 = load i32, i32* %i, align 4
  %sub25 = sub nsw i32 %18, 1
  %arrayidx26 = getelementptr inbounds [16 x i8], [16 x i8]* @SHIFTS, i32 0, i32 %sub25
  %19 = load i8, i8* %arrayidx26, align 1
  %conv27 = zext i8 %19 to i32
  %20 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %20
  %arraydecay29 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx28, i32 0, i32 0
  call void @shiftLeft(i8* %arraydecay24, i32 28, i32 %conv27, i8* %arraydecay29)
  %21 = load i32, i32* %i, align 4
  %sub30 = sub nsw i32 %21, 1
  %arrayidx31 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 %sub30
  %arraydecay32 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx31, i32 0, i32 0
  %22 = load i32, i32* %i, align 4
  %sub33 = sub nsw i32 %22, 1
  %arrayidx34 = getelementptr inbounds [16 x i8], [16 x i8]* @SHIFTS, i32 0, i32 %sub33
  %23 = load i8, i8* %arrayidx34, align 1
  %conv35 = zext i8 %23 to i32
  %24 = load i32, i32* %i, align 4
  %arrayidx36 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 %24
  %arraydecay37 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx36, i32 0, i32 0
  call void @shiftLeft(i8* %arraydecay32, i32 28, i32 %conv35, i8* %arraydecay37)
  br label %for.inc38

for.inc38:                                        ; preds = %for.body21
  %25 = load i32, i32* %i, align 4
  %inc39 = add nsw i32 %25, 1
  store i32 %inc39, i32* %i, align 4
  br label %for.cond18

for.end40:                                        ; preds = %for.cond18
  store i32 1, i32* %i, align 4
  br label %for.cond41

for.cond41:                                       ; preds = %for.inc58, %for.end40
  %26 = load i32, i32* %i, align 4
  %cmp42 = icmp slt i32 %26, 17
  br i1 %cmp42, label %for.body44, label %for.end60

for.body44:                                       ; preds = %for.cond41
  store i32 28, i32* %j, align 4
  br label %for.cond45

for.cond45:                                       ; preds = %for.inc55, %for.body44
  %27 = load i32, i32* %j, align 4
  %cmp46 = icmp slt i32 %27, 56
  br i1 %cmp46, label %for.body48, label %for.end57

for.body48:                                       ; preds = %for.cond45
  %28 = load i32, i32* %i, align 4
  %arrayidx49 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %28
  %arraydecay50 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx49, i32 0, i32 0
  %29 = load i32, i32* %j, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx51 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 %30
  %arraydecay52 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx51, i32 0, i32 0
  %31 = load i32, i32* %j, align 4
  %sub53 = sub nsw i32 %31, 28
  %call54 = call i32 @peekBit(i8* %arraydecay52, i32 %sub53)
  call void @pokeBit(i8* %arraydecay50, i32 %29, i32 %call54)
  br label %for.inc55

for.inc55:                                        ; preds = %for.body48
  %32 = load i32, i32* %j, align 4
  %inc56 = add nsw i32 %32, 1
  store i32 %inc56, i32* %j, align 4
  br label %for.cond45

for.end57:                                        ; preds = %for.cond45
  br label %for.inc58

for.inc58:                                        ; preds = %for.end57
  %33 = load i32, i32* %i, align 4
  %inc59 = add nsw i32 %33, 1
  store i32 %inc59, i32* %i, align 4
  br label %for.cond41

for.end60:                                        ; preds = %for.cond41
  store i32 1, i32* %i, align 4
  br label %for.cond61

for.cond61:                                       ; preds = %for.inc80, %for.end60
  %34 = load i32, i32* %i, align 4
  %cmp62 = icmp slt i32 %34, 17
  br i1 %cmp62, label %for.body64, label %for.end82

for.body64:                                       ; preds = %for.cond61
  store i32 0, i32* %j, align 4
  br label %for.cond65

for.cond65:                                       ; preds = %for.inc77, %for.body64
  %35 = load i32, i32* %j, align 4
  %cmp66 = icmp slt i32 %35, 48
  br i1 %cmp66, label %for.body68, label %for.end79

for.body68:                                       ; preds = %for.cond65
  %36 = load [6 x i8]*, [6 x i8]** %ks.addr, align 4
  %37 = load i32, i32* %i, align 4
  %arrayidx69 = getelementptr inbounds [6 x i8], [6 x i8]* %36, i32 %37
  %arraydecay70 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx69, i32 0, i32 0
  %38 = load i32, i32* %j, align 4
  %39 = load i32, i32* %i, align 4
  %arrayidx71 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %39
  %arraydecay72 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx71, i32 0, i32 0
  %40 = load i32, i32* %j, align 4
  %arrayidx73 = getelementptr inbounds [48 x i8], [48 x i8]* @PC2, i32 0, i32 %40
  %41 = load i8, i8* %arrayidx73, align 1
  %conv74 = zext i8 %41 to i32
  %sub75 = sub nsw i32 %conv74, 1
  %call76 = call i32 @peekBit(i8* %arraydecay72, i32 %sub75)
  call void @pokeBit(i8* %arraydecay70, i32 %38, i32 %call76)
  br label %for.inc77

for.inc77:                                        ; preds = %for.body68
  %42 = load i32, i32* %j, align 4
  %inc78 = add nsw i32 %42, 1
  store i32 %inc78, i32* %j, align 4
  br label %for.cond65

for.end79:                                        ; preds = %for.cond65
  br label %for.inc80

for.inc80:                                        ; preds = %for.end79
  %43 = load i32, i32* %i, align 4
  %inc81 = add nsw i32 %43, 1
  store i32 %inc81, i32* %i, align 4
  br label %for.cond61

for.end82:                                        ; preds = %for.cond61
  ret void
}

declare noalias i8* @malloc(i32 %0) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: noinline nounwind optnone
define internal void @processMessage(i8* %message, [6 x i8]* %ks, i8* %ep) #0 {
entry:
  %message.addr = alloca i8*, align 4
  %ks.addr = alloca [6 x i8]*, align 4
  %ep.addr = alloca i8*, align 4
  %left = alloca [17 x [4 x i8]], align 16
  %right = alloca [17 x [4 x i8]], align 16
  %mp = alloca [8 x i8], align 1
  %e = alloca [8 x i8], align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %fs = alloca [4 x i8], align 1
  store i8* %message, i8** %message.addr, align 4
  store [6 x i8]* %ks, [6 x i8]** %ks.addr, align 4
  store i8* %ep, i8** %ep.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 64
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %mp, i32 0, i32 0
  %1 = load i32, i32* %i, align 4
  %2 = load i8*, i8** %message.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [64 x i8], [64 x i8]* @IP, i32 0, i32 %3
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %sub = sub nsw i32 %conv, 1
  %call = call i32 @peekBit(i8* %2, i32 %sub)
  call void @pokeBit(i8* %arraydecay, i32 %1, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc13, %for.end
  %6 = load i32, i32* %i, align 4
  %cmp2 = icmp slt i32 %6, 32
  br i1 %cmp2, label %for.body4, label %for.end15

for.body4:                                        ; preds = %for.cond1
  %arrayidx5 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 0
  %arraydecay6 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx5, i32 0, i32 0
  %7 = load i32, i32* %i, align 4
  %arraydecay7 = getelementptr inbounds [8 x i8], [8 x i8]* %mp, i32 0, i32 0
  %8 = load i32, i32* %i, align 4
  %call8 = call i32 @peekBit(i8* %arraydecay7, i32 %8)
  call void @pokeBit(i8* %arraydecay6, i32 %7, i32 %call8)
  %arrayidx9 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 0
  %arraydecay10 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx9, i32 0, i32 0
  %9 = load i32, i32* %i, align 4
  %arraydecay11 = getelementptr inbounds [8 x i8], [8 x i8]* %mp, i32 0, i32 0
  %10 = load i32, i32* %i, align 4
  %add = add nsw i32 %10, 32
  %call12 = call i32 @peekBit(i8* %arraydecay11, i32 %add)
  call void @pokeBit(i8* %arraydecay10, i32 %9, i32 %call12)
  br label %for.inc13

for.inc13:                                        ; preds = %for.body4
  %11 = load i32, i32* %i, align 4
  %inc14 = add nsw i32 %11, 1
  store i32 %inc14, i32* %i, align 4
  br label %for.cond1

for.end15:                                        ; preds = %for.cond1
  store i32 1, i32* %i, align 4
  br label %for.cond16

for.cond16:                                       ; preds = %for.inc50, %for.end15
  %12 = load i32, i32* %i, align 4
  %cmp17 = icmp slt i32 %12, 17
  br i1 %cmp17, label %for.body19, label %for.end52

for.body19:                                       ; preds = %for.cond16
  %13 = load i32, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 %13
  %arraydecay21 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx20, i32 0, i32 0
  %14 = load i32, i32* %i, align 4
  %sub22 = sub nsw i32 %14, 1
  %arrayidx23 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 %sub22
  %arraydecay24 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx23, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %arraydecay21, i8* align 4 %arraydecay24, i32 4, i1 false)
  %15 = load i32, i32* %i, align 4
  %sub25 = sub nsw i32 %15, 1
  %arrayidx26 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 %sub25
  %arraydecay27 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx26, i32 0, i32 0
  %16 = load [6 x i8]*, [6 x i8]** %ks.addr, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds [6 x i8], [6 x i8]* %16, i32 %17
  %arraydecay29 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx28, i32 0, i32 0
  %arraydecay30 = getelementptr inbounds [4 x i8], [4 x i8]* %fs, i32 0, i32 0
  call void @f(i8* %arraydecay27, i8* %arraydecay29, i8* %arraydecay30)
  store i32 0, i32* %j, align 4
  br label %for.cond31

for.cond31:                                       ; preds = %for.inc42, %for.body19
  %18 = load i32, i32* %j, align 4
  %cmp32 = icmp slt i32 %18, 4
  br i1 %cmp32, label %for.body34, label %for.end44

for.body34:                                       ; preds = %for.cond31
  %19 = load i32, i32* %j, align 4
  %arrayidx35 = getelementptr inbounds [4 x i8], [4 x i8]* %fs, i32 0, i32 %19
  %20 = load i8, i8* %arrayidx35, align 1
  %conv36 = zext i8 %20 to i32
  %21 = load i32, i32* %i, align 4
  %sub37 = sub nsw i32 %21, 1
  %arrayidx38 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 %sub37
  %22 = load i32, i32* %j, align 4
  %arrayidx39 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx38, i32 0, i32 %22
  %23 = load i8, i8* %arrayidx39, align 1
  %conv40 = zext i8 %23 to i32
  %xor = xor i32 %conv40, %conv36
  %conv41 = trunc i32 %xor to i8
  store i8 %conv41, i8* %arrayidx39, align 1
  br label %for.inc42

for.inc42:                                        ; preds = %for.body34
  %24 = load i32, i32* %j, align 4
  %inc43 = add nsw i32 %24, 1
  store i32 %inc43, i32* %j, align 4
  br label %for.cond31

for.end44:                                        ; preds = %for.cond31
  %25 = load i32, i32* %i, align 4
  %arrayidx45 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 %25
  %arraydecay46 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx45, i32 0, i32 0
  %26 = load i32, i32* %i, align 4
  %sub47 = sub nsw i32 %26, 1
  %arrayidx48 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 %sub47
  %arraydecay49 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx48, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %arraydecay46, i8* align 4 %arraydecay49, i32 4, i1 false)
  br label %for.inc50

for.inc50:                                        ; preds = %for.end44
  %27 = load i32, i32* %i, align 4
  %inc51 = add nsw i32 %27, 1
  store i32 %inc51, i32* %i, align 4
  br label %for.cond16

for.end52:                                        ; preds = %for.cond16
  store i32 0, i32* %i, align 4
  br label %for.cond53

for.cond53:                                       ; preds = %for.inc61, %for.end52
  %28 = load i32, i32* %i, align 4
  %cmp54 = icmp slt i32 %28, 32
  br i1 %cmp54, label %for.body56, label %for.end63

for.body56:                                       ; preds = %for.cond53
  %arraydecay57 = getelementptr inbounds [8 x i8], [8 x i8]* %e, i32 0, i32 0
  %29 = load i32, i32* %i, align 4
  %arrayidx58 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 16
  %arraydecay59 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx58, i32 0, i32 0
  %30 = load i32, i32* %i, align 4
  %call60 = call i32 @peekBit(i8* %arraydecay59, i32 %30)
  call void @pokeBit(i8* %arraydecay57, i32 %29, i32 %call60)
  br label %for.inc61

for.inc61:                                        ; preds = %for.body56
  %31 = load i32, i32* %i, align 4
  %inc62 = add nsw i32 %31, 1
  store i32 %inc62, i32* %i, align 4
  br label %for.cond53

for.end63:                                        ; preds = %for.cond53
  store i32 32, i32* %i, align 4
  br label %for.cond64

for.cond64:                                       ; preds = %for.inc73, %for.end63
  %32 = load i32, i32* %i, align 4
  %cmp65 = icmp slt i32 %32, 64
  br i1 %cmp65, label %for.body67, label %for.end75

for.body67:                                       ; preds = %for.cond64
  %arraydecay68 = getelementptr inbounds [8 x i8], [8 x i8]* %e, i32 0, i32 0
  %33 = load i32, i32* %i, align 4
  %arrayidx69 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 16
  %arraydecay70 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx69, i32 0, i32 0
  %34 = load i32, i32* %i, align 4
  %sub71 = sub nsw i32 %34, 32
  %call72 = call i32 @peekBit(i8* %arraydecay70, i32 %sub71)
  call void @pokeBit(i8* %arraydecay68, i32 %33, i32 %call72)
  br label %for.inc73

for.inc73:                                        ; preds = %for.body67
  %35 = load i32, i32* %i, align 4
  %inc74 = add nsw i32 %35, 1
  store i32 %inc74, i32* %i, align 4
  br label %for.cond64

for.end75:                                        ; preds = %for.cond64
  store i32 0, i32* %i, align 4
  br label %for.cond76

for.cond76:                                       ; preds = %for.inc85, %for.end75
  %36 = load i32, i32* %i, align 4
  %cmp77 = icmp slt i32 %36, 64
  br i1 %cmp77, label %for.body79, label %for.end87

for.body79:                                       ; preds = %for.cond76
  %37 = load i8*, i8** %ep.addr, align 4
  %38 = load i32, i32* %i, align 4
  %arraydecay80 = getelementptr inbounds [8 x i8], [8 x i8]* %e, i32 0, i32 0
  %39 = load i32, i32* %i, align 4
  %arrayidx81 = getelementptr inbounds [64 x i8], [64 x i8]* @IP2, i32 0, i32 %39
  %40 = load i8, i8* %arrayidx81, align 1
  %conv82 = zext i8 %40 to i32
  %sub83 = sub nsw i32 %conv82, 1
  %call84 = call i32 @peekBit(i8* %arraydecay80, i32 %sub83)
  call void @pokeBit(i8* %37, i32 %38, i32 %call84)
  br label %for.inc85

for.inc85:                                        ; preds = %for.body79
  %41 = load i32, i32* %i, align 4
  %inc86 = add nsw i32 %41, 1
  store i32 %inc86, i32* %i, align 4
  br label %for.cond76

for.end87:                                        ; preds = %for.cond76
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @decrypt(%struct.String* noalias sret align 4 %agg.result, i8* %key, i8* %message, i32 %len) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %message.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %ks = alloca [17 x [6 x i8]], align 16
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %padByte = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8* %key, i8** %key.addr, align 4
  store i8* %message, i8** %message.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = bitcast %struct.String* %agg.result to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  %1 = load i8*, i8** %key.addr, align 4
  %arraydecay = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  call void @getSubKeys(i8* %1, [6 x i8]* %arraydecay)
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc12, %entry
  %2 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, 9
  br i1 %cmp, label %for.body, label %for.end14

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %3, 6
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %4
  %5 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx, i32 0, i32 %5
  %6 = load i8, i8* %arrayidx4, align 1
  store i8 %6, i8* %temp, align 1
  %7 = load i32, i32* %i, align 4
  %sub = sub nsw i32 17, %7
  %arrayidx5 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %sub
  %8 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx5, i32 0, i32 %8
  %9 = load i8, i8* %arrayidx6, align 1
  %10 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %10
  %11 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx7, i32 0, i32 %11
  store i8 %9, i8* %arrayidx8, align 1
  %12 = load i8, i8* %temp, align 1
  %13 = load i32, i32* %i, align 4
  %sub9 = sub nsw i32 17, %13
  %arrayidx10 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %sub9
  %14 = load i32, i32* %j, align 4
  %arrayidx11 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx10, i32 0, i32 %14
  store i8 %12, i8* %arrayidx11, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %15 = load i32, i32* %j, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc12

for.inc12:                                        ; preds = %for.end
  %16 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %16, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond

for.end14:                                        ; preds = %for.cond
  %17 = load i32, i32* %len.addr, align 4
  %call = call noalias i8* @malloc(i32 %17)
  %data = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  store i8* %call, i8** %data, align 4
  %data15 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %18 = load i8*, i8** %data15, align 4
  %19 = load i8*, i8** %message.addr, align 4
  %20 = load i32, i32* %len.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %18, i8* align 1 %19, i32 %20, i1 false)
  %21 = load i32, i32* %len.addr, align 4
  %len16 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  store i32 %21, i32* %len16, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond17

for.cond17:                                       ; preds = %for.inc26, %for.end14
  %22 = load i32, i32* %i, align 4
  %len18 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %23 = load i32, i32* %len18, align 4
  %cmp19 = icmp slt i32 %22, %23
  br i1 %cmp19, label %for.body20, label %for.end27

for.body20:                                       ; preds = %for.cond17
  %data21 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %24 = load i8*, i8** %data21, align 4
  %25 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds i8, i8* %24, i32 %25
  %arraydecay23 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  %data24 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %26 = load i8*, i8** %data24, align 4
  %27 = load i32, i32* %i, align 4
  %arrayidx25 = getelementptr inbounds i8, i8* %26, i32 %27
  call void @processMessage(i8* %arrayidx22, [6 x i8]* %arraydecay23, i8* %arrayidx25)
  br label %for.inc26

for.inc26:                                        ; preds = %for.body20
  %28 = load i32, i32* %i, align 4
  %add = add nsw i32 %28, 8
  store i32 %add, i32* %i, align 4
  br label %for.cond17

for.end27:                                        ; preds = %for.cond17
  %data28 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %29 = load i8*, i8** %data28, align 4
  %30 = load i32, i32* %len.addr, align 4
  %sub29 = sub nsw i32 %30, 1
  %arrayidx30 = getelementptr inbounds i8, i8* %29, i32 %sub29
  %31 = load i8, i8* %arrayidx30, align 1
  store i8 %31, i8* %padByte, align 1
  %32 = load i8, i8* %padByte, align 1
  %conv = zext i8 %32 to i32
  %len31 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %33 = load i32, i32* %len31, align 4
  %sub32 = sub nsw i32 %33, %conv
  store i32 %sub32, i32* %len31, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @driver(i8* %key, i8* %message, i32 %len) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %message.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %encoded = alloca %struct.String, align 4
  %decoded = alloca %struct.String, align 4
  %buffer = alloca [128 x i8], align 16
  %tmp = alloca %struct.String, align 4
  %tmp9 = alloca %struct.String, align 4
  store i8* %key, i8** %key.addr, align 4
  store i8* %message, i8** %message.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load i8*, i8** %key.addr, align 4
  %arraydecay = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %0, i32 8, i8* %arraydecay)
  %arraydecay1 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i32 0, i32 0), i8* %arraydecay1)
  %1 = load i8*, i8** %message.addr, align 4
  %2 = load i32, i32* %len.addr, align 4
  %arraydecay2 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %1, i32 %2, i8* %arraydecay2)
  %arraydecay3 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0), i8* %arraydecay3)
  %3 = load i8*, i8** %key.addr, align 4
  %4 = load i8*, i8** %message.addr, align 4
  %5 = load i32, i32* %len.addr, align 4
  call void @encrypt(%struct.String* sret align 4 %tmp, i8* %3, i8* %4, i32 %5)
  %6 = bitcast %struct.String* %encoded to i8*
  %7 = bitcast %struct.String* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %6, i8* align 4 %7, i32 8, i1 false)
  %data = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  %8 = load i8*, i8** %data, align 4
  %len5 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 1
  %9 = load i32, i32* %len5, align 4
  %arraydecay6 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %8, i32 %9, i8* %arraydecay6)
  %arraydecay7 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0), i8* %arraydecay7)
  %10 = load i8*, i8** %key.addr, align 4
  %data10 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  %11 = load i8*, i8** %data10, align 4
  %len11 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 1
  %12 = load i32, i32* %len11, align 4
  call void @decrypt(%struct.String* sret align 4 %tmp9, i8* %10, i8* %11, i32 %12)
  %13 = bitcast %struct.String* %decoded to i8*
  %14 = bitcast %struct.String* %tmp9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %13, i8* align 4 %14, i32 8, i1 false)
  %data12 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 0
  %15 = load i8*, i8** %data12, align 4
  %len13 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 1
  %16 = load i32, i32* %len13, align 4
  %arraydecay14 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %15, i32 %16, i8* %arraydecay14)
  %arraydecay15 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0), i8* %arraydecay15)
  %len17 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 1
  %17 = load i32, i32* %len17, align 4
  %cmp = icmp sgt i32 %17, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %data18 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  %18 = load i8*, i8** %data18, align 4
  call void @free(i8* %18)
  %data19 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  store i8* null, i8** %data19, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %len20 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 1
  %19 = load i32, i32* %len20, align 4
  %cmp21 = icmp sgt i32 %19, 0
  br i1 %cmp21, label %if.then22, label %if.end25

if.then22:                                        ; preds = %if.end
  %data23 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 0
  %20 = load i8*, i8** %data23, align 4
  call void @free(i8* %20)
  %data24 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 0
  store i8* null, i8** %data24, align 4
  br label %if.end25

if.end25:                                         ; preds = %if.then22, %if.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @printBytes(i8* %ptr, i32 %len, i8* %out) #0 {
entry:
  %ptr.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  store i8* %ptr, i8** %ptr.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %len.addr, align 4
  %dec = add nsw i32 %0, -1
  store i32 %dec, i32* %len.addr, align 4
  %cmp = icmp sgt i32 %0, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i8*, i8** %ptr.addr, align 4
  %2 = load i8, i8* %1, align 1
  %conv = zext i8 %2 to i32
  %shr = ashr i32 %conv, 4
  %conv1 = trunc i32 %shr to i8
  %call = call signext i8 @toHex(i8 zeroext %conv1)
  %3 = load i8*, i8** %out.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %3, i32 1
  store i8* %incdec.ptr, i8** %out.addr, align 4
  store i8 %call, i8* %3, align 1
  %4 = load i8*, i8** %ptr.addr, align 4
  %5 = load i8, i8* %4, align 1
  %conv2 = zext i8 %5 to i32
  %and = and i32 %conv2, 15
  %conv3 = trunc i32 %and to i8
  %call4 = call signext i8 @toHex(i8 zeroext %conv3)
  %6 = load i8*, i8** %out.addr, align 4
  %incdec.ptr5 = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr5, i8** %out.addr, align 4
  store i8 %call4, i8* %6, align 1
  %7 = load i8*, i8** %ptr.addr, align 4
  %incdec.ptr6 = getelementptr inbounds i8, i8* %7, i32 1
  store i8* %incdec.ptr6, i8** %ptr.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %8 = load i8*, i8** %out.addr, align 4
  store i8 0, i8* %8, align 1
  ret void
}

declare i32 @printf(i8* %0, ...) #2

declare void @free(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %keys = alloca [3 x [8 x i8]], align 16
  %message1 = alloca [8 x i8], align 1
  %message2 = alloca [8 x i8], align 1
  %message3 = alloca [38 x i8], align 16
  %len = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [3 x [8 x i8]]* %keys to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([3 x [8 x i8]], [3 x [8 x i8]]* @__const.main.keys, i32 0, i32 0, i32 0), i32 24, i1 false)
  %1 = bitcast [8 x i8]* %message1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %1, i8* align 1 getelementptr inbounds ([8 x i8], [8 x i8]* @__const.main.message1, i32 0, i32 0), i32 8, i1 false)
  %2 = bitcast [8 x i8]* %message2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %2, i8* align 1 getelementptr inbounds ([8 x i8], [8 x i8]* @__const.main.message2, i32 0, i32 0), i32 8, i1 false)
  %3 = bitcast [38 x i8]* %message3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %3, i8* align 16 getelementptr inbounds ([38 x i8], [38 x i8]* @__const.main.message3, i32 0, i32 0), i32 38, i1 false)
  store i32 8, i32* %len, align 4
  %arrayidx = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* %keys, i32 0, i32 0
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %arrayidx, i32 0, i32 0
  %arraydecay1 = getelementptr inbounds [8 x i8], [8 x i8]* %message1, i32 0, i32 0
  %4 = load i32, i32* %len, align 4
  call void @driver(i8* %arraydecay, i8* %arraydecay1, i32 %4)
  store i32 8, i32* %len, align 4
  %arrayidx2 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* %keys, i32 0, i32 1
  %arraydecay3 = getelementptr inbounds [8 x i8], [8 x i8]* %arrayidx2, i32 0, i32 0
  %arraydecay4 = getelementptr inbounds [8 x i8], [8 x i8]* %message2, i32 0, i32 0
  %5 = load i32, i32* %len, align 4
  call void @driver(i8* %arraydecay3, i8* %arraydecay4, i32 %5)
  store i32 38, i32* %len, align 4
  %arrayidx5 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* %keys, i32 0, i32 2
  %arraydecay6 = getelementptr inbounds [8 x i8], [8 x i8]* %arrayidx5, i32 0, i32 0
  %arraydecay7 = getelementptr inbounds [38 x i8], [38 x i8]* %message3, i32 0, i32 0
  %6 = load i32, i32* %len, align 4
  call void @driver(i8* %arraydecay6, i8* %arraydecay7, i32 %6)
  ret i32 0
}

; Function Attrs: noinline nounwind optnone
define internal void @pokeBit(i8* %dst, i32 %index, i32 %value) #0 {
entry:
  %dst.addr = alloca i8*, align 4
  %index.addr = alloca i32, align 4
  %value.addr = alloca i32, align 4
  %cell = alloca i32, align 4
  %bit = alloca i32, align 4
  store i8* %dst, i8** %dst.addr, align 4
  store i32 %index, i32* %index.addr, align 4
  store i32 %value, i32* %value.addr, align 4
  %0 = load i32, i32* %index.addr, align 4
  %div = sdiv i32 %0, 8
  store i32 %div, i32* %cell, align 4
  %1 = load i32, i32* %index.addr, align 4
  %rem = srem i32 %1, 8
  %sub = sub nsw i32 7, %rem
  store i32 %sub, i32* %bit, align 4
  %2 = load i32, i32* %value.addr, align 4
  %cmp = icmp eq i32 %2, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %bit, align 4
  %shl = shl i32 1, %3
  %neg = xor i32 %shl, -1
  %4 = load i8*, i8** %dst.addr, align 4
  %5 = load i32, i32* %cell, align 4
  %arrayidx = getelementptr inbounds i8, i8* %4, i32 %5
  %6 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %6 to i32
  %and = and i32 %conv, %neg
  %conv1 = trunc i32 %and to i8
  store i8 %conv1, i8* %arrayidx, align 1
  br label %if.end

if.else:                                          ; preds = %entry
  %7 = load i32, i32* %bit, align 4
  %shl2 = shl i32 1, %7
  %8 = load i8*, i8** %dst.addr, align 4
  %9 = load i32, i32* %cell, align 4
  %arrayidx3 = getelementptr inbounds i8, i8* %8, i32 %9
  %10 = load i8, i8* %arrayidx3, align 1
  %conv4 = zext i8 %10 to i32
  %or = or i32 %conv4, %shl2
  %conv5 = trunc i32 %or to i8
  store i8 %conv5, i8* %arrayidx3, align 1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i32 @peekBit(i8* %src, i32 %index) #0 {
entry:
  %src.addr = alloca i8*, align 4
  %index.addr = alloca i32, align 4
  %cell = alloca i32, align 4
  %bit = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 4
  store i32 %index, i32* %index.addr, align 4
  %0 = load i32, i32* %index.addr, align 4
  %div = sdiv i32 %0, 8
  store i32 %div, i32* %cell, align 4
  %1 = load i32, i32* %index.addr, align 4
  %rem = srem i32 %1, 8
  %sub = sub nsw i32 7, %rem
  store i32 %sub, i32* %bit, align 4
  %2 = load i8*, i8** %src.addr, align 4
  %3 = load i32, i32* %cell, align 4
  %arrayidx = getelementptr inbounds i8, i8* %2, i32 %3
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %5 = load i32, i32* %bit, align 4
  %shl = shl i32 1, %5
  %and = and i32 %conv, %shl
  %cmp = icmp ne i32 %and, 0
  %conv1 = zext i1 %cmp to i32
  ret i32 %conv1
}

; Function Attrs: noinline nounwind optnone
define internal void @shiftLeft(i8* %src, i32 %len, i32 %times, i8* %dst) #0 {
entry:
  %src.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %times.addr = alloca i32, align 4
  %dst.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %t = alloca i32, align 4
  %temp = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %times, i32* %times.addr, align 4
  store i8* %dst, i8** %dst.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp sle i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8*, i8** %dst.addr, align 4
  %3 = load i32, i32* %i, align 4
  %4 = load i8*, i8** %src.addr, align 4
  %5 = load i32, i32* %i, align 4
  %call = call i32 @peekBit(i8* %4, i32 %5)
  call void @pokeBit(i8* %2, i32 %3, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %t, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc13, %for.end
  %7 = load i32, i32* %t, align 4
  %8 = load i32, i32* %times.addr, align 4
  %cmp2 = icmp sle i32 %7, %8
  br i1 %cmp2, label %for.body3, label %for.end15

for.body3:                                        ; preds = %for.cond1
  %9 = load i8*, i8** %dst.addr, align 4
  %call4 = call i32 @peekBit(i8* %9, i32 0)
  store i32 %call4, i32* %temp, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc9, %for.body3
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %len.addr, align 4
  %cmp6 = icmp sle i32 %10, %11
  br i1 %cmp6, label %for.body7, label %for.end11

for.body7:                                        ; preds = %for.cond5
  %12 = load i8*, i8** %dst.addr, align 4
  %13 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %13, 1
  %14 = load i8*, i8** %dst.addr, align 4
  %15 = load i32, i32* %i, align 4
  %call8 = call i32 @peekBit(i8* %14, i32 %15)
  call void @pokeBit(i8* %12, i32 %sub, i32 %call8)
  br label %for.inc9

for.inc9:                                         ; preds = %for.body7
  %16 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %16, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond5

for.end11:                                        ; preds = %for.cond5
  %17 = load i8*, i8** %dst.addr, align 4
  %18 = load i32, i32* %len.addr, align 4
  %sub12 = sub nsw i32 %18, 1
  %19 = load i32, i32* %temp, align 4
  call void @pokeBit(i8* %17, i32 %sub12, i32 %19)
  br label %for.inc13

for.inc13:                                        ; preds = %for.end11
  %20 = load i32, i32* %t, align 4
  %inc14 = add nsw i32 %20, 1
  store i32 %inc14, i32* %t, align 4
  br label %for.cond1

for.end15:                                        ; preds = %for.cond1
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @f(i8* %r, i8* %ks, i8* %sp) #0 {
entry:
  %r.addr = alloca i8*, align 4
  %ks.addr = alloca i8*, align 4
  %sp.addr = alloca i8*, align 4
  %er = alloca [6 x i8], align 1
  %sr = alloca [4 x i8], align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %b = alloca [6 x i32], align 16
  %k = alloca i32, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %m = alloca i32, align 4
  %n = alloca i32, align 4
  %p = alloca i32, align 4
  store i8* %r, i8** %r.addr, align 4
  store i8* %ks, i8** %ks.addr, align 4
  store i8* %sp, i8** %sp.addr, align 4
  %arraydecay = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  call void @llvm.memset.p0i8.i32(i8* align 1 %arraydecay, i8 0, i32 6, i1 false)
  %arraydecay1 = getelementptr inbounds [4 x i8], [4 x i8]* %sr, i32 0, i32 0
  call void @llvm.memset.p0i8.i32(i8* align 1 %arraydecay1, i8 0, i32 4, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 48
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay2 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  %1 = load i32, i32* %i, align 4
  %2 = load i8*, i8** %r.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [48 x i8], [48 x i8]* @E, i32 0, i32 %3
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %sub = sub nsw i32 %conv, 1
  %call = call i32 @peekBit(i8* %2, i32 %sub)
  call void @pokeBit(i8* %arraydecay2, i32 %1, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc12, %for.end
  %6 = load i32, i32* %i, align 4
  %cmp4 = icmp slt i32 %6, 6
  br i1 %cmp4, label %for.body6, label %for.end14

for.body6:                                        ; preds = %for.cond3
  %7 = load i8*, i8** %ks.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds i8, i8* %7, i32 %8
  %9 = load i8, i8* %arrayidx7, align 1
  %conv8 = zext i8 %9 to i32
  %10 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 %10
  %11 = load i8, i8* %arrayidx9, align 1
  %conv10 = zext i8 %11 to i32
  %xor = xor i32 %conv10, %conv8
  %conv11 = trunc i32 %xor to i8
  store i8 %conv11, i8* %arrayidx9, align 1
  br label %for.inc12

for.inc12:                                        ; preds = %for.body6
  %12 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %12, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond3

for.end14:                                        ; preds = %for.cond3
  store i32 0, i32* %i, align 4
  br label %for.cond15

for.cond15:                                       ; preds = %for.inc59, %for.end14
  %13 = load i32, i32* %i, align 4
  %cmp16 = icmp slt i32 %13, 8
  br i1 %cmp16, label %for.body18, label %for.end61

for.body18:                                       ; preds = %for.cond15
  %14 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %14, 6
  store i32 %mul, i32* %j, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond19

for.cond19:                                       ; preds = %for.inc28, %for.body18
  %15 = load i32, i32* %k, align 4
  %cmp20 = icmp slt i32 %15, 6
  br i1 %cmp20, label %for.body22, label %for.end30

for.body22:                                       ; preds = %for.cond19
  %arraydecay23 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  %16 = load i32, i32* %j, align 4
  %17 = load i32, i32* %k, align 4
  %add = add nsw i32 %16, %17
  %call24 = call i32 @peekBit(i8* %arraydecay23, i32 %add)
  %cmp25 = icmp ne i32 %call24, 0
  %18 = zext i1 %cmp25 to i64
  %cond = select i1 %cmp25, i32 1, i32 0
  %19 = load i32, i32* %k, align 4
  %arrayidx27 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 %19
  store i32 %cond, i32* %arrayidx27, align 4
  br label %for.inc28

for.inc28:                                        ; preds = %for.body22
  %20 = load i32, i32* %k, align 4
  %inc29 = add nsw i32 %20, 1
  store i32 %inc29, i32* %k, align 4
  br label %for.cond19

for.end30:                                        ; preds = %for.cond19
  %arrayidx31 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 0
  %21 = load i32, i32* %arrayidx31, align 16
  %mul32 = mul nsw i32 2, %21
  %arrayidx33 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 5
  %22 = load i32, i32* %arrayidx33, align 4
  %add34 = add nsw i32 %mul32, %22
  store i32 %add34, i32* %row, align 4
  %arrayidx35 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 1
  %23 = load i32, i32* %arrayidx35, align 4
  %mul36 = mul nsw i32 8, %23
  %arrayidx37 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 2
  %24 = load i32, i32* %arrayidx37, align 8
  %mul38 = mul nsw i32 4, %24
  %add39 = add nsw i32 %mul36, %mul38
  %arrayidx40 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 3
  %25 = load i32, i32* %arrayidx40, align 4
  %mul41 = mul nsw i32 2, %25
  %add42 = add nsw i32 %add39, %mul41
  %arrayidx43 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 4
  %26 = load i32, i32* %arrayidx43, align 16
  %add44 = add nsw i32 %add42, %26
  store i32 %add44, i32* %col, align 4
  %27 = load i32, i32* %i, align 4
  %arrayidx45 = getelementptr inbounds [8 x [64 x i8]], [8 x [64 x i8]]* @S, i32 0, i32 %27
  %28 = load i32, i32* %row, align 4
  %mul46 = mul nsw i32 %28, 16
  %29 = load i32, i32* %col, align 4
  %add47 = add nsw i32 %mul46, %29
  %arrayidx48 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx45, i32 0, i32 %add47
  %30 = load i8, i8* %arrayidx48, align 1
  %conv49 = zext i8 %30 to i32
  store i32 %conv49, i32* %m, align 4
  store i32 1, i32* %n, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end30
  %31 = load i32, i32* %m, align 4
  %cmp50 = icmp sgt i32 %31, 0
  br i1 %cmp50, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %32 = load i32, i32* %m, align 4
  %rem = srem i32 %32, 2
  store i32 %rem, i32* %p, align 4
  %arraydecay52 = getelementptr inbounds [4 x i8], [4 x i8]* %sr, i32 0, i32 0
  %33 = load i32, i32* %i, align 4
  %add53 = add nsw i32 %33, 1
  %mul54 = mul nsw i32 %add53, 4
  %34 = load i32, i32* %n, align 4
  %sub55 = sub nsw i32 %mul54, %34
  %35 = load i32, i32* %p, align 4
  %cmp56 = icmp eq i32 %35, 1
  %conv57 = zext i1 %cmp56 to i32
  call void @pokeBit(i8* %arraydecay52, i32 %sub55, i32 %conv57)
  %36 = load i32, i32* %m, align 4
  %div = sdiv i32 %36, 2
  store i32 %div, i32* %m, align 4
  %37 = load i32, i32* %n, align 4
  %inc58 = add nsw i32 %37, 1
  store i32 %inc58, i32* %n, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %for.inc59

for.inc59:                                        ; preds = %while.end
  %38 = load i32, i32* %i, align 4
  %inc60 = add nsw i32 %38, 1
  store i32 %inc60, i32* %i, align 4
  br label %for.cond15

for.end61:                                        ; preds = %for.cond15
  store i32 0, i32* %i, align 4
  br label %for.cond62

for.cond62:                                       ; preds = %for.inc71, %for.end61
  %39 = load i32, i32* %i, align 4
  %cmp63 = icmp slt i32 %39, 32
  br i1 %cmp63, label %for.body65, label %for.end73

for.body65:                                       ; preds = %for.cond62
  %40 = load i8*, i8** %sp.addr, align 4
  %41 = load i32, i32* %i, align 4
  %arraydecay66 = getelementptr inbounds [4 x i8], [4 x i8]* %sr, i32 0, i32 0
  %42 = load i32, i32* %i, align 4
  %arrayidx67 = getelementptr inbounds [32 x i8], [32 x i8]* @P, i32 0, i32 %42
  %43 = load i8, i8* %arrayidx67, align 1
  %conv68 = zext i8 %43 to i32
  %sub69 = sub nsw i32 %conv68, 1
  %call70 = call i32 @peekBit(i8* %arraydecay66, i32 %sub69)
  call void @pokeBit(i8* %40, i32 %41, i32 %call70)
  br label %for.inc71

for.inc71:                                        ; preds = %for.body65
  %44 = load i32, i32* %i, align 4
  %inc72 = add nsw i32 %44, 1
  store i32 %inc72, i32* %i, align 4
  br label %for.cond62

for.end73:                                        ; preds = %for.cond62
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal signext i8 @toHex(i8 zeroext %in) #0 {
entry:
  %retval = alloca i8, align 1
  %in.addr = alloca i8, align 1
  store i8 %in, i8* %in.addr, align 1
  %0 = load i8, i8* %in.addr, align 1
  %conv = zext i8 %0 to i32
  %cmp = icmp sle i32 0, %conv
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i8, i8* %in.addr, align 1
  %conv2 = zext i8 %1 to i32
  %cmp3 = icmp slt i32 %conv2, 10
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %2 = load i8, i8* %in.addr, align 1
  %conv5 = zext i8 %2 to i32
  %add = add nsw i32 48, %conv5
  %conv6 = trunc i32 %add to i8
  store i8 %conv6, i8* %retval, align 1
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %3 = load i8, i8* %in.addr, align 1
  %conv7 = zext i8 %3 to i32
  %cmp8 = icmp sle i32 10, %conv7
  br i1 %cmp8, label %land.lhs.true10, label %if.end18

land.lhs.true10:                                  ; preds = %if.end
  %4 = load i8, i8* %in.addr, align 1
  %conv11 = zext i8 %4 to i32
  %cmp12 = icmp sle i32 %conv11, 15
  br i1 %cmp12, label %if.then14, label %if.end18

if.then14:                                        ; preds = %land.lhs.true10
  %5 = load i8, i8* %in.addr, align 1
  %conv15 = zext i8 %5 to i32
  %add16 = add nsw i32 65, %conv15
  %sub = sub nsw i32 %add16, 10
  %conv17 = trunc i32 %sub to i8
  store i8 %conv17, i8* %retval, align 1
  br label %return

if.end18:                                         ; preds = %land.lhs.true10, %if.end
  store i8 0, i8* %retval, align 1
  br label %return

return:                                           ; preds = %if.end18, %if.then14, %if.then
  %6 = load i8, i8* %retval, align 1
  ret i8 %6
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sle i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 @peekBit(i8* %4, i32 %5)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %6, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %t, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %times.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp sle i32 %7, %8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %call4 = call i32 @peekBit(i8* %9, i32 0)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp6 = icmp sle i32 %10, %11
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %13, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call8 = call i32 @peekBit(i8* %14, i32 %15)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc10 = add nsw i32 %16, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub12 = sub nsw i32 %18, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %temp, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %t, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc14 = add nsw i32 %20, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for ./Data_Encryption_Standard.c.bc:shiftLeft()

; entering Souper's runOnFunction() for ./Data_Encryption_Standard.c.bc:f()

; ModuleID = './Data_Encryption_Standard.c.bc'
source_filename = "./Data_Encryption_Standard.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.String = type { i8*, i32 }

@.str = private unnamed_addr constant [14 x i8] c"Key     : %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"Message : %s\0A\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"Encoded : %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"Decoded : %s\0A\0A\00", align 1
@__const.main.keys = private unnamed_addr constant [3 x [8 x i8]] [[8 x i8] c"\134Wy\9B\BC\DF\F1", [8 x i8] c"\0E2\922\EAm\0Ds", [8 x i8] c"\0E2\922\EAm\0Ds"], align 16
@__const.main.message1 = private unnamed_addr constant [8 x i8] c"\01#Eg\89\AB\CD\EF", align 1
@__const.main.message2 = private unnamed_addr constant [8 x i8] c"\87\87\87\87\87\87\87\87", align 1
@__const.main.message3 = private unnamed_addr constant [38 x i8] c"Your lips are smoother than vaseline\0D\0A", align 16
@PC1 = internal constant [56 x i8] c"91)!\19\11\09\01:2*\22\1A\12\0A\02;3+#\1B\13\0B\03<4,$?7/'\1F\17\0F\07>6.&\1E\16\0E\06=5-%\1D\15\0D\05\1C\14\0C\04", align 16
@SHIFTS = internal constant [16 x i8] c"\01\01\02\02\02\02\02\02\01\02\02\02\02\02\02\01", align 16
@PC2 = internal constant [48 x i8] c"\0E\11\0B\18\01\05\03\1C\0F\06\15\0A\17\13\0C\04\1A\08\10\07\1B\14\0D\02)4\1F%/7\1E(3-!0,1'8\225.*2$\1D ", align 16
@IP = internal constant [64 x i8] c":2*\22\1A\12\0A\02<4,$\1C\14\0C\04>6.&\1E\16\0E\06@80( \18\10\0891)!\19\11\09\01;3+#\1B\13\0B\03=5-%\1D\15\0D\05?7/'\1F\17\0F\07", align 16
@IP2 = internal constant [64 x i8] c"(\080\108\18@ '\07/\0F7\17?\1F&\06.\0E6\16>\1E%\05-\0D5\15=\1D$\04,\0C4\14<\1C#\03+\0B3\13;\1B\22\02*\0A2\12:\1A!\01)\091\119\19", align 16
@E = internal constant [48 x i8] c" \01\02\03\04\05\04\05\06\07\08\09\08\09\0A\0B\0C\0D\0C\0D\0E\0F\10\11\10\11\12\13\14\15\14\15\16\17\18\19\18\19\1A\1B\1C\1D\1C\1D\1E\1F \01", align 16
@S = internal constant [8 x [64 x i8]] [[64 x i8] c"\0E\04\0D\01\02\0F\0B\08\03\0A\06\0C\05\09\00\07\00\0F\07\04\0E\02\0D\01\0A\06\0C\0B\09\05\03\08\04\01\0E\08\0D\06\02\0B\0F\0C\09\07\03\0A\05\00\0F\0C\08\02\04\09\01\07\05\0B\03\0E\0A\00\06\0D", [64 x i8] c"\0F\01\08\0E\06\0B\03\04\09\07\02\0D\0C\00\05\0A\03\0D\04\07\0F\02\08\0E\0C\00\01\0A\06\09\0B\05\00\0E\07\0B\0A\04\0D\01\05\08\0C\06\09\03\02\0F\0D\08\0A\01\03\0F\04\02\0B\06\07\0C\00\05\0E\09", [64 x i8] c"\0A\00\09\0E\06\03\0F\05\01\0D\0C\07\0B\04\02\08\0D\07\00\09\03\04\06\0A\02\08\05\0E\0C\0B\0F\01\0D\06\04\09\08\0F\03\00\0B\01\02\0C\05\0A\0E\07\01\0A\0D\00\06\09\08\07\04\0F\0E\03\0B\05\02\0C", [64 x i8] c"\07\0D\0E\03\00\06\09\0A\01\02\08\05\0B\0C\04\0F\0D\08\0B\05\06\0F\00\03\04\07\02\0C\01\0A\0E\09\0A\06\09\00\0C\0B\07\0D\0F\01\03\0E\05\02\08\04\03\0F\00\06\0A\01\0D\08\09\04\05\0B\0C\07\02\0E", [64 x i8] c"\02\0C\04\01\07\0A\0B\06\08\05\03\0F\0D\00\0E\09\0E\0B\02\0C\04\07\0D\01\05\00\0F\0A\03\09\08\06\04\02\01\0B\0A\0D\07\08\0F\09\0C\05\06\03\00\0E\0B\08\0C\07\01\0E\02\0D\06\0F\00\09\0A\04\05\03", [64 x i8] c"\0C\01\0A\0F\09\02\06\08\00\0D\03\04\0E\07\05\0B\0A\0F\04\02\07\0C\09\05\06\01\0D\0E\00\0B\03\08\09\0E\0F\05\02\08\0C\03\07\00\04\0A\01\0D\0B\06\04\03\02\0C\09\05\0F\0A\0B\0E\01\07\06\00\08\0D", [64 x i8] c"\04\0B\02\0E\0F\00\08\0D\03\0C\09\07\05\0A\06\01\0D\00\0B\07\04\09\01\0A\0E\03\05\0C\02\0F\08\06\01\04\0B\0D\0C\03\07\0E\0A\0F\06\08\00\05\09\02\06\0B\0D\08\01\04\0A\07\09\05\00\0F\0E\02\03\0C", [64 x i8] c"\0D\02\08\04\06\0F\0B\01\0A\09\03\0E\05\00\0C\07\01\0F\0D\08\0A\03\07\04\0C\05\06\0B\00\0E\09\02\07\0B\04\01\09\0C\0E\02\00\06\0A\0D\0F\03\05\08\02\01\0E\07\04\0A\08\0D\0F\0C\09\00\03\05\06\0B"], align 16
@P = internal constant [32 x i8] c"\10\07\14\15\1D\0C\1C\11\01\0F\17\1A\05\12\1F\0A\02\08\18\0E \1B\03\09\13\0D\1E\06\16\0B\04\19", align 16
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @encrypt(%struct.String* noalias sret align 4 %agg.result, i8* %key, i8* %message, i32 %len) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %message.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %ks = alloca [17 x [6 x i8]], align 16
  %padByte = alloca i8, align 1
  %i = alloca i32, align 4
  store i8* %key, i8** %key.addr, align 4
  store i8* %message, i8** %message.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = bitcast %struct.String* %agg.result to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  %1 = load i8*, i8** %key.addr, align 4
  %arraydecay = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  call void @getSubKeys(i8* %1, [6 x i8]* %arraydecay)
  %2 = load i32, i32* %len.addr, align 4
  %rem = srem i32 %2, 8
  %sub = sub nsw i32 8, %rem
  %conv = trunc i32 %sub to i8
  store i8 %conv, i8* %padByte, align 1
  %3 = load i32, i32* %len.addr, align 4
  %4 = load i8, i8* %padByte, align 1
  %conv1 = zext i8 %4 to i32
  %add = add nsw i32 %3, %conv1
  %len2 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  store i32 %add, i32* %len2, align 4
  %len3 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %5 = load i32, i32* %len3, align 4
  %call = call noalias i8* @malloc(i32 %5)
  %data = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  store i8* %call, i8** %data, align 4
  %data4 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %6 = load i8*, i8** %data4, align 4
  %7 = load i8*, i8** %message.addr, align 4
  %8 = load i32, i32* %len.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %6, i8* align 1 %7, i32 %8, i1 false)
  %data5 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %9 = load i8*, i8** %data5, align 4
  %10 = load i32, i32* %len.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %9, i32 %10
  %11 = load i8, i8* %padByte, align 1
  %12 = load i8, i8* %padByte, align 1
  %conv7 = zext i8 %12 to i32
  call void @llvm.memset.p0i8.i32(i8* align 1 %arrayidx, i8 %11, i32 %conv7, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %13 = load i32, i32* %i, align 4
  %len8 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %14 = load i32, i32* %len8, align 4
  %cmp = icmp slt i32 %13, %14
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %data10 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %15 = load i8*, i8** %data10, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds i8, i8* %15, i32 %16
  %arraydecay12 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  %data13 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %17 = load i8*, i8** %data13, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds i8, i8* %17, i32 %18
  call void @processMessage(i8* %arrayidx11, [6 x i8]* %arraydecay12, i8* %arrayidx14)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %19 = load i32, i32* %i, align 4
  %add15 = add nsw i32 %19, 8
  store i32 %add15, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define internal void @getSubKeys(i8* %key, [6 x i8]* %ks) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %ks.addr = alloca [6 x i8]*, align 4
  %c = alloca [17 x [7 x i8]], align 16
  %d = alloca [17 x [4 x i8]], align 16
  %kp = alloca [7 x i8], align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i8* %key, i8** %key.addr, align 4
  store [6 x i8]* %ks, [6 x i8]** %ks.addr, align 4
  %arraydecay = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 0
  %0 = bitcast [7 x i8]* %arraydecay to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 119, i1 false)
  %arraydecay1 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 0
  %1 = bitcast [4 x i8]* %arraydecay1 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %1, i8 0, i32 68, i1 false)
  %2 = load [6 x i8]*, [6 x i8]** %ks.addr, align 4
  %3 = bitcast [6 x i8]* %2 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 1 %3, i8 0, i32 102, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %4, 56
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay2 = getelementptr inbounds [7 x i8], [7 x i8]* %kp, i32 0, i32 0
  %5 = load i32, i32* %i, align 4
  %6 = load i8*, i8** %key.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [56 x i8], [56 x i8]* @PC1, i32 0, i32 %7
  %8 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %8 to i32
  %sub = sub nsw i32 %conv, 1
  %call = call i32 @peekBit(i8* %6, i32 %sub)
  call void @pokeBit(i8* %arraydecay2, i32 %5, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc15, %for.end
  %10 = load i32, i32* %i, align 4
  %cmp4 = icmp slt i32 %10, 28
  br i1 %cmp4, label %for.body6, label %for.end17

for.body6:                                        ; preds = %for.cond3
  %arrayidx7 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 0
  %arraydecay8 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx7, i32 0, i32 0
  %11 = load i32, i32* %i, align 4
  %arraydecay9 = getelementptr inbounds [7 x i8], [7 x i8]* %kp, i32 0, i32 0
  %12 = load i32, i32* %i, align 4
  %call10 = call i32 @peekBit(i8* %arraydecay9, i32 %12)
  call void @pokeBit(i8* %arraydecay8, i32 %11, i32 %call10)
  %arrayidx11 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 0
  %arraydecay12 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx11, i32 0, i32 0
  %13 = load i32, i32* %i, align 4
  %arraydecay13 = getelementptr inbounds [7 x i8], [7 x i8]* %kp, i32 0, i32 0
  %14 = load i32, i32* %i, align 4
  %add = add nsw i32 %14, 28
  %call14 = call i32 @peekBit(i8* %arraydecay13, i32 %add)
  call void @pokeBit(i8* %arraydecay12, i32 %13, i32 %call14)
  br label %for.inc15

for.inc15:                                        ; preds = %for.body6
  %15 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %15, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond3

for.end17:                                        ; preds = %for.cond3
  store i32 1, i32* %i, align 4
  br label %for.cond18

for.cond18:                                       ; preds = %for.inc38, %for.end17
  %16 = load i32, i32* %i, align 4
  %cmp19 = icmp slt i32 %16, 17
  br i1 %cmp19, label %for.body21, label %for.end40

for.body21:                                       ; preds = %for.cond18
  %17 = load i32, i32* %i, align 4
  %sub22 = sub nsw i32 %17, 1
  %arrayidx23 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %sub22
  %arraydecay24 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx23, i32 0, i32 0
  %18 = load i32, i32* %i, align 4
  %sub25 = sub nsw i32 %18, 1
  %arrayidx26 = getelementptr inbounds [16 x i8], [16 x i8]* @SHIFTS, i32 0, i32 %sub25
  %19 = load i8, i8* %arrayidx26, align 1
  %conv27 = zext i8 %19 to i32
  %20 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %20
  %arraydecay29 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx28, i32 0, i32 0
  call void @shiftLeft(i8* %arraydecay24, i32 28, i32 %conv27, i8* %arraydecay29)
  %21 = load i32, i32* %i, align 4
  %sub30 = sub nsw i32 %21, 1
  %arrayidx31 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 %sub30
  %arraydecay32 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx31, i32 0, i32 0
  %22 = load i32, i32* %i, align 4
  %sub33 = sub nsw i32 %22, 1
  %arrayidx34 = getelementptr inbounds [16 x i8], [16 x i8]* @SHIFTS, i32 0, i32 %sub33
  %23 = load i8, i8* %arrayidx34, align 1
  %conv35 = zext i8 %23 to i32
  %24 = load i32, i32* %i, align 4
  %arrayidx36 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 %24
  %arraydecay37 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx36, i32 0, i32 0
  call void @shiftLeft(i8* %arraydecay32, i32 28, i32 %conv35, i8* %arraydecay37)
  br label %for.inc38

for.inc38:                                        ; preds = %for.body21
  %25 = load i32, i32* %i, align 4
  %inc39 = add nsw i32 %25, 1
  store i32 %inc39, i32* %i, align 4
  br label %for.cond18

for.end40:                                        ; preds = %for.cond18
  store i32 1, i32* %i, align 4
  br label %for.cond41

for.cond41:                                       ; preds = %for.inc58, %for.end40
  %26 = load i32, i32* %i, align 4
  %cmp42 = icmp slt i32 %26, 17
  br i1 %cmp42, label %for.body44, label %for.end60

for.body44:                                       ; preds = %for.cond41
  store i32 28, i32* %j, align 4
  br label %for.cond45

for.cond45:                                       ; preds = %for.inc55, %for.body44
  %27 = load i32, i32* %j, align 4
  %cmp46 = icmp slt i32 %27, 56
  br i1 %cmp46, label %for.body48, label %for.end57

for.body48:                                       ; preds = %for.cond45
  %28 = load i32, i32* %i, align 4
  %arrayidx49 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %28
  %arraydecay50 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx49, i32 0, i32 0
  %29 = load i32, i32* %j, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx51 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 %30
  %arraydecay52 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx51, i32 0, i32 0
  %31 = load i32, i32* %j, align 4
  %sub53 = sub nsw i32 %31, 28
  %call54 = call i32 @peekBit(i8* %arraydecay52, i32 %sub53)
  call void @pokeBit(i8* %arraydecay50, i32 %29, i32 %call54)
  br label %for.inc55

for.inc55:                                        ; preds = %for.body48
  %32 = load i32, i32* %j, align 4
  %inc56 = add nsw i32 %32, 1
  store i32 %inc56, i32* %j, align 4
  br label %for.cond45

for.end57:                                        ; preds = %for.cond45
  br label %for.inc58

for.inc58:                                        ; preds = %for.end57
  %33 = load i32, i32* %i, align 4
  %inc59 = add nsw i32 %33, 1
  store i32 %inc59, i32* %i, align 4
  br label %for.cond41

for.end60:                                        ; preds = %for.cond41
  store i32 1, i32* %i, align 4
  br label %for.cond61

for.cond61:                                       ; preds = %for.inc80, %for.end60
  %34 = load i32, i32* %i, align 4
  %cmp62 = icmp slt i32 %34, 17
  br i1 %cmp62, label %for.body64, label %for.end82

for.body64:                                       ; preds = %for.cond61
  store i32 0, i32* %j, align 4
  br label %for.cond65

for.cond65:                                       ; preds = %for.inc77, %for.body64
  %35 = load i32, i32* %j, align 4
  %cmp66 = icmp slt i32 %35, 48
  br i1 %cmp66, label %for.body68, label %for.end79

for.body68:                                       ; preds = %for.cond65
  %36 = load [6 x i8]*, [6 x i8]** %ks.addr, align 4
  %37 = load i32, i32* %i, align 4
  %arrayidx69 = getelementptr inbounds [6 x i8], [6 x i8]* %36, i32 %37
  %arraydecay70 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx69, i32 0, i32 0
  %38 = load i32, i32* %j, align 4
  %39 = load i32, i32* %i, align 4
  %arrayidx71 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %39
  %arraydecay72 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx71, i32 0, i32 0
  %40 = load i32, i32* %j, align 4
  %arrayidx73 = getelementptr inbounds [48 x i8], [48 x i8]* @PC2, i32 0, i32 %40
  %41 = load i8, i8* %arrayidx73, align 1
  %conv74 = zext i8 %41 to i32
  %sub75 = sub nsw i32 %conv74, 1
  %call76 = call i32 @peekBit(i8* %arraydecay72, i32 %sub75)
  call void @pokeBit(i8* %arraydecay70, i32 %38, i32 %call76)
  br label %for.inc77

for.inc77:                                        ; preds = %for.body68
  %42 = load i32, i32* %j, align 4
  %inc78 = add nsw i32 %42, 1
  store i32 %inc78, i32* %j, align 4
  br label %for.cond65

for.end79:                                        ; preds = %for.cond65
  br label %for.inc80

for.inc80:                                        ; preds = %for.end79
  %43 = load i32, i32* %i, align 4
  %inc81 = add nsw i32 %43, 1
  store i32 %inc81, i32* %i, align 4
  br label %for.cond61

for.end82:                                        ; preds = %for.cond61
  ret void
}

declare noalias i8* @malloc(i32 %0) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: noinline nounwind optnone
define internal void @processMessage(i8* %message, [6 x i8]* %ks, i8* %ep) #0 {
entry:
  %message.addr = alloca i8*, align 4
  %ks.addr = alloca [6 x i8]*, align 4
  %ep.addr = alloca i8*, align 4
  %left = alloca [17 x [4 x i8]], align 16
  %right = alloca [17 x [4 x i8]], align 16
  %mp = alloca [8 x i8], align 1
  %e = alloca [8 x i8], align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %fs = alloca [4 x i8], align 1
  store i8* %message, i8** %message.addr, align 4
  store [6 x i8]* %ks, [6 x i8]** %ks.addr, align 4
  store i8* %ep, i8** %ep.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 64
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %mp, i32 0, i32 0
  %1 = load i32, i32* %i, align 4
  %2 = load i8*, i8** %message.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [64 x i8], [64 x i8]* @IP, i32 0, i32 %3
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %sub = sub nsw i32 %conv, 1
  %call = call i32 @peekBit(i8* %2, i32 %sub)
  call void @pokeBit(i8* %arraydecay, i32 %1, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc13, %for.end
  %6 = load i32, i32* %i, align 4
  %cmp2 = icmp slt i32 %6, 32
  br i1 %cmp2, label %for.body4, label %for.end15

for.body4:                                        ; preds = %for.cond1
  %arrayidx5 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 0
  %arraydecay6 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx5, i32 0, i32 0
  %7 = load i32, i32* %i, align 4
  %arraydecay7 = getelementptr inbounds [8 x i8], [8 x i8]* %mp, i32 0, i32 0
  %8 = load i32, i32* %i, align 4
  %call8 = call i32 @peekBit(i8* %arraydecay7, i32 %8)
  call void @pokeBit(i8* %arraydecay6, i32 %7, i32 %call8)
  %arrayidx9 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 0
  %arraydecay10 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx9, i32 0, i32 0
  %9 = load i32, i32* %i, align 4
  %arraydecay11 = getelementptr inbounds [8 x i8], [8 x i8]* %mp, i32 0, i32 0
  %10 = load i32, i32* %i, align 4
  %add = add nsw i32 %10, 32
  %call12 = call i32 @peekBit(i8* %arraydecay11, i32 %add)
  call void @pokeBit(i8* %arraydecay10, i32 %9, i32 %call12)
  br label %for.inc13

for.inc13:                                        ; preds = %for.body4
  %11 = load i32, i32* %i, align 4
  %inc14 = add nsw i32 %11, 1
  store i32 %inc14, i32* %i, align 4
  br label %for.cond1

for.end15:                                        ; preds = %for.cond1
  store i32 1, i32* %i, align 4
  br label %for.cond16

for.cond16:                                       ; preds = %for.inc50, %for.end15
  %12 = load i32, i32* %i, align 4
  %cmp17 = icmp slt i32 %12, 17
  br i1 %cmp17, label %for.body19, label %for.end52

for.body19:                                       ; preds = %for.cond16
  %13 = load i32, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 %13
  %arraydecay21 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx20, i32 0, i32 0
  %14 = load i32, i32* %i, align 4
  %sub22 = sub nsw i32 %14, 1
  %arrayidx23 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 %sub22
  %arraydecay24 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx23, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %arraydecay21, i8* align 4 %arraydecay24, i32 4, i1 false)
  %15 = load i32, i32* %i, align 4
  %sub25 = sub nsw i32 %15, 1
  %arrayidx26 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 %sub25
  %arraydecay27 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx26, i32 0, i32 0
  %16 = load [6 x i8]*, [6 x i8]** %ks.addr, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds [6 x i8], [6 x i8]* %16, i32 %17
  %arraydecay29 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx28, i32 0, i32 0
  %arraydecay30 = getelementptr inbounds [4 x i8], [4 x i8]* %fs, i32 0, i32 0
  call void @f(i8* %arraydecay27, i8* %arraydecay29, i8* %arraydecay30)
  store i32 0, i32* %j, align 4
  br label %for.cond31

for.cond31:                                       ; preds = %for.inc42, %for.body19
  %18 = load i32, i32* %j, align 4
  %cmp32 = icmp slt i32 %18, 4
  br i1 %cmp32, label %for.body34, label %for.end44

for.body34:                                       ; preds = %for.cond31
  %19 = load i32, i32* %j, align 4
  %arrayidx35 = getelementptr inbounds [4 x i8], [4 x i8]* %fs, i32 0, i32 %19
  %20 = load i8, i8* %arrayidx35, align 1
  %conv36 = zext i8 %20 to i32
  %21 = load i32, i32* %i, align 4
  %sub37 = sub nsw i32 %21, 1
  %arrayidx38 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 %sub37
  %22 = load i32, i32* %j, align 4
  %arrayidx39 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx38, i32 0, i32 %22
  %23 = load i8, i8* %arrayidx39, align 1
  %conv40 = zext i8 %23 to i32
  %xor = xor i32 %conv40, %conv36
  %conv41 = trunc i32 %xor to i8
  store i8 %conv41, i8* %arrayidx39, align 1
  br label %for.inc42

for.inc42:                                        ; preds = %for.body34
  %24 = load i32, i32* %j, align 4
  %inc43 = add nsw i32 %24, 1
  store i32 %inc43, i32* %j, align 4
  br label %for.cond31

for.end44:                                        ; preds = %for.cond31
  %25 = load i32, i32* %i, align 4
  %arrayidx45 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 %25
  %arraydecay46 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx45, i32 0, i32 0
  %26 = load i32, i32* %i, align 4
  %sub47 = sub nsw i32 %26, 1
  %arrayidx48 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 %sub47
  %arraydecay49 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx48, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %arraydecay46, i8* align 4 %arraydecay49, i32 4, i1 false)
  br label %for.inc50

for.inc50:                                        ; preds = %for.end44
  %27 = load i32, i32* %i, align 4
  %inc51 = add nsw i32 %27, 1
  store i32 %inc51, i32* %i, align 4
  br label %for.cond16

for.end52:                                        ; preds = %for.cond16
  store i32 0, i32* %i, align 4
  br label %for.cond53

for.cond53:                                       ; preds = %for.inc61, %for.end52
  %28 = load i32, i32* %i, align 4
  %cmp54 = icmp slt i32 %28, 32
  br i1 %cmp54, label %for.body56, label %for.end63

for.body56:                                       ; preds = %for.cond53
  %arraydecay57 = getelementptr inbounds [8 x i8], [8 x i8]* %e, i32 0, i32 0
  %29 = load i32, i32* %i, align 4
  %arrayidx58 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 16
  %arraydecay59 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx58, i32 0, i32 0
  %30 = load i32, i32* %i, align 4
  %call60 = call i32 @peekBit(i8* %arraydecay59, i32 %30)
  call void @pokeBit(i8* %arraydecay57, i32 %29, i32 %call60)
  br label %for.inc61

for.inc61:                                        ; preds = %for.body56
  %31 = load i32, i32* %i, align 4
  %inc62 = add nsw i32 %31, 1
  store i32 %inc62, i32* %i, align 4
  br label %for.cond53

for.end63:                                        ; preds = %for.cond53
  store i32 32, i32* %i, align 4
  br label %for.cond64

for.cond64:                                       ; preds = %for.inc73, %for.end63
  %32 = load i32, i32* %i, align 4
  %cmp65 = icmp slt i32 %32, 64
  br i1 %cmp65, label %for.body67, label %for.end75

for.body67:                                       ; preds = %for.cond64
  %arraydecay68 = getelementptr inbounds [8 x i8], [8 x i8]* %e, i32 0, i32 0
  %33 = load i32, i32* %i, align 4
  %arrayidx69 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 16
  %arraydecay70 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx69, i32 0, i32 0
  %34 = load i32, i32* %i, align 4
  %sub71 = sub nsw i32 %34, 32
  %call72 = call i32 @peekBit(i8* %arraydecay70, i32 %sub71)
  call void @pokeBit(i8* %arraydecay68, i32 %33, i32 %call72)
  br label %for.inc73

for.inc73:                                        ; preds = %for.body67
  %35 = load i32, i32* %i, align 4
  %inc74 = add nsw i32 %35, 1
  store i32 %inc74, i32* %i, align 4
  br label %for.cond64

for.end75:                                        ; preds = %for.cond64
  store i32 0, i32* %i, align 4
  br label %for.cond76

for.cond76:                                       ; preds = %for.inc85, %for.end75
  %36 = load i32, i32* %i, align 4
  %cmp77 = icmp slt i32 %36, 64
  br i1 %cmp77, label %for.body79, label %for.end87

for.body79:                                       ; preds = %for.cond76
  %37 = load i8*, i8** %ep.addr, align 4
  %38 = load i32, i32* %i, align 4
  %arraydecay80 = getelementptr inbounds [8 x i8], [8 x i8]* %e, i32 0, i32 0
  %39 = load i32, i32* %i, align 4
  %arrayidx81 = getelementptr inbounds [64 x i8], [64 x i8]* @IP2, i32 0, i32 %39
  %40 = load i8, i8* %arrayidx81, align 1
  %conv82 = zext i8 %40 to i32
  %sub83 = sub nsw i32 %conv82, 1
  %call84 = call i32 @peekBit(i8* %arraydecay80, i32 %sub83)
  call void @pokeBit(i8* %37, i32 %38, i32 %call84)
  br label %for.inc85

for.inc85:                                        ; preds = %for.body79
  %41 = load i32, i32* %i, align 4
  %inc86 = add nsw i32 %41, 1
  store i32 %inc86, i32* %i, align 4
  br label %for.cond76

for.end87:                                        ; preds = %for.cond76
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @decrypt(%struct.String* noalias sret align 4 %agg.result, i8* %key, i8* %message, i32 %len) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %message.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %ks = alloca [17 x [6 x i8]], align 16
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %padByte = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8* %key, i8** %key.addr, align 4
  store i8* %message, i8** %message.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = bitcast %struct.String* %agg.result to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  %1 = load i8*, i8** %key.addr, align 4
  %arraydecay = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  call void @getSubKeys(i8* %1, [6 x i8]* %arraydecay)
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc12, %entry
  %2 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, 9
  br i1 %cmp, label %for.body, label %for.end14

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %3, 6
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %4
  %5 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx, i32 0, i32 %5
  %6 = load i8, i8* %arrayidx4, align 1
  store i8 %6, i8* %temp, align 1
  %7 = load i32, i32* %i, align 4
  %sub = sub nsw i32 17, %7
  %arrayidx5 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %sub
  %8 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx5, i32 0, i32 %8
  %9 = load i8, i8* %arrayidx6, align 1
  %10 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %10
  %11 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx7, i32 0, i32 %11
  store i8 %9, i8* %arrayidx8, align 1
  %12 = load i8, i8* %temp, align 1
  %13 = load i32, i32* %i, align 4
  %sub9 = sub nsw i32 17, %13
  %arrayidx10 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %sub9
  %14 = load i32, i32* %j, align 4
  %arrayidx11 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx10, i32 0, i32 %14
  store i8 %12, i8* %arrayidx11, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %15 = load i32, i32* %j, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc12

for.inc12:                                        ; preds = %for.end
  %16 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %16, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond

for.end14:                                        ; preds = %for.cond
  %17 = load i32, i32* %len.addr, align 4
  %call = call noalias i8* @malloc(i32 %17)
  %data = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  store i8* %call, i8** %data, align 4
  %data15 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %18 = load i8*, i8** %data15, align 4
  %19 = load i8*, i8** %message.addr, align 4
  %20 = load i32, i32* %len.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %18, i8* align 1 %19, i32 %20, i1 false)
  %21 = load i32, i32* %len.addr, align 4
  %len16 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  store i32 %21, i32* %len16, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond17

for.cond17:                                       ; preds = %for.inc26, %for.end14
  %22 = load i32, i32* %i, align 4
  %len18 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %23 = load i32, i32* %len18, align 4
  %cmp19 = icmp slt i32 %22, %23
  br i1 %cmp19, label %for.body20, label %for.end27

for.body20:                                       ; preds = %for.cond17
  %data21 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %24 = load i8*, i8** %data21, align 4
  %25 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds i8, i8* %24, i32 %25
  %arraydecay23 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  %data24 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %26 = load i8*, i8** %data24, align 4
  %27 = load i32, i32* %i, align 4
  %arrayidx25 = getelementptr inbounds i8, i8* %26, i32 %27
  call void @processMessage(i8* %arrayidx22, [6 x i8]* %arraydecay23, i8* %arrayidx25)
  br label %for.inc26

for.inc26:                                        ; preds = %for.body20
  %28 = load i32, i32* %i, align 4
  %add = add nsw i32 %28, 8
  store i32 %add, i32* %i, align 4
  br label %for.cond17

for.end27:                                        ; preds = %for.cond17
  %data28 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %29 = load i8*, i8** %data28, align 4
  %30 = load i32, i32* %len.addr, align 4
  %sub29 = sub nsw i32 %30, 1
  %arrayidx30 = getelementptr inbounds i8, i8* %29, i32 %sub29
  %31 = load i8, i8* %arrayidx30, align 1
  store i8 %31, i8* %padByte, align 1
  %32 = load i8, i8* %padByte, align 1
  %conv = zext i8 %32 to i32
  %len31 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %33 = load i32, i32* %len31, align 4
  %sub32 = sub nsw i32 %33, %conv
  store i32 %sub32, i32* %len31, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @driver(i8* %key, i8* %message, i32 %len) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %message.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %encoded = alloca %struct.String, align 4
  %decoded = alloca %struct.String, align 4
  %buffer = alloca [128 x i8], align 16
  %tmp = alloca %struct.String, align 4
  %tmp9 = alloca %struct.String, align 4
  store i8* %key, i8** %key.addr, align 4
  store i8* %message, i8** %message.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load i8*, i8** %key.addr, align 4
  %arraydecay = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %0, i32 8, i8* %arraydecay)
  %arraydecay1 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i32 0, i32 0), i8* %arraydecay1)
  %1 = load i8*, i8** %message.addr, align 4
  %2 = load i32, i32* %len.addr, align 4
  %arraydecay2 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %1, i32 %2, i8* %arraydecay2)
  %arraydecay3 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0), i8* %arraydecay3)
  %3 = load i8*, i8** %key.addr, align 4
  %4 = load i8*, i8** %message.addr, align 4
  %5 = load i32, i32* %len.addr, align 4
  call void @encrypt(%struct.String* sret align 4 %tmp, i8* %3, i8* %4, i32 %5)
  %6 = bitcast %struct.String* %encoded to i8*
  %7 = bitcast %struct.String* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %6, i8* align 4 %7, i32 8, i1 false)
  %data = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  %8 = load i8*, i8** %data, align 4
  %len5 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 1
  %9 = load i32, i32* %len5, align 4
  %arraydecay6 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %8, i32 %9, i8* %arraydecay6)
  %arraydecay7 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0), i8* %arraydecay7)
  %10 = load i8*, i8** %key.addr, align 4
  %data10 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  %11 = load i8*, i8** %data10, align 4
  %len11 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 1
  %12 = load i32, i32* %len11, align 4
  call void @decrypt(%struct.String* sret align 4 %tmp9, i8* %10, i8* %11, i32 %12)
  %13 = bitcast %struct.String* %decoded to i8*
  %14 = bitcast %struct.String* %tmp9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %13, i8* align 4 %14, i32 8, i1 false)
  %data12 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 0
  %15 = load i8*, i8** %data12, align 4
  %len13 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 1
  %16 = load i32, i32* %len13, align 4
  %arraydecay14 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %15, i32 %16, i8* %arraydecay14)
  %arraydecay15 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0), i8* %arraydecay15)
  %len17 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 1
  %17 = load i32, i32* %len17, align 4
  %cmp = icmp sgt i32 %17, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %data18 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  %18 = load i8*, i8** %data18, align 4
  call void @free(i8* %18)
  %data19 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  store i8* null, i8** %data19, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %len20 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 1
  %19 = load i32, i32* %len20, align 4
  %cmp21 = icmp sgt i32 %19, 0
  br i1 %cmp21, label %if.then22, label %if.end25

if.then22:                                        ; preds = %if.end
  %data23 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 0
  %20 = load i8*, i8** %data23, align 4
  call void @free(i8* %20)
  %data24 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 0
  store i8* null, i8** %data24, align 4
  br label %if.end25

if.end25:                                         ; preds = %if.then22, %if.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @printBytes(i8* %ptr, i32 %len, i8* %out) #0 {
entry:
  %ptr.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  store i8* %ptr, i8** %ptr.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %len.addr, align 4
  %dec = add nsw i32 %0, -1
  store i32 %dec, i32* %len.addr, align 4
  %cmp = icmp sgt i32 %0, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i8*, i8** %ptr.addr, align 4
  %2 = load i8, i8* %1, align 1
  %conv = zext i8 %2 to i32
  %shr = ashr i32 %conv, 4
  %conv1 = trunc i32 %shr to i8
  %call = call signext i8 @toHex(i8 zeroext %conv1)
  %3 = load i8*, i8** %out.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %3, i32 1
  store i8* %incdec.ptr, i8** %out.addr, align 4
  store i8 %call, i8* %3, align 1
  %4 = load i8*, i8** %ptr.addr, align 4
  %5 = load i8, i8* %4, align 1
  %conv2 = zext i8 %5 to i32
  %and = and i32 %conv2, 15
  %conv3 = trunc i32 %and to i8
  %call4 = call signext i8 @toHex(i8 zeroext %conv3)
  %6 = load i8*, i8** %out.addr, align 4
  %incdec.ptr5 = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr5, i8** %out.addr, align 4
  store i8 %call4, i8* %6, align 1
  %7 = load i8*, i8** %ptr.addr, align 4
  %incdec.ptr6 = getelementptr inbounds i8, i8* %7, i32 1
  store i8* %incdec.ptr6, i8** %ptr.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %8 = load i8*, i8** %out.addr, align 4
  store i8 0, i8* %8, align 1
  ret void
}

declare i32 @printf(i8* %0, ...) #2

declare void @free(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %keys = alloca [3 x [8 x i8]], align 16
  %message1 = alloca [8 x i8], align 1
  %message2 = alloca [8 x i8], align 1
  %message3 = alloca [38 x i8], align 16
  %len = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [3 x [8 x i8]]* %keys to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([3 x [8 x i8]], [3 x [8 x i8]]* @__const.main.keys, i32 0, i32 0, i32 0), i32 24, i1 false)
  %1 = bitcast [8 x i8]* %message1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %1, i8* align 1 getelementptr inbounds ([8 x i8], [8 x i8]* @__const.main.message1, i32 0, i32 0), i32 8, i1 false)
  %2 = bitcast [8 x i8]* %message2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %2, i8* align 1 getelementptr inbounds ([8 x i8], [8 x i8]* @__const.main.message2, i32 0, i32 0), i32 8, i1 false)
  %3 = bitcast [38 x i8]* %message3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %3, i8* align 16 getelementptr inbounds ([38 x i8], [38 x i8]* @__const.main.message3, i32 0, i32 0), i32 38, i1 false)
  store i32 8, i32* %len, align 4
  %arrayidx = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* %keys, i32 0, i32 0
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %arrayidx, i32 0, i32 0
  %arraydecay1 = getelementptr inbounds [8 x i8], [8 x i8]* %message1, i32 0, i32 0
  %4 = load i32, i32* %len, align 4
  call void @driver(i8* %arraydecay, i8* %arraydecay1, i32 %4)
  store i32 8, i32* %len, align 4
  %arrayidx2 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* %keys, i32 0, i32 1
  %arraydecay3 = getelementptr inbounds [8 x i8], [8 x i8]* %arrayidx2, i32 0, i32 0
  %arraydecay4 = getelementptr inbounds [8 x i8], [8 x i8]* %message2, i32 0, i32 0
  %5 = load i32, i32* %len, align 4
  call void @driver(i8* %arraydecay3, i8* %arraydecay4, i32 %5)
  store i32 38, i32* %len, align 4
  %arrayidx5 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* %keys, i32 0, i32 2
  %arraydecay6 = getelementptr inbounds [8 x i8], [8 x i8]* %arrayidx5, i32 0, i32 0
  %arraydecay7 = getelementptr inbounds [38 x i8], [38 x i8]* %message3, i32 0, i32 0
  %6 = load i32, i32* %len, align 4
  call void @driver(i8* %arraydecay6, i8* %arraydecay7, i32 %6)
  ret i32 0
}

; Function Attrs: noinline nounwind optnone
define internal void @pokeBit(i8* %dst, i32 %index, i32 %value) #0 {
entry:
  %dst.addr = alloca i8*, align 4
  %index.addr = alloca i32, align 4
  %value.addr = alloca i32, align 4
  %cell = alloca i32, align 4
  %bit = alloca i32, align 4
  store i8* %dst, i8** %dst.addr, align 4
  store i32 %index, i32* %index.addr, align 4
  store i32 %value, i32* %value.addr, align 4
  %0 = load i32, i32* %index.addr, align 4
  %div = sdiv i32 %0, 8
  store i32 %div, i32* %cell, align 4
  %1 = load i32, i32* %index.addr, align 4
  %rem = srem i32 %1, 8
  %sub = sub nsw i32 7, %rem
  store i32 %sub, i32* %bit, align 4
  %2 = load i32, i32* %value.addr, align 4
  %cmp = icmp eq i32 %2, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %bit, align 4
  %shl = shl i32 1, %3
  %neg = xor i32 %shl, -1
  %4 = load i8*, i8** %dst.addr, align 4
  %5 = load i32, i32* %cell, align 4
  %arrayidx = getelementptr inbounds i8, i8* %4, i32 %5
  %6 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %6 to i32
  %and = and i32 %conv, %neg
  %conv1 = trunc i32 %and to i8
  store i8 %conv1, i8* %arrayidx, align 1
  br label %if.end

if.else:                                          ; preds = %entry
  %7 = load i32, i32* %bit, align 4
  %shl2 = shl i32 1, %7
  %8 = load i8*, i8** %dst.addr, align 4
  %9 = load i32, i32* %cell, align 4
  %arrayidx3 = getelementptr inbounds i8, i8* %8, i32 %9
  %10 = load i8, i8* %arrayidx3, align 1
  %conv4 = zext i8 %10 to i32
  %or = or i32 %conv4, %shl2
  %conv5 = trunc i32 %or to i8
  store i8 %conv5, i8* %arrayidx3, align 1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i32 @peekBit(i8* %src, i32 %index) #0 {
entry:
  %src.addr = alloca i8*, align 4
  %index.addr = alloca i32, align 4
  %cell = alloca i32, align 4
  %bit = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 4
  store i32 %index, i32* %index.addr, align 4
  %0 = load i32, i32* %index.addr, align 4
  %div = sdiv i32 %0, 8
  store i32 %div, i32* %cell, align 4
  %1 = load i32, i32* %index.addr, align 4
  %rem = srem i32 %1, 8
  %sub = sub nsw i32 7, %rem
  store i32 %sub, i32* %bit, align 4
  %2 = load i8*, i8** %src.addr, align 4
  %3 = load i32, i32* %cell, align 4
  %arrayidx = getelementptr inbounds i8, i8* %2, i32 %3
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %5 = load i32, i32* %bit, align 4
  %shl = shl i32 1, %5
  %and = and i32 %conv, %shl
  %cmp = icmp ne i32 %and, 0
  %conv1 = zext i1 %cmp to i32
  ret i32 %conv1
}

; Function Attrs: noinline nounwind optnone
define internal void @shiftLeft(i8* %src, i32 %len, i32 %times, i8* %dst) #0 {
entry:
  %src.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %times.addr = alloca i32, align 4
  %dst.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %t = alloca i32, align 4
  %temp = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %times, i32* %times.addr, align 4
  store i8* %dst, i8** %dst.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp sle i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8*, i8** %dst.addr, align 4
  %3 = load i32, i32* %i, align 4
  %4 = load i8*, i8** %src.addr, align 4
  %5 = load i32, i32* %i, align 4
  %call = call i32 @peekBit(i8* %4, i32 %5)
  call void @pokeBit(i8* %2, i32 %3, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %t, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc13, %for.end
  %7 = load i32, i32* %t, align 4
  %8 = load i32, i32* %times.addr, align 4
  %cmp2 = icmp sle i32 %7, %8
  br i1 %cmp2, label %for.body3, label %for.end15

for.body3:                                        ; preds = %for.cond1
  %9 = load i8*, i8** %dst.addr, align 4
  %call4 = call i32 @peekBit(i8* %9, i32 0)
  store i32 %call4, i32* %temp, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc9, %for.body3
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %len.addr, align 4
  %cmp6 = icmp sle i32 %10, %11
  br i1 %cmp6, label %for.body7, label %for.end11

for.body7:                                        ; preds = %for.cond5
  %12 = load i8*, i8** %dst.addr, align 4
  %13 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %13, 1
  %14 = load i8*, i8** %dst.addr, align 4
  %15 = load i32, i32* %i, align 4
  %call8 = call i32 @peekBit(i8* %14, i32 %15)
  call void @pokeBit(i8* %12, i32 %sub, i32 %call8)
  br label %for.inc9

for.inc9:                                         ; preds = %for.body7
  %16 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %16, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond5

for.end11:                                        ; preds = %for.cond5
  %17 = load i8*, i8** %dst.addr, align 4
  %18 = load i32, i32* %len.addr, align 4
  %sub12 = sub nsw i32 %18, 1
  %19 = load i32, i32* %temp, align 4
  call void @pokeBit(i8* %17, i32 %sub12, i32 %19)
  br label %for.inc13

for.inc13:                                        ; preds = %for.end11
  %20 = load i32, i32* %t, align 4
  %inc14 = add nsw i32 %20, 1
  store i32 %inc14, i32* %t, align 4
  br label %for.cond1

for.end15:                                        ; preds = %for.cond1
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @f(i8* %r, i8* %ks, i8* %sp) #0 {
entry:
  %r.addr = alloca i8*, align 4
  %ks.addr = alloca i8*, align 4
  %sp.addr = alloca i8*, align 4
  %er = alloca [6 x i8], align 1
  %sr = alloca [4 x i8], align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %b = alloca [6 x i32], align 16
  %k = alloca i32, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %m = alloca i32, align 4
  %n = alloca i32, align 4
  %p = alloca i32, align 4
  store i8* %r, i8** %r.addr, align 4
  store i8* %ks, i8** %ks.addr, align 4
  store i8* %sp, i8** %sp.addr, align 4
  %arraydecay = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  call void @llvm.memset.p0i8.i32(i8* align 1 %arraydecay, i8 0, i32 6, i1 false)
  %arraydecay1 = getelementptr inbounds [4 x i8], [4 x i8]* %sr, i32 0, i32 0
  call void @llvm.memset.p0i8.i32(i8* align 1 %arraydecay1, i8 0, i32 4, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 48
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay2 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  %1 = load i32, i32* %i, align 4
  %2 = load i8*, i8** %r.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [48 x i8], [48 x i8]* @E, i32 0, i32 %3
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %sub = sub nsw i32 %conv, 1
  %call = call i32 @peekBit(i8* %2, i32 %sub)
  call void @pokeBit(i8* %arraydecay2, i32 %1, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc12, %for.end
  %6 = load i32, i32* %i, align 4
  %cmp4 = icmp slt i32 %6, 6
  br i1 %cmp4, label %for.body6, label %for.end14

for.body6:                                        ; preds = %for.cond3
  %7 = load i8*, i8** %ks.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds i8, i8* %7, i32 %8
  %9 = load i8, i8* %arrayidx7, align 1
  %conv8 = zext i8 %9 to i32
  %10 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 %10
  %11 = load i8, i8* %arrayidx9, align 1
  %conv10 = zext i8 %11 to i32
  %xor = xor i32 %conv10, %conv8
  %conv11 = trunc i32 %xor to i8
  store i8 %conv11, i8* %arrayidx9, align 1
  br label %for.inc12

for.inc12:                                        ; preds = %for.body6
  %12 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %12, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond3

for.end14:                                        ; preds = %for.cond3
  store i32 0, i32* %i, align 4
  br label %for.cond15

for.cond15:                                       ; preds = %for.inc59, %for.end14
  %13 = load i32, i32* %i, align 4
  %cmp16 = icmp slt i32 %13, 8
  br i1 %cmp16, label %for.body18, label %for.end61

for.body18:                                       ; preds = %for.cond15
  %14 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %14, 6
  store i32 %mul, i32* %j, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond19

for.cond19:                                       ; preds = %for.inc28, %for.body18
  %15 = load i32, i32* %k, align 4
  %cmp20 = icmp slt i32 %15, 6
  br i1 %cmp20, label %for.body22, label %for.end30

for.body22:                                       ; preds = %for.cond19
  %arraydecay23 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  %16 = load i32, i32* %j, align 4
  %17 = load i32, i32* %k, align 4
  %add = add nsw i32 %16, %17
  %call24 = call i32 @peekBit(i8* %arraydecay23, i32 %add)
  %cmp25 = icmp ne i32 %call24, 0
  %18 = zext i1 %cmp25 to i64
  %cond = select i1 %cmp25, i32 1, i32 0
  %19 = load i32, i32* %k, align 4
  %arrayidx27 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 %19
  store i32 %cond, i32* %arrayidx27, align 4
  br label %for.inc28

for.inc28:                                        ; preds = %for.body22
  %20 = load i32, i32* %k, align 4
  %inc29 = add nsw i32 %20, 1
  store i32 %inc29, i32* %k, align 4
  br label %for.cond19

for.end30:                                        ; preds = %for.cond19
  %arrayidx31 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 0
  %21 = load i32, i32* %arrayidx31, align 16
  %mul32 = mul nsw i32 2, %21
  %arrayidx33 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 5
  %22 = load i32, i32* %arrayidx33, align 4
  %add34 = add nsw i32 %mul32, %22
  store i32 %add34, i32* %row, align 4
  %arrayidx35 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 1
  %23 = load i32, i32* %arrayidx35, align 4
  %mul36 = mul nsw i32 8, %23
  %arrayidx37 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 2
  %24 = load i32, i32* %arrayidx37, align 8
  %mul38 = mul nsw i32 4, %24
  %add39 = add nsw i32 %mul36, %mul38
  %arrayidx40 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 3
  %25 = load i32, i32* %arrayidx40, align 4
  %mul41 = mul nsw i32 2, %25
  %add42 = add nsw i32 %add39, %mul41
  %arrayidx43 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 4
  %26 = load i32, i32* %arrayidx43, align 16
  %add44 = add nsw i32 %add42, %26
  store i32 %add44, i32* %col, align 4
  %27 = load i32, i32* %i, align 4
  %arrayidx45 = getelementptr inbounds [8 x [64 x i8]], [8 x [64 x i8]]* @S, i32 0, i32 %27
  %28 = load i32, i32* %row, align 4
  %mul46 = mul nsw i32 %28, 16
  %29 = load i32, i32* %col, align 4
  %add47 = add nsw i32 %mul46, %29
  %arrayidx48 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx45, i32 0, i32 %add47
  %30 = load i8, i8* %arrayidx48, align 1
  %conv49 = zext i8 %30 to i32
  store i32 %conv49, i32* %m, align 4
  store i32 1, i32* %n, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end30
  %31 = load i32, i32* %m, align 4
  %cmp50 = icmp sgt i32 %31, 0
  br i1 %cmp50, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %32 = load i32, i32* %m, align 4
  %rem = srem i32 %32, 2
  store i32 %rem, i32* %p, align 4
  %arraydecay52 = getelementptr inbounds [4 x i8], [4 x i8]* %sr, i32 0, i32 0
  %33 = load i32, i32* %i, align 4
  %add53 = add nsw i32 %33, 1
  %mul54 = mul nsw i32 %add53, 4
  %34 = load i32, i32* %n, align 4
  %sub55 = sub nsw i32 %mul54, %34
  %35 = load i32, i32* %p, align 4
  %cmp56 = icmp eq i32 %35, 1
  %conv57 = zext i1 %cmp56 to i32
  call void @pokeBit(i8* %arraydecay52, i32 %sub55, i32 %conv57)
  %36 = load i32, i32* %m, align 4
  %div = sdiv i32 %36, 2
  store i32 %div, i32* %m, align 4
  %37 = load i32, i32* %n, align 4
  %inc58 = add nsw i32 %37, 1
  store i32 %inc58, i32* %n, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %for.inc59

for.inc59:                                        ; preds = %while.end
  %38 = load i32, i32* %i, align 4
  %inc60 = add nsw i32 %38, 1
  store i32 %inc60, i32* %i, align 4
  br label %for.cond15

for.end61:                                        ; preds = %for.cond15
  store i32 0, i32* %i, align 4
  br label %for.cond62

for.cond62:                                       ; preds = %for.inc71, %for.end61
  %39 = load i32, i32* %i, align 4
  %cmp63 = icmp slt i32 %39, 32
  br i1 %cmp63, label %for.body65, label %for.end73

for.body65:                                       ; preds = %for.cond62
  %40 = load i8*, i8** %sp.addr, align 4
  %41 = load i32, i32* %i, align 4
  %arraydecay66 = getelementptr inbounds [4 x i8], [4 x i8]* %sr, i32 0, i32 0
  %42 = load i32, i32* %i, align 4
  %arrayidx67 = getelementptr inbounds [32 x i8], [32 x i8]* @P, i32 0, i32 %42
  %43 = load i8, i8* %arrayidx67, align 1
  %conv68 = zext i8 %43 to i32
  %sub69 = sub nsw i32 %conv68, 1
  %call70 = call i32 @peekBit(i8* %arraydecay66, i32 %sub69)
  call void @pokeBit(i8* %40, i32 %41, i32 %call70)
  br label %for.inc71

for.inc71:                                        ; preds = %for.body65
  %44 = load i32, i32* %i, align 4
  %inc72 = add nsw i32 %44, 1
  store i32 %inc72, i32* %i, align 4
  br label %for.cond62

for.end73:                                        ; preds = %for.cond62
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal signext i8 @toHex(i8 zeroext %in) #0 {
entry:
  %retval = alloca i8, align 1
  %in.addr = alloca i8, align 1
  store i8 %in, i8* %in.addr, align 1
  %0 = load i8, i8* %in.addr, align 1
  %conv = zext i8 %0 to i32
  %cmp = icmp sle i32 0, %conv
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i8, i8* %in.addr, align 1
  %conv2 = zext i8 %1 to i32
  %cmp3 = icmp slt i32 %conv2, 10
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %2 = load i8, i8* %in.addr, align 1
  %conv5 = zext i8 %2 to i32
  %add = add nsw i32 48, %conv5
  %conv6 = trunc i32 %add to i8
  store i8 %conv6, i8* %retval, align 1
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %3 = load i8, i8* %in.addr, align 1
  %conv7 = zext i8 %3 to i32
  %cmp8 = icmp sle i32 10, %conv7
  br i1 %cmp8, label %land.lhs.true10, label %if.end18

land.lhs.true10:                                  ; preds = %if.end
  %4 = load i8, i8* %in.addr, align 1
  %conv11 = zext i8 %4 to i32
  %cmp12 = icmp sle i32 %conv11, 15
  br i1 %cmp12, label %if.then14, label %if.end18

if.then14:                                        ; preds = %land.lhs.true10
  %5 = load i8, i8* %in.addr, align 1
  %conv15 = zext i8 %5 to i32
  %add16 = add nsw i32 65, %conv15
  %sub = sub nsw i32 %add16, 10
  %conv17 = trunc i32 %sub to i8
  store i8 %conv17, i8* %retval, align 1
  br label %return

if.end18:                                         ; preds = %land.lhs.true10, %if.end
  store i8 0, i8* %retval, align 1
  br label %return

return:                                           ; preds = %if.end18, %if.then14, %if.then
  %6 = load i8, i8* %retval, align 1
  ret i8 %6
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, 48
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 48:i32
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i8, i8* %arrayidx, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = zext i8 %4 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %conv, 1
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
%2:i32 = subnsw %1, 1:i32
infer %2

; *****
; For LLVM instruction:
;  %call = call i32 @peekBit(i8* %2, i32 %sub)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %5, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp4 = icmp slt i32 %6, 6
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 6:i32
infer %1

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i8, i8* %arrayidx7, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv8 = zext i8 %9 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i8, i8* %arrayidx9, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv10 = zext i8 %11 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %xor = xor i32 %conv10, %conv8
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
%2:i8 = var
%3:i32 = zext %2
%4:i32 = xor %1, %3
infer %4 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %conv11 = trunc i32 %xor to i8
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
%2:i8 = var
%3:i32 = zext %2
%4:i32 = xor %1, %3
%5:i8 = trunc %4
infer %5

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc13 = add nsw i32 %12, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp16 = icmp slt i32 %13, 8
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 8:i32
infer %1

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %14, 6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 6:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp20 = icmp slt i32 %15, 6
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 6:i32
infer %1

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %16, %17
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %call24 = call i32 @peekBit(i8* %arraydecay23, i32 %add)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp25 = icmp ne i32 %call24, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cond = select i1 %cmp25, i32 1, i32 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0 (hasExternalUses)
%2:i32 = select %1, 1:i32, 0:i32
infer %2

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc29 = add nsw i32 %20, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %arrayidx31, align 16
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul32 = mul nsw i32 2, %21
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %arrayidx33, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add34 = add nsw i32 %mul32, %22
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw 2:i32, %1
%3:i32 = addnsw %0, %2
infer %3

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %arrayidx35, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul36 = mul nsw i32 8, %23
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 8:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %arrayidx37, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul38 = mul nsw i32 4, %24
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %add39 = add nsw i32 %mul36, %mul38
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 4:i32, %0
%2:i32 = var
%3:i32 = mulnsw 8:i32, %2
%4:i32 = addnsw %1, %3
infer %4

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %arrayidx40, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul41 = mul nsw i32 2, %25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %add42 = add nsw i32 %add39, %mul41
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 4:i32, %0
%2:i32 = var
%3:i32 = mulnsw 8:i32, %2
%4:i32 = addnsw %1, %3
%5:i32 = var
%6:i32 = mulnsw 2:i32, %5
%7:i32 = addnsw %4, %6
infer %7

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %arrayidx43, align 16
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add44 = add nsw i32 %add42, %26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw 4:i32, %1
%3:i32 = var
%4:i32 = mulnsw 8:i32, %3
%5:i32 = addnsw %2, %4
%6:i32 = var
%7:i32 = mulnsw 2:i32, %6
%8:i32 = addnsw %5, %7
%9:i32 = addnsw %0, %8
infer %9

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %row, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul46 = mul nsw i32 %28, 16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 16:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %col, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add47 = add nsw i32 %mul46, %29
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw 16:i32, %1
%3:i32 = addnsw %0, %2
infer %3

; *****
; For LLVM instruction:
;  %30 = load i8, i8* %arrayidx48, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv49 = zext i8 %30 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %m, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp50 = icmp sgt i32 %31, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %m, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem = srem i32 %32, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add53 = add nsw i32 %33, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %mul54 = mul nsw i32 %add53, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = mulnsw 4:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub55 = sub nsw i32 %mul54, %34
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = mulnsw 4:i32, %1
%3:i32 = var
%4:i32 = subnsw %2, %3
infer %4

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %p, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp56 = icmp eq i32 %35, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv57 = zext i1 %cmp56 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 1:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %m, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div = sdiv i32 %36, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sdiv %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc58 = add nsw i32 %37, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %38 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc60 = add nsw i32 %38, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp63 = icmp slt i32 %39, 32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 32:i32
infer %1

; *****
; For LLVM instruction:
;  %41 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %42 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %43 = load i8, i8* %arrayidx67, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv68 = zext i8 %43 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %sub69 = sub nsw i32 %conv68, 1
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
%2:i32 = subnsw %1, 1:i32
infer %2

; *****
; For LLVM instruction:
;  %call70 = call i32 @peekBit(i8* %arraydecay66, i32 %sub69)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %44 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc72 = add nsw i32 %44, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 8:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mulnsw 6:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870916
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0 (hasExternalUses)
%2:i32 = select %1, 1:i32, 0:i32
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mulnsw 2:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw 2:i32, %1
%3:i32 = addnsw %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -4
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = mulnsw 2:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mulnsw 8:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mulnsw 4:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mulnsw 4:i32, %0
%2:i32 = var
%3:i32 = mulnsw 8:i32, %2
%4:i32 = addnsw %1, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = mulnsw 4:i32, %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = mulnsw 8:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mulnsw 4:i32, %0
%2:i32 = var
%3:i32 = mulnsw 8:i32, %2
%4:i32 = addnsw %1, %3
%5:i32 = var
%6:i32 = mulnsw 2:i32, %5
%7:i32 = addnsw %4, %6
infer %7


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = mulnsw 2:i32, %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i32 = var
%1:i32 = mulnsw 4:i32, %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i32 = var
%1:i32 = mulnsw 8:i32, %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0:i32 = var
%1:i32 = mulnsw 4:i32, %0
%2:i32 = var
%3:i32 = mulnsw 8:i32, %2
%4:i32 = addnsw %1, %3

Cost = 3
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw 4:i32, %1
%3:i32 = var
%4:i32 = mulnsw 8:i32, %3
%5:i32 = addnsw %2, %4
%6:i32 = var
%7:i32 = mulnsw 2:i32, %6
%8:i32 = addnsw %5, %7
%9:i32 = addnsw %0, %8
infer %9


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = mulnsw 2:i32, %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = mulnsw 4:i32, %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i32 = var
%1:i32 = mulnsw 8:i32, %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i32 = var
%1:i32 = mulnsw 4:i32, %0
%2:i32 = var
%3:i32 = mulnsw 8:i32, %2
%4:i32 = addnsw %1, %3

Cost = 3
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0:i32 = var
%1:i32 = mulnsw 4:i32, %0
%2:i32 = var
%3:i32 = mulnsw 8:i32, %2
%4:i32 = addnsw %1, %3
%5:i32 = var
%6:i32 = mulnsw 2:i32, %5
%7:i32 = addnsw %4, %6

Cost = 5
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mulnsw 16:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw 16:i32, %1
%3:i32 = addnsw %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -32
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = mulnsw 16:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem %0, 2:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = mulnsw 4:i32, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 4
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741828
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = addnsw 1:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = mulnsw 4:i32, %1
%3:i32 = var
%4:i32 = subnsw %2, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 4
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1073741820
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = addnsw 1:i32, %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = mulnsw 4:i32, %1

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 1:i32, %0
%2:i32 = zext %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sdiv %0, 2:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 631636206
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for ./Data_Encryption_Standard.c.bc:f()

; entering Souper's runOnFunction() for ./Data_Encryption_Standard.c.bc:toHex()

; ModuleID = './Data_Encryption_Standard.c.bc'
source_filename = "./Data_Encryption_Standard.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.String = type { i8*, i32 }

@.str = private unnamed_addr constant [14 x i8] c"Key     : %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"Message : %s\0A\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"Encoded : %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"Decoded : %s\0A\0A\00", align 1
@__const.main.keys = private unnamed_addr constant [3 x [8 x i8]] [[8 x i8] c"\134Wy\9B\BC\DF\F1", [8 x i8] c"\0E2\922\EAm\0Ds", [8 x i8] c"\0E2\922\EAm\0Ds"], align 16
@__const.main.message1 = private unnamed_addr constant [8 x i8] c"\01#Eg\89\AB\CD\EF", align 1
@__const.main.message2 = private unnamed_addr constant [8 x i8] c"\87\87\87\87\87\87\87\87", align 1
@__const.main.message3 = private unnamed_addr constant [38 x i8] c"Your lips are smoother than vaseline\0D\0A", align 16
@PC1 = internal constant [56 x i8] c"91)!\19\11\09\01:2*\22\1A\12\0A\02;3+#\1B\13\0B\03<4,$?7/'\1F\17\0F\07>6.&\1E\16\0E\06=5-%\1D\15\0D\05\1C\14\0C\04", align 16
@SHIFTS = internal constant [16 x i8] c"\01\01\02\02\02\02\02\02\01\02\02\02\02\02\02\01", align 16
@PC2 = internal constant [48 x i8] c"\0E\11\0B\18\01\05\03\1C\0F\06\15\0A\17\13\0C\04\1A\08\10\07\1B\14\0D\02)4\1F%/7\1E(3-!0,1'8\225.*2$\1D ", align 16
@IP = internal constant [64 x i8] c":2*\22\1A\12\0A\02<4,$\1C\14\0C\04>6.&\1E\16\0E\06@80( \18\10\0891)!\19\11\09\01;3+#\1B\13\0B\03=5-%\1D\15\0D\05?7/'\1F\17\0F\07", align 16
@IP2 = internal constant [64 x i8] c"(\080\108\18@ '\07/\0F7\17?\1F&\06.\0E6\16>\1E%\05-\0D5\15=\1D$\04,\0C4\14<\1C#\03+\0B3\13;\1B\22\02*\0A2\12:\1A!\01)\091\119\19", align 16
@E = internal constant [48 x i8] c" \01\02\03\04\05\04\05\06\07\08\09\08\09\0A\0B\0C\0D\0C\0D\0E\0F\10\11\10\11\12\13\14\15\14\15\16\17\18\19\18\19\1A\1B\1C\1D\1C\1D\1E\1F \01", align 16
@S = internal constant [8 x [64 x i8]] [[64 x i8] c"\0E\04\0D\01\02\0F\0B\08\03\0A\06\0C\05\09\00\07\00\0F\07\04\0E\02\0D\01\0A\06\0C\0B\09\05\03\08\04\01\0E\08\0D\06\02\0B\0F\0C\09\07\03\0A\05\00\0F\0C\08\02\04\09\01\07\05\0B\03\0E\0A\00\06\0D", [64 x i8] c"\0F\01\08\0E\06\0B\03\04\09\07\02\0D\0C\00\05\0A\03\0D\04\07\0F\02\08\0E\0C\00\01\0A\06\09\0B\05\00\0E\07\0B\0A\04\0D\01\05\08\0C\06\09\03\02\0F\0D\08\0A\01\03\0F\04\02\0B\06\07\0C\00\05\0E\09", [64 x i8] c"\0A\00\09\0E\06\03\0F\05\01\0D\0C\07\0B\04\02\08\0D\07\00\09\03\04\06\0A\02\08\05\0E\0C\0B\0F\01\0D\06\04\09\08\0F\03\00\0B\01\02\0C\05\0A\0E\07\01\0A\0D\00\06\09\08\07\04\0F\0E\03\0B\05\02\0C", [64 x i8] c"\07\0D\0E\03\00\06\09\0A\01\02\08\05\0B\0C\04\0F\0D\08\0B\05\06\0F\00\03\04\07\02\0C\01\0A\0E\09\0A\06\09\00\0C\0B\07\0D\0F\01\03\0E\05\02\08\04\03\0F\00\06\0A\01\0D\08\09\04\05\0B\0C\07\02\0E", [64 x i8] c"\02\0C\04\01\07\0A\0B\06\08\05\03\0F\0D\00\0E\09\0E\0B\02\0C\04\07\0D\01\05\00\0F\0A\03\09\08\06\04\02\01\0B\0A\0D\07\08\0F\09\0C\05\06\03\00\0E\0B\08\0C\07\01\0E\02\0D\06\0F\00\09\0A\04\05\03", [64 x i8] c"\0C\01\0A\0F\09\02\06\08\00\0D\03\04\0E\07\05\0B\0A\0F\04\02\07\0C\09\05\06\01\0D\0E\00\0B\03\08\09\0E\0F\05\02\08\0C\03\07\00\04\0A\01\0D\0B\06\04\03\02\0C\09\05\0F\0A\0B\0E\01\07\06\00\08\0D", [64 x i8] c"\04\0B\02\0E\0F\00\08\0D\03\0C\09\07\05\0A\06\01\0D\00\0B\07\04\09\01\0A\0E\03\05\0C\02\0F\08\06\01\04\0B\0D\0C\03\07\0E\0A\0F\06\08\00\05\09\02\06\0B\0D\08\01\04\0A\07\09\05\00\0F\0E\02\03\0C", [64 x i8] c"\0D\02\08\04\06\0F\0B\01\0A\09\03\0E\05\00\0C\07\01\0F\0D\08\0A\03\07\04\0C\05\06\0B\00\0E\09\02\07\0B\04\01\09\0C\0E\02\00\06\0A\0D\0F\03\05\08\02\01\0E\07\04\0A\08\0D\0F\0C\09\00\03\05\06\0B"], align 16
@P = internal constant [32 x i8] c"\10\07\14\15\1D\0C\1C\11\01\0F\17\1A\05\12\1F\0A\02\08\18\0E \1B\03\09\13\0D\1E\06\16\0B\04\19", align 16
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @encrypt(%struct.String* noalias sret align 4 %agg.result, i8* %key, i8* %message, i32 %len) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %message.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %ks = alloca [17 x [6 x i8]], align 16
  %padByte = alloca i8, align 1
  %i = alloca i32, align 4
  store i8* %key, i8** %key.addr, align 4
  store i8* %message, i8** %message.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = bitcast %struct.String* %agg.result to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  %1 = load i8*, i8** %key.addr, align 4
  %arraydecay = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  call void @getSubKeys(i8* %1, [6 x i8]* %arraydecay)
  %2 = load i32, i32* %len.addr, align 4
  %rem = srem i32 %2, 8
  %sub = sub nsw i32 8, %rem
  %conv = trunc i32 %sub to i8
  store i8 %conv, i8* %padByte, align 1
  %3 = load i32, i32* %len.addr, align 4
  %4 = load i8, i8* %padByte, align 1
  %conv1 = zext i8 %4 to i32
  %add = add nsw i32 %3, %conv1
  %len2 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  store i32 %add, i32* %len2, align 4
  %len3 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %5 = load i32, i32* %len3, align 4
  %call = call noalias i8* @malloc(i32 %5)
  %data = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  store i8* %call, i8** %data, align 4
  %data4 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %6 = load i8*, i8** %data4, align 4
  %7 = load i8*, i8** %message.addr, align 4
  %8 = load i32, i32* %len.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %6, i8* align 1 %7, i32 %8, i1 false)
  %data5 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %9 = load i8*, i8** %data5, align 4
  %10 = load i32, i32* %len.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %9, i32 %10
  %11 = load i8, i8* %padByte, align 1
  %12 = load i8, i8* %padByte, align 1
  %conv7 = zext i8 %12 to i32
  call void @llvm.memset.p0i8.i32(i8* align 1 %arrayidx, i8 %11, i32 %conv7, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %13 = load i32, i32* %i, align 4
  %len8 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %14 = load i32, i32* %len8, align 4
  %cmp = icmp slt i32 %13, %14
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %data10 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %15 = load i8*, i8** %data10, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds i8, i8* %15, i32 %16
  %arraydecay12 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  %data13 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %17 = load i8*, i8** %data13, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds i8, i8* %17, i32 %18
  call void @processMessage(i8* %arrayidx11, [6 x i8]* %arraydecay12, i8* %arrayidx14)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %19 = load i32, i32* %i, align 4
  %add15 = add nsw i32 %19, 8
  store i32 %add15, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define internal void @getSubKeys(i8* %key, [6 x i8]* %ks) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %ks.addr = alloca [6 x i8]*, align 4
  %c = alloca [17 x [7 x i8]], align 16
  %d = alloca [17 x [4 x i8]], align 16
  %kp = alloca [7 x i8], align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i8* %key, i8** %key.addr, align 4
  store [6 x i8]* %ks, [6 x i8]** %ks.addr, align 4
  %arraydecay = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 0
  %0 = bitcast [7 x i8]* %arraydecay to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 119, i1 false)
  %arraydecay1 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 0
  %1 = bitcast [4 x i8]* %arraydecay1 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %1, i8 0, i32 68, i1 false)
  %2 = load [6 x i8]*, [6 x i8]** %ks.addr, align 4
  %3 = bitcast [6 x i8]* %2 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 1 %3, i8 0, i32 102, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %4, 56
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay2 = getelementptr inbounds [7 x i8], [7 x i8]* %kp, i32 0, i32 0
  %5 = load i32, i32* %i, align 4
  %6 = load i8*, i8** %key.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [56 x i8], [56 x i8]* @PC1, i32 0, i32 %7
  %8 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %8 to i32
  %sub = sub nsw i32 %conv, 1
  %call = call i32 @peekBit(i8* %6, i32 %sub)
  call void @pokeBit(i8* %arraydecay2, i32 %5, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc15, %for.end
  %10 = load i32, i32* %i, align 4
  %cmp4 = icmp slt i32 %10, 28
  br i1 %cmp4, label %for.body6, label %for.end17

for.body6:                                        ; preds = %for.cond3
  %arrayidx7 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 0
  %arraydecay8 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx7, i32 0, i32 0
  %11 = load i32, i32* %i, align 4
  %arraydecay9 = getelementptr inbounds [7 x i8], [7 x i8]* %kp, i32 0, i32 0
  %12 = load i32, i32* %i, align 4
  %call10 = call i32 @peekBit(i8* %arraydecay9, i32 %12)
  call void @pokeBit(i8* %arraydecay8, i32 %11, i32 %call10)
  %arrayidx11 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 0
  %arraydecay12 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx11, i32 0, i32 0
  %13 = load i32, i32* %i, align 4
  %arraydecay13 = getelementptr inbounds [7 x i8], [7 x i8]* %kp, i32 0, i32 0
  %14 = load i32, i32* %i, align 4
  %add = add nsw i32 %14, 28
  %call14 = call i32 @peekBit(i8* %arraydecay13, i32 %add)
  call void @pokeBit(i8* %arraydecay12, i32 %13, i32 %call14)
  br label %for.inc15

for.inc15:                                        ; preds = %for.body6
  %15 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %15, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond3

for.end17:                                        ; preds = %for.cond3
  store i32 1, i32* %i, align 4
  br label %for.cond18

for.cond18:                                       ; preds = %for.inc38, %for.end17
  %16 = load i32, i32* %i, align 4
  %cmp19 = icmp slt i32 %16, 17
  br i1 %cmp19, label %for.body21, label %for.end40

for.body21:                                       ; preds = %for.cond18
  %17 = load i32, i32* %i, align 4
  %sub22 = sub nsw i32 %17, 1
  %arrayidx23 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %sub22
  %arraydecay24 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx23, i32 0, i32 0
  %18 = load i32, i32* %i, align 4
  %sub25 = sub nsw i32 %18, 1
  %arrayidx26 = getelementptr inbounds [16 x i8], [16 x i8]* @SHIFTS, i32 0, i32 %sub25
  %19 = load i8, i8* %arrayidx26, align 1
  %conv27 = zext i8 %19 to i32
  %20 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %20
  %arraydecay29 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx28, i32 0, i32 0
  call void @shiftLeft(i8* %arraydecay24, i32 28, i32 %conv27, i8* %arraydecay29)
  %21 = load i32, i32* %i, align 4
  %sub30 = sub nsw i32 %21, 1
  %arrayidx31 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 %sub30
  %arraydecay32 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx31, i32 0, i32 0
  %22 = load i32, i32* %i, align 4
  %sub33 = sub nsw i32 %22, 1
  %arrayidx34 = getelementptr inbounds [16 x i8], [16 x i8]* @SHIFTS, i32 0, i32 %sub33
  %23 = load i8, i8* %arrayidx34, align 1
  %conv35 = zext i8 %23 to i32
  %24 = load i32, i32* %i, align 4
  %arrayidx36 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 %24
  %arraydecay37 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx36, i32 0, i32 0
  call void @shiftLeft(i8* %arraydecay32, i32 28, i32 %conv35, i8* %arraydecay37)
  br label %for.inc38

for.inc38:                                        ; preds = %for.body21
  %25 = load i32, i32* %i, align 4
  %inc39 = add nsw i32 %25, 1
  store i32 %inc39, i32* %i, align 4
  br label %for.cond18

for.end40:                                        ; preds = %for.cond18
  store i32 1, i32* %i, align 4
  br label %for.cond41

for.cond41:                                       ; preds = %for.inc58, %for.end40
  %26 = load i32, i32* %i, align 4
  %cmp42 = icmp slt i32 %26, 17
  br i1 %cmp42, label %for.body44, label %for.end60

for.body44:                                       ; preds = %for.cond41
  store i32 28, i32* %j, align 4
  br label %for.cond45

for.cond45:                                       ; preds = %for.inc55, %for.body44
  %27 = load i32, i32* %j, align 4
  %cmp46 = icmp slt i32 %27, 56
  br i1 %cmp46, label %for.body48, label %for.end57

for.body48:                                       ; preds = %for.cond45
  %28 = load i32, i32* %i, align 4
  %arrayidx49 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %28
  %arraydecay50 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx49, i32 0, i32 0
  %29 = load i32, i32* %j, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx51 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 %30
  %arraydecay52 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx51, i32 0, i32 0
  %31 = load i32, i32* %j, align 4
  %sub53 = sub nsw i32 %31, 28
  %call54 = call i32 @peekBit(i8* %arraydecay52, i32 %sub53)
  call void @pokeBit(i8* %arraydecay50, i32 %29, i32 %call54)
  br label %for.inc55

for.inc55:                                        ; preds = %for.body48
  %32 = load i32, i32* %j, align 4
  %inc56 = add nsw i32 %32, 1
  store i32 %inc56, i32* %j, align 4
  br label %for.cond45

for.end57:                                        ; preds = %for.cond45
  br label %for.inc58

for.inc58:                                        ; preds = %for.end57
  %33 = load i32, i32* %i, align 4
  %inc59 = add nsw i32 %33, 1
  store i32 %inc59, i32* %i, align 4
  br label %for.cond41

for.end60:                                        ; preds = %for.cond41
  store i32 1, i32* %i, align 4
  br label %for.cond61

for.cond61:                                       ; preds = %for.inc80, %for.end60
  %34 = load i32, i32* %i, align 4
  %cmp62 = icmp slt i32 %34, 17
  br i1 %cmp62, label %for.body64, label %for.end82

for.body64:                                       ; preds = %for.cond61
  store i32 0, i32* %j, align 4
  br label %for.cond65

for.cond65:                                       ; preds = %for.inc77, %for.body64
  %35 = load i32, i32* %j, align 4
  %cmp66 = icmp slt i32 %35, 48
  br i1 %cmp66, label %for.body68, label %for.end79

for.body68:                                       ; preds = %for.cond65
  %36 = load [6 x i8]*, [6 x i8]** %ks.addr, align 4
  %37 = load i32, i32* %i, align 4
  %arrayidx69 = getelementptr inbounds [6 x i8], [6 x i8]* %36, i32 %37
  %arraydecay70 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx69, i32 0, i32 0
  %38 = load i32, i32* %j, align 4
  %39 = load i32, i32* %i, align 4
  %arrayidx71 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %39
  %arraydecay72 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx71, i32 0, i32 0
  %40 = load i32, i32* %j, align 4
  %arrayidx73 = getelementptr inbounds [48 x i8], [48 x i8]* @PC2, i32 0, i32 %40
  %41 = load i8, i8* %arrayidx73, align 1
  %conv74 = zext i8 %41 to i32
  %sub75 = sub nsw i32 %conv74, 1
  %call76 = call i32 @peekBit(i8* %arraydecay72, i32 %sub75)
  call void @pokeBit(i8* %arraydecay70, i32 %38, i32 %call76)
  br label %for.inc77

for.inc77:                                        ; preds = %for.body68
  %42 = load i32, i32* %j, align 4
  %inc78 = add nsw i32 %42, 1
  store i32 %inc78, i32* %j, align 4
  br label %for.cond65

for.end79:                                        ; preds = %for.cond65
  br label %for.inc80

for.inc80:                                        ; preds = %for.end79
  %43 = load i32, i32* %i, align 4
  %inc81 = add nsw i32 %43, 1
  store i32 %inc81, i32* %i, align 4
  br label %for.cond61

for.end82:                                        ; preds = %for.cond61
  ret void
}

declare noalias i8* @malloc(i32 %0) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: noinline nounwind optnone
define internal void @processMessage(i8* %message, [6 x i8]* %ks, i8* %ep) #0 {
entry:
  %message.addr = alloca i8*, align 4
  %ks.addr = alloca [6 x i8]*, align 4
  %ep.addr = alloca i8*, align 4
  %left = alloca [17 x [4 x i8]], align 16
  %right = alloca [17 x [4 x i8]], align 16
  %mp = alloca [8 x i8], align 1
  %e = alloca [8 x i8], align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %fs = alloca [4 x i8], align 1
  store i8* %message, i8** %message.addr, align 4
  store [6 x i8]* %ks, [6 x i8]** %ks.addr, align 4
  store i8* %ep, i8** %ep.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 64
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %mp, i32 0, i32 0
  %1 = load i32, i32* %i, align 4
  %2 = load i8*, i8** %message.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [64 x i8], [64 x i8]* @IP, i32 0, i32 %3
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %sub = sub nsw i32 %conv, 1
  %call = call i32 @peekBit(i8* %2, i32 %sub)
  call void @pokeBit(i8* %arraydecay, i32 %1, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc13, %for.end
  %6 = load i32, i32* %i, align 4
  %cmp2 = icmp slt i32 %6, 32
  br i1 %cmp2, label %for.body4, label %for.end15

for.body4:                                        ; preds = %for.cond1
  %arrayidx5 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 0
  %arraydecay6 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx5, i32 0, i32 0
  %7 = load i32, i32* %i, align 4
  %arraydecay7 = getelementptr inbounds [8 x i8], [8 x i8]* %mp, i32 0, i32 0
  %8 = load i32, i32* %i, align 4
  %call8 = call i32 @peekBit(i8* %arraydecay7, i32 %8)
  call void @pokeBit(i8* %arraydecay6, i32 %7, i32 %call8)
  %arrayidx9 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 0
  %arraydecay10 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx9, i32 0, i32 0
  %9 = load i32, i32* %i, align 4
  %arraydecay11 = getelementptr inbounds [8 x i8], [8 x i8]* %mp, i32 0, i32 0
  %10 = load i32, i32* %i, align 4
  %add = add nsw i32 %10, 32
  %call12 = call i32 @peekBit(i8* %arraydecay11, i32 %add)
  call void @pokeBit(i8* %arraydecay10, i32 %9, i32 %call12)
  br label %for.inc13

for.inc13:                                        ; preds = %for.body4
  %11 = load i32, i32* %i, align 4
  %inc14 = add nsw i32 %11, 1
  store i32 %inc14, i32* %i, align 4
  br label %for.cond1

for.end15:                                        ; preds = %for.cond1
  store i32 1, i32* %i, align 4
  br label %for.cond16

for.cond16:                                       ; preds = %for.inc50, %for.end15
  %12 = load i32, i32* %i, align 4
  %cmp17 = icmp slt i32 %12, 17
  br i1 %cmp17, label %for.body19, label %for.end52

for.body19:                                       ; preds = %for.cond16
  %13 = load i32, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 %13
  %arraydecay21 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx20, i32 0, i32 0
  %14 = load i32, i32* %i, align 4
  %sub22 = sub nsw i32 %14, 1
  %arrayidx23 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 %sub22
  %arraydecay24 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx23, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %arraydecay21, i8* align 4 %arraydecay24, i32 4, i1 false)
  %15 = load i32, i32* %i, align 4
  %sub25 = sub nsw i32 %15, 1
  %arrayidx26 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 %sub25
  %arraydecay27 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx26, i32 0, i32 0
  %16 = load [6 x i8]*, [6 x i8]** %ks.addr, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds [6 x i8], [6 x i8]* %16, i32 %17
  %arraydecay29 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx28, i32 0, i32 0
  %arraydecay30 = getelementptr inbounds [4 x i8], [4 x i8]* %fs, i32 0, i32 0
  call void @f(i8* %arraydecay27, i8* %arraydecay29, i8* %arraydecay30)
  store i32 0, i32* %j, align 4
  br label %for.cond31

for.cond31:                                       ; preds = %for.inc42, %for.body19
  %18 = load i32, i32* %j, align 4
  %cmp32 = icmp slt i32 %18, 4
  br i1 %cmp32, label %for.body34, label %for.end44

for.body34:                                       ; preds = %for.cond31
  %19 = load i32, i32* %j, align 4
  %arrayidx35 = getelementptr inbounds [4 x i8], [4 x i8]* %fs, i32 0, i32 %19
  %20 = load i8, i8* %arrayidx35, align 1
  %conv36 = zext i8 %20 to i32
  %21 = load i32, i32* %i, align 4
  %sub37 = sub nsw i32 %21, 1
  %arrayidx38 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 %sub37
  %22 = load i32, i32* %j, align 4
  %arrayidx39 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx38, i32 0, i32 %22
  %23 = load i8, i8* %arrayidx39, align 1
  %conv40 = zext i8 %23 to i32
  %xor = xor i32 %conv40, %conv36
  %conv41 = trunc i32 %xor to i8
  store i8 %conv41, i8* %arrayidx39, align 1
  br label %for.inc42

for.inc42:                                        ; preds = %for.body34
  %24 = load i32, i32* %j, align 4
  %inc43 = add nsw i32 %24, 1
  store i32 %inc43, i32* %j, align 4
  br label %for.cond31

for.end44:                                        ; preds = %for.cond31
  %25 = load i32, i32* %i, align 4
  %arrayidx45 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 %25
  %arraydecay46 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx45, i32 0, i32 0
  %26 = load i32, i32* %i, align 4
  %sub47 = sub nsw i32 %26, 1
  %arrayidx48 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 %sub47
  %arraydecay49 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx48, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %arraydecay46, i8* align 4 %arraydecay49, i32 4, i1 false)
  br label %for.inc50

for.inc50:                                        ; preds = %for.end44
  %27 = load i32, i32* %i, align 4
  %inc51 = add nsw i32 %27, 1
  store i32 %inc51, i32* %i, align 4
  br label %for.cond16

for.end52:                                        ; preds = %for.cond16
  store i32 0, i32* %i, align 4
  br label %for.cond53

for.cond53:                                       ; preds = %for.inc61, %for.end52
  %28 = load i32, i32* %i, align 4
  %cmp54 = icmp slt i32 %28, 32
  br i1 %cmp54, label %for.body56, label %for.end63

for.body56:                                       ; preds = %for.cond53
  %arraydecay57 = getelementptr inbounds [8 x i8], [8 x i8]* %e, i32 0, i32 0
  %29 = load i32, i32* %i, align 4
  %arrayidx58 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 16
  %arraydecay59 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx58, i32 0, i32 0
  %30 = load i32, i32* %i, align 4
  %call60 = call i32 @peekBit(i8* %arraydecay59, i32 %30)
  call void @pokeBit(i8* %arraydecay57, i32 %29, i32 %call60)
  br label %for.inc61

for.inc61:                                        ; preds = %for.body56
  %31 = load i32, i32* %i, align 4
  %inc62 = add nsw i32 %31, 1
  store i32 %inc62, i32* %i, align 4
  br label %for.cond53

for.end63:                                        ; preds = %for.cond53
  store i32 32, i32* %i, align 4
  br label %for.cond64

for.cond64:                                       ; preds = %for.inc73, %for.end63
  %32 = load i32, i32* %i, align 4
  %cmp65 = icmp slt i32 %32, 64
  br i1 %cmp65, label %for.body67, label %for.end75

for.body67:                                       ; preds = %for.cond64
  %arraydecay68 = getelementptr inbounds [8 x i8], [8 x i8]* %e, i32 0, i32 0
  %33 = load i32, i32* %i, align 4
  %arrayidx69 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 16
  %arraydecay70 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx69, i32 0, i32 0
  %34 = load i32, i32* %i, align 4
  %sub71 = sub nsw i32 %34, 32
  %call72 = call i32 @peekBit(i8* %arraydecay70, i32 %sub71)
  call void @pokeBit(i8* %arraydecay68, i32 %33, i32 %call72)
  br label %for.inc73

for.inc73:                                        ; preds = %for.body67
  %35 = load i32, i32* %i, align 4
  %inc74 = add nsw i32 %35, 1
  store i32 %inc74, i32* %i, align 4
  br label %for.cond64

for.end75:                                        ; preds = %for.cond64
  store i32 0, i32* %i, align 4
  br label %for.cond76

for.cond76:                                       ; preds = %for.inc85, %for.end75
  %36 = load i32, i32* %i, align 4
  %cmp77 = icmp slt i32 %36, 64
  br i1 %cmp77, label %for.body79, label %for.end87

for.body79:                                       ; preds = %for.cond76
  %37 = load i8*, i8** %ep.addr, align 4
  %38 = load i32, i32* %i, align 4
  %arraydecay80 = getelementptr inbounds [8 x i8], [8 x i8]* %e, i32 0, i32 0
  %39 = load i32, i32* %i, align 4
  %arrayidx81 = getelementptr inbounds [64 x i8], [64 x i8]* @IP2, i32 0, i32 %39
  %40 = load i8, i8* %arrayidx81, align 1
  %conv82 = zext i8 %40 to i32
  %sub83 = sub nsw i32 %conv82, 1
  %call84 = call i32 @peekBit(i8* %arraydecay80, i32 %sub83)
  call void @pokeBit(i8* %37, i32 %38, i32 %call84)
  br label %for.inc85

for.inc85:                                        ; preds = %for.body79
  %41 = load i32, i32* %i, align 4
  %inc86 = add nsw i32 %41, 1
  store i32 %inc86, i32* %i, align 4
  br label %for.cond76

for.end87:                                        ; preds = %for.cond76
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @decrypt(%struct.String* noalias sret align 4 %agg.result, i8* %key, i8* %message, i32 %len) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %message.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %ks = alloca [17 x [6 x i8]], align 16
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %padByte = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8* %key, i8** %key.addr, align 4
  store i8* %message, i8** %message.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = bitcast %struct.String* %agg.result to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  %1 = load i8*, i8** %key.addr, align 4
  %arraydecay = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  call void @getSubKeys(i8* %1, [6 x i8]* %arraydecay)
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc12, %entry
  %2 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, 9
  br i1 %cmp, label %for.body, label %for.end14

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %3, 6
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %4
  %5 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx, i32 0, i32 %5
  %6 = load i8, i8* %arrayidx4, align 1
  store i8 %6, i8* %temp, align 1
  %7 = load i32, i32* %i, align 4
  %sub = sub nsw i32 17, %7
  %arrayidx5 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %sub
  %8 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx5, i32 0, i32 %8
  %9 = load i8, i8* %arrayidx6, align 1
  %10 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %10
  %11 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx7, i32 0, i32 %11
  store i8 %9, i8* %arrayidx8, align 1
  %12 = load i8, i8* %temp, align 1
  %13 = load i32, i32* %i, align 4
  %sub9 = sub nsw i32 17, %13
  %arrayidx10 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %sub9
  %14 = load i32, i32* %j, align 4
  %arrayidx11 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx10, i32 0, i32 %14
  store i8 %12, i8* %arrayidx11, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %15 = load i32, i32* %j, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc12

for.inc12:                                        ; preds = %for.end
  %16 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %16, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond

for.end14:                                        ; preds = %for.cond
  %17 = load i32, i32* %len.addr, align 4
  %call = call noalias i8* @malloc(i32 %17)
  %data = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  store i8* %call, i8** %data, align 4
  %data15 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %18 = load i8*, i8** %data15, align 4
  %19 = load i8*, i8** %message.addr, align 4
  %20 = load i32, i32* %len.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %18, i8* align 1 %19, i32 %20, i1 false)
  %21 = load i32, i32* %len.addr, align 4
  %len16 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  store i32 %21, i32* %len16, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond17

for.cond17:                                       ; preds = %for.inc26, %for.end14
  %22 = load i32, i32* %i, align 4
  %len18 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %23 = load i32, i32* %len18, align 4
  %cmp19 = icmp slt i32 %22, %23
  br i1 %cmp19, label %for.body20, label %for.end27

for.body20:                                       ; preds = %for.cond17
  %data21 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %24 = load i8*, i8** %data21, align 4
  %25 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds i8, i8* %24, i32 %25
  %arraydecay23 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  %data24 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %26 = load i8*, i8** %data24, align 4
  %27 = load i32, i32* %i, align 4
  %arrayidx25 = getelementptr inbounds i8, i8* %26, i32 %27
  call void @processMessage(i8* %arrayidx22, [6 x i8]* %arraydecay23, i8* %arrayidx25)
  br label %for.inc26

for.inc26:                                        ; preds = %for.body20
  %28 = load i32, i32* %i, align 4
  %add = add nsw i32 %28, 8
  store i32 %add, i32* %i, align 4
  br label %for.cond17

for.end27:                                        ; preds = %for.cond17
  %data28 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %29 = load i8*, i8** %data28, align 4
  %30 = load i32, i32* %len.addr, align 4
  %sub29 = sub nsw i32 %30, 1
  %arrayidx30 = getelementptr inbounds i8, i8* %29, i32 %sub29
  %31 = load i8, i8* %arrayidx30, align 1
  store i8 %31, i8* %padByte, align 1
  %32 = load i8, i8* %padByte, align 1
  %conv = zext i8 %32 to i32
  %len31 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %33 = load i32, i32* %len31, align 4
  %sub32 = sub nsw i32 %33, %conv
  store i32 %sub32, i32* %len31, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @driver(i8* %key, i8* %message, i32 %len) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %message.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %encoded = alloca %struct.String, align 4
  %decoded = alloca %struct.String, align 4
  %buffer = alloca [128 x i8], align 16
  %tmp = alloca %struct.String, align 4
  %tmp9 = alloca %struct.String, align 4
  store i8* %key, i8** %key.addr, align 4
  store i8* %message, i8** %message.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load i8*, i8** %key.addr, align 4
  %arraydecay = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %0, i32 8, i8* %arraydecay)
  %arraydecay1 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i32 0, i32 0), i8* %arraydecay1)
  %1 = load i8*, i8** %message.addr, align 4
  %2 = load i32, i32* %len.addr, align 4
  %arraydecay2 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %1, i32 %2, i8* %arraydecay2)
  %arraydecay3 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0), i8* %arraydecay3)
  %3 = load i8*, i8** %key.addr, align 4
  %4 = load i8*, i8** %message.addr, align 4
  %5 = load i32, i32* %len.addr, align 4
  call void @encrypt(%struct.String* sret align 4 %tmp, i8* %3, i8* %4, i32 %5)
  %6 = bitcast %struct.String* %encoded to i8*
  %7 = bitcast %struct.String* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %6, i8* align 4 %7, i32 8, i1 false)
  %data = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  %8 = load i8*, i8** %data, align 4
  %len5 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 1
  %9 = load i32, i32* %len5, align 4
  %arraydecay6 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %8, i32 %9, i8* %arraydecay6)
  %arraydecay7 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0), i8* %arraydecay7)
  %10 = load i8*, i8** %key.addr, align 4
  %data10 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  %11 = load i8*, i8** %data10, align 4
  %len11 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 1
  %12 = load i32, i32* %len11, align 4
  call void @decrypt(%struct.String* sret align 4 %tmp9, i8* %10, i8* %11, i32 %12)
  %13 = bitcast %struct.String* %decoded to i8*
  %14 = bitcast %struct.String* %tmp9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %13, i8* align 4 %14, i32 8, i1 false)
  %data12 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 0
  %15 = load i8*, i8** %data12, align 4
  %len13 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 1
  %16 = load i32, i32* %len13, align 4
  %arraydecay14 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %15, i32 %16, i8* %arraydecay14)
  %arraydecay15 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0), i8* %arraydecay15)
  %len17 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 1
  %17 = load i32, i32* %len17, align 4
  %cmp = icmp sgt i32 %17, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %data18 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  %18 = load i8*, i8** %data18, align 4
  call void @free(i8* %18)
  %data19 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  store i8* null, i8** %data19, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %len20 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 1
  %19 = load i32, i32* %len20, align 4
  %cmp21 = icmp sgt i32 %19, 0
  br i1 %cmp21, label %if.then22, label %if.end25

if.then22:                                        ; preds = %if.end
  %data23 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 0
  %20 = load i8*, i8** %data23, align 4
  call void @free(i8* %20)
  %data24 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 0
  store i8* null, i8** %data24, align 4
  br label %if.end25

if.end25:                                         ; preds = %if.then22, %if.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @printBytes(i8* %ptr, i32 %len, i8* %out) #0 {
entry:
  %ptr.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  store i8* %ptr, i8** %ptr.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %len.addr, align 4
  %dec = add nsw i32 %0, -1
  store i32 %dec, i32* %len.addr, align 4
  %cmp = icmp sgt i32 %0, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i8*, i8** %ptr.addr, align 4
  %2 = load i8, i8* %1, align 1
  %conv = zext i8 %2 to i32
  %shr = ashr i32 %conv, 4
  %conv1 = trunc i32 %shr to i8
  %call = call signext i8 @toHex(i8 zeroext %conv1)
  %3 = load i8*, i8** %out.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %3, i32 1
  store i8* %incdec.ptr, i8** %out.addr, align 4
  store i8 %call, i8* %3, align 1
  %4 = load i8*, i8** %ptr.addr, align 4
  %5 = load i8, i8* %4, align 1
  %conv2 = zext i8 %5 to i32
  %and = and i32 %conv2, 15
  %conv3 = trunc i32 %and to i8
  %call4 = call signext i8 @toHex(i8 zeroext %conv3)
  %6 = load i8*, i8** %out.addr, align 4
  %incdec.ptr5 = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr5, i8** %out.addr, align 4
  store i8 %call4, i8* %6, align 1
  %7 = load i8*, i8** %ptr.addr, align 4
  %incdec.ptr6 = getelementptr inbounds i8, i8* %7, i32 1
  store i8* %incdec.ptr6, i8** %ptr.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %8 = load i8*, i8** %out.addr, align 4
  store i8 0, i8* %8, align 1
  ret void
}

declare i32 @printf(i8* %0, ...) #2

declare void @free(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %keys = alloca [3 x [8 x i8]], align 16
  %message1 = alloca [8 x i8], align 1
  %message2 = alloca [8 x i8], align 1
  %message3 = alloca [38 x i8], align 16
  %len = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [3 x [8 x i8]]* %keys to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([3 x [8 x i8]], [3 x [8 x i8]]* @__const.main.keys, i32 0, i32 0, i32 0), i32 24, i1 false)
  %1 = bitcast [8 x i8]* %message1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %1, i8* align 1 getelementptr inbounds ([8 x i8], [8 x i8]* @__const.main.message1, i32 0, i32 0), i32 8, i1 false)
  %2 = bitcast [8 x i8]* %message2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %2, i8* align 1 getelementptr inbounds ([8 x i8], [8 x i8]* @__const.main.message2, i32 0, i32 0), i32 8, i1 false)
  %3 = bitcast [38 x i8]* %message3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %3, i8* align 16 getelementptr inbounds ([38 x i8], [38 x i8]* @__const.main.message3, i32 0, i32 0), i32 38, i1 false)
  store i32 8, i32* %len, align 4
  %arrayidx = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* %keys, i32 0, i32 0
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %arrayidx, i32 0, i32 0
  %arraydecay1 = getelementptr inbounds [8 x i8], [8 x i8]* %message1, i32 0, i32 0
  %4 = load i32, i32* %len, align 4
  call void @driver(i8* %arraydecay, i8* %arraydecay1, i32 %4)
  store i32 8, i32* %len, align 4
  %arrayidx2 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* %keys, i32 0, i32 1
  %arraydecay3 = getelementptr inbounds [8 x i8], [8 x i8]* %arrayidx2, i32 0, i32 0
  %arraydecay4 = getelementptr inbounds [8 x i8], [8 x i8]* %message2, i32 0, i32 0
  %5 = load i32, i32* %len, align 4
  call void @driver(i8* %arraydecay3, i8* %arraydecay4, i32 %5)
  store i32 38, i32* %len, align 4
  %arrayidx5 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* %keys, i32 0, i32 2
  %arraydecay6 = getelementptr inbounds [8 x i8], [8 x i8]* %arrayidx5, i32 0, i32 0
  %arraydecay7 = getelementptr inbounds [38 x i8], [38 x i8]* %message3, i32 0, i32 0
  %6 = load i32, i32* %len, align 4
  call void @driver(i8* %arraydecay6, i8* %arraydecay7, i32 %6)
  ret i32 0
}

; Function Attrs: noinline nounwind optnone
define internal void @pokeBit(i8* %dst, i32 %index, i32 %value) #0 {
entry:
  %dst.addr = alloca i8*, align 4
  %index.addr = alloca i32, align 4
  %value.addr = alloca i32, align 4
  %cell = alloca i32, align 4
  %bit = alloca i32, align 4
  store i8* %dst, i8** %dst.addr, align 4
  store i32 %index, i32* %index.addr, align 4
  store i32 %value, i32* %value.addr, align 4
  %0 = load i32, i32* %index.addr, align 4
  %div = sdiv i32 %0, 8
  store i32 %div, i32* %cell, align 4
  %1 = load i32, i32* %index.addr, align 4
  %rem = srem i32 %1, 8
  %sub = sub nsw i32 7, %rem
  store i32 %sub, i32* %bit, align 4
  %2 = load i32, i32* %value.addr, align 4
  %cmp = icmp eq i32 %2, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %bit, align 4
  %shl = shl i32 1, %3
  %neg = xor i32 %shl, -1
  %4 = load i8*, i8** %dst.addr, align 4
  %5 = load i32, i32* %cell, align 4
  %arrayidx = getelementptr inbounds i8, i8* %4, i32 %5
  %6 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %6 to i32
  %and = and i32 %conv, %neg
  %conv1 = trunc i32 %and to i8
  store i8 %conv1, i8* %arrayidx, align 1
  br label %if.end

if.else:                                          ; preds = %entry
  %7 = load i32, i32* %bit, align 4
  %shl2 = shl i32 1, %7
  %8 = load i8*, i8** %dst.addr, align 4
  %9 = load i32, i32* %cell, align 4
  %arrayidx3 = getelementptr inbounds i8, i8* %8, i32 %9
  %10 = load i8, i8* %arrayidx3, align 1
  %conv4 = zext i8 %10 to i32
  %or = or i32 %conv4, %shl2
  %conv5 = trunc i32 %or to i8
  store i8 %conv5, i8* %arrayidx3, align 1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i32 @peekBit(i8* %src, i32 %index) #0 {
entry:
  %src.addr = alloca i8*, align 4
  %index.addr = alloca i32, align 4
  %cell = alloca i32, align 4
  %bit = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 4
  store i32 %index, i32* %index.addr, align 4
  %0 = load i32, i32* %index.addr, align 4
  %div = sdiv i32 %0, 8
  store i32 %div, i32* %cell, align 4
  %1 = load i32, i32* %index.addr, align 4
  %rem = srem i32 %1, 8
  %sub = sub nsw i32 7, %rem
  store i32 %sub, i32* %bit, align 4
  %2 = load i8*, i8** %src.addr, align 4
  %3 = load i32, i32* %cell, align 4
  %arrayidx = getelementptr inbounds i8, i8* %2, i32 %3
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %5 = load i32, i32* %bit, align 4
  %shl = shl i32 1, %5
  %and = and i32 %conv, %shl
  %cmp = icmp ne i32 %and, 0
  %conv1 = zext i1 %cmp to i32
  ret i32 %conv1
}

; Function Attrs: noinline nounwind optnone
define internal void @shiftLeft(i8* %src, i32 %len, i32 %times, i8* %dst) #0 {
entry:
  %src.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %times.addr = alloca i32, align 4
  %dst.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %t = alloca i32, align 4
  %temp = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %times, i32* %times.addr, align 4
  store i8* %dst, i8** %dst.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp sle i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8*, i8** %dst.addr, align 4
  %3 = load i32, i32* %i, align 4
  %4 = load i8*, i8** %src.addr, align 4
  %5 = load i32, i32* %i, align 4
  %call = call i32 @peekBit(i8* %4, i32 %5)
  call void @pokeBit(i8* %2, i32 %3, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %t, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc13, %for.end
  %7 = load i32, i32* %t, align 4
  %8 = load i32, i32* %times.addr, align 4
  %cmp2 = icmp sle i32 %7, %8
  br i1 %cmp2, label %for.body3, label %for.end15

for.body3:                                        ; preds = %for.cond1
  %9 = load i8*, i8** %dst.addr, align 4
  %call4 = call i32 @peekBit(i8* %9, i32 0)
  store i32 %call4, i32* %temp, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc9, %for.body3
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %len.addr, align 4
  %cmp6 = icmp sle i32 %10, %11
  br i1 %cmp6, label %for.body7, label %for.end11

for.body7:                                        ; preds = %for.cond5
  %12 = load i8*, i8** %dst.addr, align 4
  %13 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %13, 1
  %14 = load i8*, i8** %dst.addr, align 4
  %15 = load i32, i32* %i, align 4
  %call8 = call i32 @peekBit(i8* %14, i32 %15)
  call void @pokeBit(i8* %12, i32 %sub, i32 %call8)
  br label %for.inc9

for.inc9:                                         ; preds = %for.body7
  %16 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %16, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond5

for.end11:                                        ; preds = %for.cond5
  %17 = load i8*, i8** %dst.addr, align 4
  %18 = load i32, i32* %len.addr, align 4
  %sub12 = sub nsw i32 %18, 1
  %19 = load i32, i32* %temp, align 4
  call void @pokeBit(i8* %17, i32 %sub12, i32 %19)
  br label %for.inc13

for.inc13:                                        ; preds = %for.end11
  %20 = load i32, i32* %t, align 4
  %inc14 = add nsw i32 %20, 1
  store i32 %inc14, i32* %t, align 4
  br label %for.cond1

for.end15:                                        ; preds = %for.cond1
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @f(i8* %r, i8* %ks, i8* %sp) #0 {
entry:
  %r.addr = alloca i8*, align 4
  %ks.addr = alloca i8*, align 4
  %sp.addr = alloca i8*, align 4
  %er = alloca [6 x i8], align 1
  %sr = alloca [4 x i8], align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %b = alloca [6 x i32], align 16
  %k = alloca i32, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %m = alloca i32, align 4
  %n = alloca i32, align 4
  %p = alloca i32, align 4
  store i8* %r, i8** %r.addr, align 4
  store i8* %ks, i8** %ks.addr, align 4
  store i8* %sp, i8** %sp.addr, align 4
  %arraydecay = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  call void @llvm.memset.p0i8.i32(i8* align 1 %arraydecay, i8 0, i32 6, i1 false)
  %arraydecay1 = getelementptr inbounds [4 x i8], [4 x i8]* %sr, i32 0, i32 0
  call void @llvm.memset.p0i8.i32(i8* align 1 %arraydecay1, i8 0, i32 4, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 48
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay2 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  %1 = load i32, i32* %i, align 4
  %2 = load i8*, i8** %r.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [48 x i8], [48 x i8]* @E, i32 0, i32 %3
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %sub = sub nsw i32 %conv, 1
  %call = call i32 @peekBit(i8* %2, i32 %sub)
  call void @pokeBit(i8* %arraydecay2, i32 %1, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc12, %for.end
  %6 = load i32, i32* %i, align 4
  %cmp4 = icmp slt i32 %6, 6
  br i1 %cmp4, label %for.body6, label %for.end14

for.body6:                                        ; preds = %for.cond3
  %7 = load i8*, i8** %ks.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds i8, i8* %7, i32 %8
  %9 = load i8, i8* %arrayidx7, align 1
  %conv8 = zext i8 %9 to i32
  %10 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 %10
  %11 = load i8, i8* %arrayidx9, align 1
  %conv10 = zext i8 %11 to i32
  %xor = xor i32 %conv10, %conv8
  %conv11 = trunc i32 %xor to i8
  store i8 %conv11, i8* %arrayidx9, align 1
  br label %for.inc12

for.inc12:                                        ; preds = %for.body6
  %12 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %12, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond3

for.end14:                                        ; preds = %for.cond3
  store i32 0, i32* %i, align 4
  br label %for.cond15

for.cond15:                                       ; preds = %for.inc59, %for.end14
  %13 = load i32, i32* %i, align 4
  %cmp16 = icmp slt i32 %13, 8
  br i1 %cmp16, label %for.body18, label %for.end61

for.body18:                                       ; preds = %for.cond15
  %14 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %14, 6
  store i32 %mul, i32* %j, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond19

for.cond19:                                       ; preds = %for.inc28, %for.body18
  %15 = load i32, i32* %k, align 4
  %cmp20 = icmp slt i32 %15, 6
  br i1 %cmp20, label %for.body22, label %for.end30

for.body22:                                       ; preds = %for.cond19
  %arraydecay23 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  %16 = load i32, i32* %j, align 4
  %17 = load i32, i32* %k, align 4
  %add = add nsw i32 %16, %17
  %call24 = call i32 @peekBit(i8* %arraydecay23, i32 %add)
  %cmp25 = icmp ne i32 %call24, 0
  %18 = zext i1 %cmp25 to i64
  %cond = select i1 %cmp25, i32 1, i32 0
  %19 = load i32, i32* %k, align 4
  %arrayidx27 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 %19
  store i32 %cond, i32* %arrayidx27, align 4
  br label %for.inc28

for.inc28:                                        ; preds = %for.body22
  %20 = load i32, i32* %k, align 4
  %inc29 = add nsw i32 %20, 1
  store i32 %inc29, i32* %k, align 4
  br label %for.cond19

for.end30:                                        ; preds = %for.cond19
  %arrayidx31 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 0
  %21 = load i32, i32* %arrayidx31, align 16
  %mul32 = mul nsw i32 2, %21
  %arrayidx33 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 5
  %22 = load i32, i32* %arrayidx33, align 4
  %add34 = add nsw i32 %mul32, %22
  store i32 %add34, i32* %row, align 4
  %arrayidx35 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 1
  %23 = load i32, i32* %arrayidx35, align 4
  %mul36 = mul nsw i32 8, %23
  %arrayidx37 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 2
  %24 = load i32, i32* %arrayidx37, align 8
  %mul38 = mul nsw i32 4, %24
  %add39 = add nsw i32 %mul36, %mul38
  %arrayidx40 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 3
  %25 = load i32, i32* %arrayidx40, align 4
  %mul41 = mul nsw i32 2, %25
  %add42 = add nsw i32 %add39, %mul41
  %arrayidx43 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 4
  %26 = load i32, i32* %arrayidx43, align 16
  %add44 = add nsw i32 %add42, %26
  store i32 %add44, i32* %col, align 4
  %27 = load i32, i32* %i, align 4
  %arrayidx45 = getelementptr inbounds [8 x [64 x i8]], [8 x [64 x i8]]* @S, i32 0, i32 %27
  %28 = load i32, i32* %row, align 4
  %mul46 = mul nsw i32 %28, 16
  %29 = load i32, i32* %col, align 4
  %add47 = add nsw i32 %mul46, %29
  %arrayidx48 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx45, i32 0, i32 %add47
  %30 = load i8, i8* %arrayidx48, align 1
  %conv49 = zext i8 %30 to i32
  store i32 %conv49, i32* %m, align 4
  store i32 1, i32* %n, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end30
  %31 = load i32, i32* %m, align 4
  %cmp50 = icmp sgt i32 %31, 0
  br i1 %cmp50, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %32 = load i32, i32* %m, align 4
  %rem = srem i32 %32, 2
  store i32 %rem, i32* %p, align 4
  %arraydecay52 = getelementptr inbounds [4 x i8], [4 x i8]* %sr, i32 0, i32 0
  %33 = load i32, i32* %i, align 4
  %add53 = add nsw i32 %33, 1
  %mul54 = mul nsw i32 %add53, 4
  %34 = load i32, i32* %n, align 4
  %sub55 = sub nsw i32 %mul54, %34
  %35 = load i32, i32* %p, align 4
  %cmp56 = icmp eq i32 %35, 1
  %conv57 = zext i1 %cmp56 to i32
  call void @pokeBit(i8* %arraydecay52, i32 %sub55, i32 %conv57)
  %36 = load i32, i32* %m, align 4
  %div = sdiv i32 %36, 2
  store i32 %div, i32* %m, align 4
  %37 = load i32, i32* %n, align 4
  %inc58 = add nsw i32 %37, 1
  store i32 %inc58, i32* %n, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %for.inc59

for.inc59:                                        ; preds = %while.end
  %38 = load i32, i32* %i, align 4
  %inc60 = add nsw i32 %38, 1
  store i32 %inc60, i32* %i, align 4
  br label %for.cond15

for.end61:                                        ; preds = %for.cond15
  store i32 0, i32* %i, align 4
  br label %for.cond62

for.cond62:                                       ; preds = %for.inc71, %for.end61
  %39 = load i32, i32* %i, align 4
  %cmp63 = icmp slt i32 %39, 32
  br i1 %cmp63, label %for.body65, label %for.end73

for.body65:                                       ; preds = %for.cond62
  %40 = load i8*, i8** %sp.addr, align 4
  %41 = load i32, i32* %i, align 4
  %arraydecay66 = getelementptr inbounds [4 x i8], [4 x i8]* %sr, i32 0, i32 0
  %42 = load i32, i32* %i, align 4
  %arrayidx67 = getelementptr inbounds [32 x i8], [32 x i8]* @P, i32 0, i32 %42
  %43 = load i8, i8* %arrayidx67, align 1
  %conv68 = zext i8 %43 to i32
  %sub69 = sub nsw i32 %conv68, 1
  %call70 = call i32 @peekBit(i8* %arraydecay66, i32 %sub69)
  call void @pokeBit(i8* %40, i32 %41, i32 %call70)
  br label %for.inc71

for.inc71:                                        ; preds = %for.body65
  %44 = load i32, i32* %i, align 4
  %inc72 = add nsw i32 %44, 1
  store i32 %inc72, i32* %i, align 4
  br label %for.cond62

for.end73:                                        ; preds = %for.cond62
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal signext i8 @toHex(i8 zeroext %in) #0 {
entry:
  %retval = alloca i8, align 1
  %in.addr = alloca i8, align 1
  store i8 %in, i8* %in.addr, align 1
  %0 = load i8, i8* %in.addr, align 1
  %conv = zext i8 %0 to i32
  %cmp = icmp sle i32 0, %conv
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i8, i8* %in.addr, align 1
  %conv2 = zext i8 %1 to i32
  %cmp3 = icmp slt i32 %conv2, 10
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %2 = load i8, i8* %in.addr, align 1
  %conv5 = zext i8 %2 to i32
  %add = add nsw i32 48, %conv5
  %conv6 = trunc i32 %add to i8
  store i8 %conv6, i8* %retval, align 1
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %3 = load i8, i8* %in.addr, align 1
  %conv7 = zext i8 %3 to i32
  %cmp8 = icmp sle i32 10, %conv7
  br i1 %cmp8, label %land.lhs.true10, label %if.end18

land.lhs.true10:                                  ; preds = %if.end
  %4 = load i8, i8* %in.addr, align 1
  %conv11 = zext i8 %4 to i32
  %cmp12 = icmp sle i32 %conv11, 15
  br i1 %cmp12, label %if.then14, label %if.end18

if.then14:                                        ; preds = %land.lhs.true10
  %5 = load i8, i8* %in.addr, align 1
  %conv15 = zext i8 %5 to i32
  %add16 = add nsw i32 65, %conv15
  %sub = sub nsw i32 %add16, 10
  %conv17 = trunc i32 %sub to i8
  store i8 %conv17, i8* %retval, align 1
  br label %return

if.end18:                                         ; preds = %land.lhs.true10, %if.end
  store i8 0, i8* %retval, align 1
  br label %return

return:                                           ; preds = %if.end18, %if.then14, %if.then
  %6 = load i8, i8* %retval, align 1
  ret i8 %6
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i8, i8* %in.addr, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = zext i8 %0 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp = icmp sle i32 0, %conv
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
%2:i1 = sle 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %1 = load i8, i8* %in.addr, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv2 = zext i8 %1 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp3 = icmp slt i32 %conv2, 10
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
%2:i1 = slt %1, 10:i32
infer %2

; *****
; For LLVM instruction:
;  %2 = load i8, i8* %in.addr, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv5 = zext i8 %2 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %add = add nsw i32 48, %conv5
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
%2:i32 = addnsw 48:i32, %1
infer %2 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %conv6 = trunc i32 %add to i8
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
%2:i32 = addnsw 48:i32, %1
%3:i8 = trunc %2
infer %3

; *****
; For LLVM instruction:
;  %3 = load i8, i8* %in.addr, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv7 = zext i8 %3 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp8 = icmp sle i32 10, %conv7
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
%2:i1 = sle 10:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %4 = load i8, i8* %in.addr, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv11 = zext i8 %4 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp12 = icmp sle i32 %conv11, 15
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
%2:i1 = sle %1, 15:i32
infer %2

; *****
; For LLVM instruction:
;  %5 = load i8, i8* %in.addr, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv15 = zext i8 %5 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %add16 = add nsw i32 65, %conv15
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
%2:i32 = addnsw 65:i32, %1
infer %2 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %add16, 10
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
%2:i32 = addnsw 65:i32, %1
%3:i32 = subnsw %2, 10:i32
infer %3 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %conv17 = trunc i32 %sub to i8
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
%2:i32 = addnsw 65:i32, %1
%3:i32 = subnsw %2, 10:i32
%4:i8 = trunc %3
infer %4

; *****
; For LLVM instruction:
;  %6 = load i8, i8* %retval, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = zext %0
%2:i1 = sle 0:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
second query is UNSAT-- this guess works
Dataflow Pruned 0/0
There are 1 Guesses
There are 1 RHSs before deduplication
There are 1 RHSs after deduplication
"
; No valid RHS in the list
#########################################################

Module before replacement:
; ModuleID = './Data_Encryption_Standard.c.bc'
source_filename = "./Data_Encryption_Standard.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.String = type { i8*, i32 }

@.str = private unnamed_addr constant [14 x i8] c"Key     : %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"Message : %s\0A\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"Encoded : %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"Decoded : %s\0A\0A\00", align 1
@__const.main.keys = private unnamed_addr constant [3 x [8 x i8]] [[8 x i8] c"\134Wy\9B\BC\DF\F1", [8 x i8] c"\0E2\922\EAm\0Ds", [8 x i8] c"\0E2\922\EAm\0Ds"], align 16
@__const.main.message1 = private unnamed_addr constant [8 x i8] c"\01#Eg\89\AB\CD\EF", align 1
@__const.main.message2 = private unnamed_addr constant [8 x i8] c"\87\87\87\87\87\87\87\87", align 1
@__const.main.message3 = private unnamed_addr constant [38 x i8] c"Your lips are smoother than vaseline\0D\0A", align 16
@PC1 = internal constant [56 x i8] c"91)!\19\11\09\01:2*\22\1A\12\0A\02;3+#\1B\13\0B\03<4,$?7/'\1F\17\0F\07>6.&\1E\16\0E\06=5-%\1D\15\0D\05\1C\14\0C\04", align 16
@SHIFTS = internal constant [16 x i8] c"\01\01\02\02\02\02\02\02\01\02\02\02\02\02\02\01", align 16
@PC2 = internal constant [48 x i8] c"\0E\11\0B\18\01\05\03\1C\0F\06\15\0A\17\13\0C\04\1A\08\10\07\1B\14\0D\02)4\1F%/7\1E(3-!0,1'8\225.*2$\1D ", align 16
@IP = internal constant [64 x i8] c":2*\22\1A\12\0A\02<4,$\1C\14\0C\04>6.&\1E\16\0E\06@80( \18\10\0891)!\19\11\09\01;3+#\1B\13\0B\03=5-%\1D\15\0D\05?7/'\1F\17\0F\07", align 16
@IP2 = internal constant [64 x i8] c"(\080\108\18@ '\07/\0F7\17?\1F&\06.\0E6\16>\1E%\05-\0D5\15=\1D$\04,\0C4\14<\1C#\03+\0B3\13;\1B\22\02*\0A2\12:\1A!\01)\091\119\19", align 16
@E = internal constant [48 x i8] c" \01\02\03\04\05\04\05\06\07\08\09\08\09\0A\0B\0C\0D\0C\0D\0E\0F\10\11\10\11\12\13\14\15\14\15\16\17\18\19\18\19\1A\1B\1C\1D\1C\1D\1E\1F \01", align 16
@S = internal constant [8 x [64 x i8]] [[64 x i8] c"\0E\04\0D\01\02\0F\0B\08\03\0A\06\0C\05\09\00\07\00\0F\07\04\0E\02\0D\01\0A\06\0C\0B\09\05\03\08\04\01\0E\08\0D\06\02\0B\0F\0C\09\07\03\0A\05\00\0F\0C\08\02\04\09\01\07\05\0B\03\0E\0A\00\06\0D", [64 x i8] c"\0F\01\08\0E\06\0B\03\04\09\07\02\0D\0C\00\05\0A\03\0D\04\07\0F\02\08\0E\0C\00\01\0A\06\09\0B\05\00\0E\07\0B\0A\04\0D\01\05\08\0C\06\09\03\02\0F\0D\08\0A\01\03\0F\04\02\0B\06\07\0C\00\05\0E\09", [64 x i8] c"\0A\00\09\0E\06\03\0F\05\01\0D\0C\07\0B\04\02\08\0D\07\00\09\03\04\06\0A\02\08\05\0E\0C\0B\0F\01\0D\06\04\09\08\0F\03\00\0B\01\02\0C\05\0A\0E\07\01\0A\0D\00\06\09\08\07\04\0F\0E\03\0B\05\02\0C", [64 x i8] c"\07\0D\0E\03\00\06\09\0A\01\02\08\05\0B\0C\04\0F\0D\08\0B\05\06\0F\00\03\04\07\02\0C\01\0A\0E\09\0A\06\09\00\0C\0B\07\0D\0F\01\03\0E\05\02\08\04\03\0F\00\06\0A\01\0D\08\09\04\05\0B\0C\07\02\0E", [64 x i8] c"\02\0C\04\01\07\0A\0B\06\08\05\03\0F\0D\00\0E\09\0E\0B\02\0C\04\07\0D\01\05\00\0F\0A\03\09\08\06\04\02\01\0B\0A\0D\07\08\0F\09\0C\05\06\03\00\0E\0B\08\0C\07\01\0E\02\0D\06\0F\00\09\0A\04\05\03", [64 x i8] c"\0C\01\0A\0F\09\02\06\08\00\0D\03\04\0E\07\05\0B\0A\0F\04\02\07\0C\09\05\06\01\0D\0E\00\0B\03\08\09\0E\0F\05\02\08\0C\03\07\00\04\0A\01\0D\0B\06\04\03\02\0C\09\05\0F\0A\0B\0E\01\07\06\00\08\0D", [64 x i8] c"\04\0B\02\0E\0F\00\08\0D\03\0C\09\07\05\0A\06\01\0D\00\0B\07\04\09\01\0A\0E\03\05\0C\02\0F\08\06\01\04\0B\0D\0C\03\07\0E\0A\0F\06\08\00\05\09\02\06\0B\0D\08\01\04\0A\07\09\05\00\0F\0E\02\03\0C", [64 x i8] c"\0D\02\08\04\06\0F\0B\01\0A\09\03\0E\05\00\0C\07\01\0F\0D\08\0A\03\07\04\0C\05\06\0B\00\0E\09\02\07\0B\04\01\09\0C\0E\02\00\06\0A\0D\0F\03\05\08\02\01\0E\07\04\0A\08\0D\0F\0C\09\00\03\05\06\0B"], align 16
@P = internal constant [32 x i8] c"\10\07\14\15\1D\0C\1C\11\01\0F\17\1A\05\12\1F\0A\02\08\18\0E \1B\03\09\13\0D\1E\06\16\0B\04\19", align 16
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @encrypt(%struct.String* noalias sret align 4 %agg.result, i8* %key, i8* %message, i32 %len) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %message.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %ks = alloca [17 x [6 x i8]], align 16
  %padByte = alloca i8, align 1
  %i = alloca i32, align 4
  store i8* %key, i8** %key.addr, align 4
  store i8* %message, i8** %message.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = bitcast %struct.String* %agg.result to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  %1 = load i8*, i8** %key.addr, align 4
  %arraydecay = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  call void @getSubKeys(i8* %1, [6 x i8]* %arraydecay)
  %2 = load i32, i32* %len.addr, align 4
  %rem = srem i32 %2, 8
  %sub = sub nsw i32 8, %rem
  %conv = trunc i32 %sub to i8
  store i8 %conv, i8* %padByte, align 1
  %3 = load i32, i32* %len.addr, align 4
  %4 = load i8, i8* %padByte, align 1
  %conv1 = zext i8 %4 to i32
  %add = add nsw i32 %3, %conv1
  %len2 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  store i32 %add, i32* %len2, align 4
  %len3 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %5 = load i32, i32* %len3, align 4
  %call = call noalias i8* @malloc(i32 %5)
  %data = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  store i8* %call, i8** %data, align 4
  %data4 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %6 = load i8*, i8** %data4, align 4
  %7 = load i8*, i8** %message.addr, align 4
  %8 = load i32, i32* %len.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %6, i8* align 1 %7, i32 %8, i1 false)
  %data5 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %9 = load i8*, i8** %data5, align 4
  %10 = load i32, i32* %len.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %9, i32 %10
  %11 = load i8, i8* %padByte, align 1
  %12 = load i8, i8* %padByte, align 1
  %conv7 = zext i8 %12 to i32
  call void @llvm.memset.p0i8.i32(i8* align 1 %arrayidx, i8 %11, i32 %conv7, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %13 = load i32, i32* %i, align 4
  %len8 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %14 = load i32, i32* %len8, align 4
  %cmp = icmp slt i32 %13, %14
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %data10 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %15 = load i8*, i8** %data10, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds i8, i8* %15, i32 %16
  %arraydecay12 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  %data13 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %17 = load i8*, i8** %data13, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds i8, i8* %17, i32 %18
  call void @processMessage(i8* %arrayidx11, [6 x i8]* %arraydecay12, i8* %arrayidx14)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %19 = load i32, i32* %i, align 4
  %add15 = add nsw i32 %19, 8
  store i32 %add15, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define internal void @getSubKeys(i8* %key, [6 x i8]* %ks) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %ks.addr = alloca [6 x i8]*, align 4
  %c = alloca [17 x [7 x i8]], align 16
  %d = alloca [17 x [4 x i8]], align 16
  %kp = alloca [7 x i8], align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i8* %key, i8** %key.addr, align 4
  store [6 x i8]* %ks, [6 x i8]** %ks.addr, align 4
  %arraydecay = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 0
  %0 = bitcast [7 x i8]* %arraydecay to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 119, i1 false)
  %arraydecay1 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 0
  %1 = bitcast [4 x i8]* %arraydecay1 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %1, i8 0, i32 68, i1 false)
  %2 = load [6 x i8]*, [6 x i8]** %ks.addr, align 4
  %3 = bitcast [6 x i8]* %2 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 1 %3, i8 0, i32 102, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %4, 56
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay2 = getelementptr inbounds [7 x i8], [7 x i8]* %kp, i32 0, i32 0
  %5 = load i32, i32* %i, align 4
  %6 = load i8*, i8** %key.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [56 x i8], [56 x i8]* @PC1, i32 0, i32 %7
  %8 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %8 to i32
  %sub = sub nsw i32 %conv, 1
  %call = call i32 @peekBit(i8* %6, i32 %sub)
  call void @pokeBit(i8* %arraydecay2, i32 %5, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc15, %for.end
  %10 = load i32, i32* %i, align 4
  %cmp4 = icmp slt i32 %10, 28
  br i1 %cmp4, label %for.body6, label %for.end17

for.body6:                                        ; preds = %for.cond3
  %arrayidx7 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 0
  %arraydecay8 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx7, i32 0, i32 0
  %11 = load i32, i32* %i, align 4
  %arraydecay9 = getelementptr inbounds [7 x i8], [7 x i8]* %kp, i32 0, i32 0
  %12 = load i32, i32* %i, align 4
  %call10 = call i32 @peekBit(i8* %arraydecay9, i32 %12)
  call void @pokeBit(i8* %arraydecay8, i32 %11, i32 %call10)
  %arrayidx11 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 0
  %arraydecay12 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx11, i32 0, i32 0
  %13 = load i32, i32* %i, align 4
  %arraydecay13 = getelementptr inbounds [7 x i8], [7 x i8]* %kp, i32 0, i32 0
  %14 = load i32, i32* %i, align 4
  %add = add nsw i32 %14, 28
  %call14 = call i32 @peekBit(i8* %arraydecay13, i32 %add)
  call void @pokeBit(i8* %arraydecay12, i32 %13, i32 %call14)
  br label %for.inc15

for.inc15:                                        ; preds = %for.body6
  %15 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %15, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond3

for.end17:                                        ; preds = %for.cond3
  store i32 1, i32* %i, align 4
  br label %for.cond18

for.cond18:                                       ; preds = %for.inc38, %for.end17
  %16 = load i32, i32* %i, align 4
  %cmp19 = icmp slt i32 %16, 17
  br i1 %cmp19, label %for.body21, label %for.end40

for.body21:                                       ; preds = %for.cond18
  %17 = load i32, i32* %i, align 4
  %sub22 = sub nsw i32 %17, 1
  %arrayidx23 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %sub22
  %arraydecay24 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx23, i32 0, i32 0
  %18 = load i32, i32* %i, align 4
  %sub25 = sub nsw i32 %18, 1
  %arrayidx26 = getelementptr inbounds [16 x i8], [16 x i8]* @SHIFTS, i32 0, i32 %sub25
  %19 = load i8, i8* %arrayidx26, align 1
  %conv27 = zext i8 %19 to i32
  %20 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %20
  %arraydecay29 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx28, i32 0, i32 0
  call void @shiftLeft(i8* %arraydecay24, i32 28, i32 %conv27, i8* %arraydecay29)
  %21 = load i32, i32* %i, align 4
  %sub30 = sub nsw i32 %21, 1
  %arrayidx31 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 %sub30
  %arraydecay32 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx31, i32 0, i32 0
  %22 = load i32, i32* %i, align 4
  %sub33 = sub nsw i32 %22, 1
  %arrayidx34 = getelementptr inbounds [16 x i8], [16 x i8]* @SHIFTS, i32 0, i32 %sub33
  %23 = load i8, i8* %arrayidx34, align 1
  %conv35 = zext i8 %23 to i32
  %24 = load i32, i32* %i, align 4
  %arrayidx36 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 %24
  %arraydecay37 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx36, i32 0, i32 0
  call void @shiftLeft(i8* %arraydecay32, i32 28, i32 %conv35, i8* %arraydecay37)
  br label %for.inc38

for.inc38:                                        ; preds = %for.body21
  %25 = load i32, i32* %i, align 4
  %inc39 = add nsw i32 %25, 1
  store i32 %inc39, i32* %i, align 4
  br label %for.cond18

for.end40:                                        ; preds = %for.cond18
  store i32 1, i32* %i, align 4
  br label %for.cond41

for.cond41:                                       ; preds = %for.inc58, %for.end40
  %26 = load i32, i32* %i, align 4
  %cmp42 = icmp slt i32 %26, 17
  br i1 %cmp42, label %for.body44, label %for.end60

for.body44:                                       ; preds = %for.cond41
  store i32 28, i32* %j, align 4
  br label %for.cond45

for.cond45:                                       ; preds = %for.inc55, %for.body44
  %27 = load i32, i32* %j, align 4
  %cmp46 = icmp slt i32 %27, 56
  br i1 %cmp46, label %for.body48, label %for.end57

for.body48:                                       ; preds = %for.cond45
  %28 = load i32, i32* %i, align 4
  %arrayidx49 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %28
  %arraydecay50 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx49, i32 0, i32 0
  %29 = load i32, i32* %j, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx51 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 %30
  %arraydecay52 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx51, i32 0, i32 0
  %31 = load i32, i32* %j, align 4
  %sub53 = sub nsw i32 %31, 28
  %call54 = call i32 @peekBit(i8* %arraydecay52, i32 %sub53)
  call void @pokeBit(i8* %arraydecay50, i32 %29, i32 %call54)
  br label %for.inc55

for.inc55:                                        ; preds = %for.body48
  %32 = load i32, i32* %j, align 4
  %inc56 = add nsw i32 %32, 1
  store i32 %inc56, i32* %j, align 4
  br label %for.cond45

for.end57:                                        ; preds = %for.cond45
  br label %for.inc58

for.inc58:                                        ; preds = %for.end57
  %33 = load i32, i32* %i, align 4
  %inc59 = add nsw i32 %33, 1
  store i32 %inc59, i32* %i, align 4
  br label %for.cond41

for.end60:                                        ; preds = %for.cond41
  store i32 1, i32* %i, align 4
  br label %for.cond61

for.cond61:                                       ; preds = %for.inc80, %for.end60
  %34 = load i32, i32* %i, align 4
  %cmp62 = icmp slt i32 %34, 17
  br i1 %cmp62, label %for.body64, label %for.end82

for.body64:                                       ; preds = %for.cond61
  store i32 0, i32* %j, align 4
  br label %for.cond65

for.cond65:                                       ; preds = %for.inc77, %for.body64
  %35 = load i32, i32* %j, align 4
  %cmp66 = icmp slt i32 %35, 48
  br i1 %cmp66, label %for.body68, label %for.end79

for.body68:                                       ; preds = %for.cond65
  %36 = load [6 x i8]*, [6 x i8]** %ks.addr, align 4
  %37 = load i32, i32* %i, align 4
  %arrayidx69 = getelementptr inbounds [6 x i8], [6 x i8]* %36, i32 %37
  %arraydecay70 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx69, i32 0, i32 0
  %38 = load i32, i32* %j, align 4
  %39 = load i32, i32* %i, align 4
  %arrayidx71 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %39
  %arraydecay72 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx71, i32 0, i32 0
  %40 = load i32, i32* %j, align 4
  %arrayidx73 = getelementptr inbounds [48 x i8], [48 x i8]* @PC2, i32 0, i32 %40
  %41 = load i8, i8* %arrayidx73, align 1
  %conv74 = zext i8 %41 to i32
  %sub75 = sub nsw i32 %conv74, 1
  %call76 = call i32 @peekBit(i8* %arraydecay72, i32 %sub75)
  call void @pokeBit(i8* %arraydecay70, i32 %38, i32 %call76)
  br label %for.inc77

for.inc77:                                        ; preds = %for.body68
  %42 = load i32, i32* %j, align 4
  %inc78 = add nsw i32 %42, 1
  store i32 %inc78, i32* %j, align 4
  br label %for.cond65

for.end79:                                        ; preds = %for.cond65
  br label %for.inc80

for.inc80:                                        ; preds = %for.end79
  %43 = load i32, i32* %i, align 4
  %inc81 = add nsw i32 %43, 1
  store i32 %inc81, i32* %i, align 4
  br label %for.cond61

for.end82:                                        ; preds = %for.cond61
  ret void
}

declare noalias i8* @malloc(i32 %0) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: noinline nounwind optnone
define internal void @processMessage(i8* %message, [6 x i8]* %ks, i8* %ep) #0 {
entry:
  %message.addr = alloca i8*, align 4
  %ks.addr = alloca [6 x i8]*, align 4
  %ep.addr = alloca i8*, align 4
  %left = alloca [17 x [4 x i8]], align 16
  %right = alloca [17 x [4 x i8]], align 16
  %mp = alloca [8 x i8], align 1
  %e = alloca [8 x i8], align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %fs = alloca [4 x i8], align 1
  store i8* %message, i8** %message.addr, align 4
  store [6 x i8]* %ks, [6 x i8]** %ks.addr, align 4
  store i8* %ep, i8** %ep.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 64
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %mp, i32 0, i32 0
  %1 = load i32, i32* %i, align 4
  %2 = load i8*, i8** %message.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [64 x i8], [64 x i8]* @IP, i32 0, i32 %3
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %sub = sub nsw i32 %conv, 1
  %call = call i32 @peekBit(i8* %2, i32 %sub)
  call void @pokeBit(i8* %arraydecay, i32 %1, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc13, %for.end
  %6 = load i32, i32* %i, align 4
  %cmp2 = icmp slt i32 %6, 32
  br i1 %cmp2, label %for.body4, label %for.end15

for.body4:                                        ; preds = %for.cond1
  %arrayidx5 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 0
  %arraydecay6 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx5, i32 0, i32 0
  %7 = load i32, i32* %i, align 4
  %arraydecay7 = getelementptr inbounds [8 x i8], [8 x i8]* %mp, i32 0, i32 0
  %8 = load i32, i32* %i, align 4
  %call8 = call i32 @peekBit(i8* %arraydecay7, i32 %8)
  call void @pokeBit(i8* %arraydecay6, i32 %7, i32 %call8)
  %arrayidx9 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 0
  %arraydecay10 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx9, i32 0, i32 0
  %9 = load i32, i32* %i, align 4
  %arraydecay11 = getelementptr inbounds [8 x i8], [8 x i8]* %mp, i32 0, i32 0
  %10 = load i32, i32* %i, align 4
  %add = add nsw i32 %10, 32
  %call12 = call i32 @peekBit(i8* %arraydecay11, i32 %add)
  call void @pokeBit(i8* %arraydecay10, i32 %9, i32 %call12)
  br label %for.inc13

for.inc13:                                        ; preds = %for.body4
  %11 = load i32, i32* %i, align 4
  %inc14 = add nsw i32 %11, 1
  store i32 %inc14, i32* %i, align 4
  br label %for.cond1

for.end15:                                        ; preds = %for.cond1
  store i32 1, i32* %i, align 4
  br label %for.cond16

for.cond16:                                       ; preds = %for.inc50, %for.end15
  %12 = load i32, i32* %i, align 4
  %cmp17 = icmp slt i32 %12, 17
  br i1 %cmp17, label %for.body19, label %for.end52

for.body19:                                       ; preds = %for.cond16
  %13 = load i32, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 %13
  %arraydecay21 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx20, i32 0, i32 0
  %14 = load i32, i32* %i, align 4
  %sub22 = sub nsw i32 %14, 1
  %arrayidx23 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 %sub22
  %arraydecay24 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx23, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %arraydecay21, i8* align 4 %arraydecay24, i32 4, i1 false)
  %15 = load i32, i32* %i, align 4
  %sub25 = sub nsw i32 %15, 1
  %arrayidx26 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 %sub25
  %arraydecay27 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx26, i32 0, i32 0
  %16 = load [6 x i8]*, [6 x i8]** %ks.addr, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds [6 x i8], [6 x i8]* %16, i32 %17
  %arraydecay29 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx28, i32 0, i32 0
  %arraydecay30 = getelementptr inbounds [4 x i8], [4 x i8]* %fs, i32 0, i32 0
  call void @f(i8* %arraydecay27, i8* %arraydecay29, i8* %arraydecay30)
  store i32 0, i32* %j, align 4
  br label %for.cond31

for.cond31:                                       ; preds = %for.inc42, %for.body19
  %18 = load i32, i32* %j, align 4
  %cmp32 = icmp slt i32 %18, 4
  br i1 %cmp32, label %for.body34, label %for.end44

for.body34:                                       ; preds = %for.cond31
  %19 = load i32, i32* %j, align 4
  %arrayidx35 = getelementptr inbounds [4 x i8], [4 x i8]* %fs, i32 0, i32 %19
  %20 = load i8, i8* %arrayidx35, align 1
  %conv36 = zext i8 %20 to i32
  %21 = load i32, i32* %i, align 4
  %sub37 = sub nsw i32 %21, 1
  %arrayidx38 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 %sub37
  %22 = load i32, i32* %j, align 4
  %arrayidx39 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx38, i32 0, i32 %22
  %23 = load i8, i8* %arrayidx39, align 1
  %conv40 = zext i8 %23 to i32
  %xor = xor i32 %conv40, %conv36
  %conv41 = trunc i32 %xor to i8
  store i8 %conv41, i8* %arrayidx39, align 1
  br label %for.inc42

for.inc42:                                        ; preds = %for.body34
  %24 = load i32, i32* %j, align 4
  %inc43 = add nsw i32 %24, 1
  store i32 %inc43, i32* %j, align 4
  br label %for.cond31

for.end44:                                        ; preds = %for.cond31
  %25 = load i32, i32* %i, align 4
  %arrayidx45 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 %25
  %arraydecay46 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx45, i32 0, i32 0
  %26 = load i32, i32* %i, align 4
  %sub47 = sub nsw i32 %26, 1
  %arrayidx48 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 %sub47
  %arraydecay49 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx48, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %arraydecay46, i8* align 4 %arraydecay49, i32 4, i1 false)
  br label %for.inc50

for.inc50:                                        ; preds = %for.end44
  %27 = load i32, i32* %i, align 4
  %inc51 = add nsw i32 %27, 1
  store i32 %inc51, i32* %i, align 4
  br label %for.cond16

for.end52:                                        ; preds = %for.cond16
  store i32 0, i32* %i, align 4
  br label %for.cond53

for.cond53:                                       ; preds = %for.inc61, %for.end52
  %28 = load i32, i32* %i, align 4
  %cmp54 = icmp slt i32 %28, 32
  br i1 %cmp54, label %for.body56, label %for.end63

for.body56:                                       ; preds = %for.cond53
  %arraydecay57 = getelementptr inbounds [8 x i8], [8 x i8]* %e, i32 0, i32 0
  %29 = load i32, i32* %i, align 4
  %arrayidx58 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 16
  %arraydecay59 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx58, i32 0, i32 0
  %30 = load i32, i32* %i, align 4
  %call60 = call i32 @peekBit(i8* %arraydecay59, i32 %30)
  call void @pokeBit(i8* %arraydecay57, i32 %29, i32 %call60)
  br label %for.inc61

for.inc61:                                        ; preds = %for.body56
  %31 = load i32, i32* %i, align 4
  %inc62 = add nsw i32 %31, 1
  store i32 %inc62, i32* %i, align 4
  br label %for.cond53

for.end63:                                        ; preds = %for.cond53
  store i32 32, i32* %i, align 4
  br label %for.cond64

for.cond64:                                       ; preds = %for.inc73, %for.end63
  %32 = load i32, i32* %i, align 4
  %cmp65 = icmp slt i32 %32, 64
  br i1 %cmp65, label %for.body67, label %for.end75

for.body67:                                       ; preds = %for.cond64
  %arraydecay68 = getelementptr inbounds [8 x i8], [8 x i8]* %e, i32 0, i32 0
  %33 = load i32, i32* %i, align 4
  %arrayidx69 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 16
  %arraydecay70 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx69, i32 0, i32 0
  %34 = load i32, i32* %i, align 4
  %sub71 = sub nsw i32 %34, 32
  %call72 = call i32 @peekBit(i8* %arraydecay70, i32 %sub71)
  call void @pokeBit(i8* %arraydecay68, i32 %33, i32 %call72)
  br label %for.inc73

for.inc73:                                        ; preds = %for.body67
  %35 = load i32, i32* %i, align 4
  %inc74 = add nsw i32 %35, 1
  store i32 %inc74, i32* %i, align 4
  br label %for.cond64

for.end75:                                        ; preds = %for.cond64
  store i32 0, i32* %i, align 4
  br label %for.cond76

for.cond76:                                       ; preds = %for.inc85, %for.end75
  %36 = load i32, i32* %i, align 4
  %cmp77 = icmp slt i32 %36, 64
  br i1 %cmp77, label %for.body79, label %for.end87

for.body79:                                       ; preds = %for.cond76
  %37 = load i8*, i8** %ep.addr, align 4
  %38 = load i32, i32* %i, align 4
  %arraydecay80 = getelementptr inbounds [8 x i8], [8 x i8]* %e, i32 0, i32 0
  %39 = load i32, i32* %i, align 4
  %arrayidx81 = getelementptr inbounds [64 x i8], [64 x i8]* @IP2, i32 0, i32 %39
  %40 = load i8, i8* %arrayidx81, align 1
  %conv82 = zext i8 %40 to i32
  %sub83 = sub nsw i32 %conv82, 1
  %call84 = call i32 @peekBit(i8* %arraydecay80, i32 %sub83)
  call void @pokeBit(i8* %37, i32 %38, i32 %call84)
  br label %for.inc85

for.inc85:                                        ; preds = %for.body79
  %41 = load i32, i32* %i, align 4
  %inc86 = add nsw i32 %41, 1
  store i32 %inc86, i32* %i, align 4
  br label %for.cond76

for.end87:                                        ; preds = %for.cond76
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @decrypt(%struct.String* noalias sret align 4 %agg.result, i8* %key, i8* %message, i32 %len) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %message.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %ks = alloca [17 x [6 x i8]], align 16
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %padByte = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8* %key, i8** %key.addr, align 4
  store i8* %message, i8** %message.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = bitcast %struct.String* %agg.result to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  %1 = load i8*, i8** %key.addr, align 4
  %arraydecay = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  call void @getSubKeys(i8* %1, [6 x i8]* %arraydecay)
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc12, %entry
  %2 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, 9
  br i1 %cmp, label %for.body, label %for.end14

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %3, 6
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %4
  %5 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx, i32 0, i32 %5
  %6 = load i8, i8* %arrayidx4, align 1
  store i8 %6, i8* %temp, align 1
  %7 = load i32, i32* %i, align 4
  %sub = sub nsw i32 17, %7
  %arrayidx5 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %sub
  %8 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx5, i32 0, i32 %8
  %9 = load i8, i8* %arrayidx6, align 1
  %10 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %10
  %11 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx7, i32 0, i32 %11
  store i8 %9, i8* %arrayidx8, align 1
  %12 = load i8, i8* %temp, align 1
  %13 = load i32, i32* %i, align 4
  %sub9 = sub nsw i32 17, %13
  %arrayidx10 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %sub9
  %14 = load i32, i32* %j, align 4
  %arrayidx11 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx10, i32 0, i32 %14
  store i8 %12, i8* %arrayidx11, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %15 = load i32, i32* %j, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc12

for.inc12:                                        ; preds = %for.end
  %16 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %16, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond

for.end14:                                        ; preds = %for.cond
  %17 = load i32, i32* %len.addr, align 4
  %call = call noalias i8* @malloc(i32 %17)
  %data = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  store i8* %call, i8** %data, align 4
  %data15 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %18 = load i8*, i8** %data15, align 4
  %19 = load i8*, i8** %message.addr, align 4
  %20 = load i32, i32* %len.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %18, i8* align 1 %19, i32 %20, i1 false)
  %21 = load i32, i32* %len.addr, align 4
  %len16 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  store i32 %21, i32* %len16, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond17

for.cond17:                                       ; preds = %for.inc26, %for.end14
  %22 = load i32, i32* %i, align 4
  %len18 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %23 = load i32, i32* %len18, align 4
  %cmp19 = icmp slt i32 %22, %23
  br i1 %cmp19, label %for.body20, label %for.end27

for.body20:                                       ; preds = %for.cond17
  %data21 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %24 = load i8*, i8** %data21, align 4
  %25 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds i8, i8* %24, i32 %25
  %arraydecay23 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  %data24 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %26 = load i8*, i8** %data24, align 4
  %27 = load i32, i32* %i, align 4
  %arrayidx25 = getelementptr inbounds i8, i8* %26, i32 %27
  call void @processMessage(i8* %arrayidx22, [6 x i8]* %arraydecay23, i8* %arrayidx25)
  br label %for.inc26

for.inc26:                                        ; preds = %for.body20
  %28 = load i32, i32* %i, align 4
  %add = add nsw i32 %28, 8
  store i32 %add, i32* %i, align 4
  br label %for.cond17

for.end27:                                        ; preds = %for.cond17
  %data28 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %29 = load i8*, i8** %data28, align 4
  %30 = load i32, i32* %len.addr, align 4
  %sub29 = sub nsw i32 %30, 1
  %arrayidx30 = getelementptr inbounds i8, i8* %29, i32 %sub29
  %31 = load i8, i8* %arrayidx30, align 1
  store i8 %31, i8* %padByte, align 1
  %32 = load i8, i8* %padByte, align 1
  %conv = zext i8 %32 to i32
  %len31 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %33 = load i32, i32* %len31, align 4
  %sub32 = sub nsw i32 %33, %conv
  store i32 %sub32, i32* %len31, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @driver(i8* %key, i8* %message, i32 %len) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %message.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %encoded = alloca %struct.String, align 4
  %decoded = alloca %struct.String, align 4
  %buffer = alloca [128 x i8], align 16
  %tmp = alloca %struct.String, align 4
  %tmp9 = alloca %struct.String, align 4
  store i8* %key, i8** %key.addr, align 4
  store i8* %message, i8** %message.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load i8*, i8** %key.addr, align 4
  %arraydecay = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %0, i32 8, i8* %arraydecay)
  %arraydecay1 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i32 0, i32 0), i8* %arraydecay1)
  %1 = load i8*, i8** %message.addr, align 4
  %2 = load i32, i32* %len.addr, align 4
  %arraydecay2 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %1, i32 %2, i8* %arraydecay2)
  %arraydecay3 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0), i8* %arraydecay3)
  %3 = load i8*, i8** %key.addr, align 4
  %4 = load i8*, i8** %message.addr, align 4
  %5 = load i32, i32* %len.addr, align 4
  call void @encrypt(%struct.String* sret align 4 %tmp, i8* %3, i8* %4, i32 %5)
  %6 = bitcast %struct.String* %encoded to i8*
  %7 = bitcast %struct.String* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %6, i8* align 4 %7, i32 8, i1 false)
  %data = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  %8 = load i8*, i8** %data, align 4
  %len5 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 1
  %9 = load i32, i32* %len5, align 4
  %arraydecay6 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %8, i32 %9, i8* %arraydecay6)
  %arraydecay7 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0), i8* %arraydecay7)
  %10 = load i8*, i8** %key.addr, align 4
  %data10 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  %11 = load i8*, i8** %data10, align 4
  %len11 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 1
  %12 = load i32, i32* %len11, align 4
  call void @decrypt(%struct.String* sret align 4 %tmp9, i8* %10, i8* %11, i32 %12)
  %13 = bitcast %struct.String* %decoded to i8*
  %14 = bitcast %struct.String* %tmp9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %13, i8* align 4 %14, i32 8, i1 false)
  %data12 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 0
  %15 = load i8*, i8** %data12, align 4
  %len13 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 1
  %16 = load i32, i32* %len13, align 4
  %arraydecay14 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %15, i32 %16, i8* %arraydecay14)
  %arraydecay15 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0), i8* %arraydecay15)
  %len17 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 1
  %17 = load i32, i32* %len17, align 4
  %cmp = icmp sgt i32 %17, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %data18 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  %18 = load i8*, i8** %data18, align 4
  call void @free(i8* %18)
  %data19 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  store i8* null, i8** %data19, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %len20 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 1
  %19 = load i32, i32* %len20, align 4
  %cmp21 = icmp sgt i32 %19, 0
  br i1 %cmp21, label %if.then22, label %if.end25

if.then22:                                        ; preds = %if.end
  %data23 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 0
  %20 = load i8*, i8** %data23, align 4
  call void @free(i8* %20)
  %data24 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 0
  store i8* null, i8** %data24, align 4
  br label %if.end25

if.end25:                                         ; preds = %if.then22, %if.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @printBytes(i8* %ptr, i32 %len, i8* %out) #0 {
entry:
  %ptr.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  store i8* %ptr, i8** %ptr.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %len.addr, align 4
  %dec = add nsw i32 %0, -1
  store i32 %dec, i32* %len.addr, align 4
  %cmp = icmp sgt i32 %0, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i8*, i8** %ptr.addr, align 4
  %2 = load i8, i8* %1, align 1
  %conv = zext i8 %2 to i32
  %shr = ashr i32 %conv, 4
  %conv1 = trunc i32 %shr to i8
  %call = call signext i8 @toHex(i8 zeroext %conv1)
  %3 = load i8*, i8** %out.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %3, i32 1
  store i8* %incdec.ptr, i8** %out.addr, align 4
  store i8 %call, i8* %3, align 1
  %4 = load i8*, i8** %ptr.addr, align 4
  %5 = load i8, i8* %4, align 1
  %conv2 = zext i8 %5 to i32
  %and = and i32 %conv2, 15
  %conv3 = trunc i32 %and to i8
  %call4 = call signext i8 @toHex(i8 zeroext %conv3)
  %6 = load i8*, i8** %out.addr, align 4
  %incdec.ptr5 = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr5, i8** %out.addr, align 4
  store i8 %call4, i8* %6, align 1
  %7 = load i8*, i8** %ptr.addr, align 4
  %incdec.ptr6 = getelementptr inbounds i8, i8* %7, i32 1
  store i8* %incdec.ptr6, i8** %ptr.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %8 = load i8*, i8** %out.addr, align 4
  store i8 0, i8* %8, align 1
  ret void
}

declare i32 @printf(i8* %0, ...) #2

declare void @free(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %keys = alloca [3 x [8 x i8]], align 16
  %message1 = alloca [8 x i8], align 1
  %message2 = alloca [8 x i8], align 1
  %message3 = alloca [38 x i8], align 16
  %len = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [3 x [8 x i8]]* %keys to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([3 x [8 x i8]], [3 x [8 x i8]]* @__const.main.keys, i32 0, i32 0, i32 0), i32 24, i1 false)
  %1 = bitcast [8 x i8]* %message1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %1, i8* align 1 getelementptr inbounds ([8 x i8], [8 x i8]* @__const.main.message1, i32 0, i32 0), i32 8, i1 false)
  %2 = bitcast [8 x i8]* %message2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %2, i8* align 1 getelementptr inbounds ([8 x i8], [8 x i8]* @__const.main.message2, i32 0, i32 0), i32 8, i1 false)
  %3 = bitcast [38 x i8]* %message3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %3, i8* align 16 getelementptr inbounds ([38 x i8], [38 x i8]* @__const.main.message3, i32 0, i32 0), i32 38, i1 false)
  store i32 8, i32* %len, align 4
  %arrayidx = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* %keys, i32 0, i32 0
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %arrayidx, i32 0, i32 0
  %arraydecay1 = getelementptr inbounds [8 x i8], [8 x i8]* %message1, i32 0, i32 0
  %4 = load i32, i32* %len, align 4
  call void @driver(i8* %arraydecay, i8* %arraydecay1, i32 %4)
  store i32 8, i32* %len, align 4
  %arrayidx2 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* %keys, i32 0, i32 1
  %arraydecay3 = getelementptr inbounds [8 x i8], [8 x i8]* %arrayidx2, i32 0, i32 0
  %arraydecay4 = getelementptr inbounds [8 x i8], [8 x i8]* %message2, i32 0, i32 0
  %5 = load i32, i32* %len, align 4
  call void @driver(i8* %arraydecay3, i8* %arraydecay4, i32 %5)
  store i32 38, i32* %len, align 4
  %arrayidx5 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* %keys, i32 0, i32 2
  %arraydecay6 = getelementptr inbounds [8 x i8], [8 x i8]* %arrayidx5, i32 0, i32 0
  %arraydecay7 = getelementptr inbounds [38 x i8], [38 x i8]* %message3, i32 0, i32 0
  %6 = load i32, i32* %len, align 4
  call void @driver(i8* %arraydecay6, i8* %arraydecay7, i32 %6)
  ret i32 0
}

; Function Attrs: noinline nounwind optnone
define internal void @pokeBit(i8* %dst, i32 %index, i32 %value) #0 {
entry:
  %dst.addr = alloca i8*, align 4
  %index.addr = alloca i32, align 4
  %value.addr = alloca i32, align 4
  %cell = alloca i32, align 4
  %bit = alloca i32, align 4
  store i8* %dst, i8** %dst.addr, align 4
  store i32 %index, i32* %index.addr, align 4
  store i32 %value, i32* %value.addr, align 4
  %0 = load i32, i32* %index.addr, align 4
  %div = sdiv i32 %0, 8
  store i32 %div, i32* %cell, align 4
  %1 = load i32, i32* %index.addr, align 4
  %rem = srem i32 %1, 8
  %sub = sub nsw i32 7, %rem
  store i32 %sub, i32* %bit, align 4
  %2 = load i32, i32* %value.addr, align 4
  %cmp = icmp eq i32 %2, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %bit, align 4
  %shl = shl i32 1, %3
  %neg = xor i32 %shl, -1
  %4 = load i8*, i8** %dst.addr, align 4
  %5 = load i32, i32* %cell, align 4
  %arrayidx = getelementptr inbounds i8, i8* %4, i32 %5
  %6 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %6 to i32
  %and = and i32 %conv, %neg
  %conv1 = trunc i32 %and to i8
  store i8 %conv1, i8* %arrayidx, align 1
  br label %if.end

if.else:                                          ; preds = %entry
  %7 = load i32, i32* %bit, align 4
  %shl2 = shl i32 1, %7
  %8 = load i8*, i8** %dst.addr, align 4
  %9 = load i32, i32* %cell, align 4
  %arrayidx3 = getelementptr inbounds i8, i8* %8, i32 %9
  %10 = load i8, i8* %arrayidx3, align 1
  %conv4 = zext i8 %10 to i32
  %or = or i32 %conv4, %shl2
  %conv5 = trunc i32 %or to i8
  store i8 %conv5, i8* %arrayidx3, align 1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i32 @peekBit(i8* %src, i32 %index) #0 {
entry:
  %src.addr = alloca i8*, align 4
  %index.addr = alloca i32, align 4
  %cell = alloca i32, align 4
  %bit = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 4
  store i32 %index, i32* %index.addr, align 4
  %0 = load i32, i32* %index.addr, align 4
  %div = sdiv i32 %0, 8
  store i32 %div, i32* %cell, align 4
  %1 = load i32, i32* %index.addr, align 4
  %rem = srem i32 %1, 8
  %sub = sub nsw i32 7, %rem
  store i32 %sub, i32* %bit, align 4
  %2 = load i8*, i8** %src.addr, align 4
  %3 = load i32, i32* %cell, align 4
  %arrayidx = getelementptr inbounds i8, i8* %2, i32 %3
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %5 = load i32, i32* %bit, align 4
  %shl = shl i32 1, %5
  %and = and i32 %conv, %shl
  %cmp = icmp ne i32 %and, 0
  %conv1 = zext i1 %cmp to i32
  ret i32 %conv1
}

; Function Attrs: noinline nounwind optnone
define internal void @shiftLeft(i8* %src, i32 %len, i32 %times, i8* %dst) #0 {
entry:
  %src.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %times.addr = alloca i32, align 4
  %dst.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %t = alloca i32, align 4
  %temp = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %times, i32* %times.addr, align 4
  store i8* %dst, i8** %dst.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp sle i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8*, i8** %dst.addr, align 4
  %3 = load i32, i32* %i, align 4
  %4 = load i8*, i8** %src.addr, align 4
  %5 = load i32, i32* %i, align 4
  %call = call i32 @peekBit(i8* %4, i32 %5)
  call void @pokeBit(i8* %2, i32 %3, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %t, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc13, %for.end
  %7 = load i32, i32* %t, align 4
  %8 = load i32, i32* %times.addr, align 4
  %cmp2 = icmp sle i32 %7, %8
  br i1 %cmp2, label %for.body3, label %for.end15

for.body3:                                        ; preds = %for.cond1
  %9 = load i8*, i8** %dst.addr, align 4
  %call4 = call i32 @peekBit(i8* %9, i32 0)
  store i32 %call4, i32* %temp, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc9, %for.body3
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %len.addr, align 4
  %cmp6 = icmp sle i32 %10, %11
  br i1 %cmp6, label %for.body7, label %for.end11

for.body7:                                        ; preds = %for.cond5
  %12 = load i8*, i8** %dst.addr, align 4
  %13 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %13, 1
  %14 = load i8*, i8** %dst.addr, align 4
  %15 = load i32, i32* %i, align 4
  %call8 = call i32 @peekBit(i8* %14, i32 %15)
  call void @pokeBit(i8* %12, i32 %sub, i32 %call8)
  br label %for.inc9

for.inc9:                                         ; preds = %for.body7
  %16 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %16, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond5

for.end11:                                        ; preds = %for.cond5
  %17 = load i8*, i8** %dst.addr, align 4
  %18 = load i32, i32* %len.addr, align 4
  %sub12 = sub nsw i32 %18, 1
  %19 = load i32, i32* %temp, align 4
  call void @pokeBit(i8* %17, i32 %sub12, i32 %19)
  br label %for.inc13

for.inc13:                                        ; preds = %for.end11
  %20 = load i32, i32* %t, align 4
  %inc14 = add nsw i32 %20, 1
  store i32 %inc14, i32* %t, align 4
  br label %for.cond1

for.end15:                                        ; preds = %for.cond1
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @f(i8* %r, i8* %ks, i8* %sp) #0 {
entry:
  %r.addr = alloca i8*, align 4
  %ks.addr = alloca i8*, align 4
  %sp.addr = alloca i8*, align 4
  %er = alloca [6 x i8], align 1
  %sr = alloca [4 x i8], align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %b = alloca [6 x i32], align 16
  %k = alloca i32, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %m = alloca i32, align 4
  %n = alloca i32, align 4
  %p = alloca i32, align 4
  store i8* %r, i8** %r.addr, align 4
  store i8* %ks, i8** %ks.addr, align 4
  store i8* %sp, i8** %sp.addr, align 4
  %arraydecay = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  call void @llvm.memset.p0i8.i32(i8* align 1 %arraydecay, i8 0, i32 6, i1 false)
  %arraydecay1 = getelementptr inbounds [4 x i8], [4 x i8]* %sr, i32 0, i32 0
  call void @llvm.memset.p0i8.i32(i8* align 1 %arraydecay1, i8 0, i32 4, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 48
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay2 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  %1 = load i32, i32* %i, align 4
  %2 = load i8*, i8** %r.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [48 x i8], [48 x i8]* @E, i32 0, i32 %3
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %sub = sub nsw i32 %conv, 1
  %call = call i32 @peekBit(i8* %2, i32 %sub)
  call void @pokeBit(i8* %arraydecay2, i32 %1, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc12, %for.end
  %6 = load i32, i32* %i, align 4
  %cmp4 = icmp slt i32 %6, 6
  br i1 %cmp4, label %for.body6, label %for.end14

for.body6:                                        ; preds = %for.cond3
  %7 = load i8*, i8** %ks.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds i8, i8* %7, i32 %8
  %9 = load i8, i8* %arrayidx7, align 1
  %conv8 = zext i8 %9 to i32
  %10 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 %10
  %11 = load i8, i8* %arrayidx9, align 1
  %conv10 = zext i8 %11 to i32
  %xor = xor i32 %conv10, %conv8
  %conv11 = trunc i32 %xor to i8
  store i8 %conv11, i8* %arrayidx9, align 1
  br label %for.inc12

for.inc12:                                        ; preds = %for.body6
  %12 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %12, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond3

for.end14:                                        ; preds = %for.cond3
  store i32 0, i32* %i, align 4
  br label %for.cond15

for.cond15:                                       ; preds = %for.inc59, %for.end14
  %13 = load i32, i32* %i, align 4
  %cmp16 = icmp slt i32 %13, 8
  br i1 %cmp16, label %for.body18, label %for.end61

for.body18:                                       ; preds = %for.cond15
  %14 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %14, 6
  store i32 %mul, i32* %j, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond19

for.cond19:                                       ; preds = %for.inc28, %for.body18
  %15 = load i32, i32* %k, align 4
  %cmp20 = icmp slt i32 %15, 6
  br i1 %cmp20, label %for.body22, label %for.end30

for.body22:                                       ; preds = %for.cond19
  %arraydecay23 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  %16 = load i32, i32* %j, align 4
  %17 = load i32, i32* %k, align 4
  %add = add nsw i32 %16, %17
  %call24 = call i32 @peekBit(i8* %arraydecay23, i32 %add)
  %cmp25 = icmp ne i32 %call24, 0
  %18 = zext i1 %cmp25 to i64
  %cond = select i1 %cmp25, i32 1, i32 0
  %19 = load i32, i32* %k, align 4
  %arrayidx27 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 %19
  store i32 %cond, i32* %arrayidx27, align 4
  br label %for.inc28

for.inc28:                                        ; preds = %for.body22
  %20 = load i32, i32* %k, align 4
  %inc29 = add nsw i32 %20, 1
  store i32 %inc29, i32* %k, align 4
  br label %for.cond19

for.end30:                                        ; preds = %for.cond19
  %arrayidx31 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 0
  %21 = load i32, i32* %arrayidx31, align 16
  %mul32 = mul nsw i32 2, %21
  %arrayidx33 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 5
  %22 = load i32, i32* %arrayidx33, align 4
  %add34 = add nsw i32 %mul32, %22
  store i32 %add34, i32* %row, align 4
  %arrayidx35 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 1
  %23 = load i32, i32* %arrayidx35, align 4
  %mul36 = mul nsw i32 8, %23
  %arrayidx37 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 2
  %24 = load i32, i32* %arrayidx37, align 8
  %mul38 = mul nsw i32 4, %24
  %add39 = add nsw i32 %mul36, %mul38
  %arrayidx40 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 3
  %25 = load i32, i32* %arrayidx40, align 4
  %mul41 = mul nsw i32 2, %25
  %add42 = add nsw i32 %add39, %mul41
  %arrayidx43 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 4
  %26 = load i32, i32* %arrayidx43, align 16
  %add44 = add nsw i32 %add42, %26
  store i32 %add44, i32* %col, align 4
  %27 = load i32, i32* %i, align 4
  %arrayidx45 = getelementptr inbounds [8 x [64 x i8]], [8 x [64 x i8]]* @S, i32 0, i32 %27
  %28 = load i32, i32* %row, align 4
  %mul46 = mul nsw i32 %28, 16
  %29 = load i32, i32* %col, align 4
  %add47 = add nsw i32 %mul46, %29
  %arrayidx48 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx45, i32 0, i32 %add47
  %30 = load i8, i8* %arrayidx48, align 1
  %conv49 = zext i8 %30 to i32
  store i32 %conv49, i32* %m, align 4
  store i32 1, i32* %n, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end30
  %31 = load i32, i32* %m, align 4
  %cmp50 = icmp sgt i32 %31, 0
  br i1 %cmp50, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %32 = load i32, i32* %m, align 4
  %rem = srem i32 %32, 2
  store i32 %rem, i32* %p, align 4
  %arraydecay52 = getelementptr inbounds [4 x i8], [4 x i8]* %sr, i32 0, i32 0
  %33 = load i32, i32* %i, align 4
  %add53 = add nsw i32 %33, 1
  %mul54 = mul nsw i32 %add53, 4
  %34 = load i32, i32* %n, align 4
  %sub55 = sub nsw i32 %mul54, %34
  %35 = load i32, i32* %p, align 4
  %cmp56 = icmp eq i32 %35, 1
  %conv57 = zext i1 %cmp56 to i32
  call void @pokeBit(i8* %arraydecay52, i32 %sub55, i32 %conv57)
  %36 = load i32, i32* %m, align 4
  %div = sdiv i32 %36, 2
  store i32 %div, i32* %m, align 4
  %37 = load i32, i32* %n, align 4
  %inc58 = add nsw i32 %37, 1
  store i32 %inc58, i32* %n, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %for.inc59

for.inc59:                                        ; preds = %while.end
  %38 = load i32, i32* %i, align 4
  %inc60 = add nsw i32 %38, 1
  store i32 %inc60, i32* %i, align 4
  br label %for.cond15

for.end61:                                        ; preds = %for.cond15
  store i32 0, i32* %i, align 4
  br label %for.cond62

for.cond62:                                       ; preds = %for.inc71, %for.end61
  %39 = load i32, i32* %i, align 4
  %cmp63 = icmp slt i32 %39, 32
  br i1 %cmp63, label %for.body65, label %for.end73

for.body65:                                       ; preds = %for.cond62
  %40 = load i8*, i8** %sp.addr, align 4
  %41 = load i32, i32* %i, align 4
  %arraydecay66 = getelementptr inbounds [4 x i8], [4 x i8]* %sr, i32 0, i32 0
  %42 = load i32, i32* %i, align 4
  %arrayidx67 = getelementptr inbounds [32 x i8], [32 x i8]* @P, i32 0, i32 %42
  %43 = load i8, i8* %arrayidx67, align 1
  %conv68 = zext i8 %43 to i32
  %sub69 = sub nsw i32 %conv68, 1
  %call70 = call i32 @peekBit(i8* %arraydecay66, i32 %sub69)
  call void @pokeBit(i8* %40, i32 %41, i32 %call70)
  br label %for.inc71

for.inc71:                                        ; preds = %for.body65
  %44 = load i32, i32* %i, align 4
  %inc72 = add nsw i32 %44, 1
  store i32 %inc72, i32* %i, align 4
  br label %for.cond62

for.end73:                                        ; preds = %for.cond62
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal signext i8 @toHex(i8 zeroext %in) #0 {
entry:
  %retval = alloca i8, align 1
  %in.addr = alloca i8, align 1
  store i8 %in, i8* %in.addr, align 1
  %0 = load i8, i8* %in.addr, align 1
  %conv = zext i8 %0 to i32
  %cmp = icmp sle i32 0, %conv
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i8, i8* %in.addr, align 1
  %conv2 = zext i8 %1 to i32
  %cmp3 = icmp slt i32 %conv2, 10
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %2 = load i8, i8* %in.addr, align 1
  %conv5 = zext i8 %2 to i32
  %add = add nsw i32 48, %conv5
  %conv6 = trunc i32 %add to i8
  store i8 %conv6, i8* %retval, align 1
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %3 = load i8, i8* %in.addr, align 1
  %conv7 = zext i8 %3 to i32
  %cmp8 = icmp sle i32 10, %conv7
  br i1 %cmp8, label %land.lhs.true10, label %if.end18

land.lhs.true10:                                  ; preds = %if.end
  %4 = load i8, i8* %in.addr, align 1
  %conv11 = zext i8 %4 to i32
  %cmp12 = icmp sle i32 %conv11, 15
  br i1 %cmp12, label %if.then14, label %if.end18

if.then14:                                        ; preds = %land.lhs.true10
  %5 = load i8, i8* %in.addr, align 1
  %conv15 = zext i8 %5 to i32
  %add16 = add nsw i32 65, %conv15
  %sub = sub nsw i32 %add16, 10
  %conv17 = trunc i32 %sub to i8
  store i8 %conv17, i8* %retval, align 1
  br label %return

if.end18:                                         ; preds = %land.lhs.true10, %if.end
  store i8 0, i8* %retval, align 1
  br label %return

return:                                           ; preds = %if.end18, %if.then14, %if.then
  %6 = load i8, i8* %retval, align 1
  ret i8 %6
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; Replacing "  %cmp = icmp sle i32 0, %conv"
; from ""
; with "i1 true" in:
"%0:i8 = var
%1:i32 = zext %0
%2:i1 = sle 0:i32, %1
cand %2 1:i1
"
; with "i1 true"

Module after replacement:
; ModuleID = './Data_Encryption_Standard.c.bc'
source_filename = "./Data_Encryption_Standard.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.String = type { i8*, i32 }

@.str = private unnamed_addr constant [14 x i8] c"Key     : %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"Message : %s\0A\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"Encoded : %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"Decoded : %s\0A\0A\00", align 1
@__const.main.keys = private unnamed_addr constant [3 x [8 x i8]] [[8 x i8] c"\134Wy\9B\BC\DF\F1", [8 x i8] c"\0E2\922\EAm\0Ds", [8 x i8] c"\0E2\922\EAm\0Ds"], align 16
@__const.main.message1 = private unnamed_addr constant [8 x i8] c"\01#Eg\89\AB\CD\EF", align 1
@__const.main.message2 = private unnamed_addr constant [8 x i8] c"\87\87\87\87\87\87\87\87", align 1
@__const.main.message3 = private unnamed_addr constant [38 x i8] c"Your lips are smoother than vaseline\0D\0A", align 16
@PC1 = internal constant [56 x i8] c"91)!\19\11\09\01:2*\22\1A\12\0A\02;3+#\1B\13\0B\03<4,$?7/'\1F\17\0F\07>6.&\1E\16\0E\06=5-%\1D\15\0D\05\1C\14\0C\04", align 16
@SHIFTS = internal constant [16 x i8] c"\01\01\02\02\02\02\02\02\01\02\02\02\02\02\02\01", align 16
@PC2 = internal constant [48 x i8] c"\0E\11\0B\18\01\05\03\1C\0F\06\15\0A\17\13\0C\04\1A\08\10\07\1B\14\0D\02)4\1F%/7\1E(3-!0,1'8\225.*2$\1D ", align 16
@IP = internal constant [64 x i8] c":2*\22\1A\12\0A\02<4,$\1C\14\0C\04>6.&\1E\16\0E\06@80( \18\10\0891)!\19\11\09\01;3+#\1B\13\0B\03=5-%\1D\15\0D\05?7/'\1F\17\0F\07", align 16
@IP2 = internal constant [64 x i8] c"(\080\108\18@ '\07/\0F7\17?\1F&\06.\0E6\16>\1E%\05-\0D5\15=\1D$\04,\0C4\14<\1C#\03+\0B3\13;\1B\22\02*\0A2\12:\1A!\01)\091\119\19", align 16
@E = internal constant [48 x i8] c" \01\02\03\04\05\04\05\06\07\08\09\08\09\0A\0B\0C\0D\0C\0D\0E\0F\10\11\10\11\12\13\14\15\14\15\16\17\18\19\18\19\1A\1B\1C\1D\1C\1D\1E\1F \01", align 16
@S = internal constant [8 x [64 x i8]] [[64 x i8] c"\0E\04\0D\01\02\0F\0B\08\03\0A\06\0C\05\09\00\07\00\0F\07\04\0E\02\0D\01\0A\06\0C\0B\09\05\03\08\04\01\0E\08\0D\06\02\0B\0F\0C\09\07\03\0A\05\00\0F\0C\08\02\04\09\01\07\05\0B\03\0E\0A\00\06\0D", [64 x i8] c"\0F\01\08\0E\06\0B\03\04\09\07\02\0D\0C\00\05\0A\03\0D\04\07\0F\02\08\0E\0C\00\01\0A\06\09\0B\05\00\0E\07\0B\0A\04\0D\01\05\08\0C\06\09\03\02\0F\0D\08\0A\01\03\0F\04\02\0B\06\07\0C\00\05\0E\09", [64 x i8] c"\0A\00\09\0E\06\03\0F\05\01\0D\0C\07\0B\04\02\08\0D\07\00\09\03\04\06\0A\02\08\05\0E\0C\0B\0F\01\0D\06\04\09\08\0F\03\00\0B\01\02\0C\05\0A\0E\07\01\0A\0D\00\06\09\08\07\04\0F\0E\03\0B\05\02\0C", [64 x i8] c"\07\0D\0E\03\00\06\09\0A\01\02\08\05\0B\0C\04\0F\0D\08\0B\05\06\0F\00\03\04\07\02\0C\01\0A\0E\09\0A\06\09\00\0C\0B\07\0D\0F\01\03\0E\05\02\08\04\03\0F\00\06\0A\01\0D\08\09\04\05\0B\0C\07\02\0E", [64 x i8] c"\02\0C\04\01\07\0A\0B\06\08\05\03\0F\0D\00\0E\09\0E\0B\02\0C\04\07\0D\01\05\00\0F\0A\03\09\08\06\04\02\01\0B\0A\0D\07\08\0F\09\0C\05\06\03\00\0E\0B\08\0C\07\01\0E\02\0D\06\0F\00\09\0A\04\05\03", [64 x i8] c"\0C\01\0A\0F\09\02\06\08\00\0D\03\04\0E\07\05\0B\0A\0F\04\02\07\0C\09\05\06\01\0D\0E\00\0B\03\08\09\0E\0F\05\02\08\0C\03\07\00\04\0A\01\0D\0B\06\04\03\02\0C\09\05\0F\0A\0B\0E\01\07\06\00\08\0D", [64 x i8] c"\04\0B\02\0E\0F\00\08\0D\03\0C\09\07\05\0A\06\01\0D\00\0B\07\04\09\01\0A\0E\03\05\0C\02\0F\08\06\01\04\0B\0D\0C\03\07\0E\0A\0F\06\08\00\05\09\02\06\0B\0D\08\01\04\0A\07\09\05\00\0F\0E\02\03\0C", [64 x i8] c"\0D\02\08\04\06\0F\0B\01\0A\09\03\0E\05\00\0C\07\01\0F\0D\08\0A\03\07\04\0C\05\06\0B\00\0E\09\02\07\0B\04\01\09\0C\0E\02\00\06\0A\0D\0F\03\05\08\02\01\0E\07\04\0A\08\0D\0F\0C\09\00\03\05\06\0B"], align 16
@P = internal constant [32 x i8] c"\10\07\14\15\1D\0C\1C\11\01\0F\17\1A\05\12\1F\0A\02\08\18\0E \1B\03\09\13\0D\1E\06\16\0B\04\19", align 16
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @encrypt(%struct.String* noalias sret align 4 %agg.result, i8* %key, i8* %message, i32 %len) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %message.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %ks = alloca [17 x [6 x i8]], align 16
  %padByte = alloca i8, align 1
  %i = alloca i32, align 4
  store i8* %key, i8** %key.addr, align 4
  store i8* %message, i8** %message.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = bitcast %struct.String* %agg.result to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  %1 = load i8*, i8** %key.addr, align 4
  %arraydecay = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  call void @getSubKeys(i8* %1, [6 x i8]* %arraydecay)
  %2 = load i32, i32* %len.addr, align 4
  %rem = srem i32 %2, 8
  %sub = sub nsw i32 8, %rem
  %conv = trunc i32 %sub to i8
  store i8 %conv, i8* %padByte, align 1
  %3 = load i32, i32* %len.addr, align 4
  %4 = load i8, i8* %padByte, align 1
  %conv1 = zext i8 %4 to i32
  %add = add nsw i32 %3, %conv1
  %len2 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  store i32 %add, i32* %len2, align 4
  %len3 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %5 = load i32, i32* %len3, align 4
  %call = call noalias i8* @malloc(i32 %5)
  %data = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  store i8* %call, i8** %data, align 4
  %data4 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %6 = load i8*, i8** %data4, align 4
  %7 = load i8*, i8** %message.addr, align 4
  %8 = load i32, i32* %len.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %6, i8* align 1 %7, i32 %8, i1 false)
  %data5 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %9 = load i8*, i8** %data5, align 4
  %10 = load i32, i32* %len.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %9, i32 %10
  %11 = load i8, i8* %padByte, align 1
  %12 = load i8, i8* %padByte, align 1
  %conv7 = zext i8 %12 to i32
  call void @llvm.memset.p0i8.i32(i8* align 1 %arrayidx, i8 %11, i32 %conv7, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %13 = load i32, i32* %i, align 4
  %len8 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %14 = load i32, i32* %len8, align 4
  %cmp = icmp slt i32 %13, %14
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %data10 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %15 = load i8*, i8** %data10, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds i8, i8* %15, i32 %16
  %arraydecay12 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  %data13 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %17 = load i8*, i8** %data13, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds i8, i8* %17, i32 %18
  call void @processMessage(i8* %arrayidx11, [6 x i8]* %arraydecay12, i8* %arrayidx14)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %19 = load i32, i32* %i, align 4
  %add15 = add nsw i32 %19, 8
  store i32 %add15, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define internal void @getSubKeys(i8* %key, [6 x i8]* %ks) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %ks.addr = alloca [6 x i8]*, align 4
  %c = alloca [17 x [7 x i8]], align 16
  %d = alloca [17 x [4 x i8]], align 16
  %kp = alloca [7 x i8], align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i8* %key, i8** %key.addr, align 4
  store [6 x i8]* %ks, [6 x i8]** %ks.addr, align 4
  %arraydecay = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 0
  %0 = bitcast [7 x i8]* %arraydecay to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 119, i1 false)
  %arraydecay1 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 0
  %1 = bitcast [4 x i8]* %arraydecay1 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %1, i8 0, i32 68, i1 false)
  %2 = load [6 x i8]*, [6 x i8]** %ks.addr, align 4
  %3 = bitcast [6 x i8]* %2 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 1 %3, i8 0, i32 102, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %4, 56
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay2 = getelementptr inbounds [7 x i8], [7 x i8]* %kp, i32 0, i32 0
  %5 = load i32, i32* %i, align 4
  %6 = load i8*, i8** %key.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [56 x i8], [56 x i8]* @PC1, i32 0, i32 %7
  %8 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %8 to i32
  %sub = sub nsw i32 %conv, 1
  %call = call i32 @peekBit(i8* %6, i32 %sub)
  call void @pokeBit(i8* %arraydecay2, i32 %5, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc15, %for.end
  %10 = load i32, i32* %i, align 4
  %cmp4 = icmp slt i32 %10, 28
  br i1 %cmp4, label %for.body6, label %for.end17

for.body6:                                        ; preds = %for.cond3
  %arrayidx7 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 0
  %arraydecay8 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx7, i32 0, i32 0
  %11 = load i32, i32* %i, align 4
  %arraydecay9 = getelementptr inbounds [7 x i8], [7 x i8]* %kp, i32 0, i32 0
  %12 = load i32, i32* %i, align 4
  %call10 = call i32 @peekBit(i8* %arraydecay9, i32 %12)
  call void @pokeBit(i8* %arraydecay8, i32 %11, i32 %call10)
  %arrayidx11 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 0
  %arraydecay12 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx11, i32 0, i32 0
  %13 = load i32, i32* %i, align 4
  %arraydecay13 = getelementptr inbounds [7 x i8], [7 x i8]* %kp, i32 0, i32 0
  %14 = load i32, i32* %i, align 4
  %add = add nsw i32 %14, 28
  %call14 = call i32 @peekBit(i8* %arraydecay13, i32 %add)
  call void @pokeBit(i8* %arraydecay12, i32 %13, i32 %call14)
  br label %for.inc15

for.inc15:                                        ; preds = %for.body6
  %15 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %15, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond3

for.end17:                                        ; preds = %for.cond3
  store i32 1, i32* %i, align 4
  br label %for.cond18

for.cond18:                                       ; preds = %for.inc38, %for.end17
  %16 = load i32, i32* %i, align 4
  %cmp19 = icmp slt i32 %16, 17
  br i1 %cmp19, label %for.body21, label %for.end40

for.body21:                                       ; preds = %for.cond18
  %17 = load i32, i32* %i, align 4
  %sub22 = sub nsw i32 %17, 1
  %arrayidx23 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %sub22
  %arraydecay24 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx23, i32 0, i32 0
  %18 = load i32, i32* %i, align 4
  %sub25 = sub nsw i32 %18, 1
  %arrayidx26 = getelementptr inbounds [16 x i8], [16 x i8]* @SHIFTS, i32 0, i32 %sub25
  %19 = load i8, i8* %arrayidx26, align 1
  %conv27 = zext i8 %19 to i32
  %20 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %20
  %arraydecay29 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx28, i32 0, i32 0
  call void @shiftLeft(i8* %arraydecay24, i32 28, i32 %conv27, i8* %arraydecay29)
  %21 = load i32, i32* %i, align 4
  %sub30 = sub nsw i32 %21, 1
  %arrayidx31 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 %sub30
  %arraydecay32 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx31, i32 0, i32 0
  %22 = load i32, i32* %i, align 4
  %sub33 = sub nsw i32 %22, 1
  %arrayidx34 = getelementptr inbounds [16 x i8], [16 x i8]* @SHIFTS, i32 0, i32 %sub33
  %23 = load i8, i8* %arrayidx34, align 1
  %conv35 = zext i8 %23 to i32
  %24 = load i32, i32* %i, align 4
  %arrayidx36 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 %24
  %arraydecay37 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx36, i32 0, i32 0
  call void @shiftLeft(i8* %arraydecay32, i32 28, i32 %conv35, i8* %arraydecay37)
  br label %for.inc38

for.inc38:                                        ; preds = %for.body21
  %25 = load i32, i32* %i, align 4
  %inc39 = add nsw i32 %25, 1
  store i32 %inc39, i32* %i, align 4
  br label %for.cond18

for.end40:                                        ; preds = %for.cond18
  store i32 1, i32* %i, align 4
  br label %for.cond41

for.cond41:                                       ; preds = %for.inc58, %for.end40
  %26 = load i32, i32* %i, align 4
  %cmp42 = icmp slt i32 %26, 17
  br i1 %cmp42, label %for.body44, label %for.end60

for.body44:                                       ; preds = %for.cond41
  store i32 28, i32* %j, align 4
  br label %for.cond45

for.cond45:                                       ; preds = %for.inc55, %for.body44
  %27 = load i32, i32* %j, align 4
  %cmp46 = icmp slt i32 %27, 56
  br i1 %cmp46, label %for.body48, label %for.end57

for.body48:                                       ; preds = %for.cond45
  %28 = load i32, i32* %i, align 4
  %arrayidx49 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %28
  %arraydecay50 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx49, i32 0, i32 0
  %29 = load i32, i32* %j, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx51 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 %30
  %arraydecay52 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx51, i32 0, i32 0
  %31 = load i32, i32* %j, align 4
  %sub53 = sub nsw i32 %31, 28
  %call54 = call i32 @peekBit(i8* %arraydecay52, i32 %sub53)
  call void @pokeBit(i8* %arraydecay50, i32 %29, i32 %call54)
  br label %for.inc55

for.inc55:                                        ; preds = %for.body48
  %32 = load i32, i32* %j, align 4
  %inc56 = add nsw i32 %32, 1
  store i32 %inc56, i32* %j, align 4
  br label %for.cond45

for.end57:                                        ; preds = %for.cond45
  br label %for.inc58

for.inc58:                                        ; preds = %for.end57
  %33 = load i32, i32* %i, align 4
  %inc59 = add nsw i32 %33, 1
  store i32 %inc59, i32* %i, align 4
  br label %for.cond41

for.end60:                                        ; preds = %for.cond41
  store i32 1, i32* %i, align 4
  br label %for.cond61

for.cond61:                                       ; preds = %for.inc80, %for.end60
  %34 = load i32, i32* %i, align 4
  %cmp62 = icmp slt i32 %34, 17
  br i1 %cmp62, label %for.body64, label %for.end82

for.body64:                                       ; preds = %for.cond61
  store i32 0, i32* %j, align 4
  br label %for.cond65

for.cond65:                                       ; preds = %for.inc77, %for.body64
  %35 = load i32, i32* %j, align 4
  %cmp66 = icmp slt i32 %35, 48
  br i1 %cmp66, label %for.body68, label %for.end79

for.body68:                                       ; preds = %for.cond65
  %36 = load [6 x i8]*, [6 x i8]** %ks.addr, align 4
  %37 = load i32, i32* %i, align 4
  %arrayidx69 = getelementptr inbounds [6 x i8], [6 x i8]* %36, i32 %37
  %arraydecay70 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx69, i32 0, i32 0
  %38 = load i32, i32* %j, align 4
  %39 = load i32, i32* %i, align 4
  %arrayidx71 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %39
  %arraydecay72 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx71, i32 0, i32 0
  %40 = load i32, i32* %j, align 4
  %arrayidx73 = getelementptr inbounds [48 x i8], [48 x i8]* @PC2, i32 0, i32 %40
  %41 = load i8, i8* %arrayidx73, align 1
  %conv74 = zext i8 %41 to i32
  %sub75 = sub nsw i32 %conv74, 1
  %call76 = call i32 @peekBit(i8* %arraydecay72, i32 %sub75)
  call void @pokeBit(i8* %arraydecay70, i32 %38, i32 %call76)
  br label %for.inc77

for.inc77:                                        ; preds = %for.body68
  %42 = load i32, i32* %j, align 4
  %inc78 = add nsw i32 %42, 1
  store i32 %inc78, i32* %j, align 4
  br label %for.cond65

for.end79:                                        ; preds = %for.cond65
  br label %for.inc80

for.inc80:                                        ; preds = %for.end79
  %43 = load i32, i32* %i, align 4
  %inc81 = add nsw i32 %43, 1
  store i32 %inc81, i32* %i, align 4
  br label %for.cond61

for.end82:                                        ; preds = %for.cond61
  ret void
}

declare noalias i8* @malloc(i32 %0) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: noinline nounwind optnone
define internal void @processMessage(i8* %message, [6 x i8]* %ks, i8* %ep) #0 {
entry:
  %message.addr = alloca i8*, align 4
  %ks.addr = alloca [6 x i8]*, align 4
  %ep.addr = alloca i8*, align 4
  %left = alloca [17 x [4 x i8]], align 16
  %right = alloca [17 x [4 x i8]], align 16
  %mp = alloca [8 x i8], align 1
  %e = alloca [8 x i8], align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %fs = alloca [4 x i8], align 1
  store i8* %message, i8** %message.addr, align 4
  store [6 x i8]* %ks, [6 x i8]** %ks.addr, align 4
  store i8* %ep, i8** %ep.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 64
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %mp, i32 0, i32 0
  %1 = load i32, i32* %i, align 4
  %2 = load i8*, i8** %message.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [64 x i8], [64 x i8]* @IP, i32 0, i32 %3
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %sub = sub nsw i32 %conv, 1
  %call = call i32 @peekBit(i8* %2, i32 %sub)
  call void @pokeBit(i8* %arraydecay, i32 %1, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc13, %for.end
  %6 = load i32, i32* %i, align 4
  %cmp2 = icmp slt i32 %6, 32
  br i1 %cmp2, label %for.body4, label %for.end15

for.body4:                                        ; preds = %for.cond1
  %arrayidx5 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 0
  %arraydecay6 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx5, i32 0, i32 0
  %7 = load i32, i32* %i, align 4
  %arraydecay7 = getelementptr inbounds [8 x i8], [8 x i8]* %mp, i32 0, i32 0
  %8 = load i32, i32* %i, align 4
  %call8 = call i32 @peekBit(i8* %arraydecay7, i32 %8)
  call void @pokeBit(i8* %arraydecay6, i32 %7, i32 %call8)
  %arrayidx9 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 0
  %arraydecay10 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx9, i32 0, i32 0
  %9 = load i32, i32* %i, align 4
  %arraydecay11 = getelementptr inbounds [8 x i8], [8 x i8]* %mp, i32 0, i32 0
  %10 = load i32, i32* %i, align 4
  %add = add nsw i32 %10, 32
  %call12 = call i32 @peekBit(i8* %arraydecay11, i32 %add)
  call void @pokeBit(i8* %arraydecay10, i32 %9, i32 %call12)
  br label %for.inc13

for.inc13:                                        ; preds = %for.body4
  %11 = load i32, i32* %i, align 4
  %inc14 = add nsw i32 %11, 1
  store i32 %inc14, i32* %i, align 4
  br label %for.cond1

for.end15:                                        ; preds = %for.cond1
  store i32 1, i32* %i, align 4
  br label %for.cond16

for.cond16:                                       ; preds = %for.inc50, %for.end15
  %12 = load i32, i32* %i, align 4
  %cmp17 = icmp slt i32 %12, 17
  br i1 %cmp17, label %for.body19, label %for.end52

for.body19:                                       ; preds = %for.cond16
  %13 = load i32, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 %13
  %arraydecay21 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx20, i32 0, i32 0
  %14 = load i32, i32* %i, align 4
  %sub22 = sub nsw i32 %14, 1
  %arrayidx23 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 %sub22
  %arraydecay24 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx23, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %arraydecay21, i8* align 4 %arraydecay24, i32 4, i1 false)
  %15 = load i32, i32* %i, align 4
  %sub25 = sub nsw i32 %15, 1
  %arrayidx26 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 %sub25
  %arraydecay27 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx26, i32 0, i32 0
  %16 = load [6 x i8]*, [6 x i8]** %ks.addr, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds [6 x i8], [6 x i8]* %16, i32 %17
  %arraydecay29 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx28, i32 0, i32 0
  %arraydecay30 = getelementptr inbounds [4 x i8], [4 x i8]* %fs, i32 0, i32 0
  call void @f(i8* %arraydecay27, i8* %arraydecay29, i8* %arraydecay30)
  store i32 0, i32* %j, align 4
  br label %for.cond31

for.cond31:                                       ; preds = %for.inc42, %for.body19
  %18 = load i32, i32* %j, align 4
  %cmp32 = icmp slt i32 %18, 4
  br i1 %cmp32, label %for.body34, label %for.end44

for.body34:                                       ; preds = %for.cond31
  %19 = load i32, i32* %j, align 4
  %arrayidx35 = getelementptr inbounds [4 x i8], [4 x i8]* %fs, i32 0, i32 %19
  %20 = load i8, i8* %arrayidx35, align 1
  %conv36 = zext i8 %20 to i32
  %21 = load i32, i32* %i, align 4
  %sub37 = sub nsw i32 %21, 1
  %arrayidx38 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 %sub37
  %22 = load i32, i32* %j, align 4
  %arrayidx39 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx38, i32 0, i32 %22
  %23 = load i8, i8* %arrayidx39, align 1
  %conv40 = zext i8 %23 to i32
  %xor = xor i32 %conv40, %conv36
  %conv41 = trunc i32 %xor to i8
  store i8 %conv41, i8* %arrayidx39, align 1
  br label %for.inc42

for.inc42:                                        ; preds = %for.body34
  %24 = load i32, i32* %j, align 4
  %inc43 = add nsw i32 %24, 1
  store i32 %inc43, i32* %j, align 4
  br label %for.cond31

for.end44:                                        ; preds = %for.cond31
  %25 = load i32, i32* %i, align 4
  %arrayidx45 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 %25
  %arraydecay46 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx45, i32 0, i32 0
  %26 = load i32, i32* %i, align 4
  %sub47 = sub nsw i32 %26, 1
  %arrayidx48 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 %sub47
  %arraydecay49 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx48, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %arraydecay46, i8* align 4 %arraydecay49, i32 4, i1 false)
  br label %for.inc50

for.inc50:                                        ; preds = %for.end44
  %27 = load i32, i32* %i, align 4
  %inc51 = add nsw i32 %27, 1
  store i32 %inc51, i32* %i, align 4
  br label %for.cond16

for.end52:                                        ; preds = %for.cond16
  store i32 0, i32* %i, align 4
  br label %for.cond53

for.cond53:                                       ; preds = %for.inc61, %for.end52
  %28 = load i32, i32* %i, align 4
  %cmp54 = icmp slt i32 %28, 32
  br i1 %cmp54, label %for.body56, label %for.end63

for.body56:                                       ; preds = %for.cond53
  %arraydecay57 = getelementptr inbounds [8 x i8], [8 x i8]* %e, i32 0, i32 0
  %29 = load i32, i32* %i, align 4
  %arrayidx58 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 16
  %arraydecay59 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx58, i32 0, i32 0
  %30 = load i32, i32* %i, align 4
  %call60 = call i32 @peekBit(i8* %arraydecay59, i32 %30)
  call void @pokeBit(i8* %arraydecay57, i32 %29, i32 %call60)
  br label %for.inc61

for.inc61:                                        ; preds = %for.body56
  %31 = load i32, i32* %i, align 4
  %inc62 = add nsw i32 %31, 1
  store i32 %inc62, i32* %i, align 4
  br label %for.cond53

for.end63:                                        ; preds = %for.cond53
  store i32 32, i32* %i, align 4
  br label %for.cond64

for.cond64:                                       ; preds = %for.inc73, %for.end63
  %32 = load i32, i32* %i, align 4
  %cmp65 = icmp slt i32 %32, 64
  br i1 %cmp65, label %for.body67, label %for.end75

for.body67:                                       ; preds = %for.cond64
  %arraydecay68 = getelementptr inbounds [8 x i8], [8 x i8]* %e, i32 0, i32 0
  %33 = load i32, i32* %i, align 4
  %arrayidx69 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 16
  %arraydecay70 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx69, i32 0, i32 0
  %34 = load i32, i32* %i, align 4
  %sub71 = sub nsw i32 %34, 32
  %call72 = call i32 @peekBit(i8* %arraydecay70, i32 %sub71)
  call void @pokeBit(i8* %arraydecay68, i32 %33, i32 %call72)
  br label %for.inc73

for.inc73:                                        ; preds = %for.body67
  %35 = load i32, i32* %i, align 4
  %inc74 = add nsw i32 %35, 1
  store i32 %inc74, i32* %i, align 4
  br label %for.cond64

for.end75:                                        ; preds = %for.cond64
  store i32 0, i32* %i, align 4
  br label %for.cond76

for.cond76:                                       ; preds = %for.inc85, %for.end75
  %36 = load i32, i32* %i, align 4
  %cmp77 = icmp slt i32 %36, 64
  br i1 %cmp77, label %for.body79, label %for.end87

for.body79:                                       ; preds = %for.cond76
  %37 = load i8*, i8** %ep.addr, align 4
  %38 = load i32, i32* %i, align 4
  %arraydecay80 = getelementptr inbounds [8 x i8], [8 x i8]* %e, i32 0, i32 0
  %39 = load i32, i32* %i, align 4
  %arrayidx81 = getelementptr inbounds [64 x i8], [64 x i8]* @IP2, i32 0, i32 %39
  %40 = load i8, i8* %arrayidx81, align 1
  %conv82 = zext i8 %40 to i32
  %sub83 = sub nsw i32 %conv82, 1
  %call84 = call i32 @peekBit(i8* %arraydecay80, i32 %sub83)
  call void @pokeBit(i8* %37, i32 %38, i32 %call84)
  br label %for.inc85

for.inc85:                                        ; preds = %for.body79
  %41 = load i32, i32* %i, align 4
  %inc86 = add nsw i32 %41, 1
  store i32 %inc86, i32* %i, align 4
  br label %for.cond76

for.end87:                                        ; preds = %for.cond76
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @decrypt(%struct.String* noalias sret align 4 %agg.result, i8* %key, i8* %message, i32 %len) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %message.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %ks = alloca [17 x [6 x i8]], align 16
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %padByte = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8* %key, i8** %key.addr, align 4
  store i8* %message, i8** %message.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = bitcast %struct.String* %agg.result to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  %1 = load i8*, i8** %key.addr, align 4
  %arraydecay = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  call void @getSubKeys(i8* %1, [6 x i8]* %arraydecay)
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc12, %entry
  %2 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, 9
  br i1 %cmp, label %for.body, label %for.end14

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %3, 6
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %4
  %5 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx, i32 0, i32 %5
  %6 = load i8, i8* %arrayidx4, align 1
  store i8 %6, i8* %temp, align 1
  %7 = load i32, i32* %i, align 4
  %sub = sub nsw i32 17, %7
  %arrayidx5 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %sub
  %8 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx5, i32 0, i32 %8
  %9 = load i8, i8* %arrayidx6, align 1
  %10 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %10
  %11 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx7, i32 0, i32 %11
  store i8 %9, i8* %arrayidx8, align 1
  %12 = load i8, i8* %temp, align 1
  %13 = load i32, i32* %i, align 4
  %sub9 = sub nsw i32 17, %13
  %arrayidx10 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %sub9
  %14 = load i32, i32* %j, align 4
  %arrayidx11 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx10, i32 0, i32 %14
  store i8 %12, i8* %arrayidx11, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %15 = load i32, i32* %j, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc12

for.inc12:                                        ; preds = %for.end
  %16 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %16, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond

for.end14:                                        ; preds = %for.cond
  %17 = load i32, i32* %len.addr, align 4
  %call = call noalias i8* @malloc(i32 %17)
  %data = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  store i8* %call, i8** %data, align 4
  %data15 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %18 = load i8*, i8** %data15, align 4
  %19 = load i8*, i8** %message.addr, align 4
  %20 = load i32, i32* %len.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %18, i8* align 1 %19, i32 %20, i1 false)
  %21 = load i32, i32* %len.addr, align 4
  %len16 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  store i32 %21, i32* %len16, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond17

for.cond17:                                       ; preds = %for.inc26, %for.end14
  %22 = load i32, i32* %i, align 4
  %len18 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %23 = load i32, i32* %len18, align 4
  %cmp19 = icmp slt i32 %22, %23
  br i1 %cmp19, label %for.body20, label %for.end27

for.body20:                                       ; preds = %for.cond17
  %data21 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %24 = load i8*, i8** %data21, align 4
  %25 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds i8, i8* %24, i32 %25
  %arraydecay23 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  %data24 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %26 = load i8*, i8** %data24, align 4
  %27 = load i32, i32* %i, align 4
  %arrayidx25 = getelementptr inbounds i8, i8* %26, i32 %27
  call void @processMessage(i8* %arrayidx22, [6 x i8]* %arraydecay23, i8* %arrayidx25)
  br label %for.inc26

for.inc26:                                        ; preds = %for.body20
  %28 = load i32, i32* %i, align 4
  %add = add nsw i32 %28, 8
  store i32 %add, i32* %i, align 4
  br label %for.cond17

for.end27:                                        ; preds = %for.cond17
  %data28 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %29 = load i8*, i8** %data28, align 4
  %30 = load i32, i32* %len.addr, align 4
  %sub29 = sub nsw i32 %30, 1
  %arrayidx30 = getelementptr inbounds i8, i8* %29, i32 %sub29
  %31 = load i8, i8* %arrayidx30, align 1
  store i8 %31, i8* %padByte, align 1
  %32 = load i8, i8* %padByte, align 1
  %conv = zext i8 %32 to i32
  %len31 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %33 = load i32, i32* %len31, align 4
  %sub32 = sub nsw i32 %33, %conv
  store i32 %sub32, i32* %len31, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @driver(i8* %key, i8* %message, i32 %len) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %message.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %encoded = alloca %struct.String, align 4
  %decoded = alloca %struct.String, align 4
  %buffer = alloca [128 x i8], align 16
  %tmp = alloca %struct.String, align 4
  %tmp9 = alloca %struct.String, align 4
  store i8* %key, i8** %key.addr, align 4
  store i8* %message, i8** %message.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load i8*, i8** %key.addr, align 4
  %arraydecay = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %0, i32 8, i8* %arraydecay)
  %arraydecay1 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i32 0, i32 0), i8* %arraydecay1)
  %1 = load i8*, i8** %message.addr, align 4
  %2 = load i32, i32* %len.addr, align 4
  %arraydecay2 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %1, i32 %2, i8* %arraydecay2)
  %arraydecay3 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0), i8* %arraydecay3)
  %3 = load i8*, i8** %key.addr, align 4
  %4 = load i8*, i8** %message.addr, align 4
  %5 = load i32, i32* %len.addr, align 4
  call void @encrypt(%struct.String* sret align 4 %tmp, i8* %3, i8* %4, i32 %5)
  %6 = bitcast %struct.String* %encoded to i8*
  %7 = bitcast %struct.String* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %6, i8* align 4 %7, i32 8, i1 false)
  %data = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  %8 = load i8*, i8** %data, align 4
  %len5 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 1
  %9 = load i32, i32* %len5, align 4
  %arraydecay6 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %8, i32 %9, i8* %arraydecay6)
  %arraydecay7 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0), i8* %arraydecay7)
  %10 = load i8*, i8** %key.addr, align 4
  %data10 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  %11 = load i8*, i8** %data10, align 4
  %len11 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 1
  %12 = load i32, i32* %len11, align 4
  call void @decrypt(%struct.String* sret align 4 %tmp9, i8* %10, i8* %11, i32 %12)
  %13 = bitcast %struct.String* %decoded to i8*
  %14 = bitcast %struct.String* %tmp9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %13, i8* align 4 %14, i32 8, i1 false)
  %data12 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 0
  %15 = load i8*, i8** %data12, align 4
  %len13 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 1
  %16 = load i32, i32* %len13, align 4
  %arraydecay14 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %15, i32 %16, i8* %arraydecay14)
  %arraydecay15 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0), i8* %arraydecay15)
  %len17 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 1
  %17 = load i32, i32* %len17, align 4
  %cmp = icmp sgt i32 %17, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %data18 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  %18 = load i8*, i8** %data18, align 4
  call void @free(i8* %18)
  %data19 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  store i8* null, i8** %data19, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %len20 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 1
  %19 = load i32, i32* %len20, align 4
  %cmp21 = icmp sgt i32 %19, 0
  br i1 %cmp21, label %if.then22, label %if.end25

if.then22:                                        ; preds = %if.end
  %data23 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 0
  %20 = load i8*, i8** %data23, align 4
  call void @free(i8* %20)
  %data24 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 0
  store i8* null, i8** %data24, align 4
  br label %if.end25

if.end25:                                         ; preds = %if.then22, %if.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @printBytes(i8* %ptr, i32 %len, i8* %out) #0 {
entry:
  %ptr.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  store i8* %ptr, i8** %ptr.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %len.addr, align 4
  %dec = add nsw i32 %0, -1
  store i32 %dec, i32* %len.addr, align 4
  %cmp = icmp sgt i32 %0, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i8*, i8** %ptr.addr, align 4
  %2 = load i8, i8* %1, align 1
  %conv = zext i8 %2 to i32
  %shr = ashr i32 %conv, 4
  %conv1 = trunc i32 %shr to i8
  %call = call signext i8 @toHex(i8 zeroext %conv1)
  %3 = load i8*, i8** %out.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %3, i32 1
  store i8* %incdec.ptr, i8** %out.addr, align 4
  store i8 %call, i8* %3, align 1
  %4 = load i8*, i8** %ptr.addr, align 4
  %5 = load i8, i8* %4, align 1
  %conv2 = zext i8 %5 to i32
  %and = and i32 %conv2, 15
  %conv3 = trunc i32 %and to i8
  %call4 = call signext i8 @toHex(i8 zeroext %conv3)
  %6 = load i8*, i8** %out.addr, align 4
  %incdec.ptr5 = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr5, i8** %out.addr, align 4
  store i8 %call4, i8* %6, align 1
  %7 = load i8*, i8** %ptr.addr, align 4
  %incdec.ptr6 = getelementptr inbounds i8, i8* %7, i32 1
  store i8* %incdec.ptr6, i8** %ptr.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %8 = load i8*, i8** %out.addr, align 4
  store i8 0, i8* %8, align 1
  ret void
}

declare i32 @printf(i8* %0, ...) #2

declare void @free(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %keys = alloca [3 x [8 x i8]], align 16
  %message1 = alloca [8 x i8], align 1
  %message2 = alloca [8 x i8], align 1
  %message3 = alloca [38 x i8], align 16
  %len = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [3 x [8 x i8]]* %keys to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([3 x [8 x i8]], [3 x [8 x i8]]* @__const.main.keys, i32 0, i32 0, i32 0), i32 24, i1 false)
  %1 = bitcast [8 x i8]* %message1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %1, i8* align 1 getelementptr inbounds ([8 x i8], [8 x i8]* @__const.main.message1, i32 0, i32 0), i32 8, i1 false)
  %2 = bitcast [8 x i8]* %message2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %2, i8* align 1 getelementptr inbounds ([8 x i8], [8 x i8]* @__const.main.message2, i32 0, i32 0), i32 8, i1 false)
  %3 = bitcast [38 x i8]* %message3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %3, i8* align 16 getelementptr inbounds ([38 x i8], [38 x i8]* @__const.main.message3, i32 0, i32 0), i32 38, i1 false)
  store i32 8, i32* %len, align 4
  %arrayidx = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* %keys, i32 0, i32 0
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %arrayidx, i32 0, i32 0
  %arraydecay1 = getelementptr inbounds [8 x i8], [8 x i8]* %message1, i32 0, i32 0
  %4 = load i32, i32* %len, align 4
  call void @driver(i8* %arraydecay, i8* %arraydecay1, i32 %4)
  store i32 8, i32* %len, align 4
  %arrayidx2 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* %keys, i32 0, i32 1
  %arraydecay3 = getelementptr inbounds [8 x i8], [8 x i8]* %arrayidx2, i32 0, i32 0
  %arraydecay4 = getelementptr inbounds [8 x i8], [8 x i8]* %message2, i32 0, i32 0
  %5 = load i32, i32* %len, align 4
  call void @driver(i8* %arraydecay3, i8* %arraydecay4, i32 %5)
  store i32 38, i32* %len, align 4
  %arrayidx5 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* %keys, i32 0, i32 2
  %arraydecay6 = getelementptr inbounds [8 x i8], [8 x i8]* %arrayidx5, i32 0, i32 0
  %arraydecay7 = getelementptr inbounds [38 x i8], [38 x i8]* %message3, i32 0, i32 0
  %6 = load i32, i32* %len, align 4
  call void @driver(i8* %arraydecay6, i8* %arraydecay7, i32 %6)
  ret i32 0
}

; Function Attrs: noinline nounwind optnone
define internal void @pokeBit(i8* %dst, i32 %index, i32 %value) #0 {
entry:
  %dst.addr = alloca i8*, align 4
  %index.addr = alloca i32, align 4
  %value.addr = alloca i32, align 4
  %cell = alloca i32, align 4
  %bit = alloca i32, align 4
  store i8* %dst, i8** %dst.addr, align 4
  store i32 %index, i32* %index.addr, align 4
  store i32 %value, i32* %value.addr, align 4
  %0 = load i32, i32* %index.addr, align 4
  %div = sdiv i32 %0, 8
  store i32 %div, i32* %cell, align 4
  %1 = load i32, i32* %index.addr, align 4
  %rem = srem i32 %1, 8
  %sub = sub nsw i32 7, %rem
  store i32 %sub, i32* %bit, align 4
  %2 = load i32, i32* %value.addr, align 4
  %cmp = icmp eq i32 %2, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %bit, align 4
  %shl = shl i32 1, %3
  %neg = xor i32 %shl, -1
  %4 = load i8*, i8** %dst.addr, align 4
  %5 = load i32, i32* %cell, align 4
  %arrayidx = getelementptr inbounds i8, i8* %4, i32 %5
  %6 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %6 to i32
  %and = and i32 %conv, %neg
  %conv1 = trunc i32 %and to i8
  store i8 %conv1, i8* %arrayidx, align 1
  br label %if.end

if.else:                                          ; preds = %entry
  %7 = load i32, i32* %bit, align 4
  %shl2 = shl i32 1, %7
  %8 = load i8*, i8** %dst.addr, align 4
  %9 = load i32, i32* %cell, align 4
  %arrayidx3 = getelementptr inbounds i8, i8* %8, i32 %9
  %10 = load i8, i8* %arrayidx3, align 1
  %conv4 = zext i8 %10 to i32
  %or = or i32 %conv4, %shl2
  %conv5 = trunc i32 %or to i8
  store i8 %conv5, i8* %arrayidx3, align 1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i32 @peekBit(i8* %src, i32 %index) #0 {
entry:
  %src.addr = alloca i8*, align 4
  %index.addr = alloca i32, align 4
  %cell = alloca i32, align 4
  %bit = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 4
  store i32 %index, i32* %index.addr, align 4
  %0 = load i32, i32* %index.addr, align 4
  %div = sdiv i32 %0, 8
  store i32 %div, i32* %cell, align 4
  %1 = load i32, i32* %index.addr, align 4
  %rem = srem i32 %1, 8
  %sub = sub nsw i32 7, %rem
  store i32 %sub, i32* %bit, align 4
  %2 = load i8*, i8** %src.addr, align 4
  %3 = load i32, i32* %cell, align 4
  %arrayidx = getelementptr inbounds i8, i8* %2, i32 %3
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %5 = load i32, i32* %bit, align 4
  %shl = shl i32 1, %5
  %and = and i32 %conv, %shl
  %cmp = icmp ne i32 %and, 0
  %conv1 = zext i1 %cmp to i32
  ret i32 %conv1
}

; Function Attrs: noinline nounwind optnone
define internal void @shiftLeft(i8* %src, i32 %len, i32 %times, i8* %dst) #0 {
entry:
  %src.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %times.addr = alloca i32, align 4
  %dst.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %t = alloca i32, align 4
  %temp = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %times, i32* %times.addr, align 4
  store i8* %dst, i8** %dst.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp sle i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8*, i8** %dst.addr, align 4
  %3 = load i32, i32* %i, align 4
  %4 = load i8*, i8** %src.addr, align 4
  %5 = load i32, i32* %i, align 4
  %call = call i32 @peekBit(i8* %4, i32 %5)
  call void @pokeBit(i8* %2, i32 %3, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %t, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc13, %for.end
  %7 = load i32, i32* %t, align 4
  %8 = load i32, i32* %times.addr, align 4
  %cmp2 = icmp sle i32 %7, %8
  br i1 %cmp2, label %for.body3, label %for.end15

for.body3:                                        ; preds = %for.cond1
  %9 = load i8*, i8** %dst.addr, align 4
  %call4 = call i32 @peekBit(i8* %9, i32 0)
  store i32 %call4, i32* %temp, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc9, %for.body3
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %len.addr, align 4
  %cmp6 = icmp sle i32 %10, %11
  br i1 %cmp6, label %for.body7, label %for.end11

for.body7:                                        ; preds = %for.cond5
  %12 = load i8*, i8** %dst.addr, align 4
  %13 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %13, 1
  %14 = load i8*, i8** %dst.addr, align 4
  %15 = load i32, i32* %i, align 4
  %call8 = call i32 @peekBit(i8* %14, i32 %15)
  call void @pokeBit(i8* %12, i32 %sub, i32 %call8)
  br label %for.inc9

for.inc9:                                         ; preds = %for.body7
  %16 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %16, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond5

for.end11:                                        ; preds = %for.cond5
  %17 = load i8*, i8** %dst.addr, align 4
  %18 = load i32, i32* %len.addr, align 4
  %sub12 = sub nsw i32 %18, 1
  %19 = load i32, i32* %temp, align 4
  call void @pokeBit(i8* %17, i32 %sub12, i32 %19)
  br label %for.inc13

for.inc13:                                        ; preds = %for.end11
  %20 = load i32, i32* %t, align 4
  %inc14 = add nsw i32 %20, 1
  store i32 %inc14, i32* %t, align 4
  br label %for.cond1

for.end15:                                        ; preds = %for.cond1
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @f(i8* %r, i8* %ks, i8* %sp) #0 {
entry:
  %r.addr = alloca i8*, align 4
  %ks.addr = alloca i8*, align 4
  %sp.addr = alloca i8*, align 4
  %er = alloca [6 x i8], align 1
  %sr = alloca [4 x i8], align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %b = alloca [6 x i32], align 16
  %k = alloca i32, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %m = alloca i32, align 4
  %n = alloca i32, align 4
  %p = alloca i32, align 4
  store i8* %r, i8** %r.addr, align 4
  store i8* %ks, i8** %ks.addr, align 4
  store i8* %sp, i8** %sp.addr, align 4
  %arraydecay = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  call void @llvm.memset.p0i8.i32(i8* align 1 %arraydecay, i8 0, i32 6, i1 false)
  %arraydecay1 = getelementptr inbounds [4 x i8], [4 x i8]* %sr, i32 0, i32 0
  call void @llvm.memset.p0i8.i32(i8* align 1 %arraydecay1, i8 0, i32 4, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 48
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay2 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  %1 = load i32, i32* %i, align 4
  %2 = load i8*, i8** %r.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [48 x i8], [48 x i8]* @E, i32 0, i32 %3
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %sub = sub nsw i32 %conv, 1
  %call = call i32 @peekBit(i8* %2, i32 %sub)
  call void @pokeBit(i8* %arraydecay2, i32 %1, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc12, %for.end
  %6 = load i32, i32* %i, align 4
  %cmp4 = icmp slt i32 %6, 6
  br i1 %cmp4, label %for.body6, label %for.end14

for.body6:                                        ; preds = %for.cond3
  %7 = load i8*, i8** %ks.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds i8, i8* %7, i32 %8
  %9 = load i8, i8* %arrayidx7, align 1
  %conv8 = zext i8 %9 to i32
  %10 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 %10
  %11 = load i8, i8* %arrayidx9, align 1
  %conv10 = zext i8 %11 to i32
  %xor = xor i32 %conv10, %conv8
  %conv11 = trunc i32 %xor to i8
  store i8 %conv11, i8* %arrayidx9, align 1
  br label %for.inc12

for.inc12:                                        ; preds = %for.body6
  %12 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %12, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond3

for.end14:                                        ; preds = %for.cond3
  store i32 0, i32* %i, align 4
  br label %for.cond15

for.cond15:                                       ; preds = %for.inc59, %for.end14
  %13 = load i32, i32* %i, align 4
  %cmp16 = icmp slt i32 %13, 8
  br i1 %cmp16, label %for.body18, label %for.end61

for.body18:                                       ; preds = %for.cond15
  %14 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %14, 6
  store i32 %mul, i32* %j, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond19

for.cond19:                                       ; preds = %for.inc28, %for.body18
  %15 = load i32, i32* %k, align 4
  %cmp20 = icmp slt i32 %15, 6
  br i1 %cmp20, label %for.body22, label %for.end30

for.body22:                                       ; preds = %for.cond19
  %arraydecay23 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  %16 = load i32, i32* %j, align 4
  %17 = load i32, i32* %k, align 4
  %add = add nsw i32 %16, %17
  %call24 = call i32 @peekBit(i8* %arraydecay23, i32 %add)
  %cmp25 = icmp ne i32 %call24, 0
  %18 = zext i1 %cmp25 to i64
  %cond = select i1 %cmp25, i32 1, i32 0
  %19 = load i32, i32* %k, align 4
  %arrayidx27 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 %19
  store i32 %cond, i32* %arrayidx27, align 4
  br label %for.inc28

for.inc28:                                        ; preds = %for.body22
  %20 = load i32, i32* %k, align 4
  %inc29 = add nsw i32 %20, 1
  store i32 %inc29, i32* %k, align 4
  br label %for.cond19

for.end30:                                        ; preds = %for.cond19
  %arrayidx31 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 0
  %21 = load i32, i32* %arrayidx31, align 16
  %mul32 = mul nsw i32 2, %21
  %arrayidx33 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 5
  %22 = load i32, i32* %arrayidx33, align 4
  %add34 = add nsw i32 %mul32, %22
  store i32 %add34, i32* %row, align 4
  %arrayidx35 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 1
  %23 = load i32, i32* %arrayidx35, align 4
  %mul36 = mul nsw i32 8, %23
  %arrayidx37 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 2
  %24 = load i32, i32* %arrayidx37, align 8
  %mul38 = mul nsw i32 4, %24
  %add39 = add nsw i32 %mul36, %mul38
  %arrayidx40 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 3
  %25 = load i32, i32* %arrayidx40, align 4
  %mul41 = mul nsw i32 2, %25
  %add42 = add nsw i32 %add39, %mul41
  %arrayidx43 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 4
  %26 = load i32, i32* %arrayidx43, align 16
  %add44 = add nsw i32 %add42, %26
  store i32 %add44, i32* %col, align 4
  %27 = load i32, i32* %i, align 4
  %arrayidx45 = getelementptr inbounds [8 x [64 x i8]], [8 x [64 x i8]]* @S, i32 0, i32 %27
  %28 = load i32, i32* %row, align 4
  %mul46 = mul nsw i32 %28, 16
  %29 = load i32, i32* %col, align 4
  %add47 = add nsw i32 %mul46, %29
  %arrayidx48 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx45, i32 0, i32 %add47
  %30 = load i8, i8* %arrayidx48, align 1
  %conv49 = zext i8 %30 to i32
  store i32 %conv49, i32* %m, align 4
  store i32 1, i32* %n, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end30
  %31 = load i32, i32* %m, align 4
  %cmp50 = icmp sgt i32 %31, 0
  br i1 %cmp50, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %32 = load i32, i32* %m, align 4
  %rem = srem i32 %32, 2
  store i32 %rem, i32* %p, align 4
  %arraydecay52 = getelementptr inbounds [4 x i8], [4 x i8]* %sr, i32 0, i32 0
  %33 = load i32, i32* %i, align 4
  %add53 = add nsw i32 %33, 1
  %mul54 = mul nsw i32 %add53, 4
  %34 = load i32, i32* %n, align 4
  %sub55 = sub nsw i32 %mul54, %34
  %35 = load i32, i32* %p, align 4
  %cmp56 = icmp eq i32 %35, 1
  %conv57 = zext i1 %cmp56 to i32
  call void @pokeBit(i8* %arraydecay52, i32 %sub55, i32 %conv57)
  %36 = load i32, i32* %m, align 4
  %div = sdiv i32 %36, 2
  store i32 %div, i32* %m, align 4
  %37 = load i32, i32* %n, align 4
  %inc58 = add nsw i32 %37, 1
  store i32 %inc58, i32* %n, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %for.inc59

for.inc59:                                        ; preds = %while.end
  %38 = load i32, i32* %i, align 4
  %inc60 = add nsw i32 %38, 1
  store i32 %inc60, i32* %i, align 4
  br label %for.cond15

for.end61:                                        ; preds = %for.cond15
  store i32 0, i32* %i, align 4
  br label %for.cond62

for.cond62:                                       ; preds = %for.inc71, %for.end61
  %39 = load i32, i32* %i, align 4
  %cmp63 = icmp slt i32 %39, 32
  br i1 %cmp63, label %for.body65, label %for.end73

for.body65:                                       ; preds = %for.cond62
  %40 = load i8*, i8** %sp.addr, align 4
  %41 = load i32, i32* %i, align 4
  %arraydecay66 = getelementptr inbounds [4 x i8], [4 x i8]* %sr, i32 0, i32 0
  %42 = load i32, i32* %i, align 4
  %arrayidx67 = getelementptr inbounds [32 x i8], [32 x i8]* @P, i32 0, i32 %42
  %43 = load i8, i8* %arrayidx67, align 1
  %conv68 = zext i8 %43 to i32
  %sub69 = sub nsw i32 %conv68, 1
  %call70 = call i32 @peekBit(i8* %arraydecay66, i32 %sub69)
  call void @pokeBit(i8* %40, i32 %41, i32 %call70)
  br label %for.inc71

for.inc71:                                        ; preds = %for.body65
  %44 = load i32, i32* %i, align 4
  %inc72 = add nsw i32 %44, 1
  store i32 %inc72, i32* %i, align 4
  br label %for.cond62

for.end73:                                        ; preds = %for.cond62
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal signext i8 @toHex(i8 zeroext %in) #0 {
entry:
  %retval = alloca i8, align 1
  %in.addr = alloca i8, align 1
  store i8 %in, i8* %in.addr, align 1
  br i1 true, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %0 = load i8, i8* %in.addr, align 1
  %conv2 = zext i8 %0 to i32
  %cmp3 = icmp slt i32 %conv2, 10
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %1 = load i8, i8* %in.addr, align 1
  %conv5 = zext i8 %1 to i32
  %add = add nsw i32 48, %conv5
  %conv6 = trunc i32 %add to i8
  store i8 %conv6, i8* %retval, align 1
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %2 = load i8, i8* %in.addr, align 1
  %conv7 = zext i8 %2 to i32
  %cmp8 = icmp sle i32 10, %conv7
  br i1 %cmp8, label %land.lhs.true10, label %if.end18

land.lhs.true10:                                  ; preds = %if.end
  %3 = load i8, i8* %in.addr, align 1
  %conv11 = zext i8 %3 to i32
  %cmp12 = icmp sle i32 %conv11, 15
  br i1 %cmp12, label %if.then14, label %if.end18

if.then14:                                        ; preds = %land.lhs.true10
  %4 = load i8, i8* %in.addr, align 1
  %conv15 = zext i8 %4 to i32
  %add16 = add nsw i32 65, %conv15
  %sub = sub nsw i32 %add16, 10
  %conv17 = trunc i32 %sub to i8
  store i8 %conv17, i8* %retval, align 1
  br label %return

if.end18:                                         ; preds = %land.lhs.true10, %if.end
  store i8 0, i8* %retval, align 1
  br label %return

return:                                           ; preds = %if.end18, %if.then14, %if.then
  %5 = load i8, i8* %retval, align 1
  ret i8 %5
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

#########################################################
; exiting Souper's runOnFunction() for ./Data_Encryption_Standard.c.bc:toHex()
rescanning function after transformation was applied

; entering Souper's runOnFunction() for ./Data_Encryption_Standard.c.bc:toHex()

; ModuleID = './Data_Encryption_Standard.c.bc'
source_filename = "./Data_Encryption_Standard.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.String = type { i8*, i32 }

@.str = private unnamed_addr constant [14 x i8] c"Key     : %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"Message : %s\0A\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"Encoded : %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"Decoded : %s\0A\0A\00", align 1
@__const.main.keys = private unnamed_addr constant [3 x [8 x i8]] [[8 x i8] c"\134Wy\9B\BC\DF\F1", [8 x i8] c"\0E2\922\EAm\0Ds", [8 x i8] c"\0E2\922\EAm\0Ds"], align 16
@__const.main.message1 = private unnamed_addr constant [8 x i8] c"\01#Eg\89\AB\CD\EF", align 1
@__const.main.message2 = private unnamed_addr constant [8 x i8] c"\87\87\87\87\87\87\87\87", align 1
@__const.main.message3 = private unnamed_addr constant [38 x i8] c"Your lips are smoother than vaseline\0D\0A", align 16
@PC1 = internal constant [56 x i8] c"91)!\19\11\09\01:2*\22\1A\12\0A\02;3+#\1B\13\0B\03<4,$?7/'\1F\17\0F\07>6.&\1E\16\0E\06=5-%\1D\15\0D\05\1C\14\0C\04", align 16
@SHIFTS = internal constant [16 x i8] c"\01\01\02\02\02\02\02\02\01\02\02\02\02\02\02\01", align 16
@PC2 = internal constant [48 x i8] c"\0E\11\0B\18\01\05\03\1C\0F\06\15\0A\17\13\0C\04\1A\08\10\07\1B\14\0D\02)4\1F%/7\1E(3-!0,1'8\225.*2$\1D ", align 16
@IP = internal constant [64 x i8] c":2*\22\1A\12\0A\02<4,$\1C\14\0C\04>6.&\1E\16\0E\06@80( \18\10\0891)!\19\11\09\01;3+#\1B\13\0B\03=5-%\1D\15\0D\05?7/'\1F\17\0F\07", align 16
@IP2 = internal constant [64 x i8] c"(\080\108\18@ '\07/\0F7\17?\1F&\06.\0E6\16>\1E%\05-\0D5\15=\1D$\04,\0C4\14<\1C#\03+\0B3\13;\1B\22\02*\0A2\12:\1A!\01)\091\119\19", align 16
@E = internal constant [48 x i8] c" \01\02\03\04\05\04\05\06\07\08\09\08\09\0A\0B\0C\0D\0C\0D\0E\0F\10\11\10\11\12\13\14\15\14\15\16\17\18\19\18\19\1A\1B\1C\1D\1C\1D\1E\1F \01", align 16
@S = internal constant [8 x [64 x i8]] [[64 x i8] c"\0E\04\0D\01\02\0F\0B\08\03\0A\06\0C\05\09\00\07\00\0F\07\04\0E\02\0D\01\0A\06\0C\0B\09\05\03\08\04\01\0E\08\0D\06\02\0B\0F\0C\09\07\03\0A\05\00\0F\0C\08\02\04\09\01\07\05\0B\03\0E\0A\00\06\0D", [64 x i8] c"\0F\01\08\0E\06\0B\03\04\09\07\02\0D\0C\00\05\0A\03\0D\04\07\0F\02\08\0E\0C\00\01\0A\06\09\0B\05\00\0E\07\0B\0A\04\0D\01\05\08\0C\06\09\03\02\0F\0D\08\0A\01\03\0F\04\02\0B\06\07\0C\00\05\0E\09", [64 x i8] c"\0A\00\09\0E\06\03\0F\05\01\0D\0C\07\0B\04\02\08\0D\07\00\09\03\04\06\0A\02\08\05\0E\0C\0B\0F\01\0D\06\04\09\08\0F\03\00\0B\01\02\0C\05\0A\0E\07\01\0A\0D\00\06\09\08\07\04\0F\0E\03\0B\05\02\0C", [64 x i8] c"\07\0D\0E\03\00\06\09\0A\01\02\08\05\0B\0C\04\0F\0D\08\0B\05\06\0F\00\03\04\07\02\0C\01\0A\0E\09\0A\06\09\00\0C\0B\07\0D\0F\01\03\0E\05\02\08\04\03\0F\00\06\0A\01\0D\08\09\04\05\0B\0C\07\02\0E", [64 x i8] c"\02\0C\04\01\07\0A\0B\06\08\05\03\0F\0D\00\0E\09\0E\0B\02\0C\04\07\0D\01\05\00\0F\0A\03\09\08\06\04\02\01\0B\0A\0D\07\08\0F\09\0C\05\06\03\00\0E\0B\08\0C\07\01\0E\02\0D\06\0F\00\09\0A\04\05\03", [64 x i8] c"\0C\01\0A\0F\09\02\06\08\00\0D\03\04\0E\07\05\0B\0A\0F\04\02\07\0C\09\05\06\01\0D\0E\00\0B\03\08\09\0E\0F\05\02\08\0C\03\07\00\04\0A\01\0D\0B\06\04\03\02\0C\09\05\0F\0A\0B\0E\01\07\06\00\08\0D", [64 x i8] c"\04\0B\02\0E\0F\00\08\0D\03\0C\09\07\05\0A\06\01\0D\00\0B\07\04\09\01\0A\0E\03\05\0C\02\0F\08\06\01\04\0B\0D\0C\03\07\0E\0A\0F\06\08\00\05\09\02\06\0B\0D\08\01\04\0A\07\09\05\00\0F\0E\02\03\0C", [64 x i8] c"\0D\02\08\04\06\0F\0B\01\0A\09\03\0E\05\00\0C\07\01\0F\0D\08\0A\03\07\04\0C\05\06\0B\00\0E\09\02\07\0B\04\01\09\0C\0E\02\00\06\0A\0D\0F\03\05\08\02\01\0E\07\04\0A\08\0D\0F\0C\09\00\03\05\06\0B"], align 16
@P = internal constant [32 x i8] c"\10\07\14\15\1D\0C\1C\11\01\0F\17\1A\05\12\1F\0A\02\08\18\0E \1B\03\09\13\0D\1E\06\16\0B\04\19", align 16
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @encrypt(%struct.String* noalias sret align 4 %agg.result, i8* %key, i8* %message, i32 %len) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %message.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %ks = alloca [17 x [6 x i8]], align 16
  %padByte = alloca i8, align 1
  %i = alloca i32, align 4
  store i8* %key, i8** %key.addr, align 4
  store i8* %message, i8** %message.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = bitcast %struct.String* %agg.result to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  %1 = load i8*, i8** %key.addr, align 4
  %arraydecay = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  call void @getSubKeys(i8* %1, [6 x i8]* %arraydecay)
  %2 = load i32, i32* %len.addr, align 4
  %rem = srem i32 %2, 8
  %sub = sub nsw i32 8, %rem
  %conv = trunc i32 %sub to i8
  store i8 %conv, i8* %padByte, align 1
  %3 = load i32, i32* %len.addr, align 4
  %4 = load i8, i8* %padByte, align 1
  %conv1 = zext i8 %4 to i32
  %add = add nsw i32 %3, %conv1
  %len2 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  store i32 %add, i32* %len2, align 4
  %len3 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %5 = load i32, i32* %len3, align 4
  %call = call noalias i8* @malloc(i32 %5)
  %data = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  store i8* %call, i8** %data, align 4
  %data4 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %6 = load i8*, i8** %data4, align 4
  %7 = load i8*, i8** %message.addr, align 4
  %8 = load i32, i32* %len.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %6, i8* align 1 %7, i32 %8, i1 false)
  %data5 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %9 = load i8*, i8** %data5, align 4
  %10 = load i32, i32* %len.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %9, i32 %10
  %11 = load i8, i8* %padByte, align 1
  %12 = load i8, i8* %padByte, align 1
  %conv7 = zext i8 %12 to i32
  call void @llvm.memset.p0i8.i32(i8* align 1 %arrayidx, i8 %11, i32 %conv7, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %13 = load i32, i32* %i, align 4
  %len8 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %14 = load i32, i32* %len8, align 4
  %cmp = icmp slt i32 %13, %14
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %data10 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %15 = load i8*, i8** %data10, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds i8, i8* %15, i32 %16
  %arraydecay12 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  %data13 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %17 = load i8*, i8** %data13, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds i8, i8* %17, i32 %18
  call void @processMessage(i8* %arrayidx11, [6 x i8]* %arraydecay12, i8* %arrayidx14)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %19 = load i32, i32* %i, align 4
  %add15 = add nsw i32 %19, 8
  store i32 %add15, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define internal void @getSubKeys(i8* %key, [6 x i8]* %ks) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %ks.addr = alloca [6 x i8]*, align 4
  %c = alloca [17 x [7 x i8]], align 16
  %d = alloca [17 x [4 x i8]], align 16
  %kp = alloca [7 x i8], align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i8* %key, i8** %key.addr, align 4
  store [6 x i8]* %ks, [6 x i8]** %ks.addr, align 4
  %arraydecay = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 0
  %0 = bitcast [7 x i8]* %arraydecay to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 119, i1 false)
  %arraydecay1 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 0
  %1 = bitcast [4 x i8]* %arraydecay1 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %1, i8 0, i32 68, i1 false)
  %2 = load [6 x i8]*, [6 x i8]** %ks.addr, align 4
  %3 = bitcast [6 x i8]* %2 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 1 %3, i8 0, i32 102, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %4, 56
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay2 = getelementptr inbounds [7 x i8], [7 x i8]* %kp, i32 0, i32 0
  %5 = load i32, i32* %i, align 4
  %6 = load i8*, i8** %key.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [56 x i8], [56 x i8]* @PC1, i32 0, i32 %7
  %8 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %8 to i32
  %sub = sub nsw i32 %conv, 1
  %call = call i32 @peekBit(i8* %6, i32 %sub)
  call void @pokeBit(i8* %arraydecay2, i32 %5, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc15, %for.end
  %10 = load i32, i32* %i, align 4
  %cmp4 = icmp slt i32 %10, 28
  br i1 %cmp4, label %for.body6, label %for.end17

for.body6:                                        ; preds = %for.cond3
  %arrayidx7 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 0
  %arraydecay8 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx7, i32 0, i32 0
  %11 = load i32, i32* %i, align 4
  %arraydecay9 = getelementptr inbounds [7 x i8], [7 x i8]* %kp, i32 0, i32 0
  %12 = load i32, i32* %i, align 4
  %call10 = call i32 @peekBit(i8* %arraydecay9, i32 %12)
  call void @pokeBit(i8* %arraydecay8, i32 %11, i32 %call10)
  %arrayidx11 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 0
  %arraydecay12 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx11, i32 0, i32 0
  %13 = load i32, i32* %i, align 4
  %arraydecay13 = getelementptr inbounds [7 x i8], [7 x i8]* %kp, i32 0, i32 0
  %14 = load i32, i32* %i, align 4
  %add = add nsw i32 %14, 28
  %call14 = call i32 @peekBit(i8* %arraydecay13, i32 %add)
  call void @pokeBit(i8* %arraydecay12, i32 %13, i32 %call14)
  br label %for.inc15

for.inc15:                                        ; preds = %for.body6
  %15 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %15, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond3

for.end17:                                        ; preds = %for.cond3
  store i32 1, i32* %i, align 4
  br label %for.cond18

for.cond18:                                       ; preds = %for.inc38, %for.end17
  %16 = load i32, i32* %i, align 4
  %cmp19 = icmp slt i32 %16, 17
  br i1 %cmp19, label %for.body21, label %for.end40

for.body21:                                       ; preds = %for.cond18
  %17 = load i32, i32* %i, align 4
  %sub22 = sub nsw i32 %17, 1
  %arrayidx23 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %sub22
  %arraydecay24 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx23, i32 0, i32 0
  %18 = load i32, i32* %i, align 4
  %sub25 = sub nsw i32 %18, 1
  %arrayidx26 = getelementptr inbounds [16 x i8], [16 x i8]* @SHIFTS, i32 0, i32 %sub25
  %19 = load i8, i8* %arrayidx26, align 1
  %conv27 = zext i8 %19 to i32
  %20 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %20
  %arraydecay29 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx28, i32 0, i32 0
  call void @shiftLeft(i8* %arraydecay24, i32 28, i32 %conv27, i8* %arraydecay29)
  %21 = load i32, i32* %i, align 4
  %sub30 = sub nsw i32 %21, 1
  %arrayidx31 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 %sub30
  %arraydecay32 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx31, i32 0, i32 0
  %22 = load i32, i32* %i, align 4
  %sub33 = sub nsw i32 %22, 1
  %arrayidx34 = getelementptr inbounds [16 x i8], [16 x i8]* @SHIFTS, i32 0, i32 %sub33
  %23 = load i8, i8* %arrayidx34, align 1
  %conv35 = zext i8 %23 to i32
  %24 = load i32, i32* %i, align 4
  %arrayidx36 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 %24
  %arraydecay37 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx36, i32 0, i32 0
  call void @shiftLeft(i8* %arraydecay32, i32 28, i32 %conv35, i8* %arraydecay37)
  br label %for.inc38

for.inc38:                                        ; preds = %for.body21
  %25 = load i32, i32* %i, align 4
  %inc39 = add nsw i32 %25, 1
  store i32 %inc39, i32* %i, align 4
  br label %for.cond18

for.end40:                                        ; preds = %for.cond18
  store i32 1, i32* %i, align 4
  br label %for.cond41

for.cond41:                                       ; preds = %for.inc58, %for.end40
  %26 = load i32, i32* %i, align 4
  %cmp42 = icmp slt i32 %26, 17
  br i1 %cmp42, label %for.body44, label %for.end60

for.body44:                                       ; preds = %for.cond41
  store i32 28, i32* %j, align 4
  br label %for.cond45

for.cond45:                                       ; preds = %for.inc55, %for.body44
  %27 = load i32, i32* %j, align 4
  %cmp46 = icmp slt i32 %27, 56
  br i1 %cmp46, label %for.body48, label %for.end57

for.body48:                                       ; preds = %for.cond45
  %28 = load i32, i32* %i, align 4
  %arrayidx49 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %28
  %arraydecay50 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx49, i32 0, i32 0
  %29 = load i32, i32* %j, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx51 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %d, i32 0, i32 %30
  %arraydecay52 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx51, i32 0, i32 0
  %31 = load i32, i32* %j, align 4
  %sub53 = sub nsw i32 %31, 28
  %call54 = call i32 @peekBit(i8* %arraydecay52, i32 %sub53)
  call void @pokeBit(i8* %arraydecay50, i32 %29, i32 %call54)
  br label %for.inc55

for.inc55:                                        ; preds = %for.body48
  %32 = load i32, i32* %j, align 4
  %inc56 = add nsw i32 %32, 1
  store i32 %inc56, i32* %j, align 4
  br label %for.cond45

for.end57:                                        ; preds = %for.cond45
  br label %for.inc58

for.inc58:                                        ; preds = %for.end57
  %33 = load i32, i32* %i, align 4
  %inc59 = add nsw i32 %33, 1
  store i32 %inc59, i32* %i, align 4
  br label %for.cond41

for.end60:                                        ; preds = %for.cond41
  store i32 1, i32* %i, align 4
  br label %for.cond61

for.cond61:                                       ; preds = %for.inc80, %for.end60
  %34 = load i32, i32* %i, align 4
  %cmp62 = icmp slt i32 %34, 17
  br i1 %cmp62, label %for.body64, label %for.end82

for.body64:                                       ; preds = %for.cond61
  store i32 0, i32* %j, align 4
  br label %for.cond65

for.cond65:                                       ; preds = %for.inc77, %for.body64
  %35 = load i32, i32* %j, align 4
  %cmp66 = icmp slt i32 %35, 48
  br i1 %cmp66, label %for.body68, label %for.end79

for.body68:                                       ; preds = %for.cond65
  %36 = load [6 x i8]*, [6 x i8]** %ks.addr, align 4
  %37 = load i32, i32* %i, align 4
  %arrayidx69 = getelementptr inbounds [6 x i8], [6 x i8]* %36, i32 %37
  %arraydecay70 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx69, i32 0, i32 0
  %38 = load i32, i32* %j, align 4
  %39 = load i32, i32* %i, align 4
  %arrayidx71 = getelementptr inbounds [17 x [7 x i8]], [17 x [7 x i8]]* %c, i32 0, i32 %39
  %arraydecay72 = getelementptr inbounds [7 x i8], [7 x i8]* %arrayidx71, i32 0, i32 0
  %40 = load i32, i32* %j, align 4
  %arrayidx73 = getelementptr inbounds [48 x i8], [48 x i8]* @PC2, i32 0, i32 %40
  %41 = load i8, i8* %arrayidx73, align 1
  %conv74 = zext i8 %41 to i32
  %sub75 = sub nsw i32 %conv74, 1
  %call76 = call i32 @peekBit(i8* %arraydecay72, i32 %sub75)
  call void @pokeBit(i8* %arraydecay70, i32 %38, i32 %call76)
  br label %for.inc77

for.inc77:                                        ; preds = %for.body68
  %42 = load i32, i32* %j, align 4
  %inc78 = add nsw i32 %42, 1
  store i32 %inc78, i32* %j, align 4
  br label %for.cond65

for.end79:                                        ; preds = %for.cond65
  br label %for.inc80

for.inc80:                                        ; preds = %for.end79
  %43 = load i32, i32* %i, align 4
  %inc81 = add nsw i32 %43, 1
  store i32 %inc81, i32* %i, align 4
  br label %for.cond61

for.end82:                                        ; preds = %for.cond61
  ret void
}

declare noalias i8* @malloc(i32 %0) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: noinline nounwind optnone
define internal void @processMessage(i8* %message, [6 x i8]* %ks, i8* %ep) #0 {
entry:
  %message.addr = alloca i8*, align 4
  %ks.addr = alloca [6 x i8]*, align 4
  %ep.addr = alloca i8*, align 4
  %left = alloca [17 x [4 x i8]], align 16
  %right = alloca [17 x [4 x i8]], align 16
  %mp = alloca [8 x i8], align 1
  %e = alloca [8 x i8], align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %fs = alloca [4 x i8], align 1
  store i8* %message, i8** %message.addr, align 4
  store [6 x i8]* %ks, [6 x i8]** %ks.addr, align 4
  store i8* %ep, i8** %ep.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 64
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %mp, i32 0, i32 0
  %1 = load i32, i32* %i, align 4
  %2 = load i8*, i8** %message.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [64 x i8], [64 x i8]* @IP, i32 0, i32 %3
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %sub = sub nsw i32 %conv, 1
  %call = call i32 @peekBit(i8* %2, i32 %sub)
  call void @pokeBit(i8* %arraydecay, i32 %1, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc13, %for.end
  %6 = load i32, i32* %i, align 4
  %cmp2 = icmp slt i32 %6, 32
  br i1 %cmp2, label %for.body4, label %for.end15

for.body4:                                        ; preds = %for.cond1
  %arrayidx5 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 0
  %arraydecay6 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx5, i32 0, i32 0
  %7 = load i32, i32* %i, align 4
  %arraydecay7 = getelementptr inbounds [8 x i8], [8 x i8]* %mp, i32 0, i32 0
  %8 = load i32, i32* %i, align 4
  %call8 = call i32 @peekBit(i8* %arraydecay7, i32 %8)
  call void @pokeBit(i8* %arraydecay6, i32 %7, i32 %call8)
  %arrayidx9 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 0
  %arraydecay10 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx9, i32 0, i32 0
  %9 = load i32, i32* %i, align 4
  %arraydecay11 = getelementptr inbounds [8 x i8], [8 x i8]* %mp, i32 0, i32 0
  %10 = load i32, i32* %i, align 4
  %add = add nsw i32 %10, 32
  %call12 = call i32 @peekBit(i8* %arraydecay11, i32 %add)
  call void @pokeBit(i8* %arraydecay10, i32 %9, i32 %call12)
  br label %for.inc13

for.inc13:                                        ; preds = %for.body4
  %11 = load i32, i32* %i, align 4
  %inc14 = add nsw i32 %11, 1
  store i32 %inc14, i32* %i, align 4
  br label %for.cond1

for.end15:                                        ; preds = %for.cond1
  store i32 1, i32* %i, align 4
  br label %for.cond16

for.cond16:                                       ; preds = %for.inc50, %for.end15
  %12 = load i32, i32* %i, align 4
  %cmp17 = icmp slt i32 %12, 17
  br i1 %cmp17, label %for.body19, label %for.end52

for.body19:                                       ; preds = %for.cond16
  %13 = load i32, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 %13
  %arraydecay21 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx20, i32 0, i32 0
  %14 = load i32, i32* %i, align 4
  %sub22 = sub nsw i32 %14, 1
  %arrayidx23 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 %sub22
  %arraydecay24 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx23, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %arraydecay21, i8* align 4 %arraydecay24, i32 4, i1 false)
  %15 = load i32, i32* %i, align 4
  %sub25 = sub nsw i32 %15, 1
  %arrayidx26 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 %sub25
  %arraydecay27 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx26, i32 0, i32 0
  %16 = load [6 x i8]*, [6 x i8]** %ks.addr, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds [6 x i8], [6 x i8]* %16, i32 %17
  %arraydecay29 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx28, i32 0, i32 0
  %arraydecay30 = getelementptr inbounds [4 x i8], [4 x i8]* %fs, i32 0, i32 0
  call void @f(i8* %arraydecay27, i8* %arraydecay29, i8* %arraydecay30)
  store i32 0, i32* %j, align 4
  br label %for.cond31

for.cond31:                                       ; preds = %for.inc42, %for.body19
  %18 = load i32, i32* %j, align 4
  %cmp32 = icmp slt i32 %18, 4
  br i1 %cmp32, label %for.body34, label %for.end44

for.body34:                                       ; preds = %for.cond31
  %19 = load i32, i32* %j, align 4
  %arrayidx35 = getelementptr inbounds [4 x i8], [4 x i8]* %fs, i32 0, i32 %19
  %20 = load i8, i8* %arrayidx35, align 1
  %conv36 = zext i8 %20 to i32
  %21 = load i32, i32* %i, align 4
  %sub37 = sub nsw i32 %21, 1
  %arrayidx38 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 %sub37
  %22 = load i32, i32* %j, align 4
  %arrayidx39 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx38, i32 0, i32 %22
  %23 = load i8, i8* %arrayidx39, align 1
  %conv40 = zext i8 %23 to i32
  %xor = xor i32 %conv40, %conv36
  %conv41 = trunc i32 %xor to i8
  store i8 %conv41, i8* %arrayidx39, align 1
  br label %for.inc42

for.inc42:                                        ; preds = %for.body34
  %24 = load i32, i32* %j, align 4
  %inc43 = add nsw i32 %24, 1
  store i32 %inc43, i32* %j, align 4
  br label %for.cond31

for.end44:                                        ; preds = %for.cond31
  %25 = load i32, i32* %i, align 4
  %arrayidx45 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 %25
  %arraydecay46 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx45, i32 0, i32 0
  %26 = load i32, i32* %i, align 4
  %sub47 = sub nsw i32 %26, 1
  %arrayidx48 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 %sub47
  %arraydecay49 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx48, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %arraydecay46, i8* align 4 %arraydecay49, i32 4, i1 false)
  br label %for.inc50

for.inc50:                                        ; preds = %for.end44
  %27 = load i32, i32* %i, align 4
  %inc51 = add nsw i32 %27, 1
  store i32 %inc51, i32* %i, align 4
  br label %for.cond16

for.end52:                                        ; preds = %for.cond16
  store i32 0, i32* %i, align 4
  br label %for.cond53

for.cond53:                                       ; preds = %for.inc61, %for.end52
  %28 = load i32, i32* %i, align 4
  %cmp54 = icmp slt i32 %28, 32
  br i1 %cmp54, label %for.body56, label %for.end63

for.body56:                                       ; preds = %for.cond53
  %arraydecay57 = getelementptr inbounds [8 x i8], [8 x i8]* %e, i32 0, i32 0
  %29 = load i32, i32* %i, align 4
  %arrayidx58 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %right, i32 0, i32 16
  %arraydecay59 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx58, i32 0, i32 0
  %30 = load i32, i32* %i, align 4
  %call60 = call i32 @peekBit(i8* %arraydecay59, i32 %30)
  call void @pokeBit(i8* %arraydecay57, i32 %29, i32 %call60)
  br label %for.inc61

for.inc61:                                        ; preds = %for.body56
  %31 = load i32, i32* %i, align 4
  %inc62 = add nsw i32 %31, 1
  store i32 %inc62, i32* %i, align 4
  br label %for.cond53

for.end63:                                        ; preds = %for.cond53
  store i32 32, i32* %i, align 4
  br label %for.cond64

for.cond64:                                       ; preds = %for.inc73, %for.end63
  %32 = load i32, i32* %i, align 4
  %cmp65 = icmp slt i32 %32, 64
  br i1 %cmp65, label %for.body67, label %for.end75

for.body67:                                       ; preds = %for.cond64
  %arraydecay68 = getelementptr inbounds [8 x i8], [8 x i8]* %e, i32 0, i32 0
  %33 = load i32, i32* %i, align 4
  %arrayidx69 = getelementptr inbounds [17 x [4 x i8]], [17 x [4 x i8]]* %left, i32 0, i32 16
  %arraydecay70 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx69, i32 0, i32 0
  %34 = load i32, i32* %i, align 4
  %sub71 = sub nsw i32 %34, 32
  %call72 = call i32 @peekBit(i8* %arraydecay70, i32 %sub71)
  call void @pokeBit(i8* %arraydecay68, i32 %33, i32 %call72)
  br label %for.inc73

for.inc73:                                        ; preds = %for.body67
  %35 = load i32, i32* %i, align 4
  %inc74 = add nsw i32 %35, 1
  store i32 %inc74, i32* %i, align 4
  br label %for.cond64

for.end75:                                        ; preds = %for.cond64
  store i32 0, i32* %i, align 4
  br label %for.cond76

for.cond76:                                       ; preds = %for.inc85, %for.end75
  %36 = load i32, i32* %i, align 4
  %cmp77 = icmp slt i32 %36, 64
  br i1 %cmp77, label %for.body79, label %for.end87

for.body79:                                       ; preds = %for.cond76
  %37 = load i8*, i8** %ep.addr, align 4
  %38 = load i32, i32* %i, align 4
  %arraydecay80 = getelementptr inbounds [8 x i8], [8 x i8]* %e, i32 0, i32 0
  %39 = load i32, i32* %i, align 4
  %arrayidx81 = getelementptr inbounds [64 x i8], [64 x i8]* @IP2, i32 0, i32 %39
  %40 = load i8, i8* %arrayidx81, align 1
  %conv82 = zext i8 %40 to i32
  %sub83 = sub nsw i32 %conv82, 1
  %call84 = call i32 @peekBit(i8* %arraydecay80, i32 %sub83)
  call void @pokeBit(i8* %37, i32 %38, i32 %call84)
  br label %for.inc85

for.inc85:                                        ; preds = %for.body79
  %41 = load i32, i32* %i, align 4
  %inc86 = add nsw i32 %41, 1
  store i32 %inc86, i32* %i, align 4
  br label %for.cond76

for.end87:                                        ; preds = %for.cond76
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @decrypt(%struct.String* noalias sret align 4 %agg.result, i8* %key, i8* %message, i32 %len) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %message.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %ks = alloca [17 x [6 x i8]], align 16
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %padByte = alloca i8, align 1
  %temp = alloca i8, align 1
  store i8* %key, i8** %key.addr, align 4
  store i8* %message, i8** %message.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = bitcast %struct.String* %agg.result to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 8, i1 false)
  %1 = load i8*, i8** %key.addr, align 4
  %arraydecay = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  call void @getSubKeys(i8* %1, [6 x i8]* %arraydecay)
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc12, %entry
  %2 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, 9
  br i1 %cmp, label %for.body, label %for.end14

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %3, 6
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %4
  %5 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx, i32 0, i32 %5
  %6 = load i8, i8* %arrayidx4, align 1
  store i8 %6, i8* %temp, align 1
  %7 = load i32, i32* %i, align 4
  %sub = sub nsw i32 17, %7
  %arrayidx5 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %sub
  %8 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx5, i32 0, i32 %8
  %9 = load i8, i8* %arrayidx6, align 1
  %10 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %10
  %11 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx7, i32 0, i32 %11
  store i8 %9, i8* %arrayidx8, align 1
  %12 = load i8, i8* %temp, align 1
  %13 = load i32, i32* %i, align 4
  %sub9 = sub nsw i32 17, %13
  %arrayidx10 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 %sub9
  %14 = load i32, i32* %j, align 4
  %arrayidx11 = getelementptr inbounds [6 x i8], [6 x i8]* %arrayidx10, i32 0, i32 %14
  store i8 %12, i8* %arrayidx11, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %15 = load i32, i32* %j, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc12

for.inc12:                                        ; preds = %for.end
  %16 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %16, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond

for.end14:                                        ; preds = %for.cond
  %17 = load i32, i32* %len.addr, align 4
  %call = call noalias i8* @malloc(i32 %17)
  %data = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  store i8* %call, i8** %data, align 4
  %data15 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %18 = load i8*, i8** %data15, align 4
  %19 = load i8*, i8** %message.addr, align 4
  %20 = load i32, i32* %len.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %18, i8* align 1 %19, i32 %20, i1 false)
  %21 = load i32, i32* %len.addr, align 4
  %len16 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  store i32 %21, i32* %len16, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond17

for.cond17:                                       ; preds = %for.inc26, %for.end14
  %22 = load i32, i32* %i, align 4
  %len18 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %23 = load i32, i32* %len18, align 4
  %cmp19 = icmp slt i32 %22, %23
  br i1 %cmp19, label %for.body20, label %for.end27

for.body20:                                       ; preds = %for.cond17
  %data21 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %24 = load i8*, i8** %data21, align 4
  %25 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds i8, i8* %24, i32 %25
  %arraydecay23 = getelementptr inbounds [17 x [6 x i8]], [17 x [6 x i8]]* %ks, i32 0, i32 0
  %data24 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %26 = load i8*, i8** %data24, align 4
  %27 = load i32, i32* %i, align 4
  %arrayidx25 = getelementptr inbounds i8, i8* %26, i32 %27
  call void @processMessage(i8* %arrayidx22, [6 x i8]* %arraydecay23, i8* %arrayidx25)
  br label %for.inc26

for.inc26:                                        ; preds = %for.body20
  %28 = load i32, i32* %i, align 4
  %add = add nsw i32 %28, 8
  store i32 %add, i32* %i, align 4
  br label %for.cond17

for.end27:                                        ; preds = %for.cond17
  %data28 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 0
  %29 = load i8*, i8** %data28, align 4
  %30 = load i32, i32* %len.addr, align 4
  %sub29 = sub nsw i32 %30, 1
  %arrayidx30 = getelementptr inbounds i8, i8* %29, i32 %sub29
  %31 = load i8, i8* %arrayidx30, align 1
  store i8 %31, i8* %padByte, align 1
  %32 = load i8, i8* %padByte, align 1
  %conv = zext i8 %32 to i32
  %len31 = getelementptr inbounds %struct.String, %struct.String* %agg.result, i32 0, i32 1
  %33 = load i32, i32* %len31, align 4
  %sub32 = sub nsw i32 %33, %conv
  store i32 %sub32, i32* %len31, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @driver(i8* %key, i8* %message, i32 %len) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %message.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %encoded = alloca %struct.String, align 4
  %decoded = alloca %struct.String, align 4
  %buffer = alloca [128 x i8], align 16
  %tmp = alloca %struct.String, align 4
  %tmp9 = alloca %struct.String, align 4
  store i8* %key, i8** %key.addr, align 4
  store i8* %message, i8** %message.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load i8*, i8** %key.addr, align 4
  %arraydecay = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %0, i32 8, i8* %arraydecay)
  %arraydecay1 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i32 0, i32 0), i8* %arraydecay1)
  %1 = load i8*, i8** %message.addr, align 4
  %2 = load i32, i32* %len.addr, align 4
  %arraydecay2 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %1, i32 %2, i8* %arraydecay2)
  %arraydecay3 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0), i8* %arraydecay3)
  %3 = load i8*, i8** %key.addr, align 4
  %4 = load i8*, i8** %message.addr, align 4
  %5 = load i32, i32* %len.addr, align 4
  call void @encrypt(%struct.String* sret align 4 %tmp, i8* %3, i8* %4, i32 %5)
  %6 = bitcast %struct.String* %encoded to i8*
  %7 = bitcast %struct.String* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %6, i8* align 4 %7, i32 8, i1 false)
  %data = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  %8 = load i8*, i8** %data, align 4
  %len5 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 1
  %9 = load i32, i32* %len5, align 4
  %arraydecay6 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %8, i32 %9, i8* %arraydecay6)
  %arraydecay7 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0), i8* %arraydecay7)
  %10 = load i8*, i8** %key.addr, align 4
  %data10 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  %11 = load i8*, i8** %data10, align 4
  %len11 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 1
  %12 = load i32, i32* %len11, align 4
  call void @decrypt(%struct.String* sret align 4 %tmp9, i8* %10, i8* %11, i32 %12)
  %13 = bitcast %struct.String* %decoded to i8*
  %14 = bitcast %struct.String* %tmp9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %13, i8* align 4 %14, i32 8, i1 false)
  %data12 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 0
  %15 = load i8*, i8** %data12, align 4
  %len13 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 1
  %16 = load i32, i32* %len13, align 4
  %arraydecay14 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  call void @printBytes(i8* %15, i32 %16, i8* %arraydecay14)
  %arraydecay15 = getelementptr inbounds [128 x i8], [128 x i8]* %buffer, i32 0, i32 0
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0), i8* %arraydecay15)
  %len17 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 1
  %17 = load i32, i32* %len17, align 4
  %cmp = icmp sgt i32 %17, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %data18 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  %18 = load i8*, i8** %data18, align 4
  call void @free(i8* %18)
  %data19 = getelementptr inbounds %struct.String, %struct.String* %encoded, i32 0, i32 0
  store i8* null, i8** %data19, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %len20 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 1
  %19 = load i32, i32* %len20, align 4
  %cmp21 = icmp sgt i32 %19, 0
  br i1 %cmp21, label %if.then22, label %if.end25

if.then22:                                        ; preds = %if.end
  %data23 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 0
  %20 = load i8*, i8** %data23, align 4
  call void @free(i8* %20)
  %data24 = getelementptr inbounds %struct.String, %struct.String* %decoded, i32 0, i32 0
  store i8* null, i8** %data24, align 4
  br label %if.end25

if.end25:                                         ; preds = %if.then22, %if.end
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @printBytes(i8* %ptr, i32 %len, i8* %out) #0 {
entry:
  %ptr.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %out.addr = alloca i8*, align 4
  store i8* %ptr, i8** %ptr.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %len.addr, align 4
  %dec = add nsw i32 %0, -1
  store i32 %dec, i32* %len.addr, align 4
  %cmp = icmp sgt i32 %0, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i8*, i8** %ptr.addr, align 4
  %2 = load i8, i8* %1, align 1
  %conv = zext i8 %2 to i32
  %shr = ashr i32 %conv, 4
  %conv1 = trunc i32 %shr to i8
  %call = call signext i8 @toHex(i8 zeroext %conv1)
  %3 = load i8*, i8** %out.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %3, i32 1
  store i8* %incdec.ptr, i8** %out.addr, align 4
  store i8 %call, i8* %3, align 1
  %4 = load i8*, i8** %ptr.addr, align 4
  %5 = load i8, i8* %4, align 1
  %conv2 = zext i8 %5 to i32
  %and = and i32 %conv2, 15
  %conv3 = trunc i32 %and to i8
  %call4 = call signext i8 @toHex(i8 zeroext %conv3)
  %6 = load i8*, i8** %out.addr, align 4
  %incdec.ptr5 = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr5, i8** %out.addr, align 4
  store i8 %call4, i8* %6, align 1
  %7 = load i8*, i8** %ptr.addr, align 4
  %incdec.ptr6 = getelementptr inbounds i8, i8* %7, i32 1
  store i8* %incdec.ptr6, i8** %ptr.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %8 = load i8*, i8** %out.addr, align 4
  store i8 0, i8* %8, align 1
  ret void
}

declare i32 @printf(i8* %0, ...) #2

declare void @free(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %keys = alloca [3 x [8 x i8]], align 16
  %message1 = alloca [8 x i8], align 1
  %message2 = alloca [8 x i8], align 1
  %message3 = alloca [38 x i8], align 16
  %len = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [3 x [8 x i8]]* %keys to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 getelementptr inbounds ([3 x [8 x i8]], [3 x [8 x i8]]* @__const.main.keys, i32 0, i32 0, i32 0), i32 24, i1 false)
  %1 = bitcast [8 x i8]* %message1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %1, i8* align 1 getelementptr inbounds ([8 x i8], [8 x i8]* @__const.main.message1, i32 0, i32 0), i32 8, i1 false)
  %2 = bitcast [8 x i8]* %message2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %2, i8* align 1 getelementptr inbounds ([8 x i8], [8 x i8]* @__const.main.message2, i32 0, i32 0), i32 8, i1 false)
  %3 = bitcast [38 x i8]* %message3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %3, i8* align 16 getelementptr inbounds ([38 x i8], [38 x i8]* @__const.main.message3, i32 0, i32 0), i32 38, i1 false)
  store i32 8, i32* %len, align 4
  %arrayidx = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* %keys, i32 0, i32 0
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %arrayidx, i32 0, i32 0
  %arraydecay1 = getelementptr inbounds [8 x i8], [8 x i8]* %message1, i32 0, i32 0
  %4 = load i32, i32* %len, align 4
  call void @driver(i8* %arraydecay, i8* %arraydecay1, i32 %4)
  store i32 8, i32* %len, align 4
  %arrayidx2 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* %keys, i32 0, i32 1
  %arraydecay3 = getelementptr inbounds [8 x i8], [8 x i8]* %arrayidx2, i32 0, i32 0
  %arraydecay4 = getelementptr inbounds [8 x i8], [8 x i8]* %message2, i32 0, i32 0
  %5 = load i32, i32* %len, align 4
  call void @driver(i8* %arraydecay3, i8* %arraydecay4, i32 %5)
  store i32 38, i32* %len, align 4
  %arrayidx5 = getelementptr inbounds [3 x [8 x i8]], [3 x [8 x i8]]* %keys, i32 0, i32 2
  %arraydecay6 = getelementptr inbounds [8 x i8], [8 x i8]* %arrayidx5, i32 0, i32 0
  %arraydecay7 = getelementptr inbounds [38 x i8], [38 x i8]* %message3, i32 0, i32 0
  %6 = load i32, i32* %len, align 4
  call void @driver(i8* %arraydecay6, i8* %arraydecay7, i32 %6)
  ret i32 0
}

; Function Attrs: noinline nounwind optnone
define internal void @pokeBit(i8* %dst, i32 %index, i32 %value) #0 {
entry:
  %dst.addr = alloca i8*, align 4
  %index.addr = alloca i32, align 4
  %value.addr = alloca i32, align 4
  %cell = alloca i32, align 4
  %bit = alloca i32, align 4
  store i8* %dst, i8** %dst.addr, align 4
  store i32 %index, i32* %index.addr, align 4
  store i32 %value, i32* %value.addr, align 4
  %0 = load i32, i32* %index.addr, align 4
  %div = sdiv i32 %0, 8
  store i32 %div, i32* %cell, align 4
  %1 = load i32, i32* %index.addr, align 4
  %rem = srem i32 %1, 8
  %sub = sub nsw i32 7, %rem
  store i32 %sub, i32* %bit, align 4
  %2 = load i32, i32* %value.addr, align 4
  %cmp = icmp eq i32 %2, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %bit, align 4
  %shl = shl i32 1, %3
  %neg = xor i32 %shl, -1
  %4 = load i8*, i8** %dst.addr, align 4
  %5 = load i32, i32* %cell, align 4
  %arrayidx = getelementptr inbounds i8, i8* %4, i32 %5
  %6 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %6 to i32
  %and = and i32 %conv, %neg
  %conv1 = trunc i32 %and to i8
  store i8 %conv1, i8* %arrayidx, align 1
  br label %if.end

if.else:                                          ; preds = %entry
  %7 = load i32, i32* %bit, align 4
  %shl2 = shl i32 1, %7
  %8 = load i8*, i8** %dst.addr, align 4
  %9 = load i32, i32* %cell, align 4
  %arrayidx3 = getelementptr inbounds i8, i8* %8, i32 %9
  %10 = load i8, i8* %arrayidx3, align 1
  %conv4 = zext i8 %10 to i32
  %or = or i32 %conv4, %shl2
  %conv5 = trunc i32 %or to i8
  store i8 %conv5, i8* %arrayidx3, align 1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i32 @peekBit(i8* %src, i32 %index) #0 {
entry:
  %src.addr = alloca i8*, align 4
  %index.addr = alloca i32, align 4
  %cell = alloca i32, align 4
  %bit = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 4
  store i32 %index, i32* %index.addr, align 4
  %0 = load i32, i32* %index.addr, align 4
  %div = sdiv i32 %0, 8
  store i32 %div, i32* %cell, align 4
  %1 = load i32, i32* %index.addr, align 4
  %rem = srem i32 %1, 8
  %sub = sub nsw i32 7, %rem
  store i32 %sub, i32* %bit, align 4
  %2 = load i8*, i8** %src.addr, align 4
  %3 = load i32, i32* %cell, align 4
  %arrayidx = getelementptr inbounds i8, i8* %2, i32 %3
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %5 = load i32, i32* %bit, align 4
  %shl = shl i32 1, %5
  %and = and i32 %conv, %shl
  %cmp = icmp ne i32 %and, 0
  %conv1 = zext i1 %cmp to i32
  ret i32 %conv1
}

; Function Attrs: noinline nounwind optnone
define internal void @shiftLeft(i8* %src, i32 %len, i32 %times, i8* %dst) #0 {
entry:
  %src.addr = alloca i8*, align 4
  %len.addr = alloca i32, align 4
  %times.addr = alloca i32, align 4
  %dst.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %t = alloca i32, align 4
  %temp = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %times, i32* %times.addr, align 4
  store i8* %dst, i8** %dst.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp sle i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8*, i8** %dst.addr, align 4
  %3 = load i32, i32* %i, align 4
  %4 = load i8*, i8** %src.addr, align 4
  %5 = load i32, i32* %i, align 4
  %call = call i32 @peekBit(i8* %4, i32 %5)
  call void @pokeBit(i8* %2, i32 %3, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %t, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc13, %for.end
  %7 = load i32, i32* %t, align 4
  %8 = load i32, i32* %times.addr, align 4
  %cmp2 = icmp sle i32 %7, %8
  br i1 %cmp2, label %for.body3, label %for.end15

for.body3:                                        ; preds = %for.cond1
  %9 = load i8*, i8** %dst.addr, align 4
  %call4 = call i32 @peekBit(i8* %9, i32 0)
  store i32 %call4, i32* %temp, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc9, %for.body3
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %len.addr, align 4
  %cmp6 = icmp sle i32 %10, %11
  br i1 %cmp6, label %for.body7, label %for.end11

for.body7:                                        ; preds = %for.cond5
  %12 = load i8*, i8** %dst.addr, align 4
  %13 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %13, 1
  %14 = load i8*, i8** %dst.addr, align 4
  %15 = load i32, i32* %i, align 4
  %call8 = call i32 @peekBit(i8* %14, i32 %15)
  call void @pokeBit(i8* %12, i32 %sub, i32 %call8)
  br label %for.inc9

for.inc9:                                         ; preds = %for.body7
  %16 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %16, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond5

for.end11:                                        ; preds = %for.cond5
  %17 = load i8*, i8** %dst.addr, align 4
  %18 = load i32, i32* %len.addr, align 4
  %sub12 = sub nsw i32 %18, 1
  %19 = load i32, i32* %temp, align 4
  call void @pokeBit(i8* %17, i32 %sub12, i32 %19)
  br label %for.inc13

for.inc13:                                        ; preds = %for.end11
  %20 = load i32, i32* %t, align 4
  %inc14 = add nsw i32 %20, 1
  store i32 %inc14, i32* %t, align 4
  br label %for.cond1

for.end15:                                        ; preds = %for.cond1
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal void @f(i8* %r, i8* %ks, i8* %sp) #0 {
entry:
  %r.addr = alloca i8*, align 4
  %ks.addr = alloca i8*, align 4
  %sp.addr = alloca i8*, align 4
  %er = alloca [6 x i8], align 1
  %sr = alloca [4 x i8], align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %b = alloca [6 x i32], align 16
  %k = alloca i32, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  %m = alloca i32, align 4
  %n = alloca i32, align 4
  %p = alloca i32, align 4
  store i8* %r, i8** %r.addr, align 4
  store i8* %ks, i8** %ks.addr, align 4
  store i8* %sp, i8** %sp.addr, align 4
  %arraydecay = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  call void @llvm.memset.p0i8.i32(i8* align 1 %arraydecay, i8 0, i32 6, i1 false)
  %arraydecay1 = getelementptr inbounds [4 x i8], [4 x i8]* %sr, i32 0, i32 0
  call void @llvm.memset.p0i8.i32(i8* align 1 %arraydecay1, i8 0, i32 4, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 48
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay2 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  %1 = load i32, i32* %i, align 4
  %2 = load i8*, i8** %r.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [48 x i8], [48 x i8]* @E, i32 0, i32 %3
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %sub = sub nsw i32 %conv, 1
  %call = call i32 @peekBit(i8* %2, i32 %sub)
  call void @pokeBit(i8* %arraydecay2, i32 %1, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc12, %for.end
  %6 = load i32, i32* %i, align 4
  %cmp4 = icmp slt i32 %6, 6
  br i1 %cmp4, label %for.body6, label %for.end14

for.body6:                                        ; preds = %for.cond3
  %7 = load i8*, i8** %ks.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds i8, i8* %7, i32 %8
  %9 = load i8, i8* %arrayidx7, align 1
  %conv8 = zext i8 %9 to i32
  %10 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 %10
  %11 = load i8, i8* %arrayidx9, align 1
  %conv10 = zext i8 %11 to i32
  %xor = xor i32 %conv10, %conv8
  %conv11 = trunc i32 %xor to i8
  store i8 %conv11, i8* %arrayidx9, align 1
  br label %for.inc12

for.inc12:                                        ; preds = %for.body6
  %12 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %12, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond3

for.end14:                                        ; preds = %for.cond3
  store i32 0, i32* %i, align 4
  br label %for.cond15

for.cond15:                                       ; preds = %for.inc59, %for.end14
  %13 = load i32, i32* %i, align 4
  %cmp16 = icmp slt i32 %13, 8
  br i1 %cmp16, label %for.body18, label %for.end61

for.body18:                                       ; preds = %for.cond15
  %14 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %14, 6
  store i32 %mul, i32* %j, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond19

for.cond19:                                       ; preds = %for.inc28, %for.body18
  %15 = load i32, i32* %k, align 4
  %cmp20 = icmp slt i32 %15, 6
  br i1 %cmp20, label %for.body22, label %for.end30

for.body22:                                       ; preds = %for.cond19
  %arraydecay23 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  %16 = load i32, i32* %j, align 4
  %17 = load i32, i32* %k, align 4
  %add = add nsw i32 %16, %17
  %call24 = call i32 @peekBit(i8* %arraydecay23, i32 %add)
  %cmp25 = icmp ne i32 %call24, 0
  %18 = zext i1 %cmp25 to i64
  %cond = select i1 %cmp25, i32 1, i32 0
  %19 = load i32, i32* %k, align 4
  %arrayidx27 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 %19
  store i32 %cond, i32* %arrayidx27, align 4
  br label %for.inc28

for.inc28:                                        ; preds = %for.body22
  %20 = load i32, i32* %k, align 4
  %inc29 = add nsw i32 %20, 1
  store i32 %inc29, i32* %k, align 4
  br label %for.cond19

for.end30:                                        ; preds = %for.cond19
  %arrayidx31 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 0
  %21 = load i32, i32* %arrayidx31, align 16
  %mul32 = mul nsw i32 2, %21
  %arrayidx33 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 5
  %22 = load i32, i32* %arrayidx33, align 4
  %add34 = add nsw i32 %mul32, %22
  store i32 %add34, i32* %row, align 4
  %arrayidx35 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 1
  %23 = load i32, i32* %arrayidx35, align 4
  %mul36 = mul nsw i32 8, %23
  %arrayidx37 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 2
  %24 = load i32, i32* %arrayidx37, align 8
  %mul38 = mul nsw i32 4, %24
  %add39 = add nsw i32 %mul36, %mul38
  %arrayidx40 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 3
  %25 = load i32, i32* %arrayidx40, align 4
  %mul41 = mul nsw i32 2, %25
  %add42 = add nsw i32 %add39, %mul41
  %arrayidx43 = getelementptr inbounds [6 x i32], [6 x i32]* %b, i32 0, i32 4
  %26 = load i32, i32* %arrayidx43, align 16
  %add44 = add nsw i32 %add42, %26
  store i32 %add44, i32* %col, align 4
  %27 = load i32, i32* %i, align 4
  %arrayidx45 = getelementptr inbounds [8 x [64 x i8]], [8 x [64 x i8]]* @S, i32 0, i32 %27
  %28 = load i32, i32* %row, align 4
  %mul46 = mul nsw i32 %28, 16
  %29 = load i32, i32* %col, align 4
  %add47 = add nsw i32 %mul46, %29
  %arrayidx48 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx45, i32 0, i32 %add47
  %30 = load i8, i8* %arrayidx48, align 1
  %conv49 = zext i8 %30 to i32
  store i32 %conv49, i32* %m, align 4
  store i32 1, i32* %n, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end30
  %31 = load i32, i32* %m, align 4
  %cmp50 = icmp sgt i32 %31, 0
  br i1 %cmp50, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %32 = load i32, i32* %m, align 4
  %rem = srem i32 %32, 2
  store i32 %rem, i32* %p, align 4
  %arraydecay52 = getelementptr inbounds [4 x i8], [4 x i8]* %sr, i32 0, i32 0
  %33 = load i32, i32* %i, align 4
  %add53 = add nsw i32 %33, 1
  %mul54 = mul nsw i32 %add53, 4
  %34 = load i32, i32* %n, align 4
  %sub55 = sub nsw i32 %mul54, %34
  %35 = load i32, i32* %p, align 4
  %cmp56 = icmp eq i32 %35, 1
  %conv57 = zext i1 %cmp56 to i32
  call void @pokeBit(i8* %arraydecay52, i32 %sub55, i32 %conv57)
  %36 = load i32, i32* %m, align 4
  %div = sdiv i32 %36, 2
  store i32 %div, i32* %m, align 4
  %37 = load i32, i32* %n, align 4
  %inc58 = add nsw i32 %37, 1
  store i32 %inc58, i32* %n, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %for.inc59

for.inc59:                                        ; preds = %while.end
  %38 = load i32, i32* %i, align 4
  %inc60 = add nsw i32 %38, 1
  store i32 %inc60, i32* %i, align 4
  br label %for.cond15

for.end61:                                        ; preds = %for.cond15
  store i32 0, i32* %i, align 4
  br label %for.cond62

for.cond62:                                       ; preds = %for.inc71, %for.end61
  %39 = load i32, i32* %i, align 4
  %cmp63 = icmp slt i32 %39, 32
  br i1 %cmp63, label %for.body65, label %for.end73

for.body65:                                       ; preds = %for.cond62
  %40 = load i8*, i8** %sp.addr, align 4
  %41 = load i32, i32* %i, align 4
  %arraydecay66 = getelementptr inbounds [4 x i8], [4 x i8]* %sr, i32 0, i32 0
  %42 = load i32, i32* %i, align 4
  %arrayidx67 = getelementptr inbounds [32 x i8], [32 x i8]* @P, i32 0, i32 %42
  %43 = load i8, i8* %arrayidx67, align 1
  %conv68 = zext i8 %43 to i32
  %sub69 = sub nsw i32 %conv68, 1
  %call70 = call i32 @peekBit(i8* %arraydecay66, i32 %sub69)
  call void @pokeBit(i8* %40, i32 %41, i32 %call70)
  br label %for.inc71

for.inc71:                                        ; preds = %for.body65
  %44 = load i32, i32* %i, align 4
  %inc72 = add nsw i32 %44, 1
  store i32 %inc72, i32* %i, align 4
  br label %for.cond62

for.end73:                                        ; preds = %for.cond62
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal signext i8 @toHex(i8 zeroext %in) #0 {
entry:
  %retval = alloca i8, align 1
  %in.addr = alloca i8, align 1
  store i8 %in, i8* %in.addr, align 1
  br i1 true, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %0 = load i8, i8* %in.addr, align 1
  %conv2 = zext i8 %0 to i32
  %cmp3 = icmp slt i32 %conv2, 10
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %1 = load i8, i8* %in.addr, align 1
  %conv5 = zext i8 %1 to i32
  %add = add nsw i32 48, %conv5
  %conv6 = trunc i32 %add to i8
  store i8 %conv6, i8* %retval, align 1
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %2 = load i8, i8* %in.addr, align 1
  %conv7 = zext i8 %2 to i32
  %cmp8 = icmp sle i32 10, %conv7
  br i1 %cmp8, label %land.lhs.true10, label %if.end18

land.lhs.true10:                                  ; preds = %if.end
  %3 = load i8, i8* %in.addr, align 1
  %conv11 = zext i8 %3 to i32
  %cmp12 = icmp sle i32 %conv11, 15
  br i1 %cmp12, label %if.then14, label %if.end18

if.then14:                                        ; preds = %land.lhs.true10
  %4 = load i8, i8* %in.addr, align 1
  %conv15 = zext i8 %4 to i32
  %add16 = add nsw i32 65, %conv15
  %sub = sub nsw i32 %add16, 10
  %conv17 = trunc i32 %sub to i8
  store i8 %conv17, i8* %retval, align 1
  br label %return

if.end18:                                         ; preds = %land.lhs.true10, %if.end
  store i8 0, i8* %retval, align 1
  br label %return

return:                                           ; preds = %if.end18, %if.then14, %if.then
  %5 = load i8, i8* %retval, align 1
  ret i8 %5
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i8, i8* %in.addr, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv2 = zext i8 %0 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp3 = icmp slt i32 %conv2, 10
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
%2:i1 = slt %1, 10:i32
infer %2

; *****
; For LLVM instruction:
;  %1 = load i8, i8* %in.addr, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv5 = zext i8 %1 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %add = add nsw i32 48, %conv5
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
%2:i32 = addnsw 48:i32, %1
infer %2 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %conv6 = trunc i32 %add to i8
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
%2:i32 = addnsw 48:i32, %1
%3:i8 = trunc %2
infer %3

; *****
; For LLVM instruction:
;  %2 = load i8, i8* %in.addr, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv7 = zext i8 %2 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp8 = icmp sle i32 10, %conv7
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
%2:i1 = sle 10:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i8, i8* %in.addr, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv11 = zext i8 %3 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp12 = icmp sle i32 %conv11, 15
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
%2:i1 = sle %1, 15:i32
infer %2

; *****
; For LLVM instruction:
;  %4 = load i8, i8* %in.addr, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv15 = zext i8 %4 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %add16 = add nsw i32 65, %conv15
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
%2:i32 = addnsw 65:i32, %1
infer %2 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %add16, 10
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
%2:i32 = addnsw 65:i32, %1
%3:i32 = subnsw %2, 10:i32
infer %3 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %conv17 = trunc i32 %sub to i8
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
%2:i32 = addnsw 65:i32, %1
%3:i32 = subnsw %2, 10:i32
%4:i8 = trunc %3
infer %4

; *****
; For LLVM instruction:
;  %5 = load i8, i8* %retval, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = zext %0
%2:i1 = slt %1, 10:i32
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = zext %0
%2:i32 = addnsw 48:i32, %1
infer %2 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 48
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = zext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = zext %0
%2:i32 = addnsw 48:i32, %1
%3:i8 = trunc %2
infer %3


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 48
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 112
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = zext %0
%2:i1 = sle 10:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = zext %0
%2:i1 = sle %1, 15:i32
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = zext %0
%2:i32 = addnsw 65:i32, %1
infer %2 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 65
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = zext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = zext %0
%2:i32 = addnsw 65:i32, %1
%3:i32 = subnsw %2, 10:i32
infer %3 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 55
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = zext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var
%1:i32 = zext %0
%2:i32 = addnsw 65:i32, %1

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = zext %0
%2:i32 = addnsw 65:i32, %1
%3:i32 = subnsw %2, 10:i32
%4:i8 = trunc %3
infer %4


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 55
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 119
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for ./Data_Encryption_Standard.c.bc:toHex()
Total of 2 replacements done on this module
Total of 2 replacements candidates on this module
