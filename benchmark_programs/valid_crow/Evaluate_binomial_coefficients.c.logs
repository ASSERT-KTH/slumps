
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for binomial()

; ModuleID = './Evaluate_binomial_coefficients.c.bc'
source_filename = "./Evaluate_binomial_coefficients.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [5 x i8] c"%lu\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @binomial(i32 %n, i32 %k) #0 {
entry:
  %retval = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %k.addr = alloca i32, align 4
  %d = alloca i32, align 4
  %g = alloca i32, align 4
  %r = alloca i32, align 4
  %nr = alloca i32, align 4
  %dr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %k, i32* %k.addr, align 4
  store i32 1, i32* %r, align 4
  %0 = load i32, i32* %k.addr, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %k.addr, align 4
  %cmp1 = icmp eq i32 %1, 1
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  %2 = load i32, i32* %n.addr, align 4
  store i32 %2, i32* %retval, align 4
  br label %return

if.end3:                                          ; preds = %if.end
  %3 = load i32, i32* %k.addr, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp4 = icmp uge i32 %3, %4
  br i1 %cmp4, label %if.then5, label %if.end7

if.then5:                                         ; preds = %if.end3
  %5 = load i32, i32* %k.addr, align 4
  %6 = load i32, i32* %n.addr, align 4
  %cmp6 = icmp eq i32 %5, %6
  %conv = zext i1 %cmp6 to i32
  store i32 %conv, i32* %retval, align 4
  br label %return

if.end7:                                          ; preds = %if.end3
  %7 = load i32, i32* %k.addr, align 4
  %8 = load i32, i32* %n.addr, align 4
  %div = udiv i32 %8, 2
  %cmp8 = icmp ugt i32 %7, %div
  br i1 %cmp8, label %if.then10, label %if.end11

if.then10:                                        ; preds = %if.end7
  %9 = load i32, i32* %n.addr, align 4
  %10 = load i32, i32* %k.addr, align 4
  %sub = sub i32 %9, %10
  store i32 %sub, i32* %k.addr, align 4
  br label %if.end11

if.end11:                                         ; preds = %if.then10, %if.end7
  store i32 1, i32* %d, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end11
  %11 = load i32, i32* %d, align 4
  %12 = load i32, i32* %k.addr, align 4
  %cmp12 = icmp ule i32 %11, %12
  br i1 %cmp12, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %13 = load i32, i32* %r, align 4
  %14 = load i32, i32* %n.addr, align 4
  %div14 = udiv i32 -1, %14
  %cmp15 = icmp uge i32 %13, %div14
  br i1 %cmp15, label %if.then17, label %if.else

if.then17:                                        ; preds = %for.body
  %15 = load i32, i32* %n.addr, align 4
  %16 = load i32, i32* %d, align 4
  %call = call i32 @gcd_ui(i32 %15, i32 %16)
  store i32 %call, i32* %g, align 4
  %17 = load i32, i32* %n.addr, align 4
  %18 = load i32, i32* %g, align 4
  %div18 = udiv i32 %17, %18
  store i32 %div18, i32* %nr, align 4
  %19 = load i32, i32* %d, align 4
  %20 = load i32, i32* %g, align 4
  %div19 = udiv i32 %19, %20
  store i32 %div19, i32* %dr, align 4
  %21 = load i32, i32* %r, align 4
  %22 = load i32, i32* %dr, align 4
  %call20 = call i32 @gcd_ui(i32 %21, i32 %22)
  store i32 %call20, i32* %g, align 4
  %23 = load i32, i32* %r, align 4
  %24 = load i32, i32* %g, align 4
  %div21 = udiv i32 %23, %24
  store i32 %div21, i32* %r, align 4
  %25 = load i32, i32* %dr, align 4
  %26 = load i32, i32* %g, align 4
  %div22 = udiv i32 %25, %26
  store i32 %div22, i32* %dr, align 4
  %27 = load i32, i32* %r, align 4
  %28 = load i32, i32* %nr, align 4
  %div23 = udiv i32 -1, %28
  %cmp24 = icmp uge i32 %27, %div23
  br i1 %cmp24, label %if.then26, label %if.end27

if.then26:                                        ; preds = %if.then17
  store i32 0, i32* %retval, align 4
  br label %return

if.end27:                                         ; preds = %if.then17
  %29 = load i32, i32* %nr, align 4
  %30 = load i32, i32* %r, align 4
  %mul = mul i32 %30, %29
  store i32 %mul, i32* %r, align 4
  %31 = load i32, i32* %dr, align 4
  %32 = load i32, i32* %r, align 4
  %div28 = udiv i32 %32, %31
  store i32 %div28, i32* %r, align 4
  %33 = load i32, i32* %n.addr, align 4
  %dec = add i32 %33, -1
  store i32 %dec, i32* %n.addr, align 4
  br label %if.end32

if.else:                                          ; preds = %for.body
  %34 = load i32, i32* %n.addr, align 4
  %dec29 = add i32 %34, -1
  store i32 %dec29, i32* %n.addr, align 4
  %35 = load i32, i32* %r, align 4
  %mul30 = mul i32 %35, %34
  store i32 %mul30, i32* %r, align 4
  %36 = load i32, i32* %d, align 4
  %37 = load i32, i32* %r, align 4
  %div31 = udiv i32 %37, %36
  store i32 %div31, i32* %r, align 4
  br label %if.end32

if.end32:                                         ; preds = %if.else, %if.end27
  br label %for.inc

for.inc:                                          ; preds = %if.end32
  %38 = load i32, i32* %d, align 4
  %inc = add i32 %38, 1
  store i32 %inc, i32* %d, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %39 = load i32, i32* %r, align 4
  store i32 %39, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then26, %if.then5, %if.then2, %if.then
  %40 = load i32, i32* %retval, align 4
  ret i32 %40
}

; Function Attrs: noinline nounwind optnone
define internal i32 @gcd_ui(i32 %x, i32 %y) #0 {
entry:
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %t = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  %0 = load i32, i32* %y.addr, align 4
  %1 = load i32, i32* %x.addr, align 4
  %cmp = icmp ult i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %x.addr, align 4
  store i32 %2, i32* %t, align 4
  %3 = load i32, i32* %y.addr, align 4
  store i32 %3, i32* %x.addr, align 4
  %4 = load i32, i32* %t, align 4
  store i32 %4, i32* %y.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %5 = load i32, i32* %y.addr, align 4
  %cmp1 = icmp ugt i32 %5, 0
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load i32, i32* %y.addr, align 4
  store i32 %6, i32* %t, align 4
  %7 = load i32, i32* %x.addr, align 4
  %8 = load i32, i32* %y.addr, align 4
  %rem = urem i32 %7, %8
  store i32 %rem, i32* %y.addr, align 4
  %9 = load i32, i32* %t, align 4
  store i32 %9, i32* %x.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %10 = load i32, i32* %x.addr, align 4
  ret i32 %10
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call i32 @binomial(i32 5, i32 3)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i32 %call)
  %call2 = call i32 @binomial(i32 40, i32 19)
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i32 %call2)
  %call4 = call i32 @binomial(i32 67, i32 31)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i32 %call4)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %k.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %0, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %k.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = icmp eq i32 %1, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %k.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp4 = icmp uge i32 %3, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ule %0, %1
infer %2

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %k.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp6 = icmp eq i32 %5, %6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %conv = zext i1 %cmp6 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
%3:i32 = zext %2
infer %3

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %k.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div = udiv i32 %8, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = udiv %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp8 = icmp ugt i32 %7, %div
; Looking for a replacement for:
%0:i32 = var
%1:i32 = udiv %0, 2:i32
%2:i32 = var
%3:i1 = ult %1, %2
infer %3

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %k.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub i32 %9, %10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1
infer %2

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %d, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %k.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp12 = icmp ule i32 %11, %12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ule %0, %1
infer %2

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %r, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div14 = udiv i32 -1, %14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = udiv 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp15 = icmp uge i32 %13, %div14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = udiv 4294967295:i32, %0
%2:i32 = var
%3:i1 = ule %1, %2
infer %3

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %d, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 @gcd_ui(i32 %15, i32 %16)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %g, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div18 = udiv i32 %17, %18
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = udiv %0, %1
infer %2

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %d, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %g, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div19 = udiv i32 %19, %20
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = udiv %0, %1
infer %2

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %r, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %dr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call20 = call i32 @gcd_ui(i32 %21, i32 %22)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %r, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %g, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div21 = udiv i32 %23, %24
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = udiv %0, %1
infer %2

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %dr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %g, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div22 = udiv i32 %25, %26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = udiv %0, %1
infer %2

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %r, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %nr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div23 = udiv i32 -1, %28
; Looking for a replacement for:
%0:i32 = var
%1:i32 = udiv 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp24 = icmp uge i32 %27, %div23
; Looking for a replacement for:
%0:i32 = var
%1:i32 = udiv 4294967295:i32, %0
%2:i32 = var
%3:i1 = ule %1, %2
infer %3

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %nr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %r, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul i32 %30, %29
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mul %0, %1
infer %2

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %dr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %r, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div28 = udiv i32 %32, %31
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = udiv %0, %1
infer %2

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec = add i32 %33, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec29 = add i32 %34, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %r, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul30 = mul i32 %35, %34
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mul %0, %1
infer %2

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %d, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %r, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div31 = udiv i32 %37, %36
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = udiv %0, %1
infer %2

; *****
; For LLVM instruction:
;  %38 = load i32, i32* %d, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add i32 %38, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %r, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %40 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = ule %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
%3:i32 = zext %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = udiv %0, 2:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147483647
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = udiv %0, 2:i32
%2:i32 = var
%3:i1 = ult %1, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = udiv 4294967295:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 195225786
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = udiv 4294967295:i32, %0
%2:i32 = var
%3:i1 = ule %1, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = udiv %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 22789806
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mul %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = add 4294967295:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for binomial()

; entering Souper's runOnFunction() for ./Evaluate_binomial_coefficients.c.bc:gcd_ui()

; ModuleID = './Evaluate_binomial_coefficients.c.bc'
source_filename = "./Evaluate_binomial_coefficients.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [5 x i8] c"%lu\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @binomial(i32 %n, i32 %k) #0 {
entry:
  %retval = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %k.addr = alloca i32, align 4
  %d = alloca i32, align 4
  %g = alloca i32, align 4
  %r = alloca i32, align 4
  %nr = alloca i32, align 4
  %dr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %k, i32* %k.addr, align 4
  store i32 1, i32* %r, align 4
  %0 = load i32, i32* %k.addr, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %k.addr, align 4
  %cmp1 = icmp eq i32 %1, 1
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  %2 = load i32, i32* %n.addr, align 4
  store i32 %2, i32* %retval, align 4
  br label %return

if.end3:                                          ; preds = %if.end
  %3 = load i32, i32* %k.addr, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp4 = icmp uge i32 %3, %4
  br i1 %cmp4, label %if.then5, label %if.end7

if.then5:                                         ; preds = %if.end3
  %5 = load i32, i32* %k.addr, align 4
  %6 = load i32, i32* %n.addr, align 4
  %cmp6 = icmp eq i32 %5, %6
  %conv = zext i1 %cmp6 to i32
  store i32 %conv, i32* %retval, align 4
  br label %return

if.end7:                                          ; preds = %if.end3
  %7 = load i32, i32* %k.addr, align 4
  %8 = load i32, i32* %n.addr, align 4
  %div = udiv i32 %8, 2
  %cmp8 = icmp ugt i32 %7, %div
  br i1 %cmp8, label %if.then10, label %if.end11

if.then10:                                        ; preds = %if.end7
  %9 = load i32, i32* %n.addr, align 4
  %10 = load i32, i32* %k.addr, align 4
  %sub = sub i32 %9, %10
  store i32 %sub, i32* %k.addr, align 4
  br label %if.end11

if.end11:                                         ; preds = %if.then10, %if.end7
  store i32 1, i32* %d, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end11
  %11 = load i32, i32* %d, align 4
  %12 = load i32, i32* %k.addr, align 4
  %cmp12 = icmp ule i32 %11, %12
  br i1 %cmp12, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %13 = load i32, i32* %r, align 4
  %14 = load i32, i32* %n.addr, align 4
  %div14 = udiv i32 -1, %14
  %cmp15 = icmp uge i32 %13, %div14
  br i1 %cmp15, label %if.then17, label %if.else

if.then17:                                        ; preds = %for.body
  %15 = load i32, i32* %n.addr, align 4
  %16 = load i32, i32* %d, align 4
  %call = call i32 @gcd_ui(i32 %15, i32 %16)
  store i32 %call, i32* %g, align 4
  %17 = load i32, i32* %n.addr, align 4
  %18 = load i32, i32* %g, align 4
  %div18 = udiv i32 %17, %18
  store i32 %div18, i32* %nr, align 4
  %19 = load i32, i32* %d, align 4
  %20 = load i32, i32* %g, align 4
  %div19 = udiv i32 %19, %20
  store i32 %div19, i32* %dr, align 4
  %21 = load i32, i32* %r, align 4
  %22 = load i32, i32* %dr, align 4
  %call20 = call i32 @gcd_ui(i32 %21, i32 %22)
  store i32 %call20, i32* %g, align 4
  %23 = load i32, i32* %r, align 4
  %24 = load i32, i32* %g, align 4
  %div21 = udiv i32 %23, %24
  store i32 %div21, i32* %r, align 4
  %25 = load i32, i32* %dr, align 4
  %26 = load i32, i32* %g, align 4
  %div22 = udiv i32 %25, %26
  store i32 %div22, i32* %dr, align 4
  %27 = load i32, i32* %r, align 4
  %28 = load i32, i32* %nr, align 4
  %div23 = udiv i32 -1, %28
  %cmp24 = icmp uge i32 %27, %div23
  br i1 %cmp24, label %if.then26, label %if.end27

if.then26:                                        ; preds = %if.then17
  store i32 0, i32* %retval, align 4
  br label %return

if.end27:                                         ; preds = %if.then17
  %29 = load i32, i32* %nr, align 4
  %30 = load i32, i32* %r, align 4
  %mul = mul i32 %30, %29
  store i32 %mul, i32* %r, align 4
  %31 = load i32, i32* %dr, align 4
  %32 = load i32, i32* %r, align 4
  %div28 = udiv i32 %32, %31
  store i32 %div28, i32* %r, align 4
  %33 = load i32, i32* %n.addr, align 4
  %dec = add i32 %33, -1
  store i32 %dec, i32* %n.addr, align 4
  br label %if.end32

if.else:                                          ; preds = %for.body
  %34 = load i32, i32* %n.addr, align 4
  %dec29 = add i32 %34, -1
  store i32 %dec29, i32* %n.addr, align 4
  %35 = load i32, i32* %r, align 4
  %mul30 = mul i32 %35, %34
  store i32 %mul30, i32* %r, align 4
  %36 = load i32, i32* %d, align 4
  %37 = load i32, i32* %r, align 4
  %div31 = udiv i32 %37, %36
  store i32 %div31, i32* %r, align 4
  br label %if.end32

if.end32:                                         ; preds = %if.else, %if.end27
  br label %for.inc

for.inc:                                          ; preds = %if.end32
  %38 = load i32, i32* %d, align 4
  %inc = add i32 %38, 1
  store i32 %inc, i32* %d, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %39 = load i32, i32* %r, align 4
  store i32 %39, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then26, %if.then5, %if.then2, %if.then
  %40 = load i32, i32* %retval, align 4
  ret i32 %40
}

; Function Attrs: noinline nounwind optnone
define internal i32 @gcd_ui(i32 %x, i32 %y) #0 {
entry:
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %t = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  %0 = load i32, i32* %y.addr, align 4
  %1 = load i32, i32* %x.addr, align 4
  %cmp = icmp ult i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %x.addr, align 4
  store i32 %2, i32* %t, align 4
  %3 = load i32, i32* %y.addr, align 4
  store i32 %3, i32* %x.addr, align 4
  %4 = load i32, i32* %t, align 4
  store i32 %4, i32* %y.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %5 = load i32, i32* %y.addr, align 4
  %cmp1 = icmp ugt i32 %5, 0
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load i32, i32* %y.addr, align 4
  store i32 %6, i32* %t, align 4
  %7 = load i32, i32* %x.addr, align 4
  %8 = load i32, i32* %y.addr, align 4
  %rem = urem i32 %7, %8
  store i32 %rem, i32* %y.addr, align 4
  %9 = load i32, i32* %t, align 4
  store i32 %9, i32* %x.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %10 = load i32, i32* %x.addr, align 4
  ret i32 %10
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call i32 @binomial(i32 5, i32 3)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i32 %call)
  %call2 = call i32 @binomial(i32 40, i32 19)
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i32 %call2)
  %call4 = call i32 @binomial(i32 67, i32 31)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i32 %call4)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %y.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %x.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ult i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %x.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %y.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %t, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %y.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = icmp ugt i32 %5, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ult 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %y.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %x.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %y.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem = urem i32 %7, %8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = urem %0, %1
infer %2

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %t, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %x.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ult 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = urem %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 109431
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for ./Evaluate_binomial_coefficients.c.bc:gcd_ui()

; entering Souper's runOnFunction() for main()

; ModuleID = './Evaluate_binomial_coefficients.c.bc'
source_filename = "./Evaluate_binomial_coefficients.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [5 x i8] c"%lu\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @binomial(i32 %n, i32 %k) #0 {
entry:
  %retval = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %k.addr = alloca i32, align 4
  %d = alloca i32, align 4
  %g = alloca i32, align 4
  %r = alloca i32, align 4
  %nr = alloca i32, align 4
  %dr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %k, i32* %k.addr, align 4
  store i32 1, i32* %r, align 4
  %0 = load i32, i32* %k.addr, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %k.addr, align 4
  %cmp1 = icmp eq i32 %1, 1
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  %2 = load i32, i32* %n.addr, align 4
  store i32 %2, i32* %retval, align 4
  br label %return

if.end3:                                          ; preds = %if.end
  %3 = load i32, i32* %k.addr, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp4 = icmp uge i32 %3, %4
  br i1 %cmp4, label %if.then5, label %if.end7

if.then5:                                         ; preds = %if.end3
  %5 = load i32, i32* %k.addr, align 4
  %6 = load i32, i32* %n.addr, align 4
  %cmp6 = icmp eq i32 %5, %6
  %conv = zext i1 %cmp6 to i32
  store i32 %conv, i32* %retval, align 4
  br label %return

if.end7:                                          ; preds = %if.end3
  %7 = load i32, i32* %k.addr, align 4
  %8 = load i32, i32* %n.addr, align 4
  %div = udiv i32 %8, 2
  %cmp8 = icmp ugt i32 %7, %div
  br i1 %cmp8, label %if.then10, label %if.end11

if.then10:                                        ; preds = %if.end7
  %9 = load i32, i32* %n.addr, align 4
  %10 = load i32, i32* %k.addr, align 4
  %sub = sub i32 %9, %10
  store i32 %sub, i32* %k.addr, align 4
  br label %if.end11

if.end11:                                         ; preds = %if.then10, %if.end7
  store i32 1, i32* %d, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end11
  %11 = load i32, i32* %d, align 4
  %12 = load i32, i32* %k.addr, align 4
  %cmp12 = icmp ule i32 %11, %12
  br i1 %cmp12, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %13 = load i32, i32* %r, align 4
  %14 = load i32, i32* %n.addr, align 4
  %div14 = udiv i32 -1, %14
  %cmp15 = icmp uge i32 %13, %div14
  br i1 %cmp15, label %if.then17, label %if.else

if.then17:                                        ; preds = %for.body
  %15 = load i32, i32* %n.addr, align 4
  %16 = load i32, i32* %d, align 4
  %call = call i32 @gcd_ui(i32 %15, i32 %16)
  store i32 %call, i32* %g, align 4
  %17 = load i32, i32* %n.addr, align 4
  %18 = load i32, i32* %g, align 4
  %div18 = udiv i32 %17, %18
  store i32 %div18, i32* %nr, align 4
  %19 = load i32, i32* %d, align 4
  %20 = load i32, i32* %g, align 4
  %div19 = udiv i32 %19, %20
  store i32 %div19, i32* %dr, align 4
  %21 = load i32, i32* %r, align 4
  %22 = load i32, i32* %dr, align 4
  %call20 = call i32 @gcd_ui(i32 %21, i32 %22)
  store i32 %call20, i32* %g, align 4
  %23 = load i32, i32* %r, align 4
  %24 = load i32, i32* %g, align 4
  %div21 = udiv i32 %23, %24
  store i32 %div21, i32* %r, align 4
  %25 = load i32, i32* %dr, align 4
  %26 = load i32, i32* %g, align 4
  %div22 = udiv i32 %25, %26
  store i32 %div22, i32* %dr, align 4
  %27 = load i32, i32* %r, align 4
  %28 = load i32, i32* %nr, align 4
  %div23 = udiv i32 -1, %28
  %cmp24 = icmp uge i32 %27, %div23
  br i1 %cmp24, label %if.then26, label %if.end27

if.then26:                                        ; preds = %if.then17
  store i32 0, i32* %retval, align 4
  br label %return

if.end27:                                         ; preds = %if.then17
  %29 = load i32, i32* %nr, align 4
  %30 = load i32, i32* %r, align 4
  %mul = mul i32 %30, %29
  store i32 %mul, i32* %r, align 4
  %31 = load i32, i32* %dr, align 4
  %32 = load i32, i32* %r, align 4
  %div28 = udiv i32 %32, %31
  store i32 %div28, i32* %r, align 4
  %33 = load i32, i32* %n.addr, align 4
  %dec = add i32 %33, -1
  store i32 %dec, i32* %n.addr, align 4
  br label %if.end32

if.else:                                          ; preds = %for.body
  %34 = load i32, i32* %n.addr, align 4
  %dec29 = add i32 %34, -1
  store i32 %dec29, i32* %n.addr, align 4
  %35 = load i32, i32* %r, align 4
  %mul30 = mul i32 %35, %34
  store i32 %mul30, i32* %r, align 4
  %36 = load i32, i32* %d, align 4
  %37 = load i32, i32* %r, align 4
  %div31 = udiv i32 %37, %36
  store i32 %div31, i32* %r, align 4
  br label %if.end32

if.end32:                                         ; preds = %if.else, %if.end27
  br label %for.inc

for.inc:                                          ; preds = %if.end32
  %38 = load i32, i32* %d, align 4
  %inc = add i32 %38, 1
  store i32 %inc, i32* %d, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %39 = load i32, i32* %r, align 4
  store i32 %39, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then26, %if.then5, %if.then2, %if.then
  %40 = load i32, i32* %retval, align 4
  ret i32 %40
}

; Function Attrs: noinline nounwind optnone
define internal i32 @gcd_ui(i32 %x, i32 %y) #0 {
entry:
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %t = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  %0 = load i32, i32* %y.addr, align 4
  %1 = load i32, i32* %x.addr, align 4
  %cmp = icmp ult i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %x.addr, align 4
  store i32 %2, i32* %t, align 4
  %3 = load i32, i32* %y.addr, align 4
  store i32 %3, i32* %x.addr, align 4
  %4 = load i32, i32* %t, align 4
  store i32 %4, i32* %y.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %5 = load i32, i32* %y.addr, align 4
  %cmp1 = icmp ugt i32 %5, 0
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load i32, i32* %y.addr, align 4
  store i32 %6, i32* %t, align 4
  %7 = load i32, i32* %x.addr, align 4
  %8 = load i32, i32* %y.addr, align 4
  %rem = urem i32 %7, %8
  store i32 %rem, i32* %y.addr, align 4
  %9 = load i32, i32* %t, align 4
  store i32 %9, i32* %x.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %10 = load i32, i32* %x.addr, align 4
  ret i32 %10
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call i32 @binomial(i32 5, i32 3)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i32 %call)
  %call2 = call i32 @binomial(i32 40, i32 19)
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i32 %call2)
  %call4 = call i32 @binomial(i32 67, i32 31)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i32 %call4)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 @binomial(i32 5, i32 3)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call2 = call i32 @binomial(i32 40, i32 19)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call4 = call i32 @binomial(i32 67, i32 31)
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
