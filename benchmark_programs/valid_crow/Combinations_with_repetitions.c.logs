
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for choose()

; ModuleID = './Combinations_with_repetitions.c.bc'
source_filename = "./Combinations_with_repetitions.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [5 x i8] c"iced\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"jam\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"plain\00", align 1
@.str.3 = private unnamed_addr constant [31 x i8] c"something completely different\00", align 1
@donuts = hidden global [4 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.3, i32 0, i32 0)], align 16
@.str.4 = private unnamed_addr constant [4 x i8] c"%s\09\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.6 = private unnamed_addr constant [60 x i8] c"\0AWere there ten donuts, we'd have had %ld choices of three\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @choose(i32* %got, i32 %n_chosen, i32 %len, i32 %at, i32 %max_types) #0 {
entry:
  %retval = alloca i32, align 4
  %got.addr = alloca i32*, align 4
  %n_chosen.addr = alloca i32, align 4
  %len.addr = alloca i32, align 4
  %at.addr = alloca i32, align 4
  %max_types.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %count = alloca i32, align 4
  store i32* %got, i32** %got.addr, align 4
  store i32 %n_chosen, i32* %n_chosen.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %at, i32* %at.addr, align 4
  store i32 %max_types, i32* %max_types.addr, align 4
  store i32 0, i32* %count, align 4
  %0 = load i32, i32* %n_chosen.addr, align 4
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end5

if.then:                                          ; preds = %entry
  %2 = load i32*, i32** %got.addr, align 4
  %tobool = icmp ne i32* %2, null
  br i1 %tobool, label %if.end, label %if.then1

if.then1:                                         ; preds = %if.then
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %if.then
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %len.addr, align 4
  %cmp2 = icmp slt i32 %3, %4
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i32*, i32** %got.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %5, i32 %6
  %7 = load i32, i32* %arrayidx, align 4
  %arrayidx3 = getelementptr inbounds [4 x i8*], [4 x i8*]* @donuts, i32 0, i32 %7
  %8 = load i8*, i8** %arrayidx3, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), i8* %8)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0))
  store i32 1, i32* %retval, align 4
  br label %return

if.end5:                                          ; preds = %entry
  %10 = load i32, i32* %at.addr, align 4
  store i32 %10, i32* %i, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc15, %if.end5
  %11 = load i32, i32* %i, align 4
  %12 = load i32, i32* %max_types.addr, align 4
  %cmp7 = icmp slt i32 %11, %12
  br i1 %cmp7, label %for.body8, label %for.end17

for.body8:                                        ; preds = %for.cond6
  %13 = load i32*, i32** %got.addr, align 4
  %tobool9 = icmp ne i32* %13, null
  br i1 %tobool9, label %if.then10, label %if.end12

if.then10:                                        ; preds = %for.body8
  %14 = load i32, i32* %i, align 4
  %15 = load i32*, i32** %got.addr, align 4
  %16 = load i32, i32* %n_chosen.addr, align 4
  %arrayidx11 = getelementptr inbounds i32, i32* %15, i32 %16
  store i32 %14, i32* %arrayidx11, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then10, %for.body8
  %17 = load i32*, i32** %got.addr, align 4
  %18 = load i32, i32* %n_chosen.addr, align 4
  %add = add nsw i32 %18, 1
  %19 = load i32, i32* %len.addr, align 4
  %20 = load i32, i32* %i, align 4
  %21 = load i32, i32* %max_types.addr, align 4
  %call13 = call i32 @choose(i32* %17, i32 %add, i32 %19, i32 %20, i32 %21)
  %22 = load i32, i32* %count, align 4
  %add14 = add nsw i32 %22, %call13
  store i32 %add14, i32* %count, align 4
  br label %for.inc15

for.inc15:                                        ; preds = %if.end12
  %23 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %23, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond6

for.end17:                                        ; preds = %for.cond6
  %24 = load i32, i32* %count, align 4
  store i32 %24, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end17, %for.end, %if.then1
  %25 = load i32, i32* %retval, align 4
  ret i32 %25
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %chosen = alloca [3 x i32], align 4
  store i32 0, i32* %retval, align 4
  %arraydecay = getelementptr inbounds [3 x i32], [3 x i32]* %chosen, i32 0, i32 0
  %call = call i32 @choose(i32* %arraydecay, i32 0, i32 2, i32 0, i32 3)
  %call1 = call i32 @choose(i32* null, i32 0, i32 3, i32 0, i32 10)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.6, i32 0, i32 0), i32 %call1)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %n_chosen.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32* %2, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp slt i32 %3, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %9, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %at.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %max_types.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp7 = icmp slt i32 %11, %12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %tobool9 = icmp ne i32* %13, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %n_chosen.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %n_chosen.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %18, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %max_types.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call13 = call i32 @choose(i32* %17, i32 %add, i32 %19, i32 %20, i32 %21)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %count, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add14 = add nsw i32 %22, %call13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc16 = add nsw i32 %23, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %count, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for choose()

; entering Souper's runOnFunction() for main()

; ModuleID = './Combinations_with_repetitions.c.bc'
source_filename = "./Combinations_with_repetitions.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [5 x i8] c"iced\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"jam\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"plain\00", align 1
@.str.3 = private unnamed_addr constant [31 x i8] c"something completely different\00", align 1
@donuts = hidden global [4 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.3, i32 0, i32 0)], align 16
@.str.4 = private unnamed_addr constant [4 x i8] c"%s\09\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.6 = private unnamed_addr constant [60 x i8] c"\0AWere there ten donuts, we'd have had %ld choices of three\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @choose(i32* %got, i32 %n_chosen, i32 %len, i32 %at, i32 %max_types) #0 {
entry:
  %retval = alloca i32, align 4
  %got.addr = alloca i32*, align 4
  %n_chosen.addr = alloca i32, align 4
  %len.addr = alloca i32, align 4
  %at.addr = alloca i32, align 4
  %max_types.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %count = alloca i32, align 4
  store i32* %got, i32** %got.addr, align 4
  store i32 %n_chosen, i32* %n_chosen.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %at, i32* %at.addr, align 4
  store i32 %max_types, i32* %max_types.addr, align 4
  store i32 0, i32* %count, align 4
  %0 = load i32, i32* %n_chosen.addr, align 4
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end5

if.then:                                          ; preds = %entry
  %2 = load i32*, i32** %got.addr, align 4
  %tobool = icmp ne i32* %2, null
  br i1 %tobool, label %if.end, label %if.then1

if.then1:                                         ; preds = %if.then
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %if.then
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %len.addr, align 4
  %cmp2 = icmp slt i32 %3, %4
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i32*, i32** %got.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %5, i32 %6
  %7 = load i32, i32* %arrayidx, align 4
  %arrayidx3 = getelementptr inbounds [4 x i8*], [4 x i8*]* @donuts, i32 0, i32 %7
  %8 = load i8*, i8** %arrayidx3, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), i8* %8)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0))
  store i32 1, i32* %retval, align 4
  br label %return

if.end5:                                          ; preds = %entry
  %10 = load i32, i32* %at.addr, align 4
  store i32 %10, i32* %i, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc15, %if.end5
  %11 = load i32, i32* %i, align 4
  %12 = load i32, i32* %max_types.addr, align 4
  %cmp7 = icmp slt i32 %11, %12
  br i1 %cmp7, label %for.body8, label %for.end17

for.body8:                                        ; preds = %for.cond6
  %13 = load i32*, i32** %got.addr, align 4
  %tobool9 = icmp ne i32* %13, null
  br i1 %tobool9, label %if.then10, label %if.end12

if.then10:                                        ; preds = %for.body8
  %14 = load i32, i32* %i, align 4
  %15 = load i32*, i32** %got.addr, align 4
  %16 = load i32, i32* %n_chosen.addr, align 4
  %arrayidx11 = getelementptr inbounds i32, i32* %15, i32 %16
  store i32 %14, i32* %arrayidx11, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then10, %for.body8
  %17 = load i32*, i32** %got.addr, align 4
  %18 = load i32, i32* %n_chosen.addr, align 4
  %add = add nsw i32 %18, 1
  %19 = load i32, i32* %len.addr, align 4
  %20 = load i32, i32* %i, align 4
  %21 = load i32, i32* %max_types.addr, align 4
  %call13 = call i32 @choose(i32* %17, i32 %add, i32 %19, i32 %20, i32 %21)
  %22 = load i32, i32* %count, align 4
  %add14 = add nsw i32 %22, %call13
  store i32 %add14, i32* %count, align 4
  br label %for.inc15

for.inc15:                                        ; preds = %if.end12
  %23 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %23, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond6

for.end17:                                        ; preds = %for.cond6
  %24 = load i32, i32* %count, align 4
  store i32 %24, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end17, %for.end, %if.then1
  %25 = load i32, i32* %retval, align 4
  ret i32 %25
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %chosen = alloca [3 x i32], align 4
  store i32 0, i32* %retval, align 4
  %arraydecay = getelementptr inbounds [3 x i32], [3 x i32]* %chosen, i32 0, i32 0
  %call = call i32 @choose(i32* %arraydecay, i32 0, i32 2, i32 0, i32 3)
  %call1 = call i32 @choose(i32* null, i32 0, i32 3, i32 0, i32 10)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.6, i32 0, i32 0), i32 %call1)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call1 = call i32 @choose(i32* null, i32 0, i32 3, i32 0, i32 10)
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
