
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for ord()

; ModuleID = './Sort_an_array_of_composite_structures.c.bc'
source_filename = "./Sort_an_array_of_composite_structures.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.twoStringsStruct = type { i8*, i8* }

@ord.dgts = internal global i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i32 0, i32 0), align 4
@.str = private unnamed_addr constant [10 x i8] c"012345679\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"Beta11a\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"many\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"alpha1\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"This\00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"Betamax\00", align 1
@.str.6 = private unnamed_addr constant [8 x i8] c"sorted.\00", align 1
@.str.7 = private unnamed_addr constant [6 x i8] c"beta3\00", align 1
@.str.8 = private unnamed_addr constant [6 x i8] c"order\00", align 1
@.str.9 = private unnamed_addr constant [8 x i8] c"beta11a\00", align 1
@.str.10 = private unnamed_addr constant [8 x i8] c"strings\00", align 1
@.str.11 = private unnamed_addr constant [8 x i8] c"beta001\00", align 1
@.str.12 = private unnamed_addr constant [3 x i8] c"is\00", align 1
@.str.13 = private unnamed_addr constant [7 x i8] c"beta11\00", align 1
@.str.14 = private unnamed_addr constant [6 x i8] c"which\00", align 1
@.str.15 = private unnamed_addr constant [8 x i8] c"beta041\00", align 1
@.str.16 = private unnamed_addr constant [3 x i8] c"be\00", align 1
@.str.17 = private unnamed_addr constant [7 x i8] c"beta05\00", align 1
@.str.18 = private unnamed_addr constant [3 x i8] c"in\00", align 1
@.str.19 = private unnamed_addr constant [6 x i8] c"beta1\00", align 1
@.str.20 = private unnamed_addr constant [4 x i8] c"the\00", align 1
@.str.21 = private unnamed_addr constant [7 x i8] c"beta40\00", align 1
@.str.22 = private unnamed_addr constant [7 x i8] c"should\00", align 1
@__const.main.toBsorted = private unnamed_addr constant [11 x %struct.twoStringsStruct] [%struct.twoStringsStruct { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0) }, %struct.twoStringsStruct { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0) }, %struct.twoStringsStruct { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i32 0, i32 0) }, %struct.twoStringsStruct { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.8, i32 0, i32 0) }, %struct.twoStringsStruct { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.10, i32 0, i32 0) }, %struct.twoStringsStruct { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0) }, %struct.twoStringsStruct { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.14, i32 0, i32 0) }, %struct.twoStringsStruct { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.16, i32 0, i32 0) }, %struct.twoStringsStruct { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18, i32 0, i32 0) }, %struct.twoStringsStruct { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.20, i32 0, i32 0) }, %struct.twoStringsStruct { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.22, i32 0, i32 0) }], align 16
@.str.23 = private unnamed_addr constant [8 x i8] c" %%-%ds\00", align 1
@.str.24 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @ord(i8 signext %v) #0 {
entry:
  %v.addr = alloca i8, align 1
  %cp = alloca i8*, align 4
  store i8 %v, i8* %v.addr, align 1
  %0 = load i8*, i8** @ord.dgts, align 4
  store i8* %0, i8** %cp, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i8, i8* %v.addr, align 1
  %conv = sext i8 %1 to i32
  %2 = load i8*, i8** %cp, align 4
  %3 = load i8, i8* %2, align 1
  %conv1 = sext i8 %3 to i32
  %cmp = icmp ne i32 %conv, %conv1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i8*, i8** %cp, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 1
  store i8* %incdec.ptr, i8** %cp, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %5 = load i8*, i8** %cp, align 4
  %6 = load i8*, i8** @ord.dgts, align 4
  %sub.ptr.lhs.cast = ptrtoint i8* %5 to i32
  %sub.ptr.rhs.cast = ptrtoint i8* %6 to i32
  %sub.ptr.sub = sub i32 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  ret i32 %sub.ptr.sub
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @cmprStrgs(%struct.twoStringsStruct* %s1, %struct.twoStringsStruct* %s2) #0 {
entry:
  %retval = alloca i32, align 4
  %s1.addr = alloca %struct.twoStringsStruct*, align 4
  %s2.addr = alloca %struct.twoStringsStruct*, align 4
  %p1 = alloca i8*, align 4
  %p2 = alloca i8*, align 4
  %mrk1 = alloca i8*, align 4
  %mrk2 = alloca i8*, align 4
  %v1 = alloca i32, align 4
  %v2 = alloca i32, align 4
  store %struct.twoStringsStruct* %s1, %struct.twoStringsStruct** %s1.addr, align 4
  store %struct.twoStringsStruct* %s2, %struct.twoStringsStruct** %s2.addr, align 4
  %0 = load %struct.twoStringsStruct*, %struct.twoStringsStruct** %s1.addr, align 4
  %key = getelementptr inbounds %struct.twoStringsStruct, %struct.twoStringsStruct* %0, i32 0, i32 0
  %1 = load i8*, i8** %key, align 4
  store i8* %1, i8** %p1, align 4
  %2 = load %struct.twoStringsStruct*, %struct.twoStringsStruct** %s2.addr, align 4
  %key1 = getelementptr inbounds %struct.twoStringsStruct, %struct.twoStringsStruct* %2, i32 0, i32 0
  %3 = load i8*, i8** %key1, align 4
  store i8* %3, i8** %p2, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %4 = load i8*, i8** %p1, align 4
  %5 = load i8, i8* %4, align 1
  %conv = sext i8 %5 to i32
  %call = call i32 @tolower(i32 %conv) #4
  %6 = load i8*, i8** %p2, align 4
  %7 = load i8, i8* %6, align 1
  %conv2 = sext i8 %7 to i32
  %call3 = call i32 @tolower(i32 %conv2) #4
  %cmp = icmp eq i32 %call, %call3
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %8 = load i8*, i8** %p1, align 4
  %9 = load i8, i8* %8, align 1
  %conv5 = sext i8 %9 to i32
  %tobool = icmp ne i32 %conv5, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %10 = phi i1 [ false, %while.cond ], [ %tobool, %land.rhs ]
  br i1 %10, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %11 = load i8*, i8** %p1, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %11, i32 1
  store i8* %incdec.ptr, i8** %p1, align 4
  %12 = load i8*, i8** %p2, align 4
  %incdec.ptr6 = getelementptr inbounds i8, i8* %12, i32 1
  store i8* %incdec.ptr6, i8** %p2, align 4
  br label %while.cond

while.end:                                        ; preds = %land.end
  br i1 false, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.end
  %13 = load i8*, i8** %p1, align 4
  %14 = load i8, i8* %13, align 1
  %conv7 = sext i8 %14 to i32
  %call8 = call i32 @isdigit(i32 %conv7) #4
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %land.lhs.true, label %if.end84

cond.false:                                       ; preds = %while.end
  %15 = load i8*, i8** %p1, align 4
  %16 = load i8, i8* %15, align 1
  %conv10 = sext i8 %16 to i32
  %sub = sub i32 %conv10, 48
  %cmp11 = icmp ult i32 %sub, 10
  br i1 %cmp11, label %land.lhs.true, label %if.end84

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  br i1 false, label %cond.true13, label %cond.false17

cond.true13:                                      ; preds = %land.lhs.true
  %17 = load i8*, i8** %p2, align 4
  %18 = load i8, i8* %17, align 1
  %conv14 = sext i8 %18 to i32
  %call15 = call i32 @isdigit(i32 %conv14) #4
  %tobool16 = icmp ne i32 %call15, 0
  br i1 %tobool16, label %if.then, label %if.end84

cond.false17:                                     ; preds = %land.lhs.true
  %19 = load i8*, i8** %p2, align 4
  %20 = load i8, i8* %19, align 1
  %conv18 = sext i8 %20 to i32
  %sub19 = sub i32 %conv18, 48
  %cmp20 = icmp ult i32 %sub19, 10
  br i1 %cmp20, label %if.then, label %if.end84

if.then:                                          ; preds = %cond.false17, %cond.true13
  %21 = load i8*, i8** %p1, align 4
  %22 = load i8, i8* %21, align 1
  %conv22 = sext i8 %22 to i32
  %cmp23 = icmp eq i32 %conv22, 48
  br i1 %cmp23, label %if.then28, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then
  %23 = load i8*, i8** %p2, align 4
  %24 = load i8, i8* %23, align 1
  %conv25 = sext i8 %24 to i32
  %cmp26 = icmp eq i32 %conv25, 48
  br i1 %cmp26, label %if.then28, label %if.end54

if.then28:                                        ; preds = %lor.lhs.false, %if.then
  br label %while.cond29

while.cond29:                                     ; preds = %if.end, %if.then28
  %25 = load i8*, i8** %p1, align 4
  %26 = load %struct.twoStringsStruct*, %struct.twoStringsStruct** %s1.addr, align 4
  %key30 = getelementptr inbounds %struct.twoStringsStruct, %struct.twoStringsStruct* %26, i32 0, i32 0
  %27 = load i8*, i8** %key30, align 4
  %cmp31 = icmp ugt i8* %25, %27
  br i1 %cmp31, label %while.body33, label %while.end40

while.body33:                                     ; preds = %while.cond29
  %28 = load i8*, i8** %p1, align 4
  %incdec.ptr34 = getelementptr inbounds i8, i8* %28, i32 -1
  store i8* %incdec.ptr34, i8** %p1, align 4
  %29 = load i8*, i8** %p2, align 4
  %incdec.ptr35 = getelementptr inbounds i8, i8* %29, i32 -1
  store i8* %incdec.ptr35, i8** %p2, align 4
  %30 = load i8*, i8** %p1, align 4
  %31 = load i8, i8* %30, align 1
  %conv36 = sext i8 %31 to i32
  %cmp37 = icmp ne i32 %conv36, 48
  br i1 %cmp37, label %if.then39, label %if.end

if.then39:                                        ; preds = %while.body33
  br label %while.end40

if.end:                                           ; preds = %while.body33
  br label %while.cond29

while.end40:                                      ; preds = %if.then39, %while.cond29
  br i1 false, label %cond.true41, label %cond.false45

cond.true41:                                      ; preds = %while.end40
  %32 = load i8*, i8** %p1, align 4
  %33 = load i8, i8* %32, align 1
  %conv42 = sext i8 %33 to i32
  %call43 = call i32 @isdigit(i32 %conv42) #4
  %tobool44 = icmp ne i32 %call43, 0
  br i1 %tobool44, label %if.end53, label %if.then50

cond.false45:                                     ; preds = %while.end40
  %34 = load i8*, i8** %p1, align 4
  %35 = load i8, i8* %34, align 1
  %conv46 = sext i8 %35 to i32
  %sub47 = sub i32 %conv46, 48
  %cmp48 = icmp ult i32 %sub47, 10
  br i1 %cmp48, label %if.end53, label %if.then50

if.then50:                                        ; preds = %cond.false45, %cond.true41
  %36 = load i8*, i8** %p1, align 4
  %incdec.ptr51 = getelementptr inbounds i8, i8* %36, i32 1
  store i8* %incdec.ptr51, i8** %p1, align 4
  %37 = load i8*, i8** %p2, align 4
  %incdec.ptr52 = getelementptr inbounds i8, i8* %37, i32 1
  store i8* %incdec.ptr52, i8** %p2, align 4
  br label %if.end53

if.end53:                                         ; preds = %if.then50, %cond.false45, %cond.true41
  br label %if.end54

if.end54:                                         ; preds = %if.end53, %lor.lhs.false
  %38 = load i8*, i8** %p1, align 4
  store i8* %38, i8** %mrk1, align 4
  %39 = load i8*, i8** %p2, align 4
  store i8* %39, i8** %mrk2, align 4
  store i32 0, i32* %v1, align 4
  br label %while.cond55

while.cond55:                                     ; preds = %while.body60, %if.end54
  %40 = load i8*, i8** %p1, align 4
  %41 = load i8, i8* %40, align 1
  %conv56 = sext i8 %41 to i32
  %sub57 = sub i32 %conv56, 48
  %cmp58 = icmp ult i32 %sub57, 10
  br i1 %cmp58, label %while.body60, label %while.end63

while.body60:                                     ; preds = %while.cond55
  %42 = load i32, i32* %v1, align 4
  %mul = mul nsw i32 10, %42
  %43 = load i8*, i8** %p1, align 4
  %44 = load i8, i8* %43, align 1
  %call61 = call i32 @ord(i8 signext %44)
  %add = add nsw i32 %mul, %call61
  store i32 %add, i32* %v1, align 4
  %45 = load i8*, i8** %p1, align 4
  %incdec.ptr62 = getelementptr inbounds i8, i8* %45, i32 1
  store i8* %incdec.ptr62, i8** %p1, align 4
  br label %while.cond55

while.end63:                                      ; preds = %while.cond55
  store i32 0, i32* %v2, align 4
  br label %while.cond64

while.cond64:                                     ; preds = %while.body69, %while.end63
  %46 = load i8*, i8** %p2, align 4
  %47 = load i8, i8* %46, align 1
  %conv65 = sext i8 %47 to i32
  %sub66 = sub i32 %conv65, 48
  %cmp67 = icmp ult i32 %sub66, 10
  br i1 %cmp67, label %while.body69, label %while.end74

while.body69:                                     ; preds = %while.cond64
  %48 = load i32, i32* %v2, align 4
  %mul70 = mul nsw i32 10, %48
  %49 = load i8*, i8** %p2, align 4
  %50 = load i8, i8* %49, align 1
  %call71 = call i32 @ord(i8 signext %50)
  %add72 = add nsw i32 %mul70, %call71
  store i32 %add72, i32* %v2, align 4
  %51 = load i8*, i8** %p2, align 4
  %incdec.ptr73 = getelementptr inbounds i8, i8* %51, i32 1
  store i8* %incdec.ptr73, i8** %p2, align 4
  br label %while.cond64

while.end74:                                      ; preds = %while.cond64
  %52 = load i32, i32* %v1, align 4
  %53 = load i32, i32* %v2, align 4
  %cmp75 = icmp eq i32 %52, %53
  br i1 %cmp75, label %if.then77, label %if.end82

if.then77:                                        ; preds = %while.end74
  %54 = load i8*, i8** %p2, align 4
  %55 = load i8*, i8** %mrk2, align 4
  %sub.ptr.lhs.cast = ptrtoint i8* %54 to i32
  %sub.ptr.rhs.cast = ptrtoint i8* %55 to i32
  %sub.ptr.sub = sub i32 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %56 = load i8*, i8** %p1, align 4
  %57 = load i8*, i8** %mrk1, align 4
  %sub.ptr.lhs.cast78 = ptrtoint i8* %56 to i32
  %sub.ptr.rhs.cast79 = ptrtoint i8* %57 to i32
  %sub.ptr.sub80 = sub i32 %sub.ptr.lhs.cast78, %sub.ptr.rhs.cast79
  %sub81 = sub nsw i32 %sub.ptr.sub, %sub.ptr.sub80
  store i32 %sub81, i32* %retval, align 4
  br label %return

if.end82:                                         ; preds = %while.end74
  %58 = load i32, i32* %v1, align 4
  %59 = load i32, i32* %v2, align 4
  %sub83 = sub nsw i32 %58, %59
  store i32 %sub83, i32* %retval, align 4
  br label %return

if.end84:                                         ; preds = %cond.false17, %cond.true13, %cond.false, %cond.true
  %60 = load i8*, i8** %p1, align 4
  %61 = load i8, i8* %60, align 1
  %conv85 = sext i8 %61 to i32
  %call86 = call i32 @tolower(i32 %conv85) #4
  %62 = load i8*, i8** %p2, align 4
  %63 = load i8, i8* %62, align 1
  %conv87 = sext i8 %63 to i32
  %call88 = call i32 @tolower(i32 %conv87) #4
  %cmp89 = icmp ne i32 %call86, %call88
  br i1 %cmp89, label %if.then91, label %if.end97

if.then91:                                        ; preds = %if.end84
  %64 = load i8*, i8** %p1, align 4
  %65 = load i8, i8* %64, align 1
  %conv92 = sext i8 %65 to i32
  %call93 = call i32 @tolower(i32 %conv92) #4
  %66 = load i8*, i8** %p2, align 4
  %67 = load i8, i8* %66, align 1
  %conv94 = sext i8 %67 to i32
  %call95 = call i32 @tolower(i32 %conv94) #4
  %sub96 = sub nsw i32 %call93, %call95
  store i32 %sub96, i32* %retval, align 4
  br label %return

if.end97:                                         ; preds = %if.end84
  %68 = load %struct.twoStringsStruct*, %struct.twoStringsStruct** %s1.addr, align 4
  %key98 = getelementptr inbounds %struct.twoStringsStruct, %struct.twoStringsStruct* %68, i32 0, i32 0
  %69 = load i8*, i8** %key98, align 4
  store i8* %69, i8** %p1, align 4
  %70 = load %struct.twoStringsStruct*, %struct.twoStringsStruct** %s2.addr, align 4
  %key99 = getelementptr inbounds %struct.twoStringsStruct, %struct.twoStringsStruct* %70, i32 0, i32 0
  %71 = load i8*, i8** %key99, align 4
  store i8* %71, i8** %p2, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end97
  %72 = load i8*, i8** %p1, align 4
  %73 = load i8, i8* %72, align 1
  %conv100 = sext i8 %73 to i32
  %74 = load i8*, i8** %p2, align 4
  %75 = load i8, i8* %74, align 1
  %conv101 = sext i8 %75 to i32
  %cmp102 = icmp eq i32 %conv100, %conv101
  br i1 %cmp102, label %land.rhs104, label %land.end107

land.rhs104:                                      ; preds = %for.cond
  %76 = load i8*, i8** %p1, align 4
  %77 = load i8, i8* %76, align 1
  %conv105 = sext i8 %77 to i32
  %tobool106 = icmp ne i32 %conv105, 0
  br label %land.end107

land.end107:                                      ; preds = %land.rhs104, %for.cond
  %78 = phi i1 [ false, %for.cond ], [ %tobool106, %land.rhs104 ]
  br i1 %78, label %for.body, label %for.end

for.body:                                         ; preds = %land.end107
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %79 = load i8*, i8** %p1, align 4
  %incdec.ptr108 = getelementptr inbounds i8, i8* %79, i32 1
  store i8* %incdec.ptr108, i8** %p1, align 4
  %80 = load i8*, i8** %p2, align 4
  %incdec.ptr109 = getelementptr inbounds i8, i8* %80, i32 1
  store i8* %incdec.ptr109, i8** %p2, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end107
  %81 = load i8*, i8** %p1, align 4
  %82 = load i8, i8* %81, align 1
  %conv110 = sext i8 %82 to i32
  %83 = load i8*, i8** %p2, align 4
  %84 = load i8, i8* %83, align 1
  %conv111 = sext i8 %84 to i32
  %sub112 = sub nsw i32 %conv110, %conv111
  store i32 %sub112, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then91, %if.end82, %if.then77
  %85 = load i32, i32* %retval, align 4
  ret i32 %85
}

; Function Attrs: nounwind readonly
declare i32 @tolower(i32 %0) #1

; Function Attrs: nounwind readonly
declare i32 @isdigit(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @maxstrlen(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %la = alloca i32, align 4
  %lb = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %call = call i32 @strlen(i8* %0)
  store i32 %call, i32* %la, align 4
  %1 = load i8*, i8** %b.addr, align 4
  %call1 = call i32 @strlen(i8* %1)
  store i32 %call1, i32* %lb, align 4
  %2 = load i32, i32* %la, align 4
  %3 = load i32, i32* %lb, align 4
  %cmp = icmp sgt i32 %2, %3
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %4 = load i32, i32* %la, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  %5 = load i32, i32* %lb, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %4, %cond.true ], [ %5, %cond.false ]
  ret i32 %cond
}

declare i32 @strlen(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %toBsorted = alloca [11 x %struct.twoStringsStruct], align 16
  %k = alloca i32, align 4
  %maxlens = alloca [11 x i32], align 16
  %format = alloca [12 x i8], align 1
  %cp = alloca %struct.twoStringsStruct*, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [11 x %struct.twoStringsStruct]* %toBsorted to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([11 x %struct.twoStringsStruct]* @__const.main.toBsorted to i8*), i32 88, i1 false)
  %arraydecay = getelementptr inbounds [11 x %struct.twoStringsStruct], [11 x %struct.twoStringsStruct]* %toBsorted, i32 0, i32 0
  %1 = bitcast %struct.twoStringsStruct* %arraydecay to i8*
  call void @qsort(i8* %1, i32 11, i32 8, i32 (i8*, i8*)* bitcast (i32 (%struct.twoStringsStruct*, %struct.twoStringsStruct*)* @cmprStrgs to i32 (i8*, i8*)*))
  store i32 0, i32* %k, align 4
  %arraydecay1 = getelementptr inbounds [11 x %struct.twoStringsStruct], [11 x %struct.twoStringsStruct]* %toBsorted, i32 0, i32 0
  store %struct.twoStringsStruct* %arraydecay1, %struct.twoStringsStruct** %cp, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %k, align 4
  %cmp = icmp ult i32 %2, 11
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.twoStringsStruct*, %struct.twoStringsStruct** %cp, align 4
  %key = getelementptr inbounds %struct.twoStringsStruct, %struct.twoStringsStruct* %3, i32 0, i32 0
  %4 = load i8*, i8** %key, align 4
  %5 = load %struct.twoStringsStruct*, %struct.twoStringsStruct** %cp, align 4
  %value = getelementptr inbounds %struct.twoStringsStruct, %struct.twoStringsStruct* %5, i32 0, i32 1
  %6 = load i8*, i8** %value, align 4
  %call = call i32 @maxstrlen(i8* %4, i8* %6)
  %7 = load i32, i32* %k, align 4
  %arrayidx = getelementptr inbounds [11 x i32], [11 x i32]* %maxlens, i32 0, i32 %7
  store i32 %call, i32* %arrayidx, align 4
  %arraydecay2 = getelementptr inbounds [12 x i8], [12 x i8]* %format, i32 0, i32 0
  %8 = load i32, i32* %k, align 4
  %arrayidx3 = getelementptr inbounds [11 x i32], [11 x i32]* %maxlens, i32 0, i32 %8
  %9 = load i32, i32* %arrayidx3, align 4
  %call4 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay2, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.23, i32 0, i32 0), i32 %9)
  %arraydecay5 = getelementptr inbounds [12 x i8], [12 x i8]* %format, i32 0, i32 0
  %10 = load i32, i32* %k, align 4
  %arrayidx6 = getelementptr inbounds [11 x %struct.twoStringsStruct], [11 x %struct.twoStringsStruct]* %toBsorted, i32 0, i32 %10
  %value7 = getelementptr inbounds %struct.twoStringsStruct, %struct.twoStringsStruct* %arrayidx6, i32 0, i32 1
  %11 = load i8*, i8** %value7, align 4
  %call8 = call i32 (i8*, ...) @printf(i8* %arraydecay5, i8* %11)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %k, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %k, align 4
  %13 = load %struct.twoStringsStruct*, %struct.twoStringsStruct** %cp, align 4
  %incdec.ptr = getelementptr inbounds %struct.twoStringsStruct, %struct.twoStringsStruct* %13, i32 1
  store %struct.twoStringsStruct* %incdec.ptr, %struct.twoStringsStruct** %cp, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.24, i32 0, i32 0))
  store i32 0, i32* %k, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc20, %for.end
  %14 = load i32, i32* %k, align 4
  %cmp11 = icmp ult i32 %14, 11
  br i1 %cmp11, label %for.body12, label %for.end22

for.body12:                                       ; preds = %for.cond10
  %arraydecay13 = getelementptr inbounds [12 x i8], [12 x i8]* %format, i32 0, i32 0
  %15 = load i32, i32* %k, align 4
  %arrayidx14 = getelementptr inbounds [11 x i32], [11 x i32]* %maxlens, i32 0, i32 %15
  %16 = load i32, i32* %arrayidx14, align 4
  %call15 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay13, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.23, i32 0, i32 0), i32 %16)
  %arraydecay16 = getelementptr inbounds [12 x i8], [12 x i8]* %format, i32 0, i32 0
  %17 = load i32, i32* %k, align 4
  %arrayidx17 = getelementptr inbounds [11 x %struct.twoStringsStruct], [11 x %struct.twoStringsStruct]* %toBsorted, i32 0, i32 %17
  %key18 = getelementptr inbounds %struct.twoStringsStruct, %struct.twoStringsStruct* %arrayidx17, i32 0, i32 0
  %18 = load i8*, i8** %key18, align 8
  %call19 = call i32 (i8*, ...) @printf(i8* %arraydecay16, i8* %18)
  br label %for.inc20

for.inc20:                                        ; preds = %for.body12
  %19 = load i32, i32* %k, align 4
  %inc21 = add nsw i32 %19, 1
  store i32 %inc21, i32* %k, align 4
  br label %for.cond10

for.end22:                                        ; preds = %for.cond10
  %call23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.24, i32 0, i32 0))
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #2

declare i32 @sprintf(i8* %0, i8* %1, ...) #2

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i8, i8* %v.addr, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %1 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i8, i8* %2, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv1 = sext i8 %3 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp = icmp ne i32 %conv, %conv1
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i1 = ne %1, %3
infer %4

; *****
; For LLVM instruction:
;  %sub.ptr.lhs.cast = ptrtoint i8* %5 to i32
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub.ptr.rhs.cast = ptrtoint i8* %6 to i32
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub.ptr.sub = sub i32 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1
infer %2
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i1 = ne %1, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for ord()

; entering Souper's runOnFunction() for cmprStrgs()

; ModuleID = './Sort_an_array_of_composite_structures.c.bc'
source_filename = "./Sort_an_array_of_composite_structures.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.twoStringsStruct = type { i8*, i8* }

@ord.dgts = internal global i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i32 0, i32 0), align 4
@.str = private unnamed_addr constant [10 x i8] c"012345679\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"Beta11a\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"many\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"alpha1\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"This\00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"Betamax\00", align 1
@.str.6 = private unnamed_addr constant [8 x i8] c"sorted.\00", align 1
@.str.7 = private unnamed_addr constant [6 x i8] c"beta3\00", align 1
@.str.8 = private unnamed_addr constant [6 x i8] c"order\00", align 1
@.str.9 = private unnamed_addr constant [8 x i8] c"beta11a\00", align 1
@.str.10 = private unnamed_addr constant [8 x i8] c"strings\00", align 1
@.str.11 = private unnamed_addr constant [8 x i8] c"beta001\00", align 1
@.str.12 = private unnamed_addr constant [3 x i8] c"is\00", align 1
@.str.13 = private unnamed_addr constant [7 x i8] c"beta11\00", align 1
@.str.14 = private unnamed_addr constant [6 x i8] c"which\00", align 1
@.str.15 = private unnamed_addr constant [8 x i8] c"beta041\00", align 1
@.str.16 = private unnamed_addr constant [3 x i8] c"be\00", align 1
@.str.17 = private unnamed_addr constant [7 x i8] c"beta05\00", align 1
@.str.18 = private unnamed_addr constant [3 x i8] c"in\00", align 1
@.str.19 = private unnamed_addr constant [6 x i8] c"beta1\00", align 1
@.str.20 = private unnamed_addr constant [4 x i8] c"the\00", align 1
@.str.21 = private unnamed_addr constant [7 x i8] c"beta40\00", align 1
@.str.22 = private unnamed_addr constant [7 x i8] c"should\00", align 1
@__const.main.toBsorted = private unnamed_addr constant [11 x %struct.twoStringsStruct] [%struct.twoStringsStruct { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0) }, %struct.twoStringsStruct { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0) }, %struct.twoStringsStruct { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i32 0, i32 0) }, %struct.twoStringsStruct { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.8, i32 0, i32 0) }, %struct.twoStringsStruct { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.10, i32 0, i32 0) }, %struct.twoStringsStruct { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0) }, %struct.twoStringsStruct { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.14, i32 0, i32 0) }, %struct.twoStringsStruct { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.16, i32 0, i32 0) }, %struct.twoStringsStruct { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18, i32 0, i32 0) }, %struct.twoStringsStruct { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.20, i32 0, i32 0) }, %struct.twoStringsStruct { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.22, i32 0, i32 0) }], align 16
@.str.23 = private unnamed_addr constant [8 x i8] c" %%-%ds\00", align 1
@.str.24 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @ord(i8 signext %v) #0 {
entry:
  %v.addr = alloca i8, align 1
  %cp = alloca i8*, align 4
  store i8 %v, i8* %v.addr, align 1
  %0 = load i8*, i8** @ord.dgts, align 4
  store i8* %0, i8** %cp, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i8, i8* %v.addr, align 1
  %conv = sext i8 %1 to i32
  %2 = load i8*, i8** %cp, align 4
  %3 = load i8, i8* %2, align 1
  %conv1 = sext i8 %3 to i32
  %cmp = icmp ne i32 %conv, %conv1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i8*, i8** %cp, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 1
  store i8* %incdec.ptr, i8** %cp, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %5 = load i8*, i8** %cp, align 4
  %6 = load i8*, i8** @ord.dgts, align 4
  %sub.ptr.lhs.cast = ptrtoint i8* %5 to i32
  %sub.ptr.rhs.cast = ptrtoint i8* %6 to i32
  %sub.ptr.sub = sub i32 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  ret i32 %sub.ptr.sub
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @cmprStrgs(%struct.twoStringsStruct* %s1, %struct.twoStringsStruct* %s2) #0 {
entry:
  %retval = alloca i32, align 4
  %s1.addr = alloca %struct.twoStringsStruct*, align 4
  %s2.addr = alloca %struct.twoStringsStruct*, align 4
  %p1 = alloca i8*, align 4
  %p2 = alloca i8*, align 4
  %mrk1 = alloca i8*, align 4
  %mrk2 = alloca i8*, align 4
  %v1 = alloca i32, align 4
  %v2 = alloca i32, align 4
  store %struct.twoStringsStruct* %s1, %struct.twoStringsStruct** %s1.addr, align 4
  store %struct.twoStringsStruct* %s2, %struct.twoStringsStruct** %s2.addr, align 4
  %0 = load %struct.twoStringsStruct*, %struct.twoStringsStruct** %s1.addr, align 4
  %key = getelementptr inbounds %struct.twoStringsStruct, %struct.twoStringsStruct* %0, i32 0, i32 0
  %1 = load i8*, i8** %key, align 4
  store i8* %1, i8** %p1, align 4
  %2 = load %struct.twoStringsStruct*, %struct.twoStringsStruct** %s2.addr, align 4
  %key1 = getelementptr inbounds %struct.twoStringsStruct, %struct.twoStringsStruct* %2, i32 0, i32 0
  %3 = load i8*, i8** %key1, align 4
  store i8* %3, i8** %p2, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %4 = load i8*, i8** %p1, align 4
  %5 = load i8, i8* %4, align 1
  %conv = sext i8 %5 to i32
  %call = call i32 @tolower(i32 %conv) #4
  %6 = load i8*, i8** %p2, align 4
  %7 = load i8, i8* %6, align 1
  %conv2 = sext i8 %7 to i32
  %call3 = call i32 @tolower(i32 %conv2) #4
  %cmp = icmp eq i32 %call, %call3
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %8 = load i8*, i8** %p1, align 4
  %9 = load i8, i8* %8, align 1
  %conv5 = sext i8 %9 to i32
  %tobool = icmp ne i32 %conv5, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %10 = phi i1 [ false, %while.cond ], [ %tobool, %land.rhs ]
  br i1 %10, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %11 = load i8*, i8** %p1, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %11, i32 1
  store i8* %incdec.ptr, i8** %p1, align 4
  %12 = load i8*, i8** %p2, align 4
  %incdec.ptr6 = getelementptr inbounds i8, i8* %12, i32 1
  store i8* %incdec.ptr6, i8** %p2, align 4
  br label %while.cond

while.end:                                        ; preds = %land.end
  br i1 false, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.end
  %13 = load i8*, i8** %p1, align 4
  %14 = load i8, i8* %13, align 1
  %conv7 = sext i8 %14 to i32
  %call8 = call i32 @isdigit(i32 %conv7) #4
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %land.lhs.true, label %if.end84

cond.false:                                       ; preds = %while.end
  %15 = load i8*, i8** %p1, align 4
  %16 = load i8, i8* %15, align 1
  %conv10 = sext i8 %16 to i32
  %sub = sub i32 %conv10, 48
  %cmp11 = icmp ult i32 %sub, 10
  br i1 %cmp11, label %land.lhs.true, label %if.end84

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  br i1 false, label %cond.true13, label %cond.false17

cond.true13:                                      ; preds = %land.lhs.true
  %17 = load i8*, i8** %p2, align 4
  %18 = load i8, i8* %17, align 1
  %conv14 = sext i8 %18 to i32
  %call15 = call i32 @isdigit(i32 %conv14) #4
  %tobool16 = icmp ne i32 %call15, 0
  br i1 %tobool16, label %if.then, label %if.end84

cond.false17:                                     ; preds = %land.lhs.true
  %19 = load i8*, i8** %p2, align 4
  %20 = load i8, i8* %19, align 1
  %conv18 = sext i8 %20 to i32
  %sub19 = sub i32 %conv18, 48
  %cmp20 = icmp ult i32 %sub19, 10
  br i1 %cmp20, label %if.then, label %if.end84

if.then:                                          ; preds = %cond.false17, %cond.true13
  %21 = load i8*, i8** %p1, align 4
  %22 = load i8, i8* %21, align 1
  %conv22 = sext i8 %22 to i32
  %cmp23 = icmp eq i32 %conv22, 48
  br i1 %cmp23, label %if.then28, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then
  %23 = load i8*, i8** %p2, align 4
  %24 = load i8, i8* %23, align 1
  %conv25 = sext i8 %24 to i32
  %cmp26 = icmp eq i32 %conv25, 48
  br i1 %cmp26, label %if.then28, label %if.end54

if.then28:                                        ; preds = %lor.lhs.false, %if.then
  br label %while.cond29

while.cond29:                                     ; preds = %if.end, %if.then28
  %25 = load i8*, i8** %p1, align 4
  %26 = load %struct.twoStringsStruct*, %struct.twoStringsStruct** %s1.addr, align 4
  %key30 = getelementptr inbounds %struct.twoStringsStruct, %struct.twoStringsStruct* %26, i32 0, i32 0
  %27 = load i8*, i8** %key30, align 4
  %cmp31 = icmp ugt i8* %25, %27
  br i1 %cmp31, label %while.body33, label %while.end40

while.body33:                                     ; preds = %while.cond29
  %28 = load i8*, i8** %p1, align 4
  %incdec.ptr34 = getelementptr inbounds i8, i8* %28, i32 -1
  store i8* %incdec.ptr34, i8** %p1, align 4
  %29 = load i8*, i8** %p2, align 4
  %incdec.ptr35 = getelementptr inbounds i8, i8* %29, i32 -1
  store i8* %incdec.ptr35, i8** %p2, align 4
  %30 = load i8*, i8** %p1, align 4
  %31 = load i8, i8* %30, align 1
  %conv36 = sext i8 %31 to i32
  %cmp37 = icmp ne i32 %conv36, 48
  br i1 %cmp37, label %if.then39, label %if.end

if.then39:                                        ; preds = %while.body33
  br label %while.end40

if.end:                                           ; preds = %while.body33
  br label %while.cond29

while.end40:                                      ; preds = %if.then39, %while.cond29
  br i1 false, label %cond.true41, label %cond.false45

cond.true41:                                      ; preds = %while.end40
  %32 = load i8*, i8** %p1, align 4
  %33 = load i8, i8* %32, align 1
  %conv42 = sext i8 %33 to i32
  %call43 = call i32 @isdigit(i32 %conv42) #4
  %tobool44 = icmp ne i32 %call43, 0
  br i1 %tobool44, label %if.end53, label %if.then50

cond.false45:                                     ; preds = %while.end40
  %34 = load i8*, i8** %p1, align 4
  %35 = load i8, i8* %34, align 1
  %conv46 = sext i8 %35 to i32
  %sub47 = sub i32 %conv46, 48
  %cmp48 = icmp ult i32 %sub47, 10
  br i1 %cmp48, label %if.end53, label %if.then50

if.then50:                                        ; preds = %cond.false45, %cond.true41
  %36 = load i8*, i8** %p1, align 4
  %incdec.ptr51 = getelementptr inbounds i8, i8* %36, i32 1
  store i8* %incdec.ptr51, i8** %p1, align 4
  %37 = load i8*, i8** %p2, align 4
  %incdec.ptr52 = getelementptr inbounds i8, i8* %37, i32 1
  store i8* %incdec.ptr52, i8** %p2, align 4
  br label %if.end53

if.end53:                                         ; preds = %if.then50, %cond.false45, %cond.true41
  br label %if.end54

if.end54:                                         ; preds = %if.end53, %lor.lhs.false
  %38 = load i8*, i8** %p1, align 4
  store i8* %38, i8** %mrk1, align 4
  %39 = load i8*, i8** %p2, align 4
  store i8* %39, i8** %mrk2, align 4
  store i32 0, i32* %v1, align 4
  br label %while.cond55

while.cond55:                                     ; preds = %while.body60, %if.end54
  %40 = load i8*, i8** %p1, align 4
  %41 = load i8, i8* %40, align 1
  %conv56 = sext i8 %41 to i32
  %sub57 = sub i32 %conv56, 48
  %cmp58 = icmp ult i32 %sub57, 10
  br i1 %cmp58, label %while.body60, label %while.end63

while.body60:                                     ; preds = %while.cond55
  %42 = load i32, i32* %v1, align 4
  %mul = mul nsw i32 10, %42
  %43 = load i8*, i8** %p1, align 4
  %44 = load i8, i8* %43, align 1
  %call61 = call i32 @ord(i8 signext %44)
  %add = add nsw i32 %mul, %call61
  store i32 %add, i32* %v1, align 4
  %45 = load i8*, i8** %p1, align 4
  %incdec.ptr62 = getelementptr inbounds i8, i8* %45, i32 1
  store i8* %incdec.ptr62, i8** %p1, align 4
  br label %while.cond55

while.end63:                                      ; preds = %while.cond55
  store i32 0, i32* %v2, align 4
  br label %while.cond64

while.cond64:                                     ; preds = %while.body69, %while.end63
  %46 = load i8*, i8** %p2, align 4
  %47 = load i8, i8* %46, align 1
  %conv65 = sext i8 %47 to i32
  %sub66 = sub i32 %conv65, 48
  %cmp67 = icmp ult i32 %sub66, 10
  br i1 %cmp67, label %while.body69, label %while.end74

while.body69:                                     ; preds = %while.cond64
  %48 = load i32, i32* %v2, align 4
  %mul70 = mul nsw i32 10, %48
  %49 = load i8*, i8** %p2, align 4
  %50 = load i8, i8* %49, align 1
  %call71 = call i32 @ord(i8 signext %50)
  %add72 = add nsw i32 %mul70, %call71
  store i32 %add72, i32* %v2, align 4
  %51 = load i8*, i8** %p2, align 4
  %incdec.ptr73 = getelementptr inbounds i8, i8* %51, i32 1
  store i8* %incdec.ptr73, i8** %p2, align 4
  br label %while.cond64

while.end74:                                      ; preds = %while.cond64
  %52 = load i32, i32* %v1, align 4
  %53 = load i32, i32* %v2, align 4
  %cmp75 = icmp eq i32 %52, %53
  br i1 %cmp75, label %if.then77, label %if.end82

if.then77:                                        ; preds = %while.end74
  %54 = load i8*, i8** %p2, align 4
  %55 = load i8*, i8** %mrk2, align 4
  %sub.ptr.lhs.cast = ptrtoint i8* %54 to i32
  %sub.ptr.rhs.cast = ptrtoint i8* %55 to i32
  %sub.ptr.sub = sub i32 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %56 = load i8*, i8** %p1, align 4
  %57 = load i8*, i8** %mrk1, align 4
  %sub.ptr.lhs.cast78 = ptrtoint i8* %56 to i32
  %sub.ptr.rhs.cast79 = ptrtoint i8* %57 to i32
  %sub.ptr.sub80 = sub i32 %sub.ptr.lhs.cast78, %sub.ptr.rhs.cast79
  %sub81 = sub nsw i32 %sub.ptr.sub, %sub.ptr.sub80
  store i32 %sub81, i32* %retval, align 4
  br label %return

if.end82:                                         ; preds = %while.end74
  %58 = load i32, i32* %v1, align 4
  %59 = load i32, i32* %v2, align 4
  %sub83 = sub nsw i32 %58, %59
  store i32 %sub83, i32* %retval, align 4
  br label %return

if.end84:                                         ; preds = %cond.false17, %cond.true13, %cond.false, %cond.true
  %60 = load i8*, i8** %p1, align 4
  %61 = load i8, i8* %60, align 1
  %conv85 = sext i8 %61 to i32
  %call86 = call i32 @tolower(i32 %conv85) #4
  %62 = load i8*, i8** %p2, align 4
  %63 = load i8, i8* %62, align 1
  %conv87 = sext i8 %63 to i32
  %call88 = call i32 @tolower(i32 %conv87) #4
  %cmp89 = icmp ne i32 %call86, %call88
  br i1 %cmp89, label %if.then91, label %if.end97

if.then91:                                        ; preds = %if.end84
  %64 = load i8*, i8** %p1, align 4
  %65 = load i8, i8* %64, align 1
  %conv92 = sext i8 %65 to i32
  %call93 = call i32 @tolower(i32 %conv92) #4
  %66 = load i8*, i8** %p2, align 4
  %67 = load i8, i8* %66, align 1
  %conv94 = sext i8 %67 to i32
  %call95 = call i32 @tolower(i32 %conv94) #4
  %sub96 = sub nsw i32 %call93, %call95
  store i32 %sub96, i32* %retval, align 4
  br label %return

if.end97:                                         ; preds = %if.end84
  %68 = load %struct.twoStringsStruct*, %struct.twoStringsStruct** %s1.addr, align 4
  %key98 = getelementptr inbounds %struct.twoStringsStruct, %struct.twoStringsStruct* %68, i32 0, i32 0
  %69 = load i8*, i8** %key98, align 4
  store i8* %69, i8** %p1, align 4
  %70 = load %struct.twoStringsStruct*, %struct.twoStringsStruct** %s2.addr, align 4
  %key99 = getelementptr inbounds %struct.twoStringsStruct, %struct.twoStringsStruct* %70, i32 0, i32 0
  %71 = load i8*, i8** %key99, align 4
  store i8* %71, i8** %p2, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end97
  %72 = load i8*, i8** %p1, align 4
  %73 = load i8, i8* %72, align 1
  %conv100 = sext i8 %73 to i32
  %74 = load i8*, i8** %p2, align 4
  %75 = load i8, i8* %74, align 1
  %conv101 = sext i8 %75 to i32
  %cmp102 = icmp eq i32 %conv100, %conv101
  br i1 %cmp102, label %land.rhs104, label %land.end107

land.rhs104:                                      ; preds = %for.cond
  %76 = load i8*, i8** %p1, align 4
  %77 = load i8, i8* %76, align 1
  %conv105 = sext i8 %77 to i32
  %tobool106 = icmp ne i32 %conv105, 0
  br label %land.end107

land.end107:                                      ; preds = %land.rhs104, %for.cond
  %78 = phi i1 [ false, %for.cond ], [ %tobool106, %land.rhs104 ]
  br i1 %78, label %for.body, label %for.end

for.body:                                         ; preds = %land.end107
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %79 = load i8*, i8** %p1, align 4
  %incdec.ptr108 = getelementptr inbounds i8, i8* %79, i32 1
  store i8* %incdec.ptr108, i8** %p1, align 4
  %80 = load i8*, i8** %p2, align 4
  %incdec.ptr109 = getelementptr inbounds i8, i8* %80, i32 1
  store i8* %incdec.ptr109, i8** %p2, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end107
  %81 = load i8*, i8** %p1, align 4
  %82 = load i8, i8* %81, align 1
  %conv110 = sext i8 %82 to i32
  %83 = load i8*, i8** %p2, align 4
  %84 = load i8, i8* %83, align 1
  %conv111 = sext i8 %84 to i32
  %sub112 = sub nsw i32 %conv110, %conv111
  store i32 %sub112, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then91, %if.end82, %if.then77
  %85 = load i32, i32* %retval, align 4
  ret i32 %85
}

; Function Attrs: nounwind readonly
declare i32 @tolower(i32 %0) #1

; Function Attrs: nounwind readonly
declare i32 @isdigit(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @maxstrlen(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %la = alloca i32, align 4
  %lb = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %call = call i32 @strlen(i8* %0)
  store i32 %call, i32* %la, align 4
  %1 = load i8*, i8** %b.addr, align 4
  %call1 = call i32 @strlen(i8* %1)
  store i32 %call1, i32* %lb, align 4
  %2 = load i32, i32* %la, align 4
  %3 = load i32, i32* %lb, align 4
  %cmp = icmp sgt i32 %2, %3
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %4 = load i32, i32* %la, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  %5 = load i32, i32* %lb, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %4, %cond.true ], [ %5, %cond.false ]
  ret i32 %cond
}

declare i32 @strlen(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %toBsorted = alloca [11 x %struct.twoStringsStruct], align 16
  %k = alloca i32, align 4
  %maxlens = alloca [11 x i32], align 16
  %format = alloca [12 x i8], align 1
  %cp = alloca %struct.twoStringsStruct*, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [11 x %struct.twoStringsStruct]* %toBsorted to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([11 x %struct.twoStringsStruct]* @__const.main.toBsorted to i8*), i32 88, i1 false)
  %arraydecay = getelementptr inbounds [11 x %struct.twoStringsStruct], [11 x %struct.twoStringsStruct]* %toBsorted, i32 0, i32 0
  %1 = bitcast %struct.twoStringsStruct* %arraydecay to i8*
  call void @qsort(i8* %1, i32 11, i32 8, i32 (i8*, i8*)* bitcast (i32 (%struct.twoStringsStruct*, %struct.twoStringsStruct*)* @cmprStrgs to i32 (i8*, i8*)*))
  store i32 0, i32* %k, align 4
  %arraydecay1 = getelementptr inbounds [11 x %struct.twoStringsStruct], [11 x %struct.twoStringsStruct]* %toBsorted, i32 0, i32 0
  store %struct.twoStringsStruct* %arraydecay1, %struct.twoStringsStruct** %cp, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %k, align 4
  %cmp = icmp ult i32 %2, 11
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.twoStringsStruct*, %struct.twoStringsStruct** %cp, align 4
  %key = getelementptr inbounds %struct.twoStringsStruct, %struct.twoStringsStruct* %3, i32 0, i32 0
  %4 = load i8*, i8** %key, align 4
  %5 = load %struct.twoStringsStruct*, %struct.twoStringsStruct** %cp, align 4
  %value = getelementptr inbounds %struct.twoStringsStruct, %struct.twoStringsStruct* %5, i32 0, i32 1
  %6 = load i8*, i8** %value, align 4
  %call = call i32 @maxstrlen(i8* %4, i8* %6)
  %7 = load i32, i32* %k, align 4
  %arrayidx = getelementptr inbounds [11 x i32], [11 x i32]* %maxlens, i32 0, i32 %7
  store i32 %call, i32* %arrayidx, align 4
  %arraydecay2 = getelementptr inbounds [12 x i8], [12 x i8]* %format, i32 0, i32 0
  %8 = load i32, i32* %k, align 4
  %arrayidx3 = getelementptr inbounds [11 x i32], [11 x i32]* %maxlens, i32 0, i32 %8
  %9 = load i32, i32* %arrayidx3, align 4
  %call4 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay2, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.23, i32 0, i32 0), i32 %9)
  %arraydecay5 = getelementptr inbounds [12 x i8], [12 x i8]* %format, i32 0, i32 0
  %10 = load i32, i32* %k, align 4
  %arrayidx6 = getelementptr inbounds [11 x %struct.twoStringsStruct], [11 x %struct.twoStringsStruct]* %toBsorted, i32 0, i32 %10
  %value7 = getelementptr inbounds %struct.twoStringsStruct, %struct.twoStringsStruct* %arrayidx6, i32 0, i32 1
  %11 = load i8*, i8** %value7, align 4
  %call8 = call i32 (i8*, ...) @printf(i8* %arraydecay5, i8* %11)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %k, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %k, align 4
  %13 = load %struct.twoStringsStruct*, %struct.twoStringsStruct** %cp, align 4
  %incdec.ptr = getelementptr inbounds %struct.twoStringsStruct, %struct.twoStringsStruct* %13, i32 1
  store %struct.twoStringsStruct* %incdec.ptr, %struct.twoStringsStruct** %cp, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.24, i32 0, i32 0))
  store i32 0, i32* %k, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc20, %for.end
  %14 = load i32, i32* %k, align 4
  %cmp11 = icmp ult i32 %14, 11
  br i1 %cmp11, label %for.body12, label %for.end22

for.body12:                                       ; preds = %for.cond10
  %arraydecay13 = getelementptr inbounds [12 x i8], [12 x i8]* %format, i32 0, i32 0
  %15 = load i32, i32* %k, align 4
  %arrayidx14 = getelementptr inbounds [11 x i32], [11 x i32]* %maxlens, i32 0, i32 %15
  %16 = load i32, i32* %arrayidx14, align 4
  %call15 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay13, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.23, i32 0, i32 0), i32 %16)
  %arraydecay16 = getelementptr inbounds [12 x i8], [12 x i8]* %format, i32 0, i32 0
  %17 = load i32, i32* %k, align 4
  %arrayidx17 = getelementptr inbounds [11 x %struct.twoStringsStruct], [11 x %struct.twoStringsStruct]* %toBsorted, i32 0, i32 %17
  %key18 = getelementptr inbounds %struct.twoStringsStruct, %struct.twoStringsStruct* %arrayidx17, i32 0, i32 0
  %18 = load i8*, i8** %key18, align 8
  %call19 = call i32 (i8*, ...) @printf(i8* %arraydecay16, i8* %18)
  br label %for.inc20

for.inc20:                                        ; preds = %for.body12
  %19 = load i32, i32* %k, align 4
  %inc21 = add nsw i32 %19, 1
  store i32 %inc21, i32* %k, align 4
  br label %for.cond10

for.end22:                                        ; preds = %for.cond10
  %call23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.24, i32 0, i32 0))
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #2

declare i32 @sprintf(i8* %0, i8* %1, ...) #2

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %5 = load i8, i8* %4, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %5 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %call = call i32 @tolower(i32 %conv) #4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i8, i8* %6, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv2 = sext i8 %7 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %call3 = call i32 @tolower(i32 %conv2) #4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %call, %call3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %9 = load i8, i8* %8, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv5 = sext i8 %9 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %conv5, 0
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %10 = phi i1 [ false, %while.cond ], [ %tobool, %land.rhs ]
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i8, i8* %13, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv7 = sext i8 %14 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %call8 = call i32 @isdigit(i32 %conv7) #4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool9 = icmp ne i32 %call8, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %16 = load i8, i8* %15, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv10 = sext i8 %16 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %sub = sub i32 %conv10, 48
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 48:i32
infer %2

; *****
; For LLVM instruction:
;  %cmp11 = icmp ult i32 %sub, 10
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 48:i32
%3:i1 = ult %2, 10:i32
infer %3

; *****
; For LLVM instruction:
;  %18 = load i8, i8* %17, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv14 = sext i8 %18 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %call15 = call i32 @isdigit(i32 %conv14) #4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool16 = icmp ne i32 %call15, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %20 = load i8, i8* %19, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv18 = sext i8 %20 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %sub19 = sub i32 %conv18, 48
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 48:i32
infer %2

; *****
; For LLVM instruction:
;  %cmp20 = icmp ult i32 %sub19, 10
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 48:i32
%3:i1 = ult %2, 10:i32
infer %3

; *****
; For LLVM instruction:
;  %22 = load i8, i8* %21, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv22 = sext i8 %22 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp23 = icmp eq i32 %conv22, 48
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 48:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %24 = load i8, i8* %23, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv25 = sext i8 %24 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp26 = icmp eq i32 %conv25, 48
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 48:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %cmp31 = icmp ugt i8* %25, %27
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %31 = load i8, i8* %30, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv36 = sext i8 %31 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp37 = icmp ne i32 %conv36, 48
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 48:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %33 = load i8, i8* %32, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv42 = sext i8 %33 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %call43 = call i32 @isdigit(i32 %conv42) #4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool44 = icmp ne i32 %call43, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %35 = load i8, i8* %34, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv46 = sext i8 %35 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %sub47 = sub i32 %conv46, 48
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 48:i32
infer %2

; *****
; For LLVM instruction:
;  %cmp48 = icmp ult i32 %sub47, 10
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 48:i32
%3:i1 = ult %2, 10:i32
infer %3

; *****
; For LLVM instruction:
;  %41 = load i8, i8* %40, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv56 = sext i8 %41 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %sub57 = sub i32 %conv56, 48
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 48:i32
infer %2

; *****
; For LLVM instruction:
;  %cmp58 = icmp ult i32 %sub57, 10
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 48:i32
%3:i1 = ult %2, 10:i32
infer %3

; *****
; For LLVM instruction:
;  %42 = load i32, i32* %v1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 10, %42
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 10:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %44 = load i8, i8* %43, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %call61 = call i32 @ord(i8 signext %44)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %mul, %call61
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw 10:i32, %1
%3:i32 = addnsw %0, %2
infer %3

; *****
; For LLVM instruction:
;  %47 = load i8, i8* %46, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv65 = sext i8 %47 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %sub66 = sub i32 %conv65, 48
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 48:i32
infer %2

; *****
; For LLVM instruction:
;  %cmp67 = icmp ult i32 %sub66, 10
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 48:i32
%3:i1 = ult %2, 10:i32
infer %3

; *****
; For LLVM instruction:
;  %48 = load i32, i32* %v2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul70 = mul nsw i32 10, %48
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 10:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %50 = load i8, i8* %49, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %call71 = call i32 @ord(i8 signext %50)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add72 = add nsw i32 %mul70, %call71
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw 10:i32, %1
%3:i32 = addnsw %0, %2
infer %3

; *****
; For LLVM instruction:
;  %52 = load i32, i32* %v1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %53 = load i32, i32* %v2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp75 = icmp eq i32 %52, %53
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %sub.ptr.lhs.cast = ptrtoint i8* %54 to i32
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub.ptr.rhs.cast = ptrtoint i8* %55 to i32
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub.ptr.sub = sub i32 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1
infer %2

; *****
; For LLVM instruction:
;  %sub.ptr.lhs.cast78 = ptrtoint i8* %56 to i32
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub.ptr.rhs.cast79 = ptrtoint i8* %57 to i32
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub.ptr.sub80 = sub i32 %sub.ptr.lhs.cast78, %sub.ptr.rhs.cast79
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1
infer %2

; *****
; For LLVM instruction:
;  %sub81 = sub nsw i32 %sub.ptr.sub, %sub.ptr.sub80
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = sub %3, %4
%6:i32 = subnsw %2, %5
infer %6

; *****
; For LLVM instruction:
;  %58 = load i32, i32* %v1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %59 = load i32, i32* %v2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub83 = sub nsw i32 %58, %59
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %61 = load i8, i8* %60, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv85 = sext i8 %61 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %call86 = call i32 @tolower(i32 %conv85) #4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %63 = load i8, i8* %62, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv87 = sext i8 %63 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %call88 = call i32 @tolower(i32 %conv87) #4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp89 = icmp ne i32 %call86, %call88
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2

; *****
; For LLVM instruction:
;  %65 = load i8, i8* %64, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv92 = sext i8 %65 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %call93 = call i32 @tolower(i32 %conv92) #4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %67 = load i8, i8* %66, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv94 = sext i8 %67 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %call95 = call i32 @tolower(i32 %conv94) #4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub96 = sub nsw i32 %call93, %call95
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %73 = load i8, i8* %72, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv100 = sext i8 %73 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %75 = load i8, i8* %74, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv101 = sext i8 %75 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp102 = icmp eq i32 %conv100, %conv101
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i1 = eq %1, %3
infer %4

; *****
; For LLVM instruction:
;  %77 = load i8, i8* %76, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv105 = sext i8 %77 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %tobool106 = icmp ne i32 %conv105, 0
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %78 = phi i1 [ false, %for.cond ], [ %tobool106, %land.rhs104 ]
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %82 = load i8, i8* %81, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv110 = sext i8 %82 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %84 = load i8, i8* %83, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv111 = sext i8 %84 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %sub112 = sub nsw i32 %conv110, %conv111
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i32 = subnsw %1, %3
infer %4

; *****
; For LLVM instruction:
;  %85 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 0:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 48:i32
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -48
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -49
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 48:i32
%3:i1 = ult %2, 10:i32
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 48:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 48:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mulnsw 10:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1614807090
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw 10:i32, %1
%3:i32 = addnsw %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147483632
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = mulnsw 10:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 7 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = sub %3, %4
%6:i32 = subnsw %2, %5
infer %6


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147483646
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 7 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147418112
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i1 = eq %1, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i32 = subnsw %1, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for cmprStrgs()

; entering Souper's runOnFunction() for maxstrlen()

; ModuleID = './Sort_an_array_of_composite_structures.c.bc'
source_filename = "./Sort_an_array_of_composite_structures.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.twoStringsStruct = type { i8*, i8* }

@ord.dgts = internal global i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i32 0, i32 0), align 4
@.str = private unnamed_addr constant [10 x i8] c"012345679\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"Beta11a\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"many\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"alpha1\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"This\00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"Betamax\00", align 1
@.str.6 = private unnamed_addr constant [8 x i8] c"sorted.\00", align 1
@.str.7 = private unnamed_addr constant [6 x i8] c"beta3\00", align 1
@.str.8 = private unnamed_addr constant [6 x i8] c"order\00", align 1
@.str.9 = private unnamed_addr constant [8 x i8] c"beta11a\00", align 1
@.str.10 = private unnamed_addr constant [8 x i8] c"strings\00", align 1
@.str.11 = private unnamed_addr constant [8 x i8] c"beta001\00", align 1
@.str.12 = private unnamed_addr constant [3 x i8] c"is\00", align 1
@.str.13 = private unnamed_addr constant [7 x i8] c"beta11\00", align 1
@.str.14 = private unnamed_addr constant [6 x i8] c"which\00", align 1
@.str.15 = private unnamed_addr constant [8 x i8] c"beta041\00", align 1
@.str.16 = private unnamed_addr constant [3 x i8] c"be\00", align 1
@.str.17 = private unnamed_addr constant [7 x i8] c"beta05\00", align 1
@.str.18 = private unnamed_addr constant [3 x i8] c"in\00", align 1
@.str.19 = private unnamed_addr constant [6 x i8] c"beta1\00", align 1
@.str.20 = private unnamed_addr constant [4 x i8] c"the\00", align 1
@.str.21 = private unnamed_addr constant [7 x i8] c"beta40\00", align 1
@.str.22 = private unnamed_addr constant [7 x i8] c"should\00", align 1
@__const.main.toBsorted = private unnamed_addr constant [11 x %struct.twoStringsStruct] [%struct.twoStringsStruct { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0) }, %struct.twoStringsStruct { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0) }, %struct.twoStringsStruct { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i32 0, i32 0) }, %struct.twoStringsStruct { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.8, i32 0, i32 0) }, %struct.twoStringsStruct { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.10, i32 0, i32 0) }, %struct.twoStringsStruct { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0) }, %struct.twoStringsStruct { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.14, i32 0, i32 0) }, %struct.twoStringsStruct { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.16, i32 0, i32 0) }, %struct.twoStringsStruct { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18, i32 0, i32 0) }, %struct.twoStringsStruct { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.20, i32 0, i32 0) }, %struct.twoStringsStruct { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.22, i32 0, i32 0) }], align 16
@.str.23 = private unnamed_addr constant [8 x i8] c" %%-%ds\00", align 1
@.str.24 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @ord(i8 signext %v) #0 {
entry:
  %v.addr = alloca i8, align 1
  %cp = alloca i8*, align 4
  store i8 %v, i8* %v.addr, align 1
  %0 = load i8*, i8** @ord.dgts, align 4
  store i8* %0, i8** %cp, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i8, i8* %v.addr, align 1
  %conv = sext i8 %1 to i32
  %2 = load i8*, i8** %cp, align 4
  %3 = load i8, i8* %2, align 1
  %conv1 = sext i8 %3 to i32
  %cmp = icmp ne i32 %conv, %conv1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i8*, i8** %cp, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 1
  store i8* %incdec.ptr, i8** %cp, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %5 = load i8*, i8** %cp, align 4
  %6 = load i8*, i8** @ord.dgts, align 4
  %sub.ptr.lhs.cast = ptrtoint i8* %5 to i32
  %sub.ptr.rhs.cast = ptrtoint i8* %6 to i32
  %sub.ptr.sub = sub i32 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  ret i32 %sub.ptr.sub
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @cmprStrgs(%struct.twoStringsStruct* %s1, %struct.twoStringsStruct* %s2) #0 {
entry:
  %retval = alloca i32, align 4
  %s1.addr = alloca %struct.twoStringsStruct*, align 4
  %s2.addr = alloca %struct.twoStringsStruct*, align 4
  %p1 = alloca i8*, align 4
  %p2 = alloca i8*, align 4
  %mrk1 = alloca i8*, align 4
  %mrk2 = alloca i8*, align 4
  %v1 = alloca i32, align 4
  %v2 = alloca i32, align 4
  store %struct.twoStringsStruct* %s1, %struct.twoStringsStruct** %s1.addr, align 4
  store %struct.twoStringsStruct* %s2, %struct.twoStringsStruct** %s2.addr, align 4
  %0 = load %struct.twoStringsStruct*, %struct.twoStringsStruct** %s1.addr, align 4
  %key = getelementptr inbounds %struct.twoStringsStruct, %struct.twoStringsStruct* %0, i32 0, i32 0
  %1 = load i8*, i8** %key, align 4
  store i8* %1, i8** %p1, align 4
  %2 = load %struct.twoStringsStruct*, %struct.twoStringsStruct** %s2.addr, align 4
  %key1 = getelementptr inbounds %struct.twoStringsStruct, %struct.twoStringsStruct* %2, i32 0, i32 0
  %3 = load i8*, i8** %key1, align 4
  store i8* %3, i8** %p2, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %4 = load i8*, i8** %p1, align 4
  %5 = load i8, i8* %4, align 1
  %conv = sext i8 %5 to i32
  %call = call i32 @tolower(i32 %conv) #4
  %6 = load i8*, i8** %p2, align 4
  %7 = load i8, i8* %6, align 1
  %conv2 = sext i8 %7 to i32
  %call3 = call i32 @tolower(i32 %conv2) #4
  %cmp = icmp eq i32 %call, %call3
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %8 = load i8*, i8** %p1, align 4
  %9 = load i8, i8* %8, align 1
  %conv5 = sext i8 %9 to i32
  %tobool = icmp ne i32 %conv5, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %10 = phi i1 [ false, %while.cond ], [ %tobool, %land.rhs ]
  br i1 %10, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %11 = load i8*, i8** %p1, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %11, i32 1
  store i8* %incdec.ptr, i8** %p1, align 4
  %12 = load i8*, i8** %p2, align 4
  %incdec.ptr6 = getelementptr inbounds i8, i8* %12, i32 1
  store i8* %incdec.ptr6, i8** %p2, align 4
  br label %while.cond

while.end:                                        ; preds = %land.end
  br i1 false, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.end
  %13 = load i8*, i8** %p1, align 4
  %14 = load i8, i8* %13, align 1
  %conv7 = sext i8 %14 to i32
  %call8 = call i32 @isdigit(i32 %conv7) #4
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %land.lhs.true, label %if.end84

cond.false:                                       ; preds = %while.end
  %15 = load i8*, i8** %p1, align 4
  %16 = load i8, i8* %15, align 1
  %conv10 = sext i8 %16 to i32
  %sub = sub i32 %conv10, 48
  %cmp11 = icmp ult i32 %sub, 10
  br i1 %cmp11, label %land.lhs.true, label %if.end84

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  br i1 false, label %cond.true13, label %cond.false17

cond.true13:                                      ; preds = %land.lhs.true
  %17 = load i8*, i8** %p2, align 4
  %18 = load i8, i8* %17, align 1
  %conv14 = sext i8 %18 to i32
  %call15 = call i32 @isdigit(i32 %conv14) #4
  %tobool16 = icmp ne i32 %call15, 0
  br i1 %tobool16, label %if.then, label %if.end84

cond.false17:                                     ; preds = %land.lhs.true
  %19 = load i8*, i8** %p2, align 4
  %20 = load i8, i8* %19, align 1
  %conv18 = sext i8 %20 to i32
  %sub19 = sub i32 %conv18, 48
  %cmp20 = icmp ult i32 %sub19, 10
  br i1 %cmp20, label %if.then, label %if.end84

if.then:                                          ; preds = %cond.false17, %cond.true13
  %21 = load i8*, i8** %p1, align 4
  %22 = load i8, i8* %21, align 1
  %conv22 = sext i8 %22 to i32
  %cmp23 = icmp eq i32 %conv22, 48
  br i1 %cmp23, label %if.then28, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then
  %23 = load i8*, i8** %p2, align 4
  %24 = load i8, i8* %23, align 1
  %conv25 = sext i8 %24 to i32
  %cmp26 = icmp eq i32 %conv25, 48
  br i1 %cmp26, label %if.then28, label %if.end54

if.then28:                                        ; preds = %lor.lhs.false, %if.then
  br label %while.cond29

while.cond29:                                     ; preds = %if.end, %if.then28
  %25 = load i8*, i8** %p1, align 4
  %26 = load %struct.twoStringsStruct*, %struct.twoStringsStruct** %s1.addr, align 4
  %key30 = getelementptr inbounds %struct.twoStringsStruct, %struct.twoStringsStruct* %26, i32 0, i32 0
  %27 = load i8*, i8** %key30, align 4
  %cmp31 = icmp ugt i8* %25, %27
  br i1 %cmp31, label %while.body33, label %while.end40

while.body33:                                     ; preds = %while.cond29
  %28 = load i8*, i8** %p1, align 4
  %incdec.ptr34 = getelementptr inbounds i8, i8* %28, i32 -1
  store i8* %incdec.ptr34, i8** %p1, align 4
  %29 = load i8*, i8** %p2, align 4
  %incdec.ptr35 = getelementptr inbounds i8, i8* %29, i32 -1
  store i8* %incdec.ptr35, i8** %p2, align 4
  %30 = load i8*, i8** %p1, align 4
  %31 = load i8, i8* %30, align 1
  %conv36 = sext i8 %31 to i32
  %cmp37 = icmp ne i32 %conv36, 48
  br i1 %cmp37, label %if.then39, label %if.end

if.then39:                                        ; preds = %while.body33
  br label %while.end40

if.end:                                           ; preds = %while.body33
  br label %while.cond29

while.end40:                                      ; preds = %if.then39, %while.cond29
  br i1 false, label %cond.true41, label %cond.false45

cond.true41:                                      ; preds = %while.end40
  %32 = load i8*, i8** %p1, align 4
  %33 = load i8, i8* %32, align 1
  %conv42 = sext i8 %33 to i32
  %call43 = call i32 @isdigit(i32 %conv42) #4
  %tobool44 = icmp ne i32 %call43, 0
  br i1 %tobool44, label %if.end53, label %if.then50

cond.false45:                                     ; preds = %while.end40
  %34 = load i8*, i8** %p1, align 4
  %35 = load i8, i8* %34, align 1
  %conv46 = sext i8 %35 to i32
  %sub47 = sub i32 %conv46, 48
  %cmp48 = icmp ult i32 %sub47, 10
  br i1 %cmp48, label %if.end53, label %if.then50

if.then50:                                        ; preds = %cond.false45, %cond.true41
  %36 = load i8*, i8** %p1, align 4
  %incdec.ptr51 = getelementptr inbounds i8, i8* %36, i32 1
  store i8* %incdec.ptr51, i8** %p1, align 4
  %37 = load i8*, i8** %p2, align 4
  %incdec.ptr52 = getelementptr inbounds i8, i8* %37, i32 1
  store i8* %incdec.ptr52, i8** %p2, align 4
  br label %if.end53

if.end53:                                         ; preds = %if.then50, %cond.false45, %cond.true41
  br label %if.end54

if.end54:                                         ; preds = %if.end53, %lor.lhs.false
  %38 = load i8*, i8** %p1, align 4
  store i8* %38, i8** %mrk1, align 4
  %39 = load i8*, i8** %p2, align 4
  store i8* %39, i8** %mrk2, align 4
  store i32 0, i32* %v1, align 4
  br label %while.cond55

while.cond55:                                     ; preds = %while.body60, %if.end54
  %40 = load i8*, i8** %p1, align 4
  %41 = load i8, i8* %40, align 1
  %conv56 = sext i8 %41 to i32
  %sub57 = sub i32 %conv56, 48
  %cmp58 = icmp ult i32 %sub57, 10
  br i1 %cmp58, label %while.body60, label %while.end63

while.body60:                                     ; preds = %while.cond55
  %42 = load i32, i32* %v1, align 4
  %mul = mul nsw i32 10, %42
  %43 = load i8*, i8** %p1, align 4
  %44 = load i8, i8* %43, align 1
  %call61 = call i32 @ord(i8 signext %44)
  %add = add nsw i32 %mul, %call61
  store i32 %add, i32* %v1, align 4
  %45 = load i8*, i8** %p1, align 4
  %incdec.ptr62 = getelementptr inbounds i8, i8* %45, i32 1
  store i8* %incdec.ptr62, i8** %p1, align 4
  br label %while.cond55

while.end63:                                      ; preds = %while.cond55
  store i32 0, i32* %v2, align 4
  br label %while.cond64

while.cond64:                                     ; preds = %while.body69, %while.end63
  %46 = load i8*, i8** %p2, align 4
  %47 = load i8, i8* %46, align 1
  %conv65 = sext i8 %47 to i32
  %sub66 = sub i32 %conv65, 48
  %cmp67 = icmp ult i32 %sub66, 10
  br i1 %cmp67, label %while.body69, label %while.end74

while.body69:                                     ; preds = %while.cond64
  %48 = load i32, i32* %v2, align 4
  %mul70 = mul nsw i32 10, %48
  %49 = load i8*, i8** %p2, align 4
  %50 = load i8, i8* %49, align 1
  %call71 = call i32 @ord(i8 signext %50)
  %add72 = add nsw i32 %mul70, %call71
  store i32 %add72, i32* %v2, align 4
  %51 = load i8*, i8** %p2, align 4
  %incdec.ptr73 = getelementptr inbounds i8, i8* %51, i32 1
  store i8* %incdec.ptr73, i8** %p2, align 4
  br label %while.cond64

while.end74:                                      ; preds = %while.cond64
  %52 = load i32, i32* %v1, align 4
  %53 = load i32, i32* %v2, align 4
  %cmp75 = icmp eq i32 %52, %53
  br i1 %cmp75, label %if.then77, label %if.end82

if.then77:                                        ; preds = %while.end74
  %54 = load i8*, i8** %p2, align 4
  %55 = load i8*, i8** %mrk2, align 4
  %sub.ptr.lhs.cast = ptrtoint i8* %54 to i32
  %sub.ptr.rhs.cast = ptrtoint i8* %55 to i32
  %sub.ptr.sub = sub i32 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %56 = load i8*, i8** %p1, align 4
  %57 = load i8*, i8** %mrk1, align 4
  %sub.ptr.lhs.cast78 = ptrtoint i8* %56 to i32
  %sub.ptr.rhs.cast79 = ptrtoint i8* %57 to i32
  %sub.ptr.sub80 = sub i32 %sub.ptr.lhs.cast78, %sub.ptr.rhs.cast79
  %sub81 = sub nsw i32 %sub.ptr.sub, %sub.ptr.sub80
  store i32 %sub81, i32* %retval, align 4
  br label %return

if.end82:                                         ; preds = %while.end74
  %58 = load i32, i32* %v1, align 4
  %59 = load i32, i32* %v2, align 4
  %sub83 = sub nsw i32 %58, %59
  store i32 %sub83, i32* %retval, align 4
  br label %return

if.end84:                                         ; preds = %cond.false17, %cond.true13, %cond.false, %cond.true
  %60 = load i8*, i8** %p1, align 4
  %61 = load i8, i8* %60, align 1
  %conv85 = sext i8 %61 to i32
  %call86 = call i32 @tolower(i32 %conv85) #4
  %62 = load i8*, i8** %p2, align 4
  %63 = load i8, i8* %62, align 1
  %conv87 = sext i8 %63 to i32
  %call88 = call i32 @tolower(i32 %conv87) #4
  %cmp89 = icmp ne i32 %call86, %call88
  br i1 %cmp89, label %if.then91, label %if.end97

if.then91:                                        ; preds = %if.end84
  %64 = load i8*, i8** %p1, align 4
  %65 = load i8, i8* %64, align 1
  %conv92 = sext i8 %65 to i32
  %call93 = call i32 @tolower(i32 %conv92) #4
  %66 = load i8*, i8** %p2, align 4
  %67 = load i8, i8* %66, align 1
  %conv94 = sext i8 %67 to i32
  %call95 = call i32 @tolower(i32 %conv94) #4
  %sub96 = sub nsw i32 %call93, %call95
  store i32 %sub96, i32* %retval, align 4
  br label %return

if.end97:                                         ; preds = %if.end84
  %68 = load %struct.twoStringsStruct*, %struct.twoStringsStruct** %s1.addr, align 4
  %key98 = getelementptr inbounds %struct.twoStringsStruct, %struct.twoStringsStruct* %68, i32 0, i32 0
  %69 = load i8*, i8** %key98, align 4
  store i8* %69, i8** %p1, align 4
  %70 = load %struct.twoStringsStruct*, %struct.twoStringsStruct** %s2.addr, align 4
  %key99 = getelementptr inbounds %struct.twoStringsStruct, %struct.twoStringsStruct* %70, i32 0, i32 0
  %71 = load i8*, i8** %key99, align 4
  store i8* %71, i8** %p2, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end97
  %72 = load i8*, i8** %p1, align 4
  %73 = load i8, i8* %72, align 1
  %conv100 = sext i8 %73 to i32
  %74 = load i8*, i8** %p2, align 4
  %75 = load i8, i8* %74, align 1
  %conv101 = sext i8 %75 to i32
  %cmp102 = icmp eq i32 %conv100, %conv101
  br i1 %cmp102, label %land.rhs104, label %land.end107

land.rhs104:                                      ; preds = %for.cond
  %76 = load i8*, i8** %p1, align 4
  %77 = load i8, i8* %76, align 1
  %conv105 = sext i8 %77 to i32
  %tobool106 = icmp ne i32 %conv105, 0
  br label %land.end107

land.end107:                                      ; preds = %land.rhs104, %for.cond
  %78 = phi i1 [ false, %for.cond ], [ %tobool106, %land.rhs104 ]
  br i1 %78, label %for.body, label %for.end

for.body:                                         ; preds = %land.end107
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %79 = load i8*, i8** %p1, align 4
  %incdec.ptr108 = getelementptr inbounds i8, i8* %79, i32 1
  store i8* %incdec.ptr108, i8** %p1, align 4
  %80 = load i8*, i8** %p2, align 4
  %incdec.ptr109 = getelementptr inbounds i8, i8* %80, i32 1
  store i8* %incdec.ptr109, i8** %p2, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end107
  %81 = load i8*, i8** %p1, align 4
  %82 = load i8, i8* %81, align 1
  %conv110 = sext i8 %82 to i32
  %83 = load i8*, i8** %p2, align 4
  %84 = load i8, i8* %83, align 1
  %conv111 = sext i8 %84 to i32
  %sub112 = sub nsw i32 %conv110, %conv111
  store i32 %sub112, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then91, %if.end82, %if.then77
  %85 = load i32, i32* %retval, align 4
  ret i32 %85
}

; Function Attrs: nounwind readonly
declare i32 @tolower(i32 %0) #1

; Function Attrs: nounwind readonly
declare i32 @isdigit(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @maxstrlen(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %la = alloca i32, align 4
  %lb = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %call = call i32 @strlen(i8* %0)
  store i32 %call, i32* %la, align 4
  %1 = load i8*, i8** %b.addr, align 4
  %call1 = call i32 @strlen(i8* %1)
  store i32 %call1, i32* %lb, align 4
  %2 = load i32, i32* %la, align 4
  %3 = load i32, i32* %lb, align 4
  %cmp = icmp sgt i32 %2, %3
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %4 = load i32, i32* %la, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  %5 = load i32, i32* %lb, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %4, %cond.true ], [ %5, %cond.false ]
  ret i32 %cond
}

declare i32 @strlen(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %toBsorted = alloca [11 x %struct.twoStringsStruct], align 16
  %k = alloca i32, align 4
  %maxlens = alloca [11 x i32], align 16
  %format = alloca [12 x i8], align 1
  %cp = alloca %struct.twoStringsStruct*, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [11 x %struct.twoStringsStruct]* %toBsorted to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([11 x %struct.twoStringsStruct]* @__const.main.toBsorted to i8*), i32 88, i1 false)
  %arraydecay = getelementptr inbounds [11 x %struct.twoStringsStruct], [11 x %struct.twoStringsStruct]* %toBsorted, i32 0, i32 0
  %1 = bitcast %struct.twoStringsStruct* %arraydecay to i8*
  call void @qsort(i8* %1, i32 11, i32 8, i32 (i8*, i8*)* bitcast (i32 (%struct.twoStringsStruct*, %struct.twoStringsStruct*)* @cmprStrgs to i32 (i8*, i8*)*))
  store i32 0, i32* %k, align 4
  %arraydecay1 = getelementptr inbounds [11 x %struct.twoStringsStruct], [11 x %struct.twoStringsStruct]* %toBsorted, i32 0, i32 0
  store %struct.twoStringsStruct* %arraydecay1, %struct.twoStringsStruct** %cp, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %k, align 4
  %cmp = icmp ult i32 %2, 11
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.twoStringsStruct*, %struct.twoStringsStruct** %cp, align 4
  %key = getelementptr inbounds %struct.twoStringsStruct, %struct.twoStringsStruct* %3, i32 0, i32 0
  %4 = load i8*, i8** %key, align 4
  %5 = load %struct.twoStringsStruct*, %struct.twoStringsStruct** %cp, align 4
  %value = getelementptr inbounds %struct.twoStringsStruct, %struct.twoStringsStruct* %5, i32 0, i32 1
  %6 = load i8*, i8** %value, align 4
  %call = call i32 @maxstrlen(i8* %4, i8* %6)
  %7 = load i32, i32* %k, align 4
  %arrayidx = getelementptr inbounds [11 x i32], [11 x i32]* %maxlens, i32 0, i32 %7
  store i32 %call, i32* %arrayidx, align 4
  %arraydecay2 = getelementptr inbounds [12 x i8], [12 x i8]* %format, i32 0, i32 0
  %8 = load i32, i32* %k, align 4
  %arrayidx3 = getelementptr inbounds [11 x i32], [11 x i32]* %maxlens, i32 0, i32 %8
  %9 = load i32, i32* %arrayidx3, align 4
  %call4 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay2, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.23, i32 0, i32 0), i32 %9)
  %arraydecay5 = getelementptr inbounds [12 x i8], [12 x i8]* %format, i32 0, i32 0
  %10 = load i32, i32* %k, align 4
  %arrayidx6 = getelementptr inbounds [11 x %struct.twoStringsStruct], [11 x %struct.twoStringsStruct]* %toBsorted, i32 0, i32 %10
  %value7 = getelementptr inbounds %struct.twoStringsStruct, %struct.twoStringsStruct* %arrayidx6, i32 0, i32 1
  %11 = load i8*, i8** %value7, align 4
  %call8 = call i32 (i8*, ...) @printf(i8* %arraydecay5, i8* %11)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %k, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %k, align 4
  %13 = load %struct.twoStringsStruct*, %struct.twoStringsStruct** %cp, align 4
  %incdec.ptr = getelementptr inbounds %struct.twoStringsStruct, %struct.twoStringsStruct* %13, i32 1
  store %struct.twoStringsStruct* %incdec.ptr, %struct.twoStringsStruct** %cp, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.24, i32 0, i32 0))
  store i32 0, i32* %k, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc20, %for.end
  %14 = load i32, i32* %k, align 4
  %cmp11 = icmp ult i32 %14, 11
  br i1 %cmp11, label %for.body12, label %for.end22

for.body12:                                       ; preds = %for.cond10
  %arraydecay13 = getelementptr inbounds [12 x i8], [12 x i8]* %format, i32 0, i32 0
  %15 = load i32, i32* %k, align 4
  %arrayidx14 = getelementptr inbounds [11 x i32], [11 x i32]* %maxlens, i32 0, i32 %15
  %16 = load i32, i32* %arrayidx14, align 4
  %call15 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay13, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.23, i32 0, i32 0), i32 %16)
  %arraydecay16 = getelementptr inbounds [12 x i8], [12 x i8]* %format, i32 0, i32 0
  %17 = load i32, i32* %k, align 4
  %arrayidx17 = getelementptr inbounds [11 x %struct.twoStringsStruct], [11 x %struct.twoStringsStruct]* %toBsorted, i32 0, i32 %17
  %key18 = getelementptr inbounds %struct.twoStringsStruct, %struct.twoStringsStruct* %arrayidx17, i32 0, i32 0
  %18 = load i8*, i8** %key18, align 8
  %call19 = call i32 (i8*, ...) @printf(i8* %arraydecay16, i8* %18)
  br label %for.inc20

for.inc20:                                        ; preds = %for.body12
  %19 = load i32, i32* %k, align 4
  %inc21 = add nsw i32 %19, 1
  store i32 %inc21, i32* %k, align 4
  br label %for.cond10

for.end22:                                        ; preds = %for.cond10
  %call23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.24, i32 0, i32 0))
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #2

declare i32 @sprintf(i8* %0, i8* %1, ...) #2

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 @strlen(i8* %0)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call1 = call i32 @strlen(i8* %1)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %la, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %lb, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sgt i32 %2, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %la, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %lb, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cond = phi i32 [ %4, %cond.true ], [ %5, %cond.false ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = phi %0, %1, %2
infer %3
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = phi %0, %1, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for maxstrlen()

; entering Souper's runOnFunction() for main()

; ModuleID = './Sort_an_array_of_composite_structures.c.bc'
source_filename = "./Sort_an_array_of_composite_structures.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.twoStringsStruct = type { i8*, i8* }

@ord.dgts = internal global i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i32 0, i32 0), align 4
@.str = private unnamed_addr constant [10 x i8] c"012345679\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"Beta11a\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"many\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"alpha1\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"This\00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"Betamax\00", align 1
@.str.6 = private unnamed_addr constant [8 x i8] c"sorted.\00", align 1
@.str.7 = private unnamed_addr constant [6 x i8] c"beta3\00", align 1
@.str.8 = private unnamed_addr constant [6 x i8] c"order\00", align 1
@.str.9 = private unnamed_addr constant [8 x i8] c"beta11a\00", align 1
@.str.10 = private unnamed_addr constant [8 x i8] c"strings\00", align 1
@.str.11 = private unnamed_addr constant [8 x i8] c"beta001\00", align 1
@.str.12 = private unnamed_addr constant [3 x i8] c"is\00", align 1
@.str.13 = private unnamed_addr constant [7 x i8] c"beta11\00", align 1
@.str.14 = private unnamed_addr constant [6 x i8] c"which\00", align 1
@.str.15 = private unnamed_addr constant [8 x i8] c"beta041\00", align 1
@.str.16 = private unnamed_addr constant [3 x i8] c"be\00", align 1
@.str.17 = private unnamed_addr constant [7 x i8] c"beta05\00", align 1
@.str.18 = private unnamed_addr constant [3 x i8] c"in\00", align 1
@.str.19 = private unnamed_addr constant [6 x i8] c"beta1\00", align 1
@.str.20 = private unnamed_addr constant [4 x i8] c"the\00", align 1
@.str.21 = private unnamed_addr constant [7 x i8] c"beta40\00", align 1
@.str.22 = private unnamed_addr constant [7 x i8] c"should\00", align 1
@__const.main.toBsorted = private unnamed_addr constant [11 x %struct.twoStringsStruct] [%struct.twoStringsStruct { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0) }, %struct.twoStringsStruct { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0) }, %struct.twoStringsStruct { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i32 0, i32 0) }, %struct.twoStringsStruct { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.8, i32 0, i32 0) }, %struct.twoStringsStruct { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.10, i32 0, i32 0) }, %struct.twoStringsStruct { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0) }, %struct.twoStringsStruct { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.14, i32 0, i32 0) }, %struct.twoStringsStruct { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.16, i32 0, i32 0) }, %struct.twoStringsStruct { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18, i32 0, i32 0) }, %struct.twoStringsStruct { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.20, i32 0, i32 0) }, %struct.twoStringsStruct { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.22, i32 0, i32 0) }], align 16
@.str.23 = private unnamed_addr constant [8 x i8] c" %%-%ds\00", align 1
@.str.24 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @ord(i8 signext %v) #0 {
entry:
  %v.addr = alloca i8, align 1
  %cp = alloca i8*, align 4
  store i8 %v, i8* %v.addr, align 1
  %0 = load i8*, i8** @ord.dgts, align 4
  store i8* %0, i8** %cp, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i8, i8* %v.addr, align 1
  %conv = sext i8 %1 to i32
  %2 = load i8*, i8** %cp, align 4
  %3 = load i8, i8* %2, align 1
  %conv1 = sext i8 %3 to i32
  %cmp = icmp ne i32 %conv, %conv1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i8*, i8** %cp, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 1
  store i8* %incdec.ptr, i8** %cp, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %5 = load i8*, i8** %cp, align 4
  %6 = load i8*, i8** @ord.dgts, align 4
  %sub.ptr.lhs.cast = ptrtoint i8* %5 to i32
  %sub.ptr.rhs.cast = ptrtoint i8* %6 to i32
  %sub.ptr.sub = sub i32 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  ret i32 %sub.ptr.sub
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @cmprStrgs(%struct.twoStringsStruct* %s1, %struct.twoStringsStruct* %s2) #0 {
entry:
  %retval = alloca i32, align 4
  %s1.addr = alloca %struct.twoStringsStruct*, align 4
  %s2.addr = alloca %struct.twoStringsStruct*, align 4
  %p1 = alloca i8*, align 4
  %p2 = alloca i8*, align 4
  %mrk1 = alloca i8*, align 4
  %mrk2 = alloca i8*, align 4
  %v1 = alloca i32, align 4
  %v2 = alloca i32, align 4
  store %struct.twoStringsStruct* %s1, %struct.twoStringsStruct** %s1.addr, align 4
  store %struct.twoStringsStruct* %s2, %struct.twoStringsStruct** %s2.addr, align 4
  %0 = load %struct.twoStringsStruct*, %struct.twoStringsStruct** %s1.addr, align 4
  %key = getelementptr inbounds %struct.twoStringsStruct, %struct.twoStringsStruct* %0, i32 0, i32 0
  %1 = load i8*, i8** %key, align 4
  store i8* %1, i8** %p1, align 4
  %2 = load %struct.twoStringsStruct*, %struct.twoStringsStruct** %s2.addr, align 4
  %key1 = getelementptr inbounds %struct.twoStringsStruct, %struct.twoStringsStruct* %2, i32 0, i32 0
  %3 = load i8*, i8** %key1, align 4
  store i8* %3, i8** %p2, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %4 = load i8*, i8** %p1, align 4
  %5 = load i8, i8* %4, align 1
  %conv = sext i8 %5 to i32
  %call = call i32 @tolower(i32 %conv) #4
  %6 = load i8*, i8** %p2, align 4
  %7 = load i8, i8* %6, align 1
  %conv2 = sext i8 %7 to i32
  %call3 = call i32 @tolower(i32 %conv2) #4
  %cmp = icmp eq i32 %call, %call3
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %8 = load i8*, i8** %p1, align 4
  %9 = load i8, i8* %8, align 1
  %conv5 = sext i8 %9 to i32
  %tobool = icmp ne i32 %conv5, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %10 = phi i1 [ false, %while.cond ], [ %tobool, %land.rhs ]
  br i1 %10, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %11 = load i8*, i8** %p1, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %11, i32 1
  store i8* %incdec.ptr, i8** %p1, align 4
  %12 = load i8*, i8** %p2, align 4
  %incdec.ptr6 = getelementptr inbounds i8, i8* %12, i32 1
  store i8* %incdec.ptr6, i8** %p2, align 4
  br label %while.cond

while.end:                                        ; preds = %land.end
  br i1 false, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.end
  %13 = load i8*, i8** %p1, align 4
  %14 = load i8, i8* %13, align 1
  %conv7 = sext i8 %14 to i32
  %call8 = call i32 @isdigit(i32 %conv7) #4
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %land.lhs.true, label %if.end84

cond.false:                                       ; preds = %while.end
  %15 = load i8*, i8** %p1, align 4
  %16 = load i8, i8* %15, align 1
  %conv10 = sext i8 %16 to i32
  %sub = sub i32 %conv10, 48
  %cmp11 = icmp ult i32 %sub, 10
  br i1 %cmp11, label %land.lhs.true, label %if.end84

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  br i1 false, label %cond.true13, label %cond.false17

cond.true13:                                      ; preds = %land.lhs.true
  %17 = load i8*, i8** %p2, align 4
  %18 = load i8, i8* %17, align 1
  %conv14 = sext i8 %18 to i32
  %call15 = call i32 @isdigit(i32 %conv14) #4
  %tobool16 = icmp ne i32 %call15, 0
  br i1 %tobool16, label %if.then, label %if.end84

cond.false17:                                     ; preds = %land.lhs.true
  %19 = load i8*, i8** %p2, align 4
  %20 = load i8, i8* %19, align 1
  %conv18 = sext i8 %20 to i32
  %sub19 = sub i32 %conv18, 48
  %cmp20 = icmp ult i32 %sub19, 10
  br i1 %cmp20, label %if.then, label %if.end84

if.then:                                          ; preds = %cond.false17, %cond.true13
  %21 = load i8*, i8** %p1, align 4
  %22 = load i8, i8* %21, align 1
  %conv22 = sext i8 %22 to i32
  %cmp23 = icmp eq i32 %conv22, 48
  br i1 %cmp23, label %if.then28, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then
  %23 = load i8*, i8** %p2, align 4
  %24 = load i8, i8* %23, align 1
  %conv25 = sext i8 %24 to i32
  %cmp26 = icmp eq i32 %conv25, 48
  br i1 %cmp26, label %if.then28, label %if.end54

if.then28:                                        ; preds = %lor.lhs.false, %if.then
  br label %while.cond29

while.cond29:                                     ; preds = %if.end, %if.then28
  %25 = load i8*, i8** %p1, align 4
  %26 = load %struct.twoStringsStruct*, %struct.twoStringsStruct** %s1.addr, align 4
  %key30 = getelementptr inbounds %struct.twoStringsStruct, %struct.twoStringsStruct* %26, i32 0, i32 0
  %27 = load i8*, i8** %key30, align 4
  %cmp31 = icmp ugt i8* %25, %27
  br i1 %cmp31, label %while.body33, label %while.end40

while.body33:                                     ; preds = %while.cond29
  %28 = load i8*, i8** %p1, align 4
  %incdec.ptr34 = getelementptr inbounds i8, i8* %28, i32 -1
  store i8* %incdec.ptr34, i8** %p1, align 4
  %29 = load i8*, i8** %p2, align 4
  %incdec.ptr35 = getelementptr inbounds i8, i8* %29, i32 -1
  store i8* %incdec.ptr35, i8** %p2, align 4
  %30 = load i8*, i8** %p1, align 4
  %31 = load i8, i8* %30, align 1
  %conv36 = sext i8 %31 to i32
  %cmp37 = icmp ne i32 %conv36, 48
  br i1 %cmp37, label %if.then39, label %if.end

if.then39:                                        ; preds = %while.body33
  br label %while.end40

if.end:                                           ; preds = %while.body33
  br label %while.cond29

while.end40:                                      ; preds = %if.then39, %while.cond29
  br i1 false, label %cond.true41, label %cond.false45

cond.true41:                                      ; preds = %while.end40
  %32 = load i8*, i8** %p1, align 4
  %33 = load i8, i8* %32, align 1
  %conv42 = sext i8 %33 to i32
  %call43 = call i32 @isdigit(i32 %conv42) #4
  %tobool44 = icmp ne i32 %call43, 0
  br i1 %tobool44, label %if.end53, label %if.then50

cond.false45:                                     ; preds = %while.end40
  %34 = load i8*, i8** %p1, align 4
  %35 = load i8, i8* %34, align 1
  %conv46 = sext i8 %35 to i32
  %sub47 = sub i32 %conv46, 48
  %cmp48 = icmp ult i32 %sub47, 10
  br i1 %cmp48, label %if.end53, label %if.then50

if.then50:                                        ; preds = %cond.false45, %cond.true41
  %36 = load i8*, i8** %p1, align 4
  %incdec.ptr51 = getelementptr inbounds i8, i8* %36, i32 1
  store i8* %incdec.ptr51, i8** %p1, align 4
  %37 = load i8*, i8** %p2, align 4
  %incdec.ptr52 = getelementptr inbounds i8, i8* %37, i32 1
  store i8* %incdec.ptr52, i8** %p2, align 4
  br label %if.end53

if.end53:                                         ; preds = %if.then50, %cond.false45, %cond.true41
  br label %if.end54

if.end54:                                         ; preds = %if.end53, %lor.lhs.false
  %38 = load i8*, i8** %p1, align 4
  store i8* %38, i8** %mrk1, align 4
  %39 = load i8*, i8** %p2, align 4
  store i8* %39, i8** %mrk2, align 4
  store i32 0, i32* %v1, align 4
  br label %while.cond55

while.cond55:                                     ; preds = %while.body60, %if.end54
  %40 = load i8*, i8** %p1, align 4
  %41 = load i8, i8* %40, align 1
  %conv56 = sext i8 %41 to i32
  %sub57 = sub i32 %conv56, 48
  %cmp58 = icmp ult i32 %sub57, 10
  br i1 %cmp58, label %while.body60, label %while.end63

while.body60:                                     ; preds = %while.cond55
  %42 = load i32, i32* %v1, align 4
  %mul = mul nsw i32 10, %42
  %43 = load i8*, i8** %p1, align 4
  %44 = load i8, i8* %43, align 1
  %call61 = call i32 @ord(i8 signext %44)
  %add = add nsw i32 %mul, %call61
  store i32 %add, i32* %v1, align 4
  %45 = load i8*, i8** %p1, align 4
  %incdec.ptr62 = getelementptr inbounds i8, i8* %45, i32 1
  store i8* %incdec.ptr62, i8** %p1, align 4
  br label %while.cond55

while.end63:                                      ; preds = %while.cond55
  store i32 0, i32* %v2, align 4
  br label %while.cond64

while.cond64:                                     ; preds = %while.body69, %while.end63
  %46 = load i8*, i8** %p2, align 4
  %47 = load i8, i8* %46, align 1
  %conv65 = sext i8 %47 to i32
  %sub66 = sub i32 %conv65, 48
  %cmp67 = icmp ult i32 %sub66, 10
  br i1 %cmp67, label %while.body69, label %while.end74

while.body69:                                     ; preds = %while.cond64
  %48 = load i32, i32* %v2, align 4
  %mul70 = mul nsw i32 10, %48
  %49 = load i8*, i8** %p2, align 4
  %50 = load i8, i8* %49, align 1
  %call71 = call i32 @ord(i8 signext %50)
  %add72 = add nsw i32 %mul70, %call71
  store i32 %add72, i32* %v2, align 4
  %51 = load i8*, i8** %p2, align 4
  %incdec.ptr73 = getelementptr inbounds i8, i8* %51, i32 1
  store i8* %incdec.ptr73, i8** %p2, align 4
  br label %while.cond64

while.end74:                                      ; preds = %while.cond64
  %52 = load i32, i32* %v1, align 4
  %53 = load i32, i32* %v2, align 4
  %cmp75 = icmp eq i32 %52, %53
  br i1 %cmp75, label %if.then77, label %if.end82

if.then77:                                        ; preds = %while.end74
  %54 = load i8*, i8** %p2, align 4
  %55 = load i8*, i8** %mrk2, align 4
  %sub.ptr.lhs.cast = ptrtoint i8* %54 to i32
  %sub.ptr.rhs.cast = ptrtoint i8* %55 to i32
  %sub.ptr.sub = sub i32 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %56 = load i8*, i8** %p1, align 4
  %57 = load i8*, i8** %mrk1, align 4
  %sub.ptr.lhs.cast78 = ptrtoint i8* %56 to i32
  %sub.ptr.rhs.cast79 = ptrtoint i8* %57 to i32
  %sub.ptr.sub80 = sub i32 %sub.ptr.lhs.cast78, %sub.ptr.rhs.cast79
  %sub81 = sub nsw i32 %sub.ptr.sub, %sub.ptr.sub80
  store i32 %sub81, i32* %retval, align 4
  br label %return

if.end82:                                         ; preds = %while.end74
  %58 = load i32, i32* %v1, align 4
  %59 = load i32, i32* %v2, align 4
  %sub83 = sub nsw i32 %58, %59
  store i32 %sub83, i32* %retval, align 4
  br label %return

if.end84:                                         ; preds = %cond.false17, %cond.true13, %cond.false, %cond.true
  %60 = load i8*, i8** %p1, align 4
  %61 = load i8, i8* %60, align 1
  %conv85 = sext i8 %61 to i32
  %call86 = call i32 @tolower(i32 %conv85) #4
  %62 = load i8*, i8** %p2, align 4
  %63 = load i8, i8* %62, align 1
  %conv87 = sext i8 %63 to i32
  %call88 = call i32 @tolower(i32 %conv87) #4
  %cmp89 = icmp ne i32 %call86, %call88
  br i1 %cmp89, label %if.then91, label %if.end97

if.then91:                                        ; preds = %if.end84
  %64 = load i8*, i8** %p1, align 4
  %65 = load i8, i8* %64, align 1
  %conv92 = sext i8 %65 to i32
  %call93 = call i32 @tolower(i32 %conv92) #4
  %66 = load i8*, i8** %p2, align 4
  %67 = load i8, i8* %66, align 1
  %conv94 = sext i8 %67 to i32
  %call95 = call i32 @tolower(i32 %conv94) #4
  %sub96 = sub nsw i32 %call93, %call95
  store i32 %sub96, i32* %retval, align 4
  br label %return

if.end97:                                         ; preds = %if.end84
  %68 = load %struct.twoStringsStruct*, %struct.twoStringsStruct** %s1.addr, align 4
  %key98 = getelementptr inbounds %struct.twoStringsStruct, %struct.twoStringsStruct* %68, i32 0, i32 0
  %69 = load i8*, i8** %key98, align 4
  store i8* %69, i8** %p1, align 4
  %70 = load %struct.twoStringsStruct*, %struct.twoStringsStruct** %s2.addr, align 4
  %key99 = getelementptr inbounds %struct.twoStringsStruct, %struct.twoStringsStruct* %70, i32 0, i32 0
  %71 = load i8*, i8** %key99, align 4
  store i8* %71, i8** %p2, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end97
  %72 = load i8*, i8** %p1, align 4
  %73 = load i8, i8* %72, align 1
  %conv100 = sext i8 %73 to i32
  %74 = load i8*, i8** %p2, align 4
  %75 = load i8, i8* %74, align 1
  %conv101 = sext i8 %75 to i32
  %cmp102 = icmp eq i32 %conv100, %conv101
  br i1 %cmp102, label %land.rhs104, label %land.end107

land.rhs104:                                      ; preds = %for.cond
  %76 = load i8*, i8** %p1, align 4
  %77 = load i8, i8* %76, align 1
  %conv105 = sext i8 %77 to i32
  %tobool106 = icmp ne i32 %conv105, 0
  br label %land.end107

land.end107:                                      ; preds = %land.rhs104, %for.cond
  %78 = phi i1 [ false, %for.cond ], [ %tobool106, %land.rhs104 ]
  br i1 %78, label %for.body, label %for.end

for.body:                                         ; preds = %land.end107
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %79 = load i8*, i8** %p1, align 4
  %incdec.ptr108 = getelementptr inbounds i8, i8* %79, i32 1
  store i8* %incdec.ptr108, i8** %p1, align 4
  %80 = load i8*, i8** %p2, align 4
  %incdec.ptr109 = getelementptr inbounds i8, i8* %80, i32 1
  store i8* %incdec.ptr109, i8** %p2, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end107
  %81 = load i8*, i8** %p1, align 4
  %82 = load i8, i8* %81, align 1
  %conv110 = sext i8 %82 to i32
  %83 = load i8*, i8** %p2, align 4
  %84 = load i8, i8* %83, align 1
  %conv111 = sext i8 %84 to i32
  %sub112 = sub nsw i32 %conv110, %conv111
  store i32 %sub112, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then91, %if.end82, %if.then77
  %85 = load i32, i32* %retval, align 4
  ret i32 %85
}

; Function Attrs: nounwind readonly
declare i32 @tolower(i32 %0) #1

; Function Attrs: nounwind readonly
declare i32 @isdigit(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @maxstrlen(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %la = alloca i32, align 4
  %lb = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %call = call i32 @strlen(i8* %0)
  store i32 %call, i32* %la, align 4
  %1 = load i8*, i8** %b.addr, align 4
  %call1 = call i32 @strlen(i8* %1)
  store i32 %call1, i32* %lb, align 4
  %2 = load i32, i32* %la, align 4
  %3 = load i32, i32* %lb, align 4
  %cmp = icmp sgt i32 %2, %3
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %4 = load i32, i32* %la, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  %5 = load i32, i32* %lb, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %4, %cond.true ], [ %5, %cond.false ]
  ret i32 %cond
}

declare i32 @strlen(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %toBsorted = alloca [11 x %struct.twoStringsStruct], align 16
  %k = alloca i32, align 4
  %maxlens = alloca [11 x i32], align 16
  %format = alloca [12 x i8], align 1
  %cp = alloca %struct.twoStringsStruct*, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [11 x %struct.twoStringsStruct]* %toBsorted to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([11 x %struct.twoStringsStruct]* @__const.main.toBsorted to i8*), i32 88, i1 false)
  %arraydecay = getelementptr inbounds [11 x %struct.twoStringsStruct], [11 x %struct.twoStringsStruct]* %toBsorted, i32 0, i32 0
  %1 = bitcast %struct.twoStringsStruct* %arraydecay to i8*
  call void @qsort(i8* %1, i32 11, i32 8, i32 (i8*, i8*)* bitcast (i32 (%struct.twoStringsStruct*, %struct.twoStringsStruct*)* @cmprStrgs to i32 (i8*, i8*)*))
  store i32 0, i32* %k, align 4
  %arraydecay1 = getelementptr inbounds [11 x %struct.twoStringsStruct], [11 x %struct.twoStringsStruct]* %toBsorted, i32 0, i32 0
  store %struct.twoStringsStruct* %arraydecay1, %struct.twoStringsStruct** %cp, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %k, align 4
  %cmp = icmp ult i32 %2, 11
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.twoStringsStruct*, %struct.twoStringsStruct** %cp, align 4
  %key = getelementptr inbounds %struct.twoStringsStruct, %struct.twoStringsStruct* %3, i32 0, i32 0
  %4 = load i8*, i8** %key, align 4
  %5 = load %struct.twoStringsStruct*, %struct.twoStringsStruct** %cp, align 4
  %value = getelementptr inbounds %struct.twoStringsStruct, %struct.twoStringsStruct* %5, i32 0, i32 1
  %6 = load i8*, i8** %value, align 4
  %call = call i32 @maxstrlen(i8* %4, i8* %6)
  %7 = load i32, i32* %k, align 4
  %arrayidx = getelementptr inbounds [11 x i32], [11 x i32]* %maxlens, i32 0, i32 %7
  store i32 %call, i32* %arrayidx, align 4
  %arraydecay2 = getelementptr inbounds [12 x i8], [12 x i8]* %format, i32 0, i32 0
  %8 = load i32, i32* %k, align 4
  %arrayidx3 = getelementptr inbounds [11 x i32], [11 x i32]* %maxlens, i32 0, i32 %8
  %9 = load i32, i32* %arrayidx3, align 4
  %call4 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay2, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.23, i32 0, i32 0), i32 %9)
  %arraydecay5 = getelementptr inbounds [12 x i8], [12 x i8]* %format, i32 0, i32 0
  %10 = load i32, i32* %k, align 4
  %arrayidx6 = getelementptr inbounds [11 x %struct.twoStringsStruct], [11 x %struct.twoStringsStruct]* %toBsorted, i32 0, i32 %10
  %value7 = getelementptr inbounds %struct.twoStringsStruct, %struct.twoStringsStruct* %arrayidx6, i32 0, i32 1
  %11 = load i8*, i8** %value7, align 4
  %call8 = call i32 (i8*, ...) @printf(i8* %arraydecay5, i8* %11)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %k, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %k, align 4
  %13 = load %struct.twoStringsStruct*, %struct.twoStringsStruct** %cp, align 4
  %incdec.ptr = getelementptr inbounds %struct.twoStringsStruct, %struct.twoStringsStruct* %13, i32 1
  store %struct.twoStringsStruct* %incdec.ptr, %struct.twoStringsStruct** %cp, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.24, i32 0, i32 0))
  store i32 0, i32* %k, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc20, %for.end
  %14 = load i32, i32* %k, align 4
  %cmp11 = icmp ult i32 %14, 11
  br i1 %cmp11, label %for.body12, label %for.end22

for.body12:                                       ; preds = %for.cond10
  %arraydecay13 = getelementptr inbounds [12 x i8], [12 x i8]* %format, i32 0, i32 0
  %15 = load i32, i32* %k, align 4
  %arrayidx14 = getelementptr inbounds [11 x i32], [11 x i32]* %maxlens, i32 0, i32 %15
  %16 = load i32, i32* %arrayidx14, align 4
  %call15 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay13, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.23, i32 0, i32 0), i32 %16)
  %arraydecay16 = getelementptr inbounds [12 x i8], [12 x i8]* %format, i32 0, i32 0
  %17 = load i32, i32* %k, align 4
  %arrayidx17 = getelementptr inbounds [11 x %struct.twoStringsStruct], [11 x %struct.twoStringsStruct]* %toBsorted, i32 0, i32 %17
  %key18 = getelementptr inbounds %struct.twoStringsStruct, %struct.twoStringsStruct* %arrayidx17, i32 0, i32 0
  %18 = load i8*, i8** %key18, align 8
  %call19 = call i32 (i8*, ...) @printf(i8* %arraydecay16, i8* %18)
  br label %for.inc20

for.inc20:                                        ; preds = %for.body12
  %19 = load i32, i32* %k, align 4
  %inc21 = add nsw i32 %19, 1
  store i32 %inc21, i32* %k, align 4
  br label %for.cond10

for.end22:                                        ; preds = %for.cond10
  %call23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.24, i32 0, i32 0))
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #2

declare i32 @sprintf(i8* %0, i8* %1, ...) #2

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ult i32 %2, 11
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ult %0, 11:i32
infer %1

; *****
; For LLVM instruction:
;  %call = call i32 @maxstrlen(i8* %4, i8* %6)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %arrayidx3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %12, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp11 = icmp ult i32 %14, 11
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ult %0, 11:i32
infer %1

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %arrayidx14, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc21 = add nsw i32 %19, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ult %0, 11:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
