
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for lis()

; ModuleID = './Longest_increasing_subsequence.c.bc'
source_filename = "./Longest_increasing_subsequence.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.node = type { i32, i32, %struct.node* }

@.str = private unnamed_addr constant [4 x i8] c" %d\00", align 1
@__const.main.x = private unnamed_addr constant [6 x i32] [i32 3, i32 2, i32 6, i32 4, i32 5, i32 1], align 16
@__const.main.y = private unnamed_addr constant [16 x i32] [i32 0, i32 8, i32 4, i32 12, i32 2, i32 10, i32 6, i32 14, i32 1, i32 9, i32 5, i32 13, i32 3, i32 11, i32 7, i32 15], align 16
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @lis(i32* %v, i32 %len) #0 {
entry:
  %v.addr = alloca i32*, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %p = alloca %struct.node*, align 4
  %n = alloca %struct.node*, align 4
  store i32* %v, i32** %v.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load i32, i32* %len.addr, align 4
  %call = call noalias i8* @calloc(i32 %0, i32 12)
  %1 = bitcast i8* %call to %struct.node*
  store %struct.node* %1, %struct.node** %n, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32*, i32** %v.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %4, i32 %5
  %6 = load i32, i32* %arrayidx, align 4
  %7 = load %struct.node*, %struct.node** %n, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds %struct.node, %struct.node* %7, i32 %8
  %val = getelementptr inbounds %struct.node, %struct.node* %arrayidx1, i32 0, i32 0
  store i32 %6, i32* %val, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load i32, i32* %len.addr, align 4
  store i32 %10, i32* %i, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.end20, %for.end
  %11 = load i32, i32* %i, align 4
  %dec = add nsw i32 %11, -1
  store i32 %dec, i32* %i, align 4
  %tobool = icmp ne i32 %11, 0
  br i1 %tobool, label %for.body3, label %for.end21

for.body3:                                        ; preds = %for.cond2
  %12 = load %struct.node*, %struct.node** %n, align 4
  %13 = load i32, i32* %i, align 4
  %add.ptr = getelementptr inbounds %struct.node, %struct.node* %12, i32 %13
  store %struct.node* %add.ptr, %struct.node** %p, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %if.end, %for.body3
  %14 = load %struct.node*, %struct.node** %p, align 4
  %incdec.ptr = getelementptr inbounds %struct.node, %struct.node* %14, i32 1
  store %struct.node* %incdec.ptr, %struct.node** %p, align 4
  %15 = load %struct.node*, %struct.node** %n, align 4
  %16 = load i32, i32* %len.addr, align 4
  %add.ptr5 = getelementptr inbounds %struct.node, %struct.node* %15, i32 %16
  %cmp6 = icmp ult %struct.node* %14, %add.ptr5
  br i1 %cmp6, label %for.body7, label %for.end20

for.body7:                                        ; preds = %for.cond4
  %17 = load %struct.node*, %struct.node** %p, align 4
  %val8 = getelementptr inbounds %struct.node, %struct.node* %17, i32 0, i32 0
  %18 = load i32, i32* %val8, align 4
  %19 = load %struct.node*, %struct.node** %n, align 4
  %20 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds %struct.node, %struct.node* %19, i32 %20
  %val10 = getelementptr inbounds %struct.node, %struct.node* %arrayidx9, i32 0, i32 0
  %21 = load i32, i32* %val10, align 4
  %cmp11 = icmp sgt i32 %18, %21
  br i1 %cmp11, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body7
  %22 = load %struct.node*, %struct.node** %p, align 4
  %len12 = getelementptr inbounds %struct.node, %struct.node* %22, i32 0, i32 1
  %23 = load i32, i32* %len12, align 4
  %24 = load %struct.node*, %struct.node** %n, align 4
  %25 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds %struct.node, %struct.node* %24, i32 %25
  %len14 = getelementptr inbounds %struct.node, %struct.node* %arrayidx13, i32 0, i32 1
  %26 = load i32, i32* %len14, align 4
  %cmp15 = icmp sge i32 %23, %26
  br i1 %cmp15, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %27 = load %struct.node*, %struct.node** %p, align 4
  %28 = load %struct.node*, %struct.node** %n, align 4
  %29 = load i32, i32* %i, align 4
  %arrayidx16 = getelementptr inbounds %struct.node, %struct.node* %28, i32 %29
  %next = getelementptr inbounds %struct.node, %struct.node* %arrayidx16, i32 0, i32 2
  store %struct.node* %27, %struct.node** %next, align 4
  %30 = load %struct.node*, %struct.node** %p, align 4
  %len17 = getelementptr inbounds %struct.node, %struct.node* %30, i32 0, i32 1
  %31 = load i32, i32* %len17, align 4
  %add = add nsw i32 %31, 1
  %32 = load %struct.node*, %struct.node** %n, align 4
  %33 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds %struct.node, %struct.node* %32, i32 %33
  %len19 = getelementptr inbounds %struct.node, %struct.node* %arrayidx18, i32 0, i32 1
  store i32 %add, i32* %len19, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body7
  br label %for.cond4

for.end20:                                        ; preds = %for.cond4
  br label %for.cond2

for.end21:                                        ; preds = %for.cond2
  store i32 0, i32* %i, align 4
  %34 = load %struct.node*, %struct.node** %n, align 4
  store %struct.node* %34, %struct.node** %p, align 4
  br label %for.cond22

for.cond22:                                       ; preds = %for.inc32, %for.end21
  %35 = load i32, i32* %i, align 4
  %36 = load i32, i32* %len.addr, align 4
  %cmp23 = icmp slt i32 %35, %36
  br i1 %cmp23, label %for.body24, label %for.end34

for.body24:                                       ; preds = %for.cond22
  %37 = load %struct.node*, %struct.node** %n, align 4
  %38 = load i32, i32* %i, align 4
  %arrayidx25 = getelementptr inbounds %struct.node, %struct.node* %37, i32 %38
  %len26 = getelementptr inbounds %struct.node, %struct.node* %arrayidx25, i32 0, i32 1
  %39 = load i32, i32* %len26, align 4
  %40 = load %struct.node*, %struct.node** %p, align 4
  %len27 = getelementptr inbounds %struct.node, %struct.node* %40, i32 0, i32 1
  %41 = load i32, i32* %len27, align 4
  %cmp28 = icmp sgt i32 %39, %41
  br i1 %cmp28, label %if.then29, label %if.end31

if.then29:                                        ; preds = %for.body24
  %42 = load %struct.node*, %struct.node** %n, align 4
  %43 = load i32, i32* %i, align 4
  %add.ptr30 = getelementptr inbounds %struct.node, %struct.node* %42, i32 %43
  store %struct.node* %add.ptr30, %struct.node** %p, align 4
  br label %if.end31

if.end31:                                         ; preds = %if.then29, %for.body24
  br label %for.inc32

for.inc32:                                        ; preds = %if.end31
  %44 = load i32, i32* %i, align 4
  %inc33 = add nsw i32 %44, 1
  store i32 %inc33, i32* %i, align 4
  br label %for.cond22

for.end34:                                        ; preds = %for.cond22
  br label %do.body

do.body:                                          ; preds = %do.cond, %for.end34
  %45 = load %struct.node*, %struct.node** %p, align 4
  %val35 = getelementptr inbounds %struct.node, %struct.node* %45, i32 0, i32 0
  %46 = load i32, i32* %val35, align 4
  %call36 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %46)
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %47 = load %struct.node*, %struct.node** %p, align 4
  %next37 = getelementptr inbounds %struct.node, %struct.node* %47, i32 0, i32 2
  %48 = load %struct.node*, %struct.node** %next37, align 4
  store %struct.node* %48, %struct.node** %p, align 4
  %tobool38 = icmp ne %struct.node* %48, null
  br i1 %tobool38, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %call39 = call i32 @putchar(i32 10)
  %49 = load %struct.node*, %struct.node** %n, align 4
  %50 = bitcast %struct.node* %49 to i8*
  call void @free(i8* %50)
  ret void
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

declare i32 @printf(i8* %0, ...) #1

declare i32 @putchar(i32 %0) #1

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %x = alloca [6 x i32], align 16
  %y = alloca [16 x i32], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [6 x i32]* %x to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([6 x i32]* @__const.main.x to i8*), i32 24, i1 false)
  %1 = bitcast [16 x i32]* %y to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %1, i8* align 16 bitcast ([16 x i32]* @__const.main.y to i8*), i32 64, i1 false)
  %arraydecay = getelementptr inbounds [6 x i32], [6 x i32]* %x, i32 0, i32 0
  call void @lis(i32* %arraydecay, i32 6)
  %arraydecay1 = getelementptr inbounds [16 x i32], [16 x i32]* %y, i32 0, i32 0
  call void @lis(i32* %arraydecay1, i32 16)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %2, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %9, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec = add nsw i32 %11, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %11, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp6 = icmp ult %struct.node* %14, %add.ptr5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %val8, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %val10, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp11 = icmp sgt i32 %18, %21
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %len12, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %len14, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp15 = icmp sge i32 %23, %26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %len17, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %31, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp23 = icmp slt i32 %35, %36
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %38 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %len26, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %41 = load i32, i32* %len27, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp28 = icmp sgt i32 %39, %41
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %43 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %44 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc33 = add nsw i32 %44, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %46 = load i32, i32* %val35, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool38 = icmp ne %struct.node* %48, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for lis()

; entering Souper's runOnFunction() for main()

; ModuleID = './Longest_increasing_subsequence.c.bc'
source_filename = "./Longest_increasing_subsequence.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.node = type { i32, i32, %struct.node* }

@.str = private unnamed_addr constant [4 x i8] c" %d\00", align 1
@__const.main.x = private unnamed_addr constant [6 x i32] [i32 3, i32 2, i32 6, i32 4, i32 5, i32 1], align 16
@__const.main.y = private unnamed_addr constant [16 x i32] [i32 0, i32 8, i32 4, i32 12, i32 2, i32 10, i32 6, i32 14, i32 1, i32 9, i32 5, i32 13, i32 3, i32 11, i32 7, i32 15], align 16
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @lis(i32* %v, i32 %len) #0 {
entry:
  %v.addr = alloca i32*, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %p = alloca %struct.node*, align 4
  %n = alloca %struct.node*, align 4
  store i32* %v, i32** %v.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load i32, i32* %len.addr, align 4
  %call = call noalias i8* @calloc(i32 %0, i32 12)
  %1 = bitcast i8* %call to %struct.node*
  store %struct.node* %1, %struct.node** %n, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32*, i32** %v.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %4, i32 %5
  %6 = load i32, i32* %arrayidx, align 4
  %7 = load %struct.node*, %struct.node** %n, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds %struct.node, %struct.node* %7, i32 %8
  %val = getelementptr inbounds %struct.node, %struct.node* %arrayidx1, i32 0, i32 0
  store i32 %6, i32* %val, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load i32, i32* %len.addr, align 4
  store i32 %10, i32* %i, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.end20, %for.end
  %11 = load i32, i32* %i, align 4
  %dec = add nsw i32 %11, -1
  store i32 %dec, i32* %i, align 4
  %tobool = icmp ne i32 %11, 0
  br i1 %tobool, label %for.body3, label %for.end21

for.body3:                                        ; preds = %for.cond2
  %12 = load %struct.node*, %struct.node** %n, align 4
  %13 = load i32, i32* %i, align 4
  %add.ptr = getelementptr inbounds %struct.node, %struct.node* %12, i32 %13
  store %struct.node* %add.ptr, %struct.node** %p, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %if.end, %for.body3
  %14 = load %struct.node*, %struct.node** %p, align 4
  %incdec.ptr = getelementptr inbounds %struct.node, %struct.node* %14, i32 1
  store %struct.node* %incdec.ptr, %struct.node** %p, align 4
  %15 = load %struct.node*, %struct.node** %n, align 4
  %16 = load i32, i32* %len.addr, align 4
  %add.ptr5 = getelementptr inbounds %struct.node, %struct.node* %15, i32 %16
  %cmp6 = icmp ult %struct.node* %14, %add.ptr5
  br i1 %cmp6, label %for.body7, label %for.end20

for.body7:                                        ; preds = %for.cond4
  %17 = load %struct.node*, %struct.node** %p, align 4
  %val8 = getelementptr inbounds %struct.node, %struct.node* %17, i32 0, i32 0
  %18 = load i32, i32* %val8, align 4
  %19 = load %struct.node*, %struct.node** %n, align 4
  %20 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds %struct.node, %struct.node* %19, i32 %20
  %val10 = getelementptr inbounds %struct.node, %struct.node* %arrayidx9, i32 0, i32 0
  %21 = load i32, i32* %val10, align 4
  %cmp11 = icmp sgt i32 %18, %21
  br i1 %cmp11, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body7
  %22 = load %struct.node*, %struct.node** %p, align 4
  %len12 = getelementptr inbounds %struct.node, %struct.node* %22, i32 0, i32 1
  %23 = load i32, i32* %len12, align 4
  %24 = load %struct.node*, %struct.node** %n, align 4
  %25 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds %struct.node, %struct.node* %24, i32 %25
  %len14 = getelementptr inbounds %struct.node, %struct.node* %arrayidx13, i32 0, i32 1
  %26 = load i32, i32* %len14, align 4
  %cmp15 = icmp sge i32 %23, %26
  br i1 %cmp15, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %27 = load %struct.node*, %struct.node** %p, align 4
  %28 = load %struct.node*, %struct.node** %n, align 4
  %29 = load i32, i32* %i, align 4
  %arrayidx16 = getelementptr inbounds %struct.node, %struct.node* %28, i32 %29
  %next = getelementptr inbounds %struct.node, %struct.node* %arrayidx16, i32 0, i32 2
  store %struct.node* %27, %struct.node** %next, align 4
  %30 = load %struct.node*, %struct.node** %p, align 4
  %len17 = getelementptr inbounds %struct.node, %struct.node* %30, i32 0, i32 1
  %31 = load i32, i32* %len17, align 4
  %add = add nsw i32 %31, 1
  %32 = load %struct.node*, %struct.node** %n, align 4
  %33 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds %struct.node, %struct.node* %32, i32 %33
  %len19 = getelementptr inbounds %struct.node, %struct.node* %arrayidx18, i32 0, i32 1
  store i32 %add, i32* %len19, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body7
  br label %for.cond4

for.end20:                                        ; preds = %for.cond4
  br label %for.cond2

for.end21:                                        ; preds = %for.cond2
  store i32 0, i32* %i, align 4
  %34 = load %struct.node*, %struct.node** %n, align 4
  store %struct.node* %34, %struct.node** %p, align 4
  br label %for.cond22

for.cond22:                                       ; preds = %for.inc32, %for.end21
  %35 = load i32, i32* %i, align 4
  %36 = load i32, i32* %len.addr, align 4
  %cmp23 = icmp slt i32 %35, %36
  br i1 %cmp23, label %for.body24, label %for.end34

for.body24:                                       ; preds = %for.cond22
  %37 = load %struct.node*, %struct.node** %n, align 4
  %38 = load i32, i32* %i, align 4
  %arrayidx25 = getelementptr inbounds %struct.node, %struct.node* %37, i32 %38
  %len26 = getelementptr inbounds %struct.node, %struct.node* %arrayidx25, i32 0, i32 1
  %39 = load i32, i32* %len26, align 4
  %40 = load %struct.node*, %struct.node** %p, align 4
  %len27 = getelementptr inbounds %struct.node, %struct.node* %40, i32 0, i32 1
  %41 = load i32, i32* %len27, align 4
  %cmp28 = icmp sgt i32 %39, %41
  br i1 %cmp28, label %if.then29, label %if.end31

if.then29:                                        ; preds = %for.body24
  %42 = load %struct.node*, %struct.node** %n, align 4
  %43 = load i32, i32* %i, align 4
  %add.ptr30 = getelementptr inbounds %struct.node, %struct.node* %42, i32 %43
  store %struct.node* %add.ptr30, %struct.node** %p, align 4
  br label %if.end31

if.end31:                                         ; preds = %if.then29, %for.body24
  br label %for.inc32

for.inc32:                                        ; preds = %if.end31
  %44 = load i32, i32* %i, align 4
  %inc33 = add nsw i32 %44, 1
  store i32 %inc33, i32* %i, align 4
  br label %for.cond22

for.end34:                                        ; preds = %for.cond22
  br label %do.body

do.body:                                          ; preds = %do.cond, %for.end34
  %45 = load %struct.node*, %struct.node** %p, align 4
  %val35 = getelementptr inbounds %struct.node, %struct.node* %45, i32 0, i32 0
  %46 = load i32, i32* %val35, align 4
  %call36 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %46)
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %47 = load %struct.node*, %struct.node** %p, align 4
  %next37 = getelementptr inbounds %struct.node, %struct.node* %47, i32 0, i32 2
  %48 = load %struct.node*, %struct.node** %next37, align 4
  store %struct.node* %48, %struct.node** %p, align 4
  %tobool38 = icmp ne %struct.node* %48, null
  br i1 %tobool38, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %call39 = call i32 @putchar(i32 10)
  %49 = load %struct.node*, %struct.node** %n, align 4
  %50 = bitcast %struct.node* %49 to i8*
  call void @free(i8* %50)
  ret void
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

declare i32 @printf(i8* %0, ...) #1

declare i32 @putchar(i32 %0) #1

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %x = alloca [6 x i32], align 16
  %y = alloca [16 x i32], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [6 x i32]* %x to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([6 x i32]* @__const.main.x to i8*), i32 24, i1 false)
  %1 = bitcast [16 x i32]* %y to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %1, i8* align 16 bitcast ([16 x i32]* @__const.main.y to i8*), i32 64, i1 false)
  %arraydecay = getelementptr inbounds [6 x i32], [6 x i32]* %x, i32 0, i32 0
  call void @lis(i32* %arraydecay, i32 6)
  %arraydecay1 = getelementptr inbounds [16 x i32], [16 x i32]* %y, i32 0, i32 0
  call void @lis(i32* %arraydecay1, i32 16)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
