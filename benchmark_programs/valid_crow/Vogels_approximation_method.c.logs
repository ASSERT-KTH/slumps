
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for diff()

; ModuleID = './Vogels_approximation_method.c.bc'
source_filename = "./Vogels_approximation_method.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@supply = hidden global [4 x i32] [i32 50, i32 60, i32 50, i32 50], align 16
@demand = hidden global [5 x i32] [i32 30, i32 20, i32 70, i32 30, i32 60], align 16
@costs = hidden global [4 x [5 x i32]] [[5 x i32] [i32 16, i32 16, i32 13, i32 22, i32 17], [5 x i32] [i32 14, i32 14, i32 13, i32 19, i32 15], [5 x i32] [i32 19, i32 19, i32 20, i32 23, i32 50], [5 x i32] [i32 50, i32 12, i32 50, i32 15, i32 11]], align 16
@row_done = hidden global [4 x i32] zeroinitializer, align 16
@col_done = hidden global [5 x i32] zeroinitializer, align 16
@.str = private unnamed_addr constant [23 x i8] c"    A   B   C   D   E\0A\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%c\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"  %2d\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.4 = private unnamed_addr constant [18 x i8] c"\0ATotal cost = %d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @diff(i32 %j, i32 %len, i32 %is_row, i32* %res) #0 {
entry:
  %j.addr = alloca i32, align 4
  %len.addr = alloca i32, align 4
  %is_row.addr = alloca i32, align 4
  %res.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  %c = alloca i32, align 4
  %min1 = alloca i32, align 4
  %min2 = alloca i32, align 4
  %min_p = alloca i32, align 4
  store i32 %j, i32* %j.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %is_row, i32* %is_row.addr, align 4
  store i32* %res, i32** %res.addr, align 4
  store i32 2147483647, i32* %min1, align 4
  %0 = load i32, i32* %min1, align 4
  store i32 %0, i32* %min2, align 4
  store i32 -1, i32* %min_p, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %is_row.addr, align 4
  %tobool = icmp ne i32 %3, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [5 x i32], [5 x i32]* @col_done, i32 0, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  %tobool1 = icmp ne i32 %5, 0
  br i1 %tobool1, label %if.then, label %if.end

cond.false:                                       ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds [4 x i32], [4 x i32]* @row_done, i32 0, i32 %6
  %7 = load i32, i32* %arrayidx2, align 4
  %tobool3 = icmp ne i32 %7, 0
  br i1 %tobool3, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  br label %for.inc

if.end:                                           ; preds = %cond.false, %cond.true
  %8 = load i32, i32* %is_row.addr, align 4
  %tobool4 = icmp ne i32 %8, 0
  br i1 %tobool4, label %cond.true5, label %cond.false8

cond.true5:                                       ; preds = %if.end
  %9 = load i32, i32* %j.addr, align 4
  %arrayidx6 = getelementptr inbounds [4 x [5 x i32]], [4 x [5 x i32]]* @costs, i32 0, i32 %9
  %10 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx6, i32 0, i32 %10
  %11 = load i32, i32* %arrayidx7, align 4
  br label %cond.end

cond.false8:                                      ; preds = %if.end
  %12 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds [4 x [5 x i32]], [4 x [5 x i32]]* @costs, i32 0, i32 %12
  %13 = load i32, i32* %j.addr, align 4
  %arrayidx10 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx9, i32 0, i32 %13
  %14 = load i32, i32* %arrayidx10, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false8, %cond.true5
  %cond = phi i32 [ %11, %cond.true5 ], [ %14, %cond.false8 ]
  store i32 %cond, i32* %c, align 4
  %15 = load i32, i32* %c, align 4
  %16 = load i32, i32* %min1, align 4
  %cmp11 = icmp slt i32 %15, %16
  br i1 %cmp11, label %if.then12, label %if.else

if.then12:                                        ; preds = %cond.end
  %17 = load i32, i32* %min1, align 4
  store i32 %17, i32* %min2, align 4
  %18 = load i32, i32* %c, align 4
  store i32 %18, i32* %min1, align 4
  %19 = load i32, i32* %i, align 4
  store i32 %19, i32* %min_p, align 4
  br label %if.end16

if.else:                                          ; preds = %cond.end
  %20 = load i32, i32* %c, align 4
  %21 = load i32, i32* %min2, align 4
  %cmp13 = icmp slt i32 %20, %21
  br i1 %cmp13, label %if.then14, label %if.end15

if.then14:                                        ; preds = %if.else
  %22 = load i32, i32* %c, align 4
  store i32 %22, i32* %min2, align 4
  br label %if.end15

if.end15:                                         ; preds = %if.then14, %if.else
  br label %if.end16

if.end16:                                         ; preds = %if.end15, %if.then12
  br label %for.inc

for.inc:                                          ; preds = %if.end16, %if.then
  %23 = load i32, i32* %i, align 4
  %inc = add nsw i32 %23, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %24 = load i32, i32* %min2, align 4
  %25 = load i32, i32* %min1, align 4
  %sub = sub nsw i32 %24, %25
  %26 = load i32*, i32** %res.addr, align 4
  %arrayidx17 = getelementptr inbounds i32, i32* %26, i32 0
  store i32 %sub, i32* %arrayidx17, align 4
  %27 = load i32, i32* %min1, align 4
  %28 = load i32*, i32** %res.addr, align 4
  %arrayidx18 = getelementptr inbounds i32, i32* %28, i32 1
  store i32 %27, i32* %arrayidx18, align 4
  %29 = load i32, i32* %min_p, align 4
  %30 = load i32*, i32** %res.addr, align 4
  %arrayidx19 = getelementptr inbounds i32, i32* %30, i32 2
  store i32 %29, i32* %arrayidx19, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @max_penalty(i32 %len1, i32 %len2, i32 %is_row, i32* %res) #0 {
entry:
  %len1.addr = alloca i32, align 4
  %len2.addr = alloca i32, align 4
  %is_row.addr = alloca i32, align 4
  %res.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  %pc = alloca i32, align 4
  %pm = alloca i32, align 4
  %mc = alloca i32, align 4
  %md = alloca i32, align 4
  %res2 = alloca [3 x i32], align 4
  store i32 %len1, i32* %len1.addr, align 4
  store i32 %len2, i32* %len2.addr, align 4
  store i32 %is_row, i32* %is_row.addr, align 4
  store i32* %res, i32** %res.addr, align 4
  store i32 -1, i32* %pc, align 4
  store i32 -1, i32* %pm, align 4
  store i32 -1, i32* %mc, align 4
  store i32 -2147483648, i32* %md, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %len1.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %is_row.addr, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* @row_done, i32 0, i32 %3
  %4 = load i32, i32* %arrayidx, align 4
  %tobool1 = icmp ne i32 %4, 0
  br i1 %tobool1, label %if.then, label %if.end

cond.false:                                       ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds [5 x i32], [5 x i32]* @col_done, i32 0, i32 %5
  %6 = load i32, i32* %arrayidx2, align 4
  %tobool3 = icmp ne i32 %6, 0
  br i1 %tobool3, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  br label %for.inc

if.end:                                           ; preds = %cond.false, %cond.true
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %len2.addr, align 4
  %9 = load i32, i32* %is_row.addr, align 4
  %arraydecay = getelementptr inbounds [3 x i32], [3 x i32]* %res2, i32 0, i32 0
  call void @diff(i32 %7, i32 %8, i32 %9, i32* %arraydecay)
  %arrayidx4 = getelementptr inbounds [3 x i32], [3 x i32]* %res2, i32 0, i32 0
  %10 = load i32, i32* %arrayidx4, align 4
  %11 = load i32, i32* %md, align 4
  %cmp5 = icmp sgt i32 %10, %11
  br i1 %cmp5, label %if.then6, label %if.end10

if.then6:                                         ; preds = %if.end
  %arrayidx7 = getelementptr inbounds [3 x i32], [3 x i32]* %res2, i32 0, i32 0
  %12 = load i32, i32* %arrayidx7, align 4
  store i32 %12, i32* %md, align 4
  %13 = load i32, i32* %i, align 4
  store i32 %13, i32* %pm, align 4
  %arrayidx8 = getelementptr inbounds [3 x i32], [3 x i32]* %res2, i32 0, i32 1
  %14 = load i32, i32* %arrayidx8, align 4
  store i32 %14, i32* %mc, align 4
  %arrayidx9 = getelementptr inbounds [3 x i32], [3 x i32]* %res2, i32 0, i32 2
  %15 = load i32, i32* %arrayidx9, align 4
  store i32 %15, i32* %pc, align 4
  br label %if.end10

if.end10:                                         ; preds = %if.then6, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end10, %if.then
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load i32, i32* %is_row.addr, align 4
  %tobool11 = icmp ne i32 %17, 0
  br i1 %tobool11, label %if.then12, label %if.else

if.then12:                                        ; preds = %for.end
  %18 = load i32, i32* %pm, align 4
  %19 = load i32*, i32** %res.addr, align 4
  %arrayidx13 = getelementptr inbounds i32, i32* %19, i32 0
  store i32 %18, i32* %arrayidx13, align 4
  %20 = load i32, i32* %pc, align 4
  %21 = load i32*, i32** %res.addr, align 4
  %arrayidx14 = getelementptr inbounds i32, i32* %21, i32 1
  store i32 %20, i32* %arrayidx14, align 4
  br label %if.end17

if.else:                                          ; preds = %for.end
  %22 = load i32, i32* %pc, align 4
  %23 = load i32*, i32** %res.addr, align 4
  %arrayidx15 = getelementptr inbounds i32, i32* %23, i32 0
  store i32 %22, i32* %arrayidx15, align 4
  %24 = load i32, i32* %pm, align 4
  %25 = load i32*, i32** %res.addr, align 4
  %arrayidx16 = getelementptr inbounds i32, i32* %25, i32 1
  store i32 %24, i32* %arrayidx16, align 4
  br label %if.end17

if.end17:                                         ; preds = %if.else, %if.then12
  %26 = load i32, i32* %mc, align 4
  %27 = load i32*, i32** %res.addr, align 4
  %arrayidx18 = getelementptr inbounds i32, i32* %27, i32 2
  store i32 %26, i32* %arrayidx18, align 4
  %28 = load i32, i32* %md, align 4
  %29 = load i32*, i32** %res.addr, align 4
  %arrayidx19 = getelementptr inbounds i32, i32* %29, i32 3
  store i32 %28, i32* %arrayidx19, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @next_cell(i32* %res) #0 {
entry:
  %res.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  %res1 = alloca [4 x i32], align 16
  %res2 = alloca [4 x i32], align 16
  store i32* %res, i32** %res.addr, align 4
  %arraydecay = getelementptr inbounds [4 x i32], [4 x i32]* %res1, i32 0, i32 0
  call void @max_penalty(i32 4, i32 5, i32 1, i32* %arraydecay)
  %arraydecay1 = getelementptr inbounds [4 x i32], [4 x i32]* %res2, i32 0, i32 0
  call void @max_penalty(i32 5, i32 4, i32 0, i32* %arraydecay1)
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* %res1, i32 0, i32 3
  %0 = load i32, i32* %arrayidx, align 4
  %arrayidx2 = getelementptr inbounds [4 x i32], [4 x i32]* %res2, i32 0, i32 3
  %1 = load i32, i32* %arrayidx2, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end18

if.then:                                          ; preds = %entry
  %arrayidx3 = getelementptr inbounds [4 x i32], [4 x i32]* %res1, i32 0, i32 2
  %2 = load i32, i32* %arrayidx3, align 8
  %arrayidx4 = getelementptr inbounds [4 x i32], [4 x i32]* %res2, i32 0, i32 2
  %3 = load i32, i32* %arrayidx4, align 8
  %cmp5 = icmp slt i32 %2, %3
  br i1 %cmp5, label %if.then6, label %if.else

if.then6:                                         ; preds = %if.then
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then6
  %4 = load i32, i32* %i, align 4
  %cmp7 = icmp slt i32 %4, 4
  br i1 %cmp7, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds [4 x i32], [4 x i32]* %res1, i32 0, i32 %5
  %6 = load i32, i32* %arrayidx8, align 4
  %7 = load i32*, i32** %res.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds i32, i32* %7, i32 %8
  store i32 %6, i32* %arrayidx9, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.else:                                          ; preds = %if.then
  store i32 0, i32* %i, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc15, %if.else
  %10 = load i32, i32* %i, align 4
  %cmp11 = icmp slt i32 %10, 4
  br i1 %cmp11, label %for.body12, label %for.end17

for.body12:                                       ; preds = %for.cond10
  %11 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds [4 x i32], [4 x i32]* %res2, i32 0, i32 %11
  %12 = load i32, i32* %arrayidx13, align 4
  %13 = load i32*, i32** %res.addr, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds i32, i32* %13, i32 %14
  store i32 %12, i32* %arrayidx14, align 4
  br label %for.inc15

for.inc15:                                        ; preds = %for.body12
  %15 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %15, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond10

for.end17:                                        ; preds = %for.cond10
  br label %if.end

if.end:                                           ; preds = %for.end17, %for.end
  br label %if.end40

if.end18:                                         ; preds = %entry
  %arrayidx19 = getelementptr inbounds [4 x i32], [4 x i32]* %res1, i32 0, i32 3
  %16 = load i32, i32* %arrayidx19, align 4
  %arrayidx20 = getelementptr inbounds [4 x i32], [4 x i32]* %res2, i32 0, i32 3
  %17 = load i32, i32* %arrayidx20, align 4
  %cmp21 = icmp sgt i32 %16, %17
  br i1 %cmp21, label %if.then22, label %if.else31

if.then22:                                        ; preds = %if.end18
  store i32 0, i32* %i, align 4
  br label %for.cond23

for.cond23:                                       ; preds = %for.inc28, %if.then22
  %18 = load i32, i32* %i, align 4
  %cmp24 = icmp slt i32 %18, 4
  br i1 %cmp24, label %for.body25, label %for.end30

for.body25:                                       ; preds = %for.cond23
  %19 = load i32, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds [4 x i32], [4 x i32]* %res2, i32 0, i32 %19
  %20 = load i32, i32* %arrayidx26, align 4
  %21 = load i32*, i32** %res.addr, align 4
  %22 = load i32, i32* %i, align 4
  %arrayidx27 = getelementptr inbounds i32, i32* %21, i32 %22
  store i32 %20, i32* %arrayidx27, align 4
  br label %for.inc28

for.inc28:                                        ; preds = %for.body25
  %23 = load i32, i32* %i, align 4
  %inc29 = add nsw i32 %23, 1
  store i32 %inc29, i32* %i, align 4
  br label %for.cond23

for.end30:                                        ; preds = %for.cond23
  br label %if.end40

if.else31:                                        ; preds = %if.end18
  store i32 0, i32* %i, align 4
  br label %for.cond32

for.cond32:                                       ; preds = %for.inc37, %if.else31
  %24 = load i32, i32* %i, align 4
  %cmp33 = icmp slt i32 %24, 4
  br i1 %cmp33, label %for.body34, label %for.end39

for.body34:                                       ; preds = %for.cond32
  %25 = load i32, i32* %i, align 4
  %arrayidx35 = getelementptr inbounds [4 x i32], [4 x i32]* %res1, i32 0, i32 %25
  %26 = load i32, i32* %arrayidx35, align 4
  %27 = load i32*, i32** %res.addr, align 4
  %28 = load i32, i32* %i, align 4
  %arrayidx36 = getelementptr inbounds i32, i32* %27, i32 %28
  store i32 %26, i32* %arrayidx36, align 4
  br label %for.inc37

for.inc37:                                        ; preds = %for.body34
  %29 = load i32, i32* %i, align 4
  %inc38 = add nsw i32 %29, 1
  store i32 %inc38, i32* %i, align 4
  br label %for.cond32

for.end39:                                        ; preds = %for.cond32
  br label %if.end40

if.end40:                                         ; preds = %if.end, %for.end39, %for.end30
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %r = alloca i32, align 4
  %c = alloca i32, align 4
  %q = alloca i32, align 4
  %supply_left = alloca i32, align 4
  %total_cost = alloca i32, align 4
  %cell = alloca [4 x i32], align 16
  %results = alloca [4 x [5 x i32]], align 16
  store i32 0, i32* %retval, align 4
  store i32 0, i32* %supply_left, align 4
  store i32 0, i32* %total_cost, align 4
  %0 = bitcast [4 x [5 x i32]]* %results to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 80, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %1, 4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* @supply, i32 0, i32 %2
  %3 = load i32, i32* %arrayidx, align 4
  %4 = load i32, i32* %supply_left, align 4
  %add = add nsw i32 %4, %3
  store i32 %add, i32* %supply_left, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %if.end18, %for.end
  %6 = load i32, i32* %supply_left, align 4
  %cmp1 = icmp sgt i32 %6, 0
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %arraydecay = getelementptr inbounds [4 x i32], [4 x i32]* %cell, i32 0, i32 0
  call void @next_cell(i32* %arraydecay)
  %arrayidx2 = getelementptr inbounds [4 x i32], [4 x i32]* %cell, i32 0, i32 0
  %7 = load i32, i32* %arrayidx2, align 16
  store i32 %7, i32* %r, align 4
  %arrayidx3 = getelementptr inbounds [4 x i32], [4 x i32]* %cell, i32 0, i32 1
  %8 = load i32, i32* %arrayidx3, align 4
  store i32 %8, i32* %c, align 4
  %9 = load i32, i32* %c, align 4
  %arrayidx4 = getelementptr inbounds [5 x i32], [5 x i32]* @demand, i32 0, i32 %9
  %10 = load i32, i32* %arrayidx4, align 4
  %11 = load i32, i32* %r, align 4
  %arrayidx5 = getelementptr inbounds [4 x i32], [4 x i32]* @supply, i32 0, i32 %11
  %12 = load i32, i32* %arrayidx5, align 4
  %cmp6 = icmp sle i32 %10, %12
  br i1 %cmp6, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %13 = load i32, i32* %c, align 4
  %arrayidx7 = getelementptr inbounds [5 x i32], [5 x i32]* @demand, i32 0, i32 %13
  %14 = load i32, i32* %arrayidx7, align 4
  br label %cond.end

cond.false:                                       ; preds = %while.body
  %15 = load i32, i32* %r, align 4
  %arrayidx8 = getelementptr inbounds [4 x i32], [4 x i32]* @supply, i32 0, i32 %15
  %16 = load i32, i32* %arrayidx8, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %14, %cond.true ], [ %16, %cond.false ]
  store i32 %cond, i32* %q, align 4
  %17 = load i32, i32* %q, align 4
  %18 = load i32, i32* %c, align 4
  %arrayidx9 = getelementptr inbounds [5 x i32], [5 x i32]* @demand, i32 0, i32 %18
  %19 = load i32, i32* %arrayidx9, align 4
  %sub = sub nsw i32 %19, %17
  store i32 %sub, i32* %arrayidx9, align 4
  %20 = load i32, i32* %c, align 4
  %arrayidx10 = getelementptr inbounds [5 x i32], [5 x i32]* @demand, i32 0, i32 %20
  %21 = load i32, i32* %arrayidx10, align 4
  %tobool = icmp ne i32 %21, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %cond.end
  %22 = load i32, i32* %c, align 4
  %arrayidx11 = getelementptr inbounds [5 x i32], [5 x i32]* @col_done, i32 0, i32 %22
  store i32 1, i32* %arrayidx11, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end
  %23 = load i32, i32* %q, align 4
  %24 = load i32, i32* %r, align 4
  %arrayidx12 = getelementptr inbounds [4 x i32], [4 x i32]* @supply, i32 0, i32 %24
  %25 = load i32, i32* %arrayidx12, align 4
  %sub13 = sub nsw i32 %25, %23
  store i32 %sub13, i32* %arrayidx12, align 4
  %26 = load i32, i32* %r, align 4
  %arrayidx14 = getelementptr inbounds [4 x i32], [4 x i32]* @supply, i32 0, i32 %26
  %27 = load i32, i32* %arrayidx14, align 4
  %tobool15 = icmp ne i32 %27, 0
  br i1 %tobool15, label %if.end18, label %if.then16

if.then16:                                        ; preds = %if.end
  %28 = load i32, i32* %r, align 4
  %arrayidx17 = getelementptr inbounds [4 x i32], [4 x i32]* @row_done, i32 0, i32 %28
  store i32 1, i32* %arrayidx17, align 4
  br label %if.end18

if.end18:                                         ; preds = %if.then16, %if.end
  %29 = load i32, i32* %q, align 4
  %30 = load i32, i32* %r, align 4
  %arrayidx19 = getelementptr inbounds [4 x [5 x i32]], [4 x [5 x i32]]* %results, i32 0, i32 %30
  %31 = load i32, i32* %c, align 4
  %arrayidx20 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx19, i32 0, i32 %31
  store i32 %29, i32* %arrayidx20, align 4
  %32 = load i32, i32* %q, align 4
  %33 = load i32, i32* %supply_left, align 4
  %sub21 = sub nsw i32 %33, %32
  store i32 %sub21, i32* %supply_left, align 4
  %34 = load i32, i32* %q, align 4
  %35 = load i32, i32* %r, align 4
  %arrayidx22 = getelementptr inbounds [4 x [5 x i32]], [4 x [5 x i32]]* @costs, i32 0, i32 %35
  %36 = load i32, i32* %c, align 4
  %arrayidx23 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx22, i32 0, i32 %36
  %37 = load i32, i32* %arrayidx23, align 4
  %mul = mul nsw i32 %34, %37
  %38 = load i32, i32* %total_cost, align 4
  %add24 = add nsw i32 %38, %mul
  store i32 %add24, i32* %total_cost, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond25

for.cond25:                                       ; preds = %for.inc40, %while.end
  %39 = load i32, i32* %i, align 4
  %cmp26 = icmp slt i32 %39, 4
  br i1 %cmp26, label %for.body27, label %for.end42

for.body27:                                       ; preds = %for.cond25
  %40 = load i32, i32* %i, align 4
  %add28 = add nsw i32 87, %40
  %call29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %add28)
  store i32 0, i32* %j, align 4
  br label %for.cond30

for.cond30:                                       ; preds = %for.inc36, %for.body27
  %41 = load i32, i32* %j, align 4
  %cmp31 = icmp slt i32 %41, 5
  br i1 %cmp31, label %for.body32, label %for.end38

for.body32:                                       ; preds = %for.cond30
  %42 = load i32, i32* %i, align 4
  %arrayidx33 = getelementptr inbounds [4 x [5 x i32]], [4 x [5 x i32]]* %results, i32 0, i32 %42
  %43 = load i32, i32* %j, align 4
  %arrayidx34 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx33, i32 0, i32 %43
  %44 = load i32, i32* %arrayidx34, align 4
  %call35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), i32 %44)
  br label %for.inc36

for.inc36:                                        ; preds = %for.body32
  %45 = load i32, i32* %j, align 4
  %inc37 = add nsw i32 %45, 1
  store i32 %inc37, i32* %j, align 4
  br label %for.cond30

for.end38:                                        ; preds = %for.cond30
  %call39 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0))
  br label %for.inc40

for.inc40:                                        ; preds = %for.end38
  %46 = load i32, i32* %i, align 4
  %inc41 = add nsw i32 %46, 1
  store i32 %inc41, i32* %i, align 4
  br label %for.cond25

for.end42:                                        ; preds = %for.cond25
  %47 = load i32, i32* %total_cost, align 4
  %call43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.4, i32 0, i32 0), i32 %47)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %min1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %1, %2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %is_row.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %3, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool1 = icmp ne i32 %5, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %arrayidx2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool3 = icmp ne i32 %7, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %is_row.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool4 = icmp ne i32 %8, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %j.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %arrayidx7, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %j.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %arrayidx10, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cond = phi i32 [ %11, %cond.true5 ], [ %14, %cond.false8 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %min1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp11 = icmp slt i32 %15, %16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %min1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %min2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp13 = icmp slt i32 %20, %21
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %23, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %min2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %min1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %24, %25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %min1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %min_p, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147418112
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for diff()

; entering Souper's runOnFunction() for max_penalty()

; ModuleID = './Vogels_approximation_method.c.bc'
source_filename = "./Vogels_approximation_method.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@supply = hidden global [4 x i32] [i32 50, i32 60, i32 50, i32 50], align 16
@demand = hidden global [5 x i32] [i32 30, i32 20, i32 70, i32 30, i32 60], align 16
@costs = hidden global [4 x [5 x i32]] [[5 x i32] [i32 16, i32 16, i32 13, i32 22, i32 17], [5 x i32] [i32 14, i32 14, i32 13, i32 19, i32 15], [5 x i32] [i32 19, i32 19, i32 20, i32 23, i32 50], [5 x i32] [i32 50, i32 12, i32 50, i32 15, i32 11]], align 16
@row_done = hidden global [4 x i32] zeroinitializer, align 16
@col_done = hidden global [5 x i32] zeroinitializer, align 16
@.str = private unnamed_addr constant [23 x i8] c"    A   B   C   D   E\0A\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%c\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"  %2d\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.4 = private unnamed_addr constant [18 x i8] c"\0ATotal cost = %d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @diff(i32 %j, i32 %len, i32 %is_row, i32* %res) #0 {
entry:
  %j.addr = alloca i32, align 4
  %len.addr = alloca i32, align 4
  %is_row.addr = alloca i32, align 4
  %res.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  %c = alloca i32, align 4
  %min1 = alloca i32, align 4
  %min2 = alloca i32, align 4
  %min_p = alloca i32, align 4
  store i32 %j, i32* %j.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %is_row, i32* %is_row.addr, align 4
  store i32* %res, i32** %res.addr, align 4
  store i32 2147483647, i32* %min1, align 4
  %0 = load i32, i32* %min1, align 4
  store i32 %0, i32* %min2, align 4
  store i32 -1, i32* %min_p, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %is_row.addr, align 4
  %tobool = icmp ne i32 %3, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [5 x i32], [5 x i32]* @col_done, i32 0, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  %tobool1 = icmp ne i32 %5, 0
  br i1 %tobool1, label %if.then, label %if.end

cond.false:                                       ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds [4 x i32], [4 x i32]* @row_done, i32 0, i32 %6
  %7 = load i32, i32* %arrayidx2, align 4
  %tobool3 = icmp ne i32 %7, 0
  br i1 %tobool3, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  br label %for.inc

if.end:                                           ; preds = %cond.false, %cond.true
  %8 = load i32, i32* %is_row.addr, align 4
  %tobool4 = icmp ne i32 %8, 0
  br i1 %tobool4, label %cond.true5, label %cond.false8

cond.true5:                                       ; preds = %if.end
  %9 = load i32, i32* %j.addr, align 4
  %arrayidx6 = getelementptr inbounds [4 x [5 x i32]], [4 x [5 x i32]]* @costs, i32 0, i32 %9
  %10 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx6, i32 0, i32 %10
  %11 = load i32, i32* %arrayidx7, align 4
  br label %cond.end

cond.false8:                                      ; preds = %if.end
  %12 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds [4 x [5 x i32]], [4 x [5 x i32]]* @costs, i32 0, i32 %12
  %13 = load i32, i32* %j.addr, align 4
  %arrayidx10 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx9, i32 0, i32 %13
  %14 = load i32, i32* %arrayidx10, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false8, %cond.true5
  %cond = phi i32 [ %11, %cond.true5 ], [ %14, %cond.false8 ]
  store i32 %cond, i32* %c, align 4
  %15 = load i32, i32* %c, align 4
  %16 = load i32, i32* %min1, align 4
  %cmp11 = icmp slt i32 %15, %16
  br i1 %cmp11, label %if.then12, label %if.else

if.then12:                                        ; preds = %cond.end
  %17 = load i32, i32* %min1, align 4
  store i32 %17, i32* %min2, align 4
  %18 = load i32, i32* %c, align 4
  store i32 %18, i32* %min1, align 4
  %19 = load i32, i32* %i, align 4
  store i32 %19, i32* %min_p, align 4
  br label %if.end16

if.else:                                          ; preds = %cond.end
  %20 = load i32, i32* %c, align 4
  %21 = load i32, i32* %min2, align 4
  %cmp13 = icmp slt i32 %20, %21
  br i1 %cmp13, label %if.then14, label %if.end15

if.then14:                                        ; preds = %if.else
  %22 = load i32, i32* %c, align 4
  store i32 %22, i32* %min2, align 4
  br label %if.end15

if.end15:                                         ; preds = %if.then14, %if.else
  br label %if.end16

if.end16:                                         ; preds = %if.end15, %if.then12
  br label %for.inc

for.inc:                                          ; preds = %if.end16, %if.then
  %23 = load i32, i32* %i, align 4
  %inc = add nsw i32 %23, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %24 = load i32, i32* %min2, align 4
  %25 = load i32, i32* %min1, align 4
  %sub = sub nsw i32 %24, %25
  %26 = load i32*, i32** %res.addr, align 4
  %arrayidx17 = getelementptr inbounds i32, i32* %26, i32 0
  store i32 %sub, i32* %arrayidx17, align 4
  %27 = load i32, i32* %min1, align 4
  %28 = load i32*, i32** %res.addr, align 4
  %arrayidx18 = getelementptr inbounds i32, i32* %28, i32 1
  store i32 %27, i32* %arrayidx18, align 4
  %29 = load i32, i32* %min_p, align 4
  %30 = load i32*, i32** %res.addr, align 4
  %arrayidx19 = getelementptr inbounds i32, i32* %30, i32 2
  store i32 %29, i32* %arrayidx19, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @max_penalty(i32 %len1, i32 %len2, i32 %is_row, i32* %res) #0 {
entry:
  %len1.addr = alloca i32, align 4
  %len2.addr = alloca i32, align 4
  %is_row.addr = alloca i32, align 4
  %res.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  %pc = alloca i32, align 4
  %pm = alloca i32, align 4
  %mc = alloca i32, align 4
  %md = alloca i32, align 4
  %res2 = alloca [3 x i32], align 4
  store i32 %len1, i32* %len1.addr, align 4
  store i32 %len2, i32* %len2.addr, align 4
  store i32 %is_row, i32* %is_row.addr, align 4
  store i32* %res, i32** %res.addr, align 4
  store i32 -1, i32* %pc, align 4
  store i32 -1, i32* %pm, align 4
  store i32 -1, i32* %mc, align 4
  store i32 -2147483648, i32* %md, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %len1.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %is_row.addr, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* @row_done, i32 0, i32 %3
  %4 = load i32, i32* %arrayidx, align 4
  %tobool1 = icmp ne i32 %4, 0
  br i1 %tobool1, label %if.then, label %if.end

cond.false:                                       ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds [5 x i32], [5 x i32]* @col_done, i32 0, i32 %5
  %6 = load i32, i32* %arrayidx2, align 4
  %tobool3 = icmp ne i32 %6, 0
  br i1 %tobool3, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  br label %for.inc

if.end:                                           ; preds = %cond.false, %cond.true
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %len2.addr, align 4
  %9 = load i32, i32* %is_row.addr, align 4
  %arraydecay = getelementptr inbounds [3 x i32], [3 x i32]* %res2, i32 0, i32 0
  call void @diff(i32 %7, i32 %8, i32 %9, i32* %arraydecay)
  %arrayidx4 = getelementptr inbounds [3 x i32], [3 x i32]* %res2, i32 0, i32 0
  %10 = load i32, i32* %arrayidx4, align 4
  %11 = load i32, i32* %md, align 4
  %cmp5 = icmp sgt i32 %10, %11
  br i1 %cmp5, label %if.then6, label %if.end10

if.then6:                                         ; preds = %if.end
  %arrayidx7 = getelementptr inbounds [3 x i32], [3 x i32]* %res2, i32 0, i32 0
  %12 = load i32, i32* %arrayidx7, align 4
  store i32 %12, i32* %md, align 4
  %13 = load i32, i32* %i, align 4
  store i32 %13, i32* %pm, align 4
  %arrayidx8 = getelementptr inbounds [3 x i32], [3 x i32]* %res2, i32 0, i32 1
  %14 = load i32, i32* %arrayidx8, align 4
  store i32 %14, i32* %mc, align 4
  %arrayidx9 = getelementptr inbounds [3 x i32], [3 x i32]* %res2, i32 0, i32 2
  %15 = load i32, i32* %arrayidx9, align 4
  store i32 %15, i32* %pc, align 4
  br label %if.end10

if.end10:                                         ; preds = %if.then6, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end10, %if.then
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load i32, i32* %is_row.addr, align 4
  %tobool11 = icmp ne i32 %17, 0
  br i1 %tobool11, label %if.then12, label %if.else

if.then12:                                        ; preds = %for.end
  %18 = load i32, i32* %pm, align 4
  %19 = load i32*, i32** %res.addr, align 4
  %arrayidx13 = getelementptr inbounds i32, i32* %19, i32 0
  store i32 %18, i32* %arrayidx13, align 4
  %20 = load i32, i32* %pc, align 4
  %21 = load i32*, i32** %res.addr, align 4
  %arrayidx14 = getelementptr inbounds i32, i32* %21, i32 1
  store i32 %20, i32* %arrayidx14, align 4
  br label %if.end17

if.else:                                          ; preds = %for.end
  %22 = load i32, i32* %pc, align 4
  %23 = load i32*, i32** %res.addr, align 4
  %arrayidx15 = getelementptr inbounds i32, i32* %23, i32 0
  store i32 %22, i32* %arrayidx15, align 4
  %24 = load i32, i32* %pm, align 4
  %25 = load i32*, i32** %res.addr, align 4
  %arrayidx16 = getelementptr inbounds i32, i32* %25, i32 1
  store i32 %24, i32* %arrayidx16, align 4
  br label %if.end17

if.end17:                                         ; preds = %if.else, %if.then12
  %26 = load i32, i32* %mc, align 4
  %27 = load i32*, i32** %res.addr, align 4
  %arrayidx18 = getelementptr inbounds i32, i32* %27, i32 2
  store i32 %26, i32* %arrayidx18, align 4
  %28 = load i32, i32* %md, align 4
  %29 = load i32*, i32** %res.addr, align 4
  %arrayidx19 = getelementptr inbounds i32, i32* %29, i32 3
  store i32 %28, i32* %arrayidx19, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @next_cell(i32* %res) #0 {
entry:
  %res.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  %res1 = alloca [4 x i32], align 16
  %res2 = alloca [4 x i32], align 16
  store i32* %res, i32** %res.addr, align 4
  %arraydecay = getelementptr inbounds [4 x i32], [4 x i32]* %res1, i32 0, i32 0
  call void @max_penalty(i32 4, i32 5, i32 1, i32* %arraydecay)
  %arraydecay1 = getelementptr inbounds [4 x i32], [4 x i32]* %res2, i32 0, i32 0
  call void @max_penalty(i32 5, i32 4, i32 0, i32* %arraydecay1)
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* %res1, i32 0, i32 3
  %0 = load i32, i32* %arrayidx, align 4
  %arrayidx2 = getelementptr inbounds [4 x i32], [4 x i32]* %res2, i32 0, i32 3
  %1 = load i32, i32* %arrayidx2, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end18

if.then:                                          ; preds = %entry
  %arrayidx3 = getelementptr inbounds [4 x i32], [4 x i32]* %res1, i32 0, i32 2
  %2 = load i32, i32* %arrayidx3, align 8
  %arrayidx4 = getelementptr inbounds [4 x i32], [4 x i32]* %res2, i32 0, i32 2
  %3 = load i32, i32* %arrayidx4, align 8
  %cmp5 = icmp slt i32 %2, %3
  br i1 %cmp5, label %if.then6, label %if.else

if.then6:                                         ; preds = %if.then
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then6
  %4 = load i32, i32* %i, align 4
  %cmp7 = icmp slt i32 %4, 4
  br i1 %cmp7, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds [4 x i32], [4 x i32]* %res1, i32 0, i32 %5
  %6 = load i32, i32* %arrayidx8, align 4
  %7 = load i32*, i32** %res.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds i32, i32* %7, i32 %8
  store i32 %6, i32* %arrayidx9, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.else:                                          ; preds = %if.then
  store i32 0, i32* %i, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc15, %if.else
  %10 = load i32, i32* %i, align 4
  %cmp11 = icmp slt i32 %10, 4
  br i1 %cmp11, label %for.body12, label %for.end17

for.body12:                                       ; preds = %for.cond10
  %11 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds [4 x i32], [4 x i32]* %res2, i32 0, i32 %11
  %12 = load i32, i32* %arrayidx13, align 4
  %13 = load i32*, i32** %res.addr, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds i32, i32* %13, i32 %14
  store i32 %12, i32* %arrayidx14, align 4
  br label %for.inc15

for.inc15:                                        ; preds = %for.body12
  %15 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %15, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond10

for.end17:                                        ; preds = %for.cond10
  br label %if.end

if.end:                                           ; preds = %for.end17, %for.end
  br label %if.end40

if.end18:                                         ; preds = %entry
  %arrayidx19 = getelementptr inbounds [4 x i32], [4 x i32]* %res1, i32 0, i32 3
  %16 = load i32, i32* %arrayidx19, align 4
  %arrayidx20 = getelementptr inbounds [4 x i32], [4 x i32]* %res2, i32 0, i32 3
  %17 = load i32, i32* %arrayidx20, align 4
  %cmp21 = icmp sgt i32 %16, %17
  br i1 %cmp21, label %if.then22, label %if.else31

if.then22:                                        ; preds = %if.end18
  store i32 0, i32* %i, align 4
  br label %for.cond23

for.cond23:                                       ; preds = %for.inc28, %if.then22
  %18 = load i32, i32* %i, align 4
  %cmp24 = icmp slt i32 %18, 4
  br i1 %cmp24, label %for.body25, label %for.end30

for.body25:                                       ; preds = %for.cond23
  %19 = load i32, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds [4 x i32], [4 x i32]* %res2, i32 0, i32 %19
  %20 = load i32, i32* %arrayidx26, align 4
  %21 = load i32*, i32** %res.addr, align 4
  %22 = load i32, i32* %i, align 4
  %arrayidx27 = getelementptr inbounds i32, i32* %21, i32 %22
  store i32 %20, i32* %arrayidx27, align 4
  br label %for.inc28

for.inc28:                                        ; preds = %for.body25
  %23 = load i32, i32* %i, align 4
  %inc29 = add nsw i32 %23, 1
  store i32 %inc29, i32* %i, align 4
  br label %for.cond23

for.end30:                                        ; preds = %for.cond23
  br label %if.end40

if.else31:                                        ; preds = %if.end18
  store i32 0, i32* %i, align 4
  br label %for.cond32

for.cond32:                                       ; preds = %for.inc37, %if.else31
  %24 = load i32, i32* %i, align 4
  %cmp33 = icmp slt i32 %24, 4
  br i1 %cmp33, label %for.body34, label %for.end39

for.body34:                                       ; preds = %for.cond32
  %25 = load i32, i32* %i, align 4
  %arrayidx35 = getelementptr inbounds [4 x i32], [4 x i32]* %res1, i32 0, i32 %25
  %26 = load i32, i32* %arrayidx35, align 4
  %27 = load i32*, i32** %res.addr, align 4
  %28 = load i32, i32* %i, align 4
  %arrayidx36 = getelementptr inbounds i32, i32* %27, i32 %28
  store i32 %26, i32* %arrayidx36, align 4
  br label %for.inc37

for.inc37:                                        ; preds = %for.body34
  %29 = load i32, i32* %i, align 4
  %inc38 = add nsw i32 %29, 1
  store i32 %inc38, i32* %i, align 4
  br label %for.cond32

for.end39:                                        ; preds = %for.cond32
  br label %if.end40

if.end40:                                         ; preds = %if.end, %for.end39, %for.end30
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %r = alloca i32, align 4
  %c = alloca i32, align 4
  %q = alloca i32, align 4
  %supply_left = alloca i32, align 4
  %total_cost = alloca i32, align 4
  %cell = alloca [4 x i32], align 16
  %results = alloca [4 x [5 x i32]], align 16
  store i32 0, i32* %retval, align 4
  store i32 0, i32* %supply_left, align 4
  store i32 0, i32* %total_cost, align 4
  %0 = bitcast [4 x [5 x i32]]* %results to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 80, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %1, 4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* @supply, i32 0, i32 %2
  %3 = load i32, i32* %arrayidx, align 4
  %4 = load i32, i32* %supply_left, align 4
  %add = add nsw i32 %4, %3
  store i32 %add, i32* %supply_left, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %if.end18, %for.end
  %6 = load i32, i32* %supply_left, align 4
  %cmp1 = icmp sgt i32 %6, 0
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %arraydecay = getelementptr inbounds [4 x i32], [4 x i32]* %cell, i32 0, i32 0
  call void @next_cell(i32* %arraydecay)
  %arrayidx2 = getelementptr inbounds [4 x i32], [4 x i32]* %cell, i32 0, i32 0
  %7 = load i32, i32* %arrayidx2, align 16
  store i32 %7, i32* %r, align 4
  %arrayidx3 = getelementptr inbounds [4 x i32], [4 x i32]* %cell, i32 0, i32 1
  %8 = load i32, i32* %arrayidx3, align 4
  store i32 %8, i32* %c, align 4
  %9 = load i32, i32* %c, align 4
  %arrayidx4 = getelementptr inbounds [5 x i32], [5 x i32]* @demand, i32 0, i32 %9
  %10 = load i32, i32* %arrayidx4, align 4
  %11 = load i32, i32* %r, align 4
  %arrayidx5 = getelementptr inbounds [4 x i32], [4 x i32]* @supply, i32 0, i32 %11
  %12 = load i32, i32* %arrayidx5, align 4
  %cmp6 = icmp sle i32 %10, %12
  br i1 %cmp6, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %13 = load i32, i32* %c, align 4
  %arrayidx7 = getelementptr inbounds [5 x i32], [5 x i32]* @demand, i32 0, i32 %13
  %14 = load i32, i32* %arrayidx7, align 4
  br label %cond.end

cond.false:                                       ; preds = %while.body
  %15 = load i32, i32* %r, align 4
  %arrayidx8 = getelementptr inbounds [4 x i32], [4 x i32]* @supply, i32 0, i32 %15
  %16 = load i32, i32* %arrayidx8, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %14, %cond.true ], [ %16, %cond.false ]
  store i32 %cond, i32* %q, align 4
  %17 = load i32, i32* %q, align 4
  %18 = load i32, i32* %c, align 4
  %arrayidx9 = getelementptr inbounds [5 x i32], [5 x i32]* @demand, i32 0, i32 %18
  %19 = load i32, i32* %arrayidx9, align 4
  %sub = sub nsw i32 %19, %17
  store i32 %sub, i32* %arrayidx9, align 4
  %20 = load i32, i32* %c, align 4
  %arrayidx10 = getelementptr inbounds [5 x i32], [5 x i32]* @demand, i32 0, i32 %20
  %21 = load i32, i32* %arrayidx10, align 4
  %tobool = icmp ne i32 %21, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %cond.end
  %22 = load i32, i32* %c, align 4
  %arrayidx11 = getelementptr inbounds [5 x i32], [5 x i32]* @col_done, i32 0, i32 %22
  store i32 1, i32* %arrayidx11, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end
  %23 = load i32, i32* %q, align 4
  %24 = load i32, i32* %r, align 4
  %arrayidx12 = getelementptr inbounds [4 x i32], [4 x i32]* @supply, i32 0, i32 %24
  %25 = load i32, i32* %arrayidx12, align 4
  %sub13 = sub nsw i32 %25, %23
  store i32 %sub13, i32* %arrayidx12, align 4
  %26 = load i32, i32* %r, align 4
  %arrayidx14 = getelementptr inbounds [4 x i32], [4 x i32]* @supply, i32 0, i32 %26
  %27 = load i32, i32* %arrayidx14, align 4
  %tobool15 = icmp ne i32 %27, 0
  br i1 %tobool15, label %if.end18, label %if.then16

if.then16:                                        ; preds = %if.end
  %28 = load i32, i32* %r, align 4
  %arrayidx17 = getelementptr inbounds [4 x i32], [4 x i32]* @row_done, i32 0, i32 %28
  store i32 1, i32* %arrayidx17, align 4
  br label %if.end18

if.end18:                                         ; preds = %if.then16, %if.end
  %29 = load i32, i32* %q, align 4
  %30 = load i32, i32* %r, align 4
  %arrayidx19 = getelementptr inbounds [4 x [5 x i32]], [4 x [5 x i32]]* %results, i32 0, i32 %30
  %31 = load i32, i32* %c, align 4
  %arrayidx20 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx19, i32 0, i32 %31
  store i32 %29, i32* %arrayidx20, align 4
  %32 = load i32, i32* %q, align 4
  %33 = load i32, i32* %supply_left, align 4
  %sub21 = sub nsw i32 %33, %32
  store i32 %sub21, i32* %supply_left, align 4
  %34 = load i32, i32* %q, align 4
  %35 = load i32, i32* %r, align 4
  %arrayidx22 = getelementptr inbounds [4 x [5 x i32]], [4 x [5 x i32]]* @costs, i32 0, i32 %35
  %36 = load i32, i32* %c, align 4
  %arrayidx23 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx22, i32 0, i32 %36
  %37 = load i32, i32* %arrayidx23, align 4
  %mul = mul nsw i32 %34, %37
  %38 = load i32, i32* %total_cost, align 4
  %add24 = add nsw i32 %38, %mul
  store i32 %add24, i32* %total_cost, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond25

for.cond25:                                       ; preds = %for.inc40, %while.end
  %39 = load i32, i32* %i, align 4
  %cmp26 = icmp slt i32 %39, 4
  br i1 %cmp26, label %for.body27, label %for.end42

for.body27:                                       ; preds = %for.cond25
  %40 = load i32, i32* %i, align 4
  %add28 = add nsw i32 87, %40
  %call29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %add28)
  store i32 0, i32* %j, align 4
  br label %for.cond30

for.cond30:                                       ; preds = %for.inc36, %for.body27
  %41 = load i32, i32* %j, align 4
  %cmp31 = icmp slt i32 %41, 5
  br i1 %cmp31, label %for.body32, label %for.end38

for.body32:                                       ; preds = %for.cond30
  %42 = load i32, i32* %i, align 4
  %arrayidx33 = getelementptr inbounds [4 x [5 x i32]], [4 x [5 x i32]]* %results, i32 0, i32 %42
  %43 = load i32, i32* %j, align 4
  %arrayidx34 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx33, i32 0, i32 %43
  %44 = load i32, i32* %arrayidx34, align 4
  %call35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), i32 %44)
  br label %for.inc36

for.inc36:                                        ; preds = %for.body32
  %45 = load i32, i32* %j, align 4
  %inc37 = add nsw i32 %45, 1
  store i32 %inc37, i32* %j, align 4
  br label %for.cond30

for.end38:                                        ; preds = %for.cond30
  %call39 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0))
  br label %for.inc40

for.inc40:                                        ; preds = %for.end38
  %46 = load i32, i32* %i, align 4
  %inc41 = add nsw i32 %46, 1
  store i32 %inc41, i32* %i, align 4
  br label %for.cond25

for.end42:                                        ; preds = %for.cond25
  %47 = load i32, i32* %total_cost, align 4
  %call43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.4, i32 0, i32 0), i32 %47)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %len1.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %is_row.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %2, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool1 = icmp ne i32 %4, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %arrayidx2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool3 = icmp ne i32 %6, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %len2.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %is_row.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %arrayidx4, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %md, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp5 = icmp sgt i32 %10, %11
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %arrayidx7, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %arrayidx8, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %arrayidx9, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %16, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %is_row.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool11 = icmp ne i32 %17, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %pm, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %pc, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %pc, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %pm, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %mc, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %md, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for max_penalty()

; entering Souper's runOnFunction() for next_cell()

; ModuleID = './Vogels_approximation_method.c.bc'
source_filename = "./Vogels_approximation_method.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@supply = hidden global [4 x i32] [i32 50, i32 60, i32 50, i32 50], align 16
@demand = hidden global [5 x i32] [i32 30, i32 20, i32 70, i32 30, i32 60], align 16
@costs = hidden global [4 x [5 x i32]] [[5 x i32] [i32 16, i32 16, i32 13, i32 22, i32 17], [5 x i32] [i32 14, i32 14, i32 13, i32 19, i32 15], [5 x i32] [i32 19, i32 19, i32 20, i32 23, i32 50], [5 x i32] [i32 50, i32 12, i32 50, i32 15, i32 11]], align 16
@row_done = hidden global [4 x i32] zeroinitializer, align 16
@col_done = hidden global [5 x i32] zeroinitializer, align 16
@.str = private unnamed_addr constant [23 x i8] c"    A   B   C   D   E\0A\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%c\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"  %2d\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.4 = private unnamed_addr constant [18 x i8] c"\0ATotal cost = %d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @diff(i32 %j, i32 %len, i32 %is_row, i32* %res) #0 {
entry:
  %j.addr = alloca i32, align 4
  %len.addr = alloca i32, align 4
  %is_row.addr = alloca i32, align 4
  %res.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  %c = alloca i32, align 4
  %min1 = alloca i32, align 4
  %min2 = alloca i32, align 4
  %min_p = alloca i32, align 4
  store i32 %j, i32* %j.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %is_row, i32* %is_row.addr, align 4
  store i32* %res, i32** %res.addr, align 4
  store i32 2147483647, i32* %min1, align 4
  %0 = load i32, i32* %min1, align 4
  store i32 %0, i32* %min2, align 4
  store i32 -1, i32* %min_p, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %is_row.addr, align 4
  %tobool = icmp ne i32 %3, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [5 x i32], [5 x i32]* @col_done, i32 0, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  %tobool1 = icmp ne i32 %5, 0
  br i1 %tobool1, label %if.then, label %if.end

cond.false:                                       ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds [4 x i32], [4 x i32]* @row_done, i32 0, i32 %6
  %7 = load i32, i32* %arrayidx2, align 4
  %tobool3 = icmp ne i32 %7, 0
  br i1 %tobool3, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  br label %for.inc

if.end:                                           ; preds = %cond.false, %cond.true
  %8 = load i32, i32* %is_row.addr, align 4
  %tobool4 = icmp ne i32 %8, 0
  br i1 %tobool4, label %cond.true5, label %cond.false8

cond.true5:                                       ; preds = %if.end
  %9 = load i32, i32* %j.addr, align 4
  %arrayidx6 = getelementptr inbounds [4 x [5 x i32]], [4 x [5 x i32]]* @costs, i32 0, i32 %9
  %10 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx6, i32 0, i32 %10
  %11 = load i32, i32* %arrayidx7, align 4
  br label %cond.end

cond.false8:                                      ; preds = %if.end
  %12 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds [4 x [5 x i32]], [4 x [5 x i32]]* @costs, i32 0, i32 %12
  %13 = load i32, i32* %j.addr, align 4
  %arrayidx10 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx9, i32 0, i32 %13
  %14 = load i32, i32* %arrayidx10, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false8, %cond.true5
  %cond = phi i32 [ %11, %cond.true5 ], [ %14, %cond.false8 ]
  store i32 %cond, i32* %c, align 4
  %15 = load i32, i32* %c, align 4
  %16 = load i32, i32* %min1, align 4
  %cmp11 = icmp slt i32 %15, %16
  br i1 %cmp11, label %if.then12, label %if.else

if.then12:                                        ; preds = %cond.end
  %17 = load i32, i32* %min1, align 4
  store i32 %17, i32* %min2, align 4
  %18 = load i32, i32* %c, align 4
  store i32 %18, i32* %min1, align 4
  %19 = load i32, i32* %i, align 4
  store i32 %19, i32* %min_p, align 4
  br label %if.end16

if.else:                                          ; preds = %cond.end
  %20 = load i32, i32* %c, align 4
  %21 = load i32, i32* %min2, align 4
  %cmp13 = icmp slt i32 %20, %21
  br i1 %cmp13, label %if.then14, label %if.end15

if.then14:                                        ; preds = %if.else
  %22 = load i32, i32* %c, align 4
  store i32 %22, i32* %min2, align 4
  br label %if.end15

if.end15:                                         ; preds = %if.then14, %if.else
  br label %if.end16

if.end16:                                         ; preds = %if.end15, %if.then12
  br label %for.inc

for.inc:                                          ; preds = %if.end16, %if.then
  %23 = load i32, i32* %i, align 4
  %inc = add nsw i32 %23, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %24 = load i32, i32* %min2, align 4
  %25 = load i32, i32* %min1, align 4
  %sub = sub nsw i32 %24, %25
  %26 = load i32*, i32** %res.addr, align 4
  %arrayidx17 = getelementptr inbounds i32, i32* %26, i32 0
  store i32 %sub, i32* %arrayidx17, align 4
  %27 = load i32, i32* %min1, align 4
  %28 = load i32*, i32** %res.addr, align 4
  %arrayidx18 = getelementptr inbounds i32, i32* %28, i32 1
  store i32 %27, i32* %arrayidx18, align 4
  %29 = load i32, i32* %min_p, align 4
  %30 = load i32*, i32** %res.addr, align 4
  %arrayidx19 = getelementptr inbounds i32, i32* %30, i32 2
  store i32 %29, i32* %arrayidx19, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @max_penalty(i32 %len1, i32 %len2, i32 %is_row, i32* %res) #0 {
entry:
  %len1.addr = alloca i32, align 4
  %len2.addr = alloca i32, align 4
  %is_row.addr = alloca i32, align 4
  %res.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  %pc = alloca i32, align 4
  %pm = alloca i32, align 4
  %mc = alloca i32, align 4
  %md = alloca i32, align 4
  %res2 = alloca [3 x i32], align 4
  store i32 %len1, i32* %len1.addr, align 4
  store i32 %len2, i32* %len2.addr, align 4
  store i32 %is_row, i32* %is_row.addr, align 4
  store i32* %res, i32** %res.addr, align 4
  store i32 -1, i32* %pc, align 4
  store i32 -1, i32* %pm, align 4
  store i32 -1, i32* %mc, align 4
  store i32 -2147483648, i32* %md, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %len1.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %is_row.addr, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* @row_done, i32 0, i32 %3
  %4 = load i32, i32* %arrayidx, align 4
  %tobool1 = icmp ne i32 %4, 0
  br i1 %tobool1, label %if.then, label %if.end

cond.false:                                       ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds [5 x i32], [5 x i32]* @col_done, i32 0, i32 %5
  %6 = load i32, i32* %arrayidx2, align 4
  %tobool3 = icmp ne i32 %6, 0
  br i1 %tobool3, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  br label %for.inc

if.end:                                           ; preds = %cond.false, %cond.true
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %len2.addr, align 4
  %9 = load i32, i32* %is_row.addr, align 4
  %arraydecay = getelementptr inbounds [3 x i32], [3 x i32]* %res2, i32 0, i32 0
  call void @diff(i32 %7, i32 %8, i32 %9, i32* %arraydecay)
  %arrayidx4 = getelementptr inbounds [3 x i32], [3 x i32]* %res2, i32 0, i32 0
  %10 = load i32, i32* %arrayidx4, align 4
  %11 = load i32, i32* %md, align 4
  %cmp5 = icmp sgt i32 %10, %11
  br i1 %cmp5, label %if.then6, label %if.end10

if.then6:                                         ; preds = %if.end
  %arrayidx7 = getelementptr inbounds [3 x i32], [3 x i32]* %res2, i32 0, i32 0
  %12 = load i32, i32* %arrayidx7, align 4
  store i32 %12, i32* %md, align 4
  %13 = load i32, i32* %i, align 4
  store i32 %13, i32* %pm, align 4
  %arrayidx8 = getelementptr inbounds [3 x i32], [3 x i32]* %res2, i32 0, i32 1
  %14 = load i32, i32* %arrayidx8, align 4
  store i32 %14, i32* %mc, align 4
  %arrayidx9 = getelementptr inbounds [3 x i32], [3 x i32]* %res2, i32 0, i32 2
  %15 = load i32, i32* %arrayidx9, align 4
  store i32 %15, i32* %pc, align 4
  br label %if.end10

if.end10:                                         ; preds = %if.then6, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end10, %if.then
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load i32, i32* %is_row.addr, align 4
  %tobool11 = icmp ne i32 %17, 0
  br i1 %tobool11, label %if.then12, label %if.else

if.then12:                                        ; preds = %for.end
  %18 = load i32, i32* %pm, align 4
  %19 = load i32*, i32** %res.addr, align 4
  %arrayidx13 = getelementptr inbounds i32, i32* %19, i32 0
  store i32 %18, i32* %arrayidx13, align 4
  %20 = load i32, i32* %pc, align 4
  %21 = load i32*, i32** %res.addr, align 4
  %arrayidx14 = getelementptr inbounds i32, i32* %21, i32 1
  store i32 %20, i32* %arrayidx14, align 4
  br label %if.end17

if.else:                                          ; preds = %for.end
  %22 = load i32, i32* %pc, align 4
  %23 = load i32*, i32** %res.addr, align 4
  %arrayidx15 = getelementptr inbounds i32, i32* %23, i32 0
  store i32 %22, i32* %arrayidx15, align 4
  %24 = load i32, i32* %pm, align 4
  %25 = load i32*, i32** %res.addr, align 4
  %arrayidx16 = getelementptr inbounds i32, i32* %25, i32 1
  store i32 %24, i32* %arrayidx16, align 4
  br label %if.end17

if.end17:                                         ; preds = %if.else, %if.then12
  %26 = load i32, i32* %mc, align 4
  %27 = load i32*, i32** %res.addr, align 4
  %arrayidx18 = getelementptr inbounds i32, i32* %27, i32 2
  store i32 %26, i32* %arrayidx18, align 4
  %28 = load i32, i32* %md, align 4
  %29 = load i32*, i32** %res.addr, align 4
  %arrayidx19 = getelementptr inbounds i32, i32* %29, i32 3
  store i32 %28, i32* %arrayidx19, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @next_cell(i32* %res) #0 {
entry:
  %res.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  %res1 = alloca [4 x i32], align 16
  %res2 = alloca [4 x i32], align 16
  store i32* %res, i32** %res.addr, align 4
  %arraydecay = getelementptr inbounds [4 x i32], [4 x i32]* %res1, i32 0, i32 0
  call void @max_penalty(i32 4, i32 5, i32 1, i32* %arraydecay)
  %arraydecay1 = getelementptr inbounds [4 x i32], [4 x i32]* %res2, i32 0, i32 0
  call void @max_penalty(i32 5, i32 4, i32 0, i32* %arraydecay1)
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* %res1, i32 0, i32 3
  %0 = load i32, i32* %arrayidx, align 4
  %arrayidx2 = getelementptr inbounds [4 x i32], [4 x i32]* %res2, i32 0, i32 3
  %1 = load i32, i32* %arrayidx2, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end18

if.then:                                          ; preds = %entry
  %arrayidx3 = getelementptr inbounds [4 x i32], [4 x i32]* %res1, i32 0, i32 2
  %2 = load i32, i32* %arrayidx3, align 8
  %arrayidx4 = getelementptr inbounds [4 x i32], [4 x i32]* %res2, i32 0, i32 2
  %3 = load i32, i32* %arrayidx4, align 8
  %cmp5 = icmp slt i32 %2, %3
  br i1 %cmp5, label %if.then6, label %if.else

if.then6:                                         ; preds = %if.then
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then6
  %4 = load i32, i32* %i, align 4
  %cmp7 = icmp slt i32 %4, 4
  br i1 %cmp7, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds [4 x i32], [4 x i32]* %res1, i32 0, i32 %5
  %6 = load i32, i32* %arrayidx8, align 4
  %7 = load i32*, i32** %res.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds i32, i32* %7, i32 %8
  store i32 %6, i32* %arrayidx9, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.else:                                          ; preds = %if.then
  store i32 0, i32* %i, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc15, %if.else
  %10 = load i32, i32* %i, align 4
  %cmp11 = icmp slt i32 %10, 4
  br i1 %cmp11, label %for.body12, label %for.end17

for.body12:                                       ; preds = %for.cond10
  %11 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds [4 x i32], [4 x i32]* %res2, i32 0, i32 %11
  %12 = load i32, i32* %arrayidx13, align 4
  %13 = load i32*, i32** %res.addr, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds i32, i32* %13, i32 %14
  store i32 %12, i32* %arrayidx14, align 4
  br label %for.inc15

for.inc15:                                        ; preds = %for.body12
  %15 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %15, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond10

for.end17:                                        ; preds = %for.cond10
  br label %if.end

if.end:                                           ; preds = %for.end17, %for.end
  br label %if.end40

if.end18:                                         ; preds = %entry
  %arrayidx19 = getelementptr inbounds [4 x i32], [4 x i32]* %res1, i32 0, i32 3
  %16 = load i32, i32* %arrayidx19, align 4
  %arrayidx20 = getelementptr inbounds [4 x i32], [4 x i32]* %res2, i32 0, i32 3
  %17 = load i32, i32* %arrayidx20, align 4
  %cmp21 = icmp sgt i32 %16, %17
  br i1 %cmp21, label %if.then22, label %if.else31

if.then22:                                        ; preds = %if.end18
  store i32 0, i32* %i, align 4
  br label %for.cond23

for.cond23:                                       ; preds = %for.inc28, %if.then22
  %18 = load i32, i32* %i, align 4
  %cmp24 = icmp slt i32 %18, 4
  br i1 %cmp24, label %for.body25, label %for.end30

for.body25:                                       ; preds = %for.cond23
  %19 = load i32, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds [4 x i32], [4 x i32]* %res2, i32 0, i32 %19
  %20 = load i32, i32* %arrayidx26, align 4
  %21 = load i32*, i32** %res.addr, align 4
  %22 = load i32, i32* %i, align 4
  %arrayidx27 = getelementptr inbounds i32, i32* %21, i32 %22
  store i32 %20, i32* %arrayidx27, align 4
  br label %for.inc28

for.inc28:                                        ; preds = %for.body25
  %23 = load i32, i32* %i, align 4
  %inc29 = add nsw i32 %23, 1
  store i32 %inc29, i32* %i, align 4
  br label %for.cond23

for.end30:                                        ; preds = %for.cond23
  br label %if.end40

if.else31:                                        ; preds = %if.end18
  store i32 0, i32* %i, align 4
  br label %for.cond32

for.cond32:                                       ; preds = %for.inc37, %if.else31
  %24 = load i32, i32* %i, align 4
  %cmp33 = icmp slt i32 %24, 4
  br i1 %cmp33, label %for.body34, label %for.end39

for.body34:                                       ; preds = %for.cond32
  %25 = load i32, i32* %i, align 4
  %arrayidx35 = getelementptr inbounds [4 x i32], [4 x i32]* %res1, i32 0, i32 %25
  %26 = load i32, i32* %arrayidx35, align 4
  %27 = load i32*, i32** %res.addr, align 4
  %28 = load i32, i32* %i, align 4
  %arrayidx36 = getelementptr inbounds i32, i32* %27, i32 %28
  store i32 %26, i32* %arrayidx36, align 4
  br label %for.inc37

for.inc37:                                        ; preds = %for.body34
  %29 = load i32, i32* %i, align 4
  %inc38 = add nsw i32 %29, 1
  store i32 %inc38, i32* %i, align 4
  br label %for.cond32

for.end39:                                        ; preds = %for.cond32
  br label %if.end40

if.end40:                                         ; preds = %if.end, %for.end39, %for.end30
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %r = alloca i32, align 4
  %c = alloca i32, align 4
  %q = alloca i32, align 4
  %supply_left = alloca i32, align 4
  %total_cost = alloca i32, align 4
  %cell = alloca [4 x i32], align 16
  %results = alloca [4 x [5 x i32]], align 16
  store i32 0, i32* %retval, align 4
  store i32 0, i32* %supply_left, align 4
  store i32 0, i32* %total_cost, align 4
  %0 = bitcast [4 x [5 x i32]]* %results to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 80, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %1, 4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* @supply, i32 0, i32 %2
  %3 = load i32, i32* %arrayidx, align 4
  %4 = load i32, i32* %supply_left, align 4
  %add = add nsw i32 %4, %3
  store i32 %add, i32* %supply_left, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %if.end18, %for.end
  %6 = load i32, i32* %supply_left, align 4
  %cmp1 = icmp sgt i32 %6, 0
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %arraydecay = getelementptr inbounds [4 x i32], [4 x i32]* %cell, i32 0, i32 0
  call void @next_cell(i32* %arraydecay)
  %arrayidx2 = getelementptr inbounds [4 x i32], [4 x i32]* %cell, i32 0, i32 0
  %7 = load i32, i32* %arrayidx2, align 16
  store i32 %7, i32* %r, align 4
  %arrayidx3 = getelementptr inbounds [4 x i32], [4 x i32]* %cell, i32 0, i32 1
  %8 = load i32, i32* %arrayidx3, align 4
  store i32 %8, i32* %c, align 4
  %9 = load i32, i32* %c, align 4
  %arrayidx4 = getelementptr inbounds [5 x i32], [5 x i32]* @demand, i32 0, i32 %9
  %10 = load i32, i32* %arrayidx4, align 4
  %11 = load i32, i32* %r, align 4
  %arrayidx5 = getelementptr inbounds [4 x i32], [4 x i32]* @supply, i32 0, i32 %11
  %12 = load i32, i32* %arrayidx5, align 4
  %cmp6 = icmp sle i32 %10, %12
  br i1 %cmp6, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %13 = load i32, i32* %c, align 4
  %arrayidx7 = getelementptr inbounds [5 x i32], [5 x i32]* @demand, i32 0, i32 %13
  %14 = load i32, i32* %arrayidx7, align 4
  br label %cond.end

cond.false:                                       ; preds = %while.body
  %15 = load i32, i32* %r, align 4
  %arrayidx8 = getelementptr inbounds [4 x i32], [4 x i32]* @supply, i32 0, i32 %15
  %16 = load i32, i32* %arrayidx8, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %14, %cond.true ], [ %16, %cond.false ]
  store i32 %cond, i32* %q, align 4
  %17 = load i32, i32* %q, align 4
  %18 = load i32, i32* %c, align 4
  %arrayidx9 = getelementptr inbounds [5 x i32], [5 x i32]* @demand, i32 0, i32 %18
  %19 = load i32, i32* %arrayidx9, align 4
  %sub = sub nsw i32 %19, %17
  store i32 %sub, i32* %arrayidx9, align 4
  %20 = load i32, i32* %c, align 4
  %arrayidx10 = getelementptr inbounds [5 x i32], [5 x i32]* @demand, i32 0, i32 %20
  %21 = load i32, i32* %arrayidx10, align 4
  %tobool = icmp ne i32 %21, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %cond.end
  %22 = load i32, i32* %c, align 4
  %arrayidx11 = getelementptr inbounds [5 x i32], [5 x i32]* @col_done, i32 0, i32 %22
  store i32 1, i32* %arrayidx11, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end
  %23 = load i32, i32* %q, align 4
  %24 = load i32, i32* %r, align 4
  %arrayidx12 = getelementptr inbounds [4 x i32], [4 x i32]* @supply, i32 0, i32 %24
  %25 = load i32, i32* %arrayidx12, align 4
  %sub13 = sub nsw i32 %25, %23
  store i32 %sub13, i32* %arrayidx12, align 4
  %26 = load i32, i32* %r, align 4
  %arrayidx14 = getelementptr inbounds [4 x i32], [4 x i32]* @supply, i32 0, i32 %26
  %27 = load i32, i32* %arrayidx14, align 4
  %tobool15 = icmp ne i32 %27, 0
  br i1 %tobool15, label %if.end18, label %if.then16

if.then16:                                        ; preds = %if.end
  %28 = load i32, i32* %r, align 4
  %arrayidx17 = getelementptr inbounds [4 x i32], [4 x i32]* @row_done, i32 0, i32 %28
  store i32 1, i32* %arrayidx17, align 4
  br label %if.end18

if.end18:                                         ; preds = %if.then16, %if.end
  %29 = load i32, i32* %q, align 4
  %30 = load i32, i32* %r, align 4
  %arrayidx19 = getelementptr inbounds [4 x [5 x i32]], [4 x [5 x i32]]* %results, i32 0, i32 %30
  %31 = load i32, i32* %c, align 4
  %arrayidx20 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx19, i32 0, i32 %31
  store i32 %29, i32* %arrayidx20, align 4
  %32 = load i32, i32* %q, align 4
  %33 = load i32, i32* %supply_left, align 4
  %sub21 = sub nsw i32 %33, %32
  store i32 %sub21, i32* %supply_left, align 4
  %34 = load i32, i32* %q, align 4
  %35 = load i32, i32* %r, align 4
  %arrayidx22 = getelementptr inbounds [4 x [5 x i32]], [4 x [5 x i32]]* @costs, i32 0, i32 %35
  %36 = load i32, i32* %c, align 4
  %arrayidx23 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx22, i32 0, i32 %36
  %37 = load i32, i32* %arrayidx23, align 4
  %mul = mul nsw i32 %34, %37
  %38 = load i32, i32* %total_cost, align 4
  %add24 = add nsw i32 %38, %mul
  store i32 %add24, i32* %total_cost, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond25

for.cond25:                                       ; preds = %for.inc40, %while.end
  %39 = load i32, i32* %i, align 4
  %cmp26 = icmp slt i32 %39, 4
  br i1 %cmp26, label %for.body27, label %for.end42

for.body27:                                       ; preds = %for.cond25
  %40 = load i32, i32* %i, align 4
  %add28 = add nsw i32 87, %40
  %call29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %add28)
  store i32 0, i32* %j, align 4
  br label %for.cond30

for.cond30:                                       ; preds = %for.inc36, %for.body27
  %41 = load i32, i32* %j, align 4
  %cmp31 = icmp slt i32 %41, 5
  br i1 %cmp31, label %for.body32, label %for.end38

for.body32:                                       ; preds = %for.cond30
  %42 = load i32, i32* %i, align 4
  %arrayidx33 = getelementptr inbounds [4 x [5 x i32]], [4 x [5 x i32]]* %results, i32 0, i32 %42
  %43 = load i32, i32* %j, align 4
  %arrayidx34 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx33, i32 0, i32 %43
  %44 = load i32, i32* %arrayidx34, align 4
  %call35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), i32 %44)
  br label %for.inc36

for.inc36:                                        ; preds = %for.body32
  %45 = load i32, i32* %j, align 4
  %inc37 = add nsw i32 %45, 1
  store i32 %inc37, i32* %j, align 4
  br label %for.cond30

for.end38:                                        ; preds = %for.cond30
  %call39 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0))
  br label %for.inc40

for.inc40:                                        ; preds = %for.end38
  %46 = load i32, i32* %i, align 4
  %inc41 = add nsw i32 %46, 1
  store i32 %inc41, i32* %i, align 4
  br label %for.cond25

for.end42:                                        ; preds = %for.cond25
  %47 = load i32, i32* %total_cost, align 4
  %call43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.4, i32 0, i32 0), i32 %47)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %arrayidx2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %arrayidx3, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %arrayidx4, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp5 = icmp slt i32 %2, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp7 = icmp slt i32 %4, 4
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 4:i32
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %arrayidx8, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %9, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp11 = icmp slt i32 %10, 4
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 4:i32
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %arrayidx13, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc16 = add nsw i32 %15, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %arrayidx19, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %arrayidx20, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp21 = icmp sgt i32 %16, %17
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp24 = icmp slt i32 %18, 4
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 4:i32
infer %1

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %arrayidx26, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc29 = add nsw i32 %23, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp33 = icmp slt i32 %24, 4
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 4:i32
infer %1

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %arrayidx35, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc38 = add nsw i32 %29, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 4:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for next_cell()

; entering Souper's runOnFunction() for main()

; ModuleID = './Vogels_approximation_method.c.bc'
source_filename = "./Vogels_approximation_method.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@supply = hidden global [4 x i32] [i32 50, i32 60, i32 50, i32 50], align 16
@demand = hidden global [5 x i32] [i32 30, i32 20, i32 70, i32 30, i32 60], align 16
@costs = hidden global [4 x [5 x i32]] [[5 x i32] [i32 16, i32 16, i32 13, i32 22, i32 17], [5 x i32] [i32 14, i32 14, i32 13, i32 19, i32 15], [5 x i32] [i32 19, i32 19, i32 20, i32 23, i32 50], [5 x i32] [i32 50, i32 12, i32 50, i32 15, i32 11]], align 16
@row_done = hidden global [4 x i32] zeroinitializer, align 16
@col_done = hidden global [5 x i32] zeroinitializer, align 16
@.str = private unnamed_addr constant [23 x i8] c"    A   B   C   D   E\0A\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%c\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"  %2d\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.4 = private unnamed_addr constant [18 x i8] c"\0ATotal cost = %d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @diff(i32 %j, i32 %len, i32 %is_row, i32* %res) #0 {
entry:
  %j.addr = alloca i32, align 4
  %len.addr = alloca i32, align 4
  %is_row.addr = alloca i32, align 4
  %res.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  %c = alloca i32, align 4
  %min1 = alloca i32, align 4
  %min2 = alloca i32, align 4
  %min_p = alloca i32, align 4
  store i32 %j, i32* %j.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %is_row, i32* %is_row.addr, align 4
  store i32* %res, i32** %res.addr, align 4
  store i32 2147483647, i32* %min1, align 4
  %0 = load i32, i32* %min1, align 4
  store i32 %0, i32* %min2, align 4
  store i32 -1, i32* %min_p, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %is_row.addr, align 4
  %tobool = icmp ne i32 %3, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [5 x i32], [5 x i32]* @col_done, i32 0, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  %tobool1 = icmp ne i32 %5, 0
  br i1 %tobool1, label %if.then, label %if.end

cond.false:                                       ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds [4 x i32], [4 x i32]* @row_done, i32 0, i32 %6
  %7 = load i32, i32* %arrayidx2, align 4
  %tobool3 = icmp ne i32 %7, 0
  br i1 %tobool3, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  br label %for.inc

if.end:                                           ; preds = %cond.false, %cond.true
  %8 = load i32, i32* %is_row.addr, align 4
  %tobool4 = icmp ne i32 %8, 0
  br i1 %tobool4, label %cond.true5, label %cond.false8

cond.true5:                                       ; preds = %if.end
  %9 = load i32, i32* %j.addr, align 4
  %arrayidx6 = getelementptr inbounds [4 x [5 x i32]], [4 x [5 x i32]]* @costs, i32 0, i32 %9
  %10 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx6, i32 0, i32 %10
  %11 = load i32, i32* %arrayidx7, align 4
  br label %cond.end

cond.false8:                                      ; preds = %if.end
  %12 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds [4 x [5 x i32]], [4 x [5 x i32]]* @costs, i32 0, i32 %12
  %13 = load i32, i32* %j.addr, align 4
  %arrayidx10 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx9, i32 0, i32 %13
  %14 = load i32, i32* %arrayidx10, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false8, %cond.true5
  %cond = phi i32 [ %11, %cond.true5 ], [ %14, %cond.false8 ]
  store i32 %cond, i32* %c, align 4
  %15 = load i32, i32* %c, align 4
  %16 = load i32, i32* %min1, align 4
  %cmp11 = icmp slt i32 %15, %16
  br i1 %cmp11, label %if.then12, label %if.else

if.then12:                                        ; preds = %cond.end
  %17 = load i32, i32* %min1, align 4
  store i32 %17, i32* %min2, align 4
  %18 = load i32, i32* %c, align 4
  store i32 %18, i32* %min1, align 4
  %19 = load i32, i32* %i, align 4
  store i32 %19, i32* %min_p, align 4
  br label %if.end16

if.else:                                          ; preds = %cond.end
  %20 = load i32, i32* %c, align 4
  %21 = load i32, i32* %min2, align 4
  %cmp13 = icmp slt i32 %20, %21
  br i1 %cmp13, label %if.then14, label %if.end15

if.then14:                                        ; preds = %if.else
  %22 = load i32, i32* %c, align 4
  store i32 %22, i32* %min2, align 4
  br label %if.end15

if.end15:                                         ; preds = %if.then14, %if.else
  br label %if.end16

if.end16:                                         ; preds = %if.end15, %if.then12
  br label %for.inc

for.inc:                                          ; preds = %if.end16, %if.then
  %23 = load i32, i32* %i, align 4
  %inc = add nsw i32 %23, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %24 = load i32, i32* %min2, align 4
  %25 = load i32, i32* %min1, align 4
  %sub = sub nsw i32 %24, %25
  %26 = load i32*, i32** %res.addr, align 4
  %arrayidx17 = getelementptr inbounds i32, i32* %26, i32 0
  store i32 %sub, i32* %arrayidx17, align 4
  %27 = load i32, i32* %min1, align 4
  %28 = load i32*, i32** %res.addr, align 4
  %arrayidx18 = getelementptr inbounds i32, i32* %28, i32 1
  store i32 %27, i32* %arrayidx18, align 4
  %29 = load i32, i32* %min_p, align 4
  %30 = load i32*, i32** %res.addr, align 4
  %arrayidx19 = getelementptr inbounds i32, i32* %30, i32 2
  store i32 %29, i32* %arrayidx19, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @max_penalty(i32 %len1, i32 %len2, i32 %is_row, i32* %res) #0 {
entry:
  %len1.addr = alloca i32, align 4
  %len2.addr = alloca i32, align 4
  %is_row.addr = alloca i32, align 4
  %res.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  %pc = alloca i32, align 4
  %pm = alloca i32, align 4
  %mc = alloca i32, align 4
  %md = alloca i32, align 4
  %res2 = alloca [3 x i32], align 4
  store i32 %len1, i32* %len1.addr, align 4
  store i32 %len2, i32* %len2.addr, align 4
  store i32 %is_row, i32* %is_row.addr, align 4
  store i32* %res, i32** %res.addr, align 4
  store i32 -1, i32* %pc, align 4
  store i32 -1, i32* %pm, align 4
  store i32 -1, i32* %mc, align 4
  store i32 -2147483648, i32* %md, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %len1.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %is_row.addr, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* @row_done, i32 0, i32 %3
  %4 = load i32, i32* %arrayidx, align 4
  %tobool1 = icmp ne i32 %4, 0
  br i1 %tobool1, label %if.then, label %if.end

cond.false:                                       ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds [5 x i32], [5 x i32]* @col_done, i32 0, i32 %5
  %6 = load i32, i32* %arrayidx2, align 4
  %tobool3 = icmp ne i32 %6, 0
  br i1 %tobool3, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  br label %for.inc

if.end:                                           ; preds = %cond.false, %cond.true
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %len2.addr, align 4
  %9 = load i32, i32* %is_row.addr, align 4
  %arraydecay = getelementptr inbounds [3 x i32], [3 x i32]* %res2, i32 0, i32 0
  call void @diff(i32 %7, i32 %8, i32 %9, i32* %arraydecay)
  %arrayidx4 = getelementptr inbounds [3 x i32], [3 x i32]* %res2, i32 0, i32 0
  %10 = load i32, i32* %arrayidx4, align 4
  %11 = load i32, i32* %md, align 4
  %cmp5 = icmp sgt i32 %10, %11
  br i1 %cmp5, label %if.then6, label %if.end10

if.then6:                                         ; preds = %if.end
  %arrayidx7 = getelementptr inbounds [3 x i32], [3 x i32]* %res2, i32 0, i32 0
  %12 = load i32, i32* %arrayidx7, align 4
  store i32 %12, i32* %md, align 4
  %13 = load i32, i32* %i, align 4
  store i32 %13, i32* %pm, align 4
  %arrayidx8 = getelementptr inbounds [3 x i32], [3 x i32]* %res2, i32 0, i32 1
  %14 = load i32, i32* %arrayidx8, align 4
  store i32 %14, i32* %mc, align 4
  %arrayidx9 = getelementptr inbounds [3 x i32], [3 x i32]* %res2, i32 0, i32 2
  %15 = load i32, i32* %arrayidx9, align 4
  store i32 %15, i32* %pc, align 4
  br label %if.end10

if.end10:                                         ; preds = %if.then6, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end10, %if.then
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load i32, i32* %is_row.addr, align 4
  %tobool11 = icmp ne i32 %17, 0
  br i1 %tobool11, label %if.then12, label %if.else

if.then12:                                        ; preds = %for.end
  %18 = load i32, i32* %pm, align 4
  %19 = load i32*, i32** %res.addr, align 4
  %arrayidx13 = getelementptr inbounds i32, i32* %19, i32 0
  store i32 %18, i32* %arrayidx13, align 4
  %20 = load i32, i32* %pc, align 4
  %21 = load i32*, i32** %res.addr, align 4
  %arrayidx14 = getelementptr inbounds i32, i32* %21, i32 1
  store i32 %20, i32* %arrayidx14, align 4
  br label %if.end17

if.else:                                          ; preds = %for.end
  %22 = load i32, i32* %pc, align 4
  %23 = load i32*, i32** %res.addr, align 4
  %arrayidx15 = getelementptr inbounds i32, i32* %23, i32 0
  store i32 %22, i32* %arrayidx15, align 4
  %24 = load i32, i32* %pm, align 4
  %25 = load i32*, i32** %res.addr, align 4
  %arrayidx16 = getelementptr inbounds i32, i32* %25, i32 1
  store i32 %24, i32* %arrayidx16, align 4
  br label %if.end17

if.end17:                                         ; preds = %if.else, %if.then12
  %26 = load i32, i32* %mc, align 4
  %27 = load i32*, i32** %res.addr, align 4
  %arrayidx18 = getelementptr inbounds i32, i32* %27, i32 2
  store i32 %26, i32* %arrayidx18, align 4
  %28 = load i32, i32* %md, align 4
  %29 = load i32*, i32** %res.addr, align 4
  %arrayidx19 = getelementptr inbounds i32, i32* %29, i32 3
  store i32 %28, i32* %arrayidx19, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @next_cell(i32* %res) #0 {
entry:
  %res.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  %res1 = alloca [4 x i32], align 16
  %res2 = alloca [4 x i32], align 16
  store i32* %res, i32** %res.addr, align 4
  %arraydecay = getelementptr inbounds [4 x i32], [4 x i32]* %res1, i32 0, i32 0
  call void @max_penalty(i32 4, i32 5, i32 1, i32* %arraydecay)
  %arraydecay1 = getelementptr inbounds [4 x i32], [4 x i32]* %res2, i32 0, i32 0
  call void @max_penalty(i32 5, i32 4, i32 0, i32* %arraydecay1)
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* %res1, i32 0, i32 3
  %0 = load i32, i32* %arrayidx, align 4
  %arrayidx2 = getelementptr inbounds [4 x i32], [4 x i32]* %res2, i32 0, i32 3
  %1 = load i32, i32* %arrayidx2, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end18

if.then:                                          ; preds = %entry
  %arrayidx3 = getelementptr inbounds [4 x i32], [4 x i32]* %res1, i32 0, i32 2
  %2 = load i32, i32* %arrayidx3, align 8
  %arrayidx4 = getelementptr inbounds [4 x i32], [4 x i32]* %res2, i32 0, i32 2
  %3 = load i32, i32* %arrayidx4, align 8
  %cmp5 = icmp slt i32 %2, %3
  br i1 %cmp5, label %if.then6, label %if.else

if.then6:                                         ; preds = %if.then
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then6
  %4 = load i32, i32* %i, align 4
  %cmp7 = icmp slt i32 %4, 4
  br i1 %cmp7, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds [4 x i32], [4 x i32]* %res1, i32 0, i32 %5
  %6 = load i32, i32* %arrayidx8, align 4
  %7 = load i32*, i32** %res.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds i32, i32* %7, i32 %8
  store i32 %6, i32* %arrayidx9, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.else:                                          ; preds = %if.then
  store i32 0, i32* %i, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc15, %if.else
  %10 = load i32, i32* %i, align 4
  %cmp11 = icmp slt i32 %10, 4
  br i1 %cmp11, label %for.body12, label %for.end17

for.body12:                                       ; preds = %for.cond10
  %11 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds [4 x i32], [4 x i32]* %res2, i32 0, i32 %11
  %12 = load i32, i32* %arrayidx13, align 4
  %13 = load i32*, i32** %res.addr, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds i32, i32* %13, i32 %14
  store i32 %12, i32* %arrayidx14, align 4
  br label %for.inc15

for.inc15:                                        ; preds = %for.body12
  %15 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %15, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond10

for.end17:                                        ; preds = %for.cond10
  br label %if.end

if.end:                                           ; preds = %for.end17, %for.end
  br label %if.end40

if.end18:                                         ; preds = %entry
  %arrayidx19 = getelementptr inbounds [4 x i32], [4 x i32]* %res1, i32 0, i32 3
  %16 = load i32, i32* %arrayidx19, align 4
  %arrayidx20 = getelementptr inbounds [4 x i32], [4 x i32]* %res2, i32 0, i32 3
  %17 = load i32, i32* %arrayidx20, align 4
  %cmp21 = icmp sgt i32 %16, %17
  br i1 %cmp21, label %if.then22, label %if.else31

if.then22:                                        ; preds = %if.end18
  store i32 0, i32* %i, align 4
  br label %for.cond23

for.cond23:                                       ; preds = %for.inc28, %if.then22
  %18 = load i32, i32* %i, align 4
  %cmp24 = icmp slt i32 %18, 4
  br i1 %cmp24, label %for.body25, label %for.end30

for.body25:                                       ; preds = %for.cond23
  %19 = load i32, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds [4 x i32], [4 x i32]* %res2, i32 0, i32 %19
  %20 = load i32, i32* %arrayidx26, align 4
  %21 = load i32*, i32** %res.addr, align 4
  %22 = load i32, i32* %i, align 4
  %arrayidx27 = getelementptr inbounds i32, i32* %21, i32 %22
  store i32 %20, i32* %arrayidx27, align 4
  br label %for.inc28

for.inc28:                                        ; preds = %for.body25
  %23 = load i32, i32* %i, align 4
  %inc29 = add nsw i32 %23, 1
  store i32 %inc29, i32* %i, align 4
  br label %for.cond23

for.end30:                                        ; preds = %for.cond23
  br label %if.end40

if.else31:                                        ; preds = %if.end18
  store i32 0, i32* %i, align 4
  br label %for.cond32

for.cond32:                                       ; preds = %for.inc37, %if.else31
  %24 = load i32, i32* %i, align 4
  %cmp33 = icmp slt i32 %24, 4
  br i1 %cmp33, label %for.body34, label %for.end39

for.body34:                                       ; preds = %for.cond32
  %25 = load i32, i32* %i, align 4
  %arrayidx35 = getelementptr inbounds [4 x i32], [4 x i32]* %res1, i32 0, i32 %25
  %26 = load i32, i32* %arrayidx35, align 4
  %27 = load i32*, i32** %res.addr, align 4
  %28 = load i32, i32* %i, align 4
  %arrayidx36 = getelementptr inbounds i32, i32* %27, i32 %28
  store i32 %26, i32* %arrayidx36, align 4
  br label %for.inc37

for.inc37:                                        ; preds = %for.body34
  %29 = load i32, i32* %i, align 4
  %inc38 = add nsw i32 %29, 1
  store i32 %inc38, i32* %i, align 4
  br label %for.cond32

for.end39:                                        ; preds = %for.cond32
  br label %if.end40

if.end40:                                         ; preds = %if.end, %for.end39, %for.end30
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %r = alloca i32, align 4
  %c = alloca i32, align 4
  %q = alloca i32, align 4
  %supply_left = alloca i32, align 4
  %total_cost = alloca i32, align 4
  %cell = alloca [4 x i32], align 16
  %results = alloca [4 x [5 x i32]], align 16
  store i32 0, i32* %retval, align 4
  store i32 0, i32* %supply_left, align 4
  store i32 0, i32* %total_cost, align 4
  %0 = bitcast [4 x [5 x i32]]* %results to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 80, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %1, 4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* @supply, i32 0, i32 %2
  %3 = load i32, i32* %arrayidx, align 4
  %4 = load i32, i32* %supply_left, align 4
  %add = add nsw i32 %4, %3
  store i32 %add, i32* %supply_left, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %if.end18, %for.end
  %6 = load i32, i32* %supply_left, align 4
  %cmp1 = icmp sgt i32 %6, 0
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %arraydecay = getelementptr inbounds [4 x i32], [4 x i32]* %cell, i32 0, i32 0
  call void @next_cell(i32* %arraydecay)
  %arrayidx2 = getelementptr inbounds [4 x i32], [4 x i32]* %cell, i32 0, i32 0
  %7 = load i32, i32* %arrayidx2, align 16
  store i32 %7, i32* %r, align 4
  %arrayidx3 = getelementptr inbounds [4 x i32], [4 x i32]* %cell, i32 0, i32 1
  %8 = load i32, i32* %arrayidx3, align 4
  store i32 %8, i32* %c, align 4
  %9 = load i32, i32* %c, align 4
  %arrayidx4 = getelementptr inbounds [5 x i32], [5 x i32]* @demand, i32 0, i32 %9
  %10 = load i32, i32* %arrayidx4, align 4
  %11 = load i32, i32* %r, align 4
  %arrayidx5 = getelementptr inbounds [4 x i32], [4 x i32]* @supply, i32 0, i32 %11
  %12 = load i32, i32* %arrayidx5, align 4
  %cmp6 = icmp sle i32 %10, %12
  br i1 %cmp6, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %13 = load i32, i32* %c, align 4
  %arrayidx7 = getelementptr inbounds [5 x i32], [5 x i32]* @demand, i32 0, i32 %13
  %14 = load i32, i32* %arrayidx7, align 4
  br label %cond.end

cond.false:                                       ; preds = %while.body
  %15 = load i32, i32* %r, align 4
  %arrayidx8 = getelementptr inbounds [4 x i32], [4 x i32]* @supply, i32 0, i32 %15
  %16 = load i32, i32* %arrayidx8, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %14, %cond.true ], [ %16, %cond.false ]
  store i32 %cond, i32* %q, align 4
  %17 = load i32, i32* %q, align 4
  %18 = load i32, i32* %c, align 4
  %arrayidx9 = getelementptr inbounds [5 x i32], [5 x i32]* @demand, i32 0, i32 %18
  %19 = load i32, i32* %arrayidx9, align 4
  %sub = sub nsw i32 %19, %17
  store i32 %sub, i32* %arrayidx9, align 4
  %20 = load i32, i32* %c, align 4
  %arrayidx10 = getelementptr inbounds [5 x i32], [5 x i32]* @demand, i32 0, i32 %20
  %21 = load i32, i32* %arrayidx10, align 4
  %tobool = icmp ne i32 %21, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %cond.end
  %22 = load i32, i32* %c, align 4
  %arrayidx11 = getelementptr inbounds [5 x i32], [5 x i32]* @col_done, i32 0, i32 %22
  store i32 1, i32* %arrayidx11, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end
  %23 = load i32, i32* %q, align 4
  %24 = load i32, i32* %r, align 4
  %arrayidx12 = getelementptr inbounds [4 x i32], [4 x i32]* @supply, i32 0, i32 %24
  %25 = load i32, i32* %arrayidx12, align 4
  %sub13 = sub nsw i32 %25, %23
  store i32 %sub13, i32* %arrayidx12, align 4
  %26 = load i32, i32* %r, align 4
  %arrayidx14 = getelementptr inbounds [4 x i32], [4 x i32]* @supply, i32 0, i32 %26
  %27 = load i32, i32* %arrayidx14, align 4
  %tobool15 = icmp ne i32 %27, 0
  br i1 %tobool15, label %if.end18, label %if.then16

if.then16:                                        ; preds = %if.end
  %28 = load i32, i32* %r, align 4
  %arrayidx17 = getelementptr inbounds [4 x i32], [4 x i32]* @row_done, i32 0, i32 %28
  store i32 1, i32* %arrayidx17, align 4
  br label %if.end18

if.end18:                                         ; preds = %if.then16, %if.end
  %29 = load i32, i32* %q, align 4
  %30 = load i32, i32* %r, align 4
  %arrayidx19 = getelementptr inbounds [4 x [5 x i32]], [4 x [5 x i32]]* %results, i32 0, i32 %30
  %31 = load i32, i32* %c, align 4
  %arrayidx20 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx19, i32 0, i32 %31
  store i32 %29, i32* %arrayidx20, align 4
  %32 = load i32, i32* %q, align 4
  %33 = load i32, i32* %supply_left, align 4
  %sub21 = sub nsw i32 %33, %32
  store i32 %sub21, i32* %supply_left, align 4
  %34 = load i32, i32* %q, align 4
  %35 = load i32, i32* %r, align 4
  %arrayidx22 = getelementptr inbounds [4 x [5 x i32]], [4 x [5 x i32]]* @costs, i32 0, i32 %35
  %36 = load i32, i32* %c, align 4
  %arrayidx23 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx22, i32 0, i32 %36
  %37 = load i32, i32* %arrayidx23, align 4
  %mul = mul nsw i32 %34, %37
  %38 = load i32, i32* %total_cost, align 4
  %add24 = add nsw i32 %38, %mul
  store i32 %add24, i32* %total_cost, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond25

for.cond25:                                       ; preds = %for.inc40, %while.end
  %39 = load i32, i32* %i, align 4
  %cmp26 = icmp slt i32 %39, 4
  br i1 %cmp26, label %for.body27, label %for.end42

for.body27:                                       ; preds = %for.cond25
  %40 = load i32, i32* %i, align 4
  %add28 = add nsw i32 87, %40
  %call29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %add28)
  store i32 0, i32* %j, align 4
  br label %for.cond30

for.cond30:                                       ; preds = %for.inc36, %for.body27
  %41 = load i32, i32* %j, align 4
  %cmp31 = icmp slt i32 %41, 5
  br i1 %cmp31, label %for.body32, label %for.end38

for.body32:                                       ; preds = %for.cond30
  %42 = load i32, i32* %i, align 4
  %arrayidx33 = getelementptr inbounds [4 x [5 x i32]], [4 x [5 x i32]]* %results, i32 0, i32 %42
  %43 = load i32, i32* %j, align 4
  %arrayidx34 = getelementptr inbounds [5 x i32], [5 x i32]* %arrayidx33, i32 0, i32 %43
  %44 = load i32, i32* %arrayidx34, align 4
  %call35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), i32 %44)
  br label %for.inc36

for.inc36:                                        ; preds = %for.body32
  %45 = load i32, i32* %j, align 4
  %inc37 = add nsw i32 %45, 1
  store i32 %inc37, i32* %j, align 4
  br label %for.cond30

for.end38:                                        ; preds = %for.cond30
  %call39 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0))
  br label %for.inc40

for.inc40:                                        ; preds = %for.end38
  %46 = load i32, i32* %i, align 4
  %inc41 = add nsw i32 %46, 1
  store i32 %inc41, i32* %i, align 4
  br label %for.cond25

for.end42:                                        ; preds = %for.cond25
  %47 = load i32, i32* %total_cost, align 4
  %call43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.4, i32 0, i32 0), i32 %47)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %1, 4
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 4:i32
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %supply_left, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %4, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %5, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %supply_left, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = icmp sgt i32 %6, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %arrayidx2, align 16
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %arrayidx3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %arrayidx4, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %r, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %arrayidx5, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp6 = icmp sle i32 %10, %12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %arrayidx7, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %r, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %arrayidx8, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cond = phi i32 [ %14, %cond.true ], [ %16, %cond.false ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %q, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %arrayidx9, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %19, %17
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %arrayidx10, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %21, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %q, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %r, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %arrayidx12, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub13 = sub nsw i32 %25, %23
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %r, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %arrayidx14, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool15 = icmp ne i32 %27, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %r, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %q, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %r, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %q, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %supply_left, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub21 = sub nsw i32 %33, %32
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %q, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %r, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %arrayidx23, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %34, %37
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %38 = load i32, i32* %total_cost, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add24 = add nsw i32 %38, %mul
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = addnsw %0, %3
infer %4

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp26 = icmp slt i32 %39, 4
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 4:i32
infer %1

; *****
; For LLVM instruction:
;  %40 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add28 = add nsw i32 87, %40
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 87:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %41 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp31 = icmp slt i32 %41, 5
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 5:i32
infer %1

; *****
; For LLVM instruction:
;  %42 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %43 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %44 = load i32, i32* %arrayidx34, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %45 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc37 = add nsw i32 %45, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %46 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc41 = add nsw i32 %46, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %47 = load i32, i32* %total_cost, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = addnsw %0, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -4
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 87:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 87
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870999
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 5:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
