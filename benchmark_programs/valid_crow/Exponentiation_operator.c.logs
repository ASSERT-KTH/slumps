
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for ipow()

; ModuleID = './Exponentiation_operator.c.bc'
source_filename = "./Exponentiation_operator.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [10 x i8] c"base != 0\00", align 1
@.str.1 = private unnamed_addr constant [28 x i8] c"./Exponentiation_operator.c\00", align 1
@__func__.ipow = private unnamed_addr constant [5 x i8] c"ipow\00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c"2^6 = %d\0A\00", align 1
@.str.3 = private unnamed_addr constant [11 x i8] c"2^-6 = %d\0A\00", align 1
@.str.4 = private unnamed_addr constant [14 x i8] c"2.71^6 = %lf\0A\00", align 1
@.str.5 = private unnamed_addr constant [15 x i8] c"2.71^-6 = %lf\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @ipow(i32 %base, i32 %exp) #0 {
entry:
  %retval = alloca i32, align 4
  %base.addr = alloca i32, align 4
  %exp.addr = alloca i32, align 4
  %pow = alloca i32, align 4
  %v = alloca i32, align 4
  store i32 %base, i32* %base.addr, align 4
  store i32 %exp, i32* %exp.addr, align 4
  %0 = load i32, i32* %base.addr, align 4
  store i32 %0, i32* %pow, align 4
  store i32 1, i32* %v, align 4
  %1 = load i32, i32* %exp.addr, align 4
  %cmp = icmp slt i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %base.addr, align 4
  %cmp1 = icmp ne i32 %2, 0
  br i1 %cmp1, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.then
  call void @__assert_fail(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.1, i32 0, i32 0), i32 9, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.ipow, i32 0, i32 0)) #3
  unreachable

3:                                                ; No predecessors!
  br label %lor.end

lor.end:                                          ; preds = %3, %if.then
  %4 = phi i1 [ true, %if.then ], [ false, %3 ]
  %lor.ext = zext i1 %4 to i32
  %5 = load i32, i32* %base.addr, align 4
  %6 = load i32, i32* %base.addr, align 4
  %mul = mul nsw i32 %5, %6
  %cmp2 = icmp ne i32 %mul, 1
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.end
  br label %cond.end5

cond.false:                                       ; preds = %lor.end
  %7 = load i32, i32* %exp.addr, align 4
  %and = and i32 %7, 1
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true3, label %cond.false4

cond.true3:                                       ; preds = %cond.false
  %8 = load i32, i32* %base.addr, align 4
  br label %cond.end

cond.false4:                                      ; preds = %cond.false
  br label %cond.end

cond.end:                                         ; preds = %cond.false4, %cond.true3
  %cond = phi i32 [ %8, %cond.true3 ], [ 1, %cond.false4 ]
  br label %cond.end5

cond.end5:                                        ; preds = %cond.end, %cond.true
  %cond6 = phi i32 [ 0, %cond.true ], [ %cond, %cond.end ]
  store i32 %cond6, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %if.end12, %if.end
  %9 = load i32, i32* %exp.addr, align 4
  %cmp7 = icmp sgt i32 %9, 0
  br i1 %cmp7, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %10 = load i32, i32* %exp.addr, align 4
  %and8 = and i32 %10, 1
  %tobool9 = icmp ne i32 %and8, 0
  br i1 %tobool9, label %if.then10, label %if.end12

if.then10:                                        ; preds = %while.body
  %11 = load i32, i32* %pow, align 4
  %12 = load i32, i32* %v, align 4
  %mul11 = mul nsw i32 %12, %11
  store i32 %mul11, i32* %v, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then10, %while.body
  %13 = load i32, i32* %pow, align 4
  %14 = load i32, i32* %pow, align 4
  %mul13 = mul nsw i32 %14, %13
  store i32 %mul13, i32* %pow, align 4
  %15 = load i32, i32* %exp.addr, align 4
  %shr = ashr i32 %15, 1
  store i32 %shr, i32* %exp.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %16 = load i32, i32* %v, align 4
  store i32 %16, i32* %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %cond.end5
  %17 = load i32, i32* %retval, align 4
  ret i32 %17
}

; Function Attrs: noreturn
declare void @__assert_fail(i8* %0, i8* %1, i32 %2, i8* %3) #1

; Function Attrs: noinline nounwind optnone
define hidden double @dpow(double %base, i32 %exp) #0 {
entry:
  %base.addr = alloca double, align 8
  %exp.addr = alloca i32, align 4
  %v = alloca double, align 8
  %pow = alloca double, align 8
  store double %base, double* %base.addr, align 8
  store i32 %exp, i32* %exp.addr, align 4
  store double 1.000000e+00, double* %v, align 8
  %0 = load i32, i32* %exp.addr, align 4
  %cmp = icmp slt i32 %0, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load double, double* %base.addr, align 8
  %div = fdiv double 1.000000e+00, %1
  br label %cond.end

cond.false:                                       ; preds = %entry
  %2 = load double, double* %base.addr, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ %div, %cond.true ], [ %2, %cond.false ]
  store double %cond, double* %pow, align 8
  %3 = load i32, i32* %exp.addr, align 4
  %cmp1 = icmp slt i32 %3, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  %4 = load i32, i32* %exp.addr, align 4
  %sub = sub nsw i32 0, %4
  store i32 %sub, i32* %exp.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end
  br label %while.cond

while.cond:                                       ; preds = %if.end4, %if.end
  %5 = load i32, i32* %exp.addr, align 4
  %cmp2 = icmp sgt i32 %5, 0
  br i1 %cmp2, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load i32, i32* %exp.addr, align 4
  %and = and i32 %6, 1
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then3, label %if.end4

if.then3:                                         ; preds = %while.body
  %7 = load double, double* %pow, align 8
  %8 = load double, double* %v, align 8
  %mul = fmul double %8, %7
  store double %mul, double* %v, align 8
  br label %if.end4

if.end4:                                          ; preds = %if.then3, %while.body
  %9 = load double, double* %pow, align 8
  %10 = load double, double* %pow, align 8
  %mul5 = fmul double %10, %9
  store double %mul5, double* %pow, align 8
  %11 = load i32, i32* %exp.addr, align 4
  %shr = ashr i32 %11, 1
  store i32 %shr, i32* %exp.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %12 = load double, double* %v, align 8
  ret double %12
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %call = call i32 @ipow(i32 2, i32 6)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i32 0, i32 0), i32 %call)
  %call2 = call i32 @ipow(i32 2, i32 -6)
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i32 0, i32 0), i32 %call2)
  %call4 = call double @dpow(double 2.710000e+00, i32 6)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i32 0, i32 0), double %call4)
  %call6 = call double @dpow(double 2.710000e+00, i32 -6)
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.5, i32 0, i32 0), double %call6)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %base.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %exp.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %1, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 0:i32
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %base.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = icmp ne i32 %2, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %4 = phi i1 [ true, %if.then ], [ false, %3 ]
; Looking for a replacement for:
%0 = block 2
%1:i1 = phi %0, 1:i1, 0:i1
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %base.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %base.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %5, %6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %cmp2 = icmp ne i32 %mul, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
%3:i1 = ne 1:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %exp.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00000000000000000000000000000001)

; *****
; For LLVM instruction:
;  %and = and i32 %7, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %and, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 1:i32, %0
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %base.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cond = phi i32 [ %8, %cond.true3 ], [ 1, %cond.false4 ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = phi %0, %1, 1:i32
infer %2

; *****
; For LLVM instruction:
;  %cond6 = phi i32 [ 0, %cond.true ], [ %cond, %cond.end ]
; Looking for a replacement for:
%0 = block 2
%1 = block 2
%2:i32 = var
%3:i32 = phi %1, %2, 1:i32
%4:i32 = phi %0, 0:i32, %3
infer %4

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %exp.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp7 = icmp sgt i32 %9, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %exp.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00000000000000000000000000000001)

; *****
; For LLVM instruction:
;  %and8 = and i32 %10, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool9 = icmp ne i32 %and8, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 1:i32, %0
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %pow, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %v, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul11 = mul nsw i32 %12, %11
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %pow, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %pow, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul13 = mul nsw i32 %14, %13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %exp.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=11111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %shr = ashr i32 %15, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = ashr %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %v, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 0:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i1 = phi %0, 1:i1, 0:i1
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
%3:i1 = ne 1:i32, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0 (demandedBits=00000000000000000000000000000001)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = and 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = and 1:i32, %0
%2:i1 = ne 0:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = phi %0, %1, 1:i32
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0 = block 2
%1 = block 2
%2:i32 = var
%3:i32 = phi %1, %2, 1:i32
%4:i32 = phi %0, 0:i32, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0 = block 2
%1:i32 = var
%2:i32 = phi %0, %1, 1:i32

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0 (demandedBits=11111111111111111111111111111110)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = ashr %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870912
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for ipow()

; entering Souper's runOnFunction() for dpow()

; ModuleID = './Exponentiation_operator.c.bc'
source_filename = "./Exponentiation_operator.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [10 x i8] c"base != 0\00", align 1
@.str.1 = private unnamed_addr constant [28 x i8] c"./Exponentiation_operator.c\00", align 1
@__func__.ipow = private unnamed_addr constant [5 x i8] c"ipow\00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c"2^6 = %d\0A\00", align 1
@.str.3 = private unnamed_addr constant [11 x i8] c"2^-6 = %d\0A\00", align 1
@.str.4 = private unnamed_addr constant [14 x i8] c"2.71^6 = %lf\0A\00", align 1
@.str.5 = private unnamed_addr constant [15 x i8] c"2.71^-6 = %lf\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @ipow(i32 %base, i32 %exp) #0 {
entry:
  %retval = alloca i32, align 4
  %base.addr = alloca i32, align 4
  %exp.addr = alloca i32, align 4
  %pow = alloca i32, align 4
  %v = alloca i32, align 4
  store i32 %base, i32* %base.addr, align 4
  store i32 %exp, i32* %exp.addr, align 4
  %0 = load i32, i32* %base.addr, align 4
  store i32 %0, i32* %pow, align 4
  store i32 1, i32* %v, align 4
  %1 = load i32, i32* %exp.addr, align 4
  %cmp = icmp slt i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %base.addr, align 4
  %cmp1 = icmp ne i32 %2, 0
  br i1 %cmp1, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.then
  call void @__assert_fail(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.1, i32 0, i32 0), i32 9, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.ipow, i32 0, i32 0)) #3
  unreachable

3:                                                ; No predecessors!
  br label %lor.end

lor.end:                                          ; preds = %3, %if.then
  %4 = phi i1 [ true, %if.then ], [ false, %3 ]
  %lor.ext = zext i1 %4 to i32
  %5 = load i32, i32* %base.addr, align 4
  %6 = load i32, i32* %base.addr, align 4
  %mul = mul nsw i32 %5, %6
  %cmp2 = icmp ne i32 %mul, 1
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.end
  br label %cond.end5

cond.false:                                       ; preds = %lor.end
  %7 = load i32, i32* %exp.addr, align 4
  %and = and i32 %7, 1
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true3, label %cond.false4

cond.true3:                                       ; preds = %cond.false
  %8 = load i32, i32* %base.addr, align 4
  br label %cond.end

cond.false4:                                      ; preds = %cond.false
  br label %cond.end

cond.end:                                         ; preds = %cond.false4, %cond.true3
  %cond = phi i32 [ %8, %cond.true3 ], [ 1, %cond.false4 ]
  br label %cond.end5

cond.end5:                                        ; preds = %cond.end, %cond.true
  %cond6 = phi i32 [ 0, %cond.true ], [ %cond, %cond.end ]
  store i32 %cond6, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %if.end12, %if.end
  %9 = load i32, i32* %exp.addr, align 4
  %cmp7 = icmp sgt i32 %9, 0
  br i1 %cmp7, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %10 = load i32, i32* %exp.addr, align 4
  %and8 = and i32 %10, 1
  %tobool9 = icmp ne i32 %and8, 0
  br i1 %tobool9, label %if.then10, label %if.end12

if.then10:                                        ; preds = %while.body
  %11 = load i32, i32* %pow, align 4
  %12 = load i32, i32* %v, align 4
  %mul11 = mul nsw i32 %12, %11
  store i32 %mul11, i32* %v, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then10, %while.body
  %13 = load i32, i32* %pow, align 4
  %14 = load i32, i32* %pow, align 4
  %mul13 = mul nsw i32 %14, %13
  store i32 %mul13, i32* %pow, align 4
  %15 = load i32, i32* %exp.addr, align 4
  %shr = ashr i32 %15, 1
  store i32 %shr, i32* %exp.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %16 = load i32, i32* %v, align 4
  store i32 %16, i32* %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %cond.end5
  %17 = load i32, i32* %retval, align 4
  ret i32 %17
}

; Function Attrs: noreturn
declare void @__assert_fail(i8* %0, i8* %1, i32 %2, i8* %3) #1

; Function Attrs: noinline nounwind optnone
define hidden double @dpow(double %base, i32 %exp) #0 {
entry:
  %base.addr = alloca double, align 8
  %exp.addr = alloca i32, align 4
  %v = alloca double, align 8
  %pow = alloca double, align 8
  store double %base, double* %base.addr, align 8
  store i32 %exp, i32* %exp.addr, align 4
  store double 1.000000e+00, double* %v, align 8
  %0 = load i32, i32* %exp.addr, align 4
  %cmp = icmp slt i32 %0, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load double, double* %base.addr, align 8
  %div = fdiv double 1.000000e+00, %1
  br label %cond.end

cond.false:                                       ; preds = %entry
  %2 = load double, double* %base.addr, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ %div, %cond.true ], [ %2, %cond.false ]
  store double %cond, double* %pow, align 8
  %3 = load i32, i32* %exp.addr, align 4
  %cmp1 = icmp slt i32 %3, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  %4 = load i32, i32* %exp.addr, align 4
  %sub = sub nsw i32 0, %4
  store i32 %sub, i32* %exp.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end
  br label %while.cond

while.cond:                                       ; preds = %if.end4, %if.end
  %5 = load i32, i32* %exp.addr, align 4
  %cmp2 = icmp sgt i32 %5, 0
  br i1 %cmp2, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load i32, i32* %exp.addr, align 4
  %and = and i32 %6, 1
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then3, label %if.end4

if.then3:                                         ; preds = %while.body
  %7 = load double, double* %pow, align 8
  %8 = load double, double* %v, align 8
  %mul = fmul double %8, %7
  store double %mul, double* %v, align 8
  br label %if.end4

if.end4:                                          ; preds = %if.then3, %while.body
  %9 = load double, double* %pow, align 8
  %10 = load double, double* %pow, align 8
  %mul5 = fmul double %10, %9
  store double %mul5, double* %pow, align 8
  %11 = load i32, i32* %exp.addr, align 4
  %shr = ashr i32 %11, 1
  store i32 %shr, i32* %exp.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %12 = load double, double* %v, align 8
  ret double %12
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %call = call i32 @ipow(i32 2, i32 6)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i32 0, i32 0), i32 %call)
  %call2 = call i32 @ipow(i32 2, i32 -6)
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i32 0, i32 0), i32 %call2)
  %call4 = call double @dpow(double 2.710000e+00, i32 6)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i32 0, i32 0), double %call4)
  %call6 = call double @dpow(double 2.710000e+00, i32 -6)
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.5, i32 0, i32 0), double %call6)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %exp.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 0:i32
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %exp.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = icmp slt i32 %3, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 0:i32
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %exp.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 0, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %exp.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp sgt i32 %5, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %exp.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00000000000000000000000000000001)

; *****
; For LLVM instruction:
;  %and = and i32 %6, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %and, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 1:i32, %0
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %exp.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=11111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %shr = ashr i32 %11, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = ashr %0, 1:i32
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -536870912
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for dpow()

; entering Souper's runOnFunction() for main()

; ModuleID = './Exponentiation_operator.c.bc'
source_filename = "./Exponentiation_operator.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [10 x i8] c"base != 0\00", align 1
@.str.1 = private unnamed_addr constant [28 x i8] c"./Exponentiation_operator.c\00", align 1
@__func__.ipow = private unnamed_addr constant [5 x i8] c"ipow\00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c"2^6 = %d\0A\00", align 1
@.str.3 = private unnamed_addr constant [11 x i8] c"2^-6 = %d\0A\00", align 1
@.str.4 = private unnamed_addr constant [14 x i8] c"2.71^6 = %lf\0A\00", align 1
@.str.5 = private unnamed_addr constant [15 x i8] c"2.71^-6 = %lf\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @ipow(i32 %base, i32 %exp) #0 {
entry:
  %retval = alloca i32, align 4
  %base.addr = alloca i32, align 4
  %exp.addr = alloca i32, align 4
  %pow = alloca i32, align 4
  %v = alloca i32, align 4
  store i32 %base, i32* %base.addr, align 4
  store i32 %exp, i32* %exp.addr, align 4
  %0 = load i32, i32* %base.addr, align 4
  store i32 %0, i32* %pow, align 4
  store i32 1, i32* %v, align 4
  %1 = load i32, i32* %exp.addr, align 4
  %cmp = icmp slt i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %base.addr, align 4
  %cmp1 = icmp ne i32 %2, 0
  br i1 %cmp1, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.then
  call void @__assert_fail(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.1, i32 0, i32 0), i32 9, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.ipow, i32 0, i32 0)) #3
  unreachable

3:                                                ; No predecessors!
  br label %lor.end

lor.end:                                          ; preds = %3, %if.then
  %4 = phi i1 [ true, %if.then ], [ false, %3 ]
  %lor.ext = zext i1 %4 to i32
  %5 = load i32, i32* %base.addr, align 4
  %6 = load i32, i32* %base.addr, align 4
  %mul = mul nsw i32 %5, %6
  %cmp2 = icmp ne i32 %mul, 1
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.end
  br label %cond.end5

cond.false:                                       ; preds = %lor.end
  %7 = load i32, i32* %exp.addr, align 4
  %and = and i32 %7, 1
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true3, label %cond.false4

cond.true3:                                       ; preds = %cond.false
  %8 = load i32, i32* %base.addr, align 4
  br label %cond.end

cond.false4:                                      ; preds = %cond.false
  br label %cond.end

cond.end:                                         ; preds = %cond.false4, %cond.true3
  %cond = phi i32 [ %8, %cond.true3 ], [ 1, %cond.false4 ]
  br label %cond.end5

cond.end5:                                        ; preds = %cond.end, %cond.true
  %cond6 = phi i32 [ 0, %cond.true ], [ %cond, %cond.end ]
  store i32 %cond6, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %if.end12, %if.end
  %9 = load i32, i32* %exp.addr, align 4
  %cmp7 = icmp sgt i32 %9, 0
  br i1 %cmp7, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %10 = load i32, i32* %exp.addr, align 4
  %and8 = and i32 %10, 1
  %tobool9 = icmp ne i32 %and8, 0
  br i1 %tobool9, label %if.then10, label %if.end12

if.then10:                                        ; preds = %while.body
  %11 = load i32, i32* %pow, align 4
  %12 = load i32, i32* %v, align 4
  %mul11 = mul nsw i32 %12, %11
  store i32 %mul11, i32* %v, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then10, %while.body
  %13 = load i32, i32* %pow, align 4
  %14 = load i32, i32* %pow, align 4
  %mul13 = mul nsw i32 %14, %13
  store i32 %mul13, i32* %pow, align 4
  %15 = load i32, i32* %exp.addr, align 4
  %shr = ashr i32 %15, 1
  store i32 %shr, i32* %exp.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %16 = load i32, i32* %v, align 4
  store i32 %16, i32* %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %cond.end5
  %17 = load i32, i32* %retval, align 4
  ret i32 %17
}

; Function Attrs: noreturn
declare void @__assert_fail(i8* %0, i8* %1, i32 %2, i8* %3) #1

; Function Attrs: noinline nounwind optnone
define hidden double @dpow(double %base, i32 %exp) #0 {
entry:
  %base.addr = alloca double, align 8
  %exp.addr = alloca i32, align 4
  %v = alloca double, align 8
  %pow = alloca double, align 8
  store double %base, double* %base.addr, align 8
  store i32 %exp, i32* %exp.addr, align 4
  store double 1.000000e+00, double* %v, align 8
  %0 = load i32, i32* %exp.addr, align 4
  %cmp = icmp slt i32 %0, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load double, double* %base.addr, align 8
  %div = fdiv double 1.000000e+00, %1
  br label %cond.end

cond.false:                                       ; preds = %entry
  %2 = load double, double* %base.addr, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ %div, %cond.true ], [ %2, %cond.false ]
  store double %cond, double* %pow, align 8
  %3 = load i32, i32* %exp.addr, align 4
  %cmp1 = icmp slt i32 %3, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  %4 = load i32, i32* %exp.addr, align 4
  %sub = sub nsw i32 0, %4
  store i32 %sub, i32* %exp.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end
  br label %while.cond

while.cond:                                       ; preds = %if.end4, %if.end
  %5 = load i32, i32* %exp.addr, align 4
  %cmp2 = icmp sgt i32 %5, 0
  br i1 %cmp2, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load i32, i32* %exp.addr, align 4
  %and = and i32 %6, 1
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then3, label %if.end4

if.then3:                                         ; preds = %while.body
  %7 = load double, double* %pow, align 8
  %8 = load double, double* %v, align 8
  %mul = fmul double %8, %7
  store double %mul, double* %v, align 8
  br label %if.end4

if.end4:                                          ; preds = %if.then3, %while.body
  %9 = load double, double* %pow, align 8
  %10 = load double, double* %pow, align 8
  %mul5 = fmul double %10, %9
  store double %mul5, double* %pow, align 8
  %11 = load i32, i32* %exp.addr, align 4
  %shr = ashr i32 %11, 1
  store i32 %shr, i32* %exp.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %12 = load double, double* %v, align 8
  ret double %12
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %call = call i32 @ipow(i32 2, i32 6)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i32 0, i32 0), i32 %call)
  %call2 = call i32 @ipow(i32 2, i32 -6)
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i32 0, i32 0), i32 %call2)
  %call4 = call double @dpow(double 2.710000e+00, i32 6)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i32 0, i32 0), double %call4)
  %call6 = call double @dpow(double 2.710000e+00, i32 -6)
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.5, i32 0, i32 0), double %call6)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 @ipow(i32 2, i32 6)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call2 = call i32 @ipow(i32 2, i32 -6)
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
