
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for node_double_new()

; ModuleID = './Parametric_polymorphism.c.bc'
source_filename = "./Parametric_polymorphism.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.node_double_t = type { %struct.node_double_t*, %struct.node_double_t*, double }
%struct.node_int_t = type { %struct.node_int_t*, %struct.node_int_t*, i32 }

@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.node_double_t* @node_double_new(double %v) #0 {
entry:
  %v.addr = alloca double, align 8
  %node = alloca %struct.node_double_t*, align 4
  store double %v, double* %v.addr, align 8
  %call = call noalias i8* @malloc(i32 16)
  %0 = bitcast i8* %call to %struct.node_double_t*
  store %struct.node_double_t* %0, %struct.node_double_t** %node, align 4
  %1 = load double, double* %v.addr, align 8
  %2 = load %struct.node_double_t*, %struct.node_double_t** %node, align 4
  %value = getelementptr inbounds %struct.node_double_t, %struct.node_double_t* %2, i32 0, i32 2
  store double %1, double* %value, align 8
  %3 = load %struct.node_double_t*, %struct.node_double_t** %node, align 4
  %right = getelementptr inbounds %struct.node_double_t, %struct.node_double_t* %3, i32 0, i32 1
  store %struct.node_double_t* null, %struct.node_double_t** %right, align 4
  %4 = load %struct.node_double_t*, %struct.node_double_t** %node, align 4
  %left = getelementptr inbounds %struct.node_double_t, %struct.node_double_t* %4, i32 0, i32 0
  store %struct.node_double_t* null, %struct.node_double_t** %left, align 8
  %5 = load %struct.node_double_t*, %struct.node_double_t** %node, align 4
  ret %struct.node_double_t* %5
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.node_double_t* @node_double_insert(%struct.node_double_t* %root, double %v) #0 {
entry:
  %retval = alloca %struct.node_double_t*, align 4
  %root.addr = alloca %struct.node_double_t*, align 4
  %v.addr = alloca double, align 8
  %n = alloca %struct.node_double_t*, align 4
  store %struct.node_double_t* %root, %struct.node_double_t** %root.addr, align 4
  store double %v, double* %v.addr, align 8
  %0 = load double, double* %v.addr, align 8
  %call = call %struct.node_double_t* @node_double_new(double %0)
  store %struct.node_double_t* %call, %struct.node_double_t** %n, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end13, %entry
  %1 = load %struct.node_double_t*, %struct.node_double_t** %root.addr, align 4
  %tobool = icmp ne %struct.node_double_t* %1, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load %struct.node_double_t*, %struct.node_double_t** %root.addr, align 4
  %value = getelementptr inbounds %struct.node_double_t, %struct.node_double_t* %2, i32 0, i32 2
  %3 = load double, double* %value, align 8
  %4 = load %struct.node_double_t*, %struct.node_double_t** %n, align 4
  %value1 = getelementptr inbounds %struct.node_double_t, %struct.node_double_t* %4, i32 0, i32 2
  %5 = load double, double* %value1, align 8
  %cmp = fcmp olt double %3, %5
  br i1 %cmp, label %if.then, label %if.else6

if.then:                                          ; preds = %while.body
  %6 = load %struct.node_double_t*, %struct.node_double_t** %root.addr, align 4
  %left = getelementptr inbounds %struct.node_double_t, %struct.node_double_t* %6, i32 0, i32 0
  %7 = load %struct.node_double_t*, %struct.node_double_t** %left, align 8
  %tobool2 = icmp ne %struct.node_double_t* %7, null
  br i1 %tobool2, label %if.else, label %if.then3

if.then3:                                         ; preds = %if.then
  %8 = load %struct.node_double_t*, %struct.node_double_t** %n, align 4
  %9 = load %struct.node_double_t*, %struct.node_double_t** %root.addr, align 4
  %left4 = getelementptr inbounds %struct.node_double_t, %struct.node_double_t* %9, i32 0, i32 0
  store %struct.node_double_t* %8, %struct.node_double_t** %left4, align 8
  store %struct.node_double_t* %8, %struct.node_double_t** %retval, align 4
  br label %return

if.else:                                          ; preds = %if.then
  %10 = load %struct.node_double_t*, %struct.node_double_t** %root.addr, align 4
  %left5 = getelementptr inbounds %struct.node_double_t, %struct.node_double_t* %10, i32 0, i32 0
  %11 = load %struct.node_double_t*, %struct.node_double_t** %left5, align 8
  store %struct.node_double_t* %11, %struct.node_double_t** %root.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.else
  br label %if.end13

if.else6:                                         ; preds = %while.body
  %12 = load %struct.node_double_t*, %struct.node_double_t** %root.addr, align 4
  %right = getelementptr inbounds %struct.node_double_t, %struct.node_double_t* %12, i32 0, i32 1
  %13 = load %struct.node_double_t*, %struct.node_double_t** %right, align 4
  %tobool7 = icmp ne %struct.node_double_t* %13, null
  br i1 %tobool7, label %if.else10, label %if.then8

if.then8:                                         ; preds = %if.else6
  %14 = load %struct.node_double_t*, %struct.node_double_t** %n, align 4
  %15 = load %struct.node_double_t*, %struct.node_double_t** %root.addr, align 4
  %right9 = getelementptr inbounds %struct.node_double_t, %struct.node_double_t* %15, i32 0, i32 1
  store %struct.node_double_t* %14, %struct.node_double_t** %right9, align 4
  store %struct.node_double_t* %14, %struct.node_double_t** %retval, align 4
  br label %return

if.else10:                                        ; preds = %if.else6
  %16 = load %struct.node_double_t*, %struct.node_double_t** %root.addr, align 4
  %right11 = getelementptr inbounds %struct.node_double_t, %struct.node_double_t* %16, i32 0, i32 1
  %17 = load %struct.node_double_t*, %struct.node_double_t** %right11, align 4
  store %struct.node_double_t* %17, %struct.node_double_t** %root.addr, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.else10
  br label %if.end13

if.end13:                                         ; preds = %if.end12, %if.end
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store %struct.node_double_t* null, %struct.node_double_t** %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then8, %if.then3
  %18 = load %struct.node_double_t*, %struct.node_double_t** %retval, align 4
  ret %struct.node_double_t* %18
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.node_int_t* @node_int_new(i32 %v) #0 {
entry:
  %v.addr = alloca i32, align 4
  %node = alloca %struct.node_int_t*, align 4
  store i32 %v, i32* %v.addr, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.node_int_t*
  store %struct.node_int_t* %0, %struct.node_int_t** %node, align 4
  %1 = load i32, i32* %v.addr, align 4
  %2 = load %struct.node_int_t*, %struct.node_int_t** %node, align 4
  %value = getelementptr inbounds %struct.node_int_t, %struct.node_int_t* %2, i32 0, i32 2
  store i32 %1, i32* %value, align 4
  %3 = load %struct.node_int_t*, %struct.node_int_t** %node, align 4
  %right = getelementptr inbounds %struct.node_int_t, %struct.node_int_t* %3, i32 0, i32 1
  store %struct.node_int_t* null, %struct.node_int_t** %right, align 4
  %4 = load %struct.node_int_t*, %struct.node_int_t** %node, align 4
  %left = getelementptr inbounds %struct.node_int_t, %struct.node_int_t* %4, i32 0, i32 0
  store %struct.node_int_t* null, %struct.node_int_t** %left, align 4
  %5 = load %struct.node_int_t*, %struct.node_int_t** %node, align 4
  ret %struct.node_int_t* %5
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.node_int_t* @node_int_insert(%struct.node_int_t* %root, i32 %v) #0 {
entry:
  %retval = alloca %struct.node_int_t*, align 4
  %root.addr = alloca %struct.node_int_t*, align 4
  %v.addr = alloca i32, align 4
  %n = alloca %struct.node_int_t*, align 4
  store %struct.node_int_t* %root, %struct.node_int_t** %root.addr, align 4
  store i32 %v, i32* %v.addr, align 4
  %0 = load i32, i32* %v.addr, align 4
  %call = call %struct.node_int_t* @node_int_new(i32 %0)
  store %struct.node_int_t* %call, %struct.node_int_t** %n, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end13, %entry
  %1 = load %struct.node_int_t*, %struct.node_int_t** %root.addr, align 4
  %tobool = icmp ne %struct.node_int_t* %1, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load %struct.node_int_t*, %struct.node_int_t** %root.addr, align 4
  %value = getelementptr inbounds %struct.node_int_t, %struct.node_int_t* %2, i32 0, i32 2
  %3 = load i32, i32* %value, align 4
  %4 = load %struct.node_int_t*, %struct.node_int_t** %n, align 4
  %value1 = getelementptr inbounds %struct.node_int_t, %struct.node_int_t* %4, i32 0, i32 2
  %5 = load i32, i32* %value1, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %if.then, label %if.else6

if.then:                                          ; preds = %while.body
  %6 = load %struct.node_int_t*, %struct.node_int_t** %root.addr, align 4
  %left = getelementptr inbounds %struct.node_int_t, %struct.node_int_t* %6, i32 0, i32 0
  %7 = load %struct.node_int_t*, %struct.node_int_t** %left, align 4
  %tobool2 = icmp ne %struct.node_int_t* %7, null
  br i1 %tobool2, label %if.else, label %if.then3

if.then3:                                         ; preds = %if.then
  %8 = load %struct.node_int_t*, %struct.node_int_t** %n, align 4
  %9 = load %struct.node_int_t*, %struct.node_int_t** %root.addr, align 4
  %left4 = getelementptr inbounds %struct.node_int_t, %struct.node_int_t* %9, i32 0, i32 0
  store %struct.node_int_t* %8, %struct.node_int_t** %left4, align 4
  store %struct.node_int_t* %8, %struct.node_int_t** %retval, align 4
  br label %return

if.else:                                          ; preds = %if.then
  %10 = load %struct.node_int_t*, %struct.node_int_t** %root.addr, align 4
  %left5 = getelementptr inbounds %struct.node_int_t, %struct.node_int_t* %10, i32 0, i32 0
  %11 = load %struct.node_int_t*, %struct.node_int_t** %left5, align 4
  store %struct.node_int_t* %11, %struct.node_int_t** %root.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.else
  br label %if.end13

if.else6:                                         ; preds = %while.body
  %12 = load %struct.node_int_t*, %struct.node_int_t** %root.addr, align 4
  %right = getelementptr inbounds %struct.node_int_t, %struct.node_int_t* %12, i32 0, i32 1
  %13 = load %struct.node_int_t*, %struct.node_int_t** %right, align 4
  %tobool7 = icmp ne %struct.node_int_t* %13, null
  br i1 %tobool7, label %if.else10, label %if.then8

if.then8:                                         ; preds = %if.else6
  %14 = load %struct.node_int_t*, %struct.node_int_t** %n, align 4
  %15 = load %struct.node_int_t*, %struct.node_int_t** %root.addr, align 4
  %right9 = getelementptr inbounds %struct.node_int_t, %struct.node_int_t* %15, i32 0, i32 1
  store %struct.node_int_t* %14, %struct.node_int_t** %right9, align 4
  store %struct.node_int_t* %14, %struct.node_int_t** %retval, align 4
  br label %return

if.else10:                                        ; preds = %if.else6
  %16 = load %struct.node_int_t*, %struct.node_int_t** %root.addr, align 4
  %right11 = getelementptr inbounds %struct.node_int_t, %struct.node_int_t* %16, i32 0, i32 1
  %17 = load %struct.node_int_t*, %struct.node_int_t** %right11, align 4
  store %struct.node_int_t* %17, %struct.node_int_t** %root.addr, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.else10
  br label %if.end13

if.end13:                                         ; preds = %if.end12, %if.end
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store %struct.node_int_t* null, %struct.node_int_t** %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then8, %if.then3
  %18 = load %struct.node_int_t*, %struct.node_int_t** %retval, align 4
  ret %struct.node_int_t* %18
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %root_d = alloca %struct.node_double_t*, align 4
  %root_i = alloca %struct.node_int_t*, align 4
  store i32 0, i32* %retval, align 4
  %call = call i32 @rand()
  %conv = sitofp i32 %call to double
  %div = fdiv double %conv, 0x41DFFFFFFFC00000
  %call1 = call %struct.node_double_t* @node_double_new(double %div)
  store %struct.node_double_t* %call1, %struct.node_double_t** %root_d, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 10000
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load %struct.node_double_t*, %struct.node_double_t** %root_d, align 4
  %call3 = call i32 @rand()
  %conv4 = sitofp i32 %call3 to double
  %div5 = fdiv double %conv4, 0x41DFFFFFFFC00000
  %call6 = call %struct.node_double_t* @node_double_insert(%struct.node_double_t* %1, double %div5)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %i, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call7 = call i32 @rand()
  %call8 = call %struct.node_int_t* @node_int_new(i32 %call7)
  store %struct.node_int_t* %call8, %struct.node_int_t** %root_i, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc15, %for.end
  %3 = load i32, i32* %i, align 4
  %cmp10 = icmp slt i32 %3, 10000
  br i1 %cmp10, label %for.body12, label %for.end17

for.body12:                                       ; preds = %for.cond9
  %4 = load %struct.node_int_t*, %struct.node_int_t** %root_i, align 4
  %call13 = call i32 @rand()
  %call14 = call %struct.node_int_t* @node_int_insert(%struct.node_int_t* %4, i32 %call13)
  br label %for.inc15

for.inc15:                                        ; preds = %for.body12
  %5 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %5, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond9

for.end17:                                        ; preds = %for.cond9
  ret i32 0
}

declare i32 @rand() #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for node_double_new()

; entering Souper's runOnFunction() for node_double_insert()

; ModuleID = './Parametric_polymorphism.c.bc'
source_filename = "./Parametric_polymorphism.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.node_double_t = type { %struct.node_double_t*, %struct.node_double_t*, double }
%struct.node_int_t = type { %struct.node_int_t*, %struct.node_int_t*, i32 }

@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.node_double_t* @node_double_new(double %v) #0 {
entry:
  %v.addr = alloca double, align 8
  %node = alloca %struct.node_double_t*, align 4
  store double %v, double* %v.addr, align 8
  %call = call noalias i8* @malloc(i32 16)
  %0 = bitcast i8* %call to %struct.node_double_t*
  store %struct.node_double_t* %0, %struct.node_double_t** %node, align 4
  %1 = load double, double* %v.addr, align 8
  %2 = load %struct.node_double_t*, %struct.node_double_t** %node, align 4
  %value = getelementptr inbounds %struct.node_double_t, %struct.node_double_t* %2, i32 0, i32 2
  store double %1, double* %value, align 8
  %3 = load %struct.node_double_t*, %struct.node_double_t** %node, align 4
  %right = getelementptr inbounds %struct.node_double_t, %struct.node_double_t* %3, i32 0, i32 1
  store %struct.node_double_t* null, %struct.node_double_t** %right, align 4
  %4 = load %struct.node_double_t*, %struct.node_double_t** %node, align 4
  %left = getelementptr inbounds %struct.node_double_t, %struct.node_double_t* %4, i32 0, i32 0
  store %struct.node_double_t* null, %struct.node_double_t** %left, align 8
  %5 = load %struct.node_double_t*, %struct.node_double_t** %node, align 4
  ret %struct.node_double_t* %5
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.node_double_t* @node_double_insert(%struct.node_double_t* %root, double %v) #0 {
entry:
  %retval = alloca %struct.node_double_t*, align 4
  %root.addr = alloca %struct.node_double_t*, align 4
  %v.addr = alloca double, align 8
  %n = alloca %struct.node_double_t*, align 4
  store %struct.node_double_t* %root, %struct.node_double_t** %root.addr, align 4
  store double %v, double* %v.addr, align 8
  %0 = load double, double* %v.addr, align 8
  %call = call %struct.node_double_t* @node_double_new(double %0)
  store %struct.node_double_t* %call, %struct.node_double_t** %n, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end13, %entry
  %1 = load %struct.node_double_t*, %struct.node_double_t** %root.addr, align 4
  %tobool = icmp ne %struct.node_double_t* %1, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load %struct.node_double_t*, %struct.node_double_t** %root.addr, align 4
  %value = getelementptr inbounds %struct.node_double_t, %struct.node_double_t* %2, i32 0, i32 2
  %3 = load double, double* %value, align 8
  %4 = load %struct.node_double_t*, %struct.node_double_t** %n, align 4
  %value1 = getelementptr inbounds %struct.node_double_t, %struct.node_double_t* %4, i32 0, i32 2
  %5 = load double, double* %value1, align 8
  %cmp = fcmp olt double %3, %5
  br i1 %cmp, label %if.then, label %if.else6

if.then:                                          ; preds = %while.body
  %6 = load %struct.node_double_t*, %struct.node_double_t** %root.addr, align 4
  %left = getelementptr inbounds %struct.node_double_t, %struct.node_double_t* %6, i32 0, i32 0
  %7 = load %struct.node_double_t*, %struct.node_double_t** %left, align 8
  %tobool2 = icmp ne %struct.node_double_t* %7, null
  br i1 %tobool2, label %if.else, label %if.then3

if.then3:                                         ; preds = %if.then
  %8 = load %struct.node_double_t*, %struct.node_double_t** %n, align 4
  %9 = load %struct.node_double_t*, %struct.node_double_t** %root.addr, align 4
  %left4 = getelementptr inbounds %struct.node_double_t, %struct.node_double_t* %9, i32 0, i32 0
  store %struct.node_double_t* %8, %struct.node_double_t** %left4, align 8
  store %struct.node_double_t* %8, %struct.node_double_t** %retval, align 4
  br label %return

if.else:                                          ; preds = %if.then
  %10 = load %struct.node_double_t*, %struct.node_double_t** %root.addr, align 4
  %left5 = getelementptr inbounds %struct.node_double_t, %struct.node_double_t* %10, i32 0, i32 0
  %11 = load %struct.node_double_t*, %struct.node_double_t** %left5, align 8
  store %struct.node_double_t* %11, %struct.node_double_t** %root.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.else
  br label %if.end13

if.else6:                                         ; preds = %while.body
  %12 = load %struct.node_double_t*, %struct.node_double_t** %root.addr, align 4
  %right = getelementptr inbounds %struct.node_double_t, %struct.node_double_t* %12, i32 0, i32 1
  %13 = load %struct.node_double_t*, %struct.node_double_t** %right, align 4
  %tobool7 = icmp ne %struct.node_double_t* %13, null
  br i1 %tobool7, label %if.else10, label %if.then8

if.then8:                                         ; preds = %if.else6
  %14 = load %struct.node_double_t*, %struct.node_double_t** %n, align 4
  %15 = load %struct.node_double_t*, %struct.node_double_t** %root.addr, align 4
  %right9 = getelementptr inbounds %struct.node_double_t, %struct.node_double_t* %15, i32 0, i32 1
  store %struct.node_double_t* %14, %struct.node_double_t** %right9, align 4
  store %struct.node_double_t* %14, %struct.node_double_t** %retval, align 4
  br label %return

if.else10:                                        ; preds = %if.else6
  %16 = load %struct.node_double_t*, %struct.node_double_t** %root.addr, align 4
  %right11 = getelementptr inbounds %struct.node_double_t, %struct.node_double_t* %16, i32 0, i32 1
  %17 = load %struct.node_double_t*, %struct.node_double_t** %right11, align 4
  store %struct.node_double_t* %17, %struct.node_double_t** %root.addr, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.else10
  br label %if.end13

if.end13:                                         ; preds = %if.end12, %if.end
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store %struct.node_double_t* null, %struct.node_double_t** %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then8, %if.then3
  %18 = load %struct.node_double_t*, %struct.node_double_t** %retval, align 4
  ret %struct.node_double_t* %18
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.node_int_t* @node_int_new(i32 %v) #0 {
entry:
  %v.addr = alloca i32, align 4
  %node = alloca %struct.node_int_t*, align 4
  store i32 %v, i32* %v.addr, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.node_int_t*
  store %struct.node_int_t* %0, %struct.node_int_t** %node, align 4
  %1 = load i32, i32* %v.addr, align 4
  %2 = load %struct.node_int_t*, %struct.node_int_t** %node, align 4
  %value = getelementptr inbounds %struct.node_int_t, %struct.node_int_t* %2, i32 0, i32 2
  store i32 %1, i32* %value, align 4
  %3 = load %struct.node_int_t*, %struct.node_int_t** %node, align 4
  %right = getelementptr inbounds %struct.node_int_t, %struct.node_int_t* %3, i32 0, i32 1
  store %struct.node_int_t* null, %struct.node_int_t** %right, align 4
  %4 = load %struct.node_int_t*, %struct.node_int_t** %node, align 4
  %left = getelementptr inbounds %struct.node_int_t, %struct.node_int_t* %4, i32 0, i32 0
  store %struct.node_int_t* null, %struct.node_int_t** %left, align 4
  %5 = load %struct.node_int_t*, %struct.node_int_t** %node, align 4
  ret %struct.node_int_t* %5
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.node_int_t* @node_int_insert(%struct.node_int_t* %root, i32 %v) #0 {
entry:
  %retval = alloca %struct.node_int_t*, align 4
  %root.addr = alloca %struct.node_int_t*, align 4
  %v.addr = alloca i32, align 4
  %n = alloca %struct.node_int_t*, align 4
  store %struct.node_int_t* %root, %struct.node_int_t** %root.addr, align 4
  store i32 %v, i32* %v.addr, align 4
  %0 = load i32, i32* %v.addr, align 4
  %call = call %struct.node_int_t* @node_int_new(i32 %0)
  store %struct.node_int_t* %call, %struct.node_int_t** %n, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end13, %entry
  %1 = load %struct.node_int_t*, %struct.node_int_t** %root.addr, align 4
  %tobool = icmp ne %struct.node_int_t* %1, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load %struct.node_int_t*, %struct.node_int_t** %root.addr, align 4
  %value = getelementptr inbounds %struct.node_int_t, %struct.node_int_t* %2, i32 0, i32 2
  %3 = load i32, i32* %value, align 4
  %4 = load %struct.node_int_t*, %struct.node_int_t** %n, align 4
  %value1 = getelementptr inbounds %struct.node_int_t, %struct.node_int_t* %4, i32 0, i32 2
  %5 = load i32, i32* %value1, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %if.then, label %if.else6

if.then:                                          ; preds = %while.body
  %6 = load %struct.node_int_t*, %struct.node_int_t** %root.addr, align 4
  %left = getelementptr inbounds %struct.node_int_t, %struct.node_int_t* %6, i32 0, i32 0
  %7 = load %struct.node_int_t*, %struct.node_int_t** %left, align 4
  %tobool2 = icmp ne %struct.node_int_t* %7, null
  br i1 %tobool2, label %if.else, label %if.then3

if.then3:                                         ; preds = %if.then
  %8 = load %struct.node_int_t*, %struct.node_int_t** %n, align 4
  %9 = load %struct.node_int_t*, %struct.node_int_t** %root.addr, align 4
  %left4 = getelementptr inbounds %struct.node_int_t, %struct.node_int_t* %9, i32 0, i32 0
  store %struct.node_int_t* %8, %struct.node_int_t** %left4, align 4
  store %struct.node_int_t* %8, %struct.node_int_t** %retval, align 4
  br label %return

if.else:                                          ; preds = %if.then
  %10 = load %struct.node_int_t*, %struct.node_int_t** %root.addr, align 4
  %left5 = getelementptr inbounds %struct.node_int_t, %struct.node_int_t* %10, i32 0, i32 0
  %11 = load %struct.node_int_t*, %struct.node_int_t** %left5, align 4
  store %struct.node_int_t* %11, %struct.node_int_t** %root.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.else
  br label %if.end13

if.else6:                                         ; preds = %while.body
  %12 = load %struct.node_int_t*, %struct.node_int_t** %root.addr, align 4
  %right = getelementptr inbounds %struct.node_int_t, %struct.node_int_t* %12, i32 0, i32 1
  %13 = load %struct.node_int_t*, %struct.node_int_t** %right, align 4
  %tobool7 = icmp ne %struct.node_int_t* %13, null
  br i1 %tobool7, label %if.else10, label %if.then8

if.then8:                                         ; preds = %if.else6
  %14 = load %struct.node_int_t*, %struct.node_int_t** %n, align 4
  %15 = load %struct.node_int_t*, %struct.node_int_t** %root.addr, align 4
  %right9 = getelementptr inbounds %struct.node_int_t, %struct.node_int_t* %15, i32 0, i32 1
  store %struct.node_int_t* %14, %struct.node_int_t** %right9, align 4
  store %struct.node_int_t* %14, %struct.node_int_t** %retval, align 4
  br label %return

if.else10:                                        ; preds = %if.else6
  %16 = load %struct.node_int_t*, %struct.node_int_t** %root.addr, align 4
  %right11 = getelementptr inbounds %struct.node_int_t, %struct.node_int_t* %16, i32 0, i32 1
  %17 = load %struct.node_int_t*, %struct.node_int_t** %right11, align 4
  store %struct.node_int_t* %17, %struct.node_int_t** %root.addr, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.else10
  br label %if.end13

if.end13:                                         ; preds = %if.end12, %if.end
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store %struct.node_int_t* null, %struct.node_int_t** %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then8, %if.then3
  %18 = load %struct.node_int_t*, %struct.node_int_t** %retval, align 4
  ret %struct.node_int_t* %18
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %root_d = alloca %struct.node_double_t*, align 4
  %root_i = alloca %struct.node_int_t*, align 4
  store i32 0, i32* %retval, align 4
  %call = call i32 @rand()
  %conv = sitofp i32 %call to double
  %div = fdiv double %conv, 0x41DFFFFFFFC00000
  %call1 = call %struct.node_double_t* @node_double_new(double %div)
  store %struct.node_double_t* %call1, %struct.node_double_t** %root_d, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 10000
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load %struct.node_double_t*, %struct.node_double_t** %root_d, align 4
  %call3 = call i32 @rand()
  %conv4 = sitofp i32 %call3 to double
  %div5 = fdiv double %conv4, 0x41DFFFFFFFC00000
  %call6 = call %struct.node_double_t* @node_double_insert(%struct.node_double_t* %1, double %div5)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %i, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call7 = call i32 @rand()
  %call8 = call %struct.node_int_t* @node_int_new(i32 %call7)
  store %struct.node_int_t* %call8, %struct.node_int_t** %root_i, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc15, %for.end
  %3 = load i32, i32* %i, align 4
  %cmp10 = icmp slt i32 %3, 10000
  br i1 %cmp10, label %for.body12, label %for.end17

for.body12:                                       ; preds = %for.cond9
  %4 = load %struct.node_int_t*, %struct.node_int_t** %root_i, align 4
  %call13 = call i32 @rand()
  %call14 = call %struct.node_int_t* @node_int_insert(%struct.node_int_t* %4, i32 %call13)
  br label %for.inc15

for.inc15:                                        ; preds = %for.body12
  %5 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %5, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond9

for.end17:                                        ; preds = %for.cond9
  ret i32 0
}

declare i32 @rand() #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %tobool = icmp ne %struct.node_double_t* %1, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp = fcmp olt double %3, %5
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool2 = icmp ne %struct.node_double_t* %7, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool7 = icmp ne %struct.node_double_t* %13, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for node_double_insert()

; entering Souper's runOnFunction() for node_int_new()

; ModuleID = './Parametric_polymorphism.c.bc'
source_filename = "./Parametric_polymorphism.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.node_double_t = type { %struct.node_double_t*, %struct.node_double_t*, double }
%struct.node_int_t = type { %struct.node_int_t*, %struct.node_int_t*, i32 }

@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.node_double_t* @node_double_new(double %v) #0 {
entry:
  %v.addr = alloca double, align 8
  %node = alloca %struct.node_double_t*, align 4
  store double %v, double* %v.addr, align 8
  %call = call noalias i8* @malloc(i32 16)
  %0 = bitcast i8* %call to %struct.node_double_t*
  store %struct.node_double_t* %0, %struct.node_double_t** %node, align 4
  %1 = load double, double* %v.addr, align 8
  %2 = load %struct.node_double_t*, %struct.node_double_t** %node, align 4
  %value = getelementptr inbounds %struct.node_double_t, %struct.node_double_t* %2, i32 0, i32 2
  store double %1, double* %value, align 8
  %3 = load %struct.node_double_t*, %struct.node_double_t** %node, align 4
  %right = getelementptr inbounds %struct.node_double_t, %struct.node_double_t* %3, i32 0, i32 1
  store %struct.node_double_t* null, %struct.node_double_t** %right, align 4
  %4 = load %struct.node_double_t*, %struct.node_double_t** %node, align 4
  %left = getelementptr inbounds %struct.node_double_t, %struct.node_double_t* %4, i32 0, i32 0
  store %struct.node_double_t* null, %struct.node_double_t** %left, align 8
  %5 = load %struct.node_double_t*, %struct.node_double_t** %node, align 4
  ret %struct.node_double_t* %5
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.node_double_t* @node_double_insert(%struct.node_double_t* %root, double %v) #0 {
entry:
  %retval = alloca %struct.node_double_t*, align 4
  %root.addr = alloca %struct.node_double_t*, align 4
  %v.addr = alloca double, align 8
  %n = alloca %struct.node_double_t*, align 4
  store %struct.node_double_t* %root, %struct.node_double_t** %root.addr, align 4
  store double %v, double* %v.addr, align 8
  %0 = load double, double* %v.addr, align 8
  %call = call %struct.node_double_t* @node_double_new(double %0)
  store %struct.node_double_t* %call, %struct.node_double_t** %n, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end13, %entry
  %1 = load %struct.node_double_t*, %struct.node_double_t** %root.addr, align 4
  %tobool = icmp ne %struct.node_double_t* %1, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load %struct.node_double_t*, %struct.node_double_t** %root.addr, align 4
  %value = getelementptr inbounds %struct.node_double_t, %struct.node_double_t* %2, i32 0, i32 2
  %3 = load double, double* %value, align 8
  %4 = load %struct.node_double_t*, %struct.node_double_t** %n, align 4
  %value1 = getelementptr inbounds %struct.node_double_t, %struct.node_double_t* %4, i32 0, i32 2
  %5 = load double, double* %value1, align 8
  %cmp = fcmp olt double %3, %5
  br i1 %cmp, label %if.then, label %if.else6

if.then:                                          ; preds = %while.body
  %6 = load %struct.node_double_t*, %struct.node_double_t** %root.addr, align 4
  %left = getelementptr inbounds %struct.node_double_t, %struct.node_double_t* %6, i32 0, i32 0
  %7 = load %struct.node_double_t*, %struct.node_double_t** %left, align 8
  %tobool2 = icmp ne %struct.node_double_t* %7, null
  br i1 %tobool2, label %if.else, label %if.then3

if.then3:                                         ; preds = %if.then
  %8 = load %struct.node_double_t*, %struct.node_double_t** %n, align 4
  %9 = load %struct.node_double_t*, %struct.node_double_t** %root.addr, align 4
  %left4 = getelementptr inbounds %struct.node_double_t, %struct.node_double_t* %9, i32 0, i32 0
  store %struct.node_double_t* %8, %struct.node_double_t** %left4, align 8
  store %struct.node_double_t* %8, %struct.node_double_t** %retval, align 4
  br label %return

if.else:                                          ; preds = %if.then
  %10 = load %struct.node_double_t*, %struct.node_double_t** %root.addr, align 4
  %left5 = getelementptr inbounds %struct.node_double_t, %struct.node_double_t* %10, i32 0, i32 0
  %11 = load %struct.node_double_t*, %struct.node_double_t** %left5, align 8
  store %struct.node_double_t* %11, %struct.node_double_t** %root.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.else
  br label %if.end13

if.else6:                                         ; preds = %while.body
  %12 = load %struct.node_double_t*, %struct.node_double_t** %root.addr, align 4
  %right = getelementptr inbounds %struct.node_double_t, %struct.node_double_t* %12, i32 0, i32 1
  %13 = load %struct.node_double_t*, %struct.node_double_t** %right, align 4
  %tobool7 = icmp ne %struct.node_double_t* %13, null
  br i1 %tobool7, label %if.else10, label %if.then8

if.then8:                                         ; preds = %if.else6
  %14 = load %struct.node_double_t*, %struct.node_double_t** %n, align 4
  %15 = load %struct.node_double_t*, %struct.node_double_t** %root.addr, align 4
  %right9 = getelementptr inbounds %struct.node_double_t, %struct.node_double_t* %15, i32 0, i32 1
  store %struct.node_double_t* %14, %struct.node_double_t** %right9, align 4
  store %struct.node_double_t* %14, %struct.node_double_t** %retval, align 4
  br label %return

if.else10:                                        ; preds = %if.else6
  %16 = load %struct.node_double_t*, %struct.node_double_t** %root.addr, align 4
  %right11 = getelementptr inbounds %struct.node_double_t, %struct.node_double_t* %16, i32 0, i32 1
  %17 = load %struct.node_double_t*, %struct.node_double_t** %right11, align 4
  store %struct.node_double_t* %17, %struct.node_double_t** %root.addr, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.else10
  br label %if.end13

if.end13:                                         ; preds = %if.end12, %if.end
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store %struct.node_double_t* null, %struct.node_double_t** %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then8, %if.then3
  %18 = load %struct.node_double_t*, %struct.node_double_t** %retval, align 4
  ret %struct.node_double_t* %18
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.node_int_t* @node_int_new(i32 %v) #0 {
entry:
  %v.addr = alloca i32, align 4
  %node = alloca %struct.node_int_t*, align 4
  store i32 %v, i32* %v.addr, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.node_int_t*
  store %struct.node_int_t* %0, %struct.node_int_t** %node, align 4
  %1 = load i32, i32* %v.addr, align 4
  %2 = load %struct.node_int_t*, %struct.node_int_t** %node, align 4
  %value = getelementptr inbounds %struct.node_int_t, %struct.node_int_t* %2, i32 0, i32 2
  store i32 %1, i32* %value, align 4
  %3 = load %struct.node_int_t*, %struct.node_int_t** %node, align 4
  %right = getelementptr inbounds %struct.node_int_t, %struct.node_int_t* %3, i32 0, i32 1
  store %struct.node_int_t* null, %struct.node_int_t** %right, align 4
  %4 = load %struct.node_int_t*, %struct.node_int_t** %node, align 4
  %left = getelementptr inbounds %struct.node_int_t, %struct.node_int_t* %4, i32 0, i32 0
  store %struct.node_int_t* null, %struct.node_int_t** %left, align 4
  %5 = load %struct.node_int_t*, %struct.node_int_t** %node, align 4
  ret %struct.node_int_t* %5
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.node_int_t* @node_int_insert(%struct.node_int_t* %root, i32 %v) #0 {
entry:
  %retval = alloca %struct.node_int_t*, align 4
  %root.addr = alloca %struct.node_int_t*, align 4
  %v.addr = alloca i32, align 4
  %n = alloca %struct.node_int_t*, align 4
  store %struct.node_int_t* %root, %struct.node_int_t** %root.addr, align 4
  store i32 %v, i32* %v.addr, align 4
  %0 = load i32, i32* %v.addr, align 4
  %call = call %struct.node_int_t* @node_int_new(i32 %0)
  store %struct.node_int_t* %call, %struct.node_int_t** %n, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end13, %entry
  %1 = load %struct.node_int_t*, %struct.node_int_t** %root.addr, align 4
  %tobool = icmp ne %struct.node_int_t* %1, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load %struct.node_int_t*, %struct.node_int_t** %root.addr, align 4
  %value = getelementptr inbounds %struct.node_int_t, %struct.node_int_t* %2, i32 0, i32 2
  %3 = load i32, i32* %value, align 4
  %4 = load %struct.node_int_t*, %struct.node_int_t** %n, align 4
  %value1 = getelementptr inbounds %struct.node_int_t, %struct.node_int_t* %4, i32 0, i32 2
  %5 = load i32, i32* %value1, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %if.then, label %if.else6

if.then:                                          ; preds = %while.body
  %6 = load %struct.node_int_t*, %struct.node_int_t** %root.addr, align 4
  %left = getelementptr inbounds %struct.node_int_t, %struct.node_int_t* %6, i32 0, i32 0
  %7 = load %struct.node_int_t*, %struct.node_int_t** %left, align 4
  %tobool2 = icmp ne %struct.node_int_t* %7, null
  br i1 %tobool2, label %if.else, label %if.then3

if.then3:                                         ; preds = %if.then
  %8 = load %struct.node_int_t*, %struct.node_int_t** %n, align 4
  %9 = load %struct.node_int_t*, %struct.node_int_t** %root.addr, align 4
  %left4 = getelementptr inbounds %struct.node_int_t, %struct.node_int_t* %9, i32 0, i32 0
  store %struct.node_int_t* %8, %struct.node_int_t** %left4, align 4
  store %struct.node_int_t* %8, %struct.node_int_t** %retval, align 4
  br label %return

if.else:                                          ; preds = %if.then
  %10 = load %struct.node_int_t*, %struct.node_int_t** %root.addr, align 4
  %left5 = getelementptr inbounds %struct.node_int_t, %struct.node_int_t* %10, i32 0, i32 0
  %11 = load %struct.node_int_t*, %struct.node_int_t** %left5, align 4
  store %struct.node_int_t* %11, %struct.node_int_t** %root.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.else
  br label %if.end13

if.else6:                                         ; preds = %while.body
  %12 = load %struct.node_int_t*, %struct.node_int_t** %root.addr, align 4
  %right = getelementptr inbounds %struct.node_int_t, %struct.node_int_t* %12, i32 0, i32 1
  %13 = load %struct.node_int_t*, %struct.node_int_t** %right, align 4
  %tobool7 = icmp ne %struct.node_int_t* %13, null
  br i1 %tobool7, label %if.else10, label %if.then8

if.then8:                                         ; preds = %if.else6
  %14 = load %struct.node_int_t*, %struct.node_int_t** %n, align 4
  %15 = load %struct.node_int_t*, %struct.node_int_t** %root.addr, align 4
  %right9 = getelementptr inbounds %struct.node_int_t, %struct.node_int_t* %15, i32 0, i32 1
  store %struct.node_int_t* %14, %struct.node_int_t** %right9, align 4
  store %struct.node_int_t* %14, %struct.node_int_t** %retval, align 4
  br label %return

if.else10:                                        ; preds = %if.else6
  %16 = load %struct.node_int_t*, %struct.node_int_t** %root.addr, align 4
  %right11 = getelementptr inbounds %struct.node_int_t, %struct.node_int_t* %16, i32 0, i32 1
  %17 = load %struct.node_int_t*, %struct.node_int_t** %right11, align 4
  store %struct.node_int_t* %17, %struct.node_int_t** %root.addr, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.else10
  br label %if.end13

if.end13:                                         ; preds = %if.end12, %if.end
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store %struct.node_int_t* null, %struct.node_int_t** %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then8, %if.then3
  %18 = load %struct.node_int_t*, %struct.node_int_t** %retval, align 4
  ret %struct.node_int_t* %18
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %root_d = alloca %struct.node_double_t*, align 4
  %root_i = alloca %struct.node_int_t*, align 4
  store i32 0, i32* %retval, align 4
  %call = call i32 @rand()
  %conv = sitofp i32 %call to double
  %div = fdiv double %conv, 0x41DFFFFFFFC00000
  %call1 = call %struct.node_double_t* @node_double_new(double %div)
  store %struct.node_double_t* %call1, %struct.node_double_t** %root_d, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 10000
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load %struct.node_double_t*, %struct.node_double_t** %root_d, align 4
  %call3 = call i32 @rand()
  %conv4 = sitofp i32 %call3 to double
  %div5 = fdiv double %conv4, 0x41DFFFFFFFC00000
  %call6 = call %struct.node_double_t* @node_double_insert(%struct.node_double_t* %1, double %div5)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %i, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call7 = call i32 @rand()
  %call8 = call %struct.node_int_t* @node_int_new(i32 %call7)
  store %struct.node_int_t* %call8, %struct.node_int_t** %root_i, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc15, %for.end
  %3 = load i32, i32* %i, align 4
  %cmp10 = icmp slt i32 %3, 10000
  br i1 %cmp10, label %for.body12, label %for.end17

for.body12:                                       ; preds = %for.cond9
  %4 = load %struct.node_int_t*, %struct.node_int_t** %root_i, align 4
  %call13 = call i32 @rand()
  %call14 = call %struct.node_int_t* @node_int_insert(%struct.node_int_t* %4, i32 %call13)
  br label %for.inc15

for.inc15:                                        ; preds = %for.body12
  %5 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %5, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond9

for.end17:                                        ; preds = %for.cond9
  ret i32 0
}

declare i32 @rand() #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %v.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for node_int_new()

; entering Souper's runOnFunction() for node_int_insert()

; ModuleID = './Parametric_polymorphism.c.bc'
source_filename = "./Parametric_polymorphism.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.node_double_t = type { %struct.node_double_t*, %struct.node_double_t*, double }
%struct.node_int_t = type { %struct.node_int_t*, %struct.node_int_t*, i32 }

@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.node_double_t* @node_double_new(double %v) #0 {
entry:
  %v.addr = alloca double, align 8
  %node = alloca %struct.node_double_t*, align 4
  store double %v, double* %v.addr, align 8
  %call = call noalias i8* @malloc(i32 16)
  %0 = bitcast i8* %call to %struct.node_double_t*
  store %struct.node_double_t* %0, %struct.node_double_t** %node, align 4
  %1 = load double, double* %v.addr, align 8
  %2 = load %struct.node_double_t*, %struct.node_double_t** %node, align 4
  %value = getelementptr inbounds %struct.node_double_t, %struct.node_double_t* %2, i32 0, i32 2
  store double %1, double* %value, align 8
  %3 = load %struct.node_double_t*, %struct.node_double_t** %node, align 4
  %right = getelementptr inbounds %struct.node_double_t, %struct.node_double_t* %3, i32 0, i32 1
  store %struct.node_double_t* null, %struct.node_double_t** %right, align 4
  %4 = load %struct.node_double_t*, %struct.node_double_t** %node, align 4
  %left = getelementptr inbounds %struct.node_double_t, %struct.node_double_t* %4, i32 0, i32 0
  store %struct.node_double_t* null, %struct.node_double_t** %left, align 8
  %5 = load %struct.node_double_t*, %struct.node_double_t** %node, align 4
  ret %struct.node_double_t* %5
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.node_double_t* @node_double_insert(%struct.node_double_t* %root, double %v) #0 {
entry:
  %retval = alloca %struct.node_double_t*, align 4
  %root.addr = alloca %struct.node_double_t*, align 4
  %v.addr = alloca double, align 8
  %n = alloca %struct.node_double_t*, align 4
  store %struct.node_double_t* %root, %struct.node_double_t** %root.addr, align 4
  store double %v, double* %v.addr, align 8
  %0 = load double, double* %v.addr, align 8
  %call = call %struct.node_double_t* @node_double_new(double %0)
  store %struct.node_double_t* %call, %struct.node_double_t** %n, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end13, %entry
  %1 = load %struct.node_double_t*, %struct.node_double_t** %root.addr, align 4
  %tobool = icmp ne %struct.node_double_t* %1, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load %struct.node_double_t*, %struct.node_double_t** %root.addr, align 4
  %value = getelementptr inbounds %struct.node_double_t, %struct.node_double_t* %2, i32 0, i32 2
  %3 = load double, double* %value, align 8
  %4 = load %struct.node_double_t*, %struct.node_double_t** %n, align 4
  %value1 = getelementptr inbounds %struct.node_double_t, %struct.node_double_t* %4, i32 0, i32 2
  %5 = load double, double* %value1, align 8
  %cmp = fcmp olt double %3, %5
  br i1 %cmp, label %if.then, label %if.else6

if.then:                                          ; preds = %while.body
  %6 = load %struct.node_double_t*, %struct.node_double_t** %root.addr, align 4
  %left = getelementptr inbounds %struct.node_double_t, %struct.node_double_t* %6, i32 0, i32 0
  %7 = load %struct.node_double_t*, %struct.node_double_t** %left, align 8
  %tobool2 = icmp ne %struct.node_double_t* %7, null
  br i1 %tobool2, label %if.else, label %if.then3

if.then3:                                         ; preds = %if.then
  %8 = load %struct.node_double_t*, %struct.node_double_t** %n, align 4
  %9 = load %struct.node_double_t*, %struct.node_double_t** %root.addr, align 4
  %left4 = getelementptr inbounds %struct.node_double_t, %struct.node_double_t* %9, i32 0, i32 0
  store %struct.node_double_t* %8, %struct.node_double_t** %left4, align 8
  store %struct.node_double_t* %8, %struct.node_double_t** %retval, align 4
  br label %return

if.else:                                          ; preds = %if.then
  %10 = load %struct.node_double_t*, %struct.node_double_t** %root.addr, align 4
  %left5 = getelementptr inbounds %struct.node_double_t, %struct.node_double_t* %10, i32 0, i32 0
  %11 = load %struct.node_double_t*, %struct.node_double_t** %left5, align 8
  store %struct.node_double_t* %11, %struct.node_double_t** %root.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.else
  br label %if.end13

if.else6:                                         ; preds = %while.body
  %12 = load %struct.node_double_t*, %struct.node_double_t** %root.addr, align 4
  %right = getelementptr inbounds %struct.node_double_t, %struct.node_double_t* %12, i32 0, i32 1
  %13 = load %struct.node_double_t*, %struct.node_double_t** %right, align 4
  %tobool7 = icmp ne %struct.node_double_t* %13, null
  br i1 %tobool7, label %if.else10, label %if.then8

if.then8:                                         ; preds = %if.else6
  %14 = load %struct.node_double_t*, %struct.node_double_t** %n, align 4
  %15 = load %struct.node_double_t*, %struct.node_double_t** %root.addr, align 4
  %right9 = getelementptr inbounds %struct.node_double_t, %struct.node_double_t* %15, i32 0, i32 1
  store %struct.node_double_t* %14, %struct.node_double_t** %right9, align 4
  store %struct.node_double_t* %14, %struct.node_double_t** %retval, align 4
  br label %return

if.else10:                                        ; preds = %if.else6
  %16 = load %struct.node_double_t*, %struct.node_double_t** %root.addr, align 4
  %right11 = getelementptr inbounds %struct.node_double_t, %struct.node_double_t* %16, i32 0, i32 1
  %17 = load %struct.node_double_t*, %struct.node_double_t** %right11, align 4
  store %struct.node_double_t* %17, %struct.node_double_t** %root.addr, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.else10
  br label %if.end13

if.end13:                                         ; preds = %if.end12, %if.end
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store %struct.node_double_t* null, %struct.node_double_t** %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then8, %if.then3
  %18 = load %struct.node_double_t*, %struct.node_double_t** %retval, align 4
  ret %struct.node_double_t* %18
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.node_int_t* @node_int_new(i32 %v) #0 {
entry:
  %v.addr = alloca i32, align 4
  %node = alloca %struct.node_int_t*, align 4
  store i32 %v, i32* %v.addr, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.node_int_t*
  store %struct.node_int_t* %0, %struct.node_int_t** %node, align 4
  %1 = load i32, i32* %v.addr, align 4
  %2 = load %struct.node_int_t*, %struct.node_int_t** %node, align 4
  %value = getelementptr inbounds %struct.node_int_t, %struct.node_int_t* %2, i32 0, i32 2
  store i32 %1, i32* %value, align 4
  %3 = load %struct.node_int_t*, %struct.node_int_t** %node, align 4
  %right = getelementptr inbounds %struct.node_int_t, %struct.node_int_t* %3, i32 0, i32 1
  store %struct.node_int_t* null, %struct.node_int_t** %right, align 4
  %4 = load %struct.node_int_t*, %struct.node_int_t** %node, align 4
  %left = getelementptr inbounds %struct.node_int_t, %struct.node_int_t* %4, i32 0, i32 0
  store %struct.node_int_t* null, %struct.node_int_t** %left, align 4
  %5 = load %struct.node_int_t*, %struct.node_int_t** %node, align 4
  ret %struct.node_int_t* %5
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.node_int_t* @node_int_insert(%struct.node_int_t* %root, i32 %v) #0 {
entry:
  %retval = alloca %struct.node_int_t*, align 4
  %root.addr = alloca %struct.node_int_t*, align 4
  %v.addr = alloca i32, align 4
  %n = alloca %struct.node_int_t*, align 4
  store %struct.node_int_t* %root, %struct.node_int_t** %root.addr, align 4
  store i32 %v, i32* %v.addr, align 4
  %0 = load i32, i32* %v.addr, align 4
  %call = call %struct.node_int_t* @node_int_new(i32 %0)
  store %struct.node_int_t* %call, %struct.node_int_t** %n, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end13, %entry
  %1 = load %struct.node_int_t*, %struct.node_int_t** %root.addr, align 4
  %tobool = icmp ne %struct.node_int_t* %1, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load %struct.node_int_t*, %struct.node_int_t** %root.addr, align 4
  %value = getelementptr inbounds %struct.node_int_t, %struct.node_int_t* %2, i32 0, i32 2
  %3 = load i32, i32* %value, align 4
  %4 = load %struct.node_int_t*, %struct.node_int_t** %n, align 4
  %value1 = getelementptr inbounds %struct.node_int_t, %struct.node_int_t* %4, i32 0, i32 2
  %5 = load i32, i32* %value1, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %if.then, label %if.else6

if.then:                                          ; preds = %while.body
  %6 = load %struct.node_int_t*, %struct.node_int_t** %root.addr, align 4
  %left = getelementptr inbounds %struct.node_int_t, %struct.node_int_t* %6, i32 0, i32 0
  %7 = load %struct.node_int_t*, %struct.node_int_t** %left, align 4
  %tobool2 = icmp ne %struct.node_int_t* %7, null
  br i1 %tobool2, label %if.else, label %if.then3

if.then3:                                         ; preds = %if.then
  %8 = load %struct.node_int_t*, %struct.node_int_t** %n, align 4
  %9 = load %struct.node_int_t*, %struct.node_int_t** %root.addr, align 4
  %left4 = getelementptr inbounds %struct.node_int_t, %struct.node_int_t* %9, i32 0, i32 0
  store %struct.node_int_t* %8, %struct.node_int_t** %left4, align 4
  store %struct.node_int_t* %8, %struct.node_int_t** %retval, align 4
  br label %return

if.else:                                          ; preds = %if.then
  %10 = load %struct.node_int_t*, %struct.node_int_t** %root.addr, align 4
  %left5 = getelementptr inbounds %struct.node_int_t, %struct.node_int_t* %10, i32 0, i32 0
  %11 = load %struct.node_int_t*, %struct.node_int_t** %left5, align 4
  store %struct.node_int_t* %11, %struct.node_int_t** %root.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.else
  br label %if.end13

if.else6:                                         ; preds = %while.body
  %12 = load %struct.node_int_t*, %struct.node_int_t** %root.addr, align 4
  %right = getelementptr inbounds %struct.node_int_t, %struct.node_int_t* %12, i32 0, i32 1
  %13 = load %struct.node_int_t*, %struct.node_int_t** %right, align 4
  %tobool7 = icmp ne %struct.node_int_t* %13, null
  br i1 %tobool7, label %if.else10, label %if.then8

if.then8:                                         ; preds = %if.else6
  %14 = load %struct.node_int_t*, %struct.node_int_t** %n, align 4
  %15 = load %struct.node_int_t*, %struct.node_int_t** %root.addr, align 4
  %right9 = getelementptr inbounds %struct.node_int_t, %struct.node_int_t* %15, i32 0, i32 1
  store %struct.node_int_t* %14, %struct.node_int_t** %right9, align 4
  store %struct.node_int_t* %14, %struct.node_int_t** %retval, align 4
  br label %return

if.else10:                                        ; preds = %if.else6
  %16 = load %struct.node_int_t*, %struct.node_int_t** %root.addr, align 4
  %right11 = getelementptr inbounds %struct.node_int_t, %struct.node_int_t* %16, i32 0, i32 1
  %17 = load %struct.node_int_t*, %struct.node_int_t** %right11, align 4
  store %struct.node_int_t* %17, %struct.node_int_t** %root.addr, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.else10
  br label %if.end13

if.end13:                                         ; preds = %if.end12, %if.end
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store %struct.node_int_t* null, %struct.node_int_t** %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then8, %if.then3
  %18 = load %struct.node_int_t*, %struct.node_int_t** %retval, align 4
  ret %struct.node_int_t* %18
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %root_d = alloca %struct.node_double_t*, align 4
  %root_i = alloca %struct.node_int_t*, align 4
  store i32 0, i32* %retval, align 4
  %call = call i32 @rand()
  %conv = sitofp i32 %call to double
  %div = fdiv double %conv, 0x41DFFFFFFFC00000
  %call1 = call %struct.node_double_t* @node_double_new(double %div)
  store %struct.node_double_t* %call1, %struct.node_double_t** %root_d, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 10000
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load %struct.node_double_t*, %struct.node_double_t** %root_d, align 4
  %call3 = call i32 @rand()
  %conv4 = sitofp i32 %call3 to double
  %div5 = fdiv double %conv4, 0x41DFFFFFFFC00000
  %call6 = call %struct.node_double_t* @node_double_insert(%struct.node_double_t* %1, double %div5)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %i, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call7 = call i32 @rand()
  %call8 = call %struct.node_int_t* @node_int_new(i32 %call7)
  store %struct.node_int_t* %call8, %struct.node_int_t** %root_i, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc15, %for.end
  %3 = load i32, i32* %i, align 4
  %cmp10 = icmp slt i32 %3, 10000
  br i1 %cmp10, label %for.body12, label %for.end17

for.body12:                                       ; preds = %for.cond9
  %4 = load %struct.node_int_t*, %struct.node_int_t** %root_i, align 4
  %call13 = call i32 @rand()
  %call14 = call %struct.node_int_t* @node_int_insert(%struct.node_int_t* %4, i32 %call13)
  br label %for.inc15

for.inc15:                                        ; preds = %for.body12
  %5 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %5, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond9

for.end17:                                        ; preds = %for.cond9
  ret i32 0
}

declare i32 @rand() #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %v.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne %struct.node_int_t* %1, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %value, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %value1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %3, %5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %tobool2 = icmp ne %struct.node_int_t* %7, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool7 = icmp ne %struct.node_int_t* %13, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for node_int_insert()

; entering Souper's runOnFunction() for main()

; ModuleID = './Parametric_polymorphism.c.bc'
source_filename = "./Parametric_polymorphism.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.node_double_t = type { %struct.node_double_t*, %struct.node_double_t*, double }
%struct.node_int_t = type { %struct.node_int_t*, %struct.node_int_t*, i32 }

@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.node_double_t* @node_double_new(double %v) #0 {
entry:
  %v.addr = alloca double, align 8
  %node = alloca %struct.node_double_t*, align 4
  store double %v, double* %v.addr, align 8
  %call = call noalias i8* @malloc(i32 16)
  %0 = bitcast i8* %call to %struct.node_double_t*
  store %struct.node_double_t* %0, %struct.node_double_t** %node, align 4
  %1 = load double, double* %v.addr, align 8
  %2 = load %struct.node_double_t*, %struct.node_double_t** %node, align 4
  %value = getelementptr inbounds %struct.node_double_t, %struct.node_double_t* %2, i32 0, i32 2
  store double %1, double* %value, align 8
  %3 = load %struct.node_double_t*, %struct.node_double_t** %node, align 4
  %right = getelementptr inbounds %struct.node_double_t, %struct.node_double_t* %3, i32 0, i32 1
  store %struct.node_double_t* null, %struct.node_double_t** %right, align 4
  %4 = load %struct.node_double_t*, %struct.node_double_t** %node, align 4
  %left = getelementptr inbounds %struct.node_double_t, %struct.node_double_t* %4, i32 0, i32 0
  store %struct.node_double_t* null, %struct.node_double_t** %left, align 8
  %5 = load %struct.node_double_t*, %struct.node_double_t** %node, align 4
  ret %struct.node_double_t* %5
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.node_double_t* @node_double_insert(%struct.node_double_t* %root, double %v) #0 {
entry:
  %retval = alloca %struct.node_double_t*, align 4
  %root.addr = alloca %struct.node_double_t*, align 4
  %v.addr = alloca double, align 8
  %n = alloca %struct.node_double_t*, align 4
  store %struct.node_double_t* %root, %struct.node_double_t** %root.addr, align 4
  store double %v, double* %v.addr, align 8
  %0 = load double, double* %v.addr, align 8
  %call = call %struct.node_double_t* @node_double_new(double %0)
  store %struct.node_double_t* %call, %struct.node_double_t** %n, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end13, %entry
  %1 = load %struct.node_double_t*, %struct.node_double_t** %root.addr, align 4
  %tobool = icmp ne %struct.node_double_t* %1, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load %struct.node_double_t*, %struct.node_double_t** %root.addr, align 4
  %value = getelementptr inbounds %struct.node_double_t, %struct.node_double_t* %2, i32 0, i32 2
  %3 = load double, double* %value, align 8
  %4 = load %struct.node_double_t*, %struct.node_double_t** %n, align 4
  %value1 = getelementptr inbounds %struct.node_double_t, %struct.node_double_t* %4, i32 0, i32 2
  %5 = load double, double* %value1, align 8
  %cmp = fcmp olt double %3, %5
  br i1 %cmp, label %if.then, label %if.else6

if.then:                                          ; preds = %while.body
  %6 = load %struct.node_double_t*, %struct.node_double_t** %root.addr, align 4
  %left = getelementptr inbounds %struct.node_double_t, %struct.node_double_t* %6, i32 0, i32 0
  %7 = load %struct.node_double_t*, %struct.node_double_t** %left, align 8
  %tobool2 = icmp ne %struct.node_double_t* %7, null
  br i1 %tobool2, label %if.else, label %if.then3

if.then3:                                         ; preds = %if.then
  %8 = load %struct.node_double_t*, %struct.node_double_t** %n, align 4
  %9 = load %struct.node_double_t*, %struct.node_double_t** %root.addr, align 4
  %left4 = getelementptr inbounds %struct.node_double_t, %struct.node_double_t* %9, i32 0, i32 0
  store %struct.node_double_t* %8, %struct.node_double_t** %left4, align 8
  store %struct.node_double_t* %8, %struct.node_double_t** %retval, align 4
  br label %return

if.else:                                          ; preds = %if.then
  %10 = load %struct.node_double_t*, %struct.node_double_t** %root.addr, align 4
  %left5 = getelementptr inbounds %struct.node_double_t, %struct.node_double_t* %10, i32 0, i32 0
  %11 = load %struct.node_double_t*, %struct.node_double_t** %left5, align 8
  store %struct.node_double_t* %11, %struct.node_double_t** %root.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.else
  br label %if.end13

if.else6:                                         ; preds = %while.body
  %12 = load %struct.node_double_t*, %struct.node_double_t** %root.addr, align 4
  %right = getelementptr inbounds %struct.node_double_t, %struct.node_double_t* %12, i32 0, i32 1
  %13 = load %struct.node_double_t*, %struct.node_double_t** %right, align 4
  %tobool7 = icmp ne %struct.node_double_t* %13, null
  br i1 %tobool7, label %if.else10, label %if.then8

if.then8:                                         ; preds = %if.else6
  %14 = load %struct.node_double_t*, %struct.node_double_t** %n, align 4
  %15 = load %struct.node_double_t*, %struct.node_double_t** %root.addr, align 4
  %right9 = getelementptr inbounds %struct.node_double_t, %struct.node_double_t* %15, i32 0, i32 1
  store %struct.node_double_t* %14, %struct.node_double_t** %right9, align 4
  store %struct.node_double_t* %14, %struct.node_double_t** %retval, align 4
  br label %return

if.else10:                                        ; preds = %if.else6
  %16 = load %struct.node_double_t*, %struct.node_double_t** %root.addr, align 4
  %right11 = getelementptr inbounds %struct.node_double_t, %struct.node_double_t* %16, i32 0, i32 1
  %17 = load %struct.node_double_t*, %struct.node_double_t** %right11, align 4
  store %struct.node_double_t* %17, %struct.node_double_t** %root.addr, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.else10
  br label %if.end13

if.end13:                                         ; preds = %if.end12, %if.end
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store %struct.node_double_t* null, %struct.node_double_t** %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then8, %if.then3
  %18 = load %struct.node_double_t*, %struct.node_double_t** %retval, align 4
  ret %struct.node_double_t* %18
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.node_int_t* @node_int_new(i32 %v) #0 {
entry:
  %v.addr = alloca i32, align 4
  %node = alloca %struct.node_int_t*, align 4
  store i32 %v, i32* %v.addr, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.node_int_t*
  store %struct.node_int_t* %0, %struct.node_int_t** %node, align 4
  %1 = load i32, i32* %v.addr, align 4
  %2 = load %struct.node_int_t*, %struct.node_int_t** %node, align 4
  %value = getelementptr inbounds %struct.node_int_t, %struct.node_int_t* %2, i32 0, i32 2
  store i32 %1, i32* %value, align 4
  %3 = load %struct.node_int_t*, %struct.node_int_t** %node, align 4
  %right = getelementptr inbounds %struct.node_int_t, %struct.node_int_t* %3, i32 0, i32 1
  store %struct.node_int_t* null, %struct.node_int_t** %right, align 4
  %4 = load %struct.node_int_t*, %struct.node_int_t** %node, align 4
  %left = getelementptr inbounds %struct.node_int_t, %struct.node_int_t* %4, i32 0, i32 0
  store %struct.node_int_t* null, %struct.node_int_t** %left, align 4
  %5 = load %struct.node_int_t*, %struct.node_int_t** %node, align 4
  ret %struct.node_int_t* %5
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.node_int_t* @node_int_insert(%struct.node_int_t* %root, i32 %v) #0 {
entry:
  %retval = alloca %struct.node_int_t*, align 4
  %root.addr = alloca %struct.node_int_t*, align 4
  %v.addr = alloca i32, align 4
  %n = alloca %struct.node_int_t*, align 4
  store %struct.node_int_t* %root, %struct.node_int_t** %root.addr, align 4
  store i32 %v, i32* %v.addr, align 4
  %0 = load i32, i32* %v.addr, align 4
  %call = call %struct.node_int_t* @node_int_new(i32 %0)
  store %struct.node_int_t* %call, %struct.node_int_t** %n, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end13, %entry
  %1 = load %struct.node_int_t*, %struct.node_int_t** %root.addr, align 4
  %tobool = icmp ne %struct.node_int_t* %1, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load %struct.node_int_t*, %struct.node_int_t** %root.addr, align 4
  %value = getelementptr inbounds %struct.node_int_t, %struct.node_int_t* %2, i32 0, i32 2
  %3 = load i32, i32* %value, align 4
  %4 = load %struct.node_int_t*, %struct.node_int_t** %n, align 4
  %value1 = getelementptr inbounds %struct.node_int_t, %struct.node_int_t* %4, i32 0, i32 2
  %5 = load i32, i32* %value1, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %if.then, label %if.else6

if.then:                                          ; preds = %while.body
  %6 = load %struct.node_int_t*, %struct.node_int_t** %root.addr, align 4
  %left = getelementptr inbounds %struct.node_int_t, %struct.node_int_t* %6, i32 0, i32 0
  %7 = load %struct.node_int_t*, %struct.node_int_t** %left, align 4
  %tobool2 = icmp ne %struct.node_int_t* %7, null
  br i1 %tobool2, label %if.else, label %if.then3

if.then3:                                         ; preds = %if.then
  %8 = load %struct.node_int_t*, %struct.node_int_t** %n, align 4
  %9 = load %struct.node_int_t*, %struct.node_int_t** %root.addr, align 4
  %left4 = getelementptr inbounds %struct.node_int_t, %struct.node_int_t* %9, i32 0, i32 0
  store %struct.node_int_t* %8, %struct.node_int_t** %left4, align 4
  store %struct.node_int_t* %8, %struct.node_int_t** %retval, align 4
  br label %return

if.else:                                          ; preds = %if.then
  %10 = load %struct.node_int_t*, %struct.node_int_t** %root.addr, align 4
  %left5 = getelementptr inbounds %struct.node_int_t, %struct.node_int_t* %10, i32 0, i32 0
  %11 = load %struct.node_int_t*, %struct.node_int_t** %left5, align 4
  store %struct.node_int_t* %11, %struct.node_int_t** %root.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.else
  br label %if.end13

if.else6:                                         ; preds = %while.body
  %12 = load %struct.node_int_t*, %struct.node_int_t** %root.addr, align 4
  %right = getelementptr inbounds %struct.node_int_t, %struct.node_int_t* %12, i32 0, i32 1
  %13 = load %struct.node_int_t*, %struct.node_int_t** %right, align 4
  %tobool7 = icmp ne %struct.node_int_t* %13, null
  br i1 %tobool7, label %if.else10, label %if.then8

if.then8:                                         ; preds = %if.else6
  %14 = load %struct.node_int_t*, %struct.node_int_t** %n, align 4
  %15 = load %struct.node_int_t*, %struct.node_int_t** %root.addr, align 4
  %right9 = getelementptr inbounds %struct.node_int_t, %struct.node_int_t* %15, i32 0, i32 1
  store %struct.node_int_t* %14, %struct.node_int_t** %right9, align 4
  store %struct.node_int_t* %14, %struct.node_int_t** %retval, align 4
  br label %return

if.else10:                                        ; preds = %if.else6
  %16 = load %struct.node_int_t*, %struct.node_int_t** %root.addr, align 4
  %right11 = getelementptr inbounds %struct.node_int_t, %struct.node_int_t* %16, i32 0, i32 1
  %17 = load %struct.node_int_t*, %struct.node_int_t** %right11, align 4
  store %struct.node_int_t* %17, %struct.node_int_t** %root.addr, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.else10
  br label %if.end13

if.end13:                                         ; preds = %if.end12, %if.end
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store %struct.node_int_t* null, %struct.node_int_t** %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then8, %if.then3
  %18 = load %struct.node_int_t*, %struct.node_int_t** %retval, align 4
  ret %struct.node_int_t* %18
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %root_d = alloca %struct.node_double_t*, align 4
  %root_i = alloca %struct.node_int_t*, align 4
  store i32 0, i32* %retval, align 4
  %call = call i32 @rand()
  %conv = sitofp i32 %call to double
  %div = fdiv double %conv, 0x41DFFFFFFFC00000
  %call1 = call %struct.node_double_t* @node_double_new(double %div)
  store %struct.node_double_t* %call1, %struct.node_double_t** %root_d, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 10000
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load %struct.node_double_t*, %struct.node_double_t** %root_d, align 4
  %call3 = call i32 @rand()
  %conv4 = sitofp i32 %call3 to double
  %div5 = fdiv double %conv4, 0x41DFFFFFFFC00000
  %call6 = call %struct.node_double_t* @node_double_insert(%struct.node_double_t* %1, double %div5)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %i, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call7 = call i32 @rand()
  %call8 = call %struct.node_int_t* @node_int_new(i32 %call7)
  store %struct.node_int_t* %call8, %struct.node_int_t** %root_i, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc15, %for.end
  %3 = load i32, i32* %i, align 4
  %cmp10 = icmp slt i32 %3, 10000
  br i1 %cmp10, label %for.body12, label %for.end17

for.body12:                                       ; preds = %for.cond9
  %4 = load %struct.node_int_t*, %struct.node_int_t** %root_i, align 4
  %call13 = call i32 @rand()
  %call14 = call %struct.node_int_t* @node_int_insert(%struct.node_int_t* %4, i32 %call13)
  br label %for.inc15

for.inc15:                                        ; preds = %for.body12
  %5 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %5, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond9

for.end17:                                        ; preds = %for.cond9
  ret i32 0
}

declare i32 @rand() #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 @rand()
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, 10000
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 10000:i32
infer %1

; *****
; For LLVM instruction:
;  %call3 = call i32 @rand()
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %2, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call7 = call i32 @rand()
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp10 = icmp slt i32 %3, 10000
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 10000:i32
infer %1

; *****
; For LLVM instruction:
;  %call13 = call i32 @rand()
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc16 = add nsw i32 %5, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 10000:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
