
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for main()

; ModuleID = './Trigonometric_functions.c.bc'
source_filename = "./Trigonometric_functions.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [7 x i8] c"%f %f\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %pi = alloca double, align 8
  %radians = alloca double, align 8
  %degrees = alloca double, align 8
  %temp = alloca double, align 8
  store i32 0, i32* %retval, align 4
  %call = call double @atan(double 1.000000e+00) #4
  %mul = fmul double 4.000000e+00, %call
  store double %mul, double* %pi, align 8
  %0 = load double, double* %pi, align 8
  %div = fdiv double %0, 4.000000e+00
  store double %div, double* %radians, align 8
  store double 4.500000e+01, double* %degrees, align 8
  %1 = load double, double* %radians, align 8
  %2 = call double @llvm.sin.f64(double %1)
  %3 = load double, double* %degrees, align 8
  %4 = load double, double* %pi, align 8
  %mul1 = fmul double %3, %4
  %div2 = fdiv double %mul1, 1.800000e+02
  %5 = call double @llvm.sin.f64(double %div2)
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), double %2, double %5)
  %6 = load double, double* %radians, align 8
  %7 = call double @llvm.cos.f64(double %6)
  %8 = load double, double* %degrees, align 8
  %9 = load double, double* %pi, align 8
  %mul4 = fmul double %8, %9
  %div5 = fdiv double %mul4, 1.800000e+02
  %10 = call double @llvm.cos.f64(double %div5)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), double %7, double %10)
  %11 = load double, double* %radians, align 8
  %call7 = call double @tan(double %11) #4
  %12 = load double, double* %degrees, align 8
  %13 = load double, double* %pi, align 8
  %mul8 = fmul double %12, %13
  %div9 = fdiv double %mul8, 1.800000e+02
  %call10 = call double @tan(double %div9) #4
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), double %call7, double %call10)
  %14 = load double, double* %radians, align 8
  %15 = call double @llvm.sin.f64(double %14)
  %call12 = call double @asin(double %15) #4
  store double %call12, double* %temp, align 8
  %16 = load double, double* %temp, align 8
  %17 = load double, double* %temp, align 8
  %mul13 = fmul double %17, 1.800000e+02
  %18 = load double, double* %pi, align 8
  %div14 = fdiv double %mul13, %18
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), double %16, double %div14)
  %19 = load double, double* %radians, align 8
  %20 = call double @llvm.cos.f64(double %19)
  %call16 = call double @acos(double %20) #4
  store double %call16, double* %temp, align 8
  %21 = load double, double* %temp, align 8
  %22 = load double, double* %temp, align 8
  %mul17 = fmul double %22, 1.800000e+02
  %23 = load double, double* %pi, align 8
  %div18 = fdiv double %mul17, %23
  %call19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), double %21, double %div18)
  %24 = load double, double* %radians, align 8
  %call20 = call double @tan(double %24) #4
  %call21 = call double @atan(double %call20) #4
  store double %call21, double* %temp, align 8
  %25 = load double, double* %temp, align 8
  %26 = load double, double* %temp, align 8
  %mul22 = fmul double %26, 1.800000e+02
  %27 = load double, double* %pi, align 8
  %div23 = fdiv double %mul22, %27
  %call24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), double %25, double %div23)
  ret i32 0
}

; Function Attrs: nounwind readnone
declare double @atan(double %0) #1

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sin.f64(double %0) #3

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.cos.f64(double %0) #3

; Function Attrs: nounwind readnone
declare double @tan(double %0) #1

; Function Attrs: nounwind readnone
declare double @asin(double %0) #1

; Function Attrs: nounwind readnone
declare double @acos(double %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable willreturn }
attributes #4 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
