
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for optimal_matrix_chain_order()

; ModuleID = './Matrix_chain_multiplication.c.bc'
source_filename = "./Matrix_chain_multiplication.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@m = hidden global i32** null, align 4
@s = hidden global i32** null, align 4
@.str = private unnamed_addr constant [3 x i8] c"%c\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"(\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c")\00", align 1
@__const.main.a1 = private unnamed_addr constant [4 x i32] [i32 5, i32 6, i32 3, i32 1], align 16
@__const.main.a2 = private unnamed_addr constant [13 x i32] [i32 1, i32 5, i32 25, i32 30, i32 100, i32 70, i32 2, i32 1, i32 100, i32 250, i32 1, i32 1000, i32 2], align 16
@__const.main.a3 = private unnamed_addr constant [12 x i32] [i32 1000, i32 1, i32 500, i32 12, i32 1, i32 700, i32 2500, i32 3, i32 2, i32 5, i32 14, i32 10], align 16
@__const.main.sizes = private unnamed_addr constant [3 x i32] [i32 4, i32 13, i32 12], align 4
@.str.3 = private unnamed_addr constant [10 x i8] c"Dims  : [\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.6 = private unnamed_addr constant [3 x i8] c"]\0A\00", align 1
@.str.7 = private unnamed_addr constant [9 x i8] c"Order : \00", align 1
@.str.8 = private unnamed_addr constant [14 x i8] c"\0ACost  : %d\0A\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @optimal_matrix_chain_order(i32* %dims, i32 %n) #0 {
entry:
  %dims.addr = alloca i32*, align 4
  %n.addr = alloca i32, align 4
  %len = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %temp = alloca i32, align 4
  %cost = alloca i32, align 4
  store i32* %dims, i32** %dims.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %dec = add nsw i32 %0, -1
  store i32 %dec, i32* %n.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %mul = mul i32 %1, 4
  %call = call noalias i8* @malloc(i32 %mul)
  %2 = bitcast i8* %call to i32**
  store i32** %2, i32*** @m, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %n.addr, align 4
  %call1 = call noalias i8* @calloc(i32 %5, i32 4)
  %6 = bitcast i8* %call1 to i32*
  %7 = load i32**, i32*** @m, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %7, i32 %8
  store i32* %6, i32** %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load i32, i32* %n.addr, align 4
  %mul2 = mul i32 %10, 4
  %call3 = call noalias i8* @malloc(i32 %mul2)
  %11 = bitcast i8* %call3 to i32**
  store i32** %11, i32*** @s, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc9, %for.end
  %12 = load i32, i32* %i, align 4
  %13 = load i32, i32* %n.addr, align 4
  %cmp5 = icmp slt i32 %12, %13
  br i1 %cmp5, label %for.body6, label %for.end11

for.body6:                                        ; preds = %for.cond4
  %14 = load i32, i32* %n.addr, align 4
  %call7 = call noalias i8* @calloc(i32 %14, i32 4)
  %15 = bitcast i8* %call7 to i32*
  %16 = load i32**, i32*** @s, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds i32*, i32** %16, i32 %17
  store i32* %15, i32** %arrayidx8, align 4
  br label %for.inc9

for.inc9:                                         ; preds = %for.body6
  %18 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %18, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond4

for.end11:                                        ; preds = %for.cond4
  store i32 1, i32* %len, align 4
  br label %for.cond12

for.cond12:                                       ; preds = %for.inc50, %for.end11
  %19 = load i32, i32* %len, align 4
  %20 = load i32, i32* %n.addr, align 4
  %cmp13 = icmp slt i32 %19, %20
  br i1 %cmp13, label %for.body14, label %for.end52

for.body14:                                       ; preds = %for.cond12
  store i32 0, i32* %i, align 4
  br label %for.cond15

for.cond15:                                       ; preds = %for.inc47, %for.body14
  %21 = load i32, i32* %i, align 4
  %22 = load i32, i32* %n.addr, align 4
  %23 = load i32, i32* %len, align 4
  %sub = sub nsw i32 %22, %23
  %cmp16 = icmp slt i32 %21, %sub
  br i1 %cmp16, label %for.body17, label %for.end49

for.body17:                                       ; preds = %for.cond15
  %24 = load i32, i32* %i, align 4
  %25 = load i32, i32* %len, align 4
  %add = add nsw i32 %24, %25
  store i32 %add, i32* %j, align 4
  %26 = load i32**, i32*** @m, align 4
  %27 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds i32*, i32** %26, i32 %27
  %28 = load i32*, i32** %arrayidx18, align 4
  %29 = load i32, i32* %j, align 4
  %arrayidx19 = getelementptr inbounds i32, i32* %28, i32 %29
  store i32 2147483647, i32* %arrayidx19, align 4
  %30 = load i32, i32* %i, align 4
  store i32 %30, i32* %k, align 4
  br label %for.cond20

for.cond20:                                       ; preds = %for.inc44, %for.body17
  %31 = load i32, i32* %k, align 4
  %32 = load i32, i32* %j, align 4
  %cmp21 = icmp slt i32 %31, %32
  br i1 %cmp21, label %for.body22, label %for.end46

for.body22:                                       ; preds = %for.cond20
  %33 = load i32*, i32** %dims.addr, align 4
  %34 = load i32, i32* %i, align 4
  %arrayidx23 = getelementptr inbounds i32, i32* %33, i32 %34
  %35 = load i32, i32* %arrayidx23, align 4
  %36 = load i32*, i32** %dims.addr, align 4
  %37 = load i32, i32* %k, align 4
  %add24 = add nsw i32 %37, 1
  %arrayidx25 = getelementptr inbounds i32, i32* %36, i32 %add24
  %38 = load i32, i32* %arrayidx25, align 4
  %mul26 = mul nsw i32 %35, %38
  %39 = load i32*, i32** %dims.addr, align 4
  %40 = load i32, i32* %j, align 4
  %add27 = add nsw i32 %40, 1
  %arrayidx28 = getelementptr inbounds i32, i32* %39, i32 %add27
  %41 = load i32, i32* %arrayidx28, align 4
  %mul29 = mul nsw i32 %mul26, %41
  store i32 %mul29, i32* %temp, align 4
  %42 = load i32**, i32*** @m, align 4
  %43 = load i32, i32* %i, align 4
  %arrayidx30 = getelementptr inbounds i32*, i32** %42, i32 %43
  %44 = load i32*, i32** %arrayidx30, align 4
  %45 = load i32, i32* %k, align 4
  %arrayidx31 = getelementptr inbounds i32, i32* %44, i32 %45
  %46 = load i32, i32* %arrayidx31, align 4
  %47 = load i32**, i32*** @m, align 4
  %48 = load i32, i32* %k, align 4
  %add32 = add nsw i32 %48, 1
  %arrayidx33 = getelementptr inbounds i32*, i32** %47, i32 %add32
  %49 = load i32*, i32** %arrayidx33, align 4
  %50 = load i32, i32* %j, align 4
  %arrayidx34 = getelementptr inbounds i32, i32* %49, i32 %50
  %51 = load i32, i32* %arrayidx34, align 4
  %add35 = add nsw i32 %46, %51
  %52 = load i32, i32* %temp, align 4
  %add36 = add nsw i32 %add35, %52
  store i32 %add36, i32* %cost, align 4
  %53 = load i32, i32* %cost, align 4
  %54 = load i32**, i32*** @m, align 4
  %55 = load i32, i32* %i, align 4
  %arrayidx37 = getelementptr inbounds i32*, i32** %54, i32 %55
  %56 = load i32*, i32** %arrayidx37, align 4
  %57 = load i32, i32* %j, align 4
  %arrayidx38 = getelementptr inbounds i32, i32* %56, i32 %57
  %58 = load i32, i32* %arrayidx38, align 4
  %cmp39 = icmp slt i32 %53, %58
  br i1 %cmp39, label %if.then, label %if.end

if.then:                                          ; preds = %for.body22
  %59 = load i32, i32* %cost, align 4
  %60 = load i32**, i32*** @m, align 4
  %61 = load i32, i32* %i, align 4
  %arrayidx40 = getelementptr inbounds i32*, i32** %60, i32 %61
  %62 = load i32*, i32** %arrayidx40, align 4
  %63 = load i32, i32* %j, align 4
  %arrayidx41 = getelementptr inbounds i32, i32* %62, i32 %63
  store i32 %59, i32* %arrayidx41, align 4
  %64 = load i32, i32* %k, align 4
  %65 = load i32**, i32*** @s, align 4
  %66 = load i32, i32* %i, align 4
  %arrayidx42 = getelementptr inbounds i32*, i32** %65, i32 %66
  %67 = load i32*, i32** %arrayidx42, align 4
  %68 = load i32, i32* %j, align 4
  %arrayidx43 = getelementptr inbounds i32, i32* %67, i32 %68
  store i32 %64, i32* %arrayidx43, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body22
  br label %for.inc44

for.inc44:                                        ; preds = %if.end
  %69 = load i32, i32* %k, align 4
  %inc45 = add nsw i32 %69, 1
  store i32 %inc45, i32* %k, align 4
  br label %for.cond20

for.end46:                                        ; preds = %for.cond20
  br label %for.inc47

for.inc47:                                        ; preds = %for.end46
  %70 = load i32, i32* %i, align 4
  %inc48 = add nsw i32 %70, 1
  store i32 %inc48, i32* %i, align 4
  br label %for.cond15

for.end49:                                        ; preds = %for.cond15
  br label %for.inc50

for.inc50:                                        ; preds = %for.end49
  %71 = load i32, i32* %len, align 4
  %inc51 = add nsw i32 %71, 1
  store i32 %inc51, i32* %len, align 4
  br label %for.cond12

for.end52:                                        ; preds = %for.cond12
  ret void
}

declare noalias i8* @malloc(i32 %0) #1

declare noalias i8* @calloc(i32 %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @print_optimal_chain_order(i32 %i, i32 %j) #0 {
entry:
  %i.addr = alloca i32, align 4
  %j.addr = alloca i32, align 4
  store i32 %i, i32* %i.addr, align 4
  store i32 %j, i32* %j.addr, align 4
  %0 = load i32, i32* %i.addr, align 4
  %1 = load i32, i32* %j.addr, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %i.addr, align 4
  %add = add nsw i32 %2, 65
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32 %add)
  br label %if.end

if.else:                                          ; preds = %entry
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  %3 = load i32, i32* %i.addr, align 4
  %4 = load i32**, i32*** @s, align 4
  %5 = load i32, i32* %i.addr, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %4, i32 %5
  %6 = load i32*, i32** %arrayidx, align 4
  %7 = load i32, i32* %j.addr, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %6, i32 %7
  %8 = load i32, i32* %arrayidx2, align 4
  call void @print_optimal_chain_order(i32 %3, i32 %8)
  %9 = load i32**, i32*** @s, align 4
  %10 = load i32, i32* %i.addr, align 4
  %arrayidx3 = getelementptr inbounds i32*, i32** %9, i32 %10
  %11 = load i32*, i32** %arrayidx3, align 4
  %12 = load i32, i32* %j.addr, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %11, i32 %12
  %13 = load i32, i32* %arrayidx4, align 4
  %add5 = add nsw i32 %13, 1
  %14 = load i32, i32* %j.addr, align 4
  call void @print_optimal_chain_order(i32 %add5, i32 %14)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %n = alloca i32, align 4
  %a1 = alloca [4 x i32], align 16
  %a2 = alloca [13 x i32], align 16
  %a3 = alloca [12 x i32], align 16
  %dims_list = alloca [3 x i32*], align 4
  %sizes = alloca [3 x i32], align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [4 x i32]* %a1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([4 x i32]* @__const.main.a1 to i8*), i32 16, i1 false)
  %1 = bitcast [13 x i32]* %a2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %1, i8* align 16 bitcast ([13 x i32]* @__const.main.a2 to i8*), i32 52, i1 false)
  %2 = bitcast [12 x i32]* %a3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %2, i8* align 16 bitcast ([12 x i32]* @__const.main.a3 to i8*), i32 48, i1 false)
  %arrayinit.begin = getelementptr inbounds [3 x i32*], [3 x i32*]* %dims_list, i32 0, i32 0
  %arraydecay = getelementptr inbounds [4 x i32], [4 x i32]* %a1, i32 0, i32 0
  store i32* %arraydecay, i32** %arrayinit.begin, align 4
  %arrayinit.element = getelementptr inbounds i32*, i32** %arrayinit.begin, i32 1
  %arraydecay1 = getelementptr inbounds [13 x i32], [13 x i32]* %a2, i32 0, i32 0
  store i32* %arraydecay1, i32** %arrayinit.element, align 4
  %arrayinit.element2 = getelementptr inbounds i32*, i32** %arrayinit.element, i32 1
  %arraydecay3 = getelementptr inbounds [12 x i32], [12 x i32]* %a3, i32 0, i32 0
  store i32* %arraydecay3, i32** %arrayinit.element2, align 4
  %3 = bitcast [3 x i32]* %sizes to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %3, i8* align 4 bitcast ([3 x i32]* @__const.main.sizes to i8*), i32 12, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc36, %entry
  %4 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %4, 3
  br i1 %cmp, label %for.body, label %for.end38

for.body:                                         ; preds = %for.cond
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i32 0, i32 0))
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [3 x i32], [3 x i32]* %sizes, i32 0, i32 %5
  %6 = load i32, i32* %arrayidx, align 4
  store i32 %6, i32* %n, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc, %for.body
  %7 = load i32, i32* %j, align 4
  %8 = load i32, i32* %n, align 4
  %cmp5 = icmp slt i32 %7, %8
  br i1 %cmp5, label %for.body6, label %for.end

for.body6:                                        ; preds = %for.cond4
  %9 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [3 x i32*], [3 x i32*]* %dims_list, i32 0, i32 %9
  %10 = load i32*, i32** %arrayidx7, align 4
  %11 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %10, i32 %11
  %12 = load i32, i32* %arrayidx8, align 4
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i32 %12)
  %13 = load i32, i32* %j, align 4
  %14 = load i32, i32* %n, align 4
  %sub = sub nsw i32 %14, 1
  %cmp10 = icmp slt i32 %13, %sub
  br i1 %cmp10, label %if.then, label %if.else

if.then:                                          ; preds = %for.body6
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %for.body6
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %15 = load i32, i32* %j, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond4

for.end:                                          ; preds = %for.cond4
  %16 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds [3 x i32*], [3 x i32*]* %dims_list, i32 0, i32 %16
  %17 = load i32*, i32** %arrayidx13, align 4
  %18 = load i32, i32* %n, align 4
  call void @optimal_matrix_chain_order(i32* %17, i32 %18)
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i32 0, i32 0))
  %19 = load i32, i32* %n, align 4
  %sub15 = sub nsw i32 %19, 2
  call void @print_optimal_chain_order(i32 0, i32 %sub15)
  %20 = load i32**, i32*** @m, align 4
  %arrayidx16 = getelementptr inbounds i32*, i32** %20, i32 0
  %21 = load i32*, i32** %arrayidx16, align 4
  %22 = load i32, i32* %n, align 4
  %sub17 = sub nsw i32 %22, 2
  %arrayidx18 = getelementptr inbounds i32, i32* %21, i32 %sub17
  %23 = load i32, i32* %arrayidx18, align 4
  %call19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.8, i32 0, i32 0), i32 %23)
  store i32 0, i32* %j, align 4
  br label %for.cond20

for.cond20:                                       ; preds = %for.inc25, %for.end
  %24 = load i32, i32* %j, align 4
  %25 = load i32, i32* %n, align 4
  %sub21 = sub nsw i32 %25, 2
  %cmp22 = icmp sle i32 %24, %sub21
  br i1 %cmp22, label %for.body23, label %for.end27

for.body23:                                       ; preds = %for.cond20
  %26 = load i32**, i32*** @m, align 4
  %27 = load i32, i32* %j, align 4
  %arrayidx24 = getelementptr inbounds i32*, i32** %26, i32 %27
  %28 = load i32*, i32** %arrayidx24, align 4
  %29 = bitcast i32* %28 to i8*
  call void @free(i8* %29)
  br label %for.inc25

for.inc25:                                        ; preds = %for.body23
  %30 = load i32, i32* %j, align 4
  %inc26 = add nsw i32 %30, 1
  store i32 %inc26, i32* %j, align 4
  br label %for.cond20

for.end27:                                        ; preds = %for.cond20
  %31 = load i32**, i32*** @m, align 4
  %32 = bitcast i32** %31 to i8*
  call void @free(i8* %32)
  store i32 0, i32* %j, align 4
  br label %for.cond28

for.cond28:                                       ; preds = %for.inc33, %for.end27
  %33 = load i32, i32* %j, align 4
  %34 = load i32, i32* %n, align 4
  %sub29 = sub nsw i32 %34, 2
  %cmp30 = icmp sle i32 %33, %sub29
  br i1 %cmp30, label %for.body31, label %for.end35

for.body31:                                       ; preds = %for.cond28
  %35 = load i32**, i32*** @s, align 4
  %36 = load i32, i32* %j, align 4
  %arrayidx32 = getelementptr inbounds i32*, i32** %35, i32 %36
  %37 = load i32*, i32** %arrayidx32, align 4
  %38 = bitcast i32* %37 to i8*
  call void @free(i8* %38)
  br label %for.inc33

for.inc33:                                        ; preds = %for.body31
  %39 = load i32, i32* %j, align 4
  %inc34 = add nsw i32 %39, 1
  store i32 %inc34, i32* %j, align 4
  br label %for.cond28

for.end35:                                        ; preds = %for.cond28
  %40 = load i32**, i32*** @s, align 4
  %41 = bitcast i32** %40 to i8*
  call void @free(i8* %41)
  br label %for.inc36

for.inc36:                                        ; preds = %for.end35
  %42 = load i32, i32* %i, align 4
  %inc37 = add nsw i32 %42, 1
  store i32 %inc37, i32* %i, align 4
  br label %for.cond

for.end38:                                        ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare void @free(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec = add nsw i32 %0, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul i32 %1, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %3, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %9, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul2 = mul i32 %10, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp5 = icmp slt i32 %12, %13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc10 = add nsw i32 %18, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp13 = icmp slt i32 %19, %20
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %22, %23
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %cmp16 = icmp slt i32 %21, %sub
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = subnsw %1, %2
%4:i1 = slt %0, %3
infer %4

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %24, %25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp21 = icmp slt i32 %31, %32
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %arrayidx23, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add24 = add nsw i32 %37, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %38 = load i32, i32* %arrayidx25, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul26 = mul nsw i32 %35, %38
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %40 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add27 = add nsw i32 %40, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %41 = load i32, i32* %arrayidx28, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul29 = mul nsw i32 %mul26, %41
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = mulnsw %0, %3
infer %4

; *****
; For LLVM instruction:
;  %43 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %45 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %46 = load i32, i32* %arrayidx31, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %48 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add32 = add nsw i32 %48, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %50 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %51 = load i32, i32* %arrayidx34, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add35 = add nsw i32 %46, %51
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %52 = load i32, i32* %temp, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add36 = add nsw i32 %add35, %52
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = addnsw %1, %2
%4:i32 = addnsw %0, %3
infer %4

; *****
; For LLVM instruction:
;  %53 = load i32, i32* %cost, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %55 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %57 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %58 = load i32, i32* %arrayidx38, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp39 = icmp slt i32 %53, %58
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %59 = load i32, i32* %cost, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %61 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %63 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %64 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %66 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %68 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %69 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc45 = add nsw i32 %69, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %70 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc48 = add nsw i32 %70, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %71 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc51 = add nsw i32 %71, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147418112
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = subnsw %1, %2
%4:i1 = slt %0, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = mulnsw %0, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = addnsw %1, %2
%4:i32 = addnsw %0, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for optimal_matrix_chain_order()

; entering Souper's runOnFunction() for print_optimal_chain_order()

; ModuleID = './Matrix_chain_multiplication.c.bc'
source_filename = "./Matrix_chain_multiplication.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@m = hidden global i32** null, align 4
@s = hidden global i32** null, align 4
@.str = private unnamed_addr constant [3 x i8] c"%c\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"(\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c")\00", align 1
@__const.main.a1 = private unnamed_addr constant [4 x i32] [i32 5, i32 6, i32 3, i32 1], align 16
@__const.main.a2 = private unnamed_addr constant [13 x i32] [i32 1, i32 5, i32 25, i32 30, i32 100, i32 70, i32 2, i32 1, i32 100, i32 250, i32 1, i32 1000, i32 2], align 16
@__const.main.a3 = private unnamed_addr constant [12 x i32] [i32 1000, i32 1, i32 500, i32 12, i32 1, i32 700, i32 2500, i32 3, i32 2, i32 5, i32 14, i32 10], align 16
@__const.main.sizes = private unnamed_addr constant [3 x i32] [i32 4, i32 13, i32 12], align 4
@.str.3 = private unnamed_addr constant [10 x i8] c"Dims  : [\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.6 = private unnamed_addr constant [3 x i8] c"]\0A\00", align 1
@.str.7 = private unnamed_addr constant [9 x i8] c"Order : \00", align 1
@.str.8 = private unnamed_addr constant [14 x i8] c"\0ACost  : %d\0A\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @optimal_matrix_chain_order(i32* %dims, i32 %n) #0 {
entry:
  %dims.addr = alloca i32*, align 4
  %n.addr = alloca i32, align 4
  %len = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %temp = alloca i32, align 4
  %cost = alloca i32, align 4
  store i32* %dims, i32** %dims.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %dec = add nsw i32 %0, -1
  store i32 %dec, i32* %n.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %mul = mul i32 %1, 4
  %call = call noalias i8* @malloc(i32 %mul)
  %2 = bitcast i8* %call to i32**
  store i32** %2, i32*** @m, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %n.addr, align 4
  %call1 = call noalias i8* @calloc(i32 %5, i32 4)
  %6 = bitcast i8* %call1 to i32*
  %7 = load i32**, i32*** @m, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %7, i32 %8
  store i32* %6, i32** %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load i32, i32* %n.addr, align 4
  %mul2 = mul i32 %10, 4
  %call3 = call noalias i8* @malloc(i32 %mul2)
  %11 = bitcast i8* %call3 to i32**
  store i32** %11, i32*** @s, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc9, %for.end
  %12 = load i32, i32* %i, align 4
  %13 = load i32, i32* %n.addr, align 4
  %cmp5 = icmp slt i32 %12, %13
  br i1 %cmp5, label %for.body6, label %for.end11

for.body6:                                        ; preds = %for.cond4
  %14 = load i32, i32* %n.addr, align 4
  %call7 = call noalias i8* @calloc(i32 %14, i32 4)
  %15 = bitcast i8* %call7 to i32*
  %16 = load i32**, i32*** @s, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds i32*, i32** %16, i32 %17
  store i32* %15, i32** %arrayidx8, align 4
  br label %for.inc9

for.inc9:                                         ; preds = %for.body6
  %18 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %18, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond4

for.end11:                                        ; preds = %for.cond4
  store i32 1, i32* %len, align 4
  br label %for.cond12

for.cond12:                                       ; preds = %for.inc50, %for.end11
  %19 = load i32, i32* %len, align 4
  %20 = load i32, i32* %n.addr, align 4
  %cmp13 = icmp slt i32 %19, %20
  br i1 %cmp13, label %for.body14, label %for.end52

for.body14:                                       ; preds = %for.cond12
  store i32 0, i32* %i, align 4
  br label %for.cond15

for.cond15:                                       ; preds = %for.inc47, %for.body14
  %21 = load i32, i32* %i, align 4
  %22 = load i32, i32* %n.addr, align 4
  %23 = load i32, i32* %len, align 4
  %sub = sub nsw i32 %22, %23
  %cmp16 = icmp slt i32 %21, %sub
  br i1 %cmp16, label %for.body17, label %for.end49

for.body17:                                       ; preds = %for.cond15
  %24 = load i32, i32* %i, align 4
  %25 = load i32, i32* %len, align 4
  %add = add nsw i32 %24, %25
  store i32 %add, i32* %j, align 4
  %26 = load i32**, i32*** @m, align 4
  %27 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds i32*, i32** %26, i32 %27
  %28 = load i32*, i32** %arrayidx18, align 4
  %29 = load i32, i32* %j, align 4
  %arrayidx19 = getelementptr inbounds i32, i32* %28, i32 %29
  store i32 2147483647, i32* %arrayidx19, align 4
  %30 = load i32, i32* %i, align 4
  store i32 %30, i32* %k, align 4
  br label %for.cond20

for.cond20:                                       ; preds = %for.inc44, %for.body17
  %31 = load i32, i32* %k, align 4
  %32 = load i32, i32* %j, align 4
  %cmp21 = icmp slt i32 %31, %32
  br i1 %cmp21, label %for.body22, label %for.end46

for.body22:                                       ; preds = %for.cond20
  %33 = load i32*, i32** %dims.addr, align 4
  %34 = load i32, i32* %i, align 4
  %arrayidx23 = getelementptr inbounds i32, i32* %33, i32 %34
  %35 = load i32, i32* %arrayidx23, align 4
  %36 = load i32*, i32** %dims.addr, align 4
  %37 = load i32, i32* %k, align 4
  %add24 = add nsw i32 %37, 1
  %arrayidx25 = getelementptr inbounds i32, i32* %36, i32 %add24
  %38 = load i32, i32* %arrayidx25, align 4
  %mul26 = mul nsw i32 %35, %38
  %39 = load i32*, i32** %dims.addr, align 4
  %40 = load i32, i32* %j, align 4
  %add27 = add nsw i32 %40, 1
  %arrayidx28 = getelementptr inbounds i32, i32* %39, i32 %add27
  %41 = load i32, i32* %arrayidx28, align 4
  %mul29 = mul nsw i32 %mul26, %41
  store i32 %mul29, i32* %temp, align 4
  %42 = load i32**, i32*** @m, align 4
  %43 = load i32, i32* %i, align 4
  %arrayidx30 = getelementptr inbounds i32*, i32** %42, i32 %43
  %44 = load i32*, i32** %arrayidx30, align 4
  %45 = load i32, i32* %k, align 4
  %arrayidx31 = getelementptr inbounds i32, i32* %44, i32 %45
  %46 = load i32, i32* %arrayidx31, align 4
  %47 = load i32**, i32*** @m, align 4
  %48 = load i32, i32* %k, align 4
  %add32 = add nsw i32 %48, 1
  %arrayidx33 = getelementptr inbounds i32*, i32** %47, i32 %add32
  %49 = load i32*, i32** %arrayidx33, align 4
  %50 = load i32, i32* %j, align 4
  %arrayidx34 = getelementptr inbounds i32, i32* %49, i32 %50
  %51 = load i32, i32* %arrayidx34, align 4
  %add35 = add nsw i32 %46, %51
  %52 = load i32, i32* %temp, align 4
  %add36 = add nsw i32 %add35, %52
  store i32 %add36, i32* %cost, align 4
  %53 = load i32, i32* %cost, align 4
  %54 = load i32**, i32*** @m, align 4
  %55 = load i32, i32* %i, align 4
  %arrayidx37 = getelementptr inbounds i32*, i32** %54, i32 %55
  %56 = load i32*, i32** %arrayidx37, align 4
  %57 = load i32, i32* %j, align 4
  %arrayidx38 = getelementptr inbounds i32, i32* %56, i32 %57
  %58 = load i32, i32* %arrayidx38, align 4
  %cmp39 = icmp slt i32 %53, %58
  br i1 %cmp39, label %if.then, label %if.end

if.then:                                          ; preds = %for.body22
  %59 = load i32, i32* %cost, align 4
  %60 = load i32**, i32*** @m, align 4
  %61 = load i32, i32* %i, align 4
  %arrayidx40 = getelementptr inbounds i32*, i32** %60, i32 %61
  %62 = load i32*, i32** %arrayidx40, align 4
  %63 = load i32, i32* %j, align 4
  %arrayidx41 = getelementptr inbounds i32, i32* %62, i32 %63
  store i32 %59, i32* %arrayidx41, align 4
  %64 = load i32, i32* %k, align 4
  %65 = load i32**, i32*** @s, align 4
  %66 = load i32, i32* %i, align 4
  %arrayidx42 = getelementptr inbounds i32*, i32** %65, i32 %66
  %67 = load i32*, i32** %arrayidx42, align 4
  %68 = load i32, i32* %j, align 4
  %arrayidx43 = getelementptr inbounds i32, i32* %67, i32 %68
  store i32 %64, i32* %arrayidx43, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body22
  br label %for.inc44

for.inc44:                                        ; preds = %if.end
  %69 = load i32, i32* %k, align 4
  %inc45 = add nsw i32 %69, 1
  store i32 %inc45, i32* %k, align 4
  br label %for.cond20

for.end46:                                        ; preds = %for.cond20
  br label %for.inc47

for.inc47:                                        ; preds = %for.end46
  %70 = load i32, i32* %i, align 4
  %inc48 = add nsw i32 %70, 1
  store i32 %inc48, i32* %i, align 4
  br label %for.cond15

for.end49:                                        ; preds = %for.cond15
  br label %for.inc50

for.inc50:                                        ; preds = %for.end49
  %71 = load i32, i32* %len, align 4
  %inc51 = add nsw i32 %71, 1
  store i32 %inc51, i32* %len, align 4
  br label %for.cond12

for.end52:                                        ; preds = %for.cond12
  ret void
}

declare noalias i8* @malloc(i32 %0) #1

declare noalias i8* @calloc(i32 %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @print_optimal_chain_order(i32 %i, i32 %j) #0 {
entry:
  %i.addr = alloca i32, align 4
  %j.addr = alloca i32, align 4
  store i32 %i, i32* %i.addr, align 4
  store i32 %j, i32* %j.addr, align 4
  %0 = load i32, i32* %i.addr, align 4
  %1 = load i32, i32* %j.addr, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %i.addr, align 4
  %add = add nsw i32 %2, 65
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32 %add)
  br label %if.end

if.else:                                          ; preds = %entry
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  %3 = load i32, i32* %i.addr, align 4
  %4 = load i32**, i32*** @s, align 4
  %5 = load i32, i32* %i.addr, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %4, i32 %5
  %6 = load i32*, i32** %arrayidx, align 4
  %7 = load i32, i32* %j.addr, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %6, i32 %7
  %8 = load i32, i32* %arrayidx2, align 4
  call void @print_optimal_chain_order(i32 %3, i32 %8)
  %9 = load i32**, i32*** @s, align 4
  %10 = load i32, i32* %i.addr, align 4
  %arrayidx3 = getelementptr inbounds i32*, i32** %9, i32 %10
  %11 = load i32*, i32** %arrayidx3, align 4
  %12 = load i32, i32* %j.addr, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %11, i32 %12
  %13 = load i32, i32* %arrayidx4, align 4
  %add5 = add nsw i32 %13, 1
  %14 = load i32, i32* %j.addr, align 4
  call void @print_optimal_chain_order(i32 %add5, i32 %14)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %n = alloca i32, align 4
  %a1 = alloca [4 x i32], align 16
  %a2 = alloca [13 x i32], align 16
  %a3 = alloca [12 x i32], align 16
  %dims_list = alloca [3 x i32*], align 4
  %sizes = alloca [3 x i32], align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [4 x i32]* %a1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([4 x i32]* @__const.main.a1 to i8*), i32 16, i1 false)
  %1 = bitcast [13 x i32]* %a2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %1, i8* align 16 bitcast ([13 x i32]* @__const.main.a2 to i8*), i32 52, i1 false)
  %2 = bitcast [12 x i32]* %a3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %2, i8* align 16 bitcast ([12 x i32]* @__const.main.a3 to i8*), i32 48, i1 false)
  %arrayinit.begin = getelementptr inbounds [3 x i32*], [3 x i32*]* %dims_list, i32 0, i32 0
  %arraydecay = getelementptr inbounds [4 x i32], [4 x i32]* %a1, i32 0, i32 0
  store i32* %arraydecay, i32** %arrayinit.begin, align 4
  %arrayinit.element = getelementptr inbounds i32*, i32** %arrayinit.begin, i32 1
  %arraydecay1 = getelementptr inbounds [13 x i32], [13 x i32]* %a2, i32 0, i32 0
  store i32* %arraydecay1, i32** %arrayinit.element, align 4
  %arrayinit.element2 = getelementptr inbounds i32*, i32** %arrayinit.element, i32 1
  %arraydecay3 = getelementptr inbounds [12 x i32], [12 x i32]* %a3, i32 0, i32 0
  store i32* %arraydecay3, i32** %arrayinit.element2, align 4
  %3 = bitcast [3 x i32]* %sizes to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %3, i8* align 4 bitcast ([3 x i32]* @__const.main.sizes to i8*), i32 12, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc36, %entry
  %4 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %4, 3
  br i1 %cmp, label %for.body, label %for.end38

for.body:                                         ; preds = %for.cond
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i32 0, i32 0))
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [3 x i32], [3 x i32]* %sizes, i32 0, i32 %5
  %6 = load i32, i32* %arrayidx, align 4
  store i32 %6, i32* %n, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc, %for.body
  %7 = load i32, i32* %j, align 4
  %8 = load i32, i32* %n, align 4
  %cmp5 = icmp slt i32 %7, %8
  br i1 %cmp5, label %for.body6, label %for.end

for.body6:                                        ; preds = %for.cond4
  %9 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [3 x i32*], [3 x i32*]* %dims_list, i32 0, i32 %9
  %10 = load i32*, i32** %arrayidx7, align 4
  %11 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %10, i32 %11
  %12 = load i32, i32* %arrayidx8, align 4
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i32 %12)
  %13 = load i32, i32* %j, align 4
  %14 = load i32, i32* %n, align 4
  %sub = sub nsw i32 %14, 1
  %cmp10 = icmp slt i32 %13, %sub
  br i1 %cmp10, label %if.then, label %if.else

if.then:                                          ; preds = %for.body6
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %for.body6
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %15 = load i32, i32* %j, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond4

for.end:                                          ; preds = %for.cond4
  %16 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds [3 x i32*], [3 x i32*]* %dims_list, i32 0, i32 %16
  %17 = load i32*, i32** %arrayidx13, align 4
  %18 = load i32, i32* %n, align 4
  call void @optimal_matrix_chain_order(i32* %17, i32 %18)
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i32 0, i32 0))
  %19 = load i32, i32* %n, align 4
  %sub15 = sub nsw i32 %19, 2
  call void @print_optimal_chain_order(i32 0, i32 %sub15)
  %20 = load i32**, i32*** @m, align 4
  %arrayidx16 = getelementptr inbounds i32*, i32** %20, i32 0
  %21 = load i32*, i32** %arrayidx16, align 4
  %22 = load i32, i32* %n, align 4
  %sub17 = sub nsw i32 %22, 2
  %arrayidx18 = getelementptr inbounds i32, i32* %21, i32 %sub17
  %23 = load i32, i32* %arrayidx18, align 4
  %call19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.8, i32 0, i32 0), i32 %23)
  store i32 0, i32* %j, align 4
  br label %for.cond20

for.cond20:                                       ; preds = %for.inc25, %for.end
  %24 = load i32, i32* %j, align 4
  %25 = load i32, i32* %n, align 4
  %sub21 = sub nsw i32 %25, 2
  %cmp22 = icmp sle i32 %24, %sub21
  br i1 %cmp22, label %for.body23, label %for.end27

for.body23:                                       ; preds = %for.cond20
  %26 = load i32**, i32*** @m, align 4
  %27 = load i32, i32* %j, align 4
  %arrayidx24 = getelementptr inbounds i32*, i32** %26, i32 %27
  %28 = load i32*, i32** %arrayidx24, align 4
  %29 = bitcast i32* %28 to i8*
  call void @free(i8* %29)
  br label %for.inc25

for.inc25:                                        ; preds = %for.body23
  %30 = load i32, i32* %j, align 4
  %inc26 = add nsw i32 %30, 1
  store i32 %inc26, i32* %j, align 4
  br label %for.cond20

for.end27:                                        ; preds = %for.cond20
  %31 = load i32**, i32*** @m, align 4
  %32 = bitcast i32** %31 to i8*
  call void @free(i8* %32)
  store i32 0, i32* %j, align 4
  br label %for.cond28

for.cond28:                                       ; preds = %for.inc33, %for.end27
  %33 = load i32, i32* %j, align 4
  %34 = load i32, i32* %n, align 4
  %sub29 = sub nsw i32 %34, 2
  %cmp30 = icmp sle i32 %33, %sub29
  br i1 %cmp30, label %for.body31, label %for.end35

for.body31:                                       ; preds = %for.cond28
  %35 = load i32**, i32*** @s, align 4
  %36 = load i32, i32* %j, align 4
  %arrayidx32 = getelementptr inbounds i32*, i32** %35, i32 %36
  %37 = load i32*, i32** %arrayidx32, align 4
  %38 = bitcast i32* %37 to i8*
  call void @free(i8* %38)
  br label %for.inc33

for.inc33:                                        ; preds = %for.body31
  %39 = load i32, i32* %j, align 4
  %inc34 = add nsw i32 %39, 1
  store i32 %inc34, i32* %j, align 4
  br label %for.cond28

for.end35:                                        ; preds = %for.cond28
  %40 = load i32**, i32*** @s, align 4
  %41 = bitcast i32** %40 to i8*
  call void @free(i8* %41)
  br label %for.inc36

for.inc36:                                        ; preds = %for.end35
  %42 = load i32, i32* %i, align 4
  %inc37 = add nsw i32 %42, 1
  store i32 %inc37, i32* %i, align 4
  br label %for.cond

for.end38:                                        ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare void @free(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %j.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %2, 65
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 65:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %j.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %arrayidx2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %j.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %arrayidx4, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add5 = add nsw i32 %13, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %j.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 65:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 65
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 69
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for print_optimal_chain_order()

; entering Souper's runOnFunction() for main()

; ModuleID = './Matrix_chain_multiplication.c.bc'
source_filename = "./Matrix_chain_multiplication.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@m = hidden global i32** null, align 4
@s = hidden global i32** null, align 4
@.str = private unnamed_addr constant [3 x i8] c"%c\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"(\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c")\00", align 1
@__const.main.a1 = private unnamed_addr constant [4 x i32] [i32 5, i32 6, i32 3, i32 1], align 16
@__const.main.a2 = private unnamed_addr constant [13 x i32] [i32 1, i32 5, i32 25, i32 30, i32 100, i32 70, i32 2, i32 1, i32 100, i32 250, i32 1, i32 1000, i32 2], align 16
@__const.main.a3 = private unnamed_addr constant [12 x i32] [i32 1000, i32 1, i32 500, i32 12, i32 1, i32 700, i32 2500, i32 3, i32 2, i32 5, i32 14, i32 10], align 16
@__const.main.sizes = private unnamed_addr constant [3 x i32] [i32 4, i32 13, i32 12], align 4
@.str.3 = private unnamed_addr constant [10 x i8] c"Dims  : [\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.6 = private unnamed_addr constant [3 x i8] c"]\0A\00", align 1
@.str.7 = private unnamed_addr constant [9 x i8] c"Order : \00", align 1
@.str.8 = private unnamed_addr constant [14 x i8] c"\0ACost  : %d\0A\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @optimal_matrix_chain_order(i32* %dims, i32 %n) #0 {
entry:
  %dims.addr = alloca i32*, align 4
  %n.addr = alloca i32, align 4
  %len = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %temp = alloca i32, align 4
  %cost = alloca i32, align 4
  store i32* %dims, i32** %dims.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %dec = add nsw i32 %0, -1
  store i32 %dec, i32* %n.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %mul = mul i32 %1, 4
  %call = call noalias i8* @malloc(i32 %mul)
  %2 = bitcast i8* %call to i32**
  store i32** %2, i32*** @m, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %n.addr, align 4
  %call1 = call noalias i8* @calloc(i32 %5, i32 4)
  %6 = bitcast i8* %call1 to i32*
  %7 = load i32**, i32*** @m, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %7, i32 %8
  store i32* %6, i32** %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load i32, i32* %n.addr, align 4
  %mul2 = mul i32 %10, 4
  %call3 = call noalias i8* @malloc(i32 %mul2)
  %11 = bitcast i8* %call3 to i32**
  store i32** %11, i32*** @s, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc9, %for.end
  %12 = load i32, i32* %i, align 4
  %13 = load i32, i32* %n.addr, align 4
  %cmp5 = icmp slt i32 %12, %13
  br i1 %cmp5, label %for.body6, label %for.end11

for.body6:                                        ; preds = %for.cond4
  %14 = load i32, i32* %n.addr, align 4
  %call7 = call noalias i8* @calloc(i32 %14, i32 4)
  %15 = bitcast i8* %call7 to i32*
  %16 = load i32**, i32*** @s, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds i32*, i32** %16, i32 %17
  store i32* %15, i32** %arrayidx8, align 4
  br label %for.inc9

for.inc9:                                         ; preds = %for.body6
  %18 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %18, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond4

for.end11:                                        ; preds = %for.cond4
  store i32 1, i32* %len, align 4
  br label %for.cond12

for.cond12:                                       ; preds = %for.inc50, %for.end11
  %19 = load i32, i32* %len, align 4
  %20 = load i32, i32* %n.addr, align 4
  %cmp13 = icmp slt i32 %19, %20
  br i1 %cmp13, label %for.body14, label %for.end52

for.body14:                                       ; preds = %for.cond12
  store i32 0, i32* %i, align 4
  br label %for.cond15

for.cond15:                                       ; preds = %for.inc47, %for.body14
  %21 = load i32, i32* %i, align 4
  %22 = load i32, i32* %n.addr, align 4
  %23 = load i32, i32* %len, align 4
  %sub = sub nsw i32 %22, %23
  %cmp16 = icmp slt i32 %21, %sub
  br i1 %cmp16, label %for.body17, label %for.end49

for.body17:                                       ; preds = %for.cond15
  %24 = load i32, i32* %i, align 4
  %25 = load i32, i32* %len, align 4
  %add = add nsw i32 %24, %25
  store i32 %add, i32* %j, align 4
  %26 = load i32**, i32*** @m, align 4
  %27 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds i32*, i32** %26, i32 %27
  %28 = load i32*, i32** %arrayidx18, align 4
  %29 = load i32, i32* %j, align 4
  %arrayidx19 = getelementptr inbounds i32, i32* %28, i32 %29
  store i32 2147483647, i32* %arrayidx19, align 4
  %30 = load i32, i32* %i, align 4
  store i32 %30, i32* %k, align 4
  br label %for.cond20

for.cond20:                                       ; preds = %for.inc44, %for.body17
  %31 = load i32, i32* %k, align 4
  %32 = load i32, i32* %j, align 4
  %cmp21 = icmp slt i32 %31, %32
  br i1 %cmp21, label %for.body22, label %for.end46

for.body22:                                       ; preds = %for.cond20
  %33 = load i32*, i32** %dims.addr, align 4
  %34 = load i32, i32* %i, align 4
  %arrayidx23 = getelementptr inbounds i32, i32* %33, i32 %34
  %35 = load i32, i32* %arrayidx23, align 4
  %36 = load i32*, i32** %dims.addr, align 4
  %37 = load i32, i32* %k, align 4
  %add24 = add nsw i32 %37, 1
  %arrayidx25 = getelementptr inbounds i32, i32* %36, i32 %add24
  %38 = load i32, i32* %arrayidx25, align 4
  %mul26 = mul nsw i32 %35, %38
  %39 = load i32*, i32** %dims.addr, align 4
  %40 = load i32, i32* %j, align 4
  %add27 = add nsw i32 %40, 1
  %arrayidx28 = getelementptr inbounds i32, i32* %39, i32 %add27
  %41 = load i32, i32* %arrayidx28, align 4
  %mul29 = mul nsw i32 %mul26, %41
  store i32 %mul29, i32* %temp, align 4
  %42 = load i32**, i32*** @m, align 4
  %43 = load i32, i32* %i, align 4
  %arrayidx30 = getelementptr inbounds i32*, i32** %42, i32 %43
  %44 = load i32*, i32** %arrayidx30, align 4
  %45 = load i32, i32* %k, align 4
  %arrayidx31 = getelementptr inbounds i32, i32* %44, i32 %45
  %46 = load i32, i32* %arrayidx31, align 4
  %47 = load i32**, i32*** @m, align 4
  %48 = load i32, i32* %k, align 4
  %add32 = add nsw i32 %48, 1
  %arrayidx33 = getelementptr inbounds i32*, i32** %47, i32 %add32
  %49 = load i32*, i32** %arrayidx33, align 4
  %50 = load i32, i32* %j, align 4
  %arrayidx34 = getelementptr inbounds i32, i32* %49, i32 %50
  %51 = load i32, i32* %arrayidx34, align 4
  %add35 = add nsw i32 %46, %51
  %52 = load i32, i32* %temp, align 4
  %add36 = add nsw i32 %add35, %52
  store i32 %add36, i32* %cost, align 4
  %53 = load i32, i32* %cost, align 4
  %54 = load i32**, i32*** @m, align 4
  %55 = load i32, i32* %i, align 4
  %arrayidx37 = getelementptr inbounds i32*, i32** %54, i32 %55
  %56 = load i32*, i32** %arrayidx37, align 4
  %57 = load i32, i32* %j, align 4
  %arrayidx38 = getelementptr inbounds i32, i32* %56, i32 %57
  %58 = load i32, i32* %arrayidx38, align 4
  %cmp39 = icmp slt i32 %53, %58
  br i1 %cmp39, label %if.then, label %if.end

if.then:                                          ; preds = %for.body22
  %59 = load i32, i32* %cost, align 4
  %60 = load i32**, i32*** @m, align 4
  %61 = load i32, i32* %i, align 4
  %arrayidx40 = getelementptr inbounds i32*, i32** %60, i32 %61
  %62 = load i32*, i32** %arrayidx40, align 4
  %63 = load i32, i32* %j, align 4
  %arrayidx41 = getelementptr inbounds i32, i32* %62, i32 %63
  store i32 %59, i32* %arrayidx41, align 4
  %64 = load i32, i32* %k, align 4
  %65 = load i32**, i32*** @s, align 4
  %66 = load i32, i32* %i, align 4
  %arrayidx42 = getelementptr inbounds i32*, i32** %65, i32 %66
  %67 = load i32*, i32** %arrayidx42, align 4
  %68 = load i32, i32* %j, align 4
  %arrayidx43 = getelementptr inbounds i32, i32* %67, i32 %68
  store i32 %64, i32* %arrayidx43, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body22
  br label %for.inc44

for.inc44:                                        ; preds = %if.end
  %69 = load i32, i32* %k, align 4
  %inc45 = add nsw i32 %69, 1
  store i32 %inc45, i32* %k, align 4
  br label %for.cond20

for.end46:                                        ; preds = %for.cond20
  br label %for.inc47

for.inc47:                                        ; preds = %for.end46
  %70 = load i32, i32* %i, align 4
  %inc48 = add nsw i32 %70, 1
  store i32 %inc48, i32* %i, align 4
  br label %for.cond15

for.end49:                                        ; preds = %for.cond15
  br label %for.inc50

for.inc50:                                        ; preds = %for.end49
  %71 = load i32, i32* %len, align 4
  %inc51 = add nsw i32 %71, 1
  store i32 %inc51, i32* %len, align 4
  br label %for.cond12

for.end52:                                        ; preds = %for.cond12
  ret void
}

declare noalias i8* @malloc(i32 %0) #1

declare noalias i8* @calloc(i32 %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @print_optimal_chain_order(i32 %i, i32 %j) #0 {
entry:
  %i.addr = alloca i32, align 4
  %j.addr = alloca i32, align 4
  store i32 %i, i32* %i.addr, align 4
  store i32 %j, i32* %j.addr, align 4
  %0 = load i32, i32* %i.addr, align 4
  %1 = load i32, i32* %j.addr, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %i.addr, align 4
  %add = add nsw i32 %2, 65
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32 %add)
  br label %if.end

if.else:                                          ; preds = %entry
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  %3 = load i32, i32* %i.addr, align 4
  %4 = load i32**, i32*** @s, align 4
  %5 = load i32, i32* %i.addr, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %4, i32 %5
  %6 = load i32*, i32** %arrayidx, align 4
  %7 = load i32, i32* %j.addr, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %6, i32 %7
  %8 = load i32, i32* %arrayidx2, align 4
  call void @print_optimal_chain_order(i32 %3, i32 %8)
  %9 = load i32**, i32*** @s, align 4
  %10 = load i32, i32* %i.addr, align 4
  %arrayidx3 = getelementptr inbounds i32*, i32** %9, i32 %10
  %11 = load i32*, i32** %arrayidx3, align 4
  %12 = load i32, i32* %j.addr, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %11, i32 %12
  %13 = load i32, i32* %arrayidx4, align 4
  %add5 = add nsw i32 %13, 1
  %14 = load i32, i32* %j.addr, align 4
  call void @print_optimal_chain_order(i32 %add5, i32 %14)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %n = alloca i32, align 4
  %a1 = alloca [4 x i32], align 16
  %a2 = alloca [13 x i32], align 16
  %a3 = alloca [12 x i32], align 16
  %dims_list = alloca [3 x i32*], align 4
  %sizes = alloca [3 x i32], align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [4 x i32]* %a1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([4 x i32]* @__const.main.a1 to i8*), i32 16, i1 false)
  %1 = bitcast [13 x i32]* %a2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %1, i8* align 16 bitcast ([13 x i32]* @__const.main.a2 to i8*), i32 52, i1 false)
  %2 = bitcast [12 x i32]* %a3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %2, i8* align 16 bitcast ([12 x i32]* @__const.main.a3 to i8*), i32 48, i1 false)
  %arrayinit.begin = getelementptr inbounds [3 x i32*], [3 x i32*]* %dims_list, i32 0, i32 0
  %arraydecay = getelementptr inbounds [4 x i32], [4 x i32]* %a1, i32 0, i32 0
  store i32* %arraydecay, i32** %arrayinit.begin, align 4
  %arrayinit.element = getelementptr inbounds i32*, i32** %arrayinit.begin, i32 1
  %arraydecay1 = getelementptr inbounds [13 x i32], [13 x i32]* %a2, i32 0, i32 0
  store i32* %arraydecay1, i32** %arrayinit.element, align 4
  %arrayinit.element2 = getelementptr inbounds i32*, i32** %arrayinit.element, i32 1
  %arraydecay3 = getelementptr inbounds [12 x i32], [12 x i32]* %a3, i32 0, i32 0
  store i32* %arraydecay3, i32** %arrayinit.element2, align 4
  %3 = bitcast [3 x i32]* %sizes to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %3, i8* align 4 bitcast ([3 x i32]* @__const.main.sizes to i8*), i32 12, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc36, %entry
  %4 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %4, 3
  br i1 %cmp, label %for.body, label %for.end38

for.body:                                         ; preds = %for.cond
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i32 0, i32 0))
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [3 x i32], [3 x i32]* %sizes, i32 0, i32 %5
  %6 = load i32, i32* %arrayidx, align 4
  store i32 %6, i32* %n, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc, %for.body
  %7 = load i32, i32* %j, align 4
  %8 = load i32, i32* %n, align 4
  %cmp5 = icmp slt i32 %7, %8
  br i1 %cmp5, label %for.body6, label %for.end

for.body6:                                        ; preds = %for.cond4
  %9 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [3 x i32*], [3 x i32*]* %dims_list, i32 0, i32 %9
  %10 = load i32*, i32** %arrayidx7, align 4
  %11 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %10, i32 %11
  %12 = load i32, i32* %arrayidx8, align 4
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i32 %12)
  %13 = load i32, i32* %j, align 4
  %14 = load i32, i32* %n, align 4
  %sub = sub nsw i32 %14, 1
  %cmp10 = icmp slt i32 %13, %sub
  br i1 %cmp10, label %if.then, label %if.else

if.then:                                          ; preds = %for.body6
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %for.body6
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %15 = load i32, i32* %j, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond4

for.end:                                          ; preds = %for.cond4
  %16 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds [3 x i32*], [3 x i32*]* %dims_list, i32 0, i32 %16
  %17 = load i32*, i32** %arrayidx13, align 4
  %18 = load i32, i32* %n, align 4
  call void @optimal_matrix_chain_order(i32* %17, i32 %18)
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i32 0, i32 0))
  %19 = load i32, i32* %n, align 4
  %sub15 = sub nsw i32 %19, 2
  call void @print_optimal_chain_order(i32 0, i32 %sub15)
  %20 = load i32**, i32*** @m, align 4
  %arrayidx16 = getelementptr inbounds i32*, i32** %20, i32 0
  %21 = load i32*, i32** %arrayidx16, align 4
  %22 = load i32, i32* %n, align 4
  %sub17 = sub nsw i32 %22, 2
  %arrayidx18 = getelementptr inbounds i32, i32* %21, i32 %sub17
  %23 = load i32, i32* %arrayidx18, align 4
  %call19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.8, i32 0, i32 0), i32 %23)
  store i32 0, i32* %j, align 4
  br label %for.cond20

for.cond20:                                       ; preds = %for.inc25, %for.end
  %24 = load i32, i32* %j, align 4
  %25 = load i32, i32* %n, align 4
  %sub21 = sub nsw i32 %25, 2
  %cmp22 = icmp sle i32 %24, %sub21
  br i1 %cmp22, label %for.body23, label %for.end27

for.body23:                                       ; preds = %for.cond20
  %26 = load i32**, i32*** @m, align 4
  %27 = load i32, i32* %j, align 4
  %arrayidx24 = getelementptr inbounds i32*, i32** %26, i32 %27
  %28 = load i32*, i32** %arrayidx24, align 4
  %29 = bitcast i32* %28 to i8*
  call void @free(i8* %29)
  br label %for.inc25

for.inc25:                                        ; preds = %for.body23
  %30 = load i32, i32* %j, align 4
  %inc26 = add nsw i32 %30, 1
  store i32 %inc26, i32* %j, align 4
  br label %for.cond20

for.end27:                                        ; preds = %for.cond20
  %31 = load i32**, i32*** @m, align 4
  %32 = bitcast i32** %31 to i8*
  call void @free(i8* %32)
  store i32 0, i32* %j, align 4
  br label %for.cond28

for.cond28:                                       ; preds = %for.inc33, %for.end27
  %33 = load i32, i32* %j, align 4
  %34 = load i32, i32* %n, align 4
  %sub29 = sub nsw i32 %34, 2
  %cmp30 = icmp sle i32 %33, %sub29
  br i1 %cmp30, label %for.body31, label %for.end35

for.body31:                                       ; preds = %for.cond28
  %35 = load i32**, i32*** @s, align 4
  %36 = load i32, i32* %j, align 4
  %arrayidx32 = getelementptr inbounds i32*, i32** %35, i32 %36
  %37 = load i32*, i32** %arrayidx32, align 4
  %38 = bitcast i32* %37 to i8*
  call void @free(i8* %38)
  br label %for.inc33

for.inc33:                                        ; preds = %for.body31
  %39 = load i32, i32* %j, align 4
  %inc34 = add nsw i32 %39, 1
  store i32 %inc34, i32* %j, align 4
  br label %for.cond28

for.end35:                                        ; preds = %for.cond28
  %40 = load i32**, i32*** @s, align 4
  %41 = bitcast i32** %40 to i8*
  call void @free(i8* %41)
  br label %for.inc36

for.inc36:                                        ; preds = %for.end35
  %42 = load i32, i32* %i, align 4
  %inc37 = add nsw i32 %42, 1
  store i32 %inc37, i32* %i, align 4
  br label %for.cond

for.end38:                                        ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare void @free(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %4, 3
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 3:i32
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp5 = icmp slt i32 %7, %8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %arrayidx8, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %14, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp10 = icmp slt i32 %13, %sub
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = slt %0, %2
infer %3

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %15, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub15 = sub nsw i32 %19, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub17 = sub nsw i32 %22, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %arrayidx18, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub21 = sub nsw i32 %25, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp22 = icmp sle i32 %24, %sub21
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 2:i32
%3:i1 = sle %0, %2
infer %3

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc26 = add nsw i32 %30, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub29 = sub nsw i32 %34, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp30 = icmp sle i32 %33, %sub29
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 2:i32
%3:i1 = sle %0, %2
infer %3

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc34 = add nsw i32 %39, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %42 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc37 = add nsw i32 %42, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 3:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = slt %0, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 2:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -2
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 226595190
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 2:i32
%3:i1 = sle %0, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
