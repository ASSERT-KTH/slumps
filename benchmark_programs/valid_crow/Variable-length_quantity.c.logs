
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for to_seq()

; ModuleID = './Variable-length_quantity.c.bc'
source_filename = "./Variable-length_quantity.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [18 x i8] c"seq from %llx: [ \00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"%02x \00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"] back: %llx\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @to_seq(i64 %x, i8* %out) #0 {
entry:
  %x.addr = alloca i64, align 8
  %out.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i64 %x, i64* %x.addr, align 8
  store i8* %out, i8** %out.addr, align 4
  store i32 9, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp sgt i32 %0, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i64, i64* %x.addr, align 8
  %2 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %2, 7
  %sh_prom = zext i32 %mul to i64
  %shl = shl i64 127, %sh_prom
  %and = and i64 %1, %shl
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.end

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %3 = load i32, i32* %i, align 4
  %dec = add nsw i32 %3, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc7, %for.end
  %4 = load i32, i32* %j, align 4
  %5 = load i32, i32* %i, align 4
  %cmp2 = icmp sle i32 %4, %5
  br i1 %cmp2, label %for.body3, label %for.end8

for.body3:                                        ; preds = %for.cond1
  %6 = load i64, i64* %x.addr, align 8
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %j, align 4
  %sub = sub nsw i32 %7, %8
  %mul4 = mul nsw i32 %sub, 7
  %sh_prom5 = zext i32 %mul4 to i64
  %shr = lshr i64 %6, %sh_prom5
  %and6 = and i64 %shr, 127
  %or = or i64 %and6, 128
  %conv = trunc i64 %or to i8
  %9 = load i8*, i8** %out.addr, align 4
  %10 = load i32, i32* %j, align 4
  %arrayidx = getelementptr inbounds i8, i8* %9, i32 %10
  store i8 %conv, i8* %arrayidx, align 1
  br label %for.inc7

for.inc7:                                         ; preds = %for.body3
  %11 = load i32, i32* %j, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end8:                                         ; preds = %for.cond1
  %12 = load i8*, i8** %out.addr, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds i8, i8* %12, i32 %13
  %14 = load i8, i8* %arrayidx9, align 1
  %conv10 = zext i8 %14 to i32
  %xor = xor i32 %conv10, 128
  %conv11 = trunc i32 %xor to i8
  store i8 %conv11, i8* %arrayidx9, align 1
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i64 @from_seq(i8* %in) #0 {
entry:
  %in.addr = alloca i8*, align 4
  %r = alloca i64, align 8
  store i8* %in, i8** %in.addr, align 4
  store i64 0, i64* %r, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %0 = load i64, i64* %r, align 8
  %shl = shl i64 %0, 7
  %1 = load i8*, i8** %in.addr, align 4
  %2 = load i8, i8* %1, align 1
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 127
  %conv1 = sext i32 %and to i64
  %or = or i64 %shl, %conv1
  store i64 %or, i64* %r, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %3 = load i8*, i8** %in.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %3, i32 1
  store i8* %incdec.ptr, i8** %in.addr, align 4
  %4 = load i8, i8* %3, align 1
  %conv2 = zext i8 %4 to i32
  %and3 = and i32 %conv2, 128
  %tobool = icmp ne i32 %and3, 0
  br i1 %tobool, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %5 = load i64, i64* %r, align 8
  ret i64 %5
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %s = alloca [10 x i8], align 1
  %x = alloca [7 x i64], align 16
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [7 x i64]* %x to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 56, i1 false)
  %1 = bitcast i8* %0 to [7 x i64]*
  %2 = getelementptr inbounds [7 x i64], [7 x i64]* %1, i32 0, i32 0
  store i64 127, i64* %2, align 16
  %3 = getelementptr inbounds [7 x i64], [7 x i64]* %1, i32 0, i32 1
  store i64 16384, i64* %3, align 8
  %4 = getelementptr inbounds [7 x i64], [7 x i64]* %1, i32 0, i32 3
  store i64 4194302, i64* %4, align 8
  %5 = getelementptr inbounds [7 x i64], [7 x i64]* %1, i32 0, i32 4
  store i64 2097151, i64* %5, align 16
  %6 = getelementptr inbounds [7 x i64], [7 x i64]* %1, i32 0, i32 5
  store i64 2097152, i64* %6, align 8
  %7 = getelementptr inbounds [7 x i64], [7 x i64]* %1, i32 0, i32 6
  store i64 3679899543542109203, i64* %7, align 16
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %8 = load i32, i32* %j, align 4
  %cmp = icmp ult i32 %8, 7
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i32, i32* %j, align 4
  %arrayidx = getelementptr inbounds [7 x i64], [7 x i64]* %x, i32 0, i32 %9
  %10 = load i64, i64* %arrayidx, align 8
  %arraydecay = getelementptr inbounds [10 x i8], [10 x i8]* %s, i32 0, i32 0
  call void @to_seq(i64 %10, i8* %arraydecay)
  %11 = load i32, i32* %j, align 4
  %arrayidx1 = getelementptr inbounds [7 x i64], [7 x i64]* %x, i32 0, i32 %11
  %12 = load i64, i64* %arrayidx1, align 8
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i32 0, i32 0), i64 %12)
  store i32 0, i32* %i, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %for.body
  %13 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds [10 x i8], [10 x i8]* %s, i32 0, i32 %13
  %14 = load i8, i8* %arrayidx2, align 1
  %conv = zext i8 %14 to i32
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i32 %conv)
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i32, i32* %i, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds [10 x i8], [10 x i8]* %s, i32 0, i32 %15
  %16 = load i8, i8* %arrayidx4, align 1
  %conv5 = zext i8 %16 to i32
  %and = and i32 %conv5, 128
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %arraydecay6 = getelementptr inbounds [10 x i8], [10 x i8]* %s, i32 0, i32 0
  %call7 = call i64 @from_seq(i8* %arraydecay6)
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0), i64 %call7)
  br label %for.inc

for.inc:                                          ; preds = %do.end
  %17 = load i32, i32* %j, align 4
  %inc9 = add nsw i32 %17, 1
  store i32 %inc9, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sgt i32 %0, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %1 = load i64, i64* %x.addr, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %2, 7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 7:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %sh_prom = zext i32 %mul to i64
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 7:i32, %0
%2:i64 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %shl = shl i64 127, %sh_prom
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 7:i32, %0
%2:i64 = zext %1
%3:i64 = shl 127:i64, %2
infer %3

; *****
; For LLVM instruction:
;  %and = and i64 %1, %shl
; Looking for a replacement for:
%0:i64 = var
%1:i32 = var
%2:i32 = mulnsw 7:i32, %1
%3:i64 = zext %2
%4:i64 = shl 127:i64, %3
%5:i64 = and %0, %4
infer %5

; *****
; For LLVM instruction:
;  %tobool = icmp ne i64 %and, 0
; Looking for a replacement for:
%0:i64 = var
%1:i32 = var
%2:i32 = mulnsw 7:i32, %1
%3:i64 = zext %2
%4:i64 = shl 127:i64, %3
%5:i64 = and %0, %4
%6:i1 = ne 0:i64, %5
infer %6

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec = add nsw i32 %3, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp sle i32 %4, %5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %6 = load i64, i64* %x.addr, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %7, %8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %mul4 = mul nsw i32 %sub, 7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
%3:i32 = mulnsw 7:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %sh_prom5 = zext i32 %mul4 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
%3:i32 = mulnsw 7:i32, %2
%4:i64 = zext %3
infer %4

; *****
; For LLVM instruction:
;  %shr = lshr i64 %6, %sh_prom5
; Looking for a replacement for:
%0:i64 = var
%1:i32 = var
%2:i32 = var
%3:i32 = subnsw %1, %2
%4:i32 = mulnsw 7:i32, %3
%5:i64 = zext %4
%6:i64 = lshr %0, %5
infer %6 (demandedBits=0000000000000000000000000000000000000000000000000000000001111111)

; *****
; For LLVM instruction:
;  %and6 = and i64 %shr, 127
; Looking for a replacement for:
%0:i64 = var
%1:i32 = var
%2:i32 = var
%3:i32 = subnsw %1, %2
%4:i32 = mulnsw 7:i32, %3
%5:i64 = zext %4
%6:i64 = lshr %0, %5
%7:i64 = and 127:i64, %6
infer %7 (demandedBits=0000000000000000000000000000000000000000000000000000000001111111)

; *****
; For LLVM instruction:
;  %or = or i64 %and6, 128
; Looking for a replacement for:
%0:i64 = var
%1:i32 = var
%2:i32 = var
%3:i32 = subnsw %1, %2
%4:i32 = mulnsw 7:i32, %3
%5:i64 = zext %4
%6:i64 = lshr %0, %5
%7:i64 = and 127:i64, %6
%8:i64 = or 128:i64, %7
infer %8 (demandedBits=0000000000000000000000000000000000000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %conv = trunc i64 %or to i8
; Looking for a replacement for:
%0:i64 = var
%1:i32 = var
%2:i32 = var
%3:i32 = subnsw %1, %2
%4:i32 = mulnsw 7:i32, %3
%5:i64 = zext %4
%6:i64 = lshr %0, %5
%7:i64 = and 127:i64, %6
%8:i64 = or 128:i64, %7
%9:i8 = trunc %8
infer %9

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %11, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i8, i8* %arrayidx9, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv10 = zext i8 %14 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %xor = xor i32 %conv10, 128
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
%2:i32 = xor 128:i32, %1
infer %2 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %conv11 = trunc i32 %xor to i8
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
%2:i32 = xor 128:i32, %1
%3:i8 = trunc %2
infer %3
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i64 = var
infer %0


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mulnsw 7:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1002436442
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mulnsw 7:i32, %0
%2:i64 = zext %1
infer %2


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1002436442
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mulnsw 7:i32, %0
%2:i64 = zext %1
%3:i64 = shl 127:i64, %2
infer %3


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 127
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 9151314442816847872
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var
%1:i32 = mulnsw 7:i32, %0
%2:i64 = zext %1

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i32 = var
%2:i32 = mulnsw 7:i32, %1
%3:i64 = zext %2
%4:i64 = shl 127:i64, %3
%5:i64 = and %0, %4
infer %5


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 373833953443840
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = mulnsw 7:i32, %0
%2:i64 = zext %1

Cost = 2
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = mulnsw 7:i32, %0
%2:i64 = zext %1
%3:i64 = shl 127:i64, %2

Cost = 3
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 7 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i32 = var
%2:i32 = mulnsw 7:i32, %1
%3:i64 = zext %2
%4:i64 = shl 127:i64, %3
%5:i64 = and %0, %4
%6:i1 = ne 0:i64, %5
infer %6


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147418112
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
%3:i32 = mulnsw 7:i32, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2146127879
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
%3:i32 = mulnsw 7:i32, %2
%4:i64 = zext %3
infer %4


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2148839417
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 7 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i32 = var
%2:i32 = var
%3:i32 = subnsw %1, %2
%4:i32 = mulnsw 7:i32, %3
%5:i64 = zext %4
%6:i64 = lshr %0, %5
infer %6 (demandedBits=0000000000000000000000000000000000000000000000000000000001111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 3458764513820540944
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
%3:i32 = mulnsw 7:i32, %2
%4:i64 = zext %3

Cost = 3
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i32 = var
%2:i32 = var
%3:i32 = subnsw %1, %2
%4:i32 = mulnsw 7:i32, %3
%5:i64 = zext %4
%6:i64 = lshr %0, %5
%7:i64 = and 127:i64, %6
infer %7 (demandedBits=0000000000000000000000000000000000000000000000000000000001111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 16
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
%3:i32 = mulnsw 7:i32, %2
%4:i64 = zext %3

Cost = 3
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i64 = var
%1:i32 = var
%2:i32 = var
%3:i32 = subnsw %1, %2
%4:i32 = mulnsw 7:i32, %3
%5:i64 = zext %4
%6:i64 = lshr %0, %5

Cost = 4
second query is UNSAT
Dataflow Pruned 0/0
There are 4 Guesses
There are 1 RHSs before deduplication
There are 1 RHSs after deduplication
"
; No valid RHS in the list
#########################################################

Module before replacement:
; ModuleID = './Variable-length_quantity.c.bc'
source_filename = "./Variable-length_quantity.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [18 x i8] c"seq from %llx: [ \00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"%02x \00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"] back: %llx\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @to_seq(i64 %x, i8* %out) #0 {
entry:
  %x.addr = alloca i64, align 8
  %out.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i64 %x, i64* %x.addr, align 8
  store i8* %out, i8** %out.addr, align 4
  store i32 9, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp sgt i32 %0, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i64, i64* %x.addr, align 8
  %2 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %2, 7
  %sh_prom = zext i32 %mul to i64
  %shl = shl i64 127, %sh_prom
  %and = and i64 %1, %shl
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.end

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %3 = load i32, i32* %i, align 4
  %dec = add nsw i32 %3, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc7, %for.end
  %4 = load i32, i32* %j, align 4
  %5 = load i32, i32* %i, align 4
  %cmp2 = icmp sle i32 %4, %5
  br i1 %cmp2, label %for.body3, label %for.end8

for.body3:                                        ; preds = %for.cond1
  %6 = load i64, i64* %x.addr, align 8
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %j, align 4
  %sub = sub nsw i32 %7, %8
  %mul4 = mul nsw i32 %sub, 7
  %sh_prom5 = zext i32 %mul4 to i64
  %shr = lshr i64 %6, %sh_prom5
  %and6 = and i64 %shr, 127
  %or = or i64 %and6, 128
  %conv = trunc i64 %or to i8
  %9 = load i8*, i8** %out.addr, align 4
  %10 = load i32, i32* %j, align 4
  %arrayidx = getelementptr inbounds i8, i8* %9, i32 %10
  store i8 %conv, i8* %arrayidx, align 1
  br label %for.inc7

for.inc7:                                         ; preds = %for.body3
  %11 = load i32, i32* %j, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end8:                                         ; preds = %for.cond1
  %12 = load i8*, i8** %out.addr, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds i8, i8* %12, i32 %13
  %14 = load i8, i8* %arrayidx9, align 1
  %conv10 = zext i8 %14 to i32
  %xor = xor i32 %conv10, 128
  %conv11 = trunc i32 %xor to i8
  store i8 %conv11, i8* %arrayidx9, align 1
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i64 @from_seq(i8* %in) #0 {
entry:
  %in.addr = alloca i8*, align 4
  %r = alloca i64, align 8
  store i8* %in, i8** %in.addr, align 4
  store i64 0, i64* %r, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %0 = load i64, i64* %r, align 8
  %shl = shl i64 %0, 7
  %1 = load i8*, i8** %in.addr, align 4
  %2 = load i8, i8* %1, align 1
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 127
  %conv1 = sext i32 %and to i64
  %or = or i64 %shl, %conv1
  store i64 %or, i64* %r, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %3 = load i8*, i8** %in.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %3, i32 1
  store i8* %incdec.ptr, i8** %in.addr, align 4
  %4 = load i8, i8* %3, align 1
  %conv2 = zext i8 %4 to i32
  %and3 = and i32 %conv2, 128
  %tobool = icmp ne i32 %and3, 0
  br i1 %tobool, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %5 = load i64, i64* %r, align 8
  ret i64 %5
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %s = alloca [10 x i8], align 1
  %x = alloca [7 x i64], align 16
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [7 x i64]* %x to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 56, i1 false)
  %1 = bitcast i8* %0 to [7 x i64]*
  %2 = getelementptr inbounds [7 x i64], [7 x i64]* %1, i32 0, i32 0
  store i64 127, i64* %2, align 16
  %3 = getelementptr inbounds [7 x i64], [7 x i64]* %1, i32 0, i32 1
  store i64 16384, i64* %3, align 8
  %4 = getelementptr inbounds [7 x i64], [7 x i64]* %1, i32 0, i32 3
  store i64 4194302, i64* %4, align 8
  %5 = getelementptr inbounds [7 x i64], [7 x i64]* %1, i32 0, i32 4
  store i64 2097151, i64* %5, align 16
  %6 = getelementptr inbounds [7 x i64], [7 x i64]* %1, i32 0, i32 5
  store i64 2097152, i64* %6, align 8
  %7 = getelementptr inbounds [7 x i64], [7 x i64]* %1, i32 0, i32 6
  store i64 3679899543542109203, i64* %7, align 16
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %8 = load i32, i32* %j, align 4
  %cmp = icmp ult i32 %8, 7
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i32, i32* %j, align 4
  %arrayidx = getelementptr inbounds [7 x i64], [7 x i64]* %x, i32 0, i32 %9
  %10 = load i64, i64* %arrayidx, align 8
  %arraydecay = getelementptr inbounds [10 x i8], [10 x i8]* %s, i32 0, i32 0
  call void @to_seq(i64 %10, i8* %arraydecay)
  %11 = load i32, i32* %j, align 4
  %arrayidx1 = getelementptr inbounds [7 x i64], [7 x i64]* %x, i32 0, i32 %11
  %12 = load i64, i64* %arrayidx1, align 8
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i32 0, i32 0), i64 %12)
  store i32 0, i32* %i, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %for.body
  %13 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds [10 x i8], [10 x i8]* %s, i32 0, i32 %13
  %14 = load i8, i8* %arrayidx2, align 1
  %conv = zext i8 %14 to i32
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i32 %conv)
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i32, i32* %i, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds [10 x i8], [10 x i8]* %s, i32 0, i32 %15
  %16 = load i8, i8* %arrayidx4, align 1
  %conv5 = zext i8 %16 to i32
  %and = and i32 %conv5, 128
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %arraydecay6 = getelementptr inbounds [10 x i8], [10 x i8]* %s, i32 0, i32 0
  %call7 = call i64 @from_seq(i8* %arraydecay6)
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0), i64 %call7)
  br label %for.inc

for.inc:                                          ; preds = %do.end
  %17 = load i32, i32* %j, align 4
  %inc9 = add nsw i32 %17, 1
  store i32 %inc9, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; Replacing "  %and6 = and i64 %shr, 127"
; from ""
; with "  %shr = lshr i64 %6, %sh_prom5" in:
"%0:i64 = var
%1:i32 = var
%2:i32 = var
%3:i32 = subnsw %1, %2
%4:i32 = mulnsw 7:i32, %3
%5:i64 = zext %4
%6:i64 = lshr %0, %5
%7:i64 = and 127:i64, %6
cand %7 %6 (demandedBits=0000000000000000000000000000000000000000000000000000000001111111)
"
; with "  %shr = lshr i64 %6, %sh_prom5"

Module after replacement:
; ModuleID = './Variable-length_quantity.c.bc'
source_filename = "./Variable-length_quantity.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [18 x i8] c"seq from %llx: [ \00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"%02x \00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"] back: %llx\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @to_seq(i64 %x, i8* %out) #0 {
entry:
  %x.addr = alloca i64, align 8
  %out.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i64 %x, i64* %x.addr, align 8
  store i8* %out, i8** %out.addr, align 4
  store i32 9, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp sgt i32 %0, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i64, i64* %x.addr, align 8
  %2 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %2, 7
  %sh_prom = zext i32 %mul to i64
  %shl = shl i64 127, %sh_prom
  %and = and i64 %1, %shl
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.end

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %3 = load i32, i32* %i, align 4
  %dec = add nsw i32 %3, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc7, %for.end
  %4 = load i32, i32* %j, align 4
  %5 = load i32, i32* %i, align 4
  %cmp2 = icmp sle i32 %4, %5
  br i1 %cmp2, label %for.body3, label %for.end8

for.body3:                                        ; preds = %for.cond1
  %6 = load i64, i64* %x.addr, align 8
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %j, align 4
  %sub = sub nsw i32 %7, %8
  %mul4 = mul nsw i32 %sub, 7
  %sh_prom5 = zext i32 %mul4 to i64
  %shr = lshr i64 %6, %sh_prom5
  %or = or i64 %shr, 128
  %conv = trunc i64 %or to i8
  %9 = load i8*, i8** %out.addr, align 4
  %10 = load i32, i32* %j, align 4
  %arrayidx = getelementptr inbounds i8, i8* %9, i32 %10
  store i8 %conv, i8* %arrayidx, align 1
  br label %for.inc7

for.inc7:                                         ; preds = %for.body3
  %11 = load i32, i32* %j, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end8:                                         ; preds = %for.cond1
  %12 = load i8*, i8** %out.addr, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds i8, i8* %12, i32 %13
  %14 = load i8, i8* %arrayidx9, align 1
  %conv10 = zext i8 %14 to i32
  %xor = xor i32 %conv10, 128
  %conv11 = trunc i32 %xor to i8
  store i8 %conv11, i8* %arrayidx9, align 1
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i64 @from_seq(i8* %in) #0 {
entry:
  %in.addr = alloca i8*, align 4
  %r = alloca i64, align 8
  store i8* %in, i8** %in.addr, align 4
  store i64 0, i64* %r, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %0 = load i64, i64* %r, align 8
  %shl = shl i64 %0, 7
  %1 = load i8*, i8** %in.addr, align 4
  %2 = load i8, i8* %1, align 1
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 127
  %conv1 = sext i32 %and to i64
  %or = or i64 %shl, %conv1
  store i64 %or, i64* %r, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %3 = load i8*, i8** %in.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %3, i32 1
  store i8* %incdec.ptr, i8** %in.addr, align 4
  %4 = load i8, i8* %3, align 1
  %conv2 = zext i8 %4 to i32
  %and3 = and i32 %conv2, 128
  %tobool = icmp ne i32 %and3, 0
  br i1 %tobool, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %5 = load i64, i64* %r, align 8
  ret i64 %5
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %s = alloca [10 x i8], align 1
  %x = alloca [7 x i64], align 16
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [7 x i64]* %x to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 56, i1 false)
  %1 = bitcast i8* %0 to [7 x i64]*
  %2 = getelementptr inbounds [7 x i64], [7 x i64]* %1, i32 0, i32 0
  store i64 127, i64* %2, align 16
  %3 = getelementptr inbounds [7 x i64], [7 x i64]* %1, i32 0, i32 1
  store i64 16384, i64* %3, align 8
  %4 = getelementptr inbounds [7 x i64], [7 x i64]* %1, i32 0, i32 3
  store i64 4194302, i64* %4, align 8
  %5 = getelementptr inbounds [7 x i64], [7 x i64]* %1, i32 0, i32 4
  store i64 2097151, i64* %5, align 16
  %6 = getelementptr inbounds [7 x i64], [7 x i64]* %1, i32 0, i32 5
  store i64 2097152, i64* %6, align 8
  %7 = getelementptr inbounds [7 x i64], [7 x i64]* %1, i32 0, i32 6
  store i64 3679899543542109203, i64* %7, align 16
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %8 = load i32, i32* %j, align 4
  %cmp = icmp ult i32 %8, 7
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i32, i32* %j, align 4
  %arrayidx = getelementptr inbounds [7 x i64], [7 x i64]* %x, i32 0, i32 %9
  %10 = load i64, i64* %arrayidx, align 8
  %arraydecay = getelementptr inbounds [10 x i8], [10 x i8]* %s, i32 0, i32 0
  call void @to_seq(i64 %10, i8* %arraydecay)
  %11 = load i32, i32* %j, align 4
  %arrayidx1 = getelementptr inbounds [7 x i64], [7 x i64]* %x, i32 0, i32 %11
  %12 = load i64, i64* %arrayidx1, align 8
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i32 0, i32 0), i64 %12)
  store i32 0, i32* %i, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %for.body
  %13 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds [10 x i8], [10 x i8]* %s, i32 0, i32 %13
  %14 = load i8, i8* %arrayidx2, align 1
  %conv = zext i8 %14 to i32
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i32 %conv)
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i32, i32* %i, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds [10 x i8], [10 x i8]* %s, i32 0, i32 %15
  %16 = load i8, i8* %arrayidx4, align 1
  %conv5 = zext i8 %16 to i32
  %and = and i32 %conv5, 128
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %arraydecay6 = getelementptr inbounds [10 x i8], [10 x i8]* %s, i32 0, i32 0
  %call7 = call i64 @from_seq(i8* %arraydecay6)
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0), i64 %call7)
  br label %for.inc

for.inc:                                          ; preds = %do.end
  %17 = load i32, i32* %j, align 4
  %inc9 = add nsw i32 %17, 1
  store i32 %inc9, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

#########################################################
; exiting Souper's runOnFunction() for to_seq()
rescanning function after transformation was applied

; entering Souper's runOnFunction() for to_seq()

; ModuleID = './Variable-length_quantity.c.bc'
source_filename = "./Variable-length_quantity.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [18 x i8] c"seq from %llx: [ \00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"%02x \00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"] back: %llx\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @to_seq(i64 %x, i8* %out) #0 {
entry:
  %x.addr = alloca i64, align 8
  %out.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i64 %x, i64* %x.addr, align 8
  store i8* %out, i8** %out.addr, align 4
  store i32 9, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp sgt i32 %0, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i64, i64* %x.addr, align 8
  %2 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %2, 7
  %sh_prom = zext i32 %mul to i64
  %shl = shl i64 127, %sh_prom
  %and = and i64 %1, %shl
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.end

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %3 = load i32, i32* %i, align 4
  %dec = add nsw i32 %3, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc7, %for.end
  %4 = load i32, i32* %j, align 4
  %5 = load i32, i32* %i, align 4
  %cmp2 = icmp sle i32 %4, %5
  br i1 %cmp2, label %for.body3, label %for.end8

for.body3:                                        ; preds = %for.cond1
  %6 = load i64, i64* %x.addr, align 8
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %j, align 4
  %sub = sub nsw i32 %7, %8
  %mul4 = mul nsw i32 %sub, 7
  %sh_prom5 = zext i32 %mul4 to i64
  %shr = lshr i64 %6, %sh_prom5
  %or = or i64 %shr, 128
  %conv = trunc i64 %or to i8
  %9 = load i8*, i8** %out.addr, align 4
  %10 = load i32, i32* %j, align 4
  %arrayidx = getelementptr inbounds i8, i8* %9, i32 %10
  store i8 %conv, i8* %arrayidx, align 1
  br label %for.inc7

for.inc7:                                         ; preds = %for.body3
  %11 = load i32, i32* %j, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end8:                                         ; preds = %for.cond1
  %12 = load i8*, i8** %out.addr, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds i8, i8* %12, i32 %13
  %14 = load i8, i8* %arrayidx9, align 1
  %conv10 = zext i8 %14 to i32
  %xor = xor i32 %conv10, 128
  %conv11 = trunc i32 %xor to i8
  store i8 %conv11, i8* %arrayidx9, align 1
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i64 @from_seq(i8* %in) #0 {
entry:
  %in.addr = alloca i8*, align 4
  %r = alloca i64, align 8
  store i8* %in, i8** %in.addr, align 4
  store i64 0, i64* %r, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %0 = load i64, i64* %r, align 8
  %shl = shl i64 %0, 7
  %1 = load i8*, i8** %in.addr, align 4
  %2 = load i8, i8* %1, align 1
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 127
  %conv1 = sext i32 %and to i64
  %or = or i64 %shl, %conv1
  store i64 %or, i64* %r, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %3 = load i8*, i8** %in.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %3, i32 1
  store i8* %incdec.ptr, i8** %in.addr, align 4
  %4 = load i8, i8* %3, align 1
  %conv2 = zext i8 %4 to i32
  %and3 = and i32 %conv2, 128
  %tobool = icmp ne i32 %and3, 0
  br i1 %tobool, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %5 = load i64, i64* %r, align 8
  ret i64 %5
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %s = alloca [10 x i8], align 1
  %x = alloca [7 x i64], align 16
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [7 x i64]* %x to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 56, i1 false)
  %1 = bitcast i8* %0 to [7 x i64]*
  %2 = getelementptr inbounds [7 x i64], [7 x i64]* %1, i32 0, i32 0
  store i64 127, i64* %2, align 16
  %3 = getelementptr inbounds [7 x i64], [7 x i64]* %1, i32 0, i32 1
  store i64 16384, i64* %3, align 8
  %4 = getelementptr inbounds [7 x i64], [7 x i64]* %1, i32 0, i32 3
  store i64 4194302, i64* %4, align 8
  %5 = getelementptr inbounds [7 x i64], [7 x i64]* %1, i32 0, i32 4
  store i64 2097151, i64* %5, align 16
  %6 = getelementptr inbounds [7 x i64], [7 x i64]* %1, i32 0, i32 5
  store i64 2097152, i64* %6, align 8
  %7 = getelementptr inbounds [7 x i64], [7 x i64]* %1, i32 0, i32 6
  store i64 3679899543542109203, i64* %7, align 16
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %8 = load i32, i32* %j, align 4
  %cmp = icmp ult i32 %8, 7
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i32, i32* %j, align 4
  %arrayidx = getelementptr inbounds [7 x i64], [7 x i64]* %x, i32 0, i32 %9
  %10 = load i64, i64* %arrayidx, align 8
  %arraydecay = getelementptr inbounds [10 x i8], [10 x i8]* %s, i32 0, i32 0
  call void @to_seq(i64 %10, i8* %arraydecay)
  %11 = load i32, i32* %j, align 4
  %arrayidx1 = getelementptr inbounds [7 x i64], [7 x i64]* %x, i32 0, i32 %11
  %12 = load i64, i64* %arrayidx1, align 8
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i32 0, i32 0), i64 %12)
  store i32 0, i32* %i, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %for.body
  %13 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds [10 x i8], [10 x i8]* %s, i32 0, i32 %13
  %14 = load i8, i8* %arrayidx2, align 1
  %conv = zext i8 %14 to i32
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i32 %conv)
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i32, i32* %i, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds [10 x i8], [10 x i8]* %s, i32 0, i32 %15
  %16 = load i8, i8* %arrayidx4, align 1
  %conv5 = zext i8 %16 to i32
  %and = and i32 %conv5, 128
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %arraydecay6 = getelementptr inbounds [10 x i8], [10 x i8]* %s, i32 0, i32 0
  %call7 = call i64 @from_seq(i8* %arraydecay6)
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0), i64 %call7)
  br label %for.inc

for.inc:                                          ; preds = %do.end
  %17 = load i32, i32* %j, align 4
  %inc9 = add nsw i32 %17, 1
  store i32 %inc9, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sgt i32 %0, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %1 = load i64, i64* %x.addr, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %2, 7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 7:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %sh_prom = zext i32 %mul to i64
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 7:i32, %0
%2:i64 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %shl = shl i64 127, %sh_prom
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 7:i32, %0
%2:i64 = zext %1
%3:i64 = shl 127:i64, %2
infer %3

; *****
; For LLVM instruction:
;  %and = and i64 %1, %shl
; Looking for a replacement for:
%0:i64 = var
%1:i32 = var
%2:i32 = mulnsw 7:i32, %1
%3:i64 = zext %2
%4:i64 = shl 127:i64, %3
%5:i64 = and %0, %4
infer %5

; *****
; For LLVM instruction:
;  %tobool = icmp ne i64 %and, 0
; Looking for a replacement for:
%0:i64 = var
%1:i32 = var
%2:i32 = mulnsw 7:i32, %1
%3:i64 = zext %2
%4:i64 = shl 127:i64, %3
%5:i64 = and %0, %4
%6:i1 = ne 0:i64, %5
infer %6

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec = add nsw i32 %3, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp sle i32 %4, %5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %6 = load i64, i64* %x.addr, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %7, %8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %mul4 = mul nsw i32 %sub, 7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
%3:i32 = mulnsw 7:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %sh_prom5 = zext i32 %mul4 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
%3:i32 = mulnsw 7:i32, %2
%4:i64 = zext %3
infer %4

; *****
; For LLVM instruction:
;  %shr = lshr i64 %6, %sh_prom5
; Looking for a replacement for:
%0:i64 = var
%1:i32 = var
%2:i32 = var
%3:i32 = subnsw %1, %2
%4:i32 = mulnsw 7:i32, %3
%5:i64 = zext %4
%6:i64 = lshr %0, %5
infer %6 (demandedBits=0000000000000000000000000000000000000000000000000000000001111111)

; *****
; For LLVM instruction:
;  %or = or i64 %shr, 128
; Looking for a replacement for:
%0:i64 = var
%1:i32 = var
%2:i32 = var
%3:i32 = subnsw %1, %2
%4:i32 = mulnsw 7:i32, %3
%5:i64 = zext %4
%6:i64 = lshr %0, %5
%7:i64 = or 128:i64, %6
infer %7 (demandedBits=0000000000000000000000000000000000000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %conv = trunc i64 %or to i8
; Looking for a replacement for:
%0:i64 = var
%1:i32 = var
%2:i32 = var
%3:i32 = subnsw %1, %2
%4:i32 = mulnsw 7:i32, %3
%5:i64 = zext %4
%6:i64 = lshr %0, %5
%7:i64 = or 128:i64, %6
%8:i8 = trunc %7
infer %8

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %11, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i8, i8* %arrayidx9, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv10 = zext i8 %14 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %xor = xor i32 %conv10, 128
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
%2:i32 = xor 128:i32, %1
infer %2 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %conv11 = trunc i32 %xor to i8
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
%2:i32 = xor 128:i32, %1
%3:i8 = trunc %2
infer %3
got 8 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i32 = var
%2:i32 = var
%3:i32 = subnsw %1, %2
%4:i32 = mulnsw 7:i32, %3
%5:i64 = zext %4
%6:i64 = lshr %0, %5
%7:i64 = or 128:i64, %6
infer %7 (demandedBits=0000000000000000000000000000000000000000000000000000000011111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 255
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 128
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
%3:i32 = mulnsw 7:i32, %2
%4:i64 = zext %3

Cost = 3
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i64 = var
%1:i32 = var
%2:i32 = var
%3:i32 = subnsw %1, %2
%4:i32 = mulnsw 7:i32, %3
%5:i64 = zext %4
%6:i64 = lshr %0, %5

Cost = 4
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i32 = var
%2:i32 = var
%3:i32 = subnsw %1, %2
%4:i32 = mulnsw 7:i32, %3
%5:i64 = zext %4
%6:i64 = lshr %0, %5
%7:i64 = or 128:i64, %6
%8:i8 = trunc %7
infer %8


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -128
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -126
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = zext %0
infer %1 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 255
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = zext %0
%2:i32 = xor 128:i32, %1
infer %2 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 255
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = zext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = zext %0
%2:i32 = xor 128:i32, %1
%3:i8 = trunc %2
infer %3


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -128
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for to_seq()

; entering Souper's runOnFunction() for from_seq()

; ModuleID = './Variable-length_quantity.c.bc'
source_filename = "./Variable-length_quantity.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [18 x i8] c"seq from %llx: [ \00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"%02x \00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"] back: %llx\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @to_seq(i64 %x, i8* %out) #0 {
entry:
  %x.addr = alloca i64, align 8
  %out.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i64 %x, i64* %x.addr, align 8
  store i8* %out, i8** %out.addr, align 4
  store i32 9, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp sgt i32 %0, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i64, i64* %x.addr, align 8
  %2 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %2, 7
  %sh_prom = zext i32 %mul to i64
  %shl = shl i64 127, %sh_prom
  %and = and i64 %1, %shl
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.end

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %3 = load i32, i32* %i, align 4
  %dec = add nsw i32 %3, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc7, %for.end
  %4 = load i32, i32* %j, align 4
  %5 = load i32, i32* %i, align 4
  %cmp2 = icmp sle i32 %4, %5
  br i1 %cmp2, label %for.body3, label %for.end8

for.body3:                                        ; preds = %for.cond1
  %6 = load i64, i64* %x.addr, align 8
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %j, align 4
  %sub = sub nsw i32 %7, %8
  %mul4 = mul nsw i32 %sub, 7
  %sh_prom5 = zext i32 %mul4 to i64
  %shr = lshr i64 %6, %sh_prom5
  %or = or i64 %shr, 128
  %conv = trunc i64 %or to i8
  %9 = load i8*, i8** %out.addr, align 4
  %10 = load i32, i32* %j, align 4
  %arrayidx = getelementptr inbounds i8, i8* %9, i32 %10
  store i8 %conv, i8* %arrayidx, align 1
  br label %for.inc7

for.inc7:                                         ; preds = %for.body3
  %11 = load i32, i32* %j, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end8:                                         ; preds = %for.cond1
  %12 = load i8*, i8** %out.addr, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds i8, i8* %12, i32 %13
  %14 = load i8, i8* %arrayidx9, align 1
  %conv10 = zext i8 %14 to i32
  %xor = xor i32 %conv10, 128
  %conv11 = trunc i32 %xor to i8
  store i8 %conv11, i8* %arrayidx9, align 1
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i64 @from_seq(i8* %in) #0 {
entry:
  %in.addr = alloca i8*, align 4
  %r = alloca i64, align 8
  store i8* %in, i8** %in.addr, align 4
  store i64 0, i64* %r, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %0 = load i64, i64* %r, align 8
  %shl = shl i64 %0, 7
  %1 = load i8*, i8** %in.addr, align 4
  %2 = load i8, i8* %1, align 1
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 127
  %conv1 = sext i32 %and to i64
  %or = or i64 %shl, %conv1
  store i64 %or, i64* %r, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %3 = load i8*, i8** %in.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %3, i32 1
  store i8* %incdec.ptr, i8** %in.addr, align 4
  %4 = load i8, i8* %3, align 1
  %conv2 = zext i8 %4 to i32
  %and3 = and i32 %conv2, 128
  %tobool = icmp ne i32 %and3, 0
  br i1 %tobool, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %5 = load i64, i64* %r, align 8
  ret i64 %5
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %s = alloca [10 x i8], align 1
  %x = alloca [7 x i64], align 16
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [7 x i64]* %x to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 56, i1 false)
  %1 = bitcast i8* %0 to [7 x i64]*
  %2 = getelementptr inbounds [7 x i64], [7 x i64]* %1, i32 0, i32 0
  store i64 127, i64* %2, align 16
  %3 = getelementptr inbounds [7 x i64], [7 x i64]* %1, i32 0, i32 1
  store i64 16384, i64* %3, align 8
  %4 = getelementptr inbounds [7 x i64], [7 x i64]* %1, i32 0, i32 3
  store i64 4194302, i64* %4, align 8
  %5 = getelementptr inbounds [7 x i64], [7 x i64]* %1, i32 0, i32 4
  store i64 2097151, i64* %5, align 16
  %6 = getelementptr inbounds [7 x i64], [7 x i64]* %1, i32 0, i32 5
  store i64 2097152, i64* %6, align 8
  %7 = getelementptr inbounds [7 x i64], [7 x i64]* %1, i32 0, i32 6
  store i64 3679899543542109203, i64* %7, align 16
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %8 = load i32, i32* %j, align 4
  %cmp = icmp ult i32 %8, 7
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i32, i32* %j, align 4
  %arrayidx = getelementptr inbounds [7 x i64], [7 x i64]* %x, i32 0, i32 %9
  %10 = load i64, i64* %arrayidx, align 8
  %arraydecay = getelementptr inbounds [10 x i8], [10 x i8]* %s, i32 0, i32 0
  call void @to_seq(i64 %10, i8* %arraydecay)
  %11 = load i32, i32* %j, align 4
  %arrayidx1 = getelementptr inbounds [7 x i64], [7 x i64]* %x, i32 0, i32 %11
  %12 = load i64, i64* %arrayidx1, align 8
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i32 0, i32 0), i64 %12)
  store i32 0, i32* %i, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %for.body
  %13 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds [10 x i8], [10 x i8]* %s, i32 0, i32 %13
  %14 = load i8, i8* %arrayidx2, align 1
  %conv = zext i8 %14 to i32
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i32 %conv)
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i32, i32* %i, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds [10 x i8], [10 x i8]* %s, i32 0, i32 %15
  %16 = load i8, i8* %arrayidx4, align 1
  %conv5 = zext i8 %16 to i32
  %and = and i32 %conv5, 128
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %arraydecay6 = getelementptr inbounds [10 x i8], [10 x i8]* %s, i32 0, i32 0
  %call7 = call i64 @from_seq(i8* %arraydecay6)
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0), i64 %call7)
  br label %for.inc

for.inc:                                          ; preds = %do.end
  %17 = load i32, i32* %j, align 4
  %inc9 = add nsw i32 %17, 1
  store i32 %inc9, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i64, i64* %r, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0 (demandedBits=0000000111111111111111111111111111111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %shl = shl i64 %0, 7
; Looking for a replacement for:
%0:i64 = var
%1:i64 = shl %0, 7:i64
infer %1

; *****
; For LLVM instruction:
;  %2 = load i8, i8* %1, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0 (demandedBits=01111111)

; *****
; For LLVM instruction:
;  %conv = zext i8 %2 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1 (demandedBits=00000000000000000000000001111111)

; *****
; For LLVM instruction:
;  %and = and i32 %conv, 127
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
%2:i32 = and 127:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %conv1 = sext i32 %and to i64
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
%2:i32 = and 127:i32, %1
%3:i64 = sext %2
infer %3

; *****
; For LLVM instruction:
;  %or = or i64 %shl, %conv1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = shl %0, 7:i64
%2:i8 = var
%3:i32 = zext %2
%4:i32 = and 127:i32, %3
%5:i64 = sext %4
%6:i64 = or %1, %5
infer %6

; *****
; For LLVM instruction:
;  %4 = load i8, i8* %3, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0 (demandedBits=10000000)

; *****
; For LLVM instruction:
;  %conv2 = zext i8 %4 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1 (demandedBits=00000000000000000000000010000000)

; *****
; For LLVM instruction:
;  %and3 = and i32 %conv2, 128
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
%2:i32 = and 128:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %and3, 0
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
%2:i32 = and 128:i32, %1
%3:i1 = ne 0:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %5 = load i64, i64* %r, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i64 = var
infer %0 (demandedBits=0000000111111111111111111111111111111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 144115188075855871
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = shl %0, 7:i64
infer %1


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -128
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0 (demandedBits=01111111)


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 127
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = zext %0
infer %1 (demandedBits=00000000000000000000000001111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 127
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = zext %0
%2:i32 = and 127:i32, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 127
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = zext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = zext %0
%2:i32 = and 127:i32, %1
%3:i64 = sext %2
infer %3


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 127
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 7 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = shl %0, 7:i64
%2:i8 = var
%3:i32 = zext %2
%4:i32 = and 127:i32, %3
%5:i64 = sext %4
%6:i64 = or %1, %5
infer %6


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 127
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var
%1:i64 = shl %0, 7:i64

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var
%1:i32 = zext %0
%2:i32 = and 127:i32, %1
%3:i64 = sext %2

Cost = 3
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0 (demandedBits=10000000)


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -128
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = zext %0
infer %1 (demandedBits=00000000000000000000000010000000)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 128
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = zext %0
%2:i32 = and 128:i32, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 128
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = zext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = zext %0
%2:i32 = and 128:i32, %1
%3:i1 = ne 0:i32, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for from_seq()

; entering Souper's runOnFunction() for main()

; ModuleID = './Variable-length_quantity.c.bc'
source_filename = "./Variable-length_quantity.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [18 x i8] c"seq from %llx: [ \00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"%02x \00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"] back: %llx\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @to_seq(i64 %x, i8* %out) #0 {
entry:
  %x.addr = alloca i64, align 8
  %out.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i64 %x, i64* %x.addr, align 8
  store i8* %out, i8** %out.addr, align 4
  store i32 9, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp sgt i32 %0, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i64, i64* %x.addr, align 8
  %2 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %2, 7
  %sh_prom = zext i32 %mul to i64
  %shl = shl i64 127, %sh_prom
  %and = and i64 %1, %shl
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.end

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %3 = load i32, i32* %i, align 4
  %dec = add nsw i32 %3, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc7, %for.end
  %4 = load i32, i32* %j, align 4
  %5 = load i32, i32* %i, align 4
  %cmp2 = icmp sle i32 %4, %5
  br i1 %cmp2, label %for.body3, label %for.end8

for.body3:                                        ; preds = %for.cond1
  %6 = load i64, i64* %x.addr, align 8
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %j, align 4
  %sub = sub nsw i32 %7, %8
  %mul4 = mul nsw i32 %sub, 7
  %sh_prom5 = zext i32 %mul4 to i64
  %shr = lshr i64 %6, %sh_prom5
  %or = or i64 %shr, 128
  %conv = trunc i64 %or to i8
  %9 = load i8*, i8** %out.addr, align 4
  %10 = load i32, i32* %j, align 4
  %arrayidx = getelementptr inbounds i8, i8* %9, i32 %10
  store i8 %conv, i8* %arrayidx, align 1
  br label %for.inc7

for.inc7:                                         ; preds = %for.body3
  %11 = load i32, i32* %j, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end8:                                         ; preds = %for.cond1
  %12 = load i8*, i8** %out.addr, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds i8, i8* %12, i32 %13
  %14 = load i8, i8* %arrayidx9, align 1
  %conv10 = zext i8 %14 to i32
  %xor = xor i32 %conv10, 128
  %conv11 = trunc i32 %xor to i8
  store i8 %conv11, i8* %arrayidx9, align 1
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i64 @from_seq(i8* %in) #0 {
entry:
  %in.addr = alloca i8*, align 4
  %r = alloca i64, align 8
  store i8* %in, i8** %in.addr, align 4
  store i64 0, i64* %r, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %0 = load i64, i64* %r, align 8
  %shl = shl i64 %0, 7
  %1 = load i8*, i8** %in.addr, align 4
  %2 = load i8, i8* %1, align 1
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 127
  %conv1 = sext i32 %and to i64
  %or = or i64 %shl, %conv1
  store i64 %or, i64* %r, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %3 = load i8*, i8** %in.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %3, i32 1
  store i8* %incdec.ptr, i8** %in.addr, align 4
  %4 = load i8, i8* %3, align 1
  %conv2 = zext i8 %4 to i32
  %and3 = and i32 %conv2, 128
  %tobool = icmp ne i32 %and3, 0
  br i1 %tobool, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %5 = load i64, i64* %r, align 8
  ret i64 %5
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %s = alloca [10 x i8], align 1
  %x = alloca [7 x i64], align 16
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [7 x i64]* %x to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 56, i1 false)
  %1 = bitcast i8* %0 to [7 x i64]*
  %2 = getelementptr inbounds [7 x i64], [7 x i64]* %1, i32 0, i32 0
  store i64 127, i64* %2, align 16
  %3 = getelementptr inbounds [7 x i64], [7 x i64]* %1, i32 0, i32 1
  store i64 16384, i64* %3, align 8
  %4 = getelementptr inbounds [7 x i64], [7 x i64]* %1, i32 0, i32 3
  store i64 4194302, i64* %4, align 8
  %5 = getelementptr inbounds [7 x i64], [7 x i64]* %1, i32 0, i32 4
  store i64 2097151, i64* %5, align 16
  %6 = getelementptr inbounds [7 x i64], [7 x i64]* %1, i32 0, i32 5
  store i64 2097152, i64* %6, align 8
  %7 = getelementptr inbounds [7 x i64], [7 x i64]* %1, i32 0, i32 6
  store i64 3679899543542109203, i64* %7, align 16
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %8 = load i32, i32* %j, align 4
  %cmp = icmp ult i32 %8, 7
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i32, i32* %j, align 4
  %arrayidx = getelementptr inbounds [7 x i64], [7 x i64]* %x, i32 0, i32 %9
  %10 = load i64, i64* %arrayidx, align 8
  %arraydecay = getelementptr inbounds [10 x i8], [10 x i8]* %s, i32 0, i32 0
  call void @to_seq(i64 %10, i8* %arraydecay)
  %11 = load i32, i32* %j, align 4
  %arrayidx1 = getelementptr inbounds [7 x i64], [7 x i64]* %x, i32 0, i32 %11
  %12 = load i64, i64* %arrayidx1, align 8
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i32 0, i32 0), i64 %12)
  store i32 0, i32* %i, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %for.body
  %13 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds [10 x i8], [10 x i8]* %s, i32 0, i32 %13
  %14 = load i8, i8* %arrayidx2, align 1
  %conv = zext i8 %14 to i32
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i32 %conv)
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %15 = load i32, i32* %i, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds [10 x i8], [10 x i8]* %s, i32 0, i32 %15
  %16 = load i8, i8* %arrayidx4, align 1
  %conv5 = zext i8 %16 to i32
  %and = and i32 %conv5, 128
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %arraydecay6 = getelementptr inbounds [10 x i8], [10 x i8]* %s, i32 0, i32 0
  %call7 = call i64 @from_seq(i8* %arraydecay6)
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0), i64 %call7)
  br label %for.inc

for.inc:                                          ; preds = %do.end
  %17 = load i32, i32* %j, align 4
  %inc9 = add nsw i32 %17, 1
  store i32 %inc9, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ult i32 %8, 7
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ult %0, 7:i32
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i64, i64* %arrayidx, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i64, i64* %arrayidx1, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i8, i8* %arrayidx2, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = zext i8 %14 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %15, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %16 = load i8, i8* %arrayidx4, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0 (demandedBits=10000000)

; *****
; For LLVM instruction:
;  %conv5 = zext i8 %16 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1 (demandedBits=00000000000000000000000010000000)

; *****
; For LLVM instruction:
;  %and = and i32 %conv5, 128
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
%2:i32 = and 128:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %and, 0
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
%2:i32 = and 128:i32, %1
%3:i1 = ne 0:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %call7 = call i64 @from_seq(i8* %arraydecay6)
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc9 = add nsw i32 %17, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ult %0, 7:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = zext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 255
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 1 replacements done on this module
Total of 1 replacements candidates on this module
