
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for make()

; ModuleID = './Modular_arithmetic.c.bc'
source_filename = "./Modular_arithmetic.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.ModularArithmetic = type { i32, i32 }

@.str = private unnamed_addr constant [26 x i8] c"ModularArithmetic(%d, %d)\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"f(\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c") = \00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @make(%struct.ModularArithmetic* noalias sret align 4 %agg.result, i32 %value, i32 %modulus) #0 {
entry:
  %value.addr = alloca i32, align 4
  %modulus.addr = alloca i32, align 4
  store i32 %value, i32* %value.addr, align 4
  store i32 %modulus, i32* %modulus.addr, align 4
  %value1 = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %agg.result, i32 0, i32 0
  %0 = load i32, i32* %value.addr, align 4
  %1 = load i32, i32* %modulus.addr, align 4
  %rem = srem i32 %0, %1
  store i32 %rem, i32* %value1, align 4
  %modulus2 = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %agg.result, i32 0, i32 1
  %2 = load i32, i32* %modulus.addr, align 4
  store i32 %2, i32* %modulus2, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @add(%struct.ModularArithmetic* noalias sret align 4 %agg.result, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %a, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %b) #0 {
entry:
  %value = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %a, i32 0, i32 0
  %0 = load i32, i32* %value, align 4
  %value1 = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %b, i32 0, i32 0
  %1 = load i32, i32* %value1, align 4
  %add = add nsw i32 %0, %1
  %modulus = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %a, i32 0, i32 1
  %2 = load i32, i32* %modulus, align 4
  call void @make(%struct.ModularArithmetic* sret align 4 %agg.result, i32 %add, i32 %2)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @addi(%struct.ModularArithmetic* noalias sret align 4 %agg.result, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %a, i32 %v) #0 {
entry:
  %v.addr = alloca i32, align 4
  store i32 %v, i32* %v.addr, align 4
  %value = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %a, i32 0, i32 0
  %0 = load i32, i32* %value, align 4
  %1 = load i32, i32* %v.addr, align 4
  %add = add nsw i32 %0, %1
  %modulus = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %a, i32 0, i32 1
  %2 = load i32, i32* %modulus, align 4
  call void @make(%struct.ModularArithmetic* sret align 4 %agg.result, i32 %add, i32 %2)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @mul(%struct.ModularArithmetic* noalias sret align 4 %agg.result, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %a, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %b) #0 {
entry:
  %value = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %a, i32 0, i32 0
  %0 = load i32, i32* %value, align 4
  %value1 = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %b, i32 0, i32 0
  %1 = load i32, i32* %value1, align 4
  %mul = mul nsw i32 %0, %1
  %modulus = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %a, i32 0, i32 1
  %2 = load i32, i32* %modulus, align 4
  call void @make(%struct.ModularArithmetic* sret align 4 %agg.result, i32 %mul, i32 %2)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @pow(%struct.ModularArithmetic* noalias sret align 4 %agg.result, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %b, i32 %pow) #0 {
entry:
  %pow.addr = alloca i32, align 4
  %tmp = alloca %struct.ModularArithmetic, align 4
  store i32 %pow, i32* %pow.addr, align 4
  %modulus = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %b, i32 0, i32 1
  %0 = load i32, i32* %modulus, align 4
  call void @make(%struct.ModularArithmetic* sret align 4 %agg.result, i32 1, i32 %0)
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %1 = load i32, i32* %pow.addr, align 4
  %dec = add nsw i32 %1, -1
  store i32 %dec, i32* %pow.addr, align 4
  %cmp = icmp sgt i32 %1, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  call void @mul(%struct.ModularArithmetic* sret align 4 %tmp, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %agg.result, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %b)
  %2 = bitcast %struct.ModularArithmetic* %agg.result to i8*
  %3 = bitcast %struct.ModularArithmetic* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %2, i8* align 4 %3, i32 8, i1 false)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define hidden void @print(%struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %v) #0 {
entry:
  %value = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %v, i32 0, i32 0
  %0 = load i32, i32* %value, align 4
  %modulus = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %v, i32 0, i32 1
  %1 = load i32, i32* %modulus, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i32 0, i32 0), i32 %0, i32 %1)
  ret void
}

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden void @f(%struct.ModularArithmetic* noalias sret align 4 %agg.result, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %x) #0 {
entry:
  %agg.tmp = alloca %struct.ModularArithmetic, align 4
  %agg.tmp1 = alloca %struct.ModularArithmetic, align 4
  call void @pow(%struct.ModularArithmetic* sret align 4 %agg.tmp1, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %x, i32 100)
  call void @add(%struct.ModularArithmetic* sret align 4 %agg.tmp, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %agg.tmp1, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %x)
  call void @addi(%struct.ModularArithmetic* sret align 4 %agg.result, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %agg.tmp, i32 1)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %input = alloca %struct.ModularArithmetic, align 4
  %output = alloca %struct.ModularArithmetic, align 4
  store i32 0, i32* %retval, align 4
  call void @make(%struct.ModularArithmetic* sret align 4 %input, i32 10, i32 13)
  call void @f(%struct.ModularArithmetic* sret align 4 %output, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %input)
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0))
  call void @print(%struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %input)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0))
  call void @print(%struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %output)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0))
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %value.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %modulus.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem = srem i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = srem %0, %1
infer %2

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %modulus.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = srem %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -120454654
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for make()

; entering Souper's runOnFunction() for add()

; ModuleID = './Modular_arithmetic.c.bc'
source_filename = "./Modular_arithmetic.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.ModularArithmetic = type { i32, i32 }

@.str = private unnamed_addr constant [26 x i8] c"ModularArithmetic(%d, %d)\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"f(\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c") = \00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @make(%struct.ModularArithmetic* noalias sret align 4 %agg.result, i32 %value, i32 %modulus) #0 {
entry:
  %value.addr = alloca i32, align 4
  %modulus.addr = alloca i32, align 4
  store i32 %value, i32* %value.addr, align 4
  store i32 %modulus, i32* %modulus.addr, align 4
  %value1 = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %agg.result, i32 0, i32 0
  %0 = load i32, i32* %value.addr, align 4
  %1 = load i32, i32* %modulus.addr, align 4
  %rem = srem i32 %0, %1
  store i32 %rem, i32* %value1, align 4
  %modulus2 = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %agg.result, i32 0, i32 1
  %2 = load i32, i32* %modulus.addr, align 4
  store i32 %2, i32* %modulus2, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @add(%struct.ModularArithmetic* noalias sret align 4 %agg.result, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %a, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %b) #0 {
entry:
  %value = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %a, i32 0, i32 0
  %0 = load i32, i32* %value, align 4
  %value1 = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %b, i32 0, i32 0
  %1 = load i32, i32* %value1, align 4
  %add = add nsw i32 %0, %1
  %modulus = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %a, i32 0, i32 1
  %2 = load i32, i32* %modulus, align 4
  call void @make(%struct.ModularArithmetic* sret align 4 %agg.result, i32 %add, i32 %2)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @addi(%struct.ModularArithmetic* noalias sret align 4 %agg.result, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %a, i32 %v) #0 {
entry:
  %v.addr = alloca i32, align 4
  store i32 %v, i32* %v.addr, align 4
  %value = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %a, i32 0, i32 0
  %0 = load i32, i32* %value, align 4
  %1 = load i32, i32* %v.addr, align 4
  %add = add nsw i32 %0, %1
  %modulus = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %a, i32 0, i32 1
  %2 = load i32, i32* %modulus, align 4
  call void @make(%struct.ModularArithmetic* sret align 4 %agg.result, i32 %add, i32 %2)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @mul(%struct.ModularArithmetic* noalias sret align 4 %agg.result, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %a, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %b) #0 {
entry:
  %value = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %a, i32 0, i32 0
  %0 = load i32, i32* %value, align 4
  %value1 = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %b, i32 0, i32 0
  %1 = load i32, i32* %value1, align 4
  %mul = mul nsw i32 %0, %1
  %modulus = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %a, i32 0, i32 1
  %2 = load i32, i32* %modulus, align 4
  call void @make(%struct.ModularArithmetic* sret align 4 %agg.result, i32 %mul, i32 %2)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @pow(%struct.ModularArithmetic* noalias sret align 4 %agg.result, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %b, i32 %pow) #0 {
entry:
  %pow.addr = alloca i32, align 4
  %tmp = alloca %struct.ModularArithmetic, align 4
  store i32 %pow, i32* %pow.addr, align 4
  %modulus = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %b, i32 0, i32 1
  %0 = load i32, i32* %modulus, align 4
  call void @make(%struct.ModularArithmetic* sret align 4 %agg.result, i32 1, i32 %0)
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %1 = load i32, i32* %pow.addr, align 4
  %dec = add nsw i32 %1, -1
  store i32 %dec, i32* %pow.addr, align 4
  %cmp = icmp sgt i32 %1, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  call void @mul(%struct.ModularArithmetic* sret align 4 %tmp, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %agg.result, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %b)
  %2 = bitcast %struct.ModularArithmetic* %agg.result to i8*
  %3 = bitcast %struct.ModularArithmetic* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %2, i8* align 4 %3, i32 8, i1 false)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define hidden void @print(%struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %v) #0 {
entry:
  %value = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %v, i32 0, i32 0
  %0 = load i32, i32* %value, align 4
  %modulus = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %v, i32 0, i32 1
  %1 = load i32, i32* %modulus, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i32 0, i32 0), i32 %0, i32 %1)
  ret void
}

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden void @f(%struct.ModularArithmetic* noalias sret align 4 %agg.result, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %x) #0 {
entry:
  %agg.tmp = alloca %struct.ModularArithmetic, align 4
  %agg.tmp1 = alloca %struct.ModularArithmetic, align 4
  call void @pow(%struct.ModularArithmetic* sret align 4 %agg.tmp1, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %x, i32 100)
  call void @add(%struct.ModularArithmetic* sret align 4 %agg.tmp, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %agg.tmp1, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %x)
  call void @addi(%struct.ModularArithmetic* sret align 4 %agg.result, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %agg.tmp, i32 1)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %input = alloca %struct.ModularArithmetic, align 4
  %output = alloca %struct.ModularArithmetic, align 4
  store i32 0, i32* %retval, align 4
  call void @make(%struct.ModularArithmetic* sret align 4 %input, i32 10, i32 13)
  call void @f(%struct.ModularArithmetic* sret align 4 %output, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %input)
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0))
  call void @print(%struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %input)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0))
  call void @print(%struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %output)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0))
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %value, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %value1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %modulus, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for add()

; entering Souper's runOnFunction() for addi()

; ModuleID = './Modular_arithmetic.c.bc'
source_filename = "./Modular_arithmetic.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.ModularArithmetic = type { i32, i32 }

@.str = private unnamed_addr constant [26 x i8] c"ModularArithmetic(%d, %d)\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"f(\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c") = \00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @make(%struct.ModularArithmetic* noalias sret align 4 %agg.result, i32 %value, i32 %modulus) #0 {
entry:
  %value.addr = alloca i32, align 4
  %modulus.addr = alloca i32, align 4
  store i32 %value, i32* %value.addr, align 4
  store i32 %modulus, i32* %modulus.addr, align 4
  %value1 = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %agg.result, i32 0, i32 0
  %0 = load i32, i32* %value.addr, align 4
  %1 = load i32, i32* %modulus.addr, align 4
  %rem = srem i32 %0, %1
  store i32 %rem, i32* %value1, align 4
  %modulus2 = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %agg.result, i32 0, i32 1
  %2 = load i32, i32* %modulus.addr, align 4
  store i32 %2, i32* %modulus2, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @add(%struct.ModularArithmetic* noalias sret align 4 %agg.result, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %a, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %b) #0 {
entry:
  %value = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %a, i32 0, i32 0
  %0 = load i32, i32* %value, align 4
  %value1 = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %b, i32 0, i32 0
  %1 = load i32, i32* %value1, align 4
  %add = add nsw i32 %0, %1
  %modulus = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %a, i32 0, i32 1
  %2 = load i32, i32* %modulus, align 4
  call void @make(%struct.ModularArithmetic* sret align 4 %agg.result, i32 %add, i32 %2)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @addi(%struct.ModularArithmetic* noalias sret align 4 %agg.result, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %a, i32 %v) #0 {
entry:
  %v.addr = alloca i32, align 4
  store i32 %v, i32* %v.addr, align 4
  %value = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %a, i32 0, i32 0
  %0 = load i32, i32* %value, align 4
  %1 = load i32, i32* %v.addr, align 4
  %add = add nsw i32 %0, %1
  %modulus = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %a, i32 0, i32 1
  %2 = load i32, i32* %modulus, align 4
  call void @make(%struct.ModularArithmetic* sret align 4 %agg.result, i32 %add, i32 %2)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @mul(%struct.ModularArithmetic* noalias sret align 4 %agg.result, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %a, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %b) #0 {
entry:
  %value = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %a, i32 0, i32 0
  %0 = load i32, i32* %value, align 4
  %value1 = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %b, i32 0, i32 0
  %1 = load i32, i32* %value1, align 4
  %mul = mul nsw i32 %0, %1
  %modulus = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %a, i32 0, i32 1
  %2 = load i32, i32* %modulus, align 4
  call void @make(%struct.ModularArithmetic* sret align 4 %agg.result, i32 %mul, i32 %2)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @pow(%struct.ModularArithmetic* noalias sret align 4 %agg.result, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %b, i32 %pow) #0 {
entry:
  %pow.addr = alloca i32, align 4
  %tmp = alloca %struct.ModularArithmetic, align 4
  store i32 %pow, i32* %pow.addr, align 4
  %modulus = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %b, i32 0, i32 1
  %0 = load i32, i32* %modulus, align 4
  call void @make(%struct.ModularArithmetic* sret align 4 %agg.result, i32 1, i32 %0)
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %1 = load i32, i32* %pow.addr, align 4
  %dec = add nsw i32 %1, -1
  store i32 %dec, i32* %pow.addr, align 4
  %cmp = icmp sgt i32 %1, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  call void @mul(%struct.ModularArithmetic* sret align 4 %tmp, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %agg.result, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %b)
  %2 = bitcast %struct.ModularArithmetic* %agg.result to i8*
  %3 = bitcast %struct.ModularArithmetic* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %2, i8* align 4 %3, i32 8, i1 false)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define hidden void @print(%struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %v) #0 {
entry:
  %value = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %v, i32 0, i32 0
  %0 = load i32, i32* %value, align 4
  %modulus = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %v, i32 0, i32 1
  %1 = load i32, i32* %modulus, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i32 0, i32 0), i32 %0, i32 %1)
  ret void
}

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden void @f(%struct.ModularArithmetic* noalias sret align 4 %agg.result, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %x) #0 {
entry:
  %agg.tmp = alloca %struct.ModularArithmetic, align 4
  %agg.tmp1 = alloca %struct.ModularArithmetic, align 4
  call void @pow(%struct.ModularArithmetic* sret align 4 %agg.tmp1, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %x, i32 100)
  call void @add(%struct.ModularArithmetic* sret align 4 %agg.tmp, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %agg.tmp1, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %x)
  call void @addi(%struct.ModularArithmetic* sret align 4 %agg.result, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %agg.tmp, i32 1)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %input = alloca %struct.ModularArithmetic, align 4
  %output = alloca %struct.ModularArithmetic, align 4
  store i32 0, i32* %retval, align 4
  call void @make(%struct.ModularArithmetic* sret align 4 %input, i32 10, i32 13)
  call void @f(%struct.ModularArithmetic* sret align 4 %output, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %input)
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0))
  call void @print(%struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %input)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0))
  call void @print(%struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %output)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0))
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %value, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %v.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %modulus, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for addi()

; entering Souper's runOnFunction() for mul()

; ModuleID = './Modular_arithmetic.c.bc'
source_filename = "./Modular_arithmetic.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.ModularArithmetic = type { i32, i32 }

@.str = private unnamed_addr constant [26 x i8] c"ModularArithmetic(%d, %d)\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"f(\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c") = \00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @make(%struct.ModularArithmetic* noalias sret align 4 %agg.result, i32 %value, i32 %modulus) #0 {
entry:
  %value.addr = alloca i32, align 4
  %modulus.addr = alloca i32, align 4
  store i32 %value, i32* %value.addr, align 4
  store i32 %modulus, i32* %modulus.addr, align 4
  %value1 = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %agg.result, i32 0, i32 0
  %0 = load i32, i32* %value.addr, align 4
  %1 = load i32, i32* %modulus.addr, align 4
  %rem = srem i32 %0, %1
  store i32 %rem, i32* %value1, align 4
  %modulus2 = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %agg.result, i32 0, i32 1
  %2 = load i32, i32* %modulus.addr, align 4
  store i32 %2, i32* %modulus2, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @add(%struct.ModularArithmetic* noalias sret align 4 %agg.result, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %a, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %b) #0 {
entry:
  %value = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %a, i32 0, i32 0
  %0 = load i32, i32* %value, align 4
  %value1 = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %b, i32 0, i32 0
  %1 = load i32, i32* %value1, align 4
  %add = add nsw i32 %0, %1
  %modulus = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %a, i32 0, i32 1
  %2 = load i32, i32* %modulus, align 4
  call void @make(%struct.ModularArithmetic* sret align 4 %agg.result, i32 %add, i32 %2)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @addi(%struct.ModularArithmetic* noalias sret align 4 %agg.result, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %a, i32 %v) #0 {
entry:
  %v.addr = alloca i32, align 4
  store i32 %v, i32* %v.addr, align 4
  %value = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %a, i32 0, i32 0
  %0 = load i32, i32* %value, align 4
  %1 = load i32, i32* %v.addr, align 4
  %add = add nsw i32 %0, %1
  %modulus = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %a, i32 0, i32 1
  %2 = load i32, i32* %modulus, align 4
  call void @make(%struct.ModularArithmetic* sret align 4 %agg.result, i32 %add, i32 %2)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @mul(%struct.ModularArithmetic* noalias sret align 4 %agg.result, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %a, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %b) #0 {
entry:
  %value = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %a, i32 0, i32 0
  %0 = load i32, i32* %value, align 4
  %value1 = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %b, i32 0, i32 0
  %1 = load i32, i32* %value1, align 4
  %mul = mul nsw i32 %0, %1
  %modulus = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %a, i32 0, i32 1
  %2 = load i32, i32* %modulus, align 4
  call void @make(%struct.ModularArithmetic* sret align 4 %agg.result, i32 %mul, i32 %2)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @pow(%struct.ModularArithmetic* noalias sret align 4 %agg.result, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %b, i32 %pow) #0 {
entry:
  %pow.addr = alloca i32, align 4
  %tmp = alloca %struct.ModularArithmetic, align 4
  store i32 %pow, i32* %pow.addr, align 4
  %modulus = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %b, i32 0, i32 1
  %0 = load i32, i32* %modulus, align 4
  call void @make(%struct.ModularArithmetic* sret align 4 %agg.result, i32 1, i32 %0)
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %1 = load i32, i32* %pow.addr, align 4
  %dec = add nsw i32 %1, -1
  store i32 %dec, i32* %pow.addr, align 4
  %cmp = icmp sgt i32 %1, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  call void @mul(%struct.ModularArithmetic* sret align 4 %tmp, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %agg.result, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %b)
  %2 = bitcast %struct.ModularArithmetic* %agg.result to i8*
  %3 = bitcast %struct.ModularArithmetic* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %2, i8* align 4 %3, i32 8, i1 false)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define hidden void @print(%struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %v) #0 {
entry:
  %value = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %v, i32 0, i32 0
  %0 = load i32, i32* %value, align 4
  %modulus = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %v, i32 0, i32 1
  %1 = load i32, i32* %modulus, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i32 0, i32 0), i32 %0, i32 %1)
  ret void
}

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden void @f(%struct.ModularArithmetic* noalias sret align 4 %agg.result, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %x) #0 {
entry:
  %agg.tmp = alloca %struct.ModularArithmetic, align 4
  %agg.tmp1 = alloca %struct.ModularArithmetic, align 4
  call void @pow(%struct.ModularArithmetic* sret align 4 %agg.tmp1, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %x, i32 100)
  call void @add(%struct.ModularArithmetic* sret align 4 %agg.tmp, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %agg.tmp1, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %x)
  call void @addi(%struct.ModularArithmetic* sret align 4 %agg.result, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %agg.tmp, i32 1)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %input = alloca %struct.ModularArithmetic, align 4
  %output = alloca %struct.ModularArithmetic, align 4
  store i32 0, i32* %retval, align 4
  call void @make(%struct.ModularArithmetic* sret align 4 %input, i32 10, i32 13)
  call void @f(%struct.ModularArithmetic* sret align 4 %output, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %input)
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0))
  call void @print(%struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %input)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0))
  call void @print(%struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %output)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0))
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %value, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %value1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %modulus, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for mul()

; entering Souper's runOnFunction() for pow()

; ModuleID = './Modular_arithmetic.c.bc'
source_filename = "./Modular_arithmetic.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.ModularArithmetic = type { i32, i32 }

@.str = private unnamed_addr constant [26 x i8] c"ModularArithmetic(%d, %d)\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"f(\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c") = \00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @make(%struct.ModularArithmetic* noalias sret align 4 %agg.result, i32 %value, i32 %modulus) #0 {
entry:
  %value.addr = alloca i32, align 4
  %modulus.addr = alloca i32, align 4
  store i32 %value, i32* %value.addr, align 4
  store i32 %modulus, i32* %modulus.addr, align 4
  %value1 = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %agg.result, i32 0, i32 0
  %0 = load i32, i32* %value.addr, align 4
  %1 = load i32, i32* %modulus.addr, align 4
  %rem = srem i32 %0, %1
  store i32 %rem, i32* %value1, align 4
  %modulus2 = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %agg.result, i32 0, i32 1
  %2 = load i32, i32* %modulus.addr, align 4
  store i32 %2, i32* %modulus2, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @add(%struct.ModularArithmetic* noalias sret align 4 %agg.result, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %a, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %b) #0 {
entry:
  %value = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %a, i32 0, i32 0
  %0 = load i32, i32* %value, align 4
  %value1 = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %b, i32 0, i32 0
  %1 = load i32, i32* %value1, align 4
  %add = add nsw i32 %0, %1
  %modulus = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %a, i32 0, i32 1
  %2 = load i32, i32* %modulus, align 4
  call void @make(%struct.ModularArithmetic* sret align 4 %agg.result, i32 %add, i32 %2)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @addi(%struct.ModularArithmetic* noalias sret align 4 %agg.result, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %a, i32 %v) #0 {
entry:
  %v.addr = alloca i32, align 4
  store i32 %v, i32* %v.addr, align 4
  %value = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %a, i32 0, i32 0
  %0 = load i32, i32* %value, align 4
  %1 = load i32, i32* %v.addr, align 4
  %add = add nsw i32 %0, %1
  %modulus = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %a, i32 0, i32 1
  %2 = load i32, i32* %modulus, align 4
  call void @make(%struct.ModularArithmetic* sret align 4 %agg.result, i32 %add, i32 %2)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @mul(%struct.ModularArithmetic* noalias sret align 4 %agg.result, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %a, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %b) #0 {
entry:
  %value = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %a, i32 0, i32 0
  %0 = load i32, i32* %value, align 4
  %value1 = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %b, i32 0, i32 0
  %1 = load i32, i32* %value1, align 4
  %mul = mul nsw i32 %0, %1
  %modulus = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %a, i32 0, i32 1
  %2 = load i32, i32* %modulus, align 4
  call void @make(%struct.ModularArithmetic* sret align 4 %agg.result, i32 %mul, i32 %2)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @pow(%struct.ModularArithmetic* noalias sret align 4 %agg.result, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %b, i32 %pow) #0 {
entry:
  %pow.addr = alloca i32, align 4
  %tmp = alloca %struct.ModularArithmetic, align 4
  store i32 %pow, i32* %pow.addr, align 4
  %modulus = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %b, i32 0, i32 1
  %0 = load i32, i32* %modulus, align 4
  call void @make(%struct.ModularArithmetic* sret align 4 %agg.result, i32 1, i32 %0)
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %1 = load i32, i32* %pow.addr, align 4
  %dec = add nsw i32 %1, -1
  store i32 %dec, i32* %pow.addr, align 4
  %cmp = icmp sgt i32 %1, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  call void @mul(%struct.ModularArithmetic* sret align 4 %tmp, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %agg.result, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %b)
  %2 = bitcast %struct.ModularArithmetic* %agg.result to i8*
  %3 = bitcast %struct.ModularArithmetic* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %2, i8* align 4 %3, i32 8, i1 false)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define hidden void @print(%struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %v) #0 {
entry:
  %value = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %v, i32 0, i32 0
  %0 = load i32, i32* %value, align 4
  %modulus = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %v, i32 0, i32 1
  %1 = load i32, i32* %modulus, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i32 0, i32 0), i32 %0, i32 %1)
  ret void
}

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden void @f(%struct.ModularArithmetic* noalias sret align 4 %agg.result, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %x) #0 {
entry:
  %agg.tmp = alloca %struct.ModularArithmetic, align 4
  %agg.tmp1 = alloca %struct.ModularArithmetic, align 4
  call void @pow(%struct.ModularArithmetic* sret align 4 %agg.tmp1, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %x, i32 100)
  call void @add(%struct.ModularArithmetic* sret align 4 %agg.tmp, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %agg.tmp1, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %x)
  call void @addi(%struct.ModularArithmetic* sret align 4 %agg.result, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %agg.tmp, i32 1)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %input = alloca %struct.ModularArithmetic, align 4
  %output = alloca %struct.ModularArithmetic, align 4
  store i32 0, i32* %retval, align 4
  call void @make(%struct.ModularArithmetic* sret align 4 %input, i32 10, i32 13)
  call void @f(%struct.ModularArithmetic* sret align 4 %output, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %input)
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0))
  call void @print(%struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %input)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0))
  call void @print(%struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %output)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0))
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %modulus, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %pow.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec = add nsw i32 %1, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp = icmp sgt i32 %1, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 0:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for pow()

; entering Souper's runOnFunction() for print()

; ModuleID = './Modular_arithmetic.c.bc'
source_filename = "./Modular_arithmetic.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.ModularArithmetic = type { i32, i32 }

@.str = private unnamed_addr constant [26 x i8] c"ModularArithmetic(%d, %d)\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"f(\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c") = \00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @make(%struct.ModularArithmetic* noalias sret align 4 %agg.result, i32 %value, i32 %modulus) #0 {
entry:
  %value.addr = alloca i32, align 4
  %modulus.addr = alloca i32, align 4
  store i32 %value, i32* %value.addr, align 4
  store i32 %modulus, i32* %modulus.addr, align 4
  %value1 = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %agg.result, i32 0, i32 0
  %0 = load i32, i32* %value.addr, align 4
  %1 = load i32, i32* %modulus.addr, align 4
  %rem = srem i32 %0, %1
  store i32 %rem, i32* %value1, align 4
  %modulus2 = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %agg.result, i32 0, i32 1
  %2 = load i32, i32* %modulus.addr, align 4
  store i32 %2, i32* %modulus2, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @add(%struct.ModularArithmetic* noalias sret align 4 %agg.result, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %a, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %b) #0 {
entry:
  %value = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %a, i32 0, i32 0
  %0 = load i32, i32* %value, align 4
  %value1 = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %b, i32 0, i32 0
  %1 = load i32, i32* %value1, align 4
  %add = add nsw i32 %0, %1
  %modulus = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %a, i32 0, i32 1
  %2 = load i32, i32* %modulus, align 4
  call void @make(%struct.ModularArithmetic* sret align 4 %agg.result, i32 %add, i32 %2)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @addi(%struct.ModularArithmetic* noalias sret align 4 %agg.result, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %a, i32 %v) #0 {
entry:
  %v.addr = alloca i32, align 4
  store i32 %v, i32* %v.addr, align 4
  %value = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %a, i32 0, i32 0
  %0 = load i32, i32* %value, align 4
  %1 = load i32, i32* %v.addr, align 4
  %add = add nsw i32 %0, %1
  %modulus = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %a, i32 0, i32 1
  %2 = load i32, i32* %modulus, align 4
  call void @make(%struct.ModularArithmetic* sret align 4 %agg.result, i32 %add, i32 %2)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @mul(%struct.ModularArithmetic* noalias sret align 4 %agg.result, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %a, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %b) #0 {
entry:
  %value = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %a, i32 0, i32 0
  %0 = load i32, i32* %value, align 4
  %value1 = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %b, i32 0, i32 0
  %1 = load i32, i32* %value1, align 4
  %mul = mul nsw i32 %0, %1
  %modulus = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %a, i32 0, i32 1
  %2 = load i32, i32* %modulus, align 4
  call void @make(%struct.ModularArithmetic* sret align 4 %agg.result, i32 %mul, i32 %2)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @pow(%struct.ModularArithmetic* noalias sret align 4 %agg.result, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %b, i32 %pow) #0 {
entry:
  %pow.addr = alloca i32, align 4
  %tmp = alloca %struct.ModularArithmetic, align 4
  store i32 %pow, i32* %pow.addr, align 4
  %modulus = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %b, i32 0, i32 1
  %0 = load i32, i32* %modulus, align 4
  call void @make(%struct.ModularArithmetic* sret align 4 %agg.result, i32 1, i32 %0)
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %1 = load i32, i32* %pow.addr, align 4
  %dec = add nsw i32 %1, -1
  store i32 %dec, i32* %pow.addr, align 4
  %cmp = icmp sgt i32 %1, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  call void @mul(%struct.ModularArithmetic* sret align 4 %tmp, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %agg.result, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %b)
  %2 = bitcast %struct.ModularArithmetic* %agg.result to i8*
  %3 = bitcast %struct.ModularArithmetic* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %2, i8* align 4 %3, i32 8, i1 false)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define hidden void @print(%struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %v) #0 {
entry:
  %value = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %v, i32 0, i32 0
  %0 = load i32, i32* %value, align 4
  %modulus = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %v, i32 0, i32 1
  %1 = load i32, i32* %modulus, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i32 0, i32 0), i32 %0, i32 %1)
  ret void
}

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden void @f(%struct.ModularArithmetic* noalias sret align 4 %agg.result, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %x) #0 {
entry:
  %agg.tmp = alloca %struct.ModularArithmetic, align 4
  %agg.tmp1 = alloca %struct.ModularArithmetic, align 4
  call void @pow(%struct.ModularArithmetic* sret align 4 %agg.tmp1, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %x, i32 100)
  call void @add(%struct.ModularArithmetic* sret align 4 %agg.tmp, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %agg.tmp1, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %x)
  call void @addi(%struct.ModularArithmetic* sret align 4 %agg.result, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %agg.tmp, i32 1)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %input = alloca %struct.ModularArithmetic, align 4
  %output = alloca %struct.ModularArithmetic, align 4
  store i32 0, i32* %retval, align 4
  call void @make(%struct.ModularArithmetic* sret align 4 %input, i32 10, i32 13)
  call void @f(%struct.ModularArithmetic* sret align 4 %output, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %input)
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0))
  call void @print(%struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %input)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0))
  call void @print(%struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %output)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0))
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %value, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %modulus, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for print()

; entering Souper's runOnFunction() for f()

; ModuleID = './Modular_arithmetic.c.bc'
source_filename = "./Modular_arithmetic.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.ModularArithmetic = type { i32, i32 }

@.str = private unnamed_addr constant [26 x i8] c"ModularArithmetic(%d, %d)\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"f(\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c") = \00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @make(%struct.ModularArithmetic* noalias sret align 4 %agg.result, i32 %value, i32 %modulus) #0 {
entry:
  %value.addr = alloca i32, align 4
  %modulus.addr = alloca i32, align 4
  store i32 %value, i32* %value.addr, align 4
  store i32 %modulus, i32* %modulus.addr, align 4
  %value1 = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %agg.result, i32 0, i32 0
  %0 = load i32, i32* %value.addr, align 4
  %1 = load i32, i32* %modulus.addr, align 4
  %rem = srem i32 %0, %1
  store i32 %rem, i32* %value1, align 4
  %modulus2 = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %agg.result, i32 0, i32 1
  %2 = load i32, i32* %modulus.addr, align 4
  store i32 %2, i32* %modulus2, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @add(%struct.ModularArithmetic* noalias sret align 4 %agg.result, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %a, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %b) #0 {
entry:
  %value = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %a, i32 0, i32 0
  %0 = load i32, i32* %value, align 4
  %value1 = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %b, i32 0, i32 0
  %1 = load i32, i32* %value1, align 4
  %add = add nsw i32 %0, %1
  %modulus = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %a, i32 0, i32 1
  %2 = load i32, i32* %modulus, align 4
  call void @make(%struct.ModularArithmetic* sret align 4 %agg.result, i32 %add, i32 %2)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @addi(%struct.ModularArithmetic* noalias sret align 4 %agg.result, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %a, i32 %v) #0 {
entry:
  %v.addr = alloca i32, align 4
  store i32 %v, i32* %v.addr, align 4
  %value = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %a, i32 0, i32 0
  %0 = load i32, i32* %value, align 4
  %1 = load i32, i32* %v.addr, align 4
  %add = add nsw i32 %0, %1
  %modulus = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %a, i32 0, i32 1
  %2 = load i32, i32* %modulus, align 4
  call void @make(%struct.ModularArithmetic* sret align 4 %agg.result, i32 %add, i32 %2)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @mul(%struct.ModularArithmetic* noalias sret align 4 %agg.result, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %a, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %b) #0 {
entry:
  %value = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %a, i32 0, i32 0
  %0 = load i32, i32* %value, align 4
  %value1 = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %b, i32 0, i32 0
  %1 = load i32, i32* %value1, align 4
  %mul = mul nsw i32 %0, %1
  %modulus = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %a, i32 0, i32 1
  %2 = load i32, i32* %modulus, align 4
  call void @make(%struct.ModularArithmetic* sret align 4 %agg.result, i32 %mul, i32 %2)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @pow(%struct.ModularArithmetic* noalias sret align 4 %agg.result, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %b, i32 %pow) #0 {
entry:
  %pow.addr = alloca i32, align 4
  %tmp = alloca %struct.ModularArithmetic, align 4
  store i32 %pow, i32* %pow.addr, align 4
  %modulus = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %b, i32 0, i32 1
  %0 = load i32, i32* %modulus, align 4
  call void @make(%struct.ModularArithmetic* sret align 4 %agg.result, i32 1, i32 %0)
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %1 = load i32, i32* %pow.addr, align 4
  %dec = add nsw i32 %1, -1
  store i32 %dec, i32* %pow.addr, align 4
  %cmp = icmp sgt i32 %1, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  call void @mul(%struct.ModularArithmetic* sret align 4 %tmp, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %agg.result, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %b)
  %2 = bitcast %struct.ModularArithmetic* %agg.result to i8*
  %3 = bitcast %struct.ModularArithmetic* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %2, i8* align 4 %3, i32 8, i1 false)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define hidden void @print(%struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %v) #0 {
entry:
  %value = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %v, i32 0, i32 0
  %0 = load i32, i32* %value, align 4
  %modulus = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %v, i32 0, i32 1
  %1 = load i32, i32* %modulus, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i32 0, i32 0), i32 %0, i32 %1)
  ret void
}

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden void @f(%struct.ModularArithmetic* noalias sret align 4 %agg.result, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %x) #0 {
entry:
  %agg.tmp = alloca %struct.ModularArithmetic, align 4
  %agg.tmp1 = alloca %struct.ModularArithmetic, align 4
  call void @pow(%struct.ModularArithmetic* sret align 4 %agg.tmp1, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %x, i32 100)
  call void @add(%struct.ModularArithmetic* sret align 4 %agg.tmp, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %agg.tmp1, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %x)
  call void @addi(%struct.ModularArithmetic* sret align 4 %agg.result, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %agg.tmp, i32 1)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %input = alloca %struct.ModularArithmetic, align 4
  %output = alloca %struct.ModularArithmetic, align 4
  store i32 0, i32* %retval, align 4
  call void @make(%struct.ModularArithmetic* sret align 4 %input, i32 10, i32 13)
  call void @f(%struct.ModularArithmetic* sret align 4 %output, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %input)
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0))
  call void @print(%struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %input)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0))
  call void @print(%struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %output)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0))
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for f()

; entering Souper's runOnFunction() for main()

; ModuleID = './Modular_arithmetic.c.bc'
source_filename = "./Modular_arithmetic.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.ModularArithmetic = type { i32, i32 }

@.str = private unnamed_addr constant [26 x i8] c"ModularArithmetic(%d, %d)\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"f(\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c") = \00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @make(%struct.ModularArithmetic* noalias sret align 4 %agg.result, i32 %value, i32 %modulus) #0 {
entry:
  %value.addr = alloca i32, align 4
  %modulus.addr = alloca i32, align 4
  store i32 %value, i32* %value.addr, align 4
  store i32 %modulus, i32* %modulus.addr, align 4
  %value1 = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %agg.result, i32 0, i32 0
  %0 = load i32, i32* %value.addr, align 4
  %1 = load i32, i32* %modulus.addr, align 4
  %rem = srem i32 %0, %1
  store i32 %rem, i32* %value1, align 4
  %modulus2 = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %agg.result, i32 0, i32 1
  %2 = load i32, i32* %modulus.addr, align 4
  store i32 %2, i32* %modulus2, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @add(%struct.ModularArithmetic* noalias sret align 4 %agg.result, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %a, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %b) #0 {
entry:
  %value = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %a, i32 0, i32 0
  %0 = load i32, i32* %value, align 4
  %value1 = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %b, i32 0, i32 0
  %1 = load i32, i32* %value1, align 4
  %add = add nsw i32 %0, %1
  %modulus = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %a, i32 0, i32 1
  %2 = load i32, i32* %modulus, align 4
  call void @make(%struct.ModularArithmetic* sret align 4 %agg.result, i32 %add, i32 %2)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @addi(%struct.ModularArithmetic* noalias sret align 4 %agg.result, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %a, i32 %v) #0 {
entry:
  %v.addr = alloca i32, align 4
  store i32 %v, i32* %v.addr, align 4
  %value = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %a, i32 0, i32 0
  %0 = load i32, i32* %value, align 4
  %1 = load i32, i32* %v.addr, align 4
  %add = add nsw i32 %0, %1
  %modulus = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %a, i32 0, i32 1
  %2 = load i32, i32* %modulus, align 4
  call void @make(%struct.ModularArithmetic* sret align 4 %agg.result, i32 %add, i32 %2)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @mul(%struct.ModularArithmetic* noalias sret align 4 %agg.result, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %a, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %b) #0 {
entry:
  %value = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %a, i32 0, i32 0
  %0 = load i32, i32* %value, align 4
  %value1 = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %b, i32 0, i32 0
  %1 = load i32, i32* %value1, align 4
  %mul = mul nsw i32 %0, %1
  %modulus = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %a, i32 0, i32 1
  %2 = load i32, i32* %modulus, align 4
  call void @make(%struct.ModularArithmetic* sret align 4 %agg.result, i32 %mul, i32 %2)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @pow(%struct.ModularArithmetic* noalias sret align 4 %agg.result, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %b, i32 %pow) #0 {
entry:
  %pow.addr = alloca i32, align 4
  %tmp = alloca %struct.ModularArithmetic, align 4
  store i32 %pow, i32* %pow.addr, align 4
  %modulus = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %b, i32 0, i32 1
  %0 = load i32, i32* %modulus, align 4
  call void @make(%struct.ModularArithmetic* sret align 4 %agg.result, i32 1, i32 %0)
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %1 = load i32, i32* %pow.addr, align 4
  %dec = add nsw i32 %1, -1
  store i32 %dec, i32* %pow.addr, align 4
  %cmp = icmp sgt i32 %1, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  call void @mul(%struct.ModularArithmetic* sret align 4 %tmp, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %agg.result, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %b)
  %2 = bitcast %struct.ModularArithmetic* %agg.result to i8*
  %3 = bitcast %struct.ModularArithmetic* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %2, i8* align 4 %3, i32 8, i1 false)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define hidden void @print(%struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %v) #0 {
entry:
  %value = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %v, i32 0, i32 0
  %0 = load i32, i32* %value, align 4
  %modulus = getelementptr inbounds %struct.ModularArithmetic, %struct.ModularArithmetic* %v, i32 0, i32 1
  %1 = load i32, i32* %modulus, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i32 0, i32 0), i32 %0, i32 %1)
  ret void
}

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden void @f(%struct.ModularArithmetic* noalias sret align 4 %agg.result, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %x) #0 {
entry:
  %agg.tmp = alloca %struct.ModularArithmetic, align 4
  %agg.tmp1 = alloca %struct.ModularArithmetic, align 4
  call void @pow(%struct.ModularArithmetic* sret align 4 %agg.tmp1, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %x, i32 100)
  call void @add(%struct.ModularArithmetic* sret align 4 %agg.tmp, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %agg.tmp1, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %x)
  call void @addi(%struct.ModularArithmetic* sret align 4 %agg.result, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %agg.tmp, i32 1)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %input = alloca %struct.ModularArithmetic, align 4
  %output = alloca %struct.ModularArithmetic, align 4
  store i32 0, i32* %retval, align 4
  call void @make(%struct.ModularArithmetic* sret align 4 %input, i32 10, i32 13)
  call void @f(%struct.ModularArithmetic* sret align 4 %output, %struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %input)
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0))
  call void @print(%struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %input)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0))
  call void @print(%struct.ModularArithmetic* byval(%struct.ModularArithmetic) align 4 %output)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0))
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
