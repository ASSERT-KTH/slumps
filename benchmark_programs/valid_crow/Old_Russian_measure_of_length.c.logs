
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for __main_argc_argv()

; ModuleID = './Old_Russian_measure_of_length.c.bc'
source_filename = "./Old_Russian_measure_of_length.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [10 x i8] c"kilometer\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"meter\00", align 1
@.str.2 = private unnamed_addr constant [11 x i8] c"centimeter\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"tochka\00", align 1
@.str.4 = private unnamed_addr constant [7 x i8] c"liniya\00", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c"diuym\00", align 1
@.str.6 = private unnamed_addr constant [8 x i8] c"vershok\00", align 1
@.str.7 = private unnamed_addr constant [5 x i8] c"piad\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"fut\00", align 1
@.str.9 = private unnamed_addr constant [7 x i8] c"arshin\00", align 1
@.str.10 = private unnamed_addr constant [7 x i8] c"sazhen\00", align 1
@.str.11 = private unnamed_addr constant [7 x i8] c"versta\00", align 1
@.str.12 = private unnamed_addr constant [6 x i8] c"milia\00", align 1
@__const.__main_argc_argv.units = private unnamed_addr constant [13 x i8*] [i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.12, i32 0, i32 0)], align 16
@__const.__main_argc_argv.values = private unnamed_addr constant [13 x double] [double 1.000000e+03, double 1.000000e+00, double 1.000000e-02, double 2.540000e-04, double 2.540000e-03, double 2.540000e-02, double 4.445000e-02, double 1.778000e-01, double 3.048000e-01, double 7.112000e-01, double 2.133600e+00, double 1.066800e+03, double 7.467600e+03], align 16
@.str.13 = private unnamed_addr constant [48 x i8] c"Usage : %s followed by length as <value> <unit>\00", align 1
@.str.14 = private unnamed_addr constant [32 x i8] c"%s %s is equal in length to : \0A\00", align 1
@.str.15 = private unnamed_addr constant [8 x i8] c"\0A%lf %s\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argC, i8** %argV) #0 {
entry:
  %retval = alloca i32, align 4
  %argC.addr = alloca i32, align 4
  %argV.addr = alloca i8**, align 4
  %i = alloca i32, align 4
  %reference = alloca i32, align 4
  %units = alloca [13 x i8*], align 16
  %factor = alloca double, align 8
  %values = alloca [13 x double], align 16
  store i32 0, i32* %retval, align 4
  store i32 %argC, i32* %argC.addr, align 4
  store i8** %argV, i8*** %argV.addr, align 4
  %0 = bitcast [13 x i8*]* %units to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([13 x i8*]* @__const.__main_argc_argv.units to i8*), i32 52, i1 false)
  %1 = bitcast [13 x double]* %values to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %1, i8* align 16 bitcast ([13 x double]* @__const.__main_argc_argv.values to i8*), i32 104, i1 false)
  %2 = load i32, i32* %argC.addr, align 4
  %cmp = icmp ne i32 %2, 3
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.13, i32 0, i32 0))
  br label %if.end44

if.else:                                          ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else
  %3 = load i8**, i8*** %argV.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %3, i32 2
  %4 = load i8*, i8** %arrayidx, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds i8, i8* %4, i32 %5
  %6 = load i8, i8* %arrayidx1, align 1
  %conv = sext i8 %6 to i32
  %cmp2 = icmp ne i32 %conv, 0
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i8**, i8*** %argV.addr, align 4
  %arrayidx4 = getelementptr inbounds i8*, i8** %7, i32 2
  %8 = load i8*, i8** %arrayidx4, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds i8, i8* %8, i32 %9
  %10 = load i8, i8* %arrayidx5, align 1
  %conv6 = sext i8 %10 to i32
  %call7 = call i32 @tolower(i32 %conv6) #4
  %conv8 = trunc i32 %call7 to i8
  %11 = load i8**, i8*** %argV.addr, align 4
  %arrayidx9 = getelementptr inbounds i8*, i8** %11, i32 2
  %12 = load i8*, i8** %arrayidx9, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds i8, i8* %12, i32 %13
  store i8 %conv8, i8* %arrayidx10, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond11

for.cond11:                                       ; preds = %for.inc24, %for.end
  %15 = load i32, i32* %i, align 4
  %cmp12 = icmp slt i32 %15, 13
  br i1 %cmp12, label %for.body14, label %for.end26

for.body14:                                       ; preds = %for.cond11
  %16 = load i8**, i8*** %argV.addr, align 4
  %arrayidx15 = getelementptr inbounds i8*, i8** %16, i32 2
  %17 = load i8*, i8** %arrayidx15, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx16 = getelementptr inbounds [13 x i8*], [13 x i8*]* %units, i32 0, i32 %18
  %19 = load i8*, i8** %arrayidx16, align 4
  %call17 = call i8* @strstr(i8* %17, i8* %19)
  %cmp18 = icmp ne i8* %call17, null
  br i1 %cmp18, label %if.then20, label %if.end

if.then20:                                        ; preds = %for.body14
  %20 = load i32, i32* %i, align 4
  store i32 %20, i32* %reference, align 4
  %21 = load i8**, i8*** %argV.addr, align 4
  %arrayidx21 = getelementptr inbounds i8*, i8** %21, i32 1
  %22 = load i8*, i8** %arrayidx21, align 4
  %call22 = call double @atof(i8* %22)
  %23 = load i32, i32* %i, align 4
  %arrayidx23 = getelementptr inbounds [13 x double], [13 x double]* %values, i32 0, i32 %23
  %24 = load double, double* %arrayidx23, align 8
  %mul = fmul double %call22, %24
  store double %mul, double* %factor, align 8
  br label %for.end26

if.end:                                           ; preds = %for.body14
  br label %for.inc24

for.inc24:                                        ; preds = %if.end
  %25 = load i32, i32* %i, align 4
  %inc25 = add nsw i32 %25, 1
  store i32 %inc25, i32* %i, align 4
  br label %for.cond11

for.end26:                                        ; preds = %if.then20, %for.cond11
  %26 = load i8**, i8*** %argV.addr, align 4
  %arrayidx27 = getelementptr inbounds i8*, i8** %26, i32 1
  %27 = load i8*, i8** %arrayidx27, align 4
  %28 = load i8**, i8*** %argV.addr, align 4
  %arrayidx28 = getelementptr inbounds i8*, i8** %28, i32 2
  %29 = load i8*, i8** %arrayidx28, align 4
  %call29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.14, i32 0, i32 0), i8* %27, i8* %29)
  store i32 0, i32* %i, align 4
  br label %for.cond30

for.cond30:                                       ; preds = %for.inc41, %for.end26
  %30 = load i32, i32* %i, align 4
  %cmp31 = icmp slt i32 %30, 13
  br i1 %cmp31, label %for.body33, label %for.end43

for.body33:                                       ; preds = %for.cond30
  %31 = load i32, i32* %i, align 4
  %32 = load i32, i32* %reference, align 4
  %cmp34 = icmp ne i32 %31, %32
  br i1 %cmp34, label %if.then36, label %if.end40

if.then36:                                        ; preds = %for.body33
  %33 = load double, double* %factor, align 8
  %34 = load i32, i32* %i, align 4
  %arrayidx37 = getelementptr inbounds [13 x double], [13 x double]* %values, i32 0, i32 %34
  %35 = load double, double* %arrayidx37, align 8
  %div = fdiv double %33, %35
  %36 = load i32, i32* %i, align 4
  %arrayidx38 = getelementptr inbounds [13 x i8*], [13 x i8*]* %units, i32 0, i32 %36
  %37 = load i8*, i8** %arrayidx38, align 4
  %call39 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.15, i32 0, i32 0), double %div, i8* %37)
  br label %if.end40

if.end40:                                         ; preds = %if.then36, %for.body33
  br label %for.inc41

for.inc41:                                        ; preds = %if.end40
  %38 = load i32, i32* %i, align 4
  %inc42 = add nsw i32 %38, 1
  store i32 %inc42, i32* %i, align 4
  br label %for.cond30

for.end43:                                        ; preds = %for.cond30
  br label %if.end44

if.end44:                                         ; preds = %for.end43, %if.then
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: nounwind readonly
declare i32 @tolower(i32 %0) #3

declare i8* @strstr(i8* %0, i8* %1) #2

declare double @atof(i8* %0) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %argC.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ne i32 %2, 3
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 3:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i8, i8* %arrayidx1, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %6 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp2 = icmp ne i32 %conv, 0
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i8, i8* %arrayidx5, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv6 = sext i8 %10 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %call7 = call i32 @tolower(i32 %conv6) #4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %conv8 = trunc i32 %call7 to i8
; Looking for a replacement for:
%0:i32 = var
%1:i8 = trunc %0
infer %1

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %14, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp12 = icmp slt i32 %15, 13
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 13:i32
infer %1

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp18 = icmp ne i8* %call17, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc25 = add nsw i32 %25, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp31 = icmp slt i32 %30, 13
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 13:i32
infer %1

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %reference, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp34 = icmp ne i32 %31, %32
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %38 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc42 = add nsw i32 %38, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 3:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 0:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 255
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i8 = trunc %0
infer %1


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 13:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for __main_argc_argv()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
