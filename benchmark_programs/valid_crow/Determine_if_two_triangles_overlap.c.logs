
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for det2D()

; ModuleID = './Determine_if_two_triangles_overlap.c.bc'
source_filename = "./Determine_if_two_triangles_overlap.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.Point = type { double, double }

@errno = external thread_local global i32, align 4
@.str = private unnamed_addr constant [9 x i8] c"%d,true\0A\00", align 1
@.str.1 = private unnamed_addr constant [10 x i8] c"%d,false\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden double @det2D(%struct.Point* %p1, %struct.Point* %p2, %struct.Point* %p3) #0 {
entry:
  %p1.addr = alloca %struct.Point*, align 4
  %p2.addr = alloca %struct.Point*, align 4
  %p3.addr = alloca %struct.Point*, align 4
  store %struct.Point* %p1, %struct.Point** %p1.addr, align 4
  store %struct.Point* %p2, %struct.Point** %p2.addr, align 4
  store %struct.Point* %p3, %struct.Point** %p3.addr, align 4
  %0 = load %struct.Point*, %struct.Point** %p1.addr, align 4
  %x = getelementptr inbounds %struct.Point, %struct.Point* %0, i32 0, i32 0
  %1 = load double, double* %x, align 8
  %2 = load %struct.Point*, %struct.Point** %p2.addr, align 4
  %y = getelementptr inbounds %struct.Point, %struct.Point* %2, i32 0, i32 1
  %3 = load double, double* %y, align 8
  %4 = load %struct.Point*, %struct.Point** %p3.addr, align 4
  %y1 = getelementptr inbounds %struct.Point, %struct.Point* %4, i32 0, i32 1
  %5 = load double, double* %y1, align 8
  %sub = fsub double %3, %5
  %mul = fmul double %1, %sub
  %6 = load %struct.Point*, %struct.Point** %p2.addr, align 4
  %x2 = getelementptr inbounds %struct.Point, %struct.Point* %6, i32 0, i32 0
  %7 = load double, double* %x2, align 8
  %8 = load %struct.Point*, %struct.Point** %p3.addr, align 4
  %y3 = getelementptr inbounds %struct.Point, %struct.Point* %8, i32 0, i32 1
  %9 = load double, double* %y3, align 8
  %10 = load %struct.Point*, %struct.Point** %p1.addr, align 4
  %y4 = getelementptr inbounds %struct.Point, %struct.Point* %10, i32 0, i32 1
  %11 = load double, double* %y4, align 8
  %sub5 = fsub double %9, %11
  %mul6 = fmul double %7, %sub5
  %add = fadd double %mul, %mul6
  %12 = load %struct.Point*, %struct.Point** %p3.addr, align 4
  %x7 = getelementptr inbounds %struct.Point, %struct.Point* %12, i32 0, i32 0
  %13 = load double, double* %x7, align 8
  %14 = load %struct.Point*, %struct.Point** %p1.addr, align 4
  %y8 = getelementptr inbounds %struct.Point, %struct.Point* %14, i32 0, i32 1
  %15 = load double, double* %y8, align 8
  %16 = load %struct.Point*, %struct.Point** %p2.addr, align 4
  %y9 = getelementptr inbounds %struct.Point, %struct.Point* %16, i32 0, i32 1
  %17 = load double, double* %y9, align 8
  %sub10 = fsub double %15, %17
  %mul11 = fmul double %13, %sub10
  %add12 = fadd double %add, %mul11
  ret double %add12
}

; Function Attrs: noinline nounwind optnone
define hidden void @checkTriWinding(%struct.Point* %p1, %struct.Point* %p2, %struct.Point* %p3, i1 zeroext %allowReversed) #0 {
entry:
  %p1.addr = alloca %struct.Point*, align 4
  %p2.addr = alloca %struct.Point*, align 4
  %p3.addr = alloca %struct.Point*, align 4
  %allowReversed.addr = alloca i8, align 1
  %detTri = alloca double, align 8
  %t = alloca double, align 8
  store %struct.Point* %p1, %struct.Point** %p1.addr, align 4
  store %struct.Point* %p2, %struct.Point** %p2.addr, align 4
  store %struct.Point* %p3, %struct.Point** %p3.addr, align 4
  %frombool = zext i1 %allowReversed to i8
  store i8 %frombool, i8* %allowReversed.addr, align 1
  %0 = load %struct.Point*, %struct.Point** %p1.addr, align 4
  %1 = load %struct.Point*, %struct.Point** %p2.addr, align 4
  %2 = load %struct.Point*, %struct.Point** %p3.addr, align 4
  %call = call double @det2D(%struct.Point* %0, %struct.Point* %1, %struct.Point* %2)
  store double %call, double* %detTri, align 8
  %3 = load double, double* %detTri, align 8
  %cmp = fcmp olt double %3, 0.000000e+00
  br i1 %cmp, label %if.then, label %if.end8

if.then:                                          ; preds = %entry
  %4 = load i8, i8* %allowReversed.addr, align 1
  %tobool = trunc i8 %4 to i1
  br i1 %tobool, label %if.then1, label %if.else

if.then1:                                         ; preds = %if.then
  %5 = load %struct.Point*, %struct.Point** %p3.addr, align 4
  %x = getelementptr inbounds %struct.Point, %struct.Point* %5, i32 0, i32 0
  %6 = load double, double* %x, align 8
  store double %6, double* %t, align 8
  %7 = load %struct.Point*, %struct.Point** %p2.addr, align 4
  %x2 = getelementptr inbounds %struct.Point, %struct.Point* %7, i32 0, i32 0
  %8 = load double, double* %x2, align 8
  %9 = load %struct.Point*, %struct.Point** %p3.addr, align 4
  %x3 = getelementptr inbounds %struct.Point, %struct.Point* %9, i32 0, i32 0
  store double %8, double* %x3, align 8
  %10 = load double, double* %t, align 8
  %11 = load %struct.Point*, %struct.Point** %p2.addr, align 4
  %x4 = getelementptr inbounds %struct.Point, %struct.Point* %11, i32 0, i32 0
  store double %10, double* %x4, align 8
  %12 = load %struct.Point*, %struct.Point** %p3.addr, align 4
  %y = getelementptr inbounds %struct.Point, %struct.Point* %12, i32 0, i32 1
  %13 = load double, double* %y, align 8
  store double %13, double* %t, align 8
  %14 = load %struct.Point*, %struct.Point** %p2.addr, align 4
  %y5 = getelementptr inbounds %struct.Point, %struct.Point* %14, i32 0, i32 1
  %15 = load double, double* %y5, align 8
  %16 = load %struct.Point*, %struct.Point** %p3.addr, align 4
  %y6 = getelementptr inbounds %struct.Point, %struct.Point* %16, i32 0, i32 1
  store double %15, double* %y6, align 8
  %17 = load double, double* %t, align 8
  %18 = load %struct.Point*, %struct.Point** %p2.addr, align 4
  %y7 = getelementptr inbounds %struct.Point, %struct.Point* %18, i32 0, i32 1
  store double %17, double* %y7, align 8
  br label %if.end

if.else:                                          ; preds = %if.then
  store i32 1, i32* @errno, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then1
  br label %if.end8

if.end8:                                          ; preds = %if.end, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @boundaryCollideChk(%struct.Point* %p1, %struct.Point* %p2, %struct.Point* %p3, double %eps) #0 {
entry:
  %p1.addr = alloca %struct.Point*, align 4
  %p2.addr = alloca %struct.Point*, align 4
  %p3.addr = alloca %struct.Point*, align 4
  %eps.addr = alloca double, align 8
  store %struct.Point* %p1, %struct.Point** %p1.addr, align 4
  store %struct.Point* %p2, %struct.Point** %p2.addr, align 4
  store %struct.Point* %p3, %struct.Point** %p3.addr, align 4
  store double %eps, double* %eps.addr, align 8
  %0 = load %struct.Point*, %struct.Point** %p1.addr, align 4
  %1 = load %struct.Point*, %struct.Point** %p2.addr, align 4
  %2 = load %struct.Point*, %struct.Point** %p3.addr, align 4
  %call = call double @det2D(%struct.Point* %0, %struct.Point* %1, %struct.Point* %2)
  %3 = load double, double* %eps.addr, align 8
  %cmp = fcmp olt double %call, %3
  ret i1 %cmp
}

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @boundaryDoesntCollideChk(%struct.Point* %p1, %struct.Point* %p2, %struct.Point* %p3, double %eps) #0 {
entry:
  %p1.addr = alloca %struct.Point*, align 4
  %p2.addr = alloca %struct.Point*, align 4
  %p3.addr = alloca %struct.Point*, align 4
  %eps.addr = alloca double, align 8
  store %struct.Point* %p1, %struct.Point** %p1.addr, align 4
  store %struct.Point* %p2, %struct.Point** %p2.addr, align 4
  store %struct.Point* %p3, %struct.Point** %p3.addr, align 4
  store double %eps, double* %eps.addr, align 8
  %0 = load %struct.Point*, %struct.Point** %p1.addr, align 4
  %1 = load %struct.Point*, %struct.Point** %p2.addr, align 4
  %2 = load %struct.Point*, %struct.Point** %p3.addr, align 4
  %call = call double @det2D(%struct.Point* %0, %struct.Point* %1, %struct.Point* %2)
  %3 = load double, double* %eps.addr, align 8
  %cmp = fcmp ole double %call, %3
  ret i1 %cmp
}

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @triTri2D(%struct.Point* %t1, %struct.Point* %t2, double %eps, i1 zeroext %allowReversed, i1 zeroext %onBoundary) #0 {
entry:
  %retval = alloca i1, align 1
  %t1.addr = alloca %struct.Point*, align 4
  %t2.addr = alloca %struct.Point*, align 4
  %eps.addr = alloca double, align 8
  %allowReversed.addr = alloca i8, align 1
  %onBoundary.addr = alloca i8, align 1
  %chkEdge = alloca i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %j32 = alloca i32, align 4
  store %struct.Point* %t1, %struct.Point** %t1.addr, align 4
  store %struct.Point* %t2, %struct.Point** %t2.addr, align 4
  store double %eps, double* %eps.addr, align 8
  %frombool = zext i1 %allowReversed to i8
  store i8 %frombool, i8* %allowReversed.addr, align 1
  %frombool1 = zext i1 %onBoundary to i8
  store i8 %frombool1, i8* %onBoundary.addr, align 1
  %0 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %arrayidx = getelementptr inbounds %struct.Point, %struct.Point* %0, i32 0
  %1 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %arrayidx2 = getelementptr inbounds %struct.Point, %struct.Point* %1, i32 1
  %2 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %arrayidx3 = getelementptr inbounds %struct.Point, %struct.Point* %2, i32 2
  %3 = load i8, i8* %allowReversed.addr, align 1
  %tobool = trunc i8 %3 to i1
  call void @checkTriWinding(%struct.Point* %arrayidx, %struct.Point* %arrayidx2, %struct.Point* %arrayidx3, i1 zeroext %tobool)
  %4 = load i32, i32* @errno, align 4
  %cmp = icmp ne i32 %4, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i1 false, i1* %retval, align 1
  br label %return

if.end:                                           ; preds = %entry
  %5 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %arrayidx4 = getelementptr inbounds %struct.Point, %struct.Point* %5, i32 0
  %6 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %arrayidx5 = getelementptr inbounds %struct.Point, %struct.Point* %6, i32 1
  %7 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %arrayidx6 = getelementptr inbounds %struct.Point, %struct.Point* %7, i32 2
  %8 = load i8, i8* %allowReversed.addr, align 1
  %tobool7 = trunc i8 %8 to i1
  call void @checkTriWinding(%struct.Point* %arrayidx4, %struct.Point* %arrayidx5, %struct.Point* %arrayidx6, i1 zeroext %tobool7)
  %9 = load i32, i32* @errno, align 4
  %cmp8 = icmp ne i32 %9, 0
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end
  store i1 false, i1* %retval, align 1
  br label %return

if.end10:                                         ; preds = %if.end
  %10 = load i8, i8* %onBoundary.addr, align 1
  %tobool11 = trunc i8 %10 to i1
  br i1 %tobool11, label %if.then12, label %if.else

if.then12:                                        ; preds = %if.end10
  store i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)* @boundaryCollideChk, i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)** %chkEdge, align 4
  br label %if.end13

if.else:                                          ; preds = %if.end10
  store i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)* @boundaryDoesntCollideChk, i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)** %chkEdge, align 4
  br label %if.end13

if.end13:                                         ; preds = %if.else, %if.then12
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end13
  %11 = load i32, i32* %i, align 4
  %cmp14 = icmp slt i32 %11, 3
  br i1 %cmp14, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load i32, i32* %i, align 4
  %add = add nsw i32 %12, 1
  %rem = srem i32 %add, 3
  store i32 %rem, i32* %j, align 4
  %13 = load i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)*, i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)** %chkEdge, align 4
  %14 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx15 = getelementptr inbounds %struct.Point, %struct.Point* %14, i32 %15
  %16 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %17 = load i32, i32* %j, align 4
  %arrayidx16 = getelementptr inbounds %struct.Point, %struct.Point* %16, i32 %17
  %18 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %arrayidx17 = getelementptr inbounds %struct.Point, %struct.Point* %18, i32 0
  %19 = load double, double* %eps.addr, align 8
  %call = call zeroext i1 %13(%struct.Point* %arrayidx15, %struct.Point* %arrayidx16, %struct.Point* %arrayidx17, double %19)
  br i1 %call, label %land.lhs.true, label %if.end28

land.lhs.true:                                    ; preds = %for.body
  %20 = load i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)*, i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)** %chkEdge, align 4
  %21 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %22 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds %struct.Point, %struct.Point* %21, i32 %22
  %23 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %24 = load i32, i32* %j, align 4
  %arrayidx19 = getelementptr inbounds %struct.Point, %struct.Point* %23, i32 %24
  %25 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %arrayidx20 = getelementptr inbounds %struct.Point, %struct.Point* %25, i32 1
  %26 = load double, double* %eps.addr, align 8
  %call21 = call zeroext i1 %20(%struct.Point* %arrayidx18, %struct.Point* %arrayidx19, %struct.Point* %arrayidx20, double %26)
  br i1 %call21, label %land.lhs.true22, label %if.end28

land.lhs.true22:                                  ; preds = %land.lhs.true
  %27 = load i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)*, i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)** %chkEdge, align 4
  %28 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %29 = load i32, i32* %i, align 4
  %arrayidx23 = getelementptr inbounds %struct.Point, %struct.Point* %28, i32 %29
  %30 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %31 = load i32, i32* %j, align 4
  %arrayidx24 = getelementptr inbounds %struct.Point, %struct.Point* %30, i32 %31
  %32 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %arrayidx25 = getelementptr inbounds %struct.Point, %struct.Point* %32, i32 2
  %33 = load double, double* %eps.addr, align 8
  %call26 = call zeroext i1 %27(%struct.Point* %arrayidx23, %struct.Point* %arrayidx24, %struct.Point* %arrayidx25, double %33)
  br i1 %call26, label %if.then27, label %if.end28

if.then27:                                        ; preds = %land.lhs.true22
  store i1 false, i1* %retval, align 1
  br label %return

if.end28:                                         ; preds = %land.lhs.true22, %land.lhs.true, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end28
  %34 = load i32, i32* %i, align 4
  %inc = add nsw i32 %34, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond29

for.cond29:                                       ; preds = %for.inc51, %for.end
  %35 = load i32, i32* %i, align 4
  %cmp30 = icmp slt i32 %35, 3
  br i1 %cmp30, label %for.body31, label %for.end53

for.body31:                                       ; preds = %for.cond29
  %36 = load i32, i32* %i, align 4
  %add33 = add nsw i32 %36, 1
  %rem34 = srem i32 %add33, 3
  store i32 %rem34, i32* %j32, align 4
  %37 = load i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)*, i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)** %chkEdge, align 4
  %38 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %39 = load i32, i32* %i, align 4
  %arrayidx35 = getelementptr inbounds %struct.Point, %struct.Point* %38, i32 %39
  %40 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %41 = load i32, i32* %j32, align 4
  %arrayidx36 = getelementptr inbounds %struct.Point, %struct.Point* %40, i32 %41
  %42 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %arrayidx37 = getelementptr inbounds %struct.Point, %struct.Point* %42, i32 0
  %43 = load double, double* %eps.addr, align 8
  %call38 = call zeroext i1 %37(%struct.Point* %arrayidx35, %struct.Point* %arrayidx36, %struct.Point* %arrayidx37, double %43)
  br i1 %call38, label %land.lhs.true39, label %if.end50

land.lhs.true39:                                  ; preds = %for.body31
  %44 = load i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)*, i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)** %chkEdge, align 4
  %45 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %46 = load i32, i32* %i, align 4
  %arrayidx40 = getelementptr inbounds %struct.Point, %struct.Point* %45, i32 %46
  %47 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %48 = load i32, i32* %j32, align 4
  %arrayidx41 = getelementptr inbounds %struct.Point, %struct.Point* %47, i32 %48
  %49 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %arrayidx42 = getelementptr inbounds %struct.Point, %struct.Point* %49, i32 1
  %50 = load double, double* %eps.addr, align 8
  %call43 = call zeroext i1 %44(%struct.Point* %arrayidx40, %struct.Point* %arrayidx41, %struct.Point* %arrayidx42, double %50)
  br i1 %call43, label %land.lhs.true44, label %if.end50

land.lhs.true44:                                  ; preds = %land.lhs.true39
  %51 = load i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)*, i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)** %chkEdge, align 4
  %52 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %53 = load i32, i32* %i, align 4
  %arrayidx45 = getelementptr inbounds %struct.Point, %struct.Point* %52, i32 %53
  %54 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %55 = load i32, i32* %j32, align 4
  %arrayidx46 = getelementptr inbounds %struct.Point, %struct.Point* %54, i32 %55
  %56 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %arrayidx47 = getelementptr inbounds %struct.Point, %struct.Point* %56, i32 2
  %57 = load double, double* %eps.addr, align 8
  %call48 = call zeroext i1 %51(%struct.Point* %arrayidx45, %struct.Point* %arrayidx46, %struct.Point* %arrayidx47, double %57)
  br i1 %call48, label %if.then49, label %if.end50

if.then49:                                        ; preds = %land.lhs.true44
  store i1 false, i1* %retval, align 1
  br label %return

if.end50:                                         ; preds = %land.lhs.true44, %land.lhs.true39, %for.body31
  br label %for.inc51

for.inc51:                                        ; preds = %if.end50
  %58 = load i32, i32* %i, align 4
  %inc52 = add nsw i32 %58, 1
  store i32 %inc52, i32* %i, align 4
  br label %for.cond29

for.end53:                                        ; preds = %for.cond29
  store i1 true, i1* %retval, align 1
  br label %return

return:                                           ; preds = %for.end53, %if.then49, %if.then27, %if.then9, %if.then
  %59 = load i1, i1* %retval, align 1
  ret i1 %59
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %t1 = alloca [3 x %struct.Point], align 16
  %t2 = alloca [3 x %struct.Point], align 16
  %t13 = alloca [3 x %struct.Point], align 16
  %t24 = alloca [3 x %struct.Point], align 16
  %t110 = alloca [3 x %struct.Point], align 16
  %t211 = alloca [3 x %struct.Point], align 16
  %t117 = alloca [3 x %struct.Point], align 16
  %t218 = alloca [3 x %struct.Point], align 16
  %t124 = alloca [3 x %struct.Point], align 16
  %t225 = alloca [3 x %struct.Point], align 16
  %t131 = alloca [3 x %struct.Point], align 16
  %t232 = alloca [3 x %struct.Point], align 16
  %t138 = alloca [3 x %struct.Point], align 16
  %t239 = alloca [3 x %struct.Point], align 16
  %t145 = alloca [3 x %struct.Point], align 16
  %t246 = alloca [3 x %struct.Point], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [3 x %struct.Point]* %t1 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 48, i1 false)
  %1 = bitcast i8* %0 to [3 x %struct.Point]*
  %2 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %1, i32 0, i32 1
  %3 = getelementptr inbounds %struct.Point, %struct.Point* %2, i32 0, i32 0
  store double 5.000000e+00, double* %3, align 16
  %4 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %1, i32 0, i32 2
  %5 = getelementptr inbounds %struct.Point, %struct.Point* %4, i32 0, i32 1
  store double 5.000000e+00, double* %5, align 8
  %6 = bitcast [3 x %struct.Point]* %t2 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %6, i8 0, i32 48, i1 false)
  %7 = bitcast i8* %6 to [3 x %struct.Point]*
  %8 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Point, %struct.Point* %8, i32 0, i32 0
  store double 5.000000e+00, double* %9, align 16
  %10 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %7, i32 0, i32 2
  %11 = getelementptr inbounds %struct.Point, %struct.Point* %10, i32 0, i32 1
  store double 6.000000e+00, double* %11, align 8
  %arraydecay = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t1, i32 0, i32 0
  %arraydecay1 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t2, i32 0, i32 0
  %call = call zeroext i1 @triTri2D(%struct.Point* %arraydecay, %struct.Point* %arraydecay1, double 0.000000e+00, i1 zeroext false, i1 zeroext true)
  %conv = zext i1 %call to i32
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i32 %conv)
  %12 = bitcast [3 x %struct.Point]* %t13 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %12, i8 0, i32 48, i1 false)
  %13 = bitcast i8* %12 to [3 x %struct.Point]*
  %14 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %13, i32 0, i32 1
  %15 = getelementptr inbounds %struct.Point, %struct.Point* %14, i32 0, i32 1
  store double 5.000000e+00, double* %15, align 8
  %16 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %13, i32 0, i32 2
  %17 = getelementptr inbounds %struct.Point, %struct.Point* %16, i32 0, i32 0
  store double 5.000000e+00, double* %17, align 16
  %18 = bitcast [3 x %struct.Point]* %t24 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %18, i8 0, i32 48, i1 false)
  %19 = bitcast i8* %18 to [3 x %struct.Point]*
  %20 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %19, i32 0, i32 1
  %21 = getelementptr inbounds %struct.Point, %struct.Point* %20, i32 0, i32 1
  store double 5.000000e+00, double* %21, align 8
  %22 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %19, i32 0, i32 2
  %23 = getelementptr inbounds %struct.Point, %struct.Point* %22, i32 0, i32 0
  store double 5.000000e+00, double* %23, align 16
  %arraydecay5 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t13, i32 0, i32 0
  %arraydecay6 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t24, i32 0, i32 0
  %call7 = call zeroext i1 @triTri2D(%struct.Point* %arraydecay5, %struct.Point* %arraydecay6, double 0.000000e+00, i1 zeroext true, i1 zeroext true)
  %conv8 = zext i1 %call7 to i32
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i32 %conv8)
  %24 = bitcast [3 x %struct.Point]* %t110 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %24, i8 0, i32 48, i1 false)
  %25 = bitcast i8* %24 to [3 x %struct.Point]*
  %26 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %25, i32 0, i32 1
  %27 = getelementptr inbounds %struct.Point, %struct.Point* %26, i32 0, i32 0
  store double 5.000000e+00, double* %27, align 16
  %28 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %25, i32 0, i32 2
  %29 = getelementptr inbounds %struct.Point, %struct.Point* %28, i32 0, i32 1
  store double 5.000000e+00, double* %29, align 8
  %30 = bitcast [3 x %struct.Point]* %t211 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %30, i8 0, i32 48, i1 false)
  %31 = bitcast i8* %30 to [3 x %struct.Point]*
  %32 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %31, i32 0, i32 0
  %33 = getelementptr inbounds %struct.Point, %struct.Point* %32, i32 0, i32 0
  store double -1.000000e+01, double* %33, align 16
  %34 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %31, i32 0, i32 1
  %35 = getelementptr inbounds %struct.Point, %struct.Point* %34, i32 0, i32 0
  store double -5.000000e+00, double* %35, align 16
  %36 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %31, i32 0, i32 2
  %37 = getelementptr inbounds %struct.Point, %struct.Point* %36, i32 0, i32 0
  store double -1.000000e+00, double* %37, align 16
  %38 = getelementptr inbounds %struct.Point, %struct.Point* %36, i32 0, i32 1
  store double 6.000000e+00, double* %38, align 8
  %arraydecay12 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t110, i32 0, i32 0
  %arraydecay13 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t211, i32 0, i32 0
  %call14 = call zeroext i1 @triTri2D(%struct.Point* %arraydecay12, %struct.Point* %arraydecay13, double 0.000000e+00, i1 zeroext false, i1 zeroext true)
  %conv15 = zext i1 %call14 to i32
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i32 %conv15)
  %39 = bitcast [3 x %struct.Point]* %t117 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %39, i8 0, i32 48, i1 false)
  %40 = bitcast i8* %39 to [3 x %struct.Point]*
  %41 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %40, i32 0, i32 1
  %42 = getelementptr inbounds %struct.Point, %struct.Point* %41, i32 0, i32 0
  store double 5.000000e+00, double* %42, align 16
  %43 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %40, i32 0, i32 2
  %44 = getelementptr inbounds %struct.Point, %struct.Point* %43, i32 0, i32 0
  store double 2.500000e+00, double* %44, align 16
  %45 = getelementptr inbounds %struct.Point, %struct.Point* %43, i32 0, i32 1
  store double 5.000000e+00, double* %45, align 8
  %46 = bitcast [3 x %struct.Point]* %t218 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %46, i8 0, i32 48, i1 false)
  %47 = bitcast i8* %46 to [3 x %struct.Point]*
  %48 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %47, i32 0, i32 0
  %49 = getelementptr inbounds %struct.Point, %struct.Point* %48, i32 0, i32 1
  store double 4.000000e+00, double* %49, align 8
  %50 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %47, i32 0, i32 1
  %51 = getelementptr inbounds %struct.Point, %struct.Point* %50, i32 0, i32 0
  store double 2.500000e+00, double* %51, align 16
  %52 = getelementptr inbounds %struct.Point, %struct.Point* %50, i32 0, i32 1
  store double -1.000000e+00, double* %52, align 8
  %53 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %47, i32 0, i32 2
  %54 = getelementptr inbounds %struct.Point, %struct.Point* %53, i32 0, i32 0
  store double 5.000000e+00, double* %54, align 16
  %55 = getelementptr inbounds %struct.Point, %struct.Point* %53, i32 0, i32 1
  store double 4.000000e+00, double* %55, align 8
  %arraydecay19 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t117, i32 0, i32 0
  %arraydecay20 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t218, i32 0, i32 0
  %call21 = call zeroext i1 @triTri2D(%struct.Point* %arraydecay19, %struct.Point* %arraydecay20, double 0.000000e+00, i1 zeroext false, i1 zeroext true)
  %conv22 = zext i1 %call21 to i32
  %call23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i32 %conv22)
  %56 = bitcast [3 x %struct.Point]* %t124 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %56, i8 0, i32 48, i1 false)
  %57 = bitcast i8* %56 to [3 x %struct.Point]*
  %58 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %57, i32 0, i32 1
  %59 = getelementptr inbounds %struct.Point, %struct.Point* %58, i32 0, i32 0
  store double 1.000000e+00, double* %59, align 16
  %60 = getelementptr inbounds %struct.Point, %struct.Point* %58, i32 0, i32 1
  store double 1.000000e+00, double* %60, align 8
  %61 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %57, i32 0, i32 2
  %62 = getelementptr inbounds %struct.Point, %struct.Point* %61, i32 0, i32 1
  store double 2.000000e+00, double* %62, align 8
  %63 = bitcast [3 x %struct.Point]* %t225 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %63, i8 0, i32 48, i1 false)
  %64 = bitcast i8* %63 to [3 x %struct.Point]*
  %65 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %64, i32 0, i32 0
  %66 = getelementptr inbounds %struct.Point, %struct.Point* %65, i32 0, i32 0
  store double 2.000000e+00, double* %66, align 16
  %67 = getelementptr inbounds %struct.Point, %struct.Point* %65, i32 0, i32 1
  store double 1.000000e+00, double* %67, align 8
  %68 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %64, i32 0, i32 1
  %69 = getelementptr inbounds %struct.Point, %struct.Point* %68, i32 0, i32 0
  store double 3.000000e+00, double* %69, align 16
  %70 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %64, i32 0, i32 2
  %71 = getelementptr inbounds %struct.Point, %struct.Point* %70, i32 0, i32 0
  store double 3.000000e+00, double* %71, align 16
  %72 = getelementptr inbounds %struct.Point, %struct.Point* %70, i32 0, i32 1
  store double 2.000000e+00, double* %72, align 8
  %arraydecay26 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t124, i32 0, i32 0
  %arraydecay27 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t225, i32 0, i32 0
  %call28 = call zeroext i1 @triTri2D(%struct.Point* %arraydecay26, %struct.Point* %arraydecay27, double 0.000000e+00, i1 zeroext false, i1 zeroext true)
  %conv29 = zext i1 %call28 to i32
  %call30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i32 %conv29)
  %73 = bitcast [3 x %struct.Point]* %t131 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %73, i8 0, i32 48, i1 false)
  %74 = bitcast i8* %73 to [3 x %struct.Point]*
  %75 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %74, i32 0, i32 1
  %76 = getelementptr inbounds %struct.Point, %struct.Point* %75, i32 0, i32 0
  store double 1.000000e+00, double* %76, align 16
  %77 = getelementptr inbounds %struct.Point, %struct.Point* %75, i32 0, i32 1
  store double 1.000000e+00, double* %77, align 8
  %78 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %74, i32 0, i32 2
  %79 = getelementptr inbounds %struct.Point, %struct.Point* %78, i32 0, i32 1
  store double 2.000000e+00, double* %79, align 8
  %80 = bitcast [3 x %struct.Point]* %t232 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %80, i8 0, i32 48, i1 false)
  %81 = bitcast i8* %80 to [3 x %struct.Point]*
  %82 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %81, i32 0, i32 0
  %83 = getelementptr inbounds %struct.Point, %struct.Point* %82, i32 0, i32 0
  store double 2.000000e+00, double* %83, align 16
  %84 = getelementptr inbounds %struct.Point, %struct.Point* %82, i32 0, i32 1
  store double 1.000000e+00, double* %84, align 8
  %85 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %81, i32 0, i32 1
  %86 = getelementptr inbounds %struct.Point, %struct.Point* %85, i32 0, i32 0
  store double 3.000000e+00, double* %86, align 16
  %87 = getelementptr inbounds %struct.Point, %struct.Point* %85, i32 0, i32 1
  store double -2.000000e+00, double* %87, align 8
  %88 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %81, i32 0, i32 2
  %89 = getelementptr inbounds %struct.Point, %struct.Point* %88, i32 0, i32 0
  store double 3.000000e+00, double* %89, align 16
  %90 = getelementptr inbounds %struct.Point, %struct.Point* %88, i32 0, i32 1
  store double 4.000000e+00, double* %90, align 8
  %arraydecay33 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t131, i32 0, i32 0
  %arraydecay34 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t232, i32 0, i32 0
  %call35 = call zeroext i1 @triTri2D(%struct.Point* %arraydecay33, %struct.Point* %arraydecay34, double 0.000000e+00, i1 zeroext false, i1 zeroext true)
  %conv36 = zext i1 %call35 to i32
  %call37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i32 %conv36)
  %91 = bitcast [3 x %struct.Point]* %t138 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %91, i8 0, i32 48, i1 false)
  %92 = bitcast i8* %91 to [3 x %struct.Point]*
  %93 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %92, i32 0, i32 1
  %94 = getelementptr inbounds %struct.Point, %struct.Point* %93, i32 0, i32 0
  store double 1.000000e+00, double* %94, align 16
  %95 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %92, i32 0, i32 2
  %96 = getelementptr inbounds %struct.Point, %struct.Point* %95, i32 0, i32 1
  store double 1.000000e+00, double* %96, align 8
  %97 = bitcast [3 x %struct.Point]* %t239 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %97, i8 0, i32 48, i1 false)
  %98 = bitcast i8* %97 to [3 x %struct.Point]*
  %99 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %98, i32 0, i32 0
  %100 = getelementptr inbounds %struct.Point, %struct.Point* %99, i32 0, i32 0
  store double 1.000000e+00, double* %100, align 16
  %101 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %98, i32 0, i32 1
  %102 = getelementptr inbounds %struct.Point, %struct.Point* %101, i32 0, i32 0
  store double 2.000000e+00, double* %102, align 16
  %103 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %98, i32 0, i32 2
  %104 = getelementptr inbounds %struct.Point, %struct.Point* %103, i32 0, i32 0
  store double 1.000000e+00, double* %104, align 16
  %105 = getelementptr inbounds %struct.Point, %struct.Point* %103, i32 0, i32 1
  store double 1.000000e+00, double* %105, align 8
  %arraydecay40 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t138, i32 0, i32 0
  %arraydecay41 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t239, i32 0, i32 0
  %call42 = call zeroext i1 @triTri2D(%struct.Point* %arraydecay40, %struct.Point* %arraydecay41, double 0.000000e+00, i1 zeroext false, i1 zeroext true)
  %conv43 = zext i1 %call42 to i32
  %call44 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i32 %conv43)
  %106 = bitcast [3 x %struct.Point]* %t145 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %106, i8 0, i32 48, i1 false)
  %107 = bitcast i8* %106 to [3 x %struct.Point]*
  %108 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %107, i32 0, i32 1
  %109 = getelementptr inbounds %struct.Point, %struct.Point* %108, i32 0, i32 0
  store double 1.000000e+00, double* %109, align 16
  %110 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %107, i32 0, i32 2
  %111 = getelementptr inbounds %struct.Point, %struct.Point* %110, i32 0, i32 1
  store double 1.000000e+00, double* %111, align 8
  %112 = bitcast [3 x %struct.Point]* %t246 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %112, i8 0, i32 48, i1 false)
  %113 = bitcast i8* %112 to [3 x %struct.Point]*
  %114 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %113, i32 0, i32 0
  %115 = getelementptr inbounds %struct.Point, %struct.Point* %114, i32 0, i32 0
  store double 1.000000e+00, double* %115, align 16
  %116 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %113, i32 0, i32 1
  %117 = getelementptr inbounds %struct.Point, %struct.Point* %116, i32 0, i32 0
  store double 2.000000e+00, double* %117, align 16
  %118 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %113, i32 0, i32 2
  %119 = getelementptr inbounds %struct.Point, %struct.Point* %118, i32 0, i32 0
  store double 1.000000e+00, double* %119, align 16
  %120 = getelementptr inbounds %struct.Point, %struct.Point* %118, i32 0, i32 1
  store double 1.000000e+00, double* %120, align 8
  %arraydecay47 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t145, i32 0, i32 0
  %arraydecay48 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t246, i32 0, i32 0
  %call49 = call zeroext i1 @triTri2D(%struct.Point* %arraydecay47, %struct.Point* %arraydecay48, double 0.000000e+00, i1 zeroext false, i1 zeroext false)
  %conv50 = zext i1 %call49 to i32
  %call51 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i32 %conv50)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for det2D()

; entering Souper's runOnFunction() for checkTriWinding()

; ModuleID = './Determine_if_two_triangles_overlap.c.bc'
source_filename = "./Determine_if_two_triangles_overlap.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.Point = type { double, double }

@errno = external thread_local global i32, align 4
@.str = private unnamed_addr constant [9 x i8] c"%d,true\0A\00", align 1
@.str.1 = private unnamed_addr constant [10 x i8] c"%d,false\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden double @det2D(%struct.Point* %p1, %struct.Point* %p2, %struct.Point* %p3) #0 {
entry:
  %p1.addr = alloca %struct.Point*, align 4
  %p2.addr = alloca %struct.Point*, align 4
  %p3.addr = alloca %struct.Point*, align 4
  store %struct.Point* %p1, %struct.Point** %p1.addr, align 4
  store %struct.Point* %p2, %struct.Point** %p2.addr, align 4
  store %struct.Point* %p3, %struct.Point** %p3.addr, align 4
  %0 = load %struct.Point*, %struct.Point** %p1.addr, align 4
  %x = getelementptr inbounds %struct.Point, %struct.Point* %0, i32 0, i32 0
  %1 = load double, double* %x, align 8
  %2 = load %struct.Point*, %struct.Point** %p2.addr, align 4
  %y = getelementptr inbounds %struct.Point, %struct.Point* %2, i32 0, i32 1
  %3 = load double, double* %y, align 8
  %4 = load %struct.Point*, %struct.Point** %p3.addr, align 4
  %y1 = getelementptr inbounds %struct.Point, %struct.Point* %4, i32 0, i32 1
  %5 = load double, double* %y1, align 8
  %sub = fsub double %3, %5
  %mul = fmul double %1, %sub
  %6 = load %struct.Point*, %struct.Point** %p2.addr, align 4
  %x2 = getelementptr inbounds %struct.Point, %struct.Point* %6, i32 0, i32 0
  %7 = load double, double* %x2, align 8
  %8 = load %struct.Point*, %struct.Point** %p3.addr, align 4
  %y3 = getelementptr inbounds %struct.Point, %struct.Point* %8, i32 0, i32 1
  %9 = load double, double* %y3, align 8
  %10 = load %struct.Point*, %struct.Point** %p1.addr, align 4
  %y4 = getelementptr inbounds %struct.Point, %struct.Point* %10, i32 0, i32 1
  %11 = load double, double* %y4, align 8
  %sub5 = fsub double %9, %11
  %mul6 = fmul double %7, %sub5
  %add = fadd double %mul, %mul6
  %12 = load %struct.Point*, %struct.Point** %p3.addr, align 4
  %x7 = getelementptr inbounds %struct.Point, %struct.Point* %12, i32 0, i32 0
  %13 = load double, double* %x7, align 8
  %14 = load %struct.Point*, %struct.Point** %p1.addr, align 4
  %y8 = getelementptr inbounds %struct.Point, %struct.Point* %14, i32 0, i32 1
  %15 = load double, double* %y8, align 8
  %16 = load %struct.Point*, %struct.Point** %p2.addr, align 4
  %y9 = getelementptr inbounds %struct.Point, %struct.Point* %16, i32 0, i32 1
  %17 = load double, double* %y9, align 8
  %sub10 = fsub double %15, %17
  %mul11 = fmul double %13, %sub10
  %add12 = fadd double %add, %mul11
  ret double %add12
}

; Function Attrs: noinline nounwind optnone
define hidden void @checkTriWinding(%struct.Point* %p1, %struct.Point* %p2, %struct.Point* %p3, i1 zeroext %allowReversed) #0 {
entry:
  %p1.addr = alloca %struct.Point*, align 4
  %p2.addr = alloca %struct.Point*, align 4
  %p3.addr = alloca %struct.Point*, align 4
  %allowReversed.addr = alloca i8, align 1
  %detTri = alloca double, align 8
  %t = alloca double, align 8
  store %struct.Point* %p1, %struct.Point** %p1.addr, align 4
  store %struct.Point* %p2, %struct.Point** %p2.addr, align 4
  store %struct.Point* %p3, %struct.Point** %p3.addr, align 4
  %frombool = zext i1 %allowReversed to i8
  store i8 %frombool, i8* %allowReversed.addr, align 1
  %0 = load %struct.Point*, %struct.Point** %p1.addr, align 4
  %1 = load %struct.Point*, %struct.Point** %p2.addr, align 4
  %2 = load %struct.Point*, %struct.Point** %p3.addr, align 4
  %call = call double @det2D(%struct.Point* %0, %struct.Point* %1, %struct.Point* %2)
  store double %call, double* %detTri, align 8
  %3 = load double, double* %detTri, align 8
  %cmp = fcmp olt double %3, 0.000000e+00
  br i1 %cmp, label %if.then, label %if.end8

if.then:                                          ; preds = %entry
  %4 = load i8, i8* %allowReversed.addr, align 1
  %tobool = trunc i8 %4 to i1
  br i1 %tobool, label %if.then1, label %if.else

if.then1:                                         ; preds = %if.then
  %5 = load %struct.Point*, %struct.Point** %p3.addr, align 4
  %x = getelementptr inbounds %struct.Point, %struct.Point* %5, i32 0, i32 0
  %6 = load double, double* %x, align 8
  store double %6, double* %t, align 8
  %7 = load %struct.Point*, %struct.Point** %p2.addr, align 4
  %x2 = getelementptr inbounds %struct.Point, %struct.Point* %7, i32 0, i32 0
  %8 = load double, double* %x2, align 8
  %9 = load %struct.Point*, %struct.Point** %p3.addr, align 4
  %x3 = getelementptr inbounds %struct.Point, %struct.Point* %9, i32 0, i32 0
  store double %8, double* %x3, align 8
  %10 = load double, double* %t, align 8
  %11 = load %struct.Point*, %struct.Point** %p2.addr, align 4
  %x4 = getelementptr inbounds %struct.Point, %struct.Point* %11, i32 0, i32 0
  store double %10, double* %x4, align 8
  %12 = load %struct.Point*, %struct.Point** %p3.addr, align 4
  %y = getelementptr inbounds %struct.Point, %struct.Point* %12, i32 0, i32 1
  %13 = load double, double* %y, align 8
  store double %13, double* %t, align 8
  %14 = load %struct.Point*, %struct.Point** %p2.addr, align 4
  %y5 = getelementptr inbounds %struct.Point, %struct.Point* %14, i32 0, i32 1
  %15 = load double, double* %y5, align 8
  %16 = load %struct.Point*, %struct.Point** %p3.addr, align 4
  %y6 = getelementptr inbounds %struct.Point, %struct.Point* %16, i32 0, i32 1
  store double %15, double* %y6, align 8
  %17 = load double, double* %t, align 8
  %18 = load %struct.Point*, %struct.Point** %p2.addr, align 4
  %y7 = getelementptr inbounds %struct.Point, %struct.Point* %18, i32 0, i32 1
  store double %17, double* %y7, align 8
  br label %if.end

if.else:                                          ; preds = %if.then
  store i32 1, i32* @errno, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then1
  br label %if.end8

if.end8:                                          ; preds = %if.end, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @boundaryCollideChk(%struct.Point* %p1, %struct.Point* %p2, %struct.Point* %p3, double %eps) #0 {
entry:
  %p1.addr = alloca %struct.Point*, align 4
  %p2.addr = alloca %struct.Point*, align 4
  %p3.addr = alloca %struct.Point*, align 4
  %eps.addr = alloca double, align 8
  store %struct.Point* %p1, %struct.Point** %p1.addr, align 4
  store %struct.Point* %p2, %struct.Point** %p2.addr, align 4
  store %struct.Point* %p3, %struct.Point** %p3.addr, align 4
  store double %eps, double* %eps.addr, align 8
  %0 = load %struct.Point*, %struct.Point** %p1.addr, align 4
  %1 = load %struct.Point*, %struct.Point** %p2.addr, align 4
  %2 = load %struct.Point*, %struct.Point** %p3.addr, align 4
  %call = call double @det2D(%struct.Point* %0, %struct.Point* %1, %struct.Point* %2)
  %3 = load double, double* %eps.addr, align 8
  %cmp = fcmp olt double %call, %3
  ret i1 %cmp
}

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @boundaryDoesntCollideChk(%struct.Point* %p1, %struct.Point* %p2, %struct.Point* %p3, double %eps) #0 {
entry:
  %p1.addr = alloca %struct.Point*, align 4
  %p2.addr = alloca %struct.Point*, align 4
  %p3.addr = alloca %struct.Point*, align 4
  %eps.addr = alloca double, align 8
  store %struct.Point* %p1, %struct.Point** %p1.addr, align 4
  store %struct.Point* %p2, %struct.Point** %p2.addr, align 4
  store %struct.Point* %p3, %struct.Point** %p3.addr, align 4
  store double %eps, double* %eps.addr, align 8
  %0 = load %struct.Point*, %struct.Point** %p1.addr, align 4
  %1 = load %struct.Point*, %struct.Point** %p2.addr, align 4
  %2 = load %struct.Point*, %struct.Point** %p3.addr, align 4
  %call = call double @det2D(%struct.Point* %0, %struct.Point* %1, %struct.Point* %2)
  %3 = load double, double* %eps.addr, align 8
  %cmp = fcmp ole double %call, %3
  ret i1 %cmp
}

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @triTri2D(%struct.Point* %t1, %struct.Point* %t2, double %eps, i1 zeroext %allowReversed, i1 zeroext %onBoundary) #0 {
entry:
  %retval = alloca i1, align 1
  %t1.addr = alloca %struct.Point*, align 4
  %t2.addr = alloca %struct.Point*, align 4
  %eps.addr = alloca double, align 8
  %allowReversed.addr = alloca i8, align 1
  %onBoundary.addr = alloca i8, align 1
  %chkEdge = alloca i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %j32 = alloca i32, align 4
  store %struct.Point* %t1, %struct.Point** %t1.addr, align 4
  store %struct.Point* %t2, %struct.Point** %t2.addr, align 4
  store double %eps, double* %eps.addr, align 8
  %frombool = zext i1 %allowReversed to i8
  store i8 %frombool, i8* %allowReversed.addr, align 1
  %frombool1 = zext i1 %onBoundary to i8
  store i8 %frombool1, i8* %onBoundary.addr, align 1
  %0 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %arrayidx = getelementptr inbounds %struct.Point, %struct.Point* %0, i32 0
  %1 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %arrayidx2 = getelementptr inbounds %struct.Point, %struct.Point* %1, i32 1
  %2 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %arrayidx3 = getelementptr inbounds %struct.Point, %struct.Point* %2, i32 2
  %3 = load i8, i8* %allowReversed.addr, align 1
  %tobool = trunc i8 %3 to i1
  call void @checkTriWinding(%struct.Point* %arrayidx, %struct.Point* %arrayidx2, %struct.Point* %arrayidx3, i1 zeroext %tobool)
  %4 = load i32, i32* @errno, align 4
  %cmp = icmp ne i32 %4, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i1 false, i1* %retval, align 1
  br label %return

if.end:                                           ; preds = %entry
  %5 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %arrayidx4 = getelementptr inbounds %struct.Point, %struct.Point* %5, i32 0
  %6 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %arrayidx5 = getelementptr inbounds %struct.Point, %struct.Point* %6, i32 1
  %7 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %arrayidx6 = getelementptr inbounds %struct.Point, %struct.Point* %7, i32 2
  %8 = load i8, i8* %allowReversed.addr, align 1
  %tobool7 = trunc i8 %8 to i1
  call void @checkTriWinding(%struct.Point* %arrayidx4, %struct.Point* %arrayidx5, %struct.Point* %arrayidx6, i1 zeroext %tobool7)
  %9 = load i32, i32* @errno, align 4
  %cmp8 = icmp ne i32 %9, 0
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end
  store i1 false, i1* %retval, align 1
  br label %return

if.end10:                                         ; preds = %if.end
  %10 = load i8, i8* %onBoundary.addr, align 1
  %tobool11 = trunc i8 %10 to i1
  br i1 %tobool11, label %if.then12, label %if.else

if.then12:                                        ; preds = %if.end10
  store i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)* @boundaryCollideChk, i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)** %chkEdge, align 4
  br label %if.end13

if.else:                                          ; preds = %if.end10
  store i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)* @boundaryDoesntCollideChk, i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)** %chkEdge, align 4
  br label %if.end13

if.end13:                                         ; preds = %if.else, %if.then12
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end13
  %11 = load i32, i32* %i, align 4
  %cmp14 = icmp slt i32 %11, 3
  br i1 %cmp14, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load i32, i32* %i, align 4
  %add = add nsw i32 %12, 1
  %rem = srem i32 %add, 3
  store i32 %rem, i32* %j, align 4
  %13 = load i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)*, i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)** %chkEdge, align 4
  %14 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx15 = getelementptr inbounds %struct.Point, %struct.Point* %14, i32 %15
  %16 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %17 = load i32, i32* %j, align 4
  %arrayidx16 = getelementptr inbounds %struct.Point, %struct.Point* %16, i32 %17
  %18 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %arrayidx17 = getelementptr inbounds %struct.Point, %struct.Point* %18, i32 0
  %19 = load double, double* %eps.addr, align 8
  %call = call zeroext i1 %13(%struct.Point* %arrayidx15, %struct.Point* %arrayidx16, %struct.Point* %arrayidx17, double %19)
  br i1 %call, label %land.lhs.true, label %if.end28

land.lhs.true:                                    ; preds = %for.body
  %20 = load i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)*, i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)** %chkEdge, align 4
  %21 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %22 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds %struct.Point, %struct.Point* %21, i32 %22
  %23 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %24 = load i32, i32* %j, align 4
  %arrayidx19 = getelementptr inbounds %struct.Point, %struct.Point* %23, i32 %24
  %25 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %arrayidx20 = getelementptr inbounds %struct.Point, %struct.Point* %25, i32 1
  %26 = load double, double* %eps.addr, align 8
  %call21 = call zeroext i1 %20(%struct.Point* %arrayidx18, %struct.Point* %arrayidx19, %struct.Point* %arrayidx20, double %26)
  br i1 %call21, label %land.lhs.true22, label %if.end28

land.lhs.true22:                                  ; preds = %land.lhs.true
  %27 = load i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)*, i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)** %chkEdge, align 4
  %28 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %29 = load i32, i32* %i, align 4
  %arrayidx23 = getelementptr inbounds %struct.Point, %struct.Point* %28, i32 %29
  %30 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %31 = load i32, i32* %j, align 4
  %arrayidx24 = getelementptr inbounds %struct.Point, %struct.Point* %30, i32 %31
  %32 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %arrayidx25 = getelementptr inbounds %struct.Point, %struct.Point* %32, i32 2
  %33 = load double, double* %eps.addr, align 8
  %call26 = call zeroext i1 %27(%struct.Point* %arrayidx23, %struct.Point* %arrayidx24, %struct.Point* %arrayidx25, double %33)
  br i1 %call26, label %if.then27, label %if.end28

if.then27:                                        ; preds = %land.lhs.true22
  store i1 false, i1* %retval, align 1
  br label %return

if.end28:                                         ; preds = %land.lhs.true22, %land.lhs.true, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end28
  %34 = load i32, i32* %i, align 4
  %inc = add nsw i32 %34, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond29

for.cond29:                                       ; preds = %for.inc51, %for.end
  %35 = load i32, i32* %i, align 4
  %cmp30 = icmp slt i32 %35, 3
  br i1 %cmp30, label %for.body31, label %for.end53

for.body31:                                       ; preds = %for.cond29
  %36 = load i32, i32* %i, align 4
  %add33 = add nsw i32 %36, 1
  %rem34 = srem i32 %add33, 3
  store i32 %rem34, i32* %j32, align 4
  %37 = load i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)*, i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)** %chkEdge, align 4
  %38 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %39 = load i32, i32* %i, align 4
  %arrayidx35 = getelementptr inbounds %struct.Point, %struct.Point* %38, i32 %39
  %40 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %41 = load i32, i32* %j32, align 4
  %arrayidx36 = getelementptr inbounds %struct.Point, %struct.Point* %40, i32 %41
  %42 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %arrayidx37 = getelementptr inbounds %struct.Point, %struct.Point* %42, i32 0
  %43 = load double, double* %eps.addr, align 8
  %call38 = call zeroext i1 %37(%struct.Point* %arrayidx35, %struct.Point* %arrayidx36, %struct.Point* %arrayidx37, double %43)
  br i1 %call38, label %land.lhs.true39, label %if.end50

land.lhs.true39:                                  ; preds = %for.body31
  %44 = load i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)*, i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)** %chkEdge, align 4
  %45 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %46 = load i32, i32* %i, align 4
  %arrayidx40 = getelementptr inbounds %struct.Point, %struct.Point* %45, i32 %46
  %47 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %48 = load i32, i32* %j32, align 4
  %arrayidx41 = getelementptr inbounds %struct.Point, %struct.Point* %47, i32 %48
  %49 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %arrayidx42 = getelementptr inbounds %struct.Point, %struct.Point* %49, i32 1
  %50 = load double, double* %eps.addr, align 8
  %call43 = call zeroext i1 %44(%struct.Point* %arrayidx40, %struct.Point* %arrayidx41, %struct.Point* %arrayidx42, double %50)
  br i1 %call43, label %land.lhs.true44, label %if.end50

land.lhs.true44:                                  ; preds = %land.lhs.true39
  %51 = load i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)*, i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)** %chkEdge, align 4
  %52 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %53 = load i32, i32* %i, align 4
  %arrayidx45 = getelementptr inbounds %struct.Point, %struct.Point* %52, i32 %53
  %54 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %55 = load i32, i32* %j32, align 4
  %arrayidx46 = getelementptr inbounds %struct.Point, %struct.Point* %54, i32 %55
  %56 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %arrayidx47 = getelementptr inbounds %struct.Point, %struct.Point* %56, i32 2
  %57 = load double, double* %eps.addr, align 8
  %call48 = call zeroext i1 %51(%struct.Point* %arrayidx45, %struct.Point* %arrayidx46, %struct.Point* %arrayidx47, double %57)
  br i1 %call48, label %if.then49, label %if.end50

if.then49:                                        ; preds = %land.lhs.true44
  store i1 false, i1* %retval, align 1
  br label %return

if.end50:                                         ; preds = %land.lhs.true44, %land.lhs.true39, %for.body31
  br label %for.inc51

for.inc51:                                        ; preds = %if.end50
  %58 = load i32, i32* %i, align 4
  %inc52 = add nsw i32 %58, 1
  store i32 %inc52, i32* %i, align 4
  br label %for.cond29

for.end53:                                        ; preds = %for.cond29
  store i1 true, i1* %retval, align 1
  br label %return

return:                                           ; preds = %for.end53, %if.then49, %if.then27, %if.then9, %if.then
  %59 = load i1, i1* %retval, align 1
  ret i1 %59
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %t1 = alloca [3 x %struct.Point], align 16
  %t2 = alloca [3 x %struct.Point], align 16
  %t13 = alloca [3 x %struct.Point], align 16
  %t24 = alloca [3 x %struct.Point], align 16
  %t110 = alloca [3 x %struct.Point], align 16
  %t211 = alloca [3 x %struct.Point], align 16
  %t117 = alloca [3 x %struct.Point], align 16
  %t218 = alloca [3 x %struct.Point], align 16
  %t124 = alloca [3 x %struct.Point], align 16
  %t225 = alloca [3 x %struct.Point], align 16
  %t131 = alloca [3 x %struct.Point], align 16
  %t232 = alloca [3 x %struct.Point], align 16
  %t138 = alloca [3 x %struct.Point], align 16
  %t239 = alloca [3 x %struct.Point], align 16
  %t145 = alloca [3 x %struct.Point], align 16
  %t246 = alloca [3 x %struct.Point], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [3 x %struct.Point]* %t1 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 48, i1 false)
  %1 = bitcast i8* %0 to [3 x %struct.Point]*
  %2 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %1, i32 0, i32 1
  %3 = getelementptr inbounds %struct.Point, %struct.Point* %2, i32 0, i32 0
  store double 5.000000e+00, double* %3, align 16
  %4 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %1, i32 0, i32 2
  %5 = getelementptr inbounds %struct.Point, %struct.Point* %4, i32 0, i32 1
  store double 5.000000e+00, double* %5, align 8
  %6 = bitcast [3 x %struct.Point]* %t2 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %6, i8 0, i32 48, i1 false)
  %7 = bitcast i8* %6 to [3 x %struct.Point]*
  %8 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Point, %struct.Point* %8, i32 0, i32 0
  store double 5.000000e+00, double* %9, align 16
  %10 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %7, i32 0, i32 2
  %11 = getelementptr inbounds %struct.Point, %struct.Point* %10, i32 0, i32 1
  store double 6.000000e+00, double* %11, align 8
  %arraydecay = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t1, i32 0, i32 0
  %arraydecay1 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t2, i32 0, i32 0
  %call = call zeroext i1 @triTri2D(%struct.Point* %arraydecay, %struct.Point* %arraydecay1, double 0.000000e+00, i1 zeroext false, i1 zeroext true)
  %conv = zext i1 %call to i32
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i32 %conv)
  %12 = bitcast [3 x %struct.Point]* %t13 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %12, i8 0, i32 48, i1 false)
  %13 = bitcast i8* %12 to [3 x %struct.Point]*
  %14 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %13, i32 0, i32 1
  %15 = getelementptr inbounds %struct.Point, %struct.Point* %14, i32 0, i32 1
  store double 5.000000e+00, double* %15, align 8
  %16 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %13, i32 0, i32 2
  %17 = getelementptr inbounds %struct.Point, %struct.Point* %16, i32 0, i32 0
  store double 5.000000e+00, double* %17, align 16
  %18 = bitcast [3 x %struct.Point]* %t24 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %18, i8 0, i32 48, i1 false)
  %19 = bitcast i8* %18 to [3 x %struct.Point]*
  %20 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %19, i32 0, i32 1
  %21 = getelementptr inbounds %struct.Point, %struct.Point* %20, i32 0, i32 1
  store double 5.000000e+00, double* %21, align 8
  %22 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %19, i32 0, i32 2
  %23 = getelementptr inbounds %struct.Point, %struct.Point* %22, i32 0, i32 0
  store double 5.000000e+00, double* %23, align 16
  %arraydecay5 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t13, i32 0, i32 0
  %arraydecay6 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t24, i32 0, i32 0
  %call7 = call zeroext i1 @triTri2D(%struct.Point* %arraydecay5, %struct.Point* %arraydecay6, double 0.000000e+00, i1 zeroext true, i1 zeroext true)
  %conv8 = zext i1 %call7 to i32
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i32 %conv8)
  %24 = bitcast [3 x %struct.Point]* %t110 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %24, i8 0, i32 48, i1 false)
  %25 = bitcast i8* %24 to [3 x %struct.Point]*
  %26 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %25, i32 0, i32 1
  %27 = getelementptr inbounds %struct.Point, %struct.Point* %26, i32 0, i32 0
  store double 5.000000e+00, double* %27, align 16
  %28 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %25, i32 0, i32 2
  %29 = getelementptr inbounds %struct.Point, %struct.Point* %28, i32 0, i32 1
  store double 5.000000e+00, double* %29, align 8
  %30 = bitcast [3 x %struct.Point]* %t211 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %30, i8 0, i32 48, i1 false)
  %31 = bitcast i8* %30 to [3 x %struct.Point]*
  %32 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %31, i32 0, i32 0
  %33 = getelementptr inbounds %struct.Point, %struct.Point* %32, i32 0, i32 0
  store double -1.000000e+01, double* %33, align 16
  %34 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %31, i32 0, i32 1
  %35 = getelementptr inbounds %struct.Point, %struct.Point* %34, i32 0, i32 0
  store double -5.000000e+00, double* %35, align 16
  %36 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %31, i32 0, i32 2
  %37 = getelementptr inbounds %struct.Point, %struct.Point* %36, i32 0, i32 0
  store double -1.000000e+00, double* %37, align 16
  %38 = getelementptr inbounds %struct.Point, %struct.Point* %36, i32 0, i32 1
  store double 6.000000e+00, double* %38, align 8
  %arraydecay12 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t110, i32 0, i32 0
  %arraydecay13 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t211, i32 0, i32 0
  %call14 = call zeroext i1 @triTri2D(%struct.Point* %arraydecay12, %struct.Point* %arraydecay13, double 0.000000e+00, i1 zeroext false, i1 zeroext true)
  %conv15 = zext i1 %call14 to i32
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i32 %conv15)
  %39 = bitcast [3 x %struct.Point]* %t117 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %39, i8 0, i32 48, i1 false)
  %40 = bitcast i8* %39 to [3 x %struct.Point]*
  %41 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %40, i32 0, i32 1
  %42 = getelementptr inbounds %struct.Point, %struct.Point* %41, i32 0, i32 0
  store double 5.000000e+00, double* %42, align 16
  %43 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %40, i32 0, i32 2
  %44 = getelementptr inbounds %struct.Point, %struct.Point* %43, i32 0, i32 0
  store double 2.500000e+00, double* %44, align 16
  %45 = getelementptr inbounds %struct.Point, %struct.Point* %43, i32 0, i32 1
  store double 5.000000e+00, double* %45, align 8
  %46 = bitcast [3 x %struct.Point]* %t218 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %46, i8 0, i32 48, i1 false)
  %47 = bitcast i8* %46 to [3 x %struct.Point]*
  %48 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %47, i32 0, i32 0
  %49 = getelementptr inbounds %struct.Point, %struct.Point* %48, i32 0, i32 1
  store double 4.000000e+00, double* %49, align 8
  %50 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %47, i32 0, i32 1
  %51 = getelementptr inbounds %struct.Point, %struct.Point* %50, i32 0, i32 0
  store double 2.500000e+00, double* %51, align 16
  %52 = getelementptr inbounds %struct.Point, %struct.Point* %50, i32 0, i32 1
  store double -1.000000e+00, double* %52, align 8
  %53 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %47, i32 0, i32 2
  %54 = getelementptr inbounds %struct.Point, %struct.Point* %53, i32 0, i32 0
  store double 5.000000e+00, double* %54, align 16
  %55 = getelementptr inbounds %struct.Point, %struct.Point* %53, i32 0, i32 1
  store double 4.000000e+00, double* %55, align 8
  %arraydecay19 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t117, i32 0, i32 0
  %arraydecay20 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t218, i32 0, i32 0
  %call21 = call zeroext i1 @triTri2D(%struct.Point* %arraydecay19, %struct.Point* %arraydecay20, double 0.000000e+00, i1 zeroext false, i1 zeroext true)
  %conv22 = zext i1 %call21 to i32
  %call23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i32 %conv22)
  %56 = bitcast [3 x %struct.Point]* %t124 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %56, i8 0, i32 48, i1 false)
  %57 = bitcast i8* %56 to [3 x %struct.Point]*
  %58 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %57, i32 0, i32 1
  %59 = getelementptr inbounds %struct.Point, %struct.Point* %58, i32 0, i32 0
  store double 1.000000e+00, double* %59, align 16
  %60 = getelementptr inbounds %struct.Point, %struct.Point* %58, i32 0, i32 1
  store double 1.000000e+00, double* %60, align 8
  %61 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %57, i32 0, i32 2
  %62 = getelementptr inbounds %struct.Point, %struct.Point* %61, i32 0, i32 1
  store double 2.000000e+00, double* %62, align 8
  %63 = bitcast [3 x %struct.Point]* %t225 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %63, i8 0, i32 48, i1 false)
  %64 = bitcast i8* %63 to [3 x %struct.Point]*
  %65 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %64, i32 0, i32 0
  %66 = getelementptr inbounds %struct.Point, %struct.Point* %65, i32 0, i32 0
  store double 2.000000e+00, double* %66, align 16
  %67 = getelementptr inbounds %struct.Point, %struct.Point* %65, i32 0, i32 1
  store double 1.000000e+00, double* %67, align 8
  %68 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %64, i32 0, i32 1
  %69 = getelementptr inbounds %struct.Point, %struct.Point* %68, i32 0, i32 0
  store double 3.000000e+00, double* %69, align 16
  %70 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %64, i32 0, i32 2
  %71 = getelementptr inbounds %struct.Point, %struct.Point* %70, i32 0, i32 0
  store double 3.000000e+00, double* %71, align 16
  %72 = getelementptr inbounds %struct.Point, %struct.Point* %70, i32 0, i32 1
  store double 2.000000e+00, double* %72, align 8
  %arraydecay26 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t124, i32 0, i32 0
  %arraydecay27 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t225, i32 0, i32 0
  %call28 = call zeroext i1 @triTri2D(%struct.Point* %arraydecay26, %struct.Point* %arraydecay27, double 0.000000e+00, i1 zeroext false, i1 zeroext true)
  %conv29 = zext i1 %call28 to i32
  %call30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i32 %conv29)
  %73 = bitcast [3 x %struct.Point]* %t131 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %73, i8 0, i32 48, i1 false)
  %74 = bitcast i8* %73 to [3 x %struct.Point]*
  %75 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %74, i32 0, i32 1
  %76 = getelementptr inbounds %struct.Point, %struct.Point* %75, i32 0, i32 0
  store double 1.000000e+00, double* %76, align 16
  %77 = getelementptr inbounds %struct.Point, %struct.Point* %75, i32 0, i32 1
  store double 1.000000e+00, double* %77, align 8
  %78 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %74, i32 0, i32 2
  %79 = getelementptr inbounds %struct.Point, %struct.Point* %78, i32 0, i32 1
  store double 2.000000e+00, double* %79, align 8
  %80 = bitcast [3 x %struct.Point]* %t232 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %80, i8 0, i32 48, i1 false)
  %81 = bitcast i8* %80 to [3 x %struct.Point]*
  %82 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %81, i32 0, i32 0
  %83 = getelementptr inbounds %struct.Point, %struct.Point* %82, i32 0, i32 0
  store double 2.000000e+00, double* %83, align 16
  %84 = getelementptr inbounds %struct.Point, %struct.Point* %82, i32 0, i32 1
  store double 1.000000e+00, double* %84, align 8
  %85 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %81, i32 0, i32 1
  %86 = getelementptr inbounds %struct.Point, %struct.Point* %85, i32 0, i32 0
  store double 3.000000e+00, double* %86, align 16
  %87 = getelementptr inbounds %struct.Point, %struct.Point* %85, i32 0, i32 1
  store double -2.000000e+00, double* %87, align 8
  %88 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %81, i32 0, i32 2
  %89 = getelementptr inbounds %struct.Point, %struct.Point* %88, i32 0, i32 0
  store double 3.000000e+00, double* %89, align 16
  %90 = getelementptr inbounds %struct.Point, %struct.Point* %88, i32 0, i32 1
  store double 4.000000e+00, double* %90, align 8
  %arraydecay33 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t131, i32 0, i32 0
  %arraydecay34 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t232, i32 0, i32 0
  %call35 = call zeroext i1 @triTri2D(%struct.Point* %arraydecay33, %struct.Point* %arraydecay34, double 0.000000e+00, i1 zeroext false, i1 zeroext true)
  %conv36 = zext i1 %call35 to i32
  %call37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i32 %conv36)
  %91 = bitcast [3 x %struct.Point]* %t138 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %91, i8 0, i32 48, i1 false)
  %92 = bitcast i8* %91 to [3 x %struct.Point]*
  %93 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %92, i32 0, i32 1
  %94 = getelementptr inbounds %struct.Point, %struct.Point* %93, i32 0, i32 0
  store double 1.000000e+00, double* %94, align 16
  %95 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %92, i32 0, i32 2
  %96 = getelementptr inbounds %struct.Point, %struct.Point* %95, i32 0, i32 1
  store double 1.000000e+00, double* %96, align 8
  %97 = bitcast [3 x %struct.Point]* %t239 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %97, i8 0, i32 48, i1 false)
  %98 = bitcast i8* %97 to [3 x %struct.Point]*
  %99 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %98, i32 0, i32 0
  %100 = getelementptr inbounds %struct.Point, %struct.Point* %99, i32 0, i32 0
  store double 1.000000e+00, double* %100, align 16
  %101 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %98, i32 0, i32 1
  %102 = getelementptr inbounds %struct.Point, %struct.Point* %101, i32 0, i32 0
  store double 2.000000e+00, double* %102, align 16
  %103 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %98, i32 0, i32 2
  %104 = getelementptr inbounds %struct.Point, %struct.Point* %103, i32 0, i32 0
  store double 1.000000e+00, double* %104, align 16
  %105 = getelementptr inbounds %struct.Point, %struct.Point* %103, i32 0, i32 1
  store double 1.000000e+00, double* %105, align 8
  %arraydecay40 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t138, i32 0, i32 0
  %arraydecay41 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t239, i32 0, i32 0
  %call42 = call zeroext i1 @triTri2D(%struct.Point* %arraydecay40, %struct.Point* %arraydecay41, double 0.000000e+00, i1 zeroext false, i1 zeroext true)
  %conv43 = zext i1 %call42 to i32
  %call44 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i32 %conv43)
  %106 = bitcast [3 x %struct.Point]* %t145 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %106, i8 0, i32 48, i1 false)
  %107 = bitcast i8* %106 to [3 x %struct.Point]*
  %108 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %107, i32 0, i32 1
  %109 = getelementptr inbounds %struct.Point, %struct.Point* %108, i32 0, i32 0
  store double 1.000000e+00, double* %109, align 16
  %110 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %107, i32 0, i32 2
  %111 = getelementptr inbounds %struct.Point, %struct.Point* %110, i32 0, i32 1
  store double 1.000000e+00, double* %111, align 8
  %112 = bitcast [3 x %struct.Point]* %t246 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %112, i8 0, i32 48, i1 false)
  %113 = bitcast i8* %112 to [3 x %struct.Point]*
  %114 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %113, i32 0, i32 0
  %115 = getelementptr inbounds %struct.Point, %struct.Point* %114, i32 0, i32 0
  store double 1.000000e+00, double* %115, align 16
  %116 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %113, i32 0, i32 1
  %117 = getelementptr inbounds %struct.Point, %struct.Point* %116, i32 0, i32 0
  store double 2.000000e+00, double* %117, align 16
  %118 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %113, i32 0, i32 2
  %119 = getelementptr inbounds %struct.Point, %struct.Point* %118, i32 0, i32 0
  store double 1.000000e+00, double* %119, align 16
  %120 = getelementptr inbounds %struct.Point, %struct.Point* %118, i32 0, i32 1
  store double 1.000000e+00, double* %120, align 8
  %arraydecay47 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t145, i32 0, i32 0
  %arraydecay48 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t246, i32 0, i32 0
  %call49 = call zeroext i1 @triTri2D(%struct.Point* %arraydecay47, %struct.Point* %arraydecay48, double 0.000000e+00, i1 zeroext false, i1 zeroext false)
  %conv50 = zext i1 %call49 to i32
  %call51 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i32 %conv50)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %frombool = zext i1 %allowReversed to i8
; Looking for a replacement for:
%0:i1 = var
%1:i8 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp = fcmp olt double %3, 0.000000e+00
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i8, i8* %allowReversed.addr, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0 (demandedBits=00000001)

; *****
; For LLVM instruction:
;  %tobool = trunc i8 %4 to i1
; Looking for a replacement for:
%0:i8 = var
%1:i1 = trunc %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i1 = var
%1:i8 = zext %0
infer %1


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0 (demandedBits=00000001)


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i1 = trunc %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for checkTriWinding()

; entering Souper's runOnFunction() for boundaryCollideChk()

; ModuleID = './Determine_if_two_triangles_overlap.c.bc'
source_filename = "./Determine_if_two_triangles_overlap.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.Point = type { double, double }

@errno = external thread_local global i32, align 4
@.str = private unnamed_addr constant [9 x i8] c"%d,true\0A\00", align 1
@.str.1 = private unnamed_addr constant [10 x i8] c"%d,false\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden double @det2D(%struct.Point* %p1, %struct.Point* %p2, %struct.Point* %p3) #0 {
entry:
  %p1.addr = alloca %struct.Point*, align 4
  %p2.addr = alloca %struct.Point*, align 4
  %p3.addr = alloca %struct.Point*, align 4
  store %struct.Point* %p1, %struct.Point** %p1.addr, align 4
  store %struct.Point* %p2, %struct.Point** %p2.addr, align 4
  store %struct.Point* %p3, %struct.Point** %p3.addr, align 4
  %0 = load %struct.Point*, %struct.Point** %p1.addr, align 4
  %x = getelementptr inbounds %struct.Point, %struct.Point* %0, i32 0, i32 0
  %1 = load double, double* %x, align 8
  %2 = load %struct.Point*, %struct.Point** %p2.addr, align 4
  %y = getelementptr inbounds %struct.Point, %struct.Point* %2, i32 0, i32 1
  %3 = load double, double* %y, align 8
  %4 = load %struct.Point*, %struct.Point** %p3.addr, align 4
  %y1 = getelementptr inbounds %struct.Point, %struct.Point* %4, i32 0, i32 1
  %5 = load double, double* %y1, align 8
  %sub = fsub double %3, %5
  %mul = fmul double %1, %sub
  %6 = load %struct.Point*, %struct.Point** %p2.addr, align 4
  %x2 = getelementptr inbounds %struct.Point, %struct.Point* %6, i32 0, i32 0
  %7 = load double, double* %x2, align 8
  %8 = load %struct.Point*, %struct.Point** %p3.addr, align 4
  %y3 = getelementptr inbounds %struct.Point, %struct.Point* %8, i32 0, i32 1
  %9 = load double, double* %y3, align 8
  %10 = load %struct.Point*, %struct.Point** %p1.addr, align 4
  %y4 = getelementptr inbounds %struct.Point, %struct.Point* %10, i32 0, i32 1
  %11 = load double, double* %y4, align 8
  %sub5 = fsub double %9, %11
  %mul6 = fmul double %7, %sub5
  %add = fadd double %mul, %mul6
  %12 = load %struct.Point*, %struct.Point** %p3.addr, align 4
  %x7 = getelementptr inbounds %struct.Point, %struct.Point* %12, i32 0, i32 0
  %13 = load double, double* %x7, align 8
  %14 = load %struct.Point*, %struct.Point** %p1.addr, align 4
  %y8 = getelementptr inbounds %struct.Point, %struct.Point* %14, i32 0, i32 1
  %15 = load double, double* %y8, align 8
  %16 = load %struct.Point*, %struct.Point** %p2.addr, align 4
  %y9 = getelementptr inbounds %struct.Point, %struct.Point* %16, i32 0, i32 1
  %17 = load double, double* %y9, align 8
  %sub10 = fsub double %15, %17
  %mul11 = fmul double %13, %sub10
  %add12 = fadd double %add, %mul11
  ret double %add12
}

; Function Attrs: noinline nounwind optnone
define hidden void @checkTriWinding(%struct.Point* %p1, %struct.Point* %p2, %struct.Point* %p3, i1 zeroext %allowReversed) #0 {
entry:
  %p1.addr = alloca %struct.Point*, align 4
  %p2.addr = alloca %struct.Point*, align 4
  %p3.addr = alloca %struct.Point*, align 4
  %allowReversed.addr = alloca i8, align 1
  %detTri = alloca double, align 8
  %t = alloca double, align 8
  store %struct.Point* %p1, %struct.Point** %p1.addr, align 4
  store %struct.Point* %p2, %struct.Point** %p2.addr, align 4
  store %struct.Point* %p3, %struct.Point** %p3.addr, align 4
  %frombool = zext i1 %allowReversed to i8
  store i8 %frombool, i8* %allowReversed.addr, align 1
  %0 = load %struct.Point*, %struct.Point** %p1.addr, align 4
  %1 = load %struct.Point*, %struct.Point** %p2.addr, align 4
  %2 = load %struct.Point*, %struct.Point** %p3.addr, align 4
  %call = call double @det2D(%struct.Point* %0, %struct.Point* %1, %struct.Point* %2)
  store double %call, double* %detTri, align 8
  %3 = load double, double* %detTri, align 8
  %cmp = fcmp olt double %3, 0.000000e+00
  br i1 %cmp, label %if.then, label %if.end8

if.then:                                          ; preds = %entry
  %4 = load i8, i8* %allowReversed.addr, align 1
  %tobool = trunc i8 %4 to i1
  br i1 %tobool, label %if.then1, label %if.else

if.then1:                                         ; preds = %if.then
  %5 = load %struct.Point*, %struct.Point** %p3.addr, align 4
  %x = getelementptr inbounds %struct.Point, %struct.Point* %5, i32 0, i32 0
  %6 = load double, double* %x, align 8
  store double %6, double* %t, align 8
  %7 = load %struct.Point*, %struct.Point** %p2.addr, align 4
  %x2 = getelementptr inbounds %struct.Point, %struct.Point* %7, i32 0, i32 0
  %8 = load double, double* %x2, align 8
  %9 = load %struct.Point*, %struct.Point** %p3.addr, align 4
  %x3 = getelementptr inbounds %struct.Point, %struct.Point* %9, i32 0, i32 0
  store double %8, double* %x3, align 8
  %10 = load double, double* %t, align 8
  %11 = load %struct.Point*, %struct.Point** %p2.addr, align 4
  %x4 = getelementptr inbounds %struct.Point, %struct.Point* %11, i32 0, i32 0
  store double %10, double* %x4, align 8
  %12 = load %struct.Point*, %struct.Point** %p3.addr, align 4
  %y = getelementptr inbounds %struct.Point, %struct.Point* %12, i32 0, i32 1
  %13 = load double, double* %y, align 8
  store double %13, double* %t, align 8
  %14 = load %struct.Point*, %struct.Point** %p2.addr, align 4
  %y5 = getelementptr inbounds %struct.Point, %struct.Point* %14, i32 0, i32 1
  %15 = load double, double* %y5, align 8
  %16 = load %struct.Point*, %struct.Point** %p3.addr, align 4
  %y6 = getelementptr inbounds %struct.Point, %struct.Point* %16, i32 0, i32 1
  store double %15, double* %y6, align 8
  %17 = load double, double* %t, align 8
  %18 = load %struct.Point*, %struct.Point** %p2.addr, align 4
  %y7 = getelementptr inbounds %struct.Point, %struct.Point* %18, i32 0, i32 1
  store double %17, double* %y7, align 8
  br label %if.end

if.else:                                          ; preds = %if.then
  store i32 1, i32* @errno, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then1
  br label %if.end8

if.end8:                                          ; preds = %if.end, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @boundaryCollideChk(%struct.Point* %p1, %struct.Point* %p2, %struct.Point* %p3, double %eps) #0 {
entry:
  %p1.addr = alloca %struct.Point*, align 4
  %p2.addr = alloca %struct.Point*, align 4
  %p3.addr = alloca %struct.Point*, align 4
  %eps.addr = alloca double, align 8
  store %struct.Point* %p1, %struct.Point** %p1.addr, align 4
  store %struct.Point* %p2, %struct.Point** %p2.addr, align 4
  store %struct.Point* %p3, %struct.Point** %p3.addr, align 4
  store double %eps, double* %eps.addr, align 8
  %0 = load %struct.Point*, %struct.Point** %p1.addr, align 4
  %1 = load %struct.Point*, %struct.Point** %p2.addr, align 4
  %2 = load %struct.Point*, %struct.Point** %p3.addr, align 4
  %call = call double @det2D(%struct.Point* %0, %struct.Point* %1, %struct.Point* %2)
  %3 = load double, double* %eps.addr, align 8
  %cmp = fcmp olt double %call, %3
  ret i1 %cmp
}

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @boundaryDoesntCollideChk(%struct.Point* %p1, %struct.Point* %p2, %struct.Point* %p3, double %eps) #0 {
entry:
  %p1.addr = alloca %struct.Point*, align 4
  %p2.addr = alloca %struct.Point*, align 4
  %p3.addr = alloca %struct.Point*, align 4
  %eps.addr = alloca double, align 8
  store %struct.Point* %p1, %struct.Point** %p1.addr, align 4
  store %struct.Point* %p2, %struct.Point** %p2.addr, align 4
  store %struct.Point* %p3, %struct.Point** %p3.addr, align 4
  store double %eps, double* %eps.addr, align 8
  %0 = load %struct.Point*, %struct.Point** %p1.addr, align 4
  %1 = load %struct.Point*, %struct.Point** %p2.addr, align 4
  %2 = load %struct.Point*, %struct.Point** %p3.addr, align 4
  %call = call double @det2D(%struct.Point* %0, %struct.Point* %1, %struct.Point* %2)
  %3 = load double, double* %eps.addr, align 8
  %cmp = fcmp ole double %call, %3
  ret i1 %cmp
}

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @triTri2D(%struct.Point* %t1, %struct.Point* %t2, double %eps, i1 zeroext %allowReversed, i1 zeroext %onBoundary) #0 {
entry:
  %retval = alloca i1, align 1
  %t1.addr = alloca %struct.Point*, align 4
  %t2.addr = alloca %struct.Point*, align 4
  %eps.addr = alloca double, align 8
  %allowReversed.addr = alloca i8, align 1
  %onBoundary.addr = alloca i8, align 1
  %chkEdge = alloca i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %j32 = alloca i32, align 4
  store %struct.Point* %t1, %struct.Point** %t1.addr, align 4
  store %struct.Point* %t2, %struct.Point** %t2.addr, align 4
  store double %eps, double* %eps.addr, align 8
  %frombool = zext i1 %allowReversed to i8
  store i8 %frombool, i8* %allowReversed.addr, align 1
  %frombool1 = zext i1 %onBoundary to i8
  store i8 %frombool1, i8* %onBoundary.addr, align 1
  %0 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %arrayidx = getelementptr inbounds %struct.Point, %struct.Point* %0, i32 0
  %1 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %arrayidx2 = getelementptr inbounds %struct.Point, %struct.Point* %1, i32 1
  %2 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %arrayidx3 = getelementptr inbounds %struct.Point, %struct.Point* %2, i32 2
  %3 = load i8, i8* %allowReversed.addr, align 1
  %tobool = trunc i8 %3 to i1
  call void @checkTriWinding(%struct.Point* %arrayidx, %struct.Point* %arrayidx2, %struct.Point* %arrayidx3, i1 zeroext %tobool)
  %4 = load i32, i32* @errno, align 4
  %cmp = icmp ne i32 %4, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i1 false, i1* %retval, align 1
  br label %return

if.end:                                           ; preds = %entry
  %5 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %arrayidx4 = getelementptr inbounds %struct.Point, %struct.Point* %5, i32 0
  %6 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %arrayidx5 = getelementptr inbounds %struct.Point, %struct.Point* %6, i32 1
  %7 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %arrayidx6 = getelementptr inbounds %struct.Point, %struct.Point* %7, i32 2
  %8 = load i8, i8* %allowReversed.addr, align 1
  %tobool7 = trunc i8 %8 to i1
  call void @checkTriWinding(%struct.Point* %arrayidx4, %struct.Point* %arrayidx5, %struct.Point* %arrayidx6, i1 zeroext %tobool7)
  %9 = load i32, i32* @errno, align 4
  %cmp8 = icmp ne i32 %9, 0
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end
  store i1 false, i1* %retval, align 1
  br label %return

if.end10:                                         ; preds = %if.end
  %10 = load i8, i8* %onBoundary.addr, align 1
  %tobool11 = trunc i8 %10 to i1
  br i1 %tobool11, label %if.then12, label %if.else

if.then12:                                        ; preds = %if.end10
  store i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)* @boundaryCollideChk, i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)** %chkEdge, align 4
  br label %if.end13

if.else:                                          ; preds = %if.end10
  store i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)* @boundaryDoesntCollideChk, i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)** %chkEdge, align 4
  br label %if.end13

if.end13:                                         ; preds = %if.else, %if.then12
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end13
  %11 = load i32, i32* %i, align 4
  %cmp14 = icmp slt i32 %11, 3
  br i1 %cmp14, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load i32, i32* %i, align 4
  %add = add nsw i32 %12, 1
  %rem = srem i32 %add, 3
  store i32 %rem, i32* %j, align 4
  %13 = load i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)*, i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)** %chkEdge, align 4
  %14 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx15 = getelementptr inbounds %struct.Point, %struct.Point* %14, i32 %15
  %16 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %17 = load i32, i32* %j, align 4
  %arrayidx16 = getelementptr inbounds %struct.Point, %struct.Point* %16, i32 %17
  %18 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %arrayidx17 = getelementptr inbounds %struct.Point, %struct.Point* %18, i32 0
  %19 = load double, double* %eps.addr, align 8
  %call = call zeroext i1 %13(%struct.Point* %arrayidx15, %struct.Point* %arrayidx16, %struct.Point* %arrayidx17, double %19)
  br i1 %call, label %land.lhs.true, label %if.end28

land.lhs.true:                                    ; preds = %for.body
  %20 = load i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)*, i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)** %chkEdge, align 4
  %21 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %22 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds %struct.Point, %struct.Point* %21, i32 %22
  %23 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %24 = load i32, i32* %j, align 4
  %arrayidx19 = getelementptr inbounds %struct.Point, %struct.Point* %23, i32 %24
  %25 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %arrayidx20 = getelementptr inbounds %struct.Point, %struct.Point* %25, i32 1
  %26 = load double, double* %eps.addr, align 8
  %call21 = call zeroext i1 %20(%struct.Point* %arrayidx18, %struct.Point* %arrayidx19, %struct.Point* %arrayidx20, double %26)
  br i1 %call21, label %land.lhs.true22, label %if.end28

land.lhs.true22:                                  ; preds = %land.lhs.true
  %27 = load i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)*, i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)** %chkEdge, align 4
  %28 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %29 = load i32, i32* %i, align 4
  %arrayidx23 = getelementptr inbounds %struct.Point, %struct.Point* %28, i32 %29
  %30 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %31 = load i32, i32* %j, align 4
  %arrayidx24 = getelementptr inbounds %struct.Point, %struct.Point* %30, i32 %31
  %32 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %arrayidx25 = getelementptr inbounds %struct.Point, %struct.Point* %32, i32 2
  %33 = load double, double* %eps.addr, align 8
  %call26 = call zeroext i1 %27(%struct.Point* %arrayidx23, %struct.Point* %arrayidx24, %struct.Point* %arrayidx25, double %33)
  br i1 %call26, label %if.then27, label %if.end28

if.then27:                                        ; preds = %land.lhs.true22
  store i1 false, i1* %retval, align 1
  br label %return

if.end28:                                         ; preds = %land.lhs.true22, %land.lhs.true, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end28
  %34 = load i32, i32* %i, align 4
  %inc = add nsw i32 %34, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond29

for.cond29:                                       ; preds = %for.inc51, %for.end
  %35 = load i32, i32* %i, align 4
  %cmp30 = icmp slt i32 %35, 3
  br i1 %cmp30, label %for.body31, label %for.end53

for.body31:                                       ; preds = %for.cond29
  %36 = load i32, i32* %i, align 4
  %add33 = add nsw i32 %36, 1
  %rem34 = srem i32 %add33, 3
  store i32 %rem34, i32* %j32, align 4
  %37 = load i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)*, i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)** %chkEdge, align 4
  %38 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %39 = load i32, i32* %i, align 4
  %arrayidx35 = getelementptr inbounds %struct.Point, %struct.Point* %38, i32 %39
  %40 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %41 = load i32, i32* %j32, align 4
  %arrayidx36 = getelementptr inbounds %struct.Point, %struct.Point* %40, i32 %41
  %42 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %arrayidx37 = getelementptr inbounds %struct.Point, %struct.Point* %42, i32 0
  %43 = load double, double* %eps.addr, align 8
  %call38 = call zeroext i1 %37(%struct.Point* %arrayidx35, %struct.Point* %arrayidx36, %struct.Point* %arrayidx37, double %43)
  br i1 %call38, label %land.lhs.true39, label %if.end50

land.lhs.true39:                                  ; preds = %for.body31
  %44 = load i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)*, i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)** %chkEdge, align 4
  %45 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %46 = load i32, i32* %i, align 4
  %arrayidx40 = getelementptr inbounds %struct.Point, %struct.Point* %45, i32 %46
  %47 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %48 = load i32, i32* %j32, align 4
  %arrayidx41 = getelementptr inbounds %struct.Point, %struct.Point* %47, i32 %48
  %49 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %arrayidx42 = getelementptr inbounds %struct.Point, %struct.Point* %49, i32 1
  %50 = load double, double* %eps.addr, align 8
  %call43 = call zeroext i1 %44(%struct.Point* %arrayidx40, %struct.Point* %arrayidx41, %struct.Point* %arrayidx42, double %50)
  br i1 %call43, label %land.lhs.true44, label %if.end50

land.lhs.true44:                                  ; preds = %land.lhs.true39
  %51 = load i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)*, i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)** %chkEdge, align 4
  %52 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %53 = load i32, i32* %i, align 4
  %arrayidx45 = getelementptr inbounds %struct.Point, %struct.Point* %52, i32 %53
  %54 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %55 = load i32, i32* %j32, align 4
  %arrayidx46 = getelementptr inbounds %struct.Point, %struct.Point* %54, i32 %55
  %56 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %arrayidx47 = getelementptr inbounds %struct.Point, %struct.Point* %56, i32 2
  %57 = load double, double* %eps.addr, align 8
  %call48 = call zeroext i1 %51(%struct.Point* %arrayidx45, %struct.Point* %arrayidx46, %struct.Point* %arrayidx47, double %57)
  br i1 %call48, label %if.then49, label %if.end50

if.then49:                                        ; preds = %land.lhs.true44
  store i1 false, i1* %retval, align 1
  br label %return

if.end50:                                         ; preds = %land.lhs.true44, %land.lhs.true39, %for.body31
  br label %for.inc51

for.inc51:                                        ; preds = %if.end50
  %58 = load i32, i32* %i, align 4
  %inc52 = add nsw i32 %58, 1
  store i32 %inc52, i32* %i, align 4
  br label %for.cond29

for.end53:                                        ; preds = %for.cond29
  store i1 true, i1* %retval, align 1
  br label %return

return:                                           ; preds = %for.end53, %if.then49, %if.then27, %if.then9, %if.then
  %59 = load i1, i1* %retval, align 1
  ret i1 %59
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %t1 = alloca [3 x %struct.Point], align 16
  %t2 = alloca [3 x %struct.Point], align 16
  %t13 = alloca [3 x %struct.Point], align 16
  %t24 = alloca [3 x %struct.Point], align 16
  %t110 = alloca [3 x %struct.Point], align 16
  %t211 = alloca [3 x %struct.Point], align 16
  %t117 = alloca [3 x %struct.Point], align 16
  %t218 = alloca [3 x %struct.Point], align 16
  %t124 = alloca [3 x %struct.Point], align 16
  %t225 = alloca [3 x %struct.Point], align 16
  %t131 = alloca [3 x %struct.Point], align 16
  %t232 = alloca [3 x %struct.Point], align 16
  %t138 = alloca [3 x %struct.Point], align 16
  %t239 = alloca [3 x %struct.Point], align 16
  %t145 = alloca [3 x %struct.Point], align 16
  %t246 = alloca [3 x %struct.Point], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [3 x %struct.Point]* %t1 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 48, i1 false)
  %1 = bitcast i8* %0 to [3 x %struct.Point]*
  %2 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %1, i32 0, i32 1
  %3 = getelementptr inbounds %struct.Point, %struct.Point* %2, i32 0, i32 0
  store double 5.000000e+00, double* %3, align 16
  %4 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %1, i32 0, i32 2
  %5 = getelementptr inbounds %struct.Point, %struct.Point* %4, i32 0, i32 1
  store double 5.000000e+00, double* %5, align 8
  %6 = bitcast [3 x %struct.Point]* %t2 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %6, i8 0, i32 48, i1 false)
  %7 = bitcast i8* %6 to [3 x %struct.Point]*
  %8 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Point, %struct.Point* %8, i32 0, i32 0
  store double 5.000000e+00, double* %9, align 16
  %10 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %7, i32 0, i32 2
  %11 = getelementptr inbounds %struct.Point, %struct.Point* %10, i32 0, i32 1
  store double 6.000000e+00, double* %11, align 8
  %arraydecay = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t1, i32 0, i32 0
  %arraydecay1 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t2, i32 0, i32 0
  %call = call zeroext i1 @triTri2D(%struct.Point* %arraydecay, %struct.Point* %arraydecay1, double 0.000000e+00, i1 zeroext false, i1 zeroext true)
  %conv = zext i1 %call to i32
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i32 %conv)
  %12 = bitcast [3 x %struct.Point]* %t13 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %12, i8 0, i32 48, i1 false)
  %13 = bitcast i8* %12 to [3 x %struct.Point]*
  %14 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %13, i32 0, i32 1
  %15 = getelementptr inbounds %struct.Point, %struct.Point* %14, i32 0, i32 1
  store double 5.000000e+00, double* %15, align 8
  %16 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %13, i32 0, i32 2
  %17 = getelementptr inbounds %struct.Point, %struct.Point* %16, i32 0, i32 0
  store double 5.000000e+00, double* %17, align 16
  %18 = bitcast [3 x %struct.Point]* %t24 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %18, i8 0, i32 48, i1 false)
  %19 = bitcast i8* %18 to [3 x %struct.Point]*
  %20 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %19, i32 0, i32 1
  %21 = getelementptr inbounds %struct.Point, %struct.Point* %20, i32 0, i32 1
  store double 5.000000e+00, double* %21, align 8
  %22 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %19, i32 0, i32 2
  %23 = getelementptr inbounds %struct.Point, %struct.Point* %22, i32 0, i32 0
  store double 5.000000e+00, double* %23, align 16
  %arraydecay5 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t13, i32 0, i32 0
  %arraydecay6 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t24, i32 0, i32 0
  %call7 = call zeroext i1 @triTri2D(%struct.Point* %arraydecay5, %struct.Point* %arraydecay6, double 0.000000e+00, i1 zeroext true, i1 zeroext true)
  %conv8 = zext i1 %call7 to i32
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i32 %conv8)
  %24 = bitcast [3 x %struct.Point]* %t110 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %24, i8 0, i32 48, i1 false)
  %25 = bitcast i8* %24 to [3 x %struct.Point]*
  %26 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %25, i32 0, i32 1
  %27 = getelementptr inbounds %struct.Point, %struct.Point* %26, i32 0, i32 0
  store double 5.000000e+00, double* %27, align 16
  %28 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %25, i32 0, i32 2
  %29 = getelementptr inbounds %struct.Point, %struct.Point* %28, i32 0, i32 1
  store double 5.000000e+00, double* %29, align 8
  %30 = bitcast [3 x %struct.Point]* %t211 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %30, i8 0, i32 48, i1 false)
  %31 = bitcast i8* %30 to [3 x %struct.Point]*
  %32 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %31, i32 0, i32 0
  %33 = getelementptr inbounds %struct.Point, %struct.Point* %32, i32 0, i32 0
  store double -1.000000e+01, double* %33, align 16
  %34 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %31, i32 0, i32 1
  %35 = getelementptr inbounds %struct.Point, %struct.Point* %34, i32 0, i32 0
  store double -5.000000e+00, double* %35, align 16
  %36 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %31, i32 0, i32 2
  %37 = getelementptr inbounds %struct.Point, %struct.Point* %36, i32 0, i32 0
  store double -1.000000e+00, double* %37, align 16
  %38 = getelementptr inbounds %struct.Point, %struct.Point* %36, i32 0, i32 1
  store double 6.000000e+00, double* %38, align 8
  %arraydecay12 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t110, i32 0, i32 0
  %arraydecay13 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t211, i32 0, i32 0
  %call14 = call zeroext i1 @triTri2D(%struct.Point* %arraydecay12, %struct.Point* %arraydecay13, double 0.000000e+00, i1 zeroext false, i1 zeroext true)
  %conv15 = zext i1 %call14 to i32
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i32 %conv15)
  %39 = bitcast [3 x %struct.Point]* %t117 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %39, i8 0, i32 48, i1 false)
  %40 = bitcast i8* %39 to [3 x %struct.Point]*
  %41 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %40, i32 0, i32 1
  %42 = getelementptr inbounds %struct.Point, %struct.Point* %41, i32 0, i32 0
  store double 5.000000e+00, double* %42, align 16
  %43 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %40, i32 0, i32 2
  %44 = getelementptr inbounds %struct.Point, %struct.Point* %43, i32 0, i32 0
  store double 2.500000e+00, double* %44, align 16
  %45 = getelementptr inbounds %struct.Point, %struct.Point* %43, i32 0, i32 1
  store double 5.000000e+00, double* %45, align 8
  %46 = bitcast [3 x %struct.Point]* %t218 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %46, i8 0, i32 48, i1 false)
  %47 = bitcast i8* %46 to [3 x %struct.Point]*
  %48 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %47, i32 0, i32 0
  %49 = getelementptr inbounds %struct.Point, %struct.Point* %48, i32 0, i32 1
  store double 4.000000e+00, double* %49, align 8
  %50 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %47, i32 0, i32 1
  %51 = getelementptr inbounds %struct.Point, %struct.Point* %50, i32 0, i32 0
  store double 2.500000e+00, double* %51, align 16
  %52 = getelementptr inbounds %struct.Point, %struct.Point* %50, i32 0, i32 1
  store double -1.000000e+00, double* %52, align 8
  %53 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %47, i32 0, i32 2
  %54 = getelementptr inbounds %struct.Point, %struct.Point* %53, i32 0, i32 0
  store double 5.000000e+00, double* %54, align 16
  %55 = getelementptr inbounds %struct.Point, %struct.Point* %53, i32 0, i32 1
  store double 4.000000e+00, double* %55, align 8
  %arraydecay19 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t117, i32 0, i32 0
  %arraydecay20 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t218, i32 0, i32 0
  %call21 = call zeroext i1 @triTri2D(%struct.Point* %arraydecay19, %struct.Point* %arraydecay20, double 0.000000e+00, i1 zeroext false, i1 zeroext true)
  %conv22 = zext i1 %call21 to i32
  %call23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i32 %conv22)
  %56 = bitcast [3 x %struct.Point]* %t124 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %56, i8 0, i32 48, i1 false)
  %57 = bitcast i8* %56 to [3 x %struct.Point]*
  %58 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %57, i32 0, i32 1
  %59 = getelementptr inbounds %struct.Point, %struct.Point* %58, i32 0, i32 0
  store double 1.000000e+00, double* %59, align 16
  %60 = getelementptr inbounds %struct.Point, %struct.Point* %58, i32 0, i32 1
  store double 1.000000e+00, double* %60, align 8
  %61 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %57, i32 0, i32 2
  %62 = getelementptr inbounds %struct.Point, %struct.Point* %61, i32 0, i32 1
  store double 2.000000e+00, double* %62, align 8
  %63 = bitcast [3 x %struct.Point]* %t225 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %63, i8 0, i32 48, i1 false)
  %64 = bitcast i8* %63 to [3 x %struct.Point]*
  %65 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %64, i32 0, i32 0
  %66 = getelementptr inbounds %struct.Point, %struct.Point* %65, i32 0, i32 0
  store double 2.000000e+00, double* %66, align 16
  %67 = getelementptr inbounds %struct.Point, %struct.Point* %65, i32 0, i32 1
  store double 1.000000e+00, double* %67, align 8
  %68 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %64, i32 0, i32 1
  %69 = getelementptr inbounds %struct.Point, %struct.Point* %68, i32 0, i32 0
  store double 3.000000e+00, double* %69, align 16
  %70 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %64, i32 0, i32 2
  %71 = getelementptr inbounds %struct.Point, %struct.Point* %70, i32 0, i32 0
  store double 3.000000e+00, double* %71, align 16
  %72 = getelementptr inbounds %struct.Point, %struct.Point* %70, i32 0, i32 1
  store double 2.000000e+00, double* %72, align 8
  %arraydecay26 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t124, i32 0, i32 0
  %arraydecay27 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t225, i32 0, i32 0
  %call28 = call zeroext i1 @triTri2D(%struct.Point* %arraydecay26, %struct.Point* %arraydecay27, double 0.000000e+00, i1 zeroext false, i1 zeroext true)
  %conv29 = zext i1 %call28 to i32
  %call30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i32 %conv29)
  %73 = bitcast [3 x %struct.Point]* %t131 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %73, i8 0, i32 48, i1 false)
  %74 = bitcast i8* %73 to [3 x %struct.Point]*
  %75 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %74, i32 0, i32 1
  %76 = getelementptr inbounds %struct.Point, %struct.Point* %75, i32 0, i32 0
  store double 1.000000e+00, double* %76, align 16
  %77 = getelementptr inbounds %struct.Point, %struct.Point* %75, i32 0, i32 1
  store double 1.000000e+00, double* %77, align 8
  %78 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %74, i32 0, i32 2
  %79 = getelementptr inbounds %struct.Point, %struct.Point* %78, i32 0, i32 1
  store double 2.000000e+00, double* %79, align 8
  %80 = bitcast [3 x %struct.Point]* %t232 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %80, i8 0, i32 48, i1 false)
  %81 = bitcast i8* %80 to [3 x %struct.Point]*
  %82 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %81, i32 0, i32 0
  %83 = getelementptr inbounds %struct.Point, %struct.Point* %82, i32 0, i32 0
  store double 2.000000e+00, double* %83, align 16
  %84 = getelementptr inbounds %struct.Point, %struct.Point* %82, i32 0, i32 1
  store double 1.000000e+00, double* %84, align 8
  %85 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %81, i32 0, i32 1
  %86 = getelementptr inbounds %struct.Point, %struct.Point* %85, i32 0, i32 0
  store double 3.000000e+00, double* %86, align 16
  %87 = getelementptr inbounds %struct.Point, %struct.Point* %85, i32 0, i32 1
  store double -2.000000e+00, double* %87, align 8
  %88 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %81, i32 0, i32 2
  %89 = getelementptr inbounds %struct.Point, %struct.Point* %88, i32 0, i32 0
  store double 3.000000e+00, double* %89, align 16
  %90 = getelementptr inbounds %struct.Point, %struct.Point* %88, i32 0, i32 1
  store double 4.000000e+00, double* %90, align 8
  %arraydecay33 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t131, i32 0, i32 0
  %arraydecay34 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t232, i32 0, i32 0
  %call35 = call zeroext i1 @triTri2D(%struct.Point* %arraydecay33, %struct.Point* %arraydecay34, double 0.000000e+00, i1 zeroext false, i1 zeroext true)
  %conv36 = zext i1 %call35 to i32
  %call37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i32 %conv36)
  %91 = bitcast [3 x %struct.Point]* %t138 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %91, i8 0, i32 48, i1 false)
  %92 = bitcast i8* %91 to [3 x %struct.Point]*
  %93 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %92, i32 0, i32 1
  %94 = getelementptr inbounds %struct.Point, %struct.Point* %93, i32 0, i32 0
  store double 1.000000e+00, double* %94, align 16
  %95 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %92, i32 0, i32 2
  %96 = getelementptr inbounds %struct.Point, %struct.Point* %95, i32 0, i32 1
  store double 1.000000e+00, double* %96, align 8
  %97 = bitcast [3 x %struct.Point]* %t239 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %97, i8 0, i32 48, i1 false)
  %98 = bitcast i8* %97 to [3 x %struct.Point]*
  %99 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %98, i32 0, i32 0
  %100 = getelementptr inbounds %struct.Point, %struct.Point* %99, i32 0, i32 0
  store double 1.000000e+00, double* %100, align 16
  %101 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %98, i32 0, i32 1
  %102 = getelementptr inbounds %struct.Point, %struct.Point* %101, i32 0, i32 0
  store double 2.000000e+00, double* %102, align 16
  %103 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %98, i32 0, i32 2
  %104 = getelementptr inbounds %struct.Point, %struct.Point* %103, i32 0, i32 0
  store double 1.000000e+00, double* %104, align 16
  %105 = getelementptr inbounds %struct.Point, %struct.Point* %103, i32 0, i32 1
  store double 1.000000e+00, double* %105, align 8
  %arraydecay40 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t138, i32 0, i32 0
  %arraydecay41 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t239, i32 0, i32 0
  %call42 = call zeroext i1 @triTri2D(%struct.Point* %arraydecay40, %struct.Point* %arraydecay41, double 0.000000e+00, i1 zeroext false, i1 zeroext true)
  %conv43 = zext i1 %call42 to i32
  %call44 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i32 %conv43)
  %106 = bitcast [3 x %struct.Point]* %t145 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %106, i8 0, i32 48, i1 false)
  %107 = bitcast i8* %106 to [3 x %struct.Point]*
  %108 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %107, i32 0, i32 1
  %109 = getelementptr inbounds %struct.Point, %struct.Point* %108, i32 0, i32 0
  store double 1.000000e+00, double* %109, align 16
  %110 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %107, i32 0, i32 2
  %111 = getelementptr inbounds %struct.Point, %struct.Point* %110, i32 0, i32 1
  store double 1.000000e+00, double* %111, align 8
  %112 = bitcast [3 x %struct.Point]* %t246 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %112, i8 0, i32 48, i1 false)
  %113 = bitcast i8* %112 to [3 x %struct.Point]*
  %114 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %113, i32 0, i32 0
  %115 = getelementptr inbounds %struct.Point, %struct.Point* %114, i32 0, i32 0
  store double 1.000000e+00, double* %115, align 16
  %116 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %113, i32 0, i32 1
  %117 = getelementptr inbounds %struct.Point, %struct.Point* %116, i32 0, i32 0
  store double 2.000000e+00, double* %117, align 16
  %118 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %113, i32 0, i32 2
  %119 = getelementptr inbounds %struct.Point, %struct.Point* %118, i32 0, i32 0
  store double 1.000000e+00, double* %119, align 16
  %120 = getelementptr inbounds %struct.Point, %struct.Point* %118, i32 0, i32 1
  store double 1.000000e+00, double* %120, align 8
  %arraydecay47 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t145, i32 0, i32 0
  %arraydecay48 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t246, i32 0, i32 0
  %call49 = call zeroext i1 @triTri2D(%struct.Point* %arraydecay47, %struct.Point* %arraydecay48, double 0.000000e+00, i1 zeroext false, i1 zeroext false)
  %conv50 = zext i1 %call49 to i32
  %call51 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i32 %conv50)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %cmp = fcmp olt double %call, %3
; Looking for a replacement for:
%0:i1 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for boundaryCollideChk()

; entering Souper's runOnFunction() for boundaryDoesntCollideChk()

; ModuleID = './Determine_if_two_triangles_overlap.c.bc'
source_filename = "./Determine_if_two_triangles_overlap.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.Point = type { double, double }

@errno = external thread_local global i32, align 4
@.str = private unnamed_addr constant [9 x i8] c"%d,true\0A\00", align 1
@.str.1 = private unnamed_addr constant [10 x i8] c"%d,false\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden double @det2D(%struct.Point* %p1, %struct.Point* %p2, %struct.Point* %p3) #0 {
entry:
  %p1.addr = alloca %struct.Point*, align 4
  %p2.addr = alloca %struct.Point*, align 4
  %p3.addr = alloca %struct.Point*, align 4
  store %struct.Point* %p1, %struct.Point** %p1.addr, align 4
  store %struct.Point* %p2, %struct.Point** %p2.addr, align 4
  store %struct.Point* %p3, %struct.Point** %p3.addr, align 4
  %0 = load %struct.Point*, %struct.Point** %p1.addr, align 4
  %x = getelementptr inbounds %struct.Point, %struct.Point* %0, i32 0, i32 0
  %1 = load double, double* %x, align 8
  %2 = load %struct.Point*, %struct.Point** %p2.addr, align 4
  %y = getelementptr inbounds %struct.Point, %struct.Point* %2, i32 0, i32 1
  %3 = load double, double* %y, align 8
  %4 = load %struct.Point*, %struct.Point** %p3.addr, align 4
  %y1 = getelementptr inbounds %struct.Point, %struct.Point* %4, i32 0, i32 1
  %5 = load double, double* %y1, align 8
  %sub = fsub double %3, %5
  %mul = fmul double %1, %sub
  %6 = load %struct.Point*, %struct.Point** %p2.addr, align 4
  %x2 = getelementptr inbounds %struct.Point, %struct.Point* %6, i32 0, i32 0
  %7 = load double, double* %x2, align 8
  %8 = load %struct.Point*, %struct.Point** %p3.addr, align 4
  %y3 = getelementptr inbounds %struct.Point, %struct.Point* %8, i32 0, i32 1
  %9 = load double, double* %y3, align 8
  %10 = load %struct.Point*, %struct.Point** %p1.addr, align 4
  %y4 = getelementptr inbounds %struct.Point, %struct.Point* %10, i32 0, i32 1
  %11 = load double, double* %y4, align 8
  %sub5 = fsub double %9, %11
  %mul6 = fmul double %7, %sub5
  %add = fadd double %mul, %mul6
  %12 = load %struct.Point*, %struct.Point** %p3.addr, align 4
  %x7 = getelementptr inbounds %struct.Point, %struct.Point* %12, i32 0, i32 0
  %13 = load double, double* %x7, align 8
  %14 = load %struct.Point*, %struct.Point** %p1.addr, align 4
  %y8 = getelementptr inbounds %struct.Point, %struct.Point* %14, i32 0, i32 1
  %15 = load double, double* %y8, align 8
  %16 = load %struct.Point*, %struct.Point** %p2.addr, align 4
  %y9 = getelementptr inbounds %struct.Point, %struct.Point* %16, i32 0, i32 1
  %17 = load double, double* %y9, align 8
  %sub10 = fsub double %15, %17
  %mul11 = fmul double %13, %sub10
  %add12 = fadd double %add, %mul11
  ret double %add12
}

; Function Attrs: noinline nounwind optnone
define hidden void @checkTriWinding(%struct.Point* %p1, %struct.Point* %p2, %struct.Point* %p3, i1 zeroext %allowReversed) #0 {
entry:
  %p1.addr = alloca %struct.Point*, align 4
  %p2.addr = alloca %struct.Point*, align 4
  %p3.addr = alloca %struct.Point*, align 4
  %allowReversed.addr = alloca i8, align 1
  %detTri = alloca double, align 8
  %t = alloca double, align 8
  store %struct.Point* %p1, %struct.Point** %p1.addr, align 4
  store %struct.Point* %p2, %struct.Point** %p2.addr, align 4
  store %struct.Point* %p3, %struct.Point** %p3.addr, align 4
  %frombool = zext i1 %allowReversed to i8
  store i8 %frombool, i8* %allowReversed.addr, align 1
  %0 = load %struct.Point*, %struct.Point** %p1.addr, align 4
  %1 = load %struct.Point*, %struct.Point** %p2.addr, align 4
  %2 = load %struct.Point*, %struct.Point** %p3.addr, align 4
  %call = call double @det2D(%struct.Point* %0, %struct.Point* %1, %struct.Point* %2)
  store double %call, double* %detTri, align 8
  %3 = load double, double* %detTri, align 8
  %cmp = fcmp olt double %3, 0.000000e+00
  br i1 %cmp, label %if.then, label %if.end8

if.then:                                          ; preds = %entry
  %4 = load i8, i8* %allowReversed.addr, align 1
  %tobool = trunc i8 %4 to i1
  br i1 %tobool, label %if.then1, label %if.else

if.then1:                                         ; preds = %if.then
  %5 = load %struct.Point*, %struct.Point** %p3.addr, align 4
  %x = getelementptr inbounds %struct.Point, %struct.Point* %5, i32 0, i32 0
  %6 = load double, double* %x, align 8
  store double %6, double* %t, align 8
  %7 = load %struct.Point*, %struct.Point** %p2.addr, align 4
  %x2 = getelementptr inbounds %struct.Point, %struct.Point* %7, i32 0, i32 0
  %8 = load double, double* %x2, align 8
  %9 = load %struct.Point*, %struct.Point** %p3.addr, align 4
  %x3 = getelementptr inbounds %struct.Point, %struct.Point* %9, i32 0, i32 0
  store double %8, double* %x3, align 8
  %10 = load double, double* %t, align 8
  %11 = load %struct.Point*, %struct.Point** %p2.addr, align 4
  %x4 = getelementptr inbounds %struct.Point, %struct.Point* %11, i32 0, i32 0
  store double %10, double* %x4, align 8
  %12 = load %struct.Point*, %struct.Point** %p3.addr, align 4
  %y = getelementptr inbounds %struct.Point, %struct.Point* %12, i32 0, i32 1
  %13 = load double, double* %y, align 8
  store double %13, double* %t, align 8
  %14 = load %struct.Point*, %struct.Point** %p2.addr, align 4
  %y5 = getelementptr inbounds %struct.Point, %struct.Point* %14, i32 0, i32 1
  %15 = load double, double* %y5, align 8
  %16 = load %struct.Point*, %struct.Point** %p3.addr, align 4
  %y6 = getelementptr inbounds %struct.Point, %struct.Point* %16, i32 0, i32 1
  store double %15, double* %y6, align 8
  %17 = load double, double* %t, align 8
  %18 = load %struct.Point*, %struct.Point** %p2.addr, align 4
  %y7 = getelementptr inbounds %struct.Point, %struct.Point* %18, i32 0, i32 1
  store double %17, double* %y7, align 8
  br label %if.end

if.else:                                          ; preds = %if.then
  store i32 1, i32* @errno, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then1
  br label %if.end8

if.end8:                                          ; preds = %if.end, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @boundaryCollideChk(%struct.Point* %p1, %struct.Point* %p2, %struct.Point* %p3, double %eps) #0 {
entry:
  %p1.addr = alloca %struct.Point*, align 4
  %p2.addr = alloca %struct.Point*, align 4
  %p3.addr = alloca %struct.Point*, align 4
  %eps.addr = alloca double, align 8
  store %struct.Point* %p1, %struct.Point** %p1.addr, align 4
  store %struct.Point* %p2, %struct.Point** %p2.addr, align 4
  store %struct.Point* %p3, %struct.Point** %p3.addr, align 4
  store double %eps, double* %eps.addr, align 8
  %0 = load %struct.Point*, %struct.Point** %p1.addr, align 4
  %1 = load %struct.Point*, %struct.Point** %p2.addr, align 4
  %2 = load %struct.Point*, %struct.Point** %p3.addr, align 4
  %call = call double @det2D(%struct.Point* %0, %struct.Point* %1, %struct.Point* %2)
  %3 = load double, double* %eps.addr, align 8
  %cmp = fcmp olt double %call, %3
  ret i1 %cmp
}

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @boundaryDoesntCollideChk(%struct.Point* %p1, %struct.Point* %p2, %struct.Point* %p3, double %eps) #0 {
entry:
  %p1.addr = alloca %struct.Point*, align 4
  %p2.addr = alloca %struct.Point*, align 4
  %p3.addr = alloca %struct.Point*, align 4
  %eps.addr = alloca double, align 8
  store %struct.Point* %p1, %struct.Point** %p1.addr, align 4
  store %struct.Point* %p2, %struct.Point** %p2.addr, align 4
  store %struct.Point* %p3, %struct.Point** %p3.addr, align 4
  store double %eps, double* %eps.addr, align 8
  %0 = load %struct.Point*, %struct.Point** %p1.addr, align 4
  %1 = load %struct.Point*, %struct.Point** %p2.addr, align 4
  %2 = load %struct.Point*, %struct.Point** %p3.addr, align 4
  %call = call double @det2D(%struct.Point* %0, %struct.Point* %1, %struct.Point* %2)
  %3 = load double, double* %eps.addr, align 8
  %cmp = fcmp ole double %call, %3
  ret i1 %cmp
}

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @triTri2D(%struct.Point* %t1, %struct.Point* %t2, double %eps, i1 zeroext %allowReversed, i1 zeroext %onBoundary) #0 {
entry:
  %retval = alloca i1, align 1
  %t1.addr = alloca %struct.Point*, align 4
  %t2.addr = alloca %struct.Point*, align 4
  %eps.addr = alloca double, align 8
  %allowReversed.addr = alloca i8, align 1
  %onBoundary.addr = alloca i8, align 1
  %chkEdge = alloca i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %j32 = alloca i32, align 4
  store %struct.Point* %t1, %struct.Point** %t1.addr, align 4
  store %struct.Point* %t2, %struct.Point** %t2.addr, align 4
  store double %eps, double* %eps.addr, align 8
  %frombool = zext i1 %allowReversed to i8
  store i8 %frombool, i8* %allowReversed.addr, align 1
  %frombool1 = zext i1 %onBoundary to i8
  store i8 %frombool1, i8* %onBoundary.addr, align 1
  %0 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %arrayidx = getelementptr inbounds %struct.Point, %struct.Point* %0, i32 0
  %1 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %arrayidx2 = getelementptr inbounds %struct.Point, %struct.Point* %1, i32 1
  %2 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %arrayidx3 = getelementptr inbounds %struct.Point, %struct.Point* %2, i32 2
  %3 = load i8, i8* %allowReversed.addr, align 1
  %tobool = trunc i8 %3 to i1
  call void @checkTriWinding(%struct.Point* %arrayidx, %struct.Point* %arrayidx2, %struct.Point* %arrayidx3, i1 zeroext %tobool)
  %4 = load i32, i32* @errno, align 4
  %cmp = icmp ne i32 %4, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i1 false, i1* %retval, align 1
  br label %return

if.end:                                           ; preds = %entry
  %5 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %arrayidx4 = getelementptr inbounds %struct.Point, %struct.Point* %5, i32 0
  %6 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %arrayidx5 = getelementptr inbounds %struct.Point, %struct.Point* %6, i32 1
  %7 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %arrayidx6 = getelementptr inbounds %struct.Point, %struct.Point* %7, i32 2
  %8 = load i8, i8* %allowReversed.addr, align 1
  %tobool7 = trunc i8 %8 to i1
  call void @checkTriWinding(%struct.Point* %arrayidx4, %struct.Point* %arrayidx5, %struct.Point* %arrayidx6, i1 zeroext %tobool7)
  %9 = load i32, i32* @errno, align 4
  %cmp8 = icmp ne i32 %9, 0
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end
  store i1 false, i1* %retval, align 1
  br label %return

if.end10:                                         ; preds = %if.end
  %10 = load i8, i8* %onBoundary.addr, align 1
  %tobool11 = trunc i8 %10 to i1
  br i1 %tobool11, label %if.then12, label %if.else

if.then12:                                        ; preds = %if.end10
  store i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)* @boundaryCollideChk, i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)** %chkEdge, align 4
  br label %if.end13

if.else:                                          ; preds = %if.end10
  store i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)* @boundaryDoesntCollideChk, i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)** %chkEdge, align 4
  br label %if.end13

if.end13:                                         ; preds = %if.else, %if.then12
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end13
  %11 = load i32, i32* %i, align 4
  %cmp14 = icmp slt i32 %11, 3
  br i1 %cmp14, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load i32, i32* %i, align 4
  %add = add nsw i32 %12, 1
  %rem = srem i32 %add, 3
  store i32 %rem, i32* %j, align 4
  %13 = load i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)*, i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)** %chkEdge, align 4
  %14 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx15 = getelementptr inbounds %struct.Point, %struct.Point* %14, i32 %15
  %16 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %17 = load i32, i32* %j, align 4
  %arrayidx16 = getelementptr inbounds %struct.Point, %struct.Point* %16, i32 %17
  %18 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %arrayidx17 = getelementptr inbounds %struct.Point, %struct.Point* %18, i32 0
  %19 = load double, double* %eps.addr, align 8
  %call = call zeroext i1 %13(%struct.Point* %arrayidx15, %struct.Point* %arrayidx16, %struct.Point* %arrayidx17, double %19)
  br i1 %call, label %land.lhs.true, label %if.end28

land.lhs.true:                                    ; preds = %for.body
  %20 = load i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)*, i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)** %chkEdge, align 4
  %21 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %22 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds %struct.Point, %struct.Point* %21, i32 %22
  %23 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %24 = load i32, i32* %j, align 4
  %arrayidx19 = getelementptr inbounds %struct.Point, %struct.Point* %23, i32 %24
  %25 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %arrayidx20 = getelementptr inbounds %struct.Point, %struct.Point* %25, i32 1
  %26 = load double, double* %eps.addr, align 8
  %call21 = call zeroext i1 %20(%struct.Point* %arrayidx18, %struct.Point* %arrayidx19, %struct.Point* %arrayidx20, double %26)
  br i1 %call21, label %land.lhs.true22, label %if.end28

land.lhs.true22:                                  ; preds = %land.lhs.true
  %27 = load i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)*, i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)** %chkEdge, align 4
  %28 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %29 = load i32, i32* %i, align 4
  %arrayidx23 = getelementptr inbounds %struct.Point, %struct.Point* %28, i32 %29
  %30 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %31 = load i32, i32* %j, align 4
  %arrayidx24 = getelementptr inbounds %struct.Point, %struct.Point* %30, i32 %31
  %32 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %arrayidx25 = getelementptr inbounds %struct.Point, %struct.Point* %32, i32 2
  %33 = load double, double* %eps.addr, align 8
  %call26 = call zeroext i1 %27(%struct.Point* %arrayidx23, %struct.Point* %arrayidx24, %struct.Point* %arrayidx25, double %33)
  br i1 %call26, label %if.then27, label %if.end28

if.then27:                                        ; preds = %land.lhs.true22
  store i1 false, i1* %retval, align 1
  br label %return

if.end28:                                         ; preds = %land.lhs.true22, %land.lhs.true, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end28
  %34 = load i32, i32* %i, align 4
  %inc = add nsw i32 %34, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond29

for.cond29:                                       ; preds = %for.inc51, %for.end
  %35 = load i32, i32* %i, align 4
  %cmp30 = icmp slt i32 %35, 3
  br i1 %cmp30, label %for.body31, label %for.end53

for.body31:                                       ; preds = %for.cond29
  %36 = load i32, i32* %i, align 4
  %add33 = add nsw i32 %36, 1
  %rem34 = srem i32 %add33, 3
  store i32 %rem34, i32* %j32, align 4
  %37 = load i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)*, i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)** %chkEdge, align 4
  %38 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %39 = load i32, i32* %i, align 4
  %arrayidx35 = getelementptr inbounds %struct.Point, %struct.Point* %38, i32 %39
  %40 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %41 = load i32, i32* %j32, align 4
  %arrayidx36 = getelementptr inbounds %struct.Point, %struct.Point* %40, i32 %41
  %42 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %arrayidx37 = getelementptr inbounds %struct.Point, %struct.Point* %42, i32 0
  %43 = load double, double* %eps.addr, align 8
  %call38 = call zeroext i1 %37(%struct.Point* %arrayidx35, %struct.Point* %arrayidx36, %struct.Point* %arrayidx37, double %43)
  br i1 %call38, label %land.lhs.true39, label %if.end50

land.lhs.true39:                                  ; preds = %for.body31
  %44 = load i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)*, i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)** %chkEdge, align 4
  %45 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %46 = load i32, i32* %i, align 4
  %arrayidx40 = getelementptr inbounds %struct.Point, %struct.Point* %45, i32 %46
  %47 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %48 = load i32, i32* %j32, align 4
  %arrayidx41 = getelementptr inbounds %struct.Point, %struct.Point* %47, i32 %48
  %49 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %arrayidx42 = getelementptr inbounds %struct.Point, %struct.Point* %49, i32 1
  %50 = load double, double* %eps.addr, align 8
  %call43 = call zeroext i1 %44(%struct.Point* %arrayidx40, %struct.Point* %arrayidx41, %struct.Point* %arrayidx42, double %50)
  br i1 %call43, label %land.lhs.true44, label %if.end50

land.lhs.true44:                                  ; preds = %land.lhs.true39
  %51 = load i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)*, i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)** %chkEdge, align 4
  %52 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %53 = load i32, i32* %i, align 4
  %arrayidx45 = getelementptr inbounds %struct.Point, %struct.Point* %52, i32 %53
  %54 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %55 = load i32, i32* %j32, align 4
  %arrayidx46 = getelementptr inbounds %struct.Point, %struct.Point* %54, i32 %55
  %56 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %arrayidx47 = getelementptr inbounds %struct.Point, %struct.Point* %56, i32 2
  %57 = load double, double* %eps.addr, align 8
  %call48 = call zeroext i1 %51(%struct.Point* %arrayidx45, %struct.Point* %arrayidx46, %struct.Point* %arrayidx47, double %57)
  br i1 %call48, label %if.then49, label %if.end50

if.then49:                                        ; preds = %land.lhs.true44
  store i1 false, i1* %retval, align 1
  br label %return

if.end50:                                         ; preds = %land.lhs.true44, %land.lhs.true39, %for.body31
  br label %for.inc51

for.inc51:                                        ; preds = %if.end50
  %58 = load i32, i32* %i, align 4
  %inc52 = add nsw i32 %58, 1
  store i32 %inc52, i32* %i, align 4
  br label %for.cond29

for.end53:                                        ; preds = %for.cond29
  store i1 true, i1* %retval, align 1
  br label %return

return:                                           ; preds = %for.end53, %if.then49, %if.then27, %if.then9, %if.then
  %59 = load i1, i1* %retval, align 1
  ret i1 %59
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %t1 = alloca [3 x %struct.Point], align 16
  %t2 = alloca [3 x %struct.Point], align 16
  %t13 = alloca [3 x %struct.Point], align 16
  %t24 = alloca [3 x %struct.Point], align 16
  %t110 = alloca [3 x %struct.Point], align 16
  %t211 = alloca [3 x %struct.Point], align 16
  %t117 = alloca [3 x %struct.Point], align 16
  %t218 = alloca [3 x %struct.Point], align 16
  %t124 = alloca [3 x %struct.Point], align 16
  %t225 = alloca [3 x %struct.Point], align 16
  %t131 = alloca [3 x %struct.Point], align 16
  %t232 = alloca [3 x %struct.Point], align 16
  %t138 = alloca [3 x %struct.Point], align 16
  %t239 = alloca [3 x %struct.Point], align 16
  %t145 = alloca [3 x %struct.Point], align 16
  %t246 = alloca [3 x %struct.Point], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [3 x %struct.Point]* %t1 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 48, i1 false)
  %1 = bitcast i8* %0 to [3 x %struct.Point]*
  %2 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %1, i32 0, i32 1
  %3 = getelementptr inbounds %struct.Point, %struct.Point* %2, i32 0, i32 0
  store double 5.000000e+00, double* %3, align 16
  %4 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %1, i32 0, i32 2
  %5 = getelementptr inbounds %struct.Point, %struct.Point* %4, i32 0, i32 1
  store double 5.000000e+00, double* %5, align 8
  %6 = bitcast [3 x %struct.Point]* %t2 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %6, i8 0, i32 48, i1 false)
  %7 = bitcast i8* %6 to [3 x %struct.Point]*
  %8 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Point, %struct.Point* %8, i32 0, i32 0
  store double 5.000000e+00, double* %9, align 16
  %10 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %7, i32 0, i32 2
  %11 = getelementptr inbounds %struct.Point, %struct.Point* %10, i32 0, i32 1
  store double 6.000000e+00, double* %11, align 8
  %arraydecay = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t1, i32 0, i32 0
  %arraydecay1 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t2, i32 0, i32 0
  %call = call zeroext i1 @triTri2D(%struct.Point* %arraydecay, %struct.Point* %arraydecay1, double 0.000000e+00, i1 zeroext false, i1 zeroext true)
  %conv = zext i1 %call to i32
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i32 %conv)
  %12 = bitcast [3 x %struct.Point]* %t13 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %12, i8 0, i32 48, i1 false)
  %13 = bitcast i8* %12 to [3 x %struct.Point]*
  %14 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %13, i32 0, i32 1
  %15 = getelementptr inbounds %struct.Point, %struct.Point* %14, i32 0, i32 1
  store double 5.000000e+00, double* %15, align 8
  %16 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %13, i32 0, i32 2
  %17 = getelementptr inbounds %struct.Point, %struct.Point* %16, i32 0, i32 0
  store double 5.000000e+00, double* %17, align 16
  %18 = bitcast [3 x %struct.Point]* %t24 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %18, i8 0, i32 48, i1 false)
  %19 = bitcast i8* %18 to [3 x %struct.Point]*
  %20 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %19, i32 0, i32 1
  %21 = getelementptr inbounds %struct.Point, %struct.Point* %20, i32 0, i32 1
  store double 5.000000e+00, double* %21, align 8
  %22 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %19, i32 0, i32 2
  %23 = getelementptr inbounds %struct.Point, %struct.Point* %22, i32 0, i32 0
  store double 5.000000e+00, double* %23, align 16
  %arraydecay5 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t13, i32 0, i32 0
  %arraydecay6 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t24, i32 0, i32 0
  %call7 = call zeroext i1 @triTri2D(%struct.Point* %arraydecay5, %struct.Point* %arraydecay6, double 0.000000e+00, i1 zeroext true, i1 zeroext true)
  %conv8 = zext i1 %call7 to i32
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i32 %conv8)
  %24 = bitcast [3 x %struct.Point]* %t110 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %24, i8 0, i32 48, i1 false)
  %25 = bitcast i8* %24 to [3 x %struct.Point]*
  %26 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %25, i32 0, i32 1
  %27 = getelementptr inbounds %struct.Point, %struct.Point* %26, i32 0, i32 0
  store double 5.000000e+00, double* %27, align 16
  %28 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %25, i32 0, i32 2
  %29 = getelementptr inbounds %struct.Point, %struct.Point* %28, i32 0, i32 1
  store double 5.000000e+00, double* %29, align 8
  %30 = bitcast [3 x %struct.Point]* %t211 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %30, i8 0, i32 48, i1 false)
  %31 = bitcast i8* %30 to [3 x %struct.Point]*
  %32 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %31, i32 0, i32 0
  %33 = getelementptr inbounds %struct.Point, %struct.Point* %32, i32 0, i32 0
  store double -1.000000e+01, double* %33, align 16
  %34 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %31, i32 0, i32 1
  %35 = getelementptr inbounds %struct.Point, %struct.Point* %34, i32 0, i32 0
  store double -5.000000e+00, double* %35, align 16
  %36 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %31, i32 0, i32 2
  %37 = getelementptr inbounds %struct.Point, %struct.Point* %36, i32 0, i32 0
  store double -1.000000e+00, double* %37, align 16
  %38 = getelementptr inbounds %struct.Point, %struct.Point* %36, i32 0, i32 1
  store double 6.000000e+00, double* %38, align 8
  %arraydecay12 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t110, i32 0, i32 0
  %arraydecay13 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t211, i32 0, i32 0
  %call14 = call zeroext i1 @triTri2D(%struct.Point* %arraydecay12, %struct.Point* %arraydecay13, double 0.000000e+00, i1 zeroext false, i1 zeroext true)
  %conv15 = zext i1 %call14 to i32
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i32 %conv15)
  %39 = bitcast [3 x %struct.Point]* %t117 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %39, i8 0, i32 48, i1 false)
  %40 = bitcast i8* %39 to [3 x %struct.Point]*
  %41 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %40, i32 0, i32 1
  %42 = getelementptr inbounds %struct.Point, %struct.Point* %41, i32 0, i32 0
  store double 5.000000e+00, double* %42, align 16
  %43 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %40, i32 0, i32 2
  %44 = getelementptr inbounds %struct.Point, %struct.Point* %43, i32 0, i32 0
  store double 2.500000e+00, double* %44, align 16
  %45 = getelementptr inbounds %struct.Point, %struct.Point* %43, i32 0, i32 1
  store double 5.000000e+00, double* %45, align 8
  %46 = bitcast [3 x %struct.Point]* %t218 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %46, i8 0, i32 48, i1 false)
  %47 = bitcast i8* %46 to [3 x %struct.Point]*
  %48 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %47, i32 0, i32 0
  %49 = getelementptr inbounds %struct.Point, %struct.Point* %48, i32 0, i32 1
  store double 4.000000e+00, double* %49, align 8
  %50 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %47, i32 0, i32 1
  %51 = getelementptr inbounds %struct.Point, %struct.Point* %50, i32 0, i32 0
  store double 2.500000e+00, double* %51, align 16
  %52 = getelementptr inbounds %struct.Point, %struct.Point* %50, i32 0, i32 1
  store double -1.000000e+00, double* %52, align 8
  %53 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %47, i32 0, i32 2
  %54 = getelementptr inbounds %struct.Point, %struct.Point* %53, i32 0, i32 0
  store double 5.000000e+00, double* %54, align 16
  %55 = getelementptr inbounds %struct.Point, %struct.Point* %53, i32 0, i32 1
  store double 4.000000e+00, double* %55, align 8
  %arraydecay19 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t117, i32 0, i32 0
  %arraydecay20 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t218, i32 0, i32 0
  %call21 = call zeroext i1 @triTri2D(%struct.Point* %arraydecay19, %struct.Point* %arraydecay20, double 0.000000e+00, i1 zeroext false, i1 zeroext true)
  %conv22 = zext i1 %call21 to i32
  %call23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i32 %conv22)
  %56 = bitcast [3 x %struct.Point]* %t124 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %56, i8 0, i32 48, i1 false)
  %57 = bitcast i8* %56 to [3 x %struct.Point]*
  %58 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %57, i32 0, i32 1
  %59 = getelementptr inbounds %struct.Point, %struct.Point* %58, i32 0, i32 0
  store double 1.000000e+00, double* %59, align 16
  %60 = getelementptr inbounds %struct.Point, %struct.Point* %58, i32 0, i32 1
  store double 1.000000e+00, double* %60, align 8
  %61 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %57, i32 0, i32 2
  %62 = getelementptr inbounds %struct.Point, %struct.Point* %61, i32 0, i32 1
  store double 2.000000e+00, double* %62, align 8
  %63 = bitcast [3 x %struct.Point]* %t225 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %63, i8 0, i32 48, i1 false)
  %64 = bitcast i8* %63 to [3 x %struct.Point]*
  %65 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %64, i32 0, i32 0
  %66 = getelementptr inbounds %struct.Point, %struct.Point* %65, i32 0, i32 0
  store double 2.000000e+00, double* %66, align 16
  %67 = getelementptr inbounds %struct.Point, %struct.Point* %65, i32 0, i32 1
  store double 1.000000e+00, double* %67, align 8
  %68 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %64, i32 0, i32 1
  %69 = getelementptr inbounds %struct.Point, %struct.Point* %68, i32 0, i32 0
  store double 3.000000e+00, double* %69, align 16
  %70 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %64, i32 0, i32 2
  %71 = getelementptr inbounds %struct.Point, %struct.Point* %70, i32 0, i32 0
  store double 3.000000e+00, double* %71, align 16
  %72 = getelementptr inbounds %struct.Point, %struct.Point* %70, i32 0, i32 1
  store double 2.000000e+00, double* %72, align 8
  %arraydecay26 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t124, i32 0, i32 0
  %arraydecay27 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t225, i32 0, i32 0
  %call28 = call zeroext i1 @triTri2D(%struct.Point* %arraydecay26, %struct.Point* %arraydecay27, double 0.000000e+00, i1 zeroext false, i1 zeroext true)
  %conv29 = zext i1 %call28 to i32
  %call30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i32 %conv29)
  %73 = bitcast [3 x %struct.Point]* %t131 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %73, i8 0, i32 48, i1 false)
  %74 = bitcast i8* %73 to [3 x %struct.Point]*
  %75 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %74, i32 0, i32 1
  %76 = getelementptr inbounds %struct.Point, %struct.Point* %75, i32 0, i32 0
  store double 1.000000e+00, double* %76, align 16
  %77 = getelementptr inbounds %struct.Point, %struct.Point* %75, i32 0, i32 1
  store double 1.000000e+00, double* %77, align 8
  %78 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %74, i32 0, i32 2
  %79 = getelementptr inbounds %struct.Point, %struct.Point* %78, i32 0, i32 1
  store double 2.000000e+00, double* %79, align 8
  %80 = bitcast [3 x %struct.Point]* %t232 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %80, i8 0, i32 48, i1 false)
  %81 = bitcast i8* %80 to [3 x %struct.Point]*
  %82 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %81, i32 0, i32 0
  %83 = getelementptr inbounds %struct.Point, %struct.Point* %82, i32 0, i32 0
  store double 2.000000e+00, double* %83, align 16
  %84 = getelementptr inbounds %struct.Point, %struct.Point* %82, i32 0, i32 1
  store double 1.000000e+00, double* %84, align 8
  %85 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %81, i32 0, i32 1
  %86 = getelementptr inbounds %struct.Point, %struct.Point* %85, i32 0, i32 0
  store double 3.000000e+00, double* %86, align 16
  %87 = getelementptr inbounds %struct.Point, %struct.Point* %85, i32 0, i32 1
  store double -2.000000e+00, double* %87, align 8
  %88 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %81, i32 0, i32 2
  %89 = getelementptr inbounds %struct.Point, %struct.Point* %88, i32 0, i32 0
  store double 3.000000e+00, double* %89, align 16
  %90 = getelementptr inbounds %struct.Point, %struct.Point* %88, i32 0, i32 1
  store double 4.000000e+00, double* %90, align 8
  %arraydecay33 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t131, i32 0, i32 0
  %arraydecay34 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t232, i32 0, i32 0
  %call35 = call zeroext i1 @triTri2D(%struct.Point* %arraydecay33, %struct.Point* %arraydecay34, double 0.000000e+00, i1 zeroext false, i1 zeroext true)
  %conv36 = zext i1 %call35 to i32
  %call37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i32 %conv36)
  %91 = bitcast [3 x %struct.Point]* %t138 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %91, i8 0, i32 48, i1 false)
  %92 = bitcast i8* %91 to [3 x %struct.Point]*
  %93 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %92, i32 0, i32 1
  %94 = getelementptr inbounds %struct.Point, %struct.Point* %93, i32 0, i32 0
  store double 1.000000e+00, double* %94, align 16
  %95 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %92, i32 0, i32 2
  %96 = getelementptr inbounds %struct.Point, %struct.Point* %95, i32 0, i32 1
  store double 1.000000e+00, double* %96, align 8
  %97 = bitcast [3 x %struct.Point]* %t239 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %97, i8 0, i32 48, i1 false)
  %98 = bitcast i8* %97 to [3 x %struct.Point]*
  %99 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %98, i32 0, i32 0
  %100 = getelementptr inbounds %struct.Point, %struct.Point* %99, i32 0, i32 0
  store double 1.000000e+00, double* %100, align 16
  %101 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %98, i32 0, i32 1
  %102 = getelementptr inbounds %struct.Point, %struct.Point* %101, i32 0, i32 0
  store double 2.000000e+00, double* %102, align 16
  %103 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %98, i32 0, i32 2
  %104 = getelementptr inbounds %struct.Point, %struct.Point* %103, i32 0, i32 0
  store double 1.000000e+00, double* %104, align 16
  %105 = getelementptr inbounds %struct.Point, %struct.Point* %103, i32 0, i32 1
  store double 1.000000e+00, double* %105, align 8
  %arraydecay40 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t138, i32 0, i32 0
  %arraydecay41 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t239, i32 0, i32 0
  %call42 = call zeroext i1 @triTri2D(%struct.Point* %arraydecay40, %struct.Point* %arraydecay41, double 0.000000e+00, i1 zeroext false, i1 zeroext true)
  %conv43 = zext i1 %call42 to i32
  %call44 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i32 %conv43)
  %106 = bitcast [3 x %struct.Point]* %t145 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %106, i8 0, i32 48, i1 false)
  %107 = bitcast i8* %106 to [3 x %struct.Point]*
  %108 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %107, i32 0, i32 1
  %109 = getelementptr inbounds %struct.Point, %struct.Point* %108, i32 0, i32 0
  store double 1.000000e+00, double* %109, align 16
  %110 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %107, i32 0, i32 2
  %111 = getelementptr inbounds %struct.Point, %struct.Point* %110, i32 0, i32 1
  store double 1.000000e+00, double* %111, align 8
  %112 = bitcast [3 x %struct.Point]* %t246 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %112, i8 0, i32 48, i1 false)
  %113 = bitcast i8* %112 to [3 x %struct.Point]*
  %114 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %113, i32 0, i32 0
  %115 = getelementptr inbounds %struct.Point, %struct.Point* %114, i32 0, i32 0
  store double 1.000000e+00, double* %115, align 16
  %116 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %113, i32 0, i32 1
  %117 = getelementptr inbounds %struct.Point, %struct.Point* %116, i32 0, i32 0
  store double 2.000000e+00, double* %117, align 16
  %118 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %113, i32 0, i32 2
  %119 = getelementptr inbounds %struct.Point, %struct.Point* %118, i32 0, i32 0
  store double 1.000000e+00, double* %119, align 16
  %120 = getelementptr inbounds %struct.Point, %struct.Point* %118, i32 0, i32 1
  store double 1.000000e+00, double* %120, align 8
  %arraydecay47 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t145, i32 0, i32 0
  %arraydecay48 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t246, i32 0, i32 0
  %call49 = call zeroext i1 @triTri2D(%struct.Point* %arraydecay47, %struct.Point* %arraydecay48, double 0.000000e+00, i1 zeroext false, i1 zeroext false)
  %conv50 = zext i1 %call49 to i32
  %call51 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i32 %conv50)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %cmp = fcmp ole double %call, %3
; Looking for a replacement for:
%0:i1 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for boundaryDoesntCollideChk()

; entering Souper's runOnFunction() for triTri2D()

; ModuleID = './Determine_if_two_triangles_overlap.c.bc'
source_filename = "./Determine_if_two_triangles_overlap.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.Point = type { double, double }

@errno = external thread_local global i32, align 4
@.str = private unnamed_addr constant [9 x i8] c"%d,true\0A\00", align 1
@.str.1 = private unnamed_addr constant [10 x i8] c"%d,false\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden double @det2D(%struct.Point* %p1, %struct.Point* %p2, %struct.Point* %p3) #0 {
entry:
  %p1.addr = alloca %struct.Point*, align 4
  %p2.addr = alloca %struct.Point*, align 4
  %p3.addr = alloca %struct.Point*, align 4
  store %struct.Point* %p1, %struct.Point** %p1.addr, align 4
  store %struct.Point* %p2, %struct.Point** %p2.addr, align 4
  store %struct.Point* %p3, %struct.Point** %p3.addr, align 4
  %0 = load %struct.Point*, %struct.Point** %p1.addr, align 4
  %x = getelementptr inbounds %struct.Point, %struct.Point* %0, i32 0, i32 0
  %1 = load double, double* %x, align 8
  %2 = load %struct.Point*, %struct.Point** %p2.addr, align 4
  %y = getelementptr inbounds %struct.Point, %struct.Point* %2, i32 0, i32 1
  %3 = load double, double* %y, align 8
  %4 = load %struct.Point*, %struct.Point** %p3.addr, align 4
  %y1 = getelementptr inbounds %struct.Point, %struct.Point* %4, i32 0, i32 1
  %5 = load double, double* %y1, align 8
  %sub = fsub double %3, %5
  %mul = fmul double %1, %sub
  %6 = load %struct.Point*, %struct.Point** %p2.addr, align 4
  %x2 = getelementptr inbounds %struct.Point, %struct.Point* %6, i32 0, i32 0
  %7 = load double, double* %x2, align 8
  %8 = load %struct.Point*, %struct.Point** %p3.addr, align 4
  %y3 = getelementptr inbounds %struct.Point, %struct.Point* %8, i32 0, i32 1
  %9 = load double, double* %y3, align 8
  %10 = load %struct.Point*, %struct.Point** %p1.addr, align 4
  %y4 = getelementptr inbounds %struct.Point, %struct.Point* %10, i32 0, i32 1
  %11 = load double, double* %y4, align 8
  %sub5 = fsub double %9, %11
  %mul6 = fmul double %7, %sub5
  %add = fadd double %mul, %mul6
  %12 = load %struct.Point*, %struct.Point** %p3.addr, align 4
  %x7 = getelementptr inbounds %struct.Point, %struct.Point* %12, i32 0, i32 0
  %13 = load double, double* %x7, align 8
  %14 = load %struct.Point*, %struct.Point** %p1.addr, align 4
  %y8 = getelementptr inbounds %struct.Point, %struct.Point* %14, i32 0, i32 1
  %15 = load double, double* %y8, align 8
  %16 = load %struct.Point*, %struct.Point** %p2.addr, align 4
  %y9 = getelementptr inbounds %struct.Point, %struct.Point* %16, i32 0, i32 1
  %17 = load double, double* %y9, align 8
  %sub10 = fsub double %15, %17
  %mul11 = fmul double %13, %sub10
  %add12 = fadd double %add, %mul11
  ret double %add12
}

; Function Attrs: noinline nounwind optnone
define hidden void @checkTriWinding(%struct.Point* %p1, %struct.Point* %p2, %struct.Point* %p3, i1 zeroext %allowReversed) #0 {
entry:
  %p1.addr = alloca %struct.Point*, align 4
  %p2.addr = alloca %struct.Point*, align 4
  %p3.addr = alloca %struct.Point*, align 4
  %allowReversed.addr = alloca i8, align 1
  %detTri = alloca double, align 8
  %t = alloca double, align 8
  store %struct.Point* %p1, %struct.Point** %p1.addr, align 4
  store %struct.Point* %p2, %struct.Point** %p2.addr, align 4
  store %struct.Point* %p3, %struct.Point** %p3.addr, align 4
  %frombool = zext i1 %allowReversed to i8
  store i8 %frombool, i8* %allowReversed.addr, align 1
  %0 = load %struct.Point*, %struct.Point** %p1.addr, align 4
  %1 = load %struct.Point*, %struct.Point** %p2.addr, align 4
  %2 = load %struct.Point*, %struct.Point** %p3.addr, align 4
  %call = call double @det2D(%struct.Point* %0, %struct.Point* %1, %struct.Point* %2)
  store double %call, double* %detTri, align 8
  %3 = load double, double* %detTri, align 8
  %cmp = fcmp olt double %3, 0.000000e+00
  br i1 %cmp, label %if.then, label %if.end8

if.then:                                          ; preds = %entry
  %4 = load i8, i8* %allowReversed.addr, align 1
  %tobool = trunc i8 %4 to i1
  br i1 %tobool, label %if.then1, label %if.else

if.then1:                                         ; preds = %if.then
  %5 = load %struct.Point*, %struct.Point** %p3.addr, align 4
  %x = getelementptr inbounds %struct.Point, %struct.Point* %5, i32 0, i32 0
  %6 = load double, double* %x, align 8
  store double %6, double* %t, align 8
  %7 = load %struct.Point*, %struct.Point** %p2.addr, align 4
  %x2 = getelementptr inbounds %struct.Point, %struct.Point* %7, i32 0, i32 0
  %8 = load double, double* %x2, align 8
  %9 = load %struct.Point*, %struct.Point** %p3.addr, align 4
  %x3 = getelementptr inbounds %struct.Point, %struct.Point* %9, i32 0, i32 0
  store double %8, double* %x3, align 8
  %10 = load double, double* %t, align 8
  %11 = load %struct.Point*, %struct.Point** %p2.addr, align 4
  %x4 = getelementptr inbounds %struct.Point, %struct.Point* %11, i32 0, i32 0
  store double %10, double* %x4, align 8
  %12 = load %struct.Point*, %struct.Point** %p3.addr, align 4
  %y = getelementptr inbounds %struct.Point, %struct.Point* %12, i32 0, i32 1
  %13 = load double, double* %y, align 8
  store double %13, double* %t, align 8
  %14 = load %struct.Point*, %struct.Point** %p2.addr, align 4
  %y5 = getelementptr inbounds %struct.Point, %struct.Point* %14, i32 0, i32 1
  %15 = load double, double* %y5, align 8
  %16 = load %struct.Point*, %struct.Point** %p3.addr, align 4
  %y6 = getelementptr inbounds %struct.Point, %struct.Point* %16, i32 0, i32 1
  store double %15, double* %y6, align 8
  %17 = load double, double* %t, align 8
  %18 = load %struct.Point*, %struct.Point** %p2.addr, align 4
  %y7 = getelementptr inbounds %struct.Point, %struct.Point* %18, i32 0, i32 1
  store double %17, double* %y7, align 8
  br label %if.end

if.else:                                          ; preds = %if.then
  store i32 1, i32* @errno, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then1
  br label %if.end8

if.end8:                                          ; preds = %if.end, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @boundaryCollideChk(%struct.Point* %p1, %struct.Point* %p2, %struct.Point* %p3, double %eps) #0 {
entry:
  %p1.addr = alloca %struct.Point*, align 4
  %p2.addr = alloca %struct.Point*, align 4
  %p3.addr = alloca %struct.Point*, align 4
  %eps.addr = alloca double, align 8
  store %struct.Point* %p1, %struct.Point** %p1.addr, align 4
  store %struct.Point* %p2, %struct.Point** %p2.addr, align 4
  store %struct.Point* %p3, %struct.Point** %p3.addr, align 4
  store double %eps, double* %eps.addr, align 8
  %0 = load %struct.Point*, %struct.Point** %p1.addr, align 4
  %1 = load %struct.Point*, %struct.Point** %p2.addr, align 4
  %2 = load %struct.Point*, %struct.Point** %p3.addr, align 4
  %call = call double @det2D(%struct.Point* %0, %struct.Point* %1, %struct.Point* %2)
  %3 = load double, double* %eps.addr, align 8
  %cmp = fcmp olt double %call, %3
  ret i1 %cmp
}

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @boundaryDoesntCollideChk(%struct.Point* %p1, %struct.Point* %p2, %struct.Point* %p3, double %eps) #0 {
entry:
  %p1.addr = alloca %struct.Point*, align 4
  %p2.addr = alloca %struct.Point*, align 4
  %p3.addr = alloca %struct.Point*, align 4
  %eps.addr = alloca double, align 8
  store %struct.Point* %p1, %struct.Point** %p1.addr, align 4
  store %struct.Point* %p2, %struct.Point** %p2.addr, align 4
  store %struct.Point* %p3, %struct.Point** %p3.addr, align 4
  store double %eps, double* %eps.addr, align 8
  %0 = load %struct.Point*, %struct.Point** %p1.addr, align 4
  %1 = load %struct.Point*, %struct.Point** %p2.addr, align 4
  %2 = load %struct.Point*, %struct.Point** %p3.addr, align 4
  %call = call double @det2D(%struct.Point* %0, %struct.Point* %1, %struct.Point* %2)
  %3 = load double, double* %eps.addr, align 8
  %cmp = fcmp ole double %call, %3
  ret i1 %cmp
}

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @triTri2D(%struct.Point* %t1, %struct.Point* %t2, double %eps, i1 zeroext %allowReversed, i1 zeroext %onBoundary) #0 {
entry:
  %retval = alloca i1, align 1
  %t1.addr = alloca %struct.Point*, align 4
  %t2.addr = alloca %struct.Point*, align 4
  %eps.addr = alloca double, align 8
  %allowReversed.addr = alloca i8, align 1
  %onBoundary.addr = alloca i8, align 1
  %chkEdge = alloca i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %j32 = alloca i32, align 4
  store %struct.Point* %t1, %struct.Point** %t1.addr, align 4
  store %struct.Point* %t2, %struct.Point** %t2.addr, align 4
  store double %eps, double* %eps.addr, align 8
  %frombool = zext i1 %allowReversed to i8
  store i8 %frombool, i8* %allowReversed.addr, align 1
  %frombool1 = zext i1 %onBoundary to i8
  store i8 %frombool1, i8* %onBoundary.addr, align 1
  %0 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %arrayidx = getelementptr inbounds %struct.Point, %struct.Point* %0, i32 0
  %1 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %arrayidx2 = getelementptr inbounds %struct.Point, %struct.Point* %1, i32 1
  %2 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %arrayidx3 = getelementptr inbounds %struct.Point, %struct.Point* %2, i32 2
  %3 = load i8, i8* %allowReversed.addr, align 1
  %tobool = trunc i8 %3 to i1
  call void @checkTriWinding(%struct.Point* %arrayidx, %struct.Point* %arrayidx2, %struct.Point* %arrayidx3, i1 zeroext %tobool)
  %4 = load i32, i32* @errno, align 4
  %cmp = icmp ne i32 %4, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i1 false, i1* %retval, align 1
  br label %return

if.end:                                           ; preds = %entry
  %5 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %arrayidx4 = getelementptr inbounds %struct.Point, %struct.Point* %5, i32 0
  %6 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %arrayidx5 = getelementptr inbounds %struct.Point, %struct.Point* %6, i32 1
  %7 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %arrayidx6 = getelementptr inbounds %struct.Point, %struct.Point* %7, i32 2
  %8 = load i8, i8* %allowReversed.addr, align 1
  %tobool7 = trunc i8 %8 to i1
  call void @checkTriWinding(%struct.Point* %arrayidx4, %struct.Point* %arrayidx5, %struct.Point* %arrayidx6, i1 zeroext %tobool7)
  %9 = load i32, i32* @errno, align 4
  %cmp8 = icmp ne i32 %9, 0
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end
  store i1 false, i1* %retval, align 1
  br label %return

if.end10:                                         ; preds = %if.end
  %10 = load i8, i8* %onBoundary.addr, align 1
  %tobool11 = trunc i8 %10 to i1
  br i1 %tobool11, label %if.then12, label %if.else

if.then12:                                        ; preds = %if.end10
  store i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)* @boundaryCollideChk, i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)** %chkEdge, align 4
  br label %if.end13

if.else:                                          ; preds = %if.end10
  store i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)* @boundaryDoesntCollideChk, i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)** %chkEdge, align 4
  br label %if.end13

if.end13:                                         ; preds = %if.else, %if.then12
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end13
  %11 = load i32, i32* %i, align 4
  %cmp14 = icmp slt i32 %11, 3
  br i1 %cmp14, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load i32, i32* %i, align 4
  %add = add nsw i32 %12, 1
  %rem = srem i32 %add, 3
  store i32 %rem, i32* %j, align 4
  %13 = load i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)*, i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)** %chkEdge, align 4
  %14 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx15 = getelementptr inbounds %struct.Point, %struct.Point* %14, i32 %15
  %16 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %17 = load i32, i32* %j, align 4
  %arrayidx16 = getelementptr inbounds %struct.Point, %struct.Point* %16, i32 %17
  %18 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %arrayidx17 = getelementptr inbounds %struct.Point, %struct.Point* %18, i32 0
  %19 = load double, double* %eps.addr, align 8
  %call = call zeroext i1 %13(%struct.Point* %arrayidx15, %struct.Point* %arrayidx16, %struct.Point* %arrayidx17, double %19)
  br i1 %call, label %land.lhs.true, label %if.end28

land.lhs.true:                                    ; preds = %for.body
  %20 = load i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)*, i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)** %chkEdge, align 4
  %21 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %22 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds %struct.Point, %struct.Point* %21, i32 %22
  %23 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %24 = load i32, i32* %j, align 4
  %arrayidx19 = getelementptr inbounds %struct.Point, %struct.Point* %23, i32 %24
  %25 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %arrayidx20 = getelementptr inbounds %struct.Point, %struct.Point* %25, i32 1
  %26 = load double, double* %eps.addr, align 8
  %call21 = call zeroext i1 %20(%struct.Point* %arrayidx18, %struct.Point* %arrayidx19, %struct.Point* %arrayidx20, double %26)
  br i1 %call21, label %land.lhs.true22, label %if.end28

land.lhs.true22:                                  ; preds = %land.lhs.true
  %27 = load i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)*, i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)** %chkEdge, align 4
  %28 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %29 = load i32, i32* %i, align 4
  %arrayidx23 = getelementptr inbounds %struct.Point, %struct.Point* %28, i32 %29
  %30 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %31 = load i32, i32* %j, align 4
  %arrayidx24 = getelementptr inbounds %struct.Point, %struct.Point* %30, i32 %31
  %32 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %arrayidx25 = getelementptr inbounds %struct.Point, %struct.Point* %32, i32 2
  %33 = load double, double* %eps.addr, align 8
  %call26 = call zeroext i1 %27(%struct.Point* %arrayidx23, %struct.Point* %arrayidx24, %struct.Point* %arrayidx25, double %33)
  br i1 %call26, label %if.then27, label %if.end28

if.then27:                                        ; preds = %land.lhs.true22
  store i1 false, i1* %retval, align 1
  br label %return

if.end28:                                         ; preds = %land.lhs.true22, %land.lhs.true, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end28
  %34 = load i32, i32* %i, align 4
  %inc = add nsw i32 %34, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond29

for.cond29:                                       ; preds = %for.inc51, %for.end
  %35 = load i32, i32* %i, align 4
  %cmp30 = icmp slt i32 %35, 3
  br i1 %cmp30, label %for.body31, label %for.end53

for.body31:                                       ; preds = %for.cond29
  %36 = load i32, i32* %i, align 4
  %add33 = add nsw i32 %36, 1
  %rem34 = srem i32 %add33, 3
  store i32 %rem34, i32* %j32, align 4
  %37 = load i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)*, i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)** %chkEdge, align 4
  %38 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %39 = load i32, i32* %i, align 4
  %arrayidx35 = getelementptr inbounds %struct.Point, %struct.Point* %38, i32 %39
  %40 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %41 = load i32, i32* %j32, align 4
  %arrayidx36 = getelementptr inbounds %struct.Point, %struct.Point* %40, i32 %41
  %42 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %arrayidx37 = getelementptr inbounds %struct.Point, %struct.Point* %42, i32 0
  %43 = load double, double* %eps.addr, align 8
  %call38 = call zeroext i1 %37(%struct.Point* %arrayidx35, %struct.Point* %arrayidx36, %struct.Point* %arrayidx37, double %43)
  br i1 %call38, label %land.lhs.true39, label %if.end50

land.lhs.true39:                                  ; preds = %for.body31
  %44 = load i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)*, i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)** %chkEdge, align 4
  %45 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %46 = load i32, i32* %i, align 4
  %arrayidx40 = getelementptr inbounds %struct.Point, %struct.Point* %45, i32 %46
  %47 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %48 = load i32, i32* %j32, align 4
  %arrayidx41 = getelementptr inbounds %struct.Point, %struct.Point* %47, i32 %48
  %49 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %arrayidx42 = getelementptr inbounds %struct.Point, %struct.Point* %49, i32 1
  %50 = load double, double* %eps.addr, align 8
  %call43 = call zeroext i1 %44(%struct.Point* %arrayidx40, %struct.Point* %arrayidx41, %struct.Point* %arrayidx42, double %50)
  br i1 %call43, label %land.lhs.true44, label %if.end50

land.lhs.true44:                                  ; preds = %land.lhs.true39
  %51 = load i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)*, i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)** %chkEdge, align 4
  %52 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %53 = load i32, i32* %i, align 4
  %arrayidx45 = getelementptr inbounds %struct.Point, %struct.Point* %52, i32 %53
  %54 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %55 = load i32, i32* %j32, align 4
  %arrayidx46 = getelementptr inbounds %struct.Point, %struct.Point* %54, i32 %55
  %56 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %arrayidx47 = getelementptr inbounds %struct.Point, %struct.Point* %56, i32 2
  %57 = load double, double* %eps.addr, align 8
  %call48 = call zeroext i1 %51(%struct.Point* %arrayidx45, %struct.Point* %arrayidx46, %struct.Point* %arrayidx47, double %57)
  br i1 %call48, label %if.then49, label %if.end50

if.then49:                                        ; preds = %land.lhs.true44
  store i1 false, i1* %retval, align 1
  br label %return

if.end50:                                         ; preds = %land.lhs.true44, %land.lhs.true39, %for.body31
  br label %for.inc51

for.inc51:                                        ; preds = %if.end50
  %58 = load i32, i32* %i, align 4
  %inc52 = add nsw i32 %58, 1
  store i32 %inc52, i32* %i, align 4
  br label %for.cond29

for.end53:                                        ; preds = %for.cond29
  store i1 true, i1* %retval, align 1
  br label %return

return:                                           ; preds = %for.end53, %if.then49, %if.then27, %if.then9, %if.then
  %59 = load i1, i1* %retval, align 1
  ret i1 %59
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %t1 = alloca [3 x %struct.Point], align 16
  %t2 = alloca [3 x %struct.Point], align 16
  %t13 = alloca [3 x %struct.Point], align 16
  %t24 = alloca [3 x %struct.Point], align 16
  %t110 = alloca [3 x %struct.Point], align 16
  %t211 = alloca [3 x %struct.Point], align 16
  %t117 = alloca [3 x %struct.Point], align 16
  %t218 = alloca [3 x %struct.Point], align 16
  %t124 = alloca [3 x %struct.Point], align 16
  %t225 = alloca [3 x %struct.Point], align 16
  %t131 = alloca [3 x %struct.Point], align 16
  %t232 = alloca [3 x %struct.Point], align 16
  %t138 = alloca [3 x %struct.Point], align 16
  %t239 = alloca [3 x %struct.Point], align 16
  %t145 = alloca [3 x %struct.Point], align 16
  %t246 = alloca [3 x %struct.Point], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [3 x %struct.Point]* %t1 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 48, i1 false)
  %1 = bitcast i8* %0 to [3 x %struct.Point]*
  %2 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %1, i32 0, i32 1
  %3 = getelementptr inbounds %struct.Point, %struct.Point* %2, i32 0, i32 0
  store double 5.000000e+00, double* %3, align 16
  %4 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %1, i32 0, i32 2
  %5 = getelementptr inbounds %struct.Point, %struct.Point* %4, i32 0, i32 1
  store double 5.000000e+00, double* %5, align 8
  %6 = bitcast [3 x %struct.Point]* %t2 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %6, i8 0, i32 48, i1 false)
  %7 = bitcast i8* %6 to [3 x %struct.Point]*
  %8 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Point, %struct.Point* %8, i32 0, i32 0
  store double 5.000000e+00, double* %9, align 16
  %10 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %7, i32 0, i32 2
  %11 = getelementptr inbounds %struct.Point, %struct.Point* %10, i32 0, i32 1
  store double 6.000000e+00, double* %11, align 8
  %arraydecay = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t1, i32 0, i32 0
  %arraydecay1 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t2, i32 0, i32 0
  %call = call zeroext i1 @triTri2D(%struct.Point* %arraydecay, %struct.Point* %arraydecay1, double 0.000000e+00, i1 zeroext false, i1 zeroext true)
  %conv = zext i1 %call to i32
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i32 %conv)
  %12 = bitcast [3 x %struct.Point]* %t13 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %12, i8 0, i32 48, i1 false)
  %13 = bitcast i8* %12 to [3 x %struct.Point]*
  %14 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %13, i32 0, i32 1
  %15 = getelementptr inbounds %struct.Point, %struct.Point* %14, i32 0, i32 1
  store double 5.000000e+00, double* %15, align 8
  %16 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %13, i32 0, i32 2
  %17 = getelementptr inbounds %struct.Point, %struct.Point* %16, i32 0, i32 0
  store double 5.000000e+00, double* %17, align 16
  %18 = bitcast [3 x %struct.Point]* %t24 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %18, i8 0, i32 48, i1 false)
  %19 = bitcast i8* %18 to [3 x %struct.Point]*
  %20 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %19, i32 0, i32 1
  %21 = getelementptr inbounds %struct.Point, %struct.Point* %20, i32 0, i32 1
  store double 5.000000e+00, double* %21, align 8
  %22 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %19, i32 0, i32 2
  %23 = getelementptr inbounds %struct.Point, %struct.Point* %22, i32 0, i32 0
  store double 5.000000e+00, double* %23, align 16
  %arraydecay5 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t13, i32 0, i32 0
  %arraydecay6 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t24, i32 0, i32 0
  %call7 = call zeroext i1 @triTri2D(%struct.Point* %arraydecay5, %struct.Point* %arraydecay6, double 0.000000e+00, i1 zeroext true, i1 zeroext true)
  %conv8 = zext i1 %call7 to i32
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i32 %conv8)
  %24 = bitcast [3 x %struct.Point]* %t110 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %24, i8 0, i32 48, i1 false)
  %25 = bitcast i8* %24 to [3 x %struct.Point]*
  %26 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %25, i32 0, i32 1
  %27 = getelementptr inbounds %struct.Point, %struct.Point* %26, i32 0, i32 0
  store double 5.000000e+00, double* %27, align 16
  %28 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %25, i32 0, i32 2
  %29 = getelementptr inbounds %struct.Point, %struct.Point* %28, i32 0, i32 1
  store double 5.000000e+00, double* %29, align 8
  %30 = bitcast [3 x %struct.Point]* %t211 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %30, i8 0, i32 48, i1 false)
  %31 = bitcast i8* %30 to [3 x %struct.Point]*
  %32 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %31, i32 0, i32 0
  %33 = getelementptr inbounds %struct.Point, %struct.Point* %32, i32 0, i32 0
  store double -1.000000e+01, double* %33, align 16
  %34 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %31, i32 0, i32 1
  %35 = getelementptr inbounds %struct.Point, %struct.Point* %34, i32 0, i32 0
  store double -5.000000e+00, double* %35, align 16
  %36 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %31, i32 0, i32 2
  %37 = getelementptr inbounds %struct.Point, %struct.Point* %36, i32 0, i32 0
  store double -1.000000e+00, double* %37, align 16
  %38 = getelementptr inbounds %struct.Point, %struct.Point* %36, i32 0, i32 1
  store double 6.000000e+00, double* %38, align 8
  %arraydecay12 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t110, i32 0, i32 0
  %arraydecay13 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t211, i32 0, i32 0
  %call14 = call zeroext i1 @triTri2D(%struct.Point* %arraydecay12, %struct.Point* %arraydecay13, double 0.000000e+00, i1 zeroext false, i1 zeroext true)
  %conv15 = zext i1 %call14 to i32
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i32 %conv15)
  %39 = bitcast [3 x %struct.Point]* %t117 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %39, i8 0, i32 48, i1 false)
  %40 = bitcast i8* %39 to [3 x %struct.Point]*
  %41 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %40, i32 0, i32 1
  %42 = getelementptr inbounds %struct.Point, %struct.Point* %41, i32 0, i32 0
  store double 5.000000e+00, double* %42, align 16
  %43 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %40, i32 0, i32 2
  %44 = getelementptr inbounds %struct.Point, %struct.Point* %43, i32 0, i32 0
  store double 2.500000e+00, double* %44, align 16
  %45 = getelementptr inbounds %struct.Point, %struct.Point* %43, i32 0, i32 1
  store double 5.000000e+00, double* %45, align 8
  %46 = bitcast [3 x %struct.Point]* %t218 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %46, i8 0, i32 48, i1 false)
  %47 = bitcast i8* %46 to [3 x %struct.Point]*
  %48 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %47, i32 0, i32 0
  %49 = getelementptr inbounds %struct.Point, %struct.Point* %48, i32 0, i32 1
  store double 4.000000e+00, double* %49, align 8
  %50 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %47, i32 0, i32 1
  %51 = getelementptr inbounds %struct.Point, %struct.Point* %50, i32 0, i32 0
  store double 2.500000e+00, double* %51, align 16
  %52 = getelementptr inbounds %struct.Point, %struct.Point* %50, i32 0, i32 1
  store double -1.000000e+00, double* %52, align 8
  %53 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %47, i32 0, i32 2
  %54 = getelementptr inbounds %struct.Point, %struct.Point* %53, i32 0, i32 0
  store double 5.000000e+00, double* %54, align 16
  %55 = getelementptr inbounds %struct.Point, %struct.Point* %53, i32 0, i32 1
  store double 4.000000e+00, double* %55, align 8
  %arraydecay19 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t117, i32 0, i32 0
  %arraydecay20 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t218, i32 0, i32 0
  %call21 = call zeroext i1 @triTri2D(%struct.Point* %arraydecay19, %struct.Point* %arraydecay20, double 0.000000e+00, i1 zeroext false, i1 zeroext true)
  %conv22 = zext i1 %call21 to i32
  %call23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i32 %conv22)
  %56 = bitcast [3 x %struct.Point]* %t124 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %56, i8 0, i32 48, i1 false)
  %57 = bitcast i8* %56 to [3 x %struct.Point]*
  %58 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %57, i32 0, i32 1
  %59 = getelementptr inbounds %struct.Point, %struct.Point* %58, i32 0, i32 0
  store double 1.000000e+00, double* %59, align 16
  %60 = getelementptr inbounds %struct.Point, %struct.Point* %58, i32 0, i32 1
  store double 1.000000e+00, double* %60, align 8
  %61 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %57, i32 0, i32 2
  %62 = getelementptr inbounds %struct.Point, %struct.Point* %61, i32 0, i32 1
  store double 2.000000e+00, double* %62, align 8
  %63 = bitcast [3 x %struct.Point]* %t225 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %63, i8 0, i32 48, i1 false)
  %64 = bitcast i8* %63 to [3 x %struct.Point]*
  %65 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %64, i32 0, i32 0
  %66 = getelementptr inbounds %struct.Point, %struct.Point* %65, i32 0, i32 0
  store double 2.000000e+00, double* %66, align 16
  %67 = getelementptr inbounds %struct.Point, %struct.Point* %65, i32 0, i32 1
  store double 1.000000e+00, double* %67, align 8
  %68 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %64, i32 0, i32 1
  %69 = getelementptr inbounds %struct.Point, %struct.Point* %68, i32 0, i32 0
  store double 3.000000e+00, double* %69, align 16
  %70 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %64, i32 0, i32 2
  %71 = getelementptr inbounds %struct.Point, %struct.Point* %70, i32 0, i32 0
  store double 3.000000e+00, double* %71, align 16
  %72 = getelementptr inbounds %struct.Point, %struct.Point* %70, i32 0, i32 1
  store double 2.000000e+00, double* %72, align 8
  %arraydecay26 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t124, i32 0, i32 0
  %arraydecay27 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t225, i32 0, i32 0
  %call28 = call zeroext i1 @triTri2D(%struct.Point* %arraydecay26, %struct.Point* %arraydecay27, double 0.000000e+00, i1 zeroext false, i1 zeroext true)
  %conv29 = zext i1 %call28 to i32
  %call30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i32 %conv29)
  %73 = bitcast [3 x %struct.Point]* %t131 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %73, i8 0, i32 48, i1 false)
  %74 = bitcast i8* %73 to [3 x %struct.Point]*
  %75 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %74, i32 0, i32 1
  %76 = getelementptr inbounds %struct.Point, %struct.Point* %75, i32 0, i32 0
  store double 1.000000e+00, double* %76, align 16
  %77 = getelementptr inbounds %struct.Point, %struct.Point* %75, i32 0, i32 1
  store double 1.000000e+00, double* %77, align 8
  %78 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %74, i32 0, i32 2
  %79 = getelementptr inbounds %struct.Point, %struct.Point* %78, i32 0, i32 1
  store double 2.000000e+00, double* %79, align 8
  %80 = bitcast [3 x %struct.Point]* %t232 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %80, i8 0, i32 48, i1 false)
  %81 = bitcast i8* %80 to [3 x %struct.Point]*
  %82 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %81, i32 0, i32 0
  %83 = getelementptr inbounds %struct.Point, %struct.Point* %82, i32 0, i32 0
  store double 2.000000e+00, double* %83, align 16
  %84 = getelementptr inbounds %struct.Point, %struct.Point* %82, i32 0, i32 1
  store double 1.000000e+00, double* %84, align 8
  %85 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %81, i32 0, i32 1
  %86 = getelementptr inbounds %struct.Point, %struct.Point* %85, i32 0, i32 0
  store double 3.000000e+00, double* %86, align 16
  %87 = getelementptr inbounds %struct.Point, %struct.Point* %85, i32 0, i32 1
  store double -2.000000e+00, double* %87, align 8
  %88 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %81, i32 0, i32 2
  %89 = getelementptr inbounds %struct.Point, %struct.Point* %88, i32 0, i32 0
  store double 3.000000e+00, double* %89, align 16
  %90 = getelementptr inbounds %struct.Point, %struct.Point* %88, i32 0, i32 1
  store double 4.000000e+00, double* %90, align 8
  %arraydecay33 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t131, i32 0, i32 0
  %arraydecay34 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t232, i32 0, i32 0
  %call35 = call zeroext i1 @triTri2D(%struct.Point* %arraydecay33, %struct.Point* %arraydecay34, double 0.000000e+00, i1 zeroext false, i1 zeroext true)
  %conv36 = zext i1 %call35 to i32
  %call37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i32 %conv36)
  %91 = bitcast [3 x %struct.Point]* %t138 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %91, i8 0, i32 48, i1 false)
  %92 = bitcast i8* %91 to [3 x %struct.Point]*
  %93 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %92, i32 0, i32 1
  %94 = getelementptr inbounds %struct.Point, %struct.Point* %93, i32 0, i32 0
  store double 1.000000e+00, double* %94, align 16
  %95 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %92, i32 0, i32 2
  %96 = getelementptr inbounds %struct.Point, %struct.Point* %95, i32 0, i32 1
  store double 1.000000e+00, double* %96, align 8
  %97 = bitcast [3 x %struct.Point]* %t239 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %97, i8 0, i32 48, i1 false)
  %98 = bitcast i8* %97 to [3 x %struct.Point]*
  %99 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %98, i32 0, i32 0
  %100 = getelementptr inbounds %struct.Point, %struct.Point* %99, i32 0, i32 0
  store double 1.000000e+00, double* %100, align 16
  %101 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %98, i32 0, i32 1
  %102 = getelementptr inbounds %struct.Point, %struct.Point* %101, i32 0, i32 0
  store double 2.000000e+00, double* %102, align 16
  %103 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %98, i32 0, i32 2
  %104 = getelementptr inbounds %struct.Point, %struct.Point* %103, i32 0, i32 0
  store double 1.000000e+00, double* %104, align 16
  %105 = getelementptr inbounds %struct.Point, %struct.Point* %103, i32 0, i32 1
  store double 1.000000e+00, double* %105, align 8
  %arraydecay40 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t138, i32 0, i32 0
  %arraydecay41 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t239, i32 0, i32 0
  %call42 = call zeroext i1 @triTri2D(%struct.Point* %arraydecay40, %struct.Point* %arraydecay41, double 0.000000e+00, i1 zeroext false, i1 zeroext true)
  %conv43 = zext i1 %call42 to i32
  %call44 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i32 %conv43)
  %106 = bitcast [3 x %struct.Point]* %t145 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %106, i8 0, i32 48, i1 false)
  %107 = bitcast i8* %106 to [3 x %struct.Point]*
  %108 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %107, i32 0, i32 1
  %109 = getelementptr inbounds %struct.Point, %struct.Point* %108, i32 0, i32 0
  store double 1.000000e+00, double* %109, align 16
  %110 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %107, i32 0, i32 2
  %111 = getelementptr inbounds %struct.Point, %struct.Point* %110, i32 0, i32 1
  store double 1.000000e+00, double* %111, align 8
  %112 = bitcast [3 x %struct.Point]* %t246 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %112, i8 0, i32 48, i1 false)
  %113 = bitcast i8* %112 to [3 x %struct.Point]*
  %114 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %113, i32 0, i32 0
  %115 = getelementptr inbounds %struct.Point, %struct.Point* %114, i32 0, i32 0
  store double 1.000000e+00, double* %115, align 16
  %116 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %113, i32 0, i32 1
  %117 = getelementptr inbounds %struct.Point, %struct.Point* %116, i32 0, i32 0
  store double 2.000000e+00, double* %117, align 16
  %118 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %113, i32 0, i32 2
  %119 = getelementptr inbounds %struct.Point, %struct.Point* %118, i32 0, i32 0
  store double 1.000000e+00, double* %119, align 16
  %120 = getelementptr inbounds %struct.Point, %struct.Point* %118, i32 0, i32 1
  store double 1.000000e+00, double* %120, align 8
  %arraydecay47 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t145, i32 0, i32 0
  %arraydecay48 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t246, i32 0, i32 0
  %call49 = call zeroext i1 @triTri2D(%struct.Point* %arraydecay47, %struct.Point* %arraydecay48, double 0.000000e+00, i1 zeroext false, i1 zeroext false)
  %conv50 = zext i1 %call49 to i32
  %call51 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i32 %conv50)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %frombool = zext i1 %allowReversed to i8
; Looking for a replacement for:
%0:i1 = var
%1:i8 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %frombool1 = zext i1 %onBoundary to i8
; Looking for a replacement for:
%0:i1 = var
%1:i8 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i8, i8* %allowReversed.addr, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0 (demandedBits=00000001)

; *****
; For LLVM instruction:
;  %tobool = trunc i8 %3 to i1
; Looking for a replacement for:
%0:i8 = var
%1:i1 = trunc %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* @errno, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ne i32 %4, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %8 = load i8, i8* %allowReversed.addr, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0 (demandedBits=00000001)

; *****
; For LLVM instruction:
;  %tobool7 = trunc i8 %8 to i1
; Looking for a replacement for:
%0:i8 = var
%1:i1 = trunc %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* @errno, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp8 = icmp ne i32 %9, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %10 = load i8, i8* %onBoundary.addr, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0 (demandedBits=00000001)

; *****
; For LLVM instruction:
;  %tobool11 = trunc i8 %10 to i1
; Looking for a replacement for:
%0:i8 = var
%1:i1 = trunc %0
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp14 = icmp slt i32 %11, 3
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 3:i32
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %12, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %rem = srem i32 %add, 3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = srem %1, 3:i32
infer %2

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call zeroext i1 %13(%struct.Point* %arrayidx15, %struct.Point* %arrayidx16, %struct.Point* %arrayidx17, double %19)
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call21 = call zeroext i1 %20(%struct.Point* %arrayidx18, %struct.Point* %arrayidx19, %struct.Point* %arrayidx20, double %26)
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call26 = call zeroext i1 %27(%struct.Point* %arrayidx23, %struct.Point* %arrayidx24, %struct.Point* %arrayidx25, double %33)
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %34, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp30 = icmp slt i32 %35, 3
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 3:i32
infer %1

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add33 = add nsw i32 %36, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %rem34 = srem i32 %add33, 3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = srem %1, 3:i32
infer %2

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %41 = load i32, i32* %j32, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call38 = call zeroext i1 %37(%struct.Point* %arrayidx35, %struct.Point* %arrayidx36, %struct.Point* %arrayidx37, double %43)
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %46 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %48 = load i32, i32* %j32, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call43 = call zeroext i1 %44(%struct.Point* %arrayidx40, %struct.Point* %arrayidx41, %struct.Point* %arrayidx42, double %50)
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %53 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %55 = load i32, i32* %j32, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call48 = call zeroext i1 %51(%struct.Point* %arrayidx45, %struct.Point* %arrayidx46, %struct.Point* %arrayidx47, double %57)
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %58 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc52 = add nsw i32 %58, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %59 = load i1, i1* %retval, align 1
; Looking for a replacement for:
%0:i1 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 3:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = srem %1, 3:i32
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = addnsw 1:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for triTri2D()

; entering Souper's runOnFunction() for main()

; ModuleID = './Determine_if_two_triangles_overlap.c.bc'
source_filename = "./Determine_if_two_triangles_overlap.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.Point = type { double, double }

@errno = external thread_local global i32, align 4
@.str = private unnamed_addr constant [9 x i8] c"%d,true\0A\00", align 1
@.str.1 = private unnamed_addr constant [10 x i8] c"%d,false\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden double @det2D(%struct.Point* %p1, %struct.Point* %p2, %struct.Point* %p3) #0 {
entry:
  %p1.addr = alloca %struct.Point*, align 4
  %p2.addr = alloca %struct.Point*, align 4
  %p3.addr = alloca %struct.Point*, align 4
  store %struct.Point* %p1, %struct.Point** %p1.addr, align 4
  store %struct.Point* %p2, %struct.Point** %p2.addr, align 4
  store %struct.Point* %p3, %struct.Point** %p3.addr, align 4
  %0 = load %struct.Point*, %struct.Point** %p1.addr, align 4
  %x = getelementptr inbounds %struct.Point, %struct.Point* %0, i32 0, i32 0
  %1 = load double, double* %x, align 8
  %2 = load %struct.Point*, %struct.Point** %p2.addr, align 4
  %y = getelementptr inbounds %struct.Point, %struct.Point* %2, i32 0, i32 1
  %3 = load double, double* %y, align 8
  %4 = load %struct.Point*, %struct.Point** %p3.addr, align 4
  %y1 = getelementptr inbounds %struct.Point, %struct.Point* %4, i32 0, i32 1
  %5 = load double, double* %y1, align 8
  %sub = fsub double %3, %5
  %mul = fmul double %1, %sub
  %6 = load %struct.Point*, %struct.Point** %p2.addr, align 4
  %x2 = getelementptr inbounds %struct.Point, %struct.Point* %6, i32 0, i32 0
  %7 = load double, double* %x2, align 8
  %8 = load %struct.Point*, %struct.Point** %p3.addr, align 4
  %y3 = getelementptr inbounds %struct.Point, %struct.Point* %8, i32 0, i32 1
  %9 = load double, double* %y3, align 8
  %10 = load %struct.Point*, %struct.Point** %p1.addr, align 4
  %y4 = getelementptr inbounds %struct.Point, %struct.Point* %10, i32 0, i32 1
  %11 = load double, double* %y4, align 8
  %sub5 = fsub double %9, %11
  %mul6 = fmul double %7, %sub5
  %add = fadd double %mul, %mul6
  %12 = load %struct.Point*, %struct.Point** %p3.addr, align 4
  %x7 = getelementptr inbounds %struct.Point, %struct.Point* %12, i32 0, i32 0
  %13 = load double, double* %x7, align 8
  %14 = load %struct.Point*, %struct.Point** %p1.addr, align 4
  %y8 = getelementptr inbounds %struct.Point, %struct.Point* %14, i32 0, i32 1
  %15 = load double, double* %y8, align 8
  %16 = load %struct.Point*, %struct.Point** %p2.addr, align 4
  %y9 = getelementptr inbounds %struct.Point, %struct.Point* %16, i32 0, i32 1
  %17 = load double, double* %y9, align 8
  %sub10 = fsub double %15, %17
  %mul11 = fmul double %13, %sub10
  %add12 = fadd double %add, %mul11
  ret double %add12
}

; Function Attrs: noinline nounwind optnone
define hidden void @checkTriWinding(%struct.Point* %p1, %struct.Point* %p2, %struct.Point* %p3, i1 zeroext %allowReversed) #0 {
entry:
  %p1.addr = alloca %struct.Point*, align 4
  %p2.addr = alloca %struct.Point*, align 4
  %p3.addr = alloca %struct.Point*, align 4
  %allowReversed.addr = alloca i8, align 1
  %detTri = alloca double, align 8
  %t = alloca double, align 8
  store %struct.Point* %p1, %struct.Point** %p1.addr, align 4
  store %struct.Point* %p2, %struct.Point** %p2.addr, align 4
  store %struct.Point* %p3, %struct.Point** %p3.addr, align 4
  %frombool = zext i1 %allowReversed to i8
  store i8 %frombool, i8* %allowReversed.addr, align 1
  %0 = load %struct.Point*, %struct.Point** %p1.addr, align 4
  %1 = load %struct.Point*, %struct.Point** %p2.addr, align 4
  %2 = load %struct.Point*, %struct.Point** %p3.addr, align 4
  %call = call double @det2D(%struct.Point* %0, %struct.Point* %1, %struct.Point* %2)
  store double %call, double* %detTri, align 8
  %3 = load double, double* %detTri, align 8
  %cmp = fcmp olt double %3, 0.000000e+00
  br i1 %cmp, label %if.then, label %if.end8

if.then:                                          ; preds = %entry
  %4 = load i8, i8* %allowReversed.addr, align 1
  %tobool = trunc i8 %4 to i1
  br i1 %tobool, label %if.then1, label %if.else

if.then1:                                         ; preds = %if.then
  %5 = load %struct.Point*, %struct.Point** %p3.addr, align 4
  %x = getelementptr inbounds %struct.Point, %struct.Point* %5, i32 0, i32 0
  %6 = load double, double* %x, align 8
  store double %6, double* %t, align 8
  %7 = load %struct.Point*, %struct.Point** %p2.addr, align 4
  %x2 = getelementptr inbounds %struct.Point, %struct.Point* %7, i32 0, i32 0
  %8 = load double, double* %x2, align 8
  %9 = load %struct.Point*, %struct.Point** %p3.addr, align 4
  %x3 = getelementptr inbounds %struct.Point, %struct.Point* %9, i32 0, i32 0
  store double %8, double* %x3, align 8
  %10 = load double, double* %t, align 8
  %11 = load %struct.Point*, %struct.Point** %p2.addr, align 4
  %x4 = getelementptr inbounds %struct.Point, %struct.Point* %11, i32 0, i32 0
  store double %10, double* %x4, align 8
  %12 = load %struct.Point*, %struct.Point** %p3.addr, align 4
  %y = getelementptr inbounds %struct.Point, %struct.Point* %12, i32 0, i32 1
  %13 = load double, double* %y, align 8
  store double %13, double* %t, align 8
  %14 = load %struct.Point*, %struct.Point** %p2.addr, align 4
  %y5 = getelementptr inbounds %struct.Point, %struct.Point* %14, i32 0, i32 1
  %15 = load double, double* %y5, align 8
  %16 = load %struct.Point*, %struct.Point** %p3.addr, align 4
  %y6 = getelementptr inbounds %struct.Point, %struct.Point* %16, i32 0, i32 1
  store double %15, double* %y6, align 8
  %17 = load double, double* %t, align 8
  %18 = load %struct.Point*, %struct.Point** %p2.addr, align 4
  %y7 = getelementptr inbounds %struct.Point, %struct.Point* %18, i32 0, i32 1
  store double %17, double* %y7, align 8
  br label %if.end

if.else:                                          ; preds = %if.then
  store i32 1, i32* @errno, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then1
  br label %if.end8

if.end8:                                          ; preds = %if.end, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @boundaryCollideChk(%struct.Point* %p1, %struct.Point* %p2, %struct.Point* %p3, double %eps) #0 {
entry:
  %p1.addr = alloca %struct.Point*, align 4
  %p2.addr = alloca %struct.Point*, align 4
  %p3.addr = alloca %struct.Point*, align 4
  %eps.addr = alloca double, align 8
  store %struct.Point* %p1, %struct.Point** %p1.addr, align 4
  store %struct.Point* %p2, %struct.Point** %p2.addr, align 4
  store %struct.Point* %p3, %struct.Point** %p3.addr, align 4
  store double %eps, double* %eps.addr, align 8
  %0 = load %struct.Point*, %struct.Point** %p1.addr, align 4
  %1 = load %struct.Point*, %struct.Point** %p2.addr, align 4
  %2 = load %struct.Point*, %struct.Point** %p3.addr, align 4
  %call = call double @det2D(%struct.Point* %0, %struct.Point* %1, %struct.Point* %2)
  %3 = load double, double* %eps.addr, align 8
  %cmp = fcmp olt double %call, %3
  ret i1 %cmp
}

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @boundaryDoesntCollideChk(%struct.Point* %p1, %struct.Point* %p2, %struct.Point* %p3, double %eps) #0 {
entry:
  %p1.addr = alloca %struct.Point*, align 4
  %p2.addr = alloca %struct.Point*, align 4
  %p3.addr = alloca %struct.Point*, align 4
  %eps.addr = alloca double, align 8
  store %struct.Point* %p1, %struct.Point** %p1.addr, align 4
  store %struct.Point* %p2, %struct.Point** %p2.addr, align 4
  store %struct.Point* %p3, %struct.Point** %p3.addr, align 4
  store double %eps, double* %eps.addr, align 8
  %0 = load %struct.Point*, %struct.Point** %p1.addr, align 4
  %1 = load %struct.Point*, %struct.Point** %p2.addr, align 4
  %2 = load %struct.Point*, %struct.Point** %p3.addr, align 4
  %call = call double @det2D(%struct.Point* %0, %struct.Point* %1, %struct.Point* %2)
  %3 = load double, double* %eps.addr, align 8
  %cmp = fcmp ole double %call, %3
  ret i1 %cmp
}

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @triTri2D(%struct.Point* %t1, %struct.Point* %t2, double %eps, i1 zeroext %allowReversed, i1 zeroext %onBoundary) #0 {
entry:
  %retval = alloca i1, align 1
  %t1.addr = alloca %struct.Point*, align 4
  %t2.addr = alloca %struct.Point*, align 4
  %eps.addr = alloca double, align 8
  %allowReversed.addr = alloca i8, align 1
  %onBoundary.addr = alloca i8, align 1
  %chkEdge = alloca i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %j32 = alloca i32, align 4
  store %struct.Point* %t1, %struct.Point** %t1.addr, align 4
  store %struct.Point* %t2, %struct.Point** %t2.addr, align 4
  store double %eps, double* %eps.addr, align 8
  %frombool = zext i1 %allowReversed to i8
  store i8 %frombool, i8* %allowReversed.addr, align 1
  %frombool1 = zext i1 %onBoundary to i8
  store i8 %frombool1, i8* %onBoundary.addr, align 1
  %0 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %arrayidx = getelementptr inbounds %struct.Point, %struct.Point* %0, i32 0
  %1 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %arrayidx2 = getelementptr inbounds %struct.Point, %struct.Point* %1, i32 1
  %2 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %arrayidx3 = getelementptr inbounds %struct.Point, %struct.Point* %2, i32 2
  %3 = load i8, i8* %allowReversed.addr, align 1
  %tobool = trunc i8 %3 to i1
  call void @checkTriWinding(%struct.Point* %arrayidx, %struct.Point* %arrayidx2, %struct.Point* %arrayidx3, i1 zeroext %tobool)
  %4 = load i32, i32* @errno, align 4
  %cmp = icmp ne i32 %4, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i1 false, i1* %retval, align 1
  br label %return

if.end:                                           ; preds = %entry
  %5 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %arrayidx4 = getelementptr inbounds %struct.Point, %struct.Point* %5, i32 0
  %6 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %arrayidx5 = getelementptr inbounds %struct.Point, %struct.Point* %6, i32 1
  %7 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %arrayidx6 = getelementptr inbounds %struct.Point, %struct.Point* %7, i32 2
  %8 = load i8, i8* %allowReversed.addr, align 1
  %tobool7 = trunc i8 %8 to i1
  call void @checkTriWinding(%struct.Point* %arrayidx4, %struct.Point* %arrayidx5, %struct.Point* %arrayidx6, i1 zeroext %tobool7)
  %9 = load i32, i32* @errno, align 4
  %cmp8 = icmp ne i32 %9, 0
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end
  store i1 false, i1* %retval, align 1
  br label %return

if.end10:                                         ; preds = %if.end
  %10 = load i8, i8* %onBoundary.addr, align 1
  %tobool11 = trunc i8 %10 to i1
  br i1 %tobool11, label %if.then12, label %if.else

if.then12:                                        ; preds = %if.end10
  store i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)* @boundaryCollideChk, i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)** %chkEdge, align 4
  br label %if.end13

if.else:                                          ; preds = %if.end10
  store i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)* @boundaryDoesntCollideChk, i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)** %chkEdge, align 4
  br label %if.end13

if.end13:                                         ; preds = %if.else, %if.then12
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end13
  %11 = load i32, i32* %i, align 4
  %cmp14 = icmp slt i32 %11, 3
  br i1 %cmp14, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load i32, i32* %i, align 4
  %add = add nsw i32 %12, 1
  %rem = srem i32 %add, 3
  store i32 %rem, i32* %j, align 4
  %13 = load i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)*, i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)** %chkEdge, align 4
  %14 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx15 = getelementptr inbounds %struct.Point, %struct.Point* %14, i32 %15
  %16 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %17 = load i32, i32* %j, align 4
  %arrayidx16 = getelementptr inbounds %struct.Point, %struct.Point* %16, i32 %17
  %18 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %arrayidx17 = getelementptr inbounds %struct.Point, %struct.Point* %18, i32 0
  %19 = load double, double* %eps.addr, align 8
  %call = call zeroext i1 %13(%struct.Point* %arrayidx15, %struct.Point* %arrayidx16, %struct.Point* %arrayidx17, double %19)
  br i1 %call, label %land.lhs.true, label %if.end28

land.lhs.true:                                    ; preds = %for.body
  %20 = load i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)*, i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)** %chkEdge, align 4
  %21 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %22 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds %struct.Point, %struct.Point* %21, i32 %22
  %23 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %24 = load i32, i32* %j, align 4
  %arrayidx19 = getelementptr inbounds %struct.Point, %struct.Point* %23, i32 %24
  %25 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %arrayidx20 = getelementptr inbounds %struct.Point, %struct.Point* %25, i32 1
  %26 = load double, double* %eps.addr, align 8
  %call21 = call zeroext i1 %20(%struct.Point* %arrayidx18, %struct.Point* %arrayidx19, %struct.Point* %arrayidx20, double %26)
  br i1 %call21, label %land.lhs.true22, label %if.end28

land.lhs.true22:                                  ; preds = %land.lhs.true
  %27 = load i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)*, i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)** %chkEdge, align 4
  %28 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %29 = load i32, i32* %i, align 4
  %arrayidx23 = getelementptr inbounds %struct.Point, %struct.Point* %28, i32 %29
  %30 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %31 = load i32, i32* %j, align 4
  %arrayidx24 = getelementptr inbounds %struct.Point, %struct.Point* %30, i32 %31
  %32 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %arrayidx25 = getelementptr inbounds %struct.Point, %struct.Point* %32, i32 2
  %33 = load double, double* %eps.addr, align 8
  %call26 = call zeroext i1 %27(%struct.Point* %arrayidx23, %struct.Point* %arrayidx24, %struct.Point* %arrayidx25, double %33)
  br i1 %call26, label %if.then27, label %if.end28

if.then27:                                        ; preds = %land.lhs.true22
  store i1 false, i1* %retval, align 1
  br label %return

if.end28:                                         ; preds = %land.lhs.true22, %land.lhs.true, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end28
  %34 = load i32, i32* %i, align 4
  %inc = add nsw i32 %34, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond29

for.cond29:                                       ; preds = %for.inc51, %for.end
  %35 = load i32, i32* %i, align 4
  %cmp30 = icmp slt i32 %35, 3
  br i1 %cmp30, label %for.body31, label %for.end53

for.body31:                                       ; preds = %for.cond29
  %36 = load i32, i32* %i, align 4
  %add33 = add nsw i32 %36, 1
  %rem34 = srem i32 %add33, 3
  store i32 %rem34, i32* %j32, align 4
  %37 = load i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)*, i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)** %chkEdge, align 4
  %38 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %39 = load i32, i32* %i, align 4
  %arrayidx35 = getelementptr inbounds %struct.Point, %struct.Point* %38, i32 %39
  %40 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %41 = load i32, i32* %j32, align 4
  %arrayidx36 = getelementptr inbounds %struct.Point, %struct.Point* %40, i32 %41
  %42 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %arrayidx37 = getelementptr inbounds %struct.Point, %struct.Point* %42, i32 0
  %43 = load double, double* %eps.addr, align 8
  %call38 = call zeroext i1 %37(%struct.Point* %arrayidx35, %struct.Point* %arrayidx36, %struct.Point* %arrayidx37, double %43)
  br i1 %call38, label %land.lhs.true39, label %if.end50

land.lhs.true39:                                  ; preds = %for.body31
  %44 = load i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)*, i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)** %chkEdge, align 4
  %45 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %46 = load i32, i32* %i, align 4
  %arrayidx40 = getelementptr inbounds %struct.Point, %struct.Point* %45, i32 %46
  %47 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %48 = load i32, i32* %j32, align 4
  %arrayidx41 = getelementptr inbounds %struct.Point, %struct.Point* %47, i32 %48
  %49 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %arrayidx42 = getelementptr inbounds %struct.Point, %struct.Point* %49, i32 1
  %50 = load double, double* %eps.addr, align 8
  %call43 = call zeroext i1 %44(%struct.Point* %arrayidx40, %struct.Point* %arrayidx41, %struct.Point* %arrayidx42, double %50)
  br i1 %call43, label %land.lhs.true44, label %if.end50

land.lhs.true44:                                  ; preds = %land.lhs.true39
  %51 = load i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)*, i1 (%struct.Point*, %struct.Point*, %struct.Point*, double)** %chkEdge, align 4
  %52 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %53 = load i32, i32* %i, align 4
  %arrayidx45 = getelementptr inbounds %struct.Point, %struct.Point* %52, i32 %53
  %54 = load %struct.Point*, %struct.Point** %t2.addr, align 4
  %55 = load i32, i32* %j32, align 4
  %arrayidx46 = getelementptr inbounds %struct.Point, %struct.Point* %54, i32 %55
  %56 = load %struct.Point*, %struct.Point** %t1.addr, align 4
  %arrayidx47 = getelementptr inbounds %struct.Point, %struct.Point* %56, i32 2
  %57 = load double, double* %eps.addr, align 8
  %call48 = call zeroext i1 %51(%struct.Point* %arrayidx45, %struct.Point* %arrayidx46, %struct.Point* %arrayidx47, double %57)
  br i1 %call48, label %if.then49, label %if.end50

if.then49:                                        ; preds = %land.lhs.true44
  store i1 false, i1* %retval, align 1
  br label %return

if.end50:                                         ; preds = %land.lhs.true44, %land.lhs.true39, %for.body31
  br label %for.inc51

for.inc51:                                        ; preds = %if.end50
  %58 = load i32, i32* %i, align 4
  %inc52 = add nsw i32 %58, 1
  store i32 %inc52, i32* %i, align 4
  br label %for.cond29

for.end53:                                        ; preds = %for.cond29
  store i1 true, i1* %retval, align 1
  br label %return

return:                                           ; preds = %for.end53, %if.then49, %if.then27, %if.then9, %if.then
  %59 = load i1, i1* %retval, align 1
  ret i1 %59
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %t1 = alloca [3 x %struct.Point], align 16
  %t2 = alloca [3 x %struct.Point], align 16
  %t13 = alloca [3 x %struct.Point], align 16
  %t24 = alloca [3 x %struct.Point], align 16
  %t110 = alloca [3 x %struct.Point], align 16
  %t211 = alloca [3 x %struct.Point], align 16
  %t117 = alloca [3 x %struct.Point], align 16
  %t218 = alloca [3 x %struct.Point], align 16
  %t124 = alloca [3 x %struct.Point], align 16
  %t225 = alloca [3 x %struct.Point], align 16
  %t131 = alloca [3 x %struct.Point], align 16
  %t232 = alloca [3 x %struct.Point], align 16
  %t138 = alloca [3 x %struct.Point], align 16
  %t239 = alloca [3 x %struct.Point], align 16
  %t145 = alloca [3 x %struct.Point], align 16
  %t246 = alloca [3 x %struct.Point], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [3 x %struct.Point]* %t1 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 48, i1 false)
  %1 = bitcast i8* %0 to [3 x %struct.Point]*
  %2 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %1, i32 0, i32 1
  %3 = getelementptr inbounds %struct.Point, %struct.Point* %2, i32 0, i32 0
  store double 5.000000e+00, double* %3, align 16
  %4 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %1, i32 0, i32 2
  %5 = getelementptr inbounds %struct.Point, %struct.Point* %4, i32 0, i32 1
  store double 5.000000e+00, double* %5, align 8
  %6 = bitcast [3 x %struct.Point]* %t2 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %6, i8 0, i32 48, i1 false)
  %7 = bitcast i8* %6 to [3 x %struct.Point]*
  %8 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.Point, %struct.Point* %8, i32 0, i32 0
  store double 5.000000e+00, double* %9, align 16
  %10 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %7, i32 0, i32 2
  %11 = getelementptr inbounds %struct.Point, %struct.Point* %10, i32 0, i32 1
  store double 6.000000e+00, double* %11, align 8
  %arraydecay = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t1, i32 0, i32 0
  %arraydecay1 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t2, i32 0, i32 0
  %call = call zeroext i1 @triTri2D(%struct.Point* %arraydecay, %struct.Point* %arraydecay1, double 0.000000e+00, i1 zeroext false, i1 zeroext true)
  %conv = zext i1 %call to i32
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i32 %conv)
  %12 = bitcast [3 x %struct.Point]* %t13 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %12, i8 0, i32 48, i1 false)
  %13 = bitcast i8* %12 to [3 x %struct.Point]*
  %14 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %13, i32 0, i32 1
  %15 = getelementptr inbounds %struct.Point, %struct.Point* %14, i32 0, i32 1
  store double 5.000000e+00, double* %15, align 8
  %16 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %13, i32 0, i32 2
  %17 = getelementptr inbounds %struct.Point, %struct.Point* %16, i32 0, i32 0
  store double 5.000000e+00, double* %17, align 16
  %18 = bitcast [3 x %struct.Point]* %t24 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %18, i8 0, i32 48, i1 false)
  %19 = bitcast i8* %18 to [3 x %struct.Point]*
  %20 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %19, i32 0, i32 1
  %21 = getelementptr inbounds %struct.Point, %struct.Point* %20, i32 0, i32 1
  store double 5.000000e+00, double* %21, align 8
  %22 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %19, i32 0, i32 2
  %23 = getelementptr inbounds %struct.Point, %struct.Point* %22, i32 0, i32 0
  store double 5.000000e+00, double* %23, align 16
  %arraydecay5 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t13, i32 0, i32 0
  %arraydecay6 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t24, i32 0, i32 0
  %call7 = call zeroext i1 @triTri2D(%struct.Point* %arraydecay5, %struct.Point* %arraydecay6, double 0.000000e+00, i1 zeroext true, i1 zeroext true)
  %conv8 = zext i1 %call7 to i32
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i32 %conv8)
  %24 = bitcast [3 x %struct.Point]* %t110 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %24, i8 0, i32 48, i1 false)
  %25 = bitcast i8* %24 to [3 x %struct.Point]*
  %26 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %25, i32 0, i32 1
  %27 = getelementptr inbounds %struct.Point, %struct.Point* %26, i32 0, i32 0
  store double 5.000000e+00, double* %27, align 16
  %28 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %25, i32 0, i32 2
  %29 = getelementptr inbounds %struct.Point, %struct.Point* %28, i32 0, i32 1
  store double 5.000000e+00, double* %29, align 8
  %30 = bitcast [3 x %struct.Point]* %t211 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %30, i8 0, i32 48, i1 false)
  %31 = bitcast i8* %30 to [3 x %struct.Point]*
  %32 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %31, i32 0, i32 0
  %33 = getelementptr inbounds %struct.Point, %struct.Point* %32, i32 0, i32 0
  store double -1.000000e+01, double* %33, align 16
  %34 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %31, i32 0, i32 1
  %35 = getelementptr inbounds %struct.Point, %struct.Point* %34, i32 0, i32 0
  store double -5.000000e+00, double* %35, align 16
  %36 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %31, i32 0, i32 2
  %37 = getelementptr inbounds %struct.Point, %struct.Point* %36, i32 0, i32 0
  store double -1.000000e+00, double* %37, align 16
  %38 = getelementptr inbounds %struct.Point, %struct.Point* %36, i32 0, i32 1
  store double 6.000000e+00, double* %38, align 8
  %arraydecay12 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t110, i32 0, i32 0
  %arraydecay13 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t211, i32 0, i32 0
  %call14 = call zeroext i1 @triTri2D(%struct.Point* %arraydecay12, %struct.Point* %arraydecay13, double 0.000000e+00, i1 zeroext false, i1 zeroext true)
  %conv15 = zext i1 %call14 to i32
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i32 %conv15)
  %39 = bitcast [3 x %struct.Point]* %t117 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %39, i8 0, i32 48, i1 false)
  %40 = bitcast i8* %39 to [3 x %struct.Point]*
  %41 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %40, i32 0, i32 1
  %42 = getelementptr inbounds %struct.Point, %struct.Point* %41, i32 0, i32 0
  store double 5.000000e+00, double* %42, align 16
  %43 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %40, i32 0, i32 2
  %44 = getelementptr inbounds %struct.Point, %struct.Point* %43, i32 0, i32 0
  store double 2.500000e+00, double* %44, align 16
  %45 = getelementptr inbounds %struct.Point, %struct.Point* %43, i32 0, i32 1
  store double 5.000000e+00, double* %45, align 8
  %46 = bitcast [3 x %struct.Point]* %t218 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %46, i8 0, i32 48, i1 false)
  %47 = bitcast i8* %46 to [3 x %struct.Point]*
  %48 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %47, i32 0, i32 0
  %49 = getelementptr inbounds %struct.Point, %struct.Point* %48, i32 0, i32 1
  store double 4.000000e+00, double* %49, align 8
  %50 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %47, i32 0, i32 1
  %51 = getelementptr inbounds %struct.Point, %struct.Point* %50, i32 0, i32 0
  store double 2.500000e+00, double* %51, align 16
  %52 = getelementptr inbounds %struct.Point, %struct.Point* %50, i32 0, i32 1
  store double -1.000000e+00, double* %52, align 8
  %53 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %47, i32 0, i32 2
  %54 = getelementptr inbounds %struct.Point, %struct.Point* %53, i32 0, i32 0
  store double 5.000000e+00, double* %54, align 16
  %55 = getelementptr inbounds %struct.Point, %struct.Point* %53, i32 0, i32 1
  store double 4.000000e+00, double* %55, align 8
  %arraydecay19 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t117, i32 0, i32 0
  %arraydecay20 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t218, i32 0, i32 0
  %call21 = call zeroext i1 @triTri2D(%struct.Point* %arraydecay19, %struct.Point* %arraydecay20, double 0.000000e+00, i1 zeroext false, i1 zeroext true)
  %conv22 = zext i1 %call21 to i32
  %call23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i32 %conv22)
  %56 = bitcast [3 x %struct.Point]* %t124 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %56, i8 0, i32 48, i1 false)
  %57 = bitcast i8* %56 to [3 x %struct.Point]*
  %58 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %57, i32 0, i32 1
  %59 = getelementptr inbounds %struct.Point, %struct.Point* %58, i32 0, i32 0
  store double 1.000000e+00, double* %59, align 16
  %60 = getelementptr inbounds %struct.Point, %struct.Point* %58, i32 0, i32 1
  store double 1.000000e+00, double* %60, align 8
  %61 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %57, i32 0, i32 2
  %62 = getelementptr inbounds %struct.Point, %struct.Point* %61, i32 0, i32 1
  store double 2.000000e+00, double* %62, align 8
  %63 = bitcast [3 x %struct.Point]* %t225 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %63, i8 0, i32 48, i1 false)
  %64 = bitcast i8* %63 to [3 x %struct.Point]*
  %65 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %64, i32 0, i32 0
  %66 = getelementptr inbounds %struct.Point, %struct.Point* %65, i32 0, i32 0
  store double 2.000000e+00, double* %66, align 16
  %67 = getelementptr inbounds %struct.Point, %struct.Point* %65, i32 0, i32 1
  store double 1.000000e+00, double* %67, align 8
  %68 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %64, i32 0, i32 1
  %69 = getelementptr inbounds %struct.Point, %struct.Point* %68, i32 0, i32 0
  store double 3.000000e+00, double* %69, align 16
  %70 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %64, i32 0, i32 2
  %71 = getelementptr inbounds %struct.Point, %struct.Point* %70, i32 0, i32 0
  store double 3.000000e+00, double* %71, align 16
  %72 = getelementptr inbounds %struct.Point, %struct.Point* %70, i32 0, i32 1
  store double 2.000000e+00, double* %72, align 8
  %arraydecay26 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t124, i32 0, i32 0
  %arraydecay27 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t225, i32 0, i32 0
  %call28 = call zeroext i1 @triTri2D(%struct.Point* %arraydecay26, %struct.Point* %arraydecay27, double 0.000000e+00, i1 zeroext false, i1 zeroext true)
  %conv29 = zext i1 %call28 to i32
  %call30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i32 %conv29)
  %73 = bitcast [3 x %struct.Point]* %t131 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %73, i8 0, i32 48, i1 false)
  %74 = bitcast i8* %73 to [3 x %struct.Point]*
  %75 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %74, i32 0, i32 1
  %76 = getelementptr inbounds %struct.Point, %struct.Point* %75, i32 0, i32 0
  store double 1.000000e+00, double* %76, align 16
  %77 = getelementptr inbounds %struct.Point, %struct.Point* %75, i32 0, i32 1
  store double 1.000000e+00, double* %77, align 8
  %78 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %74, i32 0, i32 2
  %79 = getelementptr inbounds %struct.Point, %struct.Point* %78, i32 0, i32 1
  store double 2.000000e+00, double* %79, align 8
  %80 = bitcast [3 x %struct.Point]* %t232 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %80, i8 0, i32 48, i1 false)
  %81 = bitcast i8* %80 to [3 x %struct.Point]*
  %82 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %81, i32 0, i32 0
  %83 = getelementptr inbounds %struct.Point, %struct.Point* %82, i32 0, i32 0
  store double 2.000000e+00, double* %83, align 16
  %84 = getelementptr inbounds %struct.Point, %struct.Point* %82, i32 0, i32 1
  store double 1.000000e+00, double* %84, align 8
  %85 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %81, i32 0, i32 1
  %86 = getelementptr inbounds %struct.Point, %struct.Point* %85, i32 0, i32 0
  store double 3.000000e+00, double* %86, align 16
  %87 = getelementptr inbounds %struct.Point, %struct.Point* %85, i32 0, i32 1
  store double -2.000000e+00, double* %87, align 8
  %88 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %81, i32 0, i32 2
  %89 = getelementptr inbounds %struct.Point, %struct.Point* %88, i32 0, i32 0
  store double 3.000000e+00, double* %89, align 16
  %90 = getelementptr inbounds %struct.Point, %struct.Point* %88, i32 0, i32 1
  store double 4.000000e+00, double* %90, align 8
  %arraydecay33 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t131, i32 0, i32 0
  %arraydecay34 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t232, i32 0, i32 0
  %call35 = call zeroext i1 @triTri2D(%struct.Point* %arraydecay33, %struct.Point* %arraydecay34, double 0.000000e+00, i1 zeroext false, i1 zeroext true)
  %conv36 = zext i1 %call35 to i32
  %call37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i32 %conv36)
  %91 = bitcast [3 x %struct.Point]* %t138 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %91, i8 0, i32 48, i1 false)
  %92 = bitcast i8* %91 to [3 x %struct.Point]*
  %93 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %92, i32 0, i32 1
  %94 = getelementptr inbounds %struct.Point, %struct.Point* %93, i32 0, i32 0
  store double 1.000000e+00, double* %94, align 16
  %95 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %92, i32 0, i32 2
  %96 = getelementptr inbounds %struct.Point, %struct.Point* %95, i32 0, i32 1
  store double 1.000000e+00, double* %96, align 8
  %97 = bitcast [3 x %struct.Point]* %t239 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %97, i8 0, i32 48, i1 false)
  %98 = bitcast i8* %97 to [3 x %struct.Point]*
  %99 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %98, i32 0, i32 0
  %100 = getelementptr inbounds %struct.Point, %struct.Point* %99, i32 0, i32 0
  store double 1.000000e+00, double* %100, align 16
  %101 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %98, i32 0, i32 1
  %102 = getelementptr inbounds %struct.Point, %struct.Point* %101, i32 0, i32 0
  store double 2.000000e+00, double* %102, align 16
  %103 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %98, i32 0, i32 2
  %104 = getelementptr inbounds %struct.Point, %struct.Point* %103, i32 0, i32 0
  store double 1.000000e+00, double* %104, align 16
  %105 = getelementptr inbounds %struct.Point, %struct.Point* %103, i32 0, i32 1
  store double 1.000000e+00, double* %105, align 8
  %arraydecay40 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t138, i32 0, i32 0
  %arraydecay41 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t239, i32 0, i32 0
  %call42 = call zeroext i1 @triTri2D(%struct.Point* %arraydecay40, %struct.Point* %arraydecay41, double 0.000000e+00, i1 zeroext false, i1 zeroext true)
  %conv43 = zext i1 %call42 to i32
  %call44 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i32 %conv43)
  %106 = bitcast [3 x %struct.Point]* %t145 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %106, i8 0, i32 48, i1 false)
  %107 = bitcast i8* %106 to [3 x %struct.Point]*
  %108 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %107, i32 0, i32 1
  %109 = getelementptr inbounds %struct.Point, %struct.Point* %108, i32 0, i32 0
  store double 1.000000e+00, double* %109, align 16
  %110 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %107, i32 0, i32 2
  %111 = getelementptr inbounds %struct.Point, %struct.Point* %110, i32 0, i32 1
  store double 1.000000e+00, double* %111, align 8
  %112 = bitcast [3 x %struct.Point]* %t246 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %112, i8 0, i32 48, i1 false)
  %113 = bitcast i8* %112 to [3 x %struct.Point]*
  %114 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %113, i32 0, i32 0
  %115 = getelementptr inbounds %struct.Point, %struct.Point* %114, i32 0, i32 0
  store double 1.000000e+00, double* %115, align 16
  %116 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %113, i32 0, i32 1
  %117 = getelementptr inbounds %struct.Point, %struct.Point* %116, i32 0, i32 0
  store double 2.000000e+00, double* %117, align 16
  %118 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %113, i32 0, i32 2
  %119 = getelementptr inbounds %struct.Point, %struct.Point* %118, i32 0, i32 0
  store double 1.000000e+00, double* %119, align 16
  %120 = getelementptr inbounds %struct.Point, %struct.Point* %118, i32 0, i32 1
  store double 1.000000e+00, double* %120, align 8
  %arraydecay47 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t145, i32 0, i32 0
  %arraydecay48 = getelementptr inbounds [3 x %struct.Point], [3 x %struct.Point]* %t246, i32 0, i32 0
  %call49 = call zeroext i1 @triTri2D(%struct.Point* %arraydecay47, %struct.Point* %arraydecay48, double 0.000000e+00, i1 zeroext false, i1 zeroext false)
  %conv50 = zext i1 %call49 to i32
  %call51 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i32 %conv50)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call zeroext i1 @triTri2D(%struct.Point* %arraydecay, %struct.Point* %arraydecay1, double 0.000000e+00, i1 zeroext false, i1 zeroext true)
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = zext i1 %call to i32
; Looking for a replacement for:
%0:i1 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %call7 = call zeroext i1 @triTri2D(%struct.Point* %arraydecay5, %struct.Point* %arraydecay6, double 0.000000e+00, i1 zeroext true, i1 zeroext true)
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %conv8 = zext i1 %call7 to i32
; Looking for a replacement for:
%0:i1 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %call14 = call zeroext i1 @triTri2D(%struct.Point* %arraydecay12, %struct.Point* %arraydecay13, double 0.000000e+00, i1 zeroext false, i1 zeroext true)
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %conv15 = zext i1 %call14 to i32
; Looking for a replacement for:
%0:i1 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %call21 = call zeroext i1 @triTri2D(%struct.Point* %arraydecay19, %struct.Point* %arraydecay20, double 0.000000e+00, i1 zeroext false, i1 zeroext true)
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %conv22 = zext i1 %call21 to i32
; Looking for a replacement for:
%0:i1 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %call28 = call zeroext i1 @triTri2D(%struct.Point* %arraydecay26, %struct.Point* %arraydecay27, double 0.000000e+00, i1 zeroext false, i1 zeroext true)
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %conv29 = zext i1 %call28 to i32
; Looking for a replacement for:
%0:i1 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %call35 = call zeroext i1 @triTri2D(%struct.Point* %arraydecay33, %struct.Point* %arraydecay34, double 0.000000e+00, i1 zeroext false, i1 zeroext true)
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %conv36 = zext i1 %call35 to i32
; Looking for a replacement for:
%0:i1 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %call42 = call zeroext i1 @triTri2D(%struct.Point* %arraydecay40, %struct.Point* %arraydecay41, double 0.000000e+00, i1 zeroext false, i1 zeroext true)
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %conv43 = zext i1 %call42 to i32
; Looking for a replacement for:
%0:i1 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %call49 = call zeroext i1 @triTri2D(%struct.Point* %arraydecay47, %struct.Point* %arraydecay48, double 0.000000e+00, i1 zeroext false, i1 zeroext false)
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %conv50 = zext i1 %call49 to i32
; Looking for a replacement for:
%0:i1 = var
%1:i32 = zext %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i1 = var
%1:i32 = zext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
