
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for oddMagicSquare()

; ModuleID = './Magic_squares_of_singly_even_order.c.bc'
source_filename = "./Magic_squares_of_singly_even_order.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@__const.singlyEvenMagicSquare.gridFactors = private unnamed_addr constant [4 x i32] [i32 0, i32 2, i32 3, i32 1], align 16
@.str = private unnamed_addr constant [6 x i8] c"%*s%d\00", align 1
@.str.1 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.3 = private unnamed_addr constant [21 x i8] c"\0AMagic constant: %d \00", align 1
@.str.4 = private unnamed_addr constant [53 x i8] c"Usage : %s <integer specifying rows in magic square>\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden i32** @oddMagicSquare(i32 %n) #0 {
entry:
  %retval = alloca i32**, align 4
  %n.addr = alloca i32, align 4
  %value = alloca i32, align 4
  %squareSize = alloca i32, align 4
  %c = alloca i32, align 4
  %r = alloca i32, align 4
  %i = alloca i32, align 4
  %result = alloca i32**, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, 3
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4
  %rem = srem i32 %1, 2
  %cmp1 = icmp eq i32 %rem, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32** null, i32*** %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  store i32 0, i32* %value, align 4
  %2 = load i32, i32* %n.addr, align 4
  %3 = load i32, i32* %n.addr, align 4
  %mul = mul nsw i32 %2, %3
  store i32 %mul, i32* %squareSize, align 4
  %4 = load i32, i32* %n.addr, align 4
  %div = sdiv i32 %4, 2
  store i32 %div, i32* %c, align 4
  store i32 0, i32* %r, align 4
  %5 = load i32, i32* %n.addr, align 4
  %mul2 = mul i32 %5, 4
  %call = call noalias i8* @malloc(i32 %mul2)
  %6 = bitcast i8* %call to i32**
  store i32** %6, i32*** %result, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %n.addr, align 4
  %cmp3 = icmp slt i32 %7, %8
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i32, i32* %n.addr, align 4
  %mul4 = mul i32 %9, 4
  %call5 = call noalias i8* @malloc(i32 %mul4)
  %10 = bitcast i8* %call5 to i32*
  %11 = load i32**, i32*** %result, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %11, i32 %12
  store i32* %10, i32** %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %13 = load i32, i32* %i, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %if.end34, %for.end
  %14 = load i32, i32* %value, align 4
  %inc6 = add nsw i32 %14, 1
  store i32 %inc6, i32* %value, align 4
  %15 = load i32, i32* %squareSize, align 4
  %cmp7 = icmp sle i32 %inc6, %15
  br i1 %cmp7, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %16 = load i32, i32* %value, align 4
  %17 = load i32**, i32*** %result, align 4
  %18 = load i32, i32* %r, align 4
  %arrayidx8 = getelementptr inbounds i32*, i32** %17, i32 %18
  %19 = load i32*, i32** %arrayidx8, align 4
  %20 = load i32, i32* %c, align 4
  %arrayidx9 = getelementptr inbounds i32, i32* %19, i32 %20
  store i32 %16, i32* %arrayidx9, align 4
  %21 = load i32, i32* %r, align 4
  %cmp10 = icmp eq i32 %21, 0
  br i1 %cmp10, label %if.then11, label %if.else18

if.then11:                                        ; preds = %while.body
  %22 = load i32, i32* %c, align 4
  %23 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %23, 1
  %cmp12 = icmp eq i32 %22, %sub
  br i1 %cmp12, label %if.then13, label %if.else

if.then13:                                        ; preds = %if.then11
  %24 = load i32, i32* %r, align 4
  %inc14 = add nsw i32 %24, 1
  store i32 %inc14, i32* %r, align 4
  br label %if.end17

if.else:                                          ; preds = %if.then11
  %25 = load i32, i32* %n.addr, align 4
  %sub15 = sub nsw i32 %25, 1
  store i32 %sub15, i32* %r, align 4
  %26 = load i32, i32* %c, align 4
  %inc16 = add nsw i32 %26, 1
  store i32 %inc16, i32* %c, align 4
  br label %if.end17

if.end17:                                         ; preds = %if.else, %if.then13
  br label %if.end34

if.else18:                                        ; preds = %while.body
  %27 = load i32, i32* %c, align 4
  %28 = load i32, i32* %n.addr, align 4
  %sub19 = sub nsw i32 %28, 1
  %cmp20 = icmp eq i32 %27, %sub19
  br i1 %cmp20, label %if.then21, label %if.else22

if.then21:                                        ; preds = %if.else18
  %29 = load i32, i32* %r, align 4
  %dec = add nsw i32 %29, -1
  store i32 %dec, i32* %r, align 4
  store i32 0, i32* %c, align 4
  br label %if.end33

if.else22:                                        ; preds = %if.else18
  %30 = load i32**, i32*** %result, align 4
  %31 = load i32, i32* %r, align 4
  %sub23 = sub nsw i32 %31, 1
  %arrayidx24 = getelementptr inbounds i32*, i32** %30, i32 %sub23
  %32 = load i32*, i32** %arrayidx24, align 4
  %33 = load i32, i32* %c, align 4
  %add = add nsw i32 %33, 1
  %arrayidx25 = getelementptr inbounds i32, i32* %32, i32 %add
  %34 = load i32, i32* %arrayidx25, align 4
  %cmp26 = icmp eq i32 %34, 0
  br i1 %cmp26, label %if.then27, label %if.else30

if.then27:                                        ; preds = %if.else22
  %35 = load i32, i32* %r, align 4
  %dec28 = add nsw i32 %35, -1
  store i32 %dec28, i32* %r, align 4
  %36 = load i32, i32* %c, align 4
  %inc29 = add nsw i32 %36, 1
  store i32 %inc29, i32* %c, align 4
  br label %if.end32

if.else30:                                        ; preds = %if.else22
  %37 = load i32, i32* %r, align 4
  %inc31 = add nsw i32 %37, 1
  store i32 %inc31, i32* %r, align 4
  br label %if.end32

if.end32:                                         ; preds = %if.else30, %if.then27
  br label %if.end33

if.end33:                                         ; preds = %if.end32, %if.then21
  br label %if.end34

if.end34:                                         ; preds = %if.end33, %if.end17
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %38 = load i32**, i32*** %result, align 4
  store i32** %38, i32*** %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then
  %39 = load i32**, i32*** %retval, align 4
  ret i32** %39
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32** @singlyEvenMagicSquare(i32 %n) #0 {
entry:
  %retval = alloca i32**, align 4
  %n.addr = alloca i32, align 4
  %size = alloca i32, align 4
  %halfN = alloca i32, align 4
  %subGridSize = alloca i32, align 4
  %i = alloca i32, align 4
  %subGrid = alloca i32**, align 4
  %gridFactors = alloca [4 x i32], align 16
  %result = alloca i32**, align 4
  %r = alloca i32, align 4
  %c = alloca i32, align 4
  %grid = alloca i32, align 4
  %nColsLeft = alloca i32, align 4
  %nColsRight = alloca i32, align 4
  %r36 = alloca i32, align 4
  %c40 = alloca i32, align 4
  %tmp = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, 6
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %1, 2
  %rem = srem i32 %sub, 4
  %cmp1 = icmp ne i32 %rem, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32** null, i32*** %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %2 = load i32, i32* %n.addr, align 4
  %3 = load i32, i32* %n.addr, align 4
  %mul = mul nsw i32 %2, %3
  store i32 %mul, i32* %size, align 4
  %4 = load i32, i32* %n.addr, align 4
  %div = sdiv i32 %4, 2
  store i32 %div, i32* %halfN, align 4
  %5 = load i32, i32* %size, align 4
  %div2 = sdiv i32 %5, 4
  store i32 %div2, i32* %subGridSize, align 4
  %6 = load i32, i32* %halfN, align 4
  %call = call i32** @oddMagicSquare(i32 %6)
  store i32** %call, i32*** %subGrid, align 4
  %7 = bitcast [4 x i32]* %gridFactors to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %7, i8* align 16 bitcast ([4 x i32]* @__const.singlyEvenMagicSquare.gridFactors to i8*), i32 16, i1 false)
  %8 = load i32, i32* %n.addr, align 4
  %mul3 = mul i32 %8, 4
  %call4 = call noalias i8* @malloc(i32 %mul3)
  %9 = bitcast i8* %call4 to i32**
  store i32** %9, i32*** %result, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %n.addr, align 4
  %cmp5 = icmp slt i32 %10, %11
  br i1 %cmp5, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load i32, i32* %n.addr, align 4
  %mul6 = mul i32 %12, 4
  %call7 = call noalias i8* @malloc(i32 %mul6)
  %13 = bitcast i8* %call7 to i32*
  %14 = load i32**, i32*** %result, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %14, i32 %15
  store i32* %13, i32** %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %r, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc31, %for.end
  %17 = load i32, i32* %r, align 4
  %18 = load i32, i32* %n.addr, align 4
  %cmp9 = icmp slt i32 %17, %18
  br i1 %cmp9, label %for.body10, label %for.end33

for.body10:                                       ; preds = %for.cond8
  store i32 0, i32* %c, align 4
  br label %for.cond11

for.cond11:                                       ; preds = %for.inc28, %for.body10
  %19 = load i32, i32* %c, align 4
  %20 = load i32, i32* %n.addr, align 4
  %cmp12 = icmp slt i32 %19, %20
  br i1 %cmp12, label %for.body13, label %for.end30

for.body13:                                       ; preds = %for.cond11
  %21 = load i32, i32* %r, align 4
  %22 = load i32, i32* %halfN, align 4
  %div14 = sdiv i32 %21, %22
  %mul15 = mul nsw i32 %div14, 2
  %23 = load i32, i32* %c, align 4
  %24 = load i32, i32* %halfN, align 4
  %div16 = sdiv i32 %23, %24
  %add = add nsw i32 %mul15, %div16
  store i32 %add, i32* %grid, align 4
  %25 = load i32**, i32*** %subGrid, align 4
  %26 = load i32, i32* %r, align 4
  %27 = load i32, i32* %halfN, align 4
  %rem17 = srem i32 %26, %27
  %arrayidx18 = getelementptr inbounds i32*, i32** %25, i32 %rem17
  %28 = load i32*, i32** %arrayidx18, align 4
  %29 = load i32, i32* %c, align 4
  %30 = load i32, i32* %halfN, align 4
  %rem19 = srem i32 %29, %30
  %arrayidx20 = getelementptr inbounds i32, i32* %28, i32 %rem19
  %31 = load i32, i32* %arrayidx20, align 4
  %32 = load i32**, i32*** %result, align 4
  %33 = load i32, i32* %r, align 4
  %arrayidx21 = getelementptr inbounds i32*, i32** %32, i32 %33
  %34 = load i32*, i32** %arrayidx21, align 4
  %35 = load i32, i32* %c, align 4
  %arrayidx22 = getelementptr inbounds i32, i32* %34, i32 %35
  store i32 %31, i32* %arrayidx22, align 4
  %36 = load i32, i32* %grid, align 4
  %arrayidx23 = getelementptr inbounds [4 x i32], [4 x i32]* %gridFactors, i32 0, i32 %36
  %37 = load i32, i32* %arrayidx23, align 4
  %38 = load i32, i32* %subGridSize, align 4
  %mul24 = mul nsw i32 %37, %38
  %39 = load i32**, i32*** %result, align 4
  %40 = load i32, i32* %r, align 4
  %arrayidx25 = getelementptr inbounds i32*, i32** %39, i32 %40
  %41 = load i32*, i32** %arrayidx25, align 4
  %42 = load i32, i32* %c, align 4
  %arrayidx26 = getelementptr inbounds i32, i32* %41, i32 %42
  %43 = load i32, i32* %arrayidx26, align 4
  %add27 = add nsw i32 %43, %mul24
  store i32 %add27, i32* %arrayidx26, align 4
  br label %for.inc28

for.inc28:                                        ; preds = %for.body13
  %44 = load i32, i32* %c, align 4
  %inc29 = add nsw i32 %44, 1
  store i32 %inc29, i32* %c, align 4
  br label %for.cond11

for.end30:                                        ; preds = %for.cond11
  br label %for.inc31

for.inc31:                                        ; preds = %for.end30
  %45 = load i32, i32* %r, align 4
  %inc32 = add nsw i32 %45, 1
  store i32 %inc32, i32* %r, align 4
  br label %for.cond8

for.end33:                                        ; preds = %for.cond8
  %46 = load i32, i32* %halfN, align 4
  %div34 = sdiv i32 %46, 2
  store i32 %div34, i32* %nColsLeft, align 4
  %47 = load i32, i32* %nColsLeft, align 4
  %sub35 = sub nsw i32 %47, 1
  store i32 %sub35, i32* %nColsRight, align 4
  store i32 0, i32* %r36, align 4
  br label %for.cond37

for.cond37:                                       ; preds = %for.inc71, %for.end33
  %48 = load i32, i32* %r36, align 4
  %49 = load i32, i32* %halfN, align 4
  %cmp38 = icmp slt i32 %48, %49
  br i1 %cmp38, label %for.body39, label %for.end73

for.body39:                                       ; preds = %for.cond37
  store i32 0, i32* %c40, align 4
  br label %for.cond41

for.cond41:                                       ; preds = %for.inc68, %for.body39
  %50 = load i32, i32* %c40, align 4
  %51 = load i32, i32* %n.addr, align 4
  %cmp42 = icmp slt i32 %50, %51
  br i1 %cmp42, label %for.body43, label %for.end70

for.body43:                                       ; preds = %for.cond41
  %52 = load i32, i32* %c40, align 4
  %53 = load i32, i32* %nColsLeft, align 4
  %cmp44 = icmp slt i32 %52, %53
  br i1 %cmp44, label %if.then51, label %lor.lhs.false45

lor.lhs.false45:                                  ; preds = %for.body43
  %54 = load i32, i32* %c40, align 4
  %55 = load i32, i32* %n.addr, align 4
  %56 = load i32, i32* %nColsRight, align 4
  %sub46 = sub nsw i32 %55, %56
  %cmp47 = icmp sge i32 %54, %sub46
  br i1 %cmp47, label %if.then51, label %lor.lhs.false48

lor.lhs.false48:                                  ; preds = %lor.lhs.false45
  %57 = load i32, i32* %c40, align 4
  %58 = load i32, i32* %nColsLeft, align 4
  %cmp49 = icmp eq i32 %57, %58
  br i1 %cmp49, label %land.lhs.true, label %if.end67

land.lhs.true:                                    ; preds = %lor.lhs.false48
  %59 = load i32, i32* %r36, align 4
  %60 = load i32, i32* %nColsLeft, align 4
  %cmp50 = icmp eq i32 %59, %60
  br i1 %cmp50, label %if.then51, label %if.end67

if.then51:                                        ; preds = %land.lhs.true, %lor.lhs.false45, %for.body43
  %61 = load i32, i32* %c40, align 4
  %cmp52 = icmp eq i32 %61, 0
  br i1 %cmp52, label %land.lhs.true53, label %if.end56

land.lhs.true53:                                  ; preds = %if.then51
  %62 = load i32, i32* %r36, align 4
  %63 = load i32, i32* %nColsLeft, align 4
  %cmp54 = icmp eq i32 %62, %63
  br i1 %cmp54, label %if.then55, label %if.end56

if.then55:                                        ; preds = %land.lhs.true53
  br label %for.inc68

if.end56:                                         ; preds = %land.lhs.true53, %if.then51
  %64 = load i32**, i32*** %result, align 4
  %65 = load i32, i32* %r36, align 4
  %arrayidx57 = getelementptr inbounds i32*, i32** %64, i32 %65
  %66 = load i32*, i32** %arrayidx57, align 4
  %67 = load i32, i32* %c40, align 4
  %arrayidx58 = getelementptr inbounds i32, i32* %66, i32 %67
  %68 = load i32, i32* %arrayidx58, align 4
  store i32 %68, i32* %tmp, align 4
  %69 = load i32**, i32*** %result, align 4
  %70 = load i32, i32* %r36, align 4
  %71 = load i32, i32* %halfN, align 4
  %add59 = add nsw i32 %70, %71
  %arrayidx60 = getelementptr inbounds i32*, i32** %69, i32 %add59
  %72 = load i32*, i32** %arrayidx60, align 4
  %73 = load i32, i32* %c40, align 4
  %arrayidx61 = getelementptr inbounds i32, i32* %72, i32 %73
  %74 = load i32, i32* %arrayidx61, align 4
  %75 = load i32**, i32*** %result, align 4
  %76 = load i32, i32* %r36, align 4
  %arrayidx62 = getelementptr inbounds i32*, i32** %75, i32 %76
  %77 = load i32*, i32** %arrayidx62, align 4
  %78 = load i32, i32* %c40, align 4
  %arrayidx63 = getelementptr inbounds i32, i32* %77, i32 %78
  store i32 %74, i32* %arrayidx63, align 4
  %79 = load i32, i32* %tmp, align 4
  %80 = load i32**, i32*** %result, align 4
  %81 = load i32, i32* %r36, align 4
  %82 = load i32, i32* %halfN, align 4
  %add64 = add nsw i32 %81, %82
  %arrayidx65 = getelementptr inbounds i32*, i32** %80, i32 %add64
  %83 = load i32*, i32** %arrayidx65, align 4
  %84 = load i32, i32* %c40, align 4
  %arrayidx66 = getelementptr inbounds i32, i32* %83, i32 %84
  store i32 %79, i32* %arrayidx66, align 4
  br label %if.end67

if.end67:                                         ; preds = %if.end56, %land.lhs.true, %lor.lhs.false48
  br label %for.inc68

for.inc68:                                        ; preds = %if.end67, %if.then55
  %85 = load i32, i32* %c40, align 4
  %inc69 = add nsw i32 %85, 1
  store i32 %inc69, i32* %c40, align 4
  br label %for.cond41

for.end70:                                        ; preds = %for.cond41
  br label %for.inc71

for.inc71:                                        ; preds = %for.end70
  %86 = load i32, i32* %r36, align 4
  %inc72 = add nsw i32 %86, 1
  store i32 %inc72, i32* %r36, align 4
  br label %for.cond37

for.end73:                                        ; preds = %for.cond37
  %87 = load i32**, i32*** %result, align 4
  store i32** %87, i32*** %retval, align 4
  br label %return

return:                                           ; preds = %for.end73, %if.then
  %88 = load i32**, i32*** %retval, align 4
  ret i32** %88
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @numDigits(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %count = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 1, i32* %count, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp sge i32 %0, 10
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i32, i32* %n.addr, align 4
  %div = sdiv i32 %1, 10
  store i32 %div, i32* %n.addr, align 4
  %2 = load i32, i32* %count, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %count, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %3 = load i32, i32* %count, align 4
  ret i32 %3
}

; Function Attrs: noinline nounwind optnone
define hidden void @printMagicSquare(i32** %square, i32 %rows) #0 {
entry:
  %square.addr = alloca i32**, align 4
  %rows.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32** %square, i32*** %square.addr, align 4
  store i32 %rows, i32* %rows.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc9, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %rows.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end11

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %rows.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %rows.addr, align 4
  %5 = load i32**, i32*** %square.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %5, i32 %6
  %7 = load i32*, i32** %arrayidx, align 4
  %8 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %7, i32 %8
  %9 = load i32, i32* %arrayidx4, align 4
  %call = call i32 @numDigits(i32 %9)
  %sub = sub nsw i32 %4, %call
  %10 = load i32**, i32*** %square.addr, align 4
  %11 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds i32*, i32** %10, i32 %11
  %12 = load i32*, i32** %arrayidx5, align 4
  %13 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds i32, i32* %12, i32 %13
  %14 = load i32, i32* %arrayidx6, align 4
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i32 %sub, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %15 = load i32, i32* %j, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  br label %for.inc9

for.inc9:                                         ; preds = %for.end
  %16 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %16, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond

for.end11:                                        ; preds = %for.cond
  %17 = load i32, i32* %rows.addr, align 4
  %18 = load i32, i32* %rows.addr, align 4
  %mul = mul nsw i32 %17, %18
  %add = add nsw i32 %mul, 1
  %19 = load i32, i32* %rows.addr, align 4
  %mul12 = mul nsw i32 %add, %19
  %div = sdiv i32 %mul12, 2
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i32 0, i32 0), i32 %div)
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argC, i8** %argV) #0 {
entry:
  %retval = alloca i32, align 4
  %argC.addr = alloca i32, align 4
  %argV.addr = alloca i8**, align 4
  %n = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argC, i32* %argC.addr, align 4
  store i8** %argV, i8*** %argV.addr, align 4
  %0 = load i32, i32* %argC.addr, align 4
  %cmp = icmp ne i32 %0, 2
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8**, i8*** %argV.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 1
  %2 = load i8*, i8** %arrayidx, align 4
  %arrayidx1 = getelementptr inbounds i8, i8* %2, i32 0
  %3 = load i8, i8* %arrayidx1, align 1
  %conv = sext i8 %3 to i32
  %sub = sub i32 %conv, 48
  %cmp2 = icmp ult i32 %sub, 10
  %conv3 = zext i1 %cmp2 to i32
  %cmp4 = icmp eq i32 %conv3, 0
  br i1 %cmp4, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  %4 = load i8**, i8*** %argV.addr, align 4
  %arrayidx6 = getelementptr inbounds i8*, i8** %4, i32 0
  %5 = load i8*, i8** %arrayidx6, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.4, i32 0, i32 0), i8* %5)
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false
  %6 = load i8**, i8*** %argV.addr, align 4
  %arrayidx7 = getelementptr inbounds i8*, i8** %6, i32 1
  %7 = load i8*, i8** %arrayidx7, align 4
  %call8 = call i32 @atoi(i8* %7)
  store i32 %call8, i32* %n, align 4
  %8 = load i32, i32* %n, align 4
  %call9 = call i32** @singlyEvenMagicSquare(i32 %8)
  %9 = load i32, i32* %n, align 4
  call void @printMagicSquare(i32** %call9, i32 %9)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret i32 0
}

declare i32 @atoi(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, 3
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 3:i32
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem = srem i32 %1, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp1 = icmp eq i32 %rem, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 2:i32
%2:i1 = eq 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %2, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div = sdiv i32 %4, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sdiv %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul2 = mul i32 %5, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp3 = icmp slt i32 %7, %8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul4 = mul i32 %9, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %13, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %value, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc6 = add nsw i32 %14, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %squareSize, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp7 = icmp sle i32 %inc6, %15
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0 (hasExternalUses)
%2:i32 = var
%3:i1 = sle %1, %2
infer %3

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %value, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %r, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %r, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp10 = icmp eq i32 %21, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %23, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp12 = icmp eq i32 %22, %sub
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = eq %0, %2
infer %3

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %r, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc14 = add nsw i32 %24, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub15 = sub nsw i32 %25, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc16 = add nsw i32 %26, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub19 = sub nsw i32 %28, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp20 = icmp eq i32 %27, %sub19
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = eq %0, %2
infer %3

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %r, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec = add nsw i32 %29, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %r, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub23 = sub nsw i32 %31, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %33, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %arrayidx25, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp26 = icmp eq i32 %34, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %r, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec28 = add nsw i32 %35, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc29 = add nsw i32 %36, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %r, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc31 = add nsw i32 %37, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 3:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem %0, 2:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem %0, 2:i32
%2:i1 = eq 0:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sdiv %0, 2:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 631636206
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0 (hasExternalUses)
%2:i32 = var
%3:i1 = sle %1, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = eq %0, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for oddMagicSquare()

; entering Souper's runOnFunction() for singlyEvenMagicSquare()

; ModuleID = './Magic_squares_of_singly_even_order.c.bc'
source_filename = "./Magic_squares_of_singly_even_order.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@__const.singlyEvenMagicSquare.gridFactors = private unnamed_addr constant [4 x i32] [i32 0, i32 2, i32 3, i32 1], align 16
@.str = private unnamed_addr constant [6 x i8] c"%*s%d\00", align 1
@.str.1 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.3 = private unnamed_addr constant [21 x i8] c"\0AMagic constant: %d \00", align 1
@.str.4 = private unnamed_addr constant [53 x i8] c"Usage : %s <integer specifying rows in magic square>\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden i32** @oddMagicSquare(i32 %n) #0 {
entry:
  %retval = alloca i32**, align 4
  %n.addr = alloca i32, align 4
  %value = alloca i32, align 4
  %squareSize = alloca i32, align 4
  %c = alloca i32, align 4
  %r = alloca i32, align 4
  %i = alloca i32, align 4
  %result = alloca i32**, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, 3
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4
  %rem = srem i32 %1, 2
  %cmp1 = icmp eq i32 %rem, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32** null, i32*** %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  store i32 0, i32* %value, align 4
  %2 = load i32, i32* %n.addr, align 4
  %3 = load i32, i32* %n.addr, align 4
  %mul = mul nsw i32 %2, %3
  store i32 %mul, i32* %squareSize, align 4
  %4 = load i32, i32* %n.addr, align 4
  %div = sdiv i32 %4, 2
  store i32 %div, i32* %c, align 4
  store i32 0, i32* %r, align 4
  %5 = load i32, i32* %n.addr, align 4
  %mul2 = mul i32 %5, 4
  %call = call noalias i8* @malloc(i32 %mul2)
  %6 = bitcast i8* %call to i32**
  store i32** %6, i32*** %result, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %n.addr, align 4
  %cmp3 = icmp slt i32 %7, %8
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i32, i32* %n.addr, align 4
  %mul4 = mul i32 %9, 4
  %call5 = call noalias i8* @malloc(i32 %mul4)
  %10 = bitcast i8* %call5 to i32*
  %11 = load i32**, i32*** %result, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %11, i32 %12
  store i32* %10, i32** %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %13 = load i32, i32* %i, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %if.end34, %for.end
  %14 = load i32, i32* %value, align 4
  %inc6 = add nsw i32 %14, 1
  store i32 %inc6, i32* %value, align 4
  %15 = load i32, i32* %squareSize, align 4
  %cmp7 = icmp sle i32 %inc6, %15
  br i1 %cmp7, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %16 = load i32, i32* %value, align 4
  %17 = load i32**, i32*** %result, align 4
  %18 = load i32, i32* %r, align 4
  %arrayidx8 = getelementptr inbounds i32*, i32** %17, i32 %18
  %19 = load i32*, i32** %arrayidx8, align 4
  %20 = load i32, i32* %c, align 4
  %arrayidx9 = getelementptr inbounds i32, i32* %19, i32 %20
  store i32 %16, i32* %arrayidx9, align 4
  %21 = load i32, i32* %r, align 4
  %cmp10 = icmp eq i32 %21, 0
  br i1 %cmp10, label %if.then11, label %if.else18

if.then11:                                        ; preds = %while.body
  %22 = load i32, i32* %c, align 4
  %23 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %23, 1
  %cmp12 = icmp eq i32 %22, %sub
  br i1 %cmp12, label %if.then13, label %if.else

if.then13:                                        ; preds = %if.then11
  %24 = load i32, i32* %r, align 4
  %inc14 = add nsw i32 %24, 1
  store i32 %inc14, i32* %r, align 4
  br label %if.end17

if.else:                                          ; preds = %if.then11
  %25 = load i32, i32* %n.addr, align 4
  %sub15 = sub nsw i32 %25, 1
  store i32 %sub15, i32* %r, align 4
  %26 = load i32, i32* %c, align 4
  %inc16 = add nsw i32 %26, 1
  store i32 %inc16, i32* %c, align 4
  br label %if.end17

if.end17:                                         ; preds = %if.else, %if.then13
  br label %if.end34

if.else18:                                        ; preds = %while.body
  %27 = load i32, i32* %c, align 4
  %28 = load i32, i32* %n.addr, align 4
  %sub19 = sub nsw i32 %28, 1
  %cmp20 = icmp eq i32 %27, %sub19
  br i1 %cmp20, label %if.then21, label %if.else22

if.then21:                                        ; preds = %if.else18
  %29 = load i32, i32* %r, align 4
  %dec = add nsw i32 %29, -1
  store i32 %dec, i32* %r, align 4
  store i32 0, i32* %c, align 4
  br label %if.end33

if.else22:                                        ; preds = %if.else18
  %30 = load i32**, i32*** %result, align 4
  %31 = load i32, i32* %r, align 4
  %sub23 = sub nsw i32 %31, 1
  %arrayidx24 = getelementptr inbounds i32*, i32** %30, i32 %sub23
  %32 = load i32*, i32** %arrayidx24, align 4
  %33 = load i32, i32* %c, align 4
  %add = add nsw i32 %33, 1
  %arrayidx25 = getelementptr inbounds i32, i32* %32, i32 %add
  %34 = load i32, i32* %arrayidx25, align 4
  %cmp26 = icmp eq i32 %34, 0
  br i1 %cmp26, label %if.then27, label %if.else30

if.then27:                                        ; preds = %if.else22
  %35 = load i32, i32* %r, align 4
  %dec28 = add nsw i32 %35, -1
  store i32 %dec28, i32* %r, align 4
  %36 = load i32, i32* %c, align 4
  %inc29 = add nsw i32 %36, 1
  store i32 %inc29, i32* %c, align 4
  br label %if.end32

if.else30:                                        ; preds = %if.else22
  %37 = load i32, i32* %r, align 4
  %inc31 = add nsw i32 %37, 1
  store i32 %inc31, i32* %r, align 4
  br label %if.end32

if.end32:                                         ; preds = %if.else30, %if.then27
  br label %if.end33

if.end33:                                         ; preds = %if.end32, %if.then21
  br label %if.end34

if.end34:                                         ; preds = %if.end33, %if.end17
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %38 = load i32**, i32*** %result, align 4
  store i32** %38, i32*** %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then
  %39 = load i32**, i32*** %retval, align 4
  ret i32** %39
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32** @singlyEvenMagicSquare(i32 %n) #0 {
entry:
  %retval = alloca i32**, align 4
  %n.addr = alloca i32, align 4
  %size = alloca i32, align 4
  %halfN = alloca i32, align 4
  %subGridSize = alloca i32, align 4
  %i = alloca i32, align 4
  %subGrid = alloca i32**, align 4
  %gridFactors = alloca [4 x i32], align 16
  %result = alloca i32**, align 4
  %r = alloca i32, align 4
  %c = alloca i32, align 4
  %grid = alloca i32, align 4
  %nColsLeft = alloca i32, align 4
  %nColsRight = alloca i32, align 4
  %r36 = alloca i32, align 4
  %c40 = alloca i32, align 4
  %tmp = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, 6
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %1, 2
  %rem = srem i32 %sub, 4
  %cmp1 = icmp ne i32 %rem, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32** null, i32*** %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %2 = load i32, i32* %n.addr, align 4
  %3 = load i32, i32* %n.addr, align 4
  %mul = mul nsw i32 %2, %3
  store i32 %mul, i32* %size, align 4
  %4 = load i32, i32* %n.addr, align 4
  %div = sdiv i32 %4, 2
  store i32 %div, i32* %halfN, align 4
  %5 = load i32, i32* %size, align 4
  %div2 = sdiv i32 %5, 4
  store i32 %div2, i32* %subGridSize, align 4
  %6 = load i32, i32* %halfN, align 4
  %call = call i32** @oddMagicSquare(i32 %6)
  store i32** %call, i32*** %subGrid, align 4
  %7 = bitcast [4 x i32]* %gridFactors to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %7, i8* align 16 bitcast ([4 x i32]* @__const.singlyEvenMagicSquare.gridFactors to i8*), i32 16, i1 false)
  %8 = load i32, i32* %n.addr, align 4
  %mul3 = mul i32 %8, 4
  %call4 = call noalias i8* @malloc(i32 %mul3)
  %9 = bitcast i8* %call4 to i32**
  store i32** %9, i32*** %result, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %n.addr, align 4
  %cmp5 = icmp slt i32 %10, %11
  br i1 %cmp5, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load i32, i32* %n.addr, align 4
  %mul6 = mul i32 %12, 4
  %call7 = call noalias i8* @malloc(i32 %mul6)
  %13 = bitcast i8* %call7 to i32*
  %14 = load i32**, i32*** %result, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %14, i32 %15
  store i32* %13, i32** %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %r, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc31, %for.end
  %17 = load i32, i32* %r, align 4
  %18 = load i32, i32* %n.addr, align 4
  %cmp9 = icmp slt i32 %17, %18
  br i1 %cmp9, label %for.body10, label %for.end33

for.body10:                                       ; preds = %for.cond8
  store i32 0, i32* %c, align 4
  br label %for.cond11

for.cond11:                                       ; preds = %for.inc28, %for.body10
  %19 = load i32, i32* %c, align 4
  %20 = load i32, i32* %n.addr, align 4
  %cmp12 = icmp slt i32 %19, %20
  br i1 %cmp12, label %for.body13, label %for.end30

for.body13:                                       ; preds = %for.cond11
  %21 = load i32, i32* %r, align 4
  %22 = load i32, i32* %halfN, align 4
  %div14 = sdiv i32 %21, %22
  %mul15 = mul nsw i32 %div14, 2
  %23 = load i32, i32* %c, align 4
  %24 = load i32, i32* %halfN, align 4
  %div16 = sdiv i32 %23, %24
  %add = add nsw i32 %mul15, %div16
  store i32 %add, i32* %grid, align 4
  %25 = load i32**, i32*** %subGrid, align 4
  %26 = load i32, i32* %r, align 4
  %27 = load i32, i32* %halfN, align 4
  %rem17 = srem i32 %26, %27
  %arrayidx18 = getelementptr inbounds i32*, i32** %25, i32 %rem17
  %28 = load i32*, i32** %arrayidx18, align 4
  %29 = load i32, i32* %c, align 4
  %30 = load i32, i32* %halfN, align 4
  %rem19 = srem i32 %29, %30
  %arrayidx20 = getelementptr inbounds i32, i32* %28, i32 %rem19
  %31 = load i32, i32* %arrayidx20, align 4
  %32 = load i32**, i32*** %result, align 4
  %33 = load i32, i32* %r, align 4
  %arrayidx21 = getelementptr inbounds i32*, i32** %32, i32 %33
  %34 = load i32*, i32** %arrayidx21, align 4
  %35 = load i32, i32* %c, align 4
  %arrayidx22 = getelementptr inbounds i32, i32* %34, i32 %35
  store i32 %31, i32* %arrayidx22, align 4
  %36 = load i32, i32* %grid, align 4
  %arrayidx23 = getelementptr inbounds [4 x i32], [4 x i32]* %gridFactors, i32 0, i32 %36
  %37 = load i32, i32* %arrayidx23, align 4
  %38 = load i32, i32* %subGridSize, align 4
  %mul24 = mul nsw i32 %37, %38
  %39 = load i32**, i32*** %result, align 4
  %40 = load i32, i32* %r, align 4
  %arrayidx25 = getelementptr inbounds i32*, i32** %39, i32 %40
  %41 = load i32*, i32** %arrayidx25, align 4
  %42 = load i32, i32* %c, align 4
  %arrayidx26 = getelementptr inbounds i32, i32* %41, i32 %42
  %43 = load i32, i32* %arrayidx26, align 4
  %add27 = add nsw i32 %43, %mul24
  store i32 %add27, i32* %arrayidx26, align 4
  br label %for.inc28

for.inc28:                                        ; preds = %for.body13
  %44 = load i32, i32* %c, align 4
  %inc29 = add nsw i32 %44, 1
  store i32 %inc29, i32* %c, align 4
  br label %for.cond11

for.end30:                                        ; preds = %for.cond11
  br label %for.inc31

for.inc31:                                        ; preds = %for.end30
  %45 = load i32, i32* %r, align 4
  %inc32 = add nsw i32 %45, 1
  store i32 %inc32, i32* %r, align 4
  br label %for.cond8

for.end33:                                        ; preds = %for.cond8
  %46 = load i32, i32* %halfN, align 4
  %div34 = sdiv i32 %46, 2
  store i32 %div34, i32* %nColsLeft, align 4
  %47 = load i32, i32* %nColsLeft, align 4
  %sub35 = sub nsw i32 %47, 1
  store i32 %sub35, i32* %nColsRight, align 4
  store i32 0, i32* %r36, align 4
  br label %for.cond37

for.cond37:                                       ; preds = %for.inc71, %for.end33
  %48 = load i32, i32* %r36, align 4
  %49 = load i32, i32* %halfN, align 4
  %cmp38 = icmp slt i32 %48, %49
  br i1 %cmp38, label %for.body39, label %for.end73

for.body39:                                       ; preds = %for.cond37
  store i32 0, i32* %c40, align 4
  br label %for.cond41

for.cond41:                                       ; preds = %for.inc68, %for.body39
  %50 = load i32, i32* %c40, align 4
  %51 = load i32, i32* %n.addr, align 4
  %cmp42 = icmp slt i32 %50, %51
  br i1 %cmp42, label %for.body43, label %for.end70

for.body43:                                       ; preds = %for.cond41
  %52 = load i32, i32* %c40, align 4
  %53 = load i32, i32* %nColsLeft, align 4
  %cmp44 = icmp slt i32 %52, %53
  br i1 %cmp44, label %if.then51, label %lor.lhs.false45

lor.lhs.false45:                                  ; preds = %for.body43
  %54 = load i32, i32* %c40, align 4
  %55 = load i32, i32* %n.addr, align 4
  %56 = load i32, i32* %nColsRight, align 4
  %sub46 = sub nsw i32 %55, %56
  %cmp47 = icmp sge i32 %54, %sub46
  br i1 %cmp47, label %if.then51, label %lor.lhs.false48

lor.lhs.false48:                                  ; preds = %lor.lhs.false45
  %57 = load i32, i32* %c40, align 4
  %58 = load i32, i32* %nColsLeft, align 4
  %cmp49 = icmp eq i32 %57, %58
  br i1 %cmp49, label %land.lhs.true, label %if.end67

land.lhs.true:                                    ; preds = %lor.lhs.false48
  %59 = load i32, i32* %r36, align 4
  %60 = load i32, i32* %nColsLeft, align 4
  %cmp50 = icmp eq i32 %59, %60
  br i1 %cmp50, label %if.then51, label %if.end67

if.then51:                                        ; preds = %land.lhs.true, %lor.lhs.false45, %for.body43
  %61 = load i32, i32* %c40, align 4
  %cmp52 = icmp eq i32 %61, 0
  br i1 %cmp52, label %land.lhs.true53, label %if.end56

land.lhs.true53:                                  ; preds = %if.then51
  %62 = load i32, i32* %r36, align 4
  %63 = load i32, i32* %nColsLeft, align 4
  %cmp54 = icmp eq i32 %62, %63
  br i1 %cmp54, label %if.then55, label %if.end56

if.then55:                                        ; preds = %land.lhs.true53
  br label %for.inc68

if.end56:                                         ; preds = %land.lhs.true53, %if.then51
  %64 = load i32**, i32*** %result, align 4
  %65 = load i32, i32* %r36, align 4
  %arrayidx57 = getelementptr inbounds i32*, i32** %64, i32 %65
  %66 = load i32*, i32** %arrayidx57, align 4
  %67 = load i32, i32* %c40, align 4
  %arrayidx58 = getelementptr inbounds i32, i32* %66, i32 %67
  %68 = load i32, i32* %arrayidx58, align 4
  store i32 %68, i32* %tmp, align 4
  %69 = load i32**, i32*** %result, align 4
  %70 = load i32, i32* %r36, align 4
  %71 = load i32, i32* %halfN, align 4
  %add59 = add nsw i32 %70, %71
  %arrayidx60 = getelementptr inbounds i32*, i32** %69, i32 %add59
  %72 = load i32*, i32** %arrayidx60, align 4
  %73 = load i32, i32* %c40, align 4
  %arrayidx61 = getelementptr inbounds i32, i32* %72, i32 %73
  %74 = load i32, i32* %arrayidx61, align 4
  %75 = load i32**, i32*** %result, align 4
  %76 = load i32, i32* %r36, align 4
  %arrayidx62 = getelementptr inbounds i32*, i32** %75, i32 %76
  %77 = load i32*, i32** %arrayidx62, align 4
  %78 = load i32, i32* %c40, align 4
  %arrayidx63 = getelementptr inbounds i32, i32* %77, i32 %78
  store i32 %74, i32* %arrayidx63, align 4
  %79 = load i32, i32* %tmp, align 4
  %80 = load i32**, i32*** %result, align 4
  %81 = load i32, i32* %r36, align 4
  %82 = load i32, i32* %halfN, align 4
  %add64 = add nsw i32 %81, %82
  %arrayidx65 = getelementptr inbounds i32*, i32** %80, i32 %add64
  %83 = load i32*, i32** %arrayidx65, align 4
  %84 = load i32, i32* %c40, align 4
  %arrayidx66 = getelementptr inbounds i32, i32* %83, i32 %84
  store i32 %79, i32* %arrayidx66, align 4
  br label %if.end67

if.end67:                                         ; preds = %if.end56, %land.lhs.true, %lor.lhs.false48
  br label %for.inc68

for.inc68:                                        ; preds = %if.end67, %if.then55
  %85 = load i32, i32* %c40, align 4
  %inc69 = add nsw i32 %85, 1
  store i32 %inc69, i32* %c40, align 4
  br label %for.cond41

for.end70:                                        ; preds = %for.cond41
  br label %for.inc71

for.inc71:                                        ; preds = %for.end70
  %86 = load i32, i32* %r36, align 4
  %inc72 = add nsw i32 %86, 1
  store i32 %inc72, i32* %r36, align 4
  br label %for.cond37

for.end73:                                        ; preds = %for.cond37
  %87 = load i32**, i32*** %result, align 4
  store i32** %87, i32*** %retval, align 4
  br label %return

return:                                           ; preds = %for.end73, %if.then
  %88 = load i32**, i32*** %retval, align 4
  ret i32** %88
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @numDigits(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %count = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 1, i32* %count, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp sge i32 %0, 10
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i32, i32* %n.addr, align 4
  %div = sdiv i32 %1, 10
  store i32 %div, i32* %n.addr, align 4
  %2 = load i32, i32* %count, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %count, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %3 = load i32, i32* %count, align 4
  ret i32 %3
}

; Function Attrs: noinline nounwind optnone
define hidden void @printMagicSquare(i32** %square, i32 %rows) #0 {
entry:
  %square.addr = alloca i32**, align 4
  %rows.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32** %square, i32*** %square.addr, align 4
  store i32 %rows, i32* %rows.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc9, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %rows.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end11

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %rows.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %rows.addr, align 4
  %5 = load i32**, i32*** %square.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %5, i32 %6
  %7 = load i32*, i32** %arrayidx, align 4
  %8 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %7, i32 %8
  %9 = load i32, i32* %arrayidx4, align 4
  %call = call i32 @numDigits(i32 %9)
  %sub = sub nsw i32 %4, %call
  %10 = load i32**, i32*** %square.addr, align 4
  %11 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds i32*, i32** %10, i32 %11
  %12 = load i32*, i32** %arrayidx5, align 4
  %13 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds i32, i32* %12, i32 %13
  %14 = load i32, i32* %arrayidx6, align 4
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i32 %sub, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %15 = load i32, i32* %j, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  br label %for.inc9

for.inc9:                                         ; preds = %for.end
  %16 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %16, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond

for.end11:                                        ; preds = %for.cond
  %17 = load i32, i32* %rows.addr, align 4
  %18 = load i32, i32* %rows.addr, align 4
  %mul = mul nsw i32 %17, %18
  %add = add nsw i32 %mul, 1
  %19 = load i32, i32* %rows.addr, align 4
  %mul12 = mul nsw i32 %add, %19
  %div = sdiv i32 %mul12, 2
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i32 0, i32 0), i32 %div)
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argC, i8** %argV) #0 {
entry:
  %retval = alloca i32, align 4
  %argC.addr = alloca i32, align 4
  %argV.addr = alloca i8**, align 4
  %n = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argC, i32* %argC.addr, align 4
  store i8** %argV, i8*** %argV.addr, align 4
  %0 = load i32, i32* %argC.addr, align 4
  %cmp = icmp ne i32 %0, 2
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8**, i8*** %argV.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 1
  %2 = load i8*, i8** %arrayidx, align 4
  %arrayidx1 = getelementptr inbounds i8, i8* %2, i32 0
  %3 = load i8, i8* %arrayidx1, align 1
  %conv = sext i8 %3 to i32
  %sub = sub i32 %conv, 48
  %cmp2 = icmp ult i32 %sub, 10
  %conv3 = zext i1 %cmp2 to i32
  %cmp4 = icmp eq i32 %conv3, 0
  br i1 %cmp4, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  %4 = load i8**, i8*** %argV.addr, align 4
  %arrayidx6 = getelementptr inbounds i8*, i8** %4, i32 0
  %5 = load i8*, i8** %arrayidx6, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.4, i32 0, i32 0), i8* %5)
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false
  %6 = load i8**, i8*** %argV.addr, align 4
  %arrayidx7 = getelementptr inbounds i8*, i8** %6, i32 1
  %7 = load i8*, i8** %arrayidx7, align 4
  %call8 = call i32 @atoi(i8* %7)
  store i32 %call8, i32* %n, align 4
  %8 = load i32, i32* %n, align 4
  %call9 = call i32** @singlyEvenMagicSquare(i32 %8)
  %9 = load i32, i32* %n, align 4
  call void @printMagicSquare(i32** %call9, i32 %9)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret i32 0
}

declare i32 @atoi(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, 6
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 6:i32
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %1, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %rem = srem i32 %sub, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 2:i32
%2:i32 = srem %1, 4:i32
infer %2

; *****
; For LLVM instruction:
;  %cmp1 = icmp ne i32 %rem, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 2:i32
%2:i32 = srem %1, 4:i32
%3:i1 = ne 0:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %2, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div = sdiv i32 %4, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sdiv %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %size, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div2 = sdiv i32 %5, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sdiv %0, 4:i32
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %halfN, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul3 = mul i32 %8, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp5 = icmp slt i32 %10, %11
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul6 = mul i32 %12, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %16, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %r, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp9 = icmp slt i32 %17, %18
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp12 = icmp slt i32 %19, %20
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %r, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %halfN, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div14 = sdiv i32 %21, %22
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sdiv %0, %1
infer %2

; *****
; For LLVM instruction:
;  %mul15 = mul nsw i32 %div14, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sdiv %0, %1
%3:i32 = mulnsw 2:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %halfN, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div16 = sdiv i32 %23, %24
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sdiv %0, %1
infer %2

; *****
; For LLVM instruction:
;  %add = add nsw i32 %mul15, %div16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sdiv %0, %1
%3:i32 = mulnsw 2:i32, %2
%4:i32 = var
%5:i32 = var
%6:i32 = sdiv %4, %5
%7:i32 = addnsw %3, %6
infer %7

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %r, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %halfN, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem17 = srem i32 %26, %27
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = srem %0, %1
infer %2

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %halfN, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem19 = srem i32 %29, %30
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = srem %0, %1
infer %2

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %arrayidx20, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %r, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %grid, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %arrayidx23, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %38 = load i32, i32* %subGridSize, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul24 = mul nsw i32 %37, %38
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %40 = load i32, i32* %r, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %42 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %43 = load i32, i32* %arrayidx26, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add27 = add nsw i32 %43, %mul24
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = addnsw %0, %3
infer %4

; *****
; For LLVM instruction:
;  %44 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc29 = add nsw i32 %44, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %45 = load i32, i32* %r, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc32 = add nsw i32 %45, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %46 = load i32, i32* %halfN, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div34 = sdiv i32 %46, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sdiv %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %47 = load i32, i32* %nColsLeft, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub35 = sub nsw i32 %47, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %48 = load i32, i32* %r36, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %49 = load i32, i32* %halfN, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp38 = icmp slt i32 %48, %49
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %50 = load i32, i32* %c40, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %51 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp42 = icmp slt i32 %50, %51
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %52 = load i32, i32* %c40, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %53 = load i32, i32* %nColsLeft, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp44 = icmp slt i32 %52, %53
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %54 = load i32, i32* %c40, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %55 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %56 = load i32, i32* %nColsRight, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub46 = sub nsw i32 %55, %56
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %cmp47 = icmp sge i32 %54, %sub46
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
%3:i32 = var
%4:i1 = sle %2, %3
infer %4

; *****
; For LLVM instruction:
;  %57 = load i32, i32* %c40, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %58 = load i32, i32* %nColsLeft, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp49 = icmp eq i32 %57, %58
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %59 = load i32, i32* %r36, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %60 = load i32, i32* %nColsLeft, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp50 = icmp eq i32 %59, %60
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %61 = load i32, i32* %c40, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp52 = icmp eq i32 %61, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %62 = load i32, i32* %r36, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %63 = load i32, i32* %nColsLeft, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp54 = icmp eq i32 %62, %63
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %65 = load i32, i32* %r36, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %67 = load i32, i32* %c40, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %68 = load i32, i32* %arrayidx58, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %70 = load i32, i32* %r36, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %71 = load i32, i32* %halfN, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add59 = add nsw i32 %70, %71
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %73 = load i32, i32* %c40, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %74 = load i32, i32* %arrayidx61, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %76 = load i32, i32* %r36, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %78 = load i32, i32* %c40, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %79 = load i32, i32* %tmp, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %81 = load i32, i32* %r36, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %82 = load i32, i32* %halfN, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add64 = add nsw i32 %81, %82
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %84 = load i32, i32* %c40, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %85 = load i32, i32* %c40, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc69 = add nsw i32 %85, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %86 = load i32, i32* %r36, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc72 = add nsw i32 %86, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 6:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 2:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -2
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 226595190
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 2:i32
%2:i32 = srem %1, 4:i32
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -2
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = subnsw %0, 2:i32

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 2:i32
%2:i32 = srem %1, 4:i32
%3:i1 = ne 0:i32, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sdiv %0, 4:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 161982144
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = sdiv %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = sdiv %0, %1
%3:i32 = mulnsw 2:i32, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -2
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = sdiv %0, %1

Cost = 5
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = sdiv %0, %1
%3:i32 = mulnsw 2:i32, %2
%4:i32 = var
%5:i32 = var
%6:i32 = sdiv %4, %5
%7:i32 = addnsw %3, %6
infer %7


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -3
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i32 = var
%1:i32 = var
%2:i32 = sdiv %0, %1

Cost = 5
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i32 = var
%1:i32 = var
%2:i32 = sdiv %0, %1

Cost = 5
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0:i32 = var
%1:i32 = var
%2:i32 = sdiv %0, %1
%3:i32 = mulnsw 2:i32, %2

Cost = 6
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = srem %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -120454654
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = addnsw %0, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -4
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147418112
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
%3:i32 = var
%4:i1 = sle %2, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for singlyEvenMagicSquare()

; entering Souper's runOnFunction() for numDigits()

; ModuleID = './Magic_squares_of_singly_even_order.c.bc'
source_filename = "./Magic_squares_of_singly_even_order.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@__const.singlyEvenMagicSquare.gridFactors = private unnamed_addr constant [4 x i32] [i32 0, i32 2, i32 3, i32 1], align 16
@.str = private unnamed_addr constant [6 x i8] c"%*s%d\00", align 1
@.str.1 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.3 = private unnamed_addr constant [21 x i8] c"\0AMagic constant: %d \00", align 1
@.str.4 = private unnamed_addr constant [53 x i8] c"Usage : %s <integer specifying rows in magic square>\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden i32** @oddMagicSquare(i32 %n) #0 {
entry:
  %retval = alloca i32**, align 4
  %n.addr = alloca i32, align 4
  %value = alloca i32, align 4
  %squareSize = alloca i32, align 4
  %c = alloca i32, align 4
  %r = alloca i32, align 4
  %i = alloca i32, align 4
  %result = alloca i32**, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, 3
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4
  %rem = srem i32 %1, 2
  %cmp1 = icmp eq i32 %rem, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32** null, i32*** %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  store i32 0, i32* %value, align 4
  %2 = load i32, i32* %n.addr, align 4
  %3 = load i32, i32* %n.addr, align 4
  %mul = mul nsw i32 %2, %3
  store i32 %mul, i32* %squareSize, align 4
  %4 = load i32, i32* %n.addr, align 4
  %div = sdiv i32 %4, 2
  store i32 %div, i32* %c, align 4
  store i32 0, i32* %r, align 4
  %5 = load i32, i32* %n.addr, align 4
  %mul2 = mul i32 %5, 4
  %call = call noalias i8* @malloc(i32 %mul2)
  %6 = bitcast i8* %call to i32**
  store i32** %6, i32*** %result, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %n.addr, align 4
  %cmp3 = icmp slt i32 %7, %8
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i32, i32* %n.addr, align 4
  %mul4 = mul i32 %9, 4
  %call5 = call noalias i8* @malloc(i32 %mul4)
  %10 = bitcast i8* %call5 to i32*
  %11 = load i32**, i32*** %result, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %11, i32 %12
  store i32* %10, i32** %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %13 = load i32, i32* %i, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %if.end34, %for.end
  %14 = load i32, i32* %value, align 4
  %inc6 = add nsw i32 %14, 1
  store i32 %inc6, i32* %value, align 4
  %15 = load i32, i32* %squareSize, align 4
  %cmp7 = icmp sle i32 %inc6, %15
  br i1 %cmp7, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %16 = load i32, i32* %value, align 4
  %17 = load i32**, i32*** %result, align 4
  %18 = load i32, i32* %r, align 4
  %arrayidx8 = getelementptr inbounds i32*, i32** %17, i32 %18
  %19 = load i32*, i32** %arrayidx8, align 4
  %20 = load i32, i32* %c, align 4
  %arrayidx9 = getelementptr inbounds i32, i32* %19, i32 %20
  store i32 %16, i32* %arrayidx9, align 4
  %21 = load i32, i32* %r, align 4
  %cmp10 = icmp eq i32 %21, 0
  br i1 %cmp10, label %if.then11, label %if.else18

if.then11:                                        ; preds = %while.body
  %22 = load i32, i32* %c, align 4
  %23 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %23, 1
  %cmp12 = icmp eq i32 %22, %sub
  br i1 %cmp12, label %if.then13, label %if.else

if.then13:                                        ; preds = %if.then11
  %24 = load i32, i32* %r, align 4
  %inc14 = add nsw i32 %24, 1
  store i32 %inc14, i32* %r, align 4
  br label %if.end17

if.else:                                          ; preds = %if.then11
  %25 = load i32, i32* %n.addr, align 4
  %sub15 = sub nsw i32 %25, 1
  store i32 %sub15, i32* %r, align 4
  %26 = load i32, i32* %c, align 4
  %inc16 = add nsw i32 %26, 1
  store i32 %inc16, i32* %c, align 4
  br label %if.end17

if.end17:                                         ; preds = %if.else, %if.then13
  br label %if.end34

if.else18:                                        ; preds = %while.body
  %27 = load i32, i32* %c, align 4
  %28 = load i32, i32* %n.addr, align 4
  %sub19 = sub nsw i32 %28, 1
  %cmp20 = icmp eq i32 %27, %sub19
  br i1 %cmp20, label %if.then21, label %if.else22

if.then21:                                        ; preds = %if.else18
  %29 = load i32, i32* %r, align 4
  %dec = add nsw i32 %29, -1
  store i32 %dec, i32* %r, align 4
  store i32 0, i32* %c, align 4
  br label %if.end33

if.else22:                                        ; preds = %if.else18
  %30 = load i32**, i32*** %result, align 4
  %31 = load i32, i32* %r, align 4
  %sub23 = sub nsw i32 %31, 1
  %arrayidx24 = getelementptr inbounds i32*, i32** %30, i32 %sub23
  %32 = load i32*, i32** %arrayidx24, align 4
  %33 = load i32, i32* %c, align 4
  %add = add nsw i32 %33, 1
  %arrayidx25 = getelementptr inbounds i32, i32* %32, i32 %add
  %34 = load i32, i32* %arrayidx25, align 4
  %cmp26 = icmp eq i32 %34, 0
  br i1 %cmp26, label %if.then27, label %if.else30

if.then27:                                        ; preds = %if.else22
  %35 = load i32, i32* %r, align 4
  %dec28 = add nsw i32 %35, -1
  store i32 %dec28, i32* %r, align 4
  %36 = load i32, i32* %c, align 4
  %inc29 = add nsw i32 %36, 1
  store i32 %inc29, i32* %c, align 4
  br label %if.end32

if.else30:                                        ; preds = %if.else22
  %37 = load i32, i32* %r, align 4
  %inc31 = add nsw i32 %37, 1
  store i32 %inc31, i32* %r, align 4
  br label %if.end32

if.end32:                                         ; preds = %if.else30, %if.then27
  br label %if.end33

if.end33:                                         ; preds = %if.end32, %if.then21
  br label %if.end34

if.end34:                                         ; preds = %if.end33, %if.end17
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %38 = load i32**, i32*** %result, align 4
  store i32** %38, i32*** %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then
  %39 = load i32**, i32*** %retval, align 4
  ret i32** %39
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32** @singlyEvenMagicSquare(i32 %n) #0 {
entry:
  %retval = alloca i32**, align 4
  %n.addr = alloca i32, align 4
  %size = alloca i32, align 4
  %halfN = alloca i32, align 4
  %subGridSize = alloca i32, align 4
  %i = alloca i32, align 4
  %subGrid = alloca i32**, align 4
  %gridFactors = alloca [4 x i32], align 16
  %result = alloca i32**, align 4
  %r = alloca i32, align 4
  %c = alloca i32, align 4
  %grid = alloca i32, align 4
  %nColsLeft = alloca i32, align 4
  %nColsRight = alloca i32, align 4
  %r36 = alloca i32, align 4
  %c40 = alloca i32, align 4
  %tmp = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, 6
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %1, 2
  %rem = srem i32 %sub, 4
  %cmp1 = icmp ne i32 %rem, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32** null, i32*** %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %2 = load i32, i32* %n.addr, align 4
  %3 = load i32, i32* %n.addr, align 4
  %mul = mul nsw i32 %2, %3
  store i32 %mul, i32* %size, align 4
  %4 = load i32, i32* %n.addr, align 4
  %div = sdiv i32 %4, 2
  store i32 %div, i32* %halfN, align 4
  %5 = load i32, i32* %size, align 4
  %div2 = sdiv i32 %5, 4
  store i32 %div2, i32* %subGridSize, align 4
  %6 = load i32, i32* %halfN, align 4
  %call = call i32** @oddMagicSquare(i32 %6)
  store i32** %call, i32*** %subGrid, align 4
  %7 = bitcast [4 x i32]* %gridFactors to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %7, i8* align 16 bitcast ([4 x i32]* @__const.singlyEvenMagicSquare.gridFactors to i8*), i32 16, i1 false)
  %8 = load i32, i32* %n.addr, align 4
  %mul3 = mul i32 %8, 4
  %call4 = call noalias i8* @malloc(i32 %mul3)
  %9 = bitcast i8* %call4 to i32**
  store i32** %9, i32*** %result, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %n.addr, align 4
  %cmp5 = icmp slt i32 %10, %11
  br i1 %cmp5, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load i32, i32* %n.addr, align 4
  %mul6 = mul i32 %12, 4
  %call7 = call noalias i8* @malloc(i32 %mul6)
  %13 = bitcast i8* %call7 to i32*
  %14 = load i32**, i32*** %result, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %14, i32 %15
  store i32* %13, i32** %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %r, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc31, %for.end
  %17 = load i32, i32* %r, align 4
  %18 = load i32, i32* %n.addr, align 4
  %cmp9 = icmp slt i32 %17, %18
  br i1 %cmp9, label %for.body10, label %for.end33

for.body10:                                       ; preds = %for.cond8
  store i32 0, i32* %c, align 4
  br label %for.cond11

for.cond11:                                       ; preds = %for.inc28, %for.body10
  %19 = load i32, i32* %c, align 4
  %20 = load i32, i32* %n.addr, align 4
  %cmp12 = icmp slt i32 %19, %20
  br i1 %cmp12, label %for.body13, label %for.end30

for.body13:                                       ; preds = %for.cond11
  %21 = load i32, i32* %r, align 4
  %22 = load i32, i32* %halfN, align 4
  %div14 = sdiv i32 %21, %22
  %mul15 = mul nsw i32 %div14, 2
  %23 = load i32, i32* %c, align 4
  %24 = load i32, i32* %halfN, align 4
  %div16 = sdiv i32 %23, %24
  %add = add nsw i32 %mul15, %div16
  store i32 %add, i32* %grid, align 4
  %25 = load i32**, i32*** %subGrid, align 4
  %26 = load i32, i32* %r, align 4
  %27 = load i32, i32* %halfN, align 4
  %rem17 = srem i32 %26, %27
  %arrayidx18 = getelementptr inbounds i32*, i32** %25, i32 %rem17
  %28 = load i32*, i32** %arrayidx18, align 4
  %29 = load i32, i32* %c, align 4
  %30 = load i32, i32* %halfN, align 4
  %rem19 = srem i32 %29, %30
  %arrayidx20 = getelementptr inbounds i32, i32* %28, i32 %rem19
  %31 = load i32, i32* %arrayidx20, align 4
  %32 = load i32**, i32*** %result, align 4
  %33 = load i32, i32* %r, align 4
  %arrayidx21 = getelementptr inbounds i32*, i32** %32, i32 %33
  %34 = load i32*, i32** %arrayidx21, align 4
  %35 = load i32, i32* %c, align 4
  %arrayidx22 = getelementptr inbounds i32, i32* %34, i32 %35
  store i32 %31, i32* %arrayidx22, align 4
  %36 = load i32, i32* %grid, align 4
  %arrayidx23 = getelementptr inbounds [4 x i32], [4 x i32]* %gridFactors, i32 0, i32 %36
  %37 = load i32, i32* %arrayidx23, align 4
  %38 = load i32, i32* %subGridSize, align 4
  %mul24 = mul nsw i32 %37, %38
  %39 = load i32**, i32*** %result, align 4
  %40 = load i32, i32* %r, align 4
  %arrayidx25 = getelementptr inbounds i32*, i32** %39, i32 %40
  %41 = load i32*, i32** %arrayidx25, align 4
  %42 = load i32, i32* %c, align 4
  %arrayidx26 = getelementptr inbounds i32, i32* %41, i32 %42
  %43 = load i32, i32* %arrayidx26, align 4
  %add27 = add nsw i32 %43, %mul24
  store i32 %add27, i32* %arrayidx26, align 4
  br label %for.inc28

for.inc28:                                        ; preds = %for.body13
  %44 = load i32, i32* %c, align 4
  %inc29 = add nsw i32 %44, 1
  store i32 %inc29, i32* %c, align 4
  br label %for.cond11

for.end30:                                        ; preds = %for.cond11
  br label %for.inc31

for.inc31:                                        ; preds = %for.end30
  %45 = load i32, i32* %r, align 4
  %inc32 = add nsw i32 %45, 1
  store i32 %inc32, i32* %r, align 4
  br label %for.cond8

for.end33:                                        ; preds = %for.cond8
  %46 = load i32, i32* %halfN, align 4
  %div34 = sdiv i32 %46, 2
  store i32 %div34, i32* %nColsLeft, align 4
  %47 = load i32, i32* %nColsLeft, align 4
  %sub35 = sub nsw i32 %47, 1
  store i32 %sub35, i32* %nColsRight, align 4
  store i32 0, i32* %r36, align 4
  br label %for.cond37

for.cond37:                                       ; preds = %for.inc71, %for.end33
  %48 = load i32, i32* %r36, align 4
  %49 = load i32, i32* %halfN, align 4
  %cmp38 = icmp slt i32 %48, %49
  br i1 %cmp38, label %for.body39, label %for.end73

for.body39:                                       ; preds = %for.cond37
  store i32 0, i32* %c40, align 4
  br label %for.cond41

for.cond41:                                       ; preds = %for.inc68, %for.body39
  %50 = load i32, i32* %c40, align 4
  %51 = load i32, i32* %n.addr, align 4
  %cmp42 = icmp slt i32 %50, %51
  br i1 %cmp42, label %for.body43, label %for.end70

for.body43:                                       ; preds = %for.cond41
  %52 = load i32, i32* %c40, align 4
  %53 = load i32, i32* %nColsLeft, align 4
  %cmp44 = icmp slt i32 %52, %53
  br i1 %cmp44, label %if.then51, label %lor.lhs.false45

lor.lhs.false45:                                  ; preds = %for.body43
  %54 = load i32, i32* %c40, align 4
  %55 = load i32, i32* %n.addr, align 4
  %56 = load i32, i32* %nColsRight, align 4
  %sub46 = sub nsw i32 %55, %56
  %cmp47 = icmp sge i32 %54, %sub46
  br i1 %cmp47, label %if.then51, label %lor.lhs.false48

lor.lhs.false48:                                  ; preds = %lor.lhs.false45
  %57 = load i32, i32* %c40, align 4
  %58 = load i32, i32* %nColsLeft, align 4
  %cmp49 = icmp eq i32 %57, %58
  br i1 %cmp49, label %land.lhs.true, label %if.end67

land.lhs.true:                                    ; preds = %lor.lhs.false48
  %59 = load i32, i32* %r36, align 4
  %60 = load i32, i32* %nColsLeft, align 4
  %cmp50 = icmp eq i32 %59, %60
  br i1 %cmp50, label %if.then51, label %if.end67

if.then51:                                        ; preds = %land.lhs.true, %lor.lhs.false45, %for.body43
  %61 = load i32, i32* %c40, align 4
  %cmp52 = icmp eq i32 %61, 0
  br i1 %cmp52, label %land.lhs.true53, label %if.end56

land.lhs.true53:                                  ; preds = %if.then51
  %62 = load i32, i32* %r36, align 4
  %63 = load i32, i32* %nColsLeft, align 4
  %cmp54 = icmp eq i32 %62, %63
  br i1 %cmp54, label %if.then55, label %if.end56

if.then55:                                        ; preds = %land.lhs.true53
  br label %for.inc68

if.end56:                                         ; preds = %land.lhs.true53, %if.then51
  %64 = load i32**, i32*** %result, align 4
  %65 = load i32, i32* %r36, align 4
  %arrayidx57 = getelementptr inbounds i32*, i32** %64, i32 %65
  %66 = load i32*, i32** %arrayidx57, align 4
  %67 = load i32, i32* %c40, align 4
  %arrayidx58 = getelementptr inbounds i32, i32* %66, i32 %67
  %68 = load i32, i32* %arrayidx58, align 4
  store i32 %68, i32* %tmp, align 4
  %69 = load i32**, i32*** %result, align 4
  %70 = load i32, i32* %r36, align 4
  %71 = load i32, i32* %halfN, align 4
  %add59 = add nsw i32 %70, %71
  %arrayidx60 = getelementptr inbounds i32*, i32** %69, i32 %add59
  %72 = load i32*, i32** %arrayidx60, align 4
  %73 = load i32, i32* %c40, align 4
  %arrayidx61 = getelementptr inbounds i32, i32* %72, i32 %73
  %74 = load i32, i32* %arrayidx61, align 4
  %75 = load i32**, i32*** %result, align 4
  %76 = load i32, i32* %r36, align 4
  %arrayidx62 = getelementptr inbounds i32*, i32** %75, i32 %76
  %77 = load i32*, i32** %arrayidx62, align 4
  %78 = load i32, i32* %c40, align 4
  %arrayidx63 = getelementptr inbounds i32, i32* %77, i32 %78
  store i32 %74, i32* %arrayidx63, align 4
  %79 = load i32, i32* %tmp, align 4
  %80 = load i32**, i32*** %result, align 4
  %81 = load i32, i32* %r36, align 4
  %82 = load i32, i32* %halfN, align 4
  %add64 = add nsw i32 %81, %82
  %arrayidx65 = getelementptr inbounds i32*, i32** %80, i32 %add64
  %83 = load i32*, i32** %arrayidx65, align 4
  %84 = load i32, i32* %c40, align 4
  %arrayidx66 = getelementptr inbounds i32, i32* %83, i32 %84
  store i32 %79, i32* %arrayidx66, align 4
  br label %if.end67

if.end67:                                         ; preds = %if.end56, %land.lhs.true, %lor.lhs.false48
  br label %for.inc68

for.inc68:                                        ; preds = %if.end67, %if.then55
  %85 = load i32, i32* %c40, align 4
  %inc69 = add nsw i32 %85, 1
  store i32 %inc69, i32* %c40, align 4
  br label %for.cond41

for.end70:                                        ; preds = %for.cond41
  br label %for.inc71

for.inc71:                                        ; preds = %for.end70
  %86 = load i32, i32* %r36, align 4
  %inc72 = add nsw i32 %86, 1
  store i32 %inc72, i32* %r36, align 4
  br label %for.cond37

for.end73:                                        ; preds = %for.cond37
  %87 = load i32**, i32*** %result, align 4
  store i32** %87, i32*** %retval, align 4
  br label %return

return:                                           ; preds = %for.end73, %if.then
  %88 = load i32**, i32*** %retval, align 4
  ret i32** %88
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @numDigits(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %count = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 1, i32* %count, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp sge i32 %0, 10
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i32, i32* %n.addr, align 4
  %div = sdiv i32 %1, 10
  store i32 %div, i32* %n.addr, align 4
  %2 = load i32, i32* %count, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %count, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %3 = load i32, i32* %count, align 4
  ret i32 %3
}

; Function Attrs: noinline nounwind optnone
define hidden void @printMagicSquare(i32** %square, i32 %rows) #0 {
entry:
  %square.addr = alloca i32**, align 4
  %rows.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32** %square, i32*** %square.addr, align 4
  store i32 %rows, i32* %rows.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc9, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %rows.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end11

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %rows.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %rows.addr, align 4
  %5 = load i32**, i32*** %square.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %5, i32 %6
  %7 = load i32*, i32** %arrayidx, align 4
  %8 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %7, i32 %8
  %9 = load i32, i32* %arrayidx4, align 4
  %call = call i32 @numDigits(i32 %9)
  %sub = sub nsw i32 %4, %call
  %10 = load i32**, i32*** %square.addr, align 4
  %11 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds i32*, i32** %10, i32 %11
  %12 = load i32*, i32** %arrayidx5, align 4
  %13 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds i32, i32* %12, i32 %13
  %14 = load i32, i32* %arrayidx6, align 4
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i32 %sub, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %15 = load i32, i32* %j, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  br label %for.inc9

for.inc9:                                         ; preds = %for.end
  %16 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %16, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond

for.end11:                                        ; preds = %for.cond
  %17 = load i32, i32* %rows.addr, align 4
  %18 = load i32, i32* %rows.addr, align 4
  %mul = mul nsw i32 %17, %18
  %add = add nsw i32 %mul, 1
  %19 = load i32, i32* %rows.addr, align 4
  %mul12 = mul nsw i32 %add, %19
  %div = sdiv i32 %mul12, 2
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i32 0, i32 0), i32 %div)
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argC, i8** %argV) #0 {
entry:
  %retval = alloca i32, align 4
  %argC.addr = alloca i32, align 4
  %argV.addr = alloca i8**, align 4
  %n = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argC, i32* %argC.addr, align 4
  store i8** %argV, i8*** %argV.addr, align 4
  %0 = load i32, i32* %argC.addr, align 4
  %cmp = icmp ne i32 %0, 2
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8**, i8*** %argV.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 1
  %2 = load i8*, i8** %arrayidx, align 4
  %arrayidx1 = getelementptr inbounds i8, i8* %2, i32 0
  %3 = load i8, i8* %arrayidx1, align 1
  %conv = sext i8 %3 to i32
  %sub = sub i32 %conv, 48
  %cmp2 = icmp ult i32 %sub, 10
  %conv3 = zext i1 %cmp2 to i32
  %cmp4 = icmp eq i32 %conv3, 0
  br i1 %cmp4, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  %4 = load i8**, i8*** %argV.addr, align 4
  %arrayidx6 = getelementptr inbounds i8*, i8** %4, i32 0
  %5 = load i8*, i8** %arrayidx6, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.4, i32 0, i32 0), i8* %5)
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false
  %6 = load i8**, i8*** %argV.addr, align 4
  %arrayidx7 = getelementptr inbounds i8*, i8** %6, i32 1
  %7 = load i8*, i8** %arrayidx7, align 4
  %call8 = call i32 @atoi(i8* %7)
  store i32 %call8, i32* %n, align 4
  %8 = load i32, i32* %n, align 4
  %call9 = call i32** @singlyEvenMagicSquare(i32 %8)
  %9 = load i32, i32* %n, align 4
  call void @printMagicSquare(i32** %call9, i32 %9)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret i32 0
}

declare i32 @atoi(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sge i32 %0, 10
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 10:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div = sdiv i32 %1, 10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sdiv %0, 10:i32
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %count, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %2, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %count, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle 10:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sdiv %0, 10:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 134217728
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for numDigits()

; entering Souper's runOnFunction() for printMagicSquare()

; ModuleID = './Magic_squares_of_singly_even_order.c.bc'
source_filename = "./Magic_squares_of_singly_even_order.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@__const.singlyEvenMagicSquare.gridFactors = private unnamed_addr constant [4 x i32] [i32 0, i32 2, i32 3, i32 1], align 16
@.str = private unnamed_addr constant [6 x i8] c"%*s%d\00", align 1
@.str.1 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.3 = private unnamed_addr constant [21 x i8] c"\0AMagic constant: %d \00", align 1
@.str.4 = private unnamed_addr constant [53 x i8] c"Usage : %s <integer specifying rows in magic square>\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden i32** @oddMagicSquare(i32 %n) #0 {
entry:
  %retval = alloca i32**, align 4
  %n.addr = alloca i32, align 4
  %value = alloca i32, align 4
  %squareSize = alloca i32, align 4
  %c = alloca i32, align 4
  %r = alloca i32, align 4
  %i = alloca i32, align 4
  %result = alloca i32**, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, 3
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4
  %rem = srem i32 %1, 2
  %cmp1 = icmp eq i32 %rem, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32** null, i32*** %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  store i32 0, i32* %value, align 4
  %2 = load i32, i32* %n.addr, align 4
  %3 = load i32, i32* %n.addr, align 4
  %mul = mul nsw i32 %2, %3
  store i32 %mul, i32* %squareSize, align 4
  %4 = load i32, i32* %n.addr, align 4
  %div = sdiv i32 %4, 2
  store i32 %div, i32* %c, align 4
  store i32 0, i32* %r, align 4
  %5 = load i32, i32* %n.addr, align 4
  %mul2 = mul i32 %5, 4
  %call = call noalias i8* @malloc(i32 %mul2)
  %6 = bitcast i8* %call to i32**
  store i32** %6, i32*** %result, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %n.addr, align 4
  %cmp3 = icmp slt i32 %7, %8
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i32, i32* %n.addr, align 4
  %mul4 = mul i32 %9, 4
  %call5 = call noalias i8* @malloc(i32 %mul4)
  %10 = bitcast i8* %call5 to i32*
  %11 = load i32**, i32*** %result, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %11, i32 %12
  store i32* %10, i32** %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %13 = load i32, i32* %i, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %if.end34, %for.end
  %14 = load i32, i32* %value, align 4
  %inc6 = add nsw i32 %14, 1
  store i32 %inc6, i32* %value, align 4
  %15 = load i32, i32* %squareSize, align 4
  %cmp7 = icmp sle i32 %inc6, %15
  br i1 %cmp7, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %16 = load i32, i32* %value, align 4
  %17 = load i32**, i32*** %result, align 4
  %18 = load i32, i32* %r, align 4
  %arrayidx8 = getelementptr inbounds i32*, i32** %17, i32 %18
  %19 = load i32*, i32** %arrayidx8, align 4
  %20 = load i32, i32* %c, align 4
  %arrayidx9 = getelementptr inbounds i32, i32* %19, i32 %20
  store i32 %16, i32* %arrayidx9, align 4
  %21 = load i32, i32* %r, align 4
  %cmp10 = icmp eq i32 %21, 0
  br i1 %cmp10, label %if.then11, label %if.else18

if.then11:                                        ; preds = %while.body
  %22 = load i32, i32* %c, align 4
  %23 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %23, 1
  %cmp12 = icmp eq i32 %22, %sub
  br i1 %cmp12, label %if.then13, label %if.else

if.then13:                                        ; preds = %if.then11
  %24 = load i32, i32* %r, align 4
  %inc14 = add nsw i32 %24, 1
  store i32 %inc14, i32* %r, align 4
  br label %if.end17

if.else:                                          ; preds = %if.then11
  %25 = load i32, i32* %n.addr, align 4
  %sub15 = sub nsw i32 %25, 1
  store i32 %sub15, i32* %r, align 4
  %26 = load i32, i32* %c, align 4
  %inc16 = add nsw i32 %26, 1
  store i32 %inc16, i32* %c, align 4
  br label %if.end17

if.end17:                                         ; preds = %if.else, %if.then13
  br label %if.end34

if.else18:                                        ; preds = %while.body
  %27 = load i32, i32* %c, align 4
  %28 = load i32, i32* %n.addr, align 4
  %sub19 = sub nsw i32 %28, 1
  %cmp20 = icmp eq i32 %27, %sub19
  br i1 %cmp20, label %if.then21, label %if.else22

if.then21:                                        ; preds = %if.else18
  %29 = load i32, i32* %r, align 4
  %dec = add nsw i32 %29, -1
  store i32 %dec, i32* %r, align 4
  store i32 0, i32* %c, align 4
  br label %if.end33

if.else22:                                        ; preds = %if.else18
  %30 = load i32**, i32*** %result, align 4
  %31 = load i32, i32* %r, align 4
  %sub23 = sub nsw i32 %31, 1
  %arrayidx24 = getelementptr inbounds i32*, i32** %30, i32 %sub23
  %32 = load i32*, i32** %arrayidx24, align 4
  %33 = load i32, i32* %c, align 4
  %add = add nsw i32 %33, 1
  %arrayidx25 = getelementptr inbounds i32, i32* %32, i32 %add
  %34 = load i32, i32* %arrayidx25, align 4
  %cmp26 = icmp eq i32 %34, 0
  br i1 %cmp26, label %if.then27, label %if.else30

if.then27:                                        ; preds = %if.else22
  %35 = load i32, i32* %r, align 4
  %dec28 = add nsw i32 %35, -1
  store i32 %dec28, i32* %r, align 4
  %36 = load i32, i32* %c, align 4
  %inc29 = add nsw i32 %36, 1
  store i32 %inc29, i32* %c, align 4
  br label %if.end32

if.else30:                                        ; preds = %if.else22
  %37 = load i32, i32* %r, align 4
  %inc31 = add nsw i32 %37, 1
  store i32 %inc31, i32* %r, align 4
  br label %if.end32

if.end32:                                         ; preds = %if.else30, %if.then27
  br label %if.end33

if.end33:                                         ; preds = %if.end32, %if.then21
  br label %if.end34

if.end34:                                         ; preds = %if.end33, %if.end17
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %38 = load i32**, i32*** %result, align 4
  store i32** %38, i32*** %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then
  %39 = load i32**, i32*** %retval, align 4
  ret i32** %39
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32** @singlyEvenMagicSquare(i32 %n) #0 {
entry:
  %retval = alloca i32**, align 4
  %n.addr = alloca i32, align 4
  %size = alloca i32, align 4
  %halfN = alloca i32, align 4
  %subGridSize = alloca i32, align 4
  %i = alloca i32, align 4
  %subGrid = alloca i32**, align 4
  %gridFactors = alloca [4 x i32], align 16
  %result = alloca i32**, align 4
  %r = alloca i32, align 4
  %c = alloca i32, align 4
  %grid = alloca i32, align 4
  %nColsLeft = alloca i32, align 4
  %nColsRight = alloca i32, align 4
  %r36 = alloca i32, align 4
  %c40 = alloca i32, align 4
  %tmp = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, 6
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %1, 2
  %rem = srem i32 %sub, 4
  %cmp1 = icmp ne i32 %rem, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32** null, i32*** %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %2 = load i32, i32* %n.addr, align 4
  %3 = load i32, i32* %n.addr, align 4
  %mul = mul nsw i32 %2, %3
  store i32 %mul, i32* %size, align 4
  %4 = load i32, i32* %n.addr, align 4
  %div = sdiv i32 %4, 2
  store i32 %div, i32* %halfN, align 4
  %5 = load i32, i32* %size, align 4
  %div2 = sdiv i32 %5, 4
  store i32 %div2, i32* %subGridSize, align 4
  %6 = load i32, i32* %halfN, align 4
  %call = call i32** @oddMagicSquare(i32 %6)
  store i32** %call, i32*** %subGrid, align 4
  %7 = bitcast [4 x i32]* %gridFactors to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %7, i8* align 16 bitcast ([4 x i32]* @__const.singlyEvenMagicSquare.gridFactors to i8*), i32 16, i1 false)
  %8 = load i32, i32* %n.addr, align 4
  %mul3 = mul i32 %8, 4
  %call4 = call noalias i8* @malloc(i32 %mul3)
  %9 = bitcast i8* %call4 to i32**
  store i32** %9, i32*** %result, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %n.addr, align 4
  %cmp5 = icmp slt i32 %10, %11
  br i1 %cmp5, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load i32, i32* %n.addr, align 4
  %mul6 = mul i32 %12, 4
  %call7 = call noalias i8* @malloc(i32 %mul6)
  %13 = bitcast i8* %call7 to i32*
  %14 = load i32**, i32*** %result, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %14, i32 %15
  store i32* %13, i32** %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %r, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc31, %for.end
  %17 = load i32, i32* %r, align 4
  %18 = load i32, i32* %n.addr, align 4
  %cmp9 = icmp slt i32 %17, %18
  br i1 %cmp9, label %for.body10, label %for.end33

for.body10:                                       ; preds = %for.cond8
  store i32 0, i32* %c, align 4
  br label %for.cond11

for.cond11:                                       ; preds = %for.inc28, %for.body10
  %19 = load i32, i32* %c, align 4
  %20 = load i32, i32* %n.addr, align 4
  %cmp12 = icmp slt i32 %19, %20
  br i1 %cmp12, label %for.body13, label %for.end30

for.body13:                                       ; preds = %for.cond11
  %21 = load i32, i32* %r, align 4
  %22 = load i32, i32* %halfN, align 4
  %div14 = sdiv i32 %21, %22
  %mul15 = mul nsw i32 %div14, 2
  %23 = load i32, i32* %c, align 4
  %24 = load i32, i32* %halfN, align 4
  %div16 = sdiv i32 %23, %24
  %add = add nsw i32 %mul15, %div16
  store i32 %add, i32* %grid, align 4
  %25 = load i32**, i32*** %subGrid, align 4
  %26 = load i32, i32* %r, align 4
  %27 = load i32, i32* %halfN, align 4
  %rem17 = srem i32 %26, %27
  %arrayidx18 = getelementptr inbounds i32*, i32** %25, i32 %rem17
  %28 = load i32*, i32** %arrayidx18, align 4
  %29 = load i32, i32* %c, align 4
  %30 = load i32, i32* %halfN, align 4
  %rem19 = srem i32 %29, %30
  %arrayidx20 = getelementptr inbounds i32, i32* %28, i32 %rem19
  %31 = load i32, i32* %arrayidx20, align 4
  %32 = load i32**, i32*** %result, align 4
  %33 = load i32, i32* %r, align 4
  %arrayidx21 = getelementptr inbounds i32*, i32** %32, i32 %33
  %34 = load i32*, i32** %arrayidx21, align 4
  %35 = load i32, i32* %c, align 4
  %arrayidx22 = getelementptr inbounds i32, i32* %34, i32 %35
  store i32 %31, i32* %arrayidx22, align 4
  %36 = load i32, i32* %grid, align 4
  %arrayidx23 = getelementptr inbounds [4 x i32], [4 x i32]* %gridFactors, i32 0, i32 %36
  %37 = load i32, i32* %arrayidx23, align 4
  %38 = load i32, i32* %subGridSize, align 4
  %mul24 = mul nsw i32 %37, %38
  %39 = load i32**, i32*** %result, align 4
  %40 = load i32, i32* %r, align 4
  %arrayidx25 = getelementptr inbounds i32*, i32** %39, i32 %40
  %41 = load i32*, i32** %arrayidx25, align 4
  %42 = load i32, i32* %c, align 4
  %arrayidx26 = getelementptr inbounds i32, i32* %41, i32 %42
  %43 = load i32, i32* %arrayidx26, align 4
  %add27 = add nsw i32 %43, %mul24
  store i32 %add27, i32* %arrayidx26, align 4
  br label %for.inc28

for.inc28:                                        ; preds = %for.body13
  %44 = load i32, i32* %c, align 4
  %inc29 = add nsw i32 %44, 1
  store i32 %inc29, i32* %c, align 4
  br label %for.cond11

for.end30:                                        ; preds = %for.cond11
  br label %for.inc31

for.inc31:                                        ; preds = %for.end30
  %45 = load i32, i32* %r, align 4
  %inc32 = add nsw i32 %45, 1
  store i32 %inc32, i32* %r, align 4
  br label %for.cond8

for.end33:                                        ; preds = %for.cond8
  %46 = load i32, i32* %halfN, align 4
  %div34 = sdiv i32 %46, 2
  store i32 %div34, i32* %nColsLeft, align 4
  %47 = load i32, i32* %nColsLeft, align 4
  %sub35 = sub nsw i32 %47, 1
  store i32 %sub35, i32* %nColsRight, align 4
  store i32 0, i32* %r36, align 4
  br label %for.cond37

for.cond37:                                       ; preds = %for.inc71, %for.end33
  %48 = load i32, i32* %r36, align 4
  %49 = load i32, i32* %halfN, align 4
  %cmp38 = icmp slt i32 %48, %49
  br i1 %cmp38, label %for.body39, label %for.end73

for.body39:                                       ; preds = %for.cond37
  store i32 0, i32* %c40, align 4
  br label %for.cond41

for.cond41:                                       ; preds = %for.inc68, %for.body39
  %50 = load i32, i32* %c40, align 4
  %51 = load i32, i32* %n.addr, align 4
  %cmp42 = icmp slt i32 %50, %51
  br i1 %cmp42, label %for.body43, label %for.end70

for.body43:                                       ; preds = %for.cond41
  %52 = load i32, i32* %c40, align 4
  %53 = load i32, i32* %nColsLeft, align 4
  %cmp44 = icmp slt i32 %52, %53
  br i1 %cmp44, label %if.then51, label %lor.lhs.false45

lor.lhs.false45:                                  ; preds = %for.body43
  %54 = load i32, i32* %c40, align 4
  %55 = load i32, i32* %n.addr, align 4
  %56 = load i32, i32* %nColsRight, align 4
  %sub46 = sub nsw i32 %55, %56
  %cmp47 = icmp sge i32 %54, %sub46
  br i1 %cmp47, label %if.then51, label %lor.lhs.false48

lor.lhs.false48:                                  ; preds = %lor.lhs.false45
  %57 = load i32, i32* %c40, align 4
  %58 = load i32, i32* %nColsLeft, align 4
  %cmp49 = icmp eq i32 %57, %58
  br i1 %cmp49, label %land.lhs.true, label %if.end67

land.lhs.true:                                    ; preds = %lor.lhs.false48
  %59 = load i32, i32* %r36, align 4
  %60 = load i32, i32* %nColsLeft, align 4
  %cmp50 = icmp eq i32 %59, %60
  br i1 %cmp50, label %if.then51, label %if.end67

if.then51:                                        ; preds = %land.lhs.true, %lor.lhs.false45, %for.body43
  %61 = load i32, i32* %c40, align 4
  %cmp52 = icmp eq i32 %61, 0
  br i1 %cmp52, label %land.lhs.true53, label %if.end56

land.lhs.true53:                                  ; preds = %if.then51
  %62 = load i32, i32* %r36, align 4
  %63 = load i32, i32* %nColsLeft, align 4
  %cmp54 = icmp eq i32 %62, %63
  br i1 %cmp54, label %if.then55, label %if.end56

if.then55:                                        ; preds = %land.lhs.true53
  br label %for.inc68

if.end56:                                         ; preds = %land.lhs.true53, %if.then51
  %64 = load i32**, i32*** %result, align 4
  %65 = load i32, i32* %r36, align 4
  %arrayidx57 = getelementptr inbounds i32*, i32** %64, i32 %65
  %66 = load i32*, i32** %arrayidx57, align 4
  %67 = load i32, i32* %c40, align 4
  %arrayidx58 = getelementptr inbounds i32, i32* %66, i32 %67
  %68 = load i32, i32* %arrayidx58, align 4
  store i32 %68, i32* %tmp, align 4
  %69 = load i32**, i32*** %result, align 4
  %70 = load i32, i32* %r36, align 4
  %71 = load i32, i32* %halfN, align 4
  %add59 = add nsw i32 %70, %71
  %arrayidx60 = getelementptr inbounds i32*, i32** %69, i32 %add59
  %72 = load i32*, i32** %arrayidx60, align 4
  %73 = load i32, i32* %c40, align 4
  %arrayidx61 = getelementptr inbounds i32, i32* %72, i32 %73
  %74 = load i32, i32* %arrayidx61, align 4
  %75 = load i32**, i32*** %result, align 4
  %76 = load i32, i32* %r36, align 4
  %arrayidx62 = getelementptr inbounds i32*, i32** %75, i32 %76
  %77 = load i32*, i32** %arrayidx62, align 4
  %78 = load i32, i32* %c40, align 4
  %arrayidx63 = getelementptr inbounds i32, i32* %77, i32 %78
  store i32 %74, i32* %arrayidx63, align 4
  %79 = load i32, i32* %tmp, align 4
  %80 = load i32**, i32*** %result, align 4
  %81 = load i32, i32* %r36, align 4
  %82 = load i32, i32* %halfN, align 4
  %add64 = add nsw i32 %81, %82
  %arrayidx65 = getelementptr inbounds i32*, i32** %80, i32 %add64
  %83 = load i32*, i32** %arrayidx65, align 4
  %84 = load i32, i32* %c40, align 4
  %arrayidx66 = getelementptr inbounds i32, i32* %83, i32 %84
  store i32 %79, i32* %arrayidx66, align 4
  br label %if.end67

if.end67:                                         ; preds = %if.end56, %land.lhs.true, %lor.lhs.false48
  br label %for.inc68

for.inc68:                                        ; preds = %if.end67, %if.then55
  %85 = load i32, i32* %c40, align 4
  %inc69 = add nsw i32 %85, 1
  store i32 %inc69, i32* %c40, align 4
  br label %for.cond41

for.end70:                                        ; preds = %for.cond41
  br label %for.inc71

for.inc71:                                        ; preds = %for.end70
  %86 = load i32, i32* %r36, align 4
  %inc72 = add nsw i32 %86, 1
  store i32 %inc72, i32* %r36, align 4
  br label %for.cond37

for.end73:                                        ; preds = %for.cond37
  %87 = load i32**, i32*** %result, align 4
  store i32** %87, i32*** %retval, align 4
  br label %return

return:                                           ; preds = %for.end73, %if.then
  %88 = load i32**, i32*** %retval, align 4
  ret i32** %88
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @numDigits(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %count = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 1, i32* %count, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp sge i32 %0, 10
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i32, i32* %n.addr, align 4
  %div = sdiv i32 %1, 10
  store i32 %div, i32* %n.addr, align 4
  %2 = load i32, i32* %count, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %count, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %3 = load i32, i32* %count, align 4
  ret i32 %3
}

; Function Attrs: noinline nounwind optnone
define hidden void @printMagicSquare(i32** %square, i32 %rows) #0 {
entry:
  %square.addr = alloca i32**, align 4
  %rows.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32** %square, i32*** %square.addr, align 4
  store i32 %rows, i32* %rows.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc9, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %rows.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end11

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %rows.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %rows.addr, align 4
  %5 = load i32**, i32*** %square.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %5, i32 %6
  %7 = load i32*, i32** %arrayidx, align 4
  %8 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %7, i32 %8
  %9 = load i32, i32* %arrayidx4, align 4
  %call = call i32 @numDigits(i32 %9)
  %sub = sub nsw i32 %4, %call
  %10 = load i32**, i32*** %square.addr, align 4
  %11 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds i32*, i32** %10, i32 %11
  %12 = load i32*, i32** %arrayidx5, align 4
  %13 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds i32, i32* %12, i32 %13
  %14 = load i32, i32* %arrayidx6, align 4
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i32 %sub, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %15 = load i32, i32* %j, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  br label %for.inc9

for.inc9:                                         ; preds = %for.end
  %16 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %16, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond

for.end11:                                        ; preds = %for.cond
  %17 = load i32, i32* %rows.addr, align 4
  %18 = load i32, i32* %rows.addr, align 4
  %mul = mul nsw i32 %17, %18
  %add = add nsw i32 %mul, 1
  %19 = load i32, i32* %rows.addr, align 4
  %mul12 = mul nsw i32 %add, %19
  %div = sdiv i32 %mul12, 2
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i32 0, i32 0), i32 %div)
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argC, i8** %argV) #0 {
entry:
  %retval = alloca i32, align 4
  %argC.addr = alloca i32, align 4
  %argV.addr = alloca i8**, align 4
  %n = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argC, i32* %argC.addr, align 4
  store i8** %argV, i8*** %argV.addr, align 4
  %0 = load i32, i32* %argC.addr, align 4
  %cmp = icmp ne i32 %0, 2
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8**, i8*** %argV.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 1
  %2 = load i8*, i8** %arrayidx, align 4
  %arrayidx1 = getelementptr inbounds i8, i8* %2, i32 0
  %3 = load i8, i8* %arrayidx1, align 1
  %conv = sext i8 %3 to i32
  %sub = sub i32 %conv, 48
  %cmp2 = icmp ult i32 %sub, 10
  %conv3 = zext i1 %cmp2 to i32
  %cmp4 = icmp eq i32 %conv3, 0
  br i1 %cmp4, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  %4 = load i8**, i8*** %argV.addr, align 4
  %arrayidx6 = getelementptr inbounds i8*, i8** %4, i32 0
  %5 = load i8*, i8** %arrayidx6, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.4, i32 0, i32 0), i8* %5)
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false
  %6 = load i8**, i8*** %argV.addr, align 4
  %arrayidx7 = getelementptr inbounds i8*, i8** %6, i32 1
  %7 = load i8*, i8** %arrayidx7, align 4
  %call8 = call i32 @atoi(i8* %7)
  store i32 %call8, i32* %n, align 4
  %8 = load i32, i32* %n, align 4
  %call9 = call i32** @singlyEvenMagicSquare(i32 %8)
  %9 = load i32, i32* %n, align 4
  call void @printMagicSquare(i32** %call9, i32 %9)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret i32 0
}

declare i32 @atoi(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %rows.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %rows.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp slt i32 %2, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %rows.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %arrayidx4, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 @numDigits(i32 %9)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %4, %call
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %arrayidx6, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %15, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc10 = add nsw i32 %16, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %rows.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %rows.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %17, %18
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %add = add nsw i32 %mul, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
%3:i32 = addnsw 1:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %rows.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul12 = mul nsw i32 %add, %19
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = addnsw 1:i32, %3
%5:i32 = mulnsw %0, %4
infer %5

; *****
; For LLVM instruction:
;  %div = sdiv i32 %mul12, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = addnsw 1:i32, %3
%5:i32 = mulnsw %0, %4
%6:i32 = sdiv %5, 2:i32
infer %6
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
%3:i32 = addnsw 1:i32, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = addnsw 1:i32, %3
%5:i32 = mulnsw %0, %4
infer %5


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 6 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 7 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = addnsw 1:i32, %3
%5:i32 = mulnsw %0, %4
%6:i32 = sdiv %5, 2:i32
infer %6


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 7 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for printMagicSquare()

; entering Souper's runOnFunction() for __main_argc_argv()

; ModuleID = './Magic_squares_of_singly_even_order.c.bc'
source_filename = "./Magic_squares_of_singly_even_order.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@__const.singlyEvenMagicSquare.gridFactors = private unnamed_addr constant [4 x i32] [i32 0, i32 2, i32 3, i32 1], align 16
@.str = private unnamed_addr constant [6 x i8] c"%*s%d\00", align 1
@.str.1 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.3 = private unnamed_addr constant [21 x i8] c"\0AMagic constant: %d \00", align 1
@.str.4 = private unnamed_addr constant [53 x i8] c"Usage : %s <integer specifying rows in magic square>\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden i32** @oddMagicSquare(i32 %n) #0 {
entry:
  %retval = alloca i32**, align 4
  %n.addr = alloca i32, align 4
  %value = alloca i32, align 4
  %squareSize = alloca i32, align 4
  %c = alloca i32, align 4
  %r = alloca i32, align 4
  %i = alloca i32, align 4
  %result = alloca i32**, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, 3
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4
  %rem = srem i32 %1, 2
  %cmp1 = icmp eq i32 %rem, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32** null, i32*** %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  store i32 0, i32* %value, align 4
  %2 = load i32, i32* %n.addr, align 4
  %3 = load i32, i32* %n.addr, align 4
  %mul = mul nsw i32 %2, %3
  store i32 %mul, i32* %squareSize, align 4
  %4 = load i32, i32* %n.addr, align 4
  %div = sdiv i32 %4, 2
  store i32 %div, i32* %c, align 4
  store i32 0, i32* %r, align 4
  %5 = load i32, i32* %n.addr, align 4
  %mul2 = mul i32 %5, 4
  %call = call noalias i8* @malloc(i32 %mul2)
  %6 = bitcast i8* %call to i32**
  store i32** %6, i32*** %result, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %n.addr, align 4
  %cmp3 = icmp slt i32 %7, %8
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i32, i32* %n.addr, align 4
  %mul4 = mul i32 %9, 4
  %call5 = call noalias i8* @malloc(i32 %mul4)
  %10 = bitcast i8* %call5 to i32*
  %11 = load i32**, i32*** %result, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %11, i32 %12
  store i32* %10, i32** %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %13 = load i32, i32* %i, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %if.end34, %for.end
  %14 = load i32, i32* %value, align 4
  %inc6 = add nsw i32 %14, 1
  store i32 %inc6, i32* %value, align 4
  %15 = load i32, i32* %squareSize, align 4
  %cmp7 = icmp sle i32 %inc6, %15
  br i1 %cmp7, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %16 = load i32, i32* %value, align 4
  %17 = load i32**, i32*** %result, align 4
  %18 = load i32, i32* %r, align 4
  %arrayidx8 = getelementptr inbounds i32*, i32** %17, i32 %18
  %19 = load i32*, i32** %arrayidx8, align 4
  %20 = load i32, i32* %c, align 4
  %arrayidx9 = getelementptr inbounds i32, i32* %19, i32 %20
  store i32 %16, i32* %arrayidx9, align 4
  %21 = load i32, i32* %r, align 4
  %cmp10 = icmp eq i32 %21, 0
  br i1 %cmp10, label %if.then11, label %if.else18

if.then11:                                        ; preds = %while.body
  %22 = load i32, i32* %c, align 4
  %23 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %23, 1
  %cmp12 = icmp eq i32 %22, %sub
  br i1 %cmp12, label %if.then13, label %if.else

if.then13:                                        ; preds = %if.then11
  %24 = load i32, i32* %r, align 4
  %inc14 = add nsw i32 %24, 1
  store i32 %inc14, i32* %r, align 4
  br label %if.end17

if.else:                                          ; preds = %if.then11
  %25 = load i32, i32* %n.addr, align 4
  %sub15 = sub nsw i32 %25, 1
  store i32 %sub15, i32* %r, align 4
  %26 = load i32, i32* %c, align 4
  %inc16 = add nsw i32 %26, 1
  store i32 %inc16, i32* %c, align 4
  br label %if.end17

if.end17:                                         ; preds = %if.else, %if.then13
  br label %if.end34

if.else18:                                        ; preds = %while.body
  %27 = load i32, i32* %c, align 4
  %28 = load i32, i32* %n.addr, align 4
  %sub19 = sub nsw i32 %28, 1
  %cmp20 = icmp eq i32 %27, %sub19
  br i1 %cmp20, label %if.then21, label %if.else22

if.then21:                                        ; preds = %if.else18
  %29 = load i32, i32* %r, align 4
  %dec = add nsw i32 %29, -1
  store i32 %dec, i32* %r, align 4
  store i32 0, i32* %c, align 4
  br label %if.end33

if.else22:                                        ; preds = %if.else18
  %30 = load i32**, i32*** %result, align 4
  %31 = load i32, i32* %r, align 4
  %sub23 = sub nsw i32 %31, 1
  %arrayidx24 = getelementptr inbounds i32*, i32** %30, i32 %sub23
  %32 = load i32*, i32** %arrayidx24, align 4
  %33 = load i32, i32* %c, align 4
  %add = add nsw i32 %33, 1
  %arrayidx25 = getelementptr inbounds i32, i32* %32, i32 %add
  %34 = load i32, i32* %arrayidx25, align 4
  %cmp26 = icmp eq i32 %34, 0
  br i1 %cmp26, label %if.then27, label %if.else30

if.then27:                                        ; preds = %if.else22
  %35 = load i32, i32* %r, align 4
  %dec28 = add nsw i32 %35, -1
  store i32 %dec28, i32* %r, align 4
  %36 = load i32, i32* %c, align 4
  %inc29 = add nsw i32 %36, 1
  store i32 %inc29, i32* %c, align 4
  br label %if.end32

if.else30:                                        ; preds = %if.else22
  %37 = load i32, i32* %r, align 4
  %inc31 = add nsw i32 %37, 1
  store i32 %inc31, i32* %r, align 4
  br label %if.end32

if.end32:                                         ; preds = %if.else30, %if.then27
  br label %if.end33

if.end33:                                         ; preds = %if.end32, %if.then21
  br label %if.end34

if.end34:                                         ; preds = %if.end33, %if.end17
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %38 = load i32**, i32*** %result, align 4
  store i32** %38, i32*** %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then
  %39 = load i32**, i32*** %retval, align 4
  ret i32** %39
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32** @singlyEvenMagicSquare(i32 %n) #0 {
entry:
  %retval = alloca i32**, align 4
  %n.addr = alloca i32, align 4
  %size = alloca i32, align 4
  %halfN = alloca i32, align 4
  %subGridSize = alloca i32, align 4
  %i = alloca i32, align 4
  %subGrid = alloca i32**, align 4
  %gridFactors = alloca [4 x i32], align 16
  %result = alloca i32**, align 4
  %r = alloca i32, align 4
  %c = alloca i32, align 4
  %grid = alloca i32, align 4
  %nColsLeft = alloca i32, align 4
  %nColsRight = alloca i32, align 4
  %r36 = alloca i32, align 4
  %c40 = alloca i32, align 4
  %tmp = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, 6
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %1, 2
  %rem = srem i32 %sub, 4
  %cmp1 = icmp ne i32 %rem, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32** null, i32*** %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %2 = load i32, i32* %n.addr, align 4
  %3 = load i32, i32* %n.addr, align 4
  %mul = mul nsw i32 %2, %3
  store i32 %mul, i32* %size, align 4
  %4 = load i32, i32* %n.addr, align 4
  %div = sdiv i32 %4, 2
  store i32 %div, i32* %halfN, align 4
  %5 = load i32, i32* %size, align 4
  %div2 = sdiv i32 %5, 4
  store i32 %div2, i32* %subGridSize, align 4
  %6 = load i32, i32* %halfN, align 4
  %call = call i32** @oddMagicSquare(i32 %6)
  store i32** %call, i32*** %subGrid, align 4
  %7 = bitcast [4 x i32]* %gridFactors to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %7, i8* align 16 bitcast ([4 x i32]* @__const.singlyEvenMagicSquare.gridFactors to i8*), i32 16, i1 false)
  %8 = load i32, i32* %n.addr, align 4
  %mul3 = mul i32 %8, 4
  %call4 = call noalias i8* @malloc(i32 %mul3)
  %9 = bitcast i8* %call4 to i32**
  store i32** %9, i32*** %result, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %n.addr, align 4
  %cmp5 = icmp slt i32 %10, %11
  br i1 %cmp5, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load i32, i32* %n.addr, align 4
  %mul6 = mul i32 %12, 4
  %call7 = call noalias i8* @malloc(i32 %mul6)
  %13 = bitcast i8* %call7 to i32*
  %14 = load i32**, i32*** %result, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %14, i32 %15
  store i32* %13, i32** %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %r, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc31, %for.end
  %17 = load i32, i32* %r, align 4
  %18 = load i32, i32* %n.addr, align 4
  %cmp9 = icmp slt i32 %17, %18
  br i1 %cmp9, label %for.body10, label %for.end33

for.body10:                                       ; preds = %for.cond8
  store i32 0, i32* %c, align 4
  br label %for.cond11

for.cond11:                                       ; preds = %for.inc28, %for.body10
  %19 = load i32, i32* %c, align 4
  %20 = load i32, i32* %n.addr, align 4
  %cmp12 = icmp slt i32 %19, %20
  br i1 %cmp12, label %for.body13, label %for.end30

for.body13:                                       ; preds = %for.cond11
  %21 = load i32, i32* %r, align 4
  %22 = load i32, i32* %halfN, align 4
  %div14 = sdiv i32 %21, %22
  %mul15 = mul nsw i32 %div14, 2
  %23 = load i32, i32* %c, align 4
  %24 = load i32, i32* %halfN, align 4
  %div16 = sdiv i32 %23, %24
  %add = add nsw i32 %mul15, %div16
  store i32 %add, i32* %grid, align 4
  %25 = load i32**, i32*** %subGrid, align 4
  %26 = load i32, i32* %r, align 4
  %27 = load i32, i32* %halfN, align 4
  %rem17 = srem i32 %26, %27
  %arrayidx18 = getelementptr inbounds i32*, i32** %25, i32 %rem17
  %28 = load i32*, i32** %arrayidx18, align 4
  %29 = load i32, i32* %c, align 4
  %30 = load i32, i32* %halfN, align 4
  %rem19 = srem i32 %29, %30
  %arrayidx20 = getelementptr inbounds i32, i32* %28, i32 %rem19
  %31 = load i32, i32* %arrayidx20, align 4
  %32 = load i32**, i32*** %result, align 4
  %33 = load i32, i32* %r, align 4
  %arrayidx21 = getelementptr inbounds i32*, i32** %32, i32 %33
  %34 = load i32*, i32** %arrayidx21, align 4
  %35 = load i32, i32* %c, align 4
  %arrayidx22 = getelementptr inbounds i32, i32* %34, i32 %35
  store i32 %31, i32* %arrayidx22, align 4
  %36 = load i32, i32* %grid, align 4
  %arrayidx23 = getelementptr inbounds [4 x i32], [4 x i32]* %gridFactors, i32 0, i32 %36
  %37 = load i32, i32* %arrayidx23, align 4
  %38 = load i32, i32* %subGridSize, align 4
  %mul24 = mul nsw i32 %37, %38
  %39 = load i32**, i32*** %result, align 4
  %40 = load i32, i32* %r, align 4
  %arrayidx25 = getelementptr inbounds i32*, i32** %39, i32 %40
  %41 = load i32*, i32** %arrayidx25, align 4
  %42 = load i32, i32* %c, align 4
  %arrayidx26 = getelementptr inbounds i32, i32* %41, i32 %42
  %43 = load i32, i32* %arrayidx26, align 4
  %add27 = add nsw i32 %43, %mul24
  store i32 %add27, i32* %arrayidx26, align 4
  br label %for.inc28

for.inc28:                                        ; preds = %for.body13
  %44 = load i32, i32* %c, align 4
  %inc29 = add nsw i32 %44, 1
  store i32 %inc29, i32* %c, align 4
  br label %for.cond11

for.end30:                                        ; preds = %for.cond11
  br label %for.inc31

for.inc31:                                        ; preds = %for.end30
  %45 = load i32, i32* %r, align 4
  %inc32 = add nsw i32 %45, 1
  store i32 %inc32, i32* %r, align 4
  br label %for.cond8

for.end33:                                        ; preds = %for.cond8
  %46 = load i32, i32* %halfN, align 4
  %div34 = sdiv i32 %46, 2
  store i32 %div34, i32* %nColsLeft, align 4
  %47 = load i32, i32* %nColsLeft, align 4
  %sub35 = sub nsw i32 %47, 1
  store i32 %sub35, i32* %nColsRight, align 4
  store i32 0, i32* %r36, align 4
  br label %for.cond37

for.cond37:                                       ; preds = %for.inc71, %for.end33
  %48 = load i32, i32* %r36, align 4
  %49 = load i32, i32* %halfN, align 4
  %cmp38 = icmp slt i32 %48, %49
  br i1 %cmp38, label %for.body39, label %for.end73

for.body39:                                       ; preds = %for.cond37
  store i32 0, i32* %c40, align 4
  br label %for.cond41

for.cond41:                                       ; preds = %for.inc68, %for.body39
  %50 = load i32, i32* %c40, align 4
  %51 = load i32, i32* %n.addr, align 4
  %cmp42 = icmp slt i32 %50, %51
  br i1 %cmp42, label %for.body43, label %for.end70

for.body43:                                       ; preds = %for.cond41
  %52 = load i32, i32* %c40, align 4
  %53 = load i32, i32* %nColsLeft, align 4
  %cmp44 = icmp slt i32 %52, %53
  br i1 %cmp44, label %if.then51, label %lor.lhs.false45

lor.lhs.false45:                                  ; preds = %for.body43
  %54 = load i32, i32* %c40, align 4
  %55 = load i32, i32* %n.addr, align 4
  %56 = load i32, i32* %nColsRight, align 4
  %sub46 = sub nsw i32 %55, %56
  %cmp47 = icmp sge i32 %54, %sub46
  br i1 %cmp47, label %if.then51, label %lor.lhs.false48

lor.lhs.false48:                                  ; preds = %lor.lhs.false45
  %57 = load i32, i32* %c40, align 4
  %58 = load i32, i32* %nColsLeft, align 4
  %cmp49 = icmp eq i32 %57, %58
  br i1 %cmp49, label %land.lhs.true, label %if.end67

land.lhs.true:                                    ; preds = %lor.lhs.false48
  %59 = load i32, i32* %r36, align 4
  %60 = load i32, i32* %nColsLeft, align 4
  %cmp50 = icmp eq i32 %59, %60
  br i1 %cmp50, label %if.then51, label %if.end67

if.then51:                                        ; preds = %land.lhs.true, %lor.lhs.false45, %for.body43
  %61 = load i32, i32* %c40, align 4
  %cmp52 = icmp eq i32 %61, 0
  br i1 %cmp52, label %land.lhs.true53, label %if.end56

land.lhs.true53:                                  ; preds = %if.then51
  %62 = load i32, i32* %r36, align 4
  %63 = load i32, i32* %nColsLeft, align 4
  %cmp54 = icmp eq i32 %62, %63
  br i1 %cmp54, label %if.then55, label %if.end56

if.then55:                                        ; preds = %land.lhs.true53
  br label %for.inc68

if.end56:                                         ; preds = %land.lhs.true53, %if.then51
  %64 = load i32**, i32*** %result, align 4
  %65 = load i32, i32* %r36, align 4
  %arrayidx57 = getelementptr inbounds i32*, i32** %64, i32 %65
  %66 = load i32*, i32** %arrayidx57, align 4
  %67 = load i32, i32* %c40, align 4
  %arrayidx58 = getelementptr inbounds i32, i32* %66, i32 %67
  %68 = load i32, i32* %arrayidx58, align 4
  store i32 %68, i32* %tmp, align 4
  %69 = load i32**, i32*** %result, align 4
  %70 = load i32, i32* %r36, align 4
  %71 = load i32, i32* %halfN, align 4
  %add59 = add nsw i32 %70, %71
  %arrayidx60 = getelementptr inbounds i32*, i32** %69, i32 %add59
  %72 = load i32*, i32** %arrayidx60, align 4
  %73 = load i32, i32* %c40, align 4
  %arrayidx61 = getelementptr inbounds i32, i32* %72, i32 %73
  %74 = load i32, i32* %arrayidx61, align 4
  %75 = load i32**, i32*** %result, align 4
  %76 = load i32, i32* %r36, align 4
  %arrayidx62 = getelementptr inbounds i32*, i32** %75, i32 %76
  %77 = load i32*, i32** %arrayidx62, align 4
  %78 = load i32, i32* %c40, align 4
  %arrayidx63 = getelementptr inbounds i32, i32* %77, i32 %78
  store i32 %74, i32* %arrayidx63, align 4
  %79 = load i32, i32* %tmp, align 4
  %80 = load i32**, i32*** %result, align 4
  %81 = load i32, i32* %r36, align 4
  %82 = load i32, i32* %halfN, align 4
  %add64 = add nsw i32 %81, %82
  %arrayidx65 = getelementptr inbounds i32*, i32** %80, i32 %add64
  %83 = load i32*, i32** %arrayidx65, align 4
  %84 = load i32, i32* %c40, align 4
  %arrayidx66 = getelementptr inbounds i32, i32* %83, i32 %84
  store i32 %79, i32* %arrayidx66, align 4
  br label %if.end67

if.end67:                                         ; preds = %if.end56, %land.lhs.true, %lor.lhs.false48
  br label %for.inc68

for.inc68:                                        ; preds = %if.end67, %if.then55
  %85 = load i32, i32* %c40, align 4
  %inc69 = add nsw i32 %85, 1
  store i32 %inc69, i32* %c40, align 4
  br label %for.cond41

for.end70:                                        ; preds = %for.cond41
  br label %for.inc71

for.inc71:                                        ; preds = %for.end70
  %86 = load i32, i32* %r36, align 4
  %inc72 = add nsw i32 %86, 1
  store i32 %inc72, i32* %r36, align 4
  br label %for.cond37

for.end73:                                        ; preds = %for.cond37
  %87 = load i32**, i32*** %result, align 4
  store i32** %87, i32*** %retval, align 4
  br label %return

return:                                           ; preds = %for.end73, %if.then
  %88 = load i32**, i32*** %retval, align 4
  ret i32** %88
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @numDigits(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %count = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 1, i32* %count, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp sge i32 %0, 10
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i32, i32* %n.addr, align 4
  %div = sdiv i32 %1, 10
  store i32 %div, i32* %n.addr, align 4
  %2 = load i32, i32* %count, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %count, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %3 = load i32, i32* %count, align 4
  ret i32 %3
}

; Function Attrs: noinline nounwind optnone
define hidden void @printMagicSquare(i32** %square, i32 %rows) #0 {
entry:
  %square.addr = alloca i32**, align 4
  %rows.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32** %square, i32*** %square.addr, align 4
  store i32 %rows, i32* %rows.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc9, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %rows.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end11

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %rows.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %rows.addr, align 4
  %5 = load i32**, i32*** %square.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %5, i32 %6
  %7 = load i32*, i32** %arrayidx, align 4
  %8 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %7, i32 %8
  %9 = load i32, i32* %arrayidx4, align 4
  %call = call i32 @numDigits(i32 %9)
  %sub = sub nsw i32 %4, %call
  %10 = load i32**, i32*** %square.addr, align 4
  %11 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds i32*, i32** %10, i32 %11
  %12 = load i32*, i32** %arrayidx5, align 4
  %13 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds i32, i32* %12, i32 %13
  %14 = load i32, i32* %arrayidx6, align 4
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i32 %sub, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0), i32 %14)
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %15 = load i32, i32* %j, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  br label %for.inc9

for.inc9:                                         ; preds = %for.end
  %16 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %16, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond

for.end11:                                        ; preds = %for.cond
  %17 = load i32, i32* %rows.addr, align 4
  %18 = load i32, i32* %rows.addr, align 4
  %mul = mul nsw i32 %17, %18
  %add = add nsw i32 %mul, 1
  %19 = load i32, i32* %rows.addr, align 4
  %mul12 = mul nsw i32 %add, %19
  %div = sdiv i32 %mul12, 2
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i32 0, i32 0), i32 %div)
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argC, i8** %argV) #0 {
entry:
  %retval = alloca i32, align 4
  %argC.addr = alloca i32, align 4
  %argV.addr = alloca i8**, align 4
  %n = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argC, i32* %argC.addr, align 4
  store i8** %argV, i8*** %argV.addr, align 4
  %0 = load i32, i32* %argC.addr, align 4
  %cmp = icmp ne i32 %0, 2
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8**, i8*** %argV.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 1
  %2 = load i8*, i8** %arrayidx, align 4
  %arrayidx1 = getelementptr inbounds i8, i8* %2, i32 0
  %3 = load i8, i8* %arrayidx1, align 1
  %conv = sext i8 %3 to i32
  %sub = sub i32 %conv, 48
  %cmp2 = icmp ult i32 %sub, 10
  %conv3 = zext i1 %cmp2 to i32
  %cmp4 = icmp eq i32 %conv3, 0
  br i1 %cmp4, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  %4 = load i8**, i8*** %argV.addr, align 4
  %arrayidx6 = getelementptr inbounds i8*, i8** %4, i32 0
  %5 = load i8*, i8** %arrayidx6, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.4, i32 0, i32 0), i8* %5)
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false
  %6 = load i8**, i8*** %argV.addr, align 4
  %arrayidx7 = getelementptr inbounds i8*, i8** %6, i32 1
  %7 = load i8*, i8** %arrayidx7, align 4
  %call8 = call i32 @atoi(i8* %7)
  store i32 %call8, i32* %n, align 4
  %8 = load i32, i32* %n, align 4
  %call9 = call i32** @singlyEvenMagicSquare(i32 %8)
  %9 = load i32, i32* %n, align 4
  call void @printMagicSquare(i32** %call9, i32 %9)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret i32 0
}

declare i32 @atoi(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %argC.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ne i32 %0, 2
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i8, i8* %arrayidx1, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %3 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %sub = sub i32 %conv, 48
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 48:i32
infer %2

; *****
; For LLVM instruction:
;  %cmp2 = icmp ult i32 %sub, 10
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 48:i32
%3:i1 = ult %2, 10:i32
infer %3

; *****
; For LLVM instruction:
;  %conv3 = zext i1 %cmp2 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 48:i32
%3:i1 = ult %2, 10:i32
%4:i32 = zext %3
infer %4

; *****
; For LLVM instruction:
;  %cmp4 = icmp eq i32 %conv3, 0
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 48:i32
%3:i1 = ult %2, 10:i32
%4:i32 = zext %3
%5:i1 = eq 0:i32, %4
infer %5

; *****
; For LLVM instruction:
;  %call8 = call i32 @atoi(i8* %7)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 2:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 48:i32
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -48
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -49
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 48:i32
%3:i1 = ult %2, 10:i32
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 48:i32
%3:i1 = ult %2, 10:i32
%4:i32 = zext %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 48:i32

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 48:i32
%3:i1 = ult %2, 10:i32
%4:i32 = zext %3
%5:i1 = eq 0:i32, %4
infer %5


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 48:i32
%3:i1 = ult %2, 10:i32

Cost = 3
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for __main_argc_argv()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
