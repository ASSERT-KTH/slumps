
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for qpush()

; ModuleID = './Hamming_numbers.c.bc'
source_filename = "./Hamming_numbers.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@alloc = hidden global i32 0, align 4
@n = hidden global i32 1, align 4
@q = hidden global i64* null, align 4
@.str = private unnamed_addr constant [11 x i8] c"%6d: %llu\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @qpush(i64 %h) #0 {
entry:
  %h.addr = alloca i64, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i64 %h, i64* %h.addr, align 8
  %0 = load i32, i32* @alloc, align 4
  %1 = load i32, i32* @n, align 4
  %cmp = icmp ule i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i32, i32* @alloc, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %3 = load i32, i32* @alloc, align 4
  %mul = mul i32 %3, 2
  br label %cond.end

cond.false:                                       ; preds = %if.then
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %mul, %cond.true ], [ 16, %cond.false ]
  store i32 %cond, i32* @alloc, align 4
  %4 = load i64*, i64** @q, align 4
  %5 = bitcast i64* %4 to i8*
  %6 = load i32, i32* @alloc, align 4
  %mul1 = mul i32 8, %6
  %call = call i8* @realloc(i8* %5, i32 %mul1)
  %7 = bitcast i8* %call to i64*
  store i64* %7, i64** @q, align 4
  br label %if.end

if.end:                                           ; preds = %cond.end, %entry
  %8 = load i32, i32* @n, align 4
  %inc = add i32 %8, 1
  store i32 %inc, i32* @n, align 4
  store i32 %8, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %9 = load i32, i32* %i, align 4
  %div = sdiv i32 %9, 2
  store i32 %div, i32* %j, align 4
  %tobool2 = icmp ne i32 %div, 0
  br i1 %tobool2, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %10 = load i64*, i64** @q, align 4
  %11 = load i32, i32* %j, align 4
  %arrayidx = getelementptr inbounds i64, i64* %10, i32 %11
  %12 = load i64, i64* %arrayidx, align 8
  %13 = load i64, i64* %h.addr, align 8
  %cmp3 = icmp ugt i64 %12, %13
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %14 = phi i1 [ false, %for.cond ], [ %cmp3, %land.rhs ]
  br i1 %14, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %15 = load i64*, i64** @q, align 4
  %16 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds i64, i64* %15, i32 %16
  %17 = load i64, i64* %arrayidx4, align 8
  %18 = load i64*, i64** @q, align 4
  %19 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds i64, i64* %18, i32 %19
  store i64 %17, i64* %arrayidx5, align 8
  %20 = load i32, i32* %j, align 4
  store i32 %20, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  %21 = load i64, i64* %h.addr, align 8
  %22 = load i64*, i64** @q, align 4
  %23 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds i64, i64* %22, i32 %23
  store i64 %21, i64* %arrayidx6, align 8
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden i64 @qpop() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %r = alloca i64, align 8
  %t = alloca i64, align 8
  %0 = load i64*, i64** @q, align 4
  %arrayidx = getelementptr inbounds i64, i64* %0, i32 1
  %1 = load i64, i64* %arrayidx, align 8
  store i64 %1, i64* %r, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* @n, align 4
  %cmp = icmp ugt i32 %2, 1
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %3 = load i64, i64* %r, align 8
  %4 = load i64*, i64** @q, align 4
  %arrayidx1 = getelementptr inbounds i64, i64* %4, i32 1
  %5 = load i64, i64* %arrayidx1, align 8
  %cmp2 = icmp eq i64 %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %6 = phi i1 [ false, %for.cond ], [ %cmp2, %land.rhs ]
  br i1 %6, label %for.body, label %for.end19

for.body:                                         ; preds = %land.end
  store i32 1, i32* %i, align 4
  %7 = load i64*, i64** @q, align 4
  %8 = load i32, i32* @n, align 4
  %dec = add i32 %8, -1
  store i32 %dec, i32* @n, align 4
  %arrayidx3 = getelementptr inbounds i64, i64* %7, i32 %dec
  %9 = load i64, i64* %arrayidx3, align 8
  store i64 %9, i64* %t, align 8
  br label %for.cond4

for.cond4:                                        ; preds = %if.end15, %for.body
  %10 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %10, 2
  store i32 %mul, i32* %j, align 4
  %11 = load i32, i32* @n, align 4
  %cmp5 = icmp ult i32 %mul, %11
  br i1 %cmp5, label %for.body6, label %for.end

for.body6:                                        ; preds = %for.cond4
  %12 = load i32, i32* %j, align 4
  %add = add nsw i32 %12, 1
  %13 = load i32, i32* @n, align 4
  %cmp7 = icmp ult i32 %add, %13
  br i1 %cmp7, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body6
  %14 = load i64*, i64** @q, align 4
  %15 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds i64, i64* %14, i32 %15
  %16 = load i64, i64* %arrayidx8, align 8
  %17 = load i64*, i64** @q, align 4
  %18 = load i32, i32* %j, align 4
  %add9 = add nsw i32 %18, 1
  %arrayidx10 = getelementptr inbounds i64, i64* %17, i32 %add9
  %19 = load i64, i64* %arrayidx10, align 8
  %cmp11 = icmp ugt i64 %16, %19
  br i1 %cmp11, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %20 = load i32, i32* %j, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %j, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body6
  %21 = load i64, i64* %t, align 8
  %22 = load i64*, i64** @q, align 4
  %23 = load i32, i32* %j, align 4
  %arrayidx12 = getelementptr inbounds i64, i64* %22, i32 %23
  %24 = load i64, i64* %arrayidx12, align 8
  %cmp13 = icmp ule i64 %21, %24
  br i1 %cmp13, label %if.then14, label %if.end15

if.then14:                                        ; preds = %if.end
  br label %for.end

if.end15:                                         ; preds = %if.end
  %25 = load i64*, i64** @q, align 4
  %26 = load i32, i32* %j, align 4
  %arrayidx16 = getelementptr inbounds i64, i64* %25, i32 %26
  %27 = load i64, i64* %arrayidx16, align 8
  %28 = load i64*, i64** @q, align 4
  %29 = load i32, i32* %i, align 4
  %arrayidx17 = getelementptr inbounds i64, i64* %28, i32 %29
  store i64 %27, i64* %arrayidx17, align 8
  %30 = load i32, i32* %j, align 4
  store i32 %30, i32* %i, align 4
  br label %for.cond4

for.end:                                          ; preds = %if.then14, %for.cond4
  br label %for.inc

for.inc:                                          ; preds = %for.end
  %31 = load i64, i64* %t, align 8
  %32 = load i64*, i64** @q, align 4
  %33 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds i64, i64* %32, i32 %33
  store i64 %31, i64* %arrayidx18, align 8
  br label %for.cond

for.end19:                                        ; preds = %land.end
  %34 = load i64, i64* %r, align 8
  ret i64 %34
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %h = alloca i64, align 8
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %i, align 4
  call void @qpush(i64 1)
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp sle i32 %0, 1691
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call = call i64 @qpop()
  store i64 %call, i64* %h, align 8
  %1 = load i64, i64* %h, align 8
  %mul = mul i64 %1, 2
  call void @qpush(i64 %mul)
  %2 = load i64, i64* %h, align 8
  %mul1 = mul i64 %2, 3
  call void @qpush(i64 %mul1)
  %3 = load i64, i64* %h, align 8
  %mul2 = mul i64 %3, 5
  call void @qpush(i64 %mul2)
  %4 = load i32, i32* %i, align 4
  %cmp3 = icmp sle i32 %4, 20
  br i1 %cmp3, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %cmp4 = icmp eq i32 %5, 1691
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %for.body
  %6 = load i32, i32* %i, align 4
  %7 = load i64, i64* %h, align 8
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0), i32 %6, i64 %7)
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* @alloc, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* @n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ule i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ule %0, %1
infer %2

; *****
; For LLVM instruction:
;  %2 = load i32, i32* @alloc, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %2, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* @alloc, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul i32 %3, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cond = phi i32 [ %mul, %cond.true ], [ 16, %cond.false ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = mul 2:i32, %1
%3:i32 = phi %0, %2, 16:i32
infer %3

; *****
; For LLVM instruction:
;  %6 = load i32, i32* @alloc, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul1 = mul i32 8, %6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 8:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %8 = load i32, i32* @n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add i32 %8, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div = sdiv i32 %9, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sdiv %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %tobool2 = icmp ne i32 %div, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sdiv %0, 2:i32 (hasExternalUses)
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i64, i64* %arrayidx, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i64, i64* %h.addr, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp3 = icmp ugt i64 %12, %13
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %14 = phi i1 [ false, %for.cond ], [ %cmp3, %land.rhs ]
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i64, i64* %arrayidx4, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i64, i64* %h.addr, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = ule %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mul 2:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = mul 2:i32, %1
%3:i32 = phi %0, %2, 16:i32
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 16
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = mul 2:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mul 8:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sdiv %0, 2:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 631636206
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sdiv %0, 2:i32 (hasExternalUses)
%2:i1 = ne 0:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i64 = var
infer %0


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i1 = ult %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for qpush()

; entering Souper's runOnFunction() for qpop()

; ModuleID = './Hamming_numbers.c.bc'
source_filename = "./Hamming_numbers.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@alloc = hidden global i32 0, align 4
@n = hidden global i32 1, align 4
@q = hidden global i64* null, align 4
@.str = private unnamed_addr constant [11 x i8] c"%6d: %llu\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @qpush(i64 %h) #0 {
entry:
  %h.addr = alloca i64, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i64 %h, i64* %h.addr, align 8
  %0 = load i32, i32* @alloc, align 4
  %1 = load i32, i32* @n, align 4
  %cmp = icmp ule i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i32, i32* @alloc, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %3 = load i32, i32* @alloc, align 4
  %mul = mul i32 %3, 2
  br label %cond.end

cond.false:                                       ; preds = %if.then
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %mul, %cond.true ], [ 16, %cond.false ]
  store i32 %cond, i32* @alloc, align 4
  %4 = load i64*, i64** @q, align 4
  %5 = bitcast i64* %4 to i8*
  %6 = load i32, i32* @alloc, align 4
  %mul1 = mul i32 8, %6
  %call = call i8* @realloc(i8* %5, i32 %mul1)
  %7 = bitcast i8* %call to i64*
  store i64* %7, i64** @q, align 4
  br label %if.end

if.end:                                           ; preds = %cond.end, %entry
  %8 = load i32, i32* @n, align 4
  %inc = add i32 %8, 1
  store i32 %inc, i32* @n, align 4
  store i32 %8, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %9 = load i32, i32* %i, align 4
  %div = sdiv i32 %9, 2
  store i32 %div, i32* %j, align 4
  %tobool2 = icmp ne i32 %div, 0
  br i1 %tobool2, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %10 = load i64*, i64** @q, align 4
  %11 = load i32, i32* %j, align 4
  %arrayidx = getelementptr inbounds i64, i64* %10, i32 %11
  %12 = load i64, i64* %arrayidx, align 8
  %13 = load i64, i64* %h.addr, align 8
  %cmp3 = icmp ugt i64 %12, %13
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %14 = phi i1 [ false, %for.cond ], [ %cmp3, %land.rhs ]
  br i1 %14, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %15 = load i64*, i64** @q, align 4
  %16 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds i64, i64* %15, i32 %16
  %17 = load i64, i64* %arrayidx4, align 8
  %18 = load i64*, i64** @q, align 4
  %19 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds i64, i64* %18, i32 %19
  store i64 %17, i64* %arrayidx5, align 8
  %20 = load i32, i32* %j, align 4
  store i32 %20, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  %21 = load i64, i64* %h.addr, align 8
  %22 = load i64*, i64** @q, align 4
  %23 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds i64, i64* %22, i32 %23
  store i64 %21, i64* %arrayidx6, align 8
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden i64 @qpop() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %r = alloca i64, align 8
  %t = alloca i64, align 8
  %0 = load i64*, i64** @q, align 4
  %arrayidx = getelementptr inbounds i64, i64* %0, i32 1
  %1 = load i64, i64* %arrayidx, align 8
  store i64 %1, i64* %r, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* @n, align 4
  %cmp = icmp ugt i32 %2, 1
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %3 = load i64, i64* %r, align 8
  %4 = load i64*, i64** @q, align 4
  %arrayidx1 = getelementptr inbounds i64, i64* %4, i32 1
  %5 = load i64, i64* %arrayidx1, align 8
  %cmp2 = icmp eq i64 %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %6 = phi i1 [ false, %for.cond ], [ %cmp2, %land.rhs ]
  br i1 %6, label %for.body, label %for.end19

for.body:                                         ; preds = %land.end
  store i32 1, i32* %i, align 4
  %7 = load i64*, i64** @q, align 4
  %8 = load i32, i32* @n, align 4
  %dec = add i32 %8, -1
  store i32 %dec, i32* @n, align 4
  %arrayidx3 = getelementptr inbounds i64, i64* %7, i32 %dec
  %9 = load i64, i64* %arrayidx3, align 8
  store i64 %9, i64* %t, align 8
  br label %for.cond4

for.cond4:                                        ; preds = %if.end15, %for.body
  %10 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %10, 2
  store i32 %mul, i32* %j, align 4
  %11 = load i32, i32* @n, align 4
  %cmp5 = icmp ult i32 %mul, %11
  br i1 %cmp5, label %for.body6, label %for.end

for.body6:                                        ; preds = %for.cond4
  %12 = load i32, i32* %j, align 4
  %add = add nsw i32 %12, 1
  %13 = load i32, i32* @n, align 4
  %cmp7 = icmp ult i32 %add, %13
  br i1 %cmp7, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body6
  %14 = load i64*, i64** @q, align 4
  %15 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds i64, i64* %14, i32 %15
  %16 = load i64, i64* %arrayidx8, align 8
  %17 = load i64*, i64** @q, align 4
  %18 = load i32, i32* %j, align 4
  %add9 = add nsw i32 %18, 1
  %arrayidx10 = getelementptr inbounds i64, i64* %17, i32 %add9
  %19 = load i64, i64* %arrayidx10, align 8
  %cmp11 = icmp ugt i64 %16, %19
  br i1 %cmp11, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %20 = load i32, i32* %j, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %j, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body6
  %21 = load i64, i64* %t, align 8
  %22 = load i64*, i64** @q, align 4
  %23 = load i32, i32* %j, align 4
  %arrayidx12 = getelementptr inbounds i64, i64* %22, i32 %23
  %24 = load i64, i64* %arrayidx12, align 8
  %cmp13 = icmp ule i64 %21, %24
  br i1 %cmp13, label %if.then14, label %if.end15

if.then14:                                        ; preds = %if.end
  br label %for.end

if.end15:                                         ; preds = %if.end
  %25 = load i64*, i64** @q, align 4
  %26 = load i32, i32* %j, align 4
  %arrayidx16 = getelementptr inbounds i64, i64* %25, i32 %26
  %27 = load i64, i64* %arrayidx16, align 8
  %28 = load i64*, i64** @q, align 4
  %29 = load i32, i32* %i, align 4
  %arrayidx17 = getelementptr inbounds i64, i64* %28, i32 %29
  store i64 %27, i64* %arrayidx17, align 8
  %30 = load i32, i32* %j, align 4
  store i32 %30, i32* %i, align 4
  br label %for.cond4

for.end:                                          ; preds = %if.then14, %for.cond4
  br label %for.inc

for.inc:                                          ; preds = %for.end
  %31 = load i64, i64* %t, align 8
  %32 = load i64*, i64** @q, align 4
  %33 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds i64, i64* %32, i32 %33
  store i64 %31, i64* %arrayidx18, align 8
  br label %for.cond

for.end19:                                        ; preds = %land.end
  %34 = load i64, i64* %r, align 8
  ret i64 %34
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %h = alloca i64, align 8
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %i, align 4
  call void @qpush(i64 1)
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp sle i32 %0, 1691
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call = call i64 @qpop()
  store i64 %call, i64* %h, align 8
  %1 = load i64, i64* %h, align 8
  %mul = mul i64 %1, 2
  call void @qpush(i64 %mul)
  %2 = load i64, i64* %h, align 8
  %mul1 = mul i64 %2, 3
  call void @qpush(i64 %mul1)
  %3 = load i64, i64* %h, align 8
  %mul2 = mul i64 %3, 5
  call void @qpush(i64 %mul2)
  %4 = load i32, i32* %i, align 4
  %cmp3 = icmp sle i32 %4, 20
  br i1 %cmp3, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %cmp4 = icmp eq i32 %5, 1691
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %for.body
  %6 = load i32, i32* %i, align 4
  %7 = load i64, i64* %h, align 8
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0), i32 %6, i64 %7)
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i64, i64* %arrayidx, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* @n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ugt i32 %2, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ult 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i64, i64* %r, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i64, i64* %arrayidx1, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp eq i64 %3, %5
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %6 = phi i1 [ false, %for.cond ], [ %cmp2, %land.rhs ]
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* @n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec = add i32 %8, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i64, i64* %arrayidx3, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %10, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* @n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp5 = icmp ult i32 %mul, %11
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 2:i32, %0 (hasExternalUses)
%2:i32 = var
%3:i1 = ult %1, %2
infer %3

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %12, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %13 = load i32, i32* @n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp7 = icmp ult i32 %add, %13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = var
%3:i1 = ult %1, %2
infer %3

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i64, i64* %arrayidx8, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add9 = add nsw i32 %18, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %19 = load i64, i64* %arrayidx10, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp11 = icmp ugt i64 %16, %19
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %20, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %21 = load i64, i64* %t, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = load i64, i64* %arrayidx12, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp13 = icmp ule i64 %21, %24
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i1 = ule %0, %1
infer %2

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %27 = load i64, i64* %arrayidx16, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %31 = load i64, i64* %t, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %34 = load i64, i64* %r, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ult 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i1 = eq %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = add 4294967295:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mulnsw 2:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mulnsw 2:i32, %0 (hasExternalUses)
%2:i32 = var
%3:i1 = ult %1, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = var
%3:i1 = ult %1, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i1 = ule %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for qpop()

; entering Souper's runOnFunction() for main()

; ModuleID = './Hamming_numbers.c.bc'
source_filename = "./Hamming_numbers.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@alloc = hidden global i32 0, align 4
@n = hidden global i32 1, align 4
@q = hidden global i64* null, align 4
@.str = private unnamed_addr constant [11 x i8] c"%6d: %llu\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @qpush(i64 %h) #0 {
entry:
  %h.addr = alloca i64, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i64 %h, i64* %h.addr, align 8
  %0 = load i32, i32* @alloc, align 4
  %1 = load i32, i32* @n, align 4
  %cmp = icmp ule i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i32, i32* @alloc, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %3 = load i32, i32* @alloc, align 4
  %mul = mul i32 %3, 2
  br label %cond.end

cond.false:                                       ; preds = %if.then
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %mul, %cond.true ], [ 16, %cond.false ]
  store i32 %cond, i32* @alloc, align 4
  %4 = load i64*, i64** @q, align 4
  %5 = bitcast i64* %4 to i8*
  %6 = load i32, i32* @alloc, align 4
  %mul1 = mul i32 8, %6
  %call = call i8* @realloc(i8* %5, i32 %mul1)
  %7 = bitcast i8* %call to i64*
  store i64* %7, i64** @q, align 4
  br label %if.end

if.end:                                           ; preds = %cond.end, %entry
  %8 = load i32, i32* @n, align 4
  %inc = add i32 %8, 1
  store i32 %inc, i32* @n, align 4
  store i32 %8, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %9 = load i32, i32* %i, align 4
  %div = sdiv i32 %9, 2
  store i32 %div, i32* %j, align 4
  %tobool2 = icmp ne i32 %div, 0
  br i1 %tobool2, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %10 = load i64*, i64** @q, align 4
  %11 = load i32, i32* %j, align 4
  %arrayidx = getelementptr inbounds i64, i64* %10, i32 %11
  %12 = load i64, i64* %arrayidx, align 8
  %13 = load i64, i64* %h.addr, align 8
  %cmp3 = icmp ugt i64 %12, %13
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %14 = phi i1 [ false, %for.cond ], [ %cmp3, %land.rhs ]
  br i1 %14, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %15 = load i64*, i64** @q, align 4
  %16 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds i64, i64* %15, i32 %16
  %17 = load i64, i64* %arrayidx4, align 8
  %18 = load i64*, i64** @q, align 4
  %19 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds i64, i64* %18, i32 %19
  store i64 %17, i64* %arrayidx5, align 8
  %20 = load i32, i32* %j, align 4
  store i32 %20, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  %21 = load i64, i64* %h.addr, align 8
  %22 = load i64*, i64** @q, align 4
  %23 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds i64, i64* %22, i32 %23
  store i64 %21, i64* %arrayidx6, align 8
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden i64 @qpop() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %r = alloca i64, align 8
  %t = alloca i64, align 8
  %0 = load i64*, i64** @q, align 4
  %arrayidx = getelementptr inbounds i64, i64* %0, i32 1
  %1 = load i64, i64* %arrayidx, align 8
  store i64 %1, i64* %r, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* @n, align 4
  %cmp = icmp ugt i32 %2, 1
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %3 = load i64, i64* %r, align 8
  %4 = load i64*, i64** @q, align 4
  %arrayidx1 = getelementptr inbounds i64, i64* %4, i32 1
  %5 = load i64, i64* %arrayidx1, align 8
  %cmp2 = icmp eq i64 %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %6 = phi i1 [ false, %for.cond ], [ %cmp2, %land.rhs ]
  br i1 %6, label %for.body, label %for.end19

for.body:                                         ; preds = %land.end
  store i32 1, i32* %i, align 4
  %7 = load i64*, i64** @q, align 4
  %8 = load i32, i32* @n, align 4
  %dec = add i32 %8, -1
  store i32 %dec, i32* @n, align 4
  %arrayidx3 = getelementptr inbounds i64, i64* %7, i32 %dec
  %9 = load i64, i64* %arrayidx3, align 8
  store i64 %9, i64* %t, align 8
  br label %for.cond4

for.cond4:                                        ; preds = %if.end15, %for.body
  %10 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %10, 2
  store i32 %mul, i32* %j, align 4
  %11 = load i32, i32* @n, align 4
  %cmp5 = icmp ult i32 %mul, %11
  br i1 %cmp5, label %for.body6, label %for.end

for.body6:                                        ; preds = %for.cond4
  %12 = load i32, i32* %j, align 4
  %add = add nsw i32 %12, 1
  %13 = load i32, i32* @n, align 4
  %cmp7 = icmp ult i32 %add, %13
  br i1 %cmp7, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body6
  %14 = load i64*, i64** @q, align 4
  %15 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds i64, i64* %14, i32 %15
  %16 = load i64, i64* %arrayidx8, align 8
  %17 = load i64*, i64** @q, align 4
  %18 = load i32, i32* %j, align 4
  %add9 = add nsw i32 %18, 1
  %arrayidx10 = getelementptr inbounds i64, i64* %17, i32 %add9
  %19 = load i64, i64* %arrayidx10, align 8
  %cmp11 = icmp ugt i64 %16, %19
  br i1 %cmp11, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %20 = load i32, i32* %j, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %j, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body6
  %21 = load i64, i64* %t, align 8
  %22 = load i64*, i64** @q, align 4
  %23 = load i32, i32* %j, align 4
  %arrayidx12 = getelementptr inbounds i64, i64* %22, i32 %23
  %24 = load i64, i64* %arrayidx12, align 8
  %cmp13 = icmp ule i64 %21, %24
  br i1 %cmp13, label %if.then14, label %if.end15

if.then14:                                        ; preds = %if.end
  br label %for.end

if.end15:                                         ; preds = %if.end
  %25 = load i64*, i64** @q, align 4
  %26 = load i32, i32* %j, align 4
  %arrayidx16 = getelementptr inbounds i64, i64* %25, i32 %26
  %27 = load i64, i64* %arrayidx16, align 8
  %28 = load i64*, i64** @q, align 4
  %29 = load i32, i32* %i, align 4
  %arrayidx17 = getelementptr inbounds i64, i64* %28, i32 %29
  store i64 %27, i64* %arrayidx17, align 8
  %30 = load i32, i32* %j, align 4
  store i32 %30, i32* %i, align 4
  br label %for.cond4

for.end:                                          ; preds = %if.then14, %for.cond4
  br label %for.inc

for.inc:                                          ; preds = %for.end
  %31 = load i64, i64* %t, align 8
  %32 = load i64*, i64** @q, align 4
  %33 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds i64, i64* %32, i32 %33
  store i64 %31, i64* %arrayidx18, align 8
  br label %for.cond

for.end19:                                        ; preds = %land.end
  %34 = load i64, i64* %r, align 8
  ret i64 %34
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %h = alloca i64, align 8
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %i, align 4
  call void @qpush(i64 1)
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp sle i32 %0, 1691
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call = call i64 @qpop()
  store i64 %call, i64* %h, align 8
  %1 = load i64, i64* %h, align 8
  %mul = mul i64 %1, 2
  call void @qpush(i64 %mul)
  %2 = load i64, i64* %h, align 8
  %mul1 = mul i64 %2, 3
  call void @qpush(i64 %mul1)
  %3 = load i64, i64* %h, align 8
  %mul2 = mul i64 %3, 5
  call void @qpush(i64 %mul2)
  %4 = load i32, i32* %i, align 4
  %cmp3 = icmp sle i32 %4, 20
  br i1 %cmp3, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %cmp4 = icmp eq i32 %5, 1691
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %for.body
  %6 = load i32, i32* %i, align 4
  %7 = load i64, i64* %h, align 8
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0), i32 %6, i64 %7)
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sle i32 %0, 1691
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle %0, 1691:i32
infer %1

; *****
; For LLVM instruction:
;  %call = call i64 @qpop()
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i64, i64* %h, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul i64 %1, 2
; Looking for a replacement for:
%0:i64 = var
%1:i64 = mul 2:i64, %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i64, i64* %h, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %mul1 = mul i64 %2, 3
; Looking for a replacement for:
%0:i64 = var
%1:i64 = mul 3:i64, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i64, i64* %h, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %mul2 = mul i64 %3, 5
; Looking for a replacement for:
%0:i64 = var
%1:i64 = mul 5:i64, %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp3 = icmp sle i32 %4, 20
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle %0, 20:i32
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp4 = icmp eq i32 %5, 1691
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 1691:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i64, i64* %h, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %8, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle %0, 1691:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = mul 2:i64, %0
infer %1


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4611686018427387904
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = mul 3:i64, %0
infer %1


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -3
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = mul 5:i64, %0
infer %1


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -5
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle %0, 20:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 1691:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
