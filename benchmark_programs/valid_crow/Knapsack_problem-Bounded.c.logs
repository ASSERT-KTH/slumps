
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for knapsack()

; ModuleID = './Knapsack_problem-Bounded.c.bc'
source_filename = "./Knapsack_problem-Bounded.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.item_t = type { i8*, i32, i32, i32 }

@.str = private unnamed_addr constant [4 x i8] c"map\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"compass\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"water\00", align 1
@.str.3 = private unnamed_addr constant [9 x i8] c"sandwich\00", align 1
@.str.4 = private unnamed_addr constant [8 x i8] c"glucose\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"tin\00", align 1
@.str.6 = private unnamed_addr constant [7 x i8] c"banana\00", align 1
@.str.7 = private unnamed_addr constant [6 x i8] c"apple\00", align 1
@.str.8 = private unnamed_addr constant [7 x i8] c"cheese\00", align 1
@.str.9 = private unnamed_addr constant [5 x i8] c"beer\00", align 1
@.str.10 = private unnamed_addr constant [13 x i8] c"suntan cream\00", align 1
@.str.11 = private unnamed_addr constant [7 x i8] c"camera\00", align 1
@.str.12 = private unnamed_addr constant [8 x i8] c"T-shirt\00", align 1
@.str.13 = private unnamed_addr constant [9 x i8] c"trousers\00", align 1
@.str.14 = private unnamed_addr constant [9 x i8] c"umbrella\00", align 1
@.str.15 = private unnamed_addr constant [20 x i8] c"waterproof trousers\00", align 1
@.str.16 = private unnamed_addr constant [23 x i8] c"waterproof overclothes\00", align 1
@.str.17 = private unnamed_addr constant [10 x i8] c"note-case\00", align 1
@.str.18 = private unnamed_addr constant [11 x i8] c"sunglasses\00", align 1
@.str.19 = private unnamed_addr constant [6 x i8] c"towel\00", align 1
@.str.20 = private unnamed_addr constant [6 x i8] c"socks\00", align 1
@.str.21 = private unnamed_addr constant [5 x i8] c"book\00", align 1
@items = hidden global [22 x %struct.item_t] [%struct.item_t { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 9, i32 150, i32 1 }, %struct.item_t { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0), i32 13, i32 35, i32 1 }, %struct.item_t { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), i32 153, i32 200, i32 2 }, %struct.item_t { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), i32 50, i32 60, i32 2 }, %struct.item_t { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i32 0, i32 0), i32 15, i32 60, i32 2 }, %struct.item_t { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 68, i32 45, i32 3 }, %struct.item_t { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i32 0, i32 0), i32 27, i32 60, i32 3 }, %struct.item_t { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i32 0, i32 0), i32 39, i32 40, i32 3 }, %struct.item_t { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i32 0, i32 0), i32 23, i32 30, i32 1 }, %struct.item_t { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i32 0, i32 0), i32 52, i32 10, i32 3 }, %struct.item_t { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.10, i32 0, i32 0), i32 11, i32 70, i32 1 }, %struct.item_t { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i32 0, i32 0), i32 32, i32 30, i32 1 }, %struct.item_t { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.12, i32 0, i32 0), i32 24, i32 15, i32 2 }, %struct.item_t { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.13, i32 0, i32 0), i32 48, i32 10, i32 2 }, %struct.item_t { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.14, i32 0, i32 0), i32 73, i32 40, i32 1 }, %struct.item_t { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.15, i32 0, i32 0), i32 42, i32 70, i32 1 }, %struct.item_t { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.16, i32 0, i32 0), i32 43, i32 75, i32 1 }, %struct.item_t { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.17, i32 0, i32 0), i32 22, i32 80, i32 1 }, %struct.item_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.18, i32 0, i32 0), i32 7, i32 20, i32 1 }, %struct.item_t { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.19, i32 0, i32 0), i32 18, i32 12, i32 2 }, %struct.item_t { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.20, i32 0, i32 0), i32 4, i32 50, i32 1 }, %struct.item_t { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.21, i32 0, i32 0), i32 30, i32 10, i32 2 }], align 16
@n = hidden global i32 22, align 4
@.str.22 = private unnamed_addr constant [19 x i8] c"%-22s %5d %5d %5d\0A\00", align 1
@.str.23 = private unnamed_addr constant [22 x i8] c"count, weight, value:\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32* @knapsack(i32 %w) #0 {
entry:
  %w.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %v = alloca i32, align 4
  %mm = alloca i32*, align 4
  %m = alloca i32**, align 4
  %s = alloca i32*, align 4
  %v54 = alloca i32, align 4
  store i32 %w, i32* %w.addr, align 4
  %0 = load i32, i32* @n, align 4
  %add = add nsw i32 %0, 1
  %1 = load i32, i32* %w.addr, align 4
  %add1 = add nsw i32 %1, 1
  %mul = mul nsw i32 %add, %add1
  %call = call noalias i8* @calloc(i32 %mul, i32 4)
  %2 = bitcast i8* %call to i32*
  store i32* %2, i32** %mm, align 4
  %3 = load i32, i32* @n, align 4
  %add2 = add nsw i32 %3, 1
  %mul3 = mul i32 %add2, 4
  %call4 = call noalias i8* @malloc(i32 %mul3)
  %4 = bitcast i8* %call4 to i32**
  store i32** %4, i32*** %m, align 4
  %5 = load i32*, i32** %mm, align 4
  %6 = load i32**, i32*** %m, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %6, i32 0
  store i32* %5, i32** %arrayidx, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc47, %entry
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* @n, align 4
  %cmp = icmp sle i32 %7, %8
  br i1 %cmp, label %for.body, label %for.end49

for.body:                                         ; preds = %for.cond
  %9 = load i32*, i32** %mm, align 4
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %w.addr, align 4
  %add5 = add nsw i32 %11, 1
  %mul6 = mul nsw i32 %10, %add5
  %arrayidx7 = getelementptr inbounds i32, i32* %9, i32 %mul6
  %12 = load i32**, i32*** %m, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds i32*, i32** %12, i32 %13
  store i32* %arrayidx7, i32** %arrayidx8, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc44, %for.body
  %14 = load i32, i32* %j, align 4
  %15 = load i32, i32* %w.addr, align 4
  %cmp10 = icmp sle i32 %14, %15
  br i1 %cmp10, label %for.body11, label %for.end46

for.body11:                                       ; preds = %for.cond9
  %16 = load i32**, i32*** %m, align 4
  %17 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %17, 1
  %arrayidx12 = getelementptr inbounds i32*, i32** %16, i32 %sub
  %18 = load i32*, i32** %arrayidx12, align 4
  %19 = load i32, i32* %j, align 4
  %arrayidx13 = getelementptr inbounds i32, i32* %18, i32 %19
  %20 = load i32, i32* %arrayidx13, align 4
  %21 = load i32**, i32*** %m, align 4
  %22 = load i32, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds i32*, i32** %21, i32 %22
  %23 = load i32*, i32** %arrayidx14, align 4
  %24 = load i32, i32* %j, align 4
  %arrayidx15 = getelementptr inbounds i32, i32* %23, i32 %24
  store i32 %20, i32* %arrayidx15, align 4
  store i32 1, i32* %k, align 4
  br label %for.cond16

for.cond16:                                       ; preds = %for.inc, %for.body11
  %25 = load i32, i32* %k, align 4
  %26 = load i32, i32* %i, align 4
  %sub17 = sub nsw i32 %26, 1
  %arrayidx18 = getelementptr inbounds [22 x %struct.item_t], [22 x %struct.item_t]* @items, i32 0, i32 %sub17
  %count = getelementptr inbounds %struct.item_t, %struct.item_t* %arrayidx18, i32 0, i32 3
  %27 = load i32, i32* %count, align 4
  %cmp19 = icmp sle i32 %25, %27
  br i1 %cmp19, label %for.body20, label %for.end

for.body20:                                       ; preds = %for.cond16
  %28 = load i32, i32* %k, align 4
  %29 = load i32, i32* %i, align 4
  %sub21 = sub nsw i32 %29, 1
  %arrayidx22 = getelementptr inbounds [22 x %struct.item_t], [22 x %struct.item_t]* @items, i32 0, i32 %sub21
  %weight = getelementptr inbounds %struct.item_t, %struct.item_t* %arrayidx22, i32 0, i32 1
  %30 = load i32, i32* %weight, align 4
  %mul23 = mul nsw i32 %28, %30
  %31 = load i32, i32* %j, align 4
  %cmp24 = icmp sgt i32 %mul23, %31
  br i1 %cmp24, label %if.then, label %if.end

if.then:                                          ; preds = %for.body20
  br label %for.end

if.end:                                           ; preds = %for.body20
  %32 = load i32**, i32*** %m, align 4
  %33 = load i32, i32* %i, align 4
  %sub25 = sub nsw i32 %33, 1
  %arrayidx26 = getelementptr inbounds i32*, i32** %32, i32 %sub25
  %34 = load i32*, i32** %arrayidx26, align 4
  %35 = load i32, i32* %j, align 4
  %36 = load i32, i32* %k, align 4
  %37 = load i32, i32* %i, align 4
  %sub27 = sub nsw i32 %37, 1
  %arrayidx28 = getelementptr inbounds [22 x %struct.item_t], [22 x %struct.item_t]* @items, i32 0, i32 %sub27
  %weight29 = getelementptr inbounds %struct.item_t, %struct.item_t* %arrayidx28, i32 0, i32 1
  %38 = load i32, i32* %weight29, align 4
  %mul30 = mul nsw i32 %36, %38
  %sub31 = sub nsw i32 %35, %mul30
  %arrayidx32 = getelementptr inbounds i32, i32* %34, i32 %sub31
  %39 = load i32, i32* %arrayidx32, align 4
  %40 = load i32, i32* %k, align 4
  %41 = load i32, i32* %i, align 4
  %sub33 = sub nsw i32 %41, 1
  %arrayidx34 = getelementptr inbounds [22 x %struct.item_t], [22 x %struct.item_t]* @items, i32 0, i32 %sub33
  %value = getelementptr inbounds %struct.item_t, %struct.item_t* %arrayidx34, i32 0, i32 2
  %42 = load i32, i32* %value, align 8
  %mul35 = mul nsw i32 %40, %42
  %add36 = add nsw i32 %39, %mul35
  store i32 %add36, i32* %v, align 4
  %43 = load i32, i32* %v, align 4
  %44 = load i32**, i32*** %m, align 4
  %45 = load i32, i32* %i, align 4
  %arrayidx37 = getelementptr inbounds i32*, i32** %44, i32 %45
  %46 = load i32*, i32** %arrayidx37, align 4
  %47 = load i32, i32* %j, align 4
  %arrayidx38 = getelementptr inbounds i32, i32* %46, i32 %47
  %48 = load i32, i32* %arrayidx38, align 4
  %cmp39 = icmp sgt i32 %43, %48
  br i1 %cmp39, label %if.then40, label %if.end43

if.then40:                                        ; preds = %if.end
  %49 = load i32, i32* %v, align 4
  %50 = load i32**, i32*** %m, align 4
  %51 = load i32, i32* %i, align 4
  %arrayidx41 = getelementptr inbounds i32*, i32** %50, i32 %51
  %52 = load i32*, i32** %arrayidx41, align 4
  %53 = load i32, i32* %j, align 4
  %arrayidx42 = getelementptr inbounds i32, i32* %52, i32 %53
  store i32 %49, i32* %arrayidx42, align 4
  br label %if.end43

if.end43:                                         ; preds = %if.then40, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end43
  %54 = load i32, i32* %k, align 4
  %inc = add nsw i32 %54, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond16

for.end:                                          ; preds = %if.then, %for.cond16
  br label %for.inc44

for.inc44:                                        ; preds = %for.end
  %55 = load i32, i32* %j, align 4
  %inc45 = add nsw i32 %55, 1
  store i32 %inc45, i32* %j, align 4
  br label %for.cond9

for.end46:                                        ; preds = %for.cond9
  br label %for.inc47

for.inc47:                                        ; preds = %for.end46
  %56 = load i32, i32* %i, align 4
  %inc48 = add nsw i32 %56, 1
  store i32 %inc48, i32* %i, align 4
  br label %for.cond

for.end49:                                        ; preds = %for.cond
  %57 = load i32, i32* @n, align 4
  %call50 = call noalias i8* @calloc(i32 %57, i32 4)
  %58 = bitcast i8* %call50 to i32*
  store i32* %58, i32** %s, align 4
  %59 = load i32, i32* @n, align 4
  store i32 %59, i32* %i, align 4
  %60 = load i32, i32* %w.addr, align 4
  store i32 %60, i32* %j, align 4
  br label %for.cond51

for.cond51:                                       ; preds = %for.inc78, %for.end49
  %61 = load i32, i32* %i, align 4
  %cmp52 = icmp sgt i32 %61, 0
  br i1 %cmp52, label %for.body53, label %for.end79

for.body53:                                       ; preds = %for.cond51
  %62 = load i32**, i32*** %m, align 4
  %63 = load i32, i32* %i, align 4
  %arrayidx55 = getelementptr inbounds i32*, i32** %62, i32 %63
  %64 = load i32*, i32** %arrayidx55, align 4
  %65 = load i32, i32* %j, align 4
  %arrayidx56 = getelementptr inbounds i32, i32* %64, i32 %65
  %66 = load i32, i32* %arrayidx56, align 4
  store i32 %66, i32* %v54, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond57

for.cond57:                                       ; preds = %for.inc75, %for.body53
  %67 = load i32, i32* %v54, align 4
  %68 = load i32**, i32*** %m, align 4
  %69 = load i32, i32* %i, align 4
  %sub58 = sub nsw i32 %69, 1
  %arrayidx59 = getelementptr inbounds i32*, i32** %68, i32 %sub58
  %70 = load i32*, i32** %arrayidx59, align 4
  %71 = load i32, i32* %j, align 4
  %arrayidx60 = getelementptr inbounds i32, i32* %70, i32 %71
  %72 = load i32, i32* %arrayidx60, align 4
  %73 = load i32, i32* %k, align 4
  %74 = load i32, i32* %i, align 4
  %sub61 = sub nsw i32 %74, 1
  %arrayidx62 = getelementptr inbounds [22 x %struct.item_t], [22 x %struct.item_t]* @items, i32 0, i32 %sub61
  %value63 = getelementptr inbounds %struct.item_t, %struct.item_t* %arrayidx62, i32 0, i32 2
  %75 = load i32, i32* %value63, align 8
  %mul64 = mul nsw i32 %73, %75
  %add65 = add nsw i32 %72, %mul64
  %cmp66 = icmp ne i32 %67, %add65
  br i1 %cmp66, label %for.body67, label %for.end77

for.body67:                                       ; preds = %for.cond57
  %76 = load i32*, i32** %s, align 4
  %77 = load i32, i32* %i, align 4
  %sub68 = sub nsw i32 %77, 1
  %arrayidx69 = getelementptr inbounds i32, i32* %76, i32 %sub68
  %78 = load i32, i32* %arrayidx69, align 4
  %inc70 = add nsw i32 %78, 1
  store i32 %inc70, i32* %arrayidx69, align 4
  %79 = load i32, i32* %i, align 4
  %sub71 = sub nsw i32 %79, 1
  %arrayidx72 = getelementptr inbounds [22 x %struct.item_t], [22 x %struct.item_t]* @items, i32 0, i32 %sub71
  %weight73 = getelementptr inbounds %struct.item_t, %struct.item_t* %arrayidx72, i32 0, i32 1
  %80 = load i32, i32* %weight73, align 4
  %81 = load i32, i32* %j, align 4
  %sub74 = sub nsw i32 %81, %80
  store i32 %sub74, i32* %j, align 4
  br label %for.inc75

for.inc75:                                        ; preds = %for.body67
  %82 = load i32, i32* %k, align 4
  %inc76 = add nsw i32 %82, 1
  store i32 %inc76, i32* %k, align 4
  br label %for.cond57

for.end77:                                        ; preds = %for.cond57
  br label %for.inc78

for.inc78:                                        ; preds = %for.end77
  %83 = load i32, i32* %i, align 4
  %dec = add nsw i32 %83, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond51

for.end79:                                        ; preds = %for.cond51
  %84 = load i32*, i32** %mm, align 4
  %85 = bitcast i32* %84 to i8*
  call void @free(i8* %85)
  %86 = load i32**, i32*** %m, align 4
  %87 = bitcast i32** %86 to i8*
  call void @free(i8* %87)
  %88 = load i32*, i32** %s, align 4
  ret i32* %88
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

declare noalias i8* @malloc(i32 %0) #1

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %tc = alloca i32, align 4
  %tw = alloca i32, align 4
  %tv = alloca i32, align 4
  %s = alloca i32*, align 4
  store i32 0, i32* %retval, align 4
  store i32 0, i32* %tc, align 4
  store i32 0, i32* %tw, align 4
  store i32 0, i32* %tv, align 4
  %call = call i32* @knapsack(i32 400)
  store i32* %call, i32** %s, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @n, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32*, i32** %s, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %2, i32 %3
  %4 = load i32, i32* %arrayidx, align 4
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [22 x %struct.item_t], [22 x %struct.item_t]* @items, i32 0, i32 %5
  %name = getelementptr inbounds %struct.item_t, %struct.item_t* %arrayidx1, i32 0, i32 0
  %6 = load i8*, i8** %name, align 16
  %7 = load i32*, i32** %s, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %7, i32 %8
  %9 = load i32, i32* %arrayidx2, align 4
  %10 = load i32*, i32** %s, align 4
  %11 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i32, i32* %10, i32 %11
  %12 = load i32, i32* %arrayidx3, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds [22 x %struct.item_t], [22 x %struct.item_t]* @items, i32 0, i32 %13
  %weight = getelementptr inbounds %struct.item_t, %struct.item_t* %arrayidx4, i32 0, i32 1
  %14 = load i32, i32* %weight, align 4
  %mul = mul nsw i32 %12, %14
  %15 = load i32*, i32** %s, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %15, i32 %16
  %17 = load i32, i32* %arrayidx5, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds [22 x %struct.item_t], [22 x %struct.item_t]* @items, i32 0, i32 %18
  %value = getelementptr inbounds %struct.item_t, %struct.item_t* %arrayidx6, i32 0, i32 2
  %19 = load i32, i32* %value, align 8
  %mul7 = mul nsw i32 %17, %19
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.22, i32 0, i32 0), i8* %6, i32 %9, i32 %mul, i32 %mul7)
  %20 = load i32*, i32** %s, align 4
  %21 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds i32, i32* %20, i32 %21
  %22 = load i32, i32* %arrayidx9, align 4
  %23 = load i32, i32* %tc, align 4
  %add = add nsw i32 %23, %22
  store i32 %add, i32* %tc, align 4
  %24 = load i32*, i32** %s, align 4
  %25 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %24, i32 %25
  %26 = load i32, i32* %arrayidx10, align 4
  %27 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds [22 x %struct.item_t], [22 x %struct.item_t]* @items, i32 0, i32 %27
  %weight12 = getelementptr inbounds %struct.item_t, %struct.item_t* %arrayidx11, i32 0, i32 1
  %28 = load i32, i32* %weight12, align 4
  %mul13 = mul nsw i32 %26, %28
  %29 = load i32, i32* %tw, align 4
  %add14 = add nsw i32 %29, %mul13
  store i32 %add14, i32* %tw, align 4
  %30 = load i32*, i32** %s, align 4
  %31 = load i32, i32* %i, align 4
  %arrayidx15 = getelementptr inbounds i32, i32* %30, i32 %31
  %32 = load i32, i32* %arrayidx15, align 4
  %33 = load i32, i32* %i, align 4
  %arrayidx16 = getelementptr inbounds [22 x %struct.item_t], [22 x %struct.item_t]* @items, i32 0, i32 %33
  %value17 = getelementptr inbounds %struct.item_t, %struct.item_t* %arrayidx16, i32 0, i32 2
  %34 = load i32, i32* %value17, align 8
  %mul18 = mul nsw i32 %32, %34
  %35 = load i32, i32* %tv, align 4
  %add19 = add nsw i32 %35, %mul18
  store i32 %add19, i32* %tv, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %36 = load i32, i32* %i, align 4
  %inc = add nsw i32 %36, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %37 = load i32, i32* %tc, align 4
  %38 = load i32, i32* %tw, align 4
  %39 = load i32, i32* %tv, align 4
  %call20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.23, i32 0, i32 0), i32 %37, i32 %38, i32 %39)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* @n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %0, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %w.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add1 = add nsw i32 %1, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %add, %add1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = var
%3:i32 = addnsw 1:i32, %2
%4:i32 = mulnsw %1, %3
infer %4

; *****
; For LLVM instruction:
;  %3 = load i32, i32* @n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add2 = add nsw i32 %3, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %mul3 = mul i32 %add2, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = mul 4:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* @n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sle i32 %7, %8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %w.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add5 = add nsw i32 %11, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %mul6 = mul nsw i32 %10, %add5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1
%3:i32 = mulnsw %0, %2
infer %3

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %w.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp10 = icmp sle i32 %14, %15
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %17, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %arrayidx13, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub17 = sub nsw i32 %26, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %count, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp19 = icmp sle i32 %25, %27
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub21 = sub nsw i32 %29, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %weight, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul23 = mul nsw i32 %28, %30
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp24 = icmp sgt i32 %mul23, %31
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i1 = slt %0, %3
infer %4

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub25 = sub nsw i32 %33, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub27 = sub nsw i32 %37, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %38 = load i32, i32* %weight29, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul30 = mul nsw i32 %36, %38
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %sub31 = sub nsw i32 %35, %mul30
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = subnsw %0, %3
infer %4

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %arrayidx32, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %40 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %41 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub33 = sub nsw i32 %41, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %42 = load i32, i32* %value, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul35 = mul nsw i32 %40, %42
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %add36 = add nsw i32 %39, %mul35
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = addnsw %0, %3
infer %4

; *****
; For LLVM instruction:
;  %43 = load i32, i32* %v, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %45 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %47 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %48 = load i32, i32* %arrayidx38, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp39 = icmp sgt i32 %43, %48
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %49 = load i32, i32* %v, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %51 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %53 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %54 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %54, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %55 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc45 = add nsw i32 %55, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %56 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc48 = add nsw i32 %56, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %57 = load i32, i32* @n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %59 = load i32, i32* @n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %60 = load i32, i32* %w.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %61 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp52 = icmp sgt i32 %61, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %63 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %65 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %66 = load i32, i32* %arrayidx56, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %67 = load i32, i32* %v54, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %69 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub58 = sub nsw i32 %69, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %71 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %72 = load i32, i32* %arrayidx60, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %73 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %74 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub61 = sub nsw i32 %74, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %75 = load i32, i32* %value63, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul64 = mul nsw i32 %73, %75
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %add65 = add nsw i32 %72, %mul64
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = addnsw %0, %3
infer %4

; *****
; For LLVM instruction:
;  %cmp66 = icmp ne i32 %67, %add65
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = mulnsw %2, %3
%5:i32 = addnsw %1, %4
%6:i1 = ne %0, %5
infer %6

; *****
; For LLVM instruction:
;  %77 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub68 = sub nsw i32 %77, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %78 = load i32, i32* %arrayidx69, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc70 = add nsw i32 %78, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %79 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub71 = sub nsw i32 %79, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %80 = load i32, i32* %weight73, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %81 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub74 = sub nsw i32 %81, %80
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %82 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc76 = add nsw i32 %82, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %83 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec = add nsw i32 %83, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = var
%3:i32 = addnsw 1:i32, %2
%4:i32 = mulnsw %1, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = mul 4:i32, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 4
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741828
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = addnsw 1:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1
%3:i32 = mulnsw %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i1 = slt %0, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = subnsw %0, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = addnsw %0, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -4
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 7 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = mulnsw %2, %3
%5:i32 = addnsw %1, %4
%6:i1 = ne %0, %5
infer %6


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for knapsack()

; entering Souper's runOnFunction() for main()

; ModuleID = './Knapsack_problem-Bounded.c.bc'
source_filename = "./Knapsack_problem-Bounded.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.item_t = type { i8*, i32, i32, i32 }

@.str = private unnamed_addr constant [4 x i8] c"map\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"compass\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"water\00", align 1
@.str.3 = private unnamed_addr constant [9 x i8] c"sandwich\00", align 1
@.str.4 = private unnamed_addr constant [8 x i8] c"glucose\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"tin\00", align 1
@.str.6 = private unnamed_addr constant [7 x i8] c"banana\00", align 1
@.str.7 = private unnamed_addr constant [6 x i8] c"apple\00", align 1
@.str.8 = private unnamed_addr constant [7 x i8] c"cheese\00", align 1
@.str.9 = private unnamed_addr constant [5 x i8] c"beer\00", align 1
@.str.10 = private unnamed_addr constant [13 x i8] c"suntan cream\00", align 1
@.str.11 = private unnamed_addr constant [7 x i8] c"camera\00", align 1
@.str.12 = private unnamed_addr constant [8 x i8] c"T-shirt\00", align 1
@.str.13 = private unnamed_addr constant [9 x i8] c"trousers\00", align 1
@.str.14 = private unnamed_addr constant [9 x i8] c"umbrella\00", align 1
@.str.15 = private unnamed_addr constant [20 x i8] c"waterproof trousers\00", align 1
@.str.16 = private unnamed_addr constant [23 x i8] c"waterproof overclothes\00", align 1
@.str.17 = private unnamed_addr constant [10 x i8] c"note-case\00", align 1
@.str.18 = private unnamed_addr constant [11 x i8] c"sunglasses\00", align 1
@.str.19 = private unnamed_addr constant [6 x i8] c"towel\00", align 1
@.str.20 = private unnamed_addr constant [6 x i8] c"socks\00", align 1
@.str.21 = private unnamed_addr constant [5 x i8] c"book\00", align 1
@items = hidden global [22 x %struct.item_t] [%struct.item_t { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 9, i32 150, i32 1 }, %struct.item_t { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0), i32 13, i32 35, i32 1 }, %struct.item_t { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), i32 153, i32 200, i32 2 }, %struct.item_t { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), i32 50, i32 60, i32 2 }, %struct.item_t { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i32 0, i32 0), i32 15, i32 60, i32 2 }, %struct.item_t { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 68, i32 45, i32 3 }, %struct.item_t { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i32 0, i32 0), i32 27, i32 60, i32 3 }, %struct.item_t { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i32 0, i32 0), i32 39, i32 40, i32 3 }, %struct.item_t { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i32 0, i32 0), i32 23, i32 30, i32 1 }, %struct.item_t { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i32 0, i32 0), i32 52, i32 10, i32 3 }, %struct.item_t { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.10, i32 0, i32 0), i32 11, i32 70, i32 1 }, %struct.item_t { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i32 0, i32 0), i32 32, i32 30, i32 1 }, %struct.item_t { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.12, i32 0, i32 0), i32 24, i32 15, i32 2 }, %struct.item_t { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.13, i32 0, i32 0), i32 48, i32 10, i32 2 }, %struct.item_t { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.14, i32 0, i32 0), i32 73, i32 40, i32 1 }, %struct.item_t { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.15, i32 0, i32 0), i32 42, i32 70, i32 1 }, %struct.item_t { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.16, i32 0, i32 0), i32 43, i32 75, i32 1 }, %struct.item_t { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.17, i32 0, i32 0), i32 22, i32 80, i32 1 }, %struct.item_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.18, i32 0, i32 0), i32 7, i32 20, i32 1 }, %struct.item_t { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.19, i32 0, i32 0), i32 18, i32 12, i32 2 }, %struct.item_t { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.20, i32 0, i32 0), i32 4, i32 50, i32 1 }, %struct.item_t { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.21, i32 0, i32 0), i32 30, i32 10, i32 2 }], align 16
@n = hidden global i32 22, align 4
@.str.22 = private unnamed_addr constant [19 x i8] c"%-22s %5d %5d %5d\0A\00", align 1
@.str.23 = private unnamed_addr constant [22 x i8] c"count, weight, value:\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32* @knapsack(i32 %w) #0 {
entry:
  %w.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %v = alloca i32, align 4
  %mm = alloca i32*, align 4
  %m = alloca i32**, align 4
  %s = alloca i32*, align 4
  %v54 = alloca i32, align 4
  store i32 %w, i32* %w.addr, align 4
  %0 = load i32, i32* @n, align 4
  %add = add nsw i32 %0, 1
  %1 = load i32, i32* %w.addr, align 4
  %add1 = add nsw i32 %1, 1
  %mul = mul nsw i32 %add, %add1
  %call = call noalias i8* @calloc(i32 %mul, i32 4)
  %2 = bitcast i8* %call to i32*
  store i32* %2, i32** %mm, align 4
  %3 = load i32, i32* @n, align 4
  %add2 = add nsw i32 %3, 1
  %mul3 = mul i32 %add2, 4
  %call4 = call noalias i8* @malloc(i32 %mul3)
  %4 = bitcast i8* %call4 to i32**
  store i32** %4, i32*** %m, align 4
  %5 = load i32*, i32** %mm, align 4
  %6 = load i32**, i32*** %m, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %6, i32 0
  store i32* %5, i32** %arrayidx, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc47, %entry
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* @n, align 4
  %cmp = icmp sle i32 %7, %8
  br i1 %cmp, label %for.body, label %for.end49

for.body:                                         ; preds = %for.cond
  %9 = load i32*, i32** %mm, align 4
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %w.addr, align 4
  %add5 = add nsw i32 %11, 1
  %mul6 = mul nsw i32 %10, %add5
  %arrayidx7 = getelementptr inbounds i32, i32* %9, i32 %mul6
  %12 = load i32**, i32*** %m, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds i32*, i32** %12, i32 %13
  store i32* %arrayidx7, i32** %arrayidx8, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc44, %for.body
  %14 = load i32, i32* %j, align 4
  %15 = load i32, i32* %w.addr, align 4
  %cmp10 = icmp sle i32 %14, %15
  br i1 %cmp10, label %for.body11, label %for.end46

for.body11:                                       ; preds = %for.cond9
  %16 = load i32**, i32*** %m, align 4
  %17 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %17, 1
  %arrayidx12 = getelementptr inbounds i32*, i32** %16, i32 %sub
  %18 = load i32*, i32** %arrayidx12, align 4
  %19 = load i32, i32* %j, align 4
  %arrayidx13 = getelementptr inbounds i32, i32* %18, i32 %19
  %20 = load i32, i32* %arrayidx13, align 4
  %21 = load i32**, i32*** %m, align 4
  %22 = load i32, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds i32*, i32** %21, i32 %22
  %23 = load i32*, i32** %arrayidx14, align 4
  %24 = load i32, i32* %j, align 4
  %arrayidx15 = getelementptr inbounds i32, i32* %23, i32 %24
  store i32 %20, i32* %arrayidx15, align 4
  store i32 1, i32* %k, align 4
  br label %for.cond16

for.cond16:                                       ; preds = %for.inc, %for.body11
  %25 = load i32, i32* %k, align 4
  %26 = load i32, i32* %i, align 4
  %sub17 = sub nsw i32 %26, 1
  %arrayidx18 = getelementptr inbounds [22 x %struct.item_t], [22 x %struct.item_t]* @items, i32 0, i32 %sub17
  %count = getelementptr inbounds %struct.item_t, %struct.item_t* %arrayidx18, i32 0, i32 3
  %27 = load i32, i32* %count, align 4
  %cmp19 = icmp sle i32 %25, %27
  br i1 %cmp19, label %for.body20, label %for.end

for.body20:                                       ; preds = %for.cond16
  %28 = load i32, i32* %k, align 4
  %29 = load i32, i32* %i, align 4
  %sub21 = sub nsw i32 %29, 1
  %arrayidx22 = getelementptr inbounds [22 x %struct.item_t], [22 x %struct.item_t]* @items, i32 0, i32 %sub21
  %weight = getelementptr inbounds %struct.item_t, %struct.item_t* %arrayidx22, i32 0, i32 1
  %30 = load i32, i32* %weight, align 4
  %mul23 = mul nsw i32 %28, %30
  %31 = load i32, i32* %j, align 4
  %cmp24 = icmp sgt i32 %mul23, %31
  br i1 %cmp24, label %if.then, label %if.end

if.then:                                          ; preds = %for.body20
  br label %for.end

if.end:                                           ; preds = %for.body20
  %32 = load i32**, i32*** %m, align 4
  %33 = load i32, i32* %i, align 4
  %sub25 = sub nsw i32 %33, 1
  %arrayidx26 = getelementptr inbounds i32*, i32** %32, i32 %sub25
  %34 = load i32*, i32** %arrayidx26, align 4
  %35 = load i32, i32* %j, align 4
  %36 = load i32, i32* %k, align 4
  %37 = load i32, i32* %i, align 4
  %sub27 = sub nsw i32 %37, 1
  %arrayidx28 = getelementptr inbounds [22 x %struct.item_t], [22 x %struct.item_t]* @items, i32 0, i32 %sub27
  %weight29 = getelementptr inbounds %struct.item_t, %struct.item_t* %arrayidx28, i32 0, i32 1
  %38 = load i32, i32* %weight29, align 4
  %mul30 = mul nsw i32 %36, %38
  %sub31 = sub nsw i32 %35, %mul30
  %arrayidx32 = getelementptr inbounds i32, i32* %34, i32 %sub31
  %39 = load i32, i32* %arrayidx32, align 4
  %40 = load i32, i32* %k, align 4
  %41 = load i32, i32* %i, align 4
  %sub33 = sub nsw i32 %41, 1
  %arrayidx34 = getelementptr inbounds [22 x %struct.item_t], [22 x %struct.item_t]* @items, i32 0, i32 %sub33
  %value = getelementptr inbounds %struct.item_t, %struct.item_t* %arrayidx34, i32 0, i32 2
  %42 = load i32, i32* %value, align 8
  %mul35 = mul nsw i32 %40, %42
  %add36 = add nsw i32 %39, %mul35
  store i32 %add36, i32* %v, align 4
  %43 = load i32, i32* %v, align 4
  %44 = load i32**, i32*** %m, align 4
  %45 = load i32, i32* %i, align 4
  %arrayidx37 = getelementptr inbounds i32*, i32** %44, i32 %45
  %46 = load i32*, i32** %arrayidx37, align 4
  %47 = load i32, i32* %j, align 4
  %arrayidx38 = getelementptr inbounds i32, i32* %46, i32 %47
  %48 = load i32, i32* %arrayidx38, align 4
  %cmp39 = icmp sgt i32 %43, %48
  br i1 %cmp39, label %if.then40, label %if.end43

if.then40:                                        ; preds = %if.end
  %49 = load i32, i32* %v, align 4
  %50 = load i32**, i32*** %m, align 4
  %51 = load i32, i32* %i, align 4
  %arrayidx41 = getelementptr inbounds i32*, i32** %50, i32 %51
  %52 = load i32*, i32** %arrayidx41, align 4
  %53 = load i32, i32* %j, align 4
  %arrayidx42 = getelementptr inbounds i32, i32* %52, i32 %53
  store i32 %49, i32* %arrayidx42, align 4
  br label %if.end43

if.end43:                                         ; preds = %if.then40, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end43
  %54 = load i32, i32* %k, align 4
  %inc = add nsw i32 %54, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond16

for.end:                                          ; preds = %if.then, %for.cond16
  br label %for.inc44

for.inc44:                                        ; preds = %for.end
  %55 = load i32, i32* %j, align 4
  %inc45 = add nsw i32 %55, 1
  store i32 %inc45, i32* %j, align 4
  br label %for.cond9

for.end46:                                        ; preds = %for.cond9
  br label %for.inc47

for.inc47:                                        ; preds = %for.end46
  %56 = load i32, i32* %i, align 4
  %inc48 = add nsw i32 %56, 1
  store i32 %inc48, i32* %i, align 4
  br label %for.cond

for.end49:                                        ; preds = %for.cond
  %57 = load i32, i32* @n, align 4
  %call50 = call noalias i8* @calloc(i32 %57, i32 4)
  %58 = bitcast i8* %call50 to i32*
  store i32* %58, i32** %s, align 4
  %59 = load i32, i32* @n, align 4
  store i32 %59, i32* %i, align 4
  %60 = load i32, i32* %w.addr, align 4
  store i32 %60, i32* %j, align 4
  br label %for.cond51

for.cond51:                                       ; preds = %for.inc78, %for.end49
  %61 = load i32, i32* %i, align 4
  %cmp52 = icmp sgt i32 %61, 0
  br i1 %cmp52, label %for.body53, label %for.end79

for.body53:                                       ; preds = %for.cond51
  %62 = load i32**, i32*** %m, align 4
  %63 = load i32, i32* %i, align 4
  %arrayidx55 = getelementptr inbounds i32*, i32** %62, i32 %63
  %64 = load i32*, i32** %arrayidx55, align 4
  %65 = load i32, i32* %j, align 4
  %arrayidx56 = getelementptr inbounds i32, i32* %64, i32 %65
  %66 = load i32, i32* %arrayidx56, align 4
  store i32 %66, i32* %v54, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond57

for.cond57:                                       ; preds = %for.inc75, %for.body53
  %67 = load i32, i32* %v54, align 4
  %68 = load i32**, i32*** %m, align 4
  %69 = load i32, i32* %i, align 4
  %sub58 = sub nsw i32 %69, 1
  %arrayidx59 = getelementptr inbounds i32*, i32** %68, i32 %sub58
  %70 = load i32*, i32** %arrayidx59, align 4
  %71 = load i32, i32* %j, align 4
  %arrayidx60 = getelementptr inbounds i32, i32* %70, i32 %71
  %72 = load i32, i32* %arrayidx60, align 4
  %73 = load i32, i32* %k, align 4
  %74 = load i32, i32* %i, align 4
  %sub61 = sub nsw i32 %74, 1
  %arrayidx62 = getelementptr inbounds [22 x %struct.item_t], [22 x %struct.item_t]* @items, i32 0, i32 %sub61
  %value63 = getelementptr inbounds %struct.item_t, %struct.item_t* %arrayidx62, i32 0, i32 2
  %75 = load i32, i32* %value63, align 8
  %mul64 = mul nsw i32 %73, %75
  %add65 = add nsw i32 %72, %mul64
  %cmp66 = icmp ne i32 %67, %add65
  br i1 %cmp66, label %for.body67, label %for.end77

for.body67:                                       ; preds = %for.cond57
  %76 = load i32*, i32** %s, align 4
  %77 = load i32, i32* %i, align 4
  %sub68 = sub nsw i32 %77, 1
  %arrayidx69 = getelementptr inbounds i32, i32* %76, i32 %sub68
  %78 = load i32, i32* %arrayidx69, align 4
  %inc70 = add nsw i32 %78, 1
  store i32 %inc70, i32* %arrayidx69, align 4
  %79 = load i32, i32* %i, align 4
  %sub71 = sub nsw i32 %79, 1
  %arrayidx72 = getelementptr inbounds [22 x %struct.item_t], [22 x %struct.item_t]* @items, i32 0, i32 %sub71
  %weight73 = getelementptr inbounds %struct.item_t, %struct.item_t* %arrayidx72, i32 0, i32 1
  %80 = load i32, i32* %weight73, align 4
  %81 = load i32, i32* %j, align 4
  %sub74 = sub nsw i32 %81, %80
  store i32 %sub74, i32* %j, align 4
  br label %for.inc75

for.inc75:                                        ; preds = %for.body67
  %82 = load i32, i32* %k, align 4
  %inc76 = add nsw i32 %82, 1
  store i32 %inc76, i32* %k, align 4
  br label %for.cond57

for.end77:                                        ; preds = %for.cond57
  br label %for.inc78

for.inc78:                                        ; preds = %for.end77
  %83 = load i32, i32* %i, align 4
  %dec = add nsw i32 %83, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond51

for.end79:                                        ; preds = %for.cond51
  %84 = load i32*, i32** %mm, align 4
  %85 = bitcast i32* %84 to i8*
  call void @free(i8* %85)
  %86 = load i32**, i32*** %m, align 4
  %87 = bitcast i32** %86 to i8*
  call void @free(i8* %87)
  %88 = load i32*, i32** %s, align 4
  ret i32* %88
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

declare noalias i8* @malloc(i32 %0) #1

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %tc = alloca i32, align 4
  %tw = alloca i32, align 4
  %tv = alloca i32, align 4
  %s = alloca i32*, align 4
  store i32 0, i32* %retval, align 4
  store i32 0, i32* %tc, align 4
  store i32 0, i32* %tw, align 4
  store i32 0, i32* %tv, align 4
  %call = call i32* @knapsack(i32 400)
  store i32* %call, i32** %s, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* @n, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32*, i32** %s, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %2, i32 %3
  %4 = load i32, i32* %arrayidx, align 4
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [22 x %struct.item_t], [22 x %struct.item_t]* @items, i32 0, i32 %5
  %name = getelementptr inbounds %struct.item_t, %struct.item_t* %arrayidx1, i32 0, i32 0
  %6 = load i8*, i8** %name, align 16
  %7 = load i32*, i32** %s, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %7, i32 %8
  %9 = load i32, i32* %arrayidx2, align 4
  %10 = load i32*, i32** %s, align 4
  %11 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i32, i32* %10, i32 %11
  %12 = load i32, i32* %arrayidx3, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds [22 x %struct.item_t], [22 x %struct.item_t]* @items, i32 0, i32 %13
  %weight = getelementptr inbounds %struct.item_t, %struct.item_t* %arrayidx4, i32 0, i32 1
  %14 = load i32, i32* %weight, align 4
  %mul = mul nsw i32 %12, %14
  %15 = load i32*, i32** %s, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %15, i32 %16
  %17 = load i32, i32* %arrayidx5, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds [22 x %struct.item_t], [22 x %struct.item_t]* @items, i32 0, i32 %18
  %value = getelementptr inbounds %struct.item_t, %struct.item_t* %arrayidx6, i32 0, i32 2
  %19 = load i32, i32* %value, align 8
  %mul7 = mul nsw i32 %17, %19
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.22, i32 0, i32 0), i8* %6, i32 %9, i32 %mul, i32 %mul7)
  %20 = load i32*, i32** %s, align 4
  %21 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds i32, i32* %20, i32 %21
  %22 = load i32, i32* %arrayidx9, align 4
  %23 = load i32, i32* %tc, align 4
  %add = add nsw i32 %23, %22
  store i32 %add, i32* %tc, align 4
  %24 = load i32*, i32** %s, align 4
  %25 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %24, i32 %25
  %26 = load i32, i32* %arrayidx10, align 4
  %27 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds [22 x %struct.item_t], [22 x %struct.item_t]* @items, i32 0, i32 %27
  %weight12 = getelementptr inbounds %struct.item_t, %struct.item_t* %arrayidx11, i32 0, i32 1
  %28 = load i32, i32* %weight12, align 4
  %mul13 = mul nsw i32 %26, %28
  %29 = load i32, i32* %tw, align 4
  %add14 = add nsw i32 %29, %mul13
  store i32 %add14, i32* %tw, align 4
  %30 = load i32*, i32** %s, align 4
  %31 = load i32, i32* %i, align 4
  %arrayidx15 = getelementptr inbounds i32, i32* %30, i32 %31
  %32 = load i32, i32* %arrayidx15, align 4
  %33 = load i32, i32* %i, align 4
  %arrayidx16 = getelementptr inbounds [22 x %struct.item_t], [22 x %struct.item_t]* @items, i32 0, i32 %33
  %value17 = getelementptr inbounds %struct.item_t, %struct.item_t* %arrayidx16, i32 0, i32 2
  %34 = load i32, i32* %value17, align 8
  %mul18 = mul nsw i32 %32, %34
  %35 = load i32, i32* %tv, align 4
  %add19 = add nsw i32 %35, %mul18
  store i32 %add19, i32* %tv, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %36 = load i32, i32* %i, align 4
  %inc = add nsw i32 %36, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %37 = load i32, i32* %tc, align 4
  %38 = load i32, i32* %tw, align 4
  %39 = load i32, i32* %tv, align 4
  %call20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.23, i32 0, i32 0), i32 %37, i32 %38, i32 %39)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* @n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %4, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %arrayidx2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %arrayidx3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %weight, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %12, %14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %arrayidx5, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %value, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul7 = mul nsw i32 %17, %19
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %arrayidx9, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %tc, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %23, %22
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %arrayidx10, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %weight12, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul13 = mul nsw i32 %26, %28
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %tw, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add14 = add nsw i32 %29, %mul13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = addnsw %0, %3
infer %4

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %arrayidx15, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %value17, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul18 = mul nsw i32 %32, %34
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %tv, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add19 = add nsw i32 %35, %mul18
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = addnsw %0, %3
infer %4

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %36, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %tc, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %38 = load i32, i32* %tw, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %tv, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
