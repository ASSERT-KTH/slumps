
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for trie_new()

; ModuleID = './Inverted_index.c.bc'
source_filename = "./Inverted_index.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.trie_t = type { [41 x %struct.trie_t*], i32 }

@chr_legal = hidden global [41 x i8] c"abcdefghijklmnopqrstuvwxyz0123456789_-./\00", align 16
@chr_idx = hidden global [256 x i32] zeroinitializer, align 16
@idx_chr = hidden global [256 x i8] zeroinitializer, align 16
@.str = private unnamed_addr constant [4 x i8] c" %s\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"f1.txt\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"source/f2.txt\00", align 1
@.str.3 = private unnamed_addr constant [11 x i8] c"other_file\00", align 1
@files = hidden global [3 x i8*] [i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i32 0, i32 0)], align 4
@.str.4 = private unnamed_addr constant [3 x i8] c"it\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"is\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"what\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"a\00", align 1
@.str.8 = private unnamed_addr constant [7 x i8] c"banana\00", align 1
@text = hidden global [3 x [5 x i8*]] [[5 x i8*] [i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0)], [5 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i8* null, i8* null], [5 x i8*] [i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i32 0, i32 0), i8* null]], align 16
@.str.9 = private unnamed_addr constant [18 x i8] c"Search for \22%s\22: \00", align 1
@.str.10 = private unnamed_addr constant [11 x i8] c"not found\0A\00", align 1
@.str.11 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.12 = private unnamed_addr constant [4 x i8] c"boo\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.trie_t* @trie_new() #0 {
entry:
  %call = call noalias i8* @calloc(i32 168, i32 1)
  %0 = bitcast i8* %call to %struct.trie_t*
  ret %struct.trie_t* %0
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.trie_t* @trie_trav(%struct.trie_t* %root, i8* %str, i32 %no_create) #0 {
entry:
  %retval = alloca %struct.trie_t*, align 4
  %root.addr = alloca %struct.trie_t*, align 4
  %str.addr = alloca i8*, align 4
  %no_create.addr = alloca i32, align 4
  %c = alloca i32, align 4
  store %struct.trie_t* %root, %struct.trie_t** %root.addr, align 4
  store i8* %str, i8** %str.addr, align 4
  store i32 %no_create, i32* %no_create.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end18, %if.then8, %entry
  %0 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %tobool = icmp ne %struct.trie_t* %0, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i8*, i8** %str.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %1, i32 0
  %2 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %2 to i32
  store i32 %conv, i32* %c, align 4
  %cmp = icmp eq i32 %conv, 0
  br i1 %cmp, label %if.then, label %if.end5

if.then:                                          ; preds = %while.body
  %3 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %eow = getelementptr inbounds %struct.trie_t, %struct.trie_t* %3, i32 0, i32 1
  %4 = load i32, i32* %eow, align 4
  %tobool2 = icmp ne i32 %4, 0
  br i1 %tobool2, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.then
  %5 = load i32, i32* %no_create.addr, align 4
  %tobool3 = icmp ne i32 %5, 0
  br i1 %tobool3, label %if.then4, label %if.end

if.then4:                                         ; preds = %land.lhs.true
  store %struct.trie_t* null, %struct.trie_t** %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true, %if.then
  br label %while.end

if.end5:                                          ; preds = %while.body
  %6 = load i32, i32* %c, align 4
  %arrayidx6 = getelementptr inbounds [256 x i32], [256 x i32]* @chr_idx, i32 0, i32 %6
  %7 = load i32, i32* %arrayidx6, align 4
  store i32 %7, i32* %c, align 4
  %tobool7 = icmp ne i32 %7, 0
  br i1 %tobool7, label %if.end9, label %if.then8

if.then8:                                         ; preds = %if.end5
  %8 = load i8*, i8** %str.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %8, i32 1
  store i8* %incdec.ptr, i8** %str.addr, align 4
  br label %while.cond

if.end9:                                          ; preds = %if.end5
  %9 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %next = getelementptr inbounds %struct.trie_t, %struct.trie_t* %9, i32 0, i32 0
  %10 = load i32, i32* %c, align 4
  %arrayidx10 = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next, i32 0, i32 %10
  %11 = load %struct.trie_t*, %struct.trie_t** %arrayidx10, align 4
  %tobool11 = icmp ne %struct.trie_t* %11, null
  br i1 %tobool11, label %if.end18, label %if.then12

if.then12:                                        ; preds = %if.end9
  %12 = load i32, i32* %no_create.addr, align 4
  %tobool13 = icmp ne i32 %12, 0
  br i1 %tobool13, label %if.then14, label %if.end15

if.then14:                                        ; preds = %if.then12
  store %struct.trie_t* null, %struct.trie_t** %retval, align 4
  br label %return

if.end15:                                         ; preds = %if.then12
  %call = call %struct.trie_t* @trie_new()
  %13 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %next16 = getelementptr inbounds %struct.trie_t, %struct.trie_t* %13, i32 0, i32 0
  %14 = load i32, i32* %c, align 4
  %arrayidx17 = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next16, i32 0, i32 %14
  store %struct.trie_t* %call, %struct.trie_t** %arrayidx17, align 4
  br label %if.end18

if.end18:                                         ; preds = %if.end15, %if.end9
  %15 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %next19 = getelementptr inbounds %struct.trie_t, %struct.trie_t* %15, i32 0, i32 0
  %16 = load i32, i32* %c, align 4
  %arrayidx20 = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next19, i32 0, i32 %16
  %17 = load %struct.trie_t*, %struct.trie_t** %arrayidx20, align 4
  store %struct.trie_t* %17, %struct.trie_t** %root.addr, align 4
  %18 = load i8*, i8** %str.addr, align 4
  %incdec.ptr21 = getelementptr inbounds i8, i8* %18, i32 1
  store i8* %incdec.ptr21, i8** %str.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %if.end, %while.cond
  %19 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  store %struct.trie_t* %19, %struct.trie_t** %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then14, %if.then4
  %20 = load %struct.trie_t*, %struct.trie_t** %retval, align 4
  ret %struct.trie_t* %20
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @trie_all(%struct.trie_t* %root, i8* %path, i32 %depth, i32 (i8*)* %callback) #0 {
entry:
  %retval = alloca i32, align 4
  %root.addr = alloca %struct.trie_t*, align 4
  %path.addr = alloca i8*, align 4
  %depth.addr = alloca i32, align 4
  %callback.addr = alloca i32 (i8*)*, align 4
  %i = alloca i32, align 4
  store %struct.trie_t* %root, %struct.trie_t** %root.addr, align 4
  store i8* %path, i8** %path.addr, align 4
  store i32 %depth, i32* %depth.addr, align 4
  store i32 (i8*)* %callback, i32 (i8*)** %callback.addr, align 4
  %0 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %eow = getelementptr inbounds %struct.trie_t, %struct.trie_t* %0, i32 0, i32 1
  %1 = load i32, i32* %eow, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load i32 (i8*)*, i32 (i8*)** %callback.addr, align 4
  %3 = load i8*, i8** %path.addr, align 4
  %call = call i32 %2(i8* %3)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %4 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %4, 41
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %next = getelementptr inbounds %struct.trie_t, %struct.trie_t* %5, i32 0, i32 0
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next, i32 0, i32 %6
  %7 = load %struct.trie_t*, %struct.trie_t** %arrayidx, align 4
  %tobool2 = icmp ne %struct.trie_t* %7, null
  br i1 %tobool2, label %if.end4, label %if.then3

if.then3:                                         ; preds = %for.body
  br label %for.inc

if.end4:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds [256 x i8], [256 x i8]* @idx_chr, i32 0, i32 %8
  %9 = load i8, i8* %arrayidx5, align 1
  %10 = load i8*, i8** %path.addr, align 4
  %11 = load i32, i32* %depth.addr, align 4
  %arrayidx6 = getelementptr inbounds i8, i8* %10, i32 %11
  store i8 %9, i8* %arrayidx6, align 1
  %12 = load i8*, i8** %path.addr, align 4
  %13 = load i32, i32* %depth.addr, align 4
  %add = add nsw i32 %13, 1
  %arrayidx7 = getelementptr inbounds i8, i8* %12, i32 %add
  store i8 0, i8* %arrayidx7, align 1
  %14 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %next8 = getelementptr inbounds %struct.trie_t, %struct.trie_t* %14, i32 0, i32 0
  %15 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next8, i32 0, i32 %15
  %16 = load %struct.trie_t*, %struct.trie_t** %arrayidx9, align 4
  %17 = load i8*, i8** %path.addr, align 4
  %18 = load i32, i32* %depth.addr, align 4
  %add10 = add nsw i32 %18, 1
  %19 = load i32 (i8*)*, i32 (i8*)** %callback.addr, align 4
  %call11 = call i32 @trie_all(%struct.trie_t* %16, i8* %17, i32 %add10, i32 (i8*)* %19)
  %tobool12 = icmp ne i32 %call11, 0
  br i1 %tobool12, label %if.end14, label %if.then13

if.then13:                                        ; preds = %if.end4
  store i32 0, i32* %retval, align 4
  br label %return

if.end14:                                         ; preds = %if.end4
  br label %for.inc

for.inc:                                          ; preds = %if.end14, %if.then3
  %20 = load i32, i32* %i, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then13, %if.then
  %21 = load i32, i32* %retval, align 4
  ret i32 %21
}

; Function Attrs: noinline nounwind optnone
define hidden void @add_index(%struct.trie_t* %root, i8* %word, i8* %fname) #0 {
entry:
  %root.addr = alloca %struct.trie_t*, align 4
  %word.addr = alloca i8*, align 4
  %fname.addr = alloca i8*, align 4
  %x = alloca %struct.trie_t*, align 4
  store %struct.trie_t* %root, %struct.trie_t** %root.addr, align 4
  store i8* %word, i8** %word.addr, align 4
  store i8* %fname, i8** %fname.addr, align 4
  %0 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %1 = load i8*, i8** %word.addr, align 4
  %call = call %struct.trie_t* @trie_trav(%struct.trie_t* %0, i8* %1, i32 0)
  store %struct.trie_t* %call, %struct.trie_t** %x, align 4
  %2 = load %struct.trie_t*, %struct.trie_t** %x, align 4
  %eow = getelementptr inbounds %struct.trie_t, %struct.trie_t* %2, i32 0, i32 1
  store i32 1, i32* %eow, align 4
  %3 = load %struct.trie_t*, %struct.trie_t** %x, align 4
  %next = getelementptr inbounds %struct.trie_t, %struct.trie_t* %3, i32 0, i32 0
  %arrayidx = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next, i32 0, i32 0
  %4 = load %struct.trie_t*, %struct.trie_t** %arrayidx, align 4
  %tobool = icmp ne %struct.trie_t* %4, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call1 = call %struct.trie_t* @trie_new()
  %5 = load %struct.trie_t*, %struct.trie_t** %x, align 4
  %next2 = getelementptr inbounds %struct.trie_t, %struct.trie_t* %5, i32 0, i32 0
  %arrayidx3 = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next2, i32 0, i32 0
  store %struct.trie_t* %call1, %struct.trie_t** %arrayidx3, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.trie_t*, %struct.trie_t** %x, align 4
  %next4 = getelementptr inbounds %struct.trie_t, %struct.trie_t* %6, i32 0, i32 0
  %arrayidx5 = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next4, i32 0, i32 0
  %7 = load %struct.trie_t*, %struct.trie_t** %arrayidx5, align 4
  %8 = load i8*, i8** %fname.addr, align 4
  %call6 = call %struct.trie_t* @trie_trav(%struct.trie_t* %7, i8* %8, i32 0)
  store %struct.trie_t* %call6, %struct.trie_t** %x, align 4
  %9 = load %struct.trie_t*, %struct.trie_t** %x, align 4
  %eow7 = getelementptr inbounds %struct.trie_t, %struct.trie_t* %9, i32 0, i32 1
  store i32 1, i32* %eow7, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @print_path(i8* %path) #0 {
entry:
  %path.addr = alloca i8*, align 4
  store i8* %path, i8** %path.addr, align 4
  %0 = load i8*, i8** %path.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* %0)
  ret i32 1
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.trie_t* @init_tables() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %root = alloca %struct.trie_t*, align 4
  %call = call %struct.trie_t* @trie_new()
  store %struct.trie_t* %call, %struct.trie_t** %root, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %0, 41
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %add = add nsw i32 %1, 1
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [41 x i8], [41 x i8]* @chr_legal, i32 0, i32 %2
  %3 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %3 to i32
  %arrayidx1 = getelementptr inbounds [256 x i32], [256 x i32]* @chr_idx, i32 0, i32 %conv
  store i32 %add, i32* %arrayidx1, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds [41 x i8], [41 x i8]* @chr_legal, i32 0, i32 %4
  %5 = load i8, i8* %arrayidx2, align 1
  %6 = load i32, i32* %i, align 4
  %add3 = add nsw i32 %6, 1
  %arrayidx4 = getelementptr inbounds [256 x i8], [256 x i8]* @idx_chr, i32 0, i32 %add3
  store i8 %5, i8* %arrayidx4, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc21, %for.end
  %8 = load i32, i32* %i, align 4
  %cmp6 = icmp slt i32 %8, 3
  br i1 %cmp6, label %for.body8, label %for.end23

for.body8:                                        ; preds = %for.cond5
  store i32 0, i32* %j, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc18, %for.body8
  %9 = load i32, i32* %j, align 4
  %cmp10 = icmp slt i32 %9, 5
  br i1 %cmp10, label %for.body12, label %for.end20

for.body12:                                       ; preds = %for.cond9
  %10 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds [3 x [5 x i8*]], [3 x [5 x i8*]]* @text, i32 0, i32 %10
  %11 = load i32, i32* %j, align 4
  %arrayidx14 = getelementptr inbounds [5 x i8*], [5 x i8*]* %arrayidx13, i32 0, i32 %11
  %12 = load i8*, i8** %arrayidx14, align 4
  %tobool = icmp ne i8* %12, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.body12
  br label %for.end20

if.end:                                           ; preds = %for.body12
  %13 = load %struct.trie_t*, %struct.trie_t** %root, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx15 = getelementptr inbounds [3 x [5 x i8*]], [3 x [5 x i8*]]* @text, i32 0, i32 %14
  %15 = load i32, i32* %j, align 4
  %arrayidx16 = getelementptr inbounds [5 x i8*], [5 x i8*]* %arrayidx15, i32 0, i32 %15
  %16 = load i8*, i8** %arrayidx16, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx17 = getelementptr inbounds [3 x i8*], [3 x i8*]* @files, i32 0, i32 %17
  %18 = load i8*, i8** %arrayidx17, align 4
  call void @add_index(%struct.trie_t* %13, i8* %16, i8* %18)
  br label %for.inc18

for.inc18:                                        ; preds = %if.end
  %19 = load i32, i32* %j, align 4
  %inc19 = add nsw i32 %19, 1
  store i32 %inc19, i32* %j, align 4
  br label %for.cond9

for.end20:                                        ; preds = %if.then, %for.cond9
  br label %for.inc21

for.inc21:                                        ; preds = %for.end20
  %20 = load i32, i32* %i, align 4
  %inc22 = add nsw i32 %20, 1
  store i32 %inc22, i32* %i, align 4
  br label %for.cond5

for.end23:                                        ; preds = %for.cond5
  %21 = load %struct.trie_t*, %struct.trie_t** %root, align 4
  ret %struct.trie_t* %21
}

; Function Attrs: noinline nounwind optnone
define hidden void @search_index(%struct.trie_t* %root, i8* %word) #0 {
entry:
  %root.addr = alloca %struct.trie_t*, align 4
  %word.addr = alloca i8*, align 4
  %path = alloca [1024 x i8], align 16
  %found = alloca %struct.trie_t*, align 4
  store %struct.trie_t* %root, %struct.trie_t** %root.addr, align 4
  store i8* %word, i8** %word.addr, align 4
  %0 = load i8*, i8** %word.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.9, i32 0, i32 0), i8* %0)
  %1 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %2 = load i8*, i8** %word.addr, align 4
  %call1 = call %struct.trie_t* @trie_trav(%struct.trie_t* %1, i8* %2, i32 1)
  store %struct.trie_t* %call1, %struct.trie_t** %found, align 4
  %3 = load %struct.trie_t*, %struct.trie_t** %found, align 4
  %tobool = icmp ne %struct.trie_t* %3, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.10, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %entry
  %4 = load %struct.trie_t*, %struct.trie_t** %found, align 4
  %next = getelementptr inbounds %struct.trie_t, %struct.trie_t* %4, i32 0, i32 0
  %arrayidx = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next, i32 0, i32 0
  %5 = load %struct.trie_t*, %struct.trie_t** %arrayidx, align 4
  %arraydecay = getelementptr inbounds [1024 x i8], [1024 x i8]* %path, i32 0, i32 0
  %call3 = call i32 @trie_all(%struct.trie_t* %5, i8* %arraydecay, i32 0, i32 (i8*)* @print_path)
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %root = alloca %struct.trie_t*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.trie_t* @init_tables()
  store %struct.trie_t* %call, %struct.trie_t** %root, align 4
  %0 = load %struct.trie_t*, %struct.trie_t** %root, align 4
  call void @search_index(%struct.trie_t* %0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0))
  %1 = load %struct.trie_t*, %struct.trie_t** %root, align 4
  call void @search_index(%struct.trie_t* %1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0))
  %2 = load %struct.trie_t*, %struct.trie_t** %root, align 4
  call void @search_index(%struct.trie_t* %2, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i32 0, i32 0))
  %3 = load %struct.trie_t*, %struct.trie_t** %root, align 4
  call void @search_index(%struct.trie_t* %3, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.12, i32 0, i32 0))
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for trie_new()

; entering Souper's runOnFunction() for trie_trav()

; ModuleID = './Inverted_index.c.bc'
source_filename = "./Inverted_index.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.trie_t = type { [41 x %struct.trie_t*], i32 }

@chr_legal = hidden global [41 x i8] c"abcdefghijklmnopqrstuvwxyz0123456789_-./\00", align 16
@chr_idx = hidden global [256 x i32] zeroinitializer, align 16
@idx_chr = hidden global [256 x i8] zeroinitializer, align 16
@.str = private unnamed_addr constant [4 x i8] c" %s\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"f1.txt\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"source/f2.txt\00", align 1
@.str.3 = private unnamed_addr constant [11 x i8] c"other_file\00", align 1
@files = hidden global [3 x i8*] [i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i32 0, i32 0)], align 4
@.str.4 = private unnamed_addr constant [3 x i8] c"it\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"is\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"what\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"a\00", align 1
@.str.8 = private unnamed_addr constant [7 x i8] c"banana\00", align 1
@text = hidden global [3 x [5 x i8*]] [[5 x i8*] [i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0)], [5 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i8* null, i8* null], [5 x i8*] [i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i32 0, i32 0), i8* null]], align 16
@.str.9 = private unnamed_addr constant [18 x i8] c"Search for \22%s\22: \00", align 1
@.str.10 = private unnamed_addr constant [11 x i8] c"not found\0A\00", align 1
@.str.11 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.12 = private unnamed_addr constant [4 x i8] c"boo\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.trie_t* @trie_new() #0 {
entry:
  %call = call noalias i8* @calloc(i32 168, i32 1)
  %0 = bitcast i8* %call to %struct.trie_t*
  ret %struct.trie_t* %0
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.trie_t* @trie_trav(%struct.trie_t* %root, i8* %str, i32 %no_create) #0 {
entry:
  %retval = alloca %struct.trie_t*, align 4
  %root.addr = alloca %struct.trie_t*, align 4
  %str.addr = alloca i8*, align 4
  %no_create.addr = alloca i32, align 4
  %c = alloca i32, align 4
  store %struct.trie_t* %root, %struct.trie_t** %root.addr, align 4
  store i8* %str, i8** %str.addr, align 4
  store i32 %no_create, i32* %no_create.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end18, %if.then8, %entry
  %0 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %tobool = icmp ne %struct.trie_t* %0, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i8*, i8** %str.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %1, i32 0
  %2 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %2 to i32
  store i32 %conv, i32* %c, align 4
  %cmp = icmp eq i32 %conv, 0
  br i1 %cmp, label %if.then, label %if.end5

if.then:                                          ; preds = %while.body
  %3 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %eow = getelementptr inbounds %struct.trie_t, %struct.trie_t* %3, i32 0, i32 1
  %4 = load i32, i32* %eow, align 4
  %tobool2 = icmp ne i32 %4, 0
  br i1 %tobool2, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.then
  %5 = load i32, i32* %no_create.addr, align 4
  %tobool3 = icmp ne i32 %5, 0
  br i1 %tobool3, label %if.then4, label %if.end

if.then4:                                         ; preds = %land.lhs.true
  store %struct.trie_t* null, %struct.trie_t** %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true, %if.then
  br label %while.end

if.end5:                                          ; preds = %while.body
  %6 = load i32, i32* %c, align 4
  %arrayidx6 = getelementptr inbounds [256 x i32], [256 x i32]* @chr_idx, i32 0, i32 %6
  %7 = load i32, i32* %arrayidx6, align 4
  store i32 %7, i32* %c, align 4
  %tobool7 = icmp ne i32 %7, 0
  br i1 %tobool7, label %if.end9, label %if.then8

if.then8:                                         ; preds = %if.end5
  %8 = load i8*, i8** %str.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %8, i32 1
  store i8* %incdec.ptr, i8** %str.addr, align 4
  br label %while.cond

if.end9:                                          ; preds = %if.end5
  %9 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %next = getelementptr inbounds %struct.trie_t, %struct.trie_t* %9, i32 0, i32 0
  %10 = load i32, i32* %c, align 4
  %arrayidx10 = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next, i32 0, i32 %10
  %11 = load %struct.trie_t*, %struct.trie_t** %arrayidx10, align 4
  %tobool11 = icmp ne %struct.trie_t* %11, null
  br i1 %tobool11, label %if.end18, label %if.then12

if.then12:                                        ; preds = %if.end9
  %12 = load i32, i32* %no_create.addr, align 4
  %tobool13 = icmp ne i32 %12, 0
  br i1 %tobool13, label %if.then14, label %if.end15

if.then14:                                        ; preds = %if.then12
  store %struct.trie_t* null, %struct.trie_t** %retval, align 4
  br label %return

if.end15:                                         ; preds = %if.then12
  %call = call %struct.trie_t* @trie_new()
  %13 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %next16 = getelementptr inbounds %struct.trie_t, %struct.trie_t* %13, i32 0, i32 0
  %14 = load i32, i32* %c, align 4
  %arrayidx17 = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next16, i32 0, i32 %14
  store %struct.trie_t* %call, %struct.trie_t** %arrayidx17, align 4
  br label %if.end18

if.end18:                                         ; preds = %if.end15, %if.end9
  %15 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %next19 = getelementptr inbounds %struct.trie_t, %struct.trie_t* %15, i32 0, i32 0
  %16 = load i32, i32* %c, align 4
  %arrayidx20 = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next19, i32 0, i32 %16
  %17 = load %struct.trie_t*, %struct.trie_t** %arrayidx20, align 4
  store %struct.trie_t* %17, %struct.trie_t** %root.addr, align 4
  %18 = load i8*, i8** %str.addr, align 4
  %incdec.ptr21 = getelementptr inbounds i8, i8* %18, i32 1
  store i8* %incdec.ptr21, i8** %str.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %if.end, %while.cond
  %19 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  store %struct.trie_t* %19, %struct.trie_t** %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then14, %if.then4
  %20 = load %struct.trie_t*, %struct.trie_t** %retval, align 4
  ret %struct.trie_t* %20
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @trie_all(%struct.trie_t* %root, i8* %path, i32 %depth, i32 (i8*)* %callback) #0 {
entry:
  %retval = alloca i32, align 4
  %root.addr = alloca %struct.trie_t*, align 4
  %path.addr = alloca i8*, align 4
  %depth.addr = alloca i32, align 4
  %callback.addr = alloca i32 (i8*)*, align 4
  %i = alloca i32, align 4
  store %struct.trie_t* %root, %struct.trie_t** %root.addr, align 4
  store i8* %path, i8** %path.addr, align 4
  store i32 %depth, i32* %depth.addr, align 4
  store i32 (i8*)* %callback, i32 (i8*)** %callback.addr, align 4
  %0 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %eow = getelementptr inbounds %struct.trie_t, %struct.trie_t* %0, i32 0, i32 1
  %1 = load i32, i32* %eow, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load i32 (i8*)*, i32 (i8*)** %callback.addr, align 4
  %3 = load i8*, i8** %path.addr, align 4
  %call = call i32 %2(i8* %3)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %4 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %4, 41
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %next = getelementptr inbounds %struct.trie_t, %struct.trie_t* %5, i32 0, i32 0
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next, i32 0, i32 %6
  %7 = load %struct.trie_t*, %struct.trie_t** %arrayidx, align 4
  %tobool2 = icmp ne %struct.trie_t* %7, null
  br i1 %tobool2, label %if.end4, label %if.then3

if.then3:                                         ; preds = %for.body
  br label %for.inc

if.end4:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds [256 x i8], [256 x i8]* @idx_chr, i32 0, i32 %8
  %9 = load i8, i8* %arrayidx5, align 1
  %10 = load i8*, i8** %path.addr, align 4
  %11 = load i32, i32* %depth.addr, align 4
  %arrayidx6 = getelementptr inbounds i8, i8* %10, i32 %11
  store i8 %9, i8* %arrayidx6, align 1
  %12 = load i8*, i8** %path.addr, align 4
  %13 = load i32, i32* %depth.addr, align 4
  %add = add nsw i32 %13, 1
  %arrayidx7 = getelementptr inbounds i8, i8* %12, i32 %add
  store i8 0, i8* %arrayidx7, align 1
  %14 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %next8 = getelementptr inbounds %struct.trie_t, %struct.trie_t* %14, i32 0, i32 0
  %15 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next8, i32 0, i32 %15
  %16 = load %struct.trie_t*, %struct.trie_t** %arrayidx9, align 4
  %17 = load i8*, i8** %path.addr, align 4
  %18 = load i32, i32* %depth.addr, align 4
  %add10 = add nsw i32 %18, 1
  %19 = load i32 (i8*)*, i32 (i8*)** %callback.addr, align 4
  %call11 = call i32 @trie_all(%struct.trie_t* %16, i8* %17, i32 %add10, i32 (i8*)* %19)
  %tobool12 = icmp ne i32 %call11, 0
  br i1 %tobool12, label %if.end14, label %if.then13

if.then13:                                        ; preds = %if.end4
  store i32 0, i32* %retval, align 4
  br label %return

if.end14:                                         ; preds = %if.end4
  br label %for.inc

for.inc:                                          ; preds = %if.end14, %if.then3
  %20 = load i32, i32* %i, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then13, %if.then
  %21 = load i32, i32* %retval, align 4
  ret i32 %21
}

; Function Attrs: noinline nounwind optnone
define hidden void @add_index(%struct.trie_t* %root, i8* %word, i8* %fname) #0 {
entry:
  %root.addr = alloca %struct.trie_t*, align 4
  %word.addr = alloca i8*, align 4
  %fname.addr = alloca i8*, align 4
  %x = alloca %struct.trie_t*, align 4
  store %struct.trie_t* %root, %struct.trie_t** %root.addr, align 4
  store i8* %word, i8** %word.addr, align 4
  store i8* %fname, i8** %fname.addr, align 4
  %0 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %1 = load i8*, i8** %word.addr, align 4
  %call = call %struct.trie_t* @trie_trav(%struct.trie_t* %0, i8* %1, i32 0)
  store %struct.trie_t* %call, %struct.trie_t** %x, align 4
  %2 = load %struct.trie_t*, %struct.trie_t** %x, align 4
  %eow = getelementptr inbounds %struct.trie_t, %struct.trie_t* %2, i32 0, i32 1
  store i32 1, i32* %eow, align 4
  %3 = load %struct.trie_t*, %struct.trie_t** %x, align 4
  %next = getelementptr inbounds %struct.trie_t, %struct.trie_t* %3, i32 0, i32 0
  %arrayidx = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next, i32 0, i32 0
  %4 = load %struct.trie_t*, %struct.trie_t** %arrayidx, align 4
  %tobool = icmp ne %struct.trie_t* %4, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call1 = call %struct.trie_t* @trie_new()
  %5 = load %struct.trie_t*, %struct.trie_t** %x, align 4
  %next2 = getelementptr inbounds %struct.trie_t, %struct.trie_t* %5, i32 0, i32 0
  %arrayidx3 = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next2, i32 0, i32 0
  store %struct.trie_t* %call1, %struct.trie_t** %arrayidx3, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.trie_t*, %struct.trie_t** %x, align 4
  %next4 = getelementptr inbounds %struct.trie_t, %struct.trie_t* %6, i32 0, i32 0
  %arrayidx5 = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next4, i32 0, i32 0
  %7 = load %struct.trie_t*, %struct.trie_t** %arrayidx5, align 4
  %8 = load i8*, i8** %fname.addr, align 4
  %call6 = call %struct.trie_t* @trie_trav(%struct.trie_t* %7, i8* %8, i32 0)
  store %struct.trie_t* %call6, %struct.trie_t** %x, align 4
  %9 = load %struct.trie_t*, %struct.trie_t** %x, align 4
  %eow7 = getelementptr inbounds %struct.trie_t, %struct.trie_t* %9, i32 0, i32 1
  store i32 1, i32* %eow7, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @print_path(i8* %path) #0 {
entry:
  %path.addr = alloca i8*, align 4
  store i8* %path, i8** %path.addr, align 4
  %0 = load i8*, i8** %path.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* %0)
  ret i32 1
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.trie_t* @init_tables() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %root = alloca %struct.trie_t*, align 4
  %call = call %struct.trie_t* @trie_new()
  store %struct.trie_t* %call, %struct.trie_t** %root, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %0, 41
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %add = add nsw i32 %1, 1
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [41 x i8], [41 x i8]* @chr_legal, i32 0, i32 %2
  %3 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %3 to i32
  %arrayidx1 = getelementptr inbounds [256 x i32], [256 x i32]* @chr_idx, i32 0, i32 %conv
  store i32 %add, i32* %arrayidx1, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds [41 x i8], [41 x i8]* @chr_legal, i32 0, i32 %4
  %5 = load i8, i8* %arrayidx2, align 1
  %6 = load i32, i32* %i, align 4
  %add3 = add nsw i32 %6, 1
  %arrayidx4 = getelementptr inbounds [256 x i8], [256 x i8]* @idx_chr, i32 0, i32 %add3
  store i8 %5, i8* %arrayidx4, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc21, %for.end
  %8 = load i32, i32* %i, align 4
  %cmp6 = icmp slt i32 %8, 3
  br i1 %cmp6, label %for.body8, label %for.end23

for.body8:                                        ; preds = %for.cond5
  store i32 0, i32* %j, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc18, %for.body8
  %9 = load i32, i32* %j, align 4
  %cmp10 = icmp slt i32 %9, 5
  br i1 %cmp10, label %for.body12, label %for.end20

for.body12:                                       ; preds = %for.cond9
  %10 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds [3 x [5 x i8*]], [3 x [5 x i8*]]* @text, i32 0, i32 %10
  %11 = load i32, i32* %j, align 4
  %arrayidx14 = getelementptr inbounds [5 x i8*], [5 x i8*]* %arrayidx13, i32 0, i32 %11
  %12 = load i8*, i8** %arrayidx14, align 4
  %tobool = icmp ne i8* %12, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.body12
  br label %for.end20

if.end:                                           ; preds = %for.body12
  %13 = load %struct.trie_t*, %struct.trie_t** %root, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx15 = getelementptr inbounds [3 x [5 x i8*]], [3 x [5 x i8*]]* @text, i32 0, i32 %14
  %15 = load i32, i32* %j, align 4
  %arrayidx16 = getelementptr inbounds [5 x i8*], [5 x i8*]* %arrayidx15, i32 0, i32 %15
  %16 = load i8*, i8** %arrayidx16, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx17 = getelementptr inbounds [3 x i8*], [3 x i8*]* @files, i32 0, i32 %17
  %18 = load i8*, i8** %arrayidx17, align 4
  call void @add_index(%struct.trie_t* %13, i8* %16, i8* %18)
  br label %for.inc18

for.inc18:                                        ; preds = %if.end
  %19 = load i32, i32* %j, align 4
  %inc19 = add nsw i32 %19, 1
  store i32 %inc19, i32* %j, align 4
  br label %for.cond9

for.end20:                                        ; preds = %if.then, %for.cond9
  br label %for.inc21

for.inc21:                                        ; preds = %for.end20
  %20 = load i32, i32* %i, align 4
  %inc22 = add nsw i32 %20, 1
  store i32 %inc22, i32* %i, align 4
  br label %for.cond5

for.end23:                                        ; preds = %for.cond5
  %21 = load %struct.trie_t*, %struct.trie_t** %root, align 4
  ret %struct.trie_t* %21
}

; Function Attrs: noinline nounwind optnone
define hidden void @search_index(%struct.trie_t* %root, i8* %word) #0 {
entry:
  %root.addr = alloca %struct.trie_t*, align 4
  %word.addr = alloca i8*, align 4
  %path = alloca [1024 x i8], align 16
  %found = alloca %struct.trie_t*, align 4
  store %struct.trie_t* %root, %struct.trie_t** %root.addr, align 4
  store i8* %word, i8** %word.addr, align 4
  %0 = load i8*, i8** %word.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.9, i32 0, i32 0), i8* %0)
  %1 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %2 = load i8*, i8** %word.addr, align 4
  %call1 = call %struct.trie_t* @trie_trav(%struct.trie_t* %1, i8* %2, i32 1)
  store %struct.trie_t* %call1, %struct.trie_t** %found, align 4
  %3 = load %struct.trie_t*, %struct.trie_t** %found, align 4
  %tobool = icmp ne %struct.trie_t* %3, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.10, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %entry
  %4 = load %struct.trie_t*, %struct.trie_t** %found, align 4
  %next = getelementptr inbounds %struct.trie_t, %struct.trie_t* %4, i32 0, i32 0
  %arrayidx = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next, i32 0, i32 0
  %5 = load %struct.trie_t*, %struct.trie_t** %arrayidx, align 4
  %arraydecay = getelementptr inbounds [1024 x i8], [1024 x i8]* %path, i32 0, i32 0
  %call3 = call i32 @trie_all(%struct.trie_t* %5, i8* %arraydecay, i32 0, i32 (i8*)* @print_path)
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %root = alloca %struct.trie_t*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.trie_t* @init_tables()
  store %struct.trie_t* %call, %struct.trie_t** %root, align 4
  %0 = load %struct.trie_t*, %struct.trie_t** %root, align 4
  call void @search_index(%struct.trie_t* %0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0))
  %1 = load %struct.trie_t*, %struct.trie_t** %root, align 4
  call void @search_index(%struct.trie_t* %1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0))
  %2 = load %struct.trie_t*, %struct.trie_t** %root, align 4
  call void @search_index(%struct.trie_t* %2, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i32 0, i32 0))
  %3 = load %struct.trie_t*, %struct.trie_t** %root, align 4
  call void @search_index(%struct.trie_t* %3, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.12, i32 0, i32 0))
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %tobool = icmp ne %struct.trie_t* %0, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i8, i8* %arrayidx, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %2 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %conv, 0
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0 (hasExternalUses)
%2:i1 = eq 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %eow, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool2 = icmp ne i32 %4, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %no_create.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool3 = icmp ne i32 %5, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %arrayidx6, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool7 = icmp ne i32 %7, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool11 = icmp ne %struct.trie_t* %11, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %no_create.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool13 = icmp ne i32 %12, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0 (hasExternalUses)
%2:i1 = eq 0:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for trie_trav()

; entering Souper's runOnFunction() for trie_all()

; ModuleID = './Inverted_index.c.bc'
source_filename = "./Inverted_index.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.trie_t = type { [41 x %struct.trie_t*], i32 }

@chr_legal = hidden global [41 x i8] c"abcdefghijklmnopqrstuvwxyz0123456789_-./\00", align 16
@chr_idx = hidden global [256 x i32] zeroinitializer, align 16
@idx_chr = hidden global [256 x i8] zeroinitializer, align 16
@.str = private unnamed_addr constant [4 x i8] c" %s\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"f1.txt\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"source/f2.txt\00", align 1
@.str.3 = private unnamed_addr constant [11 x i8] c"other_file\00", align 1
@files = hidden global [3 x i8*] [i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i32 0, i32 0)], align 4
@.str.4 = private unnamed_addr constant [3 x i8] c"it\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"is\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"what\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"a\00", align 1
@.str.8 = private unnamed_addr constant [7 x i8] c"banana\00", align 1
@text = hidden global [3 x [5 x i8*]] [[5 x i8*] [i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0)], [5 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i8* null, i8* null], [5 x i8*] [i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i32 0, i32 0), i8* null]], align 16
@.str.9 = private unnamed_addr constant [18 x i8] c"Search for \22%s\22: \00", align 1
@.str.10 = private unnamed_addr constant [11 x i8] c"not found\0A\00", align 1
@.str.11 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.12 = private unnamed_addr constant [4 x i8] c"boo\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.trie_t* @trie_new() #0 {
entry:
  %call = call noalias i8* @calloc(i32 168, i32 1)
  %0 = bitcast i8* %call to %struct.trie_t*
  ret %struct.trie_t* %0
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.trie_t* @trie_trav(%struct.trie_t* %root, i8* %str, i32 %no_create) #0 {
entry:
  %retval = alloca %struct.trie_t*, align 4
  %root.addr = alloca %struct.trie_t*, align 4
  %str.addr = alloca i8*, align 4
  %no_create.addr = alloca i32, align 4
  %c = alloca i32, align 4
  store %struct.trie_t* %root, %struct.trie_t** %root.addr, align 4
  store i8* %str, i8** %str.addr, align 4
  store i32 %no_create, i32* %no_create.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end18, %if.then8, %entry
  %0 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %tobool = icmp ne %struct.trie_t* %0, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i8*, i8** %str.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %1, i32 0
  %2 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %2 to i32
  store i32 %conv, i32* %c, align 4
  %cmp = icmp eq i32 %conv, 0
  br i1 %cmp, label %if.then, label %if.end5

if.then:                                          ; preds = %while.body
  %3 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %eow = getelementptr inbounds %struct.trie_t, %struct.trie_t* %3, i32 0, i32 1
  %4 = load i32, i32* %eow, align 4
  %tobool2 = icmp ne i32 %4, 0
  br i1 %tobool2, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.then
  %5 = load i32, i32* %no_create.addr, align 4
  %tobool3 = icmp ne i32 %5, 0
  br i1 %tobool3, label %if.then4, label %if.end

if.then4:                                         ; preds = %land.lhs.true
  store %struct.trie_t* null, %struct.trie_t** %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true, %if.then
  br label %while.end

if.end5:                                          ; preds = %while.body
  %6 = load i32, i32* %c, align 4
  %arrayidx6 = getelementptr inbounds [256 x i32], [256 x i32]* @chr_idx, i32 0, i32 %6
  %7 = load i32, i32* %arrayidx6, align 4
  store i32 %7, i32* %c, align 4
  %tobool7 = icmp ne i32 %7, 0
  br i1 %tobool7, label %if.end9, label %if.then8

if.then8:                                         ; preds = %if.end5
  %8 = load i8*, i8** %str.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %8, i32 1
  store i8* %incdec.ptr, i8** %str.addr, align 4
  br label %while.cond

if.end9:                                          ; preds = %if.end5
  %9 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %next = getelementptr inbounds %struct.trie_t, %struct.trie_t* %9, i32 0, i32 0
  %10 = load i32, i32* %c, align 4
  %arrayidx10 = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next, i32 0, i32 %10
  %11 = load %struct.trie_t*, %struct.trie_t** %arrayidx10, align 4
  %tobool11 = icmp ne %struct.trie_t* %11, null
  br i1 %tobool11, label %if.end18, label %if.then12

if.then12:                                        ; preds = %if.end9
  %12 = load i32, i32* %no_create.addr, align 4
  %tobool13 = icmp ne i32 %12, 0
  br i1 %tobool13, label %if.then14, label %if.end15

if.then14:                                        ; preds = %if.then12
  store %struct.trie_t* null, %struct.trie_t** %retval, align 4
  br label %return

if.end15:                                         ; preds = %if.then12
  %call = call %struct.trie_t* @trie_new()
  %13 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %next16 = getelementptr inbounds %struct.trie_t, %struct.trie_t* %13, i32 0, i32 0
  %14 = load i32, i32* %c, align 4
  %arrayidx17 = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next16, i32 0, i32 %14
  store %struct.trie_t* %call, %struct.trie_t** %arrayidx17, align 4
  br label %if.end18

if.end18:                                         ; preds = %if.end15, %if.end9
  %15 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %next19 = getelementptr inbounds %struct.trie_t, %struct.trie_t* %15, i32 0, i32 0
  %16 = load i32, i32* %c, align 4
  %arrayidx20 = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next19, i32 0, i32 %16
  %17 = load %struct.trie_t*, %struct.trie_t** %arrayidx20, align 4
  store %struct.trie_t* %17, %struct.trie_t** %root.addr, align 4
  %18 = load i8*, i8** %str.addr, align 4
  %incdec.ptr21 = getelementptr inbounds i8, i8* %18, i32 1
  store i8* %incdec.ptr21, i8** %str.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %if.end, %while.cond
  %19 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  store %struct.trie_t* %19, %struct.trie_t** %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then14, %if.then4
  %20 = load %struct.trie_t*, %struct.trie_t** %retval, align 4
  ret %struct.trie_t* %20
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @trie_all(%struct.trie_t* %root, i8* %path, i32 %depth, i32 (i8*)* %callback) #0 {
entry:
  %retval = alloca i32, align 4
  %root.addr = alloca %struct.trie_t*, align 4
  %path.addr = alloca i8*, align 4
  %depth.addr = alloca i32, align 4
  %callback.addr = alloca i32 (i8*)*, align 4
  %i = alloca i32, align 4
  store %struct.trie_t* %root, %struct.trie_t** %root.addr, align 4
  store i8* %path, i8** %path.addr, align 4
  store i32 %depth, i32* %depth.addr, align 4
  store i32 (i8*)* %callback, i32 (i8*)** %callback.addr, align 4
  %0 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %eow = getelementptr inbounds %struct.trie_t, %struct.trie_t* %0, i32 0, i32 1
  %1 = load i32, i32* %eow, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load i32 (i8*)*, i32 (i8*)** %callback.addr, align 4
  %3 = load i8*, i8** %path.addr, align 4
  %call = call i32 %2(i8* %3)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %4 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %4, 41
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %next = getelementptr inbounds %struct.trie_t, %struct.trie_t* %5, i32 0, i32 0
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next, i32 0, i32 %6
  %7 = load %struct.trie_t*, %struct.trie_t** %arrayidx, align 4
  %tobool2 = icmp ne %struct.trie_t* %7, null
  br i1 %tobool2, label %if.end4, label %if.then3

if.then3:                                         ; preds = %for.body
  br label %for.inc

if.end4:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds [256 x i8], [256 x i8]* @idx_chr, i32 0, i32 %8
  %9 = load i8, i8* %arrayidx5, align 1
  %10 = load i8*, i8** %path.addr, align 4
  %11 = load i32, i32* %depth.addr, align 4
  %arrayidx6 = getelementptr inbounds i8, i8* %10, i32 %11
  store i8 %9, i8* %arrayidx6, align 1
  %12 = load i8*, i8** %path.addr, align 4
  %13 = load i32, i32* %depth.addr, align 4
  %add = add nsw i32 %13, 1
  %arrayidx7 = getelementptr inbounds i8, i8* %12, i32 %add
  store i8 0, i8* %arrayidx7, align 1
  %14 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %next8 = getelementptr inbounds %struct.trie_t, %struct.trie_t* %14, i32 0, i32 0
  %15 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next8, i32 0, i32 %15
  %16 = load %struct.trie_t*, %struct.trie_t** %arrayidx9, align 4
  %17 = load i8*, i8** %path.addr, align 4
  %18 = load i32, i32* %depth.addr, align 4
  %add10 = add nsw i32 %18, 1
  %19 = load i32 (i8*)*, i32 (i8*)** %callback.addr, align 4
  %call11 = call i32 @trie_all(%struct.trie_t* %16, i8* %17, i32 %add10, i32 (i8*)* %19)
  %tobool12 = icmp ne i32 %call11, 0
  br i1 %tobool12, label %if.end14, label %if.then13

if.then13:                                        ; preds = %if.end4
  store i32 0, i32* %retval, align 4
  br label %return

if.end14:                                         ; preds = %if.end4
  br label %for.inc

for.inc:                                          ; preds = %if.end14, %if.then3
  %20 = load i32, i32* %i, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then13, %if.then
  %21 = load i32, i32* %retval, align 4
  ret i32 %21
}

; Function Attrs: noinline nounwind optnone
define hidden void @add_index(%struct.trie_t* %root, i8* %word, i8* %fname) #0 {
entry:
  %root.addr = alloca %struct.trie_t*, align 4
  %word.addr = alloca i8*, align 4
  %fname.addr = alloca i8*, align 4
  %x = alloca %struct.trie_t*, align 4
  store %struct.trie_t* %root, %struct.trie_t** %root.addr, align 4
  store i8* %word, i8** %word.addr, align 4
  store i8* %fname, i8** %fname.addr, align 4
  %0 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %1 = load i8*, i8** %word.addr, align 4
  %call = call %struct.trie_t* @trie_trav(%struct.trie_t* %0, i8* %1, i32 0)
  store %struct.trie_t* %call, %struct.trie_t** %x, align 4
  %2 = load %struct.trie_t*, %struct.trie_t** %x, align 4
  %eow = getelementptr inbounds %struct.trie_t, %struct.trie_t* %2, i32 0, i32 1
  store i32 1, i32* %eow, align 4
  %3 = load %struct.trie_t*, %struct.trie_t** %x, align 4
  %next = getelementptr inbounds %struct.trie_t, %struct.trie_t* %3, i32 0, i32 0
  %arrayidx = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next, i32 0, i32 0
  %4 = load %struct.trie_t*, %struct.trie_t** %arrayidx, align 4
  %tobool = icmp ne %struct.trie_t* %4, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call1 = call %struct.trie_t* @trie_new()
  %5 = load %struct.trie_t*, %struct.trie_t** %x, align 4
  %next2 = getelementptr inbounds %struct.trie_t, %struct.trie_t* %5, i32 0, i32 0
  %arrayidx3 = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next2, i32 0, i32 0
  store %struct.trie_t* %call1, %struct.trie_t** %arrayidx3, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.trie_t*, %struct.trie_t** %x, align 4
  %next4 = getelementptr inbounds %struct.trie_t, %struct.trie_t* %6, i32 0, i32 0
  %arrayidx5 = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next4, i32 0, i32 0
  %7 = load %struct.trie_t*, %struct.trie_t** %arrayidx5, align 4
  %8 = load i8*, i8** %fname.addr, align 4
  %call6 = call %struct.trie_t* @trie_trav(%struct.trie_t* %7, i8* %8, i32 0)
  store %struct.trie_t* %call6, %struct.trie_t** %x, align 4
  %9 = load %struct.trie_t*, %struct.trie_t** %x, align 4
  %eow7 = getelementptr inbounds %struct.trie_t, %struct.trie_t* %9, i32 0, i32 1
  store i32 1, i32* %eow7, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @print_path(i8* %path) #0 {
entry:
  %path.addr = alloca i8*, align 4
  store i8* %path, i8** %path.addr, align 4
  %0 = load i8*, i8** %path.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* %0)
  ret i32 1
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.trie_t* @init_tables() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %root = alloca %struct.trie_t*, align 4
  %call = call %struct.trie_t* @trie_new()
  store %struct.trie_t* %call, %struct.trie_t** %root, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %0, 41
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %add = add nsw i32 %1, 1
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [41 x i8], [41 x i8]* @chr_legal, i32 0, i32 %2
  %3 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %3 to i32
  %arrayidx1 = getelementptr inbounds [256 x i32], [256 x i32]* @chr_idx, i32 0, i32 %conv
  store i32 %add, i32* %arrayidx1, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds [41 x i8], [41 x i8]* @chr_legal, i32 0, i32 %4
  %5 = load i8, i8* %arrayidx2, align 1
  %6 = load i32, i32* %i, align 4
  %add3 = add nsw i32 %6, 1
  %arrayidx4 = getelementptr inbounds [256 x i8], [256 x i8]* @idx_chr, i32 0, i32 %add3
  store i8 %5, i8* %arrayidx4, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc21, %for.end
  %8 = load i32, i32* %i, align 4
  %cmp6 = icmp slt i32 %8, 3
  br i1 %cmp6, label %for.body8, label %for.end23

for.body8:                                        ; preds = %for.cond5
  store i32 0, i32* %j, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc18, %for.body8
  %9 = load i32, i32* %j, align 4
  %cmp10 = icmp slt i32 %9, 5
  br i1 %cmp10, label %for.body12, label %for.end20

for.body12:                                       ; preds = %for.cond9
  %10 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds [3 x [5 x i8*]], [3 x [5 x i8*]]* @text, i32 0, i32 %10
  %11 = load i32, i32* %j, align 4
  %arrayidx14 = getelementptr inbounds [5 x i8*], [5 x i8*]* %arrayidx13, i32 0, i32 %11
  %12 = load i8*, i8** %arrayidx14, align 4
  %tobool = icmp ne i8* %12, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.body12
  br label %for.end20

if.end:                                           ; preds = %for.body12
  %13 = load %struct.trie_t*, %struct.trie_t** %root, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx15 = getelementptr inbounds [3 x [5 x i8*]], [3 x [5 x i8*]]* @text, i32 0, i32 %14
  %15 = load i32, i32* %j, align 4
  %arrayidx16 = getelementptr inbounds [5 x i8*], [5 x i8*]* %arrayidx15, i32 0, i32 %15
  %16 = load i8*, i8** %arrayidx16, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx17 = getelementptr inbounds [3 x i8*], [3 x i8*]* @files, i32 0, i32 %17
  %18 = load i8*, i8** %arrayidx17, align 4
  call void @add_index(%struct.trie_t* %13, i8* %16, i8* %18)
  br label %for.inc18

for.inc18:                                        ; preds = %if.end
  %19 = load i32, i32* %j, align 4
  %inc19 = add nsw i32 %19, 1
  store i32 %inc19, i32* %j, align 4
  br label %for.cond9

for.end20:                                        ; preds = %if.then, %for.cond9
  br label %for.inc21

for.inc21:                                        ; preds = %for.end20
  %20 = load i32, i32* %i, align 4
  %inc22 = add nsw i32 %20, 1
  store i32 %inc22, i32* %i, align 4
  br label %for.cond5

for.end23:                                        ; preds = %for.cond5
  %21 = load %struct.trie_t*, %struct.trie_t** %root, align 4
  ret %struct.trie_t* %21
}

; Function Attrs: noinline nounwind optnone
define hidden void @search_index(%struct.trie_t* %root, i8* %word) #0 {
entry:
  %root.addr = alloca %struct.trie_t*, align 4
  %word.addr = alloca i8*, align 4
  %path = alloca [1024 x i8], align 16
  %found = alloca %struct.trie_t*, align 4
  store %struct.trie_t* %root, %struct.trie_t** %root.addr, align 4
  store i8* %word, i8** %word.addr, align 4
  %0 = load i8*, i8** %word.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.9, i32 0, i32 0), i8* %0)
  %1 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %2 = load i8*, i8** %word.addr, align 4
  %call1 = call %struct.trie_t* @trie_trav(%struct.trie_t* %1, i8* %2, i32 1)
  store %struct.trie_t* %call1, %struct.trie_t** %found, align 4
  %3 = load %struct.trie_t*, %struct.trie_t** %found, align 4
  %tobool = icmp ne %struct.trie_t* %3, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.10, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %entry
  %4 = load %struct.trie_t*, %struct.trie_t** %found, align 4
  %next = getelementptr inbounds %struct.trie_t, %struct.trie_t* %4, i32 0, i32 0
  %arrayidx = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next, i32 0, i32 0
  %5 = load %struct.trie_t*, %struct.trie_t** %arrayidx, align 4
  %arraydecay = getelementptr inbounds [1024 x i8], [1024 x i8]* %path, i32 0, i32 0
  %call3 = call i32 @trie_all(%struct.trie_t* %5, i8* %arraydecay, i32 0, i32 (i8*)* @print_path)
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %root = alloca %struct.trie_t*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.trie_t* @init_tables()
  store %struct.trie_t* %call, %struct.trie_t** %root, align 4
  %0 = load %struct.trie_t*, %struct.trie_t** %root, align 4
  call void @search_index(%struct.trie_t* %0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0))
  %1 = load %struct.trie_t*, %struct.trie_t** %root, align 4
  call void @search_index(%struct.trie_t* %1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0))
  %2 = load %struct.trie_t*, %struct.trie_t** %root, align 4
  call void @search_index(%struct.trie_t* %2, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i32 0, i32 0))
  %3 = load %struct.trie_t*, %struct.trie_t** %root, align 4
  call void @search_index(%struct.trie_t* %3, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.12, i32 0, i32 0))
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %eow, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %1, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call = call i32 %2(i8* %3)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool1 = icmp ne i32 %call, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ult i32 %4, 41
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ult %0, 41:i32
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool2 = icmp ne %struct.trie_t* %7, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i8, i8* %arrayidx5, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %depth.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %depth.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %13, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %depth.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add10 = add nsw i32 %18, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call11 = call i32 @trie_all(%struct.trie_t* %16, i8* %17, i32 %add10, i32 (i8*)* %19)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool12 = icmp ne i32 %call11, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %20, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ult %0, 41:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for trie_all()

; entering Souper's runOnFunction() for add_index()

; ModuleID = './Inverted_index.c.bc'
source_filename = "./Inverted_index.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.trie_t = type { [41 x %struct.trie_t*], i32 }

@chr_legal = hidden global [41 x i8] c"abcdefghijklmnopqrstuvwxyz0123456789_-./\00", align 16
@chr_idx = hidden global [256 x i32] zeroinitializer, align 16
@idx_chr = hidden global [256 x i8] zeroinitializer, align 16
@.str = private unnamed_addr constant [4 x i8] c" %s\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"f1.txt\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"source/f2.txt\00", align 1
@.str.3 = private unnamed_addr constant [11 x i8] c"other_file\00", align 1
@files = hidden global [3 x i8*] [i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i32 0, i32 0)], align 4
@.str.4 = private unnamed_addr constant [3 x i8] c"it\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"is\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"what\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"a\00", align 1
@.str.8 = private unnamed_addr constant [7 x i8] c"banana\00", align 1
@text = hidden global [3 x [5 x i8*]] [[5 x i8*] [i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0)], [5 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i8* null, i8* null], [5 x i8*] [i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i32 0, i32 0), i8* null]], align 16
@.str.9 = private unnamed_addr constant [18 x i8] c"Search for \22%s\22: \00", align 1
@.str.10 = private unnamed_addr constant [11 x i8] c"not found\0A\00", align 1
@.str.11 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.12 = private unnamed_addr constant [4 x i8] c"boo\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.trie_t* @trie_new() #0 {
entry:
  %call = call noalias i8* @calloc(i32 168, i32 1)
  %0 = bitcast i8* %call to %struct.trie_t*
  ret %struct.trie_t* %0
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.trie_t* @trie_trav(%struct.trie_t* %root, i8* %str, i32 %no_create) #0 {
entry:
  %retval = alloca %struct.trie_t*, align 4
  %root.addr = alloca %struct.trie_t*, align 4
  %str.addr = alloca i8*, align 4
  %no_create.addr = alloca i32, align 4
  %c = alloca i32, align 4
  store %struct.trie_t* %root, %struct.trie_t** %root.addr, align 4
  store i8* %str, i8** %str.addr, align 4
  store i32 %no_create, i32* %no_create.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end18, %if.then8, %entry
  %0 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %tobool = icmp ne %struct.trie_t* %0, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i8*, i8** %str.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %1, i32 0
  %2 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %2 to i32
  store i32 %conv, i32* %c, align 4
  %cmp = icmp eq i32 %conv, 0
  br i1 %cmp, label %if.then, label %if.end5

if.then:                                          ; preds = %while.body
  %3 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %eow = getelementptr inbounds %struct.trie_t, %struct.trie_t* %3, i32 0, i32 1
  %4 = load i32, i32* %eow, align 4
  %tobool2 = icmp ne i32 %4, 0
  br i1 %tobool2, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.then
  %5 = load i32, i32* %no_create.addr, align 4
  %tobool3 = icmp ne i32 %5, 0
  br i1 %tobool3, label %if.then4, label %if.end

if.then4:                                         ; preds = %land.lhs.true
  store %struct.trie_t* null, %struct.trie_t** %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true, %if.then
  br label %while.end

if.end5:                                          ; preds = %while.body
  %6 = load i32, i32* %c, align 4
  %arrayidx6 = getelementptr inbounds [256 x i32], [256 x i32]* @chr_idx, i32 0, i32 %6
  %7 = load i32, i32* %arrayidx6, align 4
  store i32 %7, i32* %c, align 4
  %tobool7 = icmp ne i32 %7, 0
  br i1 %tobool7, label %if.end9, label %if.then8

if.then8:                                         ; preds = %if.end5
  %8 = load i8*, i8** %str.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %8, i32 1
  store i8* %incdec.ptr, i8** %str.addr, align 4
  br label %while.cond

if.end9:                                          ; preds = %if.end5
  %9 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %next = getelementptr inbounds %struct.trie_t, %struct.trie_t* %9, i32 0, i32 0
  %10 = load i32, i32* %c, align 4
  %arrayidx10 = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next, i32 0, i32 %10
  %11 = load %struct.trie_t*, %struct.trie_t** %arrayidx10, align 4
  %tobool11 = icmp ne %struct.trie_t* %11, null
  br i1 %tobool11, label %if.end18, label %if.then12

if.then12:                                        ; preds = %if.end9
  %12 = load i32, i32* %no_create.addr, align 4
  %tobool13 = icmp ne i32 %12, 0
  br i1 %tobool13, label %if.then14, label %if.end15

if.then14:                                        ; preds = %if.then12
  store %struct.trie_t* null, %struct.trie_t** %retval, align 4
  br label %return

if.end15:                                         ; preds = %if.then12
  %call = call %struct.trie_t* @trie_new()
  %13 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %next16 = getelementptr inbounds %struct.trie_t, %struct.trie_t* %13, i32 0, i32 0
  %14 = load i32, i32* %c, align 4
  %arrayidx17 = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next16, i32 0, i32 %14
  store %struct.trie_t* %call, %struct.trie_t** %arrayidx17, align 4
  br label %if.end18

if.end18:                                         ; preds = %if.end15, %if.end9
  %15 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %next19 = getelementptr inbounds %struct.trie_t, %struct.trie_t* %15, i32 0, i32 0
  %16 = load i32, i32* %c, align 4
  %arrayidx20 = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next19, i32 0, i32 %16
  %17 = load %struct.trie_t*, %struct.trie_t** %arrayidx20, align 4
  store %struct.trie_t* %17, %struct.trie_t** %root.addr, align 4
  %18 = load i8*, i8** %str.addr, align 4
  %incdec.ptr21 = getelementptr inbounds i8, i8* %18, i32 1
  store i8* %incdec.ptr21, i8** %str.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %if.end, %while.cond
  %19 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  store %struct.trie_t* %19, %struct.trie_t** %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then14, %if.then4
  %20 = load %struct.trie_t*, %struct.trie_t** %retval, align 4
  ret %struct.trie_t* %20
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @trie_all(%struct.trie_t* %root, i8* %path, i32 %depth, i32 (i8*)* %callback) #0 {
entry:
  %retval = alloca i32, align 4
  %root.addr = alloca %struct.trie_t*, align 4
  %path.addr = alloca i8*, align 4
  %depth.addr = alloca i32, align 4
  %callback.addr = alloca i32 (i8*)*, align 4
  %i = alloca i32, align 4
  store %struct.trie_t* %root, %struct.trie_t** %root.addr, align 4
  store i8* %path, i8** %path.addr, align 4
  store i32 %depth, i32* %depth.addr, align 4
  store i32 (i8*)* %callback, i32 (i8*)** %callback.addr, align 4
  %0 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %eow = getelementptr inbounds %struct.trie_t, %struct.trie_t* %0, i32 0, i32 1
  %1 = load i32, i32* %eow, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load i32 (i8*)*, i32 (i8*)** %callback.addr, align 4
  %3 = load i8*, i8** %path.addr, align 4
  %call = call i32 %2(i8* %3)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %4 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %4, 41
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %next = getelementptr inbounds %struct.trie_t, %struct.trie_t* %5, i32 0, i32 0
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next, i32 0, i32 %6
  %7 = load %struct.trie_t*, %struct.trie_t** %arrayidx, align 4
  %tobool2 = icmp ne %struct.trie_t* %7, null
  br i1 %tobool2, label %if.end4, label %if.then3

if.then3:                                         ; preds = %for.body
  br label %for.inc

if.end4:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds [256 x i8], [256 x i8]* @idx_chr, i32 0, i32 %8
  %9 = load i8, i8* %arrayidx5, align 1
  %10 = load i8*, i8** %path.addr, align 4
  %11 = load i32, i32* %depth.addr, align 4
  %arrayidx6 = getelementptr inbounds i8, i8* %10, i32 %11
  store i8 %9, i8* %arrayidx6, align 1
  %12 = load i8*, i8** %path.addr, align 4
  %13 = load i32, i32* %depth.addr, align 4
  %add = add nsw i32 %13, 1
  %arrayidx7 = getelementptr inbounds i8, i8* %12, i32 %add
  store i8 0, i8* %arrayidx7, align 1
  %14 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %next8 = getelementptr inbounds %struct.trie_t, %struct.trie_t* %14, i32 0, i32 0
  %15 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next8, i32 0, i32 %15
  %16 = load %struct.trie_t*, %struct.trie_t** %arrayidx9, align 4
  %17 = load i8*, i8** %path.addr, align 4
  %18 = load i32, i32* %depth.addr, align 4
  %add10 = add nsw i32 %18, 1
  %19 = load i32 (i8*)*, i32 (i8*)** %callback.addr, align 4
  %call11 = call i32 @trie_all(%struct.trie_t* %16, i8* %17, i32 %add10, i32 (i8*)* %19)
  %tobool12 = icmp ne i32 %call11, 0
  br i1 %tobool12, label %if.end14, label %if.then13

if.then13:                                        ; preds = %if.end4
  store i32 0, i32* %retval, align 4
  br label %return

if.end14:                                         ; preds = %if.end4
  br label %for.inc

for.inc:                                          ; preds = %if.end14, %if.then3
  %20 = load i32, i32* %i, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then13, %if.then
  %21 = load i32, i32* %retval, align 4
  ret i32 %21
}

; Function Attrs: noinline nounwind optnone
define hidden void @add_index(%struct.trie_t* %root, i8* %word, i8* %fname) #0 {
entry:
  %root.addr = alloca %struct.trie_t*, align 4
  %word.addr = alloca i8*, align 4
  %fname.addr = alloca i8*, align 4
  %x = alloca %struct.trie_t*, align 4
  store %struct.trie_t* %root, %struct.trie_t** %root.addr, align 4
  store i8* %word, i8** %word.addr, align 4
  store i8* %fname, i8** %fname.addr, align 4
  %0 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %1 = load i8*, i8** %word.addr, align 4
  %call = call %struct.trie_t* @trie_trav(%struct.trie_t* %0, i8* %1, i32 0)
  store %struct.trie_t* %call, %struct.trie_t** %x, align 4
  %2 = load %struct.trie_t*, %struct.trie_t** %x, align 4
  %eow = getelementptr inbounds %struct.trie_t, %struct.trie_t* %2, i32 0, i32 1
  store i32 1, i32* %eow, align 4
  %3 = load %struct.trie_t*, %struct.trie_t** %x, align 4
  %next = getelementptr inbounds %struct.trie_t, %struct.trie_t* %3, i32 0, i32 0
  %arrayidx = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next, i32 0, i32 0
  %4 = load %struct.trie_t*, %struct.trie_t** %arrayidx, align 4
  %tobool = icmp ne %struct.trie_t* %4, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call1 = call %struct.trie_t* @trie_new()
  %5 = load %struct.trie_t*, %struct.trie_t** %x, align 4
  %next2 = getelementptr inbounds %struct.trie_t, %struct.trie_t* %5, i32 0, i32 0
  %arrayidx3 = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next2, i32 0, i32 0
  store %struct.trie_t* %call1, %struct.trie_t** %arrayidx3, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.trie_t*, %struct.trie_t** %x, align 4
  %next4 = getelementptr inbounds %struct.trie_t, %struct.trie_t* %6, i32 0, i32 0
  %arrayidx5 = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next4, i32 0, i32 0
  %7 = load %struct.trie_t*, %struct.trie_t** %arrayidx5, align 4
  %8 = load i8*, i8** %fname.addr, align 4
  %call6 = call %struct.trie_t* @trie_trav(%struct.trie_t* %7, i8* %8, i32 0)
  store %struct.trie_t* %call6, %struct.trie_t** %x, align 4
  %9 = load %struct.trie_t*, %struct.trie_t** %x, align 4
  %eow7 = getelementptr inbounds %struct.trie_t, %struct.trie_t* %9, i32 0, i32 1
  store i32 1, i32* %eow7, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @print_path(i8* %path) #0 {
entry:
  %path.addr = alloca i8*, align 4
  store i8* %path, i8** %path.addr, align 4
  %0 = load i8*, i8** %path.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* %0)
  ret i32 1
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.trie_t* @init_tables() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %root = alloca %struct.trie_t*, align 4
  %call = call %struct.trie_t* @trie_new()
  store %struct.trie_t* %call, %struct.trie_t** %root, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %0, 41
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %add = add nsw i32 %1, 1
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [41 x i8], [41 x i8]* @chr_legal, i32 0, i32 %2
  %3 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %3 to i32
  %arrayidx1 = getelementptr inbounds [256 x i32], [256 x i32]* @chr_idx, i32 0, i32 %conv
  store i32 %add, i32* %arrayidx1, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds [41 x i8], [41 x i8]* @chr_legal, i32 0, i32 %4
  %5 = load i8, i8* %arrayidx2, align 1
  %6 = load i32, i32* %i, align 4
  %add3 = add nsw i32 %6, 1
  %arrayidx4 = getelementptr inbounds [256 x i8], [256 x i8]* @idx_chr, i32 0, i32 %add3
  store i8 %5, i8* %arrayidx4, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc21, %for.end
  %8 = load i32, i32* %i, align 4
  %cmp6 = icmp slt i32 %8, 3
  br i1 %cmp6, label %for.body8, label %for.end23

for.body8:                                        ; preds = %for.cond5
  store i32 0, i32* %j, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc18, %for.body8
  %9 = load i32, i32* %j, align 4
  %cmp10 = icmp slt i32 %9, 5
  br i1 %cmp10, label %for.body12, label %for.end20

for.body12:                                       ; preds = %for.cond9
  %10 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds [3 x [5 x i8*]], [3 x [5 x i8*]]* @text, i32 0, i32 %10
  %11 = load i32, i32* %j, align 4
  %arrayidx14 = getelementptr inbounds [5 x i8*], [5 x i8*]* %arrayidx13, i32 0, i32 %11
  %12 = load i8*, i8** %arrayidx14, align 4
  %tobool = icmp ne i8* %12, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.body12
  br label %for.end20

if.end:                                           ; preds = %for.body12
  %13 = load %struct.trie_t*, %struct.trie_t** %root, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx15 = getelementptr inbounds [3 x [5 x i8*]], [3 x [5 x i8*]]* @text, i32 0, i32 %14
  %15 = load i32, i32* %j, align 4
  %arrayidx16 = getelementptr inbounds [5 x i8*], [5 x i8*]* %arrayidx15, i32 0, i32 %15
  %16 = load i8*, i8** %arrayidx16, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx17 = getelementptr inbounds [3 x i8*], [3 x i8*]* @files, i32 0, i32 %17
  %18 = load i8*, i8** %arrayidx17, align 4
  call void @add_index(%struct.trie_t* %13, i8* %16, i8* %18)
  br label %for.inc18

for.inc18:                                        ; preds = %if.end
  %19 = load i32, i32* %j, align 4
  %inc19 = add nsw i32 %19, 1
  store i32 %inc19, i32* %j, align 4
  br label %for.cond9

for.end20:                                        ; preds = %if.then, %for.cond9
  br label %for.inc21

for.inc21:                                        ; preds = %for.end20
  %20 = load i32, i32* %i, align 4
  %inc22 = add nsw i32 %20, 1
  store i32 %inc22, i32* %i, align 4
  br label %for.cond5

for.end23:                                        ; preds = %for.cond5
  %21 = load %struct.trie_t*, %struct.trie_t** %root, align 4
  ret %struct.trie_t* %21
}

; Function Attrs: noinline nounwind optnone
define hidden void @search_index(%struct.trie_t* %root, i8* %word) #0 {
entry:
  %root.addr = alloca %struct.trie_t*, align 4
  %word.addr = alloca i8*, align 4
  %path = alloca [1024 x i8], align 16
  %found = alloca %struct.trie_t*, align 4
  store %struct.trie_t* %root, %struct.trie_t** %root.addr, align 4
  store i8* %word, i8** %word.addr, align 4
  %0 = load i8*, i8** %word.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.9, i32 0, i32 0), i8* %0)
  %1 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %2 = load i8*, i8** %word.addr, align 4
  %call1 = call %struct.trie_t* @trie_trav(%struct.trie_t* %1, i8* %2, i32 1)
  store %struct.trie_t* %call1, %struct.trie_t** %found, align 4
  %3 = load %struct.trie_t*, %struct.trie_t** %found, align 4
  %tobool = icmp ne %struct.trie_t* %3, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.10, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %entry
  %4 = load %struct.trie_t*, %struct.trie_t** %found, align 4
  %next = getelementptr inbounds %struct.trie_t, %struct.trie_t* %4, i32 0, i32 0
  %arrayidx = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next, i32 0, i32 0
  %5 = load %struct.trie_t*, %struct.trie_t** %arrayidx, align 4
  %arraydecay = getelementptr inbounds [1024 x i8], [1024 x i8]* %path, i32 0, i32 0
  %call3 = call i32 @trie_all(%struct.trie_t* %5, i8* %arraydecay, i32 0, i32 (i8*)* @print_path)
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %root = alloca %struct.trie_t*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.trie_t* @init_tables()
  store %struct.trie_t* %call, %struct.trie_t** %root, align 4
  %0 = load %struct.trie_t*, %struct.trie_t** %root, align 4
  call void @search_index(%struct.trie_t* %0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0))
  %1 = load %struct.trie_t*, %struct.trie_t** %root, align 4
  call void @search_index(%struct.trie_t* %1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0))
  %2 = load %struct.trie_t*, %struct.trie_t** %root, align 4
  call void @search_index(%struct.trie_t* %2, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i32 0, i32 0))
  %3 = load %struct.trie_t*, %struct.trie_t** %root, align 4
  call void @search_index(%struct.trie_t* %3, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.12, i32 0, i32 0))
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %tobool = icmp ne %struct.trie_t* %4, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for add_index()

; entering Souper's runOnFunction() for print_path()

; ModuleID = './Inverted_index.c.bc'
source_filename = "./Inverted_index.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.trie_t = type { [41 x %struct.trie_t*], i32 }

@chr_legal = hidden global [41 x i8] c"abcdefghijklmnopqrstuvwxyz0123456789_-./\00", align 16
@chr_idx = hidden global [256 x i32] zeroinitializer, align 16
@idx_chr = hidden global [256 x i8] zeroinitializer, align 16
@.str = private unnamed_addr constant [4 x i8] c" %s\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"f1.txt\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"source/f2.txt\00", align 1
@.str.3 = private unnamed_addr constant [11 x i8] c"other_file\00", align 1
@files = hidden global [3 x i8*] [i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i32 0, i32 0)], align 4
@.str.4 = private unnamed_addr constant [3 x i8] c"it\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"is\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"what\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"a\00", align 1
@.str.8 = private unnamed_addr constant [7 x i8] c"banana\00", align 1
@text = hidden global [3 x [5 x i8*]] [[5 x i8*] [i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0)], [5 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i8* null, i8* null], [5 x i8*] [i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i32 0, i32 0), i8* null]], align 16
@.str.9 = private unnamed_addr constant [18 x i8] c"Search for \22%s\22: \00", align 1
@.str.10 = private unnamed_addr constant [11 x i8] c"not found\0A\00", align 1
@.str.11 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.12 = private unnamed_addr constant [4 x i8] c"boo\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.trie_t* @trie_new() #0 {
entry:
  %call = call noalias i8* @calloc(i32 168, i32 1)
  %0 = bitcast i8* %call to %struct.trie_t*
  ret %struct.trie_t* %0
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.trie_t* @trie_trav(%struct.trie_t* %root, i8* %str, i32 %no_create) #0 {
entry:
  %retval = alloca %struct.trie_t*, align 4
  %root.addr = alloca %struct.trie_t*, align 4
  %str.addr = alloca i8*, align 4
  %no_create.addr = alloca i32, align 4
  %c = alloca i32, align 4
  store %struct.trie_t* %root, %struct.trie_t** %root.addr, align 4
  store i8* %str, i8** %str.addr, align 4
  store i32 %no_create, i32* %no_create.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end18, %if.then8, %entry
  %0 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %tobool = icmp ne %struct.trie_t* %0, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i8*, i8** %str.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %1, i32 0
  %2 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %2 to i32
  store i32 %conv, i32* %c, align 4
  %cmp = icmp eq i32 %conv, 0
  br i1 %cmp, label %if.then, label %if.end5

if.then:                                          ; preds = %while.body
  %3 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %eow = getelementptr inbounds %struct.trie_t, %struct.trie_t* %3, i32 0, i32 1
  %4 = load i32, i32* %eow, align 4
  %tobool2 = icmp ne i32 %4, 0
  br i1 %tobool2, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.then
  %5 = load i32, i32* %no_create.addr, align 4
  %tobool3 = icmp ne i32 %5, 0
  br i1 %tobool3, label %if.then4, label %if.end

if.then4:                                         ; preds = %land.lhs.true
  store %struct.trie_t* null, %struct.trie_t** %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true, %if.then
  br label %while.end

if.end5:                                          ; preds = %while.body
  %6 = load i32, i32* %c, align 4
  %arrayidx6 = getelementptr inbounds [256 x i32], [256 x i32]* @chr_idx, i32 0, i32 %6
  %7 = load i32, i32* %arrayidx6, align 4
  store i32 %7, i32* %c, align 4
  %tobool7 = icmp ne i32 %7, 0
  br i1 %tobool7, label %if.end9, label %if.then8

if.then8:                                         ; preds = %if.end5
  %8 = load i8*, i8** %str.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %8, i32 1
  store i8* %incdec.ptr, i8** %str.addr, align 4
  br label %while.cond

if.end9:                                          ; preds = %if.end5
  %9 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %next = getelementptr inbounds %struct.trie_t, %struct.trie_t* %9, i32 0, i32 0
  %10 = load i32, i32* %c, align 4
  %arrayidx10 = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next, i32 0, i32 %10
  %11 = load %struct.trie_t*, %struct.trie_t** %arrayidx10, align 4
  %tobool11 = icmp ne %struct.trie_t* %11, null
  br i1 %tobool11, label %if.end18, label %if.then12

if.then12:                                        ; preds = %if.end9
  %12 = load i32, i32* %no_create.addr, align 4
  %tobool13 = icmp ne i32 %12, 0
  br i1 %tobool13, label %if.then14, label %if.end15

if.then14:                                        ; preds = %if.then12
  store %struct.trie_t* null, %struct.trie_t** %retval, align 4
  br label %return

if.end15:                                         ; preds = %if.then12
  %call = call %struct.trie_t* @trie_new()
  %13 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %next16 = getelementptr inbounds %struct.trie_t, %struct.trie_t* %13, i32 0, i32 0
  %14 = load i32, i32* %c, align 4
  %arrayidx17 = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next16, i32 0, i32 %14
  store %struct.trie_t* %call, %struct.trie_t** %arrayidx17, align 4
  br label %if.end18

if.end18:                                         ; preds = %if.end15, %if.end9
  %15 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %next19 = getelementptr inbounds %struct.trie_t, %struct.trie_t* %15, i32 0, i32 0
  %16 = load i32, i32* %c, align 4
  %arrayidx20 = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next19, i32 0, i32 %16
  %17 = load %struct.trie_t*, %struct.trie_t** %arrayidx20, align 4
  store %struct.trie_t* %17, %struct.trie_t** %root.addr, align 4
  %18 = load i8*, i8** %str.addr, align 4
  %incdec.ptr21 = getelementptr inbounds i8, i8* %18, i32 1
  store i8* %incdec.ptr21, i8** %str.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %if.end, %while.cond
  %19 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  store %struct.trie_t* %19, %struct.trie_t** %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then14, %if.then4
  %20 = load %struct.trie_t*, %struct.trie_t** %retval, align 4
  ret %struct.trie_t* %20
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @trie_all(%struct.trie_t* %root, i8* %path, i32 %depth, i32 (i8*)* %callback) #0 {
entry:
  %retval = alloca i32, align 4
  %root.addr = alloca %struct.trie_t*, align 4
  %path.addr = alloca i8*, align 4
  %depth.addr = alloca i32, align 4
  %callback.addr = alloca i32 (i8*)*, align 4
  %i = alloca i32, align 4
  store %struct.trie_t* %root, %struct.trie_t** %root.addr, align 4
  store i8* %path, i8** %path.addr, align 4
  store i32 %depth, i32* %depth.addr, align 4
  store i32 (i8*)* %callback, i32 (i8*)** %callback.addr, align 4
  %0 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %eow = getelementptr inbounds %struct.trie_t, %struct.trie_t* %0, i32 0, i32 1
  %1 = load i32, i32* %eow, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load i32 (i8*)*, i32 (i8*)** %callback.addr, align 4
  %3 = load i8*, i8** %path.addr, align 4
  %call = call i32 %2(i8* %3)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %4 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %4, 41
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %next = getelementptr inbounds %struct.trie_t, %struct.trie_t* %5, i32 0, i32 0
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next, i32 0, i32 %6
  %7 = load %struct.trie_t*, %struct.trie_t** %arrayidx, align 4
  %tobool2 = icmp ne %struct.trie_t* %7, null
  br i1 %tobool2, label %if.end4, label %if.then3

if.then3:                                         ; preds = %for.body
  br label %for.inc

if.end4:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds [256 x i8], [256 x i8]* @idx_chr, i32 0, i32 %8
  %9 = load i8, i8* %arrayidx5, align 1
  %10 = load i8*, i8** %path.addr, align 4
  %11 = load i32, i32* %depth.addr, align 4
  %arrayidx6 = getelementptr inbounds i8, i8* %10, i32 %11
  store i8 %9, i8* %arrayidx6, align 1
  %12 = load i8*, i8** %path.addr, align 4
  %13 = load i32, i32* %depth.addr, align 4
  %add = add nsw i32 %13, 1
  %arrayidx7 = getelementptr inbounds i8, i8* %12, i32 %add
  store i8 0, i8* %arrayidx7, align 1
  %14 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %next8 = getelementptr inbounds %struct.trie_t, %struct.trie_t* %14, i32 0, i32 0
  %15 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next8, i32 0, i32 %15
  %16 = load %struct.trie_t*, %struct.trie_t** %arrayidx9, align 4
  %17 = load i8*, i8** %path.addr, align 4
  %18 = load i32, i32* %depth.addr, align 4
  %add10 = add nsw i32 %18, 1
  %19 = load i32 (i8*)*, i32 (i8*)** %callback.addr, align 4
  %call11 = call i32 @trie_all(%struct.trie_t* %16, i8* %17, i32 %add10, i32 (i8*)* %19)
  %tobool12 = icmp ne i32 %call11, 0
  br i1 %tobool12, label %if.end14, label %if.then13

if.then13:                                        ; preds = %if.end4
  store i32 0, i32* %retval, align 4
  br label %return

if.end14:                                         ; preds = %if.end4
  br label %for.inc

for.inc:                                          ; preds = %if.end14, %if.then3
  %20 = load i32, i32* %i, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then13, %if.then
  %21 = load i32, i32* %retval, align 4
  ret i32 %21
}

; Function Attrs: noinline nounwind optnone
define hidden void @add_index(%struct.trie_t* %root, i8* %word, i8* %fname) #0 {
entry:
  %root.addr = alloca %struct.trie_t*, align 4
  %word.addr = alloca i8*, align 4
  %fname.addr = alloca i8*, align 4
  %x = alloca %struct.trie_t*, align 4
  store %struct.trie_t* %root, %struct.trie_t** %root.addr, align 4
  store i8* %word, i8** %word.addr, align 4
  store i8* %fname, i8** %fname.addr, align 4
  %0 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %1 = load i8*, i8** %word.addr, align 4
  %call = call %struct.trie_t* @trie_trav(%struct.trie_t* %0, i8* %1, i32 0)
  store %struct.trie_t* %call, %struct.trie_t** %x, align 4
  %2 = load %struct.trie_t*, %struct.trie_t** %x, align 4
  %eow = getelementptr inbounds %struct.trie_t, %struct.trie_t* %2, i32 0, i32 1
  store i32 1, i32* %eow, align 4
  %3 = load %struct.trie_t*, %struct.trie_t** %x, align 4
  %next = getelementptr inbounds %struct.trie_t, %struct.trie_t* %3, i32 0, i32 0
  %arrayidx = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next, i32 0, i32 0
  %4 = load %struct.trie_t*, %struct.trie_t** %arrayidx, align 4
  %tobool = icmp ne %struct.trie_t* %4, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call1 = call %struct.trie_t* @trie_new()
  %5 = load %struct.trie_t*, %struct.trie_t** %x, align 4
  %next2 = getelementptr inbounds %struct.trie_t, %struct.trie_t* %5, i32 0, i32 0
  %arrayidx3 = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next2, i32 0, i32 0
  store %struct.trie_t* %call1, %struct.trie_t** %arrayidx3, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.trie_t*, %struct.trie_t** %x, align 4
  %next4 = getelementptr inbounds %struct.trie_t, %struct.trie_t* %6, i32 0, i32 0
  %arrayidx5 = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next4, i32 0, i32 0
  %7 = load %struct.trie_t*, %struct.trie_t** %arrayidx5, align 4
  %8 = load i8*, i8** %fname.addr, align 4
  %call6 = call %struct.trie_t* @trie_trav(%struct.trie_t* %7, i8* %8, i32 0)
  store %struct.trie_t* %call6, %struct.trie_t** %x, align 4
  %9 = load %struct.trie_t*, %struct.trie_t** %x, align 4
  %eow7 = getelementptr inbounds %struct.trie_t, %struct.trie_t* %9, i32 0, i32 1
  store i32 1, i32* %eow7, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @print_path(i8* %path) #0 {
entry:
  %path.addr = alloca i8*, align 4
  store i8* %path, i8** %path.addr, align 4
  %0 = load i8*, i8** %path.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* %0)
  ret i32 1
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.trie_t* @init_tables() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %root = alloca %struct.trie_t*, align 4
  %call = call %struct.trie_t* @trie_new()
  store %struct.trie_t* %call, %struct.trie_t** %root, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %0, 41
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %add = add nsw i32 %1, 1
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [41 x i8], [41 x i8]* @chr_legal, i32 0, i32 %2
  %3 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %3 to i32
  %arrayidx1 = getelementptr inbounds [256 x i32], [256 x i32]* @chr_idx, i32 0, i32 %conv
  store i32 %add, i32* %arrayidx1, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds [41 x i8], [41 x i8]* @chr_legal, i32 0, i32 %4
  %5 = load i8, i8* %arrayidx2, align 1
  %6 = load i32, i32* %i, align 4
  %add3 = add nsw i32 %6, 1
  %arrayidx4 = getelementptr inbounds [256 x i8], [256 x i8]* @idx_chr, i32 0, i32 %add3
  store i8 %5, i8* %arrayidx4, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc21, %for.end
  %8 = load i32, i32* %i, align 4
  %cmp6 = icmp slt i32 %8, 3
  br i1 %cmp6, label %for.body8, label %for.end23

for.body8:                                        ; preds = %for.cond5
  store i32 0, i32* %j, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc18, %for.body8
  %9 = load i32, i32* %j, align 4
  %cmp10 = icmp slt i32 %9, 5
  br i1 %cmp10, label %for.body12, label %for.end20

for.body12:                                       ; preds = %for.cond9
  %10 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds [3 x [5 x i8*]], [3 x [5 x i8*]]* @text, i32 0, i32 %10
  %11 = load i32, i32* %j, align 4
  %arrayidx14 = getelementptr inbounds [5 x i8*], [5 x i8*]* %arrayidx13, i32 0, i32 %11
  %12 = load i8*, i8** %arrayidx14, align 4
  %tobool = icmp ne i8* %12, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.body12
  br label %for.end20

if.end:                                           ; preds = %for.body12
  %13 = load %struct.trie_t*, %struct.trie_t** %root, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx15 = getelementptr inbounds [3 x [5 x i8*]], [3 x [5 x i8*]]* @text, i32 0, i32 %14
  %15 = load i32, i32* %j, align 4
  %arrayidx16 = getelementptr inbounds [5 x i8*], [5 x i8*]* %arrayidx15, i32 0, i32 %15
  %16 = load i8*, i8** %arrayidx16, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx17 = getelementptr inbounds [3 x i8*], [3 x i8*]* @files, i32 0, i32 %17
  %18 = load i8*, i8** %arrayidx17, align 4
  call void @add_index(%struct.trie_t* %13, i8* %16, i8* %18)
  br label %for.inc18

for.inc18:                                        ; preds = %if.end
  %19 = load i32, i32* %j, align 4
  %inc19 = add nsw i32 %19, 1
  store i32 %inc19, i32* %j, align 4
  br label %for.cond9

for.end20:                                        ; preds = %if.then, %for.cond9
  br label %for.inc21

for.inc21:                                        ; preds = %for.end20
  %20 = load i32, i32* %i, align 4
  %inc22 = add nsw i32 %20, 1
  store i32 %inc22, i32* %i, align 4
  br label %for.cond5

for.end23:                                        ; preds = %for.cond5
  %21 = load %struct.trie_t*, %struct.trie_t** %root, align 4
  ret %struct.trie_t* %21
}

; Function Attrs: noinline nounwind optnone
define hidden void @search_index(%struct.trie_t* %root, i8* %word) #0 {
entry:
  %root.addr = alloca %struct.trie_t*, align 4
  %word.addr = alloca i8*, align 4
  %path = alloca [1024 x i8], align 16
  %found = alloca %struct.trie_t*, align 4
  store %struct.trie_t* %root, %struct.trie_t** %root.addr, align 4
  store i8* %word, i8** %word.addr, align 4
  %0 = load i8*, i8** %word.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.9, i32 0, i32 0), i8* %0)
  %1 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %2 = load i8*, i8** %word.addr, align 4
  %call1 = call %struct.trie_t* @trie_trav(%struct.trie_t* %1, i8* %2, i32 1)
  store %struct.trie_t* %call1, %struct.trie_t** %found, align 4
  %3 = load %struct.trie_t*, %struct.trie_t** %found, align 4
  %tobool = icmp ne %struct.trie_t* %3, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.10, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %entry
  %4 = load %struct.trie_t*, %struct.trie_t** %found, align 4
  %next = getelementptr inbounds %struct.trie_t, %struct.trie_t* %4, i32 0, i32 0
  %arrayidx = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next, i32 0, i32 0
  %5 = load %struct.trie_t*, %struct.trie_t** %arrayidx, align 4
  %arraydecay = getelementptr inbounds [1024 x i8], [1024 x i8]* %path, i32 0, i32 0
  %call3 = call i32 @trie_all(%struct.trie_t* %5, i8* %arraydecay, i32 0, i32 (i8*)* @print_path)
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %root = alloca %struct.trie_t*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.trie_t* @init_tables()
  store %struct.trie_t* %call, %struct.trie_t** %root, align 4
  %0 = load %struct.trie_t*, %struct.trie_t** %root, align 4
  call void @search_index(%struct.trie_t* %0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0))
  %1 = load %struct.trie_t*, %struct.trie_t** %root, align 4
  call void @search_index(%struct.trie_t* %1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0))
  %2 = load %struct.trie_t*, %struct.trie_t** %root, align 4
  call void @search_index(%struct.trie_t* %2, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i32 0, i32 0))
  %3 = load %struct.trie_t*, %struct.trie_t** %root, align 4
  call void @search_index(%struct.trie_t* %3, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.12, i32 0, i32 0))
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for print_path()

; entering Souper's runOnFunction() for init_tables()

; ModuleID = './Inverted_index.c.bc'
source_filename = "./Inverted_index.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.trie_t = type { [41 x %struct.trie_t*], i32 }

@chr_legal = hidden global [41 x i8] c"abcdefghijklmnopqrstuvwxyz0123456789_-./\00", align 16
@chr_idx = hidden global [256 x i32] zeroinitializer, align 16
@idx_chr = hidden global [256 x i8] zeroinitializer, align 16
@.str = private unnamed_addr constant [4 x i8] c" %s\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"f1.txt\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"source/f2.txt\00", align 1
@.str.3 = private unnamed_addr constant [11 x i8] c"other_file\00", align 1
@files = hidden global [3 x i8*] [i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i32 0, i32 0)], align 4
@.str.4 = private unnamed_addr constant [3 x i8] c"it\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"is\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"what\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"a\00", align 1
@.str.8 = private unnamed_addr constant [7 x i8] c"banana\00", align 1
@text = hidden global [3 x [5 x i8*]] [[5 x i8*] [i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0)], [5 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i8* null, i8* null], [5 x i8*] [i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i32 0, i32 0), i8* null]], align 16
@.str.9 = private unnamed_addr constant [18 x i8] c"Search for \22%s\22: \00", align 1
@.str.10 = private unnamed_addr constant [11 x i8] c"not found\0A\00", align 1
@.str.11 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.12 = private unnamed_addr constant [4 x i8] c"boo\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.trie_t* @trie_new() #0 {
entry:
  %call = call noalias i8* @calloc(i32 168, i32 1)
  %0 = bitcast i8* %call to %struct.trie_t*
  ret %struct.trie_t* %0
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.trie_t* @trie_trav(%struct.trie_t* %root, i8* %str, i32 %no_create) #0 {
entry:
  %retval = alloca %struct.trie_t*, align 4
  %root.addr = alloca %struct.trie_t*, align 4
  %str.addr = alloca i8*, align 4
  %no_create.addr = alloca i32, align 4
  %c = alloca i32, align 4
  store %struct.trie_t* %root, %struct.trie_t** %root.addr, align 4
  store i8* %str, i8** %str.addr, align 4
  store i32 %no_create, i32* %no_create.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end18, %if.then8, %entry
  %0 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %tobool = icmp ne %struct.trie_t* %0, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i8*, i8** %str.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %1, i32 0
  %2 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %2 to i32
  store i32 %conv, i32* %c, align 4
  %cmp = icmp eq i32 %conv, 0
  br i1 %cmp, label %if.then, label %if.end5

if.then:                                          ; preds = %while.body
  %3 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %eow = getelementptr inbounds %struct.trie_t, %struct.trie_t* %3, i32 0, i32 1
  %4 = load i32, i32* %eow, align 4
  %tobool2 = icmp ne i32 %4, 0
  br i1 %tobool2, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.then
  %5 = load i32, i32* %no_create.addr, align 4
  %tobool3 = icmp ne i32 %5, 0
  br i1 %tobool3, label %if.then4, label %if.end

if.then4:                                         ; preds = %land.lhs.true
  store %struct.trie_t* null, %struct.trie_t** %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true, %if.then
  br label %while.end

if.end5:                                          ; preds = %while.body
  %6 = load i32, i32* %c, align 4
  %arrayidx6 = getelementptr inbounds [256 x i32], [256 x i32]* @chr_idx, i32 0, i32 %6
  %7 = load i32, i32* %arrayidx6, align 4
  store i32 %7, i32* %c, align 4
  %tobool7 = icmp ne i32 %7, 0
  br i1 %tobool7, label %if.end9, label %if.then8

if.then8:                                         ; preds = %if.end5
  %8 = load i8*, i8** %str.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %8, i32 1
  store i8* %incdec.ptr, i8** %str.addr, align 4
  br label %while.cond

if.end9:                                          ; preds = %if.end5
  %9 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %next = getelementptr inbounds %struct.trie_t, %struct.trie_t* %9, i32 0, i32 0
  %10 = load i32, i32* %c, align 4
  %arrayidx10 = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next, i32 0, i32 %10
  %11 = load %struct.trie_t*, %struct.trie_t** %arrayidx10, align 4
  %tobool11 = icmp ne %struct.trie_t* %11, null
  br i1 %tobool11, label %if.end18, label %if.then12

if.then12:                                        ; preds = %if.end9
  %12 = load i32, i32* %no_create.addr, align 4
  %tobool13 = icmp ne i32 %12, 0
  br i1 %tobool13, label %if.then14, label %if.end15

if.then14:                                        ; preds = %if.then12
  store %struct.trie_t* null, %struct.trie_t** %retval, align 4
  br label %return

if.end15:                                         ; preds = %if.then12
  %call = call %struct.trie_t* @trie_new()
  %13 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %next16 = getelementptr inbounds %struct.trie_t, %struct.trie_t* %13, i32 0, i32 0
  %14 = load i32, i32* %c, align 4
  %arrayidx17 = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next16, i32 0, i32 %14
  store %struct.trie_t* %call, %struct.trie_t** %arrayidx17, align 4
  br label %if.end18

if.end18:                                         ; preds = %if.end15, %if.end9
  %15 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %next19 = getelementptr inbounds %struct.trie_t, %struct.trie_t* %15, i32 0, i32 0
  %16 = load i32, i32* %c, align 4
  %arrayidx20 = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next19, i32 0, i32 %16
  %17 = load %struct.trie_t*, %struct.trie_t** %arrayidx20, align 4
  store %struct.trie_t* %17, %struct.trie_t** %root.addr, align 4
  %18 = load i8*, i8** %str.addr, align 4
  %incdec.ptr21 = getelementptr inbounds i8, i8* %18, i32 1
  store i8* %incdec.ptr21, i8** %str.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %if.end, %while.cond
  %19 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  store %struct.trie_t* %19, %struct.trie_t** %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then14, %if.then4
  %20 = load %struct.trie_t*, %struct.trie_t** %retval, align 4
  ret %struct.trie_t* %20
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @trie_all(%struct.trie_t* %root, i8* %path, i32 %depth, i32 (i8*)* %callback) #0 {
entry:
  %retval = alloca i32, align 4
  %root.addr = alloca %struct.trie_t*, align 4
  %path.addr = alloca i8*, align 4
  %depth.addr = alloca i32, align 4
  %callback.addr = alloca i32 (i8*)*, align 4
  %i = alloca i32, align 4
  store %struct.trie_t* %root, %struct.trie_t** %root.addr, align 4
  store i8* %path, i8** %path.addr, align 4
  store i32 %depth, i32* %depth.addr, align 4
  store i32 (i8*)* %callback, i32 (i8*)** %callback.addr, align 4
  %0 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %eow = getelementptr inbounds %struct.trie_t, %struct.trie_t* %0, i32 0, i32 1
  %1 = load i32, i32* %eow, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load i32 (i8*)*, i32 (i8*)** %callback.addr, align 4
  %3 = load i8*, i8** %path.addr, align 4
  %call = call i32 %2(i8* %3)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %4 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %4, 41
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %next = getelementptr inbounds %struct.trie_t, %struct.trie_t* %5, i32 0, i32 0
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next, i32 0, i32 %6
  %7 = load %struct.trie_t*, %struct.trie_t** %arrayidx, align 4
  %tobool2 = icmp ne %struct.trie_t* %7, null
  br i1 %tobool2, label %if.end4, label %if.then3

if.then3:                                         ; preds = %for.body
  br label %for.inc

if.end4:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds [256 x i8], [256 x i8]* @idx_chr, i32 0, i32 %8
  %9 = load i8, i8* %arrayidx5, align 1
  %10 = load i8*, i8** %path.addr, align 4
  %11 = load i32, i32* %depth.addr, align 4
  %arrayidx6 = getelementptr inbounds i8, i8* %10, i32 %11
  store i8 %9, i8* %arrayidx6, align 1
  %12 = load i8*, i8** %path.addr, align 4
  %13 = load i32, i32* %depth.addr, align 4
  %add = add nsw i32 %13, 1
  %arrayidx7 = getelementptr inbounds i8, i8* %12, i32 %add
  store i8 0, i8* %arrayidx7, align 1
  %14 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %next8 = getelementptr inbounds %struct.trie_t, %struct.trie_t* %14, i32 0, i32 0
  %15 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next8, i32 0, i32 %15
  %16 = load %struct.trie_t*, %struct.trie_t** %arrayidx9, align 4
  %17 = load i8*, i8** %path.addr, align 4
  %18 = load i32, i32* %depth.addr, align 4
  %add10 = add nsw i32 %18, 1
  %19 = load i32 (i8*)*, i32 (i8*)** %callback.addr, align 4
  %call11 = call i32 @trie_all(%struct.trie_t* %16, i8* %17, i32 %add10, i32 (i8*)* %19)
  %tobool12 = icmp ne i32 %call11, 0
  br i1 %tobool12, label %if.end14, label %if.then13

if.then13:                                        ; preds = %if.end4
  store i32 0, i32* %retval, align 4
  br label %return

if.end14:                                         ; preds = %if.end4
  br label %for.inc

for.inc:                                          ; preds = %if.end14, %if.then3
  %20 = load i32, i32* %i, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then13, %if.then
  %21 = load i32, i32* %retval, align 4
  ret i32 %21
}

; Function Attrs: noinline nounwind optnone
define hidden void @add_index(%struct.trie_t* %root, i8* %word, i8* %fname) #0 {
entry:
  %root.addr = alloca %struct.trie_t*, align 4
  %word.addr = alloca i8*, align 4
  %fname.addr = alloca i8*, align 4
  %x = alloca %struct.trie_t*, align 4
  store %struct.trie_t* %root, %struct.trie_t** %root.addr, align 4
  store i8* %word, i8** %word.addr, align 4
  store i8* %fname, i8** %fname.addr, align 4
  %0 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %1 = load i8*, i8** %word.addr, align 4
  %call = call %struct.trie_t* @trie_trav(%struct.trie_t* %0, i8* %1, i32 0)
  store %struct.trie_t* %call, %struct.trie_t** %x, align 4
  %2 = load %struct.trie_t*, %struct.trie_t** %x, align 4
  %eow = getelementptr inbounds %struct.trie_t, %struct.trie_t* %2, i32 0, i32 1
  store i32 1, i32* %eow, align 4
  %3 = load %struct.trie_t*, %struct.trie_t** %x, align 4
  %next = getelementptr inbounds %struct.trie_t, %struct.trie_t* %3, i32 0, i32 0
  %arrayidx = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next, i32 0, i32 0
  %4 = load %struct.trie_t*, %struct.trie_t** %arrayidx, align 4
  %tobool = icmp ne %struct.trie_t* %4, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call1 = call %struct.trie_t* @trie_new()
  %5 = load %struct.trie_t*, %struct.trie_t** %x, align 4
  %next2 = getelementptr inbounds %struct.trie_t, %struct.trie_t* %5, i32 0, i32 0
  %arrayidx3 = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next2, i32 0, i32 0
  store %struct.trie_t* %call1, %struct.trie_t** %arrayidx3, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.trie_t*, %struct.trie_t** %x, align 4
  %next4 = getelementptr inbounds %struct.trie_t, %struct.trie_t* %6, i32 0, i32 0
  %arrayidx5 = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next4, i32 0, i32 0
  %7 = load %struct.trie_t*, %struct.trie_t** %arrayidx5, align 4
  %8 = load i8*, i8** %fname.addr, align 4
  %call6 = call %struct.trie_t* @trie_trav(%struct.trie_t* %7, i8* %8, i32 0)
  store %struct.trie_t* %call6, %struct.trie_t** %x, align 4
  %9 = load %struct.trie_t*, %struct.trie_t** %x, align 4
  %eow7 = getelementptr inbounds %struct.trie_t, %struct.trie_t* %9, i32 0, i32 1
  store i32 1, i32* %eow7, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @print_path(i8* %path) #0 {
entry:
  %path.addr = alloca i8*, align 4
  store i8* %path, i8** %path.addr, align 4
  %0 = load i8*, i8** %path.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* %0)
  ret i32 1
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.trie_t* @init_tables() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %root = alloca %struct.trie_t*, align 4
  %call = call %struct.trie_t* @trie_new()
  store %struct.trie_t* %call, %struct.trie_t** %root, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %0, 41
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %add = add nsw i32 %1, 1
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [41 x i8], [41 x i8]* @chr_legal, i32 0, i32 %2
  %3 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %3 to i32
  %arrayidx1 = getelementptr inbounds [256 x i32], [256 x i32]* @chr_idx, i32 0, i32 %conv
  store i32 %add, i32* %arrayidx1, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds [41 x i8], [41 x i8]* @chr_legal, i32 0, i32 %4
  %5 = load i8, i8* %arrayidx2, align 1
  %6 = load i32, i32* %i, align 4
  %add3 = add nsw i32 %6, 1
  %arrayidx4 = getelementptr inbounds [256 x i8], [256 x i8]* @idx_chr, i32 0, i32 %add3
  store i8 %5, i8* %arrayidx4, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc21, %for.end
  %8 = load i32, i32* %i, align 4
  %cmp6 = icmp slt i32 %8, 3
  br i1 %cmp6, label %for.body8, label %for.end23

for.body8:                                        ; preds = %for.cond5
  store i32 0, i32* %j, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc18, %for.body8
  %9 = load i32, i32* %j, align 4
  %cmp10 = icmp slt i32 %9, 5
  br i1 %cmp10, label %for.body12, label %for.end20

for.body12:                                       ; preds = %for.cond9
  %10 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds [3 x [5 x i8*]], [3 x [5 x i8*]]* @text, i32 0, i32 %10
  %11 = load i32, i32* %j, align 4
  %arrayidx14 = getelementptr inbounds [5 x i8*], [5 x i8*]* %arrayidx13, i32 0, i32 %11
  %12 = load i8*, i8** %arrayidx14, align 4
  %tobool = icmp ne i8* %12, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.body12
  br label %for.end20

if.end:                                           ; preds = %for.body12
  %13 = load %struct.trie_t*, %struct.trie_t** %root, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx15 = getelementptr inbounds [3 x [5 x i8*]], [3 x [5 x i8*]]* @text, i32 0, i32 %14
  %15 = load i32, i32* %j, align 4
  %arrayidx16 = getelementptr inbounds [5 x i8*], [5 x i8*]* %arrayidx15, i32 0, i32 %15
  %16 = load i8*, i8** %arrayidx16, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx17 = getelementptr inbounds [3 x i8*], [3 x i8*]* @files, i32 0, i32 %17
  %18 = load i8*, i8** %arrayidx17, align 4
  call void @add_index(%struct.trie_t* %13, i8* %16, i8* %18)
  br label %for.inc18

for.inc18:                                        ; preds = %if.end
  %19 = load i32, i32* %j, align 4
  %inc19 = add nsw i32 %19, 1
  store i32 %inc19, i32* %j, align 4
  br label %for.cond9

for.end20:                                        ; preds = %if.then, %for.cond9
  br label %for.inc21

for.inc21:                                        ; preds = %for.end20
  %20 = load i32, i32* %i, align 4
  %inc22 = add nsw i32 %20, 1
  store i32 %inc22, i32* %i, align 4
  br label %for.cond5

for.end23:                                        ; preds = %for.cond5
  %21 = load %struct.trie_t*, %struct.trie_t** %root, align 4
  ret %struct.trie_t* %21
}

; Function Attrs: noinline nounwind optnone
define hidden void @search_index(%struct.trie_t* %root, i8* %word) #0 {
entry:
  %root.addr = alloca %struct.trie_t*, align 4
  %word.addr = alloca i8*, align 4
  %path = alloca [1024 x i8], align 16
  %found = alloca %struct.trie_t*, align 4
  store %struct.trie_t* %root, %struct.trie_t** %root.addr, align 4
  store i8* %word, i8** %word.addr, align 4
  %0 = load i8*, i8** %word.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.9, i32 0, i32 0), i8* %0)
  %1 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %2 = load i8*, i8** %word.addr, align 4
  %call1 = call %struct.trie_t* @trie_trav(%struct.trie_t* %1, i8* %2, i32 1)
  store %struct.trie_t* %call1, %struct.trie_t** %found, align 4
  %3 = load %struct.trie_t*, %struct.trie_t** %found, align 4
  %tobool = icmp ne %struct.trie_t* %3, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.10, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %entry
  %4 = load %struct.trie_t*, %struct.trie_t** %found, align 4
  %next = getelementptr inbounds %struct.trie_t, %struct.trie_t* %4, i32 0, i32 0
  %arrayidx = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next, i32 0, i32 0
  %5 = load %struct.trie_t*, %struct.trie_t** %arrayidx, align 4
  %arraydecay = getelementptr inbounds [1024 x i8], [1024 x i8]* %path, i32 0, i32 0
  %call3 = call i32 @trie_all(%struct.trie_t* %5, i8* %arraydecay, i32 0, i32 (i8*)* @print_path)
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %root = alloca %struct.trie_t*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.trie_t* @init_tables()
  store %struct.trie_t* %call, %struct.trie_t** %root, align 4
  %0 = load %struct.trie_t*, %struct.trie_t** %root, align 4
  call void @search_index(%struct.trie_t* %0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0))
  %1 = load %struct.trie_t*, %struct.trie_t** %root, align 4
  call void @search_index(%struct.trie_t* %1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0))
  %2 = load %struct.trie_t*, %struct.trie_t** %root, align 4
  call void @search_index(%struct.trie_t* %2, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i32 0, i32 0))
  %3 = load %struct.trie_t*, %struct.trie_t** %root, align 4
  call void @search_index(%struct.trie_t* %3, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.12, i32 0, i32 0))
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ult i32 %0, 41
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ult %0, 41:i32
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %1, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i8, i8* %arrayidx, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %3 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i8, i8* %arrayidx2, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add3 = add nsw i32 %6, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %7, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp6 = icmp slt i32 %8, 3
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 3:i32
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp10 = icmp slt i32 %9, 5
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 5:i32
infer %1

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i8* %12, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc19 = add nsw i32 %19, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc22 = add nsw i32 %20, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 3:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 5:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for init_tables()

; entering Souper's runOnFunction() for search_index()

; ModuleID = './Inverted_index.c.bc'
source_filename = "./Inverted_index.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.trie_t = type { [41 x %struct.trie_t*], i32 }

@chr_legal = hidden global [41 x i8] c"abcdefghijklmnopqrstuvwxyz0123456789_-./\00", align 16
@chr_idx = hidden global [256 x i32] zeroinitializer, align 16
@idx_chr = hidden global [256 x i8] zeroinitializer, align 16
@.str = private unnamed_addr constant [4 x i8] c" %s\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"f1.txt\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"source/f2.txt\00", align 1
@.str.3 = private unnamed_addr constant [11 x i8] c"other_file\00", align 1
@files = hidden global [3 x i8*] [i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i32 0, i32 0)], align 4
@.str.4 = private unnamed_addr constant [3 x i8] c"it\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"is\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"what\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"a\00", align 1
@.str.8 = private unnamed_addr constant [7 x i8] c"banana\00", align 1
@text = hidden global [3 x [5 x i8*]] [[5 x i8*] [i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0)], [5 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i8* null, i8* null], [5 x i8*] [i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i32 0, i32 0), i8* null]], align 16
@.str.9 = private unnamed_addr constant [18 x i8] c"Search for \22%s\22: \00", align 1
@.str.10 = private unnamed_addr constant [11 x i8] c"not found\0A\00", align 1
@.str.11 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.12 = private unnamed_addr constant [4 x i8] c"boo\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.trie_t* @trie_new() #0 {
entry:
  %call = call noalias i8* @calloc(i32 168, i32 1)
  %0 = bitcast i8* %call to %struct.trie_t*
  ret %struct.trie_t* %0
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.trie_t* @trie_trav(%struct.trie_t* %root, i8* %str, i32 %no_create) #0 {
entry:
  %retval = alloca %struct.trie_t*, align 4
  %root.addr = alloca %struct.trie_t*, align 4
  %str.addr = alloca i8*, align 4
  %no_create.addr = alloca i32, align 4
  %c = alloca i32, align 4
  store %struct.trie_t* %root, %struct.trie_t** %root.addr, align 4
  store i8* %str, i8** %str.addr, align 4
  store i32 %no_create, i32* %no_create.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end18, %if.then8, %entry
  %0 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %tobool = icmp ne %struct.trie_t* %0, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i8*, i8** %str.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %1, i32 0
  %2 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %2 to i32
  store i32 %conv, i32* %c, align 4
  %cmp = icmp eq i32 %conv, 0
  br i1 %cmp, label %if.then, label %if.end5

if.then:                                          ; preds = %while.body
  %3 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %eow = getelementptr inbounds %struct.trie_t, %struct.trie_t* %3, i32 0, i32 1
  %4 = load i32, i32* %eow, align 4
  %tobool2 = icmp ne i32 %4, 0
  br i1 %tobool2, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.then
  %5 = load i32, i32* %no_create.addr, align 4
  %tobool3 = icmp ne i32 %5, 0
  br i1 %tobool3, label %if.then4, label %if.end

if.then4:                                         ; preds = %land.lhs.true
  store %struct.trie_t* null, %struct.trie_t** %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true, %if.then
  br label %while.end

if.end5:                                          ; preds = %while.body
  %6 = load i32, i32* %c, align 4
  %arrayidx6 = getelementptr inbounds [256 x i32], [256 x i32]* @chr_idx, i32 0, i32 %6
  %7 = load i32, i32* %arrayidx6, align 4
  store i32 %7, i32* %c, align 4
  %tobool7 = icmp ne i32 %7, 0
  br i1 %tobool7, label %if.end9, label %if.then8

if.then8:                                         ; preds = %if.end5
  %8 = load i8*, i8** %str.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %8, i32 1
  store i8* %incdec.ptr, i8** %str.addr, align 4
  br label %while.cond

if.end9:                                          ; preds = %if.end5
  %9 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %next = getelementptr inbounds %struct.trie_t, %struct.trie_t* %9, i32 0, i32 0
  %10 = load i32, i32* %c, align 4
  %arrayidx10 = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next, i32 0, i32 %10
  %11 = load %struct.trie_t*, %struct.trie_t** %arrayidx10, align 4
  %tobool11 = icmp ne %struct.trie_t* %11, null
  br i1 %tobool11, label %if.end18, label %if.then12

if.then12:                                        ; preds = %if.end9
  %12 = load i32, i32* %no_create.addr, align 4
  %tobool13 = icmp ne i32 %12, 0
  br i1 %tobool13, label %if.then14, label %if.end15

if.then14:                                        ; preds = %if.then12
  store %struct.trie_t* null, %struct.trie_t** %retval, align 4
  br label %return

if.end15:                                         ; preds = %if.then12
  %call = call %struct.trie_t* @trie_new()
  %13 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %next16 = getelementptr inbounds %struct.trie_t, %struct.trie_t* %13, i32 0, i32 0
  %14 = load i32, i32* %c, align 4
  %arrayidx17 = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next16, i32 0, i32 %14
  store %struct.trie_t* %call, %struct.trie_t** %arrayidx17, align 4
  br label %if.end18

if.end18:                                         ; preds = %if.end15, %if.end9
  %15 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %next19 = getelementptr inbounds %struct.trie_t, %struct.trie_t* %15, i32 0, i32 0
  %16 = load i32, i32* %c, align 4
  %arrayidx20 = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next19, i32 0, i32 %16
  %17 = load %struct.trie_t*, %struct.trie_t** %arrayidx20, align 4
  store %struct.trie_t* %17, %struct.trie_t** %root.addr, align 4
  %18 = load i8*, i8** %str.addr, align 4
  %incdec.ptr21 = getelementptr inbounds i8, i8* %18, i32 1
  store i8* %incdec.ptr21, i8** %str.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %if.end, %while.cond
  %19 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  store %struct.trie_t* %19, %struct.trie_t** %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then14, %if.then4
  %20 = load %struct.trie_t*, %struct.trie_t** %retval, align 4
  ret %struct.trie_t* %20
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @trie_all(%struct.trie_t* %root, i8* %path, i32 %depth, i32 (i8*)* %callback) #0 {
entry:
  %retval = alloca i32, align 4
  %root.addr = alloca %struct.trie_t*, align 4
  %path.addr = alloca i8*, align 4
  %depth.addr = alloca i32, align 4
  %callback.addr = alloca i32 (i8*)*, align 4
  %i = alloca i32, align 4
  store %struct.trie_t* %root, %struct.trie_t** %root.addr, align 4
  store i8* %path, i8** %path.addr, align 4
  store i32 %depth, i32* %depth.addr, align 4
  store i32 (i8*)* %callback, i32 (i8*)** %callback.addr, align 4
  %0 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %eow = getelementptr inbounds %struct.trie_t, %struct.trie_t* %0, i32 0, i32 1
  %1 = load i32, i32* %eow, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load i32 (i8*)*, i32 (i8*)** %callback.addr, align 4
  %3 = load i8*, i8** %path.addr, align 4
  %call = call i32 %2(i8* %3)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %4 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %4, 41
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %next = getelementptr inbounds %struct.trie_t, %struct.trie_t* %5, i32 0, i32 0
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next, i32 0, i32 %6
  %7 = load %struct.trie_t*, %struct.trie_t** %arrayidx, align 4
  %tobool2 = icmp ne %struct.trie_t* %7, null
  br i1 %tobool2, label %if.end4, label %if.then3

if.then3:                                         ; preds = %for.body
  br label %for.inc

if.end4:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds [256 x i8], [256 x i8]* @idx_chr, i32 0, i32 %8
  %9 = load i8, i8* %arrayidx5, align 1
  %10 = load i8*, i8** %path.addr, align 4
  %11 = load i32, i32* %depth.addr, align 4
  %arrayidx6 = getelementptr inbounds i8, i8* %10, i32 %11
  store i8 %9, i8* %arrayidx6, align 1
  %12 = load i8*, i8** %path.addr, align 4
  %13 = load i32, i32* %depth.addr, align 4
  %add = add nsw i32 %13, 1
  %arrayidx7 = getelementptr inbounds i8, i8* %12, i32 %add
  store i8 0, i8* %arrayidx7, align 1
  %14 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %next8 = getelementptr inbounds %struct.trie_t, %struct.trie_t* %14, i32 0, i32 0
  %15 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next8, i32 0, i32 %15
  %16 = load %struct.trie_t*, %struct.trie_t** %arrayidx9, align 4
  %17 = load i8*, i8** %path.addr, align 4
  %18 = load i32, i32* %depth.addr, align 4
  %add10 = add nsw i32 %18, 1
  %19 = load i32 (i8*)*, i32 (i8*)** %callback.addr, align 4
  %call11 = call i32 @trie_all(%struct.trie_t* %16, i8* %17, i32 %add10, i32 (i8*)* %19)
  %tobool12 = icmp ne i32 %call11, 0
  br i1 %tobool12, label %if.end14, label %if.then13

if.then13:                                        ; preds = %if.end4
  store i32 0, i32* %retval, align 4
  br label %return

if.end14:                                         ; preds = %if.end4
  br label %for.inc

for.inc:                                          ; preds = %if.end14, %if.then3
  %20 = load i32, i32* %i, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then13, %if.then
  %21 = load i32, i32* %retval, align 4
  ret i32 %21
}

; Function Attrs: noinline nounwind optnone
define hidden void @add_index(%struct.trie_t* %root, i8* %word, i8* %fname) #0 {
entry:
  %root.addr = alloca %struct.trie_t*, align 4
  %word.addr = alloca i8*, align 4
  %fname.addr = alloca i8*, align 4
  %x = alloca %struct.trie_t*, align 4
  store %struct.trie_t* %root, %struct.trie_t** %root.addr, align 4
  store i8* %word, i8** %word.addr, align 4
  store i8* %fname, i8** %fname.addr, align 4
  %0 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %1 = load i8*, i8** %word.addr, align 4
  %call = call %struct.trie_t* @trie_trav(%struct.trie_t* %0, i8* %1, i32 0)
  store %struct.trie_t* %call, %struct.trie_t** %x, align 4
  %2 = load %struct.trie_t*, %struct.trie_t** %x, align 4
  %eow = getelementptr inbounds %struct.trie_t, %struct.trie_t* %2, i32 0, i32 1
  store i32 1, i32* %eow, align 4
  %3 = load %struct.trie_t*, %struct.trie_t** %x, align 4
  %next = getelementptr inbounds %struct.trie_t, %struct.trie_t* %3, i32 0, i32 0
  %arrayidx = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next, i32 0, i32 0
  %4 = load %struct.trie_t*, %struct.trie_t** %arrayidx, align 4
  %tobool = icmp ne %struct.trie_t* %4, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call1 = call %struct.trie_t* @trie_new()
  %5 = load %struct.trie_t*, %struct.trie_t** %x, align 4
  %next2 = getelementptr inbounds %struct.trie_t, %struct.trie_t* %5, i32 0, i32 0
  %arrayidx3 = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next2, i32 0, i32 0
  store %struct.trie_t* %call1, %struct.trie_t** %arrayidx3, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.trie_t*, %struct.trie_t** %x, align 4
  %next4 = getelementptr inbounds %struct.trie_t, %struct.trie_t* %6, i32 0, i32 0
  %arrayidx5 = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next4, i32 0, i32 0
  %7 = load %struct.trie_t*, %struct.trie_t** %arrayidx5, align 4
  %8 = load i8*, i8** %fname.addr, align 4
  %call6 = call %struct.trie_t* @trie_trav(%struct.trie_t* %7, i8* %8, i32 0)
  store %struct.trie_t* %call6, %struct.trie_t** %x, align 4
  %9 = load %struct.trie_t*, %struct.trie_t** %x, align 4
  %eow7 = getelementptr inbounds %struct.trie_t, %struct.trie_t* %9, i32 0, i32 1
  store i32 1, i32* %eow7, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @print_path(i8* %path) #0 {
entry:
  %path.addr = alloca i8*, align 4
  store i8* %path, i8** %path.addr, align 4
  %0 = load i8*, i8** %path.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* %0)
  ret i32 1
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.trie_t* @init_tables() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %root = alloca %struct.trie_t*, align 4
  %call = call %struct.trie_t* @trie_new()
  store %struct.trie_t* %call, %struct.trie_t** %root, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %0, 41
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %add = add nsw i32 %1, 1
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [41 x i8], [41 x i8]* @chr_legal, i32 0, i32 %2
  %3 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %3 to i32
  %arrayidx1 = getelementptr inbounds [256 x i32], [256 x i32]* @chr_idx, i32 0, i32 %conv
  store i32 %add, i32* %arrayidx1, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds [41 x i8], [41 x i8]* @chr_legal, i32 0, i32 %4
  %5 = load i8, i8* %arrayidx2, align 1
  %6 = load i32, i32* %i, align 4
  %add3 = add nsw i32 %6, 1
  %arrayidx4 = getelementptr inbounds [256 x i8], [256 x i8]* @idx_chr, i32 0, i32 %add3
  store i8 %5, i8* %arrayidx4, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc21, %for.end
  %8 = load i32, i32* %i, align 4
  %cmp6 = icmp slt i32 %8, 3
  br i1 %cmp6, label %for.body8, label %for.end23

for.body8:                                        ; preds = %for.cond5
  store i32 0, i32* %j, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc18, %for.body8
  %9 = load i32, i32* %j, align 4
  %cmp10 = icmp slt i32 %9, 5
  br i1 %cmp10, label %for.body12, label %for.end20

for.body12:                                       ; preds = %for.cond9
  %10 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds [3 x [5 x i8*]], [3 x [5 x i8*]]* @text, i32 0, i32 %10
  %11 = load i32, i32* %j, align 4
  %arrayidx14 = getelementptr inbounds [5 x i8*], [5 x i8*]* %arrayidx13, i32 0, i32 %11
  %12 = load i8*, i8** %arrayidx14, align 4
  %tobool = icmp ne i8* %12, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.body12
  br label %for.end20

if.end:                                           ; preds = %for.body12
  %13 = load %struct.trie_t*, %struct.trie_t** %root, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx15 = getelementptr inbounds [3 x [5 x i8*]], [3 x [5 x i8*]]* @text, i32 0, i32 %14
  %15 = load i32, i32* %j, align 4
  %arrayidx16 = getelementptr inbounds [5 x i8*], [5 x i8*]* %arrayidx15, i32 0, i32 %15
  %16 = load i8*, i8** %arrayidx16, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx17 = getelementptr inbounds [3 x i8*], [3 x i8*]* @files, i32 0, i32 %17
  %18 = load i8*, i8** %arrayidx17, align 4
  call void @add_index(%struct.trie_t* %13, i8* %16, i8* %18)
  br label %for.inc18

for.inc18:                                        ; preds = %if.end
  %19 = load i32, i32* %j, align 4
  %inc19 = add nsw i32 %19, 1
  store i32 %inc19, i32* %j, align 4
  br label %for.cond9

for.end20:                                        ; preds = %if.then, %for.cond9
  br label %for.inc21

for.inc21:                                        ; preds = %for.end20
  %20 = load i32, i32* %i, align 4
  %inc22 = add nsw i32 %20, 1
  store i32 %inc22, i32* %i, align 4
  br label %for.cond5

for.end23:                                        ; preds = %for.cond5
  %21 = load %struct.trie_t*, %struct.trie_t** %root, align 4
  ret %struct.trie_t* %21
}

; Function Attrs: noinline nounwind optnone
define hidden void @search_index(%struct.trie_t* %root, i8* %word) #0 {
entry:
  %root.addr = alloca %struct.trie_t*, align 4
  %word.addr = alloca i8*, align 4
  %path = alloca [1024 x i8], align 16
  %found = alloca %struct.trie_t*, align 4
  store %struct.trie_t* %root, %struct.trie_t** %root.addr, align 4
  store i8* %word, i8** %word.addr, align 4
  %0 = load i8*, i8** %word.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.9, i32 0, i32 0), i8* %0)
  %1 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %2 = load i8*, i8** %word.addr, align 4
  %call1 = call %struct.trie_t* @trie_trav(%struct.trie_t* %1, i8* %2, i32 1)
  store %struct.trie_t* %call1, %struct.trie_t** %found, align 4
  %3 = load %struct.trie_t*, %struct.trie_t** %found, align 4
  %tobool = icmp ne %struct.trie_t* %3, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.10, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %entry
  %4 = load %struct.trie_t*, %struct.trie_t** %found, align 4
  %next = getelementptr inbounds %struct.trie_t, %struct.trie_t* %4, i32 0, i32 0
  %arrayidx = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next, i32 0, i32 0
  %5 = load %struct.trie_t*, %struct.trie_t** %arrayidx, align 4
  %arraydecay = getelementptr inbounds [1024 x i8], [1024 x i8]* %path, i32 0, i32 0
  %call3 = call i32 @trie_all(%struct.trie_t* %5, i8* %arraydecay, i32 0, i32 (i8*)* @print_path)
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %root = alloca %struct.trie_t*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.trie_t* @init_tables()
  store %struct.trie_t* %call, %struct.trie_t** %root, align 4
  %0 = load %struct.trie_t*, %struct.trie_t** %root, align 4
  call void @search_index(%struct.trie_t* %0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0))
  %1 = load %struct.trie_t*, %struct.trie_t** %root, align 4
  call void @search_index(%struct.trie_t* %1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0))
  %2 = load %struct.trie_t*, %struct.trie_t** %root, align 4
  call void @search_index(%struct.trie_t* %2, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i32 0, i32 0))
  %3 = load %struct.trie_t*, %struct.trie_t** %root, align 4
  call void @search_index(%struct.trie_t* %3, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.12, i32 0, i32 0))
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %tobool = icmp ne %struct.trie_t* %3, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for search_index()

; entering Souper's runOnFunction() for main()

; ModuleID = './Inverted_index.c.bc'
source_filename = "./Inverted_index.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.trie_t = type { [41 x %struct.trie_t*], i32 }

@chr_legal = hidden global [41 x i8] c"abcdefghijklmnopqrstuvwxyz0123456789_-./\00", align 16
@chr_idx = hidden global [256 x i32] zeroinitializer, align 16
@idx_chr = hidden global [256 x i8] zeroinitializer, align 16
@.str = private unnamed_addr constant [4 x i8] c" %s\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"f1.txt\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"source/f2.txt\00", align 1
@.str.3 = private unnamed_addr constant [11 x i8] c"other_file\00", align 1
@files = hidden global [3 x i8*] [i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i32 0, i32 0)], align 4
@.str.4 = private unnamed_addr constant [3 x i8] c"it\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"is\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"what\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"a\00", align 1
@.str.8 = private unnamed_addr constant [7 x i8] c"banana\00", align 1
@text = hidden global [3 x [5 x i8*]] [[5 x i8*] [i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0)], [5 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i8* null, i8* null], [5 x i8*] [i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i32 0, i32 0), i8* null]], align 16
@.str.9 = private unnamed_addr constant [18 x i8] c"Search for \22%s\22: \00", align 1
@.str.10 = private unnamed_addr constant [11 x i8] c"not found\0A\00", align 1
@.str.11 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.12 = private unnamed_addr constant [4 x i8] c"boo\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.trie_t* @trie_new() #0 {
entry:
  %call = call noalias i8* @calloc(i32 168, i32 1)
  %0 = bitcast i8* %call to %struct.trie_t*
  ret %struct.trie_t* %0
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.trie_t* @trie_trav(%struct.trie_t* %root, i8* %str, i32 %no_create) #0 {
entry:
  %retval = alloca %struct.trie_t*, align 4
  %root.addr = alloca %struct.trie_t*, align 4
  %str.addr = alloca i8*, align 4
  %no_create.addr = alloca i32, align 4
  %c = alloca i32, align 4
  store %struct.trie_t* %root, %struct.trie_t** %root.addr, align 4
  store i8* %str, i8** %str.addr, align 4
  store i32 %no_create, i32* %no_create.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end18, %if.then8, %entry
  %0 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %tobool = icmp ne %struct.trie_t* %0, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i8*, i8** %str.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %1, i32 0
  %2 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %2 to i32
  store i32 %conv, i32* %c, align 4
  %cmp = icmp eq i32 %conv, 0
  br i1 %cmp, label %if.then, label %if.end5

if.then:                                          ; preds = %while.body
  %3 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %eow = getelementptr inbounds %struct.trie_t, %struct.trie_t* %3, i32 0, i32 1
  %4 = load i32, i32* %eow, align 4
  %tobool2 = icmp ne i32 %4, 0
  br i1 %tobool2, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.then
  %5 = load i32, i32* %no_create.addr, align 4
  %tobool3 = icmp ne i32 %5, 0
  br i1 %tobool3, label %if.then4, label %if.end

if.then4:                                         ; preds = %land.lhs.true
  store %struct.trie_t* null, %struct.trie_t** %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true, %if.then
  br label %while.end

if.end5:                                          ; preds = %while.body
  %6 = load i32, i32* %c, align 4
  %arrayidx6 = getelementptr inbounds [256 x i32], [256 x i32]* @chr_idx, i32 0, i32 %6
  %7 = load i32, i32* %arrayidx6, align 4
  store i32 %7, i32* %c, align 4
  %tobool7 = icmp ne i32 %7, 0
  br i1 %tobool7, label %if.end9, label %if.then8

if.then8:                                         ; preds = %if.end5
  %8 = load i8*, i8** %str.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %8, i32 1
  store i8* %incdec.ptr, i8** %str.addr, align 4
  br label %while.cond

if.end9:                                          ; preds = %if.end5
  %9 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %next = getelementptr inbounds %struct.trie_t, %struct.trie_t* %9, i32 0, i32 0
  %10 = load i32, i32* %c, align 4
  %arrayidx10 = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next, i32 0, i32 %10
  %11 = load %struct.trie_t*, %struct.trie_t** %arrayidx10, align 4
  %tobool11 = icmp ne %struct.trie_t* %11, null
  br i1 %tobool11, label %if.end18, label %if.then12

if.then12:                                        ; preds = %if.end9
  %12 = load i32, i32* %no_create.addr, align 4
  %tobool13 = icmp ne i32 %12, 0
  br i1 %tobool13, label %if.then14, label %if.end15

if.then14:                                        ; preds = %if.then12
  store %struct.trie_t* null, %struct.trie_t** %retval, align 4
  br label %return

if.end15:                                         ; preds = %if.then12
  %call = call %struct.trie_t* @trie_new()
  %13 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %next16 = getelementptr inbounds %struct.trie_t, %struct.trie_t* %13, i32 0, i32 0
  %14 = load i32, i32* %c, align 4
  %arrayidx17 = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next16, i32 0, i32 %14
  store %struct.trie_t* %call, %struct.trie_t** %arrayidx17, align 4
  br label %if.end18

if.end18:                                         ; preds = %if.end15, %if.end9
  %15 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %next19 = getelementptr inbounds %struct.trie_t, %struct.trie_t* %15, i32 0, i32 0
  %16 = load i32, i32* %c, align 4
  %arrayidx20 = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next19, i32 0, i32 %16
  %17 = load %struct.trie_t*, %struct.trie_t** %arrayidx20, align 4
  store %struct.trie_t* %17, %struct.trie_t** %root.addr, align 4
  %18 = load i8*, i8** %str.addr, align 4
  %incdec.ptr21 = getelementptr inbounds i8, i8* %18, i32 1
  store i8* %incdec.ptr21, i8** %str.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %if.end, %while.cond
  %19 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  store %struct.trie_t* %19, %struct.trie_t** %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then14, %if.then4
  %20 = load %struct.trie_t*, %struct.trie_t** %retval, align 4
  ret %struct.trie_t* %20
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @trie_all(%struct.trie_t* %root, i8* %path, i32 %depth, i32 (i8*)* %callback) #0 {
entry:
  %retval = alloca i32, align 4
  %root.addr = alloca %struct.trie_t*, align 4
  %path.addr = alloca i8*, align 4
  %depth.addr = alloca i32, align 4
  %callback.addr = alloca i32 (i8*)*, align 4
  %i = alloca i32, align 4
  store %struct.trie_t* %root, %struct.trie_t** %root.addr, align 4
  store i8* %path, i8** %path.addr, align 4
  store i32 %depth, i32* %depth.addr, align 4
  store i32 (i8*)* %callback, i32 (i8*)** %callback.addr, align 4
  %0 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %eow = getelementptr inbounds %struct.trie_t, %struct.trie_t* %0, i32 0, i32 1
  %1 = load i32, i32* %eow, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load i32 (i8*)*, i32 (i8*)** %callback.addr, align 4
  %3 = load i8*, i8** %path.addr, align 4
  %call = call i32 %2(i8* %3)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %4 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %4, 41
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %next = getelementptr inbounds %struct.trie_t, %struct.trie_t* %5, i32 0, i32 0
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next, i32 0, i32 %6
  %7 = load %struct.trie_t*, %struct.trie_t** %arrayidx, align 4
  %tobool2 = icmp ne %struct.trie_t* %7, null
  br i1 %tobool2, label %if.end4, label %if.then3

if.then3:                                         ; preds = %for.body
  br label %for.inc

if.end4:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds [256 x i8], [256 x i8]* @idx_chr, i32 0, i32 %8
  %9 = load i8, i8* %arrayidx5, align 1
  %10 = load i8*, i8** %path.addr, align 4
  %11 = load i32, i32* %depth.addr, align 4
  %arrayidx6 = getelementptr inbounds i8, i8* %10, i32 %11
  store i8 %9, i8* %arrayidx6, align 1
  %12 = load i8*, i8** %path.addr, align 4
  %13 = load i32, i32* %depth.addr, align 4
  %add = add nsw i32 %13, 1
  %arrayidx7 = getelementptr inbounds i8, i8* %12, i32 %add
  store i8 0, i8* %arrayidx7, align 1
  %14 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %next8 = getelementptr inbounds %struct.trie_t, %struct.trie_t* %14, i32 0, i32 0
  %15 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next8, i32 0, i32 %15
  %16 = load %struct.trie_t*, %struct.trie_t** %arrayidx9, align 4
  %17 = load i8*, i8** %path.addr, align 4
  %18 = load i32, i32* %depth.addr, align 4
  %add10 = add nsw i32 %18, 1
  %19 = load i32 (i8*)*, i32 (i8*)** %callback.addr, align 4
  %call11 = call i32 @trie_all(%struct.trie_t* %16, i8* %17, i32 %add10, i32 (i8*)* %19)
  %tobool12 = icmp ne i32 %call11, 0
  br i1 %tobool12, label %if.end14, label %if.then13

if.then13:                                        ; preds = %if.end4
  store i32 0, i32* %retval, align 4
  br label %return

if.end14:                                         ; preds = %if.end4
  br label %for.inc

for.inc:                                          ; preds = %if.end14, %if.then3
  %20 = load i32, i32* %i, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then13, %if.then
  %21 = load i32, i32* %retval, align 4
  ret i32 %21
}

; Function Attrs: noinline nounwind optnone
define hidden void @add_index(%struct.trie_t* %root, i8* %word, i8* %fname) #0 {
entry:
  %root.addr = alloca %struct.trie_t*, align 4
  %word.addr = alloca i8*, align 4
  %fname.addr = alloca i8*, align 4
  %x = alloca %struct.trie_t*, align 4
  store %struct.trie_t* %root, %struct.trie_t** %root.addr, align 4
  store i8* %word, i8** %word.addr, align 4
  store i8* %fname, i8** %fname.addr, align 4
  %0 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %1 = load i8*, i8** %word.addr, align 4
  %call = call %struct.trie_t* @trie_trav(%struct.trie_t* %0, i8* %1, i32 0)
  store %struct.trie_t* %call, %struct.trie_t** %x, align 4
  %2 = load %struct.trie_t*, %struct.trie_t** %x, align 4
  %eow = getelementptr inbounds %struct.trie_t, %struct.trie_t* %2, i32 0, i32 1
  store i32 1, i32* %eow, align 4
  %3 = load %struct.trie_t*, %struct.trie_t** %x, align 4
  %next = getelementptr inbounds %struct.trie_t, %struct.trie_t* %3, i32 0, i32 0
  %arrayidx = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next, i32 0, i32 0
  %4 = load %struct.trie_t*, %struct.trie_t** %arrayidx, align 4
  %tobool = icmp ne %struct.trie_t* %4, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call1 = call %struct.trie_t* @trie_new()
  %5 = load %struct.trie_t*, %struct.trie_t** %x, align 4
  %next2 = getelementptr inbounds %struct.trie_t, %struct.trie_t* %5, i32 0, i32 0
  %arrayidx3 = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next2, i32 0, i32 0
  store %struct.trie_t* %call1, %struct.trie_t** %arrayidx3, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.trie_t*, %struct.trie_t** %x, align 4
  %next4 = getelementptr inbounds %struct.trie_t, %struct.trie_t* %6, i32 0, i32 0
  %arrayidx5 = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next4, i32 0, i32 0
  %7 = load %struct.trie_t*, %struct.trie_t** %arrayidx5, align 4
  %8 = load i8*, i8** %fname.addr, align 4
  %call6 = call %struct.trie_t* @trie_trav(%struct.trie_t* %7, i8* %8, i32 0)
  store %struct.trie_t* %call6, %struct.trie_t** %x, align 4
  %9 = load %struct.trie_t*, %struct.trie_t** %x, align 4
  %eow7 = getelementptr inbounds %struct.trie_t, %struct.trie_t* %9, i32 0, i32 1
  store i32 1, i32* %eow7, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @print_path(i8* %path) #0 {
entry:
  %path.addr = alloca i8*, align 4
  store i8* %path, i8** %path.addr, align 4
  %0 = load i8*, i8** %path.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* %0)
  ret i32 1
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.trie_t* @init_tables() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %root = alloca %struct.trie_t*, align 4
  %call = call %struct.trie_t* @trie_new()
  store %struct.trie_t* %call, %struct.trie_t** %root, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %0, 41
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %add = add nsw i32 %1, 1
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [41 x i8], [41 x i8]* @chr_legal, i32 0, i32 %2
  %3 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %3 to i32
  %arrayidx1 = getelementptr inbounds [256 x i32], [256 x i32]* @chr_idx, i32 0, i32 %conv
  store i32 %add, i32* %arrayidx1, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds [41 x i8], [41 x i8]* @chr_legal, i32 0, i32 %4
  %5 = load i8, i8* %arrayidx2, align 1
  %6 = load i32, i32* %i, align 4
  %add3 = add nsw i32 %6, 1
  %arrayidx4 = getelementptr inbounds [256 x i8], [256 x i8]* @idx_chr, i32 0, i32 %add3
  store i8 %5, i8* %arrayidx4, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc21, %for.end
  %8 = load i32, i32* %i, align 4
  %cmp6 = icmp slt i32 %8, 3
  br i1 %cmp6, label %for.body8, label %for.end23

for.body8:                                        ; preds = %for.cond5
  store i32 0, i32* %j, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc18, %for.body8
  %9 = load i32, i32* %j, align 4
  %cmp10 = icmp slt i32 %9, 5
  br i1 %cmp10, label %for.body12, label %for.end20

for.body12:                                       ; preds = %for.cond9
  %10 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds [3 x [5 x i8*]], [3 x [5 x i8*]]* @text, i32 0, i32 %10
  %11 = load i32, i32* %j, align 4
  %arrayidx14 = getelementptr inbounds [5 x i8*], [5 x i8*]* %arrayidx13, i32 0, i32 %11
  %12 = load i8*, i8** %arrayidx14, align 4
  %tobool = icmp ne i8* %12, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.body12
  br label %for.end20

if.end:                                           ; preds = %for.body12
  %13 = load %struct.trie_t*, %struct.trie_t** %root, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx15 = getelementptr inbounds [3 x [5 x i8*]], [3 x [5 x i8*]]* @text, i32 0, i32 %14
  %15 = load i32, i32* %j, align 4
  %arrayidx16 = getelementptr inbounds [5 x i8*], [5 x i8*]* %arrayidx15, i32 0, i32 %15
  %16 = load i8*, i8** %arrayidx16, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx17 = getelementptr inbounds [3 x i8*], [3 x i8*]* @files, i32 0, i32 %17
  %18 = load i8*, i8** %arrayidx17, align 4
  call void @add_index(%struct.trie_t* %13, i8* %16, i8* %18)
  br label %for.inc18

for.inc18:                                        ; preds = %if.end
  %19 = load i32, i32* %j, align 4
  %inc19 = add nsw i32 %19, 1
  store i32 %inc19, i32* %j, align 4
  br label %for.cond9

for.end20:                                        ; preds = %if.then, %for.cond9
  br label %for.inc21

for.inc21:                                        ; preds = %for.end20
  %20 = load i32, i32* %i, align 4
  %inc22 = add nsw i32 %20, 1
  store i32 %inc22, i32* %i, align 4
  br label %for.cond5

for.end23:                                        ; preds = %for.cond5
  %21 = load %struct.trie_t*, %struct.trie_t** %root, align 4
  ret %struct.trie_t* %21
}

; Function Attrs: noinline nounwind optnone
define hidden void @search_index(%struct.trie_t* %root, i8* %word) #0 {
entry:
  %root.addr = alloca %struct.trie_t*, align 4
  %word.addr = alloca i8*, align 4
  %path = alloca [1024 x i8], align 16
  %found = alloca %struct.trie_t*, align 4
  store %struct.trie_t* %root, %struct.trie_t** %root.addr, align 4
  store i8* %word, i8** %word.addr, align 4
  %0 = load i8*, i8** %word.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.9, i32 0, i32 0), i8* %0)
  %1 = load %struct.trie_t*, %struct.trie_t** %root.addr, align 4
  %2 = load i8*, i8** %word.addr, align 4
  %call1 = call %struct.trie_t* @trie_trav(%struct.trie_t* %1, i8* %2, i32 1)
  store %struct.trie_t* %call1, %struct.trie_t** %found, align 4
  %3 = load %struct.trie_t*, %struct.trie_t** %found, align 4
  %tobool = icmp ne %struct.trie_t* %3, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.10, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %entry
  %4 = load %struct.trie_t*, %struct.trie_t** %found, align 4
  %next = getelementptr inbounds %struct.trie_t, %struct.trie_t* %4, i32 0, i32 0
  %arrayidx = getelementptr inbounds [41 x %struct.trie_t*], [41 x %struct.trie_t*]* %next, i32 0, i32 0
  %5 = load %struct.trie_t*, %struct.trie_t** %arrayidx, align 4
  %arraydecay = getelementptr inbounds [1024 x i8], [1024 x i8]* %path, i32 0, i32 0
  %call3 = call i32 @trie_all(%struct.trie_t* %5, i8* %arraydecay, i32 0, i32 (i8*)* @print_path)
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %root = alloca %struct.trie_t*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.trie_t* @init_tables()
  store %struct.trie_t* %call, %struct.trie_t** %root, align 4
  %0 = load %struct.trie_t*, %struct.trie_t** %root, align 4
  call void @search_index(%struct.trie_t* %0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0))
  %1 = load %struct.trie_t*, %struct.trie_t** %root, align 4
  call void @search_index(%struct.trie_t* %1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0))
  %2 = load %struct.trie_t*, %struct.trie_t** %root, align 4
  call void @search_index(%struct.trie_t* %2, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i32 0, i32 0))
  %3 = load %struct.trie_t*, %struct.trie_t** %root, align 4
  call void @search_index(%struct.trie_t* %3, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.12, i32 0, i32 0))
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
