
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for compareStrings()

; ModuleID = './Burrowsâ€“Wheeler_transform.c.bc'
source_filename = "./Burrows\E2\80\93Wheeler_transform.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@STX = hidden constant i8 2, align 1
@ETX = hidden constant i8 3, align 1
@.str = private unnamed_addr constant [7 x i8] c"%c%s%c\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"banana\00", align 1
@.str.2 = private unnamed_addr constant [9 x i8] c"appellee\00", align 1
@.str.3 = private unnamed_addr constant [8 x i8] c"dogwood\00", align 1
@.str.4 = private unnamed_addr constant [41 x i8] c"TO BE OR NOT TO BE OR WANT TO BE OR NOT?\00", align 1
@.str.5 = private unnamed_addr constant [45 x i8] c"SIX.MIXED.PIXIES.SIFT.SIXTY.PIXIE.DUST.BOXES\00", align 1
@.str.6 = private unnamed_addr constant [6 x i8] c"\02ABC\03\00", align 1
@.str.7 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.8 = private unnamed_addr constant [6 x i8] c" --> \00", align 1
@.str.9 = private unnamed_addr constant [40 x i8] c"ERROR: String can't contain STX or ETX\0A\00", align 1
@.str.10 = private unnamed_addr constant [10 x i8] c" --> %s\0A\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @compareStrings(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %aa = alloca i8*, align 4
  %bb = alloca i8*, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to i8**
  %2 = load i8*, i8** %1, align 4
  store i8* %2, i8** %aa, align 4
  %3 = load i8*, i8** %b.addr, align 4
  %4 = bitcast i8* %3 to i8**
  %5 = load i8*, i8** %4, align 4
  store i8* %5, i8** %bb, align 4
  %6 = load i8*, i8** %aa, align 4
  %7 = load i8*, i8** %bb, align 4
  %call = call i32 @strcmp(i8* %6, i8* %7) #4
  ret i32 %call
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @bwt(i8* %s, i8* %r) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca i8*, align 4
  %r.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  %ss = alloca i8*, align 4
  %str = alloca i8*, align 4
  %table = alloca i8**, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8* %r, i8** %r.addr, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %call = call i32 @strlen(i8* %0) #4
  %add = add i32 %call, 2
  store i32 %add, i32* %len, align 4
  %1 = load i8*, i8** %s.addr, align 4
  %call1 = call i8* @strchr(i8* %1, i32 2)
  %tobool = icmp ne i8* %call1, null
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load i8*, i8** %s.addr, align 4
  %call2 = call i8* @strchr(i8* %2, i32 3)
  %tobool3 = icmp ne i8* %call2, null
  br i1 %tobool3, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %3 = load i32, i32* %len, align 4
  %add4 = add nsw i32 %3, 1
  %call5 = call noalias i8* @calloc(i32 %add4, i32 1)
  store i8* %call5, i8** %ss, align 4
  %4 = load i8*, i8** %ss, align 4
  %5 = load i8*, i8** %s.addr, align 4
  %call6 = call i32 (i8*, i8*, ...) @sprintf(i8* %4, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 2, i8* %5, i32 3)
  %6 = load i32, i32* %len, align 4
  %mul = mul i32 %6, 4
  %call7 = call noalias i8* @malloc(i32 %mul)
  %7 = bitcast i8* %call7 to i8**
  store i8** %7, i8*** %table, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %8 = load i32, i32* %i, align 4
  %9 = load i32, i32* %len, align 4
  %cmp = icmp slt i32 %8, %9
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %10 = load i32, i32* %len, align 4
  %add8 = add nsw i32 %10, 1
  %call9 = call noalias i8* @calloc(i32 %add8, i32 1)
  store i8* %call9, i8** %str, align 4
  %11 = load i8*, i8** %str, align 4
  %12 = load i8*, i8** %ss, align 4
  %13 = load i32, i32* %i, align 4
  %add.ptr = getelementptr inbounds i8, i8* %12, i32 %13
  %call10 = call i8* @strcpy(i8* %11, i8* %add.ptr)
  %14 = load i32, i32* %i, align 4
  %cmp11 = icmp sgt i32 %14, 0
  br i1 %cmp11, label %if.then12, label %if.end14

if.then12:                                        ; preds = %for.body
  %15 = load i8*, i8** %str, align 4
  %16 = load i8*, i8** %ss, align 4
  %17 = load i32, i32* %i, align 4
  %call13 = call i8* @strncat(i8* %15, i8* %16, i32 %17)
  br label %if.end14

if.end14:                                         ; preds = %if.then12, %for.body
  %18 = load i8*, i8** %str, align 4
  %19 = load i8**, i8*** %table, align 4
  %20 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %19, i32 %20
  store i8* %18, i8** %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end14
  %21 = load i32, i32* %i, align 4
  %inc = add nsw i32 %21, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %22 = load i8**, i8*** %table, align 4
  %23 = bitcast i8** %22 to i8*
  %24 = load i32, i32* %len, align 4
  call void @qsort(i8* %23, i32 %24, i32 4, i32 (i8*, i8*)* @compareStrings)
  store i32 0, i32* %i, align 4
  br label %for.cond15

for.cond15:                                       ; preds = %for.inc22, %for.end
  %25 = load i32, i32* %i, align 4
  %26 = load i32, i32* %len, align 4
  %cmp16 = icmp slt i32 %25, %26
  br i1 %cmp16, label %for.body17, label %for.end24

for.body17:                                       ; preds = %for.cond15
  %27 = load i8**, i8*** %table, align 4
  %28 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds i8*, i8** %27, i32 %28
  %29 = load i8*, i8** %arrayidx18, align 4
  %30 = load i32, i32* %len, align 4
  %sub = sub nsw i32 %30, 1
  %arrayidx19 = getelementptr inbounds i8, i8* %29, i32 %sub
  %31 = load i8, i8* %arrayidx19, align 1
  %32 = load i8*, i8** %r.addr, align 4
  %33 = load i32, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds i8, i8* %32, i32 %33
  store i8 %31, i8* %arrayidx20, align 1
  %34 = load i8**, i8*** %table, align 4
  %35 = load i32, i32* %i, align 4
  %arrayidx21 = getelementptr inbounds i8*, i8** %34, i32 %35
  %36 = load i8*, i8** %arrayidx21, align 4
  call void @free(i8* %36)
  br label %for.inc22

for.inc22:                                        ; preds = %for.body17
  %37 = load i32, i32* %i, align 4
  %inc23 = add nsw i32 %37, 1
  store i32 %inc23, i32* %i, align 4
  br label %for.cond15

for.end24:                                        ; preds = %for.cond15
  %38 = load i8**, i8*** %table, align 4
  %39 = bitcast i8** %38 to i8*
  call void @free(i8* %39)
  %40 = load i8*, i8** %ss, align 4
  call void @free(i8* %40)
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end24, %if.then
  %41 = load i32, i32* %retval, align 4
  ret i32 %41
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #1

declare i8* @strchr(i8* %0, i32 %1) #2

declare noalias i8* @calloc(i32 %0, i32 %1) #2

declare i32 @sprintf(i8* %0, i8* %1, ...) #2

declare noalias i8* @malloc(i32 %0) #2

declare i8* @strcpy(i8* %0, i8* %1) #2

declare i8* @strncat(i8* %0, i8* %1, i32 %2) #2

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #2

declare void @free(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden void @ibwt(i8* %r, i8* %s) #0 {
entry:
  %r.addr = alloca i8*, align 4
  %s.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %len = alloca i32, align 4
  %table = alloca i8**, align 4
  store i8* %r, i8** %r.addr, align 4
  store i8* %s, i8** %s.addr, align 4
  %0 = load i8*, i8** %r.addr, align 4
  %call = call i32 @strlen(i8* %0) #4
  store i32 %call, i32* %len, align 4
  %1 = load i32, i32* %len, align 4
  %mul = mul i32 %1, 4
  %call1 = call noalias i8* @malloc(i32 %mul)
  %2 = bitcast i8* %call1 to i8**
  store i8** %2, i8*** %table, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %len, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %len, align 4
  %add = add nsw i32 %5, 1
  %call2 = call noalias i8* @calloc(i32 %add, i32 1)
  %6 = load i8**, i8*** %table, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %6, i32 %7
  store i8* %call2, i8** %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc17, %for.end
  %9 = load i32, i32* %i, align 4
  %10 = load i32, i32* %len, align 4
  %cmp4 = icmp slt i32 %9, %10
  br i1 %cmp4, label %for.body5, label %for.end19

for.body5:                                        ; preds = %for.cond3
  store i32 0, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc14, %for.body5
  %11 = load i32, i32* %j, align 4
  %12 = load i32, i32* %len, align 4
  %cmp7 = icmp slt i32 %11, %12
  br i1 %cmp7, label %for.body8, label %for.end16

for.body8:                                        ; preds = %for.cond6
  %13 = load i8**, i8*** %table, align 4
  %14 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds i8*, i8** %13, i32 %14
  %15 = load i8*, i8** %arrayidx9, align 4
  %add.ptr = getelementptr inbounds i8, i8* %15, i32 1
  %16 = load i8**, i8*** %table, align 4
  %17 = load i32, i32* %j, align 4
  %arrayidx10 = getelementptr inbounds i8*, i8** %16, i32 %17
  %18 = load i8*, i8** %arrayidx10, align 4
  %19 = load i32, i32* %len, align 4
  call void @llvm.memmove.p0i8.p0i8.i32(i8* align 1 %add.ptr, i8* align 1 %18, i32 %19, i1 false)
  %20 = load i8*, i8** %r.addr, align 4
  %21 = load i32, i32* %j, align 4
  %arrayidx11 = getelementptr inbounds i8, i8* %20, i32 %21
  %22 = load i8, i8* %arrayidx11, align 1
  %23 = load i8**, i8*** %table, align 4
  %24 = load i32, i32* %j, align 4
  %arrayidx12 = getelementptr inbounds i8*, i8** %23, i32 %24
  %25 = load i8*, i8** %arrayidx12, align 4
  %arrayidx13 = getelementptr inbounds i8, i8* %25, i32 0
  store i8 %22, i8* %arrayidx13, align 1
  br label %for.inc14

for.inc14:                                        ; preds = %for.body8
  %26 = load i32, i32* %j, align 4
  %inc15 = add nsw i32 %26, 1
  store i32 %inc15, i32* %j, align 4
  br label %for.cond6

for.end16:                                        ; preds = %for.cond6
  %27 = load i8**, i8*** %table, align 4
  %28 = bitcast i8** %27 to i8*
  %29 = load i32, i32* %len, align 4
  call void @qsort(i8* %28, i32 %29, i32 4, i32 (i8*, i8*)* @compareStrings)
  br label %for.inc17

for.inc17:                                        ; preds = %for.end16
  %30 = load i32, i32* %i, align 4
  %inc18 = add nsw i32 %30, 1
  store i32 %inc18, i32* %i, align 4
  br label %for.cond3

for.end19:                                        ; preds = %for.cond3
  store i32 0, i32* %i, align 4
  br label %for.cond20

for.cond20:                                       ; preds = %for.inc31, %for.end19
  %31 = load i32, i32* %i, align 4
  %32 = load i32, i32* %len, align 4
  %cmp21 = icmp slt i32 %31, %32
  br i1 %cmp21, label %for.body22, label %for.end33

for.body22:                                       ; preds = %for.cond20
  %33 = load i8**, i8*** %table, align 4
  %34 = load i32, i32* %i, align 4
  %arrayidx23 = getelementptr inbounds i8*, i8** %33, i32 %34
  %35 = load i8*, i8** %arrayidx23, align 4
  %36 = load i32, i32* %len, align 4
  %sub = sub nsw i32 %36, 1
  %arrayidx24 = getelementptr inbounds i8, i8* %35, i32 %sub
  %37 = load i8, i8* %arrayidx24, align 1
  %conv = sext i8 %37 to i32
  %cmp25 = icmp eq i32 %conv, 3
  br i1 %cmp25, label %if.then, label %if.end

if.then:                                          ; preds = %for.body22
  %38 = load i8*, i8** %s.addr, align 4
  %39 = load i8**, i8*** %table, align 4
  %40 = load i32, i32* %i, align 4
  %arrayidx27 = getelementptr inbounds i8*, i8** %39, i32 %40
  %41 = load i8*, i8** %arrayidx27, align 4
  %add.ptr28 = getelementptr inbounds i8, i8* %41, i32 1
  %42 = load i32, i32* %len, align 4
  %sub29 = sub nsw i32 %42, 2
  %call30 = call i8* @strncpy(i8* %38, i8* %add.ptr28, i32 %sub29)
  br label %for.end33

if.end:                                           ; preds = %for.body22
  br label %for.inc31

for.inc31:                                        ; preds = %if.end
  %43 = load i32, i32* %i, align 4
  %inc32 = add nsw i32 %43, 1
  store i32 %inc32, i32* %i, align 4
  br label %for.cond20

for.end33:                                        ; preds = %if.then, %for.cond20
  store i32 0, i32* %i, align 4
  br label %for.cond34

for.cond34:                                       ; preds = %for.inc39, %for.end33
  %44 = load i32, i32* %i, align 4
  %45 = load i32, i32* %len, align 4
  %cmp35 = icmp slt i32 %44, %45
  br i1 %cmp35, label %for.body37, label %for.end41

for.body37:                                       ; preds = %for.cond34
  %46 = load i8**, i8*** %table, align 4
  %47 = load i32, i32* %i, align 4
  %arrayidx38 = getelementptr inbounds i8*, i8** %46, i32 %47
  %48 = load i8*, i8** %arrayidx38, align 4
  call void @free(i8* %48)
  br label %for.inc39

for.inc39:                                        ; preds = %for.body37
  %49 = load i32, i32* %i, align 4
  %inc40 = add nsw i32 %49, 1
  store i32 %inc40, i32* %i, align 4
  br label %for.cond34

for.end41:                                        ; preds = %for.cond34
  %50 = load i8**, i8*** %table, align 4
  %51 = bitcast i8** %50 to i8*
  call void @free(i8* %51)
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i32(i8* nocapture %0, i8* nocapture readonly %1, i32 %2, i1 immarg %3) #3

declare i8* @strncpy(i8* %0, i8* %1, i32 %2) #2

; Function Attrs: noinline nounwind optnone
define hidden void @makePrintable(i8* %s, i8* %t) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %t.addr = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8* %t, i8** %t.addr, align 4
  %0 = load i8*, i8** %t.addr, align 4
  %1 = load i8*, i8** %s.addr, align 4
  %call = call i8* @strcpy(i8* %0, i8* %1)
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i8*, i8** %t.addr, align 4
  %3 = load i8, i8* %2, align 1
  %conv = sext i8 %3 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i8*, i8** %t.addr, align 4
  %5 = load i8, i8* %4, align 1
  %conv2 = sext i8 %5 to i32
  %cmp3 = icmp eq i32 %conv2, 2
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %6 = load i8*, i8** %t.addr, align 4
  store i8 94, i8* %6, align 1
  br label %if.end9

if.else:                                          ; preds = %for.body
  %7 = load i8*, i8** %t.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv5 = sext i8 %8 to i32
  %cmp6 = icmp eq i32 %conv5, 3
  br i1 %cmp6, label %if.then8, label %if.end

if.then8:                                         ; preds = %if.else
  %9 = load i8*, i8** %t.addr, align 4
  store i8 124, i8* %9, align 1
  br label %if.end

if.end:                                           ; preds = %if.then8, %if.else
  br label %if.end9

if.end9:                                          ; preds = %if.end, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end9
  %10 = load i8*, i8** %t.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %10, i32 1
  store i8* %incdec.ptr, i8** %t.addr, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %res = alloca i32, align 4
  %len = alloca i32, align 4
  %tests = alloca [6 x i8*], align 16
  %t = alloca i8*, align 4
  %r = alloca i8*, align 4
  %s = alloca i8*, align 4
  store i32 0, i32* %retval, align 4
  %arrayidx = getelementptr inbounds [6 x i8*], [6 x i8*]* %tests, i32 0, i32 0
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8** %arrayidx, align 16
  %arrayidx1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %tests, i32 0, i32 1
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i32 0, i32 0), i8** %arrayidx1, align 4
  %arrayidx2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %tests, i32 0, i32 2
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i32 0, i32 0), i8** %arrayidx2, align 8
  %arrayidx3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %tests, i32 0, i32 3
  store i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.4, i32 0, i32 0), i8** %arrayidx3, align 4
  %arrayidx4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %tests, i32 0, i32 4
  store i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.5, i32 0, i32 0), i8** %arrayidx4, align 16
  %arrayidx5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %tests, i32 0, i32 5
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i32 0, i32 0), i8** %arrayidx5, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds [6 x i8*], [6 x i8*]* %tests, i32 0, i32 %1
  %2 = load i8*, i8** %arrayidx6, align 4
  %call = call i32 @strlen(i8* %2) #4
  store i32 %call, i32* %len, align 4
  %3 = load i32, i32* %len, align 4
  %add = add nsw i32 %3, 1
  %call7 = call noalias i8* @calloc(i32 %add, i32 1)
  store i8* %call7, i8** %t, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds [6 x i8*], [6 x i8*]* %tests, i32 0, i32 %4
  %5 = load i8*, i8** %arrayidx8, align 4
  %6 = load i8*, i8** %t, align 4
  call void @makePrintable(i8* %5, i8* %6)
  %7 = load i8*, i8** %t, align 4
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i32 0, i32 0), i8* %7)
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.8, i32 0, i32 0))
  %8 = load i32, i32* %len, align 4
  %add11 = add nsw i32 %8, 3
  %call12 = call noalias i8* @calloc(i32 %add11, i32 1)
  store i8* %call12, i8** %r, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds [6 x i8*], [6 x i8*]* %tests, i32 0, i32 %9
  %10 = load i8*, i8** %arrayidx13, align 4
  %11 = load i8*, i8** %r, align 4
  %call14 = call i32 @bwt(i8* %10, i8* %11)
  store i32 %call14, i32* %res, align 4
  %12 = load i32, i32* %res, align 4
  %cmp15 = icmp eq i32 %12, 1
  br i1 %cmp15, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.9, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %for.body
  %13 = load i8*, i8** %r, align 4
  %14 = load i8*, i8** %t, align 4
  call void @makePrintable(i8* %13, i8* %14)
  %15 = load i8*, i8** %t, align 4
  %call17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i32 0, i32 0), i8* %15)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %16 = load i32, i32* %len, align 4
  %add18 = add nsw i32 %16, 1
  %call19 = call noalias i8* @calloc(i32 %add18, i32 1)
  store i8* %call19, i8** %s, align 4
  %17 = load i8*, i8** %r, align 4
  %18 = load i8*, i8** %s, align 4
  call void @ibwt(i8* %17, i8* %18)
  %19 = load i8*, i8** %s, align 4
  %20 = load i8*, i8** %t, align 4
  call void @makePrintable(i8* %19, i8* %20)
  %21 = load i8*, i8** %t, align 4
  %call20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.10, i32 0, i32 0), i8* %21)
  %22 = load i8*, i8** %t, align 4
  call void @free(i8* %22)
  %23 = load i8*, i8** %r, align 4
  call void @free(i8* %23)
  %24 = load i8*, i8** %s, align 4
  call void @free(i8* %24)
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %25 = load i32, i32* %i, align 4
  %inc = add nsw i32 %25, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 @strcmp(i8* %6, i8* %7) #4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for compareStrings()

; entering Souper's runOnFunction() for bwt()

; ModuleID = './Burrowsâ€“Wheeler_transform.c.bc'
source_filename = "./Burrows\E2\80\93Wheeler_transform.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@STX = hidden constant i8 2, align 1
@ETX = hidden constant i8 3, align 1
@.str = private unnamed_addr constant [7 x i8] c"%c%s%c\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"banana\00", align 1
@.str.2 = private unnamed_addr constant [9 x i8] c"appellee\00", align 1
@.str.3 = private unnamed_addr constant [8 x i8] c"dogwood\00", align 1
@.str.4 = private unnamed_addr constant [41 x i8] c"TO BE OR NOT TO BE OR WANT TO BE OR NOT?\00", align 1
@.str.5 = private unnamed_addr constant [45 x i8] c"SIX.MIXED.PIXIES.SIFT.SIXTY.PIXIE.DUST.BOXES\00", align 1
@.str.6 = private unnamed_addr constant [6 x i8] c"\02ABC\03\00", align 1
@.str.7 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.8 = private unnamed_addr constant [6 x i8] c" --> \00", align 1
@.str.9 = private unnamed_addr constant [40 x i8] c"ERROR: String can't contain STX or ETX\0A\00", align 1
@.str.10 = private unnamed_addr constant [10 x i8] c" --> %s\0A\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @compareStrings(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %aa = alloca i8*, align 4
  %bb = alloca i8*, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to i8**
  %2 = load i8*, i8** %1, align 4
  store i8* %2, i8** %aa, align 4
  %3 = load i8*, i8** %b.addr, align 4
  %4 = bitcast i8* %3 to i8**
  %5 = load i8*, i8** %4, align 4
  store i8* %5, i8** %bb, align 4
  %6 = load i8*, i8** %aa, align 4
  %7 = load i8*, i8** %bb, align 4
  %call = call i32 @strcmp(i8* %6, i8* %7) #4
  ret i32 %call
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @bwt(i8* %s, i8* %r) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca i8*, align 4
  %r.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  %ss = alloca i8*, align 4
  %str = alloca i8*, align 4
  %table = alloca i8**, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8* %r, i8** %r.addr, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %call = call i32 @strlen(i8* %0) #4
  %add = add i32 %call, 2
  store i32 %add, i32* %len, align 4
  %1 = load i8*, i8** %s.addr, align 4
  %call1 = call i8* @strchr(i8* %1, i32 2)
  %tobool = icmp ne i8* %call1, null
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load i8*, i8** %s.addr, align 4
  %call2 = call i8* @strchr(i8* %2, i32 3)
  %tobool3 = icmp ne i8* %call2, null
  br i1 %tobool3, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %3 = load i32, i32* %len, align 4
  %add4 = add nsw i32 %3, 1
  %call5 = call noalias i8* @calloc(i32 %add4, i32 1)
  store i8* %call5, i8** %ss, align 4
  %4 = load i8*, i8** %ss, align 4
  %5 = load i8*, i8** %s.addr, align 4
  %call6 = call i32 (i8*, i8*, ...) @sprintf(i8* %4, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 2, i8* %5, i32 3)
  %6 = load i32, i32* %len, align 4
  %mul = mul i32 %6, 4
  %call7 = call noalias i8* @malloc(i32 %mul)
  %7 = bitcast i8* %call7 to i8**
  store i8** %7, i8*** %table, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %8 = load i32, i32* %i, align 4
  %9 = load i32, i32* %len, align 4
  %cmp = icmp slt i32 %8, %9
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %10 = load i32, i32* %len, align 4
  %add8 = add nsw i32 %10, 1
  %call9 = call noalias i8* @calloc(i32 %add8, i32 1)
  store i8* %call9, i8** %str, align 4
  %11 = load i8*, i8** %str, align 4
  %12 = load i8*, i8** %ss, align 4
  %13 = load i32, i32* %i, align 4
  %add.ptr = getelementptr inbounds i8, i8* %12, i32 %13
  %call10 = call i8* @strcpy(i8* %11, i8* %add.ptr)
  %14 = load i32, i32* %i, align 4
  %cmp11 = icmp sgt i32 %14, 0
  br i1 %cmp11, label %if.then12, label %if.end14

if.then12:                                        ; preds = %for.body
  %15 = load i8*, i8** %str, align 4
  %16 = load i8*, i8** %ss, align 4
  %17 = load i32, i32* %i, align 4
  %call13 = call i8* @strncat(i8* %15, i8* %16, i32 %17)
  br label %if.end14

if.end14:                                         ; preds = %if.then12, %for.body
  %18 = load i8*, i8** %str, align 4
  %19 = load i8**, i8*** %table, align 4
  %20 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %19, i32 %20
  store i8* %18, i8** %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end14
  %21 = load i32, i32* %i, align 4
  %inc = add nsw i32 %21, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %22 = load i8**, i8*** %table, align 4
  %23 = bitcast i8** %22 to i8*
  %24 = load i32, i32* %len, align 4
  call void @qsort(i8* %23, i32 %24, i32 4, i32 (i8*, i8*)* @compareStrings)
  store i32 0, i32* %i, align 4
  br label %for.cond15

for.cond15:                                       ; preds = %for.inc22, %for.end
  %25 = load i32, i32* %i, align 4
  %26 = load i32, i32* %len, align 4
  %cmp16 = icmp slt i32 %25, %26
  br i1 %cmp16, label %for.body17, label %for.end24

for.body17:                                       ; preds = %for.cond15
  %27 = load i8**, i8*** %table, align 4
  %28 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds i8*, i8** %27, i32 %28
  %29 = load i8*, i8** %arrayidx18, align 4
  %30 = load i32, i32* %len, align 4
  %sub = sub nsw i32 %30, 1
  %arrayidx19 = getelementptr inbounds i8, i8* %29, i32 %sub
  %31 = load i8, i8* %arrayidx19, align 1
  %32 = load i8*, i8** %r.addr, align 4
  %33 = load i32, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds i8, i8* %32, i32 %33
  store i8 %31, i8* %arrayidx20, align 1
  %34 = load i8**, i8*** %table, align 4
  %35 = load i32, i32* %i, align 4
  %arrayidx21 = getelementptr inbounds i8*, i8** %34, i32 %35
  %36 = load i8*, i8** %arrayidx21, align 4
  call void @free(i8* %36)
  br label %for.inc22

for.inc22:                                        ; preds = %for.body17
  %37 = load i32, i32* %i, align 4
  %inc23 = add nsw i32 %37, 1
  store i32 %inc23, i32* %i, align 4
  br label %for.cond15

for.end24:                                        ; preds = %for.cond15
  %38 = load i8**, i8*** %table, align 4
  %39 = bitcast i8** %38 to i8*
  call void @free(i8* %39)
  %40 = load i8*, i8** %ss, align 4
  call void @free(i8* %40)
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end24, %if.then
  %41 = load i32, i32* %retval, align 4
  ret i32 %41
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #1

declare i8* @strchr(i8* %0, i32 %1) #2

declare noalias i8* @calloc(i32 %0, i32 %1) #2

declare i32 @sprintf(i8* %0, i8* %1, ...) #2

declare noalias i8* @malloc(i32 %0) #2

declare i8* @strcpy(i8* %0, i8* %1) #2

declare i8* @strncat(i8* %0, i8* %1, i32 %2) #2

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #2

declare void @free(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden void @ibwt(i8* %r, i8* %s) #0 {
entry:
  %r.addr = alloca i8*, align 4
  %s.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %len = alloca i32, align 4
  %table = alloca i8**, align 4
  store i8* %r, i8** %r.addr, align 4
  store i8* %s, i8** %s.addr, align 4
  %0 = load i8*, i8** %r.addr, align 4
  %call = call i32 @strlen(i8* %0) #4
  store i32 %call, i32* %len, align 4
  %1 = load i32, i32* %len, align 4
  %mul = mul i32 %1, 4
  %call1 = call noalias i8* @malloc(i32 %mul)
  %2 = bitcast i8* %call1 to i8**
  store i8** %2, i8*** %table, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %len, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %len, align 4
  %add = add nsw i32 %5, 1
  %call2 = call noalias i8* @calloc(i32 %add, i32 1)
  %6 = load i8**, i8*** %table, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %6, i32 %7
  store i8* %call2, i8** %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc17, %for.end
  %9 = load i32, i32* %i, align 4
  %10 = load i32, i32* %len, align 4
  %cmp4 = icmp slt i32 %9, %10
  br i1 %cmp4, label %for.body5, label %for.end19

for.body5:                                        ; preds = %for.cond3
  store i32 0, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc14, %for.body5
  %11 = load i32, i32* %j, align 4
  %12 = load i32, i32* %len, align 4
  %cmp7 = icmp slt i32 %11, %12
  br i1 %cmp7, label %for.body8, label %for.end16

for.body8:                                        ; preds = %for.cond6
  %13 = load i8**, i8*** %table, align 4
  %14 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds i8*, i8** %13, i32 %14
  %15 = load i8*, i8** %arrayidx9, align 4
  %add.ptr = getelementptr inbounds i8, i8* %15, i32 1
  %16 = load i8**, i8*** %table, align 4
  %17 = load i32, i32* %j, align 4
  %arrayidx10 = getelementptr inbounds i8*, i8** %16, i32 %17
  %18 = load i8*, i8** %arrayidx10, align 4
  %19 = load i32, i32* %len, align 4
  call void @llvm.memmove.p0i8.p0i8.i32(i8* align 1 %add.ptr, i8* align 1 %18, i32 %19, i1 false)
  %20 = load i8*, i8** %r.addr, align 4
  %21 = load i32, i32* %j, align 4
  %arrayidx11 = getelementptr inbounds i8, i8* %20, i32 %21
  %22 = load i8, i8* %arrayidx11, align 1
  %23 = load i8**, i8*** %table, align 4
  %24 = load i32, i32* %j, align 4
  %arrayidx12 = getelementptr inbounds i8*, i8** %23, i32 %24
  %25 = load i8*, i8** %arrayidx12, align 4
  %arrayidx13 = getelementptr inbounds i8, i8* %25, i32 0
  store i8 %22, i8* %arrayidx13, align 1
  br label %for.inc14

for.inc14:                                        ; preds = %for.body8
  %26 = load i32, i32* %j, align 4
  %inc15 = add nsw i32 %26, 1
  store i32 %inc15, i32* %j, align 4
  br label %for.cond6

for.end16:                                        ; preds = %for.cond6
  %27 = load i8**, i8*** %table, align 4
  %28 = bitcast i8** %27 to i8*
  %29 = load i32, i32* %len, align 4
  call void @qsort(i8* %28, i32 %29, i32 4, i32 (i8*, i8*)* @compareStrings)
  br label %for.inc17

for.inc17:                                        ; preds = %for.end16
  %30 = load i32, i32* %i, align 4
  %inc18 = add nsw i32 %30, 1
  store i32 %inc18, i32* %i, align 4
  br label %for.cond3

for.end19:                                        ; preds = %for.cond3
  store i32 0, i32* %i, align 4
  br label %for.cond20

for.cond20:                                       ; preds = %for.inc31, %for.end19
  %31 = load i32, i32* %i, align 4
  %32 = load i32, i32* %len, align 4
  %cmp21 = icmp slt i32 %31, %32
  br i1 %cmp21, label %for.body22, label %for.end33

for.body22:                                       ; preds = %for.cond20
  %33 = load i8**, i8*** %table, align 4
  %34 = load i32, i32* %i, align 4
  %arrayidx23 = getelementptr inbounds i8*, i8** %33, i32 %34
  %35 = load i8*, i8** %arrayidx23, align 4
  %36 = load i32, i32* %len, align 4
  %sub = sub nsw i32 %36, 1
  %arrayidx24 = getelementptr inbounds i8, i8* %35, i32 %sub
  %37 = load i8, i8* %arrayidx24, align 1
  %conv = sext i8 %37 to i32
  %cmp25 = icmp eq i32 %conv, 3
  br i1 %cmp25, label %if.then, label %if.end

if.then:                                          ; preds = %for.body22
  %38 = load i8*, i8** %s.addr, align 4
  %39 = load i8**, i8*** %table, align 4
  %40 = load i32, i32* %i, align 4
  %arrayidx27 = getelementptr inbounds i8*, i8** %39, i32 %40
  %41 = load i8*, i8** %arrayidx27, align 4
  %add.ptr28 = getelementptr inbounds i8, i8* %41, i32 1
  %42 = load i32, i32* %len, align 4
  %sub29 = sub nsw i32 %42, 2
  %call30 = call i8* @strncpy(i8* %38, i8* %add.ptr28, i32 %sub29)
  br label %for.end33

if.end:                                           ; preds = %for.body22
  br label %for.inc31

for.inc31:                                        ; preds = %if.end
  %43 = load i32, i32* %i, align 4
  %inc32 = add nsw i32 %43, 1
  store i32 %inc32, i32* %i, align 4
  br label %for.cond20

for.end33:                                        ; preds = %if.then, %for.cond20
  store i32 0, i32* %i, align 4
  br label %for.cond34

for.cond34:                                       ; preds = %for.inc39, %for.end33
  %44 = load i32, i32* %i, align 4
  %45 = load i32, i32* %len, align 4
  %cmp35 = icmp slt i32 %44, %45
  br i1 %cmp35, label %for.body37, label %for.end41

for.body37:                                       ; preds = %for.cond34
  %46 = load i8**, i8*** %table, align 4
  %47 = load i32, i32* %i, align 4
  %arrayidx38 = getelementptr inbounds i8*, i8** %46, i32 %47
  %48 = load i8*, i8** %arrayidx38, align 4
  call void @free(i8* %48)
  br label %for.inc39

for.inc39:                                        ; preds = %for.body37
  %49 = load i32, i32* %i, align 4
  %inc40 = add nsw i32 %49, 1
  store i32 %inc40, i32* %i, align 4
  br label %for.cond34

for.end41:                                        ; preds = %for.cond34
  %50 = load i8**, i8*** %table, align 4
  %51 = bitcast i8** %50 to i8*
  call void @free(i8* %51)
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i32(i8* nocapture %0, i8* nocapture readonly %1, i32 %2, i1 immarg %3) #3

declare i8* @strncpy(i8* %0, i8* %1, i32 %2) #2

; Function Attrs: noinline nounwind optnone
define hidden void @makePrintable(i8* %s, i8* %t) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %t.addr = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8* %t, i8** %t.addr, align 4
  %0 = load i8*, i8** %t.addr, align 4
  %1 = load i8*, i8** %s.addr, align 4
  %call = call i8* @strcpy(i8* %0, i8* %1)
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i8*, i8** %t.addr, align 4
  %3 = load i8, i8* %2, align 1
  %conv = sext i8 %3 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i8*, i8** %t.addr, align 4
  %5 = load i8, i8* %4, align 1
  %conv2 = sext i8 %5 to i32
  %cmp3 = icmp eq i32 %conv2, 2
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %6 = load i8*, i8** %t.addr, align 4
  store i8 94, i8* %6, align 1
  br label %if.end9

if.else:                                          ; preds = %for.body
  %7 = load i8*, i8** %t.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv5 = sext i8 %8 to i32
  %cmp6 = icmp eq i32 %conv5, 3
  br i1 %cmp6, label %if.then8, label %if.end

if.then8:                                         ; preds = %if.else
  %9 = load i8*, i8** %t.addr, align 4
  store i8 124, i8* %9, align 1
  br label %if.end

if.end:                                           ; preds = %if.then8, %if.else
  br label %if.end9

if.end9:                                          ; preds = %if.end, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end9
  %10 = load i8*, i8** %t.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %10, i32 1
  store i8* %incdec.ptr, i8** %t.addr, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %res = alloca i32, align 4
  %len = alloca i32, align 4
  %tests = alloca [6 x i8*], align 16
  %t = alloca i8*, align 4
  %r = alloca i8*, align 4
  %s = alloca i8*, align 4
  store i32 0, i32* %retval, align 4
  %arrayidx = getelementptr inbounds [6 x i8*], [6 x i8*]* %tests, i32 0, i32 0
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8** %arrayidx, align 16
  %arrayidx1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %tests, i32 0, i32 1
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i32 0, i32 0), i8** %arrayidx1, align 4
  %arrayidx2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %tests, i32 0, i32 2
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i32 0, i32 0), i8** %arrayidx2, align 8
  %arrayidx3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %tests, i32 0, i32 3
  store i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.4, i32 0, i32 0), i8** %arrayidx3, align 4
  %arrayidx4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %tests, i32 0, i32 4
  store i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.5, i32 0, i32 0), i8** %arrayidx4, align 16
  %arrayidx5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %tests, i32 0, i32 5
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i32 0, i32 0), i8** %arrayidx5, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds [6 x i8*], [6 x i8*]* %tests, i32 0, i32 %1
  %2 = load i8*, i8** %arrayidx6, align 4
  %call = call i32 @strlen(i8* %2) #4
  store i32 %call, i32* %len, align 4
  %3 = load i32, i32* %len, align 4
  %add = add nsw i32 %3, 1
  %call7 = call noalias i8* @calloc(i32 %add, i32 1)
  store i8* %call7, i8** %t, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds [6 x i8*], [6 x i8*]* %tests, i32 0, i32 %4
  %5 = load i8*, i8** %arrayidx8, align 4
  %6 = load i8*, i8** %t, align 4
  call void @makePrintable(i8* %5, i8* %6)
  %7 = load i8*, i8** %t, align 4
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i32 0, i32 0), i8* %7)
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.8, i32 0, i32 0))
  %8 = load i32, i32* %len, align 4
  %add11 = add nsw i32 %8, 3
  %call12 = call noalias i8* @calloc(i32 %add11, i32 1)
  store i8* %call12, i8** %r, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds [6 x i8*], [6 x i8*]* %tests, i32 0, i32 %9
  %10 = load i8*, i8** %arrayidx13, align 4
  %11 = load i8*, i8** %r, align 4
  %call14 = call i32 @bwt(i8* %10, i8* %11)
  store i32 %call14, i32* %res, align 4
  %12 = load i32, i32* %res, align 4
  %cmp15 = icmp eq i32 %12, 1
  br i1 %cmp15, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.9, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %for.body
  %13 = load i8*, i8** %r, align 4
  %14 = load i8*, i8** %t, align 4
  call void @makePrintable(i8* %13, i8* %14)
  %15 = load i8*, i8** %t, align 4
  %call17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i32 0, i32 0), i8* %15)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %16 = load i32, i32* %len, align 4
  %add18 = add nsw i32 %16, 1
  %call19 = call noalias i8* @calloc(i32 %add18, i32 1)
  store i8* %call19, i8** %s, align 4
  %17 = load i8*, i8** %r, align 4
  %18 = load i8*, i8** %s, align 4
  call void @ibwt(i8* %17, i8* %18)
  %19 = load i8*, i8** %s, align 4
  %20 = load i8*, i8** %t, align 4
  call void @makePrintable(i8* %19, i8* %20)
  %21 = load i8*, i8** %t, align 4
  %call20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.10, i32 0, i32 0), i8* %21)
  %22 = load i8*, i8** %t, align 4
  call void @free(i8* %22)
  %23 = load i8*, i8** %r, align 4
  call void @free(i8* %23)
  %24 = load i8*, i8** %s, align 4
  call void @free(i8* %24)
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %25 = load i32, i32* %i, align 4
  %inc = add nsw i32 %25, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 @strlen(i8* %0) #4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add i32 %call, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool = icmp ne i8* %call1, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool3 = icmp ne i8* %call2, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add4 = add nsw i32 %3, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul i32 %6, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %8, %9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add8 = add nsw i32 %10, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp11 = icmp sgt i32 %14, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %21, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp16 = icmp slt i32 %25, %26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %30, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %31 = load i8, i8* %arrayidx19, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc23 = add nsw i32 %37, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %41 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = add 2:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 2
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for bwt()

; entering Souper's runOnFunction() for ibwt()

; ModuleID = './Burrowsâ€“Wheeler_transform.c.bc'
source_filename = "./Burrows\E2\80\93Wheeler_transform.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@STX = hidden constant i8 2, align 1
@ETX = hidden constant i8 3, align 1
@.str = private unnamed_addr constant [7 x i8] c"%c%s%c\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"banana\00", align 1
@.str.2 = private unnamed_addr constant [9 x i8] c"appellee\00", align 1
@.str.3 = private unnamed_addr constant [8 x i8] c"dogwood\00", align 1
@.str.4 = private unnamed_addr constant [41 x i8] c"TO BE OR NOT TO BE OR WANT TO BE OR NOT?\00", align 1
@.str.5 = private unnamed_addr constant [45 x i8] c"SIX.MIXED.PIXIES.SIFT.SIXTY.PIXIE.DUST.BOXES\00", align 1
@.str.6 = private unnamed_addr constant [6 x i8] c"\02ABC\03\00", align 1
@.str.7 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.8 = private unnamed_addr constant [6 x i8] c" --> \00", align 1
@.str.9 = private unnamed_addr constant [40 x i8] c"ERROR: String can't contain STX or ETX\0A\00", align 1
@.str.10 = private unnamed_addr constant [10 x i8] c" --> %s\0A\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @compareStrings(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %aa = alloca i8*, align 4
  %bb = alloca i8*, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to i8**
  %2 = load i8*, i8** %1, align 4
  store i8* %2, i8** %aa, align 4
  %3 = load i8*, i8** %b.addr, align 4
  %4 = bitcast i8* %3 to i8**
  %5 = load i8*, i8** %4, align 4
  store i8* %5, i8** %bb, align 4
  %6 = load i8*, i8** %aa, align 4
  %7 = load i8*, i8** %bb, align 4
  %call = call i32 @strcmp(i8* %6, i8* %7) #4
  ret i32 %call
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @bwt(i8* %s, i8* %r) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca i8*, align 4
  %r.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  %ss = alloca i8*, align 4
  %str = alloca i8*, align 4
  %table = alloca i8**, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8* %r, i8** %r.addr, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %call = call i32 @strlen(i8* %0) #4
  %add = add i32 %call, 2
  store i32 %add, i32* %len, align 4
  %1 = load i8*, i8** %s.addr, align 4
  %call1 = call i8* @strchr(i8* %1, i32 2)
  %tobool = icmp ne i8* %call1, null
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load i8*, i8** %s.addr, align 4
  %call2 = call i8* @strchr(i8* %2, i32 3)
  %tobool3 = icmp ne i8* %call2, null
  br i1 %tobool3, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %3 = load i32, i32* %len, align 4
  %add4 = add nsw i32 %3, 1
  %call5 = call noalias i8* @calloc(i32 %add4, i32 1)
  store i8* %call5, i8** %ss, align 4
  %4 = load i8*, i8** %ss, align 4
  %5 = load i8*, i8** %s.addr, align 4
  %call6 = call i32 (i8*, i8*, ...) @sprintf(i8* %4, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 2, i8* %5, i32 3)
  %6 = load i32, i32* %len, align 4
  %mul = mul i32 %6, 4
  %call7 = call noalias i8* @malloc(i32 %mul)
  %7 = bitcast i8* %call7 to i8**
  store i8** %7, i8*** %table, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %8 = load i32, i32* %i, align 4
  %9 = load i32, i32* %len, align 4
  %cmp = icmp slt i32 %8, %9
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %10 = load i32, i32* %len, align 4
  %add8 = add nsw i32 %10, 1
  %call9 = call noalias i8* @calloc(i32 %add8, i32 1)
  store i8* %call9, i8** %str, align 4
  %11 = load i8*, i8** %str, align 4
  %12 = load i8*, i8** %ss, align 4
  %13 = load i32, i32* %i, align 4
  %add.ptr = getelementptr inbounds i8, i8* %12, i32 %13
  %call10 = call i8* @strcpy(i8* %11, i8* %add.ptr)
  %14 = load i32, i32* %i, align 4
  %cmp11 = icmp sgt i32 %14, 0
  br i1 %cmp11, label %if.then12, label %if.end14

if.then12:                                        ; preds = %for.body
  %15 = load i8*, i8** %str, align 4
  %16 = load i8*, i8** %ss, align 4
  %17 = load i32, i32* %i, align 4
  %call13 = call i8* @strncat(i8* %15, i8* %16, i32 %17)
  br label %if.end14

if.end14:                                         ; preds = %if.then12, %for.body
  %18 = load i8*, i8** %str, align 4
  %19 = load i8**, i8*** %table, align 4
  %20 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %19, i32 %20
  store i8* %18, i8** %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end14
  %21 = load i32, i32* %i, align 4
  %inc = add nsw i32 %21, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %22 = load i8**, i8*** %table, align 4
  %23 = bitcast i8** %22 to i8*
  %24 = load i32, i32* %len, align 4
  call void @qsort(i8* %23, i32 %24, i32 4, i32 (i8*, i8*)* @compareStrings)
  store i32 0, i32* %i, align 4
  br label %for.cond15

for.cond15:                                       ; preds = %for.inc22, %for.end
  %25 = load i32, i32* %i, align 4
  %26 = load i32, i32* %len, align 4
  %cmp16 = icmp slt i32 %25, %26
  br i1 %cmp16, label %for.body17, label %for.end24

for.body17:                                       ; preds = %for.cond15
  %27 = load i8**, i8*** %table, align 4
  %28 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds i8*, i8** %27, i32 %28
  %29 = load i8*, i8** %arrayidx18, align 4
  %30 = load i32, i32* %len, align 4
  %sub = sub nsw i32 %30, 1
  %arrayidx19 = getelementptr inbounds i8, i8* %29, i32 %sub
  %31 = load i8, i8* %arrayidx19, align 1
  %32 = load i8*, i8** %r.addr, align 4
  %33 = load i32, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds i8, i8* %32, i32 %33
  store i8 %31, i8* %arrayidx20, align 1
  %34 = load i8**, i8*** %table, align 4
  %35 = load i32, i32* %i, align 4
  %arrayidx21 = getelementptr inbounds i8*, i8** %34, i32 %35
  %36 = load i8*, i8** %arrayidx21, align 4
  call void @free(i8* %36)
  br label %for.inc22

for.inc22:                                        ; preds = %for.body17
  %37 = load i32, i32* %i, align 4
  %inc23 = add nsw i32 %37, 1
  store i32 %inc23, i32* %i, align 4
  br label %for.cond15

for.end24:                                        ; preds = %for.cond15
  %38 = load i8**, i8*** %table, align 4
  %39 = bitcast i8** %38 to i8*
  call void @free(i8* %39)
  %40 = load i8*, i8** %ss, align 4
  call void @free(i8* %40)
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end24, %if.then
  %41 = load i32, i32* %retval, align 4
  ret i32 %41
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #1

declare i8* @strchr(i8* %0, i32 %1) #2

declare noalias i8* @calloc(i32 %0, i32 %1) #2

declare i32 @sprintf(i8* %0, i8* %1, ...) #2

declare noalias i8* @malloc(i32 %0) #2

declare i8* @strcpy(i8* %0, i8* %1) #2

declare i8* @strncat(i8* %0, i8* %1, i32 %2) #2

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #2

declare void @free(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden void @ibwt(i8* %r, i8* %s) #0 {
entry:
  %r.addr = alloca i8*, align 4
  %s.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %len = alloca i32, align 4
  %table = alloca i8**, align 4
  store i8* %r, i8** %r.addr, align 4
  store i8* %s, i8** %s.addr, align 4
  %0 = load i8*, i8** %r.addr, align 4
  %call = call i32 @strlen(i8* %0) #4
  store i32 %call, i32* %len, align 4
  %1 = load i32, i32* %len, align 4
  %mul = mul i32 %1, 4
  %call1 = call noalias i8* @malloc(i32 %mul)
  %2 = bitcast i8* %call1 to i8**
  store i8** %2, i8*** %table, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %len, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %len, align 4
  %add = add nsw i32 %5, 1
  %call2 = call noalias i8* @calloc(i32 %add, i32 1)
  %6 = load i8**, i8*** %table, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %6, i32 %7
  store i8* %call2, i8** %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc17, %for.end
  %9 = load i32, i32* %i, align 4
  %10 = load i32, i32* %len, align 4
  %cmp4 = icmp slt i32 %9, %10
  br i1 %cmp4, label %for.body5, label %for.end19

for.body5:                                        ; preds = %for.cond3
  store i32 0, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc14, %for.body5
  %11 = load i32, i32* %j, align 4
  %12 = load i32, i32* %len, align 4
  %cmp7 = icmp slt i32 %11, %12
  br i1 %cmp7, label %for.body8, label %for.end16

for.body8:                                        ; preds = %for.cond6
  %13 = load i8**, i8*** %table, align 4
  %14 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds i8*, i8** %13, i32 %14
  %15 = load i8*, i8** %arrayidx9, align 4
  %add.ptr = getelementptr inbounds i8, i8* %15, i32 1
  %16 = load i8**, i8*** %table, align 4
  %17 = load i32, i32* %j, align 4
  %arrayidx10 = getelementptr inbounds i8*, i8** %16, i32 %17
  %18 = load i8*, i8** %arrayidx10, align 4
  %19 = load i32, i32* %len, align 4
  call void @llvm.memmove.p0i8.p0i8.i32(i8* align 1 %add.ptr, i8* align 1 %18, i32 %19, i1 false)
  %20 = load i8*, i8** %r.addr, align 4
  %21 = load i32, i32* %j, align 4
  %arrayidx11 = getelementptr inbounds i8, i8* %20, i32 %21
  %22 = load i8, i8* %arrayidx11, align 1
  %23 = load i8**, i8*** %table, align 4
  %24 = load i32, i32* %j, align 4
  %arrayidx12 = getelementptr inbounds i8*, i8** %23, i32 %24
  %25 = load i8*, i8** %arrayidx12, align 4
  %arrayidx13 = getelementptr inbounds i8, i8* %25, i32 0
  store i8 %22, i8* %arrayidx13, align 1
  br label %for.inc14

for.inc14:                                        ; preds = %for.body8
  %26 = load i32, i32* %j, align 4
  %inc15 = add nsw i32 %26, 1
  store i32 %inc15, i32* %j, align 4
  br label %for.cond6

for.end16:                                        ; preds = %for.cond6
  %27 = load i8**, i8*** %table, align 4
  %28 = bitcast i8** %27 to i8*
  %29 = load i32, i32* %len, align 4
  call void @qsort(i8* %28, i32 %29, i32 4, i32 (i8*, i8*)* @compareStrings)
  br label %for.inc17

for.inc17:                                        ; preds = %for.end16
  %30 = load i32, i32* %i, align 4
  %inc18 = add nsw i32 %30, 1
  store i32 %inc18, i32* %i, align 4
  br label %for.cond3

for.end19:                                        ; preds = %for.cond3
  store i32 0, i32* %i, align 4
  br label %for.cond20

for.cond20:                                       ; preds = %for.inc31, %for.end19
  %31 = load i32, i32* %i, align 4
  %32 = load i32, i32* %len, align 4
  %cmp21 = icmp slt i32 %31, %32
  br i1 %cmp21, label %for.body22, label %for.end33

for.body22:                                       ; preds = %for.cond20
  %33 = load i8**, i8*** %table, align 4
  %34 = load i32, i32* %i, align 4
  %arrayidx23 = getelementptr inbounds i8*, i8** %33, i32 %34
  %35 = load i8*, i8** %arrayidx23, align 4
  %36 = load i32, i32* %len, align 4
  %sub = sub nsw i32 %36, 1
  %arrayidx24 = getelementptr inbounds i8, i8* %35, i32 %sub
  %37 = load i8, i8* %arrayidx24, align 1
  %conv = sext i8 %37 to i32
  %cmp25 = icmp eq i32 %conv, 3
  br i1 %cmp25, label %if.then, label %if.end

if.then:                                          ; preds = %for.body22
  %38 = load i8*, i8** %s.addr, align 4
  %39 = load i8**, i8*** %table, align 4
  %40 = load i32, i32* %i, align 4
  %arrayidx27 = getelementptr inbounds i8*, i8** %39, i32 %40
  %41 = load i8*, i8** %arrayidx27, align 4
  %add.ptr28 = getelementptr inbounds i8, i8* %41, i32 1
  %42 = load i32, i32* %len, align 4
  %sub29 = sub nsw i32 %42, 2
  %call30 = call i8* @strncpy(i8* %38, i8* %add.ptr28, i32 %sub29)
  br label %for.end33

if.end:                                           ; preds = %for.body22
  br label %for.inc31

for.inc31:                                        ; preds = %if.end
  %43 = load i32, i32* %i, align 4
  %inc32 = add nsw i32 %43, 1
  store i32 %inc32, i32* %i, align 4
  br label %for.cond20

for.end33:                                        ; preds = %if.then, %for.cond20
  store i32 0, i32* %i, align 4
  br label %for.cond34

for.cond34:                                       ; preds = %for.inc39, %for.end33
  %44 = load i32, i32* %i, align 4
  %45 = load i32, i32* %len, align 4
  %cmp35 = icmp slt i32 %44, %45
  br i1 %cmp35, label %for.body37, label %for.end41

for.body37:                                       ; preds = %for.cond34
  %46 = load i8**, i8*** %table, align 4
  %47 = load i32, i32* %i, align 4
  %arrayidx38 = getelementptr inbounds i8*, i8** %46, i32 %47
  %48 = load i8*, i8** %arrayidx38, align 4
  call void @free(i8* %48)
  br label %for.inc39

for.inc39:                                        ; preds = %for.body37
  %49 = load i32, i32* %i, align 4
  %inc40 = add nsw i32 %49, 1
  store i32 %inc40, i32* %i, align 4
  br label %for.cond34

for.end41:                                        ; preds = %for.cond34
  %50 = load i8**, i8*** %table, align 4
  %51 = bitcast i8** %50 to i8*
  call void @free(i8* %51)
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i32(i8* nocapture %0, i8* nocapture readonly %1, i32 %2, i1 immarg %3) #3

declare i8* @strncpy(i8* %0, i8* %1, i32 %2) #2

; Function Attrs: noinline nounwind optnone
define hidden void @makePrintable(i8* %s, i8* %t) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %t.addr = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8* %t, i8** %t.addr, align 4
  %0 = load i8*, i8** %t.addr, align 4
  %1 = load i8*, i8** %s.addr, align 4
  %call = call i8* @strcpy(i8* %0, i8* %1)
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i8*, i8** %t.addr, align 4
  %3 = load i8, i8* %2, align 1
  %conv = sext i8 %3 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i8*, i8** %t.addr, align 4
  %5 = load i8, i8* %4, align 1
  %conv2 = sext i8 %5 to i32
  %cmp3 = icmp eq i32 %conv2, 2
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %6 = load i8*, i8** %t.addr, align 4
  store i8 94, i8* %6, align 1
  br label %if.end9

if.else:                                          ; preds = %for.body
  %7 = load i8*, i8** %t.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv5 = sext i8 %8 to i32
  %cmp6 = icmp eq i32 %conv5, 3
  br i1 %cmp6, label %if.then8, label %if.end

if.then8:                                         ; preds = %if.else
  %9 = load i8*, i8** %t.addr, align 4
  store i8 124, i8* %9, align 1
  br label %if.end

if.end:                                           ; preds = %if.then8, %if.else
  br label %if.end9

if.end9:                                          ; preds = %if.end, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end9
  %10 = load i8*, i8** %t.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %10, i32 1
  store i8* %incdec.ptr, i8** %t.addr, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %res = alloca i32, align 4
  %len = alloca i32, align 4
  %tests = alloca [6 x i8*], align 16
  %t = alloca i8*, align 4
  %r = alloca i8*, align 4
  %s = alloca i8*, align 4
  store i32 0, i32* %retval, align 4
  %arrayidx = getelementptr inbounds [6 x i8*], [6 x i8*]* %tests, i32 0, i32 0
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8** %arrayidx, align 16
  %arrayidx1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %tests, i32 0, i32 1
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i32 0, i32 0), i8** %arrayidx1, align 4
  %arrayidx2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %tests, i32 0, i32 2
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i32 0, i32 0), i8** %arrayidx2, align 8
  %arrayidx3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %tests, i32 0, i32 3
  store i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.4, i32 0, i32 0), i8** %arrayidx3, align 4
  %arrayidx4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %tests, i32 0, i32 4
  store i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.5, i32 0, i32 0), i8** %arrayidx4, align 16
  %arrayidx5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %tests, i32 0, i32 5
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i32 0, i32 0), i8** %arrayidx5, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds [6 x i8*], [6 x i8*]* %tests, i32 0, i32 %1
  %2 = load i8*, i8** %arrayidx6, align 4
  %call = call i32 @strlen(i8* %2) #4
  store i32 %call, i32* %len, align 4
  %3 = load i32, i32* %len, align 4
  %add = add nsw i32 %3, 1
  %call7 = call noalias i8* @calloc(i32 %add, i32 1)
  store i8* %call7, i8** %t, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds [6 x i8*], [6 x i8*]* %tests, i32 0, i32 %4
  %5 = load i8*, i8** %arrayidx8, align 4
  %6 = load i8*, i8** %t, align 4
  call void @makePrintable(i8* %5, i8* %6)
  %7 = load i8*, i8** %t, align 4
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i32 0, i32 0), i8* %7)
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.8, i32 0, i32 0))
  %8 = load i32, i32* %len, align 4
  %add11 = add nsw i32 %8, 3
  %call12 = call noalias i8* @calloc(i32 %add11, i32 1)
  store i8* %call12, i8** %r, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds [6 x i8*], [6 x i8*]* %tests, i32 0, i32 %9
  %10 = load i8*, i8** %arrayidx13, align 4
  %11 = load i8*, i8** %r, align 4
  %call14 = call i32 @bwt(i8* %10, i8* %11)
  store i32 %call14, i32* %res, align 4
  %12 = load i32, i32* %res, align 4
  %cmp15 = icmp eq i32 %12, 1
  br i1 %cmp15, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.9, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %for.body
  %13 = load i8*, i8** %r, align 4
  %14 = load i8*, i8** %t, align 4
  call void @makePrintable(i8* %13, i8* %14)
  %15 = load i8*, i8** %t, align 4
  %call17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i32 0, i32 0), i8* %15)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %16 = load i32, i32* %len, align 4
  %add18 = add nsw i32 %16, 1
  %call19 = call noalias i8* @calloc(i32 %add18, i32 1)
  store i8* %call19, i8** %s, align 4
  %17 = load i8*, i8** %r, align 4
  %18 = load i8*, i8** %s, align 4
  call void @ibwt(i8* %17, i8* %18)
  %19 = load i8*, i8** %s, align 4
  %20 = load i8*, i8** %t, align 4
  call void @makePrintable(i8* %19, i8* %20)
  %21 = load i8*, i8** %t, align 4
  %call20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.10, i32 0, i32 0), i8* %21)
  %22 = load i8*, i8** %t, align 4
  call void @free(i8* %22)
  %23 = load i8*, i8** %r, align 4
  call void @free(i8* %23)
  %24 = load i8*, i8** %s, align 4
  call void @free(i8* %24)
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %25 = load i32, i32* %i, align 4
  %inc = add nsw i32 %25, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 @strlen(i8* %0) #4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul i32 %1, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %3, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %5, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %8, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp4 = icmp slt i32 %9, %10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp7 = icmp slt i32 %11, %12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i8, i8* %arrayidx11, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc15 = add nsw i32 %26, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc18 = add nsw i32 %30, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp21 = icmp slt i32 %31, %32
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %36, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %37 = load i8, i8* %arrayidx24, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %37 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp25 = icmp eq i32 %conv, 3
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 3:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %40 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %42 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub29 = sub nsw i32 %42, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %43 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc32 = add nsw i32 %43, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %44 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %45 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp35 = icmp slt i32 %44, %45
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %47 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %49 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc40 = add nsw i32 %49, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 3:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 2:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -2
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 226595190
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for ibwt()

; entering Souper's runOnFunction() for makePrintable()

; ModuleID = './Burrowsâ€“Wheeler_transform.c.bc'
source_filename = "./Burrows\E2\80\93Wheeler_transform.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@STX = hidden constant i8 2, align 1
@ETX = hidden constant i8 3, align 1
@.str = private unnamed_addr constant [7 x i8] c"%c%s%c\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"banana\00", align 1
@.str.2 = private unnamed_addr constant [9 x i8] c"appellee\00", align 1
@.str.3 = private unnamed_addr constant [8 x i8] c"dogwood\00", align 1
@.str.4 = private unnamed_addr constant [41 x i8] c"TO BE OR NOT TO BE OR WANT TO BE OR NOT?\00", align 1
@.str.5 = private unnamed_addr constant [45 x i8] c"SIX.MIXED.PIXIES.SIFT.SIXTY.PIXIE.DUST.BOXES\00", align 1
@.str.6 = private unnamed_addr constant [6 x i8] c"\02ABC\03\00", align 1
@.str.7 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.8 = private unnamed_addr constant [6 x i8] c" --> \00", align 1
@.str.9 = private unnamed_addr constant [40 x i8] c"ERROR: String can't contain STX or ETX\0A\00", align 1
@.str.10 = private unnamed_addr constant [10 x i8] c" --> %s\0A\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @compareStrings(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %aa = alloca i8*, align 4
  %bb = alloca i8*, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to i8**
  %2 = load i8*, i8** %1, align 4
  store i8* %2, i8** %aa, align 4
  %3 = load i8*, i8** %b.addr, align 4
  %4 = bitcast i8* %3 to i8**
  %5 = load i8*, i8** %4, align 4
  store i8* %5, i8** %bb, align 4
  %6 = load i8*, i8** %aa, align 4
  %7 = load i8*, i8** %bb, align 4
  %call = call i32 @strcmp(i8* %6, i8* %7) #4
  ret i32 %call
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @bwt(i8* %s, i8* %r) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca i8*, align 4
  %r.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  %ss = alloca i8*, align 4
  %str = alloca i8*, align 4
  %table = alloca i8**, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8* %r, i8** %r.addr, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %call = call i32 @strlen(i8* %0) #4
  %add = add i32 %call, 2
  store i32 %add, i32* %len, align 4
  %1 = load i8*, i8** %s.addr, align 4
  %call1 = call i8* @strchr(i8* %1, i32 2)
  %tobool = icmp ne i8* %call1, null
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load i8*, i8** %s.addr, align 4
  %call2 = call i8* @strchr(i8* %2, i32 3)
  %tobool3 = icmp ne i8* %call2, null
  br i1 %tobool3, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %3 = load i32, i32* %len, align 4
  %add4 = add nsw i32 %3, 1
  %call5 = call noalias i8* @calloc(i32 %add4, i32 1)
  store i8* %call5, i8** %ss, align 4
  %4 = load i8*, i8** %ss, align 4
  %5 = load i8*, i8** %s.addr, align 4
  %call6 = call i32 (i8*, i8*, ...) @sprintf(i8* %4, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 2, i8* %5, i32 3)
  %6 = load i32, i32* %len, align 4
  %mul = mul i32 %6, 4
  %call7 = call noalias i8* @malloc(i32 %mul)
  %7 = bitcast i8* %call7 to i8**
  store i8** %7, i8*** %table, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %8 = load i32, i32* %i, align 4
  %9 = load i32, i32* %len, align 4
  %cmp = icmp slt i32 %8, %9
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %10 = load i32, i32* %len, align 4
  %add8 = add nsw i32 %10, 1
  %call9 = call noalias i8* @calloc(i32 %add8, i32 1)
  store i8* %call9, i8** %str, align 4
  %11 = load i8*, i8** %str, align 4
  %12 = load i8*, i8** %ss, align 4
  %13 = load i32, i32* %i, align 4
  %add.ptr = getelementptr inbounds i8, i8* %12, i32 %13
  %call10 = call i8* @strcpy(i8* %11, i8* %add.ptr)
  %14 = load i32, i32* %i, align 4
  %cmp11 = icmp sgt i32 %14, 0
  br i1 %cmp11, label %if.then12, label %if.end14

if.then12:                                        ; preds = %for.body
  %15 = load i8*, i8** %str, align 4
  %16 = load i8*, i8** %ss, align 4
  %17 = load i32, i32* %i, align 4
  %call13 = call i8* @strncat(i8* %15, i8* %16, i32 %17)
  br label %if.end14

if.end14:                                         ; preds = %if.then12, %for.body
  %18 = load i8*, i8** %str, align 4
  %19 = load i8**, i8*** %table, align 4
  %20 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %19, i32 %20
  store i8* %18, i8** %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end14
  %21 = load i32, i32* %i, align 4
  %inc = add nsw i32 %21, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %22 = load i8**, i8*** %table, align 4
  %23 = bitcast i8** %22 to i8*
  %24 = load i32, i32* %len, align 4
  call void @qsort(i8* %23, i32 %24, i32 4, i32 (i8*, i8*)* @compareStrings)
  store i32 0, i32* %i, align 4
  br label %for.cond15

for.cond15:                                       ; preds = %for.inc22, %for.end
  %25 = load i32, i32* %i, align 4
  %26 = load i32, i32* %len, align 4
  %cmp16 = icmp slt i32 %25, %26
  br i1 %cmp16, label %for.body17, label %for.end24

for.body17:                                       ; preds = %for.cond15
  %27 = load i8**, i8*** %table, align 4
  %28 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds i8*, i8** %27, i32 %28
  %29 = load i8*, i8** %arrayidx18, align 4
  %30 = load i32, i32* %len, align 4
  %sub = sub nsw i32 %30, 1
  %arrayidx19 = getelementptr inbounds i8, i8* %29, i32 %sub
  %31 = load i8, i8* %arrayidx19, align 1
  %32 = load i8*, i8** %r.addr, align 4
  %33 = load i32, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds i8, i8* %32, i32 %33
  store i8 %31, i8* %arrayidx20, align 1
  %34 = load i8**, i8*** %table, align 4
  %35 = load i32, i32* %i, align 4
  %arrayidx21 = getelementptr inbounds i8*, i8** %34, i32 %35
  %36 = load i8*, i8** %arrayidx21, align 4
  call void @free(i8* %36)
  br label %for.inc22

for.inc22:                                        ; preds = %for.body17
  %37 = load i32, i32* %i, align 4
  %inc23 = add nsw i32 %37, 1
  store i32 %inc23, i32* %i, align 4
  br label %for.cond15

for.end24:                                        ; preds = %for.cond15
  %38 = load i8**, i8*** %table, align 4
  %39 = bitcast i8** %38 to i8*
  call void @free(i8* %39)
  %40 = load i8*, i8** %ss, align 4
  call void @free(i8* %40)
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end24, %if.then
  %41 = load i32, i32* %retval, align 4
  ret i32 %41
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #1

declare i8* @strchr(i8* %0, i32 %1) #2

declare noalias i8* @calloc(i32 %0, i32 %1) #2

declare i32 @sprintf(i8* %0, i8* %1, ...) #2

declare noalias i8* @malloc(i32 %0) #2

declare i8* @strcpy(i8* %0, i8* %1) #2

declare i8* @strncat(i8* %0, i8* %1, i32 %2) #2

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #2

declare void @free(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden void @ibwt(i8* %r, i8* %s) #0 {
entry:
  %r.addr = alloca i8*, align 4
  %s.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %len = alloca i32, align 4
  %table = alloca i8**, align 4
  store i8* %r, i8** %r.addr, align 4
  store i8* %s, i8** %s.addr, align 4
  %0 = load i8*, i8** %r.addr, align 4
  %call = call i32 @strlen(i8* %0) #4
  store i32 %call, i32* %len, align 4
  %1 = load i32, i32* %len, align 4
  %mul = mul i32 %1, 4
  %call1 = call noalias i8* @malloc(i32 %mul)
  %2 = bitcast i8* %call1 to i8**
  store i8** %2, i8*** %table, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %len, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %len, align 4
  %add = add nsw i32 %5, 1
  %call2 = call noalias i8* @calloc(i32 %add, i32 1)
  %6 = load i8**, i8*** %table, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %6, i32 %7
  store i8* %call2, i8** %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc17, %for.end
  %9 = load i32, i32* %i, align 4
  %10 = load i32, i32* %len, align 4
  %cmp4 = icmp slt i32 %9, %10
  br i1 %cmp4, label %for.body5, label %for.end19

for.body5:                                        ; preds = %for.cond3
  store i32 0, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc14, %for.body5
  %11 = load i32, i32* %j, align 4
  %12 = load i32, i32* %len, align 4
  %cmp7 = icmp slt i32 %11, %12
  br i1 %cmp7, label %for.body8, label %for.end16

for.body8:                                        ; preds = %for.cond6
  %13 = load i8**, i8*** %table, align 4
  %14 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds i8*, i8** %13, i32 %14
  %15 = load i8*, i8** %arrayidx9, align 4
  %add.ptr = getelementptr inbounds i8, i8* %15, i32 1
  %16 = load i8**, i8*** %table, align 4
  %17 = load i32, i32* %j, align 4
  %arrayidx10 = getelementptr inbounds i8*, i8** %16, i32 %17
  %18 = load i8*, i8** %arrayidx10, align 4
  %19 = load i32, i32* %len, align 4
  call void @llvm.memmove.p0i8.p0i8.i32(i8* align 1 %add.ptr, i8* align 1 %18, i32 %19, i1 false)
  %20 = load i8*, i8** %r.addr, align 4
  %21 = load i32, i32* %j, align 4
  %arrayidx11 = getelementptr inbounds i8, i8* %20, i32 %21
  %22 = load i8, i8* %arrayidx11, align 1
  %23 = load i8**, i8*** %table, align 4
  %24 = load i32, i32* %j, align 4
  %arrayidx12 = getelementptr inbounds i8*, i8** %23, i32 %24
  %25 = load i8*, i8** %arrayidx12, align 4
  %arrayidx13 = getelementptr inbounds i8, i8* %25, i32 0
  store i8 %22, i8* %arrayidx13, align 1
  br label %for.inc14

for.inc14:                                        ; preds = %for.body8
  %26 = load i32, i32* %j, align 4
  %inc15 = add nsw i32 %26, 1
  store i32 %inc15, i32* %j, align 4
  br label %for.cond6

for.end16:                                        ; preds = %for.cond6
  %27 = load i8**, i8*** %table, align 4
  %28 = bitcast i8** %27 to i8*
  %29 = load i32, i32* %len, align 4
  call void @qsort(i8* %28, i32 %29, i32 4, i32 (i8*, i8*)* @compareStrings)
  br label %for.inc17

for.inc17:                                        ; preds = %for.end16
  %30 = load i32, i32* %i, align 4
  %inc18 = add nsw i32 %30, 1
  store i32 %inc18, i32* %i, align 4
  br label %for.cond3

for.end19:                                        ; preds = %for.cond3
  store i32 0, i32* %i, align 4
  br label %for.cond20

for.cond20:                                       ; preds = %for.inc31, %for.end19
  %31 = load i32, i32* %i, align 4
  %32 = load i32, i32* %len, align 4
  %cmp21 = icmp slt i32 %31, %32
  br i1 %cmp21, label %for.body22, label %for.end33

for.body22:                                       ; preds = %for.cond20
  %33 = load i8**, i8*** %table, align 4
  %34 = load i32, i32* %i, align 4
  %arrayidx23 = getelementptr inbounds i8*, i8** %33, i32 %34
  %35 = load i8*, i8** %arrayidx23, align 4
  %36 = load i32, i32* %len, align 4
  %sub = sub nsw i32 %36, 1
  %arrayidx24 = getelementptr inbounds i8, i8* %35, i32 %sub
  %37 = load i8, i8* %arrayidx24, align 1
  %conv = sext i8 %37 to i32
  %cmp25 = icmp eq i32 %conv, 3
  br i1 %cmp25, label %if.then, label %if.end

if.then:                                          ; preds = %for.body22
  %38 = load i8*, i8** %s.addr, align 4
  %39 = load i8**, i8*** %table, align 4
  %40 = load i32, i32* %i, align 4
  %arrayidx27 = getelementptr inbounds i8*, i8** %39, i32 %40
  %41 = load i8*, i8** %arrayidx27, align 4
  %add.ptr28 = getelementptr inbounds i8, i8* %41, i32 1
  %42 = load i32, i32* %len, align 4
  %sub29 = sub nsw i32 %42, 2
  %call30 = call i8* @strncpy(i8* %38, i8* %add.ptr28, i32 %sub29)
  br label %for.end33

if.end:                                           ; preds = %for.body22
  br label %for.inc31

for.inc31:                                        ; preds = %if.end
  %43 = load i32, i32* %i, align 4
  %inc32 = add nsw i32 %43, 1
  store i32 %inc32, i32* %i, align 4
  br label %for.cond20

for.end33:                                        ; preds = %if.then, %for.cond20
  store i32 0, i32* %i, align 4
  br label %for.cond34

for.cond34:                                       ; preds = %for.inc39, %for.end33
  %44 = load i32, i32* %i, align 4
  %45 = load i32, i32* %len, align 4
  %cmp35 = icmp slt i32 %44, %45
  br i1 %cmp35, label %for.body37, label %for.end41

for.body37:                                       ; preds = %for.cond34
  %46 = load i8**, i8*** %table, align 4
  %47 = load i32, i32* %i, align 4
  %arrayidx38 = getelementptr inbounds i8*, i8** %46, i32 %47
  %48 = load i8*, i8** %arrayidx38, align 4
  call void @free(i8* %48)
  br label %for.inc39

for.inc39:                                        ; preds = %for.body37
  %49 = load i32, i32* %i, align 4
  %inc40 = add nsw i32 %49, 1
  store i32 %inc40, i32* %i, align 4
  br label %for.cond34

for.end41:                                        ; preds = %for.cond34
  %50 = load i8**, i8*** %table, align 4
  %51 = bitcast i8** %50 to i8*
  call void @free(i8* %51)
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i32(i8* nocapture %0, i8* nocapture readonly %1, i32 %2, i1 immarg %3) #3

declare i8* @strncpy(i8* %0, i8* %1, i32 %2) #2

; Function Attrs: noinline nounwind optnone
define hidden void @makePrintable(i8* %s, i8* %t) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %t.addr = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8* %t, i8** %t.addr, align 4
  %0 = load i8*, i8** %t.addr, align 4
  %1 = load i8*, i8** %s.addr, align 4
  %call = call i8* @strcpy(i8* %0, i8* %1)
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i8*, i8** %t.addr, align 4
  %3 = load i8, i8* %2, align 1
  %conv = sext i8 %3 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i8*, i8** %t.addr, align 4
  %5 = load i8, i8* %4, align 1
  %conv2 = sext i8 %5 to i32
  %cmp3 = icmp eq i32 %conv2, 2
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %6 = load i8*, i8** %t.addr, align 4
  store i8 94, i8* %6, align 1
  br label %if.end9

if.else:                                          ; preds = %for.body
  %7 = load i8*, i8** %t.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv5 = sext i8 %8 to i32
  %cmp6 = icmp eq i32 %conv5, 3
  br i1 %cmp6, label %if.then8, label %if.end

if.then8:                                         ; preds = %if.else
  %9 = load i8*, i8** %t.addr, align 4
  store i8 124, i8* %9, align 1
  br label %if.end

if.end:                                           ; preds = %if.then8, %if.else
  br label %if.end9

if.end9:                                          ; preds = %if.end, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end9
  %10 = load i8*, i8** %t.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %10, i32 1
  store i8* %incdec.ptr, i8** %t.addr, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %res = alloca i32, align 4
  %len = alloca i32, align 4
  %tests = alloca [6 x i8*], align 16
  %t = alloca i8*, align 4
  %r = alloca i8*, align 4
  %s = alloca i8*, align 4
  store i32 0, i32* %retval, align 4
  %arrayidx = getelementptr inbounds [6 x i8*], [6 x i8*]* %tests, i32 0, i32 0
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8** %arrayidx, align 16
  %arrayidx1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %tests, i32 0, i32 1
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i32 0, i32 0), i8** %arrayidx1, align 4
  %arrayidx2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %tests, i32 0, i32 2
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i32 0, i32 0), i8** %arrayidx2, align 8
  %arrayidx3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %tests, i32 0, i32 3
  store i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.4, i32 0, i32 0), i8** %arrayidx3, align 4
  %arrayidx4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %tests, i32 0, i32 4
  store i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.5, i32 0, i32 0), i8** %arrayidx4, align 16
  %arrayidx5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %tests, i32 0, i32 5
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i32 0, i32 0), i8** %arrayidx5, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds [6 x i8*], [6 x i8*]* %tests, i32 0, i32 %1
  %2 = load i8*, i8** %arrayidx6, align 4
  %call = call i32 @strlen(i8* %2) #4
  store i32 %call, i32* %len, align 4
  %3 = load i32, i32* %len, align 4
  %add = add nsw i32 %3, 1
  %call7 = call noalias i8* @calloc(i32 %add, i32 1)
  store i8* %call7, i8** %t, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds [6 x i8*], [6 x i8*]* %tests, i32 0, i32 %4
  %5 = load i8*, i8** %arrayidx8, align 4
  %6 = load i8*, i8** %t, align 4
  call void @makePrintable(i8* %5, i8* %6)
  %7 = load i8*, i8** %t, align 4
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i32 0, i32 0), i8* %7)
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.8, i32 0, i32 0))
  %8 = load i32, i32* %len, align 4
  %add11 = add nsw i32 %8, 3
  %call12 = call noalias i8* @calloc(i32 %add11, i32 1)
  store i8* %call12, i8** %r, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds [6 x i8*], [6 x i8*]* %tests, i32 0, i32 %9
  %10 = load i8*, i8** %arrayidx13, align 4
  %11 = load i8*, i8** %r, align 4
  %call14 = call i32 @bwt(i8* %10, i8* %11)
  store i32 %call14, i32* %res, align 4
  %12 = load i32, i32* %res, align 4
  %cmp15 = icmp eq i32 %12, 1
  br i1 %cmp15, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.9, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %for.body
  %13 = load i8*, i8** %r, align 4
  %14 = load i8*, i8** %t, align 4
  call void @makePrintable(i8* %13, i8* %14)
  %15 = load i8*, i8** %t, align 4
  %call17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i32 0, i32 0), i8* %15)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %16 = load i32, i32* %len, align 4
  %add18 = add nsw i32 %16, 1
  %call19 = call noalias i8* @calloc(i32 %add18, i32 1)
  store i8* %call19, i8** %s, align 4
  %17 = load i8*, i8** %r, align 4
  %18 = load i8*, i8** %s, align 4
  call void @ibwt(i8* %17, i8* %18)
  %19 = load i8*, i8** %s, align 4
  %20 = load i8*, i8** %t, align 4
  call void @makePrintable(i8* %19, i8* %20)
  %21 = load i8*, i8** %t, align 4
  %call20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.10, i32 0, i32 0), i8* %21)
  %22 = load i8*, i8** %t, align 4
  call void @free(i8* %22)
  %23 = load i8*, i8** %r, align 4
  call void @free(i8* %23)
  %24 = load i8*, i8** %s, align 4
  call void @free(i8* %24)
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %25 = load i32, i32* %i, align 4
  %inc = add nsw i32 %25, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %3 = load i8, i8* %2, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %3 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp = icmp ne i32 %conv, 0
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %5 = load i8, i8* %4, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv2 = sext i8 %5 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp3 = icmp eq i32 %conv2, 2
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 2:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %8 = load i8, i8* %7, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv5 = sext i8 %8 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp6 = icmp eq i32 %conv5, 3
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 3:i32, %1
infer %2
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 0:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 2:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for makePrintable()

; entering Souper's runOnFunction() for main()

; ModuleID = './Burrowsâ€“Wheeler_transform.c.bc'
source_filename = "./Burrows\E2\80\93Wheeler_transform.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@STX = hidden constant i8 2, align 1
@ETX = hidden constant i8 3, align 1
@.str = private unnamed_addr constant [7 x i8] c"%c%s%c\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"banana\00", align 1
@.str.2 = private unnamed_addr constant [9 x i8] c"appellee\00", align 1
@.str.3 = private unnamed_addr constant [8 x i8] c"dogwood\00", align 1
@.str.4 = private unnamed_addr constant [41 x i8] c"TO BE OR NOT TO BE OR WANT TO BE OR NOT?\00", align 1
@.str.5 = private unnamed_addr constant [45 x i8] c"SIX.MIXED.PIXIES.SIFT.SIXTY.PIXIE.DUST.BOXES\00", align 1
@.str.6 = private unnamed_addr constant [6 x i8] c"\02ABC\03\00", align 1
@.str.7 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.8 = private unnamed_addr constant [6 x i8] c" --> \00", align 1
@.str.9 = private unnamed_addr constant [40 x i8] c"ERROR: String can't contain STX or ETX\0A\00", align 1
@.str.10 = private unnamed_addr constant [10 x i8] c" --> %s\0A\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @compareStrings(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %aa = alloca i8*, align 4
  %bb = alloca i8*, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to i8**
  %2 = load i8*, i8** %1, align 4
  store i8* %2, i8** %aa, align 4
  %3 = load i8*, i8** %b.addr, align 4
  %4 = bitcast i8* %3 to i8**
  %5 = load i8*, i8** %4, align 4
  store i8* %5, i8** %bb, align 4
  %6 = load i8*, i8** %aa, align 4
  %7 = load i8*, i8** %bb, align 4
  %call = call i32 @strcmp(i8* %6, i8* %7) #4
  ret i32 %call
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @bwt(i8* %s, i8* %r) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca i8*, align 4
  %r.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  %ss = alloca i8*, align 4
  %str = alloca i8*, align 4
  %table = alloca i8**, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8* %r, i8** %r.addr, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %call = call i32 @strlen(i8* %0) #4
  %add = add i32 %call, 2
  store i32 %add, i32* %len, align 4
  %1 = load i8*, i8** %s.addr, align 4
  %call1 = call i8* @strchr(i8* %1, i32 2)
  %tobool = icmp ne i8* %call1, null
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load i8*, i8** %s.addr, align 4
  %call2 = call i8* @strchr(i8* %2, i32 3)
  %tobool3 = icmp ne i8* %call2, null
  br i1 %tobool3, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %3 = load i32, i32* %len, align 4
  %add4 = add nsw i32 %3, 1
  %call5 = call noalias i8* @calloc(i32 %add4, i32 1)
  store i8* %call5, i8** %ss, align 4
  %4 = load i8*, i8** %ss, align 4
  %5 = load i8*, i8** %s.addr, align 4
  %call6 = call i32 (i8*, i8*, ...) @sprintf(i8* %4, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 2, i8* %5, i32 3)
  %6 = load i32, i32* %len, align 4
  %mul = mul i32 %6, 4
  %call7 = call noalias i8* @malloc(i32 %mul)
  %7 = bitcast i8* %call7 to i8**
  store i8** %7, i8*** %table, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %8 = load i32, i32* %i, align 4
  %9 = load i32, i32* %len, align 4
  %cmp = icmp slt i32 %8, %9
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %10 = load i32, i32* %len, align 4
  %add8 = add nsw i32 %10, 1
  %call9 = call noalias i8* @calloc(i32 %add8, i32 1)
  store i8* %call9, i8** %str, align 4
  %11 = load i8*, i8** %str, align 4
  %12 = load i8*, i8** %ss, align 4
  %13 = load i32, i32* %i, align 4
  %add.ptr = getelementptr inbounds i8, i8* %12, i32 %13
  %call10 = call i8* @strcpy(i8* %11, i8* %add.ptr)
  %14 = load i32, i32* %i, align 4
  %cmp11 = icmp sgt i32 %14, 0
  br i1 %cmp11, label %if.then12, label %if.end14

if.then12:                                        ; preds = %for.body
  %15 = load i8*, i8** %str, align 4
  %16 = load i8*, i8** %ss, align 4
  %17 = load i32, i32* %i, align 4
  %call13 = call i8* @strncat(i8* %15, i8* %16, i32 %17)
  br label %if.end14

if.end14:                                         ; preds = %if.then12, %for.body
  %18 = load i8*, i8** %str, align 4
  %19 = load i8**, i8*** %table, align 4
  %20 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %19, i32 %20
  store i8* %18, i8** %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end14
  %21 = load i32, i32* %i, align 4
  %inc = add nsw i32 %21, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %22 = load i8**, i8*** %table, align 4
  %23 = bitcast i8** %22 to i8*
  %24 = load i32, i32* %len, align 4
  call void @qsort(i8* %23, i32 %24, i32 4, i32 (i8*, i8*)* @compareStrings)
  store i32 0, i32* %i, align 4
  br label %for.cond15

for.cond15:                                       ; preds = %for.inc22, %for.end
  %25 = load i32, i32* %i, align 4
  %26 = load i32, i32* %len, align 4
  %cmp16 = icmp slt i32 %25, %26
  br i1 %cmp16, label %for.body17, label %for.end24

for.body17:                                       ; preds = %for.cond15
  %27 = load i8**, i8*** %table, align 4
  %28 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds i8*, i8** %27, i32 %28
  %29 = load i8*, i8** %arrayidx18, align 4
  %30 = load i32, i32* %len, align 4
  %sub = sub nsw i32 %30, 1
  %arrayidx19 = getelementptr inbounds i8, i8* %29, i32 %sub
  %31 = load i8, i8* %arrayidx19, align 1
  %32 = load i8*, i8** %r.addr, align 4
  %33 = load i32, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds i8, i8* %32, i32 %33
  store i8 %31, i8* %arrayidx20, align 1
  %34 = load i8**, i8*** %table, align 4
  %35 = load i32, i32* %i, align 4
  %arrayidx21 = getelementptr inbounds i8*, i8** %34, i32 %35
  %36 = load i8*, i8** %arrayidx21, align 4
  call void @free(i8* %36)
  br label %for.inc22

for.inc22:                                        ; preds = %for.body17
  %37 = load i32, i32* %i, align 4
  %inc23 = add nsw i32 %37, 1
  store i32 %inc23, i32* %i, align 4
  br label %for.cond15

for.end24:                                        ; preds = %for.cond15
  %38 = load i8**, i8*** %table, align 4
  %39 = bitcast i8** %38 to i8*
  call void @free(i8* %39)
  %40 = load i8*, i8** %ss, align 4
  call void @free(i8* %40)
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end24, %if.then
  %41 = load i32, i32* %retval, align 4
  ret i32 %41
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #1

declare i8* @strchr(i8* %0, i32 %1) #2

declare noalias i8* @calloc(i32 %0, i32 %1) #2

declare i32 @sprintf(i8* %0, i8* %1, ...) #2

declare noalias i8* @malloc(i32 %0) #2

declare i8* @strcpy(i8* %0, i8* %1) #2

declare i8* @strncat(i8* %0, i8* %1, i32 %2) #2

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #2

declare void @free(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden void @ibwt(i8* %r, i8* %s) #0 {
entry:
  %r.addr = alloca i8*, align 4
  %s.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %len = alloca i32, align 4
  %table = alloca i8**, align 4
  store i8* %r, i8** %r.addr, align 4
  store i8* %s, i8** %s.addr, align 4
  %0 = load i8*, i8** %r.addr, align 4
  %call = call i32 @strlen(i8* %0) #4
  store i32 %call, i32* %len, align 4
  %1 = load i32, i32* %len, align 4
  %mul = mul i32 %1, 4
  %call1 = call noalias i8* @malloc(i32 %mul)
  %2 = bitcast i8* %call1 to i8**
  store i8** %2, i8*** %table, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %len, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %len, align 4
  %add = add nsw i32 %5, 1
  %call2 = call noalias i8* @calloc(i32 %add, i32 1)
  %6 = load i8**, i8*** %table, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %6, i32 %7
  store i8* %call2, i8** %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc17, %for.end
  %9 = load i32, i32* %i, align 4
  %10 = load i32, i32* %len, align 4
  %cmp4 = icmp slt i32 %9, %10
  br i1 %cmp4, label %for.body5, label %for.end19

for.body5:                                        ; preds = %for.cond3
  store i32 0, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc14, %for.body5
  %11 = load i32, i32* %j, align 4
  %12 = load i32, i32* %len, align 4
  %cmp7 = icmp slt i32 %11, %12
  br i1 %cmp7, label %for.body8, label %for.end16

for.body8:                                        ; preds = %for.cond6
  %13 = load i8**, i8*** %table, align 4
  %14 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds i8*, i8** %13, i32 %14
  %15 = load i8*, i8** %arrayidx9, align 4
  %add.ptr = getelementptr inbounds i8, i8* %15, i32 1
  %16 = load i8**, i8*** %table, align 4
  %17 = load i32, i32* %j, align 4
  %arrayidx10 = getelementptr inbounds i8*, i8** %16, i32 %17
  %18 = load i8*, i8** %arrayidx10, align 4
  %19 = load i32, i32* %len, align 4
  call void @llvm.memmove.p0i8.p0i8.i32(i8* align 1 %add.ptr, i8* align 1 %18, i32 %19, i1 false)
  %20 = load i8*, i8** %r.addr, align 4
  %21 = load i32, i32* %j, align 4
  %arrayidx11 = getelementptr inbounds i8, i8* %20, i32 %21
  %22 = load i8, i8* %arrayidx11, align 1
  %23 = load i8**, i8*** %table, align 4
  %24 = load i32, i32* %j, align 4
  %arrayidx12 = getelementptr inbounds i8*, i8** %23, i32 %24
  %25 = load i8*, i8** %arrayidx12, align 4
  %arrayidx13 = getelementptr inbounds i8, i8* %25, i32 0
  store i8 %22, i8* %arrayidx13, align 1
  br label %for.inc14

for.inc14:                                        ; preds = %for.body8
  %26 = load i32, i32* %j, align 4
  %inc15 = add nsw i32 %26, 1
  store i32 %inc15, i32* %j, align 4
  br label %for.cond6

for.end16:                                        ; preds = %for.cond6
  %27 = load i8**, i8*** %table, align 4
  %28 = bitcast i8** %27 to i8*
  %29 = load i32, i32* %len, align 4
  call void @qsort(i8* %28, i32 %29, i32 4, i32 (i8*, i8*)* @compareStrings)
  br label %for.inc17

for.inc17:                                        ; preds = %for.end16
  %30 = load i32, i32* %i, align 4
  %inc18 = add nsw i32 %30, 1
  store i32 %inc18, i32* %i, align 4
  br label %for.cond3

for.end19:                                        ; preds = %for.cond3
  store i32 0, i32* %i, align 4
  br label %for.cond20

for.cond20:                                       ; preds = %for.inc31, %for.end19
  %31 = load i32, i32* %i, align 4
  %32 = load i32, i32* %len, align 4
  %cmp21 = icmp slt i32 %31, %32
  br i1 %cmp21, label %for.body22, label %for.end33

for.body22:                                       ; preds = %for.cond20
  %33 = load i8**, i8*** %table, align 4
  %34 = load i32, i32* %i, align 4
  %arrayidx23 = getelementptr inbounds i8*, i8** %33, i32 %34
  %35 = load i8*, i8** %arrayidx23, align 4
  %36 = load i32, i32* %len, align 4
  %sub = sub nsw i32 %36, 1
  %arrayidx24 = getelementptr inbounds i8, i8* %35, i32 %sub
  %37 = load i8, i8* %arrayidx24, align 1
  %conv = sext i8 %37 to i32
  %cmp25 = icmp eq i32 %conv, 3
  br i1 %cmp25, label %if.then, label %if.end

if.then:                                          ; preds = %for.body22
  %38 = load i8*, i8** %s.addr, align 4
  %39 = load i8**, i8*** %table, align 4
  %40 = load i32, i32* %i, align 4
  %arrayidx27 = getelementptr inbounds i8*, i8** %39, i32 %40
  %41 = load i8*, i8** %arrayidx27, align 4
  %add.ptr28 = getelementptr inbounds i8, i8* %41, i32 1
  %42 = load i32, i32* %len, align 4
  %sub29 = sub nsw i32 %42, 2
  %call30 = call i8* @strncpy(i8* %38, i8* %add.ptr28, i32 %sub29)
  br label %for.end33

if.end:                                           ; preds = %for.body22
  br label %for.inc31

for.inc31:                                        ; preds = %if.end
  %43 = load i32, i32* %i, align 4
  %inc32 = add nsw i32 %43, 1
  store i32 %inc32, i32* %i, align 4
  br label %for.cond20

for.end33:                                        ; preds = %if.then, %for.cond20
  store i32 0, i32* %i, align 4
  br label %for.cond34

for.cond34:                                       ; preds = %for.inc39, %for.end33
  %44 = load i32, i32* %i, align 4
  %45 = load i32, i32* %len, align 4
  %cmp35 = icmp slt i32 %44, %45
  br i1 %cmp35, label %for.body37, label %for.end41

for.body37:                                       ; preds = %for.cond34
  %46 = load i8**, i8*** %table, align 4
  %47 = load i32, i32* %i, align 4
  %arrayidx38 = getelementptr inbounds i8*, i8** %46, i32 %47
  %48 = load i8*, i8** %arrayidx38, align 4
  call void @free(i8* %48)
  br label %for.inc39

for.inc39:                                        ; preds = %for.body37
  %49 = load i32, i32* %i, align 4
  %inc40 = add nsw i32 %49, 1
  store i32 %inc40, i32* %i, align 4
  br label %for.cond34

for.end41:                                        ; preds = %for.cond34
  %50 = load i8**, i8*** %table, align 4
  %51 = bitcast i8** %50 to i8*
  call void @free(i8* %51)
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i32(i8* nocapture %0, i8* nocapture readonly %1, i32 %2, i1 immarg %3) #3

declare i8* @strncpy(i8* %0, i8* %1, i32 %2) #2

; Function Attrs: noinline nounwind optnone
define hidden void @makePrintable(i8* %s, i8* %t) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %t.addr = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8* %t, i8** %t.addr, align 4
  %0 = load i8*, i8** %t.addr, align 4
  %1 = load i8*, i8** %s.addr, align 4
  %call = call i8* @strcpy(i8* %0, i8* %1)
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i8*, i8** %t.addr, align 4
  %3 = load i8, i8* %2, align 1
  %conv = sext i8 %3 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i8*, i8** %t.addr, align 4
  %5 = load i8, i8* %4, align 1
  %conv2 = sext i8 %5 to i32
  %cmp3 = icmp eq i32 %conv2, 2
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %6 = load i8*, i8** %t.addr, align 4
  store i8 94, i8* %6, align 1
  br label %if.end9

if.else:                                          ; preds = %for.body
  %7 = load i8*, i8** %t.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv5 = sext i8 %8 to i32
  %cmp6 = icmp eq i32 %conv5, 3
  br i1 %cmp6, label %if.then8, label %if.end

if.then8:                                         ; preds = %if.else
  %9 = load i8*, i8** %t.addr, align 4
  store i8 124, i8* %9, align 1
  br label %if.end

if.end:                                           ; preds = %if.then8, %if.else
  br label %if.end9

if.end9:                                          ; preds = %if.end, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end9
  %10 = load i8*, i8** %t.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %10, i32 1
  store i8* %incdec.ptr, i8** %t.addr, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %res = alloca i32, align 4
  %len = alloca i32, align 4
  %tests = alloca [6 x i8*], align 16
  %t = alloca i8*, align 4
  %r = alloca i8*, align 4
  %s = alloca i8*, align 4
  store i32 0, i32* %retval, align 4
  %arrayidx = getelementptr inbounds [6 x i8*], [6 x i8*]* %tests, i32 0, i32 0
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8** %arrayidx, align 16
  %arrayidx1 = getelementptr inbounds [6 x i8*], [6 x i8*]* %tests, i32 0, i32 1
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i32 0, i32 0), i8** %arrayidx1, align 4
  %arrayidx2 = getelementptr inbounds [6 x i8*], [6 x i8*]* %tests, i32 0, i32 2
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i32 0, i32 0), i8** %arrayidx2, align 8
  %arrayidx3 = getelementptr inbounds [6 x i8*], [6 x i8*]* %tests, i32 0, i32 3
  store i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.4, i32 0, i32 0), i8** %arrayidx3, align 4
  %arrayidx4 = getelementptr inbounds [6 x i8*], [6 x i8*]* %tests, i32 0, i32 4
  store i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.5, i32 0, i32 0), i8** %arrayidx4, align 16
  %arrayidx5 = getelementptr inbounds [6 x i8*], [6 x i8*]* %tests, i32 0, i32 5
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i32 0, i32 0), i8** %arrayidx5, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds [6 x i8*], [6 x i8*]* %tests, i32 0, i32 %1
  %2 = load i8*, i8** %arrayidx6, align 4
  %call = call i32 @strlen(i8* %2) #4
  store i32 %call, i32* %len, align 4
  %3 = load i32, i32* %len, align 4
  %add = add nsw i32 %3, 1
  %call7 = call noalias i8* @calloc(i32 %add, i32 1)
  store i8* %call7, i8** %t, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds [6 x i8*], [6 x i8*]* %tests, i32 0, i32 %4
  %5 = load i8*, i8** %arrayidx8, align 4
  %6 = load i8*, i8** %t, align 4
  call void @makePrintable(i8* %5, i8* %6)
  %7 = load i8*, i8** %t, align 4
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i32 0, i32 0), i8* %7)
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.8, i32 0, i32 0))
  %8 = load i32, i32* %len, align 4
  %add11 = add nsw i32 %8, 3
  %call12 = call noalias i8* @calloc(i32 %add11, i32 1)
  store i8* %call12, i8** %r, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds [6 x i8*], [6 x i8*]* %tests, i32 0, i32 %9
  %10 = load i8*, i8** %arrayidx13, align 4
  %11 = load i8*, i8** %r, align 4
  %call14 = call i32 @bwt(i8* %10, i8* %11)
  store i32 %call14, i32* %res, align 4
  %12 = load i32, i32* %res, align 4
  %cmp15 = icmp eq i32 %12, 1
  br i1 %cmp15, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.9, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %for.body
  %13 = load i8*, i8** %r, align 4
  %14 = load i8*, i8** %t, align 4
  call void @makePrintable(i8* %13, i8* %14)
  %15 = load i8*, i8** %t, align 4
  %call17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i32 0, i32 0), i8* %15)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %16 = load i32, i32* %len, align 4
  %add18 = add nsw i32 %16, 1
  %call19 = call noalias i8* @calloc(i32 %add18, i32 1)
  store i8* %call19, i8** %s, align 4
  %17 = load i8*, i8** %r, align 4
  %18 = load i8*, i8** %s, align 4
  call void @ibwt(i8* %17, i8* %18)
  %19 = load i8*, i8** %s, align 4
  %20 = load i8*, i8** %t, align 4
  call void @makePrintable(i8* %19, i8* %20)
  %21 = load i8*, i8** %t, align 4
  %call20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.10, i32 0, i32 0), i8* %21)
  %22 = load i8*, i8** %t, align 4
  call void @free(i8* %22)
  %23 = load i8*, i8** %r, align 4
  call void @free(i8* %23)
  %24 = load i8*, i8** %s, align 4
  call void @free(i8* %24)
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %25 = load i32, i32* %i, align 4
  %inc = add nsw i32 %25, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, 6
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 6:i32
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 @strlen(i8* %2) #4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %3, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add11 = add nsw i32 %8, 3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 3:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call14 = call i32 @bwt(i8* %10, i8* %11)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %res, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp15 = icmp eq i32 %12, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add18 = add nsw i32 %16, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %25, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 6:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 3:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 3
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
