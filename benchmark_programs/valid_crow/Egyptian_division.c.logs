
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for egyptian_division()

; ModuleID = './Egyptian_division.c.bc'
source_filename = "./Egyptian_division.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@egyptian_division.powers = internal global [64 x i64] zeroinitializer, align 16
@egyptian_division.doublings = internal global [64 x i64] zeroinitializer, align 16
@.str = private unnamed_addr constant [35 x i8] c"%llu / %llu = %llu remainder %llu\0A\00", align 1
@.str.1 = private unnamed_addr constant [15 x i8] c"a == b * x + y\00", align 1
@.str.2 = private unnamed_addr constant [22 x i8] c"./Egyptian_division.c\00", align 1
@__func__.go = private unnamed_addr constant [3 x i8] c"go\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i64 @egyptian_division(i64 %dividend, i64 %divisor, i64* %remainder) #0 {
entry:
  %dividend.addr = alloca i64, align 8
  %divisor.addr = alloca i64, align 8
  %remainder.addr = alloca i64*, align 4
  %i = alloca i32, align 4
  %answer = alloca i64, align 8
  %accumulator = alloca i64, align 8
  store i64 %dividend, i64* %dividend.addr, align 8
  store i64 %divisor, i64* %divisor.addr, align 8
  store i64* %remainder, i64** %remainder.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 64
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %shl = shl i32 1, %1
  %conv = sext i32 %shl to i64
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [64 x i64], [64 x i64]* @egyptian_division.powers, i32 0, i32 %2
  store i64 %conv, i64* %arrayidx, align 8
  %3 = load i64, i64* %divisor.addr, align 8
  %4 = load i32, i32* %i, align 4
  %sh_prom = zext i32 %4 to i64
  %shl1 = shl i64 %3, %sh_prom
  %5 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds [64 x i64], [64 x i64]* @egyptian_division.doublings, i32 0, i32 %5
  store i64 %shl1, i64* %arrayidx2, align 8
  %6 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds [64 x i64], [64 x i64]* @egyptian_division.doublings, i32 0, i32 %6
  %7 = load i64, i64* %arrayidx3, align 8
  %8 = load i64, i64* %dividend.addr, align 8
  %cmp4 = icmp ugt i64 %7, %8
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.end

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  store i64 0, i64* %answer, align 8
  store i64 0, i64* %accumulator, align 8
  %10 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %10, 1
  store i32 %sub, i32* %i, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc19, %for.end
  %11 = load i32, i32* %i, align 4
  %cmp7 = icmp sge i32 %11, 0
  br i1 %cmp7, label %for.body9, label %for.end20

for.body9:                                        ; preds = %for.cond6
  %12 = load i64, i64* %accumulator, align 8
  %13 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds [64 x i64], [64 x i64]* @egyptian_division.doublings, i32 0, i32 %13
  %14 = load i64, i64* %arrayidx10, align 8
  %add = add i64 %12, %14
  %15 = load i64, i64* %dividend.addr, align 8
  %cmp11 = icmp ule i64 %add, %15
  br i1 %cmp11, label %if.then13, label %if.end18

if.then13:                                        ; preds = %for.body9
  %16 = load i32, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds [64 x i64], [64 x i64]* @egyptian_division.doublings, i32 0, i32 %16
  %17 = load i64, i64* %arrayidx14, align 8
  %18 = load i64, i64* %accumulator, align 8
  %add15 = add i64 %18, %17
  store i64 %add15, i64* %accumulator, align 8
  %19 = load i32, i32* %i, align 4
  %arrayidx16 = getelementptr inbounds [64 x i64], [64 x i64]* @egyptian_division.powers, i32 0, i32 %19
  %20 = load i64, i64* %arrayidx16, align 8
  %21 = load i64, i64* %answer, align 8
  %add17 = add i64 %21, %20
  store i64 %add17, i64* %answer, align 8
  br label %if.end18

if.end18:                                         ; preds = %if.then13, %for.body9
  br label %for.inc19

for.inc19:                                        ; preds = %if.end18
  %22 = load i32, i32* %i, align 4
  %dec = add nsw i32 %22, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond6

for.end20:                                        ; preds = %for.cond6
  %23 = load i64*, i64** %remainder.addr, align 4
  %tobool = icmp ne i64* %23, null
  br i1 %tobool, label %if.then21, label %if.end23

if.then21:                                        ; preds = %for.end20
  %24 = load i64, i64* %dividend.addr, align 8
  %25 = load i64, i64* %accumulator, align 8
  %sub22 = sub i64 %24, %25
  %26 = load i64*, i64** %remainder.addr, align 4
  store i64 %sub22, i64* %26, align 8
  br label %if.end23

if.end23:                                         ; preds = %if.then21, %for.end20
  %27 = load i64, i64* %answer, align 8
  ret i64 %27
}

; Function Attrs: noinline nounwind optnone
define hidden void @go(i64 %a, i64 %b) #0 {
entry:
  %a.addr = alloca i64, align 8
  %b.addr = alloca i64, align 8
  %x = alloca i64, align 8
  %y = alloca i64, align 8
  store i64 %a, i64* %a.addr, align 8
  store i64 %b, i64* %b.addr, align 8
  %0 = load i64, i64* %a.addr, align 8
  %1 = load i64, i64* %b.addr, align 8
  %call = call i64 @egyptian_division(i64 %0, i64 %1, i64* %y)
  store i64 %call, i64* %x, align 8
  %2 = load i64, i64* %a.addr, align 8
  %3 = load i64, i64* %b.addr, align 8
  %4 = load i64, i64* %x, align 8
  %5 = load i64, i64* %y, align 8
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str, i32 0, i32 0), i64 %2, i64 %3, i64 %4, i64 %5)
  %6 = load i64, i64* %a.addr, align 8
  %7 = load i64, i64* %b.addr, align 8
  %8 = load i64, i64* %x, align 8
  %mul = mul i64 %7, %8
  %9 = load i64, i64* %y, align 8
  %add = add i64 %mul, %9
  %cmp = icmp eq i64 %6, %add
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  call void @__assert_fail(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2, i32 0, i32 0), i32 44, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__func__.go, i32 0, i32 0)) #3
  unreachable

10:                                               ; No predecessors!
  br label %lor.end

lor.end:                                          ; preds = %10, %entry
  %11 = phi i1 [ true, %entry ], [ false, %10 ]
  %lor.ext = zext i1 %11 to i32
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noreturn
declare void @__assert_fail(i8* %0, i8* %1, i32 %2, i8* %3) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  call void @go(i64 580, i64 32)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, 64
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 64:i32
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %shl = shl i32 1, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv = sext i32 %shl to i64
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl 1:i32, %0
%2:i64 = sext %1
infer %2

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i64, i64* %divisor.addr, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sh_prom = zext i32 %4 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %shl1 = shl i64 %3, %sh_prom
; Looking for a replacement for:
%0:i64 = var
%1:i32 = var
%2:i64 = zext %1
%3:i64 = shl %0, %2
infer %3

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i64, i64* %arrayidx3, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i64, i64* %dividend.addr, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp4 = icmp ugt i64 %7, %8
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %9, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %10, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp7 = icmp sge i32 %11, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %12 = load i64, i64* %accumulator, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i64, i64* %arrayidx10, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add i64 %12, %14
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %15 = load i64, i64* %dividend.addr, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp11 = icmp ule i64 %add, %15
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = var
%4:i1 = ule %2, %3
infer %4

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i64, i64* %arrayidx14, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i64, i64* %accumulator, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %add15 = add i64 %18, %17
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i64, i64* %arrayidx16, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i64, i64* %answer, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %add17 = add i64 %21, %20
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec = add nsw i32 %22, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool = icmp ne i64* %23, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %24 = load i64, i64* %dividend.addr, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = load i64, i64* %accumulator, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %sub22 = sub i64 %24, %25
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = sub %0, %1
infer %2

; *****
; For LLVM instruction:
;  %27 = load i64, i64* %answer, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 64:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = shl 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 256
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = shl 1:i32, %0
%2:i64 = sext %1
infer %2


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 256
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i64 = var
infer %0


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0
infer %1


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4294967295
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i32 = var
%2:i64 = zext %1
%3:i64 = shl %0, %2
infer %3


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4294967295
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i64 = zext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i1 = ult %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
infer %2


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
%3:i64 = var
%4:i1 = ule %2, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = sub %0, %1
infer %2


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for egyptian_division()

; entering Souper's runOnFunction() for go()

; ModuleID = './Egyptian_division.c.bc'
source_filename = "./Egyptian_division.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@egyptian_division.powers = internal global [64 x i64] zeroinitializer, align 16
@egyptian_division.doublings = internal global [64 x i64] zeroinitializer, align 16
@.str = private unnamed_addr constant [35 x i8] c"%llu / %llu = %llu remainder %llu\0A\00", align 1
@.str.1 = private unnamed_addr constant [15 x i8] c"a == b * x + y\00", align 1
@.str.2 = private unnamed_addr constant [22 x i8] c"./Egyptian_division.c\00", align 1
@__func__.go = private unnamed_addr constant [3 x i8] c"go\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i64 @egyptian_division(i64 %dividend, i64 %divisor, i64* %remainder) #0 {
entry:
  %dividend.addr = alloca i64, align 8
  %divisor.addr = alloca i64, align 8
  %remainder.addr = alloca i64*, align 4
  %i = alloca i32, align 4
  %answer = alloca i64, align 8
  %accumulator = alloca i64, align 8
  store i64 %dividend, i64* %dividend.addr, align 8
  store i64 %divisor, i64* %divisor.addr, align 8
  store i64* %remainder, i64** %remainder.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 64
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %shl = shl i32 1, %1
  %conv = sext i32 %shl to i64
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [64 x i64], [64 x i64]* @egyptian_division.powers, i32 0, i32 %2
  store i64 %conv, i64* %arrayidx, align 8
  %3 = load i64, i64* %divisor.addr, align 8
  %4 = load i32, i32* %i, align 4
  %sh_prom = zext i32 %4 to i64
  %shl1 = shl i64 %3, %sh_prom
  %5 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds [64 x i64], [64 x i64]* @egyptian_division.doublings, i32 0, i32 %5
  store i64 %shl1, i64* %arrayidx2, align 8
  %6 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds [64 x i64], [64 x i64]* @egyptian_division.doublings, i32 0, i32 %6
  %7 = load i64, i64* %arrayidx3, align 8
  %8 = load i64, i64* %dividend.addr, align 8
  %cmp4 = icmp ugt i64 %7, %8
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.end

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  store i64 0, i64* %answer, align 8
  store i64 0, i64* %accumulator, align 8
  %10 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %10, 1
  store i32 %sub, i32* %i, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc19, %for.end
  %11 = load i32, i32* %i, align 4
  %cmp7 = icmp sge i32 %11, 0
  br i1 %cmp7, label %for.body9, label %for.end20

for.body9:                                        ; preds = %for.cond6
  %12 = load i64, i64* %accumulator, align 8
  %13 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds [64 x i64], [64 x i64]* @egyptian_division.doublings, i32 0, i32 %13
  %14 = load i64, i64* %arrayidx10, align 8
  %add = add i64 %12, %14
  %15 = load i64, i64* %dividend.addr, align 8
  %cmp11 = icmp ule i64 %add, %15
  br i1 %cmp11, label %if.then13, label %if.end18

if.then13:                                        ; preds = %for.body9
  %16 = load i32, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds [64 x i64], [64 x i64]* @egyptian_division.doublings, i32 0, i32 %16
  %17 = load i64, i64* %arrayidx14, align 8
  %18 = load i64, i64* %accumulator, align 8
  %add15 = add i64 %18, %17
  store i64 %add15, i64* %accumulator, align 8
  %19 = load i32, i32* %i, align 4
  %arrayidx16 = getelementptr inbounds [64 x i64], [64 x i64]* @egyptian_division.powers, i32 0, i32 %19
  %20 = load i64, i64* %arrayidx16, align 8
  %21 = load i64, i64* %answer, align 8
  %add17 = add i64 %21, %20
  store i64 %add17, i64* %answer, align 8
  br label %if.end18

if.end18:                                         ; preds = %if.then13, %for.body9
  br label %for.inc19

for.inc19:                                        ; preds = %if.end18
  %22 = load i32, i32* %i, align 4
  %dec = add nsw i32 %22, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond6

for.end20:                                        ; preds = %for.cond6
  %23 = load i64*, i64** %remainder.addr, align 4
  %tobool = icmp ne i64* %23, null
  br i1 %tobool, label %if.then21, label %if.end23

if.then21:                                        ; preds = %for.end20
  %24 = load i64, i64* %dividend.addr, align 8
  %25 = load i64, i64* %accumulator, align 8
  %sub22 = sub i64 %24, %25
  %26 = load i64*, i64** %remainder.addr, align 4
  store i64 %sub22, i64* %26, align 8
  br label %if.end23

if.end23:                                         ; preds = %if.then21, %for.end20
  %27 = load i64, i64* %answer, align 8
  ret i64 %27
}

; Function Attrs: noinline nounwind optnone
define hidden void @go(i64 %a, i64 %b) #0 {
entry:
  %a.addr = alloca i64, align 8
  %b.addr = alloca i64, align 8
  %x = alloca i64, align 8
  %y = alloca i64, align 8
  store i64 %a, i64* %a.addr, align 8
  store i64 %b, i64* %b.addr, align 8
  %0 = load i64, i64* %a.addr, align 8
  %1 = load i64, i64* %b.addr, align 8
  %call = call i64 @egyptian_division(i64 %0, i64 %1, i64* %y)
  store i64 %call, i64* %x, align 8
  %2 = load i64, i64* %a.addr, align 8
  %3 = load i64, i64* %b.addr, align 8
  %4 = load i64, i64* %x, align 8
  %5 = load i64, i64* %y, align 8
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str, i32 0, i32 0), i64 %2, i64 %3, i64 %4, i64 %5)
  %6 = load i64, i64* %a.addr, align 8
  %7 = load i64, i64* %b.addr, align 8
  %8 = load i64, i64* %x, align 8
  %mul = mul i64 %7, %8
  %9 = load i64, i64* %y, align 8
  %add = add i64 %mul, %9
  %cmp = icmp eq i64 %6, %add
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  call void @__assert_fail(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2, i32 0, i32 0), i32 44, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__func__.go, i32 0, i32 0)) #3
  unreachable

10:                                               ; No predecessors!
  br label %lor.end

lor.end:                                          ; preds = %10, %entry
  %11 = phi i1 [ true, %entry ], [ false, %10 ]
  %lor.ext = zext i1 %11 to i32
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noreturn
declare void @__assert_fail(i8* %0, i8* %1, i32 %2, i8* %3) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  call void @go(i64 580, i64 32)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i64, i64* %a.addr, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i64, i64* %b.addr, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i64 @egyptian_division(i64 %0, i64 %1, i64* %y)
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i64, i64* %a.addr, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i64, i64* %b.addr, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i64, i64* %x, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i64, i64* %y, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i64, i64* %a.addr, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i64, i64* %b.addr, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i64, i64* %x, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul i64 %7, %8
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = mul %0, %1
infer %2

; *****
; For LLVM instruction:
;  %9 = load i64, i64* %y, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add i64 %mul, %9
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = mul %1, %2
%4:i64 = add %0, %3
infer %4

; *****
; For LLVM instruction:
;  %cmp = icmp eq i64 %6, %add
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = mul %2, %3
%5:i64 = add %1, %4
%6:i1 = eq %0, %5
infer %6

; *****
; For LLVM instruction:
;  %11 = phi i1 [ true, %entry ], [ false, %10 ]
; Looking for a replacement for:
%0 = block 2
%1:i1 = phi %0, 1:i1, 0:i1
infer %1
got 3 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = mul %0, %1
infer %2


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = mul %1, %2
%4:i64 = add %0, %3
infer %4


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i64 = var
%1:i64 = var
%2:i64 = mul %0, %1

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 7 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = var
%4:i64 = mul %2, %3
%5:i64 = add %1, %4
%6:i1 = eq %0, %5
infer %6


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i1 = phi %0, 1:i1, 0:i1
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for go()

; entering Souper's runOnFunction() for main()

; ModuleID = './Egyptian_division.c.bc'
source_filename = "./Egyptian_division.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@egyptian_division.powers = internal global [64 x i64] zeroinitializer, align 16
@egyptian_division.doublings = internal global [64 x i64] zeroinitializer, align 16
@.str = private unnamed_addr constant [35 x i8] c"%llu / %llu = %llu remainder %llu\0A\00", align 1
@.str.1 = private unnamed_addr constant [15 x i8] c"a == b * x + y\00", align 1
@.str.2 = private unnamed_addr constant [22 x i8] c"./Egyptian_division.c\00", align 1
@__func__.go = private unnamed_addr constant [3 x i8] c"go\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i64 @egyptian_division(i64 %dividend, i64 %divisor, i64* %remainder) #0 {
entry:
  %dividend.addr = alloca i64, align 8
  %divisor.addr = alloca i64, align 8
  %remainder.addr = alloca i64*, align 4
  %i = alloca i32, align 4
  %answer = alloca i64, align 8
  %accumulator = alloca i64, align 8
  store i64 %dividend, i64* %dividend.addr, align 8
  store i64 %divisor, i64* %divisor.addr, align 8
  store i64* %remainder, i64** %remainder.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 64
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %shl = shl i32 1, %1
  %conv = sext i32 %shl to i64
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [64 x i64], [64 x i64]* @egyptian_division.powers, i32 0, i32 %2
  store i64 %conv, i64* %arrayidx, align 8
  %3 = load i64, i64* %divisor.addr, align 8
  %4 = load i32, i32* %i, align 4
  %sh_prom = zext i32 %4 to i64
  %shl1 = shl i64 %3, %sh_prom
  %5 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds [64 x i64], [64 x i64]* @egyptian_division.doublings, i32 0, i32 %5
  store i64 %shl1, i64* %arrayidx2, align 8
  %6 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds [64 x i64], [64 x i64]* @egyptian_division.doublings, i32 0, i32 %6
  %7 = load i64, i64* %arrayidx3, align 8
  %8 = load i64, i64* %dividend.addr, align 8
  %cmp4 = icmp ugt i64 %7, %8
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.end

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  store i64 0, i64* %answer, align 8
  store i64 0, i64* %accumulator, align 8
  %10 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %10, 1
  store i32 %sub, i32* %i, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc19, %for.end
  %11 = load i32, i32* %i, align 4
  %cmp7 = icmp sge i32 %11, 0
  br i1 %cmp7, label %for.body9, label %for.end20

for.body9:                                        ; preds = %for.cond6
  %12 = load i64, i64* %accumulator, align 8
  %13 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds [64 x i64], [64 x i64]* @egyptian_division.doublings, i32 0, i32 %13
  %14 = load i64, i64* %arrayidx10, align 8
  %add = add i64 %12, %14
  %15 = load i64, i64* %dividend.addr, align 8
  %cmp11 = icmp ule i64 %add, %15
  br i1 %cmp11, label %if.then13, label %if.end18

if.then13:                                        ; preds = %for.body9
  %16 = load i32, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds [64 x i64], [64 x i64]* @egyptian_division.doublings, i32 0, i32 %16
  %17 = load i64, i64* %arrayidx14, align 8
  %18 = load i64, i64* %accumulator, align 8
  %add15 = add i64 %18, %17
  store i64 %add15, i64* %accumulator, align 8
  %19 = load i32, i32* %i, align 4
  %arrayidx16 = getelementptr inbounds [64 x i64], [64 x i64]* @egyptian_division.powers, i32 0, i32 %19
  %20 = load i64, i64* %arrayidx16, align 8
  %21 = load i64, i64* %answer, align 8
  %add17 = add i64 %21, %20
  store i64 %add17, i64* %answer, align 8
  br label %if.end18

if.end18:                                         ; preds = %if.then13, %for.body9
  br label %for.inc19

for.inc19:                                        ; preds = %if.end18
  %22 = load i32, i32* %i, align 4
  %dec = add nsw i32 %22, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond6

for.end20:                                        ; preds = %for.cond6
  %23 = load i64*, i64** %remainder.addr, align 4
  %tobool = icmp ne i64* %23, null
  br i1 %tobool, label %if.then21, label %if.end23

if.then21:                                        ; preds = %for.end20
  %24 = load i64, i64* %dividend.addr, align 8
  %25 = load i64, i64* %accumulator, align 8
  %sub22 = sub i64 %24, %25
  %26 = load i64*, i64** %remainder.addr, align 4
  store i64 %sub22, i64* %26, align 8
  br label %if.end23

if.end23:                                         ; preds = %if.then21, %for.end20
  %27 = load i64, i64* %answer, align 8
  ret i64 %27
}

; Function Attrs: noinline nounwind optnone
define hidden void @go(i64 %a, i64 %b) #0 {
entry:
  %a.addr = alloca i64, align 8
  %b.addr = alloca i64, align 8
  %x = alloca i64, align 8
  %y = alloca i64, align 8
  store i64 %a, i64* %a.addr, align 8
  store i64 %b, i64* %b.addr, align 8
  %0 = load i64, i64* %a.addr, align 8
  %1 = load i64, i64* %b.addr, align 8
  %call = call i64 @egyptian_division(i64 %0, i64 %1, i64* %y)
  store i64 %call, i64* %x, align 8
  %2 = load i64, i64* %a.addr, align 8
  %3 = load i64, i64* %b.addr, align 8
  %4 = load i64, i64* %x, align 8
  %5 = load i64, i64* %y, align 8
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str, i32 0, i32 0), i64 %2, i64 %3, i64 %4, i64 %5)
  %6 = load i64, i64* %a.addr, align 8
  %7 = load i64, i64* %b.addr, align 8
  %8 = load i64, i64* %x, align 8
  %mul = mul i64 %7, %8
  %9 = load i64, i64* %y, align 8
  %add = add i64 %mul, %9
  %cmp = icmp eq i64 %6, %add
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  call void @__assert_fail(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2, i32 0, i32 0), i32 44, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__func__.go, i32 0, i32 0)) #3
  unreachable

10:                                               ; No predecessors!
  br label %lor.end

lor.end:                                          ; preds = %10, %entry
  %11 = phi i1 [ true, %entry ], [ false, %10 ]
  %lor.ext = zext i1 %11 to i32
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noreturn
declare void @__assert_fail(i8* %0, i8* %1, i32 %2, i8* %3) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  call void @go(i64 580, i64 32)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
