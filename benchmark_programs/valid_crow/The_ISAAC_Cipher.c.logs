
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for isaac()

; ModuleID = './The_ISAAC_Cipher.c.bc'
source_filename = "./The_ISAAC_Cipher.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@cc = internal global i32 0, align 4
@bb = internal global i32 0, align 4
@mm = internal global [256 x i32] zeroinitializer, align 16
@aa = internal global i32 0, align 4
@randrsl = hidden global [256 x i32] zeroinitializer, align 16
@randcnt = hidden global i32 0, align 4
@v = hidden global [4096 x i8] zeroinitializer, align 16
@c = hidden global [4096 x i8] zeroinitializer, align 16
@.str = private unnamed_addr constant [20 x i8] c"a Top Secret secret\00", align 1
@.str.1 = private unnamed_addr constant [22 x i8] c"this is my secret key\00", align 1
@.str.2 = private unnamed_addr constant [13 x i8] c"Message: %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [13 x i8] c"Key    : %s\0A\00", align 1
@.str.4 = private unnamed_addr constant [10 x i8] c"XOR    : \00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"%02X\00", align 1
@.str.6 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.7 = private unnamed_addr constant [13 x i8] c"XOR dcr: %s\0A\00", align 1
@.str.8 = private unnamed_addr constant [10 x i8] c"MOD    : \00", align 1
@.str.9 = private unnamed_addr constant [13 x i8] c"MOD dcr: %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @isaac() #0 {
entry:
  %i = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %0 = load i32, i32* @cc, align 4
  %add = add i32 %0, 1
  store i32 %add, i32* @cc, align 4
  %1 = load i32, i32* @bb, align 4
  %2 = load i32, i32* @cc, align 4
  %add1 = add i32 %1, %2
  store i32 %add1, i32* @bb, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %3, 256
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  store i32 %5, i32* %x, align 4
  %6 = load i32, i32* %i, align 4
  %rem = urem i32 %6, 4
  switch i32 %rem, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb2
    i32 2, label %sw.bb4
    i32 3, label %sw.bb7
  ]

sw.bb:                                            ; preds = %for.body
  %7 = load i32, i32* @aa, align 4
  %8 = load i32, i32* @aa, align 4
  %shl = shl i32 %8, 13
  %xor = xor i32 %7, %shl
  store i32 %xor, i32* @aa, align 4
  br label %sw.epilog

sw.bb2:                                           ; preds = %for.body
  %9 = load i32, i32* @aa, align 4
  %10 = load i32, i32* @aa, align 4
  %shr = lshr i32 %10, 6
  %xor3 = xor i32 %9, %shr
  store i32 %xor3, i32* @aa, align 4
  br label %sw.epilog

sw.bb4:                                           ; preds = %for.body
  %11 = load i32, i32* @aa, align 4
  %12 = load i32, i32* @aa, align 4
  %shl5 = shl i32 %12, 2
  %xor6 = xor i32 %11, %shl5
  store i32 %xor6, i32* @aa, align 4
  br label %sw.epilog

sw.bb7:                                           ; preds = %for.body
  %13 = load i32, i32* @aa, align 4
  %14 = load i32, i32* @aa, align 4
  %shr8 = lshr i32 %14, 16
  %xor9 = xor i32 %13, %shr8
  store i32 %xor9, i32* @aa, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %for.body, %sw.bb7, %sw.bb4, %sw.bb2, %sw.bb
  %15 = load i32, i32* %i, align 4
  %add10 = add i32 %15, 128
  %rem11 = urem i32 %add10, 256
  %arrayidx12 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %rem11
  %16 = load i32, i32* %arrayidx12, align 4
  %17 = load i32, i32* @aa, align 4
  %add13 = add i32 %16, %17
  store i32 %add13, i32* @aa, align 4
  %18 = load i32, i32* %x, align 4
  %shr14 = lshr i32 %18, 2
  %rem15 = urem i32 %shr14, 256
  %arrayidx16 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %rem15
  %19 = load i32, i32* %arrayidx16, align 4
  %20 = load i32, i32* @aa, align 4
  %add17 = add i32 %19, %20
  %21 = load i32, i32* @bb, align 4
  %add18 = add i32 %add17, %21
  store i32 %add18, i32* %y, align 4
  %22 = load i32, i32* %i, align 4
  %arrayidx19 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %22
  store i32 %add18, i32* %arrayidx19, align 4
  %23 = load i32, i32* %y, align 4
  %shr20 = lshr i32 %23, 10
  %rem21 = urem i32 %shr20, 256
  %arrayidx22 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %rem21
  %24 = load i32, i32* %arrayidx22, align 4
  %25 = load i32, i32* %x, align 4
  %add23 = add i32 %24, %25
  store i32 %add23, i32* @bb, align 4
  %26 = load i32, i32* %i, align 4
  %arrayidx24 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %26
  store i32 %add23, i32* %arrayidx24, align 4
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %27 = load i32, i32* %i, align 4
  %inc = add i32 %27, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* @randcnt, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @randinit(i32 %flag) #0 {
entry:
  %flag.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %c = alloca i32, align 4
  %d = alloca i32, align 4
  %e = alloca i32, align 4
  %f = alloca i32, align 4
  %g = alloca i32, align 4
  %h = alloca i32, align 4
  store i32 %flag, i32* %flag.addr, align 4
  store i32 0, i32* @cc, align 4
  store i32 0, i32* @bb, align 4
  store i32 0, i32* @aa, align 4
  store i32 -1640531527, i32* %h, align 4
  store i32 -1640531527, i32* %g, align 4
  store i32 -1640531527, i32* %f, align 4
  store i32 -1640531527, i32* %e, align 4
  store i32 -1640531527, i32* %d, align 4
  store i32 -1640531527, i32* %c, align 4
  store i32 -1640531527, i32* %b, align 4
  store i32 -1640531527, i32* %a, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %b, align 4
  %shl = shl i32 %1, 11
  %2 = load i32, i32* %a, align 4
  %xor = xor i32 %2, %shl
  store i32 %xor, i32* %a, align 4
  %3 = load i32, i32* %a, align 4
  %4 = load i32, i32* %d, align 4
  %add = add i32 %4, %3
  store i32 %add, i32* %d, align 4
  %5 = load i32, i32* %c, align 4
  %6 = load i32, i32* %b, align 4
  %add1 = add i32 %6, %5
  store i32 %add1, i32* %b, align 4
  %7 = load i32, i32* %c, align 4
  %shr = lshr i32 %7, 2
  %8 = load i32, i32* %b, align 4
  %xor2 = xor i32 %8, %shr
  store i32 %xor2, i32* %b, align 4
  %9 = load i32, i32* %b, align 4
  %10 = load i32, i32* %e, align 4
  %add3 = add i32 %10, %9
  store i32 %add3, i32* %e, align 4
  %11 = load i32, i32* %d, align 4
  %12 = load i32, i32* %c, align 4
  %add4 = add i32 %12, %11
  store i32 %add4, i32* %c, align 4
  %13 = load i32, i32* %d, align 4
  %shl5 = shl i32 %13, 8
  %14 = load i32, i32* %c, align 4
  %xor6 = xor i32 %14, %shl5
  store i32 %xor6, i32* %c, align 4
  %15 = load i32, i32* %c, align 4
  %16 = load i32, i32* %f, align 4
  %add7 = add i32 %16, %15
  store i32 %add7, i32* %f, align 4
  %17 = load i32, i32* %e, align 4
  %18 = load i32, i32* %d, align 4
  %add8 = add i32 %18, %17
  store i32 %add8, i32* %d, align 4
  %19 = load i32, i32* %e, align 4
  %shr9 = lshr i32 %19, 16
  %20 = load i32, i32* %d, align 4
  %xor10 = xor i32 %20, %shr9
  store i32 %xor10, i32* %d, align 4
  %21 = load i32, i32* %d, align 4
  %22 = load i32, i32* %g, align 4
  %add11 = add i32 %22, %21
  store i32 %add11, i32* %g, align 4
  %23 = load i32, i32* %f, align 4
  %24 = load i32, i32* %e, align 4
  %add12 = add i32 %24, %23
  store i32 %add12, i32* %e, align 4
  %25 = load i32, i32* %f, align 4
  %shl13 = shl i32 %25, 10
  %26 = load i32, i32* %e, align 4
  %xor14 = xor i32 %26, %shl13
  store i32 %xor14, i32* %e, align 4
  %27 = load i32, i32* %e, align 4
  %28 = load i32, i32* %h, align 4
  %add15 = add i32 %28, %27
  store i32 %add15, i32* %h, align 4
  %29 = load i32, i32* %g, align 4
  %30 = load i32, i32* %f, align 4
  %add16 = add i32 %30, %29
  store i32 %add16, i32* %f, align 4
  %31 = load i32, i32* %g, align 4
  %shr17 = lshr i32 %31, 4
  %32 = load i32, i32* %f, align 4
  %xor18 = xor i32 %32, %shr17
  store i32 %xor18, i32* %f, align 4
  %33 = load i32, i32* %f, align 4
  %34 = load i32, i32* %a, align 4
  %add19 = add i32 %34, %33
  store i32 %add19, i32* %a, align 4
  %35 = load i32, i32* %h, align 4
  %36 = load i32, i32* %g, align 4
  %add20 = add i32 %36, %35
  store i32 %add20, i32* %g, align 4
  %37 = load i32, i32* %h, align 4
  %shl21 = shl i32 %37, 8
  %38 = load i32, i32* %g, align 4
  %xor22 = xor i32 %38, %shl21
  store i32 %xor22, i32* %g, align 4
  %39 = load i32, i32* %g, align 4
  %40 = load i32, i32* %b, align 4
  %add23 = add i32 %40, %39
  store i32 %add23, i32* %b, align 4
  %41 = load i32, i32* %a, align 4
  %42 = load i32, i32* %h, align 4
  %add24 = add i32 %42, %41
  store i32 %add24, i32* %h, align 4
  %43 = load i32, i32* %a, align 4
  %shr25 = lshr i32 %43, 9
  %44 = load i32, i32* %h, align 4
  %xor26 = xor i32 %44, %shr25
  store i32 %xor26, i32* %h, align 4
  %45 = load i32, i32* %h, align 4
  %46 = load i32, i32* %c, align 4
  %add27 = add i32 %46, %45
  store i32 %add27, i32* %c, align 4
  %47 = load i32, i32* %b, align 4
  %48 = load i32, i32* %a, align 4
  %add28 = add i32 %48, %47
  store i32 %add28, i32* %a, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %49 = load i32, i32* %i, align 4
  %inc = add nsw i32 %49, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond29

for.cond29:                                       ; preds = %for.inc101, %for.end
  %50 = load i32, i32* %i, align 4
  %cmp30 = icmp slt i32 %50, 256
  br i1 %cmp30, label %for.body31, label %for.end103

for.body31:                                       ; preds = %for.cond29
  %51 = load i32, i32* %flag.addr, align 4
  %tobool = icmp ne i32 %51, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body31
  %52 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %52
  %53 = load i32, i32* %arrayidx, align 4
  %54 = load i32, i32* %a, align 4
  %add32 = add i32 %54, %53
  store i32 %add32, i32* %a, align 4
  %55 = load i32, i32* %i, align 4
  %add33 = add nsw i32 %55, 1
  %arrayidx34 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %add33
  %56 = load i32, i32* %arrayidx34, align 4
  %57 = load i32, i32* %b, align 4
  %add35 = add i32 %57, %56
  store i32 %add35, i32* %b, align 4
  %58 = load i32, i32* %i, align 4
  %add36 = add nsw i32 %58, 2
  %arrayidx37 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %add36
  %59 = load i32, i32* %arrayidx37, align 4
  %60 = load i32, i32* %c, align 4
  %add38 = add i32 %60, %59
  store i32 %add38, i32* %c, align 4
  %61 = load i32, i32* %i, align 4
  %add39 = add nsw i32 %61, 3
  %arrayidx40 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %add39
  %62 = load i32, i32* %arrayidx40, align 4
  %63 = load i32, i32* %d, align 4
  %add41 = add i32 %63, %62
  store i32 %add41, i32* %d, align 4
  %64 = load i32, i32* %i, align 4
  %add42 = add nsw i32 %64, 4
  %arrayidx43 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %add42
  %65 = load i32, i32* %arrayidx43, align 4
  %66 = load i32, i32* %e, align 4
  %add44 = add i32 %66, %65
  store i32 %add44, i32* %e, align 4
  %67 = load i32, i32* %i, align 4
  %add45 = add nsw i32 %67, 5
  %arrayidx46 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %add45
  %68 = load i32, i32* %arrayidx46, align 4
  %69 = load i32, i32* %f, align 4
  %add47 = add i32 %69, %68
  store i32 %add47, i32* %f, align 4
  %70 = load i32, i32* %i, align 4
  %add48 = add nsw i32 %70, 6
  %arrayidx49 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %add48
  %71 = load i32, i32* %arrayidx49, align 4
  %72 = load i32, i32* %g, align 4
  %add50 = add i32 %72, %71
  store i32 %add50, i32* %g, align 4
  %73 = load i32, i32* %i, align 4
  %add51 = add nsw i32 %73, 7
  %arrayidx52 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %add51
  %74 = load i32, i32* %arrayidx52, align 4
  %75 = load i32, i32* %h, align 4
  %add53 = add i32 %75, %74
  store i32 %add53, i32* %h, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body31
  %76 = load i32, i32* %b, align 4
  %shl54 = shl i32 %76, 11
  %77 = load i32, i32* %a, align 4
  %xor55 = xor i32 %77, %shl54
  store i32 %xor55, i32* %a, align 4
  %78 = load i32, i32* %a, align 4
  %79 = load i32, i32* %d, align 4
  %add56 = add i32 %79, %78
  store i32 %add56, i32* %d, align 4
  %80 = load i32, i32* %c, align 4
  %81 = load i32, i32* %b, align 4
  %add57 = add i32 %81, %80
  store i32 %add57, i32* %b, align 4
  %82 = load i32, i32* %c, align 4
  %shr58 = lshr i32 %82, 2
  %83 = load i32, i32* %b, align 4
  %xor59 = xor i32 %83, %shr58
  store i32 %xor59, i32* %b, align 4
  %84 = load i32, i32* %b, align 4
  %85 = load i32, i32* %e, align 4
  %add60 = add i32 %85, %84
  store i32 %add60, i32* %e, align 4
  %86 = load i32, i32* %d, align 4
  %87 = load i32, i32* %c, align 4
  %add61 = add i32 %87, %86
  store i32 %add61, i32* %c, align 4
  %88 = load i32, i32* %d, align 4
  %shl62 = shl i32 %88, 8
  %89 = load i32, i32* %c, align 4
  %xor63 = xor i32 %89, %shl62
  store i32 %xor63, i32* %c, align 4
  %90 = load i32, i32* %c, align 4
  %91 = load i32, i32* %f, align 4
  %add64 = add i32 %91, %90
  store i32 %add64, i32* %f, align 4
  %92 = load i32, i32* %e, align 4
  %93 = load i32, i32* %d, align 4
  %add65 = add i32 %93, %92
  store i32 %add65, i32* %d, align 4
  %94 = load i32, i32* %e, align 4
  %shr66 = lshr i32 %94, 16
  %95 = load i32, i32* %d, align 4
  %xor67 = xor i32 %95, %shr66
  store i32 %xor67, i32* %d, align 4
  %96 = load i32, i32* %d, align 4
  %97 = load i32, i32* %g, align 4
  %add68 = add i32 %97, %96
  store i32 %add68, i32* %g, align 4
  %98 = load i32, i32* %f, align 4
  %99 = load i32, i32* %e, align 4
  %add69 = add i32 %99, %98
  store i32 %add69, i32* %e, align 4
  %100 = load i32, i32* %f, align 4
  %shl70 = shl i32 %100, 10
  %101 = load i32, i32* %e, align 4
  %xor71 = xor i32 %101, %shl70
  store i32 %xor71, i32* %e, align 4
  %102 = load i32, i32* %e, align 4
  %103 = load i32, i32* %h, align 4
  %add72 = add i32 %103, %102
  store i32 %add72, i32* %h, align 4
  %104 = load i32, i32* %g, align 4
  %105 = load i32, i32* %f, align 4
  %add73 = add i32 %105, %104
  store i32 %add73, i32* %f, align 4
  %106 = load i32, i32* %g, align 4
  %shr74 = lshr i32 %106, 4
  %107 = load i32, i32* %f, align 4
  %xor75 = xor i32 %107, %shr74
  store i32 %xor75, i32* %f, align 4
  %108 = load i32, i32* %f, align 4
  %109 = load i32, i32* %a, align 4
  %add76 = add i32 %109, %108
  store i32 %add76, i32* %a, align 4
  %110 = load i32, i32* %h, align 4
  %111 = load i32, i32* %g, align 4
  %add77 = add i32 %111, %110
  store i32 %add77, i32* %g, align 4
  %112 = load i32, i32* %h, align 4
  %shl78 = shl i32 %112, 8
  %113 = load i32, i32* %g, align 4
  %xor79 = xor i32 %113, %shl78
  store i32 %xor79, i32* %g, align 4
  %114 = load i32, i32* %g, align 4
  %115 = load i32, i32* %b, align 4
  %add80 = add i32 %115, %114
  store i32 %add80, i32* %b, align 4
  %116 = load i32, i32* %a, align 4
  %117 = load i32, i32* %h, align 4
  %add81 = add i32 %117, %116
  store i32 %add81, i32* %h, align 4
  %118 = load i32, i32* %a, align 4
  %shr82 = lshr i32 %118, 9
  %119 = load i32, i32* %h, align 4
  %xor83 = xor i32 %119, %shr82
  store i32 %xor83, i32* %h, align 4
  %120 = load i32, i32* %h, align 4
  %121 = load i32, i32* %c, align 4
  %add84 = add i32 %121, %120
  store i32 %add84, i32* %c, align 4
  %122 = load i32, i32* %b, align 4
  %123 = load i32, i32* %a, align 4
  %add85 = add i32 %123, %122
  store i32 %add85, i32* %a, align 4
  %124 = load i32, i32* %a, align 4
  %125 = load i32, i32* %i, align 4
  %arrayidx86 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %125
  store i32 %124, i32* %arrayidx86, align 4
  %126 = load i32, i32* %b, align 4
  %127 = load i32, i32* %i, align 4
  %add87 = add nsw i32 %127, 1
  %arrayidx88 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add87
  store i32 %126, i32* %arrayidx88, align 4
  %128 = load i32, i32* %c, align 4
  %129 = load i32, i32* %i, align 4
  %add89 = add nsw i32 %129, 2
  %arrayidx90 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add89
  store i32 %128, i32* %arrayidx90, align 4
  %130 = load i32, i32* %d, align 4
  %131 = load i32, i32* %i, align 4
  %add91 = add nsw i32 %131, 3
  %arrayidx92 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add91
  store i32 %130, i32* %arrayidx92, align 4
  %132 = load i32, i32* %e, align 4
  %133 = load i32, i32* %i, align 4
  %add93 = add nsw i32 %133, 4
  %arrayidx94 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add93
  store i32 %132, i32* %arrayidx94, align 4
  %134 = load i32, i32* %f, align 4
  %135 = load i32, i32* %i, align 4
  %add95 = add nsw i32 %135, 5
  %arrayidx96 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add95
  store i32 %134, i32* %arrayidx96, align 4
  %136 = load i32, i32* %g, align 4
  %137 = load i32, i32* %i, align 4
  %add97 = add nsw i32 %137, 6
  %arrayidx98 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add97
  store i32 %136, i32* %arrayidx98, align 4
  %138 = load i32, i32* %h, align 4
  %139 = load i32, i32* %i, align 4
  %add99 = add nsw i32 %139, 7
  %arrayidx100 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add99
  store i32 %138, i32* %arrayidx100, align 4
  br label %for.inc101

for.inc101:                                       ; preds = %if.end
  %140 = load i32, i32* %i, align 4
  %add102 = add nsw i32 %140, 8
  store i32 %add102, i32* %i, align 4
  br label %for.cond29

for.end103:                                       ; preds = %for.cond29
  %141 = load i32, i32* %flag.addr, align 4
  %tobool104 = icmp ne i32 %141, 0
  br i1 %tobool104, label %if.then105, label %if.end182

if.then105:                                       ; preds = %for.end103
  store i32 0, i32* %i, align 4
  br label %for.cond106

for.cond106:                                      ; preds = %for.inc179, %if.then105
  %142 = load i32, i32* %i, align 4
  %cmp107 = icmp slt i32 %142, 256
  br i1 %cmp107, label %for.body108, label %for.end181

for.body108:                                      ; preds = %for.cond106
  %143 = load i32, i32* %i, align 4
  %arrayidx109 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %143
  %144 = load i32, i32* %arrayidx109, align 4
  %145 = load i32, i32* %a, align 4
  %add110 = add i32 %145, %144
  store i32 %add110, i32* %a, align 4
  %146 = load i32, i32* %i, align 4
  %add111 = add nsw i32 %146, 1
  %arrayidx112 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add111
  %147 = load i32, i32* %arrayidx112, align 4
  %148 = load i32, i32* %b, align 4
  %add113 = add i32 %148, %147
  store i32 %add113, i32* %b, align 4
  %149 = load i32, i32* %i, align 4
  %add114 = add nsw i32 %149, 2
  %arrayidx115 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add114
  %150 = load i32, i32* %arrayidx115, align 4
  %151 = load i32, i32* %c, align 4
  %add116 = add i32 %151, %150
  store i32 %add116, i32* %c, align 4
  %152 = load i32, i32* %i, align 4
  %add117 = add nsw i32 %152, 3
  %arrayidx118 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add117
  %153 = load i32, i32* %arrayidx118, align 4
  %154 = load i32, i32* %d, align 4
  %add119 = add i32 %154, %153
  store i32 %add119, i32* %d, align 4
  %155 = load i32, i32* %i, align 4
  %add120 = add nsw i32 %155, 4
  %arrayidx121 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add120
  %156 = load i32, i32* %arrayidx121, align 4
  %157 = load i32, i32* %e, align 4
  %add122 = add i32 %157, %156
  store i32 %add122, i32* %e, align 4
  %158 = load i32, i32* %i, align 4
  %add123 = add nsw i32 %158, 5
  %arrayidx124 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add123
  %159 = load i32, i32* %arrayidx124, align 4
  %160 = load i32, i32* %f, align 4
  %add125 = add i32 %160, %159
  store i32 %add125, i32* %f, align 4
  %161 = load i32, i32* %i, align 4
  %add126 = add nsw i32 %161, 6
  %arrayidx127 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add126
  %162 = load i32, i32* %arrayidx127, align 4
  %163 = load i32, i32* %g, align 4
  %add128 = add i32 %163, %162
  store i32 %add128, i32* %g, align 4
  %164 = load i32, i32* %i, align 4
  %add129 = add nsw i32 %164, 7
  %arrayidx130 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add129
  %165 = load i32, i32* %arrayidx130, align 4
  %166 = load i32, i32* %h, align 4
  %add131 = add i32 %166, %165
  store i32 %add131, i32* %h, align 4
  %167 = load i32, i32* %b, align 4
  %shl132 = shl i32 %167, 11
  %168 = load i32, i32* %a, align 4
  %xor133 = xor i32 %168, %shl132
  store i32 %xor133, i32* %a, align 4
  %169 = load i32, i32* %a, align 4
  %170 = load i32, i32* %d, align 4
  %add134 = add i32 %170, %169
  store i32 %add134, i32* %d, align 4
  %171 = load i32, i32* %c, align 4
  %172 = load i32, i32* %b, align 4
  %add135 = add i32 %172, %171
  store i32 %add135, i32* %b, align 4
  %173 = load i32, i32* %c, align 4
  %shr136 = lshr i32 %173, 2
  %174 = load i32, i32* %b, align 4
  %xor137 = xor i32 %174, %shr136
  store i32 %xor137, i32* %b, align 4
  %175 = load i32, i32* %b, align 4
  %176 = load i32, i32* %e, align 4
  %add138 = add i32 %176, %175
  store i32 %add138, i32* %e, align 4
  %177 = load i32, i32* %d, align 4
  %178 = load i32, i32* %c, align 4
  %add139 = add i32 %178, %177
  store i32 %add139, i32* %c, align 4
  %179 = load i32, i32* %d, align 4
  %shl140 = shl i32 %179, 8
  %180 = load i32, i32* %c, align 4
  %xor141 = xor i32 %180, %shl140
  store i32 %xor141, i32* %c, align 4
  %181 = load i32, i32* %c, align 4
  %182 = load i32, i32* %f, align 4
  %add142 = add i32 %182, %181
  store i32 %add142, i32* %f, align 4
  %183 = load i32, i32* %e, align 4
  %184 = load i32, i32* %d, align 4
  %add143 = add i32 %184, %183
  store i32 %add143, i32* %d, align 4
  %185 = load i32, i32* %e, align 4
  %shr144 = lshr i32 %185, 16
  %186 = load i32, i32* %d, align 4
  %xor145 = xor i32 %186, %shr144
  store i32 %xor145, i32* %d, align 4
  %187 = load i32, i32* %d, align 4
  %188 = load i32, i32* %g, align 4
  %add146 = add i32 %188, %187
  store i32 %add146, i32* %g, align 4
  %189 = load i32, i32* %f, align 4
  %190 = load i32, i32* %e, align 4
  %add147 = add i32 %190, %189
  store i32 %add147, i32* %e, align 4
  %191 = load i32, i32* %f, align 4
  %shl148 = shl i32 %191, 10
  %192 = load i32, i32* %e, align 4
  %xor149 = xor i32 %192, %shl148
  store i32 %xor149, i32* %e, align 4
  %193 = load i32, i32* %e, align 4
  %194 = load i32, i32* %h, align 4
  %add150 = add i32 %194, %193
  store i32 %add150, i32* %h, align 4
  %195 = load i32, i32* %g, align 4
  %196 = load i32, i32* %f, align 4
  %add151 = add i32 %196, %195
  store i32 %add151, i32* %f, align 4
  %197 = load i32, i32* %g, align 4
  %shr152 = lshr i32 %197, 4
  %198 = load i32, i32* %f, align 4
  %xor153 = xor i32 %198, %shr152
  store i32 %xor153, i32* %f, align 4
  %199 = load i32, i32* %f, align 4
  %200 = load i32, i32* %a, align 4
  %add154 = add i32 %200, %199
  store i32 %add154, i32* %a, align 4
  %201 = load i32, i32* %h, align 4
  %202 = load i32, i32* %g, align 4
  %add155 = add i32 %202, %201
  store i32 %add155, i32* %g, align 4
  %203 = load i32, i32* %h, align 4
  %shl156 = shl i32 %203, 8
  %204 = load i32, i32* %g, align 4
  %xor157 = xor i32 %204, %shl156
  store i32 %xor157, i32* %g, align 4
  %205 = load i32, i32* %g, align 4
  %206 = load i32, i32* %b, align 4
  %add158 = add i32 %206, %205
  store i32 %add158, i32* %b, align 4
  %207 = load i32, i32* %a, align 4
  %208 = load i32, i32* %h, align 4
  %add159 = add i32 %208, %207
  store i32 %add159, i32* %h, align 4
  %209 = load i32, i32* %a, align 4
  %shr160 = lshr i32 %209, 9
  %210 = load i32, i32* %h, align 4
  %xor161 = xor i32 %210, %shr160
  store i32 %xor161, i32* %h, align 4
  %211 = load i32, i32* %h, align 4
  %212 = load i32, i32* %c, align 4
  %add162 = add i32 %212, %211
  store i32 %add162, i32* %c, align 4
  %213 = load i32, i32* %b, align 4
  %214 = load i32, i32* %a, align 4
  %add163 = add i32 %214, %213
  store i32 %add163, i32* %a, align 4
  %215 = load i32, i32* %a, align 4
  %216 = load i32, i32* %i, align 4
  %arrayidx164 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %216
  store i32 %215, i32* %arrayidx164, align 4
  %217 = load i32, i32* %b, align 4
  %218 = load i32, i32* %i, align 4
  %add165 = add nsw i32 %218, 1
  %arrayidx166 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add165
  store i32 %217, i32* %arrayidx166, align 4
  %219 = load i32, i32* %c, align 4
  %220 = load i32, i32* %i, align 4
  %add167 = add nsw i32 %220, 2
  %arrayidx168 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add167
  store i32 %219, i32* %arrayidx168, align 4
  %221 = load i32, i32* %d, align 4
  %222 = load i32, i32* %i, align 4
  %add169 = add nsw i32 %222, 3
  %arrayidx170 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add169
  store i32 %221, i32* %arrayidx170, align 4
  %223 = load i32, i32* %e, align 4
  %224 = load i32, i32* %i, align 4
  %add171 = add nsw i32 %224, 4
  %arrayidx172 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add171
  store i32 %223, i32* %arrayidx172, align 4
  %225 = load i32, i32* %f, align 4
  %226 = load i32, i32* %i, align 4
  %add173 = add nsw i32 %226, 5
  %arrayidx174 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add173
  store i32 %225, i32* %arrayidx174, align 4
  %227 = load i32, i32* %g, align 4
  %228 = load i32, i32* %i, align 4
  %add175 = add nsw i32 %228, 6
  %arrayidx176 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add175
  store i32 %227, i32* %arrayidx176, align 4
  %229 = load i32, i32* %h, align 4
  %230 = load i32, i32* %i, align 4
  %add177 = add nsw i32 %230, 7
  %arrayidx178 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add177
  store i32 %229, i32* %arrayidx178, align 4
  br label %for.inc179

for.inc179:                                       ; preds = %for.body108
  %231 = load i32, i32* %i, align 4
  %add180 = add nsw i32 %231, 8
  store i32 %add180, i32* %i, align 4
  br label %for.cond106

for.end181:                                       ; preds = %for.cond106
  br label %if.end182

if.end182:                                        ; preds = %for.end181, %for.end103
  call void @isaac()
  store i32 0, i32* @randcnt, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @iRandom() #0 {
entry:
  %r = alloca i32, align 4
  %0 = load i32, i32* @randcnt, align 4
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %0
  %1 = load i32, i32* %arrayidx, align 4
  store i32 %1, i32* %r, align 4
  %2 = load i32, i32* @randcnt, align 4
  %inc = add i32 %2, 1
  store i32 %inc, i32* @randcnt, align 4
  %3 = load i32, i32* @randcnt, align 4
  %cmp = icmp ugt i32 %3, 255
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @isaac()
  store i32 0, i32* @randcnt, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* %r, align 4
  ret i32 %4
}

; Function Attrs: noinline nounwind optnone
define hidden signext i8 @iRandA() #0 {
entry:
  %call = call i32 @iRandom()
  %rem = urem i32 %call, 95
  %add = add i32 %rem, 32
  %conv = trunc i32 %add to i8
  ret i8 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden void @iSeed(i8* %seed, i32 %flag) #0 {
entry:
  %seed.addr = alloca i8*, align 4
  %flag.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %m = alloca i32, align 4
  store i8* %seed, i8** %seed.addr, align 4
  store i32 %flag, i32* %flag.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %0, 256
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %1
  store i32 0, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %i, align 4
  %inc = add i32 %2, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %3 = load i8*, i8** %seed.addr, align 4
  %call = call i32 @strlen(i8* %3) #4
  store i32 %call, i32* %m, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc8, %for.end
  %4 = load i32, i32* %i, align 4
  %cmp2 = icmp ult i32 %4, 256
  br i1 %cmp2, label %for.body3, label %for.end10

for.body3:                                        ; preds = %for.cond1
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %m, align 4
  %cmp4 = icmp ugt i32 %5, %6
  br i1 %cmp4, label %if.then, label %if.else

if.then:                                          ; preds = %for.body3
  %7 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %7
  store i32 0, i32* %arrayidx5, align 4
  br label %if.end

if.else:                                          ; preds = %for.body3
  %8 = load i8*, i8** %seed.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds i8, i8* %8, i32 %9
  %10 = load i8, i8* %arrayidx6, align 1
  %conv = sext i8 %10 to i32
  %11 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %11
  store i32 %conv, i32* %arrayidx7, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc8

for.inc8:                                         ; preds = %if.end
  %12 = load i32, i32* %i, align 4
  %inc9 = add i32 %12, 1
  store i32 %inc9, i32* %i, align 4
  br label %for.cond1

for.end10:                                        ; preds = %for.cond1
  %13 = load i32, i32* %flag.addr, align 4
  call void @randinit(i32 %13)
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i8* @Vernam(i8* %msg) #0 {
entry:
  %msg.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %l = alloca i32, align 4
  store i8* %msg, i8** %msg.addr, align 4
  %0 = load i8*, i8** %msg.addr, align 4
  %call = call i32 @strlen(i8* %0) #4
  store i32 %call, i32* %l, align 4
  %1 = load i32, i32* %l, align 4
  %add = add i32 %1, 1
  call void @llvm.memset.p0i8.i32(i8* align 16 getelementptr inbounds ([4096 x i8], [4096 x i8]* @v, i32 0, i32 0), i8 0, i32 %add, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %l, align 4
  %cmp = icmp ult i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call1 = call signext i8 @iRandA()
  %conv = sext i8 %call1 to i32
  %4 = load i8*, i8** %msg.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %4, i32 %5
  %6 = load i8, i8* %arrayidx, align 1
  %conv2 = sext i8 %6 to i32
  %xor = xor i32 %conv, %conv2
  %conv3 = trunc i32 %xor to i8
  %7 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds [4096 x i8], [4096 x i8]* @v, i32 0, i32 %7
  store i8 %conv3, i8* %arrayidx4, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %inc = add i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i8* getelementptr inbounds ([4096 x i8], [4096 x i8]* @v, i32 0, i32 0)
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define hidden signext i8 @Caesar(i32 %m, i8 signext %ch, i8 signext %shift, i8 signext %modulo, i8 signext %start) #0 {
entry:
  %m.addr = alloca i32, align 4
  %ch.addr = alloca i8, align 1
  %shift.addr = alloca i8, align 1
  %modulo.addr = alloca i8, align 1
  %start.addr = alloca i8, align 1
  %n = alloca i32, align 4
  store i32 %m, i32* %m.addr, align 4
  store i8 %ch, i8* %ch.addr, align 1
  store i8 %shift, i8* %shift.addr, align 1
  store i8 %modulo, i8* %modulo.addr, align 1
  store i8 %start, i8* %start.addr, align 1
  %0 = load i32, i32* %m.addr, align 4
  %cmp = icmp eq i32 %0, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i8, i8* %shift.addr, align 1
  %conv = sext i8 %1 to i32
  %sub = sub nsw i32 0, %conv
  %conv1 = trunc i32 %sub to i8
  store i8 %conv1, i8* %shift.addr, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i8, i8* %ch.addr, align 1
  %conv2 = sext i8 %2 to i32
  %3 = load i8, i8* %start.addr, align 1
  %conv3 = sext i8 %3 to i32
  %sub4 = sub nsw i32 %conv2, %conv3
  %4 = load i8, i8* %shift.addr, align 1
  %conv5 = sext i8 %4 to i32
  %add = add nsw i32 %sub4, %conv5
  store i32 %add, i32* %n, align 4
  %5 = load i32, i32* %n, align 4
  %6 = load i8, i8* %modulo.addr, align 1
  %conv6 = sext i8 %6 to i32
  %rem = srem i32 %5, %conv6
  store i32 %rem, i32* %n, align 4
  %7 = load i32, i32* %n, align 4
  %cmp7 = icmp slt i32 %7, 0
  br i1 %cmp7, label %if.then9, label %if.end12

if.then9:                                         ; preds = %if.end
  %8 = load i8, i8* %modulo.addr, align 1
  %conv10 = sext i8 %8 to i32
  %9 = load i32, i32* %n, align 4
  %add11 = add nsw i32 %9, %conv10
  store i32 %add11, i32* %n, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then9, %if.end
  %10 = load i8, i8* %start.addr, align 1
  %conv13 = sext i8 %10 to i32
  %11 = load i32, i32* %n, align 4
  %add14 = add nsw i32 %conv13, %11
  %conv15 = trunc i32 %add14 to i8
  ret i8 %conv15
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @CaesarStr(i32 %m, i8* %msg, i8 signext %modulo, i8 signext %start) #0 {
entry:
  %m.addr = alloca i32, align 4
  %msg.addr = alloca i8*, align 4
  %modulo.addr = alloca i8, align 1
  %start.addr = alloca i8, align 1
  %i = alloca i32, align 4
  %l = alloca i32, align 4
  store i32 %m, i32* %m.addr, align 4
  store i8* %msg, i8** %msg.addr, align 4
  store i8 %modulo, i8* %modulo.addr, align 1
  store i8 %start, i8* %start.addr, align 1
  %0 = load i8*, i8** %msg.addr, align 4
  %call = call i32 @strlen(i8* %0) #4
  store i32 %call, i32* %l, align 4
  %1 = load i32, i32* %l, align 4
  %add = add i32 %1, 1
  call void @llvm.memset.p0i8.i32(i8* align 16 getelementptr inbounds ([4096 x i8], [4096 x i8]* @c, i32 0, i32 0), i8 0, i32 %add, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %l, align 4
  %cmp = icmp ult i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %m.addr, align 4
  %5 = load i8*, i8** %msg.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %5, i32 %6
  %7 = load i8, i8* %arrayidx, align 1
  %call1 = call signext i8 @iRandA()
  %8 = load i8, i8* %modulo.addr, align 1
  %9 = load i8, i8* %start.addr, align 1
  %call2 = call signext i8 @Caesar(i32 %4, i8 signext %7, i8 signext %call1, i8 signext %8, i8 signext %9)
  %10 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds [4096 x i8], [4096 x i8]* @c, i32 0, i32 %10
  store i8 %call2, i8* %arrayidx3, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i8* getelementptr inbounds ([4096 x i8], [4096 x i8]* @c, i32 0, i32 0)
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %n = alloca i32, align 4
  %l = alloca i32, align 4
  %msg = alloca i8*, align 4
  %key = alloca i8*, align 4
  %vctx = alloca [4096 x i8], align 16
  %vptx = alloca [4096 x i8], align 16
  %cctx = alloca [4096 x i8], align 16
  %cptx = alloca [4096 x i8], align 16
  store i32 0, i32* %retval, align 4
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i32 0, i32 0), i8** %msg, align 4
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i32 0, i32 0), i8** %key, align 4
  %0 = load i8*, i8** %msg, align 4
  %call = call i32 @strlen(i8* %0) #4
  store i32 %call, i32* %l, align 4
  %1 = load i8*, i8** %key, align 4
  call void @iSeed(i8* %1, i32 1)
  %arraydecay = getelementptr inbounds [4096 x i8], [4096 x i8]* %vctx, i32 0, i32 0
  %2 = load i8*, i8** %msg, align 4
  %call1 = call i8* @Vernam(i8* %2)
  %call2 = call i8* @strcpy(i8* %arraydecay, i8* %call1)
  %arraydecay3 = getelementptr inbounds [4096 x i8], [4096 x i8]* %cctx, i32 0, i32 0
  %3 = load i8*, i8** %msg, align 4
  %call4 = call i8* @CaesarStr(i32 0, i8* %3, i8 signext 95, i8 signext 32)
  %call5 = call i8* @strcpy(i8* %arraydecay3, i8* %call4)
  %4 = load i8*, i8** %key, align 4
  call void @iSeed(i8* %4, i32 1)
  %arraydecay6 = getelementptr inbounds [4096 x i8], [4096 x i8]* %vptx, i32 0, i32 0
  %arraydecay7 = getelementptr inbounds [4096 x i8], [4096 x i8]* %vctx, i32 0, i32 0
  %call8 = call i8* @Vernam(i8* %arraydecay7)
  %call9 = call i8* @strcpy(i8* %arraydecay6, i8* %call8)
  %arraydecay10 = getelementptr inbounds [4096 x i8], [4096 x i8]* %cptx, i32 0, i32 0
  %arraydecay11 = getelementptr inbounds [4096 x i8], [4096 x i8]* %cctx, i32 0, i32 0
  %call12 = call i8* @CaesarStr(i32 1, i8* %arraydecay11, i8 signext 95, i8 signext 32)
  %call13 = call i8* @strcpy(i8* %arraydecay10, i8* %call12)
  %5 = load i8*, i8** %msg, align 4
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i32 0, i32 0), i8* %5)
  %6 = load i8*, i8** %key, align 4
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3, i32 0, i32 0), i8* %6)
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i32 0, i32 0))
  store i32 0, i32* %n, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %7 = load i32, i32* %n, align 4
  %8 = load i32, i32* %l, align 4
  %cmp = icmp ult i32 %7, %8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i32, i32* %n, align 4
  %arrayidx = getelementptr inbounds [4096 x i8], [4096 x i8]* %vctx, i32 0, i32 %9
  %10 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %10 to i32
  %call17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i32 %conv)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %n, align 4
  %inc = add i32 %11, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i32 0, i32 0))
  %arraydecay19 = getelementptr inbounds [4096 x i8], [4096 x i8]* %vptx, i32 0, i32 0
  %call20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7, i32 0, i32 0), i8* %arraydecay19)
  %call21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8, i32 0, i32 0))
  store i32 0, i32* %n, align 4
  br label %for.cond22

for.cond22:                                       ; preds = %for.inc29, %for.end
  %12 = load i32, i32* %n, align 4
  %13 = load i32, i32* %l, align 4
  %cmp23 = icmp ult i32 %12, %13
  br i1 %cmp23, label %for.body25, label %for.end31

for.body25:                                       ; preds = %for.cond22
  %14 = load i32, i32* %n, align 4
  %arrayidx26 = getelementptr inbounds [4096 x i8], [4096 x i8]* %cctx, i32 0, i32 %14
  %15 = load i8, i8* %arrayidx26, align 1
  %conv27 = sext i8 %15 to i32
  %call28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i32 %conv27)
  br label %for.inc29

for.inc29:                                        ; preds = %for.body25
  %16 = load i32, i32* %n, align 4
  %inc30 = add i32 %16, 1
  store i32 %inc30, i32* %n, align 4
  br label %for.cond22

for.end31:                                        ; preds = %for.cond22
  %call32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i32 0, i32 0))
  %arraydecay33 = getelementptr inbounds [4096 x i8], [4096 x i8]* %cptx, i32 0, i32 0
  %call34 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.9, i32 0, i32 0), i8* %arraydecay33)
  ret i32 0
}

declare i8* @strcpy(i8* %0, i8* %1) #3

declare i32 @printf(i8* %0, ...) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn writeonly }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* @cc, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add i32 %0, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* @bb, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* @cc, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add1 = add i32 %1, %2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ult i32 %3, 256
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ult %0, 256:i32
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem = urem i32 %6, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = urem %0, 4:i32
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* @aa, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* @aa, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00000000000001111111111111111111)

; *****
; For LLVM instruction:
;  %shl = shl i32 %8, 13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl %0, 13:i32
infer %1

; *****
; For LLVM instruction:
;  %xor = xor i32 %7, %shl
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = shl %1, 13:i32
%3:i32 = xor %0, %2
infer %3

; *****
; For LLVM instruction:
;  %9 = load i32, i32* @aa, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* @aa, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=11111111111111111111111111000000)

; *****
; For LLVM instruction:
;  %shr = lshr i32 %10, 6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = lshr %0, 6:i32
infer %1

; *****
; For LLVM instruction:
;  %xor3 = xor i32 %9, %shr
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 6:i32
%3:i32 = xor %0, %2
infer %3

; *****
; For LLVM instruction:
;  %11 = load i32, i32* @aa, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* @aa, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %shl5 = shl i32 %12, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %xor6 = xor i32 %11, %shl5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = shl %1, 2:i32
%3:i32 = xor %0, %2
infer %3

; *****
; For LLVM instruction:
;  %13 = load i32, i32* @aa, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* @aa, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=11111111111111110000000000000000)

; *****
; For LLVM instruction:
;  %shr8 = lshr i32 %14, 16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = lshr %0, 16:i32
infer %1

; *****
; For LLVM instruction:
;  %xor9 = xor i32 %13, %shr8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 16:i32
%3:i32 = xor %0, %2
infer %3

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add10 = add i32 %15, 128
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 128:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %rem11 = urem i32 %add10, 256
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 128:i32, %0
%2:i32 = urem %1, 256:i32
infer %2

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %arrayidx12, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* @aa, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add13 = add i32 %16, %17
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %x, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=11111111111111111111111111111100)

; *****
; For LLVM instruction:
;  %shr14 = lshr i32 %18, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = lshr %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %rem15 = urem i32 %shr14, 256
; Looking for a replacement for:
%0:i32 = var
%1:i32 = lshr %0, 2:i32
%2:i32 = urem %1, 256:i32
infer %2

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %arrayidx16, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* @aa, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add17 = add i32 %19, %20
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %21 = load i32, i32* @bb, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add18 = add i32 %add17, %21
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = add %0, %3
infer %4

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %y, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=11111111111111111111110000000000)

; *****
; For LLVM instruction:
;  %shr20 = lshr i32 %23, 10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = lshr %0, 10:i32
infer %1

; *****
; For LLVM instruction:
;  %rem21 = urem i32 %shr20, 256
; Looking for a replacement for:
%0:i32 = var
%1:i32 = lshr %0, 10:i32
%2:i32 = urem %1, 256:i32
infer %2

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %arrayidx22, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %x, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add23 = add i32 %24, %25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add i32 %27, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ult %0, 256:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = urem %0, 4:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 3
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0 (demandedBits=00000000000001111111111111111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 524287
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = shl %0, 13:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -8192
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = shl %1, 13:i32
%3:i32 = xor %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = shl %0, 13:i32

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0 (demandedBits=11111111111111111111111111000000)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -64
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = lshr %0, 6:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 67108863
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 6:i32
%3:i32 = xor %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 33554432
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = lshr %0, 6:i32

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0 (demandedBits=00111111111111111111111111111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741823
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = shl %0, 2:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -4
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = shl %1, 2:i32
%3:i32 = xor %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = shl %0, 2:i32

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0 (demandedBits=11111111111111110000000000000000)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -65536
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = lshr %0, 16:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 65535
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 16:i32
%3:i32 = xor %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 32768
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = lshr %0, 16:i32

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = add 128:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 128
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 127
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = add 128:i32, %0
%2:i32 = urem %1, 256:i32
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 128
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 127
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = add 128:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0 (demandedBits=11111111111111111111111111111100)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -4
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = lshr %0, 2:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741823
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = lshr %0, 2:i32
%2:i32 = urem %1, 256:i32
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 255
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = lshr %0, 2:i32

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i32 = add %0, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0 (demandedBits=11111111111111111111110000000000)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1024
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = lshr %0, 10:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4194303
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = lshr %0, 10:i32
%2:i32 = urem %1, 256:i32
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 255
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = lshr %0, 10:i32

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for isaac()

; entering Souper's runOnFunction() for randinit()

; ModuleID = './The_ISAAC_Cipher.c.bc'
source_filename = "./The_ISAAC_Cipher.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@cc = internal global i32 0, align 4
@bb = internal global i32 0, align 4
@mm = internal global [256 x i32] zeroinitializer, align 16
@aa = internal global i32 0, align 4
@randrsl = hidden global [256 x i32] zeroinitializer, align 16
@randcnt = hidden global i32 0, align 4
@v = hidden global [4096 x i8] zeroinitializer, align 16
@c = hidden global [4096 x i8] zeroinitializer, align 16
@.str = private unnamed_addr constant [20 x i8] c"a Top Secret secret\00", align 1
@.str.1 = private unnamed_addr constant [22 x i8] c"this is my secret key\00", align 1
@.str.2 = private unnamed_addr constant [13 x i8] c"Message: %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [13 x i8] c"Key    : %s\0A\00", align 1
@.str.4 = private unnamed_addr constant [10 x i8] c"XOR    : \00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"%02X\00", align 1
@.str.6 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.7 = private unnamed_addr constant [13 x i8] c"XOR dcr: %s\0A\00", align 1
@.str.8 = private unnamed_addr constant [10 x i8] c"MOD    : \00", align 1
@.str.9 = private unnamed_addr constant [13 x i8] c"MOD dcr: %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @isaac() #0 {
entry:
  %i = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %0 = load i32, i32* @cc, align 4
  %add = add i32 %0, 1
  store i32 %add, i32* @cc, align 4
  %1 = load i32, i32* @bb, align 4
  %2 = load i32, i32* @cc, align 4
  %add1 = add i32 %1, %2
  store i32 %add1, i32* @bb, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %3, 256
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  store i32 %5, i32* %x, align 4
  %6 = load i32, i32* %i, align 4
  %rem = urem i32 %6, 4
  switch i32 %rem, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb2
    i32 2, label %sw.bb4
    i32 3, label %sw.bb7
  ]

sw.bb:                                            ; preds = %for.body
  %7 = load i32, i32* @aa, align 4
  %8 = load i32, i32* @aa, align 4
  %shl = shl i32 %8, 13
  %xor = xor i32 %7, %shl
  store i32 %xor, i32* @aa, align 4
  br label %sw.epilog

sw.bb2:                                           ; preds = %for.body
  %9 = load i32, i32* @aa, align 4
  %10 = load i32, i32* @aa, align 4
  %shr = lshr i32 %10, 6
  %xor3 = xor i32 %9, %shr
  store i32 %xor3, i32* @aa, align 4
  br label %sw.epilog

sw.bb4:                                           ; preds = %for.body
  %11 = load i32, i32* @aa, align 4
  %12 = load i32, i32* @aa, align 4
  %shl5 = shl i32 %12, 2
  %xor6 = xor i32 %11, %shl5
  store i32 %xor6, i32* @aa, align 4
  br label %sw.epilog

sw.bb7:                                           ; preds = %for.body
  %13 = load i32, i32* @aa, align 4
  %14 = load i32, i32* @aa, align 4
  %shr8 = lshr i32 %14, 16
  %xor9 = xor i32 %13, %shr8
  store i32 %xor9, i32* @aa, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %for.body, %sw.bb7, %sw.bb4, %sw.bb2, %sw.bb
  %15 = load i32, i32* %i, align 4
  %add10 = add i32 %15, 128
  %rem11 = urem i32 %add10, 256
  %arrayidx12 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %rem11
  %16 = load i32, i32* %arrayidx12, align 4
  %17 = load i32, i32* @aa, align 4
  %add13 = add i32 %16, %17
  store i32 %add13, i32* @aa, align 4
  %18 = load i32, i32* %x, align 4
  %shr14 = lshr i32 %18, 2
  %rem15 = urem i32 %shr14, 256
  %arrayidx16 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %rem15
  %19 = load i32, i32* %arrayidx16, align 4
  %20 = load i32, i32* @aa, align 4
  %add17 = add i32 %19, %20
  %21 = load i32, i32* @bb, align 4
  %add18 = add i32 %add17, %21
  store i32 %add18, i32* %y, align 4
  %22 = load i32, i32* %i, align 4
  %arrayidx19 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %22
  store i32 %add18, i32* %arrayidx19, align 4
  %23 = load i32, i32* %y, align 4
  %shr20 = lshr i32 %23, 10
  %rem21 = urem i32 %shr20, 256
  %arrayidx22 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %rem21
  %24 = load i32, i32* %arrayidx22, align 4
  %25 = load i32, i32* %x, align 4
  %add23 = add i32 %24, %25
  store i32 %add23, i32* @bb, align 4
  %26 = load i32, i32* %i, align 4
  %arrayidx24 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %26
  store i32 %add23, i32* %arrayidx24, align 4
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %27 = load i32, i32* %i, align 4
  %inc = add i32 %27, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* @randcnt, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @randinit(i32 %flag) #0 {
entry:
  %flag.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %c = alloca i32, align 4
  %d = alloca i32, align 4
  %e = alloca i32, align 4
  %f = alloca i32, align 4
  %g = alloca i32, align 4
  %h = alloca i32, align 4
  store i32 %flag, i32* %flag.addr, align 4
  store i32 0, i32* @cc, align 4
  store i32 0, i32* @bb, align 4
  store i32 0, i32* @aa, align 4
  store i32 -1640531527, i32* %h, align 4
  store i32 -1640531527, i32* %g, align 4
  store i32 -1640531527, i32* %f, align 4
  store i32 -1640531527, i32* %e, align 4
  store i32 -1640531527, i32* %d, align 4
  store i32 -1640531527, i32* %c, align 4
  store i32 -1640531527, i32* %b, align 4
  store i32 -1640531527, i32* %a, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %b, align 4
  %shl = shl i32 %1, 11
  %2 = load i32, i32* %a, align 4
  %xor = xor i32 %2, %shl
  store i32 %xor, i32* %a, align 4
  %3 = load i32, i32* %a, align 4
  %4 = load i32, i32* %d, align 4
  %add = add i32 %4, %3
  store i32 %add, i32* %d, align 4
  %5 = load i32, i32* %c, align 4
  %6 = load i32, i32* %b, align 4
  %add1 = add i32 %6, %5
  store i32 %add1, i32* %b, align 4
  %7 = load i32, i32* %c, align 4
  %shr = lshr i32 %7, 2
  %8 = load i32, i32* %b, align 4
  %xor2 = xor i32 %8, %shr
  store i32 %xor2, i32* %b, align 4
  %9 = load i32, i32* %b, align 4
  %10 = load i32, i32* %e, align 4
  %add3 = add i32 %10, %9
  store i32 %add3, i32* %e, align 4
  %11 = load i32, i32* %d, align 4
  %12 = load i32, i32* %c, align 4
  %add4 = add i32 %12, %11
  store i32 %add4, i32* %c, align 4
  %13 = load i32, i32* %d, align 4
  %shl5 = shl i32 %13, 8
  %14 = load i32, i32* %c, align 4
  %xor6 = xor i32 %14, %shl5
  store i32 %xor6, i32* %c, align 4
  %15 = load i32, i32* %c, align 4
  %16 = load i32, i32* %f, align 4
  %add7 = add i32 %16, %15
  store i32 %add7, i32* %f, align 4
  %17 = load i32, i32* %e, align 4
  %18 = load i32, i32* %d, align 4
  %add8 = add i32 %18, %17
  store i32 %add8, i32* %d, align 4
  %19 = load i32, i32* %e, align 4
  %shr9 = lshr i32 %19, 16
  %20 = load i32, i32* %d, align 4
  %xor10 = xor i32 %20, %shr9
  store i32 %xor10, i32* %d, align 4
  %21 = load i32, i32* %d, align 4
  %22 = load i32, i32* %g, align 4
  %add11 = add i32 %22, %21
  store i32 %add11, i32* %g, align 4
  %23 = load i32, i32* %f, align 4
  %24 = load i32, i32* %e, align 4
  %add12 = add i32 %24, %23
  store i32 %add12, i32* %e, align 4
  %25 = load i32, i32* %f, align 4
  %shl13 = shl i32 %25, 10
  %26 = load i32, i32* %e, align 4
  %xor14 = xor i32 %26, %shl13
  store i32 %xor14, i32* %e, align 4
  %27 = load i32, i32* %e, align 4
  %28 = load i32, i32* %h, align 4
  %add15 = add i32 %28, %27
  store i32 %add15, i32* %h, align 4
  %29 = load i32, i32* %g, align 4
  %30 = load i32, i32* %f, align 4
  %add16 = add i32 %30, %29
  store i32 %add16, i32* %f, align 4
  %31 = load i32, i32* %g, align 4
  %shr17 = lshr i32 %31, 4
  %32 = load i32, i32* %f, align 4
  %xor18 = xor i32 %32, %shr17
  store i32 %xor18, i32* %f, align 4
  %33 = load i32, i32* %f, align 4
  %34 = load i32, i32* %a, align 4
  %add19 = add i32 %34, %33
  store i32 %add19, i32* %a, align 4
  %35 = load i32, i32* %h, align 4
  %36 = load i32, i32* %g, align 4
  %add20 = add i32 %36, %35
  store i32 %add20, i32* %g, align 4
  %37 = load i32, i32* %h, align 4
  %shl21 = shl i32 %37, 8
  %38 = load i32, i32* %g, align 4
  %xor22 = xor i32 %38, %shl21
  store i32 %xor22, i32* %g, align 4
  %39 = load i32, i32* %g, align 4
  %40 = load i32, i32* %b, align 4
  %add23 = add i32 %40, %39
  store i32 %add23, i32* %b, align 4
  %41 = load i32, i32* %a, align 4
  %42 = load i32, i32* %h, align 4
  %add24 = add i32 %42, %41
  store i32 %add24, i32* %h, align 4
  %43 = load i32, i32* %a, align 4
  %shr25 = lshr i32 %43, 9
  %44 = load i32, i32* %h, align 4
  %xor26 = xor i32 %44, %shr25
  store i32 %xor26, i32* %h, align 4
  %45 = load i32, i32* %h, align 4
  %46 = load i32, i32* %c, align 4
  %add27 = add i32 %46, %45
  store i32 %add27, i32* %c, align 4
  %47 = load i32, i32* %b, align 4
  %48 = load i32, i32* %a, align 4
  %add28 = add i32 %48, %47
  store i32 %add28, i32* %a, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %49 = load i32, i32* %i, align 4
  %inc = add nsw i32 %49, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond29

for.cond29:                                       ; preds = %for.inc101, %for.end
  %50 = load i32, i32* %i, align 4
  %cmp30 = icmp slt i32 %50, 256
  br i1 %cmp30, label %for.body31, label %for.end103

for.body31:                                       ; preds = %for.cond29
  %51 = load i32, i32* %flag.addr, align 4
  %tobool = icmp ne i32 %51, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body31
  %52 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %52
  %53 = load i32, i32* %arrayidx, align 4
  %54 = load i32, i32* %a, align 4
  %add32 = add i32 %54, %53
  store i32 %add32, i32* %a, align 4
  %55 = load i32, i32* %i, align 4
  %add33 = add nsw i32 %55, 1
  %arrayidx34 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %add33
  %56 = load i32, i32* %arrayidx34, align 4
  %57 = load i32, i32* %b, align 4
  %add35 = add i32 %57, %56
  store i32 %add35, i32* %b, align 4
  %58 = load i32, i32* %i, align 4
  %add36 = add nsw i32 %58, 2
  %arrayidx37 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %add36
  %59 = load i32, i32* %arrayidx37, align 4
  %60 = load i32, i32* %c, align 4
  %add38 = add i32 %60, %59
  store i32 %add38, i32* %c, align 4
  %61 = load i32, i32* %i, align 4
  %add39 = add nsw i32 %61, 3
  %arrayidx40 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %add39
  %62 = load i32, i32* %arrayidx40, align 4
  %63 = load i32, i32* %d, align 4
  %add41 = add i32 %63, %62
  store i32 %add41, i32* %d, align 4
  %64 = load i32, i32* %i, align 4
  %add42 = add nsw i32 %64, 4
  %arrayidx43 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %add42
  %65 = load i32, i32* %arrayidx43, align 4
  %66 = load i32, i32* %e, align 4
  %add44 = add i32 %66, %65
  store i32 %add44, i32* %e, align 4
  %67 = load i32, i32* %i, align 4
  %add45 = add nsw i32 %67, 5
  %arrayidx46 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %add45
  %68 = load i32, i32* %arrayidx46, align 4
  %69 = load i32, i32* %f, align 4
  %add47 = add i32 %69, %68
  store i32 %add47, i32* %f, align 4
  %70 = load i32, i32* %i, align 4
  %add48 = add nsw i32 %70, 6
  %arrayidx49 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %add48
  %71 = load i32, i32* %arrayidx49, align 4
  %72 = load i32, i32* %g, align 4
  %add50 = add i32 %72, %71
  store i32 %add50, i32* %g, align 4
  %73 = load i32, i32* %i, align 4
  %add51 = add nsw i32 %73, 7
  %arrayidx52 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %add51
  %74 = load i32, i32* %arrayidx52, align 4
  %75 = load i32, i32* %h, align 4
  %add53 = add i32 %75, %74
  store i32 %add53, i32* %h, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body31
  %76 = load i32, i32* %b, align 4
  %shl54 = shl i32 %76, 11
  %77 = load i32, i32* %a, align 4
  %xor55 = xor i32 %77, %shl54
  store i32 %xor55, i32* %a, align 4
  %78 = load i32, i32* %a, align 4
  %79 = load i32, i32* %d, align 4
  %add56 = add i32 %79, %78
  store i32 %add56, i32* %d, align 4
  %80 = load i32, i32* %c, align 4
  %81 = load i32, i32* %b, align 4
  %add57 = add i32 %81, %80
  store i32 %add57, i32* %b, align 4
  %82 = load i32, i32* %c, align 4
  %shr58 = lshr i32 %82, 2
  %83 = load i32, i32* %b, align 4
  %xor59 = xor i32 %83, %shr58
  store i32 %xor59, i32* %b, align 4
  %84 = load i32, i32* %b, align 4
  %85 = load i32, i32* %e, align 4
  %add60 = add i32 %85, %84
  store i32 %add60, i32* %e, align 4
  %86 = load i32, i32* %d, align 4
  %87 = load i32, i32* %c, align 4
  %add61 = add i32 %87, %86
  store i32 %add61, i32* %c, align 4
  %88 = load i32, i32* %d, align 4
  %shl62 = shl i32 %88, 8
  %89 = load i32, i32* %c, align 4
  %xor63 = xor i32 %89, %shl62
  store i32 %xor63, i32* %c, align 4
  %90 = load i32, i32* %c, align 4
  %91 = load i32, i32* %f, align 4
  %add64 = add i32 %91, %90
  store i32 %add64, i32* %f, align 4
  %92 = load i32, i32* %e, align 4
  %93 = load i32, i32* %d, align 4
  %add65 = add i32 %93, %92
  store i32 %add65, i32* %d, align 4
  %94 = load i32, i32* %e, align 4
  %shr66 = lshr i32 %94, 16
  %95 = load i32, i32* %d, align 4
  %xor67 = xor i32 %95, %shr66
  store i32 %xor67, i32* %d, align 4
  %96 = load i32, i32* %d, align 4
  %97 = load i32, i32* %g, align 4
  %add68 = add i32 %97, %96
  store i32 %add68, i32* %g, align 4
  %98 = load i32, i32* %f, align 4
  %99 = load i32, i32* %e, align 4
  %add69 = add i32 %99, %98
  store i32 %add69, i32* %e, align 4
  %100 = load i32, i32* %f, align 4
  %shl70 = shl i32 %100, 10
  %101 = load i32, i32* %e, align 4
  %xor71 = xor i32 %101, %shl70
  store i32 %xor71, i32* %e, align 4
  %102 = load i32, i32* %e, align 4
  %103 = load i32, i32* %h, align 4
  %add72 = add i32 %103, %102
  store i32 %add72, i32* %h, align 4
  %104 = load i32, i32* %g, align 4
  %105 = load i32, i32* %f, align 4
  %add73 = add i32 %105, %104
  store i32 %add73, i32* %f, align 4
  %106 = load i32, i32* %g, align 4
  %shr74 = lshr i32 %106, 4
  %107 = load i32, i32* %f, align 4
  %xor75 = xor i32 %107, %shr74
  store i32 %xor75, i32* %f, align 4
  %108 = load i32, i32* %f, align 4
  %109 = load i32, i32* %a, align 4
  %add76 = add i32 %109, %108
  store i32 %add76, i32* %a, align 4
  %110 = load i32, i32* %h, align 4
  %111 = load i32, i32* %g, align 4
  %add77 = add i32 %111, %110
  store i32 %add77, i32* %g, align 4
  %112 = load i32, i32* %h, align 4
  %shl78 = shl i32 %112, 8
  %113 = load i32, i32* %g, align 4
  %xor79 = xor i32 %113, %shl78
  store i32 %xor79, i32* %g, align 4
  %114 = load i32, i32* %g, align 4
  %115 = load i32, i32* %b, align 4
  %add80 = add i32 %115, %114
  store i32 %add80, i32* %b, align 4
  %116 = load i32, i32* %a, align 4
  %117 = load i32, i32* %h, align 4
  %add81 = add i32 %117, %116
  store i32 %add81, i32* %h, align 4
  %118 = load i32, i32* %a, align 4
  %shr82 = lshr i32 %118, 9
  %119 = load i32, i32* %h, align 4
  %xor83 = xor i32 %119, %shr82
  store i32 %xor83, i32* %h, align 4
  %120 = load i32, i32* %h, align 4
  %121 = load i32, i32* %c, align 4
  %add84 = add i32 %121, %120
  store i32 %add84, i32* %c, align 4
  %122 = load i32, i32* %b, align 4
  %123 = load i32, i32* %a, align 4
  %add85 = add i32 %123, %122
  store i32 %add85, i32* %a, align 4
  %124 = load i32, i32* %a, align 4
  %125 = load i32, i32* %i, align 4
  %arrayidx86 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %125
  store i32 %124, i32* %arrayidx86, align 4
  %126 = load i32, i32* %b, align 4
  %127 = load i32, i32* %i, align 4
  %add87 = add nsw i32 %127, 1
  %arrayidx88 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add87
  store i32 %126, i32* %arrayidx88, align 4
  %128 = load i32, i32* %c, align 4
  %129 = load i32, i32* %i, align 4
  %add89 = add nsw i32 %129, 2
  %arrayidx90 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add89
  store i32 %128, i32* %arrayidx90, align 4
  %130 = load i32, i32* %d, align 4
  %131 = load i32, i32* %i, align 4
  %add91 = add nsw i32 %131, 3
  %arrayidx92 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add91
  store i32 %130, i32* %arrayidx92, align 4
  %132 = load i32, i32* %e, align 4
  %133 = load i32, i32* %i, align 4
  %add93 = add nsw i32 %133, 4
  %arrayidx94 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add93
  store i32 %132, i32* %arrayidx94, align 4
  %134 = load i32, i32* %f, align 4
  %135 = load i32, i32* %i, align 4
  %add95 = add nsw i32 %135, 5
  %arrayidx96 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add95
  store i32 %134, i32* %arrayidx96, align 4
  %136 = load i32, i32* %g, align 4
  %137 = load i32, i32* %i, align 4
  %add97 = add nsw i32 %137, 6
  %arrayidx98 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add97
  store i32 %136, i32* %arrayidx98, align 4
  %138 = load i32, i32* %h, align 4
  %139 = load i32, i32* %i, align 4
  %add99 = add nsw i32 %139, 7
  %arrayidx100 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add99
  store i32 %138, i32* %arrayidx100, align 4
  br label %for.inc101

for.inc101:                                       ; preds = %if.end
  %140 = load i32, i32* %i, align 4
  %add102 = add nsw i32 %140, 8
  store i32 %add102, i32* %i, align 4
  br label %for.cond29

for.end103:                                       ; preds = %for.cond29
  %141 = load i32, i32* %flag.addr, align 4
  %tobool104 = icmp ne i32 %141, 0
  br i1 %tobool104, label %if.then105, label %if.end182

if.then105:                                       ; preds = %for.end103
  store i32 0, i32* %i, align 4
  br label %for.cond106

for.cond106:                                      ; preds = %for.inc179, %if.then105
  %142 = load i32, i32* %i, align 4
  %cmp107 = icmp slt i32 %142, 256
  br i1 %cmp107, label %for.body108, label %for.end181

for.body108:                                      ; preds = %for.cond106
  %143 = load i32, i32* %i, align 4
  %arrayidx109 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %143
  %144 = load i32, i32* %arrayidx109, align 4
  %145 = load i32, i32* %a, align 4
  %add110 = add i32 %145, %144
  store i32 %add110, i32* %a, align 4
  %146 = load i32, i32* %i, align 4
  %add111 = add nsw i32 %146, 1
  %arrayidx112 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add111
  %147 = load i32, i32* %arrayidx112, align 4
  %148 = load i32, i32* %b, align 4
  %add113 = add i32 %148, %147
  store i32 %add113, i32* %b, align 4
  %149 = load i32, i32* %i, align 4
  %add114 = add nsw i32 %149, 2
  %arrayidx115 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add114
  %150 = load i32, i32* %arrayidx115, align 4
  %151 = load i32, i32* %c, align 4
  %add116 = add i32 %151, %150
  store i32 %add116, i32* %c, align 4
  %152 = load i32, i32* %i, align 4
  %add117 = add nsw i32 %152, 3
  %arrayidx118 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add117
  %153 = load i32, i32* %arrayidx118, align 4
  %154 = load i32, i32* %d, align 4
  %add119 = add i32 %154, %153
  store i32 %add119, i32* %d, align 4
  %155 = load i32, i32* %i, align 4
  %add120 = add nsw i32 %155, 4
  %arrayidx121 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add120
  %156 = load i32, i32* %arrayidx121, align 4
  %157 = load i32, i32* %e, align 4
  %add122 = add i32 %157, %156
  store i32 %add122, i32* %e, align 4
  %158 = load i32, i32* %i, align 4
  %add123 = add nsw i32 %158, 5
  %arrayidx124 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add123
  %159 = load i32, i32* %arrayidx124, align 4
  %160 = load i32, i32* %f, align 4
  %add125 = add i32 %160, %159
  store i32 %add125, i32* %f, align 4
  %161 = load i32, i32* %i, align 4
  %add126 = add nsw i32 %161, 6
  %arrayidx127 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add126
  %162 = load i32, i32* %arrayidx127, align 4
  %163 = load i32, i32* %g, align 4
  %add128 = add i32 %163, %162
  store i32 %add128, i32* %g, align 4
  %164 = load i32, i32* %i, align 4
  %add129 = add nsw i32 %164, 7
  %arrayidx130 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add129
  %165 = load i32, i32* %arrayidx130, align 4
  %166 = load i32, i32* %h, align 4
  %add131 = add i32 %166, %165
  store i32 %add131, i32* %h, align 4
  %167 = load i32, i32* %b, align 4
  %shl132 = shl i32 %167, 11
  %168 = load i32, i32* %a, align 4
  %xor133 = xor i32 %168, %shl132
  store i32 %xor133, i32* %a, align 4
  %169 = load i32, i32* %a, align 4
  %170 = load i32, i32* %d, align 4
  %add134 = add i32 %170, %169
  store i32 %add134, i32* %d, align 4
  %171 = load i32, i32* %c, align 4
  %172 = load i32, i32* %b, align 4
  %add135 = add i32 %172, %171
  store i32 %add135, i32* %b, align 4
  %173 = load i32, i32* %c, align 4
  %shr136 = lshr i32 %173, 2
  %174 = load i32, i32* %b, align 4
  %xor137 = xor i32 %174, %shr136
  store i32 %xor137, i32* %b, align 4
  %175 = load i32, i32* %b, align 4
  %176 = load i32, i32* %e, align 4
  %add138 = add i32 %176, %175
  store i32 %add138, i32* %e, align 4
  %177 = load i32, i32* %d, align 4
  %178 = load i32, i32* %c, align 4
  %add139 = add i32 %178, %177
  store i32 %add139, i32* %c, align 4
  %179 = load i32, i32* %d, align 4
  %shl140 = shl i32 %179, 8
  %180 = load i32, i32* %c, align 4
  %xor141 = xor i32 %180, %shl140
  store i32 %xor141, i32* %c, align 4
  %181 = load i32, i32* %c, align 4
  %182 = load i32, i32* %f, align 4
  %add142 = add i32 %182, %181
  store i32 %add142, i32* %f, align 4
  %183 = load i32, i32* %e, align 4
  %184 = load i32, i32* %d, align 4
  %add143 = add i32 %184, %183
  store i32 %add143, i32* %d, align 4
  %185 = load i32, i32* %e, align 4
  %shr144 = lshr i32 %185, 16
  %186 = load i32, i32* %d, align 4
  %xor145 = xor i32 %186, %shr144
  store i32 %xor145, i32* %d, align 4
  %187 = load i32, i32* %d, align 4
  %188 = load i32, i32* %g, align 4
  %add146 = add i32 %188, %187
  store i32 %add146, i32* %g, align 4
  %189 = load i32, i32* %f, align 4
  %190 = load i32, i32* %e, align 4
  %add147 = add i32 %190, %189
  store i32 %add147, i32* %e, align 4
  %191 = load i32, i32* %f, align 4
  %shl148 = shl i32 %191, 10
  %192 = load i32, i32* %e, align 4
  %xor149 = xor i32 %192, %shl148
  store i32 %xor149, i32* %e, align 4
  %193 = load i32, i32* %e, align 4
  %194 = load i32, i32* %h, align 4
  %add150 = add i32 %194, %193
  store i32 %add150, i32* %h, align 4
  %195 = load i32, i32* %g, align 4
  %196 = load i32, i32* %f, align 4
  %add151 = add i32 %196, %195
  store i32 %add151, i32* %f, align 4
  %197 = load i32, i32* %g, align 4
  %shr152 = lshr i32 %197, 4
  %198 = load i32, i32* %f, align 4
  %xor153 = xor i32 %198, %shr152
  store i32 %xor153, i32* %f, align 4
  %199 = load i32, i32* %f, align 4
  %200 = load i32, i32* %a, align 4
  %add154 = add i32 %200, %199
  store i32 %add154, i32* %a, align 4
  %201 = load i32, i32* %h, align 4
  %202 = load i32, i32* %g, align 4
  %add155 = add i32 %202, %201
  store i32 %add155, i32* %g, align 4
  %203 = load i32, i32* %h, align 4
  %shl156 = shl i32 %203, 8
  %204 = load i32, i32* %g, align 4
  %xor157 = xor i32 %204, %shl156
  store i32 %xor157, i32* %g, align 4
  %205 = load i32, i32* %g, align 4
  %206 = load i32, i32* %b, align 4
  %add158 = add i32 %206, %205
  store i32 %add158, i32* %b, align 4
  %207 = load i32, i32* %a, align 4
  %208 = load i32, i32* %h, align 4
  %add159 = add i32 %208, %207
  store i32 %add159, i32* %h, align 4
  %209 = load i32, i32* %a, align 4
  %shr160 = lshr i32 %209, 9
  %210 = load i32, i32* %h, align 4
  %xor161 = xor i32 %210, %shr160
  store i32 %xor161, i32* %h, align 4
  %211 = load i32, i32* %h, align 4
  %212 = load i32, i32* %c, align 4
  %add162 = add i32 %212, %211
  store i32 %add162, i32* %c, align 4
  %213 = load i32, i32* %b, align 4
  %214 = load i32, i32* %a, align 4
  %add163 = add i32 %214, %213
  store i32 %add163, i32* %a, align 4
  %215 = load i32, i32* %a, align 4
  %216 = load i32, i32* %i, align 4
  %arrayidx164 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %216
  store i32 %215, i32* %arrayidx164, align 4
  %217 = load i32, i32* %b, align 4
  %218 = load i32, i32* %i, align 4
  %add165 = add nsw i32 %218, 1
  %arrayidx166 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add165
  store i32 %217, i32* %arrayidx166, align 4
  %219 = load i32, i32* %c, align 4
  %220 = load i32, i32* %i, align 4
  %add167 = add nsw i32 %220, 2
  %arrayidx168 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add167
  store i32 %219, i32* %arrayidx168, align 4
  %221 = load i32, i32* %d, align 4
  %222 = load i32, i32* %i, align 4
  %add169 = add nsw i32 %222, 3
  %arrayidx170 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add169
  store i32 %221, i32* %arrayidx170, align 4
  %223 = load i32, i32* %e, align 4
  %224 = load i32, i32* %i, align 4
  %add171 = add nsw i32 %224, 4
  %arrayidx172 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add171
  store i32 %223, i32* %arrayidx172, align 4
  %225 = load i32, i32* %f, align 4
  %226 = load i32, i32* %i, align 4
  %add173 = add nsw i32 %226, 5
  %arrayidx174 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add173
  store i32 %225, i32* %arrayidx174, align 4
  %227 = load i32, i32* %g, align 4
  %228 = load i32, i32* %i, align 4
  %add175 = add nsw i32 %228, 6
  %arrayidx176 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add175
  store i32 %227, i32* %arrayidx176, align 4
  %229 = load i32, i32* %h, align 4
  %230 = load i32, i32* %i, align 4
  %add177 = add nsw i32 %230, 7
  %arrayidx178 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add177
  store i32 %229, i32* %arrayidx178, align 4
  br label %for.inc179

for.inc179:                                       ; preds = %for.body108
  %231 = load i32, i32* %i, align 4
  %add180 = add nsw i32 %231, 8
  store i32 %add180, i32* %i, align 4
  br label %for.cond106

for.end181:                                       ; preds = %for.cond106
  br label %if.end182

if.end182:                                        ; preds = %for.end181, %for.end103
  call void @isaac()
  store i32 0, i32* @randcnt, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @iRandom() #0 {
entry:
  %r = alloca i32, align 4
  %0 = load i32, i32* @randcnt, align 4
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %0
  %1 = load i32, i32* %arrayidx, align 4
  store i32 %1, i32* %r, align 4
  %2 = load i32, i32* @randcnt, align 4
  %inc = add i32 %2, 1
  store i32 %inc, i32* @randcnt, align 4
  %3 = load i32, i32* @randcnt, align 4
  %cmp = icmp ugt i32 %3, 255
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @isaac()
  store i32 0, i32* @randcnt, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* %r, align 4
  ret i32 %4
}

; Function Attrs: noinline nounwind optnone
define hidden signext i8 @iRandA() #0 {
entry:
  %call = call i32 @iRandom()
  %rem = urem i32 %call, 95
  %add = add i32 %rem, 32
  %conv = trunc i32 %add to i8
  ret i8 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden void @iSeed(i8* %seed, i32 %flag) #0 {
entry:
  %seed.addr = alloca i8*, align 4
  %flag.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %m = alloca i32, align 4
  store i8* %seed, i8** %seed.addr, align 4
  store i32 %flag, i32* %flag.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %0, 256
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %1
  store i32 0, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %i, align 4
  %inc = add i32 %2, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %3 = load i8*, i8** %seed.addr, align 4
  %call = call i32 @strlen(i8* %3) #4
  store i32 %call, i32* %m, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc8, %for.end
  %4 = load i32, i32* %i, align 4
  %cmp2 = icmp ult i32 %4, 256
  br i1 %cmp2, label %for.body3, label %for.end10

for.body3:                                        ; preds = %for.cond1
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %m, align 4
  %cmp4 = icmp ugt i32 %5, %6
  br i1 %cmp4, label %if.then, label %if.else

if.then:                                          ; preds = %for.body3
  %7 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %7
  store i32 0, i32* %arrayidx5, align 4
  br label %if.end

if.else:                                          ; preds = %for.body3
  %8 = load i8*, i8** %seed.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds i8, i8* %8, i32 %9
  %10 = load i8, i8* %arrayidx6, align 1
  %conv = sext i8 %10 to i32
  %11 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %11
  store i32 %conv, i32* %arrayidx7, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc8

for.inc8:                                         ; preds = %if.end
  %12 = load i32, i32* %i, align 4
  %inc9 = add i32 %12, 1
  store i32 %inc9, i32* %i, align 4
  br label %for.cond1

for.end10:                                        ; preds = %for.cond1
  %13 = load i32, i32* %flag.addr, align 4
  call void @randinit(i32 %13)
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i8* @Vernam(i8* %msg) #0 {
entry:
  %msg.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %l = alloca i32, align 4
  store i8* %msg, i8** %msg.addr, align 4
  %0 = load i8*, i8** %msg.addr, align 4
  %call = call i32 @strlen(i8* %0) #4
  store i32 %call, i32* %l, align 4
  %1 = load i32, i32* %l, align 4
  %add = add i32 %1, 1
  call void @llvm.memset.p0i8.i32(i8* align 16 getelementptr inbounds ([4096 x i8], [4096 x i8]* @v, i32 0, i32 0), i8 0, i32 %add, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %l, align 4
  %cmp = icmp ult i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call1 = call signext i8 @iRandA()
  %conv = sext i8 %call1 to i32
  %4 = load i8*, i8** %msg.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %4, i32 %5
  %6 = load i8, i8* %arrayidx, align 1
  %conv2 = sext i8 %6 to i32
  %xor = xor i32 %conv, %conv2
  %conv3 = trunc i32 %xor to i8
  %7 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds [4096 x i8], [4096 x i8]* @v, i32 0, i32 %7
  store i8 %conv3, i8* %arrayidx4, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %inc = add i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i8* getelementptr inbounds ([4096 x i8], [4096 x i8]* @v, i32 0, i32 0)
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define hidden signext i8 @Caesar(i32 %m, i8 signext %ch, i8 signext %shift, i8 signext %modulo, i8 signext %start) #0 {
entry:
  %m.addr = alloca i32, align 4
  %ch.addr = alloca i8, align 1
  %shift.addr = alloca i8, align 1
  %modulo.addr = alloca i8, align 1
  %start.addr = alloca i8, align 1
  %n = alloca i32, align 4
  store i32 %m, i32* %m.addr, align 4
  store i8 %ch, i8* %ch.addr, align 1
  store i8 %shift, i8* %shift.addr, align 1
  store i8 %modulo, i8* %modulo.addr, align 1
  store i8 %start, i8* %start.addr, align 1
  %0 = load i32, i32* %m.addr, align 4
  %cmp = icmp eq i32 %0, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i8, i8* %shift.addr, align 1
  %conv = sext i8 %1 to i32
  %sub = sub nsw i32 0, %conv
  %conv1 = trunc i32 %sub to i8
  store i8 %conv1, i8* %shift.addr, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i8, i8* %ch.addr, align 1
  %conv2 = sext i8 %2 to i32
  %3 = load i8, i8* %start.addr, align 1
  %conv3 = sext i8 %3 to i32
  %sub4 = sub nsw i32 %conv2, %conv3
  %4 = load i8, i8* %shift.addr, align 1
  %conv5 = sext i8 %4 to i32
  %add = add nsw i32 %sub4, %conv5
  store i32 %add, i32* %n, align 4
  %5 = load i32, i32* %n, align 4
  %6 = load i8, i8* %modulo.addr, align 1
  %conv6 = sext i8 %6 to i32
  %rem = srem i32 %5, %conv6
  store i32 %rem, i32* %n, align 4
  %7 = load i32, i32* %n, align 4
  %cmp7 = icmp slt i32 %7, 0
  br i1 %cmp7, label %if.then9, label %if.end12

if.then9:                                         ; preds = %if.end
  %8 = load i8, i8* %modulo.addr, align 1
  %conv10 = sext i8 %8 to i32
  %9 = load i32, i32* %n, align 4
  %add11 = add nsw i32 %9, %conv10
  store i32 %add11, i32* %n, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then9, %if.end
  %10 = load i8, i8* %start.addr, align 1
  %conv13 = sext i8 %10 to i32
  %11 = load i32, i32* %n, align 4
  %add14 = add nsw i32 %conv13, %11
  %conv15 = trunc i32 %add14 to i8
  ret i8 %conv15
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @CaesarStr(i32 %m, i8* %msg, i8 signext %modulo, i8 signext %start) #0 {
entry:
  %m.addr = alloca i32, align 4
  %msg.addr = alloca i8*, align 4
  %modulo.addr = alloca i8, align 1
  %start.addr = alloca i8, align 1
  %i = alloca i32, align 4
  %l = alloca i32, align 4
  store i32 %m, i32* %m.addr, align 4
  store i8* %msg, i8** %msg.addr, align 4
  store i8 %modulo, i8* %modulo.addr, align 1
  store i8 %start, i8* %start.addr, align 1
  %0 = load i8*, i8** %msg.addr, align 4
  %call = call i32 @strlen(i8* %0) #4
  store i32 %call, i32* %l, align 4
  %1 = load i32, i32* %l, align 4
  %add = add i32 %1, 1
  call void @llvm.memset.p0i8.i32(i8* align 16 getelementptr inbounds ([4096 x i8], [4096 x i8]* @c, i32 0, i32 0), i8 0, i32 %add, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %l, align 4
  %cmp = icmp ult i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %m.addr, align 4
  %5 = load i8*, i8** %msg.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %5, i32 %6
  %7 = load i8, i8* %arrayidx, align 1
  %call1 = call signext i8 @iRandA()
  %8 = load i8, i8* %modulo.addr, align 1
  %9 = load i8, i8* %start.addr, align 1
  %call2 = call signext i8 @Caesar(i32 %4, i8 signext %7, i8 signext %call1, i8 signext %8, i8 signext %9)
  %10 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds [4096 x i8], [4096 x i8]* @c, i32 0, i32 %10
  store i8 %call2, i8* %arrayidx3, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i8* getelementptr inbounds ([4096 x i8], [4096 x i8]* @c, i32 0, i32 0)
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %n = alloca i32, align 4
  %l = alloca i32, align 4
  %msg = alloca i8*, align 4
  %key = alloca i8*, align 4
  %vctx = alloca [4096 x i8], align 16
  %vptx = alloca [4096 x i8], align 16
  %cctx = alloca [4096 x i8], align 16
  %cptx = alloca [4096 x i8], align 16
  store i32 0, i32* %retval, align 4
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i32 0, i32 0), i8** %msg, align 4
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i32 0, i32 0), i8** %key, align 4
  %0 = load i8*, i8** %msg, align 4
  %call = call i32 @strlen(i8* %0) #4
  store i32 %call, i32* %l, align 4
  %1 = load i8*, i8** %key, align 4
  call void @iSeed(i8* %1, i32 1)
  %arraydecay = getelementptr inbounds [4096 x i8], [4096 x i8]* %vctx, i32 0, i32 0
  %2 = load i8*, i8** %msg, align 4
  %call1 = call i8* @Vernam(i8* %2)
  %call2 = call i8* @strcpy(i8* %arraydecay, i8* %call1)
  %arraydecay3 = getelementptr inbounds [4096 x i8], [4096 x i8]* %cctx, i32 0, i32 0
  %3 = load i8*, i8** %msg, align 4
  %call4 = call i8* @CaesarStr(i32 0, i8* %3, i8 signext 95, i8 signext 32)
  %call5 = call i8* @strcpy(i8* %arraydecay3, i8* %call4)
  %4 = load i8*, i8** %key, align 4
  call void @iSeed(i8* %4, i32 1)
  %arraydecay6 = getelementptr inbounds [4096 x i8], [4096 x i8]* %vptx, i32 0, i32 0
  %arraydecay7 = getelementptr inbounds [4096 x i8], [4096 x i8]* %vctx, i32 0, i32 0
  %call8 = call i8* @Vernam(i8* %arraydecay7)
  %call9 = call i8* @strcpy(i8* %arraydecay6, i8* %call8)
  %arraydecay10 = getelementptr inbounds [4096 x i8], [4096 x i8]* %cptx, i32 0, i32 0
  %arraydecay11 = getelementptr inbounds [4096 x i8], [4096 x i8]* %cctx, i32 0, i32 0
  %call12 = call i8* @CaesarStr(i32 1, i8* %arraydecay11, i8 signext 95, i8 signext 32)
  %call13 = call i8* @strcpy(i8* %arraydecay10, i8* %call12)
  %5 = load i8*, i8** %msg, align 4
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i32 0, i32 0), i8* %5)
  %6 = load i8*, i8** %key, align 4
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3, i32 0, i32 0), i8* %6)
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i32 0, i32 0))
  store i32 0, i32* %n, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %7 = load i32, i32* %n, align 4
  %8 = load i32, i32* %l, align 4
  %cmp = icmp ult i32 %7, %8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i32, i32* %n, align 4
  %arrayidx = getelementptr inbounds [4096 x i8], [4096 x i8]* %vctx, i32 0, i32 %9
  %10 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %10 to i32
  %call17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i32 %conv)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %n, align 4
  %inc = add i32 %11, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i32 0, i32 0))
  %arraydecay19 = getelementptr inbounds [4096 x i8], [4096 x i8]* %vptx, i32 0, i32 0
  %call20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7, i32 0, i32 0), i8* %arraydecay19)
  %call21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8, i32 0, i32 0))
  store i32 0, i32* %n, align 4
  br label %for.cond22

for.cond22:                                       ; preds = %for.inc29, %for.end
  %12 = load i32, i32* %n, align 4
  %13 = load i32, i32* %l, align 4
  %cmp23 = icmp ult i32 %12, %13
  br i1 %cmp23, label %for.body25, label %for.end31

for.body25:                                       ; preds = %for.cond22
  %14 = load i32, i32* %n, align 4
  %arrayidx26 = getelementptr inbounds [4096 x i8], [4096 x i8]* %cctx, i32 0, i32 %14
  %15 = load i8, i8* %arrayidx26, align 1
  %conv27 = sext i8 %15 to i32
  %call28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i32 %conv27)
  br label %for.inc29

for.inc29:                                        ; preds = %for.body25
  %16 = load i32, i32* %n, align 4
  %inc30 = add i32 %16, 1
  store i32 %inc30, i32* %n, align 4
  br label %for.cond22

for.end31:                                        ; preds = %for.cond22
  %call32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i32 0, i32 0))
  %arraydecay33 = getelementptr inbounds [4096 x i8], [4096 x i8]* %cptx, i32 0, i32 0
  %call34 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.9, i32 0, i32 0), i8* %arraydecay33)
  ret i32 0
}

declare i8* @strcpy(i8* %0, i8* %1) #3

declare i32 @printf(i8* %0, ...) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn writeonly }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, 4
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 4:i32
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00000000000111111111111111111111)

; *****
; For LLVM instruction:
;  %shl = shl i32 %1, 11
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl %0, 11:i32
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %xor = xor i32 %2, %shl
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = shl %1, 11:i32
%3:i32 = xor %0, %2
infer %3

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %d, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add i32 %4, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add1 = add i32 %6, %5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=11111111111111111111111111111100)

; *****
; For LLVM instruction:
;  %shr = lshr i32 %7, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = lshr %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %xor2 = xor i32 %8, %shr
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 2:i32
%3:i32 = xor %0, %2
infer %3

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %e, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add3 = add i32 %10, %9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %d, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add4 = add i32 %12, %11
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %d, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00000000111111111111111111111111)

; *****
; For LLVM instruction:
;  %shl5 = shl i32 %13, 8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl %0, 8:i32
infer %1

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %xor6 = xor i32 %14, %shl5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = shl %1, 8:i32
%3:i32 = xor %0, %2
infer %3

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %f, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add7 = add i32 %16, %15
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %e, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %d, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add8 = add i32 %18, %17
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %e, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=11111111111111110000000000000000)

; *****
; For LLVM instruction:
;  %shr9 = lshr i32 %19, 16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = lshr %0, 16:i32
infer %1

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %d, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %xor10 = xor i32 %20, %shr9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 16:i32
%3:i32 = xor %0, %2
infer %3

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %d, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %g, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add11 = add i32 %22, %21
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %f, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %e, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add12 = add i32 %24, %23
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %f, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00000000001111111111111111111111)

; *****
; For LLVM instruction:
;  %shl13 = shl i32 %25, 10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl %0, 10:i32
infer %1

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %e, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %xor14 = xor i32 %26, %shl13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = shl %1, 10:i32
%3:i32 = xor %0, %2
infer %3

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %e, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %h, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add15 = add i32 %28, %27
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %g, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %f, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add16 = add i32 %30, %29
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %g, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=11111111111111111111111111110000)

; *****
; For LLVM instruction:
;  %shr17 = lshr i32 %31, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = lshr %0, 4:i32
infer %1

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %f, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %xor18 = xor i32 %32, %shr17
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 4:i32
%3:i32 = xor %0, %2
infer %3

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %f, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add19 = add i32 %34, %33
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %h, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %g, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add20 = add i32 %36, %35
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %h, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00000000111111111111111111111111)

; *****
; For LLVM instruction:
;  %shl21 = shl i32 %37, 8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl %0, 8:i32
infer %1

; *****
; For LLVM instruction:
;  %38 = load i32, i32* %g, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %xor22 = xor i32 %38, %shl21
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = shl %1, 8:i32
%3:i32 = xor %0, %2
infer %3

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %g, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %40 = load i32, i32* %b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add23 = add i32 %40, %39
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %41 = load i32, i32* %a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %42 = load i32, i32* %h, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add24 = add i32 %42, %41
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %43 = load i32, i32* %a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=11111111111111111111111000000000)

; *****
; For LLVM instruction:
;  %shr25 = lshr i32 %43, 9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = lshr %0, 9:i32
infer %1

; *****
; For LLVM instruction:
;  %44 = load i32, i32* %h, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %xor26 = xor i32 %44, %shr25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 9:i32
%3:i32 = xor %0, %2
infer %3

; *****
; For LLVM instruction:
;  %45 = load i32, i32* %h, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %46 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add27 = add i32 %46, %45
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %47 = load i32, i32* %b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %48 = load i32, i32* %a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add28 = add i32 %48, %47
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %49 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %49, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %50 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp30 = icmp slt i32 %50, 256
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 256:i32
infer %1

; *****
; For LLVM instruction:
;  %51 = load i32, i32* %flag.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %51, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %52 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %53 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %54 = load i32, i32* %a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add32 = add i32 %54, %53
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %55 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add33 = add nsw i32 %55, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %56 = load i32, i32* %arrayidx34, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %57 = load i32, i32* %b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add35 = add i32 %57, %56
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %58 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add36 = add nsw i32 %58, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %59 = load i32, i32* %arrayidx37, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %60 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add38 = add i32 %60, %59
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %61 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add39 = add nsw i32 %61, 3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 3:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %62 = load i32, i32* %arrayidx40, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %63 = load i32, i32* %d, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add41 = add i32 %63, %62
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %64 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add42 = add nsw i32 %64, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %65 = load i32, i32* %arrayidx43, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %66 = load i32, i32* %e, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add44 = add i32 %66, %65
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %67 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add45 = add nsw i32 %67, 5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 5:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %68 = load i32, i32* %arrayidx46, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %69 = load i32, i32* %f, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add47 = add i32 %69, %68
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %70 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add48 = add nsw i32 %70, 6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 6:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %71 = load i32, i32* %arrayidx49, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %72 = load i32, i32* %g, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add50 = add i32 %72, %71
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %73 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add51 = add nsw i32 %73, 7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 7:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %74 = load i32, i32* %arrayidx52, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %75 = load i32, i32* %h, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add53 = add i32 %75, %74
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %76 = load i32, i32* %b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00000000000111111111111111111111)

; *****
; For LLVM instruction:
;  %shl54 = shl i32 %76, 11
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl %0, 11:i32
infer %1

; *****
; For LLVM instruction:
;  %77 = load i32, i32* %a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %xor55 = xor i32 %77, %shl54
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = shl %1, 11:i32
%3:i32 = xor %0, %2
infer %3

; *****
; For LLVM instruction:
;  %78 = load i32, i32* %a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %79 = load i32, i32* %d, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add56 = add i32 %79, %78
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %80 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %81 = load i32, i32* %b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add57 = add i32 %81, %80
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %82 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=11111111111111111111111111111100)

; *****
; For LLVM instruction:
;  %shr58 = lshr i32 %82, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = lshr %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %83 = load i32, i32* %b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %xor59 = xor i32 %83, %shr58
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 2:i32
%3:i32 = xor %0, %2
infer %3

; *****
; For LLVM instruction:
;  %84 = load i32, i32* %b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %85 = load i32, i32* %e, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add60 = add i32 %85, %84
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %86 = load i32, i32* %d, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %87 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add61 = add i32 %87, %86
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %88 = load i32, i32* %d, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00000000111111111111111111111111)

; *****
; For LLVM instruction:
;  %shl62 = shl i32 %88, 8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl %0, 8:i32
infer %1

; *****
; For LLVM instruction:
;  %89 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %xor63 = xor i32 %89, %shl62
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = shl %1, 8:i32
%3:i32 = xor %0, %2
infer %3

; *****
; For LLVM instruction:
;  %90 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %91 = load i32, i32* %f, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add64 = add i32 %91, %90
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %92 = load i32, i32* %e, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %93 = load i32, i32* %d, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add65 = add i32 %93, %92
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %94 = load i32, i32* %e, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=11111111111111110000000000000000)

; *****
; For LLVM instruction:
;  %shr66 = lshr i32 %94, 16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = lshr %0, 16:i32
infer %1

; *****
; For LLVM instruction:
;  %95 = load i32, i32* %d, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %xor67 = xor i32 %95, %shr66
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 16:i32
%3:i32 = xor %0, %2
infer %3

; *****
; For LLVM instruction:
;  %96 = load i32, i32* %d, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %97 = load i32, i32* %g, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add68 = add i32 %97, %96
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %98 = load i32, i32* %f, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %99 = load i32, i32* %e, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add69 = add i32 %99, %98
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %100 = load i32, i32* %f, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00000000001111111111111111111111)

; *****
; For LLVM instruction:
;  %shl70 = shl i32 %100, 10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl %0, 10:i32
infer %1

; *****
; For LLVM instruction:
;  %101 = load i32, i32* %e, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %xor71 = xor i32 %101, %shl70
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = shl %1, 10:i32
%3:i32 = xor %0, %2
infer %3

; *****
; For LLVM instruction:
;  %102 = load i32, i32* %e, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %103 = load i32, i32* %h, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add72 = add i32 %103, %102
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %104 = load i32, i32* %g, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %105 = load i32, i32* %f, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add73 = add i32 %105, %104
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %106 = load i32, i32* %g, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=11111111111111111111111111110000)

; *****
; For LLVM instruction:
;  %shr74 = lshr i32 %106, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = lshr %0, 4:i32
infer %1

; *****
; For LLVM instruction:
;  %107 = load i32, i32* %f, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %xor75 = xor i32 %107, %shr74
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 4:i32
%3:i32 = xor %0, %2
infer %3

; *****
; For LLVM instruction:
;  %108 = load i32, i32* %f, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %109 = load i32, i32* %a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add76 = add i32 %109, %108
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %110 = load i32, i32* %h, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %111 = load i32, i32* %g, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add77 = add i32 %111, %110
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %112 = load i32, i32* %h, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00000000111111111111111111111111)

; *****
; For LLVM instruction:
;  %shl78 = shl i32 %112, 8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl %0, 8:i32
infer %1

; *****
; For LLVM instruction:
;  %113 = load i32, i32* %g, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %xor79 = xor i32 %113, %shl78
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = shl %1, 8:i32
%3:i32 = xor %0, %2
infer %3

; *****
; For LLVM instruction:
;  %114 = load i32, i32* %g, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %115 = load i32, i32* %b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add80 = add i32 %115, %114
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %116 = load i32, i32* %a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %117 = load i32, i32* %h, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add81 = add i32 %117, %116
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %118 = load i32, i32* %a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=11111111111111111111111000000000)

; *****
; For LLVM instruction:
;  %shr82 = lshr i32 %118, 9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = lshr %0, 9:i32
infer %1

; *****
; For LLVM instruction:
;  %119 = load i32, i32* %h, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %xor83 = xor i32 %119, %shr82
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 9:i32
%3:i32 = xor %0, %2
infer %3

; *****
; For LLVM instruction:
;  %120 = load i32, i32* %h, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %121 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add84 = add i32 %121, %120
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %122 = load i32, i32* %b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %123 = load i32, i32* %a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add85 = add i32 %123, %122
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %124 = load i32, i32* %a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %125 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %126 = load i32, i32* %b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %127 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add87 = add nsw i32 %127, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %128 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %129 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add89 = add nsw i32 %129, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %130 = load i32, i32* %d, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %131 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add91 = add nsw i32 %131, 3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 3:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %132 = load i32, i32* %e, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %133 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add93 = add nsw i32 %133, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %134 = load i32, i32* %f, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %135 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add95 = add nsw i32 %135, 5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 5:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %136 = load i32, i32* %g, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %137 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add97 = add nsw i32 %137, 6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 6:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %138 = load i32, i32* %h, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %139 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add99 = add nsw i32 %139, 7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 7:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %140 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add102 = add nsw i32 %140, 8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 8:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %141 = load i32, i32* %flag.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool104 = icmp ne i32 %141, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %142 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp107 = icmp slt i32 %142, 256
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 256:i32
infer %1

; *****
; For LLVM instruction:
;  %143 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %144 = load i32, i32* %arrayidx109, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %145 = load i32, i32* %a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add110 = add i32 %145, %144
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %146 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add111 = add nsw i32 %146, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %147 = load i32, i32* %arrayidx112, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %148 = load i32, i32* %b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add113 = add i32 %148, %147
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %149 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add114 = add nsw i32 %149, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %150 = load i32, i32* %arrayidx115, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %151 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add116 = add i32 %151, %150
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %152 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add117 = add nsw i32 %152, 3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 3:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %153 = load i32, i32* %arrayidx118, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %154 = load i32, i32* %d, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add119 = add i32 %154, %153
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %155 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add120 = add nsw i32 %155, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %156 = load i32, i32* %arrayidx121, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %157 = load i32, i32* %e, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add122 = add i32 %157, %156
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %158 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add123 = add nsw i32 %158, 5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 5:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %159 = load i32, i32* %arrayidx124, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %160 = load i32, i32* %f, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add125 = add i32 %160, %159
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %161 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add126 = add nsw i32 %161, 6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 6:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %162 = load i32, i32* %arrayidx127, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %163 = load i32, i32* %g, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add128 = add i32 %163, %162
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %164 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add129 = add nsw i32 %164, 7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 7:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %165 = load i32, i32* %arrayidx130, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %166 = load i32, i32* %h, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add131 = add i32 %166, %165
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %167 = load i32, i32* %b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00000000000111111111111111111111)

; *****
; For LLVM instruction:
;  %shl132 = shl i32 %167, 11
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl %0, 11:i32
infer %1

; *****
; For LLVM instruction:
;  %168 = load i32, i32* %a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %xor133 = xor i32 %168, %shl132
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = shl %1, 11:i32
%3:i32 = xor %0, %2
infer %3

; *****
; For LLVM instruction:
;  %169 = load i32, i32* %a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %170 = load i32, i32* %d, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add134 = add i32 %170, %169
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %171 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %172 = load i32, i32* %b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add135 = add i32 %172, %171
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %173 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=11111111111111111111111111111100)

; *****
; For LLVM instruction:
;  %shr136 = lshr i32 %173, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = lshr %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %174 = load i32, i32* %b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %xor137 = xor i32 %174, %shr136
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 2:i32
%3:i32 = xor %0, %2
infer %3

; *****
; For LLVM instruction:
;  %175 = load i32, i32* %b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %176 = load i32, i32* %e, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add138 = add i32 %176, %175
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %177 = load i32, i32* %d, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %178 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add139 = add i32 %178, %177
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %179 = load i32, i32* %d, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00000000111111111111111111111111)

; *****
; For LLVM instruction:
;  %shl140 = shl i32 %179, 8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl %0, 8:i32
infer %1

; *****
; For LLVM instruction:
;  %180 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %xor141 = xor i32 %180, %shl140
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = shl %1, 8:i32
%3:i32 = xor %0, %2
infer %3

; *****
; For LLVM instruction:
;  %181 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %182 = load i32, i32* %f, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add142 = add i32 %182, %181
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %183 = load i32, i32* %e, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %184 = load i32, i32* %d, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add143 = add i32 %184, %183
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %185 = load i32, i32* %e, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=11111111111111110000000000000000)

; *****
; For LLVM instruction:
;  %shr144 = lshr i32 %185, 16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = lshr %0, 16:i32
infer %1

; *****
; For LLVM instruction:
;  %186 = load i32, i32* %d, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %xor145 = xor i32 %186, %shr144
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 16:i32
%3:i32 = xor %0, %2
infer %3

; *****
; For LLVM instruction:
;  %187 = load i32, i32* %d, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %188 = load i32, i32* %g, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add146 = add i32 %188, %187
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %189 = load i32, i32* %f, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %190 = load i32, i32* %e, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add147 = add i32 %190, %189
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %191 = load i32, i32* %f, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00000000001111111111111111111111)

; *****
; For LLVM instruction:
;  %shl148 = shl i32 %191, 10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl %0, 10:i32
infer %1

; *****
; For LLVM instruction:
;  %192 = load i32, i32* %e, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %xor149 = xor i32 %192, %shl148
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = shl %1, 10:i32
%3:i32 = xor %0, %2
infer %3

; *****
; For LLVM instruction:
;  %193 = load i32, i32* %e, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %194 = load i32, i32* %h, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add150 = add i32 %194, %193
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %195 = load i32, i32* %g, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %196 = load i32, i32* %f, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add151 = add i32 %196, %195
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %197 = load i32, i32* %g, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=11111111111111111111111111110000)

; *****
; For LLVM instruction:
;  %shr152 = lshr i32 %197, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = lshr %0, 4:i32
infer %1

; *****
; For LLVM instruction:
;  %198 = load i32, i32* %f, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %xor153 = xor i32 %198, %shr152
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 4:i32
%3:i32 = xor %0, %2
infer %3

; *****
; For LLVM instruction:
;  %199 = load i32, i32* %f, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %200 = load i32, i32* %a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add154 = add i32 %200, %199
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %201 = load i32, i32* %h, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %202 = load i32, i32* %g, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add155 = add i32 %202, %201
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %203 = load i32, i32* %h, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00000000111111111111111111111111)

; *****
; For LLVM instruction:
;  %shl156 = shl i32 %203, 8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl %0, 8:i32
infer %1

; *****
; For LLVM instruction:
;  %204 = load i32, i32* %g, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %xor157 = xor i32 %204, %shl156
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = shl %1, 8:i32
%3:i32 = xor %0, %2
infer %3

; *****
; For LLVM instruction:
;  %205 = load i32, i32* %g, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %206 = load i32, i32* %b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add158 = add i32 %206, %205
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %207 = load i32, i32* %a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %208 = load i32, i32* %h, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add159 = add i32 %208, %207
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %209 = load i32, i32* %a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=11111111111111111111111000000000)

; *****
; For LLVM instruction:
;  %shr160 = lshr i32 %209, 9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = lshr %0, 9:i32
infer %1

; *****
; For LLVM instruction:
;  %210 = load i32, i32* %h, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %xor161 = xor i32 %210, %shr160
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 9:i32
%3:i32 = xor %0, %2
infer %3

; *****
; For LLVM instruction:
;  %211 = load i32, i32* %h, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %212 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add162 = add i32 %212, %211
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %213 = load i32, i32* %b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %214 = load i32, i32* %a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add163 = add i32 %214, %213
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %215 = load i32, i32* %a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %216 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %217 = load i32, i32* %b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %218 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add165 = add nsw i32 %218, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %219 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %220 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add167 = add nsw i32 %220, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %221 = load i32, i32* %d, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %222 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add169 = add nsw i32 %222, 3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 3:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %223 = load i32, i32* %e, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %224 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add171 = add nsw i32 %224, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %225 = load i32, i32* %f, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %226 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add173 = add nsw i32 %226, 5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 5:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %227 = load i32, i32* %g, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %228 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add175 = add nsw i32 %228, 6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 6:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %229 = load i32, i32* %h, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %230 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add177 = add nsw i32 %230, 7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 7:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %231 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add180 = add nsw i32 %231, 8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 8:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 4:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0 (demandedBits=00000000000111111111111111111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2097151
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = shl %0, 11:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2048
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = shl %1, 11:i32
%3:i32 = xor %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = shl %0, 11:i32

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 2:i32
%3:i32 = xor %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870912
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = lshr %0, 2:i32

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0 (demandedBits=00000000111111111111111111111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 16777215
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = shl %0, 8:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -256
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = shl %1, 8:i32
%3:i32 = xor %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = shl %0, 8:i32

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0 (demandedBits=00000000001111111111111111111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4194303
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = shl %0, 10:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1024
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = shl %1, 10:i32
%3:i32 = xor %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = shl %0, 10:i32

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0 (demandedBits=11111111111111111111111111110000)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -16
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = lshr %0, 4:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435455
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 4:i32
%3:i32 = xor %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 134217728
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = lshr %0, 4:i32

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0 (demandedBits=11111111111111111111111000000000)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -512
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = lshr %0, 9:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 8388607
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %1, 9:i32
%3:i32 = xor %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4194304
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = lshr %0, 9:i32

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 256:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 2:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 2
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741826
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 3:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 3
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 4:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 4
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 5
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 5:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 5
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741829
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 6:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 6
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 8
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 7:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 7
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 11
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 8:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 8
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 10
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for randinit()

; entering Souper's runOnFunction() for iRandom()

; ModuleID = './The_ISAAC_Cipher.c.bc'
source_filename = "./The_ISAAC_Cipher.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@cc = internal global i32 0, align 4
@bb = internal global i32 0, align 4
@mm = internal global [256 x i32] zeroinitializer, align 16
@aa = internal global i32 0, align 4
@randrsl = hidden global [256 x i32] zeroinitializer, align 16
@randcnt = hidden global i32 0, align 4
@v = hidden global [4096 x i8] zeroinitializer, align 16
@c = hidden global [4096 x i8] zeroinitializer, align 16
@.str = private unnamed_addr constant [20 x i8] c"a Top Secret secret\00", align 1
@.str.1 = private unnamed_addr constant [22 x i8] c"this is my secret key\00", align 1
@.str.2 = private unnamed_addr constant [13 x i8] c"Message: %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [13 x i8] c"Key    : %s\0A\00", align 1
@.str.4 = private unnamed_addr constant [10 x i8] c"XOR    : \00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"%02X\00", align 1
@.str.6 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.7 = private unnamed_addr constant [13 x i8] c"XOR dcr: %s\0A\00", align 1
@.str.8 = private unnamed_addr constant [10 x i8] c"MOD    : \00", align 1
@.str.9 = private unnamed_addr constant [13 x i8] c"MOD dcr: %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @isaac() #0 {
entry:
  %i = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %0 = load i32, i32* @cc, align 4
  %add = add i32 %0, 1
  store i32 %add, i32* @cc, align 4
  %1 = load i32, i32* @bb, align 4
  %2 = load i32, i32* @cc, align 4
  %add1 = add i32 %1, %2
  store i32 %add1, i32* @bb, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %3, 256
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  store i32 %5, i32* %x, align 4
  %6 = load i32, i32* %i, align 4
  %rem = urem i32 %6, 4
  switch i32 %rem, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb2
    i32 2, label %sw.bb4
    i32 3, label %sw.bb7
  ]

sw.bb:                                            ; preds = %for.body
  %7 = load i32, i32* @aa, align 4
  %8 = load i32, i32* @aa, align 4
  %shl = shl i32 %8, 13
  %xor = xor i32 %7, %shl
  store i32 %xor, i32* @aa, align 4
  br label %sw.epilog

sw.bb2:                                           ; preds = %for.body
  %9 = load i32, i32* @aa, align 4
  %10 = load i32, i32* @aa, align 4
  %shr = lshr i32 %10, 6
  %xor3 = xor i32 %9, %shr
  store i32 %xor3, i32* @aa, align 4
  br label %sw.epilog

sw.bb4:                                           ; preds = %for.body
  %11 = load i32, i32* @aa, align 4
  %12 = load i32, i32* @aa, align 4
  %shl5 = shl i32 %12, 2
  %xor6 = xor i32 %11, %shl5
  store i32 %xor6, i32* @aa, align 4
  br label %sw.epilog

sw.bb7:                                           ; preds = %for.body
  %13 = load i32, i32* @aa, align 4
  %14 = load i32, i32* @aa, align 4
  %shr8 = lshr i32 %14, 16
  %xor9 = xor i32 %13, %shr8
  store i32 %xor9, i32* @aa, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %for.body, %sw.bb7, %sw.bb4, %sw.bb2, %sw.bb
  %15 = load i32, i32* %i, align 4
  %add10 = add i32 %15, 128
  %rem11 = urem i32 %add10, 256
  %arrayidx12 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %rem11
  %16 = load i32, i32* %arrayidx12, align 4
  %17 = load i32, i32* @aa, align 4
  %add13 = add i32 %16, %17
  store i32 %add13, i32* @aa, align 4
  %18 = load i32, i32* %x, align 4
  %shr14 = lshr i32 %18, 2
  %rem15 = urem i32 %shr14, 256
  %arrayidx16 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %rem15
  %19 = load i32, i32* %arrayidx16, align 4
  %20 = load i32, i32* @aa, align 4
  %add17 = add i32 %19, %20
  %21 = load i32, i32* @bb, align 4
  %add18 = add i32 %add17, %21
  store i32 %add18, i32* %y, align 4
  %22 = load i32, i32* %i, align 4
  %arrayidx19 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %22
  store i32 %add18, i32* %arrayidx19, align 4
  %23 = load i32, i32* %y, align 4
  %shr20 = lshr i32 %23, 10
  %rem21 = urem i32 %shr20, 256
  %arrayidx22 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %rem21
  %24 = load i32, i32* %arrayidx22, align 4
  %25 = load i32, i32* %x, align 4
  %add23 = add i32 %24, %25
  store i32 %add23, i32* @bb, align 4
  %26 = load i32, i32* %i, align 4
  %arrayidx24 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %26
  store i32 %add23, i32* %arrayidx24, align 4
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %27 = load i32, i32* %i, align 4
  %inc = add i32 %27, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* @randcnt, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @randinit(i32 %flag) #0 {
entry:
  %flag.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %c = alloca i32, align 4
  %d = alloca i32, align 4
  %e = alloca i32, align 4
  %f = alloca i32, align 4
  %g = alloca i32, align 4
  %h = alloca i32, align 4
  store i32 %flag, i32* %flag.addr, align 4
  store i32 0, i32* @cc, align 4
  store i32 0, i32* @bb, align 4
  store i32 0, i32* @aa, align 4
  store i32 -1640531527, i32* %h, align 4
  store i32 -1640531527, i32* %g, align 4
  store i32 -1640531527, i32* %f, align 4
  store i32 -1640531527, i32* %e, align 4
  store i32 -1640531527, i32* %d, align 4
  store i32 -1640531527, i32* %c, align 4
  store i32 -1640531527, i32* %b, align 4
  store i32 -1640531527, i32* %a, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %b, align 4
  %shl = shl i32 %1, 11
  %2 = load i32, i32* %a, align 4
  %xor = xor i32 %2, %shl
  store i32 %xor, i32* %a, align 4
  %3 = load i32, i32* %a, align 4
  %4 = load i32, i32* %d, align 4
  %add = add i32 %4, %3
  store i32 %add, i32* %d, align 4
  %5 = load i32, i32* %c, align 4
  %6 = load i32, i32* %b, align 4
  %add1 = add i32 %6, %5
  store i32 %add1, i32* %b, align 4
  %7 = load i32, i32* %c, align 4
  %shr = lshr i32 %7, 2
  %8 = load i32, i32* %b, align 4
  %xor2 = xor i32 %8, %shr
  store i32 %xor2, i32* %b, align 4
  %9 = load i32, i32* %b, align 4
  %10 = load i32, i32* %e, align 4
  %add3 = add i32 %10, %9
  store i32 %add3, i32* %e, align 4
  %11 = load i32, i32* %d, align 4
  %12 = load i32, i32* %c, align 4
  %add4 = add i32 %12, %11
  store i32 %add4, i32* %c, align 4
  %13 = load i32, i32* %d, align 4
  %shl5 = shl i32 %13, 8
  %14 = load i32, i32* %c, align 4
  %xor6 = xor i32 %14, %shl5
  store i32 %xor6, i32* %c, align 4
  %15 = load i32, i32* %c, align 4
  %16 = load i32, i32* %f, align 4
  %add7 = add i32 %16, %15
  store i32 %add7, i32* %f, align 4
  %17 = load i32, i32* %e, align 4
  %18 = load i32, i32* %d, align 4
  %add8 = add i32 %18, %17
  store i32 %add8, i32* %d, align 4
  %19 = load i32, i32* %e, align 4
  %shr9 = lshr i32 %19, 16
  %20 = load i32, i32* %d, align 4
  %xor10 = xor i32 %20, %shr9
  store i32 %xor10, i32* %d, align 4
  %21 = load i32, i32* %d, align 4
  %22 = load i32, i32* %g, align 4
  %add11 = add i32 %22, %21
  store i32 %add11, i32* %g, align 4
  %23 = load i32, i32* %f, align 4
  %24 = load i32, i32* %e, align 4
  %add12 = add i32 %24, %23
  store i32 %add12, i32* %e, align 4
  %25 = load i32, i32* %f, align 4
  %shl13 = shl i32 %25, 10
  %26 = load i32, i32* %e, align 4
  %xor14 = xor i32 %26, %shl13
  store i32 %xor14, i32* %e, align 4
  %27 = load i32, i32* %e, align 4
  %28 = load i32, i32* %h, align 4
  %add15 = add i32 %28, %27
  store i32 %add15, i32* %h, align 4
  %29 = load i32, i32* %g, align 4
  %30 = load i32, i32* %f, align 4
  %add16 = add i32 %30, %29
  store i32 %add16, i32* %f, align 4
  %31 = load i32, i32* %g, align 4
  %shr17 = lshr i32 %31, 4
  %32 = load i32, i32* %f, align 4
  %xor18 = xor i32 %32, %shr17
  store i32 %xor18, i32* %f, align 4
  %33 = load i32, i32* %f, align 4
  %34 = load i32, i32* %a, align 4
  %add19 = add i32 %34, %33
  store i32 %add19, i32* %a, align 4
  %35 = load i32, i32* %h, align 4
  %36 = load i32, i32* %g, align 4
  %add20 = add i32 %36, %35
  store i32 %add20, i32* %g, align 4
  %37 = load i32, i32* %h, align 4
  %shl21 = shl i32 %37, 8
  %38 = load i32, i32* %g, align 4
  %xor22 = xor i32 %38, %shl21
  store i32 %xor22, i32* %g, align 4
  %39 = load i32, i32* %g, align 4
  %40 = load i32, i32* %b, align 4
  %add23 = add i32 %40, %39
  store i32 %add23, i32* %b, align 4
  %41 = load i32, i32* %a, align 4
  %42 = load i32, i32* %h, align 4
  %add24 = add i32 %42, %41
  store i32 %add24, i32* %h, align 4
  %43 = load i32, i32* %a, align 4
  %shr25 = lshr i32 %43, 9
  %44 = load i32, i32* %h, align 4
  %xor26 = xor i32 %44, %shr25
  store i32 %xor26, i32* %h, align 4
  %45 = load i32, i32* %h, align 4
  %46 = load i32, i32* %c, align 4
  %add27 = add i32 %46, %45
  store i32 %add27, i32* %c, align 4
  %47 = load i32, i32* %b, align 4
  %48 = load i32, i32* %a, align 4
  %add28 = add i32 %48, %47
  store i32 %add28, i32* %a, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %49 = load i32, i32* %i, align 4
  %inc = add nsw i32 %49, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond29

for.cond29:                                       ; preds = %for.inc101, %for.end
  %50 = load i32, i32* %i, align 4
  %cmp30 = icmp slt i32 %50, 256
  br i1 %cmp30, label %for.body31, label %for.end103

for.body31:                                       ; preds = %for.cond29
  %51 = load i32, i32* %flag.addr, align 4
  %tobool = icmp ne i32 %51, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body31
  %52 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %52
  %53 = load i32, i32* %arrayidx, align 4
  %54 = load i32, i32* %a, align 4
  %add32 = add i32 %54, %53
  store i32 %add32, i32* %a, align 4
  %55 = load i32, i32* %i, align 4
  %add33 = add nsw i32 %55, 1
  %arrayidx34 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %add33
  %56 = load i32, i32* %arrayidx34, align 4
  %57 = load i32, i32* %b, align 4
  %add35 = add i32 %57, %56
  store i32 %add35, i32* %b, align 4
  %58 = load i32, i32* %i, align 4
  %add36 = add nsw i32 %58, 2
  %arrayidx37 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %add36
  %59 = load i32, i32* %arrayidx37, align 4
  %60 = load i32, i32* %c, align 4
  %add38 = add i32 %60, %59
  store i32 %add38, i32* %c, align 4
  %61 = load i32, i32* %i, align 4
  %add39 = add nsw i32 %61, 3
  %arrayidx40 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %add39
  %62 = load i32, i32* %arrayidx40, align 4
  %63 = load i32, i32* %d, align 4
  %add41 = add i32 %63, %62
  store i32 %add41, i32* %d, align 4
  %64 = load i32, i32* %i, align 4
  %add42 = add nsw i32 %64, 4
  %arrayidx43 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %add42
  %65 = load i32, i32* %arrayidx43, align 4
  %66 = load i32, i32* %e, align 4
  %add44 = add i32 %66, %65
  store i32 %add44, i32* %e, align 4
  %67 = load i32, i32* %i, align 4
  %add45 = add nsw i32 %67, 5
  %arrayidx46 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %add45
  %68 = load i32, i32* %arrayidx46, align 4
  %69 = load i32, i32* %f, align 4
  %add47 = add i32 %69, %68
  store i32 %add47, i32* %f, align 4
  %70 = load i32, i32* %i, align 4
  %add48 = add nsw i32 %70, 6
  %arrayidx49 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %add48
  %71 = load i32, i32* %arrayidx49, align 4
  %72 = load i32, i32* %g, align 4
  %add50 = add i32 %72, %71
  store i32 %add50, i32* %g, align 4
  %73 = load i32, i32* %i, align 4
  %add51 = add nsw i32 %73, 7
  %arrayidx52 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %add51
  %74 = load i32, i32* %arrayidx52, align 4
  %75 = load i32, i32* %h, align 4
  %add53 = add i32 %75, %74
  store i32 %add53, i32* %h, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body31
  %76 = load i32, i32* %b, align 4
  %shl54 = shl i32 %76, 11
  %77 = load i32, i32* %a, align 4
  %xor55 = xor i32 %77, %shl54
  store i32 %xor55, i32* %a, align 4
  %78 = load i32, i32* %a, align 4
  %79 = load i32, i32* %d, align 4
  %add56 = add i32 %79, %78
  store i32 %add56, i32* %d, align 4
  %80 = load i32, i32* %c, align 4
  %81 = load i32, i32* %b, align 4
  %add57 = add i32 %81, %80
  store i32 %add57, i32* %b, align 4
  %82 = load i32, i32* %c, align 4
  %shr58 = lshr i32 %82, 2
  %83 = load i32, i32* %b, align 4
  %xor59 = xor i32 %83, %shr58
  store i32 %xor59, i32* %b, align 4
  %84 = load i32, i32* %b, align 4
  %85 = load i32, i32* %e, align 4
  %add60 = add i32 %85, %84
  store i32 %add60, i32* %e, align 4
  %86 = load i32, i32* %d, align 4
  %87 = load i32, i32* %c, align 4
  %add61 = add i32 %87, %86
  store i32 %add61, i32* %c, align 4
  %88 = load i32, i32* %d, align 4
  %shl62 = shl i32 %88, 8
  %89 = load i32, i32* %c, align 4
  %xor63 = xor i32 %89, %shl62
  store i32 %xor63, i32* %c, align 4
  %90 = load i32, i32* %c, align 4
  %91 = load i32, i32* %f, align 4
  %add64 = add i32 %91, %90
  store i32 %add64, i32* %f, align 4
  %92 = load i32, i32* %e, align 4
  %93 = load i32, i32* %d, align 4
  %add65 = add i32 %93, %92
  store i32 %add65, i32* %d, align 4
  %94 = load i32, i32* %e, align 4
  %shr66 = lshr i32 %94, 16
  %95 = load i32, i32* %d, align 4
  %xor67 = xor i32 %95, %shr66
  store i32 %xor67, i32* %d, align 4
  %96 = load i32, i32* %d, align 4
  %97 = load i32, i32* %g, align 4
  %add68 = add i32 %97, %96
  store i32 %add68, i32* %g, align 4
  %98 = load i32, i32* %f, align 4
  %99 = load i32, i32* %e, align 4
  %add69 = add i32 %99, %98
  store i32 %add69, i32* %e, align 4
  %100 = load i32, i32* %f, align 4
  %shl70 = shl i32 %100, 10
  %101 = load i32, i32* %e, align 4
  %xor71 = xor i32 %101, %shl70
  store i32 %xor71, i32* %e, align 4
  %102 = load i32, i32* %e, align 4
  %103 = load i32, i32* %h, align 4
  %add72 = add i32 %103, %102
  store i32 %add72, i32* %h, align 4
  %104 = load i32, i32* %g, align 4
  %105 = load i32, i32* %f, align 4
  %add73 = add i32 %105, %104
  store i32 %add73, i32* %f, align 4
  %106 = load i32, i32* %g, align 4
  %shr74 = lshr i32 %106, 4
  %107 = load i32, i32* %f, align 4
  %xor75 = xor i32 %107, %shr74
  store i32 %xor75, i32* %f, align 4
  %108 = load i32, i32* %f, align 4
  %109 = load i32, i32* %a, align 4
  %add76 = add i32 %109, %108
  store i32 %add76, i32* %a, align 4
  %110 = load i32, i32* %h, align 4
  %111 = load i32, i32* %g, align 4
  %add77 = add i32 %111, %110
  store i32 %add77, i32* %g, align 4
  %112 = load i32, i32* %h, align 4
  %shl78 = shl i32 %112, 8
  %113 = load i32, i32* %g, align 4
  %xor79 = xor i32 %113, %shl78
  store i32 %xor79, i32* %g, align 4
  %114 = load i32, i32* %g, align 4
  %115 = load i32, i32* %b, align 4
  %add80 = add i32 %115, %114
  store i32 %add80, i32* %b, align 4
  %116 = load i32, i32* %a, align 4
  %117 = load i32, i32* %h, align 4
  %add81 = add i32 %117, %116
  store i32 %add81, i32* %h, align 4
  %118 = load i32, i32* %a, align 4
  %shr82 = lshr i32 %118, 9
  %119 = load i32, i32* %h, align 4
  %xor83 = xor i32 %119, %shr82
  store i32 %xor83, i32* %h, align 4
  %120 = load i32, i32* %h, align 4
  %121 = load i32, i32* %c, align 4
  %add84 = add i32 %121, %120
  store i32 %add84, i32* %c, align 4
  %122 = load i32, i32* %b, align 4
  %123 = load i32, i32* %a, align 4
  %add85 = add i32 %123, %122
  store i32 %add85, i32* %a, align 4
  %124 = load i32, i32* %a, align 4
  %125 = load i32, i32* %i, align 4
  %arrayidx86 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %125
  store i32 %124, i32* %arrayidx86, align 4
  %126 = load i32, i32* %b, align 4
  %127 = load i32, i32* %i, align 4
  %add87 = add nsw i32 %127, 1
  %arrayidx88 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add87
  store i32 %126, i32* %arrayidx88, align 4
  %128 = load i32, i32* %c, align 4
  %129 = load i32, i32* %i, align 4
  %add89 = add nsw i32 %129, 2
  %arrayidx90 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add89
  store i32 %128, i32* %arrayidx90, align 4
  %130 = load i32, i32* %d, align 4
  %131 = load i32, i32* %i, align 4
  %add91 = add nsw i32 %131, 3
  %arrayidx92 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add91
  store i32 %130, i32* %arrayidx92, align 4
  %132 = load i32, i32* %e, align 4
  %133 = load i32, i32* %i, align 4
  %add93 = add nsw i32 %133, 4
  %arrayidx94 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add93
  store i32 %132, i32* %arrayidx94, align 4
  %134 = load i32, i32* %f, align 4
  %135 = load i32, i32* %i, align 4
  %add95 = add nsw i32 %135, 5
  %arrayidx96 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add95
  store i32 %134, i32* %arrayidx96, align 4
  %136 = load i32, i32* %g, align 4
  %137 = load i32, i32* %i, align 4
  %add97 = add nsw i32 %137, 6
  %arrayidx98 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add97
  store i32 %136, i32* %arrayidx98, align 4
  %138 = load i32, i32* %h, align 4
  %139 = load i32, i32* %i, align 4
  %add99 = add nsw i32 %139, 7
  %arrayidx100 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add99
  store i32 %138, i32* %arrayidx100, align 4
  br label %for.inc101

for.inc101:                                       ; preds = %if.end
  %140 = load i32, i32* %i, align 4
  %add102 = add nsw i32 %140, 8
  store i32 %add102, i32* %i, align 4
  br label %for.cond29

for.end103:                                       ; preds = %for.cond29
  %141 = load i32, i32* %flag.addr, align 4
  %tobool104 = icmp ne i32 %141, 0
  br i1 %tobool104, label %if.then105, label %if.end182

if.then105:                                       ; preds = %for.end103
  store i32 0, i32* %i, align 4
  br label %for.cond106

for.cond106:                                      ; preds = %for.inc179, %if.then105
  %142 = load i32, i32* %i, align 4
  %cmp107 = icmp slt i32 %142, 256
  br i1 %cmp107, label %for.body108, label %for.end181

for.body108:                                      ; preds = %for.cond106
  %143 = load i32, i32* %i, align 4
  %arrayidx109 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %143
  %144 = load i32, i32* %arrayidx109, align 4
  %145 = load i32, i32* %a, align 4
  %add110 = add i32 %145, %144
  store i32 %add110, i32* %a, align 4
  %146 = load i32, i32* %i, align 4
  %add111 = add nsw i32 %146, 1
  %arrayidx112 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add111
  %147 = load i32, i32* %arrayidx112, align 4
  %148 = load i32, i32* %b, align 4
  %add113 = add i32 %148, %147
  store i32 %add113, i32* %b, align 4
  %149 = load i32, i32* %i, align 4
  %add114 = add nsw i32 %149, 2
  %arrayidx115 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add114
  %150 = load i32, i32* %arrayidx115, align 4
  %151 = load i32, i32* %c, align 4
  %add116 = add i32 %151, %150
  store i32 %add116, i32* %c, align 4
  %152 = load i32, i32* %i, align 4
  %add117 = add nsw i32 %152, 3
  %arrayidx118 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add117
  %153 = load i32, i32* %arrayidx118, align 4
  %154 = load i32, i32* %d, align 4
  %add119 = add i32 %154, %153
  store i32 %add119, i32* %d, align 4
  %155 = load i32, i32* %i, align 4
  %add120 = add nsw i32 %155, 4
  %arrayidx121 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add120
  %156 = load i32, i32* %arrayidx121, align 4
  %157 = load i32, i32* %e, align 4
  %add122 = add i32 %157, %156
  store i32 %add122, i32* %e, align 4
  %158 = load i32, i32* %i, align 4
  %add123 = add nsw i32 %158, 5
  %arrayidx124 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add123
  %159 = load i32, i32* %arrayidx124, align 4
  %160 = load i32, i32* %f, align 4
  %add125 = add i32 %160, %159
  store i32 %add125, i32* %f, align 4
  %161 = load i32, i32* %i, align 4
  %add126 = add nsw i32 %161, 6
  %arrayidx127 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add126
  %162 = load i32, i32* %arrayidx127, align 4
  %163 = load i32, i32* %g, align 4
  %add128 = add i32 %163, %162
  store i32 %add128, i32* %g, align 4
  %164 = load i32, i32* %i, align 4
  %add129 = add nsw i32 %164, 7
  %arrayidx130 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add129
  %165 = load i32, i32* %arrayidx130, align 4
  %166 = load i32, i32* %h, align 4
  %add131 = add i32 %166, %165
  store i32 %add131, i32* %h, align 4
  %167 = load i32, i32* %b, align 4
  %shl132 = shl i32 %167, 11
  %168 = load i32, i32* %a, align 4
  %xor133 = xor i32 %168, %shl132
  store i32 %xor133, i32* %a, align 4
  %169 = load i32, i32* %a, align 4
  %170 = load i32, i32* %d, align 4
  %add134 = add i32 %170, %169
  store i32 %add134, i32* %d, align 4
  %171 = load i32, i32* %c, align 4
  %172 = load i32, i32* %b, align 4
  %add135 = add i32 %172, %171
  store i32 %add135, i32* %b, align 4
  %173 = load i32, i32* %c, align 4
  %shr136 = lshr i32 %173, 2
  %174 = load i32, i32* %b, align 4
  %xor137 = xor i32 %174, %shr136
  store i32 %xor137, i32* %b, align 4
  %175 = load i32, i32* %b, align 4
  %176 = load i32, i32* %e, align 4
  %add138 = add i32 %176, %175
  store i32 %add138, i32* %e, align 4
  %177 = load i32, i32* %d, align 4
  %178 = load i32, i32* %c, align 4
  %add139 = add i32 %178, %177
  store i32 %add139, i32* %c, align 4
  %179 = load i32, i32* %d, align 4
  %shl140 = shl i32 %179, 8
  %180 = load i32, i32* %c, align 4
  %xor141 = xor i32 %180, %shl140
  store i32 %xor141, i32* %c, align 4
  %181 = load i32, i32* %c, align 4
  %182 = load i32, i32* %f, align 4
  %add142 = add i32 %182, %181
  store i32 %add142, i32* %f, align 4
  %183 = load i32, i32* %e, align 4
  %184 = load i32, i32* %d, align 4
  %add143 = add i32 %184, %183
  store i32 %add143, i32* %d, align 4
  %185 = load i32, i32* %e, align 4
  %shr144 = lshr i32 %185, 16
  %186 = load i32, i32* %d, align 4
  %xor145 = xor i32 %186, %shr144
  store i32 %xor145, i32* %d, align 4
  %187 = load i32, i32* %d, align 4
  %188 = load i32, i32* %g, align 4
  %add146 = add i32 %188, %187
  store i32 %add146, i32* %g, align 4
  %189 = load i32, i32* %f, align 4
  %190 = load i32, i32* %e, align 4
  %add147 = add i32 %190, %189
  store i32 %add147, i32* %e, align 4
  %191 = load i32, i32* %f, align 4
  %shl148 = shl i32 %191, 10
  %192 = load i32, i32* %e, align 4
  %xor149 = xor i32 %192, %shl148
  store i32 %xor149, i32* %e, align 4
  %193 = load i32, i32* %e, align 4
  %194 = load i32, i32* %h, align 4
  %add150 = add i32 %194, %193
  store i32 %add150, i32* %h, align 4
  %195 = load i32, i32* %g, align 4
  %196 = load i32, i32* %f, align 4
  %add151 = add i32 %196, %195
  store i32 %add151, i32* %f, align 4
  %197 = load i32, i32* %g, align 4
  %shr152 = lshr i32 %197, 4
  %198 = load i32, i32* %f, align 4
  %xor153 = xor i32 %198, %shr152
  store i32 %xor153, i32* %f, align 4
  %199 = load i32, i32* %f, align 4
  %200 = load i32, i32* %a, align 4
  %add154 = add i32 %200, %199
  store i32 %add154, i32* %a, align 4
  %201 = load i32, i32* %h, align 4
  %202 = load i32, i32* %g, align 4
  %add155 = add i32 %202, %201
  store i32 %add155, i32* %g, align 4
  %203 = load i32, i32* %h, align 4
  %shl156 = shl i32 %203, 8
  %204 = load i32, i32* %g, align 4
  %xor157 = xor i32 %204, %shl156
  store i32 %xor157, i32* %g, align 4
  %205 = load i32, i32* %g, align 4
  %206 = load i32, i32* %b, align 4
  %add158 = add i32 %206, %205
  store i32 %add158, i32* %b, align 4
  %207 = load i32, i32* %a, align 4
  %208 = load i32, i32* %h, align 4
  %add159 = add i32 %208, %207
  store i32 %add159, i32* %h, align 4
  %209 = load i32, i32* %a, align 4
  %shr160 = lshr i32 %209, 9
  %210 = load i32, i32* %h, align 4
  %xor161 = xor i32 %210, %shr160
  store i32 %xor161, i32* %h, align 4
  %211 = load i32, i32* %h, align 4
  %212 = load i32, i32* %c, align 4
  %add162 = add i32 %212, %211
  store i32 %add162, i32* %c, align 4
  %213 = load i32, i32* %b, align 4
  %214 = load i32, i32* %a, align 4
  %add163 = add i32 %214, %213
  store i32 %add163, i32* %a, align 4
  %215 = load i32, i32* %a, align 4
  %216 = load i32, i32* %i, align 4
  %arrayidx164 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %216
  store i32 %215, i32* %arrayidx164, align 4
  %217 = load i32, i32* %b, align 4
  %218 = load i32, i32* %i, align 4
  %add165 = add nsw i32 %218, 1
  %arrayidx166 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add165
  store i32 %217, i32* %arrayidx166, align 4
  %219 = load i32, i32* %c, align 4
  %220 = load i32, i32* %i, align 4
  %add167 = add nsw i32 %220, 2
  %arrayidx168 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add167
  store i32 %219, i32* %arrayidx168, align 4
  %221 = load i32, i32* %d, align 4
  %222 = load i32, i32* %i, align 4
  %add169 = add nsw i32 %222, 3
  %arrayidx170 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add169
  store i32 %221, i32* %arrayidx170, align 4
  %223 = load i32, i32* %e, align 4
  %224 = load i32, i32* %i, align 4
  %add171 = add nsw i32 %224, 4
  %arrayidx172 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add171
  store i32 %223, i32* %arrayidx172, align 4
  %225 = load i32, i32* %f, align 4
  %226 = load i32, i32* %i, align 4
  %add173 = add nsw i32 %226, 5
  %arrayidx174 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add173
  store i32 %225, i32* %arrayidx174, align 4
  %227 = load i32, i32* %g, align 4
  %228 = load i32, i32* %i, align 4
  %add175 = add nsw i32 %228, 6
  %arrayidx176 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add175
  store i32 %227, i32* %arrayidx176, align 4
  %229 = load i32, i32* %h, align 4
  %230 = load i32, i32* %i, align 4
  %add177 = add nsw i32 %230, 7
  %arrayidx178 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add177
  store i32 %229, i32* %arrayidx178, align 4
  br label %for.inc179

for.inc179:                                       ; preds = %for.body108
  %231 = load i32, i32* %i, align 4
  %add180 = add nsw i32 %231, 8
  store i32 %add180, i32* %i, align 4
  br label %for.cond106

for.end181:                                       ; preds = %for.cond106
  br label %if.end182

if.end182:                                        ; preds = %for.end181, %for.end103
  call void @isaac()
  store i32 0, i32* @randcnt, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @iRandom() #0 {
entry:
  %r = alloca i32, align 4
  %0 = load i32, i32* @randcnt, align 4
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %0
  %1 = load i32, i32* %arrayidx, align 4
  store i32 %1, i32* %r, align 4
  %2 = load i32, i32* @randcnt, align 4
  %inc = add i32 %2, 1
  store i32 %inc, i32* @randcnt, align 4
  %3 = load i32, i32* @randcnt, align 4
  %cmp = icmp ugt i32 %3, 255
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @isaac()
  store i32 0, i32* @randcnt, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* %r, align 4
  ret i32 %4
}

; Function Attrs: noinline nounwind optnone
define hidden signext i8 @iRandA() #0 {
entry:
  %call = call i32 @iRandom()
  %rem = urem i32 %call, 95
  %add = add i32 %rem, 32
  %conv = trunc i32 %add to i8
  ret i8 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden void @iSeed(i8* %seed, i32 %flag) #0 {
entry:
  %seed.addr = alloca i8*, align 4
  %flag.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %m = alloca i32, align 4
  store i8* %seed, i8** %seed.addr, align 4
  store i32 %flag, i32* %flag.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %0, 256
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %1
  store i32 0, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %i, align 4
  %inc = add i32 %2, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %3 = load i8*, i8** %seed.addr, align 4
  %call = call i32 @strlen(i8* %3) #4
  store i32 %call, i32* %m, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc8, %for.end
  %4 = load i32, i32* %i, align 4
  %cmp2 = icmp ult i32 %4, 256
  br i1 %cmp2, label %for.body3, label %for.end10

for.body3:                                        ; preds = %for.cond1
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %m, align 4
  %cmp4 = icmp ugt i32 %5, %6
  br i1 %cmp4, label %if.then, label %if.else

if.then:                                          ; preds = %for.body3
  %7 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %7
  store i32 0, i32* %arrayidx5, align 4
  br label %if.end

if.else:                                          ; preds = %for.body3
  %8 = load i8*, i8** %seed.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds i8, i8* %8, i32 %9
  %10 = load i8, i8* %arrayidx6, align 1
  %conv = sext i8 %10 to i32
  %11 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %11
  store i32 %conv, i32* %arrayidx7, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc8

for.inc8:                                         ; preds = %if.end
  %12 = load i32, i32* %i, align 4
  %inc9 = add i32 %12, 1
  store i32 %inc9, i32* %i, align 4
  br label %for.cond1

for.end10:                                        ; preds = %for.cond1
  %13 = load i32, i32* %flag.addr, align 4
  call void @randinit(i32 %13)
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i8* @Vernam(i8* %msg) #0 {
entry:
  %msg.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %l = alloca i32, align 4
  store i8* %msg, i8** %msg.addr, align 4
  %0 = load i8*, i8** %msg.addr, align 4
  %call = call i32 @strlen(i8* %0) #4
  store i32 %call, i32* %l, align 4
  %1 = load i32, i32* %l, align 4
  %add = add i32 %1, 1
  call void @llvm.memset.p0i8.i32(i8* align 16 getelementptr inbounds ([4096 x i8], [4096 x i8]* @v, i32 0, i32 0), i8 0, i32 %add, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %l, align 4
  %cmp = icmp ult i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call1 = call signext i8 @iRandA()
  %conv = sext i8 %call1 to i32
  %4 = load i8*, i8** %msg.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %4, i32 %5
  %6 = load i8, i8* %arrayidx, align 1
  %conv2 = sext i8 %6 to i32
  %xor = xor i32 %conv, %conv2
  %conv3 = trunc i32 %xor to i8
  %7 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds [4096 x i8], [4096 x i8]* @v, i32 0, i32 %7
  store i8 %conv3, i8* %arrayidx4, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %inc = add i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i8* getelementptr inbounds ([4096 x i8], [4096 x i8]* @v, i32 0, i32 0)
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define hidden signext i8 @Caesar(i32 %m, i8 signext %ch, i8 signext %shift, i8 signext %modulo, i8 signext %start) #0 {
entry:
  %m.addr = alloca i32, align 4
  %ch.addr = alloca i8, align 1
  %shift.addr = alloca i8, align 1
  %modulo.addr = alloca i8, align 1
  %start.addr = alloca i8, align 1
  %n = alloca i32, align 4
  store i32 %m, i32* %m.addr, align 4
  store i8 %ch, i8* %ch.addr, align 1
  store i8 %shift, i8* %shift.addr, align 1
  store i8 %modulo, i8* %modulo.addr, align 1
  store i8 %start, i8* %start.addr, align 1
  %0 = load i32, i32* %m.addr, align 4
  %cmp = icmp eq i32 %0, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i8, i8* %shift.addr, align 1
  %conv = sext i8 %1 to i32
  %sub = sub nsw i32 0, %conv
  %conv1 = trunc i32 %sub to i8
  store i8 %conv1, i8* %shift.addr, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i8, i8* %ch.addr, align 1
  %conv2 = sext i8 %2 to i32
  %3 = load i8, i8* %start.addr, align 1
  %conv3 = sext i8 %3 to i32
  %sub4 = sub nsw i32 %conv2, %conv3
  %4 = load i8, i8* %shift.addr, align 1
  %conv5 = sext i8 %4 to i32
  %add = add nsw i32 %sub4, %conv5
  store i32 %add, i32* %n, align 4
  %5 = load i32, i32* %n, align 4
  %6 = load i8, i8* %modulo.addr, align 1
  %conv6 = sext i8 %6 to i32
  %rem = srem i32 %5, %conv6
  store i32 %rem, i32* %n, align 4
  %7 = load i32, i32* %n, align 4
  %cmp7 = icmp slt i32 %7, 0
  br i1 %cmp7, label %if.then9, label %if.end12

if.then9:                                         ; preds = %if.end
  %8 = load i8, i8* %modulo.addr, align 1
  %conv10 = sext i8 %8 to i32
  %9 = load i32, i32* %n, align 4
  %add11 = add nsw i32 %9, %conv10
  store i32 %add11, i32* %n, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then9, %if.end
  %10 = load i8, i8* %start.addr, align 1
  %conv13 = sext i8 %10 to i32
  %11 = load i32, i32* %n, align 4
  %add14 = add nsw i32 %conv13, %11
  %conv15 = trunc i32 %add14 to i8
  ret i8 %conv15
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @CaesarStr(i32 %m, i8* %msg, i8 signext %modulo, i8 signext %start) #0 {
entry:
  %m.addr = alloca i32, align 4
  %msg.addr = alloca i8*, align 4
  %modulo.addr = alloca i8, align 1
  %start.addr = alloca i8, align 1
  %i = alloca i32, align 4
  %l = alloca i32, align 4
  store i32 %m, i32* %m.addr, align 4
  store i8* %msg, i8** %msg.addr, align 4
  store i8 %modulo, i8* %modulo.addr, align 1
  store i8 %start, i8* %start.addr, align 1
  %0 = load i8*, i8** %msg.addr, align 4
  %call = call i32 @strlen(i8* %0) #4
  store i32 %call, i32* %l, align 4
  %1 = load i32, i32* %l, align 4
  %add = add i32 %1, 1
  call void @llvm.memset.p0i8.i32(i8* align 16 getelementptr inbounds ([4096 x i8], [4096 x i8]* @c, i32 0, i32 0), i8 0, i32 %add, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %l, align 4
  %cmp = icmp ult i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %m.addr, align 4
  %5 = load i8*, i8** %msg.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %5, i32 %6
  %7 = load i8, i8* %arrayidx, align 1
  %call1 = call signext i8 @iRandA()
  %8 = load i8, i8* %modulo.addr, align 1
  %9 = load i8, i8* %start.addr, align 1
  %call2 = call signext i8 @Caesar(i32 %4, i8 signext %7, i8 signext %call1, i8 signext %8, i8 signext %9)
  %10 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds [4096 x i8], [4096 x i8]* @c, i32 0, i32 %10
  store i8 %call2, i8* %arrayidx3, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i8* getelementptr inbounds ([4096 x i8], [4096 x i8]* @c, i32 0, i32 0)
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %n = alloca i32, align 4
  %l = alloca i32, align 4
  %msg = alloca i8*, align 4
  %key = alloca i8*, align 4
  %vctx = alloca [4096 x i8], align 16
  %vptx = alloca [4096 x i8], align 16
  %cctx = alloca [4096 x i8], align 16
  %cptx = alloca [4096 x i8], align 16
  store i32 0, i32* %retval, align 4
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i32 0, i32 0), i8** %msg, align 4
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i32 0, i32 0), i8** %key, align 4
  %0 = load i8*, i8** %msg, align 4
  %call = call i32 @strlen(i8* %0) #4
  store i32 %call, i32* %l, align 4
  %1 = load i8*, i8** %key, align 4
  call void @iSeed(i8* %1, i32 1)
  %arraydecay = getelementptr inbounds [4096 x i8], [4096 x i8]* %vctx, i32 0, i32 0
  %2 = load i8*, i8** %msg, align 4
  %call1 = call i8* @Vernam(i8* %2)
  %call2 = call i8* @strcpy(i8* %arraydecay, i8* %call1)
  %arraydecay3 = getelementptr inbounds [4096 x i8], [4096 x i8]* %cctx, i32 0, i32 0
  %3 = load i8*, i8** %msg, align 4
  %call4 = call i8* @CaesarStr(i32 0, i8* %3, i8 signext 95, i8 signext 32)
  %call5 = call i8* @strcpy(i8* %arraydecay3, i8* %call4)
  %4 = load i8*, i8** %key, align 4
  call void @iSeed(i8* %4, i32 1)
  %arraydecay6 = getelementptr inbounds [4096 x i8], [4096 x i8]* %vptx, i32 0, i32 0
  %arraydecay7 = getelementptr inbounds [4096 x i8], [4096 x i8]* %vctx, i32 0, i32 0
  %call8 = call i8* @Vernam(i8* %arraydecay7)
  %call9 = call i8* @strcpy(i8* %arraydecay6, i8* %call8)
  %arraydecay10 = getelementptr inbounds [4096 x i8], [4096 x i8]* %cptx, i32 0, i32 0
  %arraydecay11 = getelementptr inbounds [4096 x i8], [4096 x i8]* %cctx, i32 0, i32 0
  %call12 = call i8* @CaesarStr(i32 1, i8* %arraydecay11, i8 signext 95, i8 signext 32)
  %call13 = call i8* @strcpy(i8* %arraydecay10, i8* %call12)
  %5 = load i8*, i8** %msg, align 4
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i32 0, i32 0), i8* %5)
  %6 = load i8*, i8** %key, align 4
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3, i32 0, i32 0), i8* %6)
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i32 0, i32 0))
  store i32 0, i32* %n, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %7 = load i32, i32* %n, align 4
  %8 = load i32, i32* %l, align 4
  %cmp = icmp ult i32 %7, %8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i32, i32* %n, align 4
  %arrayidx = getelementptr inbounds [4096 x i8], [4096 x i8]* %vctx, i32 0, i32 %9
  %10 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %10 to i32
  %call17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i32 %conv)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %n, align 4
  %inc = add i32 %11, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i32 0, i32 0))
  %arraydecay19 = getelementptr inbounds [4096 x i8], [4096 x i8]* %vptx, i32 0, i32 0
  %call20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7, i32 0, i32 0), i8* %arraydecay19)
  %call21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8, i32 0, i32 0))
  store i32 0, i32* %n, align 4
  br label %for.cond22

for.cond22:                                       ; preds = %for.inc29, %for.end
  %12 = load i32, i32* %n, align 4
  %13 = load i32, i32* %l, align 4
  %cmp23 = icmp ult i32 %12, %13
  br i1 %cmp23, label %for.body25, label %for.end31

for.body25:                                       ; preds = %for.cond22
  %14 = load i32, i32* %n, align 4
  %arrayidx26 = getelementptr inbounds [4096 x i8], [4096 x i8]* %cctx, i32 0, i32 %14
  %15 = load i8, i8* %arrayidx26, align 1
  %conv27 = sext i8 %15 to i32
  %call28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i32 %conv27)
  br label %for.inc29

for.inc29:                                        ; preds = %for.body25
  %16 = load i32, i32* %n, align 4
  %inc30 = add i32 %16, 1
  store i32 %inc30, i32* %n, align 4
  br label %for.cond22

for.end31:                                        ; preds = %for.cond22
  %call32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i32 0, i32 0))
  %arraydecay33 = getelementptr inbounds [4096 x i8], [4096 x i8]* %cptx, i32 0, i32 0
  %call34 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.9, i32 0, i32 0), i8* %arraydecay33)
  ret i32 0
}

declare i8* @strcpy(i8* %0, i8* %1) #3

declare i32 @printf(i8* %0, ...) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn writeonly }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* @randcnt, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* @randcnt, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add i32 %2, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* @randcnt, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ugt i32 %3, 255
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ult 255:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %r, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ult 255:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for iRandom()

; entering Souper's runOnFunction() for iRandA()

; ModuleID = './The_ISAAC_Cipher.c.bc'
source_filename = "./The_ISAAC_Cipher.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@cc = internal global i32 0, align 4
@bb = internal global i32 0, align 4
@mm = internal global [256 x i32] zeroinitializer, align 16
@aa = internal global i32 0, align 4
@randrsl = hidden global [256 x i32] zeroinitializer, align 16
@randcnt = hidden global i32 0, align 4
@v = hidden global [4096 x i8] zeroinitializer, align 16
@c = hidden global [4096 x i8] zeroinitializer, align 16
@.str = private unnamed_addr constant [20 x i8] c"a Top Secret secret\00", align 1
@.str.1 = private unnamed_addr constant [22 x i8] c"this is my secret key\00", align 1
@.str.2 = private unnamed_addr constant [13 x i8] c"Message: %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [13 x i8] c"Key    : %s\0A\00", align 1
@.str.4 = private unnamed_addr constant [10 x i8] c"XOR    : \00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"%02X\00", align 1
@.str.6 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.7 = private unnamed_addr constant [13 x i8] c"XOR dcr: %s\0A\00", align 1
@.str.8 = private unnamed_addr constant [10 x i8] c"MOD    : \00", align 1
@.str.9 = private unnamed_addr constant [13 x i8] c"MOD dcr: %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @isaac() #0 {
entry:
  %i = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %0 = load i32, i32* @cc, align 4
  %add = add i32 %0, 1
  store i32 %add, i32* @cc, align 4
  %1 = load i32, i32* @bb, align 4
  %2 = load i32, i32* @cc, align 4
  %add1 = add i32 %1, %2
  store i32 %add1, i32* @bb, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %3, 256
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  store i32 %5, i32* %x, align 4
  %6 = load i32, i32* %i, align 4
  %rem = urem i32 %6, 4
  switch i32 %rem, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb2
    i32 2, label %sw.bb4
    i32 3, label %sw.bb7
  ]

sw.bb:                                            ; preds = %for.body
  %7 = load i32, i32* @aa, align 4
  %8 = load i32, i32* @aa, align 4
  %shl = shl i32 %8, 13
  %xor = xor i32 %7, %shl
  store i32 %xor, i32* @aa, align 4
  br label %sw.epilog

sw.bb2:                                           ; preds = %for.body
  %9 = load i32, i32* @aa, align 4
  %10 = load i32, i32* @aa, align 4
  %shr = lshr i32 %10, 6
  %xor3 = xor i32 %9, %shr
  store i32 %xor3, i32* @aa, align 4
  br label %sw.epilog

sw.bb4:                                           ; preds = %for.body
  %11 = load i32, i32* @aa, align 4
  %12 = load i32, i32* @aa, align 4
  %shl5 = shl i32 %12, 2
  %xor6 = xor i32 %11, %shl5
  store i32 %xor6, i32* @aa, align 4
  br label %sw.epilog

sw.bb7:                                           ; preds = %for.body
  %13 = load i32, i32* @aa, align 4
  %14 = load i32, i32* @aa, align 4
  %shr8 = lshr i32 %14, 16
  %xor9 = xor i32 %13, %shr8
  store i32 %xor9, i32* @aa, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %for.body, %sw.bb7, %sw.bb4, %sw.bb2, %sw.bb
  %15 = load i32, i32* %i, align 4
  %add10 = add i32 %15, 128
  %rem11 = urem i32 %add10, 256
  %arrayidx12 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %rem11
  %16 = load i32, i32* %arrayidx12, align 4
  %17 = load i32, i32* @aa, align 4
  %add13 = add i32 %16, %17
  store i32 %add13, i32* @aa, align 4
  %18 = load i32, i32* %x, align 4
  %shr14 = lshr i32 %18, 2
  %rem15 = urem i32 %shr14, 256
  %arrayidx16 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %rem15
  %19 = load i32, i32* %arrayidx16, align 4
  %20 = load i32, i32* @aa, align 4
  %add17 = add i32 %19, %20
  %21 = load i32, i32* @bb, align 4
  %add18 = add i32 %add17, %21
  store i32 %add18, i32* %y, align 4
  %22 = load i32, i32* %i, align 4
  %arrayidx19 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %22
  store i32 %add18, i32* %arrayidx19, align 4
  %23 = load i32, i32* %y, align 4
  %shr20 = lshr i32 %23, 10
  %rem21 = urem i32 %shr20, 256
  %arrayidx22 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %rem21
  %24 = load i32, i32* %arrayidx22, align 4
  %25 = load i32, i32* %x, align 4
  %add23 = add i32 %24, %25
  store i32 %add23, i32* @bb, align 4
  %26 = load i32, i32* %i, align 4
  %arrayidx24 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %26
  store i32 %add23, i32* %arrayidx24, align 4
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %27 = load i32, i32* %i, align 4
  %inc = add i32 %27, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* @randcnt, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @randinit(i32 %flag) #0 {
entry:
  %flag.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %c = alloca i32, align 4
  %d = alloca i32, align 4
  %e = alloca i32, align 4
  %f = alloca i32, align 4
  %g = alloca i32, align 4
  %h = alloca i32, align 4
  store i32 %flag, i32* %flag.addr, align 4
  store i32 0, i32* @cc, align 4
  store i32 0, i32* @bb, align 4
  store i32 0, i32* @aa, align 4
  store i32 -1640531527, i32* %h, align 4
  store i32 -1640531527, i32* %g, align 4
  store i32 -1640531527, i32* %f, align 4
  store i32 -1640531527, i32* %e, align 4
  store i32 -1640531527, i32* %d, align 4
  store i32 -1640531527, i32* %c, align 4
  store i32 -1640531527, i32* %b, align 4
  store i32 -1640531527, i32* %a, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %b, align 4
  %shl = shl i32 %1, 11
  %2 = load i32, i32* %a, align 4
  %xor = xor i32 %2, %shl
  store i32 %xor, i32* %a, align 4
  %3 = load i32, i32* %a, align 4
  %4 = load i32, i32* %d, align 4
  %add = add i32 %4, %3
  store i32 %add, i32* %d, align 4
  %5 = load i32, i32* %c, align 4
  %6 = load i32, i32* %b, align 4
  %add1 = add i32 %6, %5
  store i32 %add1, i32* %b, align 4
  %7 = load i32, i32* %c, align 4
  %shr = lshr i32 %7, 2
  %8 = load i32, i32* %b, align 4
  %xor2 = xor i32 %8, %shr
  store i32 %xor2, i32* %b, align 4
  %9 = load i32, i32* %b, align 4
  %10 = load i32, i32* %e, align 4
  %add3 = add i32 %10, %9
  store i32 %add3, i32* %e, align 4
  %11 = load i32, i32* %d, align 4
  %12 = load i32, i32* %c, align 4
  %add4 = add i32 %12, %11
  store i32 %add4, i32* %c, align 4
  %13 = load i32, i32* %d, align 4
  %shl5 = shl i32 %13, 8
  %14 = load i32, i32* %c, align 4
  %xor6 = xor i32 %14, %shl5
  store i32 %xor6, i32* %c, align 4
  %15 = load i32, i32* %c, align 4
  %16 = load i32, i32* %f, align 4
  %add7 = add i32 %16, %15
  store i32 %add7, i32* %f, align 4
  %17 = load i32, i32* %e, align 4
  %18 = load i32, i32* %d, align 4
  %add8 = add i32 %18, %17
  store i32 %add8, i32* %d, align 4
  %19 = load i32, i32* %e, align 4
  %shr9 = lshr i32 %19, 16
  %20 = load i32, i32* %d, align 4
  %xor10 = xor i32 %20, %shr9
  store i32 %xor10, i32* %d, align 4
  %21 = load i32, i32* %d, align 4
  %22 = load i32, i32* %g, align 4
  %add11 = add i32 %22, %21
  store i32 %add11, i32* %g, align 4
  %23 = load i32, i32* %f, align 4
  %24 = load i32, i32* %e, align 4
  %add12 = add i32 %24, %23
  store i32 %add12, i32* %e, align 4
  %25 = load i32, i32* %f, align 4
  %shl13 = shl i32 %25, 10
  %26 = load i32, i32* %e, align 4
  %xor14 = xor i32 %26, %shl13
  store i32 %xor14, i32* %e, align 4
  %27 = load i32, i32* %e, align 4
  %28 = load i32, i32* %h, align 4
  %add15 = add i32 %28, %27
  store i32 %add15, i32* %h, align 4
  %29 = load i32, i32* %g, align 4
  %30 = load i32, i32* %f, align 4
  %add16 = add i32 %30, %29
  store i32 %add16, i32* %f, align 4
  %31 = load i32, i32* %g, align 4
  %shr17 = lshr i32 %31, 4
  %32 = load i32, i32* %f, align 4
  %xor18 = xor i32 %32, %shr17
  store i32 %xor18, i32* %f, align 4
  %33 = load i32, i32* %f, align 4
  %34 = load i32, i32* %a, align 4
  %add19 = add i32 %34, %33
  store i32 %add19, i32* %a, align 4
  %35 = load i32, i32* %h, align 4
  %36 = load i32, i32* %g, align 4
  %add20 = add i32 %36, %35
  store i32 %add20, i32* %g, align 4
  %37 = load i32, i32* %h, align 4
  %shl21 = shl i32 %37, 8
  %38 = load i32, i32* %g, align 4
  %xor22 = xor i32 %38, %shl21
  store i32 %xor22, i32* %g, align 4
  %39 = load i32, i32* %g, align 4
  %40 = load i32, i32* %b, align 4
  %add23 = add i32 %40, %39
  store i32 %add23, i32* %b, align 4
  %41 = load i32, i32* %a, align 4
  %42 = load i32, i32* %h, align 4
  %add24 = add i32 %42, %41
  store i32 %add24, i32* %h, align 4
  %43 = load i32, i32* %a, align 4
  %shr25 = lshr i32 %43, 9
  %44 = load i32, i32* %h, align 4
  %xor26 = xor i32 %44, %shr25
  store i32 %xor26, i32* %h, align 4
  %45 = load i32, i32* %h, align 4
  %46 = load i32, i32* %c, align 4
  %add27 = add i32 %46, %45
  store i32 %add27, i32* %c, align 4
  %47 = load i32, i32* %b, align 4
  %48 = load i32, i32* %a, align 4
  %add28 = add i32 %48, %47
  store i32 %add28, i32* %a, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %49 = load i32, i32* %i, align 4
  %inc = add nsw i32 %49, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond29

for.cond29:                                       ; preds = %for.inc101, %for.end
  %50 = load i32, i32* %i, align 4
  %cmp30 = icmp slt i32 %50, 256
  br i1 %cmp30, label %for.body31, label %for.end103

for.body31:                                       ; preds = %for.cond29
  %51 = load i32, i32* %flag.addr, align 4
  %tobool = icmp ne i32 %51, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body31
  %52 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %52
  %53 = load i32, i32* %arrayidx, align 4
  %54 = load i32, i32* %a, align 4
  %add32 = add i32 %54, %53
  store i32 %add32, i32* %a, align 4
  %55 = load i32, i32* %i, align 4
  %add33 = add nsw i32 %55, 1
  %arrayidx34 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %add33
  %56 = load i32, i32* %arrayidx34, align 4
  %57 = load i32, i32* %b, align 4
  %add35 = add i32 %57, %56
  store i32 %add35, i32* %b, align 4
  %58 = load i32, i32* %i, align 4
  %add36 = add nsw i32 %58, 2
  %arrayidx37 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %add36
  %59 = load i32, i32* %arrayidx37, align 4
  %60 = load i32, i32* %c, align 4
  %add38 = add i32 %60, %59
  store i32 %add38, i32* %c, align 4
  %61 = load i32, i32* %i, align 4
  %add39 = add nsw i32 %61, 3
  %arrayidx40 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %add39
  %62 = load i32, i32* %arrayidx40, align 4
  %63 = load i32, i32* %d, align 4
  %add41 = add i32 %63, %62
  store i32 %add41, i32* %d, align 4
  %64 = load i32, i32* %i, align 4
  %add42 = add nsw i32 %64, 4
  %arrayidx43 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %add42
  %65 = load i32, i32* %arrayidx43, align 4
  %66 = load i32, i32* %e, align 4
  %add44 = add i32 %66, %65
  store i32 %add44, i32* %e, align 4
  %67 = load i32, i32* %i, align 4
  %add45 = add nsw i32 %67, 5
  %arrayidx46 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %add45
  %68 = load i32, i32* %arrayidx46, align 4
  %69 = load i32, i32* %f, align 4
  %add47 = add i32 %69, %68
  store i32 %add47, i32* %f, align 4
  %70 = load i32, i32* %i, align 4
  %add48 = add nsw i32 %70, 6
  %arrayidx49 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %add48
  %71 = load i32, i32* %arrayidx49, align 4
  %72 = load i32, i32* %g, align 4
  %add50 = add i32 %72, %71
  store i32 %add50, i32* %g, align 4
  %73 = load i32, i32* %i, align 4
  %add51 = add nsw i32 %73, 7
  %arrayidx52 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %add51
  %74 = load i32, i32* %arrayidx52, align 4
  %75 = load i32, i32* %h, align 4
  %add53 = add i32 %75, %74
  store i32 %add53, i32* %h, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body31
  %76 = load i32, i32* %b, align 4
  %shl54 = shl i32 %76, 11
  %77 = load i32, i32* %a, align 4
  %xor55 = xor i32 %77, %shl54
  store i32 %xor55, i32* %a, align 4
  %78 = load i32, i32* %a, align 4
  %79 = load i32, i32* %d, align 4
  %add56 = add i32 %79, %78
  store i32 %add56, i32* %d, align 4
  %80 = load i32, i32* %c, align 4
  %81 = load i32, i32* %b, align 4
  %add57 = add i32 %81, %80
  store i32 %add57, i32* %b, align 4
  %82 = load i32, i32* %c, align 4
  %shr58 = lshr i32 %82, 2
  %83 = load i32, i32* %b, align 4
  %xor59 = xor i32 %83, %shr58
  store i32 %xor59, i32* %b, align 4
  %84 = load i32, i32* %b, align 4
  %85 = load i32, i32* %e, align 4
  %add60 = add i32 %85, %84
  store i32 %add60, i32* %e, align 4
  %86 = load i32, i32* %d, align 4
  %87 = load i32, i32* %c, align 4
  %add61 = add i32 %87, %86
  store i32 %add61, i32* %c, align 4
  %88 = load i32, i32* %d, align 4
  %shl62 = shl i32 %88, 8
  %89 = load i32, i32* %c, align 4
  %xor63 = xor i32 %89, %shl62
  store i32 %xor63, i32* %c, align 4
  %90 = load i32, i32* %c, align 4
  %91 = load i32, i32* %f, align 4
  %add64 = add i32 %91, %90
  store i32 %add64, i32* %f, align 4
  %92 = load i32, i32* %e, align 4
  %93 = load i32, i32* %d, align 4
  %add65 = add i32 %93, %92
  store i32 %add65, i32* %d, align 4
  %94 = load i32, i32* %e, align 4
  %shr66 = lshr i32 %94, 16
  %95 = load i32, i32* %d, align 4
  %xor67 = xor i32 %95, %shr66
  store i32 %xor67, i32* %d, align 4
  %96 = load i32, i32* %d, align 4
  %97 = load i32, i32* %g, align 4
  %add68 = add i32 %97, %96
  store i32 %add68, i32* %g, align 4
  %98 = load i32, i32* %f, align 4
  %99 = load i32, i32* %e, align 4
  %add69 = add i32 %99, %98
  store i32 %add69, i32* %e, align 4
  %100 = load i32, i32* %f, align 4
  %shl70 = shl i32 %100, 10
  %101 = load i32, i32* %e, align 4
  %xor71 = xor i32 %101, %shl70
  store i32 %xor71, i32* %e, align 4
  %102 = load i32, i32* %e, align 4
  %103 = load i32, i32* %h, align 4
  %add72 = add i32 %103, %102
  store i32 %add72, i32* %h, align 4
  %104 = load i32, i32* %g, align 4
  %105 = load i32, i32* %f, align 4
  %add73 = add i32 %105, %104
  store i32 %add73, i32* %f, align 4
  %106 = load i32, i32* %g, align 4
  %shr74 = lshr i32 %106, 4
  %107 = load i32, i32* %f, align 4
  %xor75 = xor i32 %107, %shr74
  store i32 %xor75, i32* %f, align 4
  %108 = load i32, i32* %f, align 4
  %109 = load i32, i32* %a, align 4
  %add76 = add i32 %109, %108
  store i32 %add76, i32* %a, align 4
  %110 = load i32, i32* %h, align 4
  %111 = load i32, i32* %g, align 4
  %add77 = add i32 %111, %110
  store i32 %add77, i32* %g, align 4
  %112 = load i32, i32* %h, align 4
  %shl78 = shl i32 %112, 8
  %113 = load i32, i32* %g, align 4
  %xor79 = xor i32 %113, %shl78
  store i32 %xor79, i32* %g, align 4
  %114 = load i32, i32* %g, align 4
  %115 = load i32, i32* %b, align 4
  %add80 = add i32 %115, %114
  store i32 %add80, i32* %b, align 4
  %116 = load i32, i32* %a, align 4
  %117 = load i32, i32* %h, align 4
  %add81 = add i32 %117, %116
  store i32 %add81, i32* %h, align 4
  %118 = load i32, i32* %a, align 4
  %shr82 = lshr i32 %118, 9
  %119 = load i32, i32* %h, align 4
  %xor83 = xor i32 %119, %shr82
  store i32 %xor83, i32* %h, align 4
  %120 = load i32, i32* %h, align 4
  %121 = load i32, i32* %c, align 4
  %add84 = add i32 %121, %120
  store i32 %add84, i32* %c, align 4
  %122 = load i32, i32* %b, align 4
  %123 = load i32, i32* %a, align 4
  %add85 = add i32 %123, %122
  store i32 %add85, i32* %a, align 4
  %124 = load i32, i32* %a, align 4
  %125 = load i32, i32* %i, align 4
  %arrayidx86 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %125
  store i32 %124, i32* %arrayidx86, align 4
  %126 = load i32, i32* %b, align 4
  %127 = load i32, i32* %i, align 4
  %add87 = add nsw i32 %127, 1
  %arrayidx88 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add87
  store i32 %126, i32* %arrayidx88, align 4
  %128 = load i32, i32* %c, align 4
  %129 = load i32, i32* %i, align 4
  %add89 = add nsw i32 %129, 2
  %arrayidx90 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add89
  store i32 %128, i32* %arrayidx90, align 4
  %130 = load i32, i32* %d, align 4
  %131 = load i32, i32* %i, align 4
  %add91 = add nsw i32 %131, 3
  %arrayidx92 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add91
  store i32 %130, i32* %arrayidx92, align 4
  %132 = load i32, i32* %e, align 4
  %133 = load i32, i32* %i, align 4
  %add93 = add nsw i32 %133, 4
  %arrayidx94 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add93
  store i32 %132, i32* %arrayidx94, align 4
  %134 = load i32, i32* %f, align 4
  %135 = load i32, i32* %i, align 4
  %add95 = add nsw i32 %135, 5
  %arrayidx96 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add95
  store i32 %134, i32* %arrayidx96, align 4
  %136 = load i32, i32* %g, align 4
  %137 = load i32, i32* %i, align 4
  %add97 = add nsw i32 %137, 6
  %arrayidx98 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add97
  store i32 %136, i32* %arrayidx98, align 4
  %138 = load i32, i32* %h, align 4
  %139 = load i32, i32* %i, align 4
  %add99 = add nsw i32 %139, 7
  %arrayidx100 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add99
  store i32 %138, i32* %arrayidx100, align 4
  br label %for.inc101

for.inc101:                                       ; preds = %if.end
  %140 = load i32, i32* %i, align 4
  %add102 = add nsw i32 %140, 8
  store i32 %add102, i32* %i, align 4
  br label %for.cond29

for.end103:                                       ; preds = %for.cond29
  %141 = load i32, i32* %flag.addr, align 4
  %tobool104 = icmp ne i32 %141, 0
  br i1 %tobool104, label %if.then105, label %if.end182

if.then105:                                       ; preds = %for.end103
  store i32 0, i32* %i, align 4
  br label %for.cond106

for.cond106:                                      ; preds = %for.inc179, %if.then105
  %142 = load i32, i32* %i, align 4
  %cmp107 = icmp slt i32 %142, 256
  br i1 %cmp107, label %for.body108, label %for.end181

for.body108:                                      ; preds = %for.cond106
  %143 = load i32, i32* %i, align 4
  %arrayidx109 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %143
  %144 = load i32, i32* %arrayidx109, align 4
  %145 = load i32, i32* %a, align 4
  %add110 = add i32 %145, %144
  store i32 %add110, i32* %a, align 4
  %146 = load i32, i32* %i, align 4
  %add111 = add nsw i32 %146, 1
  %arrayidx112 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add111
  %147 = load i32, i32* %arrayidx112, align 4
  %148 = load i32, i32* %b, align 4
  %add113 = add i32 %148, %147
  store i32 %add113, i32* %b, align 4
  %149 = load i32, i32* %i, align 4
  %add114 = add nsw i32 %149, 2
  %arrayidx115 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add114
  %150 = load i32, i32* %arrayidx115, align 4
  %151 = load i32, i32* %c, align 4
  %add116 = add i32 %151, %150
  store i32 %add116, i32* %c, align 4
  %152 = load i32, i32* %i, align 4
  %add117 = add nsw i32 %152, 3
  %arrayidx118 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add117
  %153 = load i32, i32* %arrayidx118, align 4
  %154 = load i32, i32* %d, align 4
  %add119 = add i32 %154, %153
  store i32 %add119, i32* %d, align 4
  %155 = load i32, i32* %i, align 4
  %add120 = add nsw i32 %155, 4
  %arrayidx121 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add120
  %156 = load i32, i32* %arrayidx121, align 4
  %157 = load i32, i32* %e, align 4
  %add122 = add i32 %157, %156
  store i32 %add122, i32* %e, align 4
  %158 = load i32, i32* %i, align 4
  %add123 = add nsw i32 %158, 5
  %arrayidx124 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add123
  %159 = load i32, i32* %arrayidx124, align 4
  %160 = load i32, i32* %f, align 4
  %add125 = add i32 %160, %159
  store i32 %add125, i32* %f, align 4
  %161 = load i32, i32* %i, align 4
  %add126 = add nsw i32 %161, 6
  %arrayidx127 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add126
  %162 = load i32, i32* %arrayidx127, align 4
  %163 = load i32, i32* %g, align 4
  %add128 = add i32 %163, %162
  store i32 %add128, i32* %g, align 4
  %164 = load i32, i32* %i, align 4
  %add129 = add nsw i32 %164, 7
  %arrayidx130 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add129
  %165 = load i32, i32* %arrayidx130, align 4
  %166 = load i32, i32* %h, align 4
  %add131 = add i32 %166, %165
  store i32 %add131, i32* %h, align 4
  %167 = load i32, i32* %b, align 4
  %shl132 = shl i32 %167, 11
  %168 = load i32, i32* %a, align 4
  %xor133 = xor i32 %168, %shl132
  store i32 %xor133, i32* %a, align 4
  %169 = load i32, i32* %a, align 4
  %170 = load i32, i32* %d, align 4
  %add134 = add i32 %170, %169
  store i32 %add134, i32* %d, align 4
  %171 = load i32, i32* %c, align 4
  %172 = load i32, i32* %b, align 4
  %add135 = add i32 %172, %171
  store i32 %add135, i32* %b, align 4
  %173 = load i32, i32* %c, align 4
  %shr136 = lshr i32 %173, 2
  %174 = load i32, i32* %b, align 4
  %xor137 = xor i32 %174, %shr136
  store i32 %xor137, i32* %b, align 4
  %175 = load i32, i32* %b, align 4
  %176 = load i32, i32* %e, align 4
  %add138 = add i32 %176, %175
  store i32 %add138, i32* %e, align 4
  %177 = load i32, i32* %d, align 4
  %178 = load i32, i32* %c, align 4
  %add139 = add i32 %178, %177
  store i32 %add139, i32* %c, align 4
  %179 = load i32, i32* %d, align 4
  %shl140 = shl i32 %179, 8
  %180 = load i32, i32* %c, align 4
  %xor141 = xor i32 %180, %shl140
  store i32 %xor141, i32* %c, align 4
  %181 = load i32, i32* %c, align 4
  %182 = load i32, i32* %f, align 4
  %add142 = add i32 %182, %181
  store i32 %add142, i32* %f, align 4
  %183 = load i32, i32* %e, align 4
  %184 = load i32, i32* %d, align 4
  %add143 = add i32 %184, %183
  store i32 %add143, i32* %d, align 4
  %185 = load i32, i32* %e, align 4
  %shr144 = lshr i32 %185, 16
  %186 = load i32, i32* %d, align 4
  %xor145 = xor i32 %186, %shr144
  store i32 %xor145, i32* %d, align 4
  %187 = load i32, i32* %d, align 4
  %188 = load i32, i32* %g, align 4
  %add146 = add i32 %188, %187
  store i32 %add146, i32* %g, align 4
  %189 = load i32, i32* %f, align 4
  %190 = load i32, i32* %e, align 4
  %add147 = add i32 %190, %189
  store i32 %add147, i32* %e, align 4
  %191 = load i32, i32* %f, align 4
  %shl148 = shl i32 %191, 10
  %192 = load i32, i32* %e, align 4
  %xor149 = xor i32 %192, %shl148
  store i32 %xor149, i32* %e, align 4
  %193 = load i32, i32* %e, align 4
  %194 = load i32, i32* %h, align 4
  %add150 = add i32 %194, %193
  store i32 %add150, i32* %h, align 4
  %195 = load i32, i32* %g, align 4
  %196 = load i32, i32* %f, align 4
  %add151 = add i32 %196, %195
  store i32 %add151, i32* %f, align 4
  %197 = load i32, i32* %g, align 4
  %shr152 = lshr i32 %197, 4
  %198 = load i32, i32* %f, align 4
  %xor153 = xor i32 %198, %shr152
  store i32 %xor153, i32* %f, align 4
  %199 = load i32, i32* %f, align 4
  %200 = load i32, i32* %a, align 4
  %add154 = add i32 %200, %199
  store i32 %add154, i32* %a, align 4
  %201 = load i32, i32* %h, align 4
  %202 = load i32, i32* %g, align 4
  %add155 = add i32 %202, %201
  store i32 %add155, i32* %g, align 4
  %203 = load i32, i32* %h, align 4
  %shl156 = shl i32 %203, 8
  %204 = load i32, i32* %g, align 4
  %xor157 = xor i32 %204, %shl156
  store i32 %xor157, i32* %g, align 4
  %205 = load i32, i32* %g, align 4
  %206 = load i32, i32* %b, align 4
  %add158 = add i32 %206, %205
  store i32 %add158, i32* %b, align 4
  %207 = load i32, i32* %a, align 4
  %208 = load i32, i32* %h, align 4
  %add159 = add i32 %208, %207
  store i32 %add159, i32* %h, align 4
  %209 = load i32, i32* %a, align 4
  %shr160 = lshr i32 %209, 9
  %210 = load i32, i32* %h, align 4
  %xor161 = xor i32 %210, %shr160
  store i32 %xor161, i32* %h, align 4
  %211 = load i32, i32* %h, align 4
  %212 = load i32, i32* %c, align 4
  %add162 = add i32 %212, %211
  store i32 %add162, i32* %c, align 4
  %213 = load i32, i32* %b, align 4
  %214 = load i32, i32* %a, align 4
  %add163 = add i32 %214, %213
  store i32 %add163, i32* %a, align 4
  %215 = load i32, i32* %a, align 4
  %216 = load i32, i32* %i, align 4
  %arrayidx164 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %216
  store i32 %215, i32* %arrayidx164, align 4
  %217 = load i32, i32* %b, align 4
  %218 = load i32, i32* %i, align 4
  %add165 = add nsw i32 %218, 1
  %arrayidx166 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add165
  store i32 %217, i32* %arrayidx166, align 4
  %219 = load i32, i32* %c, align 4
  %220 = load i32, i32* %i, align 4
  %add167 = add nsw i32 %220, 2
  %arrayidx168 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add167
  store i32 %219, i32* %arrayidx168, align 4
  %221 = load i32, i32* %d, align 4
  %222 = load i32, i32* %i, align 4
  %add169 = add nsw i32 %222, 3
  %arrayidx170 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add169
  store i32 %221, i32* %arrayidx170, align 4
  %223 = load i32, i32* %e, align 4
  %224 = load i32, i32* %i, align 4
  %add171 = add nsw i32 %224, 4
  %arrayidx172 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add171
  store i32 %223, i32* %arrayidx172, align 4
  %225 = load i32, i32* %f, align 4
  %226 = load i32, i32* %i, align 4
  %add173 = add nsw i32 %226, 5
  %arrayidx174 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add173
  store i32 %225, i32* %arrayidx174, align 4
  %227 = load i32, i32* %g, align 4
  %228 = load i32, i32* %i, align 4
  %add175 = add nsw i32 %228, 6
  %arrayidx176 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add175
  store i32 %227, i32* %arrayidx176, align 4
  %229 = load i32, i32* %h, align 4
  %230 = load i32, i32* %i, align 4
  %add177 = add nsw i32 %230, 7
  %arrayidx178 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add177
  store i32 %229, i32* %arrayidx178, align 4
  br label %for.inc179

for.inc179:                                       ; preds = %for.body108
  %231 = load i32, i32* %i, align 4
  %add180 = add nsw i32 %231, 8
  store i32 %add180, i32* %i, align 4
  br label %for.cond106

for.end181:                                       ; preds = %for.cond106
  br label %if.end182

if.end182:                                        ; preds = %for.end181, %for.end103
  call void @isaac()
  store i32 0, i32* @randcnt, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @iRandom() #0 {
entry:
  %r = alloca i32, align 4
  %0 = load i32, i32* @randcnt, align 4
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %0
  %1 = load i32, i32* %arrayidx, align 4
  store i32 %1, i32* %r, align 4
  %2 = load i32, i32* @randcnt, align 4
  %inc = add i32 %2, 1
  store i32 %inc, i32* @randcnt, align 4
  %3 = load i32, i32* @randcnt, align 4
  %cmp = icmp ugt i32 %3, 255
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @isaac()
  store i32 0, i32* @randcnt, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* %r, align 4
  ret i32 %4
}

; Function Attrs: noinline nounwind optnone
define hidden signext i8 @iRandA() #0 {
entry:
  %call = call i32 @iRandom()
  %rem = urem i32 %call, 95
  %add = add i32 %rem, 32
  %conv = trunc i32 %add to i8
  ret i8 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden void @iSeed(i8* %seed, i32 %flag) #0 {
entry:
  %seed.addr = alloca i8*, align 4
  %flag.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %m = alloca i32, align 4
  store i8* %seed, i8** %seed.addr, align 4
  store i32 %flag, i32* %flag.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %0, 256
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %1
  store i32 0, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %i, align 4
  %inc = add i32 %2, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %3 = load i8*, i8** %seed.addr, align 4
  %call = call i32 @strlen(i8* %3) #4
  store i32 %call, i32* %m, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc8, %for.end
  %4 = load i32, i32* %i, align 4
  %cmp2 = icmp ult i32 %4, 256
  br i1 %cmp2, label %for.body3, label %for.end10

for.body3:                                        ; preds = %for.cond1
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %m, align 4
  %cmp4 = icmp ugt i32 %5, %6
  br i1 %cmp4, label %if.then, label %if.else

if.then:                                          ; preds = %for.body3
  %7 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %7
  store i32 0, i32* %arrayidx5, align 4
  br label %if.end

if.else:                                          ; preds = %for.body3
  %8 = load i8*, i8** %seed.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds i8, i8* %8, i32 %9
  %10 = load i8, i8* %arrayidx6, align 1
  %conv = sext i8 %10 to i32
  %11 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %11
  store i32 %conv, i32* %arrayidx7, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc8

for.inc8:                                         ; preds = %if.end
  %12 = load i32, i32* %i, align 4
  %inc9 = add i32 %12, 1
  store i32 %inc9, i32* %i, align 4
  br label %for.cond1

for.end10:                                        ; preds = %for.cond1
  %13 = load i32, i32* %flag.addr, align 4
  call void @randinit(i32 %13)
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i8* @Vernam(i8* %msg) #0 {
entry:
  %msg.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %l = alloca i32, align 4
  store i8* %msg, i8** %msg.addr, align 4
  %0 = load i8*, i8** %msg.addr, align 4
  %call = call i32 @strlen(i8* %0) #4
  store i32 %call, i32* %l, align 4
  %1 = load i32, i32* %l, align 4
  %add = add i32 %1, 1
  call void @llvm.memset.p0i8.i32(i8* align 16 getelementptr inbounds ([4096 x i8], [4096 x i8]* @v, i32 0, i32 0), i8 0, i32 %add, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %l, align 4
  %cmp = icmp ult i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call1 = call signext i8 @iRandA()
  %conv = sext i8 %call1 to i32
  %4 = load i8*, i8** %msg.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %4, i32 %5
  %6 = load i8, i8* %arrayidx, align 1
  %conv2 = sext i8 %6 to i32
  %xor = xor i32 %conv, %conv2
  %conv3 = trunc i32 %xor to i8
  %7 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds [4096 x i8], [4096 x i8]* @v, i32 0, i32 %7
  store i8 %conv3, i8* %arrayidx4, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %inc = add i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i8* getelementptr inbounds ([4096 x i8], [4096 x i8]* @v, i32 0, i32 0)
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define hidden signext i8 @Caesar(i32 %m, i8 signext %ch, i8 signext %shift, i8 signext %modulo, i8 signext %start) #0 {
entry:
  %m.addr = alloca i32, align 4
  %ch.addr = alloca i8, align 1
  %shift.addr = alloca i8, align 1
  %modulo.addr = alloca i8, align 1
  %start.addr = alloca i8, align 1
  %n = alloca i32, align 4
  store i32 %m, i32* %m.addr, align 4
  store i8 %ch, i8* %ch.addr, align 1
  store i8 %shift, i8* %shift.addr, align 1
  store i8 %modulo, i8* %modulo.addr, align 1
  store i8 %start, i8* %start.addr, align 1
  %0 = load i32, i32* %m.addr, align 4
  %cmp = icmp eq i32 %0, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i8, i8* %shift.addr, align 1
  %conv = sext i8 %1 to i32
  %sub = sub nsw i32 0, %conv
  %conv1 = trunc i32 %sub to i8
  store i8 %conv1, i8* %shift.addr, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i8, i8* %ch.addr, align 1
  %conv2 = sext i8 %2 to i32
  %3 = load i8, i8* %start.addr, align 1
  %conv3 = sext i8 %3 to i32
  %sub4 = sub nsw i32 %conv2, %conv3
  %4 = load i8, i8* %shift.addr, align 1
  %conv5 = sext i8 %4 to i32
  %add = add nsw i32 %sub4, %conv5
  store i32 %add, i32* %n, align 4
  %5 = load i32, i32* %n, align 4
  %6 = load i8, i8* %modulo.addr, align 1
  %conv6 = sext i8 %6 to i32
  %rem = srem i32 %5, %conv6
  store i32 %rem, i32* %n, align 4
  %7 = load i32, i32* %n, align 4
  %cmp7 = icmp slt i32 %7, 0
  br i1 %cmp7, label %if.then9, label %if.end12

if.then9:                                         ; preds = %if.end
  %8 = load i8, i8* %modulo.addr, align 1
  %conv10 = sext i8 %8 to i32
  %9 = load i32, i32* %n, align 4
  %add11 = add nsw i32 %9, %conv10
  store i32 %add11, i32* %n, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then9, %if.end
  %10 = load i8, i8* %start.addr, align 1
  %conv13 = sext i8 %10 to i32
  %11 = load i32, i32* %n, align 4
  %add14 = add nsw i32 %conv13, %11
  %conv15 = trunc i32 %add14 to i8
  ret i8 %conv15
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @CaesarStr(i32 %m, i8* %msg, i8 signext %modulo, i8 signext %start) #0 {
entry:
  %m.addr = alloca i32, align 4
  %msg.addr = alloca i8*, align 4
  %modulo.addr = alloca i8, align 1
  %start.addr = alloca i8, align 1
  %i = alloca i32, align 4
  %l = alloca i32, align 4
  store i32 %m, i32* %m.addr, align 4
  store i8* %msg, i8** %msg.addr, align 4
  store i8 %modulo, i8* %modulo.addr, align 1
  store i8 %start, i8* %start.addr, align 1
  %0 = load i8*, i8** %msg.addr, align 4
  %call = call i32 @strlen(i8* %0) #4
  store i32 %call, i32* %l, align 4
  %1 = load i32, i32* %l, align 4
  %add = add i32 %1, 1
  call void @llvm.memset.p0i8.i32(i8* align 16 getelementptr inbounds ([4096 x i8], [4096 x i8]* @c, i32 0, i32 0), i8 0, i32 %add, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %l, align 4
  %cmp = icmp ult i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %m.addr, align 4
  %5 = load i8*, i8** %msg.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %5, i32 %6
  %7 = load i8, i8* %arrayidx, align 1
  %call1 = call signext i8 @iRandA()
  %8 = load i8, i8* %modulo.addr, align 1
  %9 = load i8, i8* %start.addr, align 1
  %call2 = call signext i8 @Caesar(i32 %4, i8 signext %7, i8 signext %call1, i8 signext %8, i8 signext %9)
  %10 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds [4096 x i8], [4096 x i8]* @c, i32 0, i32 %10
  store i8 %call2, i8* %arrayidx3, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i8* getelementptr inbounds ([4096 x i8], [4096 x i8]* @c, i32 0, i32 0)
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %n = alloca i32, align 4
  %l = alloca i32, align 4
  %msg = alloca i8*, align 4
  %key = alloca i8*, align 4
  %vctx = alloca [4096 x i8], align 16
  %vptx = alloca [4096 x i8], align 16
  %cctx = alloca [4096 x i8], align 16
  %cptx = alloca [4096 x i8], align 16
  store i32 0, i32* %retval, align 4
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i32 0, i32 0), i8** %msg, align 4
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i32 0, i32 0), i8** %key, align 4
  %0 = load i8*, i8** %msg, align 4
  %call = call i32 @strlen(i8* %0) #4
  store i32 %call, i32* %l, align 4
  %1 = load i8*, i8** %key, align 4
  call void @iSeed(i8* %1, i32 1)
  %arraydecay = getelementptr inbounds [4096 x i8], [4096 x i8]* %vctx, i32 0, i32 0
  %2 = load i8*, i8** %msg, align 4
  %call1 = call i8* @Vernam(i8* %2)
  %call2 = call i8* @strcpy(i8* %arraydecay, i8* %call1)
  %arraydecay3 = getelementptr inbounds [4096 x i8], [4096 x i8]* %cctx, i32 0, i32 0
  %3 = load i8*, i8** %msg, align 4
  %call4 = call i8* @CaesarStr(i32 0, i8* %3, i8 signext 95, i8 signext 32)
  %call5 = call i8* @strcpy(i8* %arraydecay3, i8* %call4)
  %4 = load i8*, i8** %key, align 4
  call void @iSeed(i8* %4, i32 1)
  %arraydecay6 = getelementptr inbounds [4096 x i8], [4096 x i8]* %vptx, i32 0, i32 0
  %arraydecay7 = getelementptr inbounds [4096 x i8], [4096 x i8]* %vctx, i32 0, i32 0
  %call8 = call i8* @Vernam(i8* %arraydecay7)
  %call9 = call i8* @strcpy(i8* %arraydecay6, i8* %call8)
  %arraydecay10 = getelementptr inbounds [4096 x i8], [4096 x i8]* %cptx, i32 0, i32 0
  %arraydecay11 = getelementptr inbounds [4096 x i8], [4096 x i8]* %cctx, i32 0, i32 0
  %call12 = call i8* @CaesarStr(i32 1, i8* %arraydecay11, i8 signext 95, i8 signext 32)
  %call13 = call i8* @strcpy(i8* %arraydecay10, i8* %call12)
  %5 = load i8*, i8** %msg, align 4
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i32 0, i32 0), i8* %5)
  %6 = load i8*, i8** %key, align 4
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3, i32 0, i32 0), i8* %6)
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i32 0, i32 0))
  store i32 0, i32* %n, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %7 = load i32, i32* %n, align 4
  %8 = load i32, i32* %l, align 4
  %cmp = icmp ult i32 %7, %8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i32, i32* %n, align 4
  %arrayidx = getelementptr inbounds [4096 x i8], [4096 x i8]* %vctx, i32 0, i32 %9
  %10 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %10 to i32
  %call17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i32 %conv)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %n, align 4
  %inc = add i32 %11, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i32 0, i32 0))
  %arraydecay19 = getelementptr inbounds [4096 x i8], [4096 x i8]* %vptx, i32 0, i32 0
  %call20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7, i32 0, i32 0), i8* %arraydecay19)
  %call21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8, i32 0, i32 0))
  store i32 0, i32* %n, align 4
  br label %for.cond22

for.cond22:                                       ; preds = %for.inc29, %for.end
  %12 = load i32, i32* %n, align 4
  %13 = load i32, i32* %l, align 4
  %cmp23 = icmp ult i32 %12, %13
  br i1 %cmp23, label %for.body25, label %for.end31

for.body25:                                       ; preds = %for.cond22
  %14 = load i32, i32* %n, align 4
  %arrayidx26 = getelementptr inbounds [4096 x i8], [4096 x i8]* %cctx, i32 0, i32 %14
  %15 = load i8, i8* %arrayidx26, align 1
  %conv27 = sext i8 %15 to i32
  %call28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i32 %conv27)
  br label %for.inc29

for.inc29:                                        ; preds = %for.body25
  %16 = load i32, i32* %n, align 4
  %inc30 = add i32 %16, 1
  store i32 %inc30, i32* %n, align 4
  br label %for.cond22

for.end31:                                        ; preds = %for.cond22
  %call32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i32 0, i32 0))
  %arraydecay33 = getelementptr inbounds [4096 x i8], [4096 x i8]* %cptx, i32 0, i32 0
  %call34 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.9, i32 0, i32 0), i8* %arraydecay33)
  ret i32 0
}

declare i8* @strcpy(i8* %0, i8* %1) #3

declare i32 @printf(i8* %0, ...) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn writeonly }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 @iRandom()
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem = urem i32 %call, 95
; Looking for a replacement for:
%0:i32 = var
%1:i32 = urem %0, 95:i32
infer %1 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %add = add i32 %rem, 32
; Looking for a replacement for:
%0:i32 = var
%1:i32 = urem %0, 95:i32
%2:i32 = add 32:i32, %1
infer %2 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %conv = trunc i32 %add to i8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = urem %0, 95:i32
%2:i32 = add 32:i32, %1
%3:i8 = trunc %2
infer %3
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = urem %0, 95:i32
infer %1 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 64
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = urem %0, 95:i32
%2:i32 = add 32:i32, %1
infer %2 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 32
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 96
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = urem %0, 95:i32

Cost = 5
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = urem %0, 95:i32
%2:i32 = add 32:i32, %1
%3:i8 = trunc %2
infer %3


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 32
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 96
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for iRandA()

; entering Souper's runOnFunction() for iSeed()

; ModuleID = './The_ISAAC_Cipher.c.bc'
source_filename = "./The_ISAAC_Cipher.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@cc = internal global i32 0, align 4
@bb = internal global i32 0, align 4
@mm = internal global [256 x i32] zeroinitializer, align 16
@aa = internal global i32 0, align 4
@randrsl = hidden global [256 x i32] zeroinitializer, align 16
@randcnt = hidden global i32 0, align 4
@v = hidden global [4096 x i8] zeroinitializer, align 16
@c = hidden global [4096 x i8] zeroinitializer, align 16
@.str = private unnamed_addr constant [20 x i8] c"a Top Secret secret\00", align 1
@.str.1 = private unnamed_addr constant [22 x i8] c"this is my secret key\00", align 1
@.str.2 = private unnamed_addr constant [13 x i8] c"Message: %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [13 x i8] c"Key    : %s\0A\00", align 1
@.str.4 = private unnamed_addr constant [10 x i8] c"XOR    : \00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"%02X\00", align 1
@.str.6 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.7 = private unnamed_addr constant [13 x i8] c"XOR dcr: %s\0A\00", align 1
@.str.8 = private unnamed_addr constant [10 x i8] c"MOD    : \00", align 1
@.str.9 = private unnamed_addr constant [13 x i8] c"MOD dcr: %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @isaac() #0 {
entry:
  %i = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %0 = load i32, i32* @cc, align 4
  %add = add i32 %0, 1
  store i32 %add, i32* @cc, align 4
  %1 = load i32, i32* @bb, align 4
  %2 = load i32, i32* @cc, align 4
  %add1 = add i32 %1, %2
  store i32 %add1, i32* @bb, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %3, 256
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  store i32 %5, i32* %x, align 4
  %6 = load i32, i32* %i, align 4
  %rem = urem i32 %6, 4
  switch i32 %rem, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb2
    i32 2, label %sw.bb4
    i32 3, label %sw.bb7
  ]

sw.bb:                                            ; preds = %for.body
  %7 = load i32, i32* @aa, align 4
  %8 = load i32, i32* @aa, align 4
  %shl = shl i32 %8, 13
  %xor = xor i32 %7, %shl
  store i32 %xor, i32* @aa, align 4
  br label %sw.epilog

sw.bb2:                                           ; preds = %for.body
  %9 = load i32, i32* @aa, align 4
  %10 = load i32, i32* @aa, align 4
  %shr = lshr i32 %10, 6
  %xor3 = xor i32 %9, %shr
  store i32 %xor3, i32* @aa, align 4
  br label %sw.epilog

sw.bb4:                                           ; preds = %for.body
  %11 = load i32, i32* @aa, align 4
  %12 = load i32, i32* @aa, align 4
  %shl5 = shl i32 %12, 2
  %xor6 = xor i32 %11, %shl5
  store i32 %xor6, i32* @aa, align 4
  br label %sw.epilog

sw.bb7:                                           ; preds = %for.body
  %13 = load i32, i32* @aa, align 4
  %14 = load i32, i32* @aa, align 4
  %shr8 = lshr i32 %14, 16
  %xor9 = xor i32 %13, %shr8
  store i32 %xor9, i32* @aa, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %for.body, %sw.bb7, %sw.bb4, %sw.bb2, %sw.bb
  %15 = load i32, i32* %i, align 4
  %add10 = add i32 %15, 128
  %rem11 = urem i32 %add10, 256
  %arrayidx12 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %rem11
  %16 = load i32, i32* %arrayidx12, align 4
  %17 = load i32, i32* @aa, align 4
  %add13 = add i32 %16, %17
  store i32 %add13, i32* @aa, align 4
  %18 = load i32, i32* %x, align 4
  %shr14 = lshr i32 %18, 2
  %rem15 = urem i32 %shr14, 256
  %arrayidx16 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %rem15
  %19 = load i32, i32* %arrayidx16, align 4
  %20 = load i32, i32* @aa, align 4
  %add17 = add i32 %19, %20
  %21 = load i32, i32* @bb, align 4
  %add18 = add i32 %add17, %21
  store i32 %add18, i32* %y, align 4
  %22 = load i32, i32* %i, align 4
  %arrayidx19 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %22
  store i32 %add18, i32* %arrayidx19, align 4
  %23 = load i32, i32* %y, align 4
  %shr20 = lshr i32 %23, 10
  %rem21 = urem i32 %shr20, 256
  %arrayidx22 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %rem21
  %24 = load i32, i32* %arrayidx22, align 4
  %25 = load i32, i32* %x, align 4
  %add23 = add i32 %24, %25
  store i32 %add23, i32* @bb, align 4
  %26 = load i32, i32* %i, align 4
  %arrayidx24 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %26
  store i32 %add23, i32* %arrayidx24, align 4
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %27 = load i32, i32* %i, align 4
  %inc = add i32 %27, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* @randcnt, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @randinit(i32 %flag) #0 {
entry:
  %flag.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %c = alloca i32, align 4
  %d = alloca i32, align 4
  %e = alloca i32, align 4
  %f = alloca i32, align 4
  %g = alloca i32, align 4
  %h = alloca i32, align 4
  store i32 %flag, i32* %flag.addr, align 4
  store i32 0, i32* @cc, align 4
  store i32 0, i32* @bb, align 4
  store i32 0, i32* @aa, align 4
  store i32 -1640531527, i32* %h, align 4
  store i32 -1640531527, i32* %g, align 4
  store i32 -1640531527, i32* %f, align 4
  store i32 -1640531527, i32* %e, align 4
  store i32 -1640531527, i32* %d, align 4
  store i32 -1640531527, i32* %c, align 4
  store i32 -1640531527, i32* %b, align 4
  store i32 -1640531527, i32* %a, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %b, align 4
  %shl = shl i32 %1, 11
  %2 = load i32, i32* %a, align 4
  %xor = xor i32 %2, %shl
  store i32 %xor, i32* %a, align 4
  %3 = load i32, i32* %a, align 4
  %4 = load i32, i32* %d, align 4
  %add = add i32 %4, %3
  store i32 %add, i32* %d, align 4
  %5 = load i32, i32* %c, align 4
  %6 = load i32, i32* %b, align 4
  %add1 = add i32 %6, %5
  store i32 %add1, i32* %b, align 4
  %7 = load i32, i32* %c, align 4
  %shr = lshr i32 %7, 2
  %8 = load i32, i32* %b, align 4
  %xor2 = xor i32 %8, %shr
  store i32 %xor2, i32* %b, align 4
  %9 = load i32, i32* %b, align 4
  %10 = load i32, i32* %e, align 4
  %add3 = add i32 %10, %9
  store i32 %add3, i32* %e, align 4
  %11 = load i32, i32* %d, align 4
  %12 = load i32, i32* %c, align 4
  %add4 = add i32 %12, %11
  store i32 %add4, i32* %c, align 4
  %13 = load i32, i32* %d, align 4
  %shl5 = shl i32 %13, 8
  %14 = load i32, i32* %c, align 4
  %xor6 = xor i32 %14, %shl5
  store i32 %xor6, i32* %c, align 4
  %15 = load i32, i32* %c, align 4
  %16 = load i32, i32* %f, align 4
  %add7 = add i32 %16, %15
  store i32 %add7, i32* %f, align 4
  %17 = load i32, i32* %e, align 4
  %18 = load i32, i32* %d, align 4
  %add8 = add i32 %18, %17
  store i32 %add8, i32* %d, align 4
  %19 = load i32, i32* %e, align 4
  %shr9 = lshr i32 %19, 16
  %20 = load i32, i32* %d, align 4
  %xor10 = xor i32 %20, %shr9
  store i32 %xor10, i32* %d, align 4
  %21 = load i32, i32* %d, align 4
  %22 = load i32, i32* %g, align 4
  %add11 = add i32 %22, %21
  store i32 %add11, i32* %g, align 4
  %23 = load i32, i32* %f, align 4
  %24 = load i32, i32* %e, align 4
  %add12 = add i32 %24, %23
  store i32 %add12, i32* %e, align 4
  %25 = load i32, i32* %f, align 4
  %shl13 = shl i32 %25, 10
  %26 = load i32, i32* %e, align 4
  %xor14 = xor i32 %26, %shl13
  store i32 %xor14, i32* %e, align 4
  %27 = load i32, i32* %e, align 4
  %28 = load i32, i32* %h, align 4
  %add15 = add i32 %28, %27
  store i32 %add15, i32* %h, align 4
  %29 = load i32, i32* %g, align 4
  %30 = load i32, i32* %f, align 4
  %add16 = add i32 %30, %29
  store i32 %add16, i32* %f, align 4
  %31 = load i32, i32* %g, align 4
  %shr17 = lshr i32 %31, 4
  %32 = load i32, i32* %f, align 4
  %xor18 = xor i32 %32, %shr17
  store i32 %xor18, i32* %f, align 4
  %33 = load i32, i32* %f, align 4
  %34 = load i32, i32* %a, align 4
  %add19 = add i32 %34, %33
  store i32 %add19, i32* %a, align 4
  %35 = load i32, i32* %h, align 4
  %36 = load i32, i32* %g, align 4
  %add20 = add i32 %36, %35
  store i32 %add20, i32* %g, align 4
  %37 = load i32, i32* %h, align 4
  %shl21 = shl i32 %37, 8
  %38 = load i32, i32* %g, align 4
  %xor22 = xor i32 %38, %shl21
  store i32 %xor22, i32* %g, align 4
  %39 = load i32, i32* %g, align 4
  %40 = load i32, i32* %b, align 4
  %add23 = add i32 %40, %39
  store i32 %add23, i32* %b, align 4
  %41 = load i32, i32* %a, align 4
  %42 = load i32, i32* %h, align 4
  %add24 = add i32 %42, %41
  store i32 %add24, i32* %h, align 4
  %43 = load i32, i32* %a, align 4
  %shr25 = lshr i32 %43, 9
  %44 = load i32, i32* %h, align 4
  %xor26 = xor i32 %44, %shr25
  store i32 %xor26, i32* %h, align 4
  %45 = load i32, i32* %h, align 4
  %46 = load i32, i32* %c, align 4
  %add27 = add i32 %46, %45
  store i32 %add27, i32* %c, align 4
  %47 = load i32, i32* %b, align 4
  %48 = load i32, i32* %a, align 4
  %add28 = add i32 %48, %47
  store i32 %add28, i32* %a, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %49 = load i32, i32* %i, align 4
  %inc = add nsw i32 %49, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond29

for.cond29:                                       ; preds = %for.inc101, %for.end
  %50 = load i32, i32* %i, align 4
  %cmp30 = icmp slt i32 %50, 256
  br i1 %cmp30, label %for.body31, label %for.end103

for.body31:                                       ; preds = %for.cond29
  %51 = load i32, i32* %flag.addr, align 4
  %tobool = icmp ne i32 %51, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body31
  %52 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %52
  %53 = load i32, i32* %arrayidx, align 4
  %54 = load i32, i32* %a, align 4
  %add32 = add i32 %54, %53
  store i32 %add32, i32* %a, align 4
  %55 = load i32, i32* %i, align 4
  %add33 = add nsw i32 %55, 1
  %arrayidx34 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %add33
  %56 = load i32, i32* %arrayidx34, align 4
  %57 = load i32, i32* %b, align 4
  %add35 = add i32 %57, %56
  store i32 %add35, i32* %b, align 4
  %58 = load i32, i32* %i, align 4
  %add36 = add nsw i32 %58, 2
  %arrayidx37 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %add36
  %59 = load i32, i32* %arrayidx37, align 4
  %60 = load i32, i32* %c, align 4
  %add38 = add i32 %60, %59
  store i32 %add38, i32* %c, align 4
  %61 = load i32, i32* %i, align 4
  %add39 = add nsw i32 %61, 3
  %arrayidx40 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %add39
  %62 = load i32, i32* %arrayidx40, align 4
  %63 = load i32, i32* %d, align 4
  %add41 = add i32 %63, %62
  store i32 %add41, i32* %d, align 4
  %64 = load i32, i32* %i, align 4
  %add42 = add nsw i32 %64, 4
  %arrayidx43 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %add42
  %65 = load i32, i32* %arrayidx43, align 4
  %66 = load i32, i32* %e, align 4
  %add44 = add i32 %66, %65
  store i32 %add44, i32* %e, align 4
  %67 = load i32, i32* %i, align 4
  %add45 = add nsw i32 %67, 5
  %arrayidx46 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %add45
  %68 = load i32, i32* %arrayidx46, align 4
  %69 = load i32, i32* %f, align 4
  %add47 = add i32 %69, %68
  store i32 %add47, i32* %f, align 4
  %70 = load i32, i32* %i, align 4
  %add48 = add nsw i32 %70, 6
  %arrayidx49 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %add48
  %71 = load i32, i32* %arrayidx49, align 4
  %72 = load i32, i32* %g, align 4
  %add50 = add i32 %72, %71
  store i32 %add50, i32* %g, align 4
  %73 = load i32, i32* %i, align 4
  %add51 = add nsw i32 %73, 7
  %arrayidx52 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %add51
  %74 = load i32, i32* %arrayidx52, align 4
  %75 = load i32, i32* %h, align 4
  %add53 = add i32 %75, %74
  store i32 %add53, i32* %h, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body31
  %76 = load i32, i32* %b, align 4
  %shl54 = shl i32 %76, 11
  %77 = load i32, i32* %a, align 4
  %xor55 = xor i32 %77, %shl54
  store i32 %xor55, i32* %a, align 4
  %78 = load i32, i32* %a, align 4
  %79 = load i32, i32* %d, align 4
  %add56 = add i32 %79, %78
  store i32 %add56, i32* %d, align 4
  %80 = load i32, i32* %c, align 4
  %81 = load i32, i32* %b, align 4
  %add57 = add i32 %81, %80
  store i32 %add57, i32* %b, align 4
  %82 = load i32, i32* %c, align 4
  %shr58 = lshr i32 %82, 2
  %83 = load i32, i32* %b, align 4
  %xor59 = xor i32 %83, %shr58
  store i32 %xor59, i32* %b, align 4
  %84 = load i32, i32* %b, align 4
  %85 = load i32, i32* %e, align 4
  %add60 = add i32 %85, %84
  store i32 %add60, i32* %e, align 4
  %86 = load i32, i32* %d, align 4
  %87 = load i32, i32* %c, align 4
  %add61 = add i32 %87, %86
  store i32 %add61, i32* %c, align 4
  %88 = load i32, i32* %d, align 4
  %shl62 = shl i32 %88, 8
  %89 = load i32, i32* %c, align 4
  %xor63 = xor i32 %89, %shl62
  store i32 %xor63, i32* %c, align 4
  %90 = load i32, i32* %c, align 4
  %91 = load i32, i32* %f, align 4
  %add64 = add i32 %91, %90
  store i32 %add64, i32* %f, align 4
  %92 = load i32, i32* %e, align 4
  %93 = load i32, i32* %d, align 4
  %add65 = add i32 %93, %92
  store i32 %add65, i32* %d, align 4
  %94 = load i32, i32* %e, align 4
  %shr66 = lshr i32 %94, 16
  %95 = load i32, i32* %d, align 4
  %xor67 = xor i32 %95, %shr66
  store i32 %xor67, i32* %d, align 4
  %96 = load i32, i32* %d, align 4
  %97 = load i32, i32* %g, align 4
  %add68 = add i32 %97, %96
  store i32 %add68, i32* %g, align 4
  %98 = load i32, i32* %f, align 4
  %99 = load i32, i32* %e, align 4
  %add69 = add i32 %99, %98
  store i32 %add69, i32* %e, align 4
  %100 = load i32, i32* %f, align 4
  %shl70 = shl i32 %100, 10
  %101 = load i32, i32* %e, align 4
  %xor71 = xor i32 %101, %shl70
  store i32 %xor71, i32* %e, align 4
  %102 = load i32, i32* %e, align 4
  %103 = load i32, i32* %h, align 4
  %add72 = add i32 %103, %102
  store i32 %add72, i32* %h, align 4
  %104 = load i32, i32* %g, align 4
  %105 = load i32, i32* %f, align 4
  %add73 = add i32 %105, %104
  store i32 %add73, i32* %f, align 4
  %106 = load i32, i32* %g, align 4
  %shr74 = lshr i32 %106, 4
  %107 = load i32, i32* %f, align 4
  %xor75 = xor i32 %107, %shr74
  store i32 %xor75, i32* %f, align 4
  %108 = load i32, i32* %f, align 4
  %109 = load i32, i32* %a, align 4
  %add76 = add i32 %109, %108
  store i32 %add76, i32* %a, align 4
  %110 = load i32, i32* %h, align 4
  %111 = load i32, i32* %g, align 4
  %add77 = add i32 %111, %110
  store i32 %add77, i32* %g, align 4
  %112 = load i32, i32* %h, align 4
  %shl78 = shl i32 %112, 8
  %113 = load i32, i32* %g, align 4
  %xor79 = xor i32 %113, %shl78
  store i32 %xor79, i32* %g, align 4
  %114 = load i32, i32* %g, align 4
  %115 = load i32, i32* %b, align 4
  %add80 = add i32 %115, %114
  store i32 %add80, i32* %b, align 4
  %116 = load i32, i32* %a, align 4
  %117 = load i32, i32* %h, align 4
  %add81 = add i32 %117, %116
  store i32 %add81, i32* %h, align 4
  %118 = load i32, i32* %a, align 4
  %shr82 = lshr i32 %118, 9
  %119 = load i32, i32* %h, align 4
  %xor83 = xor i32 %119, %shr82
  store i32 %xor83, i32* %h, align 4
  %120 = load i32, i32* %h, align 4
  %121 = load i32, i32* %c, align 4
  %add84 = add i32 %121, %120
  store i32 %add84, i32* %c, align 4
  %122 = load i32, i32* %b, align 4
  %123 = load i32, i32* %a, align 4
  %add85 = add i32 %123, %122
  store i32 %add85, i32* %a, align 4
  %124 = load i32, i32* %a, align 4
  %125 = load i32, i32* %i, align 4
  %arrayidx86 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %125
  store i32 %124, i32* %arrayidx86, align 4
  %126 = load i32, i32* %b, align 4
  %127 = load i32, i32* %i, align 4
  %add87 = add nsw i32 %127, 1
  %arrayidx88 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add87
  store i32 %126, i32* %arrayidx88, align 4
  %128 = load i32, i32* %c, align 4
  %129 = load i32, i32* %i, align 4
  %add89 = add nsw i32 %129, 2
  %arrayidx90 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add89
  store i32 %128, i32* %arrayidx90, align 4
  %130 = load i32, i32* %d, align 4
  %131 = load i32, i32* %i, align 4
  %add91 = add nsw i32 %131, 3
  %arrayidx92 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add91
  store i32 %130, i32* %arrayidx92, align 4
  %132 = load i32, i32* %e, align 4
  %133 = load i32, i32* %i, align 4
  %add93 = add nsw i32 %133, 4
  %arrayidx94 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add93
  store i32 %132, i32* %arrayidx94, align 4
  %134 = load i32, i32* %f, align 4
  %135 = load i32, i32* %i, align 4
  %add95 = add nsw i32 %135, 5
  %arrayidx96 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add95
  store i32 %134, i32* %arrayidx96, align 4
  %136 = load i32, i32* %g, align 4
  %137 = load i32, i32* %i, align 4
  %add97 = add nsw i32 %137, 6
  %arrayidx98 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add97
  store i32 %136, i32* %arrayidx98, align 4
  %138 = load i32, i32* %h, align 4
  %139 = load i32, i32* %i, align 4
  %add99 = add nsw i32 %139, 7
  %arrayidx100 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add99
  store i32 %138, i32* %arrayidx100, align 4
  br label %for.inc101

for.inc101:                                       ; preds = %if.end
  %140 = load i32, i32* %i, align 4
  %add102 = add nsw i32 %140, 8
  store i32 %add102, i32* %i, align 4
  br label %for.cond29

for.end103:                                       ; preds = %for.cond29
  %141 = load i32, i32* %flag.addr, align 4
  %tobool104 = icmp ne i32 %141, 0
  br i1 %tobool104, label %if.then105, label %if.end182

if.then105:                                       ; preds = %for.end103
  store i32 0, i32* %i, align 4
  br label %for.cond106

for.cond106:                                      ; preds = %for.inc179, %if.then105
  %142 = load i32, i32* %i, align 4
  %cmp107 = icmp slt i32 %142, 256
  br i1 %cmp107, label %for.body108, label %for.end181

for.body108:                                      ; preds = %for.cond106
  %143 = load i32, i32* %i, align 4
  %arrayidx109 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %143
  %144 = load i32, i32* %arrayidx109, align 4
  %145 = load i32, i32* %a, align 4
  %add110 = add i32 %145, %144
  store i32 %add110, i32* %a, align 4
  %146 = load i32, i32* %i, align 4
  %add111 = add nsw i32 %146, 1
  %arrayidx112 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add111
  %147 = load i32, i32* %arrayidx112, align 4
  %148 = load i32, i32* %b, align 4
  %add113 = add i32 %148, %147
  store i32 %add113, i32* %b, align 4
  %149 = load i32, i32* %i, align 4
  %add114 = add nsw i32 %149, 2
  %arrayidx115 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add114
  %150 = load i32, i32* %arrayidx115, align 4
  %151 = load i32, i32* %c, align 4
  %add116 = add i32 %151, %150
  store i32 %add116, i32* %c, align 4
  %152 = load i32, i32* %i, align 4
  %add117 = add nsw i32 %152, 3
  %arrayidx118 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add117
  %153 = load i32, i32* %arrayidx118, align 4
  %154 = load i32, i32* %d, align 4
  %add119 = add i32 %154, %153
  store i32 %add119, i32* %d, align 4
  %155 = load i32, i32* %i, align 4
  %add120 = add nsw i32 %155, 4
  %arrayidx121 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add120
  %156 = load i32, i32* %arrayidx121, align 4
  %157 = load i32, i32* %e, align 4
  %add122 = add i32 %157, %156
  store i32 %add122, i32* %e, align 4
  %158 = load i32, i32* %i, align 4
  %add123 = add nsw i32 %158, 5
  %arrayidx124 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add123
  %159 = load i32, i32* %arrayidx124, align 4
  %160 = load i32, i32* %f, align 4
  %add125 = add i32 %160, %159
  store i32 %add125, i32* %f, align 4
  %161 = load i32, i32* %i, align 4
  %add126 = add nsw i32 %161, 6
  %arrayidx127 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add126
  %162 = load i32, i32* %arrayidx127, align 4
  %163 = load i32, i32* %g, align 4
  %add128 = add i32 %163, %162
  store i32 %add128, i32* %g, align 4
  %164 = load i32, i32* %i, align 4
  %add129 = add nsw i32 %164, 7
  %arrayidx130 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add129
  %165 = load i32, i32* %arrayidx130, align 4
  %166 = load i32, i32* %h, align 4
  %add131 = add i32 %166, %165
  store i32 %add131, i32* %h, align 4
  %167 = load i32, i32* %b, align 4
  %shl132 = shl i32 %167, 11
  %168 = load i32, i32* %a, align 4
  %xor133 = xor i32 %168, %shl132
  store i32 %xor133, i32* %a, align 4
  %169 = load i32, i32* %a, align 4
  %170 = load i32, i32* %d, align 4
  %add134 = add i32 %170, %169
  store i32 %add134, i32* %d, align 4
  %171 = load i32, i32* %c, align 4
  %172 = load i32, i32* %b, align 4
  %add135 = add i32 %172, %171
  store i32 %add135, i32* %b, align 4
  %173 = load i32, i32* %c, align 4
  %shr136 = lshr i32 %173, 2
  %174 = load i32, i32* %b, align 4
  %xor137 = xor i32 %174, %shr136
  store i32 %xor137, i32* %b, align 4
  %175 = load i32, i32* %b, align 4
  %176 = load i32, i32* %e, align 4
  %add138 = add i32 %176, %175
  store i32 %add138, i32* %e, align 4
  %177 = load i32, i32* %d, align 4
  %178 = load i32, i32* %c, align 4
  %add139 = add i32 %178, %177
  store i32 %add139, i32* %c, align 4
  %179 = load i32, i32* %d, align 4
  %shl140 = shl i32 %179, 8
  %180 = load i32, i32* %c, align 4
  %xor141 = xor i32 %180, %shl140
  store i32 %xor141, i32* %c, align 4
  %181 = load i32, i32* %c, align 4
  %182 = load i32, i32* %f, align 4
  %add142 = add i32 %182, %181
  store i32 %add142, i32* %f, align 4
  %183 = load i32, i32* %e, align 4
  %184 = load i32, i32* %d, align 4
  %add143 = add i32 %184, %183
  store i32 %add143, i32* %d, align 4
  %185 = load i32, i32* %e, align 4
  %shr144 = lshr i32 %185, 16
  %186 = load i32, i32* %d, align 4
  %xor145 = xor i32 %186, %shr144
  store i32 %xor145, i32* %d, align 4
  %187 = load i32, i32* %d, align 4
  %188 = load i32, i32* %g, align 4
  %add146 = add i32 %188, %187
  store i32 %add146, i32* %g, align 4
  %189 = load i32, i32* %f, align 4
  %190 = load i32, i32* %e, align 4
  %add147 = add i32 %190, %189
  store i32 %add147, i32* %e, align 4
  %191 = load i32, i32* %f, align 4
  %shl148 = shl i32 %191, 10
  %192 = load i32, i32* %e, align 4
  %xor149 = xor i32 %192, %shl148
  store i32 %xor149, i32* %e, align 4
  %193 = load i32, i32* %e, align 4
  %194 = load i32, i32* %h, align 4
  %add150 = add i32 %194, %193
  store i32 %add150, i32* %h, align 4
  %195 = load i32, i32* %g, align 4
  %196 = load i32, i32* %f, align 4
  %add151 = add i32 %196, %195
  store i32 %add151, i32* %f, align 4
  %197 = load i32, i32* %g, align 4
  %shr152 = lshr i32 %197, 4
  %198 = load i32, i32* %f, align 4
  %xor153 = xor i32 %198, %shr152
  store i32 %xor153, i32* %f, align 4
  %199 = load i32, i32* %f, align 4
  %200 = load i32, i32* %a, align 4
  %add154 = add i32 %200, %199
  store i32 %add154, i32* %a, align 4
  %201 = load i32, i32* %h, align 4
  %202 = load i32, i32* %g, align 4
  %add155 = add i32 %202, %201
  store i32 %add155, i32* %g, align 4
  %203 = load i32, i32* %h, align 4
  %shl156 = shl i32 %203, 8
  %204 = load i32, i32* %g, align 4
  %xor157 = xor i32 %204, %shl156
  store i32 %xor157, i32* %g, align 4
  %205 = load i32, i32* %g, align 4
  %206 = load i32, i32* %b, align 4
  %add158 = add i32 %206, %205
  store i32 %add158, i32* %b, align 4
  %207 = load i32, i32* %a, align 4
  %208 = load i32, i32* %h, align 4
  %add159 = add i32 %208, %207
  store i32 %add159, i32* %h, align 4
  %209 = load i32, i32* %a, align 4
  %shr160 = lshr i32 %209, 9
  %210 = load i32, i32* %h, align 4
  %xor161 = xor i32 %210, %shr160
  store i32 %xor161, i32* %h, align 4
  %211 = load i32, i32* %h, align 4
  %212 = load i32, i32* %c, align 4
  %add162 = add i32 %212, %211
  store i32 %add162, i32* %c, align 4
  %213 = load i32, i32* %b, align 4
  %214 = load i32, i32* %a, align 4
  %add163 = add i32 %214, %213
  store i32 %add163, i32* %a, align 4
  %215 = load i32, i32* %a, align 4
  %216 = load i32, i32* %i, align 4
  %arrayidx164 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %216
  store i32 %215, i32* %arrayidx164, align 4
  %217 = load i32, i32* %b, align 4
  %218 = load i32, i32* %i, align 4
  %add165 = add nsw i32 %218, 1
  %arrayidx166 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add165
  store i32 %217, i32* %arrayidx166, align 4
  %219 = load i32, i32* %c, align 4
  %220 = load i32, i32* %i, align 4
  %add167 = add nsw i32 %220, 2
  %arrayidx168 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add167
  store i32 %219, i32* %arrayidx168, align 4
  %221 = load i32, i32* %d, align 4
  %222 = load i32, i32* %i, align 4
  %add169 = add nsw i32 %222, 3
  %arrayidx170 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add169
  store i32 %221, i32* %arrayidx170, align 4
  %223 = load i32, i32* %e, align 4
  %224 = load i32, i32* %i, align 4
  %add171 = add nsw i32 %224, 4
  %arrayidx172 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add171
  store i32 %223, i32* %arrayidx172, align 4
  %225 = load i32, i32* %f, align 4
  %226 = load i32, i32* %i, align 4
  %add173 = add nsw i32 %226, 5
  %arrayidx174 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add173
  store i32 %225, i32* %arrayidx174, align 4
  %227 = load i32, i32* %g, align 4
  %228 = load i32, i32* %i, align 4
  %add175 = add nsw i32 %228, 6
  %arrayidx176 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add175
  store i32 %227, i32* %arrayidx176, align 4
  %229 = load i32, i32* %h, align 4
  %230 = load i32, i32* %i, align 4
  %add177 = add nsw i32 %230, 7
  %arrayidx178 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add177
  store i32 %229, i32* %arrayidx178, align 4
  br label %for.inc179

for.inc179:                                       ; preds = %for.body108
  %231 = load i32, i32* %i, align 4
  %add180 = add nsw i32 %231, 8
  store i32 %add180, i32* %i, align 4
  br label %for.cond106

for.end181:                                       ; preds = %for.cond106
  br label %if.end182

if.end182:                                        ; preds = %for.end181, %for.end103
  call void @isaac()
  store i32 0, i32* @randcnt, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @iRandom() #0 {
entry:
  %r = alloca i32, align 4
  %0 = load i32, i32* @randcnt, align 4
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %0
  %1 = load i32, i32* %arrayidx, align 4
  store i32 %1, i32* %r, align 4
  %2 = load i32, i32* @randcnt, align 4
  %inc = add i32 %2, 1
  store i32 %inc, i32* @randcnt, align 4
  %3 = load i32, i32* @randcnt, align 4
  %cmp = icmp ugt i32 %3, 255
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @isaac()
  store i32 0, i32* @randcnt, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* %r, align 4
  ret i32 %4
}

; Function Attrs: noinline nounwind optnone
define hidden signext i8 @iRandA() #0 {
entry:
  %call = call i32 @iRandom()
  %rem = urem i32 %call, 95
  %add = add i32 %rem, 32
  %conv = trunc i32 %add to i8
  ret i8 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden void @iSeed(i8* %seed, i32 %flag) #0 {
entry:
  %seed.addr = alloca i8*, align 4
  %flag.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %m = alloca i32, align 4
  store i8* %seed, i8** %seed.addr, align 4
  store i32 %flag, i32* %flag.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %0, 256
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %1
  store i32 0, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %i, align 4
  %inc = add i32 %2, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %3 = load i8*, i8** %seed.addr, align 4
  %call = call i32 @strlen(i8* %3) #4
  store i32 %call, i32* %m, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc8, %for.end
  %4 = load i32, i32* %i, align 4
  %cmp2 = icmp ult i32 %4, 256
  br i1 %cmp2, label %for.body3, label %for.end10

for.body3:                                        ; preds = %for.cond1
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %m, align 4
  %cmp4 = icmp ugt i32 %5, %6
  br i1 %cmp4, label %if.then, label %if.else

if.then:                                          ; preds = %for.body3
  %7 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %7
  store i32 0, i32* %arrayidx5, align 4
  br label %if.end

if.else:                                          ; preds = %for.body3
  %8 = load i8*, i8** %seed.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds i8, i8* %8, i32 %9
  %10 = load i8, i8* %arrayidx6, align 1
  %conv = sext i8 %10 to i32
  %11 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %11
  store i32 %conv, i32* %arrayidx7, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc8

for.inc8:                                         ; preds = %if.end
  %12 = load i32, i32* %i, align 4
  %inc9 = add i32 %12, 1
  store i32 %inc9, i32* %i, align 4
  br label %for.cond1

for.end10:                                        ; preds = %for.cond1
  %13 = load i32, i32* %flag.addr, align 4
  call void @randinit(i32 %13)
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i8* @Vernam(i8* %msg) #0 {
entry:
  %msg.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %l = alloca i32, align 4
  store i8* %msg, i8** %msg.addr, align 4
  %0 = load i8*, i8** %msg.addr, align 4
  %call = call i32 @strlen(i8* %0) #4
  store i32 %call, i32* %l, align 4
  %1 = load i32, i32* %l, align 4
  %add = add i32 %1, 1
  call void @llvm.memset.p0i8.i32(i8* align 16 getelementptr inbounds ([4096 x i8], [4096 x i8]* @v, i32 0, i32 0), i8 0, i32 %add, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %l, align 4
  %cmp = icmp ult i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call1 = call signext i8 @iRandA()
  %conv = sext i8 %call1 to i32
  %4 = load i8*, i8** %msg.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %4, i32 %5
  %6 = load i8, i8* %arrayidx, align 1
  %conv2 = sext i8 %6 to i32
  %xor = xor i32 %conv, %conv2
  %conv3 = trunc i32 %xor to i8
  %7 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds [4096 x i8], [4096 x i8]* @v, i32 0, i32 %7
  store i8 %conv3, i8* %arrayidx4, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %inc = add i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i8* getelementptr inbounds ([4096 x i8], [4096 x i8]* @v, i32 0, i32 0)
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define hidden signext i8 @Caesar(i32 %m, i8 signext %ch, i8 signext %shift, i8 signext %modulo, i8 signext %start) #0 {
entry:
  %m.addr = alloca i32, align 4
  %ch.addr = alloca i8, align 1
  %shift.addr = alloca i8, align 1
  %modulo.addr = alloca i8, align 1
  %start.addr = alloca i8, align 1
  %n = alloca i32, align 4
  store i32 %m, i32* %m.addr, align 4
  store i8 %ch, i8* %ch.addr, align 1
  store i8 %shift, i8* %shift.addr, align 1
  store i8 %modulo, i8* %modulo.addr, align 1
  store i8 %start, i8* %start.addr, align 1
  %0 = load i32, i32* %m.addr, align 4
  %cmp = icmp eq i32 %0, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i8, i8* %shift.addr, align 1
  %conv = sext i8 %1 to i32
  %sub = sub nsw i32 0, %conv
  %conv1 = trunc i32 %sub to i8
  store i8 %conv1, i8* %shift.addr, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i8, i8* %ch.addr, align 1
  %conv2 = sext i8 %2 to i32
  %3 = load i8, i8* %start.addr, align 1
  %conv3 = sext i8 %3 to i32
  %sub4 = sub nsw i32 %conv2, %conv3
  %4 = load i8, i8* %shift.addr, align 1
  %conv5 = sext i8 %4 to i32
  %add = add nsw i32 %sub4, %conv5
  store i32 %add, i32* %n, align 4
  %5 = load i32, i32* %n, align 4
  %6 = load i8, i8* %modulo.addr, align 1
  %conv6 = sext i8 %6 to i32
  %rem = srem i32 %5, %conv6
  store i32 %rem, i32* %n, align 4
  %7 = load i32, i32* %n, align 4
  %cmp7 = icmp slt i32 %7, 0
  br i1 %cmp7, label %if.then9, label %if.end12

if.then9:                                         ; preds = %if.end
  %8 = load i8, i8* %modulo.addr, align 1
  %conv10 = sext i8 %8 to i32
  %9 = load i32, i32* %n, align 4
  %add11 = add nsw i32 %9, %conv10
  store i32 %add11, i32* %n, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then9, %if.end
  %10 = load i8, i8* %start.addr, align 1
  %conv13 = sext i8 %10 to i32
  %11 = load i32, i32* %n, align 4
  %add14 = add nsw i32 %conv13, %11
  %conv15 = trunc i32 %add14 to i8
  ret i8 %conv15
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @CaesarStr(i32 %m, i8* %msg, i8 signext %modulo, i8 signext %start) #0 {
entry:
  %m.addr = alloca i32, align 4
  %msg.addr = alloca i8*, align 4
  %modulo.addr = alloca i8, align 1
  %start.addr = alloca i8, align 1
  %i = alloca i32, align 4
  %l = alloca i32, align 4
  store i32 %m, i32* %m.addr, align 4
  store i8* %msg, i8** %msg.addr, align 4
  store i8 %modulo, i8* %modulo.addr, align 1
  store i8 %start, i8* %start.addr, align 1
  %0 = load i8*, i8** %msg.addr, align 4
  %call = call i32 @strlen(i8* %0) #4
  store i32 %call, i32* %l, align 4
  %1 = load i32, i32* %l, align 4
  %add = add i32 %1, 1
  call void @llvm.memset.p0i8.i32(i8* align 16 getelementptr inbounds ([4096 x i8], [4096 x i8]* @c, i32 0, i32 0), i8 0, i32 %add, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %l, align 4
  %cmp = icmp ult i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %m.addr, align 4
  %5 = load i8*, i8** %msg.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %5, i32 %6
  %7 = load i8, i8* %arrayidx, align 1
  %call1 = call signext i8 @iRandA()
  %8 = load i8, i8* %modulo.addr, align 1
  %9 = load i8, i8* %start.addr, align 1
  %call2 = call signext i8 @Caesar(i32 %4, i8 signext %7, i8 signext %call1, i8 signext %8, i8 signext %9)
  %10 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds [4096 x i8], [4096 x i8]* @c, i32 0, i32 %10
  store i8 %call2, i8* %arrayidx3, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i8* getelementptr inbounds ([4096 x i8], [4096 x i8]* @c, i32 0, i32 0)
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %n = alloca i32, align 4
  %l = alloca i32, align 4
  %msg = alloca i8*, align 4
  %key = alloca i8*, align 4
  %vctx = alloca [4096 x i8], align 16
  %vptx = alloca [4096 x i8], align 16
  %cctx = alloca [4096 x i8], align 16
  %cptx = alloca [4096 x i8], align 16
  store i32 0, i32* %retval, align 4
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i32 0, i32 0), i8** %msg, align 4
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i32 0, i32 0), i8** %key, align 4
  %0 = load i8*, i8** %msg, align 4
  %call = call i32 @strlen(i8* %0) #4
  store i32 %call, i32* %l, align 4
  %1 = load i8*, i8** %key, align 4
  call void @iSeed(i8* %1, i32 1)
  %arraydecay = getelementptr inbounds [4096 x i8], [4096 x i8]* %vctx, i32 0, i32 0
  %2 = load i8*, i8** %msg, align 4
  %call1 = call i8* @Vernam(i8* %2)
  %call2 = call i8* @strcpy(i8* %arraydecay, i8* %call1)
  %arraydecay3 = getelementptr inbounds [4096 x i8], [4096 x i8]* %cctx, i32 0, i32 0
  %3 = load i8*, i8** %msg, align 4
  %call4 = call i8* @CaesarStr(i32 0, i8* %3, i8 signext 95, i8 signext 32)
  %call5 = call i8* @strcpy(i8* %arraydecay3, i8* %call4)
  %4 = load i8*, i8** %key, align 4
  call void @iSeed(i8* %4, i32 1)
  %arraydecay6 = getelementptr inbounds [4096 x i8], [4096 x i8]* %vptx, i32 0, i32 0
  %arraydecay7 = getelementptr inbounds [4096 x i8], [4096 x i8]* %vctx, i32 0, i32 0
  %call8 = call i8* @Vernam(i8* %arraydecay7)
  %call9 = call i8* @strcpy(i8* %arraydecay6, i8* %call8)
  %arraydecay10 = getelementptr inbounds [4096 x i8], [4096 x i8]* %cptx, i32 0, i32 0
  %arraydecay11 = getelementptr inbounds [4096 x i8], [4096 x i8]* %cctx, i32 0, i32 0
  %call12 = call i8* @CaesarStr(i32 1, i8* %arraydecay11, i8 signext 95, i8 signext 32)
  %call13 = call i8* @strcpy(i8* %arraydecay10, i8* %call12)
  %5 = load i8*, i8** %msg, align 4
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i32 0, i32 0), i8* %5)
  %6 = load i8*, i8** %key, align 4
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3, i32 0, i32 0), i8* %6)
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i32 0, i32 0))
  store i32 0, i32* %n, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %7 = load i32, i32* %n, align 4
  %8 = load i32, i32* %l, align 4
  %cmp = icmp ult i32 %7, %8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i32, i32* %n, align 4
  %arrayidx = getelementptr inbounds [4096 x i8], [4096 x i8]* %vctx, i32 0, i32 %9
  %10 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %10 to i32
  %call17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i32 %conv)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %n, align 4
  %inc = add i32 %11, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i32 0, i32 0))
  %arraydecay19 = getelementptr inbounds [4096 x i8], [4096 x i8]* %vptx, i32 0, i32 0
  %call20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7, i32 0, i32 0), i8* %arraydecay19)
  %call21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8, i32 0, i32 0))
  store i32 0, i32* %n, align 4
  br label %for.cond22

for.cond22:                                       ; preds = %for.inc29, %for.end
  %12 = load i32, i32* %n, align 4
  %13 = load i32, i32* %l, align 4
  %cmp23 = icmp ult i32 %12, %13
  br i1 %cmp23, label %for.body25, label %for.end31

for.body25:                                       ; preds = %for.cond22
  %14 = load i32, i32* %n, align 4
  %arrayidx26 = getelementptr inbounds [4096 x i8], [4096 x i8]* %cctx, i32 0, i32 %14
  %15 = load i8, i8* %arrayidx26, align 1
  %conv27 = sext i8 %15 to i32
  %call28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i32 %conv27)
  br label %for.inc29

for.inc29:                                        ; preds = %for.body25
  %16 = load i32, i32* %n, align 4
  %inc30 = add i32 %16, 1
  store i32 %inc30, i32* %n, align 4
  br label %for.cond22

for.end31:                                        ; preds = %for.cond22
  %call32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i32 0, i32 0))
  %arraydecay33 = getelementptr inbounds [4096 x i8], [4096 x i8]* %cptx, i32 0, i32 0
  %call34 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.9, i32 0, i32 0), i8* %arraydecay33)
  ret i32 0
}

declare i8* @strcpy(i8* %0, i8* %1) #3

declare i32 @printf(i8* %0, ...) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn writeonly }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ult i32 %0, 256
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ult %0, 256:i32
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add i32 %2, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call = call i32 @strlen(i8* %3) #4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp ult i32 %4, 256
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ult %0, 256:i32
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %m, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp4 = icmp ugt i32 %5, %6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i8, i8* %arrayidx6, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %10 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc9 = add i32 %12, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %flag.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for iSeed()

; entering Souper's runOnFunction() for Vernam()

; ModuleID = './The_ISAAC_Cipher.c.bc'
source_filename = "./The_ISAAC_Cipher.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@cc = internal global i32 0, align 4
@bb = internal global i32 0, align 4
@mm = internal global [256 x i32] zeroinitializer, align 16
@aa = internal global i32 0, align 4
@randrsl = hidden global [256 x i32] zeroinitializer, align 16
@randcnt = hidden global i32 0, align 4
@v = hidden global [4096 x i8] zeroinitializer, align 16
@c = hidden global [4096 x i8] zeroinitializer, align 16
@.str = private unnamed_addr constant [20 x i8] c"a Top Secret secret\00", align 1
@.str.1 = private unnamed_addr constant [22 x i8] c"this is my secret key\00", align 1
@.str.2 = private unnamed_addr constant [13 x i8] c"Message: %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [13 x i8] c"Key    : %s\0A\00", align 1
@.str.4 = private unnamed_addr constant [10 x i8] c"XOR    : \00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"%02X\00", align 1
@.str.6 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.7 = private unnamed_addr constant [13 x i8] c"XOR dcr: %s\0A\00", align 1
@.str.8 = private unnamed_addr constant [10 x i8] c"MOD    : \00", align 1
@.str.9 = private unnamed_addr constant [13 x i8] c"MOD dcr: %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @isaac() #0 {
entry:
  %i = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %0 = load i32, i32* @cc, align 4
  %add = add i32 %0, 1
  store i32 %add, i32* @cc, align 4
  %1 = load i32, i32* @bb, align 4
  %2 = load i32, i32* @cc, align 4
  %add1 = add i32 %1, %2
  store i32 %add1, i32* @bb, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %3, 256
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  store i32 %5, i32* %x, align 4
  %6 = load i32, i32* %i, align 4
  %rem = urem i32 %6, 4
  switch i32 %rem, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb2
    i32 2, label %sw.bb4
    i32 3, label %sw.bb7
  ]

sw.bb:                                            ; preds = %for.body
  %7 = load i32, i32* @aa, align 4
  %8 = load i32, i32* @aa, align 4
  %shl = shl i32 %8, 13
  %xor = xor i32 %7, %shl
  store i32 %xor, i32* @aa, align 4
  br label %sw.epilog

sw.bb2:                                           ; preds = %for.body
  %9 = load i32, i32* @aa, align 4
  %10 = load i32, i32* @aa, align 4
  %shr = lshr i32 %10, 6
  %xor3 = xor i32 %9, %shr
  store i32 %xor3, i32* @aa, align 4
  br label %sw.epilog

sw.bb4:                                           ; preds = %for.body
  %11 = load i32, i32* @aa, align 4
  %12 = load i32, i32* @aa, align 4
  %shl5 = shl i32 %12, 2
  %xor6 = xor i32 %11, %shl5
  store i32 %xor6, i32* @aa, align 4
  br label %sw.epilog

sw.bb7:                                           ; preds = %for.body
  %13 = load i32, i32* @aa, align 4
  %14 = load i32, i32* @aa, align 4
  %shr8 = lshr i32 %14, 16
  %xor9 = xor i32 %13, %shr8
  store i32 %xor9, i32* @aa, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %for.body, %sw.bb7, %sw.bb4, %sw.bb2, %sw.bb
  %15 = load i32, i32* %i, align 4
  %add10 = add i32 %15, 128
  %rem11 = urem i32 %add10, 256
  %arrayidx12 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %rem11
  %16 = load i32, i32* %arrayidx12, align 4
  %17 = load i32, i32* @aa, align 4
  %add13 = add i32 %16, %17
  store i32 %add13, i32* @aa, align 4
  %18 = load i32, i32* %x, align 4
  %shr14 = lshr i32 %18, 2
  %rem15 = urem i32 %shr14, 256
  %arrayidx16 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %rem15
  %19 = load i32, i32* %arrayidx16, align 4
  %20 = load i32, i32* @aa, align 4
  %add17 = add i32 %19, %20
  %21 = load i32, i32* @bb, align 4
  %add18 = add i32 %add17, %21
  store i32 %add18, i32* %y, align 4
  %22 = load i32, i32* %i, align 4
  %arrayidx19 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %22
  store i32 %add18, i32* %arrayidx19, align 4
  %23 = load i32, i32* %y, align 4
  %shr20 = lshr i32 %23, 10
  %rem21 = urem i32 %shr20, 256
  %arrayidx22 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %rem21
  %24 = load i32, i32* %arrayidx22, align 4
  %25 = load i32, i32* %x, align 4
  %add23 = add i32 %24, %25
  store i32 %add23, i32* @bb, align 4
  %26 = load i32, i32* %i, align 4
  %arrayidx24 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %26
  store i32 %add23, i32* %arrayidx24, align 4
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %27 = load i32, i32* %i, align 4
  %inc = add i32 %27, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* @randcnt, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @randinit(i32 %flag) #0 {
entry:
  %flag.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %c = alloca i32, align 4
  %d = alloca i32, align 4
  %e = alloca i32, align 4
  %f = alloca i32, align 4
  %g = alloca i32, align 4
  %h = alloca i32, align 4
  store i32 %flag, i32* %flag.addr, align 4
  store i32 0, i32* @cc, align 4
  store i32 0, i32* @bb, align 4
  store i32 0, i32* @aa, align 4
  store i32 -1640531527, i32* %h, align 4
  store i32 -1640531527, i32* %g, align 4
  store i32 -1640531527, i32* %f, align 4
  store i32 -1640531527, i32* %e, align 4
  store i32 -1640531527, i32* %d, align 4
  store i32 -1640531527, i32* %c, align 4
  store i32 -1640531527, i32* %b, align 4
  store i32 -1640531527, i32* %a, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %b, align 4
  %shl = shl i32 %1, 11
  %2 = load i32, i32* %a, align 4
  %xor = xor i32 %2, %shl
  store i32 %xor, i32* %a, align 4
  %3 = load i32, i32* %a, align 4
  %4 = load i32, i32* %d, align 4
  %add = add i32 %4, %3
  store i32 %add, i32* %d, align 4
  %5 = load i32, i32* %c, align 4
  %6 = load i32, i32* %b, align 4
  %add1 = add i32 %6, %5
  store i32 %add1, i32* %b, align 4
  %7 = load i32, i32* %c, align 4
  %shr = lshr i32 %7, 2
  %8 = load i32, i32* %b, align 4
  %xor2 = xor i32 %8, %shr
  store i32 %xor2, i32* %b, align 4
  %9 = load i32, i32* %b, align 4
  %10 = load i32, i32* %e, align 4
  %add3 = add i32 %10, %9
  store i32 %add3, i32* %e, align 4
  %11 = load i32, i32* %d, align 4
  %12 = load i32, i32* %c, align 4
  %add4 = add i32 %12, %11
  store i32 %add4, i32* %c, align 4
  %13 = load i32, i32* %d, align 4
  %shl5 = shl i32 %13, 8
  %14 = load i32, i32* %c, align 4
  %xor6 = xor i32 %14, %shl5
  store i32 %xor6, i32* %c, align 4
  %15 = load i32, i32* %c, align 4
  %16 = load i32, i32* %f, align 4
  %add7 = add i32 %16, %15
  store i32 %add7, i32* %f, align 4
  %17 = load i32, i32* %e, align 4
  %18 = load i32, i32* %d, align 4
  %add8 = add i32 %18, %17
  store i32 %add8, i32* %d, align 4
  %19 = load i32, i32* %e, align 4
  %shr9 = lshr i32 %19, 16
  %20 = load i32, i32* %d, align 4
  %xor10 = xor i32 %20, %shr9
  store i32 %xor10, i32* %d, align 4
  %21 = load i32, i32* %d, align 4
  %22 = load i32, i32* %g, align 4
  %add11 = add i32 %22, %21
  store i32 %add11, i32* %g, align 4
  %23 = load i32, i32* %f, align 4
  %24 = load i32, i32* %e, align 4
  %add12 = add i32 %24, %23
  store i32 %add12, i32* %e, align 4
  %25 = load i32, i32* %f, align 4
  %shl13 = shl i32 %25, 10
  %26 = load i32, i32* %e, align 4
  %xor14 = xor i32 %26, %shl13
  store i32 %xor14, i32* %e, align 4
  %27 = load i32, i32* %e, align 4
  %28 = load i32, i32* %h, align 4
  %add15 = add i32 %28, %27
  store i32 %add15, i32* %h, align 4
  %29 = load i32, i32* %g, align 4
  %30 = load i32, i32* %f, align 4
  %add16 = add i32 %30, %29
  store i32 %add16, i32* %f, align 4
  %31 = load i32, i32* %g, align 4
  %shr17 = lshr i32 %31, 4
  %32 = load i32, i32* %f, align 4
  %xor18 = xor i32 %32, %shr17
  store i32 %xor18, i32* %f, align 4
  %33 = load i32, i32* %f, align 4
  %34 = load i32, i32* %a, align 4
  %add19 = add i32 %34, %33
  store i32 %add19, i32* %a, align 4
  %35 = load i32, i32* %h, align 4
  %36 = load i32, i32* %g, align 4
  %add20 = add i32 %36, %35
  store i32 %add20, i32* %g, align 4
  %37 = load i32, i32* %h, align 4
  %shl21 = shl i32 %37, 8
  %38 = load i32, i32* %g, align 4
  %xor22 = xor i32 %38, %shl21
  store i32 %xor22, i32* %g, align 4
  %39 = load i32, i32* %g, align 4
  %40 = load i32, i32* %b, align 4
  %add23 = add i32 %40, %39
  store i32 %add23, i32* %b, align 4
  %41 = load i32, i32* %a, align 4
  %42 = load i32, i32* %h, align 4
  %add24 = add i32 %42, %41
  store i32 %add24, i32* %h, align 4
  %43 = load i32, i32* %a, align 4
  %shr25 = lshr i32 %43, 9
  %44 = load i32, i32* %h, align 4
  %xor26 = xor i32 %44, %shr25
  store i32 %xor26, i32* %h, align 4
  %45 = load i32, i32* %h, align 4
  %46 = load i32, i32* %c, align 4
  %add27 = add i32 %46, %45
  store i32 %add27, i32* %c, align 4
  %47 = load i32, i32* %b, align 4
  %48 = load i32, i32* %a, align 4
  %add28 = add i32 %48, %47
  store i32 %add28, i32* %a, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %49 = load i32, i32* %i, align 4
  %inc = add nsw i32 %49, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond29

for.cond29:                                       ; preds = %for.inc101, %for.end
  %50 = load i32, i32* %i, align 4
  %cmp30 = icmp slt i32 %50, 256
  br i1 %cmp30, label %for.body31, label %for.end103

for.body31:                                       ; preds = %for.cond29
  %51 = load i32, i32* %flag.addr, align 4
  %tobool = icmp ne i32 %51, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body31
  %52 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %52
  %53 = load i32, i32* %arrayidx, align 4
  %54 = load i32, i32* %a, align 4
  %add32 = add i32 %54, %53
  store i32 %add32, i32* %a, align 4
  %55 = load i32, i32* %i, align 4
  %add33 = add nsw i32 %55, 1
  %arrayidx34 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %add33
  %56 = load i32, i32* %arrayidx34, align 4
  %57 = load i32, i32* %b, align 4
  %add35 = add i32 %57, %56
  store i32 %add35, i32* %b, align 4
  %58 = load i32, i32* %i, align 4
  %add36 = add nsw i32 %58, 2
  %arrayidx37 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %add36
  %59 = load i32, i32* %arrayidx37, align 4
  %60 = load i32, i32* %c, align 4
  %add38 = add i32 %60, %59
  store i32 %add38, i32* %c, align 4
  %61 = load i32, i32* %i, align 4
  %add39 = add nsw i32 %61, 3
  %arrayidx40 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %add39
  %62 = load i32, i32* %arrayidx40, align 4
  %63 = load i32, i32* %d, align 4
  %add41 = add i32 %63, %62
  store i32 %add41, i32* %d, align 4
  %64 = load i32, i32* %i, align 4
  %add42 = add nsw i32 %64, 4
  %arrayidx43 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %add42
  %65 = load i32, i32* %arrayidx43, align 4
  %66 = load i32, i32* %e, align 4
  %add44 = add i32 %66, %65
  store i32 %add44, i32* %e, align 4
  %67 = load i32, i32* %i, align 4
  %add45 = add nsw i32 %67, 5
  %arrayidx46 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %add45
  %68 = load i32, i32* %arrayidx46, align 4
  %69 = load i32, i32* %f, align 4
  %add47 = add i32 %69, %68
  store i32 %add47, i32* %f, align 4
  %70 = load i32, i32* %i, align 4
  %add48 = add nsw i32 %70, 6
  %arrayidx49 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %add48
  %71 = load i32, i32* %arrayidx49, align 4
  %72 = load i32, i32* %g, align 4
  %add50 = add i32 %72, %71
  store i32 %add50, i32* %g, align 4
  %73 = load i32, i32* %i, align 4
  %add51 = add nsw i32 %73, 7
  %arrayidx52 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %add51
  %74 = load i32, i32* %arrayidx52, align 4
  %75 = load i32, i32* %h, align 4
  %add53 = add i32 %75, %74
  store i32 %add53, i32* %h, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body31
  %76 = load i32, i32* %b, align 4
  %shl54 = shl i32 %76, 11
  %77 = load i32, i32* %a, align 4
  %xor55 = xor i32 %77, %shl54
  store i32 %xor55, i32* %a, align 4
  %78 = load i32, i32* %a, align 4
  %79 = load i32, i32* %d, align 4
  %add56 = add i32 %79, %78
  store i32 %add56, i32* %d, align 4
  %80 = load i32, i32* %c, align 4
  %81 = load i32, i32* %b, align 4
  %add57 = add i32 %81, %80
  store i32 %add57, i32* %b, align 4
  %82 = load i32, i32* %c, align 4
  %shr58 = lshr i32 %82, 2
  %83 = load i32, i32* %b, align 4
  %xor59 = xor i32 %83, %shr58
  store i32 %xor59, i32* %b, align 4
  %84 = load i32, i32* %b, align 4
  %85 = load i32, i32* %e, align 4
  %add60 = add i32 %85, %84
  store i32 %add60, i32* %e, align 4
  %86 = load i32, i32* %d, align 4
  %87 = load i32, i32* %c, align 4
  %add61 = add i32 %87, %86
  store i32 %add61, i32* %c, align 4
  %88 = load i32, i32* %d, align 4
  %shl62 = shl i32 %88, 8
  %89 = load i32, i32* %c, align 4
  %xor63 = xor i32 %89, %shl62
  store i32 %xor63, i32* %c, align 4
  %90 = load i32, i32* %c, align 4
  %91 = load i32, i32* %f, align 4
  %add64 = add i32 %91, %90
  store i32 %add64, i32* %f, align 4
  %92 = load i32, i32* %e, align 4
  %93 = load i32, i32* %d, align 4
  %add65 = add i32 %93, %92
  store i32 %add65, i32* %d, align 4
  %94 = load i32, i32* %e, align 4
  %shr66 = lshr i32 %94, 16
  %95 = load i32, i32* %d, align 4
  %xor67 = xor i32 %95, %shr66
  store i32 %xor67, i32* %d, align 4
  %96 = load i32, i32* %d, align 4
  %97 = load i32, i32* %g, align 4
  %add68 = add i32 %97, %96
  store i32 %add68, i32* %g, align 4
  %98 = load i32, i32* %f, align 4
  %99 = load i32, i32* %e, align 4
  %add69 = add i32 %99, %98
  store i32 %add69, i32* %e, align 4
  %100 = load i32, i32* %f, align 4
  %shl70 = shl i32 %100, 10
  %101 = load i32, i32* %e, align 4
  %xor71 = xor i32 %101, %shl70
  store i32 %xor71, i32* %e, align 4
  %102 = load i32, i32* %e, align 4
  %103 = load i32, i32* %h, align 4
  %add72 = add i32 %103, %102
  store i32 %add72, i32* %h, align 4
  %104 = load i32, i32* %g, align 4
  %105 = load i32, i32* %f, align 4
  %add73 = add i32 %105, %104
  store i32 %add73, i32* %f, align 4
  %106 = load i32, i32* %g, align 4
  %shr74 = lshr i32 %106, 4
  %107 = load i32, i32* %f, align 4
  %xor75 = xor i32 %107, %shr74
  store i32 %xor75, i32* %f, align 4
  %108 = load i32, i32* %f, align 4
  %109 = load i32, i32* %a, align 4
  %add76 = add i32 %109, %108
  store i32 %add76, i32* %a, align 4
  %110 = load i32, i32* %h, align 4
  %111 = load i32, i32* %g, align 4
  %add77 = add i32 %111, %110
  store i32 %add77, i32* %g, align 4
  %112 = load i32, i32* %h, align 4
  %shl78 = shl i32 %112, 8
  %113 = load i32, i32* %g, align 4
  %xor79 = xor i32 %113, %shl78
  store i32 %xor79, i32* %g, align 4
  %114 = load i32, i32* %g, align 4
  %115 = load i32, i32* %b, align 4
  %add80 = add i32 %115, %114
  store i32 %add80, i32* %b, align 4
  %116 = load i32, i32* %a, align 4
  %117 = load i32, i32* %h, align 4
  %add81 = add i32 %117, %116
  store i32 %add81, i32* %h, align 4
  %118 = load i32, i32* %a, align 4
  %shr82 = lshr i32 %118, 9
  %119 = load i32, i32* %h, align 4
  %xor83 = xor i32 %119, %shr82
  store i32 %xor83, i32* %h, align 4
  %120 = load i32, i32* %h, align 4
  %121 = load i32, i32* %c, align 4
  %add84 = add i32 %121, %120
  store i32 %add84, i32* %c, align 4
  %122 = load i32, i32* %b, align 4
  %123 = load i32, i32* %a, align 4
  %add85 = add i32 %123, %122
  store i32 %add85, i32* %a, align 4
  %124 = load i32, i32* %a, align 4
  %125 = load i32, i32* %i, align 4
  %arrayidx86 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %125
  store i32 %124, i32* %arrayidx86, align 4
  %126 = load i32, i32* %b, align 4
  %127 = load i32, i32* %i, align 4
  %add87 = add nsw i32 %127, 1
  %arrayidx88 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add87
  store i32 %126, i32* %arrayidx88, align 4
  %128 = load i32, i32* %c, align 4
  %129 = load i32, i32* %i, align 4
  %add89 = add nsw i32 %129, 2
  %arrayidx90 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add89
  store i32 %128, i32* %arrayidx90, align 4
  %130 = load i32, i32* %d, align 4
  %131 = load i32, i32* %i, align 4
  %add91 = add nsw i32 %131, 3
  %arrayidx92 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add91
  store i32 %130, i32* %arrayidx92, align 4
  %132 = load i32, i32* %e, align 4
  %133 = load i32, i32* %i, align 4
  %add93 = add nsw i32 %133, 4
  %arrayidx94 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add93
  store i32 %132, i32* %arrayidx94, align 4
  %134 = load i32, i32* %f, align 4
  %135 = load i32, i32* %i, align 4
  %add95 = add nsw i32 %135, 5
  %arrayidx96 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add95
  store i32 %134, i32* %arrayidx96, align 4
  %136 = load i32, i32* %g, align 4
  %137 = load i32, i32* %i, align 4
  %add97 = add nsw i32 %137, 6
  %arrayidx98 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add97
  store i32 %136, i32* %arrayidx98, align 4
  %138 = load i32, i32* %h, align 4
  %139 = load i32, i32* %i, align 4
  %add99 = add nsw i32 %139, 7
  %arrayidx100 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add99
  store i32 %138, i32* %arrayidx100, align 4
  br label %for.inc101

for.inc101:                                       ; preds = %if.end
  %140 = load i32, i32* %i, align 4
  %add102 = add nsw i32 %140, 8
  store i32 %add102, i32* %i, align 4
  br label %for.cond29

for.end103:                                       ; preds = %for.cond29
  %141 = load i32, i32* %flag.addr, align 4
  %tobool104 = icmp ne i32 %141, 0
  br i1 %tobool104, label %if.then105, label %if.end182

if.then105:                                       ; preds = %for.end103
  store i32 0, i32* %i, align 4
  br label %for.cond106

for.cond106:                                      ; preds = %for.inc179, %if.then105
  %142 = load i32, i32* %i, align 4
  %cmp107 = icmp slt i32 %142, 256
  br i1 %cmp107, label %for.body108, label %for.end181

for.body108:                                      ; preds = %for.cond106
  %143 = load i32, i32* %i, align 4
  %arrayidx109 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %143
  %144 = load i32, i32* %arrayidx109, align 4
  %145 = load i32, i32* %a, align 4
  %add110 = add i32 %145, %144
  store i32 %add110, i32* %a, align 4
  %146 = load i32, i32* %i, align 4
  %add111 = add nsw i32 %146, 1
  %arrayidx112 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add111
  %147 = load i32, i32* %arrayidx112, align 4
  %148 = load i32, i32* %b, align 4
  %add113 = add i32 %148, %147
  store i32 %add113, i32* %b, align 4
  %149 = load i32, i32* %i, align 4
  %add114 = add nsw i32 %149, 2
  %arrayidx115 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add114
  %150 = load i32, i32* %arrayidx115, align 4
  %151 = load i32, i32* %c, align 4
  %add116 = add i32 %151, %150
  store i32 %add116, i32* %c, align 4
  %152 = load i32, i32* %i, align 4
  %add117 = add nsw i32 %152, 3
  %arrayidx118 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add117
  %153 = load i32, i32* %arrayidx118, align 4
  %154 = load i32, i32* %d, align 4
  %add119 = add i32 %154, %153
  store i32 %add119, i32* %d, align 4
  %155 = load i32, i32* %i, align 4
  %add120 = add nsw i32 %155, 4
  %arrayidx121 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add120
  %156 = load i32, i32* %arrayidx121, align 4
  %157 = load i32, i32* %e, align 4
  %add122 = add i32 %157, %156
  store i32 %add122, i32* %e, align 4
  %158 = load i32, i32* %i, align 4
  %add123 = add nsw i32 %158, 5
  %arrayidx124 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add123
  %159 = load i32, i32* %arrayidx124, align 4
  %160 = load i32, i32* %f, align 4
  %add125 = add i32 %160, %159
  store i32 %add125, i32* %f, align 4
  %161 = load i32, i32* %i, align 4
  %add126 = add nsw i32 %161, 6
  %arrayidx127 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add126
  %162 = load i32, i32* %arrayidx127, align 4
  %163 = load i32, i32* %g, align 4
  %add128 = add i32 %163, %162
  store i32 %add128, i32* %g, align 4
  %164 = load i32, i32* %i, align 4
  %add129 = add nsw i32 %164, 7
  %arrayidx130 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add129
  %165 = load i32, i32* %arrayidx130, align 4
  %166 = load i32, i32* %h, align 4
  %add131 = add i32 %166, %165
  store i32 %add131, i32* %h, align 4
  %167 = load i32, i32* %b, align 4
  %shl132 = shl i32 %167, 11
  %168 = load i32, i32* %a, align 4
  %xor133 = xor i32 %168, %shl132
  store i32 %xor133, i32* %a, align 4
  %169 = load i32, i32* %a, align 4
  %170 = load i32, i32* %d, align 4
  %add134 = add i32 %170, %169
  store i32 %add134, i32* %d, align 4
  %171 = load i32, i32* %c, align 4
  %172 = load i32, i32* %b, align 4
  %add135 = add i32 %172, %171
  store i32 %add135, i32* %b, align 4
  %173 = load i32, i32* %c, align 4
  %shr136 = lshr i32 %173, 2
  %174 = load i32, i32* %b, align 4
  %xor137 = xor i32 %174, %shr136
  store i32 %xor137, i32* %b, align 4
  %175 = load i32, i32* %b, align 4
  %176 = load i32, i32* %e, align 4
  %add138 = add i32 %176, %175
  store i32 %add138, i32* %e, align 4
  %177 = load i32, i32* %d, align 4
  %178 = load i32, i32* %c, align 4
  %add139 = add i32 %178, %177
  store i32 %add139, i32* %c, align 4
  %179 = load i32, i32* %d, align 4
  %shl140 = shl i32 %179, 8
  %180 = load i32, i32* %c, align 4
  %xor141 = xor i32 %180, %shl140
  store i32 %xor141, i32* %c, align 4
  %181 = load i32, i32* %c, align 4
  %182 = load i32, i32* %f, align 4
  %add142 = add i32 %182, %181
  store i32 %add142, i32* %f, align 4
  %183 = load i32, i32* %e, align 4
  %184 = load i32, i32* %d, align 4
  %add143 = add i32 %184, %183
  store i32 %add143, i32* %d, align 4
  %185 = load i32, i32* %e, align 4
  %shr144 = lshr i32 %185, 16
  %186 = load i32, i32* %d, align 4
  %xor145 = xor i32 %186, %shr144
  store i32 %xor145, i32* %d, align 4
  %187 = load i32, i32* %d, align 4
  %188 = load i32, i32* %g, align 4
  %add146 = add i32 %188, %187
  store i32 %add146, i32* %g, align 4
  %189 = load i32, i32* %f, align 4
  %190 = load i32, i32* %e, align 4
  %add147 = add i32 %190, %189
  store i32 %add147, i32* %e, align 4
  %191 = load i32, i32* %f, align 4
  %shl148 = shl i32 %191, 10
  %192 = load i32, i32* %e, align 4
  %xor149 = xor i32 %192, %shl148
  store i32 %xor149, i32* %e, align 4
  %193 = load i32, i32* %e, align 4
  %194 = load i32, i32* %h, align 4
  %add150 = add i32 %194, %193
  store i32 %add150, i32* %h, align 4
  %195 = load i32, i32* %g, align 4
  %196 = load i32, i32* %f, align 4
  %add151 = add i32 %196, %195
  store i32 %add151, i32* %f, align 4
  %197 = load i32, i32* %g, align 4
  %shr152 = lshr i32 %197, 4
  %198 = load i32, i32* %f, align 4
  %xor153 = xor i32 %198, %shr152
  store i32 %xor153, i32* %f, align 4
  %199 = load i32, i32* %f, align 4
  %200 = load i32, i32* %a, align 4
  %add154 = add i32 %200, %199
  store i32 %add154, i32* %a, align 4
  %201 = load i32, i32* %h, align 4
  %202 = load i32, i32* %g, align 4
  %add155 = add i32 %202, %201
  store i32 %add155, i32* %g, align 4
  %203 = load i32, i32* %h, align 4
  %shl156 = shl i32 %203, 8
  %204 = load i32, i32* %g, align 4
  %xor157 = xor i32 %204, %shl156
  store i32 %xor157, i32* %g, align 4
  %205 = load i32, i32* %g, align 4
  %206 = load i32, i32* %b, align 4
  %add158 = add i32 %206, %205
  store i32 %add158, i32* %b, align 4
  %207 = load i32, i32* %a, align 4
  %208 = load i32, i32* %h, align 4
  %add159 = add i32 %208, %207
  store i32 %add159, i32* %h, align 4
  %209 = load i32, i32* %a, align 4
  %shr160 = lshr i32 %209, 9
  %210 = load i32, i32* %h, align 4
  %xor161 = xor i32 %210, %shr160
  store i32 %xor161, i32* %h, align 4
  %211 = load i32, i32* %h, align 4
  %212 = load i32, i32* %c, align 4
  %add162 = add i32 %212, %211
  store i32 %add162, i32* %c, align 4
  %213 = load i32, i32* %b, align 4
  %214 = load i32, i32* %a, align 4
  %add163 = add i32 %214, %213
  store i32 %add163, i32* %a, align 4
  %215 = load i32, i32* %a, align 4
  %216 = load i32, i32* %i, align 4
  %arrayidx164 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %216
  store i32 %215, i32* %arrayidx164, align 4
  %217 = load i32, i32* %b, align 4
  %218 = load i32, i32* %i, align 4
  %add165 = add nsw i32 %218, 1
  %arrayidx166 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add165
  store i32 %217, i32* %arrayidx166, align 4
  %219 = load i32, i32* %c, align 4
  %220 = load i32, i32* %i, align 4
  %add167 = add nsw i32 %220, 2
  %arrayidx168 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add167
  store i32 %219, i32* %arrayidx168, align 4
  %221 = load i32, i32* %d, align 4
  %222 = load i32, i32* %i, align 4
  %add169 = add nsw i32 %222, 3
  %arrayidx170 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add169
  store i32 %221, i32* %arrayidx170, align 4
  %223 = load i32, i32* %e, align 4
  %224 = load i32, i32* %i, align 4
  %add171 = add nsw i32 %224, 4
  %arrayidx172 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add171
  store i32 %223, i32* %arrayidx172, align 4
  %225 = load i32, i32* %f, align 4
  %226 = load i32, i32* %i, align 4
  %add173 = add nsw i32 %226, 5
  %arrayidx174 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add173
  store i32 %225, i32* %arrayidx174, align 4
  %227 = load i32, i32* %g, align 4
  %228 = load i32, i32* %i, align 4
  %add175 = add nsw i32 %228, 6
  %arrayidx176 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add175
  store i32 %227, i32* %arrayidx176, align 4
  %229 = load i32, i32* %h, align 4
  %230 = load i32, i32* %i, align 4
  %add177 = add nsw i32 %230, 7
  %arrayidx178 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add177
  store i32 %229, i32* %arrayidx178, align 4
  br label %for.inc179

for.inc179:                                       ; preds = %for.body108
  %231 = load i32, i32* %i, align 4
  %add180 = add nsw i32 %231, 8
  store i32 %add180, i32* %i, align 4
  br label %for.cond106

for.end181:                                       ; preds = %for.cond106
  br label %if.end182

if.end182:                                        ; preds = %for.end181, %for.end103
  call void @isaac()
  store i32 0, i32* @randcnt, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @iRandom() #0 {
entry:
  %r = alloca i32, align 4
  %0 = load i32, i32* @randcnt, align 4
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %0
  %1 = load i32, i32* %arrayidx, align 4
  store i32 %1, i32* %r, align 4
  %2 = load i32, i32* @randcnt, align 4
  %inc = add i32 %2, 1
  store i32 %inc, i32* @randcnt, align 4
  %3 = load i32, i32* @randcnt, align 4
  %cmp = icmp ugt i32 %3, 255
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @isaac()
  store i32 0, i32* @randcnt, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* %r, align 4
  ret i32 %4
}

; Function Attrs: noinline nounwind optnone
define hidden signext i8 @iRandA() #0 {
entry:
  %call = call i32 @iRandom()
  %rem = urem i32 %call, 95
  %add = add i32 %rem, 32
  %conv = trunc i32 %add to i8
  ret i8 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden void @iSeed(i8* %seed, i32 %flag) #0 {
entry:
  %seed.addr = alloca i8*, align 4
  %flag.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %m = alloca i32, align 4
  store i8* %seed, i8** %seed.addr, align 4
  store i32 %flag, i32* %flag.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %0, 256
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %1
  store i32 0, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %i, align 4
  %inc = add i32 %2, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %3 = load i8*, i8** %seed.addr, align 4
  %call = call i32 @strlen(i8* %3) #4
  store i32 %call, i32* %m, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc8, %for.end
  %4 = load i32, i32* %i, align 4
  %cmp2 = icmp ult i32 %4, 256
  br i1 %cmp2, label %for.body3, label %for.end10

for.body3:                                        ; preds = %for.cond1
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %m, align 4
  %cmp4 = icmp ugt i32 %5, %6
  br i1 %cmp4, label %if.then, label %if.else

if.then:                                          ; preds = %for.body3
  %7 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %7
  store i32 0, i32* %arrayidx5, align 4
  br label %if.end

if.else:                                          ; preds = %for.body3
  %8 = load i8*, i8** %seed.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds i8, i8* %8, i32 %9
  %10 = load i8, i8* %arrayidx6, align 1
  %conv = sext i8 %10 to i32
  %11 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %11
  store i32 %conv, i32* %arrayidx7, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc8

for.inc8:                                         ; preds = %if.end
  %12 = load i32, i32* %i, align 4
  %inc9 = add i32 %12, 1
  store i32 %inc9, i32* %i, align 4
  br label %for.cond1

for.end10:                                        ; preds = %for.cond1
  %13 = load i32, i32* %flag.addr, align 4
  call void @randinit(i32 %13)
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i8* @Vernam(i8* %msg) #0 {
entry:
  %msg.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %l = alloca i32, align 4
  store i8* %msg, i8** %msg.addr, align 4
  %0 = load i8*, i8** %msg.addr, align 4
  %call = call i32 @strlen(i8* %0) #4
  store i32 %call, i32* %l, align 4
  %1 = load i32, i32* %l, align 4
  %add = add i32 %1, 1
  call void @llvm.memset.p0i8.i32(i8* align 16 getelementptr inbounds ([4096 x i8], [4096 x i8]* @v, i32 0, i32 0), i8 0, i32 %add, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %l, align 4
  %cmp = icmp ult i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call1 = call signext i8 @iRandA()
  %conv = sext i8 %call1 to i32
  %4 = load i8*, i8** %msg.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %4, i32 %5
  %6 = load i8, i8* %arrayidx, align 1
  %conv2 = sext i8 %6 to i32
  %xor = xor i32 %conv, %conv2
  %conv3 = trunc i32 %xor to i8
  %7 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds [4096 x i8], [4096 x i8]* @v, i32 0, i32 %7
  store i8 %conv3, i8* %arrayidx4, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %inc = add i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i8* getelementptr inbounds ([4096 x i8], [4096 x i8]* @v, i32 0, i32 0)
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define hidden signext i8 @Caesar(i32 %m, i8 signext %ch, i8 signext %shift, i8 signext %modulo, i8 signext %start) #0 {
entry:
  %m.addr = alloca i32, align 4
  %ch.addr = alloca i8, align 1
  %shift.addr = alloca i8, align 1
  %modulo.addr = alloca i8, align 1
  %start.addr = alloca i8, align 1
  %n = alloca i32, align 4
  store i32 %m, i32* %m.addr, align 4
  store i8 %ch, i8* %ch.addr, align 1
  store i8 %shift, i8* %shift.addr, align 1
  store i8 %modulo, i8* %modulo.addr, align 1
  store i8 %start, i8* %start.addr, align 1
  %0 = load i32, i32* %m.addr, align 4
  %cmp = icmp eq i32 %0, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i8, i8* %shift.addr, align 1
  %conv = sext i8 %1 to i32
  %sub = sub nsw i32 0, %conv
  %conv1 = trunc i32 %sub to i8
  store i8 %conv1, i8* %shift.addr, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i8, i8* %ch.addr, align 1
  %conv2 = sext i8 %2 to i32
  %3 = load i8, i8* %start.addr, align 1
  %conv3 = sext i8 %3 to i32
  %sub4 = sub nsw i32 %conv2, %conv3
  %4 = load i8, i8* %shift.addr, align 1
  %conv5 = sext i8 %4 to i32
  %add = add nsw i32 %sub4, %conv5
  store i32 %add, i32* %n, align 4
  %5 = load i32, i32* %n, align 4
  %6 = load i8, i8* %modulo.addr, align 1
  %conv6 = sext i8 %6 to i32
  %rem = srem i32 %5, %conv6
  store i32 %rem, i32* %n, align 4
  %7 = load i32, i32* %n, align 4
  %cmp7 = icmp slt i32 %7, 0
  br i1 %cmp7, label %if.then9, label %if.end12

if.then9:                                         ; preds = %if.end
  %8 = load i8, i8* %modulo.addr, align 1
  %conv10 = sext i8 %8 to i32
  %9 = load i32, i32* %n, align 4
  %add11 = add nsw i32 %9, %conv10
  store i32 %add11, i32* %n, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then9, %if.end
  %10 = load i8, i8* %start.addr, align 1
  %conv13 = sext i8 %10 to i32
  %11 = load i32, i32* %n, align 4
  %add14 = add nsw i32 %conv13, %11
  %conv15 = trunc i32 %add14 to i8
  ret i8 %conv15
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @CaesarStr(i32 %m, i8* %msg, i8 signext %modulo, i8 signext %start) #0 {
entry:
  %m.addr = alloca i32, align 4
  %msg.addr = alloca i8*, align 4
  %modulo.addr = alloca i8, align 1
  %start.addr = alloca i8, align 1
  %i = alloca i32, align 4
  %l = alloca i32, align 4
  store i32 %m, i32* %m.addr, align 4
  store i8* %msg, i8** %msg.addr, align 4
  store i8 %modulo, i8* %modulo.addr, align 1
  store i8 %start, i8* %start.addr, align 1
  %0 = load i8*, i8** %msg.addr, align 4
  %call = call i32 @strlen(i8* %0) #4
  store i32 %call, i32* %l, align 4
  %1 = load i32, i32* %l, align 4
  %add = add i32 %1, 1
  call void @llvm.memset.p0i8.i32(i8* align 16 getelementptr inbounds ([4096 x i8], [4096 x i8]* @c, i32 0, i32 0), i8 0, i32 %add, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %l, align 4
  %cmp = icmp ult i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %m.addr, align 4
  %5 = load i8*, i8** %msg.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %5, i32 %6
  %7 = load i8, i8* %arrayidx, align 1
  %call1 = call signext i8 @iRandA()
  %8 = load i8, i8* %modulo.addr, align 1
  %9 = load i8, i8* %start.addr, align 1
  %call2 = call signext i8 @Caesar(i32 %4, i8 signext %7, i8 signext %call1, i8 signext %8, i8 signext %9)
  %10 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds [4096 x i8], [4096 x i8]* @c, i32 0, i32 %10
  store i8 %call2, i8* %arrayidx3, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i8* getelementptr inbounds ([4096 x i8], [4096 x i8]* @c, i32 0, i32 0)
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %n = alloca i32, align 4
  %l = alloca i32, align 4
  %msg = alloca i8*, align 4
  %key = alloca i8*, align 4
  %vctx = alloca [4096 x i8], align 16
  %vptx = alloca [4096 x i8], align 16
  %cctx = alloca [4096 x i8], align 16
  %cptx = alloca [4096 x i8], align 16
  store i32 0, i32* %retval, align 4
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i32 0, i32 0), i8** %msg, align 4
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i32 0, i32 0), i8** %key, align 4
  %0 = load i8*, i8** %msg, align 4
  %call = call i32 @strlen(i8* %0) #4
  store i32 %call, i32* %l, align 4
  %1 = load i8*, i8** %key, align 4
  call void @iSeed(i8* %1, i32 1)
  %arraydecay = getelementptr inbounds [4096 x i8], [4096 x i8]* %vctx, i32 0, i32 0
  %2 = load i8*, i8** %msg, align 4
  %call1 = call i8* @Vernam(i8* %2)
  %call2 = call i8* @strcpy(i8* %arraydecay, i8* %call1)
  %arraydecay3 = getelementptr inbounds [4096 x i8], [4096 x i8]* %cctx, i32 0, i32 0
  %3 = load i8*, i8** %msg, align 4
  %call4 = call i8* @CaesarStr(i32 0, i8* %3, i8 signext 95, i8 signext 32)
  %call5 = call i8* @strcpy(i8* %arraydecay3, i8* %call4)
  %4 = load i8*, i8** %key, align 4
  call void @iSeed(i8* %4, i32 1)
  %arraydecay6 = getelementptr inbounds [4096 x i8], [4096 x i8]* %vptx, i32 0, i32 0
  %arraydecay7 = getelementptr inbounds [4096 x i8], [4096 x i8]* %vctx, i32 0, i32 0
  %call8 = call i8* @Vernam(i8* %arraydecay7)
  %call9 = call i8* @strcpy(i8* %arraydecay6, i8* %call8)
  %arraydecay10 = getelementptr inbounds [4096 x i8], [4096 x i8]* %cptx, i32 0, i32 0
  %arraydecay11 = getelementptr inbounds [4096 x i8], [4096 x i8]* %cctx, i32 0, i32 0
  %call12 = call i8* @CaesarStr(i32 1, i8* %arraydecay11, i8 signext 95, i8 signext 32)
  %call13 = call i8* @strcpy(i8* %arraydecay10, i8* %call12)
  %5 = load i8*, i8** %msg, align 4
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i32 0, i32 0), i8* %5)
  %6 = load i8*, i8** %key, align 4
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3, i32 0, i32 0), i8* %6)
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i32 0, i32 0))
  store i32 0, i32* %n, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %7 = load i32, i32* %n, align 4
  %8 = load i32, i32* %l, align 4
  %cmp = icmp ult i32 %7, %8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i32, i32* %n, align 4
  %arrayidx = getelementptr inbounds [4096 x i8], [4096 x i8]* %vctx, i32 0, i32 %9
  %10 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %10 to i32
  %call17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i32 %conv)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %n, align 4
  %inc = add i32 %11, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i32 0, i32 0))
  %arraydecay19 = getelementptr inbounds [4096 x i8], [4096 x i8]* %vptx, i32 0, i32 0
  %call20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7, i32 0, i32 0), i8* %arraydecay19)
  %call21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8, i32 0, i32 0))
  store i32 0, i32* %n, align 4
  br label %for.cond22

for.cond22:                                       ; preds = %for.inc29, %for.end
  %12 = load i32, i32* %n, align 4
  %13 = load i32, i32* %l, align 4
  %cmp23 = icmp ult i32 %12, %13
  br i1 %cmp23, label %for.body25, label %for.end31

for.body25:                                       ; preds = %for.cond22
  %14 = load i32, i32* %n, align 4
  %arrayidx26 = getelementptr inbounds [4096 x i8], [4096 x i8]* %cctx, i32 0, i32 %14
  %15 = load i8, i8* %arrayidx26, align 1
  %conv27 = sext i8 %15 to i32
  %call28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i32 %conv27)
  br label %for.inc29

for.inc29:                                        ; preds = %for.body25
  %16 = load i32, i32* %n, align 4
  %inc30 = add i32 %16, 1
  store i32 %inc30, i32* %n, align 4
  br label %for.cond22

for.end31:                                        ; preds = %for.cond22
  %call32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i32 0, i32 0))
  %arraydecay33 = getelementptr inbounds [4096 x i8], [4096 x i8]* %cptx, i32 0, i32 0
  %call34 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.9, i32 0, i32 0), i8* %arraydecay33)
  ret i32 0
}

declare i8* @strcpy(i8* %0, i8* %1) #3

declare i32 @printf(i8* %0, ...) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn writeonly }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 @strlen(i8* %0) #4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %l, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add i32 %1, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %l, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ult i32 %2, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %call1 = call signext i8 @iRandA()
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %call1 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i8, i8* %arrayidx, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv2 = sext i8 %6 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %xor = xor i32 %conv, %conv2
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i32 = xor %1, %3
infer %4 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %conv3 = trunc i32 %xor to i8
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i32 = xor %1, %3
%5:i8 = trunc %4
infer %5

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add i32 %8, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
infer %1 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i32 = xor %1, %3
infer %4 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -128
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i32 = xor %1, %3
%5:i8 = trunc %4
infer %5


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -128
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for Vernam()

; entering Souper's runOnFunction() for Caesar()

; ModuleID = './The_ISAAC_Cipher.c.bc'
source_filename = "./The_ISAAC_Cipher.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@cc = internal global i32 0, align 4
@bb = internal global i32 0, align 4
@mm = internal global [256 x i32] zeroinitializer, align 16
@aa = internal global i32 0, align 4
@randrsl = hidden global [256 x i32] zeroinitializer, align 16
@randcnt = hidden global i32 0, align 4
@v = hidden global [4096 x i8] zeroinitializer, align 16
@c = hidden global [4096 x i8] zeroinitializer, align 16
@.str = private unnamed_addr constant [20 x i8] c"a Top Secret secret\00", align 1
@.str.1 = private unnamed_addr constant [22 x i8] c"this is my secret key\00", align 1
@.str.2 = private unnamed_addr constant [13 x i8] c"Message: %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [13 x i8] c"Key    : %s\0A\00", align 1
@.str.4 = private unnamed_addr constant [10 x i8] c"XOR    : \00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"%02X\00", align 1
@.str.6 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.7 = private unnamed_addr constant [13 x i8] c"XOR dcr: %s\0A\00", align 1
@.str.8 = private unnamed_addr constant [10 x i8] c"MOD    : \00", align 1
@.str.9 = private unnamed_addr constant [13 x i8] c"MOD dcr: %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @isaac() #0 {
entry:
  %i = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %0 = load i32, i32* @cc, align 4
  %add = add i32 %0, 1
  store i32 %add, i32* @cc, align 4
  %1 = load i32, i32* @bb, align 4
  %2 = load i32, i32* @cc, align 4
  %add1 = add i32 %1, %2
  store i32 %add1, i32* @bb, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %3, 256
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  store i32 %5, i32* %x, align 4
  %6 = load i32, i32* %i, align 4
  %rem = urem i32 %6, 4
  switch i32 %rem, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb2
    i32 2, label %sw.bb4
    i32 3, label %sw.bb7
  ]

sw.bb:                                            ; preds = %for.body
  %7 = load i32, i32* @aa, align 4
  %8 = load i32, i32* @aa, align 4
  %shl = shl i32 %8, 13
  %xor = xor i32 %7, %shl
  store i32 %xor, i32* @aa, align 4
  br label %sw.epilog

sw.bb2:                                           ; preds = %for.body
  %9 = load i32, i32* @aa, align 4
  %10 = load i32, i32* @aa, align 4
  %shr = lshr i32 %10, 6
  %xor3 = xor i32 %9, %shr
  store i32 %xor3, i32* @aa, align 4
  br label %sw.epilog

sw.bb4:                                           ; preds = %for.body
  %11 = load i32, i32* @aa, align 4
  %12 = load i32, i32* @aa, align 4
  %shl5 = shl i32 %12, 2
  %xor6 = xor i32 %11, %shl5
  store i32 %xor6, i32* @aa, align 4
  br label %sw.epilog

sw.bb7:                                           ; preds = %for.body
  %13 = load i32, i32* @aa, align 4
  %14 = load i32, i32* @aa, align 4
  %shr8 = lshr i32 %14, 16
  %xor9 = xor i32 %13, %shr8
  store i32 %xor9, i32* @aa, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %for.body, %sw.bb7, %sw.bb4, %sw.bb2, %sw.bb
  %15 = load i32, i32* %i, align 4
  %add10 = add i32 %15, 128
  %rem11 = urem i32 %add10, 256
  %arrayidx12 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %rem11
  %16 = load i32, i32* %arrayidx12, align 4
  %17 = load i32, i32* @aa, align 4
  %add13 = add i32 %16, %17
  store i32 %add13, i32* @aa, align 4
  %18 = load i32, i32* %x, align 4
  %shr14 = lshr i32 %18, 2
  %rem15 = urem i32 %shr14, 256
  %arrayidx16 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %rem15
  %19 = load i32, i32* %arrayidx16, align 4
  %20 = load i32, i32* @aa, align 4
  %add17 = add i32 %19, %20
  %21 = load i32, i32* @bb, align 4
  %add18 = add i32 %add17, %21
  store i32 %add18, i32* %y, align 4
  %22 = load i32, i32* %i, align 4
  %arrayidx19 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %22
  store i32 %add18, i32* %arrayidx19, align 4
  %23 = load i32, i32* %y, align 4
  %shr20 = lshr i32 %23, 10
  %rem21 = urem i32 %shr20, 256
  %arrayidx22 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %rem21
  %24 = load i32, i32* %arrayidx22, align 4
  %25 = load i32, i32* %x, align 4
  %add23 = add i32 %24, %25
  store i32 %add23, i32* @bb, align 4
  %26 = load i32, i32* %i, align 4
  %arrayidx24 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %26
  store i32 %add23, i32* %arrayidx24, align 4
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %27 = load i32, i32* %i, align 4
  %inc = add i32 %27, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* @randcnt, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @randinit(i32 %flag) #0 {
entry:
  %flag.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %c = alloca i32, align 4
  %d = alloca i32, align 4
  %e = alloca i32, align 4
  %f = alloca i32, align 4
  %g = alloca i32, align 4
  %h = alloca i32, align 4
  store i32 %flag, i32* %flag.addr, align 4
  store i32 0, i32* @cc, align 4
  store i32 0, i32* @bb, align 4
  store i32 0, i32* @aa, align 4
  store i32 -1640531527, i32* %h, align 4
  store i32 -1640531527, i32* %g, align 4
  store i32 -1640531527, i32* %f, align 4
  store i32 -1640531527, i32* %e, align 4
  store i32 -1640531527, i32* %d, align 4
  store i32 -1640531527, i32* %c, align 4
  store i32 -1640531527, i32* %b, align 4
  store i32 -1640531527, i32* %a, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %b, align 4
  %shl = shl i32 %1, 11
  %2 = load i32, i32* %a, align 4
  %xor = xor i32 %2, %shl
  store i32 %xor, i32* %a, align 4
  %3 = load i32, i32* %a, align 4
  %4 = load i32, i32* %d, align 4
  %add = add i32 %4, %3
  store i32 %add, i32* %d, align 4
  %5 = load i32, i32* %c, align 4
  %6 = load i32, i32* %b, align 4
  %add1 = add i32 %6, %5
  store i32 %add1, i32* %b, align 4
  %7 = load i32, i32* %c, align 4
  %shr = lshr i32 %7, 2
  %8 = load i32, i32* %b, align 4
  %xor2 = xor i32 %8, %shr
  store i32 %xor2, i32* %b, align 4
  %9 = load i32, i32* %b, align 4
  %10 = load i32, i32* %e, align 4
  %add3 = add i32 %10, %9
  store i32 %add3, i32* %e, align 4
  %11 = load i32, i32* %d, align 4
  %12 = load i32, i32* %c, align 4
  %add4 = add i32 %12, %11
  store i32 %add4, i32* %c, align 4
  %13 = load i32, i32* %d, align 4
  %shl5 = shl i32 %13, 8
  %14 = load i32, i32* %c, align 4
  %xor6 = xor i32 %14, %shl5
  store i32 %xor6, i32* %c, align 4
  %15 = load i32, i32* %c, align 4
  %16 = load i32, i32* %f, align 4
  %add7 = add i32 %16, %15
  store i32 %add7, i32* %f, align 4
  %17 = load i32, i32* %e, align 4
  %18 = load i32, i32* %d, align 4
  %add8 = add i32 %18, %17
  store i32 %add8, i32* %d, align 4
  %19 = load i32, i32* %e, align 4
  %shr9 = lshr i32 %19, 16
  %20 = load i32, i32* %d, align 4
  %xor10 = xor i32 %20, %shr9
  store i32 %xor10, i32* %d, align 4
  %21 = load i32, i32* %d, align 4
  %22 = load i32, i32* %g, align 4
  %add11 = add i32 %22, %21
  store i32 %add11, i32* %g, align 4
  %23 = load i32, i32* %f, align 4
  %24 = load i32, i32* %e, align 4
  %add12 = add i32 %24, %23
  store i32 %add12, i32* %e, align 4
  %25 = load i32, i32* %f, align 4
  %shl13 = shl i32 %25, 10
  %26 = load i32, i32* %e, align 4
  %xor14 = xor i32 %26, %shl13
  store i32 %xor14, i32* %e, align 4
  %27 = load i32, i32* %e, align 4
  %28 = load i32, i32* %h, align 4
  %add15 = add i32 %28, %27
  store i32 %add15, i32* %h, align 4
  %29 = load i32, i32* %g, align 4
  %30 = load i32, i32* %f, align 4
  %add16 = add i32 %30, %29
  store i32 %add16, i32* %f, align 4
  %31 = load i32, i32* %g, align 4
  %shr17 = lshr i32 %31, 4
  %32 = load i32, i32* %f, align 4
  %xor18 = xor i32 %32, %shr17
  store i32 %xor18, i32* %f, align 4
  %33 = load i32, i32* %f, align 4
  %34 = load i32, i32* %a, align 4
  %add19 = add i32 %34, %33
  store i32 %add19, i32* %a, align 4
  %35 = load i32, i32* %h, align 4
  %36 = load i32, i32* %g, align 4
  %add20 = add i32 %36, %35
  store i32 %add20, i32* %g, align 4
  %37 = load i32, i32* %h, align 4
  %shl21 = shl i32 %37, 8
  %38 = load i32, i32* %g, align 4
  %xor22 = xor i32 %38, %shl21
  store i32 %xor22, i32* %g, align 4
  %39 = load i32, i32* %g, align 4
  %40 = load i32, i32* %b, align 4
  %add23 = add i32 %40, %39
  store i32 %add23, i32* %b, align 4
  %41 = load i32, i32* %a, align 4
  %42 = load i32, i32* %h, align 4
  %add24 = add i32 %42, %41
  store i32 %add24, i32* %h, align 4
  %43 = load i32, i32* %a, align 4
  %shr25 = lshr i32 %43, 9
  %44 = load i32, i32* %h, align 4
  %xor26 = xor i32 %44, %shr25
  store i32 %xor26, i32* %h, align 4
  %45 = load i32, i32* %h, align 4
  %46 = load i32, i32* %c, align 4
  %add27 = add i32 %46, %45
  store i32 %add27, i32* %c, align 4
  %47 = load i32, i32* %b, align 4
  %48 = load i32, i32* %a, align 4
  %add28 = add i32 %48, %47
  store i32 %add28, i32* %a, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %49 = load i32, i32* %i, align 4
  %inc = add nsw i32 %49, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond29

for.cond29:                                       ; preds = %for.inc101, %for.end
  %50 = load i32, i32* %i, align 4
  %cmp30 = icmp slt i32 %50, 256
  br i1 %cmp30, label %for.body31, label %for.end103

for.body31:                                       ; preds = %for.cond29
  %51 = load i32, i32* %flag.addr, align 4
  %tobool = icmp ne i32 %51, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body31
  %52 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %52
  %53 = load i32, i32* %arrayidx, align 4
  %54 = load i32, i32* %a, align 4
  %add32 = add i32 %54, %53
  store i32 %add32, i32* %a, align 4
  %55 = load i32, i32* %i, align 4
  %add33 = add nsw i32 %55, 1
  %arrayidx34 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %add33
  %56 = load i32, i32* %arrayidx34, align 4
  %57 = load i32, i32* %b, align 4
  %add35 = add i32 %57, %56
  store i32 %add35, i32* %b, align 4
  %58 = load i32, i32* %i, align 4
  %add36 = add nsw i32 %58, 2
  %arrayidx37 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %add36
  %59 = load i32, i32* %arrayidx37, align 4
  %60 = load i32, i32* %c, align 4
  %add38 = add i32 %60, %59
  store i32 %add38, i32* %c, align 4
  %61 = load i32, i32* %i, align 4
  %add39 = add nsw i32 %61, 3
  %arrayidx40 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %add39
  %62 = load i32, i32* %arrayidx40, align 4
  %63 = load i32, i32* %d, align 4
  %add41 = add i32 %63, %62
  store i32 %add41, i32* %d, align 4
  %64 = load i32, i32* %i, align 4
  %add42 = add nsw i32 %64, 4
  %arrayidx43 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %add42
  %65 = load i32, i32* %arrayidx43, align 4
  %66 = load i32, i32* %e, align 4
  %add44 = add i32 %66, %65
  store i32 %add44, i32* %e, align 4
  %67 = load i32, i32* %i, align 4
  %add45 = add nsw i32 %67, 5
  %arrayidx46 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %add45
  %68 = load i32, i32* %arrayidx46, align 4
  %69 = load i32, i32* %f, align 4
  %add47 = add i32 %69, %68
  store i32 %add47, i32* %f, align 4
  %70 = load i32, i32* %i, align 4
  %add48 = add nsw i32 %70, 6
  %arrayidx49 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %add48
  %71 = load i32, i32* %arrayidx49, align 4
  %72 = load i32, i32* %g, align 4
  %add50 = add i32 %72, %71
  store i32 %add50, i32* %g, align 4
  %73 = load i32, i32* %i, align 4
  %add51 = add nsw i32 %73, 7
  %arrayidx52 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %add51
  %74 = load i32, i32* %arrayidx52, align 4
  %75 = load i32, i32* %h, align 4
  %add53 = add i32 %75, %74
  store i32 %add53, i32* %h, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body31
  %76 = load i32, i32* %b, align 4
  %shl54 = shl i32 %76, 11
  %77 = load i32, i32* %a, align 4
  %xor55 = xor i32 %77, %shl54
  store i32 %xor55, i32* %a, align 4
  %78 = load i32, i32* %a, align 4
  %79 = load i32, i32* %d, align 4
  %add56 = add i32 %79, %78
  store i32 %add56, i32* %d, align 4
  %80 = load i32, i32* %c, align 4
  %81 = load i32, i32* %b, align 4
  %add57 = add i32 %81, %80
  store i32 %add57, i32* %b, align 4
  %82 = load i32, i32* %c, align 4
  %shr58 = lshr i32 %82, 2
  %83 = load i32, i32* %b, align 4
  %xor59 = xor i32 %83, %shr58
  store i32 %xor59, i32* %b, align 4
  %84 = load i32, i32* %b, align 4
  %85 = load i32, i32* %e, align 4
  %add60 = add i32 %85, %84
  store i32 %add60, i32* %e, align 4
  %86 = load i32, i32* %d, align 4
  %87 = load i32, i32* %c, align 4
  %add61 = add i32 %87, %86
  store i32 %add61, i32* %c, align 4
  %88 = load i32, i32* %d, align 4
  %shl62 = shl i32 %88, 8
  %89 = load i32, i32* %c, align 4
  %xor63 = xor i32 %89, %shl62
  store i32 %xor63, i32* %c, align 4
  %90 = load i32, i32* %c, align 4
  %91 = load i32, i32* %f, align 4
  %add64 = add i32 %91, %90
  store i32 %add64, i32* %f, align 4
  %92 = load i32, i32* %e, align 4
  %93 = load i32, i32* %d, align 4
  %add65 = add i32 %93, %92
  store i32 %add65, i32* %d, align 4
  %94 = load i32, i32* %e, align 4
  %shr66 = lshr i32 %94, 16
  %95 = load i32, i32* %d, align 4
  %xor67 = xor i32 %95, %shr66
  store i32 %xor67, i32* %d, align 4
  %96 = load i32, i32* %d, align 4
  %97 = load i32, i32* %g, align 4
  %add68 = add i32 %97, %96
  store i32 %add68, i32* %g, align 4
  %98 = load i32, i32* %f, align 4
  %99 = load i32, i32* %e, align 4
  %add69 = add i32 %99, %98
  store i32 %add69, i32* %e, align 4
  %100 = load i32, i32* %f, align 4
  %shl70 = shl i32 %100, 10
  %101 = load i32, i32* %e, align 4
  %xor71 = xor i32 %101, %shl70
  store i32 %xor71, i32* %e, align 4
  %102 = load i32, i32* %e, align 4
  %103 = load i32, i32* %h, align 4
  %add72 = add i32 %103, %102
  store i32 %add72, i32* %h, align 4
  %104 = load i32, i32* %g, align 4
  %105 = load i32, i32* %f, align 4
  %add73 = add i32 %105, %104
  store i32 %add73, i32* %f, align 4
  %106 = load i32, i32* %g, align 4
  %shr74 = lshr i32 %106, 4
  %107 = load i32, i32* %f, align 4
  %xor75 = xor i32 %107, %shr74
  store i32 %xor75, i32* %f, align 4
  %108 = load i32, i32* %f, align 4
  %109 = load i32, i32* %a, align 4
  %add76 = add i32 %109, %108
  store i32 %add76, i32* %a, align 4
  %110 = load i32, i32* %h, align 4
  %111 = load i32, i32* %g, align 4
  %add77 = add i32 %111, %110
  store i32 %add77, i32* %g, align 4
  %112 = load i32, i32* %h, align 4
  %shl78 = shl i32 %112, 8
  %113 = load i32, i32* %g, align 4
  %xor79 = xor i32 %113, %shl78
  store i32 %xor79, i32* %g, align 4
  %114 = load i32, i32* %g, align 4
  %115 = load i32, i32* %b, align 4
  %add80 = add i32 %115, %114
  store i32 %add80, i32* %b, align 4
  %116 = load i32, i32* %a, align 4
  %117 = load i32, i32* %h, align 4
  %add81 = add i32 %117, %116
  store i32 %add81, i32* %h, align 4
  %118 = load i32, i32* %a, align 4
  %shr82 = lshr i32 %118, 9
  %119 = load i32, i32* %h, align 4
  %xor83 = xor i32 %119, %shr82
  store i32 %xor83, i32* %h, align 4
  %120 = load i32, i32* %h, align 4
  %121 = load i32, i32* %c, align 4
  %add84 = add i32 %121, %120
  store i32 %add84, i32* %c, align 4
  %122 = load i32, i32* %b, align 4
  %123 = load i32, i32* %a, align 4
  %add85 = add i32 %123, %122
  store i32 %add85, i32* %a, align 4
  %124 = load i32, i32* %a, align 4
  %125 = load i32, i32* %i, align 4
  %arrayidx86 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %125
  store i32 %124, i32* %arrayidx86, align 4
  %126 = load i32, i32* %b, align 4
  %127 = load i32, i32* %i, align 4
  %add87 = add nsw i32 %127, 1
  %arrayidx88 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add87
  store i32 %126, i32* %arrayidx88, align 4
  %128 = load i32, i32* %c, align 4
  %129 = load i32, i32* %i, align 4
  %add89 = add nsw i32 %129, 2
  %arrayidx90 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add89
  store i32 %128, i32* %arrayidx90, align 4
  %130 = load i32, i32* %d, align 4
  %131 = load i32, i32* %i, align 4
  %add91 = add nsw i32 %131, 3
  %arrayidx92 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add91
  store i32 %130, i32* %arrayidx92, align 4
  %132 = load i32, i32* %e, align 4
  %133 = load i32, i32* %i, align 4
  %add93 = add nsw i32 %133, 4
  %arrayidx94 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add93
  store i32 %132, i32* %arrayidx94, align 4
  %134 = load i32, i32* %f, align 4
  %135 = load i32, i32* %i, align 4
  %add95 = add nsw i32 %135, 5
  %arrayidx96 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add95
  store i32 %134, i32* %arrayidx96, align 4
  %136 = load i32, i32* %g, align 4
  %137 = load i32, i32* %i, align 4
  %add97 = add nsw i32 %137, 6
  %arrayidx98 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add97
  store i32 %136, i32* %arrayidx98, align 4
  %138 = load i32, i32* %h, align 4
  %139 = load i32, i32* %i, align 4
  %add99 = add nsw i32 %139, 7
  %arrayidx100 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add99
  store i32 %138, i32* %arrayidx100, align 4
  br label %for.inc101

for.inc101:                                       ; preds = %if.end
  %140 = load i32, i32* %i, align 4
  %add102 = add nsw i32 %140, 8
  store i32 %add102, i32* %i, align 4
  br label %for.cond29

for.end103:                                       ; preds = %for.cond29
  %141 = load i32, i32* %flag.addr, align 4
  %tobool104 = icmp ne i32 %141, 0
  br i1 %tobool104, label %if.then105, label %if.end182

if.then105:                                       ; preds = %for.end103
  store i32 0, i32* %i, align 4
  br label %for.cond106

for.cond106:                                      ; preds = %for.inc179, %if.then105
  %142 = load i32, i32* %i, align 4
  %cmp107 = icmp slt i32 %142, 256
  br i1 %cmp107, label %for.body108, label %for.end181

for.body108:                                      ; preds = %for.cond106
  %143 = load i32, i32* %i, align 4
  %arrayidx109 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %143
  %144 = load i32, i32* %arrayidx109, align 4
  %145 = load i32, i32* %a, align 4
  %add110 = add i32 %145, %144
  store i32 %add110, i32* %a, align 4
  %146 = load i32, i32* %i, align 4
  %add111 = add nsw i32 %146, 1
  %arrayidx112 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add111
  %147 = load i32, i32* %arrayidx112, align 4
  %148 = load i32, i32* %b, align 4
  %add113 = add i32 %148, %147
  store i32 %add113, i32* %b, align 4
  %149 = load i32, i32* %i, align 4
  %add114 = add nsw i32 %149, 2
  %arrayidx115 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add114
  %150 = load i32, i32* %arrayidx115, align 4
  %151 = load i32, i32* %c, align 4
  %add116 = add i32 %151, %150
  store i32 %add116, i32* %c, align 4
  %152 = load i32, i32* %i, align 4
  %add117 = add nsw i32 %152, 3
  %arrayidx118 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add117
  %153 = load i32, i32* %arrayidx118, align 4
  %154 = load i32, i32* %d, align 4
  %add119 = add i32 %154, %153
  store i32 %add119, i32* %d, align 4
  %155 = load i32, i32* %i, align 4
  %add120 = add nsw i32 %155, 4
  %arrayidx121 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add120
  %156 = load i32, i32* %arrayidx121, align 4
  %157 = load i32, i32* %e, align 4
  %add122 = add i32 %157, %156
  store i32 %add122, i32* %e, align 4
  %158 = load i32, i32* %i, align 4
  %add123 = add nsw i32 %158, 5
  %arrayidx124 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add123
  %159 = load i32, i32* %arrayidx124, align 4
  %160 = load i32, i32* %f, align 4
  %add125 = add i32 %160, %159
  store i32 %add125, i32* %f, align 4
  %161 = load i32, i32* %i, align 4
  %add126 = add nsw i32 %161, 6
  %arrayidx127 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add126
  %162 = load i32, i32* %arrayidx127, align 4
  %163 = load i32, i32* %g, align 4
  %add128 = add i32 %163, %162
  store i32 %add128, i32* %g, align 4
  %164 = load i32, i32* %i, align 4
  %add129 = add nsw i32 %164, 7
  %arrayidx130 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add129
  %165 = load i32, i32* %arrayidx130, align 4
  %166 = load i32, i32* %h, align 4
  %add131 = add i32 %166, %165
  store i32 %add131, i32* %h, align 4
  %167 = load i32, i32* %b, align 4
  %shl132 = shl i32 %167, 11
  %168 = load i32, i32* %a, align 4
  %xor133 = xor i32 %168, %shl132
  store i32 %xor133, i32* %a, align 4
  %169 = load i32, i32* %a, align 4
  %170 = load i32, i32* %d, align 4
  %add134 = add i32 %170, %169
  store i32 %add134, i32* %d, align 4
  %171 = load i32, i32* %c, align 4
  %172 = load i32, i32* %b, align 4
  %add135 = add i32 %172, %171
  store i32 %add135, i32* %b, align 4
  %173 = load i32, i32* %c, align 4
  %shr136 = lshr i32 %173, 2
  %174 = load i32, i32* %b, align 4
  %xor137 = xor i32 %174, %shr136
  store i32 %xor137, i32* %b, align 4
  %175 = load i32, i32* %b, align 4
  %176 = load i32, i32* %e, align 4
  %add138 = add i32 %176, %175
  store i32 %add138, i32* %e, align 4
  %177 = load i32, i32* %d, align 4
  %178 = load i32, i32* %c, align 4
  %add139 = add i32 %178, %177
  store i32 %add139, i32* %c, align 4
  %179 = load i32, i32* %d, align 4
  %shl140 = shl i32 %179, 8
  %180 = load i32, i32* %c, align 4
  %xor141 = xor i32 %180, %shl140
  store i32 %xor141, i32* %c, align 4
  %181 = load i32, i32* %c, align 4
  %182 = load i32, i32* %f, align 4
  %add142 = add i32 %182, %181
  store i32 %add142, i32* %f, align 4
  %183 = load i32, i32* %e, align 4
  %184 = load i32, i32* %d, align 4
  %add143 = add i32 %184, %183
  store i32 %add143, i32* %d, align 4
  %185 = load i32, i32* %e, align 4
  %shr144 = lshr i32 %185, 16
  %186 = load i32, i32* %d, align 4
  %xor145 = xor i32 %186, %shr144
  store i32 %xor145, i32* %d, align 4
  %187 = load i32, i32* %d, align 4
  %188 = load i32, i32* %g, align 4
  %add146 = add i32 %188, %187
  store i32 %add146, i32* %g, align 4
  %189 = load i32, i32* %f, align 4
  %190 = load i32, i32* %e, align 4
  %add147 = add i32 %190, %189
  store i32 %add147, i32* %e, align 4
  %191 = load i32, i32* %f, align 4
  %shl148 = shl i32 %191, 10
  %192 = load i32, i32* %e, align 4
  %xor149 = xor i32 %192, %shl148
  store i32 %xor149, i32* %e, align 4
  %193 = load i32, i32* %e, align 4
  %194 = load i32, i32* %h, align 4
  %add150 = add i32 %194, %193
  store i32 %add150, i32* %h, align 4
  %195 = load i32, i32* %g, align 4
  %196 = load i32, i32* %f, align 4
  %add151 = add i32 %196, %195
  store i32 %add151, i32* %f, align 4
  %197 = load i32, i32* %g, align 4
  %shr152 = lshr i32 %197, 4
  %198 = load i32, i32* %f, align 4
  %xor153 = xor i32 %198, %shr152
  store i32 %xor153, i32* %f, align 4
  %199 = load i32, i32* %f, align 4
  %200 = load i32, i32* %a, align 4
  %add154 = add i32 %200, %199
  store i32 %add154, i32* %a, align 4
  %201 = load i32, i32* %h, align 4
  %202 = load i32, i32* %g, align 4
  %add155 = add i32 %202, %201
  store i32 %add155, i32* %g, align 4
  %203 = load i32, i32* %h, align 4
  %shl156 = shl i32 %203, 8
  %204 = load i32, i32* %g, align 4
  %xor157 = xor i32 %204, %shl156
  store i32 %xor157, i32* %g, align 4
  %205 = load i32, i32* %g, align 4
  %206 = load i32, i32* %b, align 4
  %add158 = add i32 %206, %205
  store i32 %add158, i32* %b, align 4
  %207 = load i32, i32* %a, align 4
  %208 = load i32, i32* %h, align 4
  %add159 = add i32 %208, %207
  store i32 %add159, i32* %h, align 4
  %209 = load i32, i32* %a, align 4
  %shr160 = lshr i32 %209, 9
  %210 = load i32, i32* %h, align 4
  %xor161 = xor i32 %210, %shr160
  store i32 %xor161, i32* %h, align 4
  %211 = load i32, i32* %h, align 4
  %212 = load i32, i32* %c, align 4
  %add162 = add i32 %212, %211
  store i32 %add162, i32* %c, align 4
  %213 = load i32, i32* %b, align 4
  %214 = load i32, i32* %a, align 4
  %add163 = add i32 %214, %213
  store i32 %add163, i32* %a, align 4
  %215 = load i32, i32* %a, align 4
  %216 = load i32, i32* %i, align 4
  %arrayidx164 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %216
  store i32 %215, i32* %arrayidx164, align 4
  %217 = load i32, i32* %b, align 4
  %218 = load i32, i32* %i, align 4
  %add165 = add nsw i32 %218, 1
  %arrayidx166 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add165
  store i32 %217, i32* %arrayidx166, align 4
  %219 = load i32, i32* %c, align 4
  %220 = load i32, i32* %i, align 4
  %add167 = add nsw i32 %220, 2
  %arrayidx168 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add167
  store i32 %219, i32* %arrayidx168, align 4
  %221 = load i32, i32* %d, align 4
  %222 = load i32, i32* %i, align 4
  %add169 = add nsw i32 %222, 3
  %arrayidx170 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add169
  store i32 %221, i32* %arrayidx170, align 4
  %223 = load i32, i32* %e, align 4
  %224 = load i32, i32* %i, align 4
  %add171 = add nsw i32 %224, 4
  %arrayidx172 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add171
  store i32 %223, i32* %arrayidx172, align 4
  %225 = load i32, i32* %f, align 4
  %226 = load i32, i32* %i, align 4
  %add173 = add nsw i32 %226, 5
  %arrayidx174 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add173
  store i32 %225, i32* %arrayidx174, align 4
  %227 = load i32, i32* %g, align 4
  %228 = load i32, i32* %i, align 4
  %add175 = add nsw i32 %228, 6
  %arrayidx176 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add175
  store i32 %227, i32* %arrayidx176, align 4
  %229 = load i32, i32* %h, align 4
  %230 = load i32, i32* %i, align 4
  %add177 = add nsw i32 %230, 7
  %arrayidx178 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add177
  store i32 %229, i32* %arrayidx178, align 4
  br label %for.inc179

for.inc179:                                       ; preds = %for.body108
  %231 = load i32, i32* %i, align 4
  %add180 = add nsw i32 %231, 8
  store i32 %add180, i32* %i, align 4
  br label %for.cond106

for.end181:                                       ; preds = %for.cond106
  br label %if.end182

if.end182:                                        ; preds = %for.end181, %for.end103
  call void @isaac()
  store i32 0, i32* @randcnt, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @iRandom() #0 {
entry:
  %r = alloca i32, align 4
  %0 = load i32, i32* @randcnt, align 4
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %0
  %1 = load i32, i32* %arrayidx, align 4
  store i32 %1, i32* %r, align 4
  %2 = load i32, i32* @randcnt, align 4
  %inc = add i32 %2, 1
  store i32 %inc, i32* @randcnt, align 4
  %3 = load i32, i32* @randcnt, align 4
  %cmp = icmp ugt i32 %3, 255
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @isaac()
  store i32 0, i32* @randcnt, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* %r, align 4
  ret i32 %4
}

; Function Attrs: noinline nounwind optnone
define hidden signext i8 @iRandA() #0 {
entry:
  %call = call i32 @iRandom()
  %rem = urem i32 %call, 95
  %add = add i32 %rem, 32
  %conv = trunc i32 %add to i8
  ret i8 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden void @iSeed(i8* %seed, i32 %flag) #0 {
entry:
  %seed.addr = alloca i8*, align 4
  %flag.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %m = alloca i32, align 4
  store i8* %seed, i8** %seed.addr, align 4
  store i32 %flag, i32* %flag.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %0, 256
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %1
  store i32 0, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %i, align 4
  %inc = add i32 %2, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %3 = load i8*, i8** %seed.addr, align 4
  %call = call i32 @strlen(i8* %3) #4
  store i32 %call, i32* %m, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc8, %for.end
  %4 = load i32, i32* %i, align 4
  %cmp2 = icmp ult i32 %4, 256
  br i1 %cmp2, label %for.body3, label %for.end10

for.body3:                                        ; preds = %for.cond1
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %m, align 4
  %cmp4 = icmp ugt i32 %5, %6
  br i1 %cmp4, label %if.then, label %if.else

if.then:                                          ; preds = %for.body3
  %7 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %7
  store i32 0, i32* %arrayidx5, align 4
  br label %if.end

if.else:                                          ; preds = %for.body3
  %8 = load i8*, i8** %seed.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds i8, i8* %8, i32 %9
  %10 = load i8, i8* %arrayidx6, align 1
  %conv = sext i8 %10 to i32
  %11 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %11
  store i32 %conv, i32* %arrayidx7, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc8

for.inc8:                                         ; preds = %if.end
  %12 = load i32, i32* %i, align 4
  %inc9 = add i32 %12, 1
  store i32 %inc9, i32* %i, align 4
  br label %for.cond1

for.end10:                                        ; preds = %for.cond1
  %13 = load i32, i32* %flag.addr, align 4
  call void @randinit(i32 %13)
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i8* @Vernam(i8* %msg) #0 {
entry:
  %msg.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %l = alloca i32, align 4
  store i8* %msg, i8** %msg.addr, align 4
  %0 = load i8*, i8** %msg.addr, align 4
  %call = call i32 @strlen(i8* %0) #4
  store i32 %call, i32* %l, align 4
  %1 = load i32, i32* %l, align 4
  %add = add i32 %1, 1
  call void @llvm.memset.p0i8.i32(i8* align 16 getelementptr inbounds ([4096 x i8], [4096 x i8]* @v, i32 0, i32 0), i8 0, i32 %add, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %l, align 4
  %cmp = icmp ult i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call1 = call signext i8 @iRandA()
  %conv = sext i8 %call1 to i32
  %4 = load i8*, i8** %msg.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %4, i32 %5
  %6 = load i8, i8* %arrayidx, align 1
  %conv2 = sext i8 %6 to i32
  %xor = xor i32 %conv, %conv2
  %conv3 = trunc i32 %xor to i8
  %7 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds [4096 x i8], [4096 x i8]* @v, i32 0, i32 %7
  store i8 %conv3, i8* %arrayidx4, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %inc = add i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i8* getelementptr inbounds ([4096 x i8], [4096 x i8]* @v, i32 0, i32 0)
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define hidden signext i8 @Caesar(i32 %m, i8 signext %ch, i8 signext %shift, i8 signext %modulo, i8 signext %start) #0 {
entry:
  %m.addr = alloca i32, align 4
  %ch.addr = alloca i8, align 1
  %shift.addr = alloca i8, align 1
  %modulo.addr = alloca i8, align 1
  %start.addr = alloca i8, align 1
  %n = alloca i32, align 4
  store i32 %m, i32* %m.addr, align 4
  store i8 %ch, i8* %ch.addr, align 1
  store i8 %shift, i8* %shift.addr, align 1
  store i8 %modulo, i8* %modulo.addr, align 1
  store i8 %start, i8* %start.addr, align 1
  %0 = load i32, i32* %m.addr, align 4
  %cmp = icmp eq i32 %0, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i8, i8* %shift.addr, align 1
  %conv = sext i8 %1 to i32
  %sub = sub nsw i32 0, %conv
  %conv1 = trunc i32 %sub to i8
  store i8 %conv1, i8* %shift.addr, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i8, i8* %ch.addr, align 1
  %conv2 = sext i8 %2 to i32
  %3 = load i8, i8* %start.addr, align 1
  %conv3 = sext i8 %3 to i32
  %sub4 = sub nsw i32 %conv2, %conv3
  %4 = load i8, i8* %shift.addr, align 1
  %conv5 = sext i8 %4 to i32
  %add = add nsw i32 %sub4, %conv5
  store i32 %add, i32* %n, align 4
  %5 = load i32, i32* %n, align 4
  %6 = load i8, i8* %modulo.addr, align 1
  %conv6 = sext i8 %6 to i32
  %rem = srem i32 %5, %conv6
  store i32 %rem, i32* %n, align 4
  %7 = load i32, i32* %n, align 4
  %cmp7 = icmp slt i32 %7, 0
  br i1 %cmp7, label %if.then9, label %if.end12

if.then9:                                         ; preds = %if.end
  %8 = load i8, i8* %modulo.addr, align 1
  %conv10 = sext i8 %8 to i32
  %9 = load i32, i32* %n, align 4
  %add11 = add nsw i32 %9, %conv10
  store i32 %add11, i32* %n, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then9, %if.end
  %10 = load i8, i8* %start.addr, align 1
  %conv13 = sext i8 %10 to i32
  %11 = load i32, i32* %n, align 4
  %add14 = add nsw i32 %conv13, %11
  %conv15 = trunc i32 %add14 to i8
  ret i8 %conv15
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @CaesarStr(i32 %m, i8* %msg, i8 signext %modulo, i8 signext %start) #0 {
entry:
  %m.addr = alloca i32, align 4
  %msg.addr = alloca i8*, align 4
  %modulo.addr = alloca i8, align 1
  %start.addr = alloca i8, align 1
  %i = alloca i32, align 4
  %l = alloca i32, align 4
  store i32 %m, i32* %m.addr, align 4
  store i8* %msg, i8** %msg.addr, align 4
  store i8 %modulo, i8* %modulo.addr, align 1
  store i8 %start, i8* %start.addr, align 1
  %0 = load i8*, i8** %msg.addr, align 4
  %call = call i32 @strlen(i8* %0) #4
  store i32 %call, i32* %l, align 4
  %1 = load i32, i32* %l, align 4
  %add = add i32 %1, 1
  call void @llvm.memset.p0i8.i32(i8* align 16 getelementptr inbounds ([4096 x i8], [4096 x i8]* @c, i32 0, i32 0), i8 0, i32 %add, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %l, align 4
  %cmp = icmp ult i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %m.addr, align 4
  %5 = load i8*, i8** %msg.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %5, i32 %6
  %7 = load i8, i8* %arrayidx, align 1
  %call1 = call signext i8 @iRandA()
  %8 = load i8, i8* %modulo.addr, align 1
  %9 = load i8, i8* %start.addr, align 1
  %call2 = call signext i8 @Caesar(i32 %4, i8 signext %7, i8 signext %call1, i8 signext %8, i8 signext %9)
  %10 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds [4096 x i8], [4096 x i8]* @c, i32 0, i32 %10
  store i8 %call2, i8* %arrayidx3, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i8* getelementptr inbounds ([4096 x i8], [4096 x i8]* @c, i32 0, i32 0)
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %n = alloca i32, align 4
  %l = alloca i32, align 4
  %msg = alloca i8*, align 4
  %key = alloca i8*, align 4
  %vctx = alloca [4096 x i8], align 16
  %vptx = alloca [4096 x i8], align 16
  %cctx = alloca [4096 x i8], align 16
  %cptx = alloca [4096 x i8], align 16
  store i32 0, i32* %retval, align 4
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i32 0, i32 0), i8** %msg, align 4
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i32 0, i32 0), i8** %key, align 4
  %0 = load i8*, i8** %msg, align 4
  %call = call i32 @strlen(i8* %0) #4
  store i32 %call, i32* %l, align 4
  %1 = load i8*, i8** %key, align 4
  call void @iSeed(i8* %1, i32 1)
  %arraydecay = getelementptr inbounds [4096 x i8], [4096 x i8]* %vctx, i32 0, i32 0
  %2 = load i8*, i8** %msg, align 4
  %call1 = call i8* @Vernam(i8* %2)
  %call2 = call i8* @strcpy(i8* %arraydecay, i8* %call1)
  %arraydecay3 = getelementptr inbounds [4096 x i8], [4096 x i8]* %cctx, i32 0, i32 0
  %3 = load i8*, i8** %msg, align 4
  %call4 = call i8* @CaesarStr(i32 0, i8* %3, i8 signext 95, i8 signext 32)
  %call5 = call i8* @strcpy(i8* %arraydecay3, i8* %call4)
  %4 = load i8*, i8** %key, align 4
  call void @iSeed(i8* %4, i32 1)
  %arraydecay6 = getelementptr inbounds [4096 x i8], [4096 x i8]* %vptx, i32 0, i32 0
  %arraydecay7 = getelementptr inbounds [4096 x i8], [4096 x i8]* %vctx, i32 0, i32 0
  %call8 = call i8* @Vernam(i8* %arraydecay7)
  %call9 = call i8* @strcpy(i8* %arraydecay6, i8* %call8)
  %arraydecay10 = getelementptr inbounds [4096 x i8], [4096 x i8]* %cptx, i32 0, i32 0
  %arraydecay11 = getelementptr inbounds [4096 x i8], [4096 x i8]* %cctx, i32 0, i32 0
  %call12 = call i8* @CaesarStr(i32 1, i8* %arraydecay11, i8 signext 95, i8 signext 32)
  %call13 = call i8* @strcpy(i8* %arraydecay10, i8* %call12)
  %5 = load i8*, i8** %msg, align 4
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i32 0, i32 0), i8* %5)
  %6 = load i8*, i8** %key, align 4
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3, i32 0, i32 0), i8* %6)
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i32 0, i32 0))
  store i32 0, i32* %n, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %7 = load i32, i32* %n, align 4
  %8 = load i32, i32* %l, align 4
  %cmp = icmp ult i32 %7, %8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i32, i32* %n, align 4
  %arrayidx = getelementptr inbounds [4096 x i8], [4096 x i8]* %vctx, i32 0, i32 %9
  %10 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %10 to i32
  %call17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i32 %conv)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %n, align 4
  %inc = add i32 %11, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i32 0, i32 0))
  %arraydecay19 = getelementptr inbounds [4096 x i8], [4096 x i8]* %vptx, i32 0, i32 0
  %call20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7, i32 0, i32 0), i8* %arraydecay19)
  %call21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8, i32 0, i32 0))
  store i32 0, i32* %n, align 4
  br label %for.cond22

for.cond22:                                       ; preds = %for.inc29, %for.end
  %12 = load i32, i32* %n, align 4
  %13 = load i32, i32* %l, align 4
  %cmp23 = icmp ult i32 %12, %13
  br i1 %cmp23, label %for.body25, label %for.end31

for.body25:                                       ; preds = %for.cond22
  %14 = load i32, i32* %n, align 4
  %arrayidx26 = getelementptr inbounds [4096 x i8], [4096 x i8]* %cctx, i32 0, i32 %14
  %15 = load i8, i8* %arrayidx26, align 1
  %conv27 = sext i8 %15 to i32
  %call28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i32 %conv27)
  br label %for.inc29

for.inc29:                                        ; preds = %for.body25
  %16 = load i32, i32* %n, align 4
  %inc30 = add i32 %16, 1
  store i32 %inc30, i32* %n, align 4
  br label %for.cond22

for.end31:                                        ; preds = %for.cond22
  %call32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i32 0, i32 0))
  %arraydecay33 = getelementptr inbounds [4096 x i8], [4096 x i8]* %cptx, i32 0, i32 0
  %call34 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.9, i32 0, i32 0), i8* %arraydecay33)
  ret i32 0
}

declare i8* @strcpy(i8* %0, i8* %1) #3

declare i32 @printf(i8* %0, ...) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn writeonly }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %m.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %0, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %1 = load i8, i8* %shift.addr, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %1 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 0, %conv
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = subnsw 0:i32, %1
infer %2 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %conv1 = trunc i32 %sub to i8
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = subnsw 0:i32, %1
%3:i8 = trunc %2
infer %3

; *****
; For LLVM instruction:
;  %2 = load i8, i8* %ch.addr, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv2 = sext i8 %2 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i8, i8* %start.addr, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv3 = sext i8 %3 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %sub4 = sub nsw i32 %conv2, %conv3
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i32 = subnsw %1, %3
infer %4

; *****
; For LLVM instruction:
;  %4 = load i8, i8* %shift.addr, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv5 = sext i8 %4 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %add = add nsw i32 %sub4, %conv5
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i32 = subnsw %1, %3
%5:i8 = var
%6:i32 = sext %5
%7:i32 = addnsw %4, %6
infer %7

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i8, i8* %modulo.addr, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv6 = sext i8 %6 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %rem = srem i32 %5, %conv6
; Looking for a replacement for:
%0:i32 = var
%1:i8 = var
%2:i32 = sext %1
%3:i32 = srem %0, %2
infer %3

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp7 = icmp slt i32 %7, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 0:i32
infer %1

; *****
; For LLVM instruction:
;  %8 = load i8, i8* %modulo.addr, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv10 = sext i8 %8 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add11 = add nsw i32 %9, %conv10
; Looking for a replacement for:
%0:i32 = var
%1:i8 = var
%2:i32 = sext %1
%3:i32 = addnsw %0, %2
infer %3

; *****
; For LLVM instruction:
;  %10 = load i8, i8* %start.addr, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv13 = sext i8 %10 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %add14 = add nsw i32 %conv13, %11
; Looking for a replacement for:
%0:i32 = var
%1:i8 = var
%2:i32 = sext %1
%3:i32 = addnsw %0, %2
infer %3 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %conv15 = trunc i32 %add14 to i8
; Looking for a replacement for:
%0:i32 = var
%1:i8 = var
%2:i32 = sext %1
%3:i32 = addnsw %0, %2
%4:i8 = trunc %3
infer %4
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i32 = subnsw 0:i32, %1
infer %2 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -64
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i32 = subnsw 0:i32, %1
%3:i8 = trunc %2
infer %3


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -64
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i32 = subnsw %1, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i32 = subnsw %1, %3
%5:i8 = var
%6:i32 = sext %5
%7:i32 = addnsw %4, %6
infer %7


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 126
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i32 = subnsw %1, %3

Cost = 3
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i8 = var
%2:i32 = sext %1
%3:i32 = srem %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -34
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 0:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i8 = var
%2:i32 = sext %1
%3:i32 = addnsw %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 255
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i8 = var
%2:i32 = sext %1
%3:i32 = addnsw %0, %2
infer %3 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -8
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i8 = var
%2:i32 = sext %1
%3:i32 = addnsw %0, %2
%4:i8 = trunc %3
infer %4


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -8
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for Caesar()

; entering Souper's runOnFunction() for CaesarStr()

; ModuleID = './The_ISAAC_Cipher.c.bc'
source_filename = "./The_ISAAC_Cipher.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@cc = internal global i32 0, align 4
@bb = internal global i32 0, align 4
@mm = internal global [256 x i32] zeroinitializer, align 16
@aa = internal global i32 0, align 4
@randrsl = hidden global [256 x i32] zeroinitializer, align 16
@randcnt = hidden global i32 0, align 4
@v = hidden global [4096 x i8] zeroinitializer, align 16
@c = hidden global [4096 x i8] zeroinitializer, align 16
@.str = private unnamed_addr constant [20 x i8] c"a Top Secret secret\00", align 1
@.str.1 = private unnamed_addr constant [22 x i8] c"this is my secret key\00", align 1
@.str.2 = private unnamed_addr constant [13 x i8] c"Message: %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [13 x i8] c"Key    : %s\0A\00", align 1
@.str.4 = private unnamed_addr constant [10 x i8] c"XOR    : \00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"%02X\00", align 1
@.str.6 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.7 = private unnamed_addr constant [13 x i8] c"XOR dcr: %s\0A\00", align 1
@.str.8 = private unnamed_addr constant [10 x i8] c"MOD    : \00", align 1
@.str.9 = private unnamed_addr constant [13 x i8] c"MOD dcr: %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @isaac() #0 {
entry:
  %i = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %0 = load i32, i32* @cc, align 4
  %add = add i32 %0, 1
  store i32 %add, i32* @cc, align 4
  %1 = load i32, i32* @bb, align 4
  %2 = load i32, i32* @cc, align 4
  %add1 = add i32 %1, %2
  store i32 %add1, i32* @bb, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %3, 256
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  store i32 %5, i32* %x, align 4
  %6 = load i32, i32* %i, align 4
  %rem = urem i32 %6, 4
  switch i32 %rem, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb2
    i32 2, label %sw.bb4
    i32 3, label %sw.bb7
  ]

sw.bb:                                            ; preds = %for.body
  %7 = load i32, i32* @aa, align 4
  %8 = load i32, i32* @aa, align 4
  %shl = shl i32 %8, 13
  %xor = xor i32 %7, %shl
  store i32 %xor, i32* @aa, align 4
  br label %sw.epilog

sw.bb2:                                           ; preds = %for.body
  %9 = load i32, i32* @aa, align 4
  %10 = load i32, i32* @aa, align 4
  %shr = lshr i32 %10, 6
  %xor3 = xor i32 %9, %shr
  store i32 %xor3, i32* @aa, align 4
  br label %sw.epilog

sw.bb4:                                           ; preds = %for.body
  %11 = load i32, i32* @aa, align 4
  %12 = load i32, i32* @aa, align 4
  %shl5 = shl i32 %12, 2
  %xor6 = xor i32 %11, %shl5
  store i32 %xor6, i32* @aa, align 4
  br label %sw.epilog

sw.bb7:                                           ; preds = %for.body
  %13 = load i32, i32* @aa, align 4
  %14 = load i32, i32* @aa, align 4
  %shr8 = lshr i32 %14, 16
  %xor9 = xor i32 %13, %shr8
  store i32 %xor9, i32* @aa, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %for.body, %sw.bb7, %sw.bb4, %sw.bb2, %sw.bb
  %15 = load i32, i32* %i, align 4
  %add10 = add i32 %15, 128
  %rem11 = urem i32 %add10, 256
  %arrayidx12 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %rem11
  %16 = load i32, i32* %arrayidx12, align 4
  %17 = load i32, i32* @aa, align 4
  %add13 = add i32 %16, %17
  store i32 %add13, i32* @aa, align 4
  %18 = load i32, i32* %x, align 4
  %shr14 = lshr i32 %18, 2
  %rem15 = urem i32 %shr14, 256
  %arrayidx16 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %rem15
  %19 = load i32, i32* %arrayidx16, align 4
  %20 = load i32, i32* @aa, align 4
  %add17 = add i32 %19, %20
  %21 = load i32, i32* @bb, align 4
  %add18 = add i32 %add17, %21
  store i32 %add18, i32* %y, align 4
  %22 = load i32, i32* %i, align 4
  %arrayidx19 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %22
  store i32 %add18, i32* %arrayidx19, align 4
  %23 = load i32, i32* %y, align 4
  %shr20 = lshr i32 %23, 10
  %rem21 = urem i32 %shr20, 256
  %arrayidx22 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %rem21
  %24 = load i32, i32* %arrayidx22, align 4
  %25 = load i32, i32* %x, align 4
  %add23 = add i32 %24, %25
  store i32 %add23, i32* @bb, align 4
  %26 = load i32, i32* %i, align 4
  %arrayidx24 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %26
  store i32 %add23, i32* %arrayidx24, align 4
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %27 = load i32, i32* %i, align 4
  %inc = add i32 %27, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* @randcnt, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @randinit(i32 %flag) #0 {
entry:
  %flag.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %c = alloca i32, align 4
  %d = alloca i32, align 4
  %e = alloca i32, align 4
  %f = alloca i32, align 4
  %g = alloca i32, align 4
  %h = alloca i32, align 4
  store i32 %flag, i32* %flag.addr, align 4
  store i32 0, i32* @cc, align 4
  store i32 0, i32* @bb, align 4
  store i32 0, i32* @aa, align 4
  store i32 -1640531527, i32* %h, align 4
  store i32 -1640531527, i32* %g, align 4
  store i32 -1640531527, i32* %f, align 4
  store i32 -1640531527, i32* %e, align 4
  store i32 -1640531527, i32* %d, align 4
  store i32 -1640531527, i32* %c, align 4
  store i32 -1640531527, i32* %b, align 4
  store i32 -1640531527, i32* %a, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %b, align 4
  %shl = shl i32 %1, 11
  %2 = load i32, i32* %a, align 4
  %xor = xor i32 %2, %shl
  store i32 %xor, i32* %a, align 4
  %3 = load i32, i32* %a, align 4
  %4 = load i32, i32* %d, align 4
  %add = add i32 %4, %3
  store i32 %add, i32* %d, align 4
  %5 = load i32, i32* %c, align 4
  %6 = load i32, i32* %b, align 4
  %add1 = add i32 %6, %5
  store i32 %add1, i32* %b, align 4
  %7 = load i32, i32* %c, align 4
  %shr = lshr i32 %7, 2
  %8 = load i32, i32* %b, align 4
  %xor2 = xor i32 %8, %shr
  store i32 %xor2, i32* %b, align 4
  %9 = load i32, i32* %b, align 4
  %10 = load i32, i32* %e, align 4
  %add3 = add i32 %10, %9
  store i32 %add3, i32* %e, align 4
  %11 = load i32, i32* %d, align 4
  %12 = load i32, i32* %c, align 4
  %add4 = add i32 %12, %11
  store i32 %add4, i32* %c, align 4
  %13 = load i32, i32* %d, align 4
  %shl5 = shl i32 %13, 8
  %14 = load i32, i32* %c, align 4
  %xor6 = xor i32 %14, %shl5
  store i32 %xor6, i32* %c, align 4
  %15 = load i32, i32* %c, align 4
  %16 = load i32, i32* %f, align 4
  %add7 = add i32 %16, %15
  store i32 %add7, i32* %f, align 4
  %17 = load i32, i32* %e, align 4
  %18 = load i32, i32* %d, align 4
  %add8 = add i32 %18, %17
  store i32 %add8, i32* %d, align 4
  %19 = load i32, i32* %e, align 4
  %shr9 = lshr i32 %19, 16
  %20 = load i32, i32* %d, align 4
  %xor10 = xor i32 %20, %shr9
  store i32 %xor10, i32* %d, align 4
  %21 = load i32, i32* %d, align 4
  %22 = load i32, i32* %g, align 4
  %add11 = add i32 %22, %21
  store i32 %add11, i32* %g, align 4
  %23 = load i32, i32* %f, align 4
  %24 = load i32, i32* %e, align 4
  %add12 = add i32 %24, %23
  store i32 %add12, i32* %e, align 4
  %25 = load i32, i32* %f, align 4
  %shl13 = shl i32 %25, 10
  %26 = load i32, i32* %e, align 4
  %xor14 = xor i32 %26, %shl13
  store i32 %xor14, i32* %e, align 4
  %27 = load i32, i32* %e, align 4
  %28 = load i32, i32* %h, align 4
  %add15 = add i32 %28, %27
  store i32 %add15, i32* %h, align 4
  %29 = load i32, i32* %g, align 4
  %30 = load i32, i32* %f, align 4
  %add16 = add i32 %30, %29
  store i32 %add16, i32* %f, align 4
  %31 = load i32, i32* %g, align 4
  %shr17 = lshr i32 %31, 4
  %32 = load i32, i32* %f, align 4
  %xor18 = xor i32 %32, %shr17
  store i32 %xor18, i32* %f, align 4
  %33 = load i32, i32* %f, align 4
  %34 = load i32, i32* %a, align 4
  %add19 = add i32 %34, %33
  store i32 %add19, i32* %a, align 4
  %35 = load i32, i32* %h, align 4
  %36 = load i32, i32* %g, align 4
  %add20 = add i32 %36, %35
  store i32 %add20, i32* %g, align 4
  %37 = load i32, i32* %h, align 4
  %shl21 = shl i32 %37, 8
  %38 = load i32, i32* %g, align 4
  %xor22 = xor i32 %38, %shl21
  store i32 %xor22, i32* %g, align 4
  %39 = load i32, i32* %g, align 4
  %40 = load i32, i32* %b, align 4
  %add23 = add i32 %40, %39
  store i32 %add23, i32* %b, align 4
  %41 = load i32, i32* %a, align 4
  %42 = load i32, i32* %h, align 4
  %add24 = add i32 %42, %41
  store i32 %add24, i32* %h, align 4
  %43 = load i32, i32* %a, align 4
  %shr25 = lshr i32 %43, 9
  %44 = load i32, i32* %h, align 4
  %xor26 = xor i32 %44, %shr25
  store i32 %xor26, i32* %h, align 4
  %45 = load i32, i32* %h, align 4
  %46 = load i32, i32* %c, align 4
  %add27 = add i32 %46, %45
  store i32 %add27, i32* %c, align 4
  %47 = load i32, i32* %b, align 4
  %48 = load i32, i32* %a, align 4
  %add28 = add i32 %48, %47
  store i32 %add28, i32* %a, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %49 = load i32, i32* %i, align 4
  %inc = add nsw i32 %49, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond29

for.cond29:                                       ; preds = %for.inc101, %for.end
  %50 = load i32, i32* %i, align 4
  %cmp30 = icmp slt i32 %50, 256
  br i1 %cmp30, label %for.body31, label %for.end103

for.body31:                                       ; preds = %for.cond29
  %51 = load i32, i32* %flag.addr, align 4
  %tobool = icmp ne i32 %51, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body31
  %52 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %52
  %53 = load i32, i32* %arrayidx, align 4
  %54 = load i32, i32* %a, align 4
  %add32 = add i32 %54, %53
  store i32 %add32, i32* %a, align 4
  %55 = load i32, i32* %i, align 4
  %add33 = add nsw i32 %55, 1
  %arrayidx34 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %add33
  %56 = load i32, i32* %arrayidx34, align 4
  %57 = load i32, i32* %b, align 4
  %add35 = add i32 %57, %56
  store i32 %add35, i32* %b, align 4
  %58 = load i32, i32* %i, align 4
  %add36 = add nsw i32 %58, 2
  %arrayidx37 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %add36
  %59 = load i32, i32* %arrayidx37, align 4
  %60 = load i32, i32* %c, align 4
  %add38 = add i32 %60, %59
  store i32 %add38, i32* %c, align 4
  %61 = load i32, i32* %i, align 4
  %add39 = add nsw i32 %61, 3
  %arrayidx40 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %add39
  %62 = load i32, i32* %arrayidx40, align 4
  %63 = load i32, i32* %d, align 4
  %add41 = add i32 %63, %62
  store i32 %add41, i32* %d, align 4
  %64 = load i32, i32* %i, align 4
  %add42 = add nsw i32 %64, 4
  %arrayidx43 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %add42
  %65 = load i32, i32* %arrayidx43, align 4
  %66 = load i32, i32* %e, align 4
  %add44 = add i32 %66, %65
  store i32 %add44, i32* %e, align 4
  %67 = load i32, i32* %i, align 4
  %add45 = add nsw i32 %67, 5
  %arrayidx46 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %add45
  %68 = load i32, i32* %arrayidx46, align 4
  %69 = load i32, i32* %f, align 4
  %add47 = add i32 %69, %68
  store i32 %add47, i32* %f, align 4
  %70 = load i32, i32* %i, align 4
  %add48 = add nsw i32 %70, 6
  %arrayidx49 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %add48
  %71 = load i32, i32* %arrayidx49, align 4
  %72 = load i32, i32* %g, align 4
  %add50 = add i32 %72, %71
  store i32 %add50, i32* %g, align 4
  %73 = load i32, i32* %i, align 4
  %add51 = add nsw i32 %73, 7
  %arrayidx52 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %add51
  %74 = load i32, i32* %arrayidx52, align 4
  %75 = load i32, i32* %h, align 4
  %add53 = add i32 %75, %74
  store i32 %add53, i32* %h, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body31
  %76 = load i32, i32* %b, align 4
  %shl54 = shl i32 %76, 11
  %77 = load i32, i32* %a, align 4
  %xor55 = xor i32 %77, %shl54
  store i32 %xor55, i32* %a, align 4
  %78 = load i32, i32* %a, align 4
  %79 = load i32, i32* %d, align 4
  %add56 = add i32 %79, %78
  store i32 %add56, i32* %d, align 4
  %80 = load i32, i32* %c, align 4
  %81 = load i32, i32* %b, align 4
  %add57 = add i32 %81, %80
  store i32 %add57, i32* %b, align 4
  %82 = load i32, i32* %c, align 4
  %shr58 = lshr i32 %82, 2
  %83 = load i32, i32* %b, align 4
  %xor59 = xor i32 %83, %shr58
  store i32 %xor59, i32* %b, align 4
  %84 = load i32, i32* %b, align 4
  %85 = load i32, i32* %e, align 4
  %add60 = add i32 %85, %84
  store i32 %add60, i32* %e, align 4
  %86 = load i32, i32* %d, align 4
  %87 = load i32, i32* %c, align 4
  %add61 = add i32 %87, %86
  store i32 %add61, i32* %c, align 4
  %88 = load i32, i32* %d, align 4
  %shl62 = shl i32 %88, 8
  %89 = load i32, i32* %c, align 4
  %xor63 = xor i32 %89, %shl62
  store i32 %xor63, i32* %c, align 4
  %90 = load i32, i32* %c, align 4
  %91 = load i32, i32* %f, align 4
  %add64 = add i32 %91, %90
  store i32 %add64, i32* %f, align 4
  %92 = load i32, i32* %e, align 4
  %93 = load i32, i32* %d, align 4
  %add65 = add i32 %93, %92
  store i32 %add65, i32* %d, align 4
  %94 = load i32, i32* %e, align 4
  %shr66 = lshr i32 %94, 16
  %95 = load i32, i32* %d, align 4
  %xor67 = xor i32 %95, %shr66
  store i32 %xor67, i32* %d, align 4
  %96 = load i32, i32* %d, align 4
  %97 = load i32, i32* %g, align 4
  %add68 = add i32 %97, %96
  store i32 %add68, i32* %g, align 4
  %98 = load i32, i32* %f, align 4
  %99 = load i32, i32* %e, align 4
  %add69 = add i32 %99, %98
  store i32 %add69, i32* %e, align 4
  %100 = load i32, i32* %f, align 4
  %shl70 = shl i32 %100, 10
  %101 = load i32, i32* %e, align 4
  %xor71 = xor i32 %101, %shl70
  store i32 %xor71, i32* %e, align 4
  %102 = load i32, i32* %e, align 4
  %103 = load i32, i32* %h, align 4
  %add72 = add i32 %103, %102
  store i32 %add72, i32* %h, align 4
  %104 = load i32, i32* %g, align 4
  %105 = load i32, i32* %f, align 4
  %add73 = add i32 %105, %104
  store i32 %add73, i32* %f, align 4
  %106 = load i32, i32* %g, align 4
  %shr74 = lshr i32 %106, 4
  %107 = load i32, i32* %f, align 4
  %xor75 = xor i32 %107, %shr74
  store i32 %xor75, i32* %f, align 4
  %108 = load i32, i32* %f, align 4
  %109 = load i32, i32* %a, align 4
  %add76 = add i32 %109, %108
  store i32 %add76, i32* %a, align 4
  %110 = load i32, i32* %h, align 4
  %111 = load i32, i32* %g, align 4
  %add77 = add i32 %111, %110
  store i32 %add77, i32* %g, align 4
  %112 = load i32, i32* %h, align 4
  %shl78 = shl i32 %112, 8
  %113 = load i32, i32* %g, align 4
  %xor79 = xor i32 %113, %shl78
  store i32 %xor79, i32* %g, align 4
  %114 = load i32, i32* %g, align 4
  %115 = load i32, i32* %b, align 4
  %add80 = add i32 %115, %114
  store i32 %add80, i32* %b, align 4
  %116 = load i32, i32* %a, align 4
  %117 = load i32, i32* %h, align 4
  %add81 = add i32 %117, %116
  store i32 %add81, i32* %h, align 4
  %118 = load i32, i32* %a, align 4
  %shr82 = lshr i32 %118, 9
  %119 = load i32, i32* %h, align 4
  %xor83 = xor i32 %119, %shr82
  store i32 %xor83, i32* %h, align 4
  %120 = load i32, i32* %h, align 4
  %121 = load i32, i32* %c, align 4
  %add84 = add i32 %121, %120
  store i32 %add84, i32* %c, align 4
  %122 = load i32, i32* %b, align 4
  %123 = load i32, i32* %a, align 4
  %add85 = add i32 %123, %122
  store i32 %add85, i32* %a, align 4
  %124 = load i32, i32* %a, align 4
  %125 = load i32, i32* %i, align 4
  %arrayidx86 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %125
  store i32 %124, i32* %arrayidx86, align 4
  %126 = load i32, i32* %b, align 4
  %127 = load i32, i32* %i, align 4
  %add87 = add nsw i32 %127, 1
  %arrayidx88 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add87
  store i32 %126, i32* %arrayidx88, align 4
  %128 = load i32, i32* %c, align 4
  %129 = load i32, i32* %i, align 4
  %add89 = add nsw i32 %129, 2
  %arrayidx90 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add89
  store i32 %128, i32* %arrayidx90, align 4
  %130 = load i32, i32* %d, align 4
  %131 = load i32, i32* %i, align 4
  %add91 = add nsw i32 %131, 3
  %arrayidx92 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add91
  store i32 %130, i32* %arrayidx92, align 4
  %132 = load i32, i32* %e, align 4
  %133 = load i32, i32* %i, align 4
  %add93 = add nsw i32 %133, 4
  %arrayidx94 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add93
  store i32 %132, i32* %arrayidx94, align 4
  %134 = load i32, i32* %f, align 4
  %135 = load i32, i32* %i, align 4
  %add95 = add nsw i32 %135, 5
  %arrayidx96 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add95
  store i32 %134, i32* %arrayidx96, align 4
  %136 = load i32, i32* %g, align 4
  %137 = load i32, i32* %i, align 4
  %add97 = add nsw i32 %137, 6
  %arrayidx98 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add97
  store i32 %136, i32* %arrayidx98, align 4
  %138 = load i32, i32* %h, align 4
  %139 = load i32, i32* %i, align 4
  %add99 = add nsw i32 %139, 7
  %arrayidx100 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add99
  store i32 %138, i32* %arrayidx100, align 4
  br label %for.inc101

for.inc101:                                       ; preds = %if.end
  %140 = load i32, i32* %i, align 4
  %add102 = add nsw i32 %140, 8
  store i32 %add102, i32* %i, align 4
  br label %for.cond29

for.end103:                                       ; preds = %for.cond29
  %141 = load i32, i32* %flag.addr, align 4
  %tobool104 = icmp ne i32 %141, 0
  br i1 %tobool104, label %if.then105, label %if.end182

if.then105:                                       ; preds = %for.end103
  store i32 0, i32* %i, align 4
  br label %for.cond106

for.cond106:                                      ; preds = %for.inc179, %if.then105
  %142 = load i32, i32* %i, align 4
  %cmp107 = icmp slt i32 %142, 256
  br i1 %cmp107, label %for.body108, label %for.end181

for.body108:                                      ; preds = %for.cond106
  %143 = load i32, i32* %i, align 4
  %arrayidx109 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %143
  %144 = load i32, i32* %arrayidx109, align 4
  %145 = load i32, i32* %a, align 4
  %add110 = add i32 %145, %144
  store i32 %add110, i32* %a, align 4
  %146 = load i32, i32* %i, align 4
  %add111 = add nsw i32 %146, 1
  %arrayidx112 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add111
  %147 = load i32, i32* %arrayidx112, align 4
  %148 = load i32, i32* %b, align 4
  %add113 = add i32 %148, %147
  store i32 %add113, i32* %b, align 4
  %149 = load i32, i32* %i, align 4
  %add114 = add nsw i32 %149, 2
  %arrayidx115 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add114
  %150 = load i32, i32* %arrayidx115, align 4
  %151 = load i32, i32* %c, align 4
  %add116 = add i32 %151, %150
  store i32 %add116, i32* %c, align 4
  %152 = load i32, i32* %i, align 4
  %add117 = add nsw i32 %152, 3
  %arrayidx118 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add117
  %153 = load i32, i32* %arrayidx118, align 4
  %154 = load i32, i32* %d, align 4
  %add119 = add i32 %154, %153
  store i32 %add119, i32* %d, align 4
  %155 = load i32, i32* %i, align 4
  %add120 = add nsw i32 %155, 4
  %arrayidx121 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add120
  %156 = load i32, i32* %arrayidx121, align 4
  %157 = load i32, i32* %e, align 4
  %add122 = add i32 %157, %156
  store i32 %add122, i32* %e, align 4
  %158 = load i32, i32* %i, align 4
  %add123 = add nsw i32 %158, 5
  %arrayidx124 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add123
  %159 = load i32, i32* %arrayidx124, align 4
  %160 = load i32, i32* %f, align 4
  %add125 = add i32 %160, %159
  store i32 %add125, i32* %f, align 4
  %161 = load i32, i32* %i, align 4
  %add126 = add nsw i32 %161, 6
  %arrayidx127 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add126
  %162 = load i32, i32* %arrayidx127, align 4
  %163 = load i32, i32* %g, align 4
  %add128 = add i32 %163, %162
  store i32 %add128, i32* %g, align 4
  %164 = load i32, i32* %i, align 4
  %add129 = add nsw i32 %164, 7
  %arrayidx130 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add129
  %165 = load i32, i32* %arrayidx130, align 4
  %166 = load i32, i32* %h, align 4
  %add131 = add i32 %166, %165
  store i32 %add131, i32* %h, align 4
  %167 = load i32, i32* %b, align 4
  %shl132 = shl i32 %167, 11
  %168 = load i32, i32* %a, align 4
  %xor133 = xor i32 %168, %shl132
  store i32 %xor133, i32* %a, align 4
  %169 = load i32, i32* %a, align 4
  %170 = load i32, i32* %d, align 4
  %add134 = add i32 %170, %169
  store i32 %add134, i32* %d, align 4
  %171 = load i32, i32* %c, align 4
  %172 = load i32, i32* %b, align 4
  %add135 = add i32 %172, %171
  store i32 %add135, i32* %b, align 4
  %173 = load i32, i32* %c, align 4
  %shr136 = lshr i32 %173, 2
  %174 = load i32, i32* %b, align 4
  %xor137 = xor i32 %174, %shr136
  store i32 %xor137, i32* %b, align 4
  %175 = load i32, i32* %b, align 4
  %176 = load i32, i32* %e, align 4
  %add138 = add i32 %176, %175
  store i32 %add138, i32* %e, align 4
  %177 = load i32, i32* %d, align 4
  %178 = load i32, i32* %c, align 4
  %add139 = add i32 %178, %177
  store i32 %add139, i32* %c, align 4
  %179 = load i32, i32* %d, align 4
  %shl140 = shl i32 %179, 8
  %180 = load i32, i32* %c, align 4
  %xor141 = xor i32 %180, %shl140
  store i32 %xor141, i32* %c, align 4
  %181 = load i32, i32* %c, align 4
  %182 = load i32, i32* %f, align 4
  %add142 = add i32 %182, %181
  store i32 %add142, i32* %f, align 4
  %183 = load i32, i32* %e, align 4
  %184 = load i32, i32* %d, align 4
  %add143 = add i32 %184, %183
  store i32 %add143, i32* %d, align 4
  %185 = load i32, i32* %e, align 4
  %shr144 = lshr i32 %185, 16
  %186 = load i32, i32* %d, align 4
  %xor145 = xor i32 %186, %shr144
  store i32 %xor145, i32* %d, align 4
  %187 = load i32, i32* %d, align 4
  %188 = load i32, i32* %g, align 4
  %add146 = add i32 %188, %187
  store i32 %add146, i32* %g, align 4
  %189 = load i32, i32* %f, align 4
  %190 = load i32, i32* %e, align 4
  %add147 = add i32 %190, %189
  store i32 %add147, i32* %e, align 4
  %191 = load i32, i32* %f, align 4
  %shl148 = shl i32 %191, 10
  %192 = load i32, i32* %e, align 4
  %xor149 = xor i32 %192, %shl148
  store i32 %xor149, i32* %e, align 4
  %193 = load i32, i32* %e, align 4
  %194 = load i32, i32* %h, align 4
  %add150 = add i32 %194, %193
  store i32 %add150, i32* %h, align 4
  %195 = load i32, i32* %g, align 4
  %196 = load i32, i32* %f, align 4
  %add151 = add i32 %196, %195
  store i32 %add151, i32* %f, align 4
  %197 = load i32, i32* %g, align 4
  %shr152 = lshr i32 %197, 4
  %198 = load i32, i32* %f, align 4
  %xor153 = xor i32 %198, %shr152
  store i32 %xor153, i32* %f, align 4
  %199 = load i32, i32* %f, align 4
  %200 = load i32, i32* %a, align 4
  %add154 = add i32 %200, %199
  store i32 %add154, i32* %a, align 4
  %201 = load i32, i32* %h, align 4
  %202 = load i32, i32* %g, align 4
  %add155 = add i32 %202, %201
  store i32 %add155, i32* %g, align 4
  %203 = load i32, i32* %h, align 4
  %shl156 = shl i32 %203, 8
  %204 = load i32, i32* %g, align 4
  %xor157 = xor i32 %204, %shl156
  store i32 %xor157, i32* %g, align 4
  %205 = load i32, i32* %g, align 4
  %206 = load i32, i32* %b, align 4
  %add158 = add i32 %206, %205
  store i32 %add158, i32* %b, align 4
  %207 = load i32, i32* %a, align 4
  %208 = load i32, i32* %h, align 4
  %add159 = add i32 %208, %207
  store i32 %add159, i32* %h, align 4
  %209 = load i32, i32* %a, align 4
  %shr160 = lshr i32 %209, 9
  %210 = load i32, i32* %h, align 4
  %xor161 = xor i32 %210, %shr160
  store i32 %xor161, i32* %h, align 4
  %211 = load i32, i32* %h, align 4
  %212 = load i32, i32* %c, align 4
  %add162 = add i32 %212, %211
  store i32 %add162, i32* %c, align 4
  %213 = load i32, i32* %b, align 4
  %214 = load i32, i32* %a, align 4
  %add163 = add i32 %214, %213
  store i32 %add163, i32* %a, align 4
  %215 = load i32, i32* %a, align 4
  %216 = load i32, i32* %i, align 4
  %arrayidx164 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %216
  store i32 %215, i32* %arrayidx164, align 4
  %217 = load i32, i32* %b, align 4
  %218 = load i32, i32* %i, align 4
  %add165 = add nsw i32 %218, 1
  %arrayidx166 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add165
  store i32 %217, i32* %arrayidx166, align 4
  %219 = load i32, i32* %c, align 4
  %220 = load i32, i32* %i, align 4
  %add167 = add nsw i32 %220, 2
  %arrayidx168 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add167
  store i32 %219, i32* %arrayidx168, align 4
  %221 = load i32, i32* %d, align 4
  %222 = load i32, i32* %i, align 4
  %add169 = add nsw i32 %222, 3
  %arrayidx170 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add169
  store i32 %221, i32* %arrayidx170, align 4
  %223 = load i32, i32* %e, align 4
  %224 = load i32, i32* %i, align 4
  %add171 = add nsw i32 %224, 4
  %arrayidx172 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add171
  store i32 %223, i32* %arrayidx172, align 4
  %225 = load i32, i32* %f, align 4
  %226 = load i32, i32* %i, align 4
  %add173 = add nsw i32 %226, 5
  %arrayidx174 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add173
  store i32 %225, i32* %arrayidx174, align 4
  %227 = load i32, i32* %g, align 4
  %228 = load i32, i32* %i, align 4
  %add175 = add nsw i32 %228, 6
  %arrayidx176 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add175
  store i32 %227, i32* %arrayidx176, align 4
  %229 = load i32, i32* %h, align 4
  %230 = load i32, i32* %i, align 4
  %add177 = add nsw i32 %230, 7
  %arrayidx178 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add177
  store i32 %229, i32* %arrayidx178, align 4
  br label %for.inc179

for.inc179:                                       ; preds = %for.body108
  %231 = load i32, i32* %i, align 4
  %add180 = add nsw i32 %231, 8
  store i32 %add180, i32* %i, align 4
  br label %for.cond106

for.end181:                                       ; preds = %for.cond106
  br label %if.end182

if.end182:                                        ; preds = %for.end181, %for.end103
  call void @isaac()
  store i32 0, i32* @randcnt, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @iRandom() #0 {
entry:
  %r = alloca i32, align 4
  %0 = load i32, i32* @randcnt, align 4
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %0
  %1 = load i32, i32* %arrayidx, align 4
  store i32 %1, i32* %r, align 4
  %2 = load i32, i32* @randcnt, align 4
  %inc = add i32 %2, 1
  store i32 %inc, i32* @randcnt, align 4
  %3 = load i32, i32* @randcnt, align 4
  %cmp = icmp ugt i32 %3, 255
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @isaac()
  store i32 0, i32* @randcnt, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* %r, align 4
  ret i32 %4
}

; Function Attrs: noinline nounwind optnone
define hidden signext i8 @iRandA() #0 {
entry:
  %call = call i32 @iRandom()
  %rem = urem i32 %call, 95
  %add = add i32 %rem, 32
  %conv = trunc i32 %add to i8
  ret i8 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden void @iSeed(i8* %seed, i32 %flag) #0 {
entry:
  %seed.addr = alloca i8*, align 4
  %flag.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %m = alloca i32, align 4
  store i8* %seed, i8** %seed.addr, align 4
  store i32 %flag, i32* %flag.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %0, 256
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %1
  store i32 0, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %i, align 4
  %inc = add i32 %2, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %3 = load i8*, i8** %seed.addr, align 4
  %call = call i32 @strlen(i8* %3) #4
  store i32 %call, i32* %m, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc8, %for.end
  %4 = load i32, i32* %i, align 4
  %cmp2 = icmp ult i32 %4, 256
  br i1 %cmp2, label %for.body3, label %for.end10

for.body3:                                        ; preds = %for.cond1
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %m, align 4
  %cmp4 = icmp ugt i32 %5, %6
  br i1 %cmp4, label %if.then, label %if.else

if.then:                                          ; preds = %for.body3
  %7 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %7
  store i32 0, i32* %arrayidx5, align 4
  br label %if.end

if.else:                                          ; preds = %for.body3
  %8 = load i8*, i8** %seed.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds i8, i8* %8, i32 %9
  %10 = load i8, i8* %arrayidx6, align 1
  %conv = sext i8 %10 to i32
  %11 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %11
  store i32 %conv, i32* %arrayidx7, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc8

for.inc8:                                         ; preds = %if.end
  %12 = load i32, i32* %i, align 4
  %inc9 = add i32 %12, 1
  store i32 %inc9, i32* %i, align 4
  br label %for.cond1

for.end10:                                        ; preds = %for.cond1
  %13 = load i32, i32* %flag.addr, align 4
  call void @randinit(i32 %13)
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i8* @Vernam(i8* %msg) #0 {
entry:
  %msg.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %l = alloca i32, align 4
  store i8* %msg, i8** %msg.addr, align 4
  %0 = load i8*, i8** %msg.addr, align 4
  %call = call i32 @strlen(i8* %0) #4
  store i32 %call, i32* %l, align 4
  %1 = load i32, i32* %l, align 4
  %add = add i32 %1, 1
  call void @llvm.memset.p0i8.i32(i8* align 16 getelementptr inbounds ([4096 x i8], [4096 x i8]* @v, i32 0, i32 0), i8 0, i32 %add, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %l, align 4
  %cmp = icmp ult i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call1 = call signext i8 @iRandA()
  %conv = sext i8 %call1 to i32
  %4 = load i8*, i8** %msg.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %4, i32 %5
  %6 = load i8, i8* %arrayidx, align 1
  %conv2 = sext i8 %6 to i32
  %xor = xor i32 %conv, %conv2
  %conv3 = trunc i32 %xor to i8
  %7 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds [4096 x i8], [4096 x i8]* @v, i32 0, i32 %7
  store i8 %conv3, i8* %arrayidx4, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %inc = add i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i8* getelementptr inbounds ([4096 x i8], [4096 x i8]* @v, i32 0, i32 0)
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define hidden signext i8 @Caesar(i32 %m, i8 signext %ch, i8 signext %shift, i8 signext %modulo, i8 signext %start) #0 {
entry:
  %m.addr = alloca i32, align 4
  %ch.addr = alloca i8, align 1
  %shift.addr = alloca i8, align 1
  %modulo.addr = alloca i8, align 1
  %start.addr = alloca i8, align 1
  %n = alloca i32, align 4
  store i32 %m, i32* %m.addr, align 4
  store i8 %ch, i8* %ch.addr, align 1
  store i8 %shift, i8* %shift.addr, align 1
  store i8 %modulo, i8* %modulo.addr, align 1
  store i8 %start, i8* %start.addr, align 1
  %0 = load i32, i32* %m.addr, align 4
  %cmp = icmp eq i32 %0, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i8, i8* %shift.addr, align 1
  %conv = sext i8 %1 to i32
  %sub = sub nsw i32 0, %conv
  %conv1 = trunc i32 %sub to i8
  store i8 %conv1, i8* %shift.addr, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i8, i8* %ch.addr, align 1
  %conv2 = sext i8 %2 to i32
  %3 = load i8, i8* %start.addr, align 1
  %conv3 = sext i8 %3 to i32
  %sub4 = sub nsw i32 %conv2, %conv3
  %4 = load i8, i8* %shift.addr, align 1
  %conv5 = sext i8 %4 to i32
  %add = add nsw i32 %sub4, %conv5
  store i32 %add, i32* %n, align 4
  %5 = load i32, i32* %n, align 4
  %6 = load i8, i8* %modulo.addr, align 1
  %conv6 = sext i8 %6 to i32
  %rem = srem i32 %5, %conv6
  store i32 %rem, i32* %n, align 4
  %7 = load i32, i32* %n, align 4
  %cmp7 = icmp slt i32 %7, 0
  br i1 %cmp7, label %if.then9, label %if.end12

if.then9:                                         ; preds = %if.end
  %8 = load i8, i8* %modulo.addr, align 1
  %conv10 = sext i8 %8 to i32
  %9 = load i32, i32* %n, align 4
  %add11 = add nsw i32 %9, %conv10
  store i32 %add11, i32* %n, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then9, %if.end
  %10 = load i8, i8* %start.addr, align 1
  %conv13 = sext i8 %10 to i32
  %11 = load i32, i32* %n, align 4
  %add14 = add nsw i32 %conv13, %11
  %conv15 = trunc i32 %add14 to i8
  ret i8 %conv15
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @CaesarStr(i32 %m, i8* %msg, i8 signext %modulo, i8 signext %start) #0 {
entry:
  %m.addr = alloca i32, align 4
  %msg.addr = alloca i8*, align 4
  %modulo.addr = alloca i8, align 1
  %start.addr = alloca i8, align 1
  %i = alloca i32, align 4
  %l = alloca i32, align 4
  store i32 %m, i32* %m.addr, align 4
  store i8* %msg, i8** %msg.addr, align 4
  store i8 %modulo, i8* %modulo.addr, align 1
  store i8 %start, i8* %start.addr, align 1
  %0 = load i8*, i8** %msg.addr, align 4
  %call = call i32 @strlen(i8* %0) #4
  store i32 %call, i32* %l, align 4
  %1 = load i32, i32* %l, align 4
  %add = add i32 %1, 1
  call void @llvm.memset.p0i8.i32(i8* align 16 getelementptr inbounds ([4096 x i8], [4096 x i8]* @c, i32 0, i32 0), i8 0, i32 %add, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %l, align 4
  %cmp = icmp ult i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %m.addr, align 4
  %5 = load i8*, i8** %msg.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %5, i32 %6
  %7 = load i8, i8* %arrayidx, align 1
  %call1 = call signext i8 @iRandA()
  %8 = load i8, i8* %modulo.addr, align 1
  %9 = load i8, i8* %start.addr, align 1
  %call2 = call signext i8 @Caesar(i32 %4, i8 signext %7, i8 signext %call1, i8 signext %8, i8 signext %9)
  %10 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds [4096 x i8], [4096 x i8]* @c, i32 0, i32 %10
  store i8 %call2, i8* %arrayidx3, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i8* getelementptr inbounds ([4096 x i8], [4096 x i8]* @c, i32 0, i32 0)
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %n = alloca i32, align 4
  %l = alloca i32, align 4
  %msg = alloca i8*, align 4
  %key = alloca i8*, align 4
  %vctx = alloca [4096 x i8], align 16
  %vptx = alloca [4096 x i8], align 16
  %cctx = alloca [4096 x i8], align 16
  %cptx = alloca [4096 x i8], align 16
  store i32 0, i32* %retval, align 4
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i32 0, i32 0), i8** %msg, align 4
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i32 0, i32 0), i8** %key, align 4
  %0 = load i8*, i8** %msg, align 4
  %call = call i32 @strlen(i8* %0) #4
  store i32 %call, i32* %l, align 4
  %1 = load i8*, i8** %key, align 4
  call void @iSeed(i8* %1, i32 1)
  %arraydecay = getelementptr inbounds [4096 x i8], [4096 x i8]* %vctx, i32 0, i32 0
  %2 = load i8*, i8** %msg, align 4
  %call1 = call i8* @Vernam(i8* %2)
  %call2 = call i8* @strcpy(i8* %arraydecay, i8* %call1)
  %arraydecay3 = getelementptr inbounds [4096 x i8], [4096 x i8]* %cctx, i32 0, i32 0
  %3 = load i8*, i8** %msg, align 4
  %call4 = call i8* @CaesarStr(i32 0, i8* %3, i8 signext 95, i8 signext 32)
  %call5 = call i8* @strcpy(i8* %arraydecay3, i8* %call4)
  %4 = load i8*, i8** %key, align 4
  call void @iSeed(i8* %4, i32 1)
  %arraydecay6 = getelementptr inbounds [4096 x i8], [4096 x i8]* %vptx, i32 0, i32 0
  %arraydecay7 = getelementptr inbounds [4096 x i8], [4096 x i8]* %vctx, i32 0, i32 0
  %call8 = call i8* @Vernam(i8* %arraydecay7)
  %call9 = call i8* @strcpy(i8* %arraydecay6, i8* %call8)
  %arraydecay10 = getelementptr inbounds [4096 x i8], [4096 x i8]* %cptx, i32 0, i32 0
  %arraydecay11 = getelementptr inbounds [4096 x i8], [4096 x i8]* %cctx, i32 0, i32 0
  %call12 = call i8* @CaesarStr(i32 1, i8* %arraydecay11, i8 signext 95, i8 signext 32)
  %call13 = call i8* @strcpy(i8* %arraydecay10, i8* %call12)
  %5 = load i8*, i8** %msg, align 4
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i32 0, i32 0), i8* %5)
  %6 = load i8*, i8** %key, align 4
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3, i32 0, i32 0), i8* %6)
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i32 0, i32 0))
  store i32 0, i32* %n, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %7 = load i32, i32* %n, align 4
  %8 = load i32, i32* %l, align 4
  %cmp = icmp ult i32 %7, %8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i32, i32* %n, align 4
  %arrayidx = getelementptr inbounds [4096 x i8], [4096 x i8]* %vctx, i32 0, i32 %9
  %10 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %10 to i32
  %call17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i32 %conv)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %n, align 4
  %inc = add i32 %11, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i32 0, i32 0))
  %arraydecay19 = getelementptr inbounds [4096 x i8], [4096 x i8]* %vptx, i32 0, i32 0
  %call20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7, i32 0, i32 0), i8* %arraydecay19)
  %call21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8, i32 0, i32 0))
  store i32 0, i32* %n, align 4
  br label %for.cond22

for.cond22:                                       ; preds = %for.inc29, %for.end
  %12 = load i32, i32* %n, align 4
  %13 = load i32, i32* %l, align 4
  %cmp23 = icmp ult i32 %12, %13
  br i1 %cmp23, label %for.body25, label %for.end31

for.body25:                                       ; preds = %for.cond22
  %14 = load i32, i32* %n, align 4
  %arrayidx26 = getelementptr inbounds [4096 x i8], [4096 x i8]* %cctx, i32 0, i32 %14
  %15 = load i8, i8* %arrayidx26, align 1
  %conv27 = sext i8 %15 to i32
  %call28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i32 %conv27)
  br label %for.inc29

for.inc29:                                        ; preds = %for.body25
  %16 = load i32, i32* %n, align 4
  %inc30 = add i32 %16, 1
  store i32 %inc30, i32* %n, align 4
  br label %for.cond22

for.end31:                                        ; preds = %for.cond22
  %call32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i32 0, i32 0))
  %arraydecay33 = getelementptr inbounds [4096 x i8], [4096 x i8]* %cptx, i32 0, i32 0
  %call34 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.9, i32 0, i32 0), i8* %arraydecay33)
  ret i32 0
}

declare i8* @strcpy(i8* %0, i8* %1) #3

declare i32 @printf(i8* %0, ...) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn writeonly }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 @strlen(i8* %0) #4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %l, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add i32 %1, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %l, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ult i32 %2, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %m.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i8, i8* %arrayidx, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %call1 = call signext i8 @iRandA()
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i8, i8* %modulo.addr, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i8, i8* %start.addr, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %call2 = call signext i8 @Caesar(i32 %4, i8 signext %7, i8 signext %call1, i8 signext %8, i8 signext %9)
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add i32 %11, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for CaesarStr()

; entering Souper's runOnFunction() for main()

; ModuleID = './The_ISAAC_Cipher.c.bc'
source_filename = "./The_ISAAC_Cipher.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@cc = internal global i32 0, align 4
@bb = internal global i32 0, align 4
@mm = internal global [256 x i32] zeroinitializer, align 16
@aa = internal global i32 0, align 4
@randrsl = hidden global [256 x i32] zeroinitializer, align 16
@randcnt = hidden global i32 0, align 4
@v = hidden global [4096 x i8] zeroinitializer, align 16
@c = hidden global [4096 x i8] zeroinitializer, align 16
@.str = private unnamed_addr constant [20 x i8] c"a Top Secret secret\00", align 1
@.str.1 = private unnamed_addr constant [22 x i8] c"this is my secret key\00", align 1
@.str.2 = private unnamed_addr constant [13 x i8] c"Message: %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [13 x i8] c"Key    : %s\0A\00", align 1
@.str.4 = private unnamed_addr constant [10 x i8] c"XOR    : \00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"%02X\00", align 1
@.str.6 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.7 = private unnamed_addr constant [13 x i8] c"XOR dcr: %s\0A\00", align 1
@.str.8 = private unnamed_addr constant [10 x i8] c"MOD    : \00", align 1
@.str.9 = private unnamed_addr constant [13 x i8] c"MOD dcr: %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @isaac() #0 {
entry:
  %i = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %0 = load i32, i32* @cc, align 4
  %add = add i32 %0, 1
  store i32 %add, i32* @cc, align 4
  %1 = load i32, i32* @bb, align 4
  %2 = load i32, i32* @cc, align 4
  %add1 = add i32 %1, %2
  store i32 %add1, i32* @bb, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %3, 256
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  store i32 %5, i32* %x, align 4
  %6 = load i32, i32* %i, align 4
  %rem = urem i32 %6, 4
  switch i32 %rem, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb2
    i32 2, label %sw.bb4
    i32 3, label %sw.bb7
  ]

sw.bb:                                            ; preds = %for.body
  %7 = load i32, i32* @aa, align 4
  %8 = load i32, i32* @aa, align 4
  %shl = shl i32 %8, 13
  %xor = xor i32 %7, %shl
  store i32 %xor, i32* @aa, align 4
  br label %sw.epilog

sw.bb2:                                           ; preds = %for.body
  %9 = load i32, i32* @aa, align 4
  %10 = load i32, i32* @aa, align 4
  %shr = lshr i32 %10, 6
  %xor3 = xor i32 %9, %shr
  store i32 %xor3, i32* @aa, align 4
  br label %sw.epilog

sw.bb4:                                           ; preds = %for.body
  %11 = load i32, i32* @aa, align 4
  %12 = load i32, i32* @aa, align 4
  %shl5 = shl i32 %12, 2
  %xor6 = xor i32 %11, %shl5
  store i32 %xor6, i32* @aa, align 4
  br label %sw.epilog

sw.bb7:                                           ; preds = %for.body
  %13 = load i32, i32* @aa, align 4
  %14 = load i32, i32* @aa, align 4
  %shr8 = lshr i32 %14, 16
  %xor9 = xor i32 %13, %shr8
  store i32 %xor9, i32* @aa, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %for.body, %sw.bb7, %sw.bb4, %sw.bb2, %sw.bb
  %15 = load i32, i32* %i, align 4
  %add10 = add i32 %15, 128
  %rem11 = urem i32 %add10, 256
  %arrayidx12 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %rem11
  %16 = load i32, i32* %arrayidx12, align 4
  %17 = load i32, i32* @aa, align 4
  %add13 = add i32 %16, %17
  store i32 %add13, i32* @aa, align 4
  %18 = load i32, i32* %x, align 4
  %shr14 = lshr i32 %18, 2
  %rem15 = urem i32 %shr14, 256
  %arrayidx16 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %rem15
  %19 = load i32, i32* %arrayidx16, align 4
  %20 = load i32, i32* @aa, align 4
  %add17 = add i32 %19, %20
  %21 = load i32, i32* @bb, align 4
  %add18 = add i32 %add17, %21
  store i32 %add18, i32* %y, align 4
  %22 = load i32, i32* %i, align 4
  %arrayidx19 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %22
  store i32 %add18, i32* %arrayidx19, align 4
  %23 = load i32, i32* %y, align 4
  %shr20 = lshr i32 %23, 10
  %rem21 = urem i32 %shr20, 256
  %arrayidx22 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %rem21
  %24 = load i32, i32* %arrayidx22, align 4
  %25 = load i32, i32* %x, align 4
  %add23 = add i32 %24, %25
  store i32 %add23, i32* @bb, align 4
  %26 = load i32, i32* %i, align 4
  %arrayidx24 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %26
  store i32 %add23, i32* %arrayidx24, align 4
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %27 = load i32, i32* %i, align 4
  %inc = add i32 %27, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* @randcnt, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @randinit(i32 %flag) #0 {
entry:
  %flag.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %c = alloca i32, align 4
  %d = alloca i32, align 4
  %e = alloca i32, align 4
  %f = alloca i32, align 4
  %g = alloca i32, align 4
  %h = alloca i32, align 4
  store i32 %flag, i32* %flag.addr, align 4
  store i32 0, i32* @cc, align 4
  store i32 0, i32* @bb, align 4
  store i32 0, i32* @aa, align 4
  store i32 -1640531527, i32* %h, align 4
  store i32 -1640531527, i32* %g, align 4
  store i32 -1640531527, i32* %f, align 4
  store i32 -1640531527, i32* %e, align 4
  store i32 -1640531527, i32* %d, align 4
  store i32 -1640531527, i32* %c, align 4
  store i32 -1640531527, i32* %b, align 4
  store i32 -1640531527, i32* %a, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %b, align 4
  %shl = shl i32 %1, 11
  %2 = load i32, i32* %a, align 4
  %xor = xor i32 %2, %shl
  store i32 %xor, i32* %a, align 4
  %3 = load i32, i32* %a, align 4
  %4 = load i32, i32* %d, align 4
  %add = add i32 %4, %3
  store i32 %add, i32* %d, align 4
  %5 = load i32, i32* %c, align 4
  %6 = load i32, i32* %b, align 4
  %add1 = add i32 %6, %5
  store i32 %add1, i32* %b, align 4
  %7 = load i32, i32* %c, align 4
  %shr = lshr i32 %7, 2
  %8 = load i32, i32* %b, align 4
  %xor2 = xor i32 %8, %shr
  store i32 %xor2, i32* %b, align 4
  %9 = load i32, i32* %b, align 4
  %10 = load i32, i32* %e, align 4
  %add3 = add i32 %10, %9
  store i32 %add3, i32* %e, align 4
  %11 = load i32, i32* %d, align 4
  %12 = load i32, i32* %c, align 4
  %add4 = add i32 %12, %11
  store i32 %add4, i32* %c, align 4
  %13 = load i32, i32* %d, align 4
  %shl5 = shl i32 %13, 8
  %14 = load i32, i32* %c, align 4
  %xor6 = xor i32 %14, %shl5
  store i32 %xor6, i32* %c, align 4
  %15 = load i32, i32* %c, align 4
  %16 = load i32, i32* %f, align 4
  %add7 = add i32 %16, %15
  store i32 %add7, i32* %f, align 4
  %17 = load i32, i32* %e, align 4
  %18 = load i32, i32* %d, align 4
  %add8 = add i32 %18, %17
  store i32 %add8, i32* %d, align 4
  %19 = load i32, i32* %e, align 4
  %shr9 = lshr i32 %19, 16
  %20 = load i32, i32* %d, align 4
  %xor10 = xor i32 %20, %shr9
  store i32 %xor10, i32* %d, align 4
  %21 = load i32, i32* %d, align 4
  %22 = load i32, i32* %g, align 4
  %add11 = add i32 %22, %21
  store i32 %add11, i32* %g, align 4
  %23 = load i32, i32* %f, align 4
  %24 = load i32, i32* %e, align 4
  %add12 = add i32 %24, %23
  store i32 %add12, i32* %e, align 4
  %25 = load i32, i32* %f, align 4
  %shl13 = shl i32 %25, 10
  %26 = load i32, i32* %e, align 4
  %xor14 = xor i32 %26, %shl13
  store i32 %xor14, i32* %e, align 4
  %27 = load i32, i32* %e, align 4
  %28 = load i32, i32* %h, align 4
  %add15 = add i32 %28, %27
  store i32 %add15, i32* %h, align 4
  %29 = load i32, i32* %g, align 4
  %30 = load i32, i32* %f, align 4
  %add16 = add i32 %30, %29
  store i32 %add16, i32* %f, align 4
  %31 = load i32, i32* %g, align 4
  %shr17 = lshr i32 %31, 4
  %32 = load i32, i32* %f, align 4
  %xor18 = xor i32 %32, %shr17
  store i32 %xor18, i32* %f, align 4
  %33 = load i32, i32* %f, align 4
  %34 = load i32, i32* %a, align 4
  %add19 = add i32 %34, %33
  store i32 %add19, i32* %a, align 4
  %35 = load i32, i32* %h, align 4
  %36 = load i32, i32* %g, align 4
  %add20 = add i32 %36, %35
  store i32 %add20, i32* %g, align 4
  %37 = load i32, i32* %h, align 4
  %shl21 = shl i32 %37, 8
  %38 = load i32, i32* %g, align 4
  %xor22 = xor i32 %38, %shl21
  store i32 %xor22, i32* %g, align 4
  %39 = load i32, i32* %g, align 4
  %40 = load i32, i32* %b, align 4
  %add23 = add i32 %40, %39
  store i32 %add23, i32* %b, align 4
  %41 = load i32, i32* %a, align 4
  %42 = load i32, i32* %h, align 4
  %add24 = add i32 %42, %41
  store i32 %add24, i32* %h, align 4
  %43 = load i32, i32* %a, align 4
  %shr25 = lshr i32 %43, 9
  %44 = load i32, i32* %h, align 4
  %xor26 = xor i32 %44, %shr25
  store i32 %xor26, i32* %h, align 4
  %45 = load i32, i32* %h, align 4
  %46 = load i32, i32* %c, align 4
  %add27 = add i32 %46, %45
  store i32 %add27, i32* %c, align 4
  %47 = load i32, i32* %b, align 4
  %48 = load i32, i32* %a, align 4
  %add28 = add i32 %48, %47
  store i32 %add28, i32* %a, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %49 = load i32, i32* %i, align 4
  %inc = add nsw i32 %49, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond29

for.cond29:                                       ; preds = %for.inc101, %for.end
  %50 = load i32, i32* %i, align 4
  %cmp30 = icmp slt i32 %50, 256
  br i1 %cmp30, label %for.body31, label %for.end103

for.body31:                                       ; preds = %for.cond29
  %51 = load i32, i32* %flag.addr, align 4
  %tobool = icmp ne i32 %51, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body31
  %52 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %52
  %53 = load i32, i32* %arrayidx, align 4
  %54 = load i32, i32* %a, align 4
  %add32 = add i32 %54, %53
  store i32 %add32, i32* %a, align 4
  %55 = load i32, i32* %i, align 4
  %add33 = add nsw i32 %55, 1
  %arrayidx34 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %add33
  %56 = load i32, i32* %arrayidx34, align 4
  %57 = load i32, i32* %b, align 4
  %add35 = add i32 %57, %56
  store i32 %add35, i32* %b, align 4
  %58 = load i32, i32* %i, align 4
  %add36 = add nsw i32 %58, 2
  %arrayidx37 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %add36
  %59 = load i32, i32* %arrayidx37, align 4
  %60 = load i32, i32* %c, align 4
  %add38 = add i32 %60, %59
  store i32 %add38, i32* %c, align 4
  %61 = load i32, i32* %i, align 4
  %add39 = add nsw i32 %61, 3
  %arrayidx40 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %add39
  %62 = load i32, i32* %arrayidx40, align 4
  %63 = load i32, i32* %d, align 4
  %add41 = add i32 %63, %62
  store i32 %add41, i32* %d, align 4
  %64 = load i32, i32* %i, align 4
  %add42 = add nsw i32 %64, 4
  %arrayidx43 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %add42
  %65 = load i32, i32* %arrayidx43, align 4
  %66 = load i32, i32* %e, align 4
  %add44 = add i32 %66, %65
  store i32 %add44, i32* %e, align 4
  %67 = load i32, i32* %i, align 4
  %add45 = add nsw i32 %67, 5
  %arrayidx46 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %add45
  %68 = load i32, i32* %arrayidx46, align 4
  %69 = load i32, i32* %f, align 4
  %add47 = add i32 %69, %68
  store i32 %add47, i32* %f, align 4
  %70 = load i32, i32* %i, align 4
  %add48 = add nsw i32 %70, 6
  %arrayidx49 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %add48
  %71 = load i32, i32* %arrayidx49, align 4
  %72 = load i32, i32* %g, align 4
  %add50 = add i32 %72, %71
  store i32 %add50, i32* %g, align 4
  %73 = load i32, i32* %i, align 4
  %add51 = add nsw i32 %73, 7
  %arrayidx52 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %add51
  %74 = load i32, i32* %arrayidx52, align 4
  %75 = load i32, i32* %h, align 4
  %add53 = add i32 %75, %74
  store i32 %add53, i32* %h, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body31
  %76 = load i32, i32* %b, align 4
  %shl54 = shl i32 %76, 11
  %77 = load i32, i32* %a, align 4
  %xor55 = xor i32 %77, %shl54
  store i32 %xor55, i32* %a, align 4
  %78 = load i32, i32* %a, align 4
  %79 = load i32, i32* %d, align 4
  %add56 = add i32 %79, %78
  store i32 %add56, i32* %d, align 4
  %80 = load i32, i32* %c, align 4
  %81 = load i32, i32* %b, align 4
  %add57 = add i32 %81, %80
  store i32 %add57, i32* %b, align 4
  %82 = load i32, i32* %c, align 4
  %shr58 = lshr i32 %82, 2
  %83 = load i32, i32* %b, align 4
  %xor59 = xor i32 %83, %shr58
  store i32 %xor59, i32* %b, align 4
  %84 = load i32, i32* %b, align 4
  %85 = load i32, i32* %e, align 4
  %add60 = add i32 %85, %84
  store i32 %add60, i32* %e, align 4
  %86 = load i32, i32* %d, align 4
  %87 = load i32, i32* %c, align 4
  %add61 = add i32 %87, %86
  store i32 %add61, i32* %c, align 4
  %88 = load i32, i32* %d, align 4
  %shl62 = shl i32 %88, 8
  %89 = load i32, i32* %c, align 4
  %xor63 = xor i32 %89, %shl62
  store i32 %xor63, i32* %c, align 4
  %90 = load i32, i32* %c, align 4
  %91 = load i32, i32* %f, align 4
  %add64 = add i32 %91, %90
  store i32 %add64, i32* %f, align 4
  %92 = load i32, i32* %e, align 4
  %93 = load i32, i32* %d, align 4
  %add65 = add i32 %93, %92
  store i32 %add65, i32* %d, align 4
  %94 = load i32, i32* %e, align 4
  %shr66 = lshr i32 %94, 16
  %95 = load i32, i32* %d, align 4
  %xor67 = xor i32 %95, %shr66
  store i32 %xor67, i32* %d, align 4
  %96 = load i32, i32* %d, align 4
  %97 = load i32, i32* %g, align 4
  %add68 = add i32 %97, %96
  store i32 %add68, i32* %g, align 4
  %98 = load i32, i32* %f, align 4
  %99 = load i32, i32* %e, align 4
  %add69 = add i32 %99, %98
  store i32 %add69, i32* %e, align 4
  %100 = load i32, i32* %f, align 4
  %shl70 = shl i32 %100, 10
  %101 = load i32, i32* %e, align 4
  %xor71 = xor i32 %101, %shl70
  store i32 %xor71, i32* %e, align 4
  %102 = load i32, i32* %e, align 4
  %103 = load i32, i32* %h, align 4
  %add72 = add i32 %103, %102
  store i32 %add72, i32* %h, align 4
  %104 = load i32, i32* %g, align 4
  %105 = load i32, i32* %f, align 4
  %add73 = add i32 %105, %104
  store i32 %add73, i32* %f, align 4
  %106 = load i32, i32* %g, align 4
  %shr74 = lshr i32 %106, 4
  %107 = load i32, i32* %f, align 4
  %xor75 = xor i32 %107, %shr74
  store i32 %xor75, i32* %f, align 4
  %108 = load i32, i32* %f, align 4
  %109 = load i32, i32* %a, align 4
  %add76 = add i32 %109, %108
  store i32 %add76, i32* %a, align 4
  %110 = load i32, i32* %h, align 4
  %111 = load i32, i32* %g, align 4
  %add77 = add i32 %111, %110
  store i32 %add77, i32* %g, align 4
  %112 = load i32, i32* %h, align 4
  %shl78 = shl i32 %112, 8
  %113 = load i32, i32* %g, align 4
  %xor79 = xor i32 %113, %shl78
  store i32 %xor79, i32* %g, align 4
  %114 = load i32, i32* %g, align 4
  %115 = load i32, i32* %b, align 4
  %add80 = add i32 %115, %114
  store i32 %add80, i32* %b, align 4
  %116 = load i32, i32* %a, align 4
  %117 = load i32, i32* %h, align 4
  %add81 = add i32 %117, %116
  store i32 %add81, i32* %h, align 4
  %118 = load i32, i32* %a, align 4
  %shr82 = lshr i32 %118, 9
  %119 = load i32, i32* %h, align 4
  %xor83 = xor i32 %119, %shr82
  store i32 %xor83, i32* %h, align 4
  %120 = load i32, i32* %h, align 4
  %121 = load i32, i32* %c, align 4
  %add84 = add i32 %121, %120
  store i32 %add84, i32* %c, align 4
  %122 = load i32, i32* %b, align 4
  %123 = load i32, i32* %a, align 4
  %add85 = add i32 %123, %122
  store i32 %add85, i32* %a, align 4
  %124 = load i32, i32* %a, align 4
  %125 = load i32, i32* %i, align 4
  %arrayidx86 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %125
  store i32 %124, i32* %arrayidx86, align 4
  %126 = load i32, i32* %b, align 4
  %127 = load i32, i32* %i, align 4
  %add87 = add nsw i32 %127, 1
  %arrayidx88 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add87
  store i32 %126, i32* %arrayidx88, align 4
  %128 = load i32, i32* %c, align 4
  %129 = load i32, i32* %i, align 4
  %add89 = add nsw i32 %129, 2
  %arrayidx90 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add89
  store i32 %128, i32* %arrayidx90, align 4
  %130 = load i32, i32* %d, align 4
  %131 = load i32, i32* %i, align 4
  %add91 = add nsw i32 %131, 3
  %arrayidx92 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add91
  store i32 %130, i32* %arrayidx92, align 4
  %132 = load i32, i32* %e, align 4
  %133 = load i32, i32* %i, align 4
  %add93 = add nsw i32 %133, 4
  %arrayidx94 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add93
  store i32 %132, i32* %arrayidx94, align 4
  %134 = load i32, i32* %f, align 4
  %135 = load i32, i32* %i, align 4
  %add95 = add nsw i32 %135, 5
  %arrayidx96 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add95
  store i32 %134, i32* %arrayidx96, align 4
  %136 = load i32, i32* %g, align 4
  %137 = load i32, i32* %i, align 4
  %add97 = add nsw i32 %137, 6
  %arrayidx98 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add97
  store i32 %136, i32* %arrayidx98, align 4
  %138 = load i32, i32* %h, align 4
  %139 = load i32, i32* %i, align 4
  %add99 = add nsw i32 %139, 7
  %arrayidx100 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add99
  store i32 %138, i32* %arrayidx100, align 4
  br label %for.inc101

for.inc101:                                       ; preds = %if.end
  %140 = load i32, i32* %i, align 4
  %add102 = add nsw i32 %140, 8
  store i32 %add102, i32* %i, align 4
  br label %for.cond29

for.end103:                                       ; preds = %for.cond29
  %141 = load i32, i32* %flag.addr, align 4
  %tobool104 = icmp ne i32 %141, 0
  br i1 %tobool104, label %if.then105, label %if.end182

if.then105:                                       ; preds = %for.end103
  store i32 0, i32* %i, align 4
  br label %for.cond106

for.cond106:                                      ; preds = %for.inc179, %if.then105
  %142 = load i32, i32* %i, align 4
  %cmp107 = icmp slt i32 %142, 256
  br i1 %cmp107, label %for.body108, label %for.end181

for.body108:                                      ; preds = %for.cond106
  %143 = load i32, i32* %i, align 4
  %arrayidx109 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %143
  %144 = load i32, i32* %arrayidx109, align 4
  %145 = load i32, i32* %a, align 4
  %add110 = add i32 %145, %144
  store i32 %add110, i32* %a, align 4
  %146 = load i32, i32* %i, align 4
  %add111 = add nsw i32 %146, 1
  %arrayidx112 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add111
  %147 = load i32, i32* %arrayidx112, align 4
  %148 = load i32, i32* %b, align 4
  %add113 = add i32 %148, %147
  store i32 %add113, i32* %b, align 4
  %149 = load i32, i32* %i, align 4
  %add114 = add nsw i32 %149, 2
  %arrayidx115 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add114
  %150 = load i32, i32* %arrayidx115, align 4
  %151 = load i32, i32* %c, align 4
  %add116 = add i32 %151, %150
  store i32 %add116, i32* %c, align 4
  %152 = load i32, i32* %i, align 4
  %add117 = add nsw i32 %152, 3
  %arrayidx118 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add117
  %153 = load i32, i32* %arrayidx118, align 4
  %154 = load i32, i32* %d, align 4
  %add119 = add i32 %154, %153
  store i32 %add119, i32* %d, align 4
  %155 = load i32, i32* %i, align 4
  %add120 = add nsw i32 %155, 4
  %arrayidx121 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add120
  %156 = load i32, i32* %arrayidx121, align 4
  %157 = load i32, i32* %e, align 4
  %add122 = add i32 %157, %156
  store i32 %add122, i32* %e, align 4
  %158 = load i32, i32* %i, align 4
  %add123 = add nsw i32 %158, 5
  %arrayidx124 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add123
  %159 = load i32, i32* %arrayidx124, align 4
  %160 = load i32, i32* %f, align 4
  %add125 = add i32 %160, %159
  store i32 %add125, i32* %f, align 4
  %161 = load i32, i32* %i, align 4
  %add126 = add nsw i32 %161, 6
  %arrayidx127 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add126
  %162 = load i32, i32* %arrayidx127, align 4
  %163 = load i32, i32* %g, align 4
  %add128 = add i32 %163, %162
  store i32 %add128, i32* %g, align 4
  %164 = load i32, i32* %i, align 4
  %add129 = add nsw i32 %164, 7
  %arrayidx130 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add129
  %165 = load i32, i32* %arrayidx130, align 4
  %166 = load i32, i32* %h, align 4
  %add131 = add i32 %166, %165
  store i32 %add131, i32* %h, align 4
  %167 = load i32, i32* %b, align 4
  %shl132 = shl i32 %167, 11
  %168 = load i32, i32* %a, align 4
  %xor133 = xor i32 %168, %shl132
  store i32 %xor133, i32* %a, align 4
  %169 = load i32, i32* %a, align 4
  %170 = load i32, i32* %d, align 4
  %add134 = add i32 %170, %169
  store i32 %add134, i32* %d, align 4
  %171 = load i32, i32* %c, align 4
  %172 = load i32, i32* %b, align 4
  %add135 = add i32 %172, %171
  store i32 %add135, i32* %b, align 4
  %173 = load i32, i32* %c, align 4
  %shr136 = lshr i32 %173, 2
  %174 = load i32, i32* %b, align 4
  %xor137 = xor i32 %174, %shr136
  store i32 %xor137, i32* %b, align 4
  %175 = load i32, i32* %b, align 4
  %176 = load i32, i32* %e, align 4
  %add138 = add i32 %176, %175
  store i32 %add138, i32* %e, align 4
  %177 = load i32, i32* %d, align 4
  %178 = load i32, i32* %c, align 4
  %add139 = add i32 %178, %177
  store i32 %add139, i32* %c, align 4
  %179 = load i32, i32* %d, align 4
  %shl140 = shl i32 %179, 8
  %180 = load i32, i32* %c, align 4
  %xor141 = xor i32 %180, %shl140
  store i32 %xor141, i32* %c, align 4
  %181 = load i32, i32* %c, align 4
  %182 = load i32, i32* %f, align 4
  %add142 = add i32 %182, %181
  store i32 %add142, i32* %f, align 4
  %183 = load i32, i32* %e, align 4
  %184 = load i32, i32* %d, align 4
  %add143 = add i32 %184, %183
  store i32 %add143, i32* %d, align 4
  %185 = load i32, i32* %e, align 4
  %shr144 = lshr i32 %185, 16
  %186 = load i32, i32* %d, align 4
  %xor145 = xor i32 %186, %shr144
  store i32 %xor145, i32* %d, align 4
  %187 = load i32, i32* %d, align 4
  %188 = load i32, i32* %g, align 4
  %add146 = add i32 %188, %187
  store i32 %add146, i32* %g, align 4
  %189 = load i32, i32* %f, align 4
  %190 = load i32, i32* %e, align 4
  %add147 = add i32 %190, %189
  store i32 %add147, i32* %e, align 4
  %191 = load i32, i32* %f, align 4
  %shl148 = shl i32 %191, 10
  %192 = load i32, i32* %e, align 4
  %xor149 = xor i32 %192, %shl148
  store i32 %xor149, i32* %e, align 4
  %193 = load i32, i32* %e, align 4
  %194 = load i32, i32* %h, align 4
  %add150 = add i32 %194, %193
  store i32 %add150, i32* %h, align 4
  %195 = load i32, i32* %g, align 4
  %196 = load i32, i32* %f, align 4
  %add151 = add i32 %196, %195
  store i32 %add151, i32* %f, align 4
  %197 = load i32, i32* %g, align 4
  %shr152 = lshr i32 %197, 4
  %198 = load i32, i32* %f, align 4
  %xor153 = xor i32 %198, %shr152
  store i32 %xor153, i32* %f, align 4
  %199 = load i32, i32* %f, align 4
  %200 = load i32, i32* %a, align 4
  %add154 = add i32 %200, %199
  store i32 %add154, i32* %a, align 4
  %201 = load i32, i32* %h, align 4
  %202 = load i32, i32* %g, align 4
  %add155 = add i32 %202, %201
  store i32 %add155, i32* %g, align 4
  %203 = load i32, i32* %h, align 4
  %shl156 = shl i32 %203, 8
  %204 = load i32, i32* %g, align 4
  %xor157 = xor i32 %204, %shl156
  store i32 %xor157, i32* %g, align 4
  %205 = load i32, i32* %g, align 4
  %206 = load i32, i32* %b, align 4
  %add158 = add i32 %206, %205
  store i32 %add158, i32* %b, align 4
  %207 = load i32, i32* %a, align 4
  %208 = load i32, i32* %h, align 4
  %add159 = add i32 %208, %207
  store i32 %add159, i32* %h, align 4
  %209 = load i32, i32* %a, align 4
  %shr160 = lshr i32 %209, 9
  %210 = load i32, i32* %h, align 4
  %xor161 = xor i32 %210, %shr160
  store i32 %xor161, i32* %h, align 4
  %211 = load i32, i32* %h, align 4
  %212 = load i32, i32* %c, align 4
  %add162 = add i32 %212, %211
  store i32 %add162, i32* %c, align 4
  %213 = load i32, i32* %b, align 4
  %214 = load i32, i32* %a, align 4
  %add163 = add i32 %214, %213
  store i32 %add163, i32* %a, align 4
  %215 = load i32, i32* %a, align 4
  %216 = load i32, i32* %i, align 4
  %arrayidx164 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %216
  store i32 %215, i32* %arrayidx164, align 4
  %217 = load i32, i32* %b, align 4
  %218 = load i32, i32* %i, align 4
  %add165 = add nsw i32 %218, 1
  %arrayidx166 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add165
  store i32 %217, i32* %arrayidx166, align 4
  %219 = load i32, i32* %c, align 4
  %220 = load i32, i32* %i, align 4
  %add167 = add nsw i32 %220, 2
  %arrayidx168 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add167
  store i32 %219, i32* %arrayidx168, align 4
  %221 = load i32, i32* %d, align 4
  %222 = load i32, i32* %i, align 4
  %add169 = add nsw i32 %222, 3
  %arrayidx170 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add169
  store i32 %221, i32* %arrayidx170, align 4
  %223 = load i32, i32* %e, align 4
  %224 = load i32, i32* %i, align 4
  %add171 = add nsw i32 %224, 4
  %arrayidx172 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add171
  store i32 %223, i32* %arrayidx172, align 4
  %225 = load i32, i32* %f, align 4
  %226 = load i32, i32* %i, align 4
  %add173 = add nsw i32 %226, 5
  %arrayidx174 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add173
  store i32 %225, i32* %arrayidx174, align 4
  %227 = load i32, i32* %g, align 4
  %228 = load i32, i32* %i, align 4
  %add175 = add nsw i32 %228, 6
  %arrayidx176 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add175
  store i32 %227, i32* %arrayidx176, align 4
  %229 = load i32, i32* %h, align 4
  %230 = load i32, i32* %i, align 4
  %add177 = add nsw i32 %230, 7
  %arrayidx178 = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %add177
  store i32 %229, i32* %arrayidx178, align 4
  br label %for.inc179

for.inc179:                                       ; preds = %for.body108
  %231 = load i32, i32* %i, align 4
  %add180 = add nsw i32 %231, 8
  store i32 %add180, i32* %i, align 4
  br label %for.cond106

for.end181:                                       ; preds = %for.cond106
  br label %if.end182

if.end182:                                        ; preds = %for.end181, %for.end103
  call void @isaac()
  store i32 0, i32* @randcnt, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @iRandom() #0 {
entry:
  %r = alloca i32, align 4
  %0 = load i32, i32* @randcnt, align 4
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %0
  %1 = load i32, i32* %arrayidx, align 4
  store i32 %1, i32* %r, align 4
  %2 = load i32, i32* @randcnt, align 4
  %inc = add i32 %2, 1
  store i32 %inc, i32* @randcnt, align 4
  %3 = load i32, i32* @randcnt, align 4
  %cmp = icmp ugt i32 %3, 255
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @isaac()
  store i32 0, i32* @randcnt, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* %r, align 4
  ret i32 %4
}

; Function Attrs: noinline nounwind optnone
define hidden signext i8 @iRandA() #0 {
entry:
  %call = call i32 @iRandom()
  %rem = urem i32 %call, 95
  %add = add i32 %rem, 32
  %conv = trunc i32 %add to i8
  ret i8 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden void @iSeed(i8* %seed, i32 %flag) #0 {
entry:
  %seed.addr = alloca i8*, align 4
  %flag.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %m = alloca i32, align 4
  store i8* %seed, i8** %seed.addr, align 4
  store i32 %flag, i32* %flag.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %0, 256
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* @mm, i32 0, i32 %1
  store i32 0, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %i, align 4
  %inc = add i32 %2, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %3 = load i8*, i8** %seed.addr, align 4
  %call = call i32 @strlen(i8* %3) #4
  store i32 %call, i32* %m, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc8, %for.end
  %4 = load i32, i32* %i, align 4
  %cmp2 = icmp ult i32 %4, 256
  br i1 %cmp2, label %for.body3, label %for.end10

for.body3:                                        ; preds = %for.cond1
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %m, align 4
  %cmp4 = icmp ugt i32 %5, %6
  br i1 %cmp4, label %if.then, label %if.else

if.then:                                          ; preds = %for.body3
  %7 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %7
  store i32 0, i32* %arrayidx5, align 4
  br label %if.end

if.else:                                          ; preds = %for.body3
  %8 = load i8*, i8** %seed.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds i8, i8* %8, i32 %9
  %10 = load i8, i8* %arrayidx6, align 1
  %conv = sext i8 %10 to i32
  %11 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [256 x i32], [256 x i32]* @randrsl, i32 0, i32 %11
  store i32 %conv, i32* %arrayidx7, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc8

for.inc8:                                         ; preds = %if.end
  %12 = load i32, i32* %i, align 4
  %inc9 = add i32 %12, 1
  store i32 %inc9, i32* %i, align 4
  br label %for.cond1

for.end10:                                        ; preds = %for.cond1
  %13 = load i32, i32* %flag.addr, align 4
  call void @randinit(i32 %13)
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i8* @Vernam(i8* %msg) #0 {
entry:
  %msg.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %l = alloca i32, align 4
  store i8* %msg, i8** %msg.addr, align 4
  %0 = load i8*, i8** %msg.addr, align 4
  %call = call i32 @strlen(i8* %0) #4
  store i32 %call, i32* %l, align 4
  %1 = load i32, i32* %l, align 4
  %add = add i32 %1, 1
  call void @llvm.memset.p0i8.i32(i8* align 16 getelementptr inbounds ([4096 x i8], [4096 x i8]* @v, i32 0, i32 0), i8 0, i32 %add, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %l, align 4
  %cmp = icmp ult i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call1 = call signext i8 @iRandA()
  %conv = sext i8 %call1 to i32
  %4 = load i8*, i8** %msg.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %4, i32 %5
  %6 = load i8, i8* %arrayidx, align 1
  %conv2 = sext i8 %6 to i32
  %xor = xor i32 %conv, %conv2
  %conv3 = trunc i32 %xor to i8
  %7 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds [4096 x i8], [4096 x i8]* @v, i32 0, i32 %7
  store i8 %conv3, i8* %arrayidx4, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %inc = add i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i8* getelementptr inbounds ([4096 x i8], [4096 x i8]* @v, i32 0, i32 0)
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define hidden signext i8 @Caesar(i32 %m, i8 signext %ch, i8 signext %shift, i8 signext %modulo, i8 signext %start) #0 {
entry:
  %m.addr = alloca i32, align 4
  %ch.addr = alloca i8, align 1
  %shift.addr = alloca i8, align 1
  %modulo.addr = alloca i8, align 1
  %start.addr = alloca i8, align 1
  %n = alloca i32, align 4
  store i32 %m, i32* %m.addr, align 4
  store i8 %ch, i8* %ch.addr, align 1
  store i8 %shift, i8* %shift.addr, align 1
  store i8 %modulo, i8* %modulo.addr, align 1
  store i8 %start, i8* %start.addr, align 1
  %0 = load i32, i32* %m.addr, align 4
  %cmp = icmp eq i32 %0, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i8, i8* %shift.addr, align 1
  %conv = sext i8 %1 to i32
  %sub = sub nsw i32 0, %conv
  %conv1 = trunc i32 %sub to i8
  store i8 %conv1, i8* %shift.addr, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i8, i8* %ch.addr, align 1
  %conv2 = sext i8 %2 to i32
  %3 = load i8, i8* %start.addr, align 1
  %conv3 = sext i8 %3 to i32
  %sub4 = sub nsw i32 %conv2, %conv3
  %4 = load i8, i8* %shift.addr, align 1
  %conv5 = sext i8 %4 to i32
  %add = add nsw i32 %sub4, %conv5
  store i32 %add, i32* %n, align 4
  %5 = load i32, i32* %n, align 4
  %6 = load i8, i8* %modulo.addr, align 1
  %conv6 = sext i8 %6 to i32
  %rem = srem i32 %5, %conv6
  store i32 %rem, i32* %n, align 4
  %7 = load i32, i32* %n, align 4
  %cmp7 = icmp slt i32 %7, 0
  br i1 %cmp7, label %if.then9, label %if.end12

if.then9:                                         ; preds = %if.end
  %8 = load i8, i8* %modulo.addr, align 1
  %conv10 = sext i8 %8 to i32
  %9 = load i32, i32* %n, align 4
  %add11 = add nsw i32 %9, %conv10
  store i32 %add11, i32* %n, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then9, %if.end
  %10 = load i8, i8* %start.addr, align 1
  %conv13 = sext i8 %10 to i32
  %11 = load i32, i32* %n, align 4
  %add14 = add nsw i32 %conv13, %11
  %conv15 = trunc i32 %add14 to i8
  ret i8 %conv15
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @CaesarStr(i32 %m, i8* %msg, i8 signext %modulo, i8 signext %start) #0 {
entry:
  %m.addr = alloca i32, align 4
  %msg.addr = alloca i8*, align 4
  %modulo.addr = alloca i8, align 1
  %start.addr = alloca i8, align 1
  %i = alloca i32, align 4
  %l = alloca i32, align 4
  store i32 %m, i32* %m.addr, align 4
  store i8* %msg, i8** %msg.addr, align 4
  store i8 %modulo, i8* %modulo.addr, align 1
  store i8 %start, i8* %start.addr, align 1
  %0 = load i8*, i8** %msg.addr, align 4
  %call = call i32 @strlen(i8* %0) #4
  store i32 %call, i32* %l, align 4
  %1 = load i32, i32* %l, align 4
  %add = add i32 %1, 1
  call void @llvm.memset.p0i8.i32(i8* align 16 getelementptr inbounds ([4096 x i8], [4096 x i8]* @c, i32 0, i32 0), i8 0, i32 %add, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %l, align 4
  %cmp = icmp ult i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %m.addr, align 4
  %5 = load i8*, i8** %msg.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %5, i32 %6
  %7 = load i8, i8* %arrayidx, align 1
  %call1 = call signext i8 @iRandA()
  %8 = load i8, i8* %modulo.addr, align 1
  %9 = load i8, i8* %start.addr, align 1
  %call2 = call signext i8 @Caesar(i32 %4, i8 signext %7, i8 signext %call1, i8 signext %8, i8 signext %9)
  %10 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds [4096 x i8], [4096 x i8]* @c, i32 0, i32 %10
  store i8 %call2, i8* %arrayidx3, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i8* getelementptr inbounds ([4096 x i8], [4096 x i8]* @c, i32 0, i32 0)
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %n = alloca i32, align 4
  %l = alloca i32, align 4
  %msg = alloca i8*, align 4
  %key = alloca i8*, align 4
  %vctx = alloca [4096 x i8], align 16
  %vptx = alloca [4096 x i8], align 16
  %cctx = alloca [4096 x i8], align 16
  %cptx = alloca [4096 x i8], align 16
  store i32 0, i32* %retval, align 4
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i32 0, i32 0), i8** %msg, align 4
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i32 0, i32 0), i8** %key, align 4
  %0 = load i8*, i8** %msg, align 4
  %call = call i32 @strlen(i8* %0) #4
  store i32 %call, i32* %l, align 4
  %1 = load i8*, i8** %key, align 4
  call void @iSeed(i8* %1, i32 1)
  %arraydecay = getelementptr inbounds [4096 x i8], [4096 x i8]* %vctx, i32 0, i32 0
  %2 = load i8*, i8** %msg, align 4
  %call1 = call i8* @Vernam(i8* %2)
  %call2 = call i8* @strcpy(i8* %arraydecay, i8* %call1)
  %arraydecay3 = getelementptr inbounds [4096 x i8], [4096 x i8]* %cctx, i32 0, i32 0
  %3 = load i8*, i8** %msg, align 4
  %call4 = call i8* @CaesarStr(i32 0, i8* %3, i8 signext 95, i8 signext 32)
  %call5 = call i8* @strcpy(i8* %arraydecay3, i8* %call4)
  %4 = load i8*, i8** %key, align 4
  call void @iSeed(i8* %4, i32 1)
  %arraydecay6 = getelementptr inbounds [4096 x i8], [4096 x i8]* %vptx, i32 0, i32 0
  %arraydecay7 = getelementptr inbounds [4096 x i8], [4096 x i8]* %vctx, i32 0, i32 0
  %call8 = call i8* @Vernam(i8* %arraydecay7)
  %call9 = call i8* @strcpy(i8* %arraydecay6, i8* %call8)
  %arraydecay10 = getelementptr inbounds [4096 x i8], [4096 x i8]* %cptx, i32 0, i32 0
  %arraydecay11 = getelementptr inbounds [4096 x i8], [4096 x i8]* %cctx, i32 0, i32 0
  %call12 = call i8* @CaesarStr(i32 1, i8* %arraydecay11, i8 signext 95, i8 signext 32)
  %call13 = call i8* @strcpy(i8* %arraydecay10, i8* %call12)
  %5 = load i8*, i8** %msg, align 4
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i32 0, i32 0), i8* %5)
  %6 = load i8*, i8** %key, align 4
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3, i32 0, i32 0), i8* %6)
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i32 0, i32 0))
  store i32 0, i32* %n, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %7 = load i32, i32* %n, align 4
  %8 = load i32, i32* %l, align 4
  %cmp = icmp ult i32 %7, %8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i32, i32* %n, align 4
  %arrayidx = getelementptr inbounds [4096 x i8], [4096 x i8]* %vctx, i32 0, i32 %9
  %10 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %10 to i32
  %call17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i32 %conv)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %n, align 4
  %inc = add i32 %11, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i32 0, i32 0))
  %arraydecay19 = getelementptr inbounds [4096 x i8], [4096 x i8]* %vptx, i32 0, i32 0
  %call20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7, i32 0, i32 0), i8* %arraydecay19)
  %call21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8, i32 0, i32 0))
  store i32 0, i32* %n, align 4
  br label %for.cond22

for.cond22:                                       ; preds = %for.inc29, %for.end
  %12 = load i32, i32* %n, align 4
  %13 = load i32, i32* %l, align 4
  %cmp23 = icmp ult i32 %12, %13
  br i1 %cmp23, label %for.body25, label %for.end31

for.body25:                                       ; preds = %for.cond22
  %14 = load i32, i32* %n, align 4
  %arrayidx26 = getelementptr inbounds [4096 x i8], [4096 x i8]* %cctx, i32 0, i32 %14
  %15 = load i8, i8* %arrayidx26, align 1
  %conv27 = sext i8 %15 to i32
  %call28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i32 %conv27)
  br label %for.inc29

for.inc29:                                        ; preds = %for.body25
  %16 = load i32, i32* %n, align 4
  %inc30 = add i32 %16, 1
  store i32 %inc30, i32* %n, align 4
  br label %for.cond22

for.end31:                                        ; preds = %for.cond22
  %call32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i32 0, i32 0))
  %arraydecay33 = getelementptr inbounds [4096 x i8], [4096 x i8]* %cptx, i32 0, i32 0
  %call34 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.9, i32 0, i32 0), i8* %arraydecay33)
  ret i32 0
}

declare i8* @strcpy(i8* %0, i8* %1) #3

declare i32 @printf(i8* %0, ...) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn writeonly }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 @strlen(i8* %0) #4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %l, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ult i32 %7, %8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i8, i8* %arrayidx, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %10 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add i32 %11, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %l, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp23 = icmp ult i32 %12, %13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i8, i8* %arrayidx26, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv27 = sext i8 %15 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc30 = add i32 %16, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
