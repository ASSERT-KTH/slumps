
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for binomial()

; ModuleID = './Faulhabers_triangle.c.bc'
source_filename = "./Faulhabers_triangle.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque
%struct.tFrac = type { i32, i32 }

@.str = private unnamed_addr constant [6 x i8] c"%d/%d\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@stdout = external constant %struct._IO_FILE*, align 4
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @binomial(i32 %n, i32 %k) #0 {
entry:
  %retval = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %k.addr = alloca i32, align 4
  %num = alloca i32, align 4
  %denom = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %k, i32* %k.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %k.addr, align 4
  %cmp1 = icmp slt i32 %1, 0
  br i1 %cmp1, label %if.then, label %lor.lhs.false2

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %2 = load i32, i32* %n.addr, align 4
  %3 = load i32, i32* %k.addr, align 4
  %cmp3 = icmp slt i32 %2, %3
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false2, %lor.lhs.false, %entry
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false2
  %4 = load i32, i32* %n.addr, align 4
  %cmp4 = icmp eq i32 %4, 0
  br i1 %cmp4, label %if.then7, label %lor.lhs.false5

lor.lhs.false5:                                   ; preds = %if.end
  %5 = load i32, i32* %k.addr, align 4
  %cmp6 = icmp eq i32 %5, 0
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %lor.lhs.false5, %if.end
  store i32 1, i32* %retval, align 4
  br label %return

if.end8:                                          ; preds = %lor.lhs.false5
  store i32 1, i32* %num, align 4
  %6 = load i32, i32* %k.addr, align 4
  %add = add nsw i32 %6, 1
  store i32 %add, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end8
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %n.addr, align 4
  %cmp9 = icmp sle i32 %7, %8
  br i1 %cmp9, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i32, i32* %num, align 4
  %10 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %9, %10
  store i32 %mul, i32* %num, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %denom, align 4
  store i32 2, i32* %i, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc14, %for.end
  %12 = load i32, i32* %i, align 4
  %13 = load i32, i32* %n.addr, align 4
  %14 = load i32, i32* %k.addr, align 4
  %sub = sub nsw i32 %13, %14
  %cmp11 = icmp sle i32 %12, %sub
  br i1 %cmp11, label %for.body12, label %for.end16

for.body12:                                       ; preds = %for.cond10
  %15 = load i32, i32* %i, align 4
  %16 = load i32, i32* %denom, align 4
  %mul13 = mul nsw i32 %16, %15
  store i32 %mul13, i32* %denom, align 4
  br label %for.inc14

for.inc14:                                        ; preds = %for.body12
  %17 = load i32, i32* %i, align 4
  %inc15 = add nsw i32 %17, 1
  store i32 %inc15, i32* %i, align 4
  br label %for.cond10

for.end16:                                        ; preds = %for.cond10
  %18 = load i32, i32* %num, align 4
  %19 = load i32, i32* %denom, align 4
  %div = sdiv i32 %18, %19
  store i32 %div, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end16, %if.then7, %if.then
  %20 = load i32, i32* %retval, align 4
  ret i32 %20
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @gcd(i32 %a, i32 %b) #0 {
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %b.addr, align 4
  %cmp = icmp ne i32 %0, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i32, i32* %a.addr, align 4
  %2 = load i32, i32* %b.addr, align 4
  %rem = srem i32 %1, %2
  store i32 %rem, i32* %temp, align 4
  %3 = load i32, i32* %b.addr, align 4
  store i32 %3, i32* %a.addr, align 4
  %4 = load i32, i32* %temp, align 4
  store i32 %4, i32* %b.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %5 = load i32, i32* %a.addr, align 4
  ret i32 %5
}

; Function Attrs: noinline nounwind optnone
define hidden void @makeFrac(%struct.tFrac* noalias sret align 4 %agg.result, i32 %n, i32 %d) #0 {
entry:
  %n.addr = alloca i32, align 4
  %d.addr = alloca i32, align 4
  %g = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %d, i32* %d.addr, align 4
  %0 = load i32, i32* %d.addr, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %agg.result, i32 0, i32 0
  store i32 0, i32* %num, align 4
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %agg.result, i32 0, i32 1
  store i32 0, i32* %denom, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4
  %cmp1 = icmp eq i32 %1, 0
  br i1 %cmp1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.end
  store i32 1, i32* %d.addr, align 4
  br label %if.end7

if.else:                                          ; preds = %if.end
  %2 = load i32, i32* %d.addr, align 4
  %cmp3 = icmp slt i32 %2, 0
  br i1 %cmp3, label %if.then4, label %if.end6

if.then4:                                         ; preds = %if.else
  %3 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 0, %3
  store i32 %sub, i32* %n.addr, align 4
  %4 = load i32, i32* %d.addr, align 4
  %sub5 = sub nsw i32 0, %4
  store i32 %sub5, i32* %d.addr, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.then4, %if.else
  br label %if.end7

if.end7:                                          ; preds = %if.end6, %if.then2
  %5 = load i32, i32* %n.addr, align 4
  %6 = load i32, i32* %d.addr, align 4
  %call = call i32 @gcd(i32 %5, i32 %6)
  %call8 = call i32 @abs(i32 %call) #5
  store i32 %call8, i32* %g, align 4
  %7 = load i32, i32* %g, align 4
  %cmp9 = icmp sgt i32 %7, 1
  br i1 %cmp9, label %if.then10, label %if.end12

if.then10:                                        ; preds = %if.end7
  %8 = load i32, i32* %n.addr, align 4
  %9 = load i32, i32* %g, align 4
  %div = sdiv i32 %8, %9
  store i32 %div, i32* %n.addr, align 4
  %10 = load i32, i32* %d.addr, align 4
  %11 = load i32, i32* %g, align 4
  %div11 = sdiv i32 %10, %11
  store i32 %div11, i32* %d.addr, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then10, %if.end7
  %12 = load i32, i32* %n.addr, align 4
  %num13 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %agg.result, i32 0, i32 0
  store i32 %12, i32* %num13, align 4
  %13 = load i32, i32* %d.addr, align 4
  %denom14 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %agg.result, i32 0, i32 1
  store i32 %13, i32* %denom14, align 4
  br label %return

return:                                           ; preds = %if.end12, %if.then
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @abs(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @negateFrac(%struct.tFrac* noalias sret align 4 %agg.result, %struct.tFrac* byval(%struct.tFrac) align 4 %f) #0 {
entry:
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 0
  %0 = load i32, i32* %num, align 4
  %sub = sub nsw i32 0, %0
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 1
  %1 = load i32, i32* %denom, align 4
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.result, i32 %sub, i32 %1)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @subFrac(%struct.tFrac* noalias sret align 4 %agg.result, %struct.tFrac* byval(%struct.tFrac) align 4 %lhs, %struct.tFrac* byval(%struct.tFrac) align 4 %rhs) #0 {
entry:
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 0
  %0 = load i32, i32* %num, align 4
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 1
  %1 = load i32, i32* %denom, align 4
  %mul = mul nsw i32 %0, %1
  %denom1 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 1
  %2 = load i32, i32* %denom1, align 4
  %num2 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 0
  %3 = load i32, i32* %num2, align 4
  %mul3 = mul nsw i32 %2, %3
  %sub = sub nsw i32 %mul, %mul3
  %denom4 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 1
  %4 = load i32, i32* %denom4, align 4
  %denom5 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 1
  %5 = load i32, i32* %denom5, align 4
  %mul6 = mul nsw i32 %4, %5
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.result, i32 %sub, i32 %mul6)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @multFrac(%struct.tFrac* noalias sret align 4 %agg.result, %struct.tFrac* byval(%struct.tFrac) align 4 %lhs, %struct.tFrac* byval(%struct.tFrac) align 4 %rhs) #0 {
entry:
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 0
  %0 = load i32, i32* %num, align 4
  %num1 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 0
  %1 = load i32, i32* %num1, align 4
  %mul = mul nsw i32 %0, %1
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 1
  %2 = load i32, i32* %denom, align 4
  %denom2 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 1
  %3 = load i32, i32* %denom2, align 4
  %mul3 = mul nsw i32 %2, %3
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.result, i32 %mul, i32 %mul3)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @equalFrac(%struct.tFrac* byval(%struct.tFrac) align 4 %lhs, %struct.tFrac* byval(%struct.tFrac) align 4 %rhs) #0 {
entry:
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 0
  %0 = load i32, i32* %num, align 4
  %num1 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 0
  %1 = load i32, i32* %num1, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 1
  %2 = load i32, i32* %denom, align 4
  %denom2 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 1
  %3 = load i32, i32* %denom2, align 4
  %cmp3 = icmp eq i32 %2, %3
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp3, %land.rhs ]
  ret i1 %4
}

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @lessFrac(%struct.tFrac* byval(%struct.tFrac) align 4 %lhs, %struct.tFrac* byval(%struct.tFrac) align 4 %rhs) #0 {
entry:
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 0
  %0 = load i32, i32* %num, align 4
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 1
  %1 = load i32, i32* %denom, align 4
  %mul = mul nsw i32 %0, %1
  %num1 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 0
  %2 = load i32, i32* %num1, align 4
  %denom2 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 1
  %3 = load i32, i32* %denom2, align 4
  %mul3 = mul nsw i32 %2, %3
  %cmp = icmp slt i32 %mul, %mul3
  ret i1 %cmp
}

; Function Attrs: noinline nounwind optnone
define hidden void @printFrac(%struct.tFrac* byval(%struct.tFrac) align 4 %f) #0 {
entry:
  %buffer = alloca [7 x i8], align 1
  %len = alloca i32, align 4
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 1
  %0 = load i32, i32* %denom, align 4
  %cmp = icmp ne i32 %0, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %arraydecay = getelementptr inbounds [7 x i8], [7 x i8]* %buffer, i32 0, i32 0
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 0
  %1 = load i32, i32* %num, align 4
  %denom1 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 1
  %2 = load i32, i32* %denom1, align 4
  %call = call i32 (i8*, i32, i8*, ...) @snprintf(i8* %arraydecay, i32 7, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i32 %1, i32 %2)
  br label %if.end

if.else:                                          ; preds = %entry
  %arraydecay2 = getelementptr inbounds [7 x i8], [7 x i8]* %buffer, i32 0, i32 0
  %num3 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 0
  %3 = load i32, i32* %num3, align 4
  %call4 = call i32 (i8*, i32, i8*, ...) @snprintf(i8* %arraydecay2, i32 7, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %3)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %arraydecay5 = getelementptr inbounds [7 x i8], [7 x i8]* %buffer, i32 0, i32 0
  %call6 = call i32 @strlen(i8* %arraydecay5) #6
  %sub = sub i32 7, %call6
  store i32 %sub, i32* %len, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %4 = load i32, i32* %len, align 4
  %dec = add nsw i32 %4, -1
  store i32 %dec, i32* %len, align 4
  %cmp7 = icmp sgt i32 %4, 0
  br i1 %cmp7, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call8 = call i32 @putc(i32 32, %struct._IO_FILE* %5)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %arraydecay9 = getelementptr inbounds [7 x i8], [7 x i8]* %buffer, i32 0, i32 0
  %call10 = call i32 (i8*, ...) @printf(i8* %arraydecay9)
  ret void
}

declare i32 @snprintf(i8* %0, i32 %1, i8* %2, ...) #2

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #3

declare i32 @putc(i32 %0, %struct._IO_FILE* %1) #2

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden void @bernoulli(%struct.tFrac* noalias sret align 4 %agg.result, i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %a = alloca [16 x %struct.tFrac], align 16
  %j = alloca i32, align 4
  %m = alloca i32, align 4
  %tmp = alloca %struct.tFrac, align 4
  %tmp9 = alloca %struct.tFrac, align 4
  %agg.tmp = alloca %struct.tFrac, align 4
  %agg.tmp13 = alloca %struct.tFrac, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 0
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %arrayidx, i32 0, i32 0
  store i32 0, i32* %num, align 16
  %arrayidx1 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 0
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %arrayidx1, i32 0, i32 1
  store i32 0, i32* %denom, align 4
  %arrayidx2 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 0
  %1 = bitcast %struct.tFrac* %agg.result to i8*
  %2 = bitcast %struct.tFrac* %arrayidx2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %1, i8* align 16 %2, i32 8, i1 false)
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %m, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc14, %if.end
  %3 = load i32, i32* %m, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp3 = icmp sle i32 %3, %4
  br i1 %cmp3, label %for.body, label %for.end15

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %m, align 4
  %arrayidx4 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 %5
  %6 = load i32, i32* %m, align 4
  %add = add nsw i32 %6, 1
  call void @makeFrac(%struct.tFrac* sret align 4 %tmp, i32 1, i32 %add)
  %7 = bitcast %struct.tFrac* %arrayidx4 to i8*
  %8 = bitcast %struct.tFrac* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %7, i8* align 4 %8, i32 8, i1 false)
  %9 = load i32, i32* %m, align 4
  store i32 %9, i32* %j, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %for.body
  %10 = load i32, i32* %j, align 4
  %cmp6 = icmp sge i32 %10, 1
  br i1 %cmp6, label %for.body7, label %for.end

for.body7:                                        ; preds = %for.cond5
  %11 = load i32, i32* %j, align 4
  %sub = sub nsw i32 %11, 1
  %arrayidx8 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 %sub
  %12 = load i32, i32* %j, align 4
  %sub10 = sub nsw i32 %12, 1
  %arrayidx11 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 %sub10
  %13 = load i32, i32* %j, align 4
  %arrayidx12 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 %13
  call void @subFrac(%struct.tFrac* sret align 4 %agg.tmp, %struct.tFrac* byval(%struct.tFrac) align 4 %arrayidx11, %struct.tFrac* byval(%struct.tFrac) align 4 %arrayidx12)
  %14 = load i32, i32* %j, align 4
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.tmp13, i32 %14, i32 1)
  call void @multFrac(%struct.tFrac* sret align 4 %tmp9, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp13)
  %15 = bitcast %struct.tFrac* %arrayidx8 to i8*
  %16 = bitcast %struct.tFrac* %tmp9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %15, i8* align 4 %16, i32 8, i1 false)
  br label %for.inc

for.inc:                                          ; preds = %for.body7
  %17 = load i32, i32* %j, align 4
  %dec = add nsw i32 %17, -1
  store i32 %dec, i32* %j, align 4
  br label %for.cond5

for.end:                                          ; preds = %for.cond5
  br label %for.inc14

for.inc14:                                        ; preds = %for.end
  %18 = load i32, i32* %m, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %m, align 4
  br label %for.cond

for.end15:                                        ; preds = %for.cond
  %19 = load i32, i32* %n.addr, align 4
  %cmp16 = icmp ne i32 %19, 1
  br i1 %cmp16, label %if.then17, label %if.end19

if.then17:                                        ; preds = %for.end15
  %arrayidx18 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 0
  %20 = bitcast %struct.tFrac* %agg.result to i8*
  %21 = bitcast %struct.tFrac* %arrayidx18 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %20, i8* align 16 %21, i32 8, i1 false)
  br label %return

if.end19:                                         ; preds = %for.end15
  %arrayidx20 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 0
  call void @negateFrac(%struct.tFrac* sret align 4 %agg.result, %struct.tFrac* byval(%struct.tFrac) align 4 %arrayidx20)
  br label %return

return:                                           ; preds = %if.end19, %if.then17, %if.then
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #4

; Function Attrs: noinline nounwind optnone
define hidden void @faulhaber(i32 %p) #0 {
entry:
  %p.addr = alloca i32, align 4
  %q = alloca %struct.tFrac, align 4
  %coeffs = alloca %struct.tFrac*, align 4
  %j = alloca i32, align 4
  %sign = alloca i32, align 4
  %tmp = alloca %struct.tFrac, align 4
  %tmp3 = alloca %struct.tFrac, align 4
  %agg.tmp = alloca %struct.tFrac, align 4
  %agg.tmp4 = alloca %struct.tFrac, align 4
  %agg.tmp5 = alloca %struct.tFrac, align 4
  %agg.tmp6 = alloca %struct.tFrac, align 4
  %agg.tmp9 = alloca %struct.tFrac, align 4
  store i32 %p, i32* %p.addr, align 4
  %0 = load i32, i32* %p.addr, align 4
  %add = add nsw i32 %0, 1
  %mul = mul i32 8, %add
  %call = call noalias i8* @malloc(i32 %mul)
  %1 = bitcast i8* %call to %struct.tFrac*
  store %struct.tFrac* %1, %struct.tFrac** %coeffs, align 4
  %2 = load i32, i32* %p.addr, align 4
  %add1 = add nsw i32 %2, 1
  call void @makeFrac(%struct.tFrac* sret align 4 %tmp, i32 1, i32 %add1)
  %3 = bitcast %struct.tFrac* %q to i8*
  %4 = bitcast %struct.tFrac* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %3, i8* align 4 %4, i32 8, i1 false)
  store i32 -1, i32* %sign, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %p.addr, align 4
  %cmp = icmp sle i32 %5, %6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i32, i32* %sign, align 4
  %mul2 = mul nsw i32 -1, %7
  store i32 %mul2, i32* %sign, align 4
  %8 = load %struct.tFrac*, %struct.tFrac** %coeffs, align 4
  %9 = load i32, i32* %p.addr, align 4
  %10 = load i32, i32* %j, align 4
  %sub = sub nsw i32 %9, %10
  %arrayidx = getelementptr inbounds %struct.tFrac, %struct.tFrac* %8, i32 %sub
  %11 = load i32, i32* %sign, align 4
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.tmp5, i32 %11, i32 1)
  call void @multFrac(%struct.tFrac* sret align 4 %agg.tmp4, %struct.tFrac* byval(%struct.tFrac) align 4 %q, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp5)
  %12 = load i32, i32* %p.addr, align 4
  %add7 = add nsw i32 %12, 1
  %13 = load i32, i32* %j, align 4
  %call8 = call i32 @binomial(i32 %add7, i32 %13)
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.tmp6, i32 %call8, i32 1)
  call void @multFrac(%struct.tFrac* sret align 4 %agg.tmp, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp4, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp6)
  %14 = load i32, i32* %j, align 4
  call void @bernoulli(%struct.tFrac* sret align 4 %agg.tmp9, i32 %14)
  call void @multFrac(%struct.tFrac* sret align 4 %tmp3, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp9)
  %15 = bitcast %struct.tFrac* %arrayidx to i8*
  %16 = bitcast %struct.tFrac* %tmp3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %15, i8* align 4 %16, i32 8, i1 false)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %17 = load i32, i32* %j, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc14, %for.end
  %18 = load i32, i32* %j, align 4
  %19 = load i32, i32* %p.addr, align 4
  %cmp11 = icmp sle i32 %18, %19
  br i1 %cmp11, label %for.body12, label %for.end16

for.body12:                                       ; preds = %for.cond10
  %20 = load %struct.tFrac*, %struct.tFrac** %coeffs, align 4
  %21 = load i32, i32* %j, align 4
  %arrayidx13 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %20, i32 %21
  call void @printFrac(%struct.tFrac* byval(%struct.tFrac) align 4 %arrayidx13)
  br label %for.inc14

for.inc14:                                        ; preds = %for.body12
  %22 = load i32, i32* %j, align 4
  %inc15 = add nsw i32 %22, 1
  store i32 %inc15, i32* %j, align 4
  br label %for.cond10

for.end16:                                        ; preds = %for.cond10
  %call17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %23 = load %struct.tFrac*, %struct.tFrac** %coeffs, align 4
  %24 = bitcast %struct.tFrac* %23 to i8*
  call void @free(i8* %24)
  ret void
}

declare noalias i8* @malloc(i32 %0) #2

declare void @free(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  call void @faulhaber(i32 %1)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %i, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind willreturn }
attributes #5 = { nounwind readnone }
attributes #6 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 0:i32
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %k.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = icmp slt i32 %1, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 0:i32
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %k.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp3 = icmp slt i32 %2, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp4 = icmp eq i32 %4, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %k.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp6 = icmp eq i32 %5, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %k.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %6, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp9 = icmp sle i32 %7, %8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %num, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %9, %10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %11, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %k.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %13, %14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %cmp11 = icmp sle i32 %12, %sub
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = subnsw %1, %2
%4:i1 = sle %0, %3
infer %4

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %denom, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul13 = mul nsw i32 %16, %15
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc15 = add nsw i32 %17, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %num, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %denom, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div = sdiv i32 %18, %19
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sdiv %0, %1
infer %2

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 0:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147418112
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = subnsw %1, %2
%4:i1 = sle %0, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = sdiv %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for binomial()

; entering Souper's runOnFunction() for gcd()

; ModuleID = './Faulhabers_triangle.c.bc'
source_filename = "./Faulhabers_triangle.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque
%struct.tFrac = type { i32, i32 }

@.str = private unnamed_addr constant [6 x i8] c"%d/%d\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@stdout = external constant %struct._IO_FILE*, align 4
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @binomial(i32 %n, i32 %k) #0 {
entry:
  %retval = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %k.addr = alloca i32, align 4
  %num = alloca i32, align 4
  %denom = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %k, i32* %k.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %k.addr, align 4
  %cmp1 = icmp slt i32 %1, 0
  br i1 %cmp1, label %if.then, label %lor.lhs.false2

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %2 = load i32, i32* %n.addr, align 4
  %3 = load i32, i32* %k.addr, align 4
  %cmp3 = icmp slt i32 %2, %3
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false2, %lor.lhs.false, %entry
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false2
  %4 = load i32, i32* %n.addr, align 4
  %cmp4 = icmp eq i32 %4, 0
  br i1 %cmp4, label %if.then7, label %lor.lhs.false5

lor.lhs.false5:                                   ; preds = %if.end
  %5 = load i32, i32* %k.addr, align 4
  %cmp6 = icmp eq i32 %5, 0
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %lor.lhs.false5, %if.end
  store i32 1, i32* %retval, align 4
  br label %return

if.end8:                                          ; preds = %lor.lhs.false5
  store i32 1, i32* %num, align 4
  %6 = load i32, i32* %k.addr, align 4
  %add = add nsw i32 %6, 1
  store i32 %add, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end8
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %n.addr, align 4
  %cmp9 = icmp sle i32 %7, %8
  br i1 %cmp9, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i32, i32* %num, align 4
  %10 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %9, %10
  store i32 %mul, i32* %num, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %denom, align 4
  store i32 2, i32* %i, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc14, %for.end
  %12 = load i32, i32* %i, align 4
  %13 = load i32, i32* %n.addr, align 4
  %14 = load i32, i32* %k.addr, align 4
  %sub = sub nsw i32 %13, %14
  %cmp11 = icmp sle i32 %12, %sub
  br i1 %cmp11, label %for.body12, label %for.end16

for.body12:                                       ; preds = %for.cond10
  %15 = load i32, i32* %i, align 4
  %16 = load i32, i32* %denom, align 4
  %mul13 = mul nsw i32 %16, %15
  store i32 %mul13, i32* %denom, align 4
  br label %for.inc14

for.inc14:                                        ; preds = %for.body12
  %17 = load i32, i32* %i, align 4
  %inc15 = add nsw i32 %17, 1
  store i32 %inc15, i32* %i, align 4
  br label %for.cond10

for.end16:                                        ; preds = %for.cond10
  %18 = load i32, i32* %num, align 4
  %19 = load i32, i32* %denom, align 4
  %div = sdiv i32 %18, %19
  store i32 %div, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end16, %if.then7, %if.then
  %20 = load i32, i32* %retval, align 4
  ret i32 %20
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @gcd(i32 %a, i32 %b) #0 {
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %b.addr, align 4
  %cmp = icmp ne i32 %0, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i32, i32* %a.addr, align 4
  %2 = load i32, i32* %b.addr, align 4
  %rem = srem i32 %1, %2
  store i32 %rem, i32* %temp, align 4
  %3 = load i32, i32* %b.addr, align 4
  store i32 %3, i32* %a.addr, align 4
  %4 = load i32, i32* %temp, align 4
  store i32 %4, i32* %b.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %5 = load i32, i32* %a.addr, align 4
  ret i32 %5
}

; Function Attrs: noinline nounwind optnone
define hidden void @makeFrac(%struct.tFrac* noalias sret align 4 %agg.result, i32 %n, i32 %d) #0 {
entry:
  %n.addr = alloca i32, align 4
  %d.addr = alloca i32, align 4
  %g = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %d, i32* %d.addr, align 4
  %0 = load i32, i32* %d.addr, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %agg.result, i32 0, i32 0
  store i32 0, i32* %num, align 4
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %agg.result, i32 0, i32 1
  store i32 0, i32* %denom, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4
  %cmp1 = icmp eq i32 %1, 0
  br i1 %cmp1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.end
  store i32 1, i32* %d.addr, align 4
  br label %if.end7

if.else:                                          ; preds = %if.end
  %2 = load i32, i32* %d.addr, align 4
  %cmp3 = icmp slt i32 %2, 0
  br i1 %cmp3, label %if.then4, label %if.end6

if.then4:                                         ; preds = %if.else
  %3 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 0, %3
  store i32 %sub, i32* %n.addr, align 4
  %4 = load i32, i32* %d.addr, align 4
  %sub5 = sub nsw i32 0, %4
  store i32 %sub5, i32* %d.addr, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.then4, %if.else
  br label %if.end7

if.end7:                                          ; preds = %if.end6, %if.then2
  %5 = load i32, i32* %n.addr, align 4
  %6 = load i32, i32* %d.addr, align 4
  %call = call i32 @gcd(i32 %5, i32 %6)
  %call8 = call i32 @abs(i32 %call) #5
  store i32 %call8, i32* %g, align 4
  %7 = load i32, i32* %g, align 4
  %cmp9 = icmp sgt i32 %7, 1
  br i1 %cmp9, label %if.then10, label %if.end12

if.then10:                                        ; preds = %if.end7
  %8 = load i32, i32* %n.addr, align 4
  %9 = load i32, i32* %g, align 4
  %div = sdiv i32 %8, %9
  store i32 %div, i32* %n.addr, align 4
  %10 = load i32, i32* %d.addr, align 4
  %11 = load i32, i32* %g, align 4
  %div11 = sdiv i32 %10, %11
  store i32 %div11, i32* %d.addr, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then10, %if.end7
  %12 = load i32, i32* %n.addr, align 4
  %num13 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %agg.result, i32 0, i32 0
  store i32 %12, i32* %num13, align 4
  %13 = load i32, i32* %d.addr, align 4
  %denom14 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %agg.result, i32 0, i32 1
  store i32 %13, i32* %denom14, align 4
  br label %return

return:                                           ; preds = %if.end12, %if.then
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @abs(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @negateFrac(%struct.tFrac* noalias sret align 4 %agg.result, %struct.tFrac* byval(%struct.tFrac) align 4 %f) #0 {
entry:
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 0
  %0 = load i32, i32* %num, align 4
  %sub = sub nsw i32 0, %0
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 1
  %1 = load i32, i32* %denom, align 4
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.result, i32 %sub, i32 %1)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @subFrac(%struct.tFrac* noalias sret align 4 %agg.result, %struct.tFrac* byval(%struct.tFrac) align 4 %lhs, %struct.tFrac* byval(%struct.tFrac) align 4 %rhs) #0 {
entry:
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 0
  %0 = load i32, i32* %num, align 4
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 1
  %1 = load i32, i32* %denom, align 4
  %mul = mul nsw i32 %0, %1
  %denom1 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 1
  %2 = load i32, i32* %denom1, align 4
  %num2 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 0
  %3 = load i32, i32* %num2, align 4
  %mul3 = mul nsw i32 %2, %3
  %sub = sub nsw i32 %mul, %mul3
  %denom4 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 1
  %4 = load i32, i32* %denom4, align 4
  %denom5 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 1
  %5 = load i32, i32* %denom5, align 4
  %mul6 = mul nsw i32 %4, %5
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.result, i32 %sub, i32 %mul6)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @multFrac(%struct.tFrac* noalias sret align 4 %agg.result, %struct.tFrac* byval(%struct.tFrac) align 4 %lhs, %struct.tFrac* byval(%struct.tFrac) align 4 %rhs) #0 {
entry:
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 0
  %0 = load i32, i32* %num, align 4
  %num1 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 0
  %1 = load i32, i32* %num1, align 4
  %mul = mul nsw i32 %0, %1
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 1
  %2 = load i32, i32* %denom, align 4
  %denom2 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 1
  %3 = load i32, i32* %denom2, align 4
  %mul3 = mul nsw i32 %2, %3
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.result, i32 %mul, i32 %mul3)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @equalFrac(%struct.tFrac* byval(%struct.tFrac) align 4 %lhs, %struct.tFrac* byval(%struct.tFrac) align 4 %rhs) #0 {
entry:
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 0
  %0 = load i32, i32* %num, align 4
  %num1 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 0
  %1 = load i32, i32* %num1, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 1
  %2 = load i32, i32* %denom, align 4
  %denom2 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 1
  %3 = load i32, i32* %denom2, align 4
  %cmp3 = icmp eq i32 %2, %3
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp3, %land.rhs ]
  ret i1 %4
}

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @lessFrac(%struct.tFrac* byval(%struct.tFrac) align 4 %lhs, %struct.tFrac* byval(%struct.tFrac) align 4 %rhs) #0 {
entry:
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 0
  %0 = load i32, i32* %num, align 4
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 1
  %1 = load i32, i32* %denom, align 4
  %mul = mul nsw i32 %0, %1
  %num1 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 0
  %2 = load i32, i32* %num1, align 4
  %denom2 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 1
  %3 = load i32, i32* %denom2, align 4
  %mul3 = mul nsw i32 %2, %3
  %cmp = icmp slt i32 %mul, %mul3
  ret i1 %cmp
}

; Function Attrs: noinline nounwind optnone
define hidden void @printFrac(%struct.tFrac* byval(%struct.tFrac) align 4 %f) #0 {
entry:
  %buffer = alloca [7 x i8], align 1
  %len = alloca i32, align 4
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 1
  %0 = load i32, i32* %denom, align 4
  %cmp = icmp ne i32 %0, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %arraydecay = getelementptr inbounds [7 x i8], [7 x i8]* %buffer, i32 0, i32 0
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 0
  %1 = load i32, i32* %num, align 4
  %denom1 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 1
  %2 = load i32, i32* %denom1, align 4
  %call = call i32 (i8*, i32, i8*, ...) @snprintf(i8* %arraydecay, i32 7, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i32 %1, i32 %2)
  br label %if.end

if.else:                                          ; preds = %entry
  %arraydecay2 = getelementptr inbounds [7 x i8], [7 x i8]* %buffer, i32 0, i32 0
  %num3 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 0
  %3 = load i32, i32* %num3, align 4
  %call4 = call i32 (i8*, i32, i8*, ...) @snprintf(i8* %arraydecay2, i32 7, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %3)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %arraydecay5 = getelementptr inbounds [7 x i8], [7 x i8]* %buffer, i32 0, i32 0
  %call6 = call i32 @strlen(i8* %arraydecay5) #6
  %sub = sub i32 7, %call6
  store i32 %sub, i32* %len, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %4 = load i32, i32* %len, align 4
  %dec = add nsw i32 %4, -1
  store i32 %dec, i32* %len, align 4
  %cmp7 = icmp sgt i32 %4, 0
  br i1 %cmp7, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call8 = call i32 @putc(i32 32, %struct._IO_FILE* %5)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %arraydecay9 = getelementptr inbounds [7 x i8], [7 x i8]* %buffer, i32 0, i32 0
  %call10 = call i32 (i8*, ...) @printf(i8* %arraydecay9)
  ret void
}

declare i32 @snprintf(i8* %0, i32 %1, i8* %2, ...) #2

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #3

declare i32 @putc(i32 %0, %struct._IO_FILE* %1) #2

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden void @bernoulli(%struct.tFrac* noalias sret align 4 %agg.result, i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %a = alloca [16 x %struct.tFrac], align 16
  %j = alloca i32, align 4
  %m = alloca i32, align 4
  %tmp = alloca %struct.tFrac, align 4
  %tmp9 = alloca %struct.tFrac, align 4
  %agg.tmp = alloca %struct.tFrac, align 4
  %agg.tmp13 = alloca %struct.tFrac, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 0
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %arrayidx, i32 0, i32 0
  store i32 0, i32* %num, align 16
  %arrayidx1 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 0
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %arrayidx1, i32 0, i32 1
  store i32 0, i32* %denom, align 4
  %arrayidx2 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 0
  %1 = bitcast %struct.tFrac* %agg.result to i8*
  %2 = bitcast %struct.tFrac* %arrayidx2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %1, i8* align 16 %2, i32 8, i1 false)
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %m, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc14, %if.end
  %3 = load i32, i32* %m, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp3 = icmp sle i32 %3, %4
  br i1 %cmp3, label %for.body, label %for.end15

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %m, align 4
  %arrayidx4 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 %5
  %6 = load i32, i32* %m, align 4
  %add = add nsw i32 %6, 1
  call void @makeFrac(%struct.tFrac* sret align 4 %tmp, i32 1, i32 %add)
  %7 = bitcast %struct.tFrac* %arrayidx4 to i8*
  %8 = bitcast %struct.tFrac* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %7, i8* align 4 %8, i32 8, i1 false)
  %9 = load i32, i32* %m, align 4
  store i32 %9, i32* %j, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %for.body
  %10 = load i32, i32* %j, align 4
  %cmp6 = icmp sge i32 %10, 1
  br i1 %cmp6, label %for.body7, label %for.end

for.body7:                                        ; preds = %for.cond5
  %11 = load i32, i32* %j, align 4
  %sub = sub nsw i32 %11, 1
  %arrayidx8 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 %sub
  %12 = load i32, i32* %j, align 4
  %sub10 = sub nsw i32 %12, 1
  %arrayidx11 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 %sub10
  %13 = load i32, i32* %j, align 4
  %arrayidx12 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 %13
  call void @subFrac(%struct.tFrac* sret align 4 %agg.tmp, %struct.tFrac* byval(%struct.tFrac) align 4 %arrayidx11, %struct.tFrac* byval(%struct.tFrac) align 4 %arrayidx12)
  %14 = load i32, i32* %j, align 4
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.tmp13, i32 %14, i32 1)
  call void @multFrac(%struct.tFrac* sret align 4 %tmp9, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp13)
  %15 = bitcast %struct.tFrac* %arrayidx8 to i8*
  %16 = bitcast %struct.tFrac* %tmp9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %15, i8* align 4 %16, i32 8, i1 false)
  br label %for.inc

for.inc:                                          ; preds = %for.body7
  %17 = load i32, i32* %j, align 4
  %dec = add nsw i32 %17, -1
  store i32 %dec, i32* %j, align 4
  br label %for.cond5

for.end:                                          ; preds = %for.cond5
  br label %for.inc14

for.inc14:                                        ; preds = %for.end
  %18 = load i32, i32* %m, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %m, align 4
  br label %for.cond

for.end15:                                        ; preds = %for.cond
  %19 = load i32, i32* %n.addr, align 4
  %cmp16 = icmp ne i32 %19, 1
  br i1 %cmp16, label %if.then17, label %if.end19

if.then17:                                        ; preds = %for.end15
  %arrayidx18 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 0
  %20 = bitcast %struct.tFrac* %agg.result to i8*
  %21 = bitcast %struct.tFrac* %arrayidx18 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %20, i8* align 16 %21, i32 8, i1 false)
  br label %return

if.end19:                                         ; preds = %for.end15
  %arrayidx20 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 0
  call void @negateFrac(%struct.tFrac* sret align 4 %agg.result, %struct.tFrac* byval(%struct.tFrac) align 4 %arrayidx20)
  br label %return

return:                                           ; preds = %if.end19, %if.then17, %if.then
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #4

; Function Attrs: noinline nounwind optnone
define hidden void @faulhaber(i32 %p) #0 {
entry:
  %p.addr = alloca i32, align 4
  %q = alloca %struct.tFrac, align 4
  %coeffs = alloca %struct.tFrac*, align 4
  %j = alloca i32, align 4
  %sign = alloca i32, align 4
  %tmp = alloca %struct.tFrac, align 4
  %tmp3 = alloca %struct.tFrac, align 4
  %agg.tmp = alloca %struct.tFrac, align 4
  %agg.tmp4 = alloca %struct.tFrac, align 4
  %agg.tmp5 = alloca %struct.tFrac, align 4
  %agg.tmp6 = alloca %struct.tFrac, align 4
  %agg.tmp9 = alloca %struct.tFrac, align 4
  store i32 %p, i32* %p.addr, align 4
  %0 = load i32, i32* %p.addr, align 4
  %add = add nsw i32 %0, 1
  %mul = mul i32 8, %add
  %call = call noalias i8* @malloc(i32 %mul)
  %1 = bitcast i8* %call to %struct.tFrac*
  store %struct.tFrac* %1, %struct.tFrac** %coeffs, align 4
  %2 = load i32, i32* %p.addr, align 4
  %add1 = add nsw i32 %2, 1
  call void @makeFrac(%struct.tFrac* sret align 4 %tmp, i32 1, i32 %add1)
  %3 = bitcast %struct.tFrac* %q to i8*
  %4 = bitcast %struct.tFrac* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %3, i8* align 4 %4, i32 8, i1 false)
  store i32 -1, i32* %sign, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %p.addr, align 4
  %cmp = icmp sle i32 %5, %6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i32, i32* %sign, align 4
  %mul2 = mul nsw i32 -1, %7
  store i32 %mul2, i32* %sign, align 4
  %8 = load %struct.tFrac*, %struct.tFrac** %coeffs, align 4
  %9 = load i32, i32* %p.addr, align 4
  %10 = load i32, i32* %j, align 4
  %sub = sub nsw i32 %9, %10
  %arrayidx = getelementptr inbounds %struct.tFrac, %struct.tFrac* %8, i32 %sub
  %11 = load i32, i32* %sign, align 4
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.tmp5, i32 %11, i32 1)
  call void @multFrac(%struct.tFrac* sret align 4 %agg.tmp4, %struct.tFrac* byval(%struct.tFrac) align 4 %q, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp5)
  %12 = load i32, i32* %p.addr, align 4
  %add7 = add nsw i32 %12, 1
  %13 = load i32, i32* %j, align 4
  %call8 = call i32 @binomial(i32 %add7, i32 %13)
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.tmp6, i32 %call8, i32 1)
  call void @multFrac(%struct.tFrac* sret align 4 %agg.tmp, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp4, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp6)
  %14 = load i32, i32* %j, align 4
  call void @bernoulli(%struct.tFrac* sret align 4 %agg.tmp9, i32 %14)
  call void @multFrac(%struct.tFrac* sret align 4 %tmp3, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp9)
  %15 = bitcast %struct.tFrac* %arrayidx to i8*
  %16 = bitcast %struct.tFrac* %tmp3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %15, i8* align 4 %16, i32 8, i1 false)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %17 = load i32, i32* %j, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc14, %for.end
  %18 = load i32, i32* %j, align 4
  %19 = load i32, i32* %p.addr, align 4
  %cmp11 = icmp sle i32 %18, %19
  br i1 %cmp11, label %for.body12, label %for.end16

for.body12:                                       ; preds = %for.cond10
  %20 = load %struct.tFrac*, %struct.tFrac** %coeffs, align 4
  %21 = load i32, i32* %j, align 4
  %arrayidx13 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %20, i32 %21
  call void @printFrac(%struct.tFrac* byval(%struct.tFrac) align 4 %arrayidx13)
  br label %for.inc14

for.inc14:                                        ; preds = %for.body12
  %22 = load i32, i32* %j, align 4
  %inc15 = add nsw i32 %22, 1
  store i32 %inc15, i32* %j, align 4
  br label %for.cond10

for.end16:                                        ; preds = %for.cond10
  %call17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %23 = load %struct.tFrac*, %struct.tFrac** %coeffs, align 4
  %24 = bitcast %struct.tFrac* %23 to i8*
  call void @free(i8* %24)
  ret void
}

declare noalias i8* @malloc(i32 %0) #2

declare void @free(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  call void @faulhaber(i32 %1)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %i, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind willreturn }
attributes #5 = { nounwind readnone }
attributes #6 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %b.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ne i32 %0, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %a.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %b.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem = srem i32 %1, %2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = srem %0, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %b.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %temp, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %a.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = srem %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -120454654
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for gcd()

; entering Souper's runOnFunction() for makeFrac()

; ModuleID = './Faulhabers_triangle.c.bc'
source_filename = "./Faulhabers_triangle.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque
%struct.tFrac = type { i32, i32 }

@.str = private unnamed_addr constant [6 x i8] c"%d/%d\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@stdout = external constant %struct._IO_FILE*, align 4
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @binomial(i32 %n, i32 %k) #0 {
entry:
  %retval = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %k.addr = alloca i32, align 4
  %num = alloca i32, align 4
  %denom = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %k, i32* %k.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %k.addr, align 4
  %cmp1 = icmp slt i32 %1, 0
  br i1 %cmp1, label %if.then, label %lor.lhs.false2

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %2 = load i32, i32* %n.addr, align 4
  %3 = load i32, i32* %k.addr, align 4
  %cmp3 = icmp slt i32 %2, %3
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false2, %lor.lhs.false, %entry
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false2
  %4 = load i32, i32* %n.addr, align 4
  %cmp4 = icmp eq i32 %4, 0
  br i1 %cmp4, label %if.then7, label %lor.lhs.false5

lor.lhs.false5:                                   ; preds = %if.end
  %5 = load i32, i32* %k.addr, align 4
  %cmp6 = icmp eq i32 %5, 0
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %lor.lhs.false5, %if.end
  store i32 1, i32* %retval, align 4
  br label %return

if.end8:                                          ; preds = %lor.lhs.false5
  store i32 1, i32* %num, align 4
  %6 = load i32, i32* %k.addr, align 4
  %add = add nsw i32 %6, 1
  store i32 %add, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end8
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %n.addr, align 4
  %cmp9 = icmp sle i32 %7, %8
  br i1 %cmp9, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i32, i32* %num, align 4
  %10 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %9, %10
  store i32 %mul, i32* %num, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %denom, align 4
  store i32 2, i32* %i, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc14, %for.end
  %12 = load i32, i32* %i, align 4
  %13 = load i32, i32* %n.addr, align 4
  %14 = load i32, i32* %k.addr, align 4
  %sub = sub nsw i32 %13, %14
  %cmp11 = icmp sle i32 %12, %sub
  br i1 %cmp11, label %for.body12, label %for.end16

for.body12:                                       ; preds = %for.cond10
  %15 = load i32, i32* %i, align 4
  %16 = load i32, i32* %denom, align 4
  %mul13 = mul nsw i32 %16, %15
  store i32 %mul13, i32* %denom, align 4
  br label %for.inc14

for.inc14:                                        ; preds = %for.body12
  %17 = load i32, i32* %i, align 4
  %inc15 = add nsw i32 %17, 1
  store i32 %inc15, i32* %i, align 4
  br label %for.cond10

for.end16:                                        ; preds = %for.cond10
  %18 = load i32, i32* %num, align 4
  %19 = load i32, i32* %denom, align 4
  %div = sdiv i32 %18, %19
  store i32 %div, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end16, %if.then7, %if.then
  %20 = load i32, i32* %retval, align 4
  ret i32 %20
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @gcd(i32 %a, i32 %b) #0 {
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %b.addr, align 4
  %cmp = icmp ne i32 %0, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i32, i32* %a.addr, align 4
  %2 = load i32, i32* %b.addr, align 4
  %rem = srem i32 %1, %2
  store i32 %rem, i32* %temp, align 4
  %3 = load i32, i32* %b.addr, align 4
  store i32 %3, i32* %a.addr, align 4
  %4 = load i32, i32* %temp, align 4
  store i32 %4, i32* %b.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %5 = load i32, i32* %a.addr, align 4
  ret i32 %5
}

; Function Attrs: noinline nounwind optnone
define hidden void @makeFrac(%struct.tFrac* noalias sret align 4 %agg.result, i32 %n, i32 %d) #0 {
entry:
  %n.addr = alloca i32, align 4
  %d.addr = alloca i32, align 4
  %g = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %d, i32* %d.addr, align 4
  %0 = load i32, i32* %d.addr, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %agg.result, i32 0, i32 0
  store i32 0, i32* %num, align 4
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %agg.result, i32 0, i32 1
  store i32 0, i32* %denom, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4
  %cmp1 = icmp eq i32 %1, 0
  br i1 %cmp1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.end
  store i32 1, i32* %d.addr, align 4
  br label %if.end7

if.else:                                          ; preds = %if.end
  %2 = load i32, i32* %d.addr, align 4
  %cmp3 = icmp slt i32 %2, 0
  br i1 %cmp3, label %if.then4, label %if.end6

if.then4:                                         ; preds = %if.else
  %3 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 0, %3
  store i32 %sub, i32* %n.addr, align 4
  %4 = load i32, i32* %d.addr, align 4
  %sub5 = sub nsw i32 0, %4
  store i32 %sub5, i32* %d.addr, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.then4, %if.else
  br label %if.end7

if.end7:                                          ; preds = %if.end6, %if.then2
  %5 = load i32, i32* %n.addr, align 4
  %6 = load i32, i32* %d.addr, align 4
  %call = call i32 @gcd(i32 %5, i32 %6)
  %call8 = call i32 @abs(i32 %call) #5
  store i32 %call8, i32* %g, align 4
  %7 = load i32, i32* %g, align 4
  %cmp9 = icmp sgt i32 %7, 1
  br i1 %cmp9, label %if.then10, label %if.end12

if.then10:                                        ; preds = %if.end7
  %8 = load i32, i32* %n.addr, align 4
  %9 = load i32, i32* %g, align 4
  %div = sdiv i32 %8, %9
  store i32 %div, i32* %n.addr, align 4
  %10 = load i32, i32* %d.addr, align 4
  %11 = load i32, i32* %g, align 4
  %div11 = sdiv i32 %10, %11
  store i32 %div11, i32* %d.addr, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then10, %if.end7
  %12 = load i32, i32* %n.addr, align 4
  %num13 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %agg.result, i32 0, i32 0
  store i32 %12, i32* %num13, align 4
  %13 = load i32, i32* %d.addr, align 4
  %denom14 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %agg.result, i32 0, i32 1
  store i32 %13, i32* %denom14, align 4
  br label %return

return:                                           ; preds = %if.end12, %if.then
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @abs(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @negateFrac(%struct.tFrac* noalias sret align 4 %agg.result, %struct.tFrac* byval(%struct.tFrac) align 4 %f) #0 {
entry:
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 0
  %0 = load i32, i32* %num, align 4
  %sub = sub nsw i32 0, %0
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 1
  %1 = load i32, i32* %denom, align 4
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.result, i32 %sub, i32 %1)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @subFrac(%struct.tFrac* noalias sret align 4 %agg.result, %struct.tFrac* byval(%struct.tFrac) align 4 %lhs, %struct.tFrac* byval(%struct.tFrac) align 4 %rhs) #0 {
entry:
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 0
  %0 = load i32, i32* %num, align 4
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 1
  %1 = load i32, i32* %denom, align 4
  %mul = mul nsw i32 %0, %1
  %denom1 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 1
  %2 = load i32, i32* %denom1, align 4
  %num2 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 0
  %3 = load i32, i32* %num2, align 4
  %mul3 = mul nsw i32 %2, %3
  %sub = sub nsw i32 %mul, %mul3
  %denom4 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 1
  %4 = load i32, i32* %denom4, align 4
  %denom5 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 1
  %5 = load i32, i32* %denom5, align 4
  %mul6 = mul nsw i32 %4, %5
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.result, i32 %sub, i32 %mul6)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @multFrac(%struct.tFrac* noalias sret align 4 %agg.result, %struct.tFrac* byval(%struct.tFrac) align 4 %lhs, %struct.tFrac* byval(%struct.tFrac) align 4 %rhs) #0 {
entry:
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 0
  %0 = load i32, i32* %num, align 4
  %num1 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 0
  %1 = load i32, i32* %num1, align 4
  %mul = mul nsw i32 %0, %1
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 1
  %2 = load i32, i32* %denom, align 4
  %denom2 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 1
  %3 = load i32, i32* %denom2, align 4
  %mul3 = mul nsw i32 %2, %3
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.result, i32 %mul, i32 %mul3)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @equalFrac(%struct.tFrac* byval(%struct.tFrac) align 4 %lhs, %struct.tFrac* byval(%struct.tFrac) align 4 %rhs) #0 {
entry:
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 0
  %0 = load i32, i32* %num, align 4
  %num1 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 0
  %1 = load i32, i32* %num1, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 1
  %2 = load i32, i32* %denom, align 4
  %denom2 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 1
  %3 = load i32, i32* %denom2, align 4
  %cmp3 = icmp eq i32 %2, %3
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp3, %land.rhs ]
  ret i1 %4
}

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @lessFrac(%struct.tFrac* byval(%struct.tFrac) align 4 %lhs, %struct.tFrac* byval(%struct.tFrac) align 4 %rhs) #0 {
entry:
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 0
  %0 = load i32, i32* %num, align 4
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 1
  %1 = load i32, i32* %denom, align 4
  %mul = mul nsw i32 %0, %1
  %num1 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 0
  %2 = load i32, i32* %num1, align 4
  %denom2 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 1
  %3 = load i32, i32* %denom2, align 4
  %mul3 = mul nsw i32 %2, %3
  %cmp = icmp slt i32 %mul, %mul3
  ret i1 %cmp
}

; Function Attrs: noinline nounwind optnone
define hidden void @printFrac(%struct.tFrac* byval(%struct.tFrac) align 4 %f) #0 {
entry:
  %buffer = alloca [7 x i8], align 1
  %len = alloca i32, align 4
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 1
  %0 = load i32, i32* %denom, align 4
  %cmp = icmp ne i32 %0, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %arraydecay = getelementptr inbounds [7 x i8], [7 x i8]* %buffer, i32 0, i32 0
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 0
  %1 = load i32, i32* %num, align 4
  %denom1 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 1
  %2 = load i32, i32* %denom1, align 4
  %call = call i32 (i8*, i32, i8*, ...) @snprintf(i8* %arraydecay, i32 7, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i32 %1, i32 %2)
  br label %if.end

if.else:                                          ; preds = %entry
  %arraydecay2 = getelementptr inbounds [7 x i8], [7 x i8]* %buffer, i32 0, i32 0
  %num3 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 0
  %3 = load i32, i32* %num3, align 4
  %call4 = call i32 (i8*, i32, i8*, ...) @snprintf(i8* %arraydecay2, i32 7, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %3)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %arraydecay5 = getelementptr inbounds [7 x i8], [7 x i8]* %buffer, i32 0, i32 0
  %call6 = call i32 @strlen(i8* %arraydecay5) #6
  %sub = sub i32 7, %call6
  store i32 %sub, i32* %len, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %4 = load i32, i32* %len, align 4
  %dec = add nsw i32 %4, -1
  store i32 %dec, i32* %len, align 4
  %cmp7 = icmp sgt i32 %4, 0
  br i1 %cmp7, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call8 = call i32 @putc(i32 32, %struct._IO_FILE* %5)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %arraydecay9 = getelementptr inbounds [7 x i8], [7 x i8]* %buffer, i32 0, i32 0
  %call10 = call i32 (i8*, ...) @printf(i8* %arraydecay9)
  ret void
}

declare i32 @snprintf(i8* %0, i32 %1, i8* %2, ...) #2

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #3

declare i32 @putc(i32 %0, %struct._IO_FILE* %1) #2

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden void @bernoulli(%struct.tFrac* noalias sret align 4 %agg.result, i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %a = alloca [16 x %struct.tFrac], align 16
  %j = alloca i32, align 4
  %m = alloca i32, align 4
  %tmp = alloca %struct.tFrac, align 4
  %tmp9 = alloca %struct.tFrac, align 4
  %agg.tmp = alloca %struct.tFrac, align 4
  %agg.tmp13 = alloca %struct.tFrac, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 0
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %arrayidx, i32 0, i32 0
  store i32 0, i32* %num, align 16
  %arrayidx1 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 0
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %arrayidx1, i32 0, i32 1
  store i32 0, i32* %denom, align 4
  %arrayidx2 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 0
  %1 = bitcast %struct.tFrac* %agg.result to i8*
  %2 = bitcast %struct.tFrac* %arrayidx2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %1, i8* align 16 %2, i32 8, i1 false)
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %m, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc14, %if.end
  %3 = load i32, i32* %m, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp3 = icmp sle i32 %3, %4
  br i1 %cmp3, label %for.body, label %for.end15

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %m, align 4
  %arrayidx4 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 %5
  %6 = load i32, i32* %m, align 4
  %add = add nsw i32 %6, 1
  call void @makeFrac(%struct.tFrac* sret align 4 %tmp, i32 1, i32 %add)
  %7 = bitcast %struct.tFrac* %arrayidx4 to i8*
  %8 = bitcast %struct.tFrac* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %7, i8* align 4 %8, i32 8, i1 false)
  %9 = load i32, i32* %m, align 4
  store i32 %9, i32* %j, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %for.body
  %10 = load i32, i32* %j, align 4
  %cmp6 = icmp sge i32 %10, 1
  br i1 %cmp6, label %for.body7, label %for.end

for.body7:                                        ; preds = %for.cond5
  %11 = load i32, i32* %j, align 4
  %sub = sub nsw i32 %11, 1
  %arrayidx8 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 %sub
  %12 = load i32, i32* %j, align 4
  %sub10 = sub nsw i32 %12, 1
  %arrayidx11 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 %sub10
  %13 = load i32, i32* %j, align 4
  %arrayidx12 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 %13
  call void @subFrac(%struct.tFrac* sret align 4 %agg.tmp, %struct.tFrac* byval(%struct.tFrac) align 4 %arrayidx11, %struct.tFrac* byval(%struct.tFrac) align 4 %arrayidx12)
  %14 = load i32, i32* %j, align 4
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.tmp13, i32 %14, i32 1)
  call void @multFrac(%struct.tFrac* sret align 4 %tmp9, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp13)
  %15 = bitcast %struct.tFrac* %arrayidx8 to i8*
  %16 = bitcast %struct.tFrac* %tmp9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %15, i8* align 4 %16, i32 8, i1 false)
  br label %for.inc

for.inc:                                          ; preds = %for.body7
  %17 = load i32, i32* %j, align 4
  %dec = add nsw i32 %17, -1
  store i32 %dec, i32* %j, align 4
  br label %for.cond5

for.end:                                          ; preds = %for.cond5
  br label %for.inc14

for.inc14:                                        ; preds = %for.end
  %18 = load i32, i32* %m, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %m, align 4
  br label %for.cond

for.end15:                                        ; preds = %for.cond
  %19 = load i32, i32* %n.addr, align 4
  %cmp16 = icmp ne i32 %19, 1
  br i1 %cmp16, label %if.then17, label %if.end19

if.then17:                                        ; preds = %for.end15
  %arrayidx18 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 0
  %20 = bitcast %struct.tFrac* %agg.result to i8*
  %21 = bitcast %struct.tFrac* %arrayidx18 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %20, i8* align 16 %21, i32 8, i1 false)
  br label %return

if.end19:                                         ; preds = %for.end15
  %arrayidx20 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 0
  call void @negateFrac(%struct.tFrac* sret align 4 %agg.result, %struct.tFrac* byval(%struct.tFrac) align 4 %arrayidx20)
  br label %return

return:                                           ; preds = %if.end19, %if.then17, %if.then
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #4

; Function Attrs: noinline nounwind optnone
define hidden void @faulhaber(i32 %p) #0 {
entry:
  %p.addr = alloca i32, align 4
  %q = alloca %struct.tFrac, align 4
  %coeffs = alloca %struct.tFrac*, align 4
  %j = alloca i32, align 4
  %sign = alloca i32, align 4
  %tmp = alloca %struct.tFrac, align 4
  %tmp3 = alloca %struct.tFrac, align 4
  %agg.tmp = alloca %struct.tFrac, align 4
  %agg.tmp4 = alloca %struct.tFrac, align 4
  %agg.tmp5 = alloca %struct.tFrac, align 4
  %agg.tmp6 = alloca %struct.tFrac, align 4
  %agg.tmp9 = alloca %struct.tFrac, align 4
  store i32 %p, i32* %p.addr, align 4
  %0 = load i32, i32* %p.addr, align 4
  %add = add nsw i32 %0, 1
  %mul = mul i32 8, %add
  %call = call noalias i8* @malloc(i32 %mul)
  %1 = bitcast i8* %call to %struct.tFrac*
  store %struct.tFrac* %1, %struct.tFrac** %coeffs, align 4
  %2 = load i32, i32* %p.addr, align 4
  %add1 = add nsw i32 %2, 1
  call void @makeFrac(%struct.tFrac* sret align 4 %tmp, i32 1, i32 %add1)
  %3 = bitcast %struct.tFrac* %q to i8*
  %4 = bitcast %struct.tFrac* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %3, i8* align 4 %4, i32 8, i1 false)
  store i32 -1, i32* %sign, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %p.addr, align 4
  %cmp = icmp sle i32 %5, %6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i32, i32* %sign, align 4
  %mul2 = mul nsw i32 -1, %7
  store i32 %mul2, i32* %sign, align 4
  %8 = load %struct.tFrac*, %struct.tFrac** %coeffs, align 4
  %9 = load i32, i32* %p.addr, align 4
  %10 = load i32, i32* %j, align 4
  %sub = sub nsw i32 %9, %10
  %arrayidx = getelementptr inbounds %struct.tFrac, %struct.tFrac* %8, i32 %sub
  %11 = load i32, i32* %sign, align 4
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.tmp5, i32 %11, i32 1)
  call void @multFrac(%struct.tFrac* sret align 4 %agg.tmp4, %struct.tFrac* byval(%struct.tFrac) align 4 %q, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp5)
  %12 = load i32, i32* %p.addr, align 4
  %add7 = add nsw i32 %12, 1
  %13 = load i32, i32* %j, align 4
  %call8 = call i32 @binomial(i32 %add7, i32 %13)
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.tmp6, i32 %call8, i32 1)
  call void @multFrac(%struct.tFrac* sret align 4 %agg.tmp, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp4, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp6)
  %14 = load i32, i32* %j, align 4
  call void @bernoulli(%struct.tFrac* sret align 4 %agg.tmp9, i32 %14)
  call void @multFrac(%struct.tFrac* sret align 4 %tmp3, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp9)
  %15 = bitcast %struct.tFrac* %arrayidx to i8*
  %16 = bitcast %struct.tFrac* %tmp3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %15, i8* align 4 %16, i32 8, i1 false)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %17 = load i32, i32* %j, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc14, %for.end
  %18 = load i32, i32* %j, align 4
  %19 = load i32, i32* %p.addr, align 4
  %cmp11 = icmp sle i32 %18, %19
  br i1 %cmp11, label %for.body12, label %for.end16

for.body12:                                       ; preds = %for.cond10
  %20 = load %struct.tFrac*, %struct.tFrac** %coeffs, align 4
  %21 = load i32, i32* %j, align 4
  %arrayidx13 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %20, i32 %21
  call void @printFrac(%struct.tFrac* byval(%struct.tFrac) align 4 %arrayidx13)
  br label %for.inc14

for.inc14:                                        ; preds = %for.body12
  %22 = load i32, i32* %j, align 4
  %inc15 = add nsw i32 %22, 1
  store i32 %inc15, i32* %j, align 4
  br label %for.cond10

for.end16:                                        ; preds = %for.cond10
  %call17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %23 = load %struct.tFrac*, %struct.tFrac** %coeffs, align 4
  %24 = bitcast %struct.tFrac* %23 to i8*
  call void @free(i8* %24)
  ret void
}

declare noalias i8* @malloc(i32 %0) #2

declare void @free(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  call void @faulhaber(i32 %1)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %i, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind willreturn }
attributes #5 = { nounwind readnone }
attributes #6 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %d.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %0, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = icmp eq i32 %1, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %d.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp3 = icmp slt i32 %2, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 0:i32
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 0, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %d.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub5 = sub nsw i32 0, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %d.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 @gcd(i32 %5, i32 %6)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call8 = call i32 @abs(i32 %call) #5
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 0:i32, %0
%2:i32 = subnsw 0:i32, %0
%3:i32 = select %1, %0, %2
infer %3

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %g, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp9 = icmp sgt i32 %7, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %g, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div = sdiv i32 %8, %9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sdiv %0, %1
infer %2

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %d.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %g, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div11 = sdiv i32 %10, %11
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sdiv %0, %1
infer %2

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %d.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -536870912
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt 0:i32, %0
%2:i32 = subnsw 0:i32, %0
%3:i32 = select %1, %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 497679720
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for makeFrac()

; entering Souper's runOnFunction() for negateFrac()

; ModuleID = './Faulhabers_triangle.c.bc'
source_filename = "./Faulhabers_triangle.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque
%struct.tFrac = type { i32, i32 }

@.str = private unnamed_addr constant [6 x i8] c"%d/%d\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@stdout = external constant %struct._IO_FILE*, align 4
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @binomial(i32 %n, i32 %k) #0 {
entry:
  %retval = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %k.addr = alloca i32, align 4
  %num = alloca i32, align 4
  %denom = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %k, i32* %k.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %k.addr, align 4
  %cmp1 = icmp slt i32 %1, 0
  br i1 %cmp1, label %if.then, label %lor.lhs.false2

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %2 = load i32, i32* %n.addr, align 4
  %3 = load i32, i32* %k.addr, align 4
  %cmp3 = icmp slt i32 %2, %3
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false2, %lor.lhs.false, %entry
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false2
  %4 = load i32, i32* %n.addr, align 4
  %cmp4 = icmp eq i32 %4, 0
  br i1 %cmp4, label %if.then7, label %lor.lhs.false5

lor.lhs.false5:                                   ; preds = %if.end
  %5 = load i32, i32* %k.addr, align 4
  %cmp6 = icmp eq i32 %5, 0
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %lor.lhs.false5, %if.end
  store i32 1, i32* %retval, align 4
  br label %return

if.end8:                                          ; preds = %lor.lhs.false5
  store i32 1, i32* %num, align 4
  %6 = load i32, i32* %k.addr, align 4
  %add = add nsw i32 %6, 1
  store i32 %add, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end8
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %n.addr, align 4
  %cmp9 = icmp sle i32 %7, %8
  br i1 %cmp9, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i32, i32* %num, align 4
  %10 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %9, %10
  store i32 %mul, i32* %num, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %denom, align 4
  store i32 2, i32* %i, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc14, %for.end
  %12 = load i32, i32* %i, align 4
  %13 = load i32, i32* %n.addr, align 4
  %14 = load i32, i32* %k.addr, align 4
  %sub = sub nsw i32 %13, %14
  %cmp11 = icmp sle i32 %12, %sub
  br i1 %cmp11, label %for.body12, label %for.end16

for.body12:                                       ; preds = %for.cond10
  %15 = load i32, i32* %i, align 4
  %16 = load i32, i32* %denom, align 4
  %mul13 = mul nsw i32 %16, %15
  store i32 %mul13, i32* %denom, align 4
  br label %for.inc14

for.inc14:                                        ; preds = %for.body12
  %17 = load i32, i32* %i, align 4
  %inc15 = add nsw i32 %17, 1
  store i32 %inc15, i32* %i, align 4
  br label %for.cond10

for.end16:                                        ; preds = %for.cond10
  %18 = load i32, i32* %num, align 4
  %19 = load i32, i32* %denom, align 4
  %div = sdiv i32 %18, %19
  store i32 %div, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end16, %if.then7, %if.then
  %20 = load i32, i32* %retval, align 4
  ret i32 %20
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @gcd(i32 %a, i32 %b) #0 {
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %b.addr, align 4
  %cmp = icmp ne i32 %0, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i32, i32* %a.addr, align 4
  %2 = load i32, i32* %b.addr, align 4
  %rem = srem i32 %1, %2
  store i32 %rem, i32* %temp, align 4
  %3 = load i32, i32* %b.addr, align 4
  store i32 %3, i32* %a.addr, align 4
  %4 = load i32, i32* %temp, align 4
  store i32 %4, i32* %b.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %5 = load i32, i32* %a.addr, align 4
  ret i32 %5
}

; Function Attrs: noinline nounwind optnone
define hidden void @makeFrac(%struct.tFrac* noalias sret align 4 %agg.result, i32 %n, i32 %d) #0 {
entry:
  %n.addr = alloca i32, align 4
  %d.addr = alloca i32, align 4
  %g = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %d, i32* %d.addr, align 4
  %0 = load i32, i32* %d.addr, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %agg.result, i32 0, i32 0
  store i32 0, i32* %num, align 4
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %agg.result, i32 0, i32 1
  store i32 0, i32* %denom, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4
  %cmp1 = icmp eq i32 %1, 0
  br i1 %cmp1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.end
  store i32 1, i32* %d.addr, align 4
  br label %if.end7

if.else:                                          ; preds = %if.end
  %2 = load i32, i32* %d.addr, align 4
  %cmp3 = icmp slt i32 %2, 0
  br i1 %cmp3, label %if.then4, label %if.end6

if.then4:                                         ; preds = %if.else
  %3 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 0, %3
  store i32 %sub, i32* %n.addr, align 4
  %4 = load i32, i32* %d.addr, align 4
  %sub5 = sub nsw i32 0, %4
  store i32 %sub5, i32* %d.addr, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.then4, %if.else
  br label %if.end7

if.end7:                                          ; preds = %if.end6, %if.then2
  %5 = load i32, i32* %n.addr, align 4
  %6 = load i32, i32* %d.addr, align 4
  %call = call i32 @gcd(i32 %5, i32 %6)
  %call8 = call i32 @abs(i32 %call) #5
  store i32 %call8, i32* %g, align 4
  %7 = load i32, i32* %g, align 4
  %cmp9 = icmp sgt i32 %7, 1
  br i1 %cmp9, label %if.then10, label %if.end12

if.then10:                                        ; preds = %if.end7
  %8 = load i32, i32* %n.addr, align 4
  %9 = load i32, i32* %g, align 4
  %div = sdiv i32 %8, %9
  store i32 %div, i32* %n.addr, align 4
  %10 = load i32, i32* %d.addr, align 4
  %11 = load i32, i32* %g, align 4
  %div11 = sdiv i32 %10, %11
  store i32 %div11, i32* %d.addr, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then10, %if.end7
  %12 = load i32, i32* %n.addr, align 4
  %num13 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %agg.result, i32 0, i32 0
  store i32 %12, i32* %num13, align 4
  %13 = load i32, i32* %d.addr, align 4
  %denom14 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %agg.result, i32 0, i32 1
  store i32 %13, i32* %denom14, align 4
  br label %return

return:                                           ; preds = %if.end12, %if.then
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @abs(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @negateFrac(%struct.tFrac* noalias sret align 4 %agg.result, %struct.tFrac* byval(%struct.tFrac) align 4 %f) #0 {
entry:
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 0
  %0 = load i32, i32* %num, align 4
  %sub = sub nsw i32 0, %0
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 1
  %1 = load i32, i32* %denom, align 4
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.result, i32 %sub, i32 %1)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @subFrac(%struct.tFrac* noalias sret align 4 %agg.result, %struct.tFrac* byval(%struct.tFrac) align 4 %lhs, %struct.tFrac* byval(%struct.tFrac) align 4 %rhs) #0 {
entry:
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 0
  %0 = load i32, i32* %num, align 4
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 1
  %1 = load i32, i32* %denom, align 4
  %mul = mul nsw i32 %0, %1
  %denom1 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 1
  %2 = load i32, i32* %denom1, align 4
  %num2 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 0
  %3 = load i32, i32* %num2, align 4
  %mul3 = mul nsw i32 %2, %3
  %sub = sub nsw i32 %mul, %mul3
  %denom4 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 1
  %4 = load i32, i32* %denom4, align 4
  %denom5 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 1
  %5 = load i32, i32* %denom5, align 4
  %mul6 = mul nsw i32 %4, %5
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.result, i32 %sub, i32 %mul6)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @multFrac(%struct.tFrac* noalias sret align 4 %agg.result, %struct.tFrac* byval(%struct.tFrac) align 4 %lhs, %struct.tFrac* byval(%struct.tFrac) align 4 %rhs) #0 {
entry:
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 0
  %0 = load i32, i32* %num, align 4
  %num1 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 0
  %1 = load i32, i32* %num1, align 4
  %mul = mul nsw i32 %0, %1
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 1
  %2 = load i32, i32* %denom, align 4
  %denom2 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 1
  %3 = load i32, i32* %denom2, align 4
  %mul3 = mul nsw i32 %2, %3
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.result, i32 %mul, i32 %mul3)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @equalFrac(%struct.tFrac* byval(%struct.tFrac) align 4 %lhs, %struct.tFrac* byval(%struct.tFrac) align 4 %rhs) #0 {
entry:
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 0
  %0 = load i32, i32* %num, align 4
  %num1 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 0
  %1 = load i32, i32* %num1, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 1
  %2 = load i32, i32* %denom, align 4
  %denom2 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 1
  %3 = load i32, i32* %denom2, align 4
  %cmp3 = icmp eq i32 %2, %3
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp3, %land.rhs ]
  ret i1 %4
}

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @lessFrac(%struct.tFrac* byval(%struct.tFrac) align 4 %lhs, %struct.tFrac* byval(%struct.tFrac) align 4 %rhs) #0 {
entry:
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 0
  %0 = load i32, i32* %num, align 4
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 1
  %1 = load i32, i32* %denom, align 4
  %mul = mul nsw i32 %0, %1
  %num1 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 0
  %2 = load i32, i32* %num1, align 4
  %denom2 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 1
  %3 = load i32, i32* %denom2, align 4
  %mul3 = mul nsw i32 %2, %3
  %cmp = icmp slt i32 %mul, %mul3
  ret i1 %cmp
}

; Function Attrs: noinline nounwind optnone
define hidden void @printFrac(%struct.tFrac* byval(%struct.tFrac) align 4 %f) #0 {
entry:
  %buffer = alloca [7 x i8], align 1
  %len = alloca i32, align 4
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 1
  %0 = load i32, i32* %denom, align 4
  %cmp = icmp ne i32 %0, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %arraydecay = getelementptr inbounds [7 x i8], [7 x i8]* %buffer, i32 0, i32 0
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 0
  %1 = load i32, i32* %num, align 4
  %denom1 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 1
  %2 = load i32, i32* %denom1, align 4
  %call = call i32 (i8*, i32, i8*, ...) @snprintf(i8* %arraydecay, i32 7, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i32 %1, i32 %2)
  br label %if.end

if.else:                                          ; preds = %entry
  %arraydecay2 = getelementptr inbounds [7 x i8], [7 x i8]* %buffer, i32 0, i32 0
  %num3 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 0
  %3 = load i32, i32* %num3, align 4
  %call4 = call i32 (i8*, i32, i8*, ...) @snprintf(i8* %arraydecay2, i32 7, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %3)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %arraydecay5 = getelementptr inbounds [7 x i8], [7 x i8]* %buffer, i32 0, i32 0
  %call6 = call i32 @strlen(i8* %arraydecay5) #6
  %sub = sub i32 7, %call6
  store i32 %sub, i32* %len, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %4 = load i32, i32* %len, align 4
  %dec = add nsw i32 %4, -1
  store i32 %dec, i32* %len, align 4
  %cmp7 = icmp sgt i32 %4, 0
  br i1 %cmp7, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call8 = call i32 @putc(i32 32, %struct._IO_FILE* %5)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %arraydecay9 = getelementptr inbounds [7 x i8], [7 x i8]* %buffer, i32 0, i32 0
  %call10 = call i32 (i8*, ...) @printf(i8* %arraydecay9)
  ret void
}

declare i32 @snprintf(i8* %0, i32 %1, i8* %2, ...) #2

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #3

declare i32 @putc(i32 %0, %struct._IO_FILE* %1) #2

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden void @bernoulli(%struct.tFrac* noalias sret align 4 %agg.result, i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %a = alloca [16 x %struct.tFrac], align 16
  %j = alloca i32, align 4
  %m = alloca i32, align 4
  %tmp = alloca %struct.tFrac, align 4
  %tmp9 = alloca %struct.tFrac, align 4
  %agg.tmp = alloca %struct.tFrac, align 4
  %agg.tmp13 = alloca %struct.tFrac, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 0
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %arrayidx, i32 0, i32 0
  store i32 0, i32* %num, align 16
  %arrayidx1 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 0
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %arrayidx1, i32 0, i32 1
  store i32 0, i32* %denom, align 4
  %arrayidx2 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 0
  %1 = bitcast %struct.tFrac* %agg.result to i8*
  %2 = bitcast %struct.tFrac* %arrayidx2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %1, i8* align 16 %2, i32 8, i1 false)
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %m, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc14, %if.end
  %3 = load i32, i32* %m, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp3 = icmp sle i32 %3, %4
  br i1 %cmp3, label %for.body, label %for.end15

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %m, align 4
  %arrayidx4 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 %5
  %6 = load i32, i32* %m, align 4
  %add = add nsw i32 %6, 1
  call void @makeFrac(%struct.tFrac* sret align 4 %tmp, i32 1, i32 %add)
  %7 = bitcast %struct.tFrac* %arrayidx4 to i8*
  %8 = bitcast %struct.tFrac* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %7, i8* align 4 %8, i32 8, i1 false)
  %9 = load i32, i32* %m, align 4
  store i32 %9, i32* %j, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %for.body
  %10 = load i32, i32* %j, align 4
  %cmp6 = icmp sge i32 %10, 1
  br i1 %cmp6, label %for.body7, label %for.end

for.body7:                                        ; preds = %for.cond5
  %11 = load i32, i32* %j, align 4
  %sub = sub nsw i32 %11, 1
  %arrayidx8 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 %sub
  %12 = load i32, i32* %j, align 4
  %sub10 = sub nsw i32 %12, 1
  %arrayidx11 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 %sub10
  %13 = load i32, i32* %j, align 4
  %arrayidx12 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 %13
  call void @subFrac(%struct.tFrac* sret align 4 %agg.tmp, %struct.tFrac* byval(%struct.tFrac) align 4 %arrayidx11, %struct.tFrac* byval(%struct.tFrac) align 4 %arrayidx12)
  %14 = load i32, i32* %j, align 4
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.tmp13, i32 %14, i32 1)
  call void @multFrac(%struct.tFrac* sret align 4 %tmp9, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp13)
  %15 = bitcast %struct.tFrac* %arrayidx8 to i8*
  %16 = bitcast %struct.tFrac* %tmp9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %15, i8* align 4 %16, i32 8, i1 false)
  br label %for.inc

for.inc:                                          ; preds = %for.body7
  %17 = load i32, i32* %j, align 4
  %dec = add nsw i32 %17, -1
  store i32 %dec, i32* %j, align 4
  br label %for.cond5

for.end:                                          ; preds = %for.cond5
  br label %for.inc14

for.inc14:                                        ; preds = %for.end
  %18 = load i32, i32* %m, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %m, align 4
  br label %for.cond

for.end15:                                        ; preds = %for.cond
  %19 = load i32, i32* %n.addr, align 4
  %cmp16 = icmp ne i32 %19, 1
  br i1 %cmp16, label %if.then17, label %if.end19

if.then17:                                        ; preds = %for.end15
  %arrayidx18 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 0
  %20 = bitcast %struct.tFrac* %agg.result to i8*
  %21 = bitcast %struct.tFrac* %arrayidx18 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %20, i8* align 16 %21, i32 8, i1 false)
  br label %return

if.end19:                                         ; preds = %for.end15
  %arrayidx20 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 0
  call void @negateFrac(%struct.tFrac* sret align 4 %agg.result, %struct.tFrac* byval(%struct.tFrac) align 4 %arrayidx20)
  br label %return

return:                                           ; preds = %if.end19, %if.then17, %if.then
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #4

; Function Attrs: noinline nounwind optnone
define hidden void @faulhaber(i32 %p) #0 {
entry:
  %p.addr = alloca i32, align 4
  %q = alloca %struct.tFrac, align 4
  %coeffs = alloca %struct.tFrac*, align 4
  %j = alloca i32, align 4
  %sign = alloca i32, align 4
  %tmp = alloca %struct.tFrac, align 4
  %tmp3 = alloca %struct.tFrac, align 4
  %agg.tmp = alloca %struct.tFrac, align 4
  %agg.tmp4 = alloca %struct.tFrac, align 4
  %agg.tmp5 = alloca %struct.tFrac, align 4
  %agg.tmp6 = alloca %struct.tFrac, align 4
  %agg.tmp9 = alloca %struct.tFrac, align 4
  store i32 %p, i32* %p.addr, align 4
  %0 = load i32, i32* %p.addr, align 4
  %add = add nsw i32 %0, 1
  %mul = mul i32 8, %add
  %call = call noalias i8* @malloc(i32 %mul)
  %1 = bitcast i8* %call to %struct.tFrac*
  store %struct.tFrac* %1, %struct.tFrac** %coeffs, align 4
  %2 = load i32, i32* %p.addr, align 4
  %add1 = add nsw i32 %2, 1
  call void @makeFrac(%struct.tFrac* sret align 4 %tmp, i32 1, i32 %add1)
  %3 = bitcast %struct.tFrac* %q to i8*
  %4 = bitcast %struct.tFrac* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %3, i8* align 4 %4, i32 8, i1 false)
  store i32 -1, i32* %sign, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %p.addr, align 4
  %cmp = icmp sle i32 %5, %6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i32, i32* %sign, align 4
  %mul2 = mul nsw i32 -1, %7
  store i32 %mul2, i32* %sign, align 4
  %8 = load %struct.tFrac*, %struct.tFrac** %coeffs, align 4
  %9 = load i32, i32* %p.addr, align 4
  %10 = load i32, i32* %j, align 4
  %sub = sub nsw i32 %9, %10
  %arrayidx = getelementptr inbounds %struct.tFrac, %struct.tFrac* %8, i32 %sub
  %11 = load i32, i32* %sign, align 4
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.tmp5, i32 %11, i32 1)
  call void @multFrac(%struct.tFrac* sret align 4 %agg.tmp4, %struct.tFrac* byval(%struct.tFrac) align 4 %q, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp5)
  %12 = load i32, i32* %p.addr, align 4
  %add7 = add nsw i32 %12, 1
  %13 = load i32, i32* %j, align 4
  %call8 = call i32 @binomial(i32 %add7, i32 %13)
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.tmp6, i32 %call8, i32 1)
  call void @multFrac(%struct.tFrac* sret align 4 %agg.tmp, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp4, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp6)
  %14 = load i32, i32* %j, align 4
  call void @bernoulli(%struct.tFrac* sret align 4 %agg.tmp9, i32 %14)
  call void @multFrac(%struct.tFrac* sret align 4 %tmp3, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp9)
  %15 = bitcast %struct.tFrac* %arrayidx to i8*
  %16 = bitcast %struct.tFrac* %tmp3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %15, i8* align 4 %16, i32 8, i1 false)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %17 = load i32, i32* %j, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc14, %for.end
  %18 = load i32, i32* %j, align 4
  %19 = load i32, i32* %p.addr, align 4
  %cmp11 = icmp sle i32 %18, %19
  br i1 %cmp11, label %for.body12, label %for.end16

for.body12:                                       ; preds = %for.cond10
  %20 = load %struct.tFrac*, %struct.tFrac** %coeffs, align 4
  %21 = load i32, i32* %j, align 4
  %arrayidx13 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %20, i32 %21
  call void @printFrac(%struct.tFrac* byval(%struct.tFrac) align 4 %arrayidx13)
  br label %for.inc14

for.inc14:                                        ; preds = %for.body12
  %22 = load i32, i32* %j, align 4
  %inc15 = add nsw i32 %22, 1
  store i32 %inc15, i32* %j, align 4
  br label %for.cond10

for.end16:                                        ; preds = %for.cond10
  %call17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %23 = load %struct.tFrac*, %struct.tFrac** %coeffs, align 4
  %24 = bitcast %struct.tFrac* %23 to i8*
  call void @free(i8* %24)
  ret void
}

declare noalias i8* @malloc(i32 %0) #2

declare void @free(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  call void @faulhaber(i32 %1)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %i, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind willreturn }
attributes #5 = { nounwind readnone }
attributes #6 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %num, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 0, %0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %denom, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for negateFrac()

; entering Souper's runOnFunction() for subFrac()

; ModuleID = './Faulhabers_triangle.c.bc'
source_filename = "./Faulhabers_triangle.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque
%struct.tFrac = type { i32, i32 }

@.str = private unnamed_addr constant [6 x i8] c"%d/%d\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@stdout = external constant %struct._IO_FILE*, align 4
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @binomial(i32 %n, i32 %k) #0 {
entry:
  %retval = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %k.addr = alloca i32, align 4
  %num = alloca i32, align 4
  %denom = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %k, i32* %k.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %k.addr, align 4
  %cmp1 = icmp slt i32 %1, 0
  br i1 %cmp1, label %if.then, label %lor.lhs.false2

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %2 = load i32, i32* %n.addr, align 4
  %3 = load i32, i32* %k.addr, align 4
  %cmp3 = icmp slt i32 %2, %3
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false2, %lor.lhs.false, %entry
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false2
  %4 = load i32, i32* %n.addr, align 4
  %cmp4 = icmp eq i32 %4, 0
  br i1 %cmp4, label %if.then7, label %lor.lhs.false5

lor.lhs.false5:                                   ; preds = %if.end
  %5 = load i32, i32* %k.addr, align 4
  %cmp6 = icmp eq i32 %5, 0
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %lor.lhs.false5, %if.end
  store i32 1, i32* %retval, align 4
  br label %return

if.end8:                                          ; preds = %lor.lhs.false5
  store i32 1, i32* %num, align 4
  %6 = load i32, i32* %k.addr, align 4
  %add = add nsw i32 %6, 1
  store i32 %add, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end8
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %n.addr, align 4
  %cmp9 = icmp sle i32 %7, %8
  br i1 %cmp9, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i32, i32* %num, align 4
  %10 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %9, %10
  store i32 %mul, i32* %num, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %denom, align 4
  store i32 2, i32* %i, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc14, %for.end
  %12 = load i32, i32* %i, align 4
  %13 = load i32, i32* %n.addr, align 4
  %14 = load i32, i32* %k.addr, align 4
  %sub = sub nsw i32 %13, %14
  %cmp11 = icmp sle i32 %12, %sub
  br i1 %cmp11, label %for.body12, label %for.end16

for.body12:                                       ; preds = %for.cond10
  %15 = load i32, i32* %i, align 4
  %16 = load i32, i32* %denom, align 4
  %mul13 = mul nsw i32 %16, %15
  store i32 %mul13, i32* %denom, align 4
  br label %for.inc14

for.inc14:                                        ; preds = %for.body12
  %17 = load i32, i32* %i, align 4
  %inc15 = add nsw i32 %17, 1
  store i32 %inc15, i32* %i, align 4
  br label %for.cond10

for.end16:                                        ; preds = %for.cond10
  %18 = load i32, i32* %num, align 4
  %19 = load i32, i32* %denom, align 4
  %div = sdiv i32 %18, %19
  store i32 %div, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end16, %if.then7, %if.then
  %20 = load i32, i32* %retval, align 4
  ret i32 %20
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @gcd(i32 %a, i32 %b) #0 {
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %b.addr, align 4
  %cmp = icmp ne i32 %0, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i32, i32* %a.addr, align 4
  %2 = load i32, i32* %b.addr, align 4
  %rem = srem i32 %1, %2
  store i32 %rem, i32* %temp, align 4
  %3 = load i32, i32* %b.addr, align 4
  store i32 %3, i32* %a.addr, align 4
  %4 = load i32, i32* %temp, align 4
  store i32 %4, i32* %b.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %5 = load i32, i32* %a.addr, align 4
  ret i32 %5
}

; Function Attrs: noinline nounwind optnone
define hidden void @makeFrac(%struct.tFrac* noalias sret align 4 %agg.result, i32 %n, i32 %d) #0 {
entry:
  %n.addr = alloca i32, align 4
  %d.addr = alloca i32, align 4
  %g = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %d, i32* %d.addr, align 4
  %0 = load i32, i32* %d.addr, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %agg.result, i32 0, i32 0
  store i32 0, i32* %num, align 4
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %agg.result, i32 0, i32 1
  store i32 0, i32* %denom, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4
  %cmp1 = icmp eq i32 %1, 0
  br i1 %cmp1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.end
  store i32 1, i32* %d.addr, align 4
  br label %if.end7

if.else:                                          ; preds = %if.end
  %2 = load i32, i32* %d.addr, align 4
  %cmp3 = icmp slt i32 %2, 0
  br i1 %cmp3, label %if.then4, label %if.end6

if.then4:                                         ; preds = %if.else
  %3 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 0, %3
  store i32 %sub, i32* %n.addr, align 4
  %4 = load i32, i32* %d.addr, align 4
  %sub5 = sub nsw i32 0, %4
  store i32 %sub5, i32* %d.addr, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.then4, %if.else
  br label %if.end7

if.end7:                                          ; preds = %if.end6, %if.then2
  %5 = load i32, i32* %n.addr, align 4
  %6 = load i32, i32* %d.addr, align 4
  %call = call i32 @gcd(i32 %5, i32 %6)
  %call8 = call i32 @abs(i32 %call) #5
  store i32 %call8, i32* %g, align 4
  %7 = load i32, i32* %g, align 4
  %cmp9 = icmp sgt i32 %7, 1
  br i1 %cmp9, label %if.then10, label %if.end12

if.then10:                                        ; preds = %if.end7
  %8 = load i32, i32* %n.addr, align 4
  %9 = load i32, i32* %g, align 4
  %div = sdiv i32 %8, %9
  store i32 %div, i32* %n.addr, align 4
  %10 = load i32, i32* %d.addr, align 4
  %11 = load i32, i32* %g, align 4
  %div11 = sdiv i32 %10, %11
  store i32 %div11, i32* %d.addr, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then10, %if.end7
  %12 = load i32, i32* %n.addr, align 4
  %num13 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %agg.result, i32 0, i32 0
  store i32 %12, i32* %num13, align 4
  %13 = load i32, i32* %d.addr, align 4
  %denom14 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %agg.result, i32 0, i32 1
  store i32 %13, i32* %denom14, align 4
  br label %return

return:                                           ; preds = %if.end12, %if.then
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @abs(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @negateFrac(%struct.tFrac* noalias sret align 4 %agg.result, %struct.tFrac* byval(%struct.tFrac) align 4 %f) #0 {
entry:
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 0
  %0 = load i32, i32* %num, align 4
  %sub = sub nsw i32 0, %0
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 1
  %1 = load i32, i32* %denom, align 4
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.result, i32 %sub, i32 %1)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @subFrac(%struct.tFrac* noalias sret align 4 %agg.result, %struct.tFrac* byval(%struct.tFrac) align 4 %lhs, %struct.tFrac* byval(%struct.tFrac) align 4 %rhs) #0 {
entry:
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 0
  %0 = load i32, i32* %num, align 4
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 1
  %1 = load i32, i32* %denom, align 4
  %mul = mul nsw i32 %0, %1
  %denom1 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 1
  %2 = load i32, i32* %denom1, align 4
  %num2 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 0
  %3 = load i32, i32* %num2, align 4
  %mul3 = mul nsw i32 %2, %3
  %sub = sub nsw i32 %mul, %mul3
  %denom4 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 1
  %4 = load i32, i32* %denom4, align 4
  %denom5 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 1
  %5 = load i32, i32* %denom5, align 4
  %mul6 = mul nsw i32 %4, %5
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.result, i32 %sub, i32 %mul6)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @multFrac(%struct.tFrac* noalias sret align 4 %agg.result, %struct.tFrac* byval(%struct.tFrac) align 4 %lhs, %struct.tFrac* byval(%struct.tFrac) align 4 %rhs) #0 {
entry:
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 0
  %0 = load i32, i32* %num, align 4
  %num1 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 0
  %1 = load i32, i32* %num1, align 4
  %mul = mul nsw i32 %0, %1
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 1
  %2 = load i32, i32* %denom, align 4
  %denom2 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 1
  %3 = load i32, i32* %denom2, align 4
  %mul3 = mul nsw i32 %2, %3
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.result, i32 %mul, i32 %mul3)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @equalFrac(%struct.tFrac* byval(%struct.tFrac) align 4 %lhs, %struct.tFrac* byval(%struct.tFrac) align 4 %rhs) #0 {
entry:
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 0
  %0 = load i32, i32* %num, align 4
  %num1 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 0
  %1 = load i32, i32* %num1, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 1
  %2 = load i32, i32* %denom, align 4
  %denom2 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 1
  %3 = load i32, i32* %denom2, align 4
  %cmp3 = icmp eq i32 %2, %3
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp3, %land.rhs ]
  ret i1 %4
}

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @lessFrac(%struct.tFrac* byval(%struct.tFrac) align 4 %lhs, %struct.tFrac* byval(%struct.tFrac) align 4 %rhs) #0 {
entry:
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 0
  %0 = load i32, i32* %num, align 4
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 1
  %1 = load i32, i32* %denom, align 4
  %mul = mul nsw i32 %0, %1
  %num1 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 0
  %2 = load i32, i32* %num1, align 4
  %denom2 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 1
  %3 = load i32, i32* %denom2, align 4
  %mul3 = mul nsw i32 %2, %3
  %cmp = icmp slt i32 %mul, %mul3
  ret i1 %cmp
}

; Function Attrs: noinline nounwind optnone
define hidden void @printFrac(%struct.tFrac* byval(%struct.tFrac) align 4 %f) #0 {
entry:
  %buffer = alloca [7 x i8], align 1
  %len = alloca i32, align 4
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 1
  %0 = load i32, i32* %denom, align 4
  %cmp = icmp ne i32 %0, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %arraydecay = getelementptr inbounds [7 x i8], [7 x i8]* %buffer, i32 0, i32 0
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 0
  %1 = load i32, i32* %num, align 4
  %denom1 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 1
  %2 = load i32, i32* %denom1, align 4
  %call = call i32 (i8*, i32, i8*, ...) @snprintf(i8* %arraydecay, i32 7, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i32 %1, i32 %2)
  br label %if.end

if.else:                                          ; preds = %entry
  %arraydecay2 = getelementptr inbounds [7 x i8], [7 x i8]* %buffer, i32 0, i32 0
  %num3 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 0
  %3 = load i32, i32* %num3, align 4
  %call4 = call i32 (i8*, i32, i8*, ...) @snprintf(i8* %arraydecay2, i32 7, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %3)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %arraydecay5 = getelementptr inbounds [7 x i8], [7 x i8]* %buffer, i32 0, i32 0
  %call6 = call i32 @strlen(i8* %arraydecay5) #6
  %sub = sub i32 7, %call6
  store i32 %sub, i32* %len, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %4 = load i32, i32* %len, align 4
  %dec = add nsw i32 %4, -1
  store i32 %dec, i32* %len, align 4
  %cmp7 = icmp sgt i32 %4, 0
  br i1 %cmp7, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call8 = call i32 @putc(i32 32, %struct._IO_FILE* %5)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %arraydecay9 = getelementptr inbounds [7 x i8], [7 x i8]* %buffer, i32 0, i32 0
  %call10 = call i32 (i8*, ...) @printf(i8* %arraydecay9)
  ret void
}

declare i32 @snprintf(i8* %0, i32 %1, i8* %2, ...) #2

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #3

declare i32 @putc(i32 %0, %struct._IO_FILE* %1) #2

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden void @bernoulli(%struct.tFrac* noalias sret align 4 %agg.result, i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %a = alloca [16 x %struct.tFrac], align 16
  %j = alloca i32, align 4
  %m = alloca i32, align 4
  %tmp = alloca %struct.tFrac, align 4
  %tmp9 = alloca %struct.tFrac, align 4
  %agg.tmp = alloca %struct.tFrac, align 4
  %agg.tmp13 = alloca %struct.tFrac, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 0
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %arrayidx, i32 0, i32 0
  store i32 0, i32* %num, align 16
  %arrayidx1 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 0
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %arrayidx1, i32 0, i32 1
  store i32 0, i32* %denom, align 4
  %arrayidx2 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 0
  %1 = bitcast %struct.tFrac* %agg.result to i8*
  %2 = bitcast %struct.tFrac* %arrayidx2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %1, i8* align 16 %2, i32 8, i1 false)
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %m, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc14, %if.end
  %3 = load i32, i32* %m, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp3 = icmp sle i32 %3, %4
  br i1 %cmp3, label %for.body, label %for.end15

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %m, align 4
  %arrayidx4 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 %5
  %6 = load i32, i32* %m, align 4
  %add = add nsw i32 %6, 1
  call void @makeFrac(%struct.tFrac* sret align 4 %tmp, i32 1, i32 %add)
  %7 = bitcast %struct.tFrac* %arrayidx4 to i8*
  %8 = bitcast %struct.tFrac* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %7, i8* align 4 %8, i32 8, i1 false)
  %9 = load i32, i32* %m, align 4
  store i32 %9, i32* %j, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %for.body
  %10 = load i32, i32* %j, align 4
  %cmp6 = icmp sge i32 %10, 1
  br i1 %cmp6, label %for.body7, label %for.end

for.body7:                                        ; preds = %for.cond5
  %11 = load i32, i32* %j, align 4
  %sub = sub nsw i32 %11, 1
  %arrayidx8 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 %sub
  %12 = load i32, i32* %j, align 4
  %sub10 = sub nsw i32 %12, 1
  %arrayidx11 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 %sub10
  %13 = load i32, i32* %j, align 4
  %arrayidx12 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 %13
  call void @subFrac(%struct.tFrac* sret align 4 %agg.tmp, %struct.tFrac* byval(%struct.tFrac) align 4 %arrayidx11, %struct.tFrac* byval(%struct.tFrac) align 4 %arrayidx12)
  %14 = load i32, i32* %j, align 4
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.tmp13, i32 %14, i32 1)
  call void @multFrac(%struct.tFrac* sret align 4 %tmp9, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp13)
  %15 = bitcast %struct.tFrac* %arrayidx8 to i8*
  %16 = bitcast %struct.tFrac* %tmp9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %15, i8* align 4 %16, i32 8, i1 false)
  br label %for.inc

for.inc:                                          ; preds = %for.body7
  %17 = load i32, i32* %j, align 4
  %dec = add nsw i32 %17, -1
  store i32 %dec, i32* %j, align 4
  br label %for.cond5

for.end:                                          ; preds = %for.cond5
  br label %for.inc14

for.inc14:                                        ; preds = %for.end
  %18 = load i32, i32* %m, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %m, align 4
  br label %for.cond

for.end15:                                        ; preds = %for.cond
  %19 = load i32, i32* %n.addr, align 4
  %cmp16 = icmp ne i32 %19, 1
  br i1 %cmp16, label %if.then17, label %if.end19

if.then17:                                        ; preds = %for.end15
  %arrayidx18 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 0
  %20 = bitcast %struct.tFrac* %agg.result to i8*
  %21 = bitcast %struct.tFrac* %arrayidx18 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %20, i8* align 16 %21, i32 8, i1 false)
  br label %return

if.end19:                                         ; preds = %for.end15
  %arrayidx20 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 0
  call void @negateFrac(%struct.tFrac* sret align 4 %agg.result, %struct.tFrac* byval(%struct.tFrac) align 4 %arrayidx20)
  br label %return

return:                                           ; preds = %if.end19, %if.then17, %if.then
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #4

; Function Attrs: noinline nounwind optnone
define hidden void @faulhaber(i32 %p) #0 {
entry:
  %p.addr = alloca i32, align 4
  %q = alloca %struct.tFrac, align 4
  %coeffs = alloca %struct.tFrac*, align 4
  %j = alloca i32, align 4
  %sign = alloca i32, align 4
  %tmp = alloca %struct.tFrac, align 4
  %tmp3 = alloca %struct.tFrac, align 4
  %agg.tmp = alloca %struct.tFrac, align 4
  %agg.tmp4 = alloca %struct.tFrac, align 4
  %agg.tmp5 = alloca %struct.tFrac, align 4
  %agg.tmp6 = alloca %struct.tFrac, align 4
  %agg.tmp9 = alloca %struct.tFrac, align 4
  store i32 %p, i32* %p.addr, align 4
  %0 = load i32, i32* %p.addr, align 4
  %add = add nsw i32 %0, 1
  %mul = mul i32 8, %add
  %call = call noalias i8* @malloc(i32 %mul)
  %1 = bitcast i8* %call to %struct.tFrac*
  store %struct.tFrac* %1, %struct.tFrac** %coeffs, align 4
  %2 = load i32, i32* %p.addr, align 4
  %add1 = add nsw i32 %2, 1
  call void @makeFrac(%struct.tFrac* sret align 4 %tmp, i32 1, i32 %add1)
  %3 = bitcast %struct.tFrac* %q to i8*
  %4 = bitcast %struct.tFrac* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %3, i8* align 4 %4, i32 8, i1 false)
  store i32 -1, i32* %sign, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %p.addr, align 4
  %cmp = icmp sle i32 %5, %6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i32, i32* %sign, align 4
  %mul2 = mul nsw i32 -1, %7
  store i32 %mul2, i32* %sign, align 4
  %8 = load %struct.tFrac*, %struct.tFrac** %coeffs, align 4
  %9 = load i32, i32* %p.addr, align 4
  %10 = load i32, i32* %j, align 4
  %sub = sub nsw i32 %9, %10
  %arrayidx = getelementptr inbounds %struct.tFrac, %struct.tFrac* %8, i32 %sub
  %11 = load i32, i32* %sign, align 4
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.tmp5, i32 %11, i32 1)
  call void @multFrac(%struct.tFrac* sret align 4 %agg.tmp4, %struct.tFrac* byval(%struct.tFrac) align 4 %q, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp5)
  %12 = load i32, i32* %p.addr, align 4
  %add7 = add nsw i32 %12, 1
  %13 = load i32, i32* %j, align 4
  %call8 = call i32 @binomial(i32 %add7, i32 %13)
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.tmp6, i32 %call8, i32 1)
  call void @multFrac(%struct.tFrac* sret align 4 %agg.tmp, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp4, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp6)
  %14 = load i32, i32* %j, align 4
  call void @bernoulli(%struct.tFrac* sret align 4 %agg.tmp9, i32 %14)
  call void @multFrac(%struct.tFrac* sret align 4 %tmp3, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp9)
  %15 = bitcast %struct.tFrac* %arrayidx to i8*
  %16 = bitcast %struct.tFrac* %tmp3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %15, i8* align 4 %16, i32 8, i1 false)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %17 = load i32, i32* %j, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc14, %for.end
  %18 = load i32, i32* %j, align 4
  %19 = load i32, i32* %p.addr, align 4
  %cmp11 = icmp sle i32 %18, %19
  br i1 %cmp11, label %for.body12, label %for.end16

for.body12:                                       ; preds = %for.cond10
  %20 = load %struct.tFrac*, %struct.tFrac** %coeffs, align 4
  %21 = load i32, i32* %j, align 4
  %arrayidx13 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %20, i32 %21
  call void @printFrac(%struct.tFrac* byval(%struct.tFrac) align 4 %arrayidx13)
  br label %for.inc14

for.inc14:                                        ; preds = %for.body12
  %22 = load i32, i32* %j, align 4
  %inc15 = add nsw i32 %22, 1
  store i32 %inc15, i32* %j, align 4
  br label %for.cond10

for.end16:                                        ; preds = %for.cond10
  %call17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %23 = load %struct.tFrac*, %struct.tFrac** %coeffs, align 4
  %24 = bitcast %struct.tFrac* %23 to i8*
  call void @free(i8* %24)
  ret void
}

declare noalias i8* @malloc(i32 %0) #2

declare void @free(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  call void @faulhaber(i32 %1)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %i, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind willreturn }
attributes #5 = { nounwind readnone }
attributes #6 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %num, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %denom, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %denom1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %num2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul3 = mul nsw i32 %2, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %mul, %mul3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = mulnsw %3, %4
%6:i32 = subnsw %2, %5
infer %6

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %denom4, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %denom5, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul6 = mul nsw i32 %4, %5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2
got 7 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = mulnsw %3, %4
%6:i32 = subnsw %2, %5
infer %6


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 7 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for subFrac()

; entering Souper's runOnFunction() for multFrac()

; ModuleID = './Faulhabers_triangle.c.bc'
source_filename = "./Faulhabers_triangle.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque
%struct.tFrac = type { i32, i32 }

@.str = private unnamed_addr constant [6 x i8] c"%d/%d\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@stdout = external constant %struct._IO_FILE*, align 4
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @binomial(i32 %n, i32 %k) #0 {
entry:
  %retval = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %k.addr = alloca i32, align 4
  %num = alloca i32, align 4
  %denom = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %k, i32* %k.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %k.addr, align 4
  %cmp1 = icmp slt i32 %1, 0
  br i1 %cmp1, label %if.then, label %lor.lhs.false2

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %2 = load i32, i32* %n.addr, align 4
  %3 = load i32, i32* %k.addr, align 4
  %cmp3 = icmp slt i32 %2, %3
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false2, %lor.lhs.false, %entry
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false2
  %4 = load i32, i32* %n.addr, align 4
  %cmp4 = icmp eq i32 %4, 0
  br i1 %cmp4, label %if.then7, label %lor.lhs.false5

lor.lhs.false5:                                   ; preds = %if.end
  %5 = load i32, i32* %k.addr, align 4
  %cmp6 = icmp eq i32 %5, 0
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %lor.lhs.false5, %if.end
  store i32 1, i32* %retval, align 4
  br label %return

if.end8:                                          ; preds = %lor.lhs.false5
  store i32 1, i32* %num, align 4
  %6 = load i32, i32* %k.addr, align 4
  %add = add nsw i32 %6, 1
  store i32 %add, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end8
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %n.addr, align 4
  %cmp9 = icmp sle i32 %7, %8
  br i1 %cmp9, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i32, i32* %num, align 4
  %10 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %9, %10
  store i32 %mul, i32* %num, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %denom, align 4
  store i32 2, i32* %i, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc14, %for.end
  %12 = load i32, i32* %i, align 4
  %13 = load i32, i32* %n.addr, align 4
  %14 = load i32, i32* %k.addr, align 4
  %sub = sub nsw i32 %13, %14
  %cmp11 = icmp sle i32 %12, %sub
  br i1 %cmp11, label %for.body12, label %for.end16

for.body12:                                       ; preds = %for.cond10
  %15 = load i32, i32* %i, align 4
  %16 = load i32, i32* %denom, align 4
  %mul13 = mul nsw i32 %16, %15
  store i32 %mul13, i32* %denom, align 4
  br label %for.inc14

for.inc14:                                        ; preds = %for.body12
  %17 = load i32, i32* %i, align 4
  %inc15 = add nsw i32 %17, 1
  store i32 %inc15, i32* %i, align 4
  br label %for.cond10

for.end16:                                        ; preds = %for.cond10
  %18 = load i32, i32* %num, align 4
  %19 = load i32, i32* %denom, align 4
  %div = sdiv i32 %18, %19
  store i32 %div, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end16, %if.then7, %if.then
  %20 = load i32, i32* %retval, align 4
  ret i32 %20
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @gcd(i32 %a, i32 %b) #0 {
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %b.addr, align 4
  %cmp = icmp ne i32 %0, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i32, i32* %a.addr, align 4
  %2 = load i32, i32* %b.addr, align 4
  %rem = srem i32 %1, %2
  store i32 %rem, i32* %temp, align 4
  %3 = load i32, i32* %b.addr, align 4
  store i32 %3, i32* %a.addr, align 4
  %4 = load i32, i32* %temp, align 4
  store i32 %4, i32* %b.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %5 = load i32, i32* %a.addr, align 4
  ret i32 %5
}

; Function Attrs: noinline nounwind optnone
define hidden void @makeFrac(%struct.tFrac* noalias sret align 4 %agg.result, i32 %n, i32 %d) #0 {
entry:
  %n.addr = alloca i32, align 4
  %d.addr = alloca i32, align 4
  %g = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %d, i32* %d.addr, align 4
  %0 = load i32, i32* %d.addr, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %agg.result, i32 0, i32 0
  store i32 0, i32* %num, align 4
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %agg.result, i32 0, i32 1
  store i32 0, i32* %denom, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4
  %cmp1 = icmp eq i32 %1, 0
  br i1 %cmp1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.end
  store i32 1, i32* %d.addr, align 4
  br label %if.end7

if.else:                                          ; preds = %if.end
  %2 = load i32, i32* %d.addr, align 4
  %cmp3 = icmp slt i32 %2, 0
  br i1 %cmp3, label %if.then4, label %if.end6

if.then4:                                         ; preds = %if.else
  %3 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 0, %3
  store i32 %sub, i32* %n.addr, align 4
  %4 = load i32, i32* %d.addr, align 4
  %sub5 = sub nsw i32 0, %4
  store i32 %sub5, i32* %d.addr, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.then4, %if.else
  br label %if.end7

if.end7:                                          ; preds = %if.end6, %if.then2
  %5 = load i32, i32* %n.addr, align 4
  %6 = load i32, i32* %d.addr, align 4
  %call = call i32 @gcd(i32 %5, i32 %6)
  %call8 = call i32 @abs(i32 %call) #5
  store i32 %call8, i32* %g, align 4
  %7 = load i32, i32* %g, align 4
  %cmp9 = icmp sgt i32 %7, 1
  br i1 %cmp9, label %if.then10, label %if.end12

if.then10:                                        ; preds = %if.end7
  %8 = load i32, i32* %n.addr, align 4
  %9 = load i32, i32* %g, align 4
  %div = sdiv i32 %8, %9
  store i32 %div, i32* %n.addr, align 4
  %10 = load i32, i32* %d.addr, align 4
  %11 = load i32, i32* %g, align 4
  %div11 = sdiv i32 %10, %11
  store i32 %div11, i32* %d.addr, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then10, %if.end7
  %12 = load i32, i32* %n.addr, align 4
  %num13 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %agg.result, i32 0, i32 0
  store i32 %12, i32* %num13, align 4
  %13 = load i32, i32* %d.addr, align 4
  %denom14 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %agg.result, i32 0, i32 1
  store i32 %13, i32* %denom14, align 4
  br label %return

return:                                           ; preds = %if.end12, %if.then
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @abs(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @negateFrac(%struct.tFrac* noalias sret align 4 %agg.result, %struct.tFrac* byval(%struct.tFrac) align 4 %f) #0 {
entry:
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 0
  %0 = load i32, i32* %num, align 4
  %sub = sub nsw i32 0, %0
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 1
  %1 = load i32, i32* %denom, align 4
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.result, i32 %sub, i32 %1)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @subFrac(%struct.tFrac* noalias sret align 4 %agg.result, %struct.tFrac* byval(%struct.tFrac) align 4 %lhs, %struct.tFrac* byval(%struct.tFrac) align 4 %rhs) #0 {
entry:
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 0
  %0 = load i32, i32* %num, align 4
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 1
  %1 = load i32, i32* %denom, align 4
  %mul = mul nsw i32 %0, %1
  %denom1 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 1
  %2 = load i32, i32* %denom1, align 4
  %num2 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 0
  %3 = load i32, i32* %num2, align 4
  %mul3 = mul nsw i32 %2, %3
  %sub = sub nsw i32 %mul, %mul3
  %denom4 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 1
  %4 = load i32, i32* %denom4, align 4
  %denom5 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 1
  %5 = load i32, i32* %denom5, align 4
  %mul6 = mul nsw i32 %4, %5
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.result, i32 %sub, i32 %mul6)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @multFrac(%struct.tFrac* noalias sret align 4 %agg.result, %struct.tFrac* byval(%struct.tFrac) align 4 %lhs, %struct.tFrac* byval(%struct.tFrac) align 4 %rhs) #0 {
entry:
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 0
  %0 = load i32, i32* %num, align 4
  %num1 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 0
  %1 = load i32, i32* %num1, align 4
  %mul = mul nsw i32 %0, %1
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 1
  %2 = load i32, i32* %denom, align 4
  %denom2 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 1
  %3 = load i32, i32* %denom2, align 4
  %mul3 = mul nsw i32 %2, %3
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.result, i32 %mul, i32 %mul3)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @equalFrac(%struct.tFrac* byval(%struct.tFrac) align 4 %lhs, %struct.tFrac* byval(%struct.tFrac) align 4 %rhs) #0 {
entry:
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 0
  %0 = load i32, i32* %num, align 4
  %num1 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 0
  %1 = load i32, i32* %num1, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 1
  %2 = load i32, i32* %denom, align 4
  %denom2 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 1
  %3 = load i32, i32* %denom2, align 4
  %cmp3 = icmp eq i32 %2, %3
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp3, %land.rhs ]
  ret i1 %4
}

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @lessFrac(%struct.tFrac* byval(%struct.tFrac) align 4 %lhs, %struct.tFrac* byval(%struct.tFrac) align 4 %rhs) #0 {
entry:
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 0
  %0 = load i32, i32* %num, align 4
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 1
  %1 = load i32, i32* %denom, align 4
  %mul = mul nsw i32 %0, %1
  %num1 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 0
  %2 = load i32, i32* %num1, align 4
  %denom2 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 1
  %3 = load i32, i32* %denom2, align 4
  %mul3 = mul nsw i32 %2, %3
  %cmp = icmp slt i32 %mul, %mul3
  ret i1 %cmp
}

; Function Attrs: noinline nounwind optnone
define hidden void @printFrac(%struct.tFrac* byval(%struct.tFrac) align 4 %f) #0 {
entry:
  %buffer = alloca [7 x i8], align 1
  %len = alloca i32, align 4
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 1
  %0 = load i32, i32* %denom, align 4
  %cmp = icmp ne i32 %0, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %arraydecay = getelementptr inbounds [7 x i8], [7 x i8]* %buffer, i32 0, i32 0
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 0
  %1 = load i32, i32* %num, align 4
  %denom1 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 1
  %2 = load i32, i32* %denom1, align 4
  %call = call i32 (i8*, i32, i8*, ...) @snprintf(i8* %arraydecay, i32 7, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i32 %1, i32 %2)
  br label %if.end

if.else:                                          ; preds = %entry
  %arraydecay2 = getelementptr inbounds [7 x i8], [7 x i8]* %buffer, i32 0, i32 0
  %num3 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 0
  %3 = load i32, i32* %num3, align 4
  %call4 = call i32 (i8*, i32, i8*, ...) @snprintf(i8* %arraydecay2, i32 7, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %3)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %arraydecay5 = getelementptr inbounds [7 x i8], [7 x i8]* %buffer, i32 0, i32 0
  %call6 = call i32 @strlen(i8* %arraydecay5) #6
  %sub = sub i32 7, %call6
  store i32 %sub, i32* %len, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %4 = load i32, i32* %len, align 4
  %dec = add nsw i32 %4, -1
  store i32 %dec, i32* %len, align 4
  %cmp7 = icmp sgt i32 %4, 0
  br i1 %cmp7, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call8 = call i32 @putc(i32 32, %struct._IO_FILE* %5)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %arraydecay9 = getelementptr inbounds [7 x i8], [7 x i8]* %buffer, i32 0, i32 0
  %call10 = call i32 (i8*, ...) @printf(i8* %arraydecay9)
  ret void
}

declare i32 @snprintf(i8* %0, i32 %1, i8* %2, ...) #2

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #3

declare i32 @putc(i32 %0, %struct._IO_FILE* %1) #2

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden void @bernoulli(%struct.tFrac* noalias sret align 4 %agg.result, i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %a = alloca [16 x %struct.tFrac], align 16
  %j = alloca i32, align 4
  %m = alloca i32, align 4
  %tmp = alloca %struct.tFrac, align 4
  %tmp9 = alloca %struct.tFrac, align 4
  %agg.tmp = alloca %struct.tFrac, align 4
  %agg.tmp13 = alloca %struct.tFrac, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 0
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %arrayidx, i32 0, i32 0
  store i32 0, i32* %num, align 16
  %arrayidx1 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 0
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %arrayidx1, i32 0, i32 1
  store i32 0, i32* %denom, align 4
  %arrayidx2 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 0
  %1 = bitcast %struct.tFrac* %agg.result to i8*
  %2 = bitcast %struct.tFrac* %arrayidx2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %1, i8* align 16 %2, i32 8, i1 false)
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %m, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc14, %if.end
  %3 = load i32, i32* %m, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp3 = icmp sle i32 %3, %4
  br i1 %cmp3, label %for.body, label %for.end15

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %m, align 4
  %arrayidx4 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 %5
  %6 = load i32, i32* %m, align 4
  %add = add nsw i32 %6, 1
  call void @makeFrac(%struct.tFrac* sret align 4 %tmp, i32 1, i32 %add)
  %7 = bitcast %struct.tFrac* %arrayidx4 to i8*
  %8 = bitcast %struct.tFrac* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %7, i8* align 4 %8, i32 8, i1 false)
  %9 = load i32, i32* %m, align 4
  store i32 %9, i32* %j, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %for.body
  %10 = load i32, i32* %j, align 4
  %cmp6 = icmp sge i32 %10, 1
  br i1 %cmp6, label %for.body7, label %for.end

for.body7:                                        ; preds = %for.cond5
  %11 = load i32, i32* %j, align 4
  %sub = sub nsw i32 %11, 1
  %arrayidx8 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 %sub
  %12 = load i32, i32* %j, align 4
  %sub10 = sub nsw i32 %12, 1
  %arrayidx11 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 %sub10
  %13 = load i32, i32* %j, align 4
  %arrayidx12 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 %13
  call void @subFrac(%struct.tFrac* sret align 4 %agg.tmp, %struct.tFrac* byval(%struct.tFrac) align 4 %arrayidx11, %struct.tFrac* byval(%struct.tFrac) align 4 %arrayidx12)
  %14 = load i32, i32* %j, align 4
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.tmp13, i32 %14, i32 1)
  call void @multFrac(%struct.tFrac* sret align 4 %tmp9, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp13)
  %15 = bitcast %struct.tFrac* %arrayidx8 to i8*
  %16 = bitcast %struct.tFrac* %tmp9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %15, i8* align 4 %16, i32 8, i1 false)
  br label %for.inc

for.inc:                                          ; preds = %for.body7
  %17 = load i32, i32* %j, align 4
  %dec = add nsw i32 %17, -1
  store i32 %dec, i32* %j, align 4
  br label %for.cond5

for.end:                                          ; preds = %for.cond5
  br label %for.inc14

for.inc14:                                        ; preds = %for.end
  %18 = load i32, i32* %m, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %m, align 4
  br label %for.cond

for.end15:                                        ; preds = %for.cond
  %19 = load i32, i32* %n.addr, align 4
  %cmp16 = icmp ne i32 %19, 1
  br i1 %cmp16, label %if.then17, label %if.end19

if.then17:                                        ; preds = %for.end15
  %arrayidx18 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 0
  %20 = bitcast %struct.tFrac* %agg.result to i8*
  %21 = bitcast %struct.tFrac* %arrayidx18 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %20, i8* align 16 %21, i32 8, i1 false)
  br label %return

if.end19:                                         ; preds = %for.end15
  %arrayidx20 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 0
  call void @negateFrac(%struct.tFrac* sret align 4 %agg.result, %struct.tFrac* byval(%struct.tFrac) align 4 %arrayidx20)
  br label %return

return:                                           ; preds = %if.end19, %if.then17, %if.then
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #4

; Function Attrs: noinline nounwind optnone
define hidden void @faulhaber(i32 %p) #0 {
entry:
  %p.addr = alloca i32, align 4
  %q = alloca %struct.tFrac, align 4
  %coeffs = alloca %struct.tFrac*, align 4
  %j = alloca i32, align 4
  %sign = alloca i32, align 4
  %tmp = alloca %struct.tFrac, align 4
  %tmp3 = alloca %struct.tFrac, align 4
  %agg.tmp = alloca %struct.tFrac, align 4
  %agg.tmp4 = alloca %struct.tFrac, align 4
  %agg.tmp5 = alloca %struct.tFrac, align 4
  %agg.tmp6 = alloca %struct.tFrac, align 4
  %agg.tmp9 = alloca %struct.tFrac, align 4
  store i32 %p, i32* %p.addr, align 4
  %0 = load i32, i32* %p.addr, align 4
  %add = add nsw i32 %0, 1
  %mul = mul i32 8, %add
  %call = call noalias i8* @malloc(i32 %mul)
  %1 = bitcast i8* %call to %struct.tFrac*
  store %struct.tFrac* %1, %struct.tFrac** %coeffs, align 4
  %2 = load i32, i32* %p.addr, align 4
  %add1 = add nsw i32 %2, 1
  call void @makeFrac(%struct.tFrac* sret align 4 %tmp, i32 1, i32 %add1)
  %3 = bitcast %struct.tFrac* %q to i8*
  %4 = bitcast %struct.tFrac* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %3, i8* align 4 %4, i32 8, i1 false)
  store i32 -1, i32* %sign, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %p.addr, align 4
  %cmp = icmp sle i32 %5, %6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i32, i32* %sign, align 4
  %mul2 = mul nsw i32 -1, %7
  store i32 %mul2, i32* %sign, align 4
  %8 = load %struct.tFrac*, %struct.tFrac** %coeffs, align 4
  %9 = load i32, i32* %p.addr, align 4
  %10 = load i32, i32* %j, align 4
  %sub = sub nsw i32 %9, %10
  %arrayidx = getelementptr inbounds %struct.tFrac, %struct.tFrac* %8, i32 %sub
  %11 = load i32, i32* %sign, align 4
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.tmp5, i32 %11, i32 1)
  call void @multFrac(%struct.tFrac* sret align 4 %agg.tmp4, %struct.tFrac* byval(%struct.tFrac) align 4 %q, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp5)
  %12 = load i32, i32* %p.addr, align 4
  %add7 = add nsw i32 %12, 1
  %13 = load i32, i32* %j, align 4
  %call8 = call i32 @binomial(i32 %add7, i32 %13)
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.tmp6, i32 %call8, i32 1)
  call void @multFrac(%struct.tFrac* sret align 4 %agg.tmp, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp4, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp6)
  %14 = load i32, i32* %j, align 4
  call void @bernoulli(%struct.tFrac* sret align 4 %agg.tmp9, i32 %14)
  call void @multFrac(%struct.tFrac* sret align 4 %tmp3, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp9)
  %15 = bitcast %struct.tFrac* %arrayidx to i8*
  %16 = bitcast %struct.tFrac* %tmp3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %15, i8* align 4 %16, i32 8, i1 false)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %17 = load i32, i32* %j, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc14, %for.end
  %18 = load i32, i32* %j, align 4
  %19 = load i32, i32* %p.addr, align 4
  %cmp11 = icmp sle i32 %18, %19
  br i1 %cmp11, label %for.body12, label %for.end16

for.body12:                                       ; preds = %for.cond10
  %20 = load %struct.tFrac*, %struct.tFrac** %coeffs, align 4
  %21 = load i32, i32* %j, align 4
  %arrayidx13 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %20, i32 %21
  call void @printFrac(%struct.tFrac* byval(%struct.tFrac) align 4 %arrayidx13)
  br label %for.inc14

for.inc14:                                        ; preds = %for.body12
  %22 = load i32, i32* %j, align 4
  %inc15 = add nsw i32 %22, 1
  store i32 %inc15, i32* %j, align 4
  br label %for.cond10

for.end16:                                        ; preds = %for.cond10
  %call17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %23 = load %struct.tFrac*, %struct.tFrac** %coeffs, align 4
  %24 = bitcast %struct.tFrac* %23 to i8*
  call void @free(i8* %24)
  ret void
}

declare noalias i8* @malloc(i32 %0) #2

declare void @free(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  call void @faulhaber(i32 %1)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %i, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind willreturn }
attributes #5 = { nounwind readnone }
attributes #6 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %num, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %num1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %denom, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %denom2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul3 = mul nsw i32 %2, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2
#########################################################
; exiting Souper's runOnFunction() for multFrac()

; entering Souper's runOnFunction() for equalFrac()

; ModuleID = './Faulhabers_triangle.c.bc'
source_filename = "./Faulhabers_triangle.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque
%struct.tFrac = type { i32, i32 }

@.str = private unnamed_addr constant [6 x i8] c"%d/%d\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@stdout = external constant %struct._IO_FILE*, align 4
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @binomial(i32 %n, i32 %k) #0 {
entry:
  %retval = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %k.addr = alloca i32, align 4
  %num = alloca i32, align 4
  %denom = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %k, i32* %k.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %k.addr, align 4
  %cmp1 = icmp slt i32 %1, 0
  br i1 %cmp1, label %if.then, label %lor.lhs.false2

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %2 = load i32, i32* %n.addr, align 4
  %3 = load i32, i32* %k.addr, align 4
  %cmp3 = icmp slt i32 %2, %3
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false2, %lor.lhs.false, %entry
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false2
  %4 = load i32, i32* %n.addr, align 4
  %cmp4 = icmp eq i32 %4, 0
  br i1 %cmp4, label %if.then7, label %lor.lhs.false5

lor.lhs.false5:                                   ; preds = %if.end
  %5 = load i32, i32* %k.addr, align 4
  %cmp6 = icmp eq i32 %5, 0
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %lor.lhs.false5, %if.end
  store i32 1, i32* %retval, align 4
  br label %return

if.end8:                                          ; preds = %lor.lhs.false5
  store i32 1, i32* %num, align 4
  %6 = load i32, i32* %k.addr, align 4
  %add = add nsw i32 %6, 1
  store i32 %add, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end8
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %n.addr, align 4
  %cmp9 = icmp sle i32 %7, %8
  br i1 %cmp9, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i32, i32* %num, align 4
  %10 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %9, %10
  store i32 %mul, i32* %num, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %denom, align 4
  store i32 2, i32* %i, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc14, %for.end
  %12 = load i32, i32* %i, align 4
  %13 = load i32, i32* %n.addr, align 4
  %14 = load i32, i32* %k.addr, align 4
  %sub = sub nsw i32 %13, %14
  %cmp11 = icmp sle i32 %12, %sub
  br i1 %cmp11, label %for.body12, label %for.end16

for.body12:                                       ; preds = %for.cond10
  %15 = load i32, i32* %i, align 4
  %16 = load i32, i32* %denom, align 4
  %mul13 = mul nsw i32 %16, %15
  store i32 %mul13, i32* %denom, align 4
  br label %for.inc14

for.inc14:                                        ; preds = %for.body12
  %17 = load i32, i32* %i, align 4
  %inc15 = add nsw i32 %17, 1
  store i32 %inc15, i32* %i, align 4
  br label %for.cond10

for.end16:                                        ; preds = %for.cond10
  %18 = load i32, i32* %num, align 4
  %19 = load i32, i32* %denom, align 4
  %div = sdiv i32 %18, %19
  store i32 %div, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end16, %if.then7, %if.then
  %20 = load i32, i32* %retval, align 4
  ret i32 %20
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @gcd(i32 %a, i32 %b) #0 {
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %b.addr, align 4
  %cmp = icmp ne i32 %0, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i32, i32* %a.addr, align 4
  %2 = load i32, i32* %b.addr, align 4
  %rem = srem i32 %1, %2
  store i32 %rem, i32* %temp, align 4
  %3 = load i32, i32* %b.addr, align 4
  store i32 %3, i32* %a.addr, align 4
  %4 = load i32, i32* %temp, align 4
  store i32 %4, i32* %b.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %5 = load i32, i32* %a.addr, align 4
  ret i32 %5
}

; Function Attrs: noinline nounwind optnone
define hidden void @makeFrac(%struct.tFrac* noalias sret align 4 %agg.result, i32 %n, i32 %d) #0 {
entry:
  %n.addr = alloca i32, align 4
  %d.addr = alloca i32, align 4
  %g = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %d, i32* %d.addr, align 4
  %0 = load i32, i32* %d.addr, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %agg.result, i32 0, i32 0
  store i32 0, i32* %num, align 4
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %agg.result, i32 0, i32 1
  store i32 0, i32* %denom, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4
  %cmp1 = icmp eq i32 %1, 0
  br i1 %cmp1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.end
  store i32 1, i32* %d.addr, align 4
  br label %if.end7

if.else:                                          ; preds = %if.end
  %2 = load i32, i32* %d.addr, align 4
  %cmp3 = icmp slt i32 %2, 0
  br i1 %cmp3, label %if.then4, label %if.end6

if.then4:                                         ; preds = %if.else
  %3 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 0, %3
  store i32 %sub, i32* %n.addr, align 4
  %4 = load i32, i32* %d.addr, align 4
  %sub5 = sub nsw i32 0, %4
  store i32 %sub5, i32* %d.addr, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.then4, %if.else
  br label %if.end7

if.end7:                                          ; preds = %if.end6, %if.then2
  %5 = load i32, i32* %n.addr, align 4
  %6 = load i32, i32* %d.addr, align 4
  %call = call i32 @gcd(i32 %5, i32 %6)
  %call8 = call i32 @abs(i32 %call) #5
  store i32 %call8, i32* %g, align 4
  %7 = load i32, i32* %g, align 4
  %cmp9 = icmp sgt i32 %7, 1
  br i1 %cmp9, label %if.then10, label %if.end12

if.then10:                                        ; preds = %if.end7
  %8 = load i32, i32* %n.addr, align 4
  %9 = load i32, i32* %g, align 4
  %div = sdiv i32 %8, %9
  store i32 %div, i32* %n.addr, align 4
  %10 = load i32, i32* %d.addr, align 4
  %11 = load i32, i32* %g, align 4
  %div11 = sdiv i32 %10, %11
  store i32 %div11, i32* %d.addr, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then10, %if.end7
  %12 = load i32, i32* %n.addr, align 4
  %num13 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %agg.result, i32 0, i32 0
  store i32 %12, i32* %num13, align 4
  %13 = load i32, i32* %d.addr, align 4
  %denom14 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %agg.result, i32 0, i32 1
  store i32 %13, i32* %denom14, align 4
  br label %return

return:                                           ; preds = %if.end12, %if.then
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @abs(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @negateFrac(%struct.tFrac* noalias sret align 4 %agg.result, %struct.tFrac* byval(%struct.tFrac) align 4 %f) #0 {
entry:
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 0
  %0 = load i32, i32* %num, align 4
  %sub = sub nsw i32 0, %0
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 1
  %1 = load i32, i32* %denom, align 4
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.result, i32 %sub, i32 %1)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @subFrac(%struct.tFrac* noalias sret align 4 %agg.result, %struct.tFrac* byval(%struct.tFrac) align 4 %lhs, %struct.tFrac* byval(%struct.tFrac) align 4 %rhs) #0 {
entry:
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 0
  %0 = load i32, i32* %num, align 4
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 1
  %1 = load i32, i32* %denom, align 4
  %mul = mul nsw i32 %0, %1
  %denom1 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 1
  %2 = load i32, i32* %denom1, align 4
  %num2 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 0
  %3 = load i32, i32* %num2, align 4
  %mul3 = mul nsw i32 %2, %3
  %sub = sub nsw i32 %mul, %mul3
  %denom4 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 1
  %4 = load i32, i32* %denom4, align 4
  %denom5 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 1
  %5 = load i32, i32* %denom5, align 4
  %mul6 = mul nsw i32 %4, %5
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.result, i32 %sub, i32 %mul6)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @multFrac(%struct.tFrac* noalias sret align 4 %agg.result, %struct.tFrac* byval(%struct.tFrac) align 4 %lhs, %struct.tFrac* byval(%struct.tFrac) align 4 %rhs) #0 {
entry:
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 0
  %0 = load i32, i32* %num, align 4
  %num1 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 0
  %1 = load i32, i32* %num1, align 4
  %mul = mul nsw i32 %0, %1
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 1
  %2 = load i32, i32* %denom, align 4
  %denom2 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 1
  %3 = load i32, i32* %denom2, align 4
  %mul3 = mul nsw i32 %2, %3
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.result, i32 %mul, i32 %mul3)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @equalFrac(%struct.tFrac* byval(%struct.tFrac) align 4 %lhs, %struct.tFrac* byval(%struct.tFrac) align 4 %rhs) #0 {
entry:
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 0
  %0 = load i32, i32* %num, align 4
  %num1 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 0
  %1 = load i32, i32* %num1, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 1
  %2 = load i32, i32* %denom, align 4
  %denom2 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 1
  %3 = load i32, i32* %denom2, align 4
  %cmp3 = icmp eq i32 %2, %3
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp3, %land.rhs ]
  ret i1 %4
}

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @lessFrac(%struct.tFrac* byval(%struct.tFrac) align 4 %lhs, %struct.tFrac* byval(%struct.tFrac) align 4 %rhs) #0 {
entry:
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 0
  %0 = load i32, i32* %num, align 4
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 1
  %1 = load i32, i32* %denom, align 4
  %mul = mul nsw i32 %0, %1
  %num1 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 0
  %2 = load i32, i32* %num1, align 4
  %denom2 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 1
  %3 = load i32, i32* %denom2, align 4
  %mul3 = mul nsw i32 %2, %3
  %cmp = icmp slt i32 %mul, %mul3
  ret i1 %cmp
}

; Function Attrs: noinline nounwind optnone
define hidden void @printFrac(%struct.tFrac* byval(%struct.tFrac) align 4 %f) #0 {
entry:
  %buffer = alloca [7 x i8], align 1
  %len = alloca i32, align 4
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 1
  %0 = load i32, i32* %denom, align 4
  %cmp = icmp ne i32 %0, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %arraydecay = getelementptr inbounds [7 x i8], [7 x i8]* %buffer, i32 0, i32 0
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 0
  %1 = load i32, i32* %num, align 4
  %denom1 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 1
  %2 = load i32, i32* %denom1, align 4
  %call = call i32 (i8*, i32, i8*, ...) @snprintf(i8* %arraydecay, i32 7, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i32 %1, i32 %2)
  br label %if.end

if.else:                                          ; preds = %entry
  %arraydecay2 = getelementptr inbounds [7 x i8], [7 x i8]* %buffer, i32 0, i32 0
  %num3 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 0
  %3 = load i32, i32* %num3, align 4
  %call4 = call i32 (i8*, i32, i8*, ...) @snprintf(i8* %arraydecay2, i32 7, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %3)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %arraydecay5 = getelementptr inbounds [7 x i8], [7 x i8]* %buffer, i32 0, i32 0
  %call6 = call i32 @strlen(i8* %arraydecay5) #6
  %sub = sub i32 7, %call6
  store i32 %sub, i32* %len, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %4 = load i32, i32* %len, align 4
  %dec = add nsw i32 %4, -1
  store i32 %dec, i32* %len, align 4
  %cmp7 = icmp sgt i32 %4, 0
  br i1 %cmp7, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call8 = call i32 @putc(i32 32, %struct._IO_FILE* %5)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %arraydecay9 = getelementptr inbounds [7 x i8], [7 x i8]* %buffer, i32 0, i32 0
  %call10 = call i32 (i8*, ...) @printf(i8* %arraydecay9)
  ret void
}

declare i32 @snprintf(i8* %0, i32 %1, i8* %2, ...) #2

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #3

declare i32 @putc(i32 %0, %struct._IO_FILE* %1) #2

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden void @bernoulli(%struct.tFrac* noalias sret align 4 %agg.result, i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %a = alloca [16 x %struct.tFrac], align 16
  %j = alloca i32, align 4
  %m = alloca i32, align 4
  %tmp = alloca %struct.tFrac, align 4
  %tmp9 = alloca %struct.tFrac, align 4
  %agg.tmp = alloca %struct.tFrac, align 4
  %agg.tmp13 = alloca %struct.tFrac, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 0
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %arrayidx, i32 0, i32 0
  store i32 0, i32* %num, align 16
  %arrayidx1 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 0
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %arrayidx1, i32 0, i32 1
  store i32 0, i32* %denom, align 4
  %arrayidx2 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 0
  %1 = bitcast %struct.tFrac* %agg.result to i8*
  %2 = bitcast %struct.tFrac* %arrayidx2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %1, i8* align 16 %2, i32 8, i1 false)
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %m, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc14, %if.end
  %3 = load i32, i32* %m, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp3 = icmp sle i32 %3, %4
  br i1 %cmp3, label %for.body, label %for.end15

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %m, align 4
  %arrayidx4 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 %5
  %6 = load i32, i32* %m, align 4
  %add = add nsw i32 %6, 1
  call void @makeFrac(%struct.tFrac* sret align 4 %tmp, i32 1, i32 %add)
  %7 = bitcast %struct.tFrac* %arrayidx4 to i8*
  %8 = bitcast %struct.tFrac* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %7, i8* align 4 %8, i32 8, i1 false)
  %9 = load i32, i32* %m, align 4
  store i32 %9, i32* %j, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %for.body
  %10 = load i32, i32* %j, align 4
  %cmp6 = icmp sge i32 %10, 1
  br i1 %cmp6, label %for.body7, label %for.end

for.body7:                                        ; preds = %for.cond5
  %11 = load i32, i32* %j, align 4
  %sub = sub nsw i32 %11, 1
  %arrayidx8 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 %sub
  %12 = load i32, i32* %j, align 4
  %sub10 = sub nsw i32 %12, 1
  %arrayidx11 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 %sub10
  %13 = load i32, i32* %j, align 4
  %arrayidx12 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 %13
  call void @subFrac(%struct.tFrac* sret align 4 %agg.tmp, %struct.tFrac* byval(%struct.tFrac) align 4 %arrayidx11, %struct.tFrac* byval(%struct.tFrac) align 4 %arrayidx12)
  %14 = load i32, i32* %j, align 4
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.tmp13, i32 %14, i32 1)
  call void @multFrac(%struct.tFrac* sret align 4 %tmp9, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp13)
  %15 = bitcast %struct.tFrac* %arrayidx8 to i8*
  %16 = bitcast %struct.tFrac* %tmp9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %15, i8* align 4 %16, i32 8, i1 false)
  br label %for.inc

for.inc:                                          ; preds = %for.body7
  %17 = load i32, i32* %j, align 4
  %dec = add nsw i32 %17, -1
  store i32 %dec, i32* %j, align 4
  br label %for.cond5

for.end:                                          ; preds = %for.cond5
  br label %for.inc14

for.inc14:                                        ; preds = %for.end
  %18 = load i32, i32* %m, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %m, align 4
  br label %for.cond

for.end15:                                        ; preds = %for.cond
  %19 = load i32, i32* %n.addr, align 4
  %cmp16 = icmp ne i32 %19, 1
  br i1 %cmp16, label %if.then17, label %if.end19

if.then17:                                        ; preds = %for.end15
  %arrayidx18 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 0
  %20 = bitcast %struct.tFrac* %agg.result to i8*
  %21 = bitcast %struct.tFrac* %arrayidx18 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %20, i8* align 16 %21, i32 8, i1 false)
  br label %return

if.end19:                                         ; preds = %for.end15
  %arrayidx20 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 0
  call void @negateFrac(%struct.tFrac* sret align 4 %agg.result, %struct.tFrac* byval(%struct.tFrac) align 4 %arrayidx20)
  br label %return

return:                                           ; preds = %if.end19, %if.then17, %if.then
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #4

; Function Attrs: noinline nounwind optnone
define hidden void @faulhaber(i32 %p) #0 {
entry:
  %p.addr = alloca i32, align 4
  %q = alloca %struct.tFrac, align 4
  %coeffs = alloca %struct.tFrac*, align 4
  %j = alloca i32, align 4
  %sign = alloca i32, align 4
  %tmp = alloca %struct.tFrac, align 4
  %tmp3 = alloca %struct.tFrac, align 4
  %agg.tmp = alloca %struct.tFrac, align 4
  %agg.tmp4 = alloca %struct.tFrac, align 4
  %agg.tmp5 = alloca %struct.tFrac, align 4
  %agg.tmp6 = alloca %struct.tFrac, align 4
  %agg.tmp9 = alloca %struct.tFrac, align 4
  store i32 %p, i32* %p.addr, align 4
  %0 = load i32, i32* %p.addr, align 4
  %add = add nsw i32 %0, 1
  %mul = mul i32 8, %add
  %call = call noalias i8* @malloc(i32 %mul)
  %1 = bitcast i8* %call to %struct.tFrac*
  store %struct.tFrac* %1, %struct.tFrac** %coeffs, align 4
  %2 = load i32, i32* %p.addr, align 4
  %add1 = add nsw i32 %2, 1
  call void @makeFrac(%struct.tFrac* sret align 4 %tmp, i32 1, i32 %add1)
  %3 = bitcast %struct.tFrac* %q to i8*
  %4 = bitcast %struct.tFrac* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %3, i8* align 4 %4, i32 8, i1 false)
  store i32 -1, i32* %sign, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %p.addr, align 4
  %cmp = icmp sle i32 %5, %6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i32, i32* %sign, align 4
  %mul2 = mul nsw i32 -1, %7
  store i32 %mul2, i32* %sign, align 4
  %8 = load %struct.tFrac*, %struct.tFrac** %coeffs, align 4
  %9 = load i32, i32* %p.addr, align 4
  %10 = load i32, i32* %j, align 4
  %sub = sub nsw i32 %9, %10
  %arrayidx = getelementptr inbounds %struct.tFrac, %struct.tFrac* %8, i32 %sub
  %11 = load i32, i32* %sign, align 4
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.tmp5, i32 %11, i32 1)
  call void @multFrac(%struct.tFrac* sret align 4 %agg.tmp4, %struct.tFrac* byval(%struct.tFrac) align 4 %q, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp5)
  %12 = load i32, i32* %p.addr, align 4
  %add7 = add nsw i32 %12, 1
  %13 = load i32, i32* %j, align 4
  %call8 = call i32 @binomial(i32 %add7, i32 %13)
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.tmp6, i32 %call8, i32 1)
  call void @multFrac(%struct.tFrac* sret align 4 %agg.tmp, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp4, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp6)
  %14 = load i32, i32* %j, align 4
  call void @bernoulli(%struct.tFrac* sret align 4 %agg.tmp9, i32 %14)
  call void @multFrac(%struct.tFrac* sret align 4 %tmp3, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp9)
  %15 = bitcast %struct.tFrac* %arrayidx to i8*
  %16 = bitcast %struct.tFrac* %tmp3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %15, i8* align 4 %16, i32 8, i1 false)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %17 = load i32, i32* %j, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc14, %for.end
  %18 = load i32, i32* %j, align 4
  %19 = load i32, i32* %p.addr, align 4
  %cmp11 = icmp sle i32 %18, %19
  br i1 %cmp11, label %for.body12, label %for.end16

for.body12:                                       ; preds = %for.cond10
  %20 = load %struct.tFrac*, %struct.tFrac** %coeffs, align 4
  %21 = load i32, i32* %j, align 4
  %arrayidx13 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %20, i32 %21
  call void @printFrac(%struct.tFrac* byval(%struct.tFrac) align 4 %arrayidx13)
  br label %for.inc14

for.inc14:                                        ; preds = %for.body12
  %22 = load i32, i32* %j, align 4
  %inc15 = add nsw i32 %22, 1
  store i32 %inc15, i32* %j, align 4
  br label %for.cond10

for.end16:                                        ; preds = %for.cond10
  %call17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %23 = load %struct.tFrac*, %struct.tFrac** %coeffs, align 4
  %24 = bitcast %struct.tFrac* %23 to i8*
  call void @free(i8* %24)
  ret void
}

declare noalias i8* @malloc(i32 %0) #2

declare void @free(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  call void @faulhaber(i32 %1)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %i, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind willreturn }
attributes #5 = { nounwind readnone }
attributes #6 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %num, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %num1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %denom, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %denom2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp3 = icmp eq i32 %2, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %4 = phi i1 [ false, %entry ], [ %cmp3, %land.rhs ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i1 = eq %1, %2
%4:i1 = phi %0, 0:i1, %3
infer %4
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i1 = eq %1, %2
%4:i1 = phi %0, 0:i1, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for equalFrac()

; entering Souper's runOnFunction() for lessFrac()

; ModuleID = './Faulhabers_triangle.c.bc'
source_filename = "./Faulhabers_triangle.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque
%struct.tFrac = type { i32, i32 }

@.str = private unnamed_addr constant [6 x i8] c"%d/%d\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@stdout = external constant %struct._IO_FILE*, align 4
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @binomial(i32 %n, i32 %k) #0 {
entry:
  %retval = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %k.addr = alloca i32, align 4
  %num = alloca i32, align 4
  %denom = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %k, i32* %k.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %k.addr, align 4
  %cmp1 = icmp slt i32 %1, 0
  br i1 %cmp1, label %if.then, label %lor.lhs.false2

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %2 = load i32, i32* %n.addr, align 4
  %3 = load i32, i32* %k.addr, align 4
  %cmp3 = icmp slt i32 %2, %3
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false2, %lor.lhs.false, %entry
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false2
  %4 = load i32, i32* %n.addr, align 4
  %cmp4 = icmp eq i32 %4, 0
  br i1 %cmp4, label %if.then7, label %lor.lhs.false5

lor.lhs.false5:                                   ; preds = %if.end
  %5 = load i32, i32* %k.addr, align 4
  %cmp6 = icmp eq i32 %5, 0
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %lor.lhs.false5, %if.end
  store i32 1, i32* %retval, align 4
  br label %return

if.end8:                                          ; preds = %lor.lhs.false5
  store i32 1, i32* %num, align 4
  %6 = load i32, i32* %k.addr, align 4
  %add = add nsw i32 %6, 1
  store i32 %add, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end8
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %n.addr, align 4
  %cmp9 = icmp sle i32 %7, %8
  br i1 %cmp9, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i32, i32* %num, align 4
  %10 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %9, %10
  store i32 %mul, i32* %num, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %denom, align 4
  store i32 2, i32* %i, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc14, %for.end
  %12 = load i32, i32* %i, align 4
  %13 = load i32, i32* %n.addr, align 4
  %14 = load i32, i32* %k.addr, align 4
  %sub = sub nsw i32 %13, %14
  %cmp11 = icmp sle i32 %12, %sub
  br i1 %cmp11, label %for.body12, label %for.end16

for.body12:                                       ; preds = %for.cond10
  %15 = load i32, i32* %i, align 4
  %16 = load i32, i32* %denom, align 4
  %mul13 = mul nsw i32 %16, %15
  store i32 %mul13, i32* %denom, align 4
  br label %for.inc14

for.inc14:                                        ; preds = %for.body12
  %17 = load i32, i32* %i, align 4
  %inc15 = add nsw i32 %17, 1
  store i32 %inc15, i32* %i, align 4
  br label %for.cond10

for.end16:                                        ; preds = %for.cond10
  %18 = load i32, i32* %num, align 4
  %19 = load i32, i32* %denom, align 4
  %div = sdiv i32 %18, %19
  store i32 %div, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end16, %if.then7, %if.then
  %20 = load i32, i32* %retval, align 4
  ret i32 %20
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @gcd(i32 %a, i32 %b) #0 {
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %b.addr, align 4
  %cmp = icmp ne i32 %0, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i32, i32* %a.addr, align 4
  %2 = load i32, i32* %b.addr, align 4
  %rem = srem i32 %1, %2
  store i32 %rem, i32* %temp, align 4
  %3 = load i32, i32* %b.addr, align 4
  store i32 %3, i32* %a.addr, align 4
  %4 = load i32, i32* %temp, align 4
  store i32 %4, i32* %b.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %5 = load i32, i32* %a.addr, align 4
  ret i32 %5
}

; Function Attrs: noinline nounwind optnone
define hidden void @makeFrac(%struct.tFrac* noalias sret align 4 %agg.result, i32 %n, i32 %d) #0 {
entry:
  %n.addr = alloca i32, align 4
  %d.addr = alloca i32, align 4
  %g = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %d, i32* %d.addr, align 4
  %0 = load i32, i32* %d.addr, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %agg.result, i32 0, i32 0
  store i32 0, i32* %num, align 4
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %agg.result, i32 0, i32 1
  store i32 0, i32* %denom, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4
  %cmp1 = icmp eq i32 %1, 0
  br i1 %cmp1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.end
  store i32 1, i32* %d.addr, align 4
  br label %if.end7

if.else:                                          ; preds = %if.end
  %2 = load i32, i32* %d.addr, align 4
  %cmp3 = icmp slt i32 %2, 0
  br i1 %cmp3, label %if.then4, label %if.end6

if.then4:                                         ; preds = %if.else
  %3 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 0, %3
  store i32 %sub, i32* %n.addr, align 4
  %4 = load i32, i32* %d.addr, align 4
  %sub5 = sub nsw i32 0, %4
  store i32 %sub5, i32* %d.addr, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.then4, %if.else
  br label %if.end7

if.end7:                                          ; preds = %if.end6, %if.then2
  %5 = load i32, i32* %n.addr, align 4
  %6 = load i32, i32* %d.addr, align 4
  %call = call i32 @gcd(i32 %5, i32 %6)
  %call8 = call i32 @abs(i32 %call) #5
  store i32 %call8, i32* %g, align 4
  %7 = load i32, i32* %g, align 4
  %cmp9 = icmp sgt i32 %7, 1
  br i1 %cmp9, label %if.then10, label %if.end12

if.then10:                                        ; preds = %if.end7
  %8 = load i32, i32* %n.addr, align 4
  %9 = load i32, i32* %g, align 4
  %div = sdiv i32 %8, %9
  store i32 %div, i32* %n.addr, align 4
  %10 = load i32, i32* %d.addr, align 4
  %11 = load i32, i32* %g, align 4
  %div11 = sdiv i32 %10, %11
  store i32 %div11, i32* %d.addr, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then10, %if.end7
  %12 = load i32, i32* %n.addr, align 4
  %num13 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %agg.result, i32 0, i32 0
  store i32 %12, i32* %num13, align 4
  %13 = load i32, i32* %d.addr, align 4
  %denom14 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %agg.result, i32 0, i32 1
  store i32 %13, i32* %denom14, align 4
  br label %return

return:                                           ; preds = %if.end12, %if.then
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @abs(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @negateFrac(%struct.tFrac* noalias sret align 4 %agg.result, %struct.tFrac* byval(%struct.tFrac) align 4 %f) #0 {
entry:
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 0
  %0 = load i32, i32* %num, align 4
  %sub = sub nsw i32 0, %0
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 1
  %1 = load i32, i32* %denom, align 4
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.result, i32 %sub, i32 %1)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @subFrac(%struct.tFrac* noalias sret align 4 %agg.result, %struct.tFrac* byval(%struct.tFrac) align 4 %lhs, %struct.tFrac* byval(%struct.tFrac) align 4 %rhs) #0 {
entry:
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 0
  %0 = load i32, i32* %num, align 4
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 1
  %1 = load i32, i32* %denom, align 4
  %mul = mul nsw i32 %0, %1
  %denom1 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 1
  %2 = load i32, i32* %denom1, align 4
  %num2 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 0
  %3 = load i32, i32* %num2, align 4
  %mul3 = mul nsw i32 %2, %3
  %sub = sub nsw i32 %mul, %mul3
  %denom4 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 1
  %4 = load i32, i32* %denom4, align 4
  %denom5 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 1
  %5 = load i32, i32* %denom5, align 4
  %mul6 = mul nsw i32 %4, %5
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.result, i32 %sub, i32 %mul6)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @multFrac(%struct.tFrac* noalias sret align 4 %agg.result, %struct.tFrac* byval(%struct.tFrac) align 4 %lhs, %struct.tFrac* byval(%struct.tFrac) align 4 %rhs) #0 {
entry:
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 0
  %0 = load i32, i32* %num, align 4
  %num1 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 0
  %1 = load i32, i32* %num1, align 4
  %mul = mul nsw i32 %0, %1
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 1
  %2 = load i32, i32* %denom, align 4
  %denom2 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 1
  %3 = load i32, i32* %denom2, align 4
  %mul3 = mul nsw i32 %2, %3
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.result, i32 %mul, i32 %mul3)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @equalFrac(%struct.tFrac* byval(%struct.tFrac) align 4 %lhs, %struct.tFrac* byval(%struct.tFrac) align 4 %rhs) #0 {
entry:
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 0
  %0 = load i32, i32* %num, align 4
  %num1 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 0
  %1 = load i32, i32* %num1, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 1
  %2 = load i32, i32* %denom, align 4
  %denom2 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 1
  %3 = load i32, i32* %denom2, align 4
  %cmp3 = icmp eq i32 %2, %3
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp3, %land.rhs ]
  ret i1 %4
}

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @lessFrac(%struct.tFrac* byval(%struct.tFrac) align 4 %lhs, %struct.tFrac* byval(%struct.tFrac) align 4 %rhs) #0 {
entry:
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 0
  %0 = load i32, i32* %num, align 4
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 1
  %1 = load i32, i32* %denom, align 4
  %mul = mul nsw i32 %0, %1
  %num1 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 0
  %2 = load i32, i32* %num1, align 4
  %denom2 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 1
  %3 = load i32, i32* %denom2, align 4
  %mul3 = mul nsw i32 %2, %3
  %cmp = icmp slt i32 %mul, %mul3
  ret i1 %cmp
}

; Function Attrs: noinline nounwind optnone
define hidden void @printFrac(%struct.tFrac* byval(%struct.tFrac) align 4 %f) #0 {
entry:
  %buffer = alloca [7 x i8], align 1
  %len = alloca i32, align 4
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 1
  %0 = load i32, i32* %denom, align 4
  %cmp = icmp ne i32 %0, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %arraydecay = getelementptr inbounds [7 x i8], [7 x i8]* %buffer, i32 0, i32 0
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 0
  %1 = load i32, i32* %num, align 4
  %denom1 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 1
  %2 = load i32, i32* %denom1, align 4
  %call = call i32 (i8*, i32, i8*, ...) @snprintf(i8* %arraydecay, i32 7, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i32 %1, i32 %2)
  br label %if.end

if.else:                                          ; preds = %entry
  %arraydecay2 = getelementptr inbounds [7 x i8], [7 x i8]* %buffer, i32 0, i32 0
  %num3 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 0
  %3 = load i32, i32* %num3, align 4
  %call4 = call i32 (i8*, i32, i8*, ...) @snprintf(i8* %arraydecay2, i32 7, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %3)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %arraydecay5 = getelementptr inbounds [7 x i8], [7 x i8]* %buffer, i32 0, i32 0
  %call6 = call i32 @strlen(i8* %arraydecay5) #6
  %sub = sub i32 7, %call6
  store i32 %sub, i32* %len, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %4 = load i32, i32* %len, align 4
  %dec = add nsw i32 %4, -1
  store i32 %dec, i32* %len, align 4
  %cmp7 = icmp sgt i32 %4, 0
  br i1 %cmp7, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call8 = call i32 @putc(i32 32, %struct._IO_FILE* %5)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %arraydecay9 = getelementptr inbounds [7 x i8], [7 x i8]* %buffer, i32 0, i32 0
  %call10 = call i32 (i8*, ...) @printf(i8* %arraydecay9)
  ret void
}

declare i32 @snprintf(i8* %0, i32 %1, i8* %2, ...) #2

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #3

declare i32 @putc(i32 %0, %struct._IO_FILE* %1) #2

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden void @bernoulli(%struct.tFrac* noalias sret align 4 %agg.result, i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %a = alloca [16 x %struct.tFrac], align 16
  %j = alloca i32, align 4
  %m = alloca i32, align 4
  %tmp = alloca %struct.tFrac, align 4
  %tmp9 = alloca %struct.tFrac, align 4
  %agg.tmp = alloca %struct.tFrac, align 4
  %agg.tmp13 = alloca %struct.tFrac, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 0
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %arrayidx, i32 0, i32 0
  store i32 0, i32* %num, align 16
  %arrayidx1 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 0
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %arrayidx1, i32 0, i32 1
  store i32 0, i32* %denom, align 4
  %arrayidx2 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 0
  %1 = bitcast %struct.tFrac* %agg.result to i8*
  %2 = bitcast %struct.tFrac* %arrayidx2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %1, i8* align 16 %2, i32 8, i1 false)
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %m, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc14, %if.end
  %3 = load i32, i32* %m, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp3 = icmp sle i32 %3, %4
  br i1 %cmp3, label %for.body, label %for.end15

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %m, align 4
  %arrayidx4 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 %5
  %6 = load i32, i32* %m, align 4
  %add = add nsw i32 %6, 1
  call void @makeFrac(%struct.tFrac* sret align 4 %tmp, i32 1, i32 %add)
  %7 = bitcast %struct.tFrac* %arrayidx4 to i8*
  %8 = bitcast %struct.tFrac* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %7, i8* align 4 %8, i32 8, i1 false)
  %9 = load i32, i32* %m, align 4
  store i32 %9, i32* %j, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %for.body
  %10 = load i32, i32* %j, align 4
  %cmp6 = icmp sge i32 %10, 1
  br i1 %cmp6, label %for.body7, label %for.end

for.body7:                                        ; preds = %for.cond5
  %11 = load i32, i32* %j, align 4
  %sub = sub nsw i32 %11, 1
  %arrayidx8 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 %sub
  %12 = load i32, i32* %j, align 4
  %sub10 = sub nsw i32 %12, 1
  %arrayidx11 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 %sub10
  %13 = load i32, i32* %j, align 4
  %arrayidx12 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 %13
  call void @subFrac(%struct.tFrac* sret align 4 %agg.tmp, %struct.tFrac* byval(%struct.tFrac) align 4 %arrayidx11, %struct.tFrac* byval(%struct.tFrac) align 4 %arrayidx12)
  %14 = load i32, i32* %j, align 4
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.tmp13, i32 %14, i32 1)
  call void @multFrac(%struct.tFrac* sret align 4 %tmp9, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp13)
  %15 = bitcast %struct.tFrac* %arrayidx8 to i8*
  %16 = bitcast %struct.tFrac* %tmp9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %15, i8* align 4 %16, i32 8, i1 false)
  br label %for.inc

for.inc:                                          ; preds = %for.body7
  %17 = load i32, i32* %j, align 4
  %dec = add nsw i32 %17, -1
  store i32 %dec, i32* %j, align 4
  br label %for.cond5

for.end:                                          ; preds = %for.cond5
  br label %for.inc14

for.inc14:                                        ; preds = %for.end
  %18 = load i32, i32* %m, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %m, align 4
  br label %for.cond

for.end15:                                        ; preds = %for.cond
  %19 = load i32, i32* %n.addr, align 4
  %cmp16 = icmp ne i32 %19, 1
  br i1 %cmp16, label %if.then17, label %if.end19

if.then17:                                        ; preds = %for.end15
  %arrayidx18 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 0
  %20 = bitcast %struct.tFrac* %agg.result to i8*
  %21 = bitcast %struct.tFrac* %arrayidx18 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %20, i8* align 16 %21, i32 8, i1 false)
  br label %return

if.end19:                                         ; preds = %for.end15
  %arrayidx20 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 0
  call void @negateFrac(%struct.tFrac* sret align 4 %agg.result, %struct.tFrac* byval(%struct.tFrac) align 4 %arrayidx20)
  br label %return

return:                                           ; preds = %if.end19, %if.then17, %if.then
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #4

; Function Attrs: noinline nounwind optnone
define hidden void @faulhaber(i32 %p) #0 {
entry:
  %p.addr = alloca i32, align 4
  %q = alloca %struct.tFrac, align 4
  %coeffs = alloca %struct.tFrac*, align 4
  %j = alloca i32, align 4
  %sign = alloca i32, align 4
  %tmp = alloca %struct.tFrac, align 4
  %tmp3 = alloca %struct.tFrac, align 4
  %agg.tmp = alloca %struct.tFrac, align 4
  %agg.tmp4 = alloca %struct.tFrac, align 4
  %agg.tmp5 = alloca %struct.tFrac, align 4
  %agg.tmp6 = alloca %struct.tFrac, align 4
  %agg.tmp9 = alloca %struct.tFrac, align 4
  store i32 %p, i32* %p.addr, align 4
  %0 = load i32, i32* %p.addr, align 4
  %add = add nsw i32 %0, 1
  %mul = mul i32 8, %add
  %call = call noalias i8* @malloc(i32 %mul)
  %1 = bitcast i8* %call to %struct.tFrac*
  store %struct.tFrac* %1, %struct.tFrac** %coeffs, align 4
  %2 = load i32, i32* %p.addr, align 4
  %add1 = add nsw i32 %2, 1
  call void @makeFrac(%struct.tFrac* sret align 4 %tmp, i32 1, i32 %add1)
  %3 = bitcast %struct.tFrac* %q to i8*
  %4 = bitcast %struct.tFrac* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %3, i8* align 4 %4, i32 8, i1 false)
  store i32 -1, i32* %sign, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %p.addr, align 4
  %cmp = icmp sle i32 %5, %6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i32, i32* %sign, align 4
  %mul2 = mul nsw i32 -1, %7
  store i32 %mul2, i32* %sign, align 4
  %8 = load %struct.tFrac*, %struct.tFrac** %coeffs, align 4
  %9 = load i32, i32* %p.addr, align 4
  %10 = load i32, i32* %j, align 4
  %sub = sub nsw i32 %9, %10
  %arrayidx = getelementptr inbounds %struct.tFrac, %struct.tFrac* %8, i32 %sub
  %11 = load i32, i32* %sign, align 4
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.tmp5, i32 %11, i32 1)
  call void @multFrac(%struct.tFrac* sret align 4 %agg.tmp4, %struct.tFrac* byval(%struct.tFrac) align 4 %q, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp5)
  %12 = load i32, i32* %p.addr, align 4
  %add7 = add nsw i32 %12, 1
  %13 = load i32, i32* %j, align 4
  %call8 = call i32 @binomial(i32 %add7, i32 %13)
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.tmp6, i32 %call8, i32 1)
  call void @multFrac(%struct.tFrac* sret align 4 %agg.tmp, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp4, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp6)
  %14 = load i32, i32* %j, align 4
  call void @bernoulli(%struct.tFrac* sret align 4 %agg.tmp9, i32 %14)
  call void @multFrac(%struct.tFrac* sret align 4 %tmp3, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp9)
  %15 = bitcast %struct.tFrac* %arrayidx to i8*
  %16 = bitcast %struct.tFrac* %tmp3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %15, i8* align 4 %16, i32 8, i1 false)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %17 = load i32, i32* %j, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc14, %for.end
  %18 = load i32, i32* %j, align 4
  %19 = load i32, i32* %p.addr, align 4
  %cmp11 = icmp sle i32 %18, %19
  br i1 %cmp11, label %for.body12, label %for.end16

for.body12:                                       ; preds = %for.cond10
  %20 = load %struct.tFrac*, %struct.tFrac** %coeffs, align 4
  %21 = load i32, i32* %j, align 4
  %arrayidx13 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %20, i32 %21
  call void @printFrac(%struct.tFrac* byval(%struct.tFrac) align 4 %arrayidx13)
  br label %for.inc14

for.inc14:                                        ; preds = %for.body12
  %22 = load i32, i32* %j, align 4
  %inc15 = add nsw i32 %22, 1
  store i32 %inc15, i32* %j, align 4
  br label %for.cond10

for.end16:                                        ; preds = %for.cond10
  %call17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %23 = load %struct.tFrac*, %struct.tFrac** %coeffs, align 4
  %24 = bitcast %struct.tFrac* %23 to i8*
  call void @free(i8* %24)
  ret void
}

declare noalias i8* @malloc(i32 %0) #2

declare void @free(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  call void @faulhaber(i32 %1)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %i, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind willreturn }
attributes #5 = { nounwind readnone }
attributes #6 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %num, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %denom, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %num1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %denom2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul3 = mul nsw i32 %2, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %mul, %mul3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = mulnsw %3, %4
%6:i1 = slt %2, %5
infer %6
got 7 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = mulnsw %3, %4
%6:i1 = slt %2, %5
infer %6


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for lessFrac()

; entering Souper's runOnFunction() for printFrac()

; ModuleID = './Faulhabers_triangle.c.bc'
source_filename = "./Faulhabers_triangle.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque
%struct.tFrac = type { i32, i32 }

@.str = private unnamed_addr constant [6 x i8] c"%d/%d\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@stdout = external constant %struct._IO_FILE*, align 4
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @binomial(i32 %n, i32 %k) #0 {
entry:
  %retval = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %k.addr = alloca i32, align 4
  %num = alloca i32, align 4
  %denom = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %k, i32* %k.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %k.addr, align 4
  %cmp1 = icmp slt i32 %1, 0
  br i1 %cmp1, label %if.then, label %lor.lhs.false2

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %2 = load i32, i32* %n.addr, align 4
  %3 = load i32, i32* %k.addr, align 4
  %cmp3 = icmp slt i32 %2, %3
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false2, %lor.lhs.false, %entry
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false2
  %4 = load i32, i32* %n.addr, align 4
  %cmp4 = icmp eq i32 %4, 0
  br i1 %cmp4, label %if.then7, label %lor.lhs.false5

lor.lhs.false5:                                   ; preds = %if.end
  %5 = load i32, i32* %k.addr, align 4
  %cmp6 = icmp eq i32 %5, 0
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %lor.lhs.false5, %if.end
  store i32 1, i32* %retval, align 4
  br label %return

if.end8:                                          ; preds = %lor.lhs.false5
  store i32 1, i32* %num, align 4
  %6 = load i32, i32* %k.addr, align 4
  %add = add nsw i32 %6, 1
  store i32 %add, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end8
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %n.addr, align 4
  %cmp9 = icmp sle i32 %7, %8
  br i1 %cmp9, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i32, i32* %num, align 4
  %10 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %9, %10
  store i32 %mul, i32* %num, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %denom, align 4
  store i32 2, i32* %i, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc14, %for.end
  %12 = load i32, i32* %i, align 4
  %13 = load i32, i32* %n.addr, align 4
  %14 = load i32, i32* %k.addr, align 4
  %sub = sub nsw i32 %13, %14
  %cmp11 = icmp sle i32 %12, %sub
  br i1 %cmp11, label %for.body12, label %for.end16

for.body12:                                       ; preds = %for.cond10
  %15 = load i32, i32* %i, align 4
  %16 = load i32, i32* %denom, align 4
  %mul13 = mul nsw i32 %16, %15
  store i32 %mul13, i32* %denom, align 4
  br label %for.inc14

for.inc14:                                        ; preds = %for.body12
  %17 = load i32, i32* %i, align 4
  %inc15 = add nsw i32 %17, 1
  store i32 %inc15, i32* %i, align 4
  br label %for.cond10

for.end16:                                        ; preds = %for.cond10
  %18 = load i32, i32* %num, align 4
  %19 = load i32, i32* %denom, align 4
  %div = sdiv i32 %18, %19
  store i32 %div, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end16, %if.then7, %if.then
  %20 = load i32, i32* %retval, align 4
  ret i32 %20
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @gcd(i32 %a, i32 %b) #0 {
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %b.addr, align 4
  %cmp = icmp ne i32 %0, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i32, i32* %a.addr, align 4
  %2 = load i32, i32* %b.addr, align 4
  %rem = srem i32 %1, %2
  store i32 %rem, i32* %temp, align 4
  %3 = load i32, i32* %b.addr, align 4
  store i32 %3, i32* %a.addr, align 4
  %4 = load i32, i32* %temp, align 4
  store i32 %4, i32* %b.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %5 = load i32, i32* %a.addr, align 4
  ret i32 %5
}

; Function Attrs: noinline nounwind optnone
define hidden void @makeFrac(%struct.tFrac* noalias sret align 4 %agg.result, i32 %n, i32 %d) #0 {
entry:
  %n.addr = alloca i32, align 4
  %d.addr = alloca i32, align 4
  %g = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %d, i32* %d.addr, align 4
  %0 = load i32, i32* %d.addr, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %agg.result, i32 0, i32 0
  store i32 0, i32* %num, align 4
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %agg.result, i32 0, i32 1
  store i32 0, i32* %denom, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4
  %cmp1 = icmp eq i32 %1, 0
  br i1 %cmp1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.end
  store i32 1, i32* %d.addr, align 4
  br label %if.end7

if.else:                                          ; preds = %if.end
  %2 = load i32, i32* %d.addr, align 4
  %cmp3 = icmp slt i32 %2, 0
  br i1 %cmp3, label %if.then4, label %if.end6

if.then4:                                         ; preds = %if.else
  %3 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 0, %3
  store i32 %sub, i32* %n.addr, align 4
  %4 = load i32, i32* %d.addr, align 4
  %sub5 = sub nsw i32 0, %4
  store i32 %sub5, i32* %d.addr, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.then4, %if.else
  br label %if.end7

if.end7:                                          ; preds = %if.end6, %if.then2
  %5 = load i32, i32* %n.addr, align 4
  %6 = load i32, i32* %d.addr, align 4
  %call = call i32 @gcd(i32 %5, i32 %6)
  %call8 = call i32 @abs(i32 %call) #5
  store i32 %call8, i32* %g, align 4
  %7 = load i32, i32* %g, align 4
  %cmp9 = icmp sgt i32 %7, 1
  br i1 %cmp9, label %if.then10, label %if.end12

if.then10:                                        ; preds = %if.end7
  %8 = load i32, i32* %n.addr, align 4
  %9 = load i32, i32* %g, align 4
  %div = sdiv i32 %8, %9
  store i32 %div, i32* %n.addr, align 4
  %10 = load i32, i32* %d.addr, align 4
  %11 = load i32, i32* %g, align 4
  %div11 = sdiv i32 %10, %11
  store i32 %div11, i32* %d.addr, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then10, %if.end7
  %12 = load i32, i32* %n.addr, align 4
  %num13 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %agg.result, i32 0, i32 0
  store i32 %12, i32* %num13, align 4
  %13 = load i32, i32* %d.addr, align 4
  %denom14 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %agg.result, i32 0, i32 1
  store i32 %13, i32* %denom14, align 4
  br label %return

return:                                           ; preds = %if.end12, %if.then
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @abs(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @negateFrac(%struct.tFrac* noalias sret align 4 %agg.result, %struct.tFrac* byval(%struct.tFrac) align 4 %f) #0 {
entry:
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 0
  %0 = load i32, i32* %num, align 4
  %sub = sub nsw i32 0, %0
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 1
  %1 = load i32, i32* %denom, align 4
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.result, i32 %sub, i32 %1)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @subFrac(%struct.tFrac* noalias sret align 4 %agg.result, %struct.tFrac* byval(%struct.tFrac) align 4 %lhs, %struct.tFrac* byval(%struct.tFrac) align 4 %rhs) #0 {
entry:
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 0
  %0 = load i32, i32* %num, align 4
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 1
  %1 = load i32, i32* %denom, align 4
  %mul = mul nsw i32 %0, %1
  %denom1 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 1
  %2 = load i32, i32* %denom1, align 4
  %num2 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 0
  %3 = load i32, i32* %num2, align 4
  %mul3 = mul nsw i32 %2, %3
  %sub = sub nsw i32 %mul, %mul3
  %denom4 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 1
  %4 = load i32, i32* %denom4, align 4
  %denom5 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 1
  %5 = load i32, i32* %denom5, align 4
  %mul6 = mul nsw i32 %4, %5
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.result, i32 %sub, i32 %mul6)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @multFrac(%struct.tFrac* noalias sret align 4 %agg.result, %struct.tFrac* byval(%struct.tFrac) align 4 %lhs, %struct.tFrac* byval(%struct.tFrac) align 4 %rhs) #0 {
entry:
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 0
  %0 = load i32, i32* %num, align 4
  %num1 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 0
  %1 = load i32, i32* %num1, align 4
  %mul = mul nsw i32 %0, %1
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 1
  %2 = load i32, i32* %denom, align 4
  %denom2 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 1
  %3 = load i32, i32* %denom2, align 4
  %mul3 = mul nsw i32 %2, %3
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.result, i32 %mul, i32 %mul3)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @equalFrac(%struct.tFrac* byval(%struct.tFrac) align 4 %lhs, %struct.tFrac* byval(%struct.tFrac) align 4 %rhs) #0 {
entry:
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 0
  %0 = load i32, i32* %num, align 4
  %num1 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 0
  %1 = load i32, i32* %num1, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 1
  %2 = load i32, i32* %denom, align 4
  %denom2 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 1
  %3 = load i32, i32* %denom2, align 4
  %cmp3 = icmp eq i32 %2, %3
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp3, %land.rhs ]
  ret i1 %4
}

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @lessFrac(%struct.tFrac* byval(%struct.tFrac) align 4 %lhs, %struct.tFrac* byval(%struct.tFrac) align 4 %rhs) #0 {
entry:
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 0
  %0 = load i32, i32* %num, align 4
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 1
  %1 = load i32, i32* %denom, align 4
  %mul = mul nsw i32 %0, %1
  %num1 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 0
  %2 = load i32, i32* %num1, align 4
  %denom2 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 1
  %3 = load i32, i32* %denom2, align 4
  %mul3 = mul nsw i32 %2, %3
  %cmp = icmp slt i32 %mul, %mul3
  ret i1 %cmp
}

; Function Attrs: noinline nounwind optnone
define hidden void @printFrac(%struct.tFrac* byval(%struct.tFrac) align 4 %f) #0 {
entry:
  %buffer = alloca [7 x i8], align 1
  %len = alloca i32, align 4
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 1
  %0 = load i32, i32* %denom, align 4
  %cmp = icmp ne i32 %0, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %arraydecay = getelementptr inbounds [7 x i8], [7 x i8]* %buffer, i32 0, i32 0
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 0
  %1 = load i32, i32* %num, align 4
  %denom1 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 1
  %2 = load i32, i32* %denom1, align 4
  %call = call i32 (i8*, i32, i8*, ...) @snprintf(i8* %arraydecay, i32 7, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i32 %1, i32 %2)
  br label %if.end

if.else:                                          ; preds = %entry
  %arraydecay2 = getelementptr inbounds [7 x i8], [7 x i8]* %buffer, i32 0, i32 0
  %num3 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 0
  %3 = load i32, i32* %num3, align 4
  %call4 = call i32 (i8*, i32, i8*, ...) @snprintf(i8* %arraydecay2, i32 7, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %3)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %arraydecay5 = getelementptr inbounds [7 x i8], [7 x i8]* %buffer, i32 0, i32 0
  %call6 = call i32 @strlen(i8* %arraydecay5) #6
  %sub = sub i32 7, %call6
  store i32 %sub, i32* %len, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %4 = load i32, i32* %len, align 4
  %dec = add nsw i32 %4, -1
  store i32 %dec, i32* %len, align 4
  %cmp7 = icmp sgt i32 %4, 0
  br i1 %cmp7, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call8 = call i32 @putc(i32 32, %struct._IO_FILE* %5)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %arraydecay9 = getelementptr inbounds [7 x i8], [7 x i8]* %buffer, i32 0, i32 0
  %call10 = call i32 (i8*, ...) @printf(i8* %arraydecay9)
  ret void
}

declare i32 @snprintf(i8* %0, i32 %1, i8* %2, ...) #2

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #3

declare i32 @putc(i32 %0, %struct._IO_FILE* %1) #2

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden void @bernoulli(%struct.tFrac* noalias sret align 4 %agg.result, i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %a = alloca [16 x %struct.tFrac], align 16
  %j = alloca i32, align 4
  %m = alloca i32, align 4
  %tmp = alloca %struct.tFrac, align 4
  %tmp9 = alloca %struct.tFrac, align 4
  %agg.tmp = alloca %struct.tFrac, align 4
  %agg.tmp13 = alloca %struct.tFrac, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 0
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %arrayidx, i32 0, i32 0
  store i32 0, i32* %num, align 16
  %arrayidx1 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 0
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %arrayidx1, i32 0, i32 1
  store i32 0, i32* %denom, align 4
  %arrayidx2 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 0
  %1 = bitcast %struct.tFrac* %agg.result to i8*
  %2 = bitcast %struct.tFrac* %arrayidx2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %1, i8* align 16 %2, i32 8, i1 false)
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %m, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc14, %if.end
  %3 = load i32, i32* %m, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp3 = icmp sle i32 %3, %4
  br i1 %cmp3, label %for.body, label %for.end15

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %m, align 4
  %arrayidx4 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 %5
  %6 = load i32, i32* %m, align 4
  %add = add nsw i32 %6, 1
  call void @makeFrac(%struct.tFrac* sret align 4 %tmp, i32 1, i32 %add)
  %7 = bitcast %struct.tFrac* %arrayidx4 to i8*
  %8 = bitcast %struct.tFrac* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %7, i8* align 4 %8, i32 8, i1 false)
  %9 = load i32, i32* %m, align 4
  store i32 %9, i32* %j, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %for.body
  %10 = load i32, i32* %j, align 4
  %cmp6 = icmp sge i32 %10, 1
  br i1 %cmp6, label %for.body7, label %for.end

for.body7:                                        ; preds = %for.cond5
  %11 = load i32, i32* %j, align 4
  %sub = sub nsw i32 %11, 1
  %arrayidx8 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 %sub
  %12 = load i32, i32* %j, align 4
  %sub10 = sub nsw i32 %12, 1
  %arrayidx11 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 %sub10
  %13 = load i32, i32* %j, align 4
  %arrayidx12 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 %13
  call void @subFrac(%struct.tFrac* sret align 4 %agg.tmp, %struct.tFrac* byval(%struct.tFrac) align 4 %arrayidx11, %struct.tFrac* byval(%struct.tFrac) align 4 %arrayidx12)
  %14 = load i32, i32* %j, align 4
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.tmp13, i32 %14, i32 1)
  call void @multFrac(%struct.tFrac* sret align 4 %tmp9, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp13)
  %15 = bitcast %struct.tFrac* %arrayidx8 to i8*
  %16 = bitcast %struct.tFrac* %tmp9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %15, i8* align 4 %16, i32 8, i1 false)
  br label %for.inc

for.inc:                                          ; preds = %for.body7
  %17 = load i32, i32* %j, align 4
  %dec = add nsw i32 %17, -1
  store i32 %dec, i32* %j, align 4
  br label %for.cond5

for.end:                                          ; preds = %for.cond5
  br label %for.inc14

for.inc14:                                        ; preds = %for.end
  %18 = load i32, i32* %m, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %m, align 4
  br label %for.cond

for.end15:                                        ; preds = %for.cond
  %19 = load i32, i32* %n.addr, align 4
  %cmp16 = icmp ne i32 %19, 1
  br i1 %cmp16, label %if.then17, label %if.end19

if.then17:                                        ; preds = %for.end15
  %arrayidx18 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 0
  %20 = bitcast %struct.tFrac* %agg.result to i8*
  %21 = bitcast %struct.tFrac* %arrayidx18 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %20, i8* align 16 %21, i32 8, i1 false)
  br label %return

if.end19:                                         ; preds = %for.end15
  %arrayidx20 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 0
  call void @negateFrac(%struct.tFrac* sret align 4 %agg.result, %struct.tFrac* byval(%struct.tFrac) align 4 %arrayidx20)
  br label %return

return:                                           ; preds = %if.end19, %if.then17, %if.then
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #4

; Function Attrs: noinline nounwind optnone
define hidden void @faulhaber(i32 %p) #0 {
entry:
  %p.addr = alloca i32, align 4
  %q = alloca %struct.tFrac, align 4
  %coeffs = alloca %struct.tFrac*, align 4
  %j = alloca i32, align 4
  %sign = alloca i32, align 4
  %tmp = alloca %struct.tFrac, align 4
  %tmp3 = alloca %struct.tFrac, align 4
  %agg.tmp = alloca %struct.tFrac, align 4
  %agg.tmp4 = alloca %struct.tFrac, align 4
  %agg.tmp5 = alloca %struct.tFrac, align 4
  %agg.tmp6 = alloca %struct.tFrac, align 4
  %agg.tmp9 = alloca %struct.tFrac, align 4
  store i32 %p, i32* %p.addr, align 4
  %0 = load i32, i32* %p.addr, align 4
  %add = add nsw i32 %0, 1
  %mul = mul i32 8, %add
  %call = call noalias i8* @malloc(i32 %mul)
  %1 = bitcast i8* %call to %struct.tFrac*
  store %struct.tFrac* %1, %struct.tFrac** %coeffs, align 4
  %2 = load i32, i32* %p.addr, align 4
  %add1 = add nsw i32 %2, 1
  call void @makeFrac(%struct.tFrac* sret align 4 %tmp, i32 1, i32 %add1)
  %3 = bitcast %struct.tFrac* %q to i8*
  %4 = bitcast %struct.tFrac* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %3, i8* align 4 %4, i32 8, i1 false)
  store i32 -1, i32* %sign, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %p.addr, align 4
  %cmp = icmp sle i32 %5, %6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i32, i32* %sign, align 4
  %mul2 = mul nsw i32 -1, %7
  store i32 %mul2, i32* %sign, align 4
  %8 = load %struct.tFrac*, %struct.tFrac** %coeffs, align 4
  %9 = load i32, i32* %p.addr, align 4
  %10 = load i32, i32* %j, align 4
  %sub = sub nsw i32 %9, %10
  %arrayidx = getelementptr inbounds %struct.tFrac, %struct.tFrac* %8, i32 %sub
  %11 = load i32, i32* %sign, align 4
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.tmp5, i32 %11, i32 1)
  call void @multFrac(%struct.tFrac* sret align 4 %agg.tmp4, %struct.tFrac* byval(%struct.tFrac) align 4 %q, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp5)
  %12 = load i32, i32* %p.addr, align 4
  %add7 = add nsw i32 %12, 1
  %13 = load i32, i32* %j, align 4
  %call8 = call i32 @binomial(i32 %add7, i32 %13)
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.tmp6, i32 %call8, i32 1)
  call void @multFrac(%struct.tFrac* sret align 4 %agg.tmp, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp4, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp6)
  %14 = load i32, i32* %j, align 4
  call void @bernoulli(%struct.tFrac* sret align 4 %agg.tmp9, i32 %14)
  call void @multFrac(%struct.tFrac* sret align 4 %tmp3, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp9)
  %15 = bitcast %struct.tFrac* %arrayidx to i8*
  %16 = bitcast %struct.tFrac* %tmp3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %15, i8* align 4 %16, i32 8, i1 false)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %17 = load i32, i32* %j, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc14, %for.end
  %18 = load i32, i32* %j, align 4
  %19 = load i32, i32* %p.addr, align 4
  %cmp11 = icmp sle i32 %18, %19
  br i1 %cmp11, label %for.body12, label %for.end16

for.body12:                                       ; preds = %for.cond10
  %20 = load %struct.tFrac*, %struct.tFrac** %coeffs, align 4
  %21 = load i32, i32* %j, align 4
  %arrayidx13 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %20, i32 %21
  call void @printFrac(%struct.tFrac* byval(%struct.tFrac) align 4 %arrayidx13)
  br label %for.inc14

for.inc14:                                        ; preds = %for.body12
  %22 = load i32, i32* %j, align 4
  %inc15 = add nsw i32 %22, 1
  store i32 %inc15, i32* %j, align 4
  br label %for.cond10

for.end16:                                        ; preds = %for.cond10
  %call17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %23 = load %struct.tFrac*, %struct.tFrac** %coeffs, align 4
  %24 = bitcast %struct.tFrac* %23 to i8*
  call void @free(i8* %24)
  ret void
}

declare noalias i8* @malloc(i32 %0) #2

declare void @free(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  call void @faulhaber(i32 %1)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %i, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind willreturn }
attributes #5 = { nounwind readnone }
attributes #6 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %denom, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ne i32 %0, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %num, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %denom1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %num3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call6 = call i32 @strlen(i8* %arraydecay5) #5
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub i32 7, %call6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub 7:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec = add nsw i32 %4, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp7 = icmp sgt i32 %4, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 0:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sub 7:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 7
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 8
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for printFrac()

; entering Souper's runOnFunction() for bernoulli()

; ModuleID = './Faulhabers_triangle.c.bc'
source_filename = "./Faulhabers_triangle.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque
%struct.tFrac = type { i32, i32 }

@.str = private unnamed_addr constant [6 x i8] c"%d/%d\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@stdout = external constant %struct._IO_FILE*, align 4
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @binomial(i32 %n, i32 %k) #0 {
entry:
  %retval = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %k.addr = alloca i32, align 4
  %num = alloca i32, align 4
  %denom = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %k, i32* %k.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %k.addr, align 4
  %cmp1 = icmp slt i32 %1, 0
  br i1 %cmp1, label %if.then, label %lor.lhs.false2

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %2 = load i32, i32* %n.addr, align 4
  %3 = load i32, i32* %k.addr, align 4
  %cmp3 = icmp slt i32 %2, %3
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false2, %lor.lhs.false, %entry
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false2
  %4 = load i32, i32* %n.addr, align 4
  %cmp4 = icmp eq i32 %4, 0
  br i1 %cmp4, label %if.then7, label %lor.lhs.false5

lor.lhs.false5:                                   ; preds = %if.end
  %5 = load i32, i32* %k.addr, align 4
  %cmp6 = icmp eq i32 %5, 0
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %lor.lhs.false5, %if.end
  store i32 1, i32* %retval, align 4
  br label %return

if.end8:                                          ; preds = %lor.lhs.false5
  store i32 1, i32* %num, align 4
  %6 = load i32, i32* %k.addr, align 4
  %add = add nsw i32 %6, 1
  store i32 %add, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end8
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %n.addr, align 4
  %cmp9 = icmp sle i32 %7, %8
  br i1 %cmp9, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i32, i32* %num, align 4
  %10 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %9, %10
  store i32 %mul, i32* %num, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %denom, align 4
  store i32 2, i32* %i, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc14, %for.end
  %12 = load i32, i32* %i, align 4
  %13 = load i32, i32* %n.addr, align 4
  %14 = load i32, i32* %k.addr, align 4
  %sub = sub nsw i32 %13, %14
  %cmp11 = icmp sle i32 %12, %sub
  br i1 %cmp11, label %for.body12, label %for.end16

for.body12:                                       ; preds = %for.cond10
  %15 = load i32, i32* %i, align 4
  %16 = load i32, i32* %denom, align 4
  %mul13 = mul nsw i32 %16, %15
  store i32 %mul13, i32* %denom, align 4
  br label %for.inc14

for.inc14:                                        ; preds = %for.body12
  %17 = load i32, i32* %i, align 4
  %inc15 = add nsw i32 %17, 1
  store i32 %inc15, i32* %i, align 4
  br label %for.cond10

for.end16:                                        ; preds = %for.cond10
  %18 = load i32, i32* %num, align 4
  %19 = load i32, i32* %denom, align 4
  %div = sdiv i32 %18, %19
  store i32 %div, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end16, %if.then7, %if.then
  %20 = load i32, i32* %retval, align 4
  ret i32 %20
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @gcd(i32 %a, i32 %b) #0 {
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %b.addr, align 4
  %cmp = icmp ne i32 %0, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i32, i32* %a.addr, align 4
  %2 = load i32, i32* %b.addr, align 4
  %rem = srem i32 %1, %2
  store i32 %rem, i32* %temp, align 4
  %3 = load i32, i32* %b.addr, align 4
  store i32 %3, i32* %a.addr, align 4
  %4 = load i32, i32* %temp, align 4
  store i32 %4, i32* %b.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %5 = load i32, i32* %a.addr, align 4
  ret i32 %5
}

; Function Attrs: noinline nounwind optnone
define hidden void @makeFrac(%struct.tFrac* noalias sret align 4 %agg.result, i32 %n, i32 %d) #0 {
entry:
  %n.addr = alloca i32, align 4
  %d.addr = alloca i32, align 4
  %g = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %d, i32* %d.addr, align 4
  %0 = load i32, i32* %d.addr, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %agg.result, i32 0, i32 0
  store i32 0, i32* %num, align 4
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %agg.result, i32 0, i32 1
  store i32 0, i32* %denom, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4
  %cmp1 = icmp eq i32 %1, 0
  br i1 %cmp1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.end
  store i32 1, i32* %d.addr, align 4
  br label %if.end7

if.else:                                          ; preds = %if.end
  %2 = load i32, i32* %d.addr, align 4
  %cmp3 = icmp slt i32 %2, 0
  br i1 %cmp3, label %if.then4, label %if.end6

if.then4:                                         ; preds = %if.else
  %3 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 0, %3
  store i32 %sub, i32* %n.addr, align 4
  %4 = load i32, i32* %d.addr, align 4
  %sub5 = sub nsw i32 0, %4
  store i32 %sub5, i32* %d.addr, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.then4, %if.else
  br label %if.end7

if.end7:                                          ; preds = %if.end6, %if.then2
  %5 = load i32, i32* %n.addr, align 4
  %6 = load i32, i32* %d.addr, align 4
  %call = call i32 @gcd(i32 %5, i32 %6)
  %call8 = call i32 @abs(i32 %call) #5
  store i32 %call8, i32* %g, align 4
  %7 = load i32, i32* %g, align 4
  %cmp9 = icmp sgt i32 %7, 1
  br i1 %cmp9, label %if.then10, label %if.end12

if.then10:                                        ; preds = %if.end7
  %8 = load i32, i32* %n.addr, align 4
  %9 = load i32, i32* %g, align 4
  %div = sdiv i32 %8, %9
  store i32 %div, i32* %n.addr, align 4
  %10 = load i32, i32* %d.addr, align 4
  %11 = load i32, i32* %g, align 4
  %div11 = sdiv i32 %10, %11
  store i32 %div11, i32* %d.addr, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then10, %if.end7
  %12 = load i32, i32* %n.addr, align 4
  %num13 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %agg.result, i32 0, i32 0
  store i32 %12, i32* %num13, align 4
  %13 = load i32, i32* %d.addr, align 4
  %denom14 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %agg.result, i32 0, i32 1
  store i32 %13, i32* %denom14, align 4
  br label %return

return:                                           ; preds = %if.end12, %if.then
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @abs(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @negateFrac(%struct.tFrac* noalias sret align 4 %agg.result, %struct.tFrac* byval(%struct.tFrac) align 4 %f) #0 {
entry:
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 0
  %0 = load i32, i32* %num, align 4
  %sub = sub nsw i32 0, %0
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 1
  %1 = load i32, i32* %denom, align 4
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.result, i32 %sub, i32 %1)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @subFrac(%struct.tFrac* noalias sret align 4 %agg.result, %struct.tFrac* byval(%struct.tFrac) align 4 %lhs, %struct.tFrac* byval(%struct.tFrac) align 4 %rhs) #0 {
entry:
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 0
  %0 = load i32, i32* %num, align 4
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 1
  %1 = load i32, i32* %denom, align 4
  %mul = mul nsw i32 %0, %1
  %denom1 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 1
  %2 = load i32, i32* %denom1, align 4
  %num2 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 0
  %3 = load i32, i32* %num2, align 4
  %mul3 = mul nsw i32 %2, %3
  %sub = sub nsw i32 %mul, %mul3
  %denom4 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 1
  %4 = load i32, i32* %denom4, align 4
  %denom5 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 1
  %5 = load i32, i32* %denom5, align 4
  %mul6 = mul nsw i32 %4, %5
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.result, i32 %sub, i32 %mul6)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @multFrac(%struct.tFrac* noalias sret align 4 %agg.result, %struct.tFrac* byval(%struct.tFrac) align 4 %lhs, %struct.tFrac* byval(%struct.tFrac) align 4 %rhs) #0 {
entry:
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 0
  %0 = load i32, i32* %num, align 4
  %num1 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 0
  %1 = load i32, i32* %num1, align 4
  %mul = mul nsw i32 %0, %1
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 1
  %2 = load i32, i32* %denom, align 4
  %denom2 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 1
  %3 = load i32, i32* %denom2, align 4
  %mul3 = mul nsw i32 %2, %3
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.result, i32 %mul, i32 %mul3)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @equalFrac(%struct.tFrac* byval(%struct.tFrac) align 4 %lhs, %struct.tFrac* byval(%struct.tFrac) align 4 %rhs) #0 {
entry:
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 0
  %0 = load i32, i32* %num, align 4
  %num1 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 0
  %1 = load i32, i32* %num1, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 1
  %2 = load i32, i32* %denom, align 4
  %denom2 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 1
  %3 = load i32, i32* %denom2, align 4
  %cmp3 = icmp eq i32 %2, %3
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp3, %land.rhs ]
  ret i1 %4
}

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @lessFrac(%struct.tFrac* byval(%struct.tFrac) align 4 %lhs, %struct.tFrac* byval(%struct.tFrac) align 4 %rhs) #0 {
entry:
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 0
  %0 = load i32, i32* %num, align 4
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 1
  %1 = load i32, i32* %denom, align 4
  %mul = mul nsw i32 %0, %1
  %num1 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 0
  %2 = load i32, i32* %num1, align 4
  %denom2 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 1
  %3 = load i32, i32* %denom2, align 4
  %mul3 = mul nsw i32 %2, %3
  %cmp = icmp slt i32 %mul, %mul3
  ret i1 %cmp
}

; Function Attrs: noinline nounwind optnone
define hidden void @printFrac(%struct.tFrac* byval(%struct.tFrac) align 4 %f) #0 {
entry:
  %buffer = alloca [7 x i8], align 1
  %len = alloca i32, align 4
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 1
  %0 = load i32, i32* %denom, align 4
  %cmp = icmp ne i32 %0, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %arraydecay = getelementptr inbounds [7 x i8], [7 x i8]* %buffer, i32 0, i32 0
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 0
  %1 = load i32, i32* %num, align 4
  %denom1 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 1
  %2 = load i32, i32* %denom1, align 4
  %call = call i32 (i8*, i32, i8*, ...) @snprintf(i8* %arraydecay, i32 7, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i32 %1, i32 %2)
  br label %if.end

if.else:                                          ; preds = %entry
  %arraydecay2 = getelementptr inbounds [7 x i8], [7 x i8]* %buffer, i32 0, i32 0
  %num3 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 0
  %3 = load i32, i32* %num3, align 4
  %call4 = call i32 (i8*, i32, i8*, ...) @snprintf(i8* %arraydecay2, i32 7, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %3)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %arraydecay5 = getelementptr inbounds [7 x i8], [7 x i8]* %buffer, i32 0, i32 0
  %call6 = call i32 @strlen(i8* %arraydecay5) #6
  %sub = sub i32 7, %call6
  store i32 %sub, i32* %len, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %4 = load i32, i32* %len, align 4
  %dec = add nsw i32 %4, -1
  store i32 %dec, i32* %len, align 4
  %cmp7 = icmp sgt i32 %4, 0
  br i1 %cmp7, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call8 = call i32 @putc(i32 32, %struct._IO_FILE* %5)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %arraydecay9 = getelementptr inbounds [7 x i8], [7 x i8]* %buffer, i32 0, i32 0
  %call10 = call i32 (i8*, ...) @printf(i8* %arraydecay9)
  ret void
}

declare i32 @snprintf(i8* %0, i32 %1, i8* %2, ...) #2

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #3

declare i32 @putc(i32 %0, %struct._IO_FILE* %1) #2

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden void @bernoulli(%struct.tFrac* noalias sret align 4 %agg.result, i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %a = alloca [16 x %struct.tFrac], align 16
  %j = alloca i32, align 4
  %m = alloca i32, align 4
  %tmp = alloca %struct.tFrac, align 4
  %tmp9 = alloca %struct.tFrac, align 4
  %agg.tmp = alloca %struct.tFrac, align 4
  %agg.tmp13 = alloca %struct.tFrac, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 0
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %arrayidx, i32 0, i32 0
  store i32 0, i32* %num, align 16
  %arrayidx1 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 0
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %arrayidx1, i32 0, i32 1
  store i32 0, i32* %denom, align 4
  %arrayidx2 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 0
  %1 = bitcast %struct.tFrac* %agg.result to i8*
  %2 = bitcast %struct.tFrac* %arrayidx2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %1, i8* align 16 %2, i32 8, i1 false)
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %m, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc14, %if.end
  %3 = load i32, i32* %m, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp3 = icmp sle i32 %3, %4
  br i1 %cmp3, label %for.body, label %for.end15

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %m, align 4
  %arrayidx4 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 %5
  %6 = load i32, i32* %m, align 4
  %add = add nsw i32 %6, 1
  call void @makeFrac(%struct.tFrac* sret align 4 %tmp, i32 1, i32 %add)
  %7 = bitcast %struct.tFrac* %arrayidx4 to i8*
  %8 = bitcast %struct.tFrac* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %7, i8* align 4 %8, i32 8, i1 false)
  %9 = load i32, i32* %m, align 4
  store i32 %9, i32* %j, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %for.body
  %10 = load i32, i32* %j, align 4
  %cmp6 = icmp sge i32 %10, 1
  br i1 %cmp6, label %for.body7, label %for.end

for.body7:                                        ; preds = %for.cond5
  %11 = load i32, i32* %j, align 4
  %sub = sub nsw i32 %11, 1
  %arrayidx8 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 %sub
  %12 = load i32, i32* %j, align 4
  %sub10 = sub nsw i32 %12, 1
  %arrayidx11 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 %sub10
  %13 = load i32, i32* %j, align 4
  %arrayidx12 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 %13
  call void @subFrac(%struct.tFrac* sret align 4 %agg.tmp, %struct.tFrac* byval(%struct.tFrac) align 4 %arrayidx11, %struct.tFrac* byval(%struct.tFrac) align 4 %arrayidx12)
  %14 = load i32, i32* %j, align 4
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.tmp13, i32 %14, i32 1)
  call void @multFrac(%struct.tFrac* sret align 4 %tmp9, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp13)
  %15 = bitcast %struct.tFrac* %arrayidx8 to i8*
  %16 = bitcast %struct.tFrac* %tmp9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %15, i8* align 4 %16, i32 8, i1 false)
  br label %for.inc

for.inc:                                          ; preds = %for.body7
  %17 = load i32, i32* %j, align 4
  %dec = add nsw i32 %17, -1
  store i32 %dec, i32* %j, align 4
  br label %for.cond5

for.end:                                          ; preds = %for.cond5
  br label %for.inc14

for.inc14:                                        ; preds = %for.end
  %18 = load i32, i32* %m, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %m, align 4
  br label %for.cond

for.end15:                                        ; preds = %for.cond
  %19 = load i32, i32* %n.addr, align 4
  %cmp16 = icmp ne i32 %19, 1
  br i1 %cmp16, label %if.then17, label %if.end19

if.then17:                                        ; preds = %for.end15
  %arrayidx18 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 0
  %20 = bitcast %struct.tFrac* %agg.result to i8*
  %21 = bitcast %struct.tFrac* %arrayidx18 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %20, i8* align 16 %21, i32 8, i1 false)
  br label %return

if.end19:                                         ; preds = %for.end15
  %arrayidx20 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 0
  call void @negateFrac(%struct.tFrac* sret align 4 %agg.result, %struct.tFrac* byval(%struct.tFrac) align 4 %arrayidx20)
  br label %return

return:                                           ; preds = %if.end19, %if.then17, %if.then
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #4

; Function Attrs: noinline nounwind optnone
define hidden void @faulhaber(i32 %p) #0 {
entry:
  %p.addr = alloca i32, align 4
  %q = alloca %struct.tFrac, align 4
  %coeffs = alloca %struct.tFrac*, align 4
  %j = alloca i32, align 4
  %sign = alloca i32, align 4
  %tmp = alloca %struct.tFrac, align 4
  %tmp3 = alloca %struct.tFrac, align 4
  %agg.tmp = alloca %struct.tFrac, align 4
  %agg.tmp4 = alloca %struct.tFrac, align 4
  %agg.tmp5 = alloca %struct.tFrac, align 4
  %agg.tmp6 = alloca %struct.tFrac, align 4
  %agg.tmp9 = alloca %struct.tFrac, align 4
  store i32 %p, i32* %p.addr, align 4
  %0 = load i32, i32* %p.addr, align 4
  %add = add nsw i32 %0, 1
  %mul = mul i32 8, %add
  %call = call noalias i8* @malloc(i32 %mul)
  %1 = bitcast i8* %call to %struct.tFrac*
  store %struct.tFrac* %1, %struct.tFrac** %coeffs, align 4
  %2 = load i32, i32* %p.addr, align 4
  %add1 = add nsw i32 %2, 1
  call void @makeFrac(%struct.tFrac* sret align 4 %tmp, i32 1, i32 %add1)
  %3 = bitcast %struct.tFrac* %q to i8*
  %4 = bitcast %struct.tFrac* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %3, i8* align 4 %4, i32 8, i1 false)
  store i32 -1, i32* %sign, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %p.addr, align 4
  %cmp = icmp sle i32 %5, %6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i32, i32* %sign, align 4
  %mul2 = mul nsw i32 -1, %7
  store i32 %mul2, i32* %sign, align 4
  %8 = load %struct.tFrac*, %struct.tFrac** %coeffs, align 4
  %9 = load i32, i32* %p.addr, align 4
  %10 = load i32, i32* %j, align 4
  %sub = sub nsw i32 %9, %10
  %arrayidx = getelementptr inbounds %struct.tFrac, %struct.tFrac* %8, i32 %sub
  %11 = load i32, i32* %sign, align 4
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.tmp5, i32 %11, i32 1)
  call void @multFrac(%struct.tFrac* sret align 4 %agg.tmp4, %struct.tFrac* byval(%struct.tFrac) align 4 %q, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp5)
  %12 = load i32, i32* %p.addr, align 4
  %add7 = add nsw i32 %12, 1
  %13 = load i32, i32* %j, align 4
  %call8 = call i32 @binomial(i32 %add7, i32 %13)
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.tmp6, i32 %call8, i32 1)
  call void @multFrac(%struct.tFrac* sret align 4 %agg.tmp, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp4, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp6)
  %14 = load i32, i32* %j, align 4
  call void @bernoulli(%struct.tFrac* sret align 4 %agg.tmp9, i32 %14)
  call void @multFrac(%struct.tFrac* sret align 4 %tmp3, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp9)
  %15 = bitcast %struct.tFrac* %arrayidx to i8*
  %16 = bitcast %struct.tFrac* %tmp3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %15, i8* align 4 %16, i32 8, i1 false)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %17 = load i32, i32* %j, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc14, %for.end
  %18 = load i32, i32* %j, align 4
  %19 = load i32, i32* %p.addr, align 4
  %cmp11 = icmp sle i32 %18, %19
  br i1 %cmp11, label %for.body12, label %for.end16

for.body12:                                       ; preds = %for.cond10
  %20 = load %struct.tFrac*, %struct.tFrac** %coeffs, align 4
  %21 = load i32, i32* %j, align 4
  %arrayidx13 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %20, i32 %21
  call void @printFrac(%struct.tFrac* byval(%struct.tFrac) align 4 %arrayidx13)
  br label %for.inc14

for.inc14:                                        ; preds = %for.body12
  %22 = load i32, i32* %j, align 4
  %inc15 = add nsw i32 %22, 1
  store i32 %inc15, i32* %j, align 4
  br label %for.cond10

for.end16:                                        ; preds = %for.cond10
  %call17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %23 = load %struct.tFrac*, %struct.tFrac** %coeffs, align 4
  %24 = bitcast %struct.tFrac* %23 to i8*
  call void @free(i8* %24)
  ret void
}

declare noalias i8* @malloc(i32 %0) #2

declare void @free(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  call void @faulhaber(i32 %1)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %i, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind willreturn }
attributes #5 = { nounwind readnone }
attributes #6 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 0:i32
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %m, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp3 = icmp sle i32 %3, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %m, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %m, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %6, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %m, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp6 = icmp sge i32 %10, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %11, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub10 = sub nsw i32 %12, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec = add nsw i32 %17, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %m, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %18, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp16 = icmp ne i32 %19, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for bernoulli()

; entering Souper's runOnFunction() for faulhaber()

; ModuleID = './Faulhabers_triangle.c.bc'
source_filename = "./Faulhabers_triangle.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque
%struct.tFrac = type { i32, i32 }

@.str = private unnamed_addr constant [6 x i8] c"%d/%d\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@stdout = external constant %struct._IO_FILE*, align 4
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @binomial(i32 %n, i32 %k) #0 {
entry:
  %retval = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %k.addr = alloca i32, align 4
  %num = alloca i32, align 4
  %denom = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %k, i32* %k.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %k.addr, align 4
  %cmp1 = icmp slt i32 %1, 0
  br i1 %cmp1, label %if.then, label %lor.lhs.false2

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %2 = load i32, i32* %n.addr, align 4
  %3 = load i32, i32* %k.addr, align 4
  %cmp3 = icmp slt i32 %2, %3
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false2, %lor.lhs.false, %entry
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false2
  %4 = load i32, i32* %n.addr, align 4
  %cmp4 = icmp eq i32 %4, 0
  br i1 %cmp4, label %if.then7, label %lor.lhs.false5

lor.lhs.false5:                                   ; preds = %if.end
  %5 = load i32, i32* %k.addr, align 4
  %cmp6 = icmp eq i32 %5, 0
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %lor.lhs.false5, %if.end
  store i32 1, i32* %retval, align 4
  br label %return

if.end8:                                          ; preds = %lor.lhs.false5
  store i32 1, i32* %num, align 4
  %6 = load i32, i32* %k.addr, align 4
  %add = add nsw i32 %6, 1
  store i32 %add, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end8
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %n.addr, align 4
  %cmp9 = icmp sle i32 %7, %8
  br i1 %cmp9, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i32, i32* %num, align 4
  %10 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %9, %10
  store i32 %mul, i32* %num, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %denom, align 4
  store i32 2, i32* %i, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc14, %for.end
  %12 = load i32, i32* %i, align 4
  %13 = load i32, i32* %n.addr, align 4
  %14 = load i32, i32* %k.addr, align 4
  %sub = sub nsw i32 %13, %14
  %cmp11 = icmp sle i32 %12, %sub
  br i1 %cmp11, label %for.body12, label %for.end16

for.body12:                                       ; preds = %for.cond10
  %15 = load i32, i32* %i, align 4
  %16 = load i32, i32* %denom, align 4
  %mul13 = mul nsw i32 %16, %15
  store i32 %mul13, i32* %denom, align 4
  br label %for.inc14

for.inc14:                                        ; preds = %for.body12
  %17 = load i32, i32* %i, align 4
  %inc15 = add nsw i32 %17, 1
  store i32 %inc15, i32* %i, align 4
  br label %for.cond10

for.end16:                                        ; preds = %for.cond10
  %18 = load i32, i32* %num, align 4
  %19 = load i32, i32* %denom, align 4
  %div = sdiv i32 %18, %19
  store i32 %div, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end16, %if.then7, %if.then
  %20 = load i32, i32* %retval, align 4
  ret i32 %20
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @gcd(i32 %a, i32 %b) #0 {
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %b.addr, align 4
  %cmp = icmp ne i32 %0, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i32, i32* %a.addr, align 4
  %2 = load i32, i32* %b.addr, align 4
  %rem = srem i32 %1, %2
  store i32 %rem, i32* %temp, align 4
  %3 = load i32, i32* %b.addr, align 4
  store i32 %3, i32* %a.addr, align 4
  %4 = load i32, i32* %temp, align 4
  store i32 %4, i32* %b.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %5 = load i32, i32* %a.addr, align 4
  ret i32 %5
}

; Function Attrs: noinline nounwind optnone
define hidden void @makeFrac(%struct.tFrac* noalias sret align 4 %agg.result, i32 %n, i32 %d) #0 {
entry:
  %n.addr = alloca i32, align 4
  %d.addr = alloca i32, align 4
  %g = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %d, i32* %d.addr, align 4
  %0 = load i32, i32* %d.addr, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %agg.result, i32 0, i32 0
  store i32 0, i32* %num, align 4
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %agg.result, i32 0, i32 1
  store i32 0, i32* %denom, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4
  %cmp1 = icmp eq i32 %1, 0
  br i1 %cmp1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.end
  store i32 1, i32* %d.addr, align 4
  br label %if.end7

if.else:                                          ; preds = %if.end
  %2 = load i32, i32* %d.addr, align 4
  %cmp3 = icmp slt i32 %2, 0
  br i1 %cmp3, label %if.then4, label %if.end6

if.then4:                                         ; preds = %if.else
  %3 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 0, %3
  store i32 %sub, i32* %n.addr, align 4
  %4 = load i32, i32* %d.addr, align 4
  %sub5 = sub nsw i32 0, %4
  store i32 %sub5, i32* %d.addr, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.then4, %if.else
  br label %if.end7

if.end7:                                          ; preds = %if.end6, %if.then2
  %5 = load i32, i32* %n.addr, align 4
  %6 = load i32, i32* %d.addr, align 4
  %call = call i32 @gcd(i32 %5, i32 %6)
  %call8 = call i32 @abs(i32 %call) #5
  store i32 %call8, i32* %g, align 4
  %7 = load i32, i32* %g, align 4
  %cmp9 = icmp sgt i32 %7, 1
  br i1 %cmp9, label %if.then10, label %if.end12

if.then10:                                        ; preds = %if.end7
  %8 = load i32, i32* %n.addr, align 4
  %9 = load i32, i32* %g, align 4
  %div = sdiv i32 %8, %9
  store i32 %div, i32* %n.addr, align 4
  %10 = load i32, i32* %d.addr, align 4
  %11 = load i32, i32* %g, align 4
  %div11 = sdiv i32 %10, %11
  store i32 %div11, i32* %d.addr, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then10, %if.end7
  %12 = load i32, i32* %n.addr, align 4
  %num13 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %agg.result, i32 0, i32 0
  store i32 %12, i32* %num13, align 4
  %13 = load i32, i32* %d.addr, align 4
  %denom14 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %agg.result, i32 0, i32 1
  store i32 %13, i32* %denom14, align 4
  br label %return

return:                                           ; preds = %if.end12, %if.then
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @abs(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @negateFrac(%struct.tFrac* noalias sret align 4 %agg.result, %struct.tFrac* byval(%struct.tFrac) align 4 %f) #0 {
entry:
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 0
  %0 = load i32, i32* %num, align 4
  %sub = sub nsw i32 0, %0
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 1
  %1 = load i32, i32* %denom, align 4
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.result, i32 %sub, i32 %1)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @subFrac(%struct.tFrac* noalias sret align 4 %agg.result, %struct.tFrac* byval(%struct.tFrac) align 4 %lhs, %struct.tFrac* byval(%struct.tFrac) align 4 %rhs) #0 {
entry:
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 0
  %0 = load i32, i32* %num, align 4
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 1
  %1 = load i32, i32* %denom, align 4
  %mul = mul nsw i32 %0, %1
  %denom1 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 1
  %2 = load i32, i32* %denom1, align 4
  %num2 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 0
  %3 = load i32, i32* %num2, align 4
  %mul3 = mul nsw i32 %2, %3
  %sub = sub nsw i32 %mul, %mul3
  %denom4 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 1
  %4 = load i32, i32* %denom4, align 4
  %denom5 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 1
  %5 = load i32, i32* %denom5, align 4
  %mul6 = mul nsw i32 %4, %5
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.result, i32 %sub, i32 %mul6)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @multFrac(%struct.tFrac* noalias sret align 4 %agg.result, %struct.tFrac* byval(%struct.tFrac) align 4 %lhs, %struct.tFrac* byval(%struct.tFrac) align 4 %rhs) #0 {
entry:
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 0
  %0 = load i32, i32* %num, align 4
  %num1 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 0
  %1 = load i32, i32* %num1, align 4
  %mul = mul nsw i32 %0, %1
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 1
  %2 = load i32, i32* %denom, align 4
  %denom2 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 1
  %3 = load i32, i32* %denom2, align 4
  %mul3 = mul nsw i32 %2, %3
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.result, i32 %mul, i32 %mul3)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @equalFrac(%struct.tFrac* byval(%struct.tFrac) align 4 %lhs, %struct.tFrac* byval(%struct.tFrac) align 4 %rhs) #0 {
entry:
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 0
  %0 = load i32, i32* %num, align 4
  %num1 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 0
  %1 = load i32, i32* %num1, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 1
  %2 = load i32, i32* %denom, align 4
  %denom2 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 1
  %3 = load i32, i32* %denom2, align 4
  %cmp3 = icmp eq i32 %2, %3
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp3, %land.rhs ]
  ret i1 %4
}

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @lessFrac(%struct.tFrac* byval(%struct.tFrac) align 4 %lhs, %struct.tFrac* byval(%struct.tFrac) align 4 %rhs) #0 {
entry:
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 0
  %0 = load i32, i32* %num, align 4
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 1
  %1 = load i32, i32* %denom, align 4
  %mul = mul nsw i32 %0, %1
  %num1 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 0
  %2 = load i32, i32* %num1, align 4
  %denom2 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 1
  %3 = load i32, i32* %denom2, align 4
  %mul3 = mul nsw i32 %2, %3
  %cmp = icmp slt i32 %mul, %mul3
  ret i1 %cmp
}

; Function Attrs: noinline nounwind optnone
define hidden void @printFrac(%struct.tFrac* byval(%struct.tFrac) align 4 %f) #0 {
entry:
  %buffer = alloca [7 x i8], align 1
  %len = alloca i32, align 4
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 1
  %0 = load i32, i32* %denom, align 4
  %cmp = icmp ne i32 %0, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %arraydecay = getelementptr inbounds [7 x i8], [7 x i8]* %buffer, i32 0, i32 0
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 0
  %1 = load i32, i32* %num, align 4
  %denom1 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 1
  %2 = load i32, i32* %denom1, align 4
  %call = call i32 (i8*, i32, i8*, ...) @snprintf(i8* %arraydecay, i32 7, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i32 %1, i32 %2)
  br label %if.end

if.else:                                          ; preds = %entry
  %arraydecay2 = getelementptr inbounds [7 x i8], [7 x i8]* %buffer, i32 0, i32 0
  %num3 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 0
  %3 = load i32, i32* %num3, align 4
  %call4 = call i32 (i8*, i32, i8*, ...) @snprintf(i8* %arraydecay2, i32 7, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %3)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %arraydecay5 = getelementptr inbounds [7 x i8], [7 x i8]* %buffer, i32 0, i32 0
  %call6 = call i32 @strlen(i8* %arraydecay5) #6
  %sub = sub i32 7, %call6
  store i32 %sub, i32* %len, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %4 = load i32, i32* %len, align 4
  %dec = add nsw i32 %4, -1
  store i32 %dec, i32* %len, align 4
  %cmp7 = icmp sgt i32 %4, 0
  br i1 %cmp7, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call8 = call i32 @putc(i32 32, %struct._IO_FILE* %5)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %arraydecay9 = getelementptr inbounds [7 x i8], [7 x i8]* %buffer, i32 0, i32 0
  %call10 = call i32 (i8*, ...) @printf(i8* %arraydecay9)
  ret void
}

declare i32 @snprintf(i8* %0, i32 %1, i8* %2, ...) #2

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #3

declare i32 @putc(i32 %0, %struct._IO_FILE* %1) #2

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden void @bernoulli(%struct.tFrac* noalias sret align 4 %agg.result, i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %a = alloca [16 x %struct.tFrac], align 16
  %j = alloca i32, align 4
  %m = alloca i32, align 4
  %tmp = alloca %struct.tFrac, align 4
  %tmp9 = alloca %struct.tFrac, align 4
  %agg.tmp = alloca %struct.tFrac, align 4
  %agg.tmp13 = alloca %struct.tFrac, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 0
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %arrayidx, i32 0, i32 0
  store i32 0, i32* %num, align 16
  %arrayidx1 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 0
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %arrayidx1, i32 0, i32 1
  store i32 0, i32* %denom, align 4
  %arrayidx2 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 0
  %1 = bitcast %struct.tFrac* %agg.result to i8*
  %2 = bitcast %struct.tFrac* %arrayidx2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %1, i8* align 16 %2, i32 8, i1 false)
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %m, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc14, %if.end
  %3 = load i32, i32* %m, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp3 = icmp sle i32 %3, %4
  br i1 %cmp3, label %for.body, label %for.end15

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %m, align 4
  %arrayidx4 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 %5
  %6 = load i32, i32* %m, align 4
  %add = add nsw i32 %6, 1
  call void @makeFrac(%struct.tFrac* sret align 4 %tmp, i32 1, i32 %add)
  %7 = bitcast %struct.tFrac* %arrayidx4 to i8*
  %8 = bitcast %struct.tFrac* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %7, i8* align 4 %8, i32 8, i1 false)
  %9 = load i32, i32* %m, align 4
  store i32 %9, i32* %j, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %for.body
  %10 = load i32, i32* %j, align 4
  %cmp6 = icmp sge i32 %10, 1
  br i1 %cmp6, label %for.body7, label %for.end

for.body7:                                        ; preds = %for.cond5
  %11 = load i32, i32* %j, align 4
  %sub = sub nsw i32 %11, 1
  %arrayidx8 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 %sub
  %12 = load i32, i32* %j, align 4
  %sub10 = sub nsw i32 %12, 1
  %arrayidx11 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 %sub10
  %13 = load i32, i32* %j, align 4
  %arrayidx12 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 %13
  call void @subFrac(%struct.tFrac* sret align 4 %agg.tmp, %struct.tFrac* byval(%struct.tFrac) align 4 %arrayidx11, %struct.tFrac* byval(%struct.tFrac) align 4 %arrayidx12)
  %14 = load i32, i32* %j, align 4
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.tmp13, i32 %14, i32 1)
  call void @multFrac(%struct.tFrac* sret align 4 %tmp9, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp13)
  %15 = bitcast %struct.tFrac* %arrayidx8 to i8*
  %16 = bitcast %struct.tFrac* %tmp9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %15, i8* align 4 %16, i32 8, i1 false)
  br label %for.inc

for.inc:                                          ; preds = %for.body7
  %17 = load i32, i32* %j, align 4
  %dec = add nsw i32 %17, -1
  store i32 %dec, i32* %j, align 4
  br label %for.cond5

for.end:                                          ; preds = %for.cond5
  br label %for.inc14

for.inc14:                                        ; preds = %for.end
  %18 = load i32, i32* %m, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %m, align 4
  br label %for.cond

for.end15:                                        ; preds = %for.cond
  %19 = load i32, i32* %n.addr, align 4
  %cmp16 = icmp ne i32 %19, 1
  br i1 %cmp16, label %if.then17, label %if.end19

if.then17:                                        ; preds = %for.end15
  %arrayidx18 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 0
  %20 = bitcast %struct.tFrac* %agg.result to i8*
  %21 = bitcast %struct.tFrac* %arrayidx18 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %20, i8* align 16 %21, i32 8, i1 false)
  br label %return

if.end19:                                         ; preds = %for.end15
  %arrayidx20 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 0
  call void @negateFrac(%struct.tFrac* sret align 4 %agg.result, %struct.tFrac* byval(%struct.tFrac) align 4 %arrayidx20)
  br label %return

return:                                           ; preds = %if.end19, %if.then17, %if.then
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #4

; Function Attrs: noinline nounwind optnone
define hidden void @faulhaber(i32 %p) #0 {
entry:
  %p.addr = alloca i32, align 4
  %q = alloca %struct.tFrac, align 4
  %coeffs = alloca %struct.tFrac*, align 4
  %j = alloca i32, align 4
  %sign = alloca i32, align 4
  %tmp = alloca %struct.tFrac, align 4
  %tmp3 = alloca %struct.tFrac, align 4
  %agg.tmp = alloca %struct.tFrac, align 4
  %agg.tmp4 = alloca %struct.tFrac, align 4
  %agg.tmp5 = alloca %struct.tFrac, align 4
  %agg.tmp6 = alloca %struct.tFrac, align 4
  %agg.tmp9 = alloca %struct.tFrac, align 4
  store i32 %p, i32* %p.addr, align 4
  %0 = load i32, i32* %p.addr, align 4
  %add = add nsw i32 %0, 1
  %mul = mul i32 8, %add
  %call = call noalias i8* @malloc(i32 %mul)
  %1 = bitcast i8* %call to %struct.tFrac*
  store %struct.tFrac* %1, %struct.tFrac** %coeffs, align 4
  %2 = load i32, i32* %p.addr, align 4
  %add1 = add nsw i32 %2, 1
  call void @makeFrac(%struct.tFrac* sret align 4 %tmp, i32 1, i32 %add1)
  %3 = bitcast %struct.tFrac* %q to i8*
  %4 = bitcast %struct.tFrac* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %3, i8* align 4 %4, i32 8, i1 false)
  store i32 -1, i32* %sign, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %p.addr, align 4
  %cmp = icmp sle i32 %5, %6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i32, i32* %sign, align 4
  %mul2 = mul nsw i32 -1, %7
  store i32 %mul2, i32* %sign, align 4
  %8 = load %struct.tFrac*, %struct.tFrac** %coeffs, align 4
  %9 = load i32, i32* %p.addr, align 4
  %10 = load i32, i32* %j, align 4
  %sub = sub nsw i32 %9, %10
  %arrayidx = getelementptr inbounds %struct.tFrac, %struct.tFrac* %8, i32 %sub
  %11 = load i32, i32* %sign, align 4
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.tmp5, i32 %11, i32 1)
  call void @multFrac(%struct.tFrac* sret align 4 %agg.tmp4, %struct.tFrac* byval(%struct.tFrac) align 4 %q, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp5)
  %12 = load i32, i32* %p.addr, align 4
  %add7 = add nsw i32 %12, 1
  %13 = load i32, i32* %j, align 4
  %call8 = call i32 @binomial(i32 %add7, i32 %13)
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.tmp6, i32 %call8, i32 1)
  call void @multFrac(%struct.tFrac* sret align 4 %agg.tmp, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp4, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp6)
  %14 = load i32, i32* %j, align 4
  call void @bernoulli(%struct.tFrac* sret align 4 %agg.tmp9, i32 %14)
  call void @multFrac(%struct.tFrac* sret align 4 %tmp3, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp9)
  %15 = bitcast %struct.tFrac* %arrayidx to i8*
  %16 = bitcast %struct.tFrac* %tmp3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %15, i8* align 4 %16, i32 8, i1 false)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %17 = load i32, i32* %j, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc14, %for.end
  %18 = load i32, i32* %j, align 4
  %19 = load i32, i32* %p.addr, align 4
  %cmp11 = icmp sle i32 %18, %19
  br i1 %cmp11, label %for.body12, label %for.end16

for.body12:                                       ; preds = %for.cond10
  %20 = load %struct.tFrac*, %struct.tFrac** %coeffs, align 4
  %21 = load i32, i32* %j, align 4
  %arrayidx13 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %20, i32 %21
  call void @printFrac(%struct.tFrac* byval(%struct.tFrac) align 4 %arrayidx13)
  br label %for.inc14

for.inc14:                                        ; preds = %for.body12
  %22 = load i32, i32* %j, align 4
  %inc15 = add nsw i32 %22, 1
  store i32 %inc15, i32* %j, align 4
  br label %for.cond10

for.end16:                                        ; preds = %for.cond10
  %call17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %23 = load %struct.tFrac*, %struct.tFrac** %coeffs, align 4
  %24 = bitcast %struct.tFrac* %23 to i8*
  call void @free(i8* %24)
  ret void
}

declare noalias i8* @malloc(i32 %0) #2

declare void @free(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  call void @faulhaber(i32 %1)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %i, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind willreturn }
attributes #5 = { nounwind readnone }
attributes #6 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %p.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %0, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %mul = mul i32 8, %add
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = mul 8:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %p.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add1 = add nsw i32 %2, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %p.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sle i32 %5, %6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %sign, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul2 = mul nsw i32 -1, %7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %p.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %9, %10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %sign, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %p.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add7 = add nsw i32 %12, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call8 = call i32 @binomial(i32 %add7, i32 %13)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %17, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %p.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp11 = icmp sle i32 %18, %19
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc15 = add nsw i32 %22, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = mul 8:i32, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 8
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741832
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = addnsw 1:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mulnsw 4294967295:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for faulhaber()

; entering Souper's runOnFunction() for main()

; ModuleID = './Faulhabers_triangle.c.bc'
source_filename = "./Faulhabers_triangle.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque
%struct.tFrac = type { i32, i32 }

@.str = private unnamed_addr constant [6 x i8] c"%d/%d\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@stdout = external constant %struct._IO_FILE*, align 4
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @binomial(i32 %n, i32 %k) #0 {
entry:
  %retval = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %k.addr = alloca i32, align 4
  %num = alloca i32, align 4
  %denom = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %k, i32* %k.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %k.addr, align 4
  %cmp1 = icmp slt i32 %1, 0
  br i1 %cmp1, label %if.then, label %lor.lhs.false2

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %2 = load i32, i32* %n.addr, align 4
  %3 = load i32, i32* %k.addr, align 4
  %cmp3 = icmp slt i32 %2, %3
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false2, %lor.lhs.false, %entry
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false2
  %4 = load i32, i32* %n.addr, align 4
  %cmp4 = icmp eq i32 %4, 0
  br i1 %cmp4, label %if.then7, label %lor.lhs.false5

lor.lhs.false5:                                   ; preds = %if.end
  %5 = load i32, i32* %k.addr, align 4
  %cmp6 = icmp eq i32 %5, 0
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %lor.lhs.false5, %if.end
  store i32 1, i32* %retval, align 4
  br label %return

if.end8:                                          ; preds = %lor.lhs.false5
  store i32 1, i32* %num, align 4
  %6 = load i32, i32* %k.addr, align 4
  %add = add nsw i32 %6, 1
  store i32 %add, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end8
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %n.addr, align 4
  %cmp9 = icmp sle i32 %7, %8
  br i1 %cmp9, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i32, i32* %num, align 4
  %10 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %9, %10
  store i32 %mul, i32* %num, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %denom, align 4
  store i32 2, i32* %i, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc14, %for.end
  %12 = load i32, i32* %i, align 4
  %13 = load i32, i32* %n.addr, align 4
  %14 = load i32, i32* %k.addr, align 4
  %sub = sub nsw i32 %13, %14
  %cmp11 = icmp sle i32 %12, %sub
  br i1 %cmp11, label %for.body12, label %for.end16

for.body12:                                       ; preds = %for.cond10
  %15 = load i32, i32* %i, align 4
  %16 = load i32, i32* %denom, align 4
  %mul13 = mul nsw i32 %16, %15
  store i32 %mul13, i32* %denom, align 4
  br label %for.inc14

for.inc14:                                        ; preds = %for.body12
  %17 = load i32, i32* %i, align 4
  %inc15 = add nsw i32 %17, 1
  store i32 %inc15, i32* %i, align 4
  br label %for.cond10

for.end16:                                        ; preds = %for.cond10
  %18 = load i32, i32* %num, align 4
  %19 = load i32, i32* %denom, align 4
  %div = sdiv i32 %18, %19
  store i32 %div, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end16, %if.then7, %if.then
  %20 = load i32, i32* %retval, align 4
  ret i32 %20
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @gcd(i32 %a, i32 %b) #0 {
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %b.addr, align 4
  %cmp = icmp ne i32 %0, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i32, i32* %a.addr, align 4
  %2 = load i32, i32* %b.addr, align 4
  %rem = srem i32 %1, %2
  store i32 %rem, i32* %temp, align 4
  %3 = load i32, i32* %b.addr, align 4
  store i32 %3, i32* %a.addr, align 4
  %4 = load i32, i32* %temp, align 4
  store i32 %4, i32* %b.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %5 = load i32, i32* %a.addr, align 4
  ret i32 %5
}

; Function Attrs: noinline nounwind optnone
define hidden void @makeFrac(%struct.tFrac* noalias sret align 4 %agg.result, i32 %n, i32 %d) #0 {
entry:
  %n.addr = alloca i32, align 4
  %d.addr = alloca i32, align 4
  %g = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %d, i32* %d.addr, align 4
  %0 = load i32, i32* %d.addr, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %agg.result, i32 0, i32 0
  store i32 0, i32* %num, align 4
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %agg.result, i32 0, i32 1
  store i32 0, i32* %denom, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4
  %cmp1 = icmp eq i32 %1, 0
  br i1 %cmp1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.end
  store i32 1, i32* %d.addr, align 4
  br label %if.end7

if.else:                                          ; preds = %if.end
  %2 = load i32, i32* %d.addr, align 4
  %cmp3 = icmp slt i32 %2, 0
  br i1 %cmp3, label %if.then4, label %if.end6

if.then4:                                         ; preds = %if.else
  %3 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 0, %3
  store i32 %sub, i32* %n.addr, align 4
  %4 = load i32, i32* %d.addr, align 4
  %sub5 = sub nsw i32 0, %4
  store i32 %sub5, i32* %d.addr, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.then4, %if.else
  br label %if.end7

if.end7:                                          ; preds = %if.end6, %if.then2
  %5 = load i32, i32* %n.addr, align 4
  %6 = load i32, i32* %d.addr, align 4
  %call = call i32 @gcd(i32 %5, i32 %6)
  %call8 = call i32 @abs(i32 %call) #5
  store i32 %call8, i32* %g, align 4
  %7 = load i32, i32* %g, align 4
  %cmp9 = icmp sgt i32 %7, 1
  br i1 %cmp9, label %if.then10, label %if.end12

if.then10:                                        ; preds = %if.end7
  %8 = load i32, i32* %n.addr, align 4
  %9 = load i32, i32* %g, align 4
  %div = sdiv i32 %8, %9
  store i32 %div, i32* %n.addr, align 4
  %10 = load i32, i32* %d.addr, align 4
  %11 = load i32, i32* %g, align 4
  %div11 = sdiv i32 %10, %11
  store i32 %div11, i32* %d.addr, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then10, %if.end7
  %12 = load i32, i32* %n.addr, align 4
  %num13 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %agg.result, i32 0, i32 0
  store i32 %12, i32* %num13, align 4
  %13 = load i32, i32* %d.addr, align 4
  %denom14 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %agg.result, i32 0, i32 1
  store i32 %13, i32* %denom14, align 4
  br label %return

return:                                           ; preds = %if.end12, %if.then
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @abs(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @negateFrac(%struct.tFrac* noalias sret align 4 %agg.result, %struct.tFrac* byval(%struct.tFrac) align 4 %f) #0 {
entry:
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 0
  %0 = load i32, i32* %num, align 4
  %sub = sub nsw i32 0, %0
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 1
  %1 = load i32, i32* %denom, align 4
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.result, i32 %sub, i32 %1)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @subFrac(%struct.tFrac* noalias sret align 4 %agg.result, %struct.tFrac* byval(%struct.tFrac) align 4 %lhs, %struct.tFrac* byval(%struct.tFrac) align 4 %rhs) #0 {
entry:
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 0
  %0 = load i32, i32* %num, align 4
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 1
  %1 = load i32, i32* %denom, align 4
  %mul = mul nsw i32 %0, %1
  %denom1 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 1
  %2 = load i32, i32* %denom1, align 4
  %num2 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 0
  %3 = load i32, i32* %num2, align 4
  %mul3 = mul nsw i32 %2, %3
  %sub = sub nsw i32 %mul, %mul3
  %denom4 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 1
  %4 = load i32, i32* %denom4, align 4
  %denom5 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 1
  %5 = load i32, i32* %denom5, align 4
  %mul6 = mul nsw i32 %4, %5
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.result, i32 %sub, i32 %mul6)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @multFrac(%struct.tFrac* noalias sret align 4 %agg.result, %struct.tFrac* byval(%struct.tFrac) align 4 %lhs, %struct.tFrac* byval(%struct.tFrac) align 4 %rhs) #0 {
entry:
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 0
  %0 = load i32, i32* %num, align 4
  %num1 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 0
  %1 = load i32, i32* %num1, align 4
  %mul = mul nsw i32 %0, %1
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 1
  %2 = load i32, i32* %denom, align 4
  %denom2 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 1
  %3 = load i32, i32* %denom2, align 4
  %mul3 = mul nsw i32 %2, %3
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.result, i32 %mul, i32 %mul3)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @equalFrac(%struct.tFrac* byval(%struct.tFrac) align 4 %lhs, %struct.tFrac* byval(%struct.tFrac) align 4 %rhs) #0 {
entry:
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 0
  %0 = load i32, i32* %num, align 4
  %num1 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 0
  %1 = load i32, i32* %num1, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 1
  %2 = load i32, i32* %denom, align 4
  %denom2 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 1
  %3 = load i32, i32* %denom2, align 4
  %cmp3 = icmp eq i32 %2, %3
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp3, %land.rhs ]
  ret i1 %4
}

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @lessFrac(%struct.tFrac* byval(%struct.tFrac) align 4 %lhs, %struct.tFrac* byval(%struct.tFrac) align 4 %rhs) #0 {
entry:
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 0
  %0 = load i32, i32* %num, align 4
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 1
  %1 = load i32, i32* %denom, align 4
  %mul = mul nsw i32 %0, %1
  %num1 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %rhs, i32 0, i32 0
  %2 = load i32, i32* %num1, align 4
  %denom2 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %lhs, i32 0, i32 1
  %3 = load i32, i32* %denom2, align 4
  %mul3 = mul nsw i32 %2, %3
  %cmp = icmp slt i32 %mul, %mul3
  ret i1 %cmp
}

; Function Attrs: noinline nounwind optnone
define hidden void @printFrac(%struct.tFrac* byval(%struct.tFrac) align 4 %f) #0 {
entry:
  %buffer = alloca [7 x i8], align 1
  %len = alloca i32, align 4
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 1
  %0 = load i32, i32* %denom, align 4
  %cmp = icmp ne i32 %0, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %arraydecay = getelementptr inbounds [7 x i8], [7 x i8]* %buffer, i32 0, i32 0
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 0
  %1 = load i32, i32* %num, align 4
  %denom1 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 1
  %2 = load i32, i32* %denom1, align 4
  %call = call i32 (i8*, i32, i8*, ...) @snprintf(i8* %arraydecay, i32 7, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i32 %1, i32 %2)
  br label %if.end

if.else:                                          ; preds = %entry
  %arraydecay2 = getelementptr inbounds [7 x i8], [7 x i8]* %buffer, i32 0, i32 0
  %num3 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %f, i32 0, i32 0
  %3 = load i32, i32* %num3, align 4
  %call4 = call i32 (i8*, i32, i8*, ...) @snprintf(i8* %arraydecay2, i32 7, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %3)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %arraydecay5 = getelementptr inbounds [7 x i8], [7 x i8]* %buffer, i32 0, i32 0
  %call6 = call i32 @strlen(i8* %arraydecay5) #6
  %sub = sub i32 7, %call6
  store i32 %sub, i32* %len, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %4 = load i32, i32* %len, align 4
  %dec = add nsw i32 %4, -1
  store i32 %dec, i32* %len, align 4
  %cmp7 = icmp sgt i32 %4, 0
  br i1 %cmp7, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call8 = call i32 @putc(i32 32, %struct._IO_FILE* %5)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %arraydecay9 = getelementptr inbounds [7 x i8], [7 x i8]* %buffer, i32 0, i32 0
  %call10 = call i32 (i8*, ...) @printf(i8* %arraydecay9)
  ret void
}

declare i32 @snprintf(i8* %0, i32 %1, i8* %2, ...) #2

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #3

declare i32 @putc(i32 %0, %struct._IO_FILE* %1) #2

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden void @bernoulli(%struct.tFrac* noalias sret align 4 %agg.result, i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %a = alloca [16 x %struct.tFrac], align 16
  %j = alloca i32, align 4
  %m = alloca i32, align 4
  %tmp = alloca %struct.tFrac, align 4
  %tmp9 = alloca %struct.tFrac, align 4
  %agg.tmp = alloca %struct.tFrac, align 4
  %agg.tmp13 = alloca %struct.tFrac, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 0
  %num = getelementptr inbounds %struct.tFrac, %struct.tFrac* %arrayidx, i32 0, i32 0
  store i32 0, i32* %num, align 16
  %arrayidx1 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 0
  %denom = getelementptr inbounds %struct.tFrac, %struct.tFrac* %arrayidx1, i32 0, i32 1
  store i32 0, i32* %denom, align 4
  %arrayidx2 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 0
  %1 = bitcast %struct.tFrac* %agg.result to i8*
  %2 = bitcast %struct.tFrac* %arrayidx2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %1, i8* align 16 %2, i32 8, i1 false)
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %m, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc14, %if.end
  %3 = load i32, i32* %m, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp3 = icmp sle i32 %3, %4
  br i1 %cmp3, label %for.body, label %for.end15

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %m, align 4
  %arrayidx4 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 %5
  %6 = load i32, i32* %m, align 4
  %add = add nsw i32 %6, 1
  call void @makeFrac(%struct.tFrac* sret align 4 %tmp, i32 1, i32 %add)
  %7 = bitcast %struct.tFrac* %arrayidx4 to i8*
  %8 = bitcast %struct.tFrac* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %7, i8* align 4 %8, i32 8, i1 false)
  %9 = load i32, i32* %m, align 4
  store i32 %9, i32* %j, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %for.body
  %10 = load i32, i32* %j, align 4
  %cmp6 = icmp sge i32 %10, 1
  br i1 %cmp6, label %for.body7, label %for.end

for.body7:                                        ; preds = %for.cond5
  %11 = load i32, i32* %j, align 4
  %sub = sub nsw i32 %11, 1
  %arrayidx8 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 %sub
  %12 = load i32, i32* %j, align 4
  %sub10 = sub nsw i32 %12, 1
  %arrayidx11 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 %sub10
  %13 = load i32, i32* %j, align 4
  %arrayidx12 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 %13
  call void @subFrac(%struct.tFrac* sret align 4 %agg.tmp, %struct.tFrac* byval(%struct.tFrac) align 4 %arrayidx11, %struct.tFrac* byval(%struct.tFrac) align 4 %arrayidx12)
  %14 = load i32, i32* %j, align 4
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.tmp13, i32 %14, i32 1)
  call void @multFrac(%struct.tFrac* sret align 4 %tmp9, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp13)
  %15 = bitcast %struct.tFrac* %arrayidx8 to i8*
  %16 = bitcast %struct.tFrac* %tmp9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %15, i8* align 4 %16, i32 8, i1 false)
  br label %for.inc

for.inc:                                          ; preds = %for.body7
  %17 = load i32, i32* %j, align 4
  %dec = add nsw i32 %17, -1
  store i32 %dec, i32* %j, align 4
  br label %for.cond5

for.end:                                          ; preds = %for.cond5
  br label %for.inc14

for.inc14:                                        ; preds = %for.end
  %18 = load i32, i32* %m, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %m, align 4
  br label %for.cond

for.end15:                                        ; preds = %for.cond
  %19 = load i32, i32* %n.addr, align 4
  %cmp16 = icmp ne i32 %19, 1
  br i1 %cmp16, label %if.then17, label %if.end19

if.then17:                                        ; preds = %for.end15
  %arrayidx18 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 0
  %20 = bitcast %struct.tFrac* %agg.result to i8*
  %21 = bitcast %struct.tFrac* %arrayidx18 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %20, i8* align 16 %21, i32 8, i1 false)
  br label %return

if.end19:                                         ; preds = %for.end15
  %arrayidx20 = getelementptr inbounds [16 x %struct.tFrac], [16 x %struct.tFrac]* %a, i32 0, i32 0
  call void @negateFrac(%struct.tFrac* sret align 4 %agg.result, %struct.tFrac* byval(%struct.tFrac) align 4 %arrayidx20)
  br label %return

return:                                           ; preds = %if.end19, %if.then17, %if.then
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #4

; Function Attrs: noinline nounwind optnone
define hidden void @faulhaber(i32 %p) #0 {
entry:
  %p.addr = alloca i32, align 4
  %q = alloca %struct.tFrac, align 4
  %coeffs = alloca %struct.tFrac*, align 4
  %j = alloca i32, align 4
  %sign = alloca i32, align 4
  %tmp = alloca %struct.tFrac, align 4
  %tmp3 = alloca %struct.tFrac, align 4
  %agg.tmp = alloca %struct.tFrac, align 4
  %agg.tmp4 = alloca %struct.tFrac, align 4
  %agg.tmp5 = alloca %struct.tFrac, align 4
  %agg.tmp6 = alloca %struct.tFrac, align 4
  %agg.tmp9 = alloca %struct.tFrac, align 4
  store i32 %p, i32* %p.addr, align 4
  %0 = load i32, i32* %p.addr, align 4
  %add = add nsw i32 %0, 1
  %mul = mul i32 8, %add
  %call = call noalias i8* @malloc(i32 %mul)
  %1 = bitcast i8* %call to %struct.tFrac*
  store %struct.tFrac* %1, %struct.tFrac** %coeffs, align 4
  %2 = load i32, i32* %p.addr, align 4
  %add1 = add nsw i32 %2, 1
  call void @makeFrac(%struct.tFrac* sret align 4 %tmp, i32 1, i32 %add1)
  %3 = bitcast %struct.tFrac* %q to i8*
  %4 = bitcast %struct.tFrac* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %3, i8* align 4 %4, i32 8, i1 false)
  store i32 -1, i32* %sign, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %p.addr, align 4
  %cmp = icmp sle i32 %5, %6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i32, i32* %sign, align 4
  %mul2 = mul nsw i32 -1, %7
  store i32 %mul2, i32* %sign, align 4
  %8 = load %struct.tFrac*, %struct.tFrac** %coeffs, align 4
  %9 = load i32, i32* %p.addr, align 4
  %10 = load i32, i32* %j, align 4
  %sub = sub nsw i32 %9, %10
  %arrayidx = getelementptr inbounds %struct.tFrac, %struct.tFrac* %8, i32 %sub
  %11 = load i32, i32* %sign, align 4
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.tmp5, i32 %11, i32 1)
  call void @multFrac(%struct.tFrac* sret align 4 %agg.tmp4, %struct.tFrac* byval(%struct.tFrac) align 4 %q, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp5)
  %12 = load i32, i32* %p.addr, align 4
  %add7 = add nsw i32 %12, 1
  %13 = load i32, i32* %j, align 4
  %call8 = call i32 @binomial(i32 %add7, i32 %13)
  call void @makeFrac(%struct.tFrac* sret align 4 %agg.tmp6, i32 %call8, i32 1)
  call void @multFrac(%struct.tFrac* sret align 4 %agg.tmp, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp4, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp6)
  %14 = load i32, i32* %j, align 4
  call void @bernoulli(%struct.tFrac* sret align 4 %agg.tmp9, i32 %14)
  call void @multFrac(%struct.tFrac* sret align 4 %tmp3, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp, %struct.tFrac* byval(%struct.tFrac) align 4 %agg.tmp9)
  %15 = bitcast %struct.tFrac* %arrayidx to i8*
  %16 = bitcast %struct.tFrac* %tmp3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %15, i8* align 4 %16, i32 8, i1 false)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %17 = load i32, i32* %j, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc14, %for.end
  %18 = load i32, i32* %j, align 4
  %19 = load i32, i32* %p.addr, align 4
  %cmp11 = icmp sle i32 %18, %19
  br i1 %cmp11, label %for.body12, label %for.end16

for.body12:                                       ; preds = %for.cond10
  %20 = load %struct.tFrac*, %struct.tFrac** %coeffs, align 4
  %21 = load i32, i32* %j, align 4
  %arrayidx13 = getelementptr inbounds %struct.tFrac, %struct.tFrac* %20, i32 %21
  call void @printFrac(%struct.tFrac* byval(%struct.tFrac) align 4 %arrayidx13)
  br label %for.inc14

for.inc14:                                        ; preds = %for.body12
  %22 = load i32, i32* %j, align 4
  %inc15 = add nsw i32 %22, 1
  store i32 %inc15, i32* %j, align 4
  br label %for.cond10

for.end16:                                        ; preds = %for.cond10
  %call17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %23 = load %struct.tFrac*, %struct.tFrac** %coeffs, align 4
  %24 = bitcast %struct.tFrac* %23 to i8*
  call void @free(i8* %24)
  ret void
}

declare noalias i8* @malloc(i32 %0) #2

declare void @free(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  call void @faulhaber(i32 %1)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %i, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind willreturn }
attributes #5 = { nounwind readnone }
attributes #6 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, 10
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 10:i32
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %2, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 10:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
