
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for init_board()

; ModuleID = './Knights_tour.c.bc'
source_filename = "./Knights_tour.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque

@dx = hidden global [8 x i32] [i32 -2, i32 -2, i32 -1, i32 1, i32 2, i32 2, i32 1, i32 -1], align 16
@dy = hidden global [8 x i32] [i32 -1, i32 1, i32 2, i32 2, i32 1, i32 -1, i32 -2, i32 -2], align 16
@.str = private unnamed_addr constant [25 x i8] c"\1B[H\1B[J\1B[%d;%dH\1B[32m[]\1B[m\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"\1B[%dH\00", align 1
@.str.2 = private unnamed_addr constant [11 x i8] c"\1B[%d;%dH[]\00", align 1
@.str.3 = private unnamed_addr constant [19 x i8] c"\1B[%d;%dH\1B[31m[]\1B[m\00", align 1
@stdout = external constant %struct._IO_FILE*, align 4
@.str.4 = private unnamed_addr constant [10 x i8] c"Success!\0A\00", align 1
@.str.5 = private unnamed_addr constant [27 x i8] c"Failed to find a solution\0A\00", align 1
@.str.6 = private unnamed_addr constant [35 x i8] c"Any key to try next start position\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @init_board(i32 %w, i32 %h, i8** %a, i8** %b) #0 {
entry:
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %a.addr = alloca i8**, align 4
  %b.addr = alloca i8**, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %p = alloca i32, align 4
  %q = alloca i32, align 4
  store i32 %w, i32* %w.addr, align 4
  store i32 %h, i32* %h.addr, align 4
  store i8** %a, i8*** %a.addr, align 4
  store i8** %b, i8*** %b.addr, align 4
  %0 = load i32, i32* %w.addr, align 4
  %add = add nsw i32 %0, 4
  store i32 %add, i32* %p, align 4
  %1 = load i32, i32* %h.addr, align 4
  %add1 = add nsw i32 %1, 4
  store i32 %add1, i32* %q, align 4
  %2 = load i8**, i8*** %a.addr, align 4
  %3 = load i32, i32* %q, align 4
  %add.ptr = getelementptr inbounds i8*, i8** %2, i32 %3
  %4 = bitcast i8** %add.ptr to i8*
  %5 = load i8**, i8*** %a.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %5, i32 0
  store i8* %4, i8** %arrayidx, align 4
  %6 = load i8**, i8*** %a.addr, align 4
  %arrayidx2 = getelementptr inbounds i8*, i8** %6, i32 0
  %7 = load i8*, i8** %arrayidx2, align 4
  %add.ptr3 = getelementptr inbounds i8, i8* %7, i32 2
  %8 = load i8**, i8*** %b.addr, align 4
  %arrayidx4 = getelementptr inbounds i8*, i8** %8, i32 0
  store i8* %add.ptr3, i8** %arrayidx4, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %9 = load i32, i32* %i, align 4
  %10 = load i32, i32* %q, align 4
  %cmp = icmp slt i32 %9, %10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load i8**, i8*** %a.addr, align 4
  %12 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %12, 1
  %arrayidx5 = getelementptr inbounds i8*, i8** %11, i32 %sub
  %13 = load i8*, i8** %arrayidx5, align 4
  %14 = load i32, i32* %p, align 4
  %add.ptr6 = getelementptr inbounds i8, i8* %13, i32 %14
  %15 = load i8**, i8*** %a.addr, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds i8*, i8** %15, i32 %16
  store i8* %add.ptr6, i8** %arrayidx7, align 4
  %17 = load i8**, i8*** %a.addr, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds i8*, i8** %17, i32 %18
  %19 = load i8*, i8** %arrayidx8, align 4
  %add.ptr9 = getelementptr inbounds i8, i8* %19, i32 2
  %20 = load i8**, i8*** %b.addr, align 4
  %21 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds i8*, i8** %20, i32 %21
  store i8* %add.ptr9, i8** %arrayidx10, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %22 = load i32, i32* %i, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %23 = load i8**, i8*** %a.addr, align 4
  %arrayidx11 = getelementptr inbounds i8*, i8** %23, i32 0
  %24 = load i8*, i8** %arrayidx11, align 4
  %25 = load i32, i32* %p, align 4
  %26 = load i32, i32* %q, align 4
  %mul = mul nsw i32 %25, %26
  call void @llvm.memset.p0i8.i32(i8* align 1 %24, i8 -1, i32 %mul, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond12

for.cond12:                                       ; preds = %for.inc54, %for.end
  %27 = load i32, i32* %i, align 4
  %28 = load i32, i32* %h.addr, align 4
  %cmp13 = icmp slt i32 %27, %28
  br i1 %cmp13, label %for.body14, label %for.end56

for.body14:                                       ; preds = %for.cond12
  store i32 0, i32* %j, align 4
  br label %for.cond15

for.cond15:                                       ; preds = %for.inc51, %for.body14
  %29 = load i32, i32* %j, align 4
  %30 = load i32, i32* %w.addr, align 4
  %cmp16 = icmp slt i32 %29, %30
  br i1 %cmp16, label %for.body17, label %for.end53

for.body17:                                       ; preds = %for.cond15
  store i32 0, i32* %k, align 4
  br label %for.cond18

for.cond18:                                       ; preds = %for.inc48, %for.body17
  %31 = load i32, i32* %k, align 4
  %cmp19 = icmp slt i32 %31, 8
  br i1 %cmp19, label %for.body20, label %for.end50

for.body20:                                       ; preds = %for.cond18
  %32 = load i32, i32* %j, align 4
  %33 = load i32, i32* %k, align 4
  %arrayidx21 = getelementptr inbounds [8 x i32], [8 x i32]* @dx, i32 0, i32 %33
  %34 = load i32, i32* %arrayidx21, align 4
  %add22 = add nsw i32 %32, %34
  store i32 %add22, i32* %x, align 4
  %35 = load i32, i32* %i, align 4
  %36 = load i32, i32* %k, align 4
  %arrayidx23 = getelementptr inbounds [8 x i32], [8 x i32]* @dy, i32 0, i32 %36
  %37 = load i32, i32* %arrayidx23, align 4
  %add24 = add nsw i32 %35, %37
  store i32 %add24, i32* %y, align 4
  %38 = load i8**, i8*** %b.addr, align 4
  %39 = load i32, i32* %i, align 4
  %add25 = add nsw i32 %39, 2
  %arrayidx26 = getelementptr inbounds i8*, i8** %38, i32 %add25
  %40 = load i8*, i8** %arrayidx26, align 4
  %41 = load i32, i32* %j, align 4
  %arrayidx27 = getelementptr inbounds i8, i8* %40, i32 %41
  %42 = load i8, i8* %arrayidx27, align 1
  %conv = zext i8 %42 to i32
  %cmp28 = icmp eq i32 %conv, 255
  br i1 %cmp28, label %if.then, label %if.end

if.then:                                          ; preds = %for.body20
  %43 = load i8**, i8*** %b.addr, align 4
  %44 = load i32, i32* %i, align 4
  %add30 = add nsw i32 %44, 2
  %arrayidx31 = getelementptr inbounds i8*, i8** %43, i32 %add30
  %45 = load i8*, i8** %arrayidx31, align 4
  %46 = load i32, i32* %j, align 4
  %arrayidx32 = getelementptr inbounds i8, i8* %45, i32 %46
  store i8 0, i8* %arrayidx32, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body20
  %47 = load i32, i32* %x, align 4
  %cmp33 = icmp sge i32 %47, 0
  br i1 %cmp33, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %if.end
  %48 = load i32, i32* %x, align 4
  %49 = load i32, i32* %w.addr, align 4
  %cmp35 = icmp slt i32 %48, %49
  br i1 %cmp35, label %land.lhs.true37, label %land.end

land.lhs.true37:                                  ; preds = %land.lhs.true
  %50 = load i32, i32* %y, align 4
  %cmp38 = icmp sge i32 %50, 0
  br i1 %cmp38, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true37
  %51 = load i32, i32* %y, align 4
  %52 = load i32, i32* %h.addr, align 4
  %cmp40 = icmp slt i32 %51, %52
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true37, %land.lhs.true, %if.end
  %53 = phi i1 [ false, %land.lhs.true37 ], [ false, %land.lhs.true ], [ false, %if.end ], [ %cmp40, %land.rhs ]
  %land.ext = zext i1 %53 to i32
  %54 = load i8**, i8*** %b.addr, align 4
  %55 = load i32, i32* %i, align 4
  %add42 = add nsw i32 %55, 2
  %arrayidx43 = getelementptr inbounds i8*, i8** %54, i32 %add42
  %56 = load i8*, i8** %arrayidx43, align 4
  %57 = load i32, i32* %j, align 4
  %arrayidx44 = getelementptr inbounds i8, i8* %56, i32 %57
  %58 = load i8, i8* %arrayidx44, align 1
  %conv45 = zext i8 %58 to i32
  %add46 = add nsw i32 %conv45, %land.ext
  %conv47 = trunc i32 %add46 to i8
  store i8 %conv47, i8* %arrayidx44, align 1
  br label %for.inc48

for.inc48:                                        ; preds = %land.end
  %59 = load i32, i32* %k, align 4
  %inc49 = add nsw i32 %59, 1
  store i32 %inc49, i32* %k, align 4
  br label %for.cond18

for.end50:                                        ; preds = %for.cond18
  br label %for.inc51

for.inc51:                                        ; preds = %for.end50
  %60 = load i32, i32* %j, align 4
  %inc52 = add nsw i32 %60, 1
  store i32 %inc52, i32* %j, align 4
  br label %for.cond15

for.end53:                                        ; preds = %for.cond15
  br label %for.inc54

for.inc54:                                        ; preds = %for.end53
  %61 = load i32, i32* %i, align 4
  %inc55 = add nsw i32 %61, 1
  store i32 %inc55, i32* %i, align 4
  br label %for.cond12

for.end56:                                        ; preds = %for.cond12
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @walk_board(i32 %w, i32 %h, i32 %x, i32 %y, i8** %b) #0 {
entry:
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %b.addr = alloca i8**, align 4
  %i = alloca i32, align 4
  %nx = alloca i32, align 4
  %ny = alloca i32, align 4
  %least = alloca i32, align 4
  %steps = alloca i32, align 4
  store i32 %w, i32* %w.addr, align 4
  store i32 %h, i32* %h.addr, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i8** %b, i8*** %b.addr, align 4
  store i32 0, i32* %steps, align 4
  %0 = load i32, i32* %y.addr, align 4
  %add = add nsw i32 %0, 1
  %1 = load i32, i32* %x.addr, align 4
  %mul = mul nsw i32 2, %1
  %add1 = add nsw i32 1, %mul
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i32 0, i32 0), i32 %add, i32 %add1)
  br label %while.body

while.body:                                       ; preds = %entry, %if.end45
  %2 = load i8**, i8*** %b.addr, align 4
  %3 = load i32, i32* %y.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %2, i32 %3
  %4 = load i8*, i8** %arrayidx, align 4
  %5 = load i32, i32* %x.addr, align 4
  %arrayidx2 = getelementptr inbounds i8, i8* %4, i32 %5
  store i8 -1, i8* %arrayidx2, align 1
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.body
  %6 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %6, 8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i8**, i8*** %b.addr, align 4
  %8 = load i32, i32* %y.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds [8 x i32], [8 x i32]* @dy, i32 0, i32 %9
  %10 = load i32, i32* %arrayidx3, align 4
  %add4 = add nsw i32 %8, %10
  %arrayidx5 = getelementptr inbounds i8*, i8** %7, i32 %add4
  %11 = load i8*, i8** %arrayidx5, align 4
  %12 = load i32, i32* %x.addr, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds [8 x i32], [8 x i32]* @dx, i32 0, i32 %13
  %14 = load i32, i32* %arrayidx6, align 4
  %add7 = add nsw i32 %12, %14
  %arrayidx8 = getelementptr inbounds i8, i8* %11, i32 %add7
  %15 = load i8, i8* %arrayidx8, align 1
  %dec = add i8 %15, -1
  store i8 %dec, i8* %arrayidx8, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 255, i32* %least, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc27, %for.end
  %17 = load i32, i32* %i, align 4
  %cmp10 = icmp slt i32 %17, 8
  br i1 %cmp10, label %for.body11, label %for.end29

for.body11:                                       ; preds = %for.cond9
  %18 = load i8**, i8*** %b.addr, align 4
  %19 = load i32, i32* %y.addr, align 4
  %20 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds [8 x i32], [8 x i32]* @dy, i32 0, i32 %20
  %21 = load i32, i32* %arrayidx12, align 4
  %add13 = add nsw i32 %19, %21
  %arrayidx14 = getelementptr inbounds i8*, i8** %18, i32 %add13
  %22 = load i8*, i8** %arrayidx14, align 4
  %23 = load i32, i32* %x.addr, align 4
  %24 = load i32, i32* %i, align 4
  %arrayidx15 = getelementptr inbounds [8 x i32], [8 x i32]* @dx, i32 0, i32 %24
  %25 = load i32, i32* %arrayidx15, align 4
  %add16 = add nsw i32 %23, %25
  %arrayidx17 = getelementptr inbounds i8, i8* %22, i32 %add16
  %26 = load i8, i8* %arrayidx17, align 1
  %conv = zext i8 %26 to i32
  %27 = load i32, i32* %least, align 4
  %cmp18 = icmp slt i32 %conv, %27
  br i1 %cmp18, label %if.then, label %if.end

if.then:                                          ; preds = %for.body11
  %28 = load i32, i32* %x.addr, align 4
  %29 = load i32, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds [8 x i32], [8 x i32]* @dx, i32 0, i32 %29
  %30 = load i32, i32* %arrayidx20, align 4
  %add21 = add nsw i32 %28, %30
  store i32 %add21, i32* %nx, align 4
  %31 = load i32, i32* %y.addr, align 4
  %32 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds [8 x i32], [8 x i32]* @dy, i32 0, i32 %32
  %33 = load i32, i32* %arrayidx22, align 4
  %add23 = add nsw i32 %31, %33
  store i32 %add23, i32* %ny, align 4
  %34 = load i8**, i8*** %b.addr, align 4
  %35 = load i32, i32* %ny, align 4
  %arrayidx24 = getelementptr inbounds i8*, i8** %34, i32 %35
  %36 = load i8*, i8** %arrayidx24, align 4
  %37 = load i32, i32* %nx, align 4
  %arrayidx25 = getelementptr inbounds i8, i8* %36, i32 %37
  %38 = load i8, i8* %arrayidx25, align 1
  %conv26 = zext i8 %38 to i32
  store i32 %conv26, i32* %least, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body11
  br label %for.inc27

for.inc27:                                        ; preds = %if.end
  %39 = load i32, i32* %i, align 4
  %inc28 = add nsw i32 %39, 1
  store i32 %inc28, i32* %i, align 4
  br label %for.cond9

for.end29:                                        ; preds = %for.cond9
  %40 = load i32, i32* %least, align 4
  %cmp30 = icmp sgt i32 %40, 7
  br i1 %cmp30, label %if.then32, label %if.end38

if.then32:                                        ; preds = %for.end29
  %41 = load i32, i32* %h.addr, align 4
  %add33 = add nsw i32 %41, 2
  %call34 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i32 %add33)
  %42 = load i32, i32* %steps, align 4
  %43 = load i32, i32* %w.addr, align 4
  %44 = load i32, i32* %h.addr, align 4
  %mul35 = mul nsw i32 %43, %44
  %sub = sub nsw i32 %mul35, 1
  %cmp36 = icmp eq i32 %42, %sub
  %conv37 = zext i1 %cmp36 to i32
  ret i32 %conv37

if.end38:                                         ; preds = %for.end29
  %45 = load i32, i32* %steps, align 4
  %inc39 = add nsw i32 %45, 1
  store i32 %inc39, i32* %steps, align 4
  %tobool = icmp ne i32 %45, 0
  br i1 %tobool, label %if.then40, label %if.end45

if.then40:                                        ; preds = %if.end38
  %46 = load i32, i32* %y.addr, align 4
  %add41 = add nsw i32 %46, 1
  %47 = load i32, i32* %x.addr, align 4
  %mul42 = mul nsw i32 2, %47
  %add43 = add nsw i32 1, %mul42
  %call44 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 %add41, i32 %add43)
  br label %if.end45

if.end45:                                         ; preds = %if.then40, %if.end38
  %48 = load i32, i32* %nx, align 4
  store i32 %48, i32* %x.addr, align 4
  %49 = load i32, i32* %ny, align 4
  store i32 %49, i32* %y.addr, align 4
  %50 = load i32, i32* %y.addr, align 4
  %add46 = add nsw i32 %50, 1
  %51 = load i32, i32* %x.addr, align 4
  %mul47 = mul nsw i32 2, %51
  %add48 = add nsw i32 1, %mul47
  %call49 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i32 0, i32 0), i32 %add46, i32 %add48)
  %52 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call50 = call i32 @fflush(%struct._IO_FILE* %52)
  %call51 = call i32 @usleep(i32 120000)
  br label %while.body
}

declare i32 @printf(i8* %0, ...) #2

declare i32 @fflush(%struct._IO_FILE* %0) #2

declare i32 @usleep(i32 %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @solve(i32 %w, i32 %h) #0 {
entry:
  %retval = alloca i32, align 4
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %a = alloca i8**, align 4
  %b = alloca i8**, align 4
  store i32 %w, i32* %w.addr, align 4
  store i32 %h, i32* %h.addr, align 4
  store i32 0, i32* %x, align 4
  store i32 0, i32* %y, align 4
  %0 = load i32, i32* %w.addr, align 4
  %add = add nsw i32 %0, 4
  %1 = load i32, i32* %h.addr, align 4
  %add1 = add nsw i32 %1, 4
  %mul = mul nsw i32 %add, %add1
  %2 = load i32, i32* %h.addr, align 4
  %add2 = add nsw i32 %2, 4
  %mul3 = mul i32 4, %add2
  %add4 = add i32 %mul, %mul3
  %call = call noalias i8* @malloc(i32 %add4)
  %3 = bitcast i8* %call to i8**
  store i8** %3, i8*** %a, align 4
  %4 = load i32, i32* %h.addr, align 4
  %add5 = add nsw i32 %4, 4
  %mul6 = mul i32 %add5, 4
  %call7 = call noalias i8* @malloc(i32 %mul6)
  %5 = bitcast i8* %call7 to i8**
  store i8** %5, i8*** %b, align 4
  br label %while.body

while.body:                                       ; preds = %entry, %if.end16
  %6 = load i32, i32* %w.addr, align 4
  %7 = load i32, i32* %h.addr, align 4
  %8 = load i8**, i8*** %a, align 4
  %9 = load i8**, i8*** %b, align 4
  call void @init_board(i32 %6, i32 %7, i8** %8, i8** %9)
  %10 = load i32, i32* %w.addr, align 4
  %11 = load i32, i32* %h.addr, align 4
  %12 = load i32, i32* %x, align 4
  %13 = load i32, i32* %y, align 4
  %14 = load i8**, i8*** %b, align 4
  %add.ptr = getelementptr inbounds i8*, i8** %14, i32 2
  %call8 = call i32 @walk_board(i32 %10, i32 %11, i32 %12, i32 %13, i8** %add.ptr)
  %tobool = icmp ne i32 %call8, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i32 0, i32 0))
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %while.body
  %15 = load i32, i32* %x, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %x, align 4
  %16 = load i32, i32* %w.addr, align 4
  %cmp = icmp sge i32 %inc, %16
  br i1 %cmp, label %if.then10, label %if.end12

if.then10:                                        ; preds = %if.end
  store i32 0, i32* %x, align 4
  %17 = load i32, i32* %y, align 4
  %inc11 = add nsw i32 %17, 1
  store i32 %inc11, i32* %y, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then10, %if.end
  %18 = load i32, i32* %y, align 4
  %19 = load i32, i32* %h.addr, align 4
  %cmp13 = icmp sge i32 %18, %19
  br i1 %cmp13, label %if.then14, label %if.end16

if.then14:                                        ; preds = %if.end12
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.5, i32 0, i32 0))
  store i32 0, i32* %retval, align 4
  br label %return

if.end16:                                         ; preds = %if.end12
  %call17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.6, i32 0, i32 0))
  %call18 = call i32 @getchar()
  br label %while.body

return:                                           ; preds = %if.then14, %if.then
  %20 = load i32, i32* %retval, align 4
  ret i32 %20
}

declare noalias i8* @malloc(i32 %0) #2

declare i32 @getchar() #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %c, i8** %v) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i32, align 4
  %v.addr = alloca i8**, align 4
  %w = alloca i32, align 4
  %h = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %c, i32* %c.addr, align 4
  store i8** %v, i8*** %v.addr, align 4
  %0 = load i32, i32* %c.addr, align 4
  %cmp = icmp slt i32 %0, 2
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8**, i8*** %v.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 1
  %2 = load i8*, i8** %arrayidx, align 4
  %call = call i32 @atoi(i8* %2)
  store i32 %call, i32* %w, align 4
  %cmp1 = icmp sle i32 %call, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 8, i32* %w, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %3 = load i32, i32* %c.addr, align 4
  %cmp2 = icmp slt i32 %3, 3
  br i1 %cmp2, label %if.then7, label %lor.lhs.false3

lor.lhs.false3:                                   ; preds = %if.end
  %4 = load i8**, i8*** %v.addr, align 4
  %arrayidx4 = getelementptr inbounds i8*, i8** %4, i32 2
  %5 = load i8*, i8** %arrayidx4, align 4
  %call5 = call i32 @atoi(i8* %5)
  store i32 %call5, i32* %h, align 4
  %cmp6 = icmp sle i32 %call5, 0
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %lor.lhs.false3, %if.end
  %6 = load i32, i32* %w, align 4
  store i32 %6, i32* %h, align 4
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %lor.lhs.false3
  %7 = load i32, i32* %w, align 4
  %8 = load i32, i32* %h, align 4
  %call9 = call i32 @solve(i32 %7, i32 %8)
  ret i32 0
}

declare i32 @atoi(i8* %0) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %w.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %0, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %h.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add1 = add nsw i32 %1, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %q, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %q, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %9, %10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %12, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %p, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %22, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %p, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %q, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %25, %26
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %h.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp13 = icmp slt i32 %27, %28
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %w.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp16 = icmp slt i32 %29, %30
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp19 = icmp slt i32 %31, 8
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 8:i32
infer %1

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %arrayidx21, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add22 = add nsw i32 %32, %34
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %arrayidx23, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add24 = add nsw i32 %35, %37
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add25 = add nsw i32 %39, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %41 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %42 = load i8, i8* %arrayidx27, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = zext i8 %42 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp28 = icmp eq i32 %conv, 255
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
%2:i1 = eq 255:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %44 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add30 = add nsw i32 %44, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %46 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %47 = load i32, i32* %x, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp33 = icmp sge i32 %47, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %48 = load i32, i32* %x, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %49 = load i32, i32* %w.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp35 = icmp slt i32 %48, %49
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %50 = load i32, i32* %y, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp38 = icmp sge i32 %50, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %51 = load i32, i32* %y, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %52 = load i32, i32* %h.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp40 = icmp slt i32 %51, %52
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %53 = phi i1 [ false, %land.lhs.true37 ], [ false, %land.lhs.true ], [ false, %if.end ], [ %cmp40, %land.rhs ]
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %land.ext = zext i1 %53 to i32
; Looking for a replacement for:
%0:i1 = var
%1:i32 = zext %0
infer %1 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %55 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add42 = add nsw i32 %55, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %57 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %58 = load i8, i8* %arrayidx44, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv45 = zext i8 %58 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %add46 = add nsw i32 %conv45, %land.ext
; Looking for a replacement for:
%0:i1 = var
%1:i32 = zext %0
%2:i8 = var
%3:i32 = zext %2
%4:i32 = addnsw %1, %3
infer %4 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %conv47 = trunc i32 %add46 to i8
; Looking for a replacement for:
%0:i1 = var
%1:i32 = zext %0
%2:i8 = var
%3:i32 = zext %2
%4:i32 = addnsw %1, %3
%5:i8 = trunc %4
infer %5

; *****
; For LLVM instruction:
;  %59 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc49 = add nsw i32 %59, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %60 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc52 = add nsw i32 %60, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %61 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc55 = add nsw i32 %61, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 4:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 4
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 5
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 8:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 2:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 2
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741826
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = zext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 255
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = zext %0
%2:i1 = eq 255:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i1 = var
%1:i32 = zext %0
infer %1 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = zext %0
infer %1 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 255
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i1 = var
%1:i32 = zext %0
%2:i8 = var
%3:i32 = zext %2
%4:i32 = addnsw %1, %3
infer %4 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i1 = var
%1:i32 = zext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var
%1:i32 = zext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i1 = var
%1:i32 = zext %0
%2:i8 = var
%3:i32 = zext %2
%4:i32 = addnsw %1, %3
%5:i8 = trunc %4
infer %5


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for init_board()

; entering Souper's runOnFunction() for walk_board()

; ModuleID = './Knights_tour.c.bc'
source_filename = "./Knights_tour.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque

@dx = hidden global [8 x i32] [i32 -2, i32 -2, i32 -1, i32 1, i32 2, i32 2, i32 1, i32 -1], align 16
@dy = hidden global [8 x i32] [i32 -1, i32 1, i32 2, i32 2, i32 1, i32 -1, i32 -2, i32 -2], align 16
@.str = private unnamed_addr constant [25 x i8] c"\1B[H\1B[J\1B[%d;%dH\1B[32m[]\1B[m\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"\1B[%dH\00", align 1
@.str.2 = private unnamed_addr constant [11 x i8] c"\1B[%d;%dH[]\00", align 1
@.str.3 = private unnamed_addr constant [19 x i8] c"\1B[%d;%dH\1B[31m[]\1B[m\00", align 1
@stdout = external constant %struct._IO_FILE*, align 4
@.str.4 = private unnamed_addr constant [10 x i8] c"Success!\0A\00", align 1
@.str.5 = private unnamed_addr constant [27 x i8] c"Failed to find a solution\0A\00", align 1
@.str.6 = private unnamed_addr constant [35 x i8] c"Any key to try next start position\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @init_board(i32 %w, i32 %h, i8** %a, i8** %b) #0 {
entry:
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %a.addr = alloca i8**, align 4
  %b.addr = alloca i8**, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %p = alloca i32, align 4
  %q = alloca i32, align 4
  store i32 %w, i32* %w.addr, align 4
  store i32 %h, i32* %h.addr, align 4
  store i8** %a, i8*** %a.addr, align 4
  store i8** %b, i8*** %b.addr, align 4
  %0 = load i32, i32* %w.addr, align 4
  %add = add nsw i32 %0, 4
  store i32 %add, i32* %p, align 4
  %1 = load i32, i32* %h.addr, align 4
  %add1 = add nsw i32 %1, 4
  store i32 %add1, i32* %q, align 4
  %2 = load i8**, i8*** %a.addr, align 4
  %3 = load i32, i32* %q, align 4
  %add.ptr = getelementptr inbounds i8*, i8** %2, i32 %3
  %4 = bitcast i8** %add.ptr to i8*
  %5 = load i8**, i8*** %a.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %5, i32 0
  store i8* %4, i8** %arrayidx, align 4
  %6 = load i8**, i8*** %a.addr, align 4
  %arrayidx2 = getelementptr inbounds i8*, i8** %6, i32 0
  %7 = load i8*, i8** %arrayidx2, align 4
  %add.ptr3 = getelementptr inbounds i8, i8* %7, i32 2
  %8 = load i8**, i8*** %b.addr, align 4
  %arrayidx4 = getelementptr inbounds i8*, i8** %8, i32 0
  store i8* %add.ptr3, i8** %arrayidx4, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %9 = load i32, i32* %i, align 4
  %10 = load i32, i32* %q, align 4
  %cmp = icmp slt i32 %9, %10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load i8**, i8*** %a.addr, align 4
  %12 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %12, 1
  %arrayidx5 = getelementptr inbounds i8*, i8** %11, i32 %sub
  %13 = load i8*, i8** %arrayidx5, align 4
  %14 = load i32, i32* %p, align 4
  %add.ptr6 = getelementptr inbounds i8, i8* %13, i32 %14
  %15 = load i8**, i8*** %a.addr, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds i8*, i8** %15, i32 %16
  store i8* %add.ptr6, i8** %arrayidx7, align 4
  %17 = load i8**, i8*** %a.addr, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds i8*, i8** %17, i32 %18
  %19 = load i8*, i8** %arrayidx8, align 4
  %add.ptr9 = getelementptr inbounds i8, i8* %19, i32 2
  %20 = load i8**, i8*** %b.addr, align 4
  %21 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds i8*, i8** %20, i32 %21
  store i8* %add.ptr9, i8** %arrayidx10, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %22 = load i32, i32* %i, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %23 = load i8**, i8*** %a.addr, align 4
  %arrayidx11 = getelementptr inbounds i8*, i8** %23, i32 0
  %24 = load i8*, i8** %arrayidx11, align 4
  %25 = load i32, i32* %p, align 4
  %26 = load i32, i32* %q, align 4
  %mul = mul nsw i32 %25, %26
  call void @llvm.memset.p0i8.i32(i8* align 1 %24, i8 -1, i32 %mul, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond12

for.cond12:                                       ; preds = %for.inc54, %for.end
  %27 = load i32, i32* %i, align 4
  %28 = load i32, i32* %h.addr, align 4
  %cmp13 = icmp slt i32 %27, %28
  br i1 %cmp13, label %for.body14, label %for.end56

for.body14:                                       ; preds = %for.cond12
  store i32 0, i32* %j, align 4
  br label %for.cond15

for.cond15:                                       ; preds = %for.inc51, %for.body14
  %29 = load i32, i32* %j, align 4
  %30 = load i32, i32* %w.addr, align 4
  %cmp16 = icmp slt i32 %29, %30
  br i1 %cmp16, label %for.body17, label %for.end53

for.body17:                                       ; preds = %for.cond15
  store i32 0, i32* %k, align 4
  br label %for.cond18

for.cond18:                                       ; preds = %for.inc48, %for.body17
  %31 = load i32, i32* %k, align 4
  %cmp19 = icmp slt i32 %31, 8
  br i1 %cmp19, label %for.body20, label %for.end50

for.body20:                                       ; preds = %for.cond18
  %32 = load i32, i32* %j, align 4
  %33 = load i32, i32* %k, align 4
  %arrayidx21 = getelementptr inbounds [8 x i32], [8 x i32]* @dx, i32 0, i32 %33
  %34 = load i32, i32* %arrayidx21, align 4
  %add22 = add nsw i32 %32, %34
  store i32 %add22, i32* %x, align 4
  %35 = load i32, i32* %i, align 4
  %36 = load i32, i32* %k, align 4
  %arrayidx23 = getelementptr inbounds [8 x i32], [8 x i32]* @dy, i32 0, i32 %36
  %37 = load i32, i32* %arrayidx23, align 4
  %add24 = add nsw i32 %35, %37
  store i32 %add24, i32* %y, align 4
  %38 = load i8**, i8*** %b.addr, align 4
  %39 = load i32, i32* %i, align 4
  %add25 = add nsw i32 %39, 2
  %arrayidx26 = getelementptr inbounds i8*, i8** %38, i32 %add25
  %40 = load i8*, i8** %arrayidx26, align 4
  %41 = load i32, i32* %j, align 4
  %arrayidx27 = getelementptr inbounds i8, i8* %40, i32 %41
  %42 = load i8, i8* %arrayidx27, align 1
  %conv = zext i8 %42 to i32
  %cmp28 = icmp eq i32 %conv, 255
  br i1 %cmp28, label %if.then, label %if.end

if.then:                                          ; preds = %for.body20
  %43 = load i8**, i8*** %b.addr, align 4
  %44 = load i32, i32* %i, align 4
  %add30 = add nsw i32 %44, 2
  %arrayidx31 = getelementptr inbounds i8*, i8** %43, i32 %add30
  %45 = load i8*, i8** %arrayidx31, align 4
  %46 = load i32, i32* %j, align 4
  %arrayidx32 = getelementptr inbounds i8, i8* %45, i32 %46
  store i8 0, i8* %arrayidx32, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body20
  %47 = load i32, i32* %x, align 4
  %cmp33 = icmp sge i32 %47, 0
  br i1 %cmp33, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %if.end
  %48 = load i32, i32* %x, align 4
  %49 = load i32, i32* %w.addr, align 4
  %cmp35 = icmp slt i32 %48, %49
  br i1 %cmp35, label %land.lhs.true37, label %land.end

land.lhs.true37:                                  ; preds = %land.lhs.true
  %50 = load i32, i32* %y, align 4
  %cmp38 = icmp sge i32 %50, 0
  br i1 %cmp38, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true37
  %51 = load i32, i32* %y, align 4
  %52 = load i32, i32* %h.addr, align 4
  %cmp40 = icmp slt i32 %51, %52
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true37, %land.lhs.true, %if.end
  %53 = phi i1 [ false, %land.lhs.true37 ], [ false, %land.lhs.true ], [ false, %if.end ], [ %cmp40, %land.rhs ]
  %land.ext = zext i1 %53 to i32
  %54 = load i8**, i8*** %b.addr, align 4
  %55 = load i32, i32* %i, align 4
  %add42 = add nsw i32 %55, 2
  %arrayidx43 = getelementptr inbounds i8*, i8** %54, i32 %add42
  %56 = load i8*, i8** %arrayidx43, align 4
  %57 = load i32, i32* %j, align 4
  %arrayidx44 = getelementptr inbounds i8, i8* %56, i32 %57
  %58 = load i8, i8* %arrayidx44, align 1
  %conv45 = zext i8 %58 to i32
  %add46 = add nsw i32 %conv45, %land.ext
  %conv47 = trunc i32 %add46 to i8
  store i8 %conv47, i8* %arrayidx44, align 1
  br label %for.inc48

for.inc48:                                        ; preds = %land.end
  %59 = load i32, i32* %k, align 4
  %inc49 = add nsw i32 %59, 1
  store i32 %inc49, i32* %k, align 4
  br label %for.cond18

for.end50:                                        ; preds = %for.cond18
  br label %for.inc51

for.inc51:                                        ; preds = %for.end50
  %60 = load i32, i32* %j, align 4
  %inc52 = add nsw i32 %60, 1
  store i32 %inc52, i32* %j, align 4
  br label %for.cond15

for.end53:                                        ; preds = %for.cond15
  br label %for.inc54

for.inc54:                                        ; preds = %for.end53
  %61 = load i32, i32* %i, align 4
  %inc55 = add nsw i32 %61, 1
  store i32 %inc55, i32* %i, align 4
  br label %for.cond12

for.end56:                                        ; preds = %for.cond12
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @walk_board(i32 %w, i32 %h, i32 %x, i32 %y, i8** %b) #0 {
entry:
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %b.addr = alloca i8**, align 4
  %i = alloca i32, align 4
  %nx = alloca i32, align 4
  %ny = alloca i32, align 4
  %least = alloca i32, align 4
  %steps = alloca i32, align 4
  store i32 %w, i32* %w.addr, align 4
  store i32 %h, i32* %h.addr, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i8** %b, i8*** %b.addr, align 4
  store i32 0, i32* %steps, align 4
  %0 = load i32, i32* %y.addr, align 4
  %add = add nsw i32 %0, 1
  %1 = load i32, i32* %x.addr, align 4
  %mul = mul nsw i32 2, %1
  %add1 = add nsw i32 1, %mul
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i32 0, i32 0), i32 %add, i32 %add1)
  br label %while.body

while.body:                                       ; preds = %entry, %if.end45
  %2 = load i8**, i8*** %b.addr, align 4
  %3 = load i32, i32* %y.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %2, i32 %3
  %4 = load i8*, i8** %arrayidx, align 4
  %5 = load i32, i32* %x.addr, align 4
  %arrayidx2 = getelementptr inbounds i8, i8* %4, i32 %5
  store i8 -1, i8* %arrayidx2, align 1
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.body
  %6 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %6, 8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i8**, i8*** %b.addr, align 4
  %8 = load i32, i32* %y.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds [8 x i32], [8 x i32]* @dy, i32 0, i32 %9
  %10 = load i32, i32* %arrayidx3, align 4
  %add4 = add nsw i32 %8, %10
  %arrayidx5 = getelementptr inbounds i8*, i8** %7, i32 %add4
  %11 = load i8*, i8** %arrayidx5, align 4
  %12 = load i32, i32* %x.addr, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds [8 x i32], [8 x i32]* @dx, i32 0, i32 %13
  %14 = load i32, i32* %arrayidx6, align 4
  %add7 = add nsw i32 %12, %14
  %arrayidx8 = getelementptr inbounds i8, i8* %11, i32 %add7
  %15 = load i8, i8* %arrayidx8, align 1
  %dec = add i8 %15, -1
  store i8 %dec, i8* %arrayidx8, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 255, i32* %least, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc27, %for.end
  %17 = load i32, i32* %i, align 4
  %cmp10 = icmp slt i32 %17, 8
  br i1 %cmp10, label %for.body11, label %for.end29

for.body11:                                       ; preds = %for.cond9
  %18 = load i8**, i8*** %b.addr, align 4
  %19 = load i32, i32* %y.addr, align 4
  %20 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds [8 x i32], [8 x i32]* @dy, i32 0, i32 %20
  %21 = load i32, i32* %arrayidx12, align 4
  %add13 = add nsw i32 %19, %21
  %arrayidx14 = getelementptr inbounds i8*, i8** %18, i32 %add13
  %22 = load i8*, i8** %arrayidx14, align 4
  %23 = load i32, i32* %x.addr, align 4
  %24 = load i32, i32* %i, align 4
  %arrayidx15 = getelementptr inbounds [8 x i32], [8 x i32]* @dx, i32 0, i32 %24
  %25 = load i32, i32* %arrayidx15, align 4
  %add16 = add nsw i32 %23, %25
  %arrayidx17 = getelementptr inbounds i8, i8* %22, i32 %add16
  %26 = load i8, i8* %arrayidx17, align 1
  %conv = zext i8 %26 to i32
  %27 = load i32, i32* %least, align 4
  %cmp18 = icmp slt i32 %conv, %27
  br i1 %cmp18, label %if.then, label %if.end

if.then:                                          ; preds = %for.body11
  %28 = load i32, i32* %x.addr, align 4
  %29 = load i32, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds [8 x i32], [8 x i32]* @dx, i32 0, i32 %29
  %30 = load i32, i32* %arrayidx20, align 4
  %add21 = add nsw i32 %28, %30
  store i32 %add21, i32* %nx, align 4
  %31 = load i32, i32* %y.addr, align 4
  %32 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds [8 x i32], [8 x i32]* @dy, i32 0, i32 %32
  %33 = load i32, i32* %arrayidx22, align 4
  %add23 = add nsw i32 %31, %33
  store i32 %add23, i32* %ny, align 4
  %34 = load i8**, i8*** %b.addr, align 4
  %35 = load i32, i32* %ny, align 4
  %arrayidx24 = getelementptr inbounds i8*, i8** %34, i32 %35
  %36 = load i8*, i8** %arrayidx24, align 4
  %37 = load i32, i32* %nx, align 4
  %arrayidx25 = getelementptr inbounds i8, i8* %36, i32 %37
  %38 = load i8, i8* %arrayidx25, align 1
  %conv26 = zext i8 %38 to i32
  store i32 %conv26, i32* %least, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body11
  br label %for.inc27

for.inc27:                                        ; preds = %if.end
  %39 = load i32, i32* %i, align 4
  %inc28 = add nsw i32 %39, 1
  store i32 %inc28, i32* %i, align 4
  br label %for.cond9

for.end29:                                        ; preds = %for.cond9
  %40 = load i32, i32* %least, align 4
  %cmp30 = icmp sgt i32 %40, 7
  br i1 %cmp30, label %if.then32, label %if.end38

if.then32:                                        ; preds = %for.end29
  %41 = load i32, i32* %h.addr, align 4
  %add33 = add nsw i32 %41, 2
  %call34 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i32 %add33)
  %42 = load i32, i32* %steps, align 4
  %43 = load i32, i32* %w.addr, align 4
  %44 = load i32, i32* %h.addr, align 4
  %mul35 = mul nsw i32 %43, %44
  %sub = sub nsw i32 %mul35, 1
  %cmp36 = icmp eq i32 %42, %sub
  %conv37 = zext i1 %cmp36 to i32
  ret i32 %conv37

if.end38:                                         ; preds = %for.end29
  %45 = load i32, i32* %steps, align 4
  %inc39 = add nsw i32 %45, 1
  store i32 %inc39, i32* %steps, align 4
  %tobool = icmp ne i32 %45, 0
  br i1 %tobool, label %if.then40, label %if.end45

if.then40:                                        ; preds = %if.end38
  %46 = load i32, i32* %y.addr, align 4
  %add41 = add nsw i32 %46, 1
  %47 = load i32, i32* %x.addr, align 4
  %mul42 = mul nsw i32 2, %47
  %add43 = add nsw i32 1, %mul42
  %call44 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 %add41, i32 %add43)
  br label %if.end45

if.end45:                                         ; preds = %if.then40, %if.end38
  %48 = load i32, i32* %nx, align 4
  store i32 %48, i32* %x.addr, align 4
  %49 = load i32, i32* %ny, align 4
  store i32 %49, i32* %y.addr, align 4
  %50 = load i32, i32* %y.addr, align 4
  %add46 = add nsw i32 %50, 1
  %51 = load i32, i32* %x.addr, align 4
  %mul47 = mul nsw i32 2, %51
  %add48 = add nsw i32 1, %mul47
  %call49 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i32 0, i32 0), i32 %add46, i32 %add48)
  %52 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call50 = call i32 @fflush(%struct._IO_FILE* %52)
  %call51 = call i32 @usleep(i32 120000)
  br label %while.body
}

declare i32 @printf(i8* %0, ...) #2

declare i32 @fflush(%struct._IO_FILE* %0) #2

declare i32 @usleep(i32 %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @solve(i32 %w, i32 %h) #0 {
entry:
  %retval = alloca i32, align 4
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %a = alloca i8**, align 4
  %b = alloca i8**, align 4
  store i32 %w, i32* %w.addr, align 4
  store i32 %h, i32* %h.addr, align 4
  store i32 0, i32* %x, align 4
  store i32 0, i32* %y, align 4
  %0 = load i32, i32* %w.addr, align 4
  %add = add nsw i32 %0, 4
  %1 = load i32, i32* %h.addr, align 4
  %add1 = add nsw i32 %1, 4
  %mul = mul nsw i32 %add, %add1
  %2 = load i32, i32* %h.addr, align 4
  %add2 = add nsw i32 %2, 4
  %mul3 = mul i32 4, %add2
  %add4 = add i32 %mul, %mul3
  %call = call noalias i8* @malloc(i32 %add4)
  %3 = bitcast i8* %call to i8**
  store i8** %3, i8*** %a, align 4
  %4 = load i32, i32* %h.addr, align 4
  %add5 = add nsw i32 %4, 4
  %mul6 = mul i32 %add5, 4
  %call7 = call noalias i8* @malloc(i32 %mul6)
  %5 = bitcast i8* %call7 to i8**
  store i8** %5, i8*** %b, align 4
  br label %while.body

while.body:                                       ; preds = %entry, %if.end16
  %6 = load i32, i32* %w.addr, align 4
  %7 = load i32, i32* %h.addr, align 4
  %8 = load i8**, i8*** %a, align 4
  %9 = load i8**, i8*** %b, align 4
  call void @init_board(i32 %6, i32 %7, i8** %8, i8** %9)
  %10 = load i32, i32* %w.addr, align 4
  %11 = load i32, i32* %h.addr, align 4
  %12 = load i32, i32* %x, align 4
  %13 = load i32, i32* %y, align 4
  %14 = load i8**, i8*** %b, align 4
  %add.ptr = getelementptr inbounds i8*, i8** %14, i32 2
  %call8 = call i32 @walk_board(i32 %10, i32 %11, i32 %12, i32 %13, i8** %add.ptr)
  %tobool = icmp ne i32 %call8, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i32 0, i32 0))
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %while.body
  %15 = load i32, i32* %x, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %x, align 4
  %16 = load i32, i32* %w.addr, align 4
  %cmp = icmp sge i32 %inc, %16
  br i1 %cmp, label %if.then10, label %if.end12

if.then10:                                        ; preds = %if.end
  store i32 0, i32* %x, align 4
  %17 = load i32, i32* %y, align 4
  %inc11 = add nsw i32 %17, 1
  store i32 %inc11, i32* %y, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then10, %if.end
  %18 = load i32, i32* %y, align 4
  %19 = load i32, i32* %h.addr, align 4
  %cmp13 = icmp sge i32 %18, %19
  br i1 %cmp13, label %if.then14, label %if.end16

if.then14:                                        ; preds = %if.end12
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.5, i32 0, i32 0))
  store i32 0, i32* %retval, align 4
  br label %return

if.end16:                                         ; preds = %if.end12
  %call17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.6, i32 0, i32 0))
  %call18 = call i32 @getchar()
  br label %while.body

return:                                           ; preds = %if.then14, %if.then
  %20 = load i32, i32* %retval, align 4
  ret i32 %20
}

declare noalias i8* @malloc(i32 %0) #2

declare i32 @getchar() #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %c, i8** %v) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i32, align 4
  %v.addr = alloca i8**, align 4
  %w = alloca i32, align 4
  %h = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %c, i32* %c.addr, align 4
  store i8** %v, i8*** %v.addr, align 4
  %0 = load i32, i32* %c.addr, align 4
  %cmp = icmp slt i32 %0, 2
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8**, i8*** %v.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 1
  %2 = load i8*, i8** %arrayidx, align 4
  %call = call i32 @atoi(i8* %2)
  store i32 %call, i32* %w, align 4
  %cmp1 = icmp sle i32 %call, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 8, i32* %w, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %3 = load i32, i32* %c.addr, align 4
  %cmp2 = icmp slt i32 %3, 3
  br i1 %cmp2, label %if.then7, label %lor.lhs.false3

lor.lhs.false3:                                   ; preds = %if.end
  %4 = load i8**, i8*** %v.addr, align 4
  %arrayidx4 = getelementptr inbounds i8*, i8** %4, i32 2
  %5 = load i8*, i8** %arrayidx4, align 4
  %call5 = call i32 @atoi(i8* %5)
  store i32 %call5, i32* %h, align 4
  %cmp6 = icmp sle i32 %call5, 0
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %lor.lhs.false3, %if.end
  %6 = load i32, i32* %w, align 4
  store i32 %6, i32* %h, align 4
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %lor.lhs.false3
  %7 = load i32, i32* %w, align 4
  %8 = load i32, i32* %h, align 4
  %call9 = call i32 @solve(i32 %7, i32 %8)
  ret i32 0
}

declare i32 @atoi(i8* %0) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %y.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %0, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %x.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 2, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %add1 = add nsw i32 1, %mul
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 2:i32, %0
%2:i32 = addnsw 1:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %y.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %x.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %6, 8
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 8:i32
infer %1

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %y.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %arrayidx3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add4 = add nsw i32 %8, %10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %x.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %arrayidx6, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add7 = add nsw i32 %12, %14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %15 = load i8, i8* %arrayidx8, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %dec = add i8 %15, -1
; Looking for a replacement for:
%0:i8 = var
%1:i8 = add 255:i8, %0
infer %1

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %16, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp10 = icmp slt i32 %17, 8
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 8:i32
infer %1

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %y.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %arrayidx12, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add13 = add nsw i32 %19, %21
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %x.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %arrayidx15, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add16 = add nsw i32 %23, %25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %26 = load i8, i8* %arrayidx17, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = zext i8 %26 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %least, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp18 = icmp slt i32 %conv, %27
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
%2:i32 = var
%3:i1 = slt %1, %2
infer %3

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %x.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %arrayidx20, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add21 = add nsw i32 %28, %30
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %y.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %arrayidx22, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add23 = add nsw i32 %31, %33
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %ny, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %nx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %38 = load i8, i8* %arrayidx25, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv26 = zext i8 %38 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc28 = add nsw i32 %39, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %40 = load i32, i32* %least, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp30 = icmp sgt i32 %40, 7
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 7:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %41 = load i32, i32* %h.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add33 = add nsw i32 %41, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %42 = load i32, i32* %steps, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %43 = load i32, i32* %w.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %44 = load i32, i32* %h.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul35 = mul nsw i32 %43, %44
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %mul35, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
%3:i32 = subnsw %2, 1:i32
infer %3

; *****
; For LLVM instruction:
;  %cmp36 = icmp eq i32 %42, %sub
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = subnsw %3, 1:i32
%5:i1 = eq %0, %4
infer %5

; *****
; For LLVM instruction:
;  %conv37 = zext i1 %cmp36 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = subnsw %3, 1:i32
%5:i1 = eq %0, %4
%6:i32 = zext %5
infer %6

; *****
; For LLVM instruction:
;  %45 = load i32, i32* %steps, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc39 = add nsw i32 %45, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %45, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %46 = load i32, i32* %y.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add41 = add nsw i32 %46, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %47 = load i32, i32* %x.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul42 = mul nsw i32 2, %47
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %add43 = add nsw i32 1, %mul42
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 2:i32, %0
%2:i32 = addnsw 1:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %48 = load i32, i32* %nx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %49 = load i32, i32* %ny, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %50 = load i32, i32* %y.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add46 = add nsw i32 %50, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %51 = load i32, i32* %x.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul47 = mul nsw i32 2, %51
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %add48 = add nsw i32 1, %mul47
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 2:i32, %0
%2:i32 = addnsw 1:i32, %1
infer %2
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mulnsw 2:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mulnsw 2:i32, %0
%2:i32 = addnsw 1:i32, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741825
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = mulnsw 2:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i8 = add 255:i8, %0
infer %1


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = zext %0
%2:i32 = var
%3:i1 = slt %1, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt 7:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
%3:i32 = subnsw %2, 1:i32
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = subnsw %3, 1:i32
%5:i1 = eq %0, %4
infer %5


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 7 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = subnsw %3, 1:i32
%5:i1 = eq %0, %4
%6:i32 = zext %5
infer %6


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 6 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for walk_board()

; entering Souper's runOnFunction() for solve()

; ModuleID = './Knights_tour.c.bc'
source_filename = "./Knights_tour.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque

@dx = hidden global [8 x i32] [i32 -2, i32 -2, i32 -1, i32 1, i32 2, i32 2, i32 1, i32 -1], align 16
@dy = hidden global [8 x i32] [i32 -1, i32 1, i32 2, i32 2, i32 1, i32 -1, i32 -2, i32 -2], align 16
@.str = private unnamed_addr constant [25 x i8] c"\1B[H\1B[J\1B[%d;%dH\1B[32m[]\1B[m\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"\1B[%dH\00", align 1
@.str.2 = private unnamed_addr constant [11 x i8] c"\1B[%d;%dH[]\00", align 1
@.str.3 = private unnamed_addr constant [19 x i8] c"\1B[%d;%dH\1B[31m[]\1B[m\00", align 1
@stdout = external constant %struct._IO_FILE*, align 4
@.str.4 = private unnamed_addr constant [10 x i8] c"Success!\0A\00", align 1
@.str.5 = private unnamed_addr constant [27 x i8] c"Failed to find a solution\0A\00", align 1
@.str.6 = private unnamed_addr constant [35 x i8] c"Any key to try next start position\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @init_board(i32 %w, i32 %h, i8** %a, i8** %b) #0 {
entry:
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %a.addr = alloca i8**, align 4
  %b.addr = alloca i8**, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %p = alloca i32, align 4
  %q = alloca i32, align 4
  store i32 %w, i32* %w.addr, align 4
  store i32 %h, i32* %h.addr, align 4
  store i8** %a, i8*** %a.addr, align 4
  store i8** %b, i8*** %b.addr, align 4
  %0 = load i32, i32* %w.addr, align 4
  %add = add nsw i32 %0, 4
  store i32 %add, i32* %p, align 4
  %1 = load i32, i32* %h.addr, align 4
  %add1 = add nsw i32 %1, 4
  store i32 %add1, i32* %q, align 4
  %2 = load i8**, i8*** %a.addr, align 4
  %3 = load i32, i32* %q, align 4
  %add.ptr = getelementptr inbounds i8*, i8** %2, i32 %3
  %4 = bitcast i8** %add.ptr to i8*
  %5 = load i8**, i8*** %a.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %5, i32 0
  store i8* %4, i8** %arrayidx, align 4
  %6 = load i8**, i8*** %a.addr, align 4
  %arrayidx2 = getelementptr inbounds i8*, i8** %6, i32 0
  %7 = load i8*, i8** %arrayidx2, align 4
  %add.ptr3 = getelementptr inbounds i8, i8* %7, i32 2
  %8 = load i8**, i8*** %b.addr, align 4
  %arrayidx4 = getelementptr inbounds i8*, i8** %8, i32 0
  store i8* %add.ptr3, i8** %arrayidx4, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %9 = load i32, i32* %i, align 4
  %10 = load i32, i32* %q, align 4
  %cmp = icmp slt i32 %9, %10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load i8**, i8*** %a.addr, align 4
  %12 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %12, 1
  %arrayidx5 = getelementptr inbounds i8*, i8** %11, i32 %sub
  %13 = load i8*, i8** %arrayidx5, align 4
  %14 = load i32, i32* %p, align 4
  %add.ptr6 = getelementptr inbounds i8, i8* %13, i32 %14
  %15 = load i8**, i8*** %a.addr, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds i8*, i8** %15, i32 %16
  store i8* %add.ptr6, i8** %arrayidx7, align 4
  %17 = load i8**, i8*** %a.addr, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds i8*, i8** %17, i32 %18
  %19 = load i8*, i8** %arrayidx8, align 4
  %add.ptr9 = getelementptr inbounds i8, i8* %19, i32 2
  %20 = load i8**, i8*** %b.addr, align 4
  %21 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds i8*, i8** %20, i32 %21
  store i8* %add.ptr9, i8** %arrayidx10, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %22 = load i32, i32* %i, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %23 = load i8**, i8*** %a.addr, align 4
  %arrayidx11 = getelementptr inbounds i8*, i8** %23, i32 0
  %24 = load i8*, i8** %arrayidx11, align 4
  %25 = load i32, i32* %p, align 4
  %26 = load i32, i32* %q, align 4
  %mul = mul nsw i32 %25, %26
  call void @llvm.memset.p0i8.i32(i8* align 1 %24, i8 -1, i32 %mul, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond12

for.cond12:                                       ; preds = %for.inc54, %for.end
  %27 = load i32, i32* %i, align 4
  %28 = load i32, i32* %h.addr, align 4
  %cmp13 = icmp slt i32 %27, %28
  br i1 %cmp13, label %for.body14, label %for.end56

for.body14:                                       ; preds = %for.cond12
  store i32 0, i32* %j, align 4
  br label %for.cond15

for.cond15:                                       ; preds = %for.inc51, %for.body14
  %29 = load i32, i32* %j, align 4
  %30 = load i32, i32* %w.addr, align 4
  %cmp16 = icmp slt i32 %29, %30
  br i1 %cmp16, label %for.body17, label %for.end53

for.body17:                                       ; preds = %for.cond15
  store i32 0, i32* %k, align 4
  br label %for.cond18

for.cond18:                                       ; preds = %for.inc48, %for.body17
  %31 = load i32, i32* %k, align 4
  %cmp19 = icmp slt i32 %31, 8
  br i1 %cmp19, label %for.body20, label %for.end50

for.body20:                                       ; preds = %for.cond18
  %32 = load i32, i32* %j, align 4
  %33 = load i32, i32* %k, align 4
  %arrayidx21 = getelementptr inbounds [8 x i32], [8 x i32]* @dx, i32 0, i32 %33
  %34 = load i32, i32* %arrayidx21, align 4
  %add22 = add nsw i32 %32, %34
  store i32 %add22, i32* %x, align 4
  %35 = load i32, i32* %i, align 4
  %36 = load i32, i32* %k, align 4
  %arrayidx23 = getelementptr inbounds [8 x i32], [8 x i32]* @dy, i32 0, i32 %36
  %37 = load i32, i32* %arrayidx23, align 4
  %add24 = add nsw i32 %35, %37
  store i32 %add24, i32* %y, align 4
  %38 = load i8**, i8*** %b.addr, align 4
  %39 = load i32, i32* %i, align 4
  %add25 = add nsw i32 %39, 2
  %arrayidx26 = getelementptr inbounds i8*, i8** %38, i32 %add25
  %40 = load i8*, i8** %arrayidx26, align 4
  %41 = load i32, i32* %j, align 4
  %arrayidx27 = getelementptr inbounds i8, i8* %40, i32 %41
  %42 = load i8, i8* %arrayidx27, align 1
  %conv = zext i8 %42 to i32
  %cmp28 = icmp eq i32 %conv, 255
  br i1 %cmp28, label %if.then, label %if.end

if.then:                                          ; preds = %for.body20
  %43 = load i8**, i8*** %b.addr, align 4
  %44 = load i32, i32* %i, align 4
  %add30 = add nsw i32 %44, 2
  %arrayidx31 = getelementptr inbounds i8*, i8** %43, i32 %add30
  %45 = load i8*, i8** %arrayidx31, align 4
  %46 = load i32, i32* %j, align 4
  %arrayidx32 = getelementptr inbounds i8, i8* %45, i32 %46
  store i8 0, i8* %arrayidx32, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body20
  %47 = load i32, i32* %x, align 4
  %cmp33 = icmp sge i32 %47, 0
  br i1 %cmp33, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %if.end
  %48 = load i32, i32* %x, align 4
  %49 = load i32, i32* %w.addr, align 4
  %cmp35 = icmp slt i32 %48, %49
  br i1 %cmp35, label %land.lhs.true37, label %land.end

land.lhs.true37:                                  ; preds = %land.lhs.true
  %50 = load i32, i32* %y, align 4
  %cmp38 = icmp sge i32 %50, 0
  br i1 %cmp38, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true37
  %51 = load i32, i32* %y, align 4
  %52 = load i32, i32* %h.addr, align 4
  %cmp40 = icmp slt i32 %51, %52
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true37, %land.lhs.true, %if.end
  %53 = phi i1 [ false, %land.lhs.true37 ], [ false, %land.lhs.true ], [ false, %if.end ], [ %cmp40, %land.rhs ]
  %land.ext = zext i1 %53 to i32
  %54 = load i8**, i8*** %b.addr, align 4
  %55 = load i32, i32* %i, align 4
  %add42 = add nsw i32 %55, 2
  %arrayidx43 = getelementptr inbounds i8*, i8** %54, i32 %add42
  %56 = load i8*, i8** %arrayidx43, align 4
  %57 = load i32, i32* %j, align 4
  %arrayidx44 = getelementptr inbounds i8, i8* %56, i32 %57
  %58 = load i8, i8* %arrayidx44, align 1
  %conv45 = zext i8 %58 to i32
  %add46 = add nsw i32 %conv45, %land.ext
  %conv47 = trunc i32 %add46 to i8
  store i8 %conv47, i8* %arrayidx44, align 1
  br label %for.inc48

for.inc48:                                        ; preds = %land.end
  %59 = load i32, i32* %k, align 4
  %inc49 = add nsw i32 %59, 1
  store i32 %inc49, i32* %k, align 4
  br label %for.cond18

for.end50:                                        ; preds = %for.cond18
  br label %for.inc51

for.inc51:                                        ; preds = %for.end50
  %60 = load i32, i32* %j, align 4
  %inc52 = add nsw i32 %60, 1
  store i32 %inc52, i32* %j, align 4
  br label %for.cond15

for.end53:                                        ; preds = %for.cond15
  br label %for.inc54

for.inc54:                                        ; preds = %for.end53
  %61 = load i32, i32* %i, align 4
  %inc55 = add nsw i32 %61, 1
  store i32 %inc55, i32* %i, align 4
  br label %for.cond12

for.end56:                                        ; preds = %for.cond12
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @walk_board(i32 %w, i32 %h, i32 %x, i32 %y, i8** %b) #0 {
entry:
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %b.addr = alloca i8**, align 4
  %i = alloca i32, align 4
  %nx = alloca i32, align 4
  %ny = alloca i32, align 4
  %least = alloca i32, align 4
  %steps = alloca i32, align 4
  store i32 %w, i32* %w.addr, align 4
  store i32 %h, i32* %h.addr, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i8** %b, i8*** %b.addr, align 4
  store i32 0, i32* %steps, align 4
  %0 = load i32, i32* %y.addr, align 4
  %add = add nsw i32 %0, 1
  %1 = load i32, i32* %x.addr, align 4
  %mul = mul nsw i32 2, %1
  %add1 = add nsw i32 1, %mul
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i32 0, i32 0), i32 %add, i32 %add1)
  br label %while.body

while.body:                                       ; preds = %entry, %if.end45
  %2 = load i8**, i8*** %b.addr, align 4
  %3 = load i32, i32* %y.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %2, i32 %3
  %4 = load i8*, i8** %arrayidx, align 4
  %5 = load i32, i32* %x.addr, align 4
  %arrayidx2 = getelementptr inbounds i8, i8* %4, i32 %5
  store i8 -1, i8* %arrayidx2, align 1
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.body
  %6 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %6, 8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i8**, i8*** %b.addr, align 4
  %8 = load i32, i32* %y.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds [8 x i32], [8 x i32]* @dy, i32 0, i32 %9
  %10 = load i32, i32* %arrayidx3, align 4
  %add4 = add nsw i32 %8, %10
  %arrayidx5 = getelementptr inbounds i8*, i8** %7, i32 %add4
  %11 = load i8*, i8** %arrayidx5, align 4
  %12 = load i32, i32* %x.addr, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds [8 x i32], [8 x i32]* @dx, i32 0, i32 %13
  %14 = load i32, i32* %arrayidx6, align 4
  %add7 = add nsw i32 %12, %14
  %arrayidx8 = getelementptr inbounds i8, i8* %11, i32 %add7
  %15 = load i8, i8* %arrayidx8, align 1
  %dec = add i8 %15, -1
  store i8 %dec, i8* %arrayidx8, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 255, i32* %least, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc27, %for.end
  %17 = load i32, i32* %i, align 4
  %cmp10 = icmp slt i32 %17, 8
  br i1 %cmp10, label %for.body11, label %for.end29

for.body11:                                       ; preds = %for.cond9
  %18 = load i8**, i8*** %b.addr, align 4
  %19 = load i32, i32* %y.addr, align 4
  %20 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds [8 x i32], [8 x i32]* @dy, i32 0, i32 %20
  %21 = load i32, i32* %arrayidx12, align 4
  %add13 = add nsw i32 %19, %21
  %arrayidx14 = getelementptr inbounds i8*, i8** %18, i32 %add13
  %22 = load i8*, i8** %arrayidx14, align 4
  %23 = load i32, i32* %x.addr, align 4
  %24 = load i32, i32* %i, align 4
  %arrayidx15 = getelementptr inbounds [8 x i32], [8 x i32]* @dx, i32 0, i32 %24
  %25 = load i32, i32* %arrayidx15, align 4
  %add16 = add nsw i32 %23, %25
  %arrayidx17 = getelementptr inbounds i8, i8* %22, i32 %add16
  %26 = load i8, i8* %arrayidx17, align 1
  %conv = zext i8 %26 to i32
  %27 = load i32, i32* %least, align 4
  %cmp18 = icmp slt i32 %conv, %27
  br i1 %cmp18, label %if.then, label %if.end

if.then:                                          ; preds = %for.body11
  %28 = load i32, i32* %x.addr, align 4
  %29 = load i32, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds [8 x i32], [8 x i32]* @dx, i32 0, i32 %29
  %30 = load i32, i32* %arrayidx20, align 4
  %add21 = add nsw i32 %28, %30
  store i32 %add21, i32* %nx, align 4
  %31 = load i32, i32* %y.addr, align 4
  %32 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds [8 x i32], [8 x i32]* @dy, i32 0, i32 %32
  %33 = load i32, i32* %arrayidx22, align 4
  %add23 = add nsw i32 %31, %33
  store i32 %add23, i32* %ny, align 4
  %34 = load i8**, i8*** %b.addr, align 4
  %35 = load i32, i32* %ny, align 4
  %arrayidx24 = getelementptr inbounds i8*, i8** %34, i32 %35
  %36 = load i8*, i8** %arrayidx24, align 4
  %37 = load i32, i32* %nx, align 4
  %arrayidx25 = getelementptr inbounds i8, i8* %36, i32 %37
  %38 = load i8, i8* %arrayidx25, align 1
  %conv26 = zext i8 %38 to i32
  store i32 %conv26, i32* %least, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body11
  br label %for.inc27

for.inc27:                                        ; preds = %if.end
  %39 = load i32, i32* %i, align 4
  %inc28 = add nsw i32 %39, 1
  store i32 %inc28, i32* %i, align 4
  br label %for.cond9

for.end29:                                        ; preds = %for.cond9
  %40 = load i32, i32* %least, align 4
  %cmp30 = icmp sgt i32 %40, 7
  br i1 %cmp30, label %if.then32, label %if.end38

if.then32:                                        ; preds = %for.end29
  %41 = load i32, i32* %h.addr, align 4
  %add33 = add nsw i32 %41, 2
  %call34 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i32 %add33)
  %42 = load i32, i32* %steps, align 4
  %43 = load i32, i32* %w.addr, align 4
  %44 = load i32, i32* %h.addr, align 4
  %mul35 = mul nsw i32 %43, %44
  %sub = sub nsw i32 %mul35, 1
  %cmp36 = icmp eq i32 %42, %sub
  %conv37 = zext i1 %cmp36 to i32
  ret i32 %conv37

if.end38:                                         ; preds = %for.end29
  %45 = load i32, i32* %steps, align 4
  %inc39 = add nsw i32 %45, 1
  store i32 %inc39, i32* %steps, align 4
  %tobool = icmp ne i32 %45, 0
  br i1 %tobool, label %if.then40, label %if.end45

if.then40:                                        ; preds = %if.end38
  %46 = load i32, i32* %y.addr, align 4
  %add41 = add nsw i32 %46, 1
  %47 = load i32, i32* %x.addr, align 4
  %mul42 = mul nsw i32 2, %47
  %add43 = add nsw i32 1, %mul42
  %call44 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 %add41, i32 %add43)
  br label %if.end45

if.end45:                                         ; preds = %if.then40, %if.end38
  %48 = load i32, i32* %nx, align 4
  store i32 %48, i32* %x.addr, align 4
  %49 = load i32, i32* %ny, align 4
  store i32 %49, i32* %y.addr, align 4
  %50 = load i32, i32* %y.addr, align 4
  %add46 = add nsw i32 %50, 1
  %51 = load i32, i32* %x.addr, align 4
  %mul47 = mul nsw i32 2, %51
  %add48 = add nsw i32 1, %mul47
  %call49 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i32 0, i32 0), i32 %add46, i32 %add48)
  %52 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call50 = call i32 @fflush(%struct._IO_FILE* %52)
  %call51 = call i32 @usleep(i32 120000)
  br label %while.body
}

declare i32 @printf(i8* %0, ...) #2

declare i32 @fflush(%struct._IO_FILE* %0) #2

declare i32 @usleep(i32 %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @solve(i32 %w, i32 %h) #0 {
entry:
  %retval = alloca i32, align 4
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %a = alloca i8**, align 4
  %b = alloca i8**, align 4
  store i32 %w, i32* %w.addr, align 4
  store i32 %h, i32* %h.addr, align 4
  store i32 0, i32* %x, align 4
  store i32 0, i32* %y, align 4
  %0 = load i32, i32* %w.addr, align 4
  %add = add nsw i32 %0, 4
  %1 = load i32, i32* %h.addr, align 4
  %add1 = add nsw i32 %1, 4
  %mul = mul nsw i32 %add, %add1
  %2 = load i32, i32* %h.addr, align 4
  %add2 = add nsw i32 %2, 4
  %mul3 = mul i32 4, %add2
  %add4 = add i32 %mul, %mul3
  %call = call noalias i8* @malloc(i32 %add4)
  %3 = bitcast i8* %call to i8**
  store i8** %3, i8*** %a, align 4
  %4 = load i32, i32* %h.addr, align 4
  %add5 = add nsw i32 %4, 4
  %mul6 = mul i32 %add5, 4
  %call7 = call noalias i8* @malloc(i32 %mul6)
  %5 = bitcast i8* %call7 to i8**
  store i8** %5, i8*** %b, align 4
  br label %while.body

while.body:                                       ; preds = %entry, %if.end16
  %6 = load i32, i32* %w.addr, align 4
  %7 = load i32, i32* %h.addr, align 4
  %8 = load i8**, i8*** %a, align 4
  %9 = load i8**, i8*** %b, align 4
  call void @init_board(i32 %6, i32 %7, i8** %8, i8** %9)
  %10 = load i32, i32* %w.addr, align 4
  %11 = load i32, i32* %h.addr, align 4
  %12 = load i32, i32* %x, align 4
  %13 = load i32, i32* %y, align 4
  %14 = load i8**, i8*** %b, align 4
  %add.ptr = getelementptr inbounds i8*, i8** %14, i32 2
  %call8 = call i32 @walk_board(i32 %10, i32 %11, i32 %12, i32 %13, i8** %add.ptr)
  %tobool = icmp ne i32 %call8, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i32 0, i32 0))
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %while.body
  %15 = load i32, i32* %x, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %x, align 4
  %16 = load i32, i32* %w.addr, align 4
  %cmp = icmp sge i32 %inc, %16
  br i1 %cmp, label %if.then10, label %if.end12

if.then10:                                        ; preds = %if.end
  store i32 0, i32* %x, align 4
  %17 = load i32, i32* %y, align 4
  %inc11 = add nsw i32 %17, 1
  store i32 %inc11, i32* %y, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then10, %if.end
  %18 = load i32, i32* %y, align 4
  %19 = load i32, i32* %h.addr, align 4
  %cmp13 = icmp sge i32 %18, %19
  br i1 %cmp13, label %if.then14, label %if.end16

if.then14:                                        ; preds = %if.end12
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.5, i32 0, i32 0))
  store i32 0, i32* %retval, align 4
  br label %return

if.end16:                                         ; preds = %if.end12
  %call17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.6, i32 0, i32 0))
  %call18 = call i32 @getchar()
  br label %while.body

return:                                           ; preds = %if.then14, %if.then
  %20 = load i32, i32* %retval, align 4
  ret i32 %20
}

declare noalias i8* @malloc(i32 %0) #2

declare i32 @getchar() #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %c, i8** %v) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i32, align 4
  %v.addr = alloca i8**, align 4
  %w = alloca i32, align 4
  %h = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %c, i32* %c.addr, align 4
  store i8** %v, i8*** %v.addr, align 4
  %0 = load i32, i32* %c.addr, align 4
  %cmp = icmp slt i32 %0, 2
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8**, i8*** %v.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 1
  %2 = load i8*, i8** %arrayidx, align 4
  %call = call i32 @atoi(i8* %2)
  store i32 %call, i32* %w, align 4
  %cmp1 = icmp sle i32 %call, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 8, i32* %w, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %3 = load i32, i32* %c.addr, align 4
  %cmp2 = icmp slt i32 %3, 3
  br i1 %cmp2, label %if.then7, label %lor.lhs.false3

lor.lhs.false3:                                   ; preds = %if.end
  %4 = load i8**, i8*** %v.addr, align 4
  %arrayidx4 = getelementptr inbounds i8*, i8** %4, i32 2
  %5 = load i8*, i8** %arrayidx4, align 4
  %call5 = call i32 @atoi(i8* %5)
  store i32 %call5, i32* %h, align 4
  %cmp6 = icmp sle i32 %call5, 0
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %lor.lhs.false3, %if.end
  %6 = load i32, i32* %w, align 4
  store i32 %6, i32* %h, align 4
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %lor.lhs.false3
  %7 = load i32, i32* %w, align 4
  %8 = load i32, i32* %h, align 4
  %call9 = call i32 @solve(i32 %7, i32 %8)
  ret i32 0
}

declare i32 @atoi(i8* %0) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %w.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %0, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %h.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add1 = add nsw i32 %1, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %add, %add1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4:i32, %0
%2:i32 = var
%3:i32 = addnsw 4:i32, %2
%4:i32 = mulnsw %1, %3
infer %4

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %h.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add2 = add nsw i32 %2, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %mul3 = mul i32 4, %add2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4:i32, %0
%2:i32 = mul 4:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %add4 = add i32 %mul, %mul3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4:i32, %0
%2:i32 = mul 4:i32, %1
%3:i32 = var
%4:i32 = addnsw 4:i32, %3
%5:i32 = var
%6:i32 = addnsw 4:i32, %5
%7:i32 = mulnsw %4, %6
%8:i32 = add %2, %7
infer %8

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %h.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add5 = add nsw i32 %4, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %mul6 = mul i32 %add5, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4:i32, %0
%2:i32 = mul 4:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %w.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %h.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %w.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %h.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %x, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %y, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call8 = call i32 @walk_board(i32 %10, i32 %11, i32 %12, i32 %13, i8** %add.ptr)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %call8, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %x, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %15, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %w.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sge i32 %inc, %16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1 (hasExternalUses)
%3:i1 = sle %0, %2
infer %3

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %y, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc11 = add nsw i32 %17, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %y, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %h.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp13 = icmp sge i32 %18, %19
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 4:i32, %0
%2:i32 = var
%3:i32 = addnsw 4:i32, %2
%4:i32 = mulnsw %1, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 16
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 4:i32, %0
%2:i32 = mul 4:i32, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 16
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 20
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = addnsw 4:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 4:i32, %0
%2:i32 = mul 4:i32, %1
%3:i32 = var
%4:i32 = addnsw 4:i32, %3
%5:i32 = var
%6:i32 = addnsw 4:i32, %5
%7:i32 = mulnsw %4, %6
%8:i32 = add %2, %7
infer %8


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 32
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1073741808
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1 (hasExternalUses)
%3:i1 = sle %0, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for solve()

; entering Souper's runOnFunction() for __main_argc_argv()

; ModuleID = './Knights_tour.c.bc'
source_filename = "./Knights_tour.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque

@dx = hidden global [8 x i32] [i32 -2, i32 -2, i32 -1, i32 1, i32 2, i32 2, i32 1, i32 -1], align 16
@dy = hidden global [8 x i32] [i32 -1, i32 1, i32 2, i32 2, i32 1, i32 -1, i32 -2, i32 -2], align 16
@.str = private unnamed_addr constant [25 x i8] c"\1B[H\1B[J\1B[%d;%dH\1B[32m[]\1B[m\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"\1B[%dH\00", align 1
@.str.2 = private unnamed_addr constant [11 x i8] c"\1B[%d;%dH[]\00", align 1
@.str.3 = private unnamed_addr constant [19 x i8] c"\1B[%d;%dH\1B[31m[]\1B[m\00", align 1
@stdout = external constant %struct._IO_FILE*, align 4
@.str.4 = private unnamed_addr constant [10 x i8] c"Success!\0A\00", align 1
@.str.5 = private unnamed_addr constant [27 x i8] c"Failed to find a solution\0A\00", align 1
@.str.6 = private unnamed_addr constant [35 x i8] c"Any key to try next start position\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @init_board(i32 %w, i32 %h, i8** %a, i8** %b) #0 {
entry:
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %a.addr = alloca i8**, align 4
  %b.addr = alloca i8**, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %p = alloca i32, align 4
  %q = alloca i32, align 4
  store i32 %w, i32* %w.addr, align 4
  store i32 %h, i32* %h.addr, align 4
  store i8** %a, i8*** %a.addr, align 4
  store i8** %b, i8*** %b.addr, align 4
  %0 = load i32, i32* %w.addr, align 4
  %add = add nsw i32 %0, 4
  store i32 %add, i32* %p, align 4
  %1 = load i32, i32* %h.addr, align 4
  %add1 = add nsw i32 %1, 4
  store i32 %add1, i32* %q, align 4
  %2 = load i8**, i8*** %a.addr, align 4
  %3 = load i32, i32* %q, align 4
  %add.ptr = getelementptr inbounds i8*, i8** %2, i32 %3
  %4 = bitcast i8** %add.ptr to i8*
  %5 = load i8**, i8*** %a.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %5, i32 0
  store i8* %4, i8** %arrayidx, align 4
  %6 = load i8**, i8*** %a.addr, align 4
  %arrayidx2 = getelementptr inbounds i8*, i8** %6, i32 0
  %7 = load i8*, i8** %arrayidx2, align 4
  %add.ptr3 = getelementptr inbounds i8, i8* %7, i32 2
  %8 = load i8**, i8*** %b.addr, align 4
  %arrayidx4 = getelementptr inbounds i8*, i8** %8, i32 0
  store i8* %add.ptr3, i8** %arrayidx4, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %9 = load i32, i32* %i, align 4
  %10 = load i32, i32* %q, align 4
  %cmp = icmp slt i32 %9, %10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load i8**, i8*** %a.addr, align 4
  %12 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %12, 1
  %arrayidx5 = getelementptr inbounds i8*, i8** %11, i32 %sub
  %13 = load i8*, i8** %arrayidx5, align 4
  %14 = load i32, i32* %p, align 4
  %add.ptr6 = getelementptr inbounds i8, i8* %13, i32 %14
  %15 = load i8**, i8*** %a.addr, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds i8*, i8** %15, i32 %16
  store i8* %add.ptr6, i8** %arrayidx7, align 4
  %17 = load i8**, i8*** %a.addr, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds i8*, i8** %17, i32 %18
  %19 = load i8*, i8** %arrayidx8, align 4
  %add.ptr9 = getelementptr inbounds i8, i8* %19, i32 2
  %20 = load i8**, i8*** %b.addr, align 4
  %21 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds i8*, i8** %20, i32 %21
  store i8* %add.ptr9, i8** %arrayidx10, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %22 = load i32, i32* %i, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %23 = load i8**, i8*** %a.addr, align 4
  %arrayidx11 = getelementptr inbounds i8*, i8** %23, i32 0
  %24 = load i8*, i8** %arrayidx11, align 4
  %25 = load i32, i32* %p, align 4
  %26 = load i32, i32* %q, align 4
  %mul = mul nsw i32 %25, %26
  call void @llvm.memset.p0i8.i32(i8* align 1 %24, i8 -1, i32 %mul, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond12

for.cond12:                                       ; preds = %for.inc54, %for.end
  %27 = load i32, i32* %i, align 4
  %28 = load i32, i32* %h.addr, align 4
  %cmp13 = icmp slt i32 %27, %28
  br i1 %cmp13, label %for.body14, label %for.end56

for.body14:                                       ; preds = %for.cond12
  store i32 0, i32* %j, align 4
  br label %for.cond15

for.cond15:                                       ; preds = %for.inc51, %for.body14
  %29 = load i32, i32* %j, align 4
  %30 = load i32, i32* %w.addr, align 4
  %cmp16 = icmp slt i32 %29, %30
  br i1 %cmp16, label %for.body17, label %for.end53

for.body17:                                       ; preds = %for.cond15
  store i32 0, i32* %k, align 4
  br label %for.cond18

for.cond18:                                       ; preds = %for.inc48, %for.body17
  %31 = load i32, i32* %k, align 4
  %cmp19 = icmp slt i32 %31, 8
  br i1 %cmp19, label %for.body20, label %for.end50

for.body20:                                       ; preds = %for.cond18
  %32 = load i32, i32* %j, align 4
  %33 = load i32, i32* %k, align 4
  %arrayidx21 = getelementptr inbounds [8 x i32], [8 x i32]* @dx, i32 0, i32 %33
  %34 = load i32, i32* %arrayidx21, align 4
  %add22 = add nsw i32 %32, %34
  store i32 %add22, i32* %x, align 4
  %35 = load i32, i32* %i, align 4
  %36 = load i32, i32* %k, align 4
  %arrayidx23 = getelementptr inbounds [8 x i32], [8 x i32]* @dy, i32 0, i32 %36
  %37 = load i32, i32* %arrayidx23, align 4
  %add24 = add nsw i32 %35, %37
  store i32 %add24, i32* %y, align 4
  %38 = load i8**, i8*** %b.addr, align 4
  %39 = load i32, i32* %i, align 4
  %add25 = add nsw i32 %39, 2
  %arrayidx26 = getelementptr inbounds i8*, i8** %38, i32 %add25
  %40 = load i8*, i8** %arrayidx26, align 4
  %41 = load i32, i32* %j, align 4
  %arrayidx27 = getelementptr inbounds i8, i8* %40, i32 %41
  %42 = load i8, i8* %arrayidx27, align 1
  %conv = zext i8 %42 to i32
  %cmp28 = icmp eq i32 %conv, 255
  br i1 %cmp28, label %if.then, label %if.end

if.then:                                          ; preds = %for.body20
  %43 = load i8**, i8*** %b.addr, align 4
  %44 = load i32, i32* %i, align 4
  %add30 = add nsw i32 %44, 2
  %arrayidx31 = getelementptr inbounds i8*, i8** %43, i32 %add30
  %45 = load i8*, i8** %arrayidx31, align 4
  %46 = load i32, i32* %j, align 4
  %arrayidx32 = getelementptr inbounds i8, i8* %45, i32 %46
  store i8 0, i8* %arrayidx32, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body20
  %47 = load i32, i32* %x, align 4
  %cmp33 = icmp sge i32 %47, 0
  br i1 %cmp33, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %if.end
  %48 = load i32, i32* %x, align 4
  %49 = load i32, i32* %w.addr, align 4
  %cmp35 = icmp slt i32 %48, %49
  br i1 %cmp35, label %land.lhs.true37, label %land.end

land.lhs.true37:                                  ; preds = %land.lhs.true
  %50 = load i32, i32* %y, align 4
  %cmp38 = icmp sge i32 %50, 0
  br i1 %cmp38, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true37
  %51 = load i32, i32* %y, align 4
  %52 = load i32, i32* %h.addr, align 4
  %cmp40 = icmp slt i32 %51, %52
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true37, %land.lhs.true, %if.end
  %53 = phi i1 [ false, %land.lhs.true37 ], [ false, %land.lhs.true ], [ false, %if.end ], [ %cmp40, %land.rhs ]
  %land.ext = zext i1 %53 to i32
  %54 = load i8**, i8*** %b.addr, align 4
  %55 = load i32, i32* %i, align 4
  %add42 = add nsw i32 %55, 2
  %arrayidx43 = getelementptr inbounds i8*, i8** %54, i32 %add42
  %56 = load i8*, i8** %arrayidx43, align 4
  %57 = load i32, i32* %j, align 4
  %arrayidx44 = getelementptr inbounds i8, i8* %56, i32 %57
  %58 = load i8, i8* %arrayidx44, align 1
  %conv45 = zext i8 %58 to i32
  %add46 = add nsw i32 %conv45, %land.ext
  %conv47 = trunc i32 %add46 to i8
  store i8 %conv47, i8* %arrayidx44, align 1
  br label %for.inc48

for.inc48:                                        ; preds = %land.end
  %59 = load i32, i32* %k, align 4
  %inc49 = add nsw i32 %59, 1
  store i32 %inc49, i32* %k, align 4
  br label %for.cond18

for.end50:                                        ; preds = %for.cond18
  br label %for.inc51

for.inc51:                                        ; preds = %for.end50
  %60 = load i32, i32* %j, align 4
  %inc52 = add nsw i32 %60, 1
  store i32 %inc52, i32* %j, align 4
  br label %for.cond15

for.end53:                                        ; preds = %for.cond15
  br label %for.inc54

for.inc54:                                        ; preds = %for.end53
  %61 = load i32, i32* %i, align 4
  %inc55 = add nsw i32 %61, 1
  store i32 %inc55, i32* %i, align 4
  br label %for.cond12

for.end56:                                        ; preds = %for.cond12
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @walk_board(i32 %w, i32 %h, i32 %x, i32 %y, i8** %b) #0 {
entry:
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %b.addr = alloca i8**, align 4
  %i = alloca i32, align 4
  %nx = alloca i32, align 4
  %ny = alloca i32, align 4
  %least = alloca i32, align 4
  %steps = alloca i32, align 4
  store i32 %w, i32* %w.addr, align 4
  store i32 %h, i32* %h.addr, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i8** %b, i8*** %b.addr, align 4
  store i32 0, i32* %steps, align 4
  %0 = load i32, i32* %y.addr, align 4
  %add = add nsw i32 %0, 1
  %1 = load i32, i32* %x.addr, align 4
  %mul = mul nsw i32 2, %1
  %add1 = add nsw i32 1, %mul
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i32 0, i32 0), i32 %add, i32 %add1)
  br label %while.body

while.body:                                       ; preds = %entry, %if.end45
  %2 = load i8**, i8*** %b.addr, align 4
  %3 = load i32, i32* %y.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %2, i32 %3
  %4 = load i8*, i8** %arrayidx, align 4
  %5 = load i32, i32* %x.addr, align 4
  %arrayidx2 = getelementptr inbounds i8, i8* %4, i32 %5
  store i8 -1, i8* %arrayidx2, align 1
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.body
  %6 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %6, 8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i8**, i8*** %b.addr, align 4
  %8 = load i32, i32* %y.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds [8 x i32], [8 x i32]* @dy, i32 0, i32 %9
  %10 = load i32, i32* %arrayidx3, align 4
  %add4 = add nsw i32 %8, %10
  %arrayidx5 = getelementptr inbounds i8*, i8** %7, i32 %add4
  %11 = load i8*, i8** %arrayidx5, align 4
  %12 = load i32, i32* %x.addr, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds [8 x i32], [8 x i32]* @dx, i32 0, i32 %13
  %14 = load i32, i32* %arrayidx6, align 4
  %add7 = add nsw i32 %12, %14
  %arrayidx8 = getelementptr inbounds i8, i8* %11, i32 %add7
  %15 = load i8, i8* %arrayidx8, align 1
  %dec = add i8 %15, -1
  store i8 %dec, i8* %arrayidx8, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 255, i32* %least, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc27, %for.end
  %17 = load i32, i32* %i, align 4
  %cmp10 = icmp slt i32 %17, 8
  br i1 %cmp10, label %for.body11, label %for.end29

for.body11:                                       ; preds = %for.cond9
  %18 = load i8**, i8*** %b.addr, align 4
  %19 = load i32, i32* %y.addr, align 4
  %20 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds [8 x i32], [8 x i32]* @dy, i32 0, i32 %20
  %21 = load i32, i32* %arrayidx12, align 4
  %add13 = add nsw i32 %19, %21
  %arrayidx14 = getelementptr inbounds i8*, i8** %18, i32 %add13
  %22 = load i8*, i8** %arrayidx14, align 4
  %23 = load i32, i32* %x.addr, align 4
  %24 = load i32, i32* %i, align 4
  %arrayidx15 = getelementptr inbounds [8 x i32], [8 x i32]* @dx, i32 0, i32 %24
  %25 = load i32, i32* %arrayidx15, align 4
  %add16 = add nsw i32 %23, %25
  %arrayidx17 = getelementptr inbounds i8, i8* %22, i32 %add16
  %26 = load i8, i8* %arrayidx17, align 1
  %conv = zext i8 %26 to i32
  %27 = load i32, i32* %least, align 4
  %cmp18 = icmp slt i32 %conv, %27
  br i1 %cmp18, label %if.then, label %if.end

if.then:                                          ; preds = %for.body11
  %28 = load i32, i32* %x.addr, align 4
  %29 = load i32, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds [8 x i32], [8 x i32]* @dx, i32 0, i32 %29
  %30 = load i32, i32* %arrayidx20, align 4
  %add21 = add nsw i32 %28, %30
  store i32 %add21, i32* %nx, align 4
  %31 = load i32, i32* %y.addr, align 4
  %32 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds [8 x i32], [8 x i32]* @dy, i32 0, i32 %32
  %33 = load i32, i32* %arrayidx22, align 4
  %add23 = add nsw i32 %31, %33
  store i32 %add23, i32* %ny, align 4
  %34 = load i8**, i8*** %b.addr, align 4
  %35 = load i32, i32* %ny, align 4
  %arrayidx24 = getelementptr inbounds i8*, i8** %34, i32 %35
  %36 = load i8*, i8** %arrayidx24, align 4
  %37 = load i32, i32* %nx, align 4
  %arrayidx25 = getelementptr inbounds i8, i8* %36, i32 %37
  %38 = load i8, i8* %arrayidx25, align 1
  %conv26 = zext i8 %38 to i32
  store i32 %conv26, i32* %least, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body11
  br label %for.inc27

for.inc27:                                        ; preds = %if.end
  %39 = load i32, i32* %i, align 4
  %inc28 = add nsw i32 %39, 1
  store i32 %inc28, i32* %i, align 4
  br label %for.cond9

for.end29:                                        ; preds = %for.cond9
  %40 = load i32, i32* %least, align 4
  %cmp30 = icmp sgt i32 %40, 7
  br i1 %cmp30, label %if.then32, label %if.end38

if.then32:                                        ; preds = %for.end29
  %41 = load i32, i32* %h.addr, align 4
  %add33 = add nsw i32 %41, 2
  %call34 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i32 %add33)
  %42 = load i32, i32* %steps, align 4
  %43 = load i32, i32* %w.addr, align 4
  %44 = load i32, i32* %h.addr, align 4
  %mul35 = mul nsw i32 %43, %44
  %sub = sub nsw i32 %mul35, 1
  %cmp36 = icmp eq i32 %42, %sub
  %conv37 = zext i1 %cmp36 to i32
  ret i32 %conv37

if.end38:                                         ; preds = %for.end29
  %45 = load i32, i32* %steps, align 4
  %inc39 = add nsw i32 %45, 1
  store i32 %inc39, i32* %steps, align 4
  %tobool = icmp ne i32 %45, 0
  br i1 %tobool, label %if.then40, label %if.end45

if.then40:                                        ; preds = %if.end38
  %46 = load i32, i32* %y.addr, align 4
  %add41 = add nsw i32 %46, 1
  %47 = load i32, i32* %x.addr, align 4
  %mul42 = mul nsw i32 2, %47
  %add43 = add nsw i32 1, %mul42
  %call44 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 %add41, i32 %add43)
  br label %if.end45

if.end45:                                         ; preds = %if.then40, %if.end38
  %48 = load i32, i32* %nx, align 4
  store i32 %48, i32* %x.addr, align 4
  %49 = load i32, i32* %ny, align 4
  store i32 %49, i32* %y.addr, align 4
  %50 = load i32, i32* %y.addr, align 4
  %add46 = add nsw i32 %50, 1
  %51 = load i32, i32* %x.addr, align 4
  %mul47 = mul nsw i32 2, %51
  %add48 = add nsw i32 1, %mul47
  %call49 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i32 0, i32 0), i32 %add46, i32 %add48)
  %52 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call50 = call i32 @fflush(%struct._IO_FILE* %52)
  %call51 = call i32 @usleep(i32 120000)
  br label %while.body
}

declare i32 @printf(i8* %0, ...) #2

declare i32 @fflush(%struct._IO_FILE* %0) #2

declare i32 @usleep(i32 %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @solve(i32 %w, i32 %h) #0 {
entry:
  %retval = alloca i32, align 4
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %a = alloca i8**, align 4
  %b = alloca i8**, align 4
  store i32 %w, i32* %w.addr, align 4
  store i32 %h, i32* %h.addr, align 4
  store i32 0, i32* %x, align 4
  store i32 0, i32* %y, align 4
  %0 = load i32, i32* %w.addr, align 4
  %add = add nsw i32 %0, 4
  %1 = load i32, i32* %h.addr, align 4
  %add1 = add nsw i32 %1, 4
  %mul = mul nsw i32 %add, %add1
  %2 = load i32, i32* %h.addr, align 4
  %add2 = add nsw i32 %2, 4
  %mul3 = mul i32 4, %add2
  %add4 = add i32 %mul, %mul3
  %call = call noalias i8* @malloc(i32 %add4)
  %3 = bitcast i8* %call to i8**
  store i8** %3, i8*** %a, align 4
  %4 = load i32, i32* %h.addr, align 4
  %add5 = add nsw i32 %4, 4
  %mul6 = mul i32 %add5, 4
  %call7 = call noalias i8* @malloc(i32 %mul6)
  %5 = bitcast i8* %call7 to i8**
  store i8** %5, i8*** %b, align 4
  br label %while.body

while.body:                                       ; preds = %entry, %if.end16
  %6 = load i32, i32* %w.addr, align 4
  %7 = load i32, i32* %h.addr, align 4
  %8 = load i8**, i8*** %a, align 4
  %9 = load i8**, i8*** %b, align 4
  call void @init_board(i32 %6, i32 %7, i8** %8, i8** %9)
  %10 = load i32, i32* %w.addr, align 4
  %11 = load i32, i32* %h.addr, align 4
  %12 = load i32, i32* %x, align 4
  %13 = load i32, i32* %y, align 4
  %14 = load i8**, i8*** %b, align 4
  %add.ptr = getelementptr inbounds i8*, i8** %14, i32 2
  %call8 = call i32 @walk_board(i32 %10, i32 %11, i32 %12, i32 %13, i8** %add.ptr)
  %tobool = icmp ne i32 %call8, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i32 0, i32 0))
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %while.body
  %15 = load i32, i32* %x, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %x, align 4
  %16 = load i32, i32* %w.addr, align 4
  %cmp = icmp sge i32 %inc, %16
  br i1 %cmp, label %if.then10, label %if.end12

if.then10:                                        ; preds = %if.end
  store i32 0, i32* %x, align 4
  %17 = load i32, i32* %y, align 4
  %inc11 = add nsw i32 %17, 1
  store i32 %inc11, i32* %y, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then10, %if.end
  %18 = load i32, i32* %y, align 4
  %19 = load i32, i32* %h.addr, align 4
  %cmp13 = icmp sge i32 %18, %19
  br i1 %cmp13, label %if.then14, label %if.end16

if.then14:                                        ; preds = %if.end12
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.5, i32 0, i32 0))
  store i32 0, i32* %retval, align 4
  br label %return

if.end16:                                         ; preds = %if.end12
  %call17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.6, i32 0, i32 0))
  %call18 = call i32 @getchar()
  br label %while.body

return:                                           ; preds = %if.then14, %if.then
  %20 = load i32, i32* %retval, align 4
  ret i32 %20
}

declare noalias i8* @malloc(i32 %0) #2

declare i32 @getchar() #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %c, i8** %v) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i32, align 4
  %v.addr = alloca i8**, align 4
  %w = alloca i32, align 4
  %h = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %c, i32* %c.addr, align 4
  store i8** %v, i8*** %v.addr, align 4
  %0 = load i32, i32* %c.addr, align 4
  %cmp = icmp slt i32 %0, 2
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8**, i8*** %v.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 1
  %2 = load i8*, i8** %arrayidx, align 4
  %call = call i32 @atoi(i8* %2)
  store i32 %call, i32* %w, align 4
  %cmp1 = icmp sle i32 %call, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 8, i32* %w, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %3 = load i32, i32* %c.addr, align 4
  %cmp2 = icmp slt i32 %3, 3
  br i1 %cmp2, label %if.then7, label %lor.lhs.false3

lor.lhs.false3:                                   ; preds = %if.end
  %4 = load i8**, i8*** %v.addr, align 4
  %arrayidx4 = getelementptr inbounds i8*, i8** %4, i32 2
  %5 = load i8*, i8** %arrayidx4, align 4
  %call5 = call i32 @atoi(i8* %5)
  store i32 %call5, i32* %h, align 4
  %cmp6 = icmp sle i32 %call5, 0
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %lor.lhs.false3, %if.end
  %6 = load i32, i32* %w, align 4
  store i32 %6, i32* %h, align 4
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %lor.lhs.false3
  %7 = load i32, i32* %w, align 4
  %8 = load i32, i32* %h, align 4
  %call9 = call i32 @solve(i32 %7, i32 %8)
  ret i32 0
}

declare i32 @atoi(i8* %0) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %c.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, 2
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %call = call i32 @atoi(i8* %2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = icmp sle i32 %call, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle %0, 0:i32
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %c.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp slt i32 %3, 3
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 3:i32
infer %1

; *****
; For LLVM instruction:
;  %call5 = call i32 @atoi(i8* %5)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp6 = icmp sle i32 %call5, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle %0, 0:i32
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %w, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %w, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %h, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 2:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle %0, 0:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 3:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for __main_argc_argv()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
