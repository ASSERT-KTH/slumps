
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for NewList()

; ModuleID = './Doubly-linked_list-Traversal.c.bc'
source_filename = "./Doubly-linked_list-Traversal.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.sListEntry = type { i8*, %struct.sListEntry*, %struct.sListEntry* }
%struct.sListIterator = type { %struct.sListEntry*, %struct.sListEntry* }

@main.contents = internal global [6 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i32 0, i32 0)], align 16
@.str = private unnamed_addr constant [5 x i8] c"Read\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"Orage\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"Yeller\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"Glean\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"Blew\00", align 1
@.str.5 = private unnamed_addr constant [7 x i8] c"Burple\00", align 1
@.str.6 = private unnamed_addr constant [9 x i8] c"forward\0A\00", align 1
@.str.7 = private unnamed_addr constant [10 x i8] c"value=%s\0A\00", align 1
@.str.8 = private unnamed_addr constant [10 x i8] c"\0Areverse\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.sListEntry* @NewList() #0 {
entry:
  %le = alloca %struct.sListEntry*, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.sListEntry*
  store %struct.sListEntry* %0, %struct.sListEntry** %le, align 4
  %1 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %tobool = icmp ne %struct.sListEntry* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %value = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %2, i32 0, i32 0
  store i8* null, i8** %value, align 4
  %3 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %3, i32 0, i32 2
  store %struct.sListEntry* null, %struct.sListEntry** %prev, align 4
  %4 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %next = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %4, i32 0, i32 1
  store %struct.sListEntry* null, %struct.sListEntry** %next, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  ret %struct.sListEntry* %5
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @LL_Append(%struct.sListEntry* %ll, i8* %newVal) #0 {
entry:
  %ll.addr = alloca %struct.sListEntry*, align 4
  %newVal.addr = alloca i8*, align 4
  %le = alloca %struct.sListEntry*, align 4
  store %struct.sListEntry* %ll, %struct.sListEntry** %ll.addr, align 4
  store i8* %newVal, i8** %newVal.addr, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.sListEntry*
  store %struct.sListEntry* %0, %struct.sListEntry** %le, align 4
  %1 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %tobool = icmp ne %struct.sListEntry* %1, null
  br i1 %tobool, label %if.then, label %if.end10

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %newVal.addr, align 4
  %call1 = call i8* @strdup(i8* %2) #3
  %3 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %value = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %3, i32 0, i32 0
  store i8* %call1, i8** %value, align 4
  %4 = load %struct.sListEntry*, %struct.sListEntry** %ll.addr, align 4
  %prev = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %4, i32 0, i32 2
  %5 = load %struct.sListEntry*, %struct.sListEntry** %prev, align 4
  %6 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev2 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %6, i32 0, i32 2
  store %struct.sListEntry* %5, %struct.sListEntry** %prev2, align 4
  %7 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %next = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %7, i32 0, i32 1
  store %struct.sListEntry* null, %struct.sListEntry** %next, align 4
  %8 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev3 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %8, i32 0, i32 2
  %9 = load %struct.sListEntry*, %struct.sListEntry** %prev3, align 4
  %tobool4 = icmp ne %struct.sListEntry* %9, null
  br i1 %tobool4, label %if.then5, label %if.else

if.then5:                                         ; preds = %if.then
  %10 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %11 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev6 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %11, i32 0, i32 2
  %12 = load %struct.sListEntry*, %struct.sListEntry** %prev6, align 4
  %next7 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %12, i32 0, i32 1
  store %struct.sListEntry* %10, %struct.sListEntry** %next7, align 4
  br label %if.end

if.else:                                          ; preds = %if.then
  %13 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %14 = load %struct.sListEntry*, %struct.sListEntry** %ll.addr, align 4
  %next8 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %14, i32 0, i32 1
  store %struct.sListEntry* %13, %struct.sListEntry** %next8, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then5
  %15 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %16 = load %struct.sListEntry*, %struct.sListEntry** %ll.addr, align 4
  %prev9 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %16, i32 0, i32 2
  store %struct.sListEntry* %15, %struct.sListEntry** %prev9, align 4
  br label %if.end10

if.end10:                                         ; preds = %if.end, %entry
  %17 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %cmp = icmp ne %struct.sListEntry* %17, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: nounwind
declare i8* @strdup(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @LI_Insert(%struct.sListIterator* %iter, i8* %newVal) #0 {
entry:
  %iter.addr = alloca %struct.sListIterator*, align 4
  %newVal.addr = alloca i8*, align 4
  %crnt = alloca %struct.sListEntry*, align 4
  %le = alloca %struct.sListEntry*, align 4
  store %struct.sListIterator* %iter, %struct.sListIterator** %iter.addr, align 4
  store i8* %newVal, i8** %newVal.addr, align 4
  %0 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %0, i32 0, i32 0
  %1 = load %struct.sListEntry*, %struct.sListEntry** %link, align 4
  store %struct.sListEntry* %1, %struct.sListEntry** %crnt, align 4
  %call = call noalias i8* @malloc(i32 12)
  %2 = bitcast i8* %call to %struct.sListEntry*
  store %struct.sListEntry* %2, %struct.sListEntry** %le, align 4
  %3 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %tobool = icmp ne %struct.sListEntry* %3, null
  br i1 %tobool, label %if.then, label %if.end35

if.then:                                          ; preds = %entry
  %4 = load i8*, i8** %newVal.addr, align 4
  %call1 = call i8* @strdup(i8* %4) #3
  %5 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %value = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %5, i32 0, i32 0
  store i8* %call1, i8** %value, align 4
  %6 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %7 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %head = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %7, i32 0, i32 1
  %8 = load %struct.sListEntry*, %struct.sListEntry** %head, align 4
  %cmp = icmp eq %struct.sListEntry* %6, %8
  br i1 %cmp, label %if.then2, label %if.else11

if.then2:                                         ; preds = %if.then
  %9 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %9, i32 0, i32 2
  store %struct.sListEntry* null, %struct.sListEntry** %prev, align 4
  %10 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %next = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %10, i32 0, i32 1
  %11 = load %struct.sListEntry*, %struct.sListEntry** %next, align 4
  %12 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %next3 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %12, i32 0, i32 1
  store %struct.sListEntry* %11, %struct.sListEntry** %next3, align 4
  %13 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %14 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %next4 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %14, i32 0, i32 1
  store %struct.sListEntry* %13, %struct.sListEntry** %next4, align 4
  %15 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %next5 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %15, i32 0, i32 1
  %16 = load %struct.sListEntry*, %struct.sListEntry** %next5, align 4
  %tobool6 = icmp ne %struct.sListEntry* %16, null
  br i1 %tobool6, label %if.then7, label %if.else

if.then7:                                         ; preds = %if.then2
  %17 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %18 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %next8 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %18, i32 0, i32 1
  %19 = load %struct.sListEntry*, %struct.sListEntry** %next8, align 4
  %prev9 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %19, i32 0, i32 2
  store %struct.sListEntry* %17, %struct.sListEntry** %prev9, align 4
  br label %if.end

if.else:                                          ; preds = %if.then2
  %20 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %21 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %prev10 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %21, i32 0, i32 2
  store %struct.sListEntry* %20, %struct.sListEntry** %prev10, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then7
  br label %if.end34

if.else11:                                        ; preds = %if.then
  %22 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %cmp12 = icmp eq %struct.sListEntry* %22, null
  br i1 %cmp12, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else11
  %23 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %head13 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %23, i32 0, i32 1
  %24 = load %struct.sListEntry*, %struct.sListEntry** %head13, align 4
  %prev14 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %24, i32 0, i32 2
  %25 = load %struct.sListEntry*, %struct.sListEntry** %prev14, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.else11
  %26 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %prev15 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %26, i32 0, i32 2
  %27 = load %struct.sListEntry*, %struct.sListEntry** %prev15, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.sListEntry* [ %25, %cond.true ], [ %27, %cond.false ]
  %28 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev16 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %28, i32 0, i32 2
  store %struct.sListEntry* %cond, %struct.sListEntry** %prev16, align 4
  %29 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %30 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %next17 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %30, i32 0, i32 1
  store %struct.sListEntry* %29, %struct.sListEntry** %next17, align 4
  %31 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev18 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %31, i32 0, i32 2
  %32 = load %struct.sListEntry*, %struct.sListEntry** %prev18, align 4
  %tobool19 = icmp ne %struct.sListEntry* %32, null
  br i1 %tobool19, label %if.then20, label %if.else23

if.then20:                                        ; preds = %cond.end
  %33 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %34 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev21 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %34, i32 0, i32 2
  %35 = load %struct.sListEntry*, %struct.sListEntry** %prev21, align 4
  %next22 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %35, i32 0, i32 1
  store %struct.sListEntry* %33, %struct.sListEntry** %next22, align 4
  br label %if.end26

if.else23:                                        ; preds = %cond.end
  %36 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %37 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %head24 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %37, i32 0, i32 1
  %38 = load %struct.sListEntry*, %struct.sListEntry** %head24, align 4
  %next25 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %38, i32 0, i32 1
  store %struct.sListEntry* %36, %struct.sListEntry** %next25, align 4
  br label %if.end26

if.end26:                                         ; preds = %if.else23, %if.then20
  %39 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %tobool27 = icmp ne %struct.sListEntry* %39, null
  br i1 %tobool27, label %if.then28, label %if.else30

if.then28:                                        ; preds = %if.end26
  %40 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %41 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %prev29 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %41, i32 0, i32 2
  store %struct.sListEntry* %40, %struct.sListEntry** %prev29, align 4
  br label %if.end33

if.else30:                                        ; preds = %if.end26
  %42 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %43 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %head31 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %43, i32 0, i32 1
  %44 = load %struct.sListEntry*, %struct.sListEntry** %head31, align 4
  %prev32 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %44, i32 0, i32 2
  store %struct.sListEntry* %42, %struct.sListEntry** %prev32, align 4
  br label %if.end33

if.end33:                                         ; preds = %if.else30, %if.then28
  br label %if.end34

if.end34:                                         ; preds = %if.end33, %if.end
  br label %if.end35

if.end35:                                         ; preds = %if.end34, %entry
  %45 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %cmp36 = icmp ne %struct.sListEntry* %45, null
  %conv = zext i1 %cmp36 to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.sListIterator* @LL_GetIterator(%struct.sListEntry* %ll) #0 {
entry:
  %ll.addr = alloca %struct.sListEntry*, align 4
  %liter = alloca %struct.sListIterator*, align 4
  store %struct.sListEntry* %ll, %struct.sListEntry** %ll.addr, align 4
  %call = call noalias i8* @malloc(i32 8)
  %0 = bitcast i8* %call to %struct.sListIterator*
  store %struct.sListIterator* %0, %struct.sListIterator** %liter, align 4
  %1 = load %struct.sListEntry*, %struct.sListEntry** %ll.addr, align 4
  %2 = load %struct.sListIterator*, %struct.sListIterator** %liter, align 4
  %head = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %2, i32 0, i32 1
  store %struct.sListEntry* %1, %struct.sListEntry** %head, align 4
  %3 = load %struct.sListEntry*, %struct.sListEntry** %ll.addr, align 4
  %4 = load %struct.sListIterator*, %struct.sListIterator** %liter, align 4
  %link = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %4, i32 0, i32 0
  store %struct.sListEntry* %3, %struct.sListEntry** %link, align 4
  %5 = load %struct.sListIterator*, %struct.sListIterator** %liter, align 4
  ret %struct.sListIterator* %5
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @LLI_AtEnd(%struct.sListIterator* %iter) #0 {
entry:
  %iter.addr = alloca %struct.sListIterator*, align 4
  store %struct.sListIterator* %iter, %struct.sListIterator** %iter.addr, align 4
  %0 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %0, i32 0, i32 0
  %1 = load %struct.sListEntry*, %struct.sListEntry** %link, align 4
  %cmp = icmp eq %struct.sListEntry* %1, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @LLI_Value(%struct.sListIterator* %iter) #0 {
entry:
  %iter.addr = alloca %struct.sListIterator*, align 4
  store %struct.sListIterator* %iter, %struct.sListIterator** %iter.addr, align 4
  %0 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %0, i32 0, i32 0
  %1 = load %struct.sListEntry*, %struct.sListEntry** %link, align 4
  %tobool = icmp ne %struct.sListEntry* %1, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link1 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %2, i32 0, i32 0
  %3 = load %struct.sListEntry*, %struct.sListEntry** %link1, align 4
  %value = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %3, i32 0, i32 0
  %4 = load i8*, i8** %value, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %4, %cond.true ], [ null, %cond.false ]
  ret i8* %cond
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @LLI_Next(%struct.sListIterator* %iter) #0 {
entry:
  %iter.addr = alloca %struct.sListIterator*, align 4
  store %struct.sListIterator* %iter, %struct.sListIterator** %iter.addr, align 4
  %0 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %0, i32 0, i32 0
  %1 = load %struct.sListEntry*, %struct.sListEntry** %link, align 4
  %tobool = icmp ne %struct.sListEntry* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link1 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %2, i32 0, i32 0
  %3 = load %struct.sListEntry*, %struct.sListEntry** %link1, align 4
  %next = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %3, i32 0, i32 1
  %4 = load %struct.sListEntry*, %struct.sListEntry** %next, align 4
  %5 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link2 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %5, i32 0, i32 0
  store %struct.sListEntry* %4, %struct.sListEntry** %link2, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link3 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %6, i32 0, i32 0
  %7 = load %struct.sListEntry*, %struct.sListEntry** %link3, align 4
  %cmp = icmp ne %struct.sListEntry* %7, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @LLI_Prev(%struct.sListIterator* %iter) #0 {
entry:
  %iter.addr = alloca %struct.sListIterator*, align 4
  store %struct.sListIterator* %iter, %struct.sListIterator** %iter.addr, align 4
  %0 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %0, i32 0, i32 0
  %1 = load %struct.sListEntry*, %struct.sListEntry** %link, align 4
  %tobool = icmp ne %struct.sListEntry* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link1 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %2, i32 0, i32 0
  %3 = load %struct.sListEntry*, %struct.sListEntry** %link1, align 4
  %prev = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %3, i32 0, i32 2
  %4 = load %struct.sListEntry*, %struct.sListEntry** %prev, align 4
  %5 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link2 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %5, i32 0, i32 0
  store %struct.sListEntry* %4, %struct.sListEntry** %link2, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link3 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %6, i32 0, i32 0
  %7 = load %struct.sListEntry*, %struct.sListEntry** %link3, align 4
  %cmp = icmp ne %struct.sListEntry* %7, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %ix = alloca i32, align 4
  %ll = alloca %struct.sListEntry*, align 4
  %iter = alloca %struct.sListIterator*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.sListEntry* @NewList()
  store %struct.sListEntry* %call, %struct.sListEntry** %ll, align 4
  store i32 0, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %ix, align 4
  %cmp = icmp slt i32 %0, 6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load %struct.sListEntry*, %struct.sListEntry** %ll, align 4
  %2 = load i32, i32* %ix, align 4
  %arrayidx = getelementptr inbounds [6 x i8*], [6 x i8*]* @main.contents, i32 0, i32 %2
  %3 = load i8*, i8** %arrayidx, align 4
  %call1 = call i32 @LL_Append(%struct.sListEntry* %1, i8* %3)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %5 = load %struct.sListEntry*, %struct.sListEntry** %ll, align 4
  %call2 = call %struct.sListIterator* @LL_GetIterator(%struct.sListEntry* %5)
  store %struct.sListIterator* %call2, %struct.sListIterator** %iter, align 4
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i32 0, i32 0))
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end
  %6 = load %struct.sListIterator*, %struct.sListIterator** %iter, align 4
  %call4 = call i32 @LLI_Next(%struct.sListIterator* %6)
  %tobool = icmp ne i32 %call4, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %7 = load %struct.sListIterator*, %struct.sListIterator** %iter, align 4
  %call5 = call i8* @LLI_Value(%struct.sListIterator* %7)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7, i32 0, i32 0), i8* %call5)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %8 = load %struct.sListIterator*, %struct.sListIterator** %iter, align 4
  %9 = bitcast %struct.sListIterator* %8 to i8*
  call void @free(i8* %9)
  store %struct.sListIterator* null, %struct.sListIterator** %iter, align 4
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8, i32 0, i32 0))
  %10 = load %struct.sListEntry*, %struct.sListEntry** %ll, align 4
  %call8 = call %struct.sListIterator* @LL_GetIterator(%struct.sListEntry* %10)
  store %struct.sListIterator* %call8, %struct.sListIterator** %iter, align 4
  br label %while.cond9

while.cond9:                                      ; preds = %while.body12, %while.end
  %11 = load %struct.sListIterator*, %struct.sListIterator** %iter, align 4
  %call10 = call i32 @LLI_Prev(%struct.sListIterator* %11)
  %tobool11 = icmp ne i32 %call10, 0
  br i1 %tobool11, label %while.body12, label %while.end15

while.body12:                                     ; preds = %while.cond9
  %12 = load %struct.sListIterator*, %struct.sListIterator** %iter, align 4
  %call13 = call i8* @LLI_Value(%struct.sListIterator* %12)
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7, i32 0, i32 0), i8* %call13)
  br label %while.cond9

while.end15:                                      ; preds = %while.cond9
  %13 = load %struct.sListIterator*, %struct.sListIterator** %iter, align 4
  %14 = bitcast %struct.sListIterator* %13 to i8*
  call void @free(i8* %14)
  store %struct.sListIterator* null, %struct.sListIterator** %iter, align 4
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

declare void @free(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %tobool = icmp ne %struct.sListEntry* %1, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for NewList()

; entering Souper's runOnFunction() for LL_Append()

; ModuleID = './Doubly-linked_list-Traversal.c.bc'
source_filename = "./Doubly-linked_list-Traversal.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.sListEntry = type { i8*, %struct.sListEntry*, %struct.sListEntry* }
%struct.sListIterator = type { %struct.sListEntry*, %struct.sListEntry* }

@main.contents = internal global [6 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i32 0, i32 0)], align 16
@.str = private unnamed_addr constant [5 x i8] c"Read\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"Orage\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"Yeller\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"Glean\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"Blew\00", align 1
@.str.5 = private unnamed_addr constant [7 x i8] c"Burple\00", align 1
@.str.6 = private unnamed_addr constant [9 x i8] c"forward\0A\00", align 1
@.str.7 = private unnamed_addr constant [10 x i8] c"value=%s\0A\00", align 1
@.str.8 = private unnamed_addr constant [10 x i8] c"\0Areverse\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.sListEntry* @NewList() #0 {
entry:
  %le = alloca %struct.sListEntry*, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.sListEntry*
  store %struct.sListEntry* %0, %struct.sListEntry** %le, align 4
  %1 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %tobool = icmp ne %struct.sListEntry* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %value = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %2, i32 0, i32 0
  store i8* null, i8** %value, align 4
  %3 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %3, i32 0, i32 2
  store %struct.sListEntry* null, %struct.sListEntry** %prev, align 4
  %4 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %next = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %4, i32 0, i32 1
  store %struct.sListEntry* null, %struct.sListEntry** %next, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  ret %struct.sListEntry* %5
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @LL_Append(%struct.sListEntry* %ll, i8* %newVal) #0 {
entry:
  %ll.addr = alloca %struct.sListEntry*, align 4
  %newVal.addr = alloca i8*, align 4
  %le = alloca %struct.sListEntry*, align 4
  store %struct.sListEntry* %ll, %struct.sListEntry** %ll.addr, align 4
  store i8* %newVal, i8** %newVal.addr, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.sListEntry*
  store %struct.sListEntry* %0, %struct.sListEntry** %le, align 4
  %1 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %tobool = icmp ne %struct.sListEntry* %1, null
  br i1 %tobool, label %if.then, label %if.end10

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %newVal.addr, align 4
  %call1 = call i8* @strdup(i8* %2) #3
  %3 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %value = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %3, i32 0, i32 0
  store i8* %call1, i8** %value, align 4
  %4 = load %struct.sListEntry*, %struct.sListEntry** %ll.addr, align 4
  %prev = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %4, i32 0, i32 2
  %5 = load %struct.sListEntry*, %struct.sListEntry** %prev, align 4
  %6 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev2 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %6, i32 0, i32 2
  store %struct.sListEntry* %5, %struct.sListEntry** %prev2, align 4
  %7 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %next = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %7, i32 0, i32 1
  store %struct.sListEntry* null, %struct.sListEntry** %next, align 4
  %8 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev3 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %8, i32 0, i32 2
  %9 = load %struct.sListEntry*, %struct.sListEntry** %prev3, align 4
  %tobool4 = icmp ne %struct.sListEntry* %9, null
  br i1 %tobool4, label %if.then5, label %if.else

if.then5:                                         ; preds = %if.then
  %10 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %11 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev6 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %11, i32 0, i32 2
  %12 = load %struct.sListEntry*, %struct.sListEntry** %prev6, align 4
  %next7 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %12, i32 0, i32 1
  store %struct.sListEntry* %10, %struct.sListEntry** %next7, align 4
  br label %if.end

if.else:                                          ; preds = %if.then
  %13 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %14 = load %struct.sListEntry*, %struct.sListEntry** %ll.addr, align 4
  %next8 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %14, i32 0, i32 1
  store %struct.sListEntry* %13, %struct.sListEntry** %next8, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then5
  %15 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %16 = load %struct.sListEntry*, %struct.sListEntry** %ll.addr, align 4
  %prev9 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %16, i32 0, i32 2
  store %struct.sListEntry* %15, %struct.sListEntry** %prev9, align 4
  br label %if.end10

if.end10:                                         ; preds = %if.end, %entry
  %17 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %cmp = icmp ne %struct.sListEntry* %17, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: nounwind
declare i8* @strdup(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @LI_Insert(%struct.sListIterator* %iter, i8* %newVal) #0 {
entry:
  %iter.addr = alloca %struct.sListIterator*, align 4
  %newVal.addr = alloca i8*, align 4
  %crnt = alloca %struct.sListEntry*, align 4
  %le = alloca %struct.sListEntry*, align 4
  store %struct.sListIterator* %iter, %struct.sListIterator** %iter.addr, align 4
  store i8* %newVal, i8** %newVal.addr, align 4
  %0 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %0, i32 0, i32 0
  %1 = load %struct.sListEntry*, %struct.sListEntry** %link, align 4
  store %struct.sListEntry* %1, %struct.sListEntry** %crnt, align 4
  %call = call noalias i8* @malloc(i32 12)
  %2 = bitcast i8* %call to %struct.sListEntry*
  store %struct.sListEntry* %2, %struct.sListEntry** %le, align 4
  %3 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %tobool = icmp ne %struct.sListEntry* %3, null
  br i1 %tobool, label %if.then, label %if.end35

if.then:                                          ; preds = %entry
  %4 = load i8*, i8** %newVal.addr, align 4
  %call1 = call i8* @strdup(i8* %4) #3
  %5 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %value = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %5, i32 0, i32 0
  store i8* %call1, i8** %value, align 4
  %6 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %7 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %head = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %7, i32 0, i32 1
  %8 = load %struct.sListEntry*, %struct.sListEntry** %head, align 4
  %cmp = icmp eq %struct.sListEntry* %6, %8
  br i1 %cmp, label %if.then2, label %if.else11

if.then2:                                         ; preds = %if.then
  %9 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %9, i32 0, i32 2
  store %struct.sListEntry* null, %struct.sListEntry** %prev, align 4
  %10 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %next = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %10, i32 0, i32 1
  %11 = load %struct.sListEntry*, %struct.sListEntry** %next, align 4
  %12 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %next3 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %12, i32 0, i32 1
  store %struct.sListEntry* %11, %struct.sListEntry** %next3, align 4
  %13 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %14 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %next4 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %14, i32 0, i32 1
  store %struct.sListEntry* %13, %struct.sListEntry** %next4, align 4
  %15 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %next5 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %15, i32 0, i32 1
  %16 = load %struct.sListEntry*, %struct.sListEntry** %next5, align 4
  %tobool6 = icmp ne %struct.sListEntry* %16, null
  br i1 %tobool6, label %if.then7, label %if.else

if.then7:                                         ; preds = %if.then2
  %17 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %18 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %next8 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %18, i32 0, i32 1
  %19 = load %struct.sListEntry*, %struct.sListEntry** %next8, align 4
  %prev9 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %19, i32 0, i32 2
  store %struct.sListEntry* %17, %struct.sListEntry** %prev9, align 4
  br label %if.end

if.else:                                          ; preds = %if.then2
  %20 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %21 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %prev10 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %21, i32 0, i32 2
  store %struct.sListEntry* %20, %struct.sListEntry** %prev10, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then7
  br label %if.end34

if.else11:                                        ; preds = %if.then
  %22 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %cmp12 = icmp eq %struct.sListEntry* %22, null
  br i1 %cmp12, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else11
  %23 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %head13 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %23, i32 0, i32 1
  %24 = load %struct.sListEntry*, %struct.sListEntry** %head13, align 4
  %prev14 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %24, i32 0, i32 2
  %25 = load %struct.sListEntry*, %struct.sListEntry** %prev14, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.else11
  %26 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %prev15 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %26, i32 0, i32 2
  %27 = load %struct.sListEntry*, %struct.sListEntry** %prev15, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.sListEntry* [ %25, %cond.true ], [ %27, %cond.false ]
  %28 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev16 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %28, i32 0, i32 2
  store %struct.sListEntry* %cond, %struct.sListEntry** %prev16, align 4
  %29 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %30 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %next17 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %30, i32 0, i32 1
  store %struct.sListEntry* %29, %struct.sListEntry** %next17, align 4
  %31 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev18 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %31, i32 0, i32 2
  %32 = load %struct.sListEntry*, %struct.sListEntry** %prev18, align 4
  %tobool19 = icmp ne %struct.sListEntry* %32, null
  br i1 %tobool19, label %if.then20, label %if.else23

if.then20:                                        ; preds = %cond.end
  %33 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %34 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev21 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %34, i32 0, i32 2
  %35 = load %struct.sListEntry*, %struct.sListEntry** %prev21, align 4
  %next22 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %35, i32 0, i32 1
  store %struct.sListEntry* %33, %struct.sListEntry** %next22, align 4
  br label %if.end26

if.else23:                                        ; preds = %cond.end
  %36 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %37 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %head24 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %37, i32 0, i32 1
  %38 = load %struct.sListEntry*, %struct.sListEntry** %head24, align 4
  %next25 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %38, i32 0, i32 1
  store %struct.sListEntry* %36, %struct.sListEntry** %next25, align 4
  br label %if.end26

if.end26:                                         ; preds = %if.else23, %if.then20
  %39 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %tobool27 = icmp ne %struct.sListEntry* %39, null
  br i1 %tobool27, label %if.then28, label %if.else30

if.then28:                                        ; preds = %if.end26
  %40 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %41 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %prev29 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %41, i32 0, i32 2
  store %struct.sListEntry* %40, %struct.sListEntry** %prev29, align 4
  br label %if.end33

if.else30:                                        ; preds = %if.end26
  %42 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %43 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %head31 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %43, i32 0, i32 1
  %44 = load %struct.sListEntry*, %struct.sListEntry** %head31, align 4
  %prev32 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %44, i32 0, i32 2
  store %struct.sListEntry* %42, %struct.sListEntry** %prev32, align 4
  br label %if.end33

if.end33:                                         ; preds = %if.else30, %if.then28
  br label %if.end34

if.end34:                                         ; preds = %if.end33, %if.end
  br label %if.end35

if.end35:                                         ; preds = %if.end34, %entry
  %45 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %cmp36 = icmp ne %struct.sListEntry* %45, null
  %conv = zext i1 %cmp36 to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.sListIterator* @LL_GetIterator(%struct.sListEntry* %ll) #0 {
entry:
  %ll.addr = alloca %struct.sListEntry*, align 4
  %liter = alloca %struct.sListIterator*, align 4
  store %struct.sListEntry* %ll, %struct.sListEntry** %ll.addr, align 4
  %call = call noalias i8* @malloc(i32 8)
  %0 = bitcast i8* %call to %struct.sListIterator*
  store %struct.sListIterator* %0, %struct.sListIterator** %liter, align 4
  %1 = load %struct.sListEntry*, %struct.sListEntry** %ll.addr, align 4
  %2 = load %struct.sListIterator*, %struct.sListIterator** %liter, align 4
  %head = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %2, i32 0, i32 1
  store %struct.sListEntry* %1, %struct.sListEntry** %head, align 4
  %3 = load %struct.sListEntry*, %struct.sListEntry** %ll.addr, align 4
  %4 = load %struct.sListIterator*, %struct.sListIterator** %liter, align 4
  %link = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %4, i32 0, i32 0
  store %struct.sListEntry* %3, %struct.sListEntry** %link, align 4
  %5 = load %struct.sListIterator*, %struct.sListIterator** %liter, align 4
  ret %struct.sListIterator* %5
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @LLI_AtEnd(%struct.sListIterator* %iter) #0 {
entry:
  %iter.addr = alloca %struct.sListIterator*, align 4
  store %struct.sListIterator* %iter, %struct.sListIterator** %iter.addr, align 4
  %0 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %0, i32 0, i32 0
  %1 = load %struct.sListEntry*, %struct.sListEntry** %link, align 4
  %cmp = icmp eq %struct.sListEntry* %1, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @LLI_Value(%struct.sListIterator* %iter) #0 {
entry:
  %iter.addr = alloca %struct.sListIterator*, align 4
  store %struct.sListIterator* %iter, %struct.sListIterator** %iter.addr, align 4
  %0 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %0, i32 0, i32 0
  %1 = load %struct.sListEntry*, %struct.sListEntry** %link, align 4
  %tobool = icmp ne %struct.sListEntry* %1, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link1 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %2, i32 0, i32 0
  %3 = load %struct.sListEntry*, %struct.sListEntry** %link1, align 4
  %value = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %3, i32 0, i32 0
  %4 = load i8*, i8** %value, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %4, %cond.true ], [ null, %cond.false ]
  ret i8* %cond
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @LLI_Next(%struct.sListIterator* %iter) #0 {
entry:
  %iter.addr = alloca %struct.sListIterator*, align 4
  store %struct.sListIterator* %iter, %struct.sListIterator** %iter.addr, align 4
  %0 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %0, i32 0, i32 0
  %1 = load %struct.sListEntry*, %struct.sListEntry** %link, align 4
  %tobool = icmp ne %struct.sListEntry* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link1 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %2, i32 0, i32 0
  %3 = load %struct.sListEntry*, %struct.sListEntry** %link1, align 4
  %next = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %3, i32 0, i32 1
  %4 = load %struct.sListEntry*, %struct.sListEntry** %next, align 4
  %5 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link2 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %5, i32 0, i32 0
  store %struct.sListEntry* %4, %struct.sListEntry** %link2, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link3 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %6, i32 0, i32 0
  %7 = load %struct.sListEntry*, %struct.sListEntry** %link3, align 4
  %cmp = icmp ne %struct.sListEntry* %7, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @LLI_Prev(%struct.sListIterator* %iter) #0 {
entry:
  %iter.addr = alloca %struct.sListIterator*, align 4
  store %struct.sListIterator* %iter, %struct.sListIterator** %iter.addr, align 4
  %0 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %0, i32 0, i32 0
  %1 = load %struct.sListEntry*, %struct.sListEntry** %link, align 4
  %tobool = icmp ne %struct.sListEntry* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link1 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %2, i32 0, i32 0
  %3 = load %struct.sListEntry*, %struct.sListEntry** %link1, align 4
  %prev = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %3, i32 0, i32 2
  %4 = load %struct.sListEntry*, %struct.sListEntry** %prev, align 4
  %5 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link2 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %5, i32 0, i32 0
  store %struct.sListEntry* %4, %struct.sListEntry** %link2, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link3 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %6, i32 0, i32 0
  %7 = load %struct.sListEntry*, %struct.sListEntry** %link3, align 4
  %cmp = icmp ne %struct.sListEntry* %7, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %ix = alloca i32, align 4
  %ll = alloca %struct.sListEntry*, align 4
  %iter = alloca %struct.sListIterator*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.sListEntry* @NewList()
  store %struct.sListEntry* %call, %struct.sListEntry** %ll, align 4
  store i32 0, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %ix, align 4
  %cmp = icmp slt i32 %0, 6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load %struct.sListEntry*, %struct.sListEntry** %ll, align 4
  %2 = load i32, i32* %ix, align 4
  %arrayidx = getelementptr inbounds [6 x i8*], [6 x i8*]* @main.contents, i32 0, i32 %2
  %3 = load i8*, i8** %arrayidx, align 4
  %call1 = call i32 @LL_Append(%struct.sListEntry* %1, i8* %3)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %5 = load %struct.sListEntry*, %struct.sListEntry** %ll, align 4
  %call2 = call %struct.sListIterator* @LL_GetIterator(%struct.sListEntry* %5)
  store %struct.sListIterator* %call2, %struct.sListIterator** %iter, align 4
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i32 0, i32 0))
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end
  %6 = load %struct.sListIterator*, %struct.sListIterator** %iter, align 4
  %call4 = call i32 @LLI_Next(%struct.sListIterator* %6)
  %tobool = icmp ne i32 %call4, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %7 = load %struct.sListIterator*, %struct.sListIterator** %iter, align 4
  %call5 = call i8* @LLI_Value(%struct.sListIterator* %7)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7, i32 0, i32 0), i8* %call5)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %8 = load %struct.sListIterator*, %struct.sListIterator** %iter, align 4
  %9 = bitcast %struct.sListIterator* %8 to i8*
  call void @free(i8* %9)
  store %struct.sListIterator* null, %struct.sListIterator** %iter, align 4
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8, i32 0, i32 0))
  %10 = load %struct.sListEntry*, %struct.sListEntry** %ll, align 4
  %call8 = call %struct.sListIterator* @LL_GetIterator(%struct.sListEntry* %10)
  store %struct.sListIterator* %call8, %struct.sListIterator** %iter, align 4
  br label %while.cond9

while.cond9:                                      ; preds = %while.body12, %while.end
  %11 = load %struct.sListIterator*, %struct.sListIterator** %iter, align 4
  %call10 = call i32 @LLI_Prev(%struct.sListIterator* %11)
  %tobool11 = icmp ne i32 %call10, 0
  br i1 %tobool11, label %while.body12, label %while.end15

while.body12:                                     ; preds = %while.cond9
  %12 = load %struct.sListIterator*, %struct.sListIterator** %iter, align 4
  %call13 = call i8* @LLI_Value(%struct.sListIterator* %12)
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7, i32 0, i32 0), i8* %call13)
  br label %while.cond9

while.end15:                                      ; preds = %while.cond9
  %13 = load %struct.sListIterator*, %struct.sListIterator** %iter, align 4
  %14 = bitcast %struct.sListIterator* %13 to i8*
  call void @free(i8* %14)
  store %struct.sListIterator* null, %struct.sListIterator** %iter, align 4
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

declare void @free(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %tobool = icmp ne %struct.sListEntry* %1, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool4 = icmp ne %struct.sListEntry* %9, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp = icmp ne %struct.sListEntry* %17, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv = zext i1 %cmp to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i32 = zext %1
infer %2
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i32 = zext %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for LL_Append()

; entering Souper's runOnFunction() for LI_Insert()

; ModuleID = './Doubly-linked_list-Traversal.c.bc'
source_filename = "./Doubly-linked_list-Traversal.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.sListEntry = type { i8*, %struct.sListEntry*, %struct.sListEntry* }
%struct.sListIterator = type { %struct.sListEntry*, %struct.sListEntry* }

@main.contents = internal global [6 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i32 0, i32 0)], align 16
@.str = private unnamed_addr constant [5 x i8] c"Read\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"Orage\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"Yeller\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"Glean\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"Blew\00", align 1
@.str.5 = private unnamed_addr constant [7 x i8] c"Burple\00", align 1
@.str.6 = private unnamed_addr constant [9 x i8] c"forward\0A\00", align 1
@.str.7 = private unnamed_addr constant [10 x i8] c"value=%s\0A\00", align 1
@.str.8 = private unnamed_addr constant [10 x i8] c"\0Areverse\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.sListEntry* @NewList() #0 {
entry:
  %le = alloca %struct.sListEntry*, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.sListEntry*
  store %struct.sListEntry* %0, %struct.sListEntry** %le, align 4
  %1 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %tobool = icmp ne %struct.sListEntry* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %value = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %2, i32 0, i32 0
  store i8* null, i8** %value, align 4
  %3 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %3, i32 0, i32 2
  store %struct.sListEntry* null, %struct.sListEntry** %prev, align 4
  %4 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %next = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %4, i32 0, i32 1
  store %struct.sListEntry* null, %struct.sListEntry** %next, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  ret %struct.sListEntry* %5
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @LL_Append(%struct.sListEntry* %ll, i8* %newVal) #0 {
entry:
  %ll.addr = alloca %struct.sListEntry*, align 4
  %newVal.addr = alloca i8*, align 4
  %le = alloca %struct.sListEntry*, align 4
  store %struct.sListEntry* %ll, %struct.sListEntry** %ll.addr, align 4
  store i8* %newVal, i8** %newVal.addr, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.sListEntry*
  store %struct.sListEntry* %0, %struct.sListEntry** %le, align 4
  %1 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %tobool = icmp ne %struct.sListEntry* %1, null
  br i1 %tobool, label %if.then, label %if.end10

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %newVal.addr, align 4
  %call1 = call i8* @strdup(i8* %2) #3
  %3 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %value = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %3, i32 0, i32 0
  store i8* %call1, i8** %value, align 4
  %4 = load %struct.sListEntry*, %struct.sListEntry** %ll.addr, align 4
  %prev = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %4, i32 0, i32 2
  %5 = load %struct.sListEntry*, %struct.sListEntry** %prev, align 4
  %6 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev2 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %6, i32 0, i32 2
  store %struct.sListEntry* %5, %struct.sListEntry** %prev2, align 4
  %7 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %next = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %7, i32 0, i32 1
  store %struct.sListEntry* null, %struct.sListEntry** %next, align 4
  %8 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev3 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %8, i32 0, i32 2
  %9 = load %struct.sListEntry*, %struct.sListEntry** %prev3, align 4
  %tobool4 = icmp ne %struct.sListEntry* %9, null
  br i1 %tobool4, label %if.then5, label %if.else

if.then5:                                         ; preds = %if.then
  %10 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %11 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev6 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %11, i32 0, i32 2
  %12 = load %struct.sListEntry*, %struct.sListEntry** %prev6, align 4
  %next7 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %12, i32 0, i32 1
  store %struct.sListEntry* %10, %struct.sListEntry** %next7, align 4
  br label %if.end

if.else:                                          ; preds = %if.then
  %13 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %14 = load %struct.sListEntry*, %struct.sListEntry** %ll.addr, align 4
  %next8 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %14, i32 0, i32 1
  store %struct.sListEntry* %13, %struct.sListEntry** %next8, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then5
  %15 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %16 = load %struct.sListEntry*, %struct.sListEntry** %ll.addr, align 4
  %prev9 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %16, i32 0, i32 2
  store %struct.sListEntry* %15, %struct.sListEntry** %prev9, align 4
  br label %if.end10

if.end10:                                         ; preds = %if.end, %entry
  %17 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %cmp = icmp ne %struct.sListEntry* %17, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: nounwind
declare i8* @strdup(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @LI_Insert(%struct.sListIterator* %iter, i8* %newVal) #0 {
entry:
  %iter.addr = alloca %struct.sListIterator*, align 4
  %newVal.addr = alloca i8*, align 4
  %crnt = alloca %struct.sListEntry*, align 4
  %le = alloca %struct.sListEntry*, align 4
  store %struct.sListIterator* %iter, %struct.sListIterator** %iter.addr, align 4
  store i8* %newVal, i8** %newVal.addr, align 4
  %0 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %0, i32 0, i32 0
  %1 = load %struct.sListEntry*, %struct.sListEntry** %link, align 4
  store %struct.sListEntry* %1, %struct.sListEntry** %crnt, align 4
  %call = call noalias i8* @malloc(i32 12)
  %2 = bitcast i8* %call to %struct.sListEntry*
  store %struct.sListEntry* %2, %struct.sListEntry** %le, align 4
  %3 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %tobool = icmp ne %struct.sListEntry* %3, null
  br i1 %tobool, label %if.then, label %if.end35

if.then:                                          ; preds = %entry
  %4 = load i8*, i8** %newVal.addr, align 4
  %call1 = call i8* @strdup(i8* %4) #3
  %5 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %value = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %5, i32 0, i32 0
  store i8* %call1, i8** %value, align 4
  %6 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %7 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %head = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %7, i32 0, i32 1
  %8 = load %struct.sListEntry*, %struct.sListEntry** %head, align 4
  %cmp = icmp eq %struct.sListEntry* %6, %8
  br i1 %cmp, label %if.then2, label %if.else11

if.then2:                                         ; preds = %if.then
  %9 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %9, i32 0, i32 2
  store %struct.sListEntry* null, %struct.sListEntry** %prev, align 4
  %10 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %next = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %10, i32 0, i32 1
  %11 = load %struct.sListEntry*, %struct.sListEntry** %next, align 4
  %12 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %next3 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %12, i32 0, i32 1
  store %struct.sListEntry* %11, %struct.sListEntry** %next3, align 4
  %13 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %14 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %next4 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %14, i32 0, i32 1
  store %struct.sListEntry* %13, %struct.sListEntry** %next4, align 4
  %15 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %next5 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %15, i32 0, i32 1
  %16 = load %struct.sListEntry*, %struct.sListEntry** %next5, align 4
  %tobool6 = icmp ne %struct.sListEntry* %16, null
  br i1 %tobool6, label %if.then7, label %if.else

if.then7:                                         ; preds = %if.then2
  %17 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %18 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %next8 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %18, i32 0, i32 1
  %19 = load %struct.sListEntry*, %struct.sListEntry** %next8, align 4
  %prev9 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %19, i32 0, i32 2
  store %struct.sListEntry* %17, %struct.sListEntry** %prev9, align 4
  br label %if.end

if.else:                                          ; preds = %if.then2
  %20 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %21 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %prev10 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %21, i32 0, i32 2
  store %struct.sListEntry* %20, %struct.sListEntry** %prev10, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then7
  br label %if.end34

if.else11:                                        ; preds = %if.then
  %22 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %cmp12 = icmp eq %struct.sListEntry* %22, null
  br i1 %cmp12, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else11
  %23 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %head13 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %23, i32 0, i32 1
  %24 = load %struct.sListEntry*, %struct.sListEntry** %head13, align 4
  %prev14 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %24, i32 0, i32 2
  %25 = load %struct.sListEntry*, %struct.sListEntry** %prev14, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.else11
  %26 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %prev15 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %26, i32 0, i32 2
  %27 = load %struct.sListEntry*, %struct.sListEntry** %prev15, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.sListEntry* [ %25, %cond.true ], [ %27, %cond.false ]
  %28 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev16 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %28, i32 0, i32 2
  store %struct.sListEntry* %cond, %struct.sListEntry** %prev16, align 4
  %29 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %30 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %next17 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %30, i32 0, i32 1
  store %struct.sListEntry* %29, %struct.sListEntry** %next17, align 4
  %31 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev18 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %31, i32 0, i32 2
  %32 = load %struct.sListEntry*, %struct.sListEntry** %prev18, align 4
  %tobool19 = icmp ne %struct.sListEntry* %32, null
  br i1 %tobool19, label %if.then20, label %if.else23

if.then20:                                        ; preds = %cond.end
  %33 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %34 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev21 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %34, i32 0, i32 2
  %35 = load %struct.sListEntry*, %struct.sListEntry** %prev21, align 4
  %next22 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %35, i32 0, i32 1
  store %struct.sListEntry* %33, %struct.sListEntry** %next22, align 4
  br label %if.end26

if.else23:                                        ; preds = %cond.end
  %36 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %37 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %head24 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %37, i32 0, i32 1
  %38 = load %struct.sListEntry*, %struct.sListEntry** %head24, align 4
  %next25 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %38, i32 0, i32 1
  store %struct.sListEntry* %36, %struct.sListEntry** %next25, align 4
  br label %if.end26

if.end26:                                         ; preds = %if.else23, %if.then20
  %39 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %tobool27 = icmp ne %struct.sListEntry* %39, null
  br i1 %tobool27, label %if.then28, label %if.else30

if.then28:                                        ; preds = %if.end26
  %40 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %41 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %prev29 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %41, i32 0, i32 2
  store %struct.sListEntry* %40, %struct.sListEntry** %prev29, align 4
  br label %if.end33

if.else30:                                        ; preds = %if.end26
  %42 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %43 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %head31 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %43, i32 0, i32 1
  %44 = load %struct.sListEntry*, %struct.sListEntry** %head31, align 4
  %prev32 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %44, i32 0, i32 2
  store %struct.sListEntry* %42, %struct.sListEntry** %prev32, align 4
  br label %if.end33

if.end33:                                         ; preds = %if.else30, %if.then28
  br label %if.end34

if.end34:                                         ; preds = %if.end33, %if.end
  br label %if.end35

if.end35:                                         ; preds = %if.end34, %entry
  %45 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %cmp36 = icmp ne %struct.sListEntry* %45, null
  %conv = zext i1 %cmp36 to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.sListIterator* @LL_GetIterator(%struct.sListEntry* %ll) #0 {
entry:
  %ll.addr = alloca %struct.sListEntry*, align 4
  %liter = alloca %struct.sListIterator*, align 4
  store %struct.sListEntry* %ll, %struct.sListEntry** %ll.addr, align 4
  %call = call noalias i8* @malloc(i32 8)
  %0 = bitcast i8* %call to %struct.sListIterator*
  store %struct.sListIterator* %0, %struct.sListIterator** %liter, align 4
  %1 = load %struct.sListEntry*, %struct.sListEntry** %ll.addr, align 4
  %2 = load %struct.sListIterator*, %struct.sListIterator** %liter, align 4
  %head = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %2, i32 0, i32 1
  store %struct.sListEntry* %1, %struct.sListEntry** %head, align 4
  %3 = load %struct.sListEntry*, %struct.sListEntry** %ll.addr, align 4
  %4 = load %struct.sListIterator*, %struct.sListIterator** %liter, align 4
  %link = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %4, i32 0, i32 0
  store %struct.sListEntry* %3, %struct.sListEntry** %link, align 4
  %5 = load %struct.sListIterator*, %struct.sListIterator** %liter, align 4
  ret %struct.sListIterator* %5
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @LLI_AtEnd(%struct.sListIterator* %iter) #0 {
entry:
  %iter.addr = alloca %struct.sListIterator*, align 4
  store %struct.sListIterator* %iter, %struct.sListIterator** %iter.addr, align 4
  %0 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %0, i32 0, i32 0
  %1 = load %struct.sListEntry*, %struct.sListEntry** %link, align 4
  %cmp = icmp eq %struct.sListEntry* %1, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @LLI_Value(%struct.sListIterator* %iter) #0 {
entry:
  %iter.addr = alloca %struct.sListIterator*, align 4
  store %struct.sListIterator* %iter, %struct.sListIterator** %iter.addr, align 4
  %0 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %0, i32 0, i32 0
  %1 = load %struct.sListEntry*, %struct.sListEntry** %link, align 4
  %tobool = icmp ne %struct.sListEntry* %1, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link1 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %2, i32 0, i32 0
  %3 = load %struct.sListEntry*, %struct.sListEntry** %link1, align 4
  %value = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %3, i32 0, i32 0
  %4 = load i8*, i8** %value, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %4, %cond.true ], [ null, %cond.false ]
  ret i8* %cond
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @LLI_Next(%struct.sListIterator* %iter) #0 {
entry:
  %iter.addr = alloca %struct.sListIterator*, align 4
  store %struct.sListIterator* %iter, %struct.sListIterator** %iter.addr, align 4
  %0 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %0, i32 0, i32 0
  %1 = load %struct.sListEntry*, %struct.sListEntry** %link, align 4
  %tobool = icmp ne %struct.sListEntry* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link1 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %2, i32 0, i32 0
  %3 = load %struct.sListEntry*, %struct.sListEntry** %link1, align 4
  %next = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %3, i32 0, i32 1
  %4 = load %struct.sListEntry*, %struct.sListEntry** %next, align 4
  %5 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link2 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %5, i32 0, i32 0
  store %struct.sListEntry* %4, %struct.sListEntry** %link2, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link3 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %6, i32 0, i32 0
  %7 = load %struct.sListEntry*, %struct.sListEntry** %link3, align 4
  %cmp = icmp ne %struct.sListEntry* %7, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @LLI_Prev(%struct.sListIterator* %iter) #0 {
entry:
  %iter.addr = alloca %struct.sListIterator*, align 4
  store %struct.sListIterator* %iter, %struct.sListIterator** %iter.addr, align 4
  %0 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %0, i32 0, i32 0
  %1 = load %struct.sListEntry*, %struct.sListEntry** %link, align 4
  %tobool = icmp ne %struct.sListEntry* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link1 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %2, i32 0, i32 0
  %3 = load %struct.sListEntry*, %struct.sListEntry** %link1, align 4
  %prev = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %3, i32 0, i32 2
  %4 = load %struct.sListEntry*, %struct.sListEntry** %prev, align 4
  %5 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link2 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %5, i32 0, i32 0
  store %struct.sListEntry* %4, %struct.sListEntry** %link2, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link3 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %6, i32 0, i32 0
  %7 = load %struct.sListEntry*, %struct.sListEntry** %link3, align 4
  %cmp = icmp ne %struct.sListEntry* %7, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %ix = alloca i32, align 4
  %ll = alloca %struct.sListEntry*, align 4
  %iter = alloca %struct.sListIterator*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.sListEntry* @NewList()
  store %struct.sListEntry* %call, %struct.sListEntry** %ll, align 4
  store i32 0, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %ix, align 4
  %cmp = icmp slt i32 %0, 6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load %struct.sListEntry*, %struct.sListEntry** %ll, align 4
  %2 = load i32, i32* %ix, align 4
  %arrayidx = getelementptr inbounds [6 x i8*], [6 x i8*]* @main.contents, i32 0, i32 %2
  %3 = load i8*, i8** %arrayidx, align 4
  %call1 = call i32 @LL_Append(%struct.sListEntry* %1, i8* %3)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %5 = load %struct.sListEntry*, %struct.sListEntry** %ll, align 4
  %call2 = call %struct.sListIterator* @LL_GetIterator(%struct.sListEntry* %5)
  store %struct.sListIterator* %call2, %struct.sListIterator** %iter, align 4
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i32 0, i32 0))
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end
  %6 = load %struct.sListIterator*, %struct.sListIterator** %iter, align 4
  %call4 = call i32 @LLI_Next(%struct.sListIterator* %6)
  %tobool = icmp ne i32 %call4, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %7 = load %struct.sListIterator*, %struct.sListIterator** %iter, align 4
  %call5 = call i8* @LLI_Value(%struct.sListIterator* %7)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7, i32 0, i32 0), i8* %call5)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %8 = load %struct.sListIterator*, %struct.sListIterator** %iter, align 4
  %9 = bitcast %struct.sListIterator* %8 to i8*
  call void @free(i8* %9)
  store %struct.sListIterator* null, %struct.sListIterator** %iter, align 4
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8, i32 0, i32 0))
  %10 = load %struct.sListEntry*, %struct.sListEntry** %ll, align 4
  %call8 = call %struct.sListIterator* @LL_GetIterator(%struct.sListEntry* %10)
  store %struct.sListIterator* %call8, %struct.sListIterator** %iter, align 4
  br label %while.cond9

while.cond9:                                      ; preds = %while.body12, %while.end
  %11 = load %struct.sListIterator*, %struct.sListIterator** %iter, align 4
  %call10 = call i32 @LLI_Prev(%struct.sListIterator* %11)
  %tobool11 = icmp ne i32 %call10, 0
  br i1 %tobool11, label %while.body12, label %while.end15

while.body12:                                     ; preds = %while.cond9
  %12 = load %struct.sListIterator*, %struct.sListIterator** %iter, align 4
  %call13 = call i8* @LLI_Value(%struct.sListIterator* %12)
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7, i32 0, i32 0), i8* %call13)
  br label %while.cond9

while.end15:                                      ; preds = %while.cond9
  %13 = load %struct.sListIterator*, %struct.sListIterator** %iter, align 4
  %14 = bitcast %struct.sListIterator* %13 to i8*
  call void @free(i8* %14)
  store %struct.sListIterator* null, %struct.sListIterator** %iter, align 4
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

declare void @free(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %tobool = icmp ne %struct.sListEntry* %3, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp = icmp eq %struct.sListEntry* %6, %8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %tobool6 = icmp ne %struct.sListEntry* %16, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp12 = icmp eq %struct.sListEntry* %22, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool19 = icmp ne %struct.sListEntry* %32, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool27 = icmp ne %struct.sListEntry* %39, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp36 = icmp ne %struct.sListEntry* %45, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv = zext i1 %cmp36 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i32 = zext %1
infer %2
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for LI_Insert()

; entering Souper's runOnFunction() for LL_GetIterator()

; ModuleID = './Doubly-linked_list-Traversal.c.bc'
source_filename = "./Doubly-linked_list-Traversal.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.sListEntry = type { i8*, %struct.sListEntry*, %struct.sListEntry* }
%struct.sListIterator = type { %struct.sListEntry*, %struct.sListEntry* }

@main.contents = internal global [6 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i32 0, i32 0)], align 16
@.str = private unnamed_addr constant [5 x i8] c"Read\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"Orage\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"Yeller\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"Glean\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"Blew\00", align 1
@.str.5 = private unnamed_addr constant [7 x i8] c"Burple\00", align 1
@.str.6 = private unnamed_addr constant [9 x i8] c"forward\0A\00", align 1
@.str.7 = private unnamed_addr constant [10 x i8] c"value=%s\0A\00", align 1
@.str.8 = private unnamed_addr constant [10 x i8] c"\0Areverse\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.sListEntry* @NewList() #0 {
entry:
  %le = alloca %struct.sListEntry*, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.sListEntry*
  store %struct.sListEntry* %0, %struct.sListEntry** %le, align 4
  %1 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %tobool = icmp ne %struct.sListEntry* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %value = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %2, i32 0, i32 0
  store i8* null, i8** %value, align 4
  %3 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %3, i32 0, i32 2
  store %struct.sListEntry* null, %struct.sListEntry** %prev, align 4
  %4 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %next = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %4, i32 0, i32 1
  store %struct.sListEntry* null, %struct.sListEntry** %next, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  ret %struct.sListEntry* %5
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @LL_Append(%struct.sListEntry* %ll, i8* %newVal) #0 {
entry:
  %ll.addr = alloca %struct.sListEntry*, align 4
  %newVal.addr = alloca i8*, align 4
  %le = alloca %struct.sListEntry*, align 4
  store %struct.sListEntry* %ll, %struct.sListEntry** %ll.addr, align 4
  store i8* %newVal, i8** %newVal.addr, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.sListEntry*
  store %struct.sListEntry* %0, %struct.sListEntry** %le, align 4
  %1 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %tobool = icmp ne %struct.sListEntry* %1, null
  br i1 %tobool, label %if.then, label %if.end10

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %newVal.addr, align 4
  %call1 = call i8* @strdup(i8* %2) #3
  %3 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %value = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %3, i32 0, i32 0
  store i8* %call1, i8** %value, align 4
  %4 = load %struct.sListEntry*, %struct.sListEntry** %ll.addr, align 4
  %prev = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %4, i32 0, i32 2
  %5 = load %struct.sListEntry*, %struct.sListEntry** %prev, align 4
  %6 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev2 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %6, i32 0, i32 2
  store %struct.sListEntry* %5, %struct.sListEntry** %prev2, align 4
  %7 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %next = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %7, i32 0, i32 1
  store %struct.sListEntry* null, %struct.sListEntry** %next, align 4
  %8 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev3 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %8, i32 0, i32 2
  %9 = load %struct.sListEntry*, %struct.sListEntry** %prev3, align 4
  %tobool4 = icmp ne %struct.sListEntry* %9, null
  br i1 %tobool4, label %if.then5, label %if.else

if.then5:                                         ; preds = %if.then
  %10 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %11 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev6 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %11, i32 0, i32 2
  %12 = load %struct.sListEntry*, %struct.sListEntry** %prev6, align 4
  %next7 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %12, i32 0, i32 1
  store %struct.sListEntry* %10, %struct.sListEntry** %next7, align 4
  br label %if.end

if.else:                                          ; preds = %if.then
  %13 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %14 = load %struct.sListEntry*, %struct.sListEntry** %ll.addr, align 4
  %next8 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %14, i32 0, i32 1
  store %struct.sListEntry* %13, %struct.sListEntry** %next8, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then5
  %15 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %16 = load %struct.sListEntry*, %struct.sListEntry** %ll.addr, align 4
  %prev9 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %16, i32 0, i32 2
  store %struct.sListEntry* %15, %struct.sListEntry** %prev9, align 4
  br label %if.end10

if.end10:                                         ; preds = %if.end, %entry
  %17 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %cmp = icmp ne %struct.sListEntry* %17, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: nounwind
declare i8* @strdup(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @LI_Insert(%struct.sListIterator* %iter, i8* %newVal) #0 {
entry:
  %iter.addr = alloca %struct.sListIterator*, align 4
  %newVal.addr = alloca i8*, align 4
  %crnt = alloca %struct.sListEntry*, align 4
  %le = alloca %struct.sListEntry*, align 4
  store %struct.sListIterator* %iter, %struct.sListIterator** %iter.addr, align 4
  store i8* %newVal, i8** %newVal.addr, align 4
  %0 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %0, i32 0, i32 0
  %1 = load %struct.sListEntry*, %struct.sListEntry** %link, align 4
  store %struct.sListEntry* %1, %struct.sListEntry** %crnt, align 4
  %call = call noalias i8* @malloc(i32 12)
  %2 = bitcast i8* %call to %struct.sListEntry*
  store %struct.sListEntry* %2, %struct.sListEntry** %le, align 4
  %3 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %tobool = icmp ne %struct.sListEntry* %3, null
  br i1 %tobool, label %if.then, label %if.end35

if.then:                                          ; preds = %entry
  %4 = load i8*, i8** %newVal.addr, align 4
  %call1 = call i8* @strdup(i8* %4) #3
  %5 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %value = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %5, i32 0, i32 0
  store i8* %call1, i8** %value, align 4
  %6 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %7 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %head = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %7, i32 0, i32 1
  %8 = load %struct.sListEntry*, %struct.sListEntry** %head, align 4
  %cmp = icmp eq %struct.sListEntry* %6, %8
  br i1 %cmp, label %if.then2, label %if.else11

if.then2:                                         ; preds = %if.then
  %9 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %9, i32 0, i32 2
  store %struct.sListEntry* null, %struct.sListEntry** %prev, align 4
  %10 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %next = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %10, i32 0, i32 1
  %11 = load %struct.sListEntry*, %struct.sListEntry** %next, align 4
  %12 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %next3 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %12, i32 0, i32 1
  store %struct.sListEntry* %11, %struct.sListEntry** %next3, align 4
  %13 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %14 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %next4 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %14, i32 0, i32 1
  store %struct.sListEntry* %13, %struct.sListEntry** %next4, align 4
  %15 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %next5 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %15, i32 0, i32 1
  %16 = load %struct.sListEntry*, %struct.sListEntry** %next5, align 4
  %tobool6 = icmp ne %struct.sListEntry* %16, null
  br i1 %tobool6, label %if.then7, label %if.else

if.then7:                                         ; preds = %if.then2
  %17 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %18 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %next8 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %18, i32 0, i32 1
  %19 = load %struct.sListEntry*, %struct.sListEntry** %next8, align 4
  %prev9 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %19, i32 0, i32 2
  store %struct.sListEntry* %17, %struct.sListEntry** %prev9, align 4
  br label %if.end

if.else:                                          ; preds = %if.then2
  %20 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %21 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %prev10 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %21, i32 0, i32 2
  store %struct.sListEntry* %20, %struct.sListEntry** %prev10, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then7
  br label %if.end34

if.else11:                                        ; preds = %if.then
  %22 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %cmp12 = icmp eq %struct.sListEntry* %22, null
  br i1 %cmp12, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else11
  %23 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %head13 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %23, i32 0, i32 1
  %24 = load %struct.sListEntry*, %struct.sListEntry** %head13, align 4
  %prev14 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %24, i32 0, i32 2
  %25 = load %struct.sListEntry*, %struct.sListEntry** %prev14, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.else11
  %26 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %prev15 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %26, i32 0, i32 2
  %27 = load %struct.sListEntry*, %struct.sListEntry** %prev15, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.sListEntry* [ %25, %cond.true ], [ %27, %cond.false ]
  %28 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev16 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %28, i32 0, i32 2
  store %struct.sListEntry* %cond, %struct.sListEntry** %prev16, align 4
  %29 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %30 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %next17 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %30, i32 0, i32 1
  store %struct.sListEntry* %29, %struct.sListEntry** %next17, align 4
  %31 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev18 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %31, i32 0, i32 2
  %32 = load %struct.sListEntry*, %struct.sListEntry** %prev18, align 4
  %tobool19 = icmp ne %struct.sListEntry* %32, null
  br i1 %tobool19, label %if.then20, label %if.else23

if.then20:                                        ; preds = %cond.end
  %33 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %34 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev21 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %34, i32 0, i32 2
  %35 = load %struct.sListEntry*, %struct.sListEntry** %prev21, align 4
  %next22 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %35, i32 0, i32 1
  store %struct.sListEntry* %33, %struct.sListEntry** %next22, align 4
  br label %if.end26

if.else23:                                        ; preds = %cond.end
  %36 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %37 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %head24 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %37, i32 0, i32 1
  %38 = load %struct.sListEntry*, %struct.sListEntry** %head24, align 4
  %next25 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %38, i32 0, i32 1
  store %struct.sListEntry* %36, %struct.sListEntry** %next25, align 4
  br label %if.end26

if.end26:                                         ; preds = %if.else23, %if.then20
  %39 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %tobool27 = icmp ne %struct.sListEntry* %39, null
  br i1 %tobool27, label %if.then28, label %if.else30

if.then28:                                        ; preds = %if.end26
  %40 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %41 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %prev29 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %41, i32 0, i32 2
  store %struct.sListEntry* %40, %struct.sListEntry** %prev29, align 4
  br label %if.end33

if.else30:                                        ; preds = %if.end26
  %42 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %43 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %head31 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %43, i32 0, i32 1
  %44 = load %struct.sListEntry*, %struct.sListEntry** %head31, align 4
  %prev32 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %44, i32 0, i32 2
  store %struct.sListEntry* %42, %struct.sListEntry** %prev32, align 4
  br label %if.end33

if.end33:                                         ; preds = %if.else30, %if.then28
  br label %if.end34

if.end34:                                         ; preds = %if.end33, %if.end
  br label %if.end35

if.end35:                                         ; preds = %if.end34, %entry
  %45 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %cmp36 = icmp ne %struct.sListEntry* %45, null
  %conv = zext i1 %cmp36 to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.sListIterator* @LL_GetIterator(%struct.sListEntry* %ll) #0 {
entry:
  %ll.addr = alloca %struct.sListEntry*, align 4
  %liter = alloca %struct.sListIterator*, align 4
  store %struct.sListEntry* %ll, %struct.sListEntry** %ll.addr, align 4
  %call = call noalias i8* @malloc(i32 8)
  %0 = bitcast i8* %call to %struct.sListIterator*
  store %struct.sListIterator* %0, %struct.sListIterator** %liter, align 4
  %1 = load %struct.sListEntry*, %struct.sListEntry** %ll.addr, align 4
  %2 = load %struct.sListIterator*, %struct.sListIterator** %liter, align 4
  %head = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %2, i32 0, i32 1
  store %struct.sListEntry* %1, %struct.sListEntry** %head, align 4
  %3 = load %struct.sListEntry*, %struct.sListEntry** %ll.addr, align 4
  %4 = load %struct.sListIterator*, %struct.sListIterator** %liter, align 4
  %link = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %4, i32 0, i32 0
  store %struct.sListEntry* %3, %struct.sListEntry** %link, align 4
  %5 = load %struct.sListIterator*, %struct.sListIterator** %liter, align 4
  ret %struct.sListIterator* %5
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @LLI_AtEnd(%struct.sListIterator* %iter) #0 {
entry:
  %iter.addr = alloca %struct.sListIterator*, align 4
  store %struct.sListIterator* %iter, %struct.sListIterator** %iter.addr, align 4
  %0 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %0, i32 0, i32 0
  %1 = load %struct.sListEntry*, %struct.sListEntry** %link, align 4
  %cmp = icmp eq %struct.sListEntry* %1, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @LLI_Value(%struct.sListIterator* %iter) #0 {
entry:
  %iter.addr = alloca %struct.sListIterator*, align 4
  store %struct.sListIterator* %iter, %struct.sListIterator** %iter.addr, align 4
  %0 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %0, i32 0, i32 0
  %1 = load %struct.sListEntry*, %struct.sListEntry** %link, align 4
  %tobool = icmp ne %struct.sListEntry* %1, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link1 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %2, i32 0, i32 0
  %3 = load %struct.sListEntry*, %struct.sListEntry** %link1, align 4
  %value = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %3, i32 0, i32 0
  %4 = load i8*, i8** %value, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %4, %cond.true ], [ null, %cond.false ]
  ret i8* %cond
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @LLI_Next(%struct.sListIterator* %iter) #0 {
entry:
  %iter.addr = alloca %struct.sListIterator*, align 4
  store %struct.sListIterator* %iter, %struct.sListIterator** %iter.addr, align 4
  %0 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %0, i32 0, i32 0
  %1 = load %struct.sListEntry*, %struct.sListEntry** %link, align 4
  %tobool = icmp ne %struct.sListEntry* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link1 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %2, i32 0, i32 0
  %3 = load %struct.sListEntry*, %struct.sListEntry** %link1, align 4
  %next = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %3, i32 0, i32 1
  %4 = load %struct.sListEntry*, %struct.sListEntry** %next, align 4
  %5 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link2 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %5, i32 0, i32 0
  store %struct.sListEntry* %4, %struct.sListEntry** %link2, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link3 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %6, i32 0, i32 0
  %7 = load %struct.sListEntry*, %struct.sListEntry** %link3, align 4
  %cmp = icmp ne %struct.sListEntry* %7, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @LLI_Prev(%struct.sListIterator* %iter) #0 {
entry:
  %iter.addr = alloca %struct.sListIterator*, align 4
  store %struct.sListIterator* %iter, %struct.sListIterator** %iter.addr, align 4
  %0 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %0, i32 0, i32 0
  %1 = load %struct.sListEntry*, %struct.sListEntry** %link, align 4
  %tobool = icmp ne %struct.sListEntry* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link1 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %2, i32 0, i32 0
  %3 = load %struct.sListEntry*, %struct.sListEntry** %link1, align 4
  %prev = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %3, i32 0, i32 2
  %4 = load %struct.sListEntry*, %struct.sListEntry** %prev, align 4
  %5 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link2 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %5, i32 0, i32 0
  store %struct.sListEntry* %4, %struct.sListEntry** %link2, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link3 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %6, i32 0, i32 0
  %7 = load %struct.sListEntry*, %struct.sListEntry** %link3, align 4
  %cmp = icmp ne %struct.sListEntry* %7, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %ix = alloca i32, align 4
  %ll = alloca %struct.sListEntry*, align 4
  %iter = alloca %struct.sListIterator*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.sListEntry* @NewList()
  store %struct.sListEntry* %call, %struct.sListEntry** %ll, align 4
  store i32 0, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %ix, align 4
  %cmp = icmp slt i32 %0, 6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load %struct.sListEntry*, %struct.sListEntry** %ll, align 4
  %2 = load i32, i32* %ix, align 4
  %arrayidx = getelementptr inbounds [6 x i8*], [6 x i8*]* @main.contents, i32 0, i32 %2
  %3 = load i8*, i8** %arrayidx, align 4
  %call1 = call i32 @LL_Append(%struct.sListEntry* %1, i8* %3)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %5 = load %struct.sListEntry*, %struct.sListEntry** %ll, align 4
  %call2 = call %struct.sListIterator* @LL_GetIterator(%struct.sListEntry* %5)
  store %struct.sListIterator* %call2, %struct.sListIterator** %iter, align 4
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i32 0, i32 0))
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end
  %6 = load %struct.sListIterator*, %struct.sListIterator** %iter, align 4
  %call4 = call i32 @LLI_Next(%struct.sListIterator* %6)
  %tobool = icmp ne i32 %call4, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %7 = load %struct.sListIterator*, %struct.sListIterator** %iter, align 4
  %call5 = call i8* @LLI_Value(%struct.sListIterator* %7)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7, i32 0, i32 0), i8* %call5)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %8 = load %struct.sListIterator*, %struct.sListIterator** %iter, align 4
  %9 = bitcast %struct.sListIterator* %8 to i8*
  call void @free(i8* %9)
  store %struct.sListIterator* null, %struct.sListIterator** %iter, align 4
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8, i32 0, i32 0))
  %10 = load %struct.sListEntry*, %struct.sListEntry** %ll, align 4
  %call8 = call %struct.sListIterator* @LL_GetIterator(%struct.sListEntry* %10)
  store %struct.sListIterator* %call8, %struct.sListIterator** %iter, align 4
  br label %while.cond9

while.cond9:                                      ; preds = %while.body12, %while.end
  %11 = load %struct.sListIterator*, %struct.sListIterator** %iter, align 4
  %call10 = call i32 @LLI_Prev(%struct.sListIterator* %11)
  %tobool11 = icmp ne i32 %call10, 0
  br i1 %tobool11, label %while.body12, label %while.end15

while.body12:                                     ; preds = %while.cond9
  %12 = load %struct.sListIterator*, %struct.sListIterator** %iter, align 4
  %call13 = call i8* @LLI_Value(%struct.sListIterator* %12)
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7, i32 0, i32 0), i8* %call13)
  br label %while.cond9

while.end15:                                      ; preds = %while.cond9
  %13 = load %struct.sListIterator*, %struct.sListIterator** %iter, align 4
  %14 = bitcast %struct.sListIterator* %13 to i8*
  call void @free(i8* %14)
  store %struct.sListIterator* null, %struct.sListIterator** %iter, align 4
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

declare void @free(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for LL_GetIterator()

; entering Souper's runOnFunction() for LLI_AtEnd()

; ModuleID = './Doubly-linked_list-Traversal.c.bc'
source_filename = "./Doubly-linked_list-Traversal.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.sListEntry = type { i8*, %struct.sListEntry*, %struct.sListEntry* }
%struct.sListIterator = type { %struct.sListEntry*, %struct.sListEntry* }

@main.contents = internal global [6 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i32 0, i32 0)], align 16
@.str = private unnamed_addr constant [5 x i8] c"Read\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"Orage\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"Yeller\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"Glean\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"Blew\00", align 1
@.str.5 = private unnamed_addr constant [7 x i8] c"Burple\00", align 1
@.str.6 = private unnamed_addr constant [9 x i8] c"forward\0A\00", align 1
@.str.7 = private unnamed_addr constant [10 x i8] c"value=%s\0A\00", align 1
@.str.8 = private unnamed_addr constant [10 x i8] c"\0Areverse\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.sListEntry* @NewList() #0 {
entry:
  %le = alloca %struct.sListEntry*, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.sListEntry*
  store %struct.sListEntry* %0, %struct.sListEntry** %le, align 4
  %1 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %tobool = icmp ne %struct.sListEntry* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %value = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %2, i32 0, i32 0
  store i8* null, i8** %value, align 4
  %3 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %3, i32 0, i32 2
  store %struct.sListEntry* null, %struct.sListEntry** %prev, align 4
  %4 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %next = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %4, i32 0, i32 1
  store %struct.sListEntry* null, %struct.sListEntry** %next, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  ret %struct.sListEntry* %5
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @LL_Append(%struct.sListEntry* %ll, i8* %newVal) #0 {
entry:
  %ll.addr = alloca %struct.sListEntry*, align 4
  %newVal.addr = alloca i8*, align 4
  %le = alloca %struct.sListEntry*, align 4
  store %struct.sListEntry* %ll, %struct.sListEntry** %ll.addr, align 4
  store i8* %newVal, i8** %newVal.addr, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.sListEntry*
  store %struct.sListEntry* %0, %struct.sListEntry** %le, align 4
  %1 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %tobool = icmp ne %struct.sListEntry* %1, null
  br i1 %tobool, label %if.then, label %if.end10

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %newVal.addr, align 4
  %call1 = call i8* @strdup(i8* %2) #3
  %3 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %value = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %3, i32 0, i32 0
  store i8* %call1, i8** %value, align 4
  %4 = load %struct.sListEntry*, %struct.sListEntry** %ll.addr, align 4
  %prev = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %4, i32 0, i32 2
  %5 = load %struct.sListEntry*, %struct.sListEntry** %prev, align 4
  %6 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev2 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %6, i32 0, i32 2
  store %struct.sListEntry* %5, %struct.sListEntry** %prev2, align 4
  %7 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %next = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %7, i32 0, i32 1
  store %struct.sListEntry* null, %struct.sListEntry** %next, align 4
  %8 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev3 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %8, i32 0, i32 2
  %9 = load %struct.sListEntry*, %struct.sListEntry** %prev3, align 4
  %tobool4 = icmp ne %struct.sListEntry* %9, null
  br i1 %tobool4, label %if.then5, label %if.else

if.then5:                                         ; preds = %if.then
  %10 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %11 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev6 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %11, i32 0, i32 2
  %12 = load %struct.sListEntry*, %struct.sListEntry** %prev6, align 4
  %next7 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %12, i32 0, i32 1
  store %struct.sListEntry* %10, %struct.sListEntry** %next7, align 4
  br label %if.end

if.else:                                          ; preds = %if.then
  %13 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %14 = load %struct.sListEntry*, %struct.sListEntry** %ll.addr, align 4
  %next8 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %14, i32 0, i32 1
  store %struct.sListEntry* %13, %struct.sListEntry** %next8, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then5
  %15 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %16 = load %struct.sListEntry*, %struct.sListEntry** %ll.addr, align 4
  %prev9 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %16, i32 0, i32 2
  store %struct.sListEntry* %15, %struct.sListEntry** %prev9, align 4
  br label %if.end10

if.end10:                                         ; preds = %if.end, %entry
  %17 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %cmp = icmp ne %struct.sListEntry* %17, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: nounwind
declare i8* @strdup(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @LI_Insert(%struct.sListIterator* %iter, i8* %newVal) #0 {
entry:
  %iter.addr = alloca %struct.sListIterator*, align 4
  %newVal.addr = alloca i8*, align 4
  %crnt = alloca %struct.sListEntry*, align 4
  %le = alloca %struct.sListEntry*, align 4
  store %struct.sListIterator* %iter, %struct.sListIterator** %iter.addr, align 4
  store i8* %newVal, i8** %newVal.addr, align 4
  %0 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %0, i32 0, i32 0
  %1 = load %struct.sListEntry*, %struct.sListEntry** %link, align 4
  store %struct.sListEntry* %1, %struct.sListEntry** %crnt, align 4
  %call = call noalias i8* @malloc(i32 12)
  %2 = bitcast i8* %call to %struct.sListEntry*
  store %struct.sListEntry* %2, %struct.sListEntry** %le, align 4
  %3 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %tobool = icmp ne %struct.sListEntry* %3, null
  br i1 %tobool, label %if.then, label %if.end35

if.then:                                          ; preds = %entry
  %4 = load i8*, i8** %newVal.addr, align 4
  %call1 = call i8* @strdup(i8* %4) #3
  %5 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %value = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %5, i32 0, i32 0
  store i8* %call1, i8** %value, align 4
  %6 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %7 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %head = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %7, i32 0, i32 1
  %8 = load %struct.sListEntry*, %struct.sListEntry** %head, align 4
  %cmp = icmp eq %struct.sListEntry* %6, %8
  br i1 %cmp, label %if.then2, label %if.else11

if.then2:                                         ; preds = %if.then
  %9 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %9, i32 0, i32 2
  store %struct.sListEntry* null, %struct.sListEntry** %prev, align 4
  %10 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %next = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %10, i32 0, i32 1
  %11 = load %struct.sListEntry*, %struct.sListEntry** %next, align 4
  %12 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %next3 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %12, i32 0, i32 1
  store %struct.sListEntry* %11, %struct.sListEntry** %next3, align 4
  %13 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %14 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %next4 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %14, i32 0, i32 1
  store %struct.sListEntry* %13, %struct.sListEntry** %next4, align 4
  %15 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %next5 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %15, i32 0, i32 1
  %16 = load %struct.sListEntry*, %struct.sListEntry** %next5, align 4
  %tobool6 = icmp ne %struct.sListEntry* %16, null
  br i1 %tobool6, label %if.then7, label %if.else

if.then7:                                         ; preds = %if.then2
  %17 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %18 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %next8 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %18, i32 0, i32 1
  %19 = load %struct.sListEntry*, %struct.sListEntry** %next8, align 4
  %prev9 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %19, i32 0, i32 2
  store %struct.sListEntry* %17, %struct.sListEntry** %prev9, align 4
  br label %if.end

if.else:                                          ; preds = %if.then2
  %20 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %21 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %prev10 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %21, i32 0, i32 2
  store %struct.sListEntry* %20, %struct.sListEntry** %prev10, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then7
  br label %if.end34

if.else11:                                        ; preds = %if.then
  %22 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %cmp12 = icmp eq %struct.sListEntry* %22, null
  br i1 %cmp12, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else11
  %23 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %head13 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %23, i32 0, i32 1
  %24 = load %struct.sListEntry*, %struct.sListEntry** %head13, align 4
  %prev14 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %24, i32 0, i32 2
  %25 = load %struct.sListEntry*, %struct.sListEntry** %prev14, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.else11
  %26 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %prev15 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %26, i32 0, i32 2
  %27 = load %struct.sListEntry*, %struct.sListEntry** %prev15, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.sListEntry* [ %25, %cond.true ], [ %27, %cond.false ]
  %28 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev16 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %28, i32 0, i32 2
  store %struct.sListEntry* %cond, %struct.sListEntry** %prev16, align 4
  %29 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %30 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %next17 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %30, i32 0, i32 1
  store %struct.sListEntry* %29, %struct.sListEntry** %next17, align 4
  %31 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev18 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %31, i32 0, i32 2
  %32 = load %struct.sListEntry*, %struct.sListEntry** %prev18, align 4
  %tobool19 = icmp ne %struct.sListEntry* %32, null
  br i1 %tobool19, label %if.then20, label %if.else23

if.then20:                                        ; preds = %cond.end
  %33 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %34 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev21 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %34, i32 0, i32 2
  %35 = load %struct.sListEntry*, %struct.sListEntry** %prev21, align 4
  %next22 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %35, i32 0, i32 1
  store %struct.sListEntry* %33, %struct.sListEntry** %next22, align 4
  br label %if.end26

if.else23:                                        ; preds = %cond.end
  %36 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %37 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %head24 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %37, i32 0, i32 1
  %38 = load %struct.sListEntry*, %struct.sListEntry** %head24, align 4
  %next25 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %38, i32 0, i32 1
  store %struct.sListEntry* %36, %struct.sListEntry** %next25, align 4
  br label %if.end26

if.end26:                                         ; preds = %if.else23, %if.then20
  %39 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %tobool27 = icmp ne %struct.sListEntry* %39, null
  br i1 %tobool27, label %if.then28, label %if.else30

if.then28:                                        ; preds = %if.end26
  %40 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %41 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %prev29 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %41, i32 0, i32 2
  store %struct.sListEntry* %40, %struct.sListEntry** %prev29, align 4
  br label %if.end33

if.else30:                                        ; preds = %if.end26
  %42 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %43 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %head31 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %43, i32 0, i32 1
  %44 = load %struct.sListEntry*, %struct.sListEntry** %head31, align 4
  %prev32 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %44, i32 0, i32 2
  store %struct.sListEntry* %42, %struct.sListEntry** %prev32, align 4
  br label %if.end33

if.end33:                                         ; preds = %if.else30, %if.then28
  br label %if.end34

if.end34:                                         ; preds = %if.end33, %if.end
  br label %if.end35

if.end35:                                         ; preds = %if.end34, %entry
  %45 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %cmp36 = icmp ne %struct.sListEntry* %45, null
  %conv = zext i1 %cmp36 to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.sListIterator* @LL_GetIterator(%struct.sListEntry* %ll) #0 {
entry:
  %ll.addr = alloca %struct.sListEntry*, align 4
  %liter = alloca %struct.sListIterator*, align 4
  store %struct.sListEntry* %ll, %struct.sListEntry** %ll.addr, align 4
  %call = call noalias i8* @malloc(i32 8)
  %0 = bitcast i8* %call to %struct.sListIterator*
  store %struct.sListIterator* %0, %struct.sListIterator** %liter, align 4
  %1 = load %struct.sListEntry*, %struct.sListEntry** %ll.addr, align 4
  %2 = load %struct.sListIterator*, %struct.sListIterator** %liter, align 4
  %head = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %2, i32 0, i32 1
  store %struct.sListEntry* %1, %struct.sListEntry** %head, align 4
  %3 = load %struct.sListEntry*, %struct.sListEntry** %ll.addr, align 4
  %4 = load %struct.sListIterator*, %struct.sListIterator** %liter, align 4
  %link = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %4, i32 0, i32 0
  store %struct.sListEntry* %3, %struct.sListEntry** %link, align 4
  %5 = load %struct.sListIterator*, %struct.sListIterator** %liter, align 4
  ret %struct.sListIterator* %5
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @LLI_AtEnd(%struct.sListIterator* %iter) #0 {
entry:
  %iter.addr = alloca %struct.sListIterator*, align 4
  store %struct.sListIterator* %iter, %struct.sListIterator** %iter.addr, align 4
  %0 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %0, i32 0, i32 0
  %1 = load %struct.sListEntry*, %struct.sListEntry** %link, align 4
  %cmp = icmp eq %struct.sListEntry* %1, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @LLI_Value(%struct.sListIterator* %iter) #0 {
entry:
  %iter.addr = alloca %struct.sListIterator*, align 4
  store %struct.sListIterator* %iter, %struct.sListIterator** %iter.addr, align 4
  %0 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %0, i32 0, i32 0
  %1 = load %struct.sListEntry*, %struct.sListEntry** %link, align 4
  %tobool = icmp ne %struct.sListEntry* %1, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link1 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %2, i32 0, i32 0
  %3 = load %struct.sListEntry*, %struct.sListEntry** %link1, align 4
  %value = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %3, i32 0, i32 0
  %4 = load i8*, i8** %value, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %4, %cond.true ], [ null, %cond.false ]
  ret i8* %cond
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @LLI_Next(%struct.sListIterator* %iter) #0 {
entry:
  %iter.addr = alloca %struct.sListIterator*, align 4
  store %struct.sListIterator* %iter, %struct.sListIterator** %iter.addr, align 4
  %0 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %0, i32 0, i32 0
  %1 = load %struct.sListEntry*, %struct.sListEntry** %link, align 4
  %tobool = icmp ne %struct.sListEntry* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link1 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %2, i32 0, i32 0
  %3 = load %struct.sListEntry*, %struct.sListEntry** %link1, align 4
  %next = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %3, i32 0, i32 1
  %4 = load %struct.sListEntry*, %struct.sListEntry** %next, align 4
  %5 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link2 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %5, i32 0, i32 0
  store %struct.sListEntry* %4, %struct.sListEntry** %link2, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link3 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %6, i32 0, i32 0
  %7 = load %struct.sListEntry*, %struct.sListEntry** %link3, align 4
  %cmp = icmp ne %struct.sListEntry* %7, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @LLI_Prev(%struct.sListIterator* %iter) #0 {
entry:
  %iter.addr = alloca %struct.sListIterator*, align 4
  store %struct.sListIterator* %iter, %struct.sListIterator** %iter.addr, align 4
  %0 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %0, i32 0, i32 0
  %1 = load %struct.sListEntry*, %struct.sListEntry** %link, align 4
  %tobool = icmp ne %struct.sListEntry* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link1 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %2, i32 0, i32 0
  %3 = load %struct.sListEntry*, %struct.sListEntry** %link1, align 4
  %prev = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %3, i32 0, i32 2
  %4 = load %struct.sListEntry*, %struct.sListEntry** %prev, align 4
  %5 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link2 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %5, i32 0, i32 0
  store %struct.sListEntry* %4, %struct.sListEntry** %link2, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link3 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %6, i32 0, i32 0
  %7 = load %struct.sListEntry*, %struct.sListEntry** %link3, align 4
  %cmp = icmp ne %struct.sListEntry* %7, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %ix = alloca i32, align 4
  %ll = alloca %struct.sListEntry*, align 4
  %iter = alloca %struct.sListIterator*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.sListEntry* @NewList()
  store %struct.sListEntry* %call, %struct.sListEntry** %ll, align 4
  store i32 0, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %ix, align 4
  %cmp = icmp slt i32 %0, 6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load %struct.sListEntry*, %struct.sListEntry** %ll, align 4
  %2 = load i32, i32* %ix, align 4
  %arrayidx = getelementptr inbounds [6 x i8*], [6 x i8*]* @main.contents, i32 0, i32 %2
  %3 = load i8*, i8** %arrayidx, align 4
  %call1 = call i32 @LL_Append(%struct.sListEntry* %1, i8* %3)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %5 = load %struct.sListEntry*, %struct.sListEntry** %ll, align 4
  %call2 = call %struct.sListIterator* @LL_GetIterator(%struct.sListEntry* %5)
  store %struct.sListIterator* %call2, %struct.sListIterator** %iter, align 4
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i32 0, i32 0))
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end
  %6 = load %struct.sListIterator*, %struct.sListIterator** %iter, align 4
  %call4 = call i32 @LLI_Next(%struct.sListIterator* %6)
  %tobool = icmp ne i32 %call4, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %7 = load %struct.sListIterator*, %struct.sListIterator** %iter, align 4
  %call5 = call i8* @LLI_Value(%struct.sListIterator* %7)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7, i32 0, i32 0), i8* %call5)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %8 = load %struct.sListIterator*, %struct.sListIterator** %iter, align 4
  %9 = bitcast %struct.sListIterator* %8 to i8*
  call void @free(i8* %9)
  store %struct.sListIterator* null, %struct.sListIterator** %iter, align 4
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8, i32 0, i32 0))
  %10 = load %struct.sListEntry*, %struct.sListEntry** %ll, align 4
  %call8 = call %struct.sListIterator* @LL_GetIterator(%struct.sListEntry* %10)
  store %struct.sListIterator* %call8, %struct.sListIterator** %iter, align 4
  br label %while.cond9

while.cond9:                                      ; preds = %while.body12, %while.end
  %11 = load %struct.sListIterator*, %struct.sListIterator** %iter, align 4
  %call10 = call i32 @LLI_Prev(%struct.sListIterator* %11)
  %tobool11 = icmp ne i32 %call10, 0
  br i1 %tobool11, label %while.body12, label %while.end15

while.body12:                                     ; preds = %while.cond9
  %12 = load %struct.sListIterator*, %struct.sListIterator** %iter, align 4
  %call13 = call i8* @LLI_Value(%struct.sListIterator* %12)
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7, i32 0, i32 0), i8* %call13)
  br label %while.cond9

while.end15:                                      ; preds = %while.cond9
  %13 = load %struct.sListIterator*, %struct.sListIterator** %iter, align 4
  %14 = bitcast %struct.sListIterator* %13 to i8*
  call void @free(i8* %14)
  store %struct.sListIterator* null, %struct.sListIterator** %iter, align 4
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

declare void @free(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %cmp = icmp eq %struct.sListEntry* %1, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv = zext i1 %cmp to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
%2:i32 = zext %1
infer %2
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 0:i32, %0
%2:i32 = zext %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for LLI_AtEnd()

; entering Souper's runOnFunction() for LLI_Value()

; ModuleID = './Doubly-linked_list-Traversal.c.bc'
source_filename = "./Doubly-linked_list-Traversal.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.sListEntry = type { i8*, %struct.sListEntry*, %struct.sListEntry* }
%struct.sListIterator = type { %struct.sListEntry*, %struct.sListEntry* }

@main.contents = internal global [6 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i32 0, i32 0)], align 16
@.str = private unnamed_addr constant [5 x i8] c"Read\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"Orage\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"Yeller\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"Glean\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"Blew\00", align 1
@.str.5 = private unnamed_addr constant [7 x i8] c"Burple\00", align 1
@.str.6 = private unnamed_addr constant [9 x i8] c"forward\0A\00", align 1
@.str.7 = private unnamed_addr constant [10 x i8] c"value=%s\0A\00", align 1
@.str.8 = private unnamed_addr constant [10 x i8] c"\0Areverse\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.sListEntry* @NewList() #0 {
entry:
  %le = alloca %struct.sListEntry*, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.sListEntry*
  store %struct.sListEntry* %0, %struct.sListEntry** %le, align 4
  %1 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %tobool = icmp ne %struct.sListEntry* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %value = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %2, i32 0, i32 0
  store i8* null, i8** %value, align 4
  %3 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %3, i32 0, i32 2
  store %struct.sListEntry* null, %struct.sListEntry** %prev, align 4
  %4 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %next = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %4, i32 0, i32 1
  store %struct.sListEntry* null, %struct.sListEntry** %next, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  ret %struct.sListEntry* %5
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @LL_Append(%struct.sListEntry* %ll, i8* %newVal) #0 {
entry:
  %ll.addr = alloca %struct.sListEntry*, align 4
  %newVal.addr = alloca i8*, align 4
  %le = alloca %struct.sListEntry*, align 4
  store %struct.sListEntry* %ll, %struct.sListEntry** %ll.addr, align 4
  store i8* %newVal, i8** %newVal.addr, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.sListEntry*
  store %struct.sListEntry* %0, %struct.sListEntry** %le, align 4
  %1 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %tobool = icmp ne %struct.sListEntry* %1, null
  br i1 %tobool, label %if.then, label %if.end10

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %newVal.addr, align 4
  %call1 = call i8* @strdup(i8* %2) #3
  %3 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %value = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %3, i32 0, i32 0
  store i8* %call1, i8** %value, align 4
  %4 = load %struct.sListEntry*, %struct.sListEntry** %ll.addr, align 4
  %prev = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %4, i32 0, i32 2
  %5 = load %struct.sListEntry*, %struct.sListEntry** %prev, align 4
  %6 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev2 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %6, i32 0, i32 2
  store %struct.sListEntry* %5, %struct.sListEntry** %prev2, align 4
  %7 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %next = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %7, i32 0, i32 1
  store %struct.sListEntry* null, %struct.sListEntry** %next, align 4
  %8 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev3 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %8, i32 0, i32 2
  %9 = load %struct.sListEntry*, %struct.sListEntry** %prev3, align 4
  %tobool4 = icmp ne %struct.sListEntry* %9, null
  br i1 %tobool4, label %if.then5, label %if.else

if.then5:                                         ; preds = %if.then
  %10 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %11 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev6 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %11, i32 0, i32 2
  %12 = load %struct.sListEntry*, %struct.sListEntry** %prev6, align 4
  %next7 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %12, i32 0, i32 1
  store %struct.sListEntry* %10, %struct.sListEntry** %next7, align 4
  br label %if.end

if.else:                                          ; preds = %if.then
  %13 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %14 = load %struct.sListEntry*, %struct.sListEntry** %ll.addr, align 4
  %next8 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %14, i32 0, i32 1
  store %struct.sListEntry* %13, %struct.sListEntry** %next8, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then5
  %15 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %16 = load %struct.sListEntry*, %struct.sListEntry** %ll.addr, align 4
  %prev9 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %16, i32 0, i32 2
  store %struct.sListEntry* %15, %struct.sListEntry** %prev9, align 4
  br label %if.end10

if.end10:                                         ; preds = %if.end, %entry
  %17 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %cmp = icmp ne %struct.sListEntry* %17, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: nounwind
declare i8* @strdup(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @LI_Insert(%struct.sListIterator* %iter, i8* %newVal) #0 {
entry:
  %iter.addr = alloca %struct.sListIterator*, align 4
  %newVal.addr = alloca i8*, align 4
  %crnt = alloca %struct.sListEntry*, align 4
  %le = alloca %struct.sListEntry*, align 4
  store %struct.sListIterator* %iter, %struct.sListIterator** %iter.addr, align 4
  store i8* %newVal, i8** %newVal.addr, align 4
  %0 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %0, i32 0, i32 0
  %1 = load %struct.sListEntry*, %struct.sListEntry** %link, align 4
  store %struct.sListEntry* %1, %struct.sListEntry** %crnt, align 4
  %call = call noalias i8* @malloc(i32 12)
  %2 = bitcast i8* %call to %struct.sListEntry*
  store %struct.sListEntry* %2, %struct.sListEntry** %le, align 4
  %3 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %tobool = icmp ne %struct.sListEntry* %3, null
  br i1 %tobool, label %if.then, label %if.end35

if.then:                                          ; preds = %entry
  %4 = load i8*, i8** %newVal.addr, align 4
  %call1 = call i8* @strdup(i8* %4) #3
  %5 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %value = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %5, i32 0, i32 0
  store i8* %call1, i8** %value, align 4
  %6 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %7 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %head = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %7, i32 0, i32 1
  %8 = load %struct.sListEntry*, %struct.sListEntry** %head, align 4
  %cmp = icmp eq %struct.sListEntry* %6, %8
  br i1 %cmp, label %if.then2, label %if.else11

if.then2:                                         ; preds = %if.then
  %9 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %9, i32 0, i32 2
  store %struct.sListEntry* null, %struct.sListEntry** %prev, align 4
  %10 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %next = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %10, i32 0, i32 1
  %11 = load %struct.sListEntry*, %struct.sListEntry** %next, align 4
  %12 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %next3 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %12, i32 0, i32 1
  store %struct.sListEntry* %11, %struct.sListEntry** %next3, align 4
  %13 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %14 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %next4 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %14, i32 0, i32 1
  store %struct.sListEntry* %13, %struct.sListEntry** %next4, align 4
  %15 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %next5 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %15, i32 0, i32 1
  %16 = load %struct.sListEntry*, %struct.sListEntry** %next5, align 4
  %tobool6 = icmp ne %struct.sListEntry* %16, null
  br i1 %tobool6, label %if.then7, label %if.else

if.then7:                                         ; preds = %if.then2
  %17 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %18 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %next8 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %18, i32 0, i32 1
  %19 = load %struct.sListEntry*, %struct.sListEntry** %next8, align 4
  %prev9 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %19, i32 0, i32 2
  store %struct.sListEntry* %17, %struct.sListEntry** %prev9, align 4
  br label %if.end

if.else:                                          ; preds = %if.then2
  %20 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %21 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %prev10 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %21, i32 0, i32 2
  store %struct.sListEntry* %20, %struct.sListEntry** %prev10, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then7
  br label %if.end34

if.else11:                                        ; preds = %if.then
  %22 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %cmp12 = icmp eq %struct.sListEntry* %22, null
  br i1 %cmp12, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else11
  %23 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %head13 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %23, i32 0, i32 1
  %24 = load %struct.sListEntry*, %struct.sListEntry** %head13, align 4
  %prev14 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %24, i32 0, i32 2
  %25 = load %struct.sListEntry*, %struct.sListEntry** %prev14, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.else11
  %26 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %prev15 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %26, i32 0, i32 2
  %27 = load %struct.sListEntry*, %struct.sListEntry** %prev15, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.sListEntry* [ %25, %cond.true ], [ %27, %cond.false ]
  %28 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev16 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %28, i32 0, i32 2
  store %struct.sListEntry* %cond, %struct.sListEntry** %prev16, align 4
  %29 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %30 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %next17 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %30, i32 0, i32 1
  store %struct.sListEntry* %29, %struct.sListEntry** %next17, align 4
  %31 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev18 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %31, i32 0, i32 2
  %32 = load %struct.sListEntry*, %struct.sListEntry** %prev18, align 4
  %tobool19 = icmp ne %struct.sListEntry* %32, null
  br i1 %tobool19, label %if.then20, label %if.else23

if.then20:                                        ; preds = %cond.end
  %33 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %34 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev21 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %34, i32 0, i32 2
  %35 = load %struct.sListEntry*, %struct.sListEntry** %prev21, align 4
  %next22 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %35, i32 0, i32 1
  store %struct.sListEntry* %33, %struct.sListEntry** %next22, align 4
  br label %if.end26

if.else23:                                        ; preds = %cond.end
  %36 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %37 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %head24 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %37, i32 0, i32 1
  %38 = load %struct.sListEntry*, %struct.sListEntry** %head24, align 4
  %next25 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %38, i32 0, i32 1
  store %struct.sListEntry* %36, %struct.sListEntry** %next25, align 4
  br label %if.end26

if.end26:                                         ; preds = %if.else23, %if.then20
  %39 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %tobool27 = icmp ne %struct.sListEntry* %39, null
  br i1 %tobool27, label %if.then28, label %if.else30

if.then28:                                        ; preds = %if.end26
  %40 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %41 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %prev29 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %41, i32 0, i32 2
  store %struct.sListEntry* %40, %struct.sListEntry** %prev29, align 4
  br label %if.end33

if.else30:                                        ; preds = %if.end26
  %42 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %43 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %head31 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %43, i32 0, i32 1
  %44 = load %struct.sListEntry*, %struct.sListEntry** %head31, align 4
  %prev32 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %44, i32 0, i32 2
  store %struct.sListEntry* %42, %struct.sListEntry** %prev32, align 4
  br label %if.end33

if.end33:                                         ; preds = %if.else30, %if.then28
  br label %if.end34

if.end34:                                         ; preds = %if.end33, %if.end
  br label %if.end35

if.end35:                                         ; preds = %if.end34, %entry
  %45 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %cmp36 = icmp ne %struct.sListEntry* %45, null
  %conv = zext i1 %cmp36 to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.sListIterator* @LL_GetIterator(%struct.sListEntry* %ll) #0 {
entry:
  %ll.addr = alloca %struct.sListEntry*, align 4
  %liter = alloca %struct.sListIterator*, align 4
  store %struct.sListEntry* %ll, %struct.sListEntry** %ll.addr, align 4
  %call = call noalias i8* @malloc(i32 8)
  %0 = bitcast i8* %call to %struct.sListIterator*
  store %struct.sListIterator* %0, %struct.sListIterator** %liter, align 4
  %1 = load %struct.sListEntry*, %struct.sListEntry** %ll.addr, align 4
  %2 = load %struct.sListIterator*, %struct.sListIterator** %liter, align 4
  %head = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %2, i32 0, i32 1
  store %struct.sListEntry* %1, %struct.sListEntry** %head, align 4
  %3 = load %struct.sListEntry*, %struct.sListEntry** %ll.addr, align 4
  %4 = load %struct.sListIterator*, %struct.sListIterator** %liter, align 4
  %link = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %4, i32 0, i32 0
  store %struct.sListEntry* %3, %struct.sListEntry** %link, align 4
  %5 = load %struct.sListIterator*, %struct.sListIterator** %liter, align 4
  ret %struct.sListIterator* %5
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @LLI_AtEnd(%struct.sListIterator* %iter) #0 {
entry:
  %iter.addr = alloca %struct.sListIterator*, align 4
  store %struct.sListIterator* %iter, %struct.sListIterator** %iter.addr, align 4
  %0 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %0, i32 0, i32 0
  %1 = load %struct.sListEntry*, %struct.sListEntry** %link, align 4
  %cmp = icmp eq %struct.sListEntry* %1, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @LLI_Value(%struct.sListIterator* %iter) #0 {
entry:
  %iter.addr = alloca %struct.sListIterator*, align 4
  store %struct.sListIterator* %iter, %struct.sListIterator** %iter.addr, align 4
  %0 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %0, i32 0, i32 0
  %1 = load %struct.sListEntry*, %struct.sListEntry** %link, align 4
  %tobool = icmp ne %struct.sListEntry* %1, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link1 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %2, i32 0, i32 0
  %3 = load %struct.sListEntry*, %struct.sListEntry** %link1, align 4
  %value = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %3, i32 0, i32 0
  %4 = load i8*, i8** %value, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %4, %cond.true ], [ null, %cond.false ]
  ret i8* %cond
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @LLI_Next(%struct.sListIterator* %iter) #0 {
entry:
  %iter.addr = alloca %struct.sListIterator*, align 4
  store %struct.sListIterator* %iter, %struct.sListIterator** %iter.addr, align 4
  %0 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %0, i32 0, i32 0
  %1 = load %struct.sListEntry*, %struct.sListEntry** %link, align 4
  %tobool = icmp ne %struct.sListEntry* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link1 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %2, i32 0, i32 0
  %3 = load %struct.sListEntry*, %struct.sListEntry** %link1, align 4
  %next = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %3, i32 0, i32 1
  %4 = load %struct.sListEntry*, %struct.sListEntry** %next, align 4
  %5 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link2 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %5, i32 0, i32 0
  store %struct.sListEntry* %4, %struct.sListEntry** %link2, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link3 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %6, i32 0, i32 0
  %7 = load %struct.sListEntry*, %struct.sListEntry** %link3, align 4
  %cmp = icmp ne %struct.sListEntry* %7, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @LLI_Prev(%struct.sListIterator* %iter) #0 {
entry:
  %iter.addr = alloca %struct.sListIterator*, align 4
  store %struct.sListIterator* %iter, %struct.sListIterator** %iter.addr, align 4
  %0 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %0, i32 0, i32 0
  %1 = load %struct.sListEntry*, %struct.sListEntry** %link, align 4
  %tobool = icmp ne %struct.sListEntry* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link1 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %2, i32 0, i32 0
  %3 = load %struct.sListEntry*, %struct.sListEntry** %link1, align 4
  %prev = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %3, i32 0, i32 2
  %4 = load %struct.sListEntry*, %struct.sListEntry** %prev, align 4
  %5 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link2 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %5, i32 0, i32 0
  store %struct.sListEntry* %4, %struct.sListEntry** %link2, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link3 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %6, i32 0, i32 0
  %7 = load %struct.sListEntry*, %struct.sListEntry** %link3, align 4
  %cmp = icmp ne %struct.sListEntry* %7, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %ix = alloca i32, align 4
  %ll = alloca %struct.sListEntry*, align 4
  %iter = alloca %struct.sListIterator*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.sListEntry* @NewList()
  store %struct.sListEntry* %call, %struct.sListEntry** %ll, align 4
  store i32 0, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %ix, align 4
  %cmp = icmp slt i32 %0, 6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load %struct.sListEntry*, %struct.sListEntry** %ll, align 4
  %2 = load i32, i32* %ix, align 4
  %arrayidx = getelementptr inbounds [6 x i8*], [6 x i8*]* @main.contents, i32 0, i32 %2
  %3 = load i8*, i8** %arrayidx, align 4
  %call1 = call i32 @LL_Append(%struct.sListEntry* %1, i8* %3)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %5 = load %struct.sListEntry*, %struct.sListEntry** %ll, align 4
  %call2 = call %struct.sListIterator* @LL_GetIterator(%struct.sListEntry* %5)
  store %struct.sListIterator* %call2, %struct.sListIterator** %iter, align 4
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i32 0, i32 0))
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end
  %6 = load %struct.sListIterator*, %struct.sListIterator** %iter, align 4
  %call4 = call i32 @LLI_Next(%struct.sListIterator* %6)
  %tobool = icmp ne i32 %call4, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %7 = load %struct.sListIterator*, %struct.sListIterator** %iter, align 4
  %call5 = call i8* @LLI_Value(%struct.sListIterator* %7)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7, i32 0, i32 0), i8* %call5)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %8 = load %struct.sListIterator*, %struct.sListIterator** %iter, align 4
  %9 = bitcast %struct.sListIterator* %8 to i8*
  call void @free(i8* %9)
  store %struct.sListIterator* null, %struct.sListIterator** %iter, align 4
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8, i32 0, i32 0))
  %10 = load %struct.sListEntry*, %struct.sListEntry** %ll, align 4
  %call8 = call %struct.sListIterator* @LL_GetIterator(%struct.sListEntry* %10)
  store %struct.sListIterator* %call8, %struct.sListIterator** %iter, align 4
  br label %while.cond9

while.cond9:                                      ; preds = %while.body12, %while.end
  %11 = load %struct.sListIterator*, %struct.sListIterator** %iter, align 4
  %call10 = call i32 @LLI_Prev(%struct.sListIterator* %11)
  %tobool11 = icmp ne i32 %call10, 0
  br i1 %tobool11, label %while.body12, label %while.end15

while.body12:                                     ; preds = %while.cond9
  %12 = load %struct.sListIterator*, %struct.sListIterator** %iter, align 4
  %call13 = call i8* @LLI_Value(%struct.sListIterator* %12)
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7, i32 0, i32 0), i8* %call13)
  br label %while.cond9

while.end15:                                      ; preds = %while.cond9
  %13 = load %struct.sListIterator*, %struct.sListIterator** %iter, align 4
  %14 = bitcast %struct.sListIterator* %13 to i8*
  call void @free(i8* %14)
  store %struct.sListIterator* null, %struct.sListIterator** %iter, align 4
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

declare void @free(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %tobool = icmp ne %struct.sListEntry* %1, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for LLI_Value()

; entering Souper's runOnFunction() for LLI_Next()

; ModuleID = './Doubly-linked_list-Traversal.c.bc'
source_filename = "./Doubly-linked_list-Traversal.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.sListEntry = type { i8*, %struct.sListEntry*, %struct.sListEntry* }
%struct.sListIterator = type { %struct.sListEntry*, %struct.sListEntry* }

@main.contents = internal global [6 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i32 0, i32 0)], align 16
@.str = private unnamed_addr constant [5 x i8] c"Read\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"Orage\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"Yeller\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"Glean\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"Blew\00", align 1
@.str.5 = private unnamed_addr constant [7 x i8] c"Burple\00", align 1
@.str.6 = private unnamed_addr constant [9 x i8] c"forward\0A\00", align 1
@.str.7 = private unnamed_addr constant [10 x i8] c"value=%s\0A\00", align 1
@.str.8 = private unnamed_addr constant [10 x i8] c"\0Areverse\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.sListEntry* @NewList() #0 {
entry:
  %le = alloca %struct.sListEntry*, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.sListEntry*
  store %struct.sListEntry* %0, %struct.sListEntry** %le, align 4
  %1 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %tobool = icmp ne %struct.sListEntry* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %value = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %2, i32 0, i32 0
  store i8* null, i8** %value, align 4
  %3 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %3, i32 0, i32 2
  store %struct.sListEntry* null, %struct.sListEntry** %prev, align 4
  %4 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %next = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %4, i32 0, i32 1
  store %struct.sListEntry* null, %struct.sListEntry** %next, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  ret %struct.sListEntry* %5
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @LL_Append(%struct.sListEntry* %ll, i8* %newVal) #0 {
entry:
  %ll.addr = alloca %struct.sListEntry*, align 4
  %newVal.addr = alloca i8*, align 4
  %le = alloca %struct.sListEntry*, align 4
  store %struct.sListEntry* %ll, %struct.sListEntry** %ll.addr, align 4
  store i8* %newVal, i8** %newVal.addr, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.sListEntry*
  store %struct.sListEntry* %0, %struct.sListEntry** %le, align 4
  %1 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %tobool = icmp ne %struct.sListEntry* %1, null
  br i1 %tobool, label %if.then, label %if.end10

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %newVal.addr, align 4
  %call1 = call i8* @strdup(i8* %2) #3
  %3 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %value = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %3, i32 0, i32 0
  store i8* %call1, i8** %value, align 4
  %4 = load %struct.sListEntry*, %struct.sListEntry** %ll.addr, align 4
  %prev = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %4, i32 0, i32 2
  %5 = load %struct.sListEntry*, %struct.sListEntry** %prev, align 4
  %6 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev2 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %6, i32 0, i32 2
  store %struct.sListEntry* %5, %struct.sListEntry** %prev2, align 4
  %7 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %next = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %7, i32 0, i32 1
  store %struct.sListEntry* null, %struct.sListEntry** %next, align 4
  %8 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev3 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %8, i32 0, i32 2
  %9 = load %struct.sListEntry*, %struct.sListEntry** %prev3, align 4
  %tobool4 = icmp ne %struct.sListEntry* %9, null
  br i1 %tobool4, label %if.then5, label %if.else

if.then5:                                         ; preds = %if.then
  %10 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %11 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev6 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %11, i32 0, i32 2
  %12 = load %struct.sListEntry*, %struct.sListEntry** %prev6, align 4
  %next7 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %12, i32 0, i32 1
  store %struct.sListEntry* %10, %struct.sListEntry** %next7, align 4
  br label %if.end

if.else:                                          ; preds = %if.then
  %13 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %14 = load %struct.sListEntry*, %struct.sListEntry** %ll.addr, align 4
  %next8 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %14, i32 0, i32 1
  store %struct.sListEntry* %13, %struct.sListEntry** %next8, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then5
  %15 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %16 = load %struct.sListEntry*, %struct.sListEntry** %ll.addr, align 4
  %prev9 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %16, i32 0, i32 2
  store %struct.sListEntry* %15, %struct.sListEntry** %prev9, align 4
  br label %if.end10

if.end10:                                         ; preds = %if.end, %entry
  %17 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %cmp = icmp ne %struct.sListEntry* %17, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: nounwind
declare i8* @strdup(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @LI_Insert(%struct.sListIterator* %iter, i8* %newVal) #0 {
entry:
  %iter.addr = alloca %struct.sListIterator*, align 4
  %newVal.addr = alloca i8*, align 4
  %crnt = alloca %struct.sListEntry*, align 4
  %le = alloca %struct.sListEntry*, align 4
  store %struct.sListIterator* %iter, %struct.sListIterator** %iter.addr, align 4
  store i8* %newVal, i8** %newVal.addr, align 4
  %0 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %0, i32 0, i32 0
  %1 = load %struct.sListEntry*, %struct.sListEntry** %link, align 4
  store %struct.sListEntry* %1, %struct.sListEntry** %crnt, align 4
  %call = call noalias i8* @malloc(i32 12)
  %2 = bitcast i8* %call to %struct.sListEntry*
  store %struct.sListEntry* %2, %struct.sListEntry** %le, align 4
  %3 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %tobool = icmp ne %struct.sListEntry* %3, null
  br i1 %tobool, label %if.then, label %if.end35

if.then:                                          ; preds = %entry
  %4 = load i8*, i8** %newVal.addr, align 4
  %call1 = call i8* @strdup(i8* %4) #3
  %5 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %value = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %5, i32 0, i32 0
  store i8* %call1, i8** %value, align 4
  %6 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %7 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %head = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %7, i32 0, i32 1
  %8 = load %struct.sListEntry*, %struct.sListEntry** %head, align 4
  %cmp = icmp eq %struct.sListEntry* %6, %8
  br i1 %cmp, label %if.then2, label %if.else11

if.then2:                                         ; preds = %if.then
  %9 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %9, i32 0, i32 2
  store %struct.sListEntry* null, %struct.sListEntry** %prev, align 4
  %10 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %next = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %10, i32 0, i32 1
  %11 = load %struct.sListEntry*, %struct.sListEntry** %next, align 4
  %12 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %next3 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %12, i32 0, i32 1
  store %struct.sListEntry* %11, %struct.sListEntry** %next3, align 4
  %13 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %14 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %next4 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %14, i32 0, i32 1
  store %struct.sListEntry* %13, %struct.sListEntry** %next4, align 4
  %15 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %next5 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %15, i32 0, i32 1
  %16 = load %struct.sListEntry*, %struct.sListEntry** %next5, align 4
  %tobool6 = icmp ne %struct.sListEntry* %16, null
  br i1 %tobool6, label %if.then7, label %if.else

if.then7:                                         ; preds = %if.then2
  %17 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %18 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %next8 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %18, i32 0, i32 1
  %19 = load %struct.sListEntry*, %struct.sListEntry** %next8, align 4
  %prev9 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %19, i32 0, i32 2
  store %struct.sListEntry* %17, %struct.sListEntry** %prev9, align 4
  br label %if.end

if.else:                                          ; preds = %if.then2
  %20 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %21 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %prev10 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %21, i32 0, i32 2
  store %struct.sListEntry* %20, %struct.sListEntry** %prev10, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then7
  br label %if.end34

if.else11:                                        ; preds = %if.then
  %22 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %cmp12 = icmp eq %struct.sListEntry* %22, null
  br i1 %cmp12, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else11
  %23 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %head13 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %23, i32 0, i32 1
  %24 = load %struct.sListEntry*, %struct.sListEntry** %head13, align 4
  %prev14 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %24, i32 0, i32 2
  %25 = load %struct.sListEntry*, %struct.sListEntry** %prev14, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.else11
  %26 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %prev15 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %26, i32 0, i32 2
  %27 = load %struct.sListEntry*, %struct.sListEntry** %prev15, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.sListEntry* [ %25, %cond.true ], [ %27, %cond.false ]
  %28 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev16 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %28, i32 0, i32 2
  store %struct.sListEntry* %cond, %struct.sListEntry** %prev16, align 4
  %29 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %30 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %next17 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %30, i32 0, i32 1
  store %struct.sListEntry* %29, %struct.sListEntry** %next17, align 4
  %31 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev18 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %31, i32 0, i32 2
  %32 = load %struct.sListEntry*, %struct.sListEntry** %prev18, align 4
  %tobool19 = icmp ne %struct.sListEntry* %32, null
  br i1 %tobool19, label %if.then20, label %if.else23

if.then20:                                        ; preds = %cond.end
  %33 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %34 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev21 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %34, i32 0, i32 2
  %35 = load %struct.sListEntry*, %struct.sListEntry** %prev21, align 4
  %next22 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %35, i32 0, i32 1
  store %struct.sListEntry* %33, %struct.sListEntry** %next22, align 4
  br label %if.end26

if.else23:                                        ; preds = %cond.end
  %36 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %37 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %head24 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %37, i32 0, i32 1
  %38 = load %struct.sListEntry*, %struct.sListEntry** %head24, align 4
  %next25 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %38, i32 0, i32 1
  store %struct.sListEntry* %36, %struct.sListEntry** %next25, align 4
  br label %if.end26

if.end26:                                         ; preds = %if.else23, %if.then20
  %39 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %tobool27 = icmp ne %struct.sListEntry* %39, null
  br i1 %tobool27, label %if.then28, label %if.else30

if.then28:                                        ; preds = %if.end26
  %40 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %41 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %prev29 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %41, i32 0, i32 2
  store %struct.sListEntry* %40, %struct.sListEntry** %prev29, align 4
  br label %if.end33

if.else30:                                        ; preds = %if.end26
  %42 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %43 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %head31 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %43, i32 0, i32 1
  %44 = load %struct.sListEntry*, %struct.sListEntry** %head31, align 4
  %prev32 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %44, i32 0, i32 2
  store %struct.sListEntry* %42, %struct.sListEntry** %prev32, align 4
  br label %if.end33

if.end33:                                         ; preds = %if.else30, %if.then28
  br label %if.end34

if.end34:                                         ; preds = %if.end33, %if.end
  br label %if.end35

if.end35:                                         ; preds = %if.end34, %entry
  %45 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %cmp36 = icmp ne %struct.sListEntry* %45, null
  %conv = zext i1 %cmp36 to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.sListIterator* @LL_GetIterator(%struct.sListEntry* %ll) #0 {
entry:
  %ll.addr = alloca %struct.sListEntry*, align 4
  %liter = alloca %struct.sListIterator*, align 4
  store %struct.sListEntry* %ll, %struct.sListEntry** %ll.addr, align 4
  %call = call noalias i8* @malloc(i32 8)
  %0 = bitcast i8* %call to %struct.sListIterator*
  store %struct.sListIterator* %0, %struct.sListIterator** %liter, align 4
  %1 = load %struct.sListEntry*, %struct.sListEntry** %ll.addr, align 4
  %2 = load %struct.sListIterator*, %struct.sListIterator** %liter, align 4
  %head = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %2, i32 0, i32 1
  store %struct.sListEntry* %1, %struct.sListEntry** %head, align 4
  %3 = load %struct.sListEntry*, %struct.sListEntry** %ll.addr, align 4
  %4 = load %struct.sListIterator*, %struct.sListIterator** %liter, align 4
  %link = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %4, i32 0, i32 0
  store %struct.sListEntry* %3, %struct.sListEntry** %link, align 4
  %5 = load %struct.sListIterator*, %struct.sListIterator** %liter, align 4
  ret %struct.sListIterator* %5
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @LLI_AtEnd(%struct.sListIterator* %iter) #0 {
entry:
  %iter.addr = alloca %struct.sListIterator*, align 4
  store %struct.sListIterator* %iter, %struct.sListIterator** %iter.addr, align 4
  %0 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %0, i32 0, i32 0
  %1 = load %struct.sListEntry*, %struct.sListEntry** %link, align 4
  %cmp = icmp eq %struct.sListEntry* %1, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @LLI_Value(%struct.sListIterator* %iter) #0 {
entry:
  %iter.addr = alloca %struct.sListIterator*, align 4
  store %struct.sListIterator* %iter, %struct.sListIterator** %iter.addr, align 4
  %0 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %0, i32 0, i32 0
  %1 = load %struct.sListEntry*, %struct.sListEntry** %link, align 4
  %tobool = icmp ne %struct.sListEntry* %1, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link1 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %2, i32 0, i32 0
  %3 = load %struct.sListEntry*, %struct.sListEntry** %link1, align 4
  %value = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %3, i32 0, i32 0
  %4 = load i8*, i8** %value, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %4, %cond.true ], [ null, %cond.false ]
  ret i8* %cond
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @LLI_Next(%struct.sListIterator* %iter) #0 {
entry:
  %iter.addr = alloca %struct.sListIterator*, align 4
  store %struct.sListIterator* %iter, %struct.sListIterator** %iter.addr, align 4
  %0 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %0, i32 0, i32 0
  %1 = load %struct.sListEntry*, %struct.sListEntry** %link, align 4
  %tobool = icmp ne %struct.sListEntry* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link1 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %2, i32 0, i32 0
  %3 = load %struct.sListEntry*, %struct.sListEntry** %link1, align 4
  %next = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %3, i32 0, i32 1
  %4 = load %struct.sListEntry*, %struct.sListEntry** %next, align 4
  %5 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link2 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %5, i32 0, i32 0
  store %struct.sListEntry* %4, %struct.sListEntry** %link2, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link3 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %6, i32 0, i32 0
  %7 = load %struct.sListEntry*, %struct.sListEntry** %link3, align 4
  %cmp = icmp ne %struct.sListEntry* %7, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @LLI_Prev(%struct.sListIterator* %iter) #0 {
entry:
  %iter.addr = alloca %struct.sListIterator*, align 4
  store %struct.sListIterator* %iter, %struct.sListIterator** %iter.addr, align 4
  %0 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %0, i32 0, i32 0
  %1 = load %struct.sListEntry*, %struct.sListEntry** %link, align 4
  %tobool = icmp ne %struct.sListEntry* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link1 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %2, i32 0, i32 0
  %3 = load %struct.sListEntry*, %struct.sListEntry** %link1, align 4
  %prev = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %3, i32 0, i32 2
  %4 = load %struct.sListEntry*, %struct.sListEntry** %prev, align 4
  %5 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link2 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %5, i32 0, i32 0
  store %struct.sListEntry* %4, %struct.sListEntry** %link2, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link3 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %6, i32 0, i32 0
  %7 = load %struct.sListEntry*, %struct.sListEntry** %link3, align 4
  %cmp = icmp ne %struct.sListEntry* %7, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %ix = alloca i32, align 4
  %ll = alloca %struct.sListEntry*, align 4
  %iter = alloca %struct.sListIterator*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.sListEntry* @NewList()
  store %struct.sListEntry* %call, %struct.sListEntry** %ll, align 4
  store i32 0, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %ix, align 4
  %cmp = icmp slt i32 %0, 6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load %struct.sListEntry*, %struct.sListEntry** %ll, align 4
  %2 = load i32, i32* %ix, align 4
  %arrayidx = getelementptr inbounds [6 x i8*], [6 x i8*]* @main.contents, i32 0, i32 %2
  %3 = load i8*, i8** %arrayidx, align 4
  %call1 = call i32 @LL_Append(%struct.sListEntry* %1, i8* %3)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %5 = load %struct.sListEntry*, %struct.sListEntry** %ll, align 4
  %call2 = call %struct.sListIterator* @LL_GetIterator(%struct.sListEntry* %5)
  store %struct.sListIterator* %call2, %struct.sListIterator** %iter, align 4
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i32 0, i32 0))
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end
  %6 = load %struct.sListIterator*, %struct.sListIterator** %iter, align 4
  %call4 = call i32 @LLI_Next(%struct.sListIterator* %6)
  %tobool = icmp ne i32 %call4, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %7 = load %struct.sListIterator*, %struct.sListIterator** %iter, align 4
  %call5 = call i8* @LLI_Value(%struct.sListIterator* %7)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7, i32 0, i32 0), i8* %call5)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %8 = load %struct.sListIterator*, %struct.sListIterator** %iter, align 4
  %9 = bitcast %struct.sListIterator* %8 to i8*
  call void @free(i8* %9)
  store %struct.sListIterator* null, %struct.sListIterator** %iter, align 4
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8, i32 0, i32 0))
  %10 = load %struct.sListEntry*, %struct.sListEntry** %ll, align 4
  %call8 = call %struct.sListIterator* @LL_GetIterator(%struct.sListEntry* %10)
  store %struct.sListIterator* %call8, %struct.sListIterator** %iter, align 4
  br label %while.cond9

while.cond9:                                      ; preds = %while.body12, %while.end
  %11 = load %struct.sListIterator*, %struct.sListIterator** %iter, align 4
  %call10 = call i32 @LLI_Prev(%struct.sListIterator* %11)
  %tobool11 = icmp ne i32 %call10, 0
  br i1 %tobool11, label %while.body12, label %while.end15

while.body12:                                     ; preds = %while.cond9
  %12 = load %struct.sListIterator*, %struct.sListIterator** %iter, align 4
  %call13 = call i8* @LLI_Value(%struct.sListIterator* %12)
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7, i32 0, i32 0), i8* %call13)
  br label %while.cond9

while.end15:                                      ; preds = %while.cond9
  %13 = load %struct.sListIterator*, %struct.sListIterator** %iter, align 4
  %14 = bitcast %struct.sListIterator* %13 to i8*
  call void @free(i8* %14)
  store %struct.sListIterator* null, %struct.sListIterator** %iter, align 4
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

declare void @free(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %tobool = icmp ne %struct.sListEntry* %1, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp = icmp ne %struct.sListEntry* %7, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv = zext i1 %cmp to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i32 = zext %1
infer %2
#########################################################
; exiting Souper's runOnFunction() for LLI_Next()

; entering Souper's runOnFunction() for LLI_Prev()

; ModuleID = './Doubly-linked_list-Traversal.c.bc'
source_filename = "./Doubly-linked_list-Traversal.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.sListEntry = type { i8*, %struct.sListEntry*, %struct.sListEntry* }
%struct.sListIterator = type { %struct.sListEntry*, %struct.sListEntry* }

@main.contents = internal global [6 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i32 0, i32 0)], align 16
@.str = private unnamed_addr constant [5 x i8] c"Read\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"Orage\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"Yeller\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"Glean\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"Blew\00", align 1
@.str.5 = private unnamed_addr constant [7 x i8] c"Burple\00", align 1
@.str.6 = private unnamed_addr constant [9 x i8] c"forward\0A\00", align 1
@.str.7 = private unnamed_addr constant [10 x i8] c"value=%s\0A\00", align 1
@.str.8 = private unnamed_addr constant [10 x i8] c"\0Areverse\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.sListEntry* @NewList() #0 {
entry:
  %le = alloca %struct.sListEntry*, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.sListEntry*
  store %struct.sListEntry* %0, %struct.sListEntry** %le, align 4
  %1 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %tobool = icmp ne %struct.sListEntry* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %value = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %2, i32 0, i32 0
  store i8* null, i8** %value, align 4
  %3 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %3, i32 0, i32 2
  store %struct.sListEntry* null, %struct.sListEntry** %prev, align 4
  %4 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %next = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %4, i32 0, i32 1
  store %struct.sListEntry* null, %struct.sListEntry** %next, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  ret %struct.sListEntry* %5
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @LL_Append(%struct.sListEntry* %ll, i8* %newVal) #0 {
entry:
  %ll.addr = alloca %struct.sListEntry*, align 4
  %newVal.addr = alloca i8*, align 4
  %le = alloca %struct.sListEntry*, align 4
  store %struct.sListEntry* %ll, %struct.sListEntry** %ll.addr, align 4
  store i8* %newVal, i8** %newVal.addr, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.sListEntry*
  store %struct.sListEntry* %0, %struct.sListEntry** %le, align 4
  %1 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %tobool = icmp ne %struct.sListEntry* %1, null
  br i1 %tobool, label %if.then, label %if.end10

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %newVal.addr, align 4
  %call1 = call i8* @strdup(i8* %2) #3
  %3 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %value = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %3, i32 0, i32 0
  store i8* %call1, i8** %value, align 4
  %4 = load %struct.sListEntry*, %struct.sListEntry** %ll.addr, align 4
  %prev = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %4, i32 0, i32 2
  %5 = load %struct.sListEntry*, %struct.sListEntry** %prev, align 4
  %6 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev2 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %6, i32 0, i32 2
  store %struct.sListEntry* %5, %struct.sListEntry** %prev2, align 4
  %7 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %next = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %7, i32 0, i32 1
  store %struct.sListEntry* null, %struct.sListEntry** %next, align 4
  %8 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev3 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %8, i32 0, i32 2
  %9 = load %struct.sListEntry*, %struct.sListEntry** %prev3, align 4
  %tobool4 = icmp ne %struct.sListEntry* %9, null
  br i1 %tobool4, label %if.then5, label %if.else

if.then5:                                         ; preds = %if.then
  %10 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %11 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev6 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %11, i32 0, i32 2
  %12 = load %struct.sListEntry*, %struct.sListEntry** %prev6, align 4
  %next7 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %12, i32 0, i32 1
  store %struct.sListEntry* %10, %struct.sListEntry** %next7, align 4
  br label %if.end

if.else:                                          ; preds = %if.then
  %13 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %14 = load %struct.sListEntry*, %struct.sListEntry** %ll.addr, align 4
  %next8 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %14, i32 0, i32 1
  store %struct.sListEntry* %13, %struct.sListEntry** %next8, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then5
  %15 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %16 = load %struct.sListEntry*, %struct.sListEntry** %ll.addr, align 4
  %prev9 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %16, i32 0, i32 2
  store %struct.sListEntry* %15, %struct.sListEntry** %prev9, align 4
  br label %if.end10

if.end10:                                         ; preds = %if.end, %entry
  %17 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %cmp = icmp ne %struct.sListEntry* %17, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: nounwind
declare i8* @strdup(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @LI_Insert(%struct.sListIterator* %iter, i8* %newVal) #0 {
entry:
  %iter.addr = alloca %struct.sListIterator*, align 4
  %newVal.addr = alloca i8*, align 4
  %crnt = alloca %struct.sListEntry*, align 4
  %le = alloca %struct.sListEntry*, align 4
  store %struct.sListIterator* %iter, %struct.sListIterator** %iter.addr, align 4
  store i8* %newVal, i8** %newVal.addr, align 4
  %0 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %0, i32 0, i32 0
  %1 = load %struct.sListEntry*, %struct.sListEntry** %link, align 4
  store %struct.sListEntry* %1, %struct.sListEntry** %crnt, align 4
  %call = call noalias i8* @malloc(i32 12)
  %2 = bitcast i8* %call to %struct.sListEntry*
  store %struct.sListEntry* %2, %struct.sListEntry** %le, align 4
  %3 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %tobool = icmp ne %struct.sListEntry* %3, null
  br i1 %tobool, label %if.then, label %if.end35

if.then:                                          ; preds = %entry
  %4 = load i8*, i8** %newVal.addr, align 4
  %call1 = call i8* @strdup(i8* %4) #3
  %5 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %value = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %5, i32 0, i32 0
  store i8* %call1, i8** %value, align 4
  %6 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %7 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %head = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %7, i32 0, i32 1
  %8 = load %struct.sListEntry*, %struct.sListEntry** %head, align 4
  %cmp = icmp eq %struct.sListEntry* %6, %8
  br i1 %cmp, label %if.then2, label %if.else11

if.then2:                                         ; preds = %if.then
  %9 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %9, i32 0, i32 2
  store %struct.sListEntry* null, %struct.sListEntry** %prev, align 4
  %10 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %next = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %10, i32 0, i32 1
  %11 = load %struct.sListEntry*, %struct.sListEntry** %next, align 4
  %12 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %next3 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %12, i32 0, i32 1
  store %struct.sListEntry* %11, %struct.sListEntry** %next3, align 4
  %13 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %14 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %next4 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %14, i32 0, i32 1
  store %struct.sListEntry* %13, %struct.sListEntry** %next4, align 4
  %15 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %next5 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %15, i32 0, i32 1
  %16 = load %struct.sListEntry*, %struct.sListEntry** %next5, align 4
  %tobool6 = icmp ne %struct.sListEntry* %16, null
  br i1 %tobool6, label %if.then7, label %if.else

if.then7:                                         ; preds = %if.then2
  %17 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %18 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %next8 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %18, i32 0, i32 1
  %19 = load %struct.sListEntry*, %struct.sListEntry** %next8, align 4
  %prev9 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %19, i32 0, i32 2
  store %struct.sListEntry* %17, %struct.sListEntry** %prev9, align 4
  br label %if.end

if.else:                                          ; preds = %if.then2
  %20 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %21 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %prev10 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %21, i32 0, i32 2
  store %struct.sListEntry* %20, %struct.sListEntry** %prev10, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then7
  br label %if.end34

if.else11:                                        ; preds = %if.then
  %22 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %cmp12 = icmp eq %struct.sListEntry* %22, null
  br i1 %cmp12, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else11
  %23 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %head13 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %23, i32 0, i32 1
  %24 = load %struct.sListEntry*, %struct.sListEntry** %head13, align 4
  %prev14 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %24, i32 0, i32 2
  %25 = load %struct.sListEntry*, %struct.sListEntry** %prev14, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.else11
  %26 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %prev15 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %26, i32 0, i32 2
  %27 = load %struct.sListEntry*, %struct.sListEntry** %prev15, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.sListEntry* [ %25, %cond.true ], [ %27, %cond.false ]
  %28 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev16 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %28, i32 0, i32 2
  store %struct.sListEntry* %cond, %struct.sListEntry** %prev16, align 4
  %29 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %30 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %next17 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %30, i32 0, i32 1
  store %struct.sListEntry* %29, %struct.sListEntry** %next17, align 4
  %31 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev18 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %31, i32 0, i32 2
  %32 = load %struct.sListEntry*, %struct.sListEntry** %prev18, align 4
  %tobool19 = icmp ne %struct.sListEntry* %32, null
  br i1 %tobool19, label %if.then20, label %if.else23

if.then20:                                        ; preds = %cond.end
  %33 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %34 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev21 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %34, i32 0, i32 2
  %35 = load %struct.sListEntry*, %struct.sListEntry** %prev21, align 4
  %next22 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %35, i32 0, i32 1
  store %struct.sListEntry* %33, %struct.sListEntry** %next22, align 4
  br label %if.end26

if.else23:                                        ; preds = %cond.end
  %36 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %37 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %head24 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %37, i32 0, i32 1
  %38 = load %struct.sListEntry*, %struct.sListEntry** %head24, align 4
  %next25 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %38, i32 0, i32 1
  store %struct.sListEntry* %36, %struct.sListEntry** %next25, align 4
  br label %if.end26

if.end26:                                         ; preds = %if.else23, %if.then20
  %39 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %tobool27 = icmp ne %struct.sListEntry* %39, null
  br i1 %tobool27, label %if.then28, label %if.else30

if.then28:                                        ; preds = %if.end26
  %40 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %41 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %prev29 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %41, i32 0, i32 2
  store %struct.sListEntry* %40, %struct.sListEntry** %prev29, align 4
  br label %if.end33

if.else30:                                        ; preds = %if.end26
  %42 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %43 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %head31 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %43, i32 0, i32 1
  %44 = load %struct.sListEntry*, %struct.sListEntry** %head31, align 4
  %prev32 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %44, i32 0, i32 2
  store %struct.sListEntry* %42, %struct.sListEntry** %prev32, align 4
  br label %if.end33

if.end33:                                         ; preds = %if.else30, %if.then28
  br label %if.end34

if.end34:                                         ; preds = %if.end33, %if.end
  br label %if.end35

if.end35:                                         ; preds = %if.end34, %entry
  %45 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %cmp36 = icmp ne %struct.sListEntry* %45, null
  %conv = zext i1 %cmp36 to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.sListIterator* @LL_GetIterator(%struct.sListEntry* %ll) #0 {
entry:
  %ll.addr = alloca %struct.sListEntry*, align 4
  %liter = alloca %struct.sListIterator*, align 4
  store %struct.sListEntry* %ll, %struct.sListEntry** %ll.addr, align 4
  %call = call noalias i8* @malloc(i32 8)
  %0 = bitcast i8* %call to %struct.sListIterator*
  store %struct.sListIterator* %0, %struct.sListIterator** %liter, align 4
  %1 = load %struct.sListEntry*, %struct.sListEntry** %ll.addr, align 4
  %2 = load %struct.sListIterator*, %struct.sListIterator** %liter, align 4
  %head = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %2, i32 0, i32 1
  store %struct.sListEntry* %1, %struct.sListEntry** %head, align 4
  %3 = load %struct.sListEntry*, %struct.sListEntry** %ll.addr, align 4
  %4 = load %struct.sListIterator*, %struct.sListIterator** %liter, align 4
  %link = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %4, i32 0, i32 0
  store %struct.sListEntry* %3, %struct.sListEntry** %link, align 4
  %5 = load %struct.sListIterator*, %struct.sListIterator** %liter, align 4
  ret %struct.sListIterator* %5
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @LLI_AtEnd(%struct.sListIterator* %iter) #0 {
entry:
  %iter.addr = alloca %struct.sListIterator*, align 4
  store %struct.sListIterator* %iter, %struct.sListIterator** %iter.addr, align 4
  %0 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %0, i32 0, i32 0
  %1 = load %struct.sListEntry*, %struct.sListEntry** %link, align 4
  %cmp = icmp eq %struct.sListEntry* %1, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @LLI_Value(%struct.sListIterator* %iter) #0 {
entry:
  %iter.addr = alloca %struct.sListIterator*, align 4
  store %struct.sListIterator* %iter, %struct.sListIterator** %iter.addr, align 4
  %0 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %0, i32 0, i32 0
  %1 = load %struct.sListEntry*, %struct.sListEntry** %link, align 4
  %tobool = icmp ne %struct.sListEntry* %1, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link1 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %2, i32 0, i32 0
  %3 = load %struct.sListEntry*, %struct.sListEntry** %link1, align 4
  %value = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %3, i32 0, i32 0
  %4 = load i8*, i8** %value, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %4, %cond.true ], [ null, %cond.false ]
  ret i8* %cond
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @LLI_Next(%struct.sListIterator* %iter) #0 {
entry:
  %iter.addr = alloca %struct.sListIterator*, align 4
  store %struct.sListIterator* %iter, %struct.sListIterator** %iter.addr, align 4
  %0 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %0, i32 0, i32 0
  %1 = load %struct.sListEntry*, %struct.sListEntry** %link, align 4
  %tobool = icmp ne %struct.sListEntry* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link1 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %2, i32 0, i32 0
  %3 = load %struct.sListEntry*, %struct.sListEntry** %link1, align 4
  %next = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %3, i32 0, i32 1
  %4 = load %struct.sListEntry*, %struct.sListEntry** %next, align 4
  %5 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link2 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %5, i32 0, i32 0
  store %struct.sListEntry* %4, %struct.sListEntry** %link2, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link3 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %6, i32 0, i32 0
  %7 = load %struct.sListEntry*, %struct.sListEntry** %link3, align 4
  %cmp = icmp ne %struct.sListEntry* %7, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @LLI_Prev(%struct.sListIterator* %iter) #0 {
entry:
  %iter.addr = alloca %struct.sListIterator*, align 4
  store %struct.sListIterator* %iter, %struct.sListIterator** %iter.addr, align 4
  %0 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %0, i32 0, i32 0
  %1 = load %struct.sListEntry*, %struct.sListEntry** %link, align 4
  %tobool = icmp ne %struct.sListEntry* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link1 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %2, i32 0, i32 0
  %3 = load %struct.sListEntry*, %struct.sListEntry** %link1, align 4
  %prev = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %3, i32 0, i32 2
  %4 = load %struct.sListEntry*, %struct.sListEntry** %prev, align 4
  %5 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link2 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %5, i32 0, i32 0
  store %struct.sListEntry* %4, %struct.sListEntry** %link2, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link3 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %6, i32 0, i32 0
  %7 = load %struct.sListEntry*, %struct.sListEntry** %link3, align 4
  %cmp = icmp ne %struct.sListEntry* %7, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %ix = alloca i32, align 4
  %ll = alloca %struct.sListEntry*, align 4
  %iter = alloca %struct.sListIterator*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.sListEntry* @NewList()
  store %struct.sListEntry* %call, %struct.sListEntry** %ll, align 4
  store i32 0, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %ix, align 4
  %cmp = icmp slt i32 %0, 6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load %struct.sListEntry*, %struct.sListEntry** %ll, align 4
  %2 = load i32, i32* %ix, align 4
  %arrayidx = getelementptr inbounds [6 x i8*], [6 x i8*]* @main.contents, i32 0, i32 %2
  %3 = load i8*, i8** %arrayidx, align 4
  %call1 = call i32 @LL_Append(%struct.sListEntry* %1, i8* %3)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %5 = load %struct.sListEntry*, %struct.sListEntry** %ll, align 4
  %call2 = call %struct.sListIterator* @LL_GetIterator(%struct.sListEntry* %5)
  store %struct.sListIterator* %call2, %struct.sListIterator** %iter, align 4
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i32 0, i32 0))
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end
  %6 = load %struct.sListIterator*, %struct.sListIterator** %iter, align 4
  %call4 = call i32 @LLI_Next(%struct.sListIterator* %6)
  %tobool = icmp ne i32 %call4, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %7 = load %struct.sListIterator*, %struct.sListIterator** %iter, align 4
  %call5 = call i8* @LLI_Value(%struct.sListIterator* %7)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7, i32 0, i32 0), i8* %call5)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %8 = load %struct.sListIterator*, %struct.sListIterator** %iter, align 4
  %9 = bitcast %struct.sListIterator* %8 to i8*
  call void @free(i8* %9)
  store %struct.sListIterator* null, %struct.sListIterator** %iter, align 4
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8, i32 0, i32 0))
  %10 = load %struct.sListEntry*, %struct.sListEntry** %ll, align 4
  %call8 = call %struct.sListIterator* @LL_GetIterator(%struct.sListEntry* %10)
  store %struct.sListIterator* %call8, %struct.sListIterator** %iter, align 4
  br label %while.cond9

while.cond9:                                      ; preds = %while.body12, %while.end
  %11 = load %struct.sListIterator*, %struct.sListIterator** %iter, align 4
  %call10 = call i32 @LLI_Prev(%struct.sListIterator* %11)
  %tobool11 = icmp ne i32 %call10, 0
  br i1 %tobool11, label %while.body12, label %while.end15

while.body12:                                     ; preds = %while.cond9
  %12 = load %struct.sListIterator*, %struct.sListIterator** %iter, align 4
  %call13 = call i8* @LLI_Value(%struct.sListIterator* %12)
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7, i32 0, i32 0), i8* %call13)
  br label %while.cond9

while.end15:                                      ; preds = %while.cond9
  %13 = load %struct.sListIterator*, %struct.sListIterator** %iter, align 4
  %14 = bitcast %struct.sListIterator* %13 to i8*
  call void @free(i8* %14)
  store %struct.sListIterator* null, %struct.sListIterator** %iter, align 4
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

declare void @free(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %tobool = icmp ne %struct.sListEntry* %1, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp = icmp ne %struct.sListEntry* %7, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv = zext i1 %cmp to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i32 = zext %1
infer %2
#########################################################
; exiting Souper's runOnFunction() for LLI_Prev()

; entering Souper's runOnFunction() for main()

; ModuleID = './Doubly-linked_list-Traversal.c.bc'
source_filename = "./Doubly-linked_list-Traversal.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.sListEntry = type { i8*, %struct.sListEntry*, %struct.sListEntry* }
%struct.sListIterator = type { %struct.sListEntry*, %struct.sListEntry* }

@main.contents = internal global [6 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i32 0, i32 0)], align 16
@.str = private unnamed_addr constant [5 x i8] c"Read\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"Orage\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"Yeller\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"Glean\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"Blew\00", align 1
@.str.5 = private unnamed_addr constant [7 x i8] c"Burple\00", align 1
@.str.6 = private unnamed_addr constant [9 x i8] c"forward\0A\00", align 1
@.str.7 = private unnamed_addr constant [10 x i8] c"value=%s\0A\00", align 1
@.str.8 = private unnamed_addr constant [10 x i8] c"\0Areverse\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.sListEntry* @NewList() #0 {
entry:
  %le = alloca %struct.sListEntry*, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.sListEntry*
  store %struct.sListEntry* %0, %struct.sListEntry** %le, align 4
  %1 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %tobool = icmp ne %struct.sListEntry* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %value = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %2, i32 0, i32 0
  store i8* null, i8** %value, align 4
  %3 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %3, i32 0, i32 2
  store %struct.sListEntry* null, %struct.sListEntry** %prev, align 4
  %4 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %next = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %4, i32 0, i32 1
  store %struct.sListEntry* null, %struct.sListEntry** %next, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  ret %struct.sListEntry* %5
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @LL_Append(%struct.sListEntry* %ll, i8* %newVal) #0 {
entry:
  %ll.addr = alloca %struct.sListEntry*, align 4
  %newVal.addr = alloca i8*, align 4
  %le = alloca %struct.sListEntry*, align 4
  store %struct.sListEntry* %ll, %struct.sListEntry** %ll.addr, align 4
  store i8* %newVal, i8** %newVal.addr, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.sListEntry*
  store %struct.sListEntry* %0, %struct.sListEntry** %le, align 4
  %1 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %tobool = icmp ne %struct.sListEntry* %1, null
  br i1 %tobool, label %if.then, label %if.end10

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %newVal.addr, align 4
  %call1 = call i8* @strdup(i8* %2) #3
  %3 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %value = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %3, i32 0, i32 0
  store i8* %call1, i8** %value, align 4
  %4 = load %struct.sListEntry*, %struct.sListEntry** %ll.addr, align 4
  %prev = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %4, i32 0, i32 2
  %5 = load %struct.sListEntry*, %struct.sListEntry** %prev, align 4
  %6 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev2 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %6, i32 0, i32 2
  store %struct.sListEntry* %5, %struct.sListEntry** %prev2, align 4
  %7 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %next = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %7, i32 0, i32 1
  store %struct.sListEntry* null, %struct.sListEntry** %next, align 4
  %8 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev3 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %8, i32 0, i32 2
  %9 = load %struct.sListEntry*, %struct.sListEntry** %prev3, align 4
  %tobool4 = icmp ne %struct.sListEntry* %9, null
  br i1 %tobool4, label %if.then5, label %if.else

if.then5:                                         ; preds = %if.then
  %10 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %11 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev6 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %11, i32 0, i32 2
  %12 = load %struct.sListEntry*, %struct.sListEntry** %prev6, align 4
  %next7 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %12, i32 0, i32 1
  store %struct.sListEntry* %10, %struct.sListEntry** %next7, align 4
  br label %if.end

if.else:                                          ; preds = %if.then
  %13 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %14 = load %struct.sListEntry*, %struct.sListEntry** %ll.addr, align 4
  %next8 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %14, i32 0, i32 1
  store %struct.sListEntry* %13, %struct.sListEntry** %next8, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then5
  %15 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %16 = load %struct.sListEntry*, %struct.sListEntry** %ll.addr, align 4
  %prev9 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %16, i32 0, i32 2
  store %struct.sListEntry* %15, %struct.sListEntry** %prev9, align 4
  br label %if.end10

if.end10:                                         ; preds = %if.end, %entry
  %17 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %cmp = icmp ne %struct.sListEntry* %17, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: nounwind
declare i8* @strdup(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @LI_Insert(%struct.sListIterator* %iter, i8* %newVal) #0 {
entry:
  %iter.addr = alloca %struct.sListIterator*, align 4
  %newVal.addr = alloca i8*, align 4
  %crnt = alloca %struct.sListEntry*, align 4
  %le = alloca %struct.sListEntry*, align 4
  store %struct.sListIterator* %iter, %struct.sListIterator** %iter.addr, align 4
  store i8* %newVal, i8** %newVal.addr, align 4
  %0 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %0, i32 0, i32 0
  %1 = load %struct.sListEntry*, %struct.sListEntry** %link, align 4
  store %struct.sListEntry* %1, %struct.sListEntry** %crnt, align 4
  %call = call noalias i8* @malloc(i32 12)
  %2 = bitcast i8* %call to %struct.sListEntry*
  store %struct.sListEntry* %2, %struct.sListEntry** %le, align 4
  %3 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %tobool = icmp ne %struct.sListEntry* %3, null
  br i1 %tobool, label %if.then, label %if.end35

if.then:                                          ; preds = %entry
  %4 = load i8*, i8** %newVal.addr, align 4
  %call1 = call i8* @strdup(i8* %4) #3
  %5 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %value = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %5, i32 0, i32 0
  store i8* %call1, i8** %value, align 4
  %6 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %7 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %head = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %7, i32 0, i32 1
  %8 = load %struct.sListEntry*, %struct.sListEntry** %head, align 4
  %cmp = icmp eq %struct.sListEntry* %6, %8
  br i1 %cmp, label %if.then2, label %if.else11

if.then2:                                         ; preds = %if.then
  %9 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %9, i32 0, i32 2
  store %struct.sListEntry* null, %struct.sListEntry** %prev, align 4
  %10 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %next = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %10, i32 0, i32 1
  %11 = load %struct.sListEntry*, %struct.sListEntry** %next, align 4
  %12 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %next3 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %12, i32 0, i32 1
  store %struct.sListEntry* %11, %struct.sListEntry** %next3, align 4
  %13 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %14 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %next4 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %14, i32 0, i32 1
  store %struct.sListEntry* %13, %struct.sListEntry** %next4, align 4
  %15 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %next5 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %15, i32 0, i32 1
  %16 = load %struct.sListEntry*, %struct.sListEntry** %next5, align 4
  %tobool6 = icmp ne %struct.sListEntry* %16, null
  br i1 %tobool6, label %if.then7, label %if.else

if.then7:                                         ; preds = %if.then2
  %17 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %18 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %next8 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %18, i32 0, i32 1
  %19 = load %struct.sListEntry*, %struct.sListEntry** %next8, align 4
  %prev9 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %19, i32 0, i32 2
  store %struct.sListEntry* %17, %struct.sListEntry** %prev9, align 4
  br label %if.end

if.else:                                          ; preds = %if.then2
  %20 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %21 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %prev10 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %21, i32 0, i32 2
  store %struct.sListEntry* %20, %struct.sListEntry** %prev10, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then7
  br label %if.end34

if.else11:                                        ; preds = %if.then
  %22 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %cmp12 = icmp eq %struct.sListEntry* %22, null
  br i1 %cmp12, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else11
  %23 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %head13 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %23, i32 0, i32 1
  %24 = load %struct.sListEntry*, %struct.sListEntry** %head13, align 4
  %prev14 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %24, i32 0, i32 2
  %25 = load %struct.sListEntry*, %struct.sListEntry** %prev14, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.else11
  %26 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %prev15 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %26, i32 0, i32 2
  %27 = load %struct.sListEntry*, %struct.sListEntry** %prev15, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.sListEntry* [ %25, %cond.true ], [ %27, %cond.false ]
  %28 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev16 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %28, i32 0, i32 2
  store %struct.sListEntry* %cond, %struct.sListEntry** %prev16, align 4
  %29 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %30 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %next17 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %30, i32 0, i32 1
  store %struct.sListEntry* %29, %struct.sListEntry** %next17, align 4
  %31 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev18 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %31, i32 0, i32 2
  %32 = load %struct.sListEntry*, %struct.sListEntry** %prev18, align 4
  %tobool19 = icmp ne %struct.sListEntry* %32, null
  br i1 %tobool19, label %if.then20, label %if.else23

if.then20:                                        ; preds = %cond.end
  %33 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %34 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %prev21 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %34, i32 0, i32 2
  %35 = load %struct.sListEntry*, %struct.sListEntry** %prev21, align 4
  %next22 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %35, i32 0, i32 1
  store %struct.sListEntry* %33, %struct.sListEntry** %next22, align 4
  br label %if.end26

if.else23:                                        ; preds = %cond.end
  %36 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %37 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %head24 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %37, i32 0, i32 1
  %38 = load %struct.sListEntry*, %struct.sListEntry** %head24, align 4
  %next25 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %38, i32 0, i32 1
  store %struct.sListEntry* %36, %struct.sListEntry** %next25, align 4
  br label %if.end26

if.end26:                                         ; preds = %if.else23, %if.then20
  %39 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %tobool27 = icmp ne %struct.sListEntry* %39, null
  br i1 %tobool27, label %if.then28, label %if.else30

if.then28:                                        ; preds = %if.end26
  %40 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %41 = load %struct.sListEntry*, %struct.sListEntry** %crnt, align 4
  %prev29 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %41, i32 0, i32 2
  store %struct.sListEntry* %40, %struct.sListEntry** %prev29, align 4
  br label %if.end33

if.else30:                                        ; preds = %if.end26
  %42 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %43 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %head31 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %43, i32 0, i32 1
  %44 = load %struct.sListEntry*, %struct.sListEntry** %head31, align 4
  %prev32 = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %44, i32 0, i32 2
  store %struct.sListEntry* %42, %struct.sListEntry** %prev32, align 4
  br label %if.end33

if.end33:                                         ; preds = %if.else30, %if.then28
  br label %if.end34

if.end34:                                         ; preds = %if.end33, %if.end
  br label %if.end35

if.end35:                                         ; preds = %if.end34, %entry
  %45 = load %struct.sListEntry*, %struct.sListEntry** %le, align 4
  %cmp36 = icmp ne %struct.sListEntry* %45, null
  %conv = zext i1 %cmp36 to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.sListIterator* @LL_GetIterator(%struct.sListEntry* %ll) #0 {
entry:
  %ll.addr = alloca %struct.sListEntry*, align 4
  %liter = alloca %struct.sListIterator*, align 4
  store %struct.sListEntry* %ll, %struct.sListEntry** %ll.addr, align 4
  %call = call noalias i8* @malloc(i32 8)
  %0 = bitcast i8* %call to %struct.sListIterator*
  store %struct.sListIterator* %0, %struct.sListIterator** %liter, align 4
  %1 = load %struct.sListEntry*, %struct.sListEntry** %ll.addr, align 4
  %2 = load %struct.sListIterator*, %struct.sListIterator** %liter, align 4
  %head = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %2, i32 0, i32 1
  store %struct.sListEntry* %1, %struct.sListEntry** %head, align 4
  %3 = load %struct.sListEntry*, %struct.sListEntry** %ll.addr, align 4
  %4 = load %struct.sListIterator*, %struct.sListIterator** %liter, align 4
  %link = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %4, i32 0, i32 0
  store %struct.sListEntry* %3, %struct.sListEntry** %link, align 4
  %5 = load %struct.sListIterator*, %struct.sListIterator** %liter, align 4
  ret %struct.sListIterator* %5
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @LLI_AtEnd(%struct.sListIterator* %iter) #0 {
entry:
  %iter.addr = alloca %struct.sListIterator*, align 4
  store %struct.sListIterator* %iter, %struct.sListIterator** %iter.addr, align 4
  %0 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %0, i32 0, i32 0
  %1 = load %struct.sListEntry*, %struct.sListEntry** %link, align 4
  %cmp = icmp eq %struct.sListEntry* %1, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @LLI_Value(%struct.sListIterator* %iter) #0 {
entry:
  %iter.addr = alloca %struct.sListIterator*, align 4
  store %struct.sListIterator* %iter, %struct.sListIterator** %iter.addr, align 4
  %0 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %0, i32 0, i32 0
  %1 = load %struct.sListEntry*, %struct.sListEntry** %link, align 4
  %tobool = icmp ne %struct.sListEntry* %1, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link1 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %2, i32 0, i32 0
  %3 = load %struct.sListEntry*, %struct.sListEntry** %link1, align 4
  %value = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %3, i32 0, i32 0
  %4 = load i8*, i8** %value, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %4, %cond.true ], [ null, %cond.false ]
  ret i8* %cond
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @LLI_Next(%struct.sListIterator* %iter) #0 {
entry:
  %iter.addr = alloca %struct.sListIterator*, align 4
  store %struct.sListIterator* %iter, %struct.sListIterator** %iter.addr, align 4
  %0 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %0, i32 0, i32 0
  %1 = load %struct.sListEntry*, %struct.sListEntry** %link, align 4
  %tobool = icmp ne %struct.sListEntry* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link1 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %2, i32 0, i32 0
  %3 = load %struct.sListEntry*, %struct.sListEntry** %link1, align 4
  %next = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %3, i32 0, i32 1
  %4 = load %struct.sListEntry*, %struct.sListEntry** %next, align 4
  %5 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link2 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %5, i32 0, i32 0
  store %struct.sListEntry* %4, %struct.sListEntry** %link2, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link3 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %6, i32 0, i32 0
  %7 = load %struct.sListEntry*, %struct.sListEntry** %link3, align 4
  %cmp = icmp ne %struct.sListEntry* %7, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @LLI_Prev(%struct.sListIterator* %iter) #0 {
entry:
  %iter.addr = alloca %struct.sListIterator*, align 4
  store %struct.sListIterator* %iter, %struct.sListIterator** %iter.addr, align 4
  %0 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %0, i32 0, i32 0
  %1 = load %struct.sListEntry*, %struct.sListEntry** %link, align 4
  %tobool = icmp ne %struct.sListEntry* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link1 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %2, i32 0, i32 0
  %3 = load %struct.sListEntry*, %struct.sListEntry** %link1, align 4
  %prev = getelementptr inbounds %struct.sListEntry, %struct.sListEntry* %3, i32 0, i32 2
  %4 = load %struct.sListEntry*, %struct.sListEntry** %prev, align 4
  %5 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link2 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %5, i32 0, i32 0
  store %struct.sListEntry* %4, %struct.sListEntry** %link2, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.sListIterator*, %struct.sListIterator** %iter.addr, align 4
  %link3 = getelementptr inbounds %struct.sListIterator, %struct.sListIterator* %6, i32 0, i32 0
  %7 = load %struct.sListEntry*, %struct.sListEntry** %link3, align 4
  %cmp = icmp ne %struct.sListEntry* %7, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %ix = alloca i32, align 4
  %ll = alloca %struct.sListEntry*, align 4
  %iter = alloca %struct.sListIterator*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.sListEntry* @NewList()
  store %struct.sListEntry* %call, %struct.sListEntry** %ll, align 4
  store i32 0, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %ix, align 4
  %cmp = icmp slt i32 %0, 6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load %struct.sListEntry*, %struct.sListEntry** %ll, align 4
  %2 = load i32, i32* %ix, align 4
  %arrayidx = getelementptr inbounds [6 x i8*], [6 x i8*]* @main.contents, i32 0, i32 %2
  %3 = load i8*, i8** %arrayidx, align 4
  %call1 = call i32 @LL_Append(%struct.sListEntry* %1, i8* %3)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %ix, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %ix, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %5 = load %struct.sListEntry*, %struct.sListEntry** %ll, align 4
  %call2 = call %struct.sListIterator* @LL_GetIterator(%struct.sListEntry* %5)
  store %struct.sListIterator* %call2, %struct.sListIterator** %iter, align 4
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i32 0, i32 0))
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end
  %6 = load %struct.sListIterator*, %struct.sListIterator** %iter, align 4
  %call4 = call i32 @LLI_Next(%struct.sListIterator* %6)
  %tobool = icmp ne i32 %call4, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %7 = load %struct.sListIterator*, %struct.sListIterator** %iter, align 4
  %call5 = call i8* @LLI_Value(%struct.sListIterator* %7)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7, i32 0, i32 0), i8* %call5)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %8 = load %struct.sListIterator*, %struct.sListIterator** %iter, align 4
  %9 = bitcast %struct.sListIterator* %8 to i8*
  call void @free(i8* %9)
  store %struct.sListIterator* null, %struct.sListIterator** %iter, align 4
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8, i32 0, i32 0))
  %10 = load %struct.sListEntry*, %struct.sListEntry** %ll, align 4
  %call8 = call %struct.sListIterator* @LL_GetIterator(%struct.sListEntry* %10)
  store %struct.sListIterator* %call8, %struct.sListIterator** %iter, align 4
  br label %while.cond9

while.cond9:                                      ; preds = %while.body12, %while.end
  %11 = load %struct.sListIterator*, %struct.sListIterator** %iter, align 4
  %call10 = call i32 @LLI_Prev(%struct.sListIterator* %11)
  %tobool11 = icmp ne i32 %call10, 0
  br i1 %tobool11, label %while.body12, label %while.end15

while.body12:                                     ; preds = %while.cond9
  %12 = load %struct.sListIterator*, %struct.sListIterator** %iter, align 4
  %call13 = call i8* @LLI_Value(%struct.sListIterator* %12)
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7, i32 0, i32 0), i8* %call13)
  br label %while.cond9

while.end15:                                      ; preds = %while.cond9
  %13 = load %struct.sListIterator*, %struct.sListIterator** %iter, align 4
  %14 = bitcast %struct.sListIterator* %13 to i8*
  call void @free(i8* %14)
  store %struct.sListIterator* null, %struct.sListIterator** %iter, align 4
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

declare void @free(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %ix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, 6
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 6:i32
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %ix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %ix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %4, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call4 = call i32 @LLI_Next(%struct.sListIterator* %6)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %call4, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call10 = call i32 @LLI_Prev(%struct.sListIterator* %11)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool11 = icmp ne i32 %call10, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 6:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
