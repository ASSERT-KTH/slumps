
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for find_group()

; ModuleID = './Ramseys_theorem.c.bc'
source_filename = "./Ramseys_theorem.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [27 x i8] c"totally %sconnected group:\00", align 1
@.str.1 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"un\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c" %d\00", align 1
@idx = hidden global [4 x i32] zeroinitializer, align 16
@a = hidden global [17 x [17 x i32]] zeroinitializer, align 16
@.str.4 = private unnamed_addr constant [4 x i8] c"01-\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"%c \00", align 1
@.str.6 = private unnamed_addr constant [8 x i8] c"no good\00", align 1
@.str.7 = private unnamed_addr constant [9 x i8] c"all good\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @find_group(i32 %type, i32 %min_n, i32 %max_n, i32 %depth) #0 {
entry:
  %retval = alloca i32, align 4
  %type.addr = alloca i32, align 4
  %min_n.addr = alloca i32, align 4
  %max_n.addr = alloca i32, align 4
  %depth.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  store i32 %type, i32* %type.addr, align 4
  store i32 %min_n, i32* %min_n.addr, align 4
  store i32 %max_n, i32* %max_n.addr, align 4
  store i32 %depth, i32* %depth.addr, align 4
  %0 = load i32, i32* %depth.addr, align 4
  %cmp = icmp eq i32 %0, 4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %type.addr, align 4
  %tobool = icmp ne i32 %1, 0
  %2 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0)
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i32 0, i32 0), i8* %cond)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %3 = load i32, i32* %i, align 4
  %cmp1 = icmp slt i32 %3, 4
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* @idx, i32 0, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i32 0, i32 0), i32 %5)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call3 = call i32 @putchar(i32 10)
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %7 = load i32, i32* %min_n.addr, align 4
  store i32 %7, i32* %i, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc27, %if.end
  %8 = load i32, i32* %i, align 4
  %9 = load i32, i32* %max_n.addr, align 4
  %cmp5 = icmp slt i32 %8, %9
  br i1 %cmp5, label %for.body6, label %for.end29

for.body6:                                        ; preds = %for.cond4
  store i32 0, i32* %n, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc16, %for.body6
  %10 = load i32, i32* %n, align 4
  %11 = load i32, i32* %depth.addr, align 4
  %cmp8 = icmp slt i32 %10, %11
  br i1 %cmp8, label %for.body9, label %for.end18

for.body9:                                        ; preds = %for.cond7
  %12 = load i32, i32* %n, align 4
  %arrayidx10 = getelementptr inbounds [4 x i32], [4 x i32]* @idx, i32 0, i32 %12
  %13 = load i32, i32* %arrayidx10, align 4
  %arrayidx11 = getelementptr inbounds [17 x [17 x i32]], [17 x [17 x i32]]* @a, i32 0, i32 %13
  %14 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds [17 x i32], [17 x i32]* %arrayidx11, i32 0, i32 %14
  %15 = load i32, i32* %arrayidx12, align 4
  %16 = load i32, i32* %type.addr, align 4
  %cmp13 = icmp ne i32 %15, %16
  br i1 %cmp13, label %if.then14, label %if.end15

if.then14:                                        ; preds = %for.body9
  br label %for.end18

if.end15:                                         ; preds = %for.body9
  br label %for.inc16

for.inc16:                                        ; preds = %if.end15
  %17 = load i32, i32* %n, align 4
  %inc17 = add nsw i32 %17, 1
  store i32 %inc17, i32* %n, align 4
  br label %for.cond7

for.end18:                                        ; preds = %if.then14, %for.cond7
  %18 = load i32, i32* %n, align 4
  %19 = load i32, i32* %depth.addr, align 4
  %cmp19 = icmp eq i32 %18, %19
  br i1 %cmp19, label %if.then20, label %if.end26

if.then20:                                        ; preds = %for.end18
  %20 = load i32, i32* %i, align 4
  %21 = load i32, i32* %n, align 4
  %arrayidx21 = getelementptr inbounds [4 x i32], [4 x i32]* @idx, i32 0, i32 %21
  store i32 %20, i32* %arrayidx21, align 4
  %22 = load i32, i32* %type.addr, align 4
  %23 = load i32, i32* %max_n.addr, align 4
  %24 = load i32, i32* %depth.addr, align 4
  %add = add nsw i32 %24, 1
  %call22 = call i32 @find_group(i32 %22, i32 1, i32 %23, i32 %add)
  %tobool23 = icmp ne i32 %call22, 0
  br i1 %tobool23, label %if.then24, label %if.end25

if.then24:                                        ; preds = %if.then20
  store i32 1, i32* %retval, align 4
  br label %return

if.end25:                                         ; preds = %if.then20
  br label %if.end26

if.end26:                                         ; preds = %if.end25, %for.end18
  br label %for.inc27

for.inc27:                                        ; preds = %if.end26
  %25 = load i32, i32* %i, align 4
  %inc28 = add nsw i32 %25, 1
  store i32 %inc28, i32* %i, align 4
  br label %for.cond4

for.end29:                                        ; preds = %for.cond4
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end29, %if.then24, %for.end
  %26 = load i32, i32* %retval, align 4
  ret i32 %26
}

declare i32 @printf(i8* %0, ...) #1

declare i32 @putchar(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %mark = alloca i8*, align 4
  store i32 0, i32* %retval, align 4
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), i8** %mark, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 17
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [17 x [17 x i32]], [17 x [17 x i32]]* @a, i32 0, i32 %1
  %2 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [17 x i32], [17 x i32]* %arrayidx, i32 0, i32 %2
  store i32 2, i32* %arrayidx1, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %3 = load i32, i32* %i, align 4
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %k, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc15, %for.end
  %4 = load i32, i32* %k, align 4
  %cmp3 = icmp sle i32 %4, 8
  br i1 %cmp3, label %for.body4, label %for.end16

for.body4:                                        ; preds = %for.cond2
  store i32 0, i32* %i, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc12, %for.body4
  %5 = load i32, i32* %i, align 4
  %cmp6 = icmp slt i32 %5, 17
  br i1 %cmp6, label %for.body7, label %for.end14

for.body7:                                        ; preds = %for.cond5
  %6 = load i32, i32* %i, align 4
  %7 = load i32, i32* %k, align 4
  %add = add nsw i32 %6, %7
  %rem = srem i32 %add, 17
  store i32 %rem, i32* %j, align 4
  %8 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds [17 x [17 x i32]], [17 x [17 x i32]]* @a, i32 0, i32 %8
  %9 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds [17 x i32], [17 x i32]* %arrayidx8, i32 0, i32 %9
  store i32 1, i32* %arrayidx9, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds [17 x [17 x i32]], [17 x [17 x i32]]* @a, i32 0, i32 %10
  %11 = load i32, i32* %j, align 4
  %arrayidx11 = getelementptr inbounds [17 x i32], [17 x i32]* %arrayidx10, i32 0, i32 %11
  store i32 1, i32* %arrayidx11, align 4
  br label %for.inc12

for.inc12:                                        ; preds = %for.body7
  %12 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %12, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond5

for.end14:                                        ; preds = %for.cond5
  br label %for.inc15

for.inc15:                                        ; preds = %for.end14
  %13 = load i32, i32* %k, align 4
  %shl = shl i32 %13, 1
  store i32 %shl, i32* %k, align 4
  br label %for.cond2

for.end16:                                        ; preds = %for.cond2
  store i32 0, i32* %i, align 4
  br label %for.cond17

for.cond17:                                       ; preds = %for.inc30, %for.end16
  %14 = load i32, i32* %i, align 4
  %cmp18 = icmp slt i32 %14, 17
  br i1 %cmp18, label %for.body19, label %for.end32

for.body19:                                       ; preds = %for.cond17
  store i32 0, i32* %j, align 4
  br label %for.cond20

for.cond20:                                       ; preds = %for.inc26, %for.body19
  %15 = load i32, i32* %j, align 4
  %cmp21 = icmp slt i32 %15, 17
  br i1 %cmp21, label %for.body22, label %for.end28

for.body22:                                       ; preds = %for.cond20
  %16 = load i8*, i8** %mark, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx23 = getelementptr inbounds [17 x [17 x i32]], [17 x [17 x i32]]* @a, i32 0, i32 %17
  %18 = load i32, i32* %j, align 4
  %arrayidx24 = getelementptr inbounds [17 x i32], [17 x i32]* %arrayidx23, i32 0, i32 %18
  %19 = load i32, i32* %arrayidx24, align 4
  %arrayidx25 = getelementptr inbounds i8, i8* %16, i32 %19
  %20 = load i8, i8* %arrayidx25, align 1
  %conv = sext i8 %20 to i32
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 %conv)
  br label %for.inc26

for.inc26:                                        ; preds = %for.body22
  %21 = load i32, i32* %j, align 4
  %inc27 = add nsw i32 %21, 1
  store i32 %inc27, i32* %j, align 4
  br label %for.cond20

for.end28:                                        ; preds = %for.cond20
  %call29 = call i32 @putchar(i32 10)
  br label %for.inc30

for.inc30:                                        ; preds = %for.end28
  %22 = load i32, i32* %i, align 4
  %inc31 = add nsw i32 %22, 1
  store i32 %inc31, i32* %i, align 4
  br label %for.cond17

for.end32:                                        ; preds = %for.cond17
  store i32 0, i32* %i, align 4
  br label %for.cond33

for.cond33:                                       ; preds = %for.inc43, %for.end32
  %23 = load i32, i32* %i, align 4
  %cmp34 = icmp slt i32 %23, 17
  br i1 %cmp34, label %for.body36, label %for.end45

for.body36:                                       ; preds = %for.cond33
  %24 = load i32, i32* %i, align 4
  store i32 %24, i32* getelementptr inbounds ([4 x i32], [4 x i32]* @idx, i32 0, i32 0), align 16
  %25 = load i32, i32* %i, align 4
  %add37 = add nsw i32 %25, 1
  %call38 = call i32 @find_group(i32 1, i32 %add37, i32 17, i32 1)
  %tobool = icmp ne i32 %call38, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body36
  %26 = load i32, i32* %i, align 4
  %add39 = add nsw i32 %26, 1
  %call40 = call i32 @find_group(i32 0, i32 %add39, i32 17, i32 1)
  %tobool41 = icmp ne i32 %call40, 0
  br i1 %tobool41, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %for.body36
  %call42 = call i32 @puts(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i32 0, i32 0))
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  br label %for.inc43

for.inc43:                                        ; preds = %if.end
  %27 = load i32, i32* %i, align 4
  %inc44 = add nsw i32 %27, 1
  store i32 %inc44, i32* %i, align 4
  br label %for.cond33

for.end45:                                        ; preds = %for.cond33
  %call46 = call i32 @puts(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i32 0, i32 0))
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end45, %if.then
  %28 = load i32, i32* %retval, align 4
  ret i32 %28
}

declare i32 @puts(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %depth.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %0, 4
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %type.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %1, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = icmp slt i32 %3, 4
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 4:i32
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %6, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %min_n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %max_n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp5 = icmp slt i32 %8, %9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %depth.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp8 = icmp slt i32 %10, %11
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %arrayidx10, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %arrayidx12, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %type.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp13 = icmp ne i32 %15, %16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc17 = add nsw i32 %17, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %depth.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp19 = icmp eq i32 %18, %19
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %type.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %max_n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %depth.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %24, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call22 = call i32 @find_group(i32 %22, i32 1, i32 %23, i32 %add)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool23 = icmp ne i32 %call22, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc28 = add nsw i32 %25, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 4:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 4:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for find_group()

; entering Souper's runOnFunction() for main()

; ModuleID = './Ramseys_theorem.c.bc'
source_filename = "./Ramseys_theorem.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [27 x i8] c"totally %sconnected group:\00", align 1
@.str.1 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"un\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c" %d\00", align 1
@idx = hidden global [4 x i32] zeroinitializer, align 16
@a = hidden global [17 x [17 x i32]] zeroinitializer, align 16
@.str.4 = private unnamed_addr constant [4 x i8] c"01-\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"%c \00", align 1
@.str.6 = private unnamed_addr constant [8 x i8] c"no good\00", align 1
@.str.7 = private unnamed_addr constant [9 x i8] c"all good\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @find_group(i32 %type, i32 %min_n, i32 %max_n, i32 %depth) #0 {
entry:
  %retval = alloca i32, align 4
  %type.addr = alloca i32, align 4
  %min_n.addr = alloca i32, align 4
  %max_n.addr = alloca i32, align 4
  %depth.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  store i32 %type, i32* %type.addr, align 4
  store i32 %min_n, i32* %min_n.addr, align 4
  store i32 %max_n, i32* %max_n.addr, align 4
  store i32 %depth, i32* %depth.addr, align 4
  %0 = load i32, i32* %depth.addr, align 4
  %cmp = icmp eq i32 %0, 4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %type.addr, align 4
  %tobool = icmp ne i32 %1, 0
  %2 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0)
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i32 0, i32 0), i8* %cond)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %3 = load i32, i32* %i, align 4
  %cmp1 = icmp slt i32 %3, 4
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* @idx, i32 0, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i32 0, i32 0), i32 %5)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call3 = call i32 @putchar(i32 10)
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %7 = load i32, i32* %min_n.addr, align 4
  store i32 %7, i32* %i, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc27, %if.end
  %8 = load i32, i32* %i, align 4
  %9 = load i32, i32* %max_n.addr, align 4
  %cmp5 = icmp slt i32 %8, %9
  br i1 %cmp5, label %for.body6, label %for.end29

for.body6:                                        ; preds = %for.cond4
  store i32 0, i32* %n, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc16, %for.body6
  %10 = load i32, i32* %n, align 4
  %11 = load i32, i32* %depth.addr, align 4
  %cmp8 = icmp slt i32 %10, %11
  br i1 %cmp8, label %for.body9, label %for.end18

for.body9:                                        ; preds = %for.cond7
  %12 = load i32, i32* %n, align 4
  %arrayidx10 = getelementptr inbounds [4 x i32], [4 x i32]* @idx, i32 0, i32 %12
  %13 = load i32, i32* %arrayidx10, align 4
  %arrayidx11 = getelementptr inbounds [17 x [17 x i32]], [17 x [17 x i32]]* @a, i32 0, i32 %13
  %14 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds [17 x i32], [17 x i32]* %arrayidx11, i32 0, i32 %14
  %15 = load i32, i32* %arrayidx12, align 4
  %16 = load i32, i32* %type.addr, align 4
  %cmp13 = icmp ne i32 %15, %16
  br i1 %cmp13, label %if.then14, label %if.end15

if.then14:                                        ; preds = %for.body9
  br label %for.end18

if.end15:                                         ; preds = %for.body9
  br label %for.inc16

for.inc16:                                        ; preds = %if.end15
  %17 = load i32, i32* %n, align 4
  %inc17 = add nsw i32 %17, 1
  store i32 %inc17, i32* %n, align 4
  br label %for.cond7

for.end18:                                        ; preds = %if.then14, %for.cond7
  %18 = load i32, i32* %n, align 4
  %19 = load i32, i32* %depth.addr, align 4
  %cmp19 = icmp eq i32 %18, %19
  br i1 %cmp19, label %if.then20, label %if.end26

if.then20:                                        ; preds = %for.end18
  %20 = load i32, i32* %i, align 4
  %21 = load i32, i32* %n, align 4
  %arrayidx21 = getelementptr inbounds [4 x i32], [4 x i32]* @idx, i32 0, i32 %21
  store i32 %20, i32* %arrayidx21, align 4
  %22 = load i32, i32* %type.addr, align 4
  %23 = load i32, i32* %max_n.addr, align 4
  %24 = load i32, i32* %depth.addr, align 4
  %add = add nsw i32 %24, 1
  %call22 = call i32 @find_group(i32 %22, i32 1, i32 %23, i32 %add)
  %tobool23 = icmp ne i32 %call22, 0
  br i1 %tobool23, label %if.then24, label %if.end25

if.then24:                                        ; preds = %if.then20
  store i32 1, i32* %retval, align 4
  br label %return

if.end25:                                         ; preds = %if.then20
  br label %if.end26

if.end26:                                         ; preds = %if.end25, %for.end18
  br label %for.inc27

for.inc27:                                        ; preds = %if.end26
  %25 = load i32, i32* %i, align 4
  %inc28 = add nsw i32 %25, 1
  store i32 %inc28, i32* %i, align 4
  br label %for.cond4

for.end29:                                        ; preds = %for.cond4
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end29, %if.then24, %for.end
  %26 = load i32, i32* %retval, align 4
  ret i32 %26
}

declare i32 @printf(i8* %0, ...) #1

declare i32 @putchar(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %mark = alloca i8*, align 4
  store i32 0, i32* %retval, align 4
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), i8** %mark, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 17
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [17 x [17 x i32]], [17 x [17 x i32]]* @a, i32 0, i32 %1
  %2 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [17 x i32], [17 x i32]* %arrayidx, i32 0, i32 %2
  store i32 2, i32* %arrayidx1, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %3 = load i32, i32* %i, align 4
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %k, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc15, %for.end
  %4 = load i32, i32* %k, align 4
  %cmp3 = icmp sle i32 %4, 8
  br i1 %cmp3, label %for.body4, label %for.end16

for.body4:                                        ; preds = %for.cond2
  store i32 0, i32* %i, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc12, %for.body4
  %5 = load i32, i32* %i, align 4
  %cmp6 = icmp slt i32 %5, 17
  br i1 %cmp6, label %for.body7, label %for.end14

for.body7:                                        ; preds = %for.cond5
  %6 = load i32, i32* %i, align 4
  %7 = load i32, i32* %k, align 4
  %add = add nsw i32 %6, %7
  %rem = srem i32 %add, 17
  store i32 %rem, i32* %j, align 4
  %8 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds [17 x [17 x i32]], [17 x [17 x i32]]* @a, i32 0, i32 %8
  %9 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds [17 x i32], [17 x i32]* %arrayidx8, i32 0, i32 %9
  store i32 1, i32* %arrayidx9, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds [17 x [17 x i32]], [17 x [17 x i32]]* @a, i32 0, i32 %10
  %11 = load i32, i32* %j, align 4
  %arrayidx11 = getelementptr inbounds [17 x i32], [17 x i32]* %arrayidx10, i32 0, i32 %11
  store i32 1, i32* %arrayidx11, align 4
  br label %for.inc12

for.inc12:                                        ; preds = %for.body7
  %12 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %12, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond5

for.end14:                                        ; preds = %for.cond5
  br label %for.inc15

for.inc15:                                        ; preds = %for.end14
  %13 = load i32, i32* %k, align 4
  %shl = shl i32 %13, 1
  store i32 %shl, i32* %k, align 4
  br label %for.cond2

for.end16:                                        ; preds = %for.cond2
  store i32 0, i32* %i, align 4
  br label %for.cond17

for.cond17:                                       ; preds = %for.inc30, %for.end16
  %14 = load i32, i32* %i, align 4
  %cmp18 = icmp slt i32 %14, 17
  br i1 %cmp18, label %for.body19, label %for.end32

for.body19:                                       ; preds = %for.cond17
  store i32 0, i32* %j, align 4
  br label %for.cond20

for.cond20:                                       ; preds = %for.inc26, %for.body19
  %15 = load i32, i32* %j, align 4
  %cmp21 = icmp slt i32 %15, 17
  br i1 %cmp21, label %for.body22, label %for.end28

for.body22:                                       ; preds = %for.cond20
  %16 = load i8*, i8** %mark, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx23 = getelementptr inbounds [17 x [17 x i32]], [17 x [17 x i32]]* @a, i32 0, i32 %17
  %18 = load i32, i32* %j, align 4
  %arrayidx24 = getelementptr inbounds [17 x i32], [17 x i32]* %arrayidx23, i32 0, i32 %18
  %19 = load i32, i32* %arrayidx24, align 4
  %arrayidx25 = getelementptr inbounds i8, i8* %16, i32 %19
  %20 = load i8, i8* %arrayidx25, align 1
  %conv = sext i8 %20 to i32
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 %conv)
  br label %for.inc26

for.inc26:                                        ; preds = %for.body22
  %21 = load i32, i32* %j, align 4
  %inc27 = add nsw i32 %21, 1
  store i32 %inc27, i32* %j, align 4
  br label %for.cond20

for.end28:                                        ; preds = %for.cond20
  %call29 = call i32 @putchar(i32 10)
  br label %for.inc30

for.inc30:                                        ; preds = %for.end28
  %22 = load i32, i32* %i, align 4
  %inc31 = add nsw i32 %22, 1
  store i32 %inc31, i32* %i, align 4
  br label %for.cond17

for.end32:                                        ; preds = %for.cond17
  store i32 0, i32* %i, align 4
  br label %for.cond33

for.cond33:                                       ; preds = %for.inc43, %for.end32
  %23 = load i32, i32* %i, align 4
  %cmp34 = icmp slt i32 %23, 17
  br i1 %cmp34, label %for.body36, label %for.end45

for.body36:                                       ; preds = %for.cond33
  %24 = load i32, i32* %i, align 4
  store i32 %24, i32* getelementptr inbounds ([4 x i32], [4 x i32]* @idx, i32 0, i32 0), align 16
  %25 = load i32, i32* %i, align 4
  %add37 = add nsw i32 %25, 1
  %call38 = call i32 @find_group(i32 1, i32 %add37, i32 17, i32 1)
  %tobool = icmp ne i32 %call38, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body36
  %26 = load i32, i32* %i, align 4
  %add39 = add nsw i32 %26, 1
  %call40 = call i32 @find_group(i32 0, i32 %add39, i32 17, i32 1)
  %tobool41 = icmp ne i32 %call40, 0
  br i1 %tobool41, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %for.body36
  %call42 = call i32 @puts(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i32 0, i32 0))
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  br label %for.inc43

for.inc43:                                        ; preds = %if.end
  %27 = load i32, i32* %i, align 4
  %inc44 = add nsw i32 %27, 1
  store i32 %inc44, i32* %i, align 4
  br label %for.cond33

for.end45:                                        ; preds = %for.cond33
  %call46 = call i32 @puts(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i32 0, i32 0))
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end45, %if.then
  %28 = load i32, i32* %retval, align 4
  ret i32 %28
}

declare i32 @puts(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, 17
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 17:i32
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %3, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp3 = icmp sle i32 %4, 8
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle %0, 8:i32
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp6 = icmp slt i32 %5, 17
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 17:i32
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %6, %7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %rem = srem i32 %add, 17
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
%3:i32 = srem %2, 17:i32
infer %3

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc13 = add nsw i32 %12, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=01111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %shl = shl i32 %13, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp18 = icmp slt i32 %14, 17
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 17:i32
infer %1

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp21 = icmp slt i32 %15, 17
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 17:i32
infer %1

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %arrayidx24, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i8, i8* %arrayidx25, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %20 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc27 = add nsw i32 %21, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc31 = add nsw i32 %22, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp34 = icmp slt i32 %23, 17
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 17:i32
infer %1

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add37 = add nsw i32 %25, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call38 = call i32 @find_group(i32 1, i32 %add37, i32 17, i32 1)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %call38, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add39 = add nsw i32 %26, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call40 = call i32 @find_group(i32 0, i32 %add39, i32 17, i32 1)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool41 = icmp ne i32 %call40, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc44 = add nsw i32 %27, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 17:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle %0, 8:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
%3:i32 = srem %2, 17:i32
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -16
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0 (demandedBits=01111111111111111111111111111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147483647
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = shl %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
