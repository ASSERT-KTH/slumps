
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for qselect()

; ModuleID = './Quickselect_algorithm.c.bc'
source_filename = "./Quickselect_algorithm.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@__const.main.x = private unnamed_addr constant [10 x i32] [i32 9, i32 8, i32 7, i32 6, i32 5, i32 0, i32 1, i32 2, i32 3, i32 4], align 16
@.str = private unnamed_addr constant [8 x i8] c"%d: %d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @qselect(i32* %v, i32 %len, i32 %k) #0 {
entry:
  %v.addr = alloca i32*, align 4
  %len.addr = alloca i32, align 4
  %k.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %st = alloca i32, align 4
  %tmp = alloca i32, align 4
  store i32* %v, i32** %v.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %k, i32* %k.addr, align 4
  store i32 0, i32* %i, align 4
  store i32 0, i32* %st, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %len.addr, align 4
  %sub = sub nsw i32 %1, 1
  %cmp = icmp slt i32 %0, %sub
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32*, i32** %v.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %2, i32 %3
  %4 = load i32, i32* %arrayidx, align 4
  %5 = load i32*, i32** %v.addr, align 4
  %6 = load i32, i32* %len.addr, align 4
  %sub1 = sub nsw i32 %6, 1
  %arrayidx2 = getelementptr inbounds i32, i32* %5, i32 %sub1
  %7 = load i32, i32* %arrayidx2, align 4
  %cmp3 = icmp sgt i32 %4, %7
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.inc

if.end:                                           ; preds = %for.body
  %8 = load i32*, i32** %v.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %8, i32 %9
  %10 = load i32, i32* %arrayidx4, align 4
  store i32 %10, i32* %tmp, align 4
  %11 = load i32*, i32** %v.addr, align 4
  %12 = load i32, i32* %st, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %11, i32 %12
  %13 = load i32, i32* %arrayidx5, align 4
  %14 = load i32*, i32** %v.addr, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds i32, i32* %14, i32 %15
  store i32 %13, i32* %arrayidx6, align 4
  %16 = load i32, i32* %tmp, align 4
  %17 = load i32*, i32** %v.addr, align 4
  %18 = load i32, i32* %st, align 4
  %arrayidx7 = getelementptr inbounds i32, i32* %17, i32 %18
  store i32 %16, i32* %arrayidx7, align 4
  %19 = load i32, i32* %st, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %st, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end, %if.then
  %20 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %20, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %21 = load i32*, i32** %v.addr, align 4
  %22 = load i32, i32* %len.addr, align 4
  %sub9 = sub nsw i32 %22, 1
  %arrayidx10 = getelementptr inbounds i32, i32* %21, i32 %sub9
  %23 = load i32, i32* %arrayidx10, align 4
  store i32 %23, i32* %tmp, align 4
  %24 = load i32*, i32** %v.addr, align 4
  %25 = load i32, i32* %st, align 4
  %arrayidx11 = getelementptr inbounds i32, i32* %24, i32 %25
  %26 = load i32, i32* %arrayidx11, align 4
  %27 = load i32*, i32** %v.addr, align 4
  %28 = load i32, i32* %len.addr, align 4
  %sub12 = sub nsw i32 %28, 1
  %arrayidx13 = getelementptr inbounds i32, i32* %27, i32 %sub12
  store i32 %26, i32* %arrayidx13, align 4
  %29 = load i32, i32* %tmp, align 4
  %30 = load i32*, i32** %v.addr, align 4
  %31 = load i32, i32* %st, align 4
  %arrayidx14 = getelementptr inbounds i32, i32* %30, i32 %31
  store i32 %29, i32* %arrayidx14, align 4
  %32 = load i32, i32* %k.addr, align 4
  %33 = load i32, i32* %st, align 4
  %cmp15 = icmp eq i32 %32, %33
  br i1 %cmp15, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.end
  %34 = load i32*, i32** %v.addr, align 4
  %35 = load i32, i32* %st, align 4
  %arrayidx16 = getelementptr inbounds i32, i32* %34, i32 %35
  %36 = load i32, i32* %arrayidx16, align 4
  br label %cond.end23

cond.false:                                       ; preds = %for.end
  %37 = load i32, i32* %st, align 4
  %38 = load i32, i32* %k.addr, align 4
  %cmp17 = icmp sgt i32 %37, %38
  br i1 %cmp17, label %cond.true18, label %cond.false19

cond.true18:                                      ; preds = %cond.false
  %39 = load i32*, i32** %v.addr, align 4
  %40 = load i32, i32* %st, align 4
  %41 = load i32, i32* %k.addr, align 4
  %call = call i32 @qselect(i32* %39, i32 %40, i32 %41)
  br label %cond.end

cond.false19:                                     ; preds = %cond.false
  %42 = load i32*, i32** %v.addr, align 4
  %43 = load i32, i32* %st, align 4
  %add.ptr = getelementptr inbounds i32, i32* %42, i32 %43
  %44 = load i32, i32* %len.addr, align 4
  %45 = load i32, i32* %st, align 4
  %sub20 = sub nsw i32 %44, %45
  %46 = load i32, i32* %k.addr, align 4
  %47 = load i32, i32* %st, align 4
  %sub21 = sub nsw i32 %46, %47
  %call22 = call i32 @qselect(i32* %add.ptr, i32 %sub20, i32 %sub21)
  br label %cond.end

cond.end:                                         ; preds = %cond.false19, %cond.true18
  %cond = phi i32 [ %call, %cond.true18 ], [ %call22, %cond.false19 ]
  br label %cond.end23

cond.end23:                                       ; preds = %cond.end, %cond.true
  %cond24 = phi i32 [ %36, %cond.true ], [ %cond, %cond.end ]
  ret i32 %cond24
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %x = alloca [10 x i32], align 16
  %y = alloca [10 x i32], align 16
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [10 x i32]* %x to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([10 x i32]* @__const.main.x to i8*), i32 40, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %1, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay = getelementptr inbounds [10 x i32], [10 x i32]* %y, i32 0, i32 0
  %2 = bitcast i32* %arraydecay to i8*
  %arraydecay1 = getelementptr inbounds [10 x i32], [10 x i32]* %x, i32 0, i32 0
  %3 = bitcast i32* %arraydecay1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %2, i8* align 16 %3, i32 40, i1 false)
  %4 = load i32, i32* %i, align 4
  %arraydecay2 = getelementptr inbounds [10 x i32], [10 x i32]* %y, i32 0, i32 0
  %5 = load i32, i32* %i, align 4
  %call = call i32 @qselect(i32* %arraydecay2, i32 10, i32 %5)
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i32 %4, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %1, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, %sub
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = slt %0, %2
infer %3

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub1 = sub nsw i32 %6, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %arrayidx2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp3 = icmp sgt i32 %4, %7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %arrayidx4, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %st, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %arrayidx5, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %tmp, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %st, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %st, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %19, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc8 = add nsw i32 %20, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub9 = sub nsw i32 %22, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %arrayidx10, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %st, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %arrayidx11, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub12 = sub nsw i32 %28, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %tmp, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %st, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %k.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %st, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp15 = icmp eq i32 %32, %33
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %st, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %arrayidx16, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %st, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %38 = load i32, i32* %k.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp17 = icmp sgt i32 %37, %38
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %40 = load i32, i32* %st, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %41 = load i32, i32* %k.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 @qselect(i32* %39, i32 %40, i32 %41)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %43 = load i32, i32* %st, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %44 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %45 = load i32, i32* %st, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub20 = sub nsw i32 %44, %45
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %46 = load i32, i32* %k.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %47 = load i32, i32* %st, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub21 = sub nsw i32 %46, %47
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %call22 = call i32 @qselect(i32* %add.ptr, i32 %sub20, i32 %sub21)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cond = phi i32 [ %call, %cond.true18 ], [ %call22, %cond.false19 ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = phi %0, %1, %2
infer %3

; *****
; For LLVM instruction:
;  %cond24 = phi i32 [ %36, %cond.true ], [ %cond, %cond.end ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2 = block 2
%3:i32 = var
%4:i32 = var
%5:i32 = phi %2, %3, %4
%6:i32 = phi %0, %1, %5
infer %6
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = slt %0, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147418112
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = phi %0, %1, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2 = block 2
%3:i32 = var
%4:i32 = var
%5:i32 = phi %2, %3, %4
%6:i32 = phi %0, %1, %5
infer %6


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = phi %0, %1, %2

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for qselect()

; entering Souper's runOnFunction() for main()

; ModuleID = './Quickselect_algorithm.c.bc'
source_filename = "./Quickselect_algorithm.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@__const.main.x = private unnamed_addr constant [10 x i32] [i32 9, i32 8, i32 7, i32 6, i32 5, i32 0, i32 1, i32 2, i32 3, i32 4], align 16
@.str = private unnamed_addr constant [8 x i8] c"%d: %d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @qselect(i32* %v, i32 %len, i32 %k) #0 {
entry:
  %v.addr = alloca i32*, align 4
  %len.addr = alloca i32, align 4
  %k.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %st = alloca i32, align 4
  %tmp = alloca i32, align 4
  store i32* %v, i32** %v.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 %k, i32* %k.addr, align 4
  store i32 0, i32* %i, align 4
  store i32 0, i32* %st, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %len.addr, align 4
  %sub = sub nsw i32 %1, 1
  %cmp = icmp slt i32 %0, %sub
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32*, i32** %v.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %2, i32 %3
  %4 = load i32, i32* %arrayidx, align 4
  %5 = load i32*, i32** %v.addr, align 4
  %6 = load i32, i32* %len.addr, align 4
  %sub1 = sub nsw i32 %6, 1
  %arrayidx2 = getelementptr inbounds i32, i32* %5, i32 %sub1
  %7 = load i32, i32* %arrayidx2, align 4
  %cmp3 = icmp sgt i32 %4, %7
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.inc

if.end:                                           ; preds = %for.body
  %8 = load i32*, i32** %v.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %8, i32 %9
  %10 = load i32, i32* %arrayidx4, align 4
  store i32 %10, i32* %tmp, align 4
  %11 = load i32*, i32** %v.addr, align 4
  %12 = load i32, i32* %st, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %11, i32 %12
  %13 = load i32, i32* %arrayidx5, align 4
  %14 = load i32*, i32** %v.addr, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds i32, i32* %14, i32 %15
  store i32 %13, i32* %arrayidx6, align 4
  %16 = load i32, i32* %tmp, align 4
  %17 = load i32*, i32** %v.addr, align 4
  %18 = load i32, i32* %st, align 4
  %arrayidx7 = getelementptr inbounds i32, i32* %17, i32 %18
  store i32 %16, i32* %arrayidx7, align 4
  %19 = load i32, i32* %st, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %st, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end, %if.then
  %20 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %20, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %21 = load i32*, i32** %v.addr, align 4
  %22 = load i32, i32* %len.addr, align 4
  %sub9 = sub nsw i32 %22, 1
  %arrayidx10 = getelementptr inbounds i32, i32* %21, i32 %sub9
  %23 = load i32, i32* %arrayidx10, align 4
  store i32 %23, i32* %tmp, align 4
  %24 = load i32*, i32** %v.addr, align 4
  %25 = load i32, i32* %st, align 4
  %arrayidx11 = getelementptr inbounds i32, i32* %24, i32 %25
  %26 = load i32, i32* %arrayidx11, align 4
  %27 = load i32*, i32** %v.addr, align 4
  %28 = load i32, i32* %len.addr, align 4
  %sub12 = sub nsw i32 %28, 1
  %arrayidx13 = getelementptr inbounds i32, i32* %27, i32 %sub12
  store i32 %26, i32* %arrayidx13, align 4
  %29 = load i32, i32* %tmp, align 4
  %30 = load i32*, i32** %v.addr, align 4
  %31 = load i32, i32* %st, align 4
  %arrayidx14 = getelementptr inbounds i32, i32* %30, i32 %31
  store i32 %29, i32* %arrayidx14, align 4
  %32 = load i32, i32* %k.addr, align 4
  %33 = load i32, i32* %st, align 4
  %cmp15 = icmp eq i32 %32, %33
  br i1 %cmp15, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.end
  %34 = load i32*, i32** %v.addr, align 4
  %35 = load i32, i32* %st, align 4
  %arrayidx16 = getelementptr inbounds i32, i32* %34, i32 %35
  %36 = load i32, i32* %arrayidx16, align 4
  br label %cond.end23

cond.false:                                       ; preds = %for.end
  %37 = load i32, i32* %st, align 4
  %38 = load i32, i32* %k.addr, align 4
  %cmp17 = icmp sgt i32 %37, %38
  br i1 %cmp17, label %cond.true18, label %cond.false19

cond.true18:                                      ; preds = %cond.false
  %39 = load i32*, i32** %v.addr, align 4
  %40 = load i32, i32* %st, align 4
  %41 = load i32, i32* %k.addr, align 4
  %call = call i32 @qselect(i32* %39, i32 %40, i32 %41)
  br label %cond.end

cond.false19:                                     ; preds = %cond.false
  %42 = load i32*, i32** %v.addr, align 4
  %43 = load i32, i32* %st, align 4
  %add.ptr = getelementptr inbounds i32, i32* %42, i32 %43
  %44 = load i32, i32* %len.addr, align 4
  %45 = load i32, i32* %st, align 4
  %sub20 = sub nsw i32 %44, %45
  %46 = load i32, i32* %k.addr, align 4
  %47 = load i32, i32* %st, align 4
  %sub21 = sub nsw i32 %46, %47
  %call22 = call i32 @qselect(i32* %add.ptr, i32 %sub20, i32 %sub21)
  br label %cond.end

cond.end:                                         ; preds = %cond.false19, %cond.true18
  %cond = phi i32 [ %call, %cond.true18 ], [ %call22, %cond.false19 ]
  br label %cond.end23

cond.end23:                                       ; preds = %cond.end, %cond.true
  %cond24 = phi i32 [ %36, %cond.true ], [ %cond, %cond.end ]
  ret i32 %cond24
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %x = alloca [10 x i32], align 16
  %y = alloca [10 x i32], align 16
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [10 x i32]* %x to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([10 x i32]* @__const.main.x to i8*), i32 40, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %1, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay = getelementptr inbounds [10 x i32], [10 x i32]* %y, i32 0, i32 0
  %2 = bitcast i32* %arraydecay to i8*
  %arraydecay1 = getelementptr inbounds [10 x i32], [10 x i32]* %x, i32 0, i32 0
  %3 = bitcast i32* %arraydecay1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %2, i8* align 16 %3, i32 40, i1 false)
  %4 = load i32, i32* %i, align 4
  %arraydecay2 = getelementptr inbounds [10 x i32], [10 x i32]* %y, i32 0, i32 0
  %5 = load i32, i32* %i, align 4
  %call = call i32 @qselect(i32* %arraydecay2, i32 10, i32 %5)
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i32 %4, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %1, 10
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 10:i32
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 @qselect(i32* %arraydecay2, i32 10, i32 %5)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %6, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 10:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
