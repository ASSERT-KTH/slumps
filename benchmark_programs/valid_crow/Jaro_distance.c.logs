
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for jaro()

; ModuleID = './Jaro_distance.c.bc'
source_filename = "./Jaro_distance.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"MARTHA\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"MARHTA\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"DIXON\00", align 1
@.str.4 = private unnamed_addr constant [9 x i8] c"DICKSONX\00", align 1
@.str.5 = private unnamed_addr constant [10 x i8] c"JELLYFISH\00", align 1
@.str.6 = private unnamed_addr constant [11 x i8] c"SMELLYFISH\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden double @jaro(i8* %str1, i8* %str2) #0 {
entry:
  %retval = alloca double, align 8
  %str1.addr = alloca i8*, align 4
  %str2.addr = alloca i8*, align 4
  %str1_len = alloca i32, align 4
  %str2_len = alloca i32, align 4
  %match_distance = alloca i32, align 4
  %str1_matches = alloca i32*, align 4
  %str2_matches = alloca i32*, align 4
  %matches = alloca double, align 8
  %transpositions = alloca double, align 8
  %i = alloca i32, align 4
  %start = alloca i32, align 4
  %end = alloca i32, align 4
  %k = alloca i32, align 4
  %k45 = alloca i32, align 4
  %i46 = alloca i32, align 4
  store i8* %str1, i8** %str1.addr, align 4
  store i8* %str2, i8** %str2.addr, align 4
  %0 = load i8*, i8** %str1.addr, align 4
  %call = call i32 @strlen(i8* %0) #3
  store i32 %call, i32* %str1_len, align 4
  %1 = load i8*, i8** %str2.addr, align 4
  %call1 = call i32 @strlen(i8* %1) #3
  store i32 %call1, i32* %str2_len, align 4
  %2 = load i32, i32* %str1_len, align 4
  %cmp = icmp eq i32 %2, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %str2_len, align 4
  %cmp2 = icmp eq i32 %3, 0
  %4 = zext i1 %cmp2 to i64
  %cond = select i1 %cmp2, double 1.000000e+00, double 0.000000e+00
  store double %cond, double* %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %5 = load i32, i32* %str1_len, align 4
  %6 = load i32, i32* %str2_len, align 4
  %cmp3 = icmp sgt i32 %5, %6
  br i1 %cmp3, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %7 = load i32, i32* %str1_len, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %8 = load i32, i32* %str2_len, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond4 = phi i32 [ %7, %cond.true ], [ %8, %cond.false ]
  %div = sdiv i32 %cond4, 2
  %sub = sub nsw i32 %div, 1
  store i32 %sub, i32* %match_distance, align 4
  %9 = load i32, i32* %str1_len, align 4
  %call5 = call noalias i8* @calloc(i32 %9, i32 4)
  %10 = bitcast i8* %call5 to i32*
  store i32* %10, i32** %str1_matches, align 4
  %11 = load i32, i32* %str2_len, align 4
  %call6 = call noalias i8* @calloc(i32 %11, i32 4)
  %12 = bitcast i8* %call6 to i32*
  store i32* %12, i32** %str2_matches, align 4
  store double 0.000000e+00, double* %matches, align 8
  store double 0.000000e+00, double* %transpositions, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc38, %cond.end
  %13 = load i32, i32* %i, align 4
  %14 = load i32, i32* %str1_len, align 4
  %cmp7 = icmp slt i32 %13, %14
  br i1 %cmp7, label %for.body, label %for.end40

for.body:                                         ; preds = %for.cond
  %15 = load i32, i32* %i, align 4
  %16 = load i32, i32* %match_distance, align 4
  %sub8 = sub nsw i32 %15, %16
  %cmp9 = icmp sgt i32 0, %sub8
  br i1 %cmp9, label %cond.true10, label %cond.false11

cond.true10:                                      ; preds = %for.body
  br label %cond.end13

cond.false11:                                     ; preds = %for.body
  %17 = load i32, i32* %i, align 4
  %18 = load i32, i32* %match_distance, align 4
  %sub12 = sub nsw i32 %17, %18
  br label %cond.end13

cond.end13:                                       ; preds = %cond.false11, %cond.true10
  %cond14 = phi i32 [ 0, %cond.true10 ], [ %sub12, %cond.false11 ]
  store i32 %cond14, i32* %start, align 4
  %19 = load i32, i32* %i, align 4
  %20 = load i32, i32* %match_distance, align 4
  %add = add nsw i32 %19, %20
  %add15 = add nsw i32 %add, 1
  %21 = load i32, i32* %str2_len, align 4
  %cmp16 = icmp slt i32 %add15, %21
  br i1 %cmp16, label %cond.true17, label %cond.false20

cond.true17:                                      ; preds = %cond.end13
  %22 = load i32, i32* %i, align 4
  %23 = load i32, i32* %match_distance, align 4
  %add18 = add nsw i32 %22, %23
  %add19 = add nsw i32 %add18, 1
  br label %cond.end21

cond.false20:                                     ; preds = %cond.end13
  %24 = load i32, i32* %str2_len, align 4
  br label %cond.end21

cond.end21:                                       ; preds = %cond.false20, %cond.true17
  %cond22 = phi i32 [ %add19, %cond.true17 ], [ %24, %cond.false20 ]
  store i32 %cond22, i32* %end, align 4
  %25 = load i32, i32* %start, align 4
  store i32 %25, i32* %k, align 4
  br label %for.cond23

for.cond23:                                       ; preds = %for.inc, %cond.end21
  %26 = load i32, i32* %k, align 4
  %27 = load i32, i32* %end, align 4
  %cmp24 = icmp slt i32 %26, %27
  br i1 %cmp24, label %for.body25, label %for.end

for.body25:                                       ; preds = %for.cond23
  %28 = load i32*, i32** %str2_matches, align 4
  %29 = load i32, i32* %k, align 4
  %arrayidx = getelementptr inbounds i32, i32* %28, i32 %29
  %30 = load i32, i32* %arrayidx, align 4
  %tobool = icmp ne i32 %30, 0
  br i1 %tobool, label %if.then26, label %if.end27

if.then26:                                        ; preds = %for.body25
  br label %for.inc

if.end27:                                         ; preds = %for.body25
  %31 = load i8*, i8** %str1.addr, align 4
  %32 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds i8, i8* %31, i32 %32
  %33 = load i8, i8* %arrayidx28, align 1
  %conv = sext i8 %33 to i32
  %34 = load i8*, i8** %str2.addr, align 4
  %35 = load i32, i32* %k, align 4
  %arrayidx29 = getelementptr inbounds i8, i8* %34, i32 %35
  %36 = load i8, i8* %arrayidx29, align 1
  %conv30 = sext i8 %36 to i32
  %cmp31 = icmp ne i32 %conv, %conv30
  br i1 %cmp31, label %if.then33, label %if.end34

if.then33:                                        ; preds = %if.end27
  br label %for.inc

if.end34:                                         ; preds = %if.end27
  %37 = load i32*, i32** %str1_matches, align 4
  %38 = load i32, i32* %i, align 4
  %arrayidx35 = getelementptr inbounds i32, i32* %37, i32 %38
  store i32 1, i32* %arrayidx35, align 4
  %39 = load i32*, i32** %str2_matches, align 4
  %40 = load i32, i32* %k, align 4
  %arrayidx36 = getelementptr inbounds i32, i32* %39, i32 %40
  store i32 1, i32* %arrayidx36, align 4
  %41 = load double, double* %matches, align 8
  %inc = fadd double %41, 1.000000e+00
  store double %inc, double* %matches, align 8
  br label %for.end

for.inc:                                          ; preds = %if.then33, %if.then26
  %42 = load i32, i32* %k, align 4
  %inc37 = add nsw i32 %42, 1
  store i32 %inc37, i32* %k, align 4
  br label %for.cond23

for.end:                                          ; preds = %if.end34, %for.cond23
  br label %for.inc38

for.inc38:                                        ; preds = %for.end
  %43 = load i32, i32* %i, align 4
  %inc39 = add nsw i32 %43, 1
  store i32 %inc39, i32* %i, align 4
  br label %for.cond

for.end40:                                        ; preds = %for.cond
  %44 = load double, double* %matches, align 8
  %cmp41 = fcmp oeq double %44, 0.000000e+00
  br i1 %cmp41, label %if.then43, label %if.end44

if.then43:                                        ; preds = %for.end40
  %45 = load i32*, i32** %str1_matches, align 4
  %46 = bitcast i32* %45 to i8*
  call void @free(i8* %46)
  %47 = load i32*, i32** %str2_matches, align 4
  %48 = bitcast i32* %47 to i8*
  call void @free(i8* %48)
  store double 0.000000e+00, double* %retval, align 8
  br label %return

if.end44:                                         ; preds = %for.end40
  store i32 0, i32* %k45, align 4
  store i32 0, i32* %i46, align 4
  br label %for.cond47

for.cond47:                                       ; preds = %for.inc68, %if.end44
  %49 = load i32, i32* %i46, align 4
  %50 = load i32, i32* %str1_len, align 4
  %cmp48 = icmp slt i32 %49, %50
  br i1 %cmp48, label %for.body50, label %for.end70

for.body50:                                       ; preds = %for.cond47
  %51 = load i32*, i32** %str1_matches, align 4
  %52 = load i32, i32* %i46, align 4
  %arrayidx51 = getelementptr inbounds i32, i32* %51, i32 %52
  %53 = load i32, i32* %arrayidx51, align 4
  %tobool52 = icmp ne i32 %53, 0
  br i1 %tobool52, label %if.end54, label %if.then53

if.then53:                                        ; preds = %for.body50
  br label %for.inc68

if.end54:                                         ; preds = %for.body50
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end54
  %54 = load i32*, i32** %str2_matches, align 4
  %55 = load i32, i32* %k45, align 4
  %arrayidx55 = getelementptr inbounds i32, i32* %54, i32 %55
  %56 = load i32, i32* %arrayidx55, align 4
  %tobool56 = icmp ne i32 %56, 0
  %lnot = xor i1 %tobool56, true
  br i1 %lnot, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %57 = load i32, i32* %k45, align 4
  %inc57 = add nsw i32 %57, 1
  store i32 %inc57, i32* %k45, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %58 = load i8*, i8** %str1.addr, align 4
  %59 = load i32, i32* %i46, align 4
  %arrayidx58 = getelementptr inbounds i8, i8* %58, i32 %59
  %60 = load i8, i8* %arrayidx58, align 1
  %conv59 = sext i8 %60 to i32
  %61 = load i8*, i8** %str2.addr, align 4
  %62 = load i32, i32* %k45, align 4
  %arrayidx60 = getelementptr inbounds i8, i8* %61, i32 %62
  %63 = load i8, i8* %arrayidx60, align 1
  %conv61 = sext i8 %63 to i32
  %cmp62 = icmp ne i32 %conv59, %conv61
  br i1 %cmp62, label %if.then64, label %if.end66

if.then64:                                        ; preds = %while.end
  %64 = load double, double* %transpositions, align 8
  %inc65 = fadd double %64, 1.000000e+00
  store double %inc65, double* %transpositions, align 8
  br label %if.end66

if.end66:                                         ; preds = %if.then64, %while.end
  %65 = load i32, i32* %k45, align 4
  %inc67 = add nsw i32 %65, 1
  store i32 %inc67, i32* %k45, align 4
  br label %for.inc68

for.inc68:                                        ; preds = %if.end66, %if.then53
  %66 = load i32, i32* %i46, align 4
  %inc69 = add nsw i32 %66, 1
  store i32 %inc69, i32* %i46, align 4
  br label %for.cond47

for.end70:                                        ; preds = %for.cond47
  %67 = load double, double* %transpositions, align 8
  %div71 = fdiv double %67, 2.000000e+00
  store double %div71, double* %transpositions, align 8
  %68 = load i32*, i32** %str1_matches, align 4
  %69 = bitcast i32* %68 to i8*
  call void @free(i8* %69)
  %70 = load i32*, i32** %str2_matches, align 4
  %71 = bitcast i32* %70 to i8*
  call void @free(i8* %71)
  %72 = load double, double* %matches, align 8
  %73 = load i32, i32* %str1_len, align 4
  %conv72 = sitofp i32 %73 to double
  %div73 = fdiv double %72, %conv72
  %74 = load double, double* %matches, align 8
  %75 = load i32, i32* %str2_len, align 4
  %conv74 = sitofp i32 %75 to double
  %div75 = fdiv double %74, %conv74
  %add76 = fadd double %div73, %div75
  %76 = load double, double* %matches, align 8
  %77 = load double, double* %transpositions, align 8
  %sub77 = fsub double %76, %77
  %78 = load double, double* %matches, align 8
  %div78 = fdiv double %sub77, %78
  %add79 = fadd double %add76, %div78
  %div80 = fdiv double %add79, 3.000000e+00
  store double %div80, double* %retval, align 8
  br label %return

return:                                           ; preds = %for.end70, %if.then43, %if.then
  %79 = load double, double* %retval, align 8
  ret double %79
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #1

declare noalias i8* @calloc(i32 %0, i32 %1) #2

declare void @free(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %call = call double @jaro(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0))
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), double %call)
  %call2 = call double @jaro(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i32 0, i32 0))
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), double %call2)
  %call4 = call double @jaro(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i32 0, i32 0))
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), double %call4)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 @strlen(i8* %0) #3
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call1 = call i32 @strlen(i8* %1) #3
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %str1_len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %2, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %str2_len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp eq i32 %3, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %str1_len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %str2_len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp3 = icmp sgt i32 %5, %6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %str1_len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %str2_len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cond4 = phi i32 [ %7, %cond.true ], [ %8, %cond.false ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = phi %0, %1, %2
infer %3

; *****
; For LLVM instruction:
;  %div = sdiv i32 %cond4, 2
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = phi %0, %1, %2
%4:i32 = sdiv %3, 2:i32
infer %4

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %div, 1
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = phi %0, %1, %2
%4:i32 = sdiv %3, 2:i32
%5:i32 = subnsw %4, 1:i32
infer %5

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %str1_len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %str2_len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %str1_len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp7 = icmp slt i32 %13, %14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %match_distance, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub8 = sub nsw i32 %15, %16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %cmp9 = icmp sgt i32 0, %sub8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
%3:i1 = slt %2, 0:i32
infer %3

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %match_distance, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub12 = sub nsw i32 %17, %18
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %cond14 = phi i32 [ 0, %cond.true10 ], [ %sub12, %cond.false11 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %match_distance, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %19, %20
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %add15 = add nsw i32 %add, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
%3:i32 = addnsw 1:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %str2_len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp16 = icmp slt i32 %add15, %21
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
%3:i32 = addnsw 1:i32, %2
%4:i32 = var
%5:i1 = slt %3, %4
infer %5

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %match_distance, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add18 = add nsw i32 %22, %23
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %add19 = add nsw i32 %add18, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
%3:i32 = addnsw 1:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %str2_len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cond22 = phi i32 [ %add19, %cond.true17 ], [ %24, %cond.false20 ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %start, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %end, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp24 = icmp slt i32 %26, %27
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %30, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %33 = load i8, i8* %arrayidx28, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %33 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %36 = load i8, i8* %arrayidx29, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv30 = sext i8 %36 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp31 = icmp ne i32 %conv, %conv30
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i1 = ne %1, %3
infer %4

; *****
; For LLVM instruction:
;  %38 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %40 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %42 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc37 = add nsw i32 %42, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %43 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc39 = add nsw i32 %43, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp41 = fcmp oeq double %44, 0.000000e+00
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %49 = load i32, i32* %i46, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %50 = load i32, i32* %str1_len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp48 = icmp slt i32 %49, %50
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %52 = load i32, i32* %i46, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %53 = load i32, i32* %arrayidx51, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool52 = icmp ne i32 %53, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %55 = load i32, i32* %k45, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %56 = load i32, i32* %arrayidx55, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool56 = icmp ne i32 %56, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %lnot = xor i1 %tobool56, true
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i1 = xor 1:i1, %1
infer %2

; *****
; For LLVM instruction:
;  %57 = load i32, i32* %k45, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc57 = add nsw i32 %57, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %59 = load i32, i32* %i46, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %60 = load i8, i8* %arrayidx58, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv59 = sext i8 %60 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %62 = load i32, i32* %k45, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %63 = load i8, i8* %arrayidx60, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv61 = sext i8 %63 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp62 = icmp ne i32 %conv59, %conv61
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i1 = ne %1, %3
infer %4

; *****
; For LLVM instruction:
;  %65 = load i32, i32* %k45, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc67 = add nsw i32 %65, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %66 = load i32, i32* %i46, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc69 = add nsw i32 %66, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %73 = load i32, i32* %str1_len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %75 = load i32, i32* %str2_len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = phi %0, %1, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = phi %0, %1, %2
%4:i32 = sdiv %3, 2:i32
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 631636206
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = phi %0, %1, %2

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = phi %0, %1, %2
%4:i32 = sdiv %3, 2:i32
%5:i32 = subnsw %4, 1:i32
infer %5


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 288372223
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = phi %0, %1, %2

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = phi %0, %1, %2
%4:i32 = sdiv %3, 2:i32

Cost = 6
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147418112
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
%3:i1 = slt %2, 0:i32
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
%3:i32 = addnsw 1:i32, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -16
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
%3:i32 = addnsw 1:i32, %2
%4:i32 = var
%5:i1 = slt %3, %4
infer %5


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i1 = ne %1, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i1 = xor 1:i1, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var
%1:i1 = ne 0:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for jaro()

; entering Souper's runOnFunction() for main()

; ModuleID = './Jaro_distance.c.bc'
source_filename = "./Jaro_distance.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"MARTHA\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"MARHTA\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"DIXON\00", align 1
@.str.4 = private unnamed_addr constant [9 x i8] c"DICKSONX\00", align 1
@.str.5 = private unnamed_addr constant [10 x i8] c"JELLYFISH\00", align 1
@.str.6 = private unnamed_addr constant [11 x i8] c"SMELLYFISH\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden double @jaro(i8* %str1, i8* %str2) #0 {
entry:
  %retval = alloca double, align 8
  %str1.addr = alloca i8*, align 4
  %str2.addr = alloca i8*, align 4
  %str1_len = alloca i32, align 4
  %str2_len = alloca i32, align 4
  %match_distance = alloca i32, align 4
  %str1_matches = alloca i32*, align 4
  %str2_matches = alloca i32*, align 4
  %matches = alloca double, align 8
  %transpositions = alloca double, align 8
  %i = alloca i32, align 4
  %start = alloca i32, align 4
  %end = alloca i32, align 4
  %k = alloca i32, align 4
  %k45 = alloca i32, align 4
  %i46 = alloca i32, align 4
  store i8* %str1, i8** %str1.addr, align 4
  store i8* %str2, i8** %str2.addr, align 4
  %0 = load i8*, i8** %str1.addr, align 4
  %call = call i32 @strlen(i8* %0) #3
  store i32 %call, i32* %str1_len, align 4
  %1 = load i8*, i8** %str2.addr, align 4
  %call1 = call i32 @strlen(i8* %1) #3
  store i32 %call1, i32* %str2_len, align 4
  %2 = load i32, i32* %str1_len, align 4
  %cmp = icmp eq i32 %2, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %str2_len, align 4
  %cmp2 = icmp eq i32 %3, 0
  %4 = zext i1 %cmp2 to i64
  %cond = select i1 %cmp2, double 1.000000e+00, double 0.000000e+00
  store double %cond, double* %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %5 = load i32, i32* %str1_len, align 4
  %6 = load i32, i32* %str2_len, align 4
  %cmp3 = icmp sgt i32 %5, %6
  br i1 %cmp3, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %7 = load i32, i32* %str1_len, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %8 = load i32, i32* %str2_len, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond4 = phi i32 [ %7, %cond.true ], [ %8, %cond.false ]
  %div = sdiv i32 %cond4, 2
  %sub = sub nsw i32 %div, 1
  store i32 %sub, i32* %match_distance, align 4
  %9 = load i32, i32* %str1_len, align 4
  %call5 = call noalias i8* @calloc(i32 %9, i32 4)
  %10 = bitcast i8* %call5 to i32*
  store i32* %10, i32** %str1_matches, align 4
  %11 = load i32, i32* %str2_len, align 4
  %call6 = call noalias i8* @calloc(i32 %11, i32 4)
  %12 = bitcast i8* %call6 to i32*
  store i32* %12, i32** %str2_matches, align 4
  store double 0.000000e+00, double* %matches, align 8
  store double 0.000000e+00, double* %transpositions, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc38, %cond.end
  %13 = load i32, i32* %i, align 4
  %14 = load i32, i32* %str1_len, align 4
  %cmp7 = icmp slt i32 %13, %14
  br i1 %cmp7, label %for.body, label %for.end40

for.body:                                         ; preds = %for.cond
  %15 = load i32, i32* %i, align 4
  %16 = load i32, i32* %match_distance, align 4
  %sub8 = sub nsw i32 %15, %16
  %cmp9 = icmp sgt i32 0, %sub8
  br i1 %cmp9, label %cond.true10, label %cond.false11

cond.true10:                                      ; preds = %for.body
  br label %cond.end13

cond.false11:                                     ; preds = %for.body
  %17 = load i32, i32* %i, align 4
  %18 = load i32, i32* %match_distance, align 4
  %sub12 = sub nsw i32 %17, %18
  br label %cond.end13

cond.end13:                                       ; preds = %cond.false11, %cond.true10
  %cond14 = phi i32 [ 0, %cond.true10 ], [ %sub12, %cond.false11 ]
  store i32 %cond14, i32* %start, align 4
  %19 = load i32, i32* %i, align 4
  %20 = load i32, i32* %match_distance, align 4
  %add = add nsw i32 %19, %20
  %add15 = add nsw i32 %add, 1
  %21 = load i32, i32* %str2_len, align 4
  %cmp16 = icmp slt i32 %add15, %21
  br i1 %cmp16, label %cond.true17, label %cond.false20

cond.true17:                                      ; preds = %cond.end13
  %22 = load i32, i32* %i, align 4
  %23 = load i32, i32* %match_distance, align 4
  %add18 = add nsw i32 %22, %23
  %add19 = add nsw i32 %add18, 1
  br label %cond.end21

cond.false20:                                     ; preds = %cond.end13
  %24 = load i32, i32* %str2_len, align 4
  br label %cond.end21

cond.end21:                                       ; preds = %cond.false20, %cond.true17
  %cond22 = phi i32 [ %add19, %cond.true17 ], [ %24, %cond.false20 ]
  store i32 %cond22, i32* %end, align 4
  %25 = load i32, i32* %start, align 4
  store i32 %25, i32* %k, align 4
  br label %for.cond23

for.cond23:                                       ; preds = %for.inc, %cond.end21
  %26 = load i32, i32* %k, align 4
  %27 = load i32, i32* %end, align 4
  %cmp24 = icmp slt i32 %26, %27
  br i1 %cmp24, label %for.body25, label %for.end

for.body25:                                       ; preds = %for.cond23
  %28 = load i32*, i32** %str2_matches, align 4
  %29 = load i32, i32* %k, align 4
  %arrayidx = getelementptr inbounds i32, i32* %28, i32 %29
  %30 = load i32, i32* %arrayidx, align 4
  %tobool = icmp ne i32 %30, 0
  br i1 %tobool, label %if.then26, label %if.end27

if.then26:                                        ; preds = %for.body25
  br label %for.inc

if.end27:                                         ; preds = %for.body25
  %31 = load i8*, i8** %str1.addr, align 4
  %32 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds i8, i8* %31, i32 %32
  %33 = load i8, i8* %arrayidx28, align 1
  %conv = sext i8 %33 to i32
  %34 = load i8*, i8** %str2.addr, align 4
  %35 = load i32, i32* %k, align 4
  %arrayidx29 = getelementptr inbounds i8, i8* %34, i32 %35
  %36 = load i8, i8* %arrayidx29, align 1
  %conv30 = sext i8 %36 to i32
  %cmp31 = icmp ne i32 %conv, %conv30
  br i1 %cmp31, label %if.then33, label %if.end34

if.then33:                                        ; preds = %if.end27
  br label %for.inc

if.end34:                                         ; preds = %if.end27
  %37 = load i32*, i32** %str1_matches, align 4
  %38 = load i32, i32* %i, align 4
  %arrayidx35 = getelementptr inbounds i32, i32* %37, i32 %38
  store i32 1, i32* %arrayidx35, align 4
  %39 = load i32*, i32** %str2_matches, align 4
  %40 = load i32, i32* %k, align 4
  %arrayidx36 = getelementptr inbounds i32, i32* %39, i32 %40
  store i32 1, i32* %arrayidx36, align 4
  %41 = load double, double* %matches, align 8
  %inc = fadd double %41, 1.000000e+00
  store double %inc, double* %matches, align 8
  br label %for.end

for.inc:                                          ; preds = %if.then33, %if.then26
  %42 = load i32, i32* %k, align 4
  %inc37 = add nsw i32 %42, 1
  store i32 %inc37, i32* %k, align 4
  br label %for.cond23

for.end:                                          ; preds = %if.end34, %for.cond23
  br label %for.inc38

for.inc38:                                        ; preds = %for.end
  %43 = load i32, i32* %i, align 4
  %inc39 = add nsw i32 %43, 1
  store i32 %inc39, i32* %i, align 4
  br label %for.cond

for.end40:                                        ; preds = %for.cond
  %44 = load double, double* %matches, align 8
  %cmp41 = fcmp oeq double %44, 0.000000e+00
  br i1 %cmp41, label %if.then43, label %if.end44

if.then43:                                        ; preds = %for.end40
  %45 = load i32*, i32** %str1_matches, align 4
  %46 = bitcast i32* %45 to i8*
  call void @free(i8* %46)
  %47 = load i32*, i32** %str2_matches, align 4
  %48 = bitcast i32* %47 to i8*
  call void @free(i8* %48)
  store double 0.000000e+00, double* %retval, align 8
  br label %return

if.end44:                                         ; preds = %for.end40
  store i32 0, i32* %k45, align 4
  store i32 0, i32* %i46, align 4
  br label %for.cond47

for.cond47:                                       ; preds = %for.inc68, %if.end44
  %49 = load i32, i32* %i46, align 4
  %50 = load i32, i32* %str1_len, align 4
  %cmp48 = icmp slt i32 %49, %50
  br i1 %cmp48, label %for.body50, label %for.end70

for.body50:                                       ; preds = %for.cond47
  %51 = load i32*, i32** %str1_matches, align 4
  %52 = load i32, i32* %i46, align 4
  %arrayidx51 = getelementptr inbounds i32, i32* %51, i32 %52
  %53 = load i32, i32* %arrayidx51, align 4
  %tobool52 = icmp ne i32 %53, 0
  br i1 %tobool52, label %if.end54, label %if.then53

if.then53:                                        ; preds = %for.body50
  br label %for.inc68

if.end54:                                         ; preds = %for.body50
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end54
  %54 = load i32*, i32** %str2_matches, align 4
  %55 = load i32, i32* %k45, align 4
  %arrayidx55 = getelementptr inbounds i32, i32* %54, i32 %55
  %56 = load i32, i32* %arrayidx55, align 4
  %tobool56 = icmp ne i32 %56, 0
  %lnot = xor i1 %tobool56, true
  br i1 %lnot, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %57 = load i32, i32* %k45, align 4
  %inc57 = add nsw i32 %57, 1
  store i32 %inc57, i32* %k45, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %58 = load i8*, i8** %str1.addr, align 4
  %59 = load i32, i32* %i46, align 4
  %arrayidx58 = getelementptr inbounds i8, i8* %58, i32 %59
  %60 = load i8, i8* %arrayidx58, align 1
  %conv59 = sext i8 %60 to i32
  %61 = load i8*, i8** %str2.addr, align 4
  %62 = load i32, i32* %k45, align 4
  %arrayidx60 = getelementptr inbounds i8, i8* %61, i32 %62
  %63 = load i8, i8* %arrayidx60, align 1
  %conv61 = sext i8 %63 to i32
  %cmp62 = icmp ne i32 %conv59, %conv61
  br i1 %cmp62, label %if.then64, label %if.end66

if.then64:                                        ; preds = %while.end
  %64 = load double, double* %transpositions, align 8
  %inc65 = fadd double %64, 1.000000e+00
  store double %inc65, double* %transpositions, align 8
  br label %if.end66

if.end66:                                         ; preds = %if.then64, %while.end
  %65 = load i32, i32* %k45, align 4
  %inc67 = add nsw i32 %65, 1
  store i32 %inc67, i32* %k45, align 4
  br label %for.inc68

for.inc68:                                        ; preds = %if.end66, %if.then53
  %66 = load i32, i32* %i46, align 4
  %inc69 = add nsw i32 %66, 1
  store i32 %inc69, i32* %i46, align 4
  br label %for.cond47

for.end70:                                        ; preds = %for.cond47
  %67 = load double, double* %transpositions, align 8
  %div71 = fdiv double %67, 2.000000e+00
  store double %div71, double* %transpositions, align 8
  %68 = load i32*, i32** %str1_matches, align 4
  %69 = bitcast i32* %68 to i8*
  call void @free(i8* %69)
  %70 = load i32*, i32** %str2_matches, align 4
  %71 = bitcast i32* %70 to i8*
  call void @free(i8* %71)
  %72 = load double, double* %matches, align 8
  %73 = load i32, i32* %str1_len, align 4
  %conv72 = sitofp i32 %73 to double
  %div73 = fdiv double %72, %conv72
  %74 = load double, double* %matches, align 8
  %75 = load i32, i32* %str2_len, align 4
  %conv74 = sitofp i32 %75 to double
  %div75 = fdiv double %74, %conv74
  %add76 = fadd double %div73, %div75
  %76 = load double, double* %matches, align 8
  %77 = load double, double* %transpositions, align 8
  %sub77 = fsub double %76, %77
  %78 = load double, double* %matches, align 8
  %div78 = fdiv double %sub77, %78
  %add79 = fadd double %add76, %div78
  %div80 = fdiv double %add79, 3.000000e+00
  store double %div80, double* %retval, align 8
  br label %return

return:                                           ; preds = %for.end70, %if.then43, %if.then
  %79 = load double, double* %retval, align 8
  ret double %79
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #1

declare noalias i8* @calloc(i32 %0, i32 %1) #2

declare void @free(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %call = call double @jaro(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0))
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), double %call)
  %call2 = call double @jaro(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i32 0, i32 0))
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), double %call2)
  %call4 = call double @jaro(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i32 0, i32 0))
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), double %call4)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
