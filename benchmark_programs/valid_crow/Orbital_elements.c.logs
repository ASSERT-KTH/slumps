
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for add()

; ModuleID = './Orbital_elements.c.bc'
source_filename = "./Orbital_elements.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.vector = type { double, double, double }

@.str = private unnamed_addr constant [22 x i8] c"(%.17g, %.17g, %.17g)\00", align 1
@__const.orbitalStateVectors.i = private unnamed_addr constant %struct.vector { double 1.000000e+00, double 0.000000e+00, double 0.000000e+00 }, align 8
@__const.orbitalStateVectors.j = private unnamed_addr constant %struct.vector { double 0.000000e+00, double 1.000000e+00, double 0.000000e+00 }, align 8
@__const.orbitalStateVectors.k = private unnamed_addr constant %struct.vector { double 0.000000e+00, double 0.000000e+00, double 1.000000e+00 }, align 8
@.str.1 = private unnamed_addr constant [15 x i8] c"Position : %s\0A\00", align 1
@.str.2 = private unnamed_addr constant [15 x i8] c"Speed    : %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @add(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %v, %struct.vector* byval(%struct.vector) align 8 %w) #0 {
entry:
  %x = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 0
  %0 = load double, double* %x1, align 8
  %x2 = getelementptr inbounds %struct.vector, %struct.vector* %w, i32 0, i32 0
  %1 = load double, double* %x2, align 8
  %add = fadd double %0, %1
  store double %add, double* %x, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  %y3 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 1
  %2 = load double, double* %y3, align 8
  %y4 = getelementptr inbounds %struct.vector, %struct.vector* %w, i32 0, i32 1
  %3 = load double, double* %y4, align 8
  %add5 = fadd double %2, %3
  store double %add5, double* %y, align 8
  %z = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 2
  %z6 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 2
  %4 = load double, double* %z6, align 8
  %z7 = getelementptr inbounds %struct.vector, %struct.vector* %w, i32 0, i32 2
  %5 = load double, double* %z7, align 8
  %add8 = fadd double %4, %5
  store double %add8, double* %z, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @mul(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %v, double %m) #0 {
entry:
  %m.addr = alloca double, align 8
  store double %m, double* %m.addr, align 8
  %x = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 0
  %0 = load double, double* %x1, align 8
  %1 = load double, double* %m.addr, align 8
  %mul = fmul double %0, %1
  store double %mul, double* %x, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  %y2 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 1
  %2 = load double, double* %y2, align 8
  %3 = load double, double* %m.addr, align 8
  %mul3 = fmul double %2, %3
  store double %mul3, double* %y, align 8
  %z = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 2
  %z4 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 2
  %4 = load double, double* %z4, align 8
  %5 = load double, double* %m.addr, align 8
  %mul5 = fmul double %4, %5
  store double %mul5, double* %z, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @div(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %v, double %d) #0 {
entry:
  %d.addr = alloca double, align 8
  store double %d, double* %d.addr, align 8
  %0 = load double, double* %d.addr, align 8
  %div = fdiv double 1.000000e+00, %0
  call void @mul(%struct.vector* sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %v, double %div)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double @vabs(%struct.vector* byval(%struct.vector) align 8 %v) #0 {
entry:
  %x = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %mul = fmul double %0, %1
  %y = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %y2 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 1
  %3 = load double, double* %y2, align 8
  %mul3 = fmul double %2, %3
  %add = fadd double %mul, %mul3
  %z = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 2
  %4 = load double, double* %z, align 8
  %z4 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 2
  %5 = load double, double* %z4, align 8
  %mul5 = fmul double %4, %5
  %add6 = fadd double %add, %mul5
  %6 = call double @llvm.sqrt.f64(double %add6)
  ret double %6
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sqrt.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @mulAdd(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %v1, %struct.vector* byval(%struct.vector) align 8 %v2, double %x1, double %x2) #0 {
entry:
  %x1.addr = alloca double, align 8
  %x2.addr = alloca double, align 8
  %agg.tmp = alloca %struct.vector, align 8
  %agg.tmp1 = alloca %struct.vector, align 8
  store double %x1, double* %x1.addr, align 8
  store double %x2, double* %x2.addr, align 8
  %0 = load double, double* %x1.addr, align 8
  call void @mul(%struct.vector* sret align 8 %agg.tmp, %struct.vector* byval(%struct.vector) align 8 %v1, double %0)
  %1 = load double, double* %x2.addr, align 8
  call void @mul(%struct.vector* sret align 8 %agg.tmp1, %struct.vector* byval(%struct.vector) align 8 %v2, double %1)
  call void @add(%struct.vector* sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %agg.tmp, %struct.vector* byval(%struct.vector) align 8 %agg.tmp1)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @vecAsStr(i8* %buffer, %struct.vector* byval(%struct.vector) align 8 %v) #0 {
entry:
  %buffer.addr = alloca i8*, align 4
  store i8* %buffer, i8** %buffer.addr, align 4
  %0 = load i8*, i8** %buffer.addr, align 4
  %x = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 0
  %1 = load double, double* %x, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %z = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 2
  %3 = load double, double* %z, align 8
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* %0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i32 0, i32 0), double %1, double %2, double %3)
  ret void
}

declare i32 @sprintf(i8* %0, i8* %1, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden void @rotate(%struct.vector* byval(%struct.vector) align 8 %i, %struct.vector* byval(%struct.vector) align 8 %j, double %alpha, %struct.vector* %ps) #0 {
entry:
  %alpha.addr = alloca double, align 8
  %ps.addr = alloca %struct.vector*, align 4
  %tmp = alloca %struct.vector, align 8
  %tmp2 = alloca %struct.vector, align 8
  store double %alpha, double* %alpha.addr, align 8
  store %struct.vector* %ps, %struct.vector** %ps.addr, align 4
  %0 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx = getelementptr inbounds %struct.vector, %struct.vector* %0, i32 0
  %1 = load double, double* %alpha.addr, align 8
  %2 = call double @llvm.cos.f64(double %1)
  %3 = load double, double* %alpha.addr, align 8
  %4 = call double @llvm.sin.f64(double %3)
  call void @mulAdd(%struct.vector* sret align 8 %tmp, %struct.vector* byval(%struct.vector) align 8 %i, %struct.vector* byval(%struct.vector) align 8 %j, double %2, double %4)
  %5 = bitcast %struct.vector* %arrayidx to i8*
  %6 = bitcast %struct.vector* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %5, i8* align 8 %6, i32 24, i1 false)
  %7 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx1 = getelementptr inbounds %struct.vector, %struct.vector* %7, i32 1
  %8 = load double, double* %alpha.addr, align 8
  %9 = call double @llvm.sin.f64(double %8)
  %fneg = fneg double %9
  %10 = load double, double* %alpha.addr, align 8
  %11 = call double @llvm.cos.f64(double %10)
  call void @mulAdd(%struct.vector* sret align 8 %tmp2, %struct.vector* byval(%struct.vector) align 8 %i, %struct.vector* byval(%struct.vector) align 8 %j, double %fneg, double %11)
  %12 = bitcast %struct.vector* %arrayidx1 to i8*
  %13 = bitcast %struct.vector* %tmp2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %12, i8* align 8 %13, i32 24, i1 false)
  ret void
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.cos.f64(double %0) #1

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sin.f64(double %0) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: noinline nounwind optnone
define hidden void @orbitalStateVectors(double %semimajorAxis, double %eccentricity, double %inclination, double %longitudeOfAscendingNode, double %argumentOfPeriapsis, double %trueAnomaly, %struct.vector* %ps) #0 {
entry:
  %semimajorAxis.addr = alloca double, align 8
  %eccentricity.addr = alloca double, align 8
  %inclination.addr = alloca double, align 8
  %longitudeOfAscendingNode.addr = alloca double, align 8
  %argumentOfPeriapsis.addr = alloca double, align 8
  %trueAnomaly.addr = alloca double, align 8
  %ps.addr = alloca %struct.vector*, align 4
  %i = alloca %struct.vector, align 8
  %j = alloca %struct.vector, align 8
  %k = alloca %struct.vector, align 8
  %l = alloca double, align 8
  %c = alloca double, align 8
  %s = alloca double, align 8
  %r = alloca double, align 8
  %rprime = alloca double, align 8
  %qs = alloca [2 x %struct.vector], align 16
  %tmp = alloca %struct.vector, align 8
  %tmp14 = alloca %struct.vector, align 8
  %tmp17 = alloca %struct.vector, align 8
  %tmp25 = alloca %struct.vector, align 8
  %tmp29 = alloca %struct.vector, align 8
  store double %semimajorAxis, double* %semimajorAxis.addr, align 8
  store double %eccentricity, double* %eccentricity.addr, align 8
  store double %inclination, double* %inclination.addr, align 8
  store double %longitudeOfAscendingNode, double* %longitudeOfAscendingNode.addr, align 8
  store double %argumentOfPeriapsis, double* %argumentOfPeriapsis.addr, align 8
  store double %trueAnomaly, double* %trueAnomaly.addr, align 8
  store %struct.vector* %ps, %struct.vector** %ps.addr, align 4
  %0 = bitcast %struct.vector* %i to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %0, i8* align 8 bitcast (%struct.vector* @__const.orbitalStateVectors.i to i8*), i32 24, i1 false)
  %1 = bitcast %struct.vector* %j to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %1, i8* align 8 bitcast (%struct.vector* @__const.orbitalStateVectors.j to i8*), i32 24, i1 false)
  %2 = bitcast %struct.vector* %k to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %2, i8* align 8 bitcast (%struct.vector* @__const.orbitalStateVectors.k to i8*), i32 24, i1 false)
  store double 2.000000e+00, double* %l, align 8
  %3 = load double, double* %longitudeOfAscendingNode.addr, align 8
  %arraydecay = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 0
  call void @rotate(%struct.vector* byval(%struct.vector) align 8 %i, %struct.vector* byval(%struct.vector) align 8 %j, double %3, %struct.vector* %arraydecay)
  %arrayidx = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 0
  %4 = bitcast %struct.vector* %i to i8*
  %5 = bitcast %struct.vector* %arrayidx to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %4, i8* align 16 %5, i32 24, i1 false)
  %arrayidx1 = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 1
  %6 = bitcast %struct.vector* %j to i8*
  %7 = bitcast %struct.vector* %arrayidx1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 24, i1 false)
  %8 = load double, double* %inclination.addr, align 8
  %arraydecay2 = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 0
  call void @rotate(%struct.vector* byval(%struct.vector) align 8 %j, %struct.vector* byval(%struct.vector) align 8 %k, double %8, %struct.vector* %arraydecay2)
  %arrayidx3 = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 0
  %9 = bitcast %struct.vector* %j to i8*
  %10 = bitcast %struct.vector* %arrayidx3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %9, i8* align 16 %10, i32 24, i1 false)
  %11 = load double, double* %argumentOfPeriapsis.addr, align 8
  %arraydecay4 = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 0
  call void @rotate(%struct.vector* byval(%struct.vector) align 8 %i, %struct.vector* byval(%struct.vector) align 8 %j, double %11, %struct.vector* %arraydecay4)
  %arrayidx5 = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 0
  %12 = bitcast %struct.vector* %i to i8*
  %13 = bitcast %struct.vector* %arrayidx5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %12, i8* align 16 %13, i32 24, i1 false)
  %arrayidx6 = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 1
  %14 = bitcast %struct.vector* %j to i8*
  %15 = bitcast %struct.vector* %arrayidx6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %14, i8* align 8 %15, i32 24, i1 false)
  %16 = load double, double* %eccentricity.addr, align 8
  %cmp = fcmp une double %16, 1.000000e+00
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %17 = load double, double* %eccentricity.addr, align 8
  %18 = load double, double* %eccentricity.addr, align 8
  %mul = fmul double %17, %18
  %sub = fsub double 1.000000e+00, %mul
  store double %sub, double* %l, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %19 = load double, double* %semimajorAxis.addr, align 8
  %20 = load double, double* %l, align 8
  %mul7 = fmul double %20, %19
  store double %mul7, double* %l, align 8
  %21 = load double, double* %trueAnomaly.addr, align 8
  %22 = call double @llvm.cos.f64(double %21)
  store double %22, double* %c, align 8
  %23 = load double, double* %trueAnomaly.addr, align 8
  %24 = call double @llvm.sin.f64(double %23)
  store double %24, double* %s, align 8
  %25 = load double, double* %l, align 8
  %26 = load double, double* %eccentricity.addr, align 8
  %27 = load double, double* %c, align 8
  %mul8 = fmul double %26, %27
  %add = fadd double 1.000000e+00, %mul8
  %div = fdiv double %25, %add
  store double %div, double* %r, align 8
  %28 = load double, double* %s, align 8
  %29 = load double, double* %r, align 8
  %mul9 = fmul double %28, %29
  %30 = load double, double* %r, align 8
  %mul10 = fmul double %mul9, %30
  %31 = load double, double* %l, align 8
  %div11 = fdiv double %mul10, %31
  store double %div11, double* %rprime, align 8
  %32 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx12 = getelementptr inbounds %struct.vector, %struct.vector* %32, i32 0
  %33 = load double, double* %c, align 8
  %34 = load double, double* %s, align 8
  call void @mulAdd(%struct.vector* sret align 8 %tmp, %struct.vector* byval(%struct.vector) align 8 %i, %struct.vector* byval(%struct.vector) align 8 %j, double %33, double %34)
  %35 = bitcast %struct.vector* %arrayidx12 to i8*
  %36 = bitcast %struct.vector* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %35, i8* align 8 %36, i32 24, i1 false)
  %37 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx13 = getelementptr inbounds %struct.vector, %struct.vector* %37, i32 0
  %38 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx15 = getelementptr inbounds %struct.vector, %struct.vector* %38, i32 0
  %39 = load double, double* %r, align 8
  call void @mul(%struct.vector* sret align 8 %tmp14, %struct.vector* byval(%struct.vector) align 8 %arrayidx15, double %39)
  %40 = bitcast %struct.vector* %arrayidx13 to i8*
  %41 = bitcast %struct.vector* %tmp14 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %40, i8* align 8 %41, i32 24, i1 false)
  %42 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx16 = getelementptr inbounds %struct.vector, %struct.vector* %42, i32 1
  %43 = load double, double* %rprime, align 8
  %44 = load double, double* %c, align 8
  %mul18 = fmul double %43, %44
  %45 = load double, double* %r, align 8
  %46 = load double, double* %s, align 8
  %mul19 = fmul double %45, %46
  %sub20 = fsub double %mul18, %mul19
  %47 = load double, double* %rprime, align 8
  %48 = load double, double* %s, align 8
  %mul21 = fmul double %47, %48
  %49 = load double, double* %r, align 8
  %50 = load double, double* %c, align 8
  %mul22 = fmul double %49, %50
  %add23 = fadd double %mul21, %mul22
  call void @mulAdd(%struct.vector* sret align 8 %tmp17, %struct.vector* byval(%struct.vector) align 8 %i, %struct.vector* byval(%struct.vector) align 8 %j, double %sub20, double %add23)
  %51 = bitcast %struct.vector* %arrayidx16 to i8*
  %52 = bitcast %struct.vector* %tmp17 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %51, i8* align 8 %52, i32 24, i1 false)
  %53 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx24 = getelementptr inbounds %struct.vector, %struct.vector* %53, i32 1
  %54 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx26 = getelementptr inbounds %struct.vector, %struct.vector* %54, i32 1
  %55 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx27 = getelementptr inbounds %struct.vector, %struct.vector* %55, i32 1
  %call = call double @vabs(%struct.vector* byval(%struct.vector) align 8 %arrayidx27)
  call void @div(%struct.vector* sret align 8 %tmp25, %struct.vector* byval(%struct.vector) align 8 %arrayidx26, double %call)
  %56 = bitcast %struct.vector* %arrayidx24 to i8*
  %57 = bitcast %struct.vector* %tmp25 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %56, i8* align 8 %57, i32 24, i1 false)
  %58 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx28 = getelementptr inbounds %struct.vector, %struct.vector* %58, i32 1
  %59 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx30 = getelementptr inbounds %struct.vector, %struct.vector* %59, i32 1
  %60 = load double, double* %r, align 8
  %div31 = fdiv double 2.000000e+00, %60
  %61 = load double, double* %semimajorAxis.addr, align 8
  %div32 = fdiv double 1.000000e+00, %61
  %sub33 = fsub double %div31, %div32
  %62 = call double @llvm.sqrt.f64(double %sub33)
  call void @mul(%struct.vector* sret align 8 %tmp29, %struct.vector* byval(%struct.vector) align 8 %arrayidx30, double %62)
  %63 = bitcast %struct.vector* %arrayidx28 to i8*
  %64 = bitcast %struct.vector* %tmp29 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %63, i8* align 8 %64, i32 24, i1 false)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %longitude = alloca double, align 8
  %ps = alloca [2 x %struct.vector], align 16
  %buffer = alloca [80 x i8], align 16
  store i32 0, i32* %retval, align 4
  store double 0x3FE0C152500C1525, double* %longitude, align 8
  %0 = load double, double* %longitude, align 8
  %arraydecay = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %ps, i32 0, i32 0
  call void @orbitalStateVectors(double 1.000000e+00, double 1.000000e-01, double 0.000000e+00, double %0, double 0.000000e+00, double 0.000000e+00, %struct.vector* %arraydecay)
  %arraydecay1 = getelementptr inbounds [80 x i8], [80 x i8]* %buffer, i32 0, i32 0
  %arrayidx = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %ps, i32 0, i32 0
  call void @vecAsStr(i8* %arraydecay1, %struct.vector* byval(%struct.vector) align 8 %arrayidx)
  %arraydecay2 = getelementptr inbounds [80 x i8], [80 x i8]* %buffer, i32 0, i32 0
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i32 0, i32 0), i8* %arraydecay2)
  %arraydecay3 = getelementptr inbounds [80 x i8], [80 x i8]* %buffer, i32 0, i32 0
  %arrayidx4 = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %ps, i32 0, i32 1
  call void @vecAsStr(i8* %arraydecay3, %struct.vector* byval(%struct.vector) align 8 %arrayidx4)
  %arraydecay5 = getelementptr inbounds [80 x i8], [80 x i8]* %buffer, i32 0, i32 0
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i32 0, i32 0), i8* %arraydecay5)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for add()

; entering Souper's runOnFunction() for mul()

; ModuleID = './Orbital_elements.c.bc'
source_filename = "./Orbital_elements.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.vector = type { double, double, double }

@.str = private unnamed_addr constant [22 x i8] c"(%.17g, %.17g, %.17g)\00", align 1
@__const.orbitalStateVectors.i = private unnamed_addr constant %struct.vector { double 1.000000e+00, double 0.000000e+00, double 0.000000e+00 }, align 8
@__const.orbitalStateVectors.j = private unnamed_addr constant %struct.vector { double 0.000000e+00, double 1.000000e+00, double 0.000000e+00 }, align 8
@__const.orbitalStateVectors.k = private unnamed_addr constant %struct.vector { double 0.000000e+00, double 0.000000e+00, double 1.000000e+00 }, align 8
@.str.1 = private unnamed_addr constant [15 x i8] c"Position : %s\0A\00", align 1
@.str.2 = private unnamed_addr constant [15 x i8] c"Speed    : %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @add(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %v, %struct.vector* byval(%struct.vector) align 8 %w) #0 {
entry:
  %x = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 0
  %0 = load double, double* %x1, align 8
  %x2 = getelementptr inbounds %struct.vector, %struct.vector* %w, i32 0, i32 0
  %1 = load double, double* %x2, align 8
  %add = fadd double %0, %1
  store double %add, double* %x, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  %y3 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 1
  %2 = load double, double* %y3, align 8
  %y4 = getelementptr inbounds %struct.vector, %struct.vector* %w, i32 0, i32 1
  %3 = load double, double* %y4, align 8
  %add5 = fadd double %2, %3
  store double %add5, double* %y, align 8
  %z = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 2
  %z6 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 2
  %4 = load double, double* %z6, align 8
  %z7 = getelementptr inbounds %struct.vector, %struct.vector* %w, i32 0, i32 2
  %5 = load double, double* %z7, align 8
  %add8 = fadd double %4, %5
  store double %add8, double* %z, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @mul(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %v, double %m) #0 {
entry:
  %m.addr = alloca double, align 8
  store double %m, double* %m.addr, align 8
  %x = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 0
  %0 = load double, double* %x1, align 8
  %1 = load double, double* %m.addr, align 8
  %mul = fmul double %0, %1
  store double %mul, double* %x, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  %y2 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 1
  %2 = load double, double* %y2, align 8
  %3 = load double, double* %m.addr, align 8
  %mul3 = fmul double %2, %3
  store double %mul3, double* %y, align 8
  %z = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 2
  %z4 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 2
  %4 = load double, double* %z4, align 8
  %5 = load double, double* %m.addr, align 8
  %mul5 = fmul double %4, %5
  store double %mul5, double* %z, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @div(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %v, double %d) #0 {
entry:
  %d.addr = alloca double, align 8
  store double %d, double* %d.addr, align 8
  %0 = load double, double* %d.addr, align 8
  %div = fdiv double 1.000000e+00, %0
  call void @mul(%struct.vector* sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %v, double %div)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double @vabs(%struct.vector* byval(%struct.vector) align 8 %v) #0 {
entry:
  %x = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %mul = fmul double %0, %1
  %y = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %y2 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 1
  %3 = load double, double* %y2, align 8
  %mul3 = fmul double %2, %3
  %add = fadd double %mul, %mul3
  %z = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 2
  %4 = load double, double* %z, align 8
  %z4 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 2
  %5 = load double, double* %z4, align 8
  %mul5 = fmul double %4, %5
  %add6 = fadd double %add, %mul5
  %6 = call double @llvm.sqrt.f64(double %add6)
  ret double %6
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sqrt.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @mulAdd(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %v1, %struct.vector* byval(%struct.vector) align 8 %v2, double %x1, double %x2) #0 {
entry:
  %x1.addr = alloca double, align 8
  %x2.addr = alloca double, align 8
  %agg.tmp = alloca %struct.vector, align 8
  %agg.tmp1 = alloca %struct.vector, align 8
  store double %x1, double* %x1.addr, align 8
  store double %x2, double* %x2.addr, align 8
  %0 = load double, double* %x1.addr, align 8
  call void @mul(%struct.vector* sret align 8 %agg.tmp, %struct.vector* byval(%struct.vector) align 8 %v1, double %0)
  %1 = load double, double* %x2.addr, align 8
  call void @mul(%struct.vector* sret align 8 %agg.tmp1, %struct.vector* byval(%struct.vector) align 8 %v2, double %1)
  call void @add(%struct.vector* sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %agg.tmp, %struct.vector* byval(%struct.vector) align 8 %agg.tmp1)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @vecAsStr(i8* %buffer, %struct.vector* byval(%struct.vector) align 8 %v) #0 {
entry:
  %buffer.addr = alloca i8*, align 4
  store i8* %buffer, i8** %buffer.addr, align 4
  %0 = load i8*, i8** %buffer.addr, align 4
  %x = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 0
  %1 = load double, double* %x, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %z = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 2
  %3 = load double, double* %z, align 8
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* %0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i32 0, i32 0), double %1, double %2, double %3)
  ret void
}

declare i32 @sprintf(i8* %0, i8* %1, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden void @rotate(%struct.vector* byval(%struct.vector) align 8 %i, %struct.vector* byval(%struct.vector) align 8 %j, double %alpha, %struct.vector* %ps) #0 {
entry:
  %alpha.addr = alloca double, align 8
  %ps.addr = alloca %struct.vector*, align 4
  %tmp = alloca %struct.vector, align 8
  %tmp2 = alloca %struct.vector, align 8
  store double %alpha, double* %alpha.addr, align 8
  store %struct.vector* %ps, %struct.vector** %ps.addr, align 4
  %0 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx = getelementptr inbounds %struct.vector, %struct.vector* %0, i32 0
  %1 = load double, double* %alpha.addr, align 8
  %2 = call double @llvm.cos.f64(double %1)
  %3 = load double, double* %alpha.addr, align 8
  %4 = call double @llvm.sin.f64(double %3)
  call void @mulAdd(%struct.vector* sret align 8 %tmp, %struct.vector* byval(%struct.vector) align 8 %i, %struct.vector* byval(%struct.vector) align 8 %j, double %2, double %4)
  %5 = bitcast %struct.vector* %arrayidx to i8*
  %6 = bitcast %struct.vector* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %5, i8* align 8 %6, i32 24, i1 false)
  %7 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx1 = getelementptr inbounds %struct.vector, %struct.vector* %7, i32 1
  %8 = load double, double* %alpha.addr, align 8
  %9 = call double @llvm.sin.f64(double %8)
  %fneg = fneg double %9
  %10 = load double, double* %alpha.addr, align 8
  %11 = call double @llvm.cos.f64(double %10)
  call void @mulAdd(%struct.vector* sret align 8 %tmp2, %struct.vector* byval(%struct.vector) align 8 %i, %struct.vector* byval(%struct.vector) align 8 %j, double %fneg, double %11)
  %12 = bitcast %struct.vector* %arrayidx1 to i8*
  %13 = bitcast %struct.vector* %tmp2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %12, i8* align 8 %13, i32 24, i1 false)
  ret void
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.cos.f64(double %0) #1

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sin.f64(double %0) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: noinline nounwind optnone
define hidden void @orbitalStateVectors(double %semimajorAxis, double %eccentricity, double %inclination, double %longitudeOfAscendingNode, double %argumentOfPeriapsis, double %trueAnomaly, %struct.vector* %ps) #0 {
entry:
  %semimajorAxis.addr = alloca double, align 8
  %eccentricity.addr = alloca double, align 8
  %inclination.addr = alloca double, align 8
  %longitudeOfAscendingNode.addr = alloca double, align 8
  %argumentOfPeriapsis.addr = alloca double, align 8
  %trueAnomaly.addr = alloca double, align 8
  %ps.addr = alloca %struct.vector*, align 4
  %i = alloca %struct.vector, align 8
  %j = alloca %struct.vector, align 8
  %k = alloca %struct.vector, align 8
  %l = alloca double, align 8
  %c = alloca double, align 8
  %s = alloca double, align 8
  %r = alloca double, align 8
  %rprime = alloca double, align 8
  %qs = alloca [2 x %struct.vector], align 16
  %tmp = alloca %struct.vector, align 8
  %tmp14 = alloca %struct.vector, align 8
  %tmp17 = alloca %struct.vector, align 8
  %tmp25 = alloca %struct.vector, align 8
  %tmp29 = alloca %struct.vector, align 8
  store double %semimajorAxis, double* %semimajorAxis.addr, align 8
  store double %eccentricity, double* %eccentricity.addr, align 8
  store double %inclination, double* %inclination.addr, align 8
  store double %longitudeOfAscendingNode, double* %longitudeOfAscendingNode.addr, align 8
  store double %argumentOfPeriapsis, double* %argumentOfPeriapsis.addr, align 8
  store double %trueAnomaly, double* %trueAnomaly.addr, align 8
  store %struct.vector* %ps, %struct.vector** %ps.addr, align 4
  %0 = bitcast %struct.vector* %i to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %0, i8* align 8 bitcast (%struct.vector* @__const.orbitalStateVectors.i to i8*), i32 24, i1 false)
  %1 = bitcast %struct.vector* %j to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %1, i8* align 8 bitcast (%struct.vector* @__const.orbitalStateVectors.j to i8*), i32 24, i1 false)
  %2 = bitcast %struct.vector* %k to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %2, i8* align 8 bitcast (%struct.vector* @__const.orbitalStateVectors.k to i8*), i32 24, i1 false)
  store double 2.000000e+00, double* %l, align 8
  %3 = load double, double* %longitudeOfAscendingNode.addr, align 8
  %arraydecay = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 0
  call void @rotate(%struct.vector* byval(%struct.vector) align 8 %i, %struct.vector* byval(%struct.vector) align 8 %j, double %3, %struct.vector* %arraydecay)
  %arrayidx = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 0
  %4 = bitcast %struct.vector* %i to i8*
  %5 = bitcast %struct.vector* %arrayidx to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %4, i8* align 16 %5, i32 24, i1 false)
  %arrayidx1 = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 1
  %6 = bitcast %struct.vector* %j to i8*
  %7 = bitcast %struct.vector* %arrayidx1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 24, i1 false)
  %8 = load double, double* %inclination.addr, align 8
  %arraydecay2 = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 0
  call void @rotate(%struct.vector* byval(%struct.vector) align 8 %j, %struct.vector* byval(%struct.vector) align 8 %k, double %8, %struct.vector* %arraydecay2)
  %arrayidx3 = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 0
  %9 = bitcast %struct.vector* %j to i8*
  %10 = bitcast %struct.vector* %arrayidx3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %9, i8* align 16 %10, i32 24, i1 false)
  %11 = load double, double* %argumentOfPeriapsis.addr, align 8
  %arraydecay4 = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 0
  call void @rotate(%struct.vector* byval(%struct.vector) align 8 %i, %struct.vector* byval(%struct.vector) align 8 %j, double %11, %struct.vector* %arraydecay4)
  %arrayidx5 = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 0
  %12 = bitcast %struct.vector* %i to i8*
  %13 = bitcast %struct.vector* %arrayidx5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %12, i8* align 16 %13, i32 24, i1 false)
  %arrayidx6 = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 1
  %14 = bitcast %struct.vector* %j to i8*
  %15 = bitcast %struct.vector* %arrayidx6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %14, i8* align 8 %15, i32 24, i1 false)
  %16 = load double, double* %eccentricity.addr, align 8
  %cmp = fcmp une double %16, 1.000000e+00
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %17 = load double, double* %eccentricity.addr, align 8
  %18 = load double, double* %eccentricity.addr, align 8
  %mul = fmul double %17, %18
  %sub = fsub double 1.000000e+00, %mul
  store double %sub, double* %l, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %19 = load double, double* %semimajorAxis.addr, align 8
  %20 = load double, double* %l, align 8
  %mul7 = fmul double %20, %19
  store double %mul7, double* %l, align 8
  %21 = load double, double* %trueAnomaly.addr, align 8
  %22 = call double @llvm.cos.f64(double %21)
  store double %22, double* %c, align 8
  %23 = load double, double* %trueAnomaly.addr, align 8
  %24 = call double @llvm.sin.f64(double %23)
  store double %24, double* %s, align 8
  %25 = load double, double* %l, align 8
  %26 = load double, double* %eccentricity.addr, align 8
  %27 = load double, double* %c, align 8
  %mul8 = fmul double %26, %27
  %add = fadd double 1.000000e+00, %mul8
  %div = fdiv double %25, %add
  store double %div, double* %r, align 8
  %28 = load double, double* %s, align 8
  %29 = load double, double* %r, align 8
  %mul9 = fmul double %28, %29
  %30 = load double, double* %r, align 8
  %mul10 = fmul double %mul9, %30
  %31 = load double, double* %l, align 8
  %div11 = fdiv double %mul10, %31
  store double %div11, double* %rprime, align 8
  %32 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx12 = getelementptr inbounds %struct.vector, %struct.vector* %32, i32 0
  %33 = load double, double* %c, align 8
  %34 = load double, double* %s, align 8
  call void @mulAdd(%struct.vector* sret align 8 %tmp, %struct.vector* byval(%struct.vector) align 8 %i, %struct.vector* byval(%struct.vector) align 8 %j, double %33, double %34)
  %35 = bitcast %struct.vector* %arrayidx12 to i8*
  %36 = bitcast %struct.vector* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %35, i8* align 8 %36, i32 24, i1 false)
  %37 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx13 = getelementptr inbounds %struct.vector, %struct.vector* %37, i32 0
  %38 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx15 = getelementptr inbounds %struct.vector, %struct.vector* %38, i32 0
  %39 = load double, double* %r, align 8
  call void @mul(%struct.vector* sret align 8 %tmp14, %struct.vector* byval(%struct.vector) align 8 %arrayidx15, double %39)
  %40 = bitcast %struct.vector* %arrayidx13 to i8*
  %41 = bitcast %struct.vector* %tmp14 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %40, i8* align 8 %41, i32 24, i1 false)
  %42 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx16 = getelementptr inbounds %struct.vector, %struct.vector* %42, i32 1
  %43 = load double, double* %rprime, align 8
  %44 = load double, double* %c, align 8
  %mul18 = fmul double %43, %44
  %45 = load double, double* %r, align 8
  %46 = load double, double* %s, align 8
  %mul19 = fmul double %45, %46
  %sub20 = fsub double %mul18, %mul19
  %47 = load double, double* %rprime, align 8
  %48 = load double, double* %s, align 8
  %mul21 = fmul double %47, %48
  %49 = load double, double* %r, align 8
  %50 = load double, double* %c, align 8
  %mul22 = fmul double %49, %50
  %add23 = fadd double %mul21, %mul22
  call void @mulAdd(%struct.vector* sret align 8 %tmp17, %struct.vector* byval(%struct.vector) align 8 %i, %struct.vector* byval(%struct.vector) align 8 %j, double %sub20, double %add23)
  %51 = bitcast %struct.vector* %arrayidx16 to i8*
  %52 = bitcast %struct.vector* %tmp17 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %51, i8* align 8 %52, i32 24, i1 false)
  %53 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx24 = getelementptr inbounds %struct.vector, %struct.vector* %53, i32 1
  %54 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx26 = getelementptr inbounds %struct.vector, %struct.vector* %54, i32 1
  %55 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx27 = getelementptr inbounds %struct.vector, %struct.vector* %55, i32 1
  %call = call double @vabs(%struct.vector* byval(%struct.vector) align 8 %arrayidx27)
  call void @div(%struct.vector* sret align 8 %tmp25, %struct.vector* byval(%struct.vector) align 8 %arrayidx26, double %call)
  %56 = bitcast %struct.vector* %arrayidx24 to i8*
  %57 = bitcast %struct.vector* %tmp25 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %56, i8* align 8 %57, i32 24, i1 false)
  %58 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx28 = getelementptr inbounds %struct.vector, %struct.vector* %58, i32 1
  %59 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx30 = getelementptr inbounds %struct.vector, %struct.vector* %59, i32 1
  %60 = load double, double* %r, align 8
  %div31 = fdiv double 2.000000e+00, %60
  %61 = load double, double* %semimajorAxis.addr, align 8
  %div32 = fdiv double 1.000000e+00, %61
  %sub33 = fsub double %div31, %div32
  %62 = call double @llvm.sqrt.f64(double %sub33)
  call void @mul(%struct.vector* sret align 8 %tmp29, %struct.vector* byval(%struct.vector) align 8 %arrayidx30, double %62)
  %63 = bitcast %struct.vector* %arrayidx28 to i8*
  %64 = bitcast %struct.vector* %tmp29 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %63, i8* align 8 %64, i32 24, i1 false)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %longitude = alloca double, align 8
  %ps = alloca [2 x %struct.vector], align 16
  %buffer = alloca [80 x i8], align 16
  store i32 0, i32* %retval, align 4
  store double 0x3FE0C152500C1525, double* %longitude, align 8
  %0 = load double, double* %longitude, align 8
  %arraydecay = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %ps, i32 0, i32 0
  call void @orbitalStateVectors(double 1.000000e+00, double 1.000000e-01, double 0.000000e+00, double %0, double 0.000000e+00, double 0.000000e+00, %struct.vector* %arraydecay)
  %arraydecay1 = getelementptr inbounds [80 x i8], [80 x i8]* %buffer, i32 0, i32 0
  %arrayidx = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %ps, i32 0, i32 0
  call void @vecAsStr(i8* %arraydecay1, %struct.vector* byval(%struct.vector) align 8 %arrayidx)
  %arraydecay2 = getelementptr inbounds [80 x i8], [80 x i8]* %buffer, i32 0, i32 0
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i32 0, i32 0), i8* %arraydecay2)
  %arraydecay3 = getelementptr inbounds [80 x i8], [80 x i8]* %buffer, i32 0, i32 0
  %arrayidx4 = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %ps, i32 0, i32 1
  call void @vecAsStr(i8* %arraydecay3, %struct.vector* byval(%struct.vector) align 8 %arrayidx4)
  %arraydecay5 = getelementptr inbounds [80 x i8], [80 x i8]* %buffer, i32 0, i32 0
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i32 0, i32 0), i8* %arraydecay5)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for mul()

; entering Souper's runOnFunction() for div()

; ModuleID = './Orbital_elements.c.bc'
source_filename = "./Orbital_elements.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.vector = type { double, double, double }

@.str = private unnamed_addr constant [22 x i8] c"(%.17g, %.17g, %.17g)\00", align 1
@__const.orbitalStateVectors.i = private unnamed_addr constant %struct.vector { double 1.000000e+00, double 0.000000e+00, double 0.000000e+00 }, align 8
@__const.orbitalStateVectors.j = private unnamed_addr constant %struct.vector { double 0.000000e+00, double 1.000000e+00, double 0.000000e+00 }, align 8
@__const.orbitalStateVectors.k = private unnamed_addr constant %struct.vector { double 0.000000e+00, double 0.000000e+00, double 1.000000e+00 }, align 8
@.str.1 = private unnamed_addr constant [15 x i8] c"Position : %s\0A\00", align 1
@.str.2 = private unnamed_addr constant [15 x i8] c"Speed    : %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @add(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %v, %struct.vector* byval(%struct.vector) align 8 %w) #0 {
entry:
  %x = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 0
  %0 = load double, double* %x1, align 8
  %x2 = getelementptr inbounds %struct.vector, %struct.vector* %w, i32 0, i32 0
  %1 = load double, double* %x2, align 8
  %add = fadd double %0, %1
  store double %add, double* %x, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  %y3 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 1
  %2 = load double, double* %y3, align 8
  %y4 = getelementptr inbounds %struct.vector, %struct.vector* %w, i32 0, i32 1
  %3 = load double, double* %y4, align 8
  %add5 = fadd double %2, %3
  store double %add5, double* %y, align 8
  %z = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 2
  %z6 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 2
  %4 = load double, double* %z6, align 8
  %z7 = getelementptr inbounds %struct.vector, %struct.vector* %w, i32 0, i32 2
  %5 = load double, double* %z7, align 8
  %add8 = fadd double %4, %5
  store double %add8, double* %z, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @mul(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %v, double %m) #0 {
entry:
  %m.addr = alloca double, align 8
  store double %m, double* %m.addr, align 8
  %x = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 0
  %0 = load double, double* %x1, align 8
  %1 = load double, double* %m.addr, align 8
  %mul = fmul double %0, %1
  store double %mul, double* %x, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  %y2 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 1
  %2 = load double, double* %y2, align 8
  %3 = load double, double* %m.addr, align 8
  %mul3 = fmul double %2, %3
  store double %mul3, double* %y, align 8
  %z = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 2
  %z4 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 2
  %4 = load double, double* %z4, align 8
  %5 = load double, double* %m.addr, align 8
  %mul5 = fmul double %4, %5
  store double %mul5, double* %z, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @div(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %v, double %d) #0 {
entry:
  %d.addr = alloca double, align 8
  store double %d, double* %d.addr, align 8
  %0 = load double, double* %d.addr, align 8
  %div = fdiv double 1.000000e+00, %0
  call void @mul(%struct.vector* sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %v, double %div)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double @vabs(%struct.vector* byval(%struct.vector) align 8 %v) #0 {
entry:
  %x = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %mul = fmul double %0, %1
  %y = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %y2 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 1
  %3 = load double, double* %y2, align 8
  %mul3 = fmul double %2, %3
  %add = fadd double %mul, %mul3
  %z = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 2
  %4 = load double, double* %z, align 8
  %z4 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 2
  %5 = load double, double* %z4, align 8
  %mul5 = fmul double %4, %5
  %add6 = fadd double %add, %mul5
  %6 = call double @llvm.sqrt.f64(double %add6)
  ret double %6
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sqrt.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @mulAdd(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %v1, %struct.vector* byval(%struct.vector) align 8 %v2, double %x1, double %x2) #0 {
entry:
  %x1.addr = alloca double, align 8
  %x2.addr = alloca double, align 8
  %agg.tmp = alloca %struct.vector, align 8
  %agg.tmp1 = alloca %struct.vector, align 8
  store double %x1, double* %x1.addr, align 8
  store double %x2, double* %x2.addr, align 8
  %0 = load double, double* %x1.addr, align 8
  call void @mul(%struct.vector* sret align 8 %agg.tmp, %struct.vector* byval(%struct.vector) align 8 %v1, double %0)
  %1 = load double, double* %x2.addr, align 8
  call void @mul(%struct.vector* sret align 8 %agg.tmp1, %struct.vector* byval(%struct.vector) align 8 %v2, double %1)
  call void @add(%struct.vector* sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %agg.tmp, %struct.vector* byval(%struct.vector) align 8 %agg.tmp1)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @vecAsStr(i8* %buffer, %struct.vector* byval(%struct.vector) align 8 %v) #0 {
entry:
  %buffer.addr = alloca i8*, align 4
  store i8* %buffer, i8** %buffer.addr, align 4
  %0 = load i8*, i8** %buffer.addr, align 4
  %x = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 0
  %1 = load double, double* %x, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %z = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 2
  %3 = load double, double* %z, align 8
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* %0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i32 0, i32 0), double %1, double %2, double %3)
  ret void
}

declare i32 @sprintf(i8* %0, i8* %1, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden void @rotate(%struct.vector* byval(%struct.vector) align 8 %i, %struct.vector* byval(%struct.vector) align 8 %j, double %alpha, %struct.vector* %ps) #0 {
entry:
  %alpha.addr = alloca double, align 8
  %ps.addr = alloca %struct.vector*, align 4
  %tmp = alloca %struct.vector, align 8
  %tmp2 = alloca %struct.vector, align 8
  store double %alpha, double* %alpha.addr, align 8
  store %struct.vector* %ps, %struct.vector** %ps.addr, align 4
  %0 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx = getelementptr inbounds %struct.vector, %struct.vector* %0, i32 0
  %1 = load double, double* %alpha.addr, align 8
  %2 = call double @llvm.cos.f64(double %1)
  %3 = load double, double* %alpha.addr, align 8
  %4 = call double @llvm.sin.f64(double %3)
  call void @mulAdd(%struct.vector* sret align 8 %tmp, %struct.vector* byval(%struct.vector) align 8 %i, %struct.vector* byval(%struct.vector) align 8 %j, double %2, double %4)
  %5 = bitcast %struct.vector* %arrayidx to i8*
  %6 = bitcast %struct.vector* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %5, i8* align 8 %6, i32 24, i1 false)
  %7 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx1 = getelementptr inbounds %struct.vector, %struct.vector* %7, i32 1
  %8 = load double, double* %alpha.addr, align 8
  %9 = call double @llvm.sin.f64(double %8)
  %fneg = fneg double %9
  %10 = load double, double* %alpha.addr, align 8
  %11 = call double @llvm.cos.f64(double %10)
  call void @mulAdd(%struct.vector* sret align 8 %tmp2, %struct.vector* byval(%struct.vector) align 8 %i, %struct.vector* byval(%struct.vector) align 8 %j, double %fneg, double %11)
  %12 = bitcast %struct.vector* %arrayidx1 to i8*
  %13 = bitcast %struct.vector* %tmp2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %12, i8* align 8 %13, i32 24, i1 false)
  ret void
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.cos.f64(double %0) #1

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sin.f64(double %0) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: noinline nounwind optnone
define hidden void @orbitalStateVectors(double %semimajorAxis, double %eccentricity, double %inclination, double %longitudeOfAscendingNode, double %argumentOfPeriapsis, double %trueAnomaly, %struct.vector* %ps) #0 {
entry:
  %semimajorAxis.addr = alloca double, align 8
  %eccentricity.addr = alloca double, align 8
  %inclination.addr = alloca double, align 8
  %longitudeOfAscendingNode.addr = alloca double, align 8
  %argumentOfPeriapsis.addr = alloca double, align 8
  %trueAnomaly.addr = alloca double, align 8
  %ps.addr = alloca %struct.vector*, align 4
  %i = alloca %struct.vector, align 8
  %j = alloca %struct.vector, align 8
  %k = alloca %struct.vector, align 8
  %l = alloca double, align 8
  %c = alloca double, align 8
  %s = alloca double, align 8
  %r = alloca double, align 8
  %rprime = alloca double, align 8
  %qs = alloca [2 x %struct.vector], align 16
  %tmp = alloca %struct.vector, align 8
  %tmp14 = alloca %struct.vector, align 8
  %tmp17 = alloca %struct.vector, align 8
  %tmp25 = alloca %struct.vector, align 8
  %tmp29 = alloca %struct.vector, align 8
  store double %semimajorAxis, double* %semimajorAxis.addr, align 8
  store double %eccentricity, double* %eccentricity.addr, align 8
  store double %inclination, double* %inclination.addr, align 8
  store double %longitudeOfAscendingNode, double* %longitudeOfAscendingNode.addr, align 8
  store double %argumentOfPeriapsis, double* %argumentOfPeriapsis.addr, align 8
  store double %trueAnomaly, double* %trueAnomaly.addr, align 8
  store %struct.vector* %ps, %struct.vector** %ps.addr, align 4
  %0 = bitcast %struct.vector* %i to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %0, i8* align 8 bitcast (%struct.vector* @__const.orbitalStateVectors.i to i8*), i32 24, i1 false)
  %1 = bitcast %struct.vector* %j to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %1, i8* align 8 bitcast (%struct.vector* @__const.orbitalStateVectors.j to i8*), i32 24, i1 false)
  %2 = bitcast %struct.vector* %k to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %2, i8* align 8 bitcast (%struct.vector* @__const.orbitalStateVectors.k to i8*), i32 24, i1 false)
  store double 2.000000e+00, double* %l, align 8
  %3 = load double, double* %longitudeOfAscendingNode.addr, align 8
  %arraydecay = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 0
  call void @rotate(%struct.vector* byval(%struct.vector) align 8 %i, %struct.vector* byval(%struct.vector) align 8 %j, double %3, %struct.vector* %arraydecay)
  %arrayidx = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 0
  %4 = bitcast %struct.vector* %i to i8*
  %5 = bitcast %struct.vector* %arrayidx to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %4, i8* align 16 %5, i32 24, i1 false)
  %arrayidx1 = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 1
  %6 = bitcast %struct.vector* %j to i8*
  %7 = bitcast %struct.vector* %arrayidx1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 24, i1 false)
  %8 = load double, double* %inclination.addr, align 8
  %arraydecay2 = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 0
  call void @rotate(%struct.vector* byval(%struct.vector) align 8 %j, %struct.vector* byval(%struct.vector) align 8 %k, double %8, %struct.vector* %arraydecay2)
  %arrayidx3 = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 0
  %9 = bitcast %struct.vector* %j to i8*
  %10 = bitcast %struct.vector* %arrayidx3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %9, i8* align 16 %10, i32 24, i1 false)
  %11 = load double, double* %argumentOfPeriapsis.addr, align 8
  %arraydecay4 = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 0
  call void @rotate(%struct.vector* byval(%struct.vector) align 8 %i, %struct.vector* byval(%struct.vector) align 8 %j, double %11, %struct.vector* %arraydecay4)
  %arrayidx5 = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 0
  %12 = bitcast %struct.vector* %i to i8*
  %13 = bitcast %struct.vector* %arrayidx5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %12, i8* align 16 %13, i32 24, i1 false)
  %arrayidx6 = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 1
  %14 = bitcast %struct.vector* %j to i8*
  %15 = bitcast %struct.vector* %arrayidx6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %14, i8* align 8 %15, i32 24, i1 false)
  %16 = load double, double* %eccentricity.addr, align 8
  %cmp = fcmp une double %16, 1.000000e+00
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %17 = load double, double* %eccentricity.addr, align 8
  %18 = load double, double* %eccentricity.addr, align 8
  %mul = fmul double %17, %18
  %sub = fsub double 1.000000e+00, %mul
  store double %sub, double* %l, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %19 = load double, double* %semimajorAxis.addr, align 8
  %20 = load double, double* %l, align 8
  %mul7 = fmul double %20, %19
  store double %mul7, double* %l, align 8
  %21 = load double, double* %trueAnomaly.addr, align 8
  %22 = call double @llvm.cos.f64(double %21)
  store double %22, double* %c, align 8
  %23 = load double, double* %trueAnomaly.addr, align 8
  %24 = call double @llvm.sin.f64(double %23)
  store double %24, double* %s, align 8
  %25 = load double, double* %l, align 8
  %26 = load double, double* %eccentricity.addr, align 8
  %27 = load double, double* %c, align 8
  %mul8 = fmul double %26, %27
  %add = fadd double 1.000000e+00, %mul8
  %div = fdiv double %25, %add
  store double %div, double* %r, align 8
  %28 = load double, double* %s, align 8
  %29 = load double, double* %r, align 8
  %mul9 = fmul double %28, %29
  %30 = load double, double* %r, align 8
  %mul10 = fmul double %mul9, %30
  %31 = load double, double* %l, align 8
  %div11 = fdiv double %mul10, %31
  store double %div11, double* %rprime, align 8
  %32 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx12 = getelementptr inbounds %struct.vector, %struct.vector* %32, i32 0
  %33 = load double, double* %c, align 8
  %34 = load double, double* %s, align 8
  call void @mulAdd(%struct.vector* sret align 8 %tmp, %struct.vector* byval(%struct.vector) align 8 %i, %struct.vector* byval(%struct.vector) align 8 %j, double %33, double %34)
  %35 = bitcast %struct.vector* %arrayidx12 to i8*
  %36 = bitcast %struct.vector* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %35, i8* align 8 %36, i32 24, i1 false)
  %37 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx13 = getelementptr inbounds %struct.vector, %struct.vector* %37, i32 0
  %38 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx15 = getelementptr inbounds %struct.vector, %struct.vector* %38, i32 0
  %39 = load double, double* %r, align 8
  call void @mul(%struct.vector* sret align 8 %tmp14, %struct.vector* byval(%struct.vector) align 8 %arrayidx15, double %39)
  %40 = bitcast %struct.vector* %arrayidx13 to i8*
  %41 = bitcast %struct.vector* %tmp14 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %40, i8* align 8 %41, i32 24, i1 false)
  %42 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx16 = getelementptr inbounds %struct.vector, %struct.vector* %42, i32 1
  %43 = load double, double* %rprime, align 8
  %44 = load double, double* %c, align 8
  %mul18 = fmul double %43, %44
  %45 = load double, double* %r, align 8
  %46 = load double, double* %s, align 8
  %mul19 = fmul double %45, %46
  %sub20 = fsub double %mul18, %mul19
  %47 = load double, double* %rprime, align 8
  %48 = load double, double* %s, align 8
  %mul21 = fmul double %47, %48
  %49 = load double, double* %r, align 8
  %50 = load double, double* %c, align 8
  %mul22 = fmul double %49, %50
  %add23 = fadd double %mul21, %mul22
  call void @mulAdd(%struct.vector* sret align 8 %tmp17, %struct.vector* byval(%struct.vector) align 8 %i, %struct.vector* byval(%struct.vector) align 8 %j, double %sub20, double %add23)
  %51 = bitcast %struct.vector* %arrayidx16 to i8*
  %52 = bitcast %struct.vector* %tmp17 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %51, i8* align 8 %52, i32 24, i1 false)
  %53 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx24 = getelementptr inbounds %struct.vector, %struct.vector* %53, i32 1
  %54 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx26 = getelementptr inbounds %struct.vector, %struct.vector* %54, i32 1
  %55 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx27 = getelementptr inbounds %struct.vector, %struct.vector* %55, i32 1
  %call = call double @vabs(%struct.vector* byval(%struct.vector) align 8 %arrayidx27)
  call void @div(%struct.vector* sret align 8 %tmp25, %struct.vector* byval(%struct.vector) align 8 %arrayidx26, double %call)
  %56 = bitcast %struct.vector* %arrayidx24 to i8*
  %57 = bitcast %struct.vector* %tmp25 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %56, i8* align 8 %57, i32 24, i1 false)
  %58 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx28 = getelementptr inbounds %struct.vector, %struct.vector* %58, i32 1
  %59 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx30 = getelementptr inbounds %struct.vector, %struct.vector* %59, i32 1
  %60 = load double, double* %r, align 8
  %div31 = fdiv double 2.000000e+00, %60
  %61 = load double, double* %semimajorAxis.addr, align 8
  %div32 = fdiv double 1.000000e+00, %61
  %sub33 = fsub double %div31, %div32
  %62 = call double @llvm.sqrt.f64(double %sub33)
  call void @mul(%struct.vector* sret align 8 %tmp29, %struct.vector* byval(%struct.vector) align 8 %arrayidx30, double %62)
  %63 = bitcast %struct.vector* %arrayidx28 to i8*
  %64 = bitcast %struct.vector* %tmp29 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %63, i8* align 8 %64, i32 24, i1 false)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %longitude = alloca double, align 8
  %ps = alloca [2 x %struct.vector], align 16
  %buffer = alloca [80 x i8], align 16
  store i32 0, i32* %retval, align 4
  store double 0x3FE0C152500C1525, double* %longitude, align 8
  %0 = load double, double* %longitude, align 8
  %arraydecay = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %ps, i32 0, i32 0
  call void @orbitalStateVectors(double 1.000000e+00, double 1.000000e-01, double 0.000000e+00, double %0, double 0.000000e+00, double 0.000000e+00, %struct.vector* %arraydecay)
  %arraydecay1 = getelementptr inbounds [80 x i8], [80 x i8]* %buffer, i32 0, i32 0
  %arrayidx = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %ps, i32 0, i32 0
  call void @vecAsStr(i8* %arraydecay1, %struct.vector* byval(%struct.vector) align 8 %arrayidx)
  %arraydecay2 = getelementptr inbounds [80 x i8], [80 x i8]* %buffer, i32 0, i32 0
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i32 0, i32 0), i8* %arraydecay2)
  %arraydecay3 = getelementptr inbounds [80 x i8], [80 x i8]* %buffer, i32 0, i32 0
  %arrayidx4 = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %ps, i32 0, i32 1
  call void @vecAsStr(i8* %arraydecay3, %struct.vector* byval(%struct.vector) align 8 %arrayidx4)
  %arraydecay5 = getelementptr inbounds [80 x i8], [80 x i8]* %buffer, i32 0, i32 0
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i32 0, i32 0), i8* %arraydecay5)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for div()

; entering Souper's runOnFunction() for vabs()

; ModuleID = './Orbital_elements.c.bc'
source_filename = "./Orbital_elements.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.vector = type { double, double, double }

@.str = private unnamed_addr constant [22 x i8] c"(%.17g, %.17g, %.17g)\00", align 1
@__const.orbitalStateVectors.i = private unnamed_addr constant %struct.vector { double 1.000000e+00, double 0.000000e+00, double 0.000000e+00 }, align 8
@__const.orbitalStateVectors.j = private unnamed_addr constant %struct.vector { double 0.000000e+00, double 1.000000e+00, double 0.000000e+00 }, align 8
@__const.orbitalStateVectors.k = private unnamed_addr constant %struct.vector { double 0.000000e+00, double 0.000000e+00, double 1.000000e+00 }, align 8
@.str.1 = private unnamed_addr constant [15 x i8] c"Position : %s\0A\00", align 1
@.str.2 = private unnamed_addr constant [15 x i8] c"Speed    : %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @add(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %v, %struct.vector* byval(%struct.vector) align 8 %w) #0 {
entry:
  %x = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 0
  %0 = load double, double* %x1, align 8
  %x2 = getelementptr inbounds %struct.vector, %struct.vector* %w, i32 0, i32 0
  %1 = load double, double* %x2, align 8
  %add = fadd double %0, %1
  store double %add, double* %x, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  %y3 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 1
  %2 = load double, double* %y3, align 8
  %y4 = getelementptr inbounds %struct.vector, %struct.vector* %w, i32 0, i32 1
  %3 = load double, double* %y4, align 8
  %add5 = fadd double %2, %3
  store double %add5, double* %y, align 8
  %z = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 2
  %z6 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 2
  %4 = load double, double* %z6, align 8
  %z7 = getelementptr inbounds %struct.vector, %struct.vector* %w, i32 0, i32 2
  %5 = load double, double* %z7, align 8
  %add8 = fadd double %4, %5
  store double %add8, double* %z, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @mul(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %v, double %m) #0 {
entry:
  %m.addr = alloca double, align 8
  store double %m, double* %m.addr, align 8
  %x = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 0
  %0 = load double, double* %x1, align 8
  %1 = load double, double* %m.addr, align 8
  %mul = fmul double %0, %1
  store double %mul, double* %x, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  %y2 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 1
  %2 = load double, double* %y2, align 8
  %3 = load double, double* %m.addr, align 8
  %mul3 = fmul double %2, %3
  store double %mul3, double* %y, align 8
  %z = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 2
  %z4 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 2
  %4 = load double, double* %z4, align 8
  %5 = load double, double* %m.addr, align 8
  %mul5 = fmul double %4, %5
  store double %mul5, double* %z, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @div(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %v, double %d) #0 {
entry:
  %d.addr = alloca double, align 8
  store double %d, double* %d.addr, align 8
  %0 = load double, double* %d.addr, align 8
  %div = fdiv double 1.000000e+00, %0
  call void @mul(%struct.vector* sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %v, double %div)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double @vabs(%struct.vector* byval(%struct.vector) align 8 %v) #0 {
entry:
  %x = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %mul = fmul double %0, %1
  %y = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %y2 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 1
  %3 = load double, double* %y2, align 8
  %mul3 = fmul double %2, %3
  %add = fadd double %mul, %mul3
  %z = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 2
  %4 = load double, double* %z, align 8
  %z4 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 2
  %5 = load double, double* %z4, align 8
  %mul5 = fmul double %4, %5
  %add6 = fadd double %add, %mul5
  %6 = call double @llvm.sqrt.f64(double %add6)
  ret double %6
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sqrt.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @mulAdd(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %v1, %struct.vector* byval(%struct.vector) align 8 %v2, double %x1, double %x2) #0 {
entry:
  %x1.addr = alloca double, align 8
  %x2.addr = alloca double, align 8
  %agg.tmp = alloca %struct.vector, align 8
  %agg.tmp1 = alloca %struct.vector, align 8
  store double %x1, double* %x1.addr, align 8
  store double %x2, double* %x2.addr, align 8
  %0 = load double, double* %x1.addr, align 8
  call void @mul(%struct.vector* sret align 8 %agg.tmp, %struct.vector* byval(%struct.vector) align 8 %v1, double %0)
  %1 = load double, double* %x2.addr, align 8
  call void @mul(%struct.vector* sret align 8 %agg.tmp1, %struct.vector* byval(%struct.vector) align 8 %v2, double %1)
  call void @add(%struct.vector* sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %agg.tmp, %struct.vector* byval(%struct.vector) align 8 %agg.tmp1)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @vecAsStr(i8* %buffer, %struct.vector* byval(%struct.vector) align 8 %v) #0 {
entry:
  %buffer.addr = alloca i8*, align 4
  store i8* %buffer, i8** %buffer.addr, align 4
  %0 = load i8*, i8** %buffer.addr, align 4
  %x = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 0
  %1 = load double, double* %x, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %z = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 2
  %3 = load double, double* %z, align 8
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* %0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i32 0, i32 0), double %1, double %2, double %3)
  ret void
}

declare i32 @sprintf(i8* %0, i8* %1, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden void @rotate(%struct.vector* byval(%struct.vector) align 8 %i, %struct.vector* byval(%struct.vector) align 8 %j, double %alpha, %struct.vector* %ps) #0 {
entry:
  %alpha.addr = alloca double, align 8
  %ps.addr = alloca %struct.vector*, align 4
  %tmp = alloca %struct.vector, align 8
  %tmp2 = alloca %struct.vector, align 8
  store double %alpha, double* %alpha.addr, align 8
  store %struct.vector* %ps, %struct.vector** %ps.addr, align 4
  %0 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx = getelementptr inbounds %struct.vector, %struct.vector* %0, i32 0
  %1 = load double, double* %alpha.addr, align 8
  %2 = call double @llvm.cos.f64(double %1)
  %3 = load double, double* %alpha.addr, align 8
  %4 = call double @llvm.sin.f64(double %3)
  call void @mulAdd(%struct.vector* sret align 8 %tmp, %struct.vector* byval(%struct.vector) align 8 %i, %struct.vector* byval(%struct.vector) align 8 %j, double %2, double %4)
  %5 = bitcast %struct.vector* %arrayidx to i8*
  %6 = bitcast %struct.vector* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %5, i8* align 8 %6, i32 24, i1 false)
  %7 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx1 = getelementptr inbounds %struct.vector, %struct.vector* %7, i32 1
  %8 = load double, double* %alpha.addr, align 8
  %9 = call double @llvm.sin.f64(double %8)
  %fneg = fneg double %9
  %10 = load double, double* %alpha.addr, align 8
  %11 = call double @llvm.cos.f64(double %10)
  call void @mulAdd(%struct.vector* sret align 8 %tmp2, %struct.vector* byval(%struct.vector) align 8 %i, %struct.vector* byval(%struct.vector) align 8 %j, double %fneg, double %11)
  %12 = bitcast %struct.vector* %arrayidx1 to i8*
  %13 = bitcast %struct.vector* %tmp2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %12, i8* align 8 %13, i32 24, i1 false)
  ret void
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.cos.f64(double %0) #1

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sin.f64(double %0) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: noinline nounwind optnone
define hidden void @orbitalStateVectors(double %semimajorAxis, double %eccentricity, double %inclination, double %longitudeOfAscendingNode, double %argumentOfPeriapsis, double %trueAnomaly, %struct.vector* %ps) #0 {
entry:
  %semimajorAxis.addr = alloca double, align 8
  %eccentricity.addr = alloca double, align 8
  %inclination.addr = alloca double, align 8
  %longitudeOfAscendingNode.addr = alloca double, align 8
  %argumentOfPeriapsis.addr = alloca double, align 8
  %trueAnomaly.addr = alloca double, align 8
  %ps.addr = alloca %struct.vector*, align 4
  %i = alloca %struct.vector, align 8
  %j = alloca %struct.vector, align 8
  %k = alloca %struct.vector, align 8
  %l = alloca double, align 8
  %c = alloca double, align 8
  %s = alloca double, align 8
  %r = alloca double, align 8
  %rprime = alloca double, align 8
  %qs = alloca [2 x %struct.vector], align 16
  %tmp = alloca %struct.vector, align 8
  %tmp14 = alloca %struct.vector, align 8
  %tmp17 = alloca %struct.vector, align 8
  %tmp25 = alloca %struct.vector, align 8
  %tmp29 = alloca %struct.vector, align 8
  store double %semimajorAxis, double* %semimajorAxis.addr, align 8
  store double %eccentricity, double* %eccentricity.addr, align 8
  store double %inclination, double* %inclination.addr, align 8
  store double %longitudeOfAscendingNode, double* %longitudeOfAscendingNode.addr, align 8
  store double %argumentOfPeriapsis, double* %argumentOfPeriapsis.addr, align 8
  store double %trueAnomaly, double* %trueAnomaly.addr, align 8
  store %struct.vector* %ps, %struct.vector** %ps.addr, align 4
  %0 = bitcast %struct.vector* %i to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %0, i8* align 8 bitcast (%struct.vector* @__const.orbitalStateVectors.i to i8*), i32 24, i1 false)
  %1 = bitcast %struct.vector* %j to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %1, i8* align 8 bitcast (%struct.vector* @__const.orbitalStateVectors.j to i8*), i32 24, i1 false)
  %2 = bitcast %struct.vector* %k to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %2, i8* align 8 bitcast (%struct.vector* @__const.orbitalStateVectors.k to i8*), i32 24, i1 false)
  store double 2.000000e+00, double* %l, align 8
  %3 = load double, double* %longitudeOfAscendingNode.addr, align 8
  %arraydecay = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 0
  call void @rotate(%struct.vector* byval(%struct.vector) align 8 %i, %struct.vector* byval(%struct.vector) align 8 %j, double %3, %struct.vector* %arraydecay)
  %arrayidx = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 0
  %4 = bitcast %struct.vector* %i to i8*
  %5 = bitcast %struct.vector* %arrayidx to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %4, i8* align 16 %5, i32 24, i1 false)
  %arrayidx1 = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 1
  %6 = bitcast %struct.vector* %j to i8*
  %7 = bitcast %struct.vector* %arrayidx1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 24, i1 false)
  %8 = load double, double* %inclination.addr, align 8
  %arraydecay2 = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 0
  call void @rotate(%struct.vector* byval(%struct.vector) align 8 %j, %struct.vector* byval(%struct.vector) align 8 %k, double %8, %struct.vector* %arraydecay2)
  %arrayidx3 = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 0
  %9 = bitcast %struct.vector* %j to i8*
  %10 = bitcast %struct.vector* %arrayidx3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %9, i8* align 16 %10, i32 24, i1 false)
  %11 = load double, double* %argumentOfPeriapsis.addr, align 8
  %arraydecay4 = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 0
  call void @rotate(%struct.vector* byval(%struct.vector) align 8 %i, %struct.vector* byval(%struct.vector) align 8 %j, double %11, %struct.vector* %arraydecay4)
  %arrayidx5 = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 0
  %12 = bitcast %struct.vector* %i to i8*
  %13 = bitcast %struct.vector* %arrayidx5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %12, i8* align 16 %13, i32 24, i1 false)
  %arrayidx6 = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 1
  %14 = bitcast %struct.vector* %j to i8*
  %15 = bitcast %struct.vector* %arrayidx6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %14, i8* align 8 %15, i32 24, i1 false)
  %16 = load double, double* %eccentricity.addr, align 8
  %cmp = fcmp une double %16, 1.000000e+00
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %17 = load double, double* %eccentricity.addr, align 8
  %18 = load double, double* %eccentricity.addr, align 8
  %mul = fmul double %17, %18
  %sub = fsub double 1.000000e+00, %mul
  store double %sub, double* %l, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %19 = load double, double* %semimajorAxis.addr, align 8
  %20 = load double, double* %l, align 8
  %mul7 = fmul double %20, %19
  store double %mul7, double* %l, align 8
  %21 = load double, double* %trueAnomaly.addr, align 8
  %22 = call double @llvm.cos.f64(double %21)
  store double %22, double* %c, align 8
  %23 = load double, double* %trueAnomaly.addr, align 8
  %24 = call double @llvm.sin.f64(double %23)
  store double %24, double* %s, align 8
  %25 = load double, double* %l, align 8
  %26 = load double, double* %eccentricity.addr, align 8
  %27 = load double, double* %c, align 8
  %mul8 = fmul double %26, %27
  %add = fadd double 1.000000e+00, %mul8
  %div = fdiv double %25, %add
  store double %div, double* %r, align 8
  %28 = load double, double* %s, align 8
  %29 = load double, double* %r, align 8
  %mul9 = fmul double %28, %29
  %30 = load double, double* %r, align 8
  %mul10 = fmul double %mul9, %30
  %31 = load double, double* %l, align 8
  %div11 = fdiv double %mul10, %31
  store double %div11, double* %rprime, align 8
  %32 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx12 = getelementptr inbounds %struct.vector, %struct.vector* %32, i32 0
  %33 = load double, double* %c, align 8
  %34 = load double, double* %s, align 8
  call void @mulAdd(%struct.vector* sret align 8 %tmp, %struct.vector* byval(%struct.vector) align 8 %i, %struct.vector* byval(%struct.vector) align 8 %j, double %33, double %34)
  %35 = bitcast %struct.vector* %arrayidx12 to i8*
  %36 = bitcast %struct.vector* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %35, i8* align 8 %36, i32 24, i1 false)
  %37 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx13 = getelementptr inbounds %struct.vector, %struct.vector* %37, i32 0
  %38 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx15 = getelementptr inbounds %struct.vector, %struct.vector* %38, i32 0
  %39 = load double, double* %r, align 8
  call void @mul(%struct.vector* sret align 8 %tmp14, %struct.vector* byval(%struct.vector) align 8 %arrayidx15, double %39)
  %40 = bitcast %struct.vector* %arrayidx13 to i8*
  %41 = bitcast %struct.vector* %tmp14 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %40, i8* align 8 %41, i32 24, i1 false)
  %42 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx16 = getelementptr inbounds %struct.vector, %struct.vector* %42, i32 1
  %43 = load double, double* %rprime, align 8
  %44 = load double, double* %c, align 8
  %mul18 = fmul double %43, %44
  %45 = load double, double* %r, align 8
  %46 = load double, double* %s, align 8
  %mul19 = fmul double %45, %46
  %sub20 = fsub double %mul18, %mul19
  %47 = load double, double* %rprime, align 8
  %48 = load double, double* %s, align 8
  %mul21 = fmul double %47, %48
  %49 = load double, double* %r, align 8
  %50 = load double, double* %c, align 8
  %mul22 = fmul double %49, %50
  %add23 = fadd double %mul21, %mul22
  call void @mulAdd(%struct.vector* sret align 8 %tmp17, %struct.vector* byval(%struct.vector) align 8 %i, %struct.vector* byval(%struct.vector) align 8 %j, double %sub20, double %add23)
  %51 = bitcast %struct.vector* %arrayidx16 to i8*
  %52 = bitcast %struct.vector* %tmp17 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %51, i8* align 8 %52, i32 24, i1 false)
  %53 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx24 = getelementptr inbounds %struct.vector, %struct.vector* %53, i32 1
  %54 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx26 = getelementptr inbounds %struct.vector, %struct.vector* %54, i32 1
  %55 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx27 = getelementptr inbounds %struct.vector, %struct.vector* %55, i32 1
  %call = call double @vabs(%struct.vector* byval(%struct.vector) align 8 %arrayidx27)
  call void @div(%struct.vector* sret align 8 %tmp25, %struct.vector* byval(%struct.vector) align 8 %arrayidx26, double %call)
  %56 = bitcast %struct.vector* %arrayidx24 to i8*
  %57 = bitcast %struct.vector* %tmp25 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %56, i8* align 8 %57, i32 24, i1 false)
  %58 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx28 = getelementptr inbounds %struct.vector, %struct.vector* %58, i32 1
  %59 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx30 = getelementptr inbounds %struct.vector, %struct.vector* %59, i32 1
  %60 = load double, double* %r, align 8
  %div31 = fdiv double 2.000000e+00, %60
  %61 = load double, double* %semimajorAxis.addr, align 8
  %div32 = fdiv double 1.000000e+00, %61
  %sub33 = fsub double %div31, %div32
  %62 = call double @llvm.sqrt.f64(double %sub33)
  call void @mul(%struct.vector* sret align 8 %tmp29, %struct.vector* byval(%struct.vector) align 8 %arrayidx30, double %62)
  %63 = bitcast %struct.vector* %arrayidx28 to i8*
  %64 = bitcast %struct.vector* %tmp29 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %63, i8* align 8 %64, i32 24, i1 false)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %longitude = alloca double, align 8
  %ps = alloca [2 x %struct.vector], align 16
  %buffer = alloca [80 x i8], align 16
  store i32 0, i32* %retval, align 4
  store double 0x3FE0C152500C1525, double* %longitude, align 8
  %0 = load double, double* %longitude, align 8
  %arraydecay = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %ps, i32 0, i32 0
  call void @orbitalStateVectors(double 1.000000e+00, double 1.000000e-01, double 0.000000e+00, double %0, double 0.000000e+00, double 0.000000e+00, %struct.vector* %arraydecay)
  %arraydecay1 = getelementptr inbounds [80 x i8], [80 x i8]* %buffer, i32 0, i32 0
  %arrayidx = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %ps, i32 0, i32 0
  call void @vecAsStr(i8* %arraydecay1, %struct.vector* byval(%struct.vector) align 8 %arrayidx)
  %arraydecay2 = getelementptr inbounds [80 x i8], [80 x i8]* %buffer, i32 0, i32 0
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i32 0, i32 0), i8* %arraydecay2)
  %arraydecay3 = getelementptr inbounds [80 x i8], [80 x i8]* %buffer, i32 0, i32 0
  %arrayidx4 = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %ps, i32 0, i32 1
  call void @vecAsStr(i8* %arraydecay3, %struct.vector* byval(%struct.vector) align 8 %arrayidx4)
  %arraydecay5 = getelementptr inbounds [80 x i8], [80 x i8]* %buffer, i32 0, i32 0
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i32 0, i32 0), i8* %arraydecay5)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for vabs()

; entering Souper's runOnFunction() for mulAdd()

; ModuleID = './Orbital_elements.c.bc'
source_filename = "./Orbital_elements.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.vector = type { double, double, double }

@.str = private unnamed_addr constant [22 x i8] c"(%.17g, %.17g, %.17g)\00", align 1
@__const.orbitalStateVectors.i = private unnamed_addr constant %struct.vector { double 1.000000e+00, double 0.000000e+00, double 0.000000e+00 }, align 8
@__const.orbitalStateVectors.j = private unnamed_addr constant %struct.vector { double 0.000000e+00, double 1.000000e+00, double 0.000000e+00 }, align 8
@__const.orbitalStateVectors.k = private unnamed_addr constant %struct.vector { double 0.000000e+00, double 0.000000e+00, double 1.000000e+00 }, align 8
@.str.1 = private unnamed_addr constant [15 x i8] c"Position : %s\0A\00", align 1
@.str.2 = private unnamed_addr constant [15 x i8] c"Speed    : %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @add(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %v, %struct.vector* byval(%struct.vector) align 8 %w) #0 {
entry:
  %x = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 0
  %0 = load double, double* %x1, align 8
  %x2 = getelementptr inbounds %struct.vector, %struct.vector* %w, i32 0, i32 0
  %1 = load double, double* %x2, align 8
  %add = fadd double %0, %1
  store double %add, double* %x, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  %y3 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 1
  %2 = load double, double* %y3, align 8
  %y4 = getelementptr inbounds %struct.vector, %struct.vector* %w, i32 0, i32 1
  %3 = load double, double* %y4, align 8
  %add5 = fadd double %2, %3
  store double %add5, double* %y, align 8
  %z = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 2
  %z6 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 2
  %4 = load double, double* %z6, align 8
  %z7 = getelementptr inbounds %struct.vector, %struct.vector* %w, i32 0, i32 2
  %5 = load double, double* %z7, align 8
  %add8 = fadd double %4, %5
  store double %add8, double* %z, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @mul(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %v, double %m) #0 {
entry:
  %m.addr = alloca double, align 8
  store double %m, double* %m.addr, align 8
  %x = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 0
  %0 = load double, double* %x1, align 8
  %1 = load double, double* %m.addr, align 8
  %mul = fmul double %0, %1
  store double %mul, double* %x, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  %y2 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 1
  %2 = load double, double* %y2, align 8
  %3 = load double, double* %m.addr, align 8
  %mul3 = fmul double %2, %3
  store double %mul3, double* %y, align 8
  %z = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 2
  %z4 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 2
  %4 = load double, double* %z4, align 8
  %5 = load double, double* %m.addr, align 8
  %mul5 = fmul double %4, %5
  store double %mul5, double* %z, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @div(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %v, double %d) #0 {
entry:
  %d.addr = alloca double, align 8
  store double %d, double* %d.addr, align 8
  %0 = load double, double* %d.addr, align 8
  %div = fdiv double 1.000000e+00, %0
  call void @mul(%struct.vector* sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %v, double %div)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double @vabs(%struct.vector* byval(%struct.vector) align 8 %v) #0 {
entry:
  %x = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %mul = fmul double %0, %1
  %y = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %y2 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 1
  %3 = load double, double* %y2, align 8
  %mul3 = fmul double %2, %3
  %add = fadd double %mul, %mul3
  %z = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 2
  %4 = load double, double* %z, align 8
  %z4 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 2
  %5 = load double, double* %z4, align 8
  %mul5 = fmul double %4, %5
  %add6 = fadd double %add, %mul5
  %6 = call double @llvm.sqrt.f64(double %add6)
  ret double %6
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sqrt.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @mulAdd(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %v1, %struct.vector* byval(%struct.vector) align 8 %v2, double %x1, double %x2) #0 {
entry:
  %x1.addr = alloca double, align 8
  %x2.addr = alloca double, align 8
  %agg.tmp = alloca %struct.vector, align 8
  %agg.tmp1 = alloca %struct.vector, align 8
  store double %x1, double* %x1.addr, align 8
  store double %x2, double* %x2.addr, align 8
  %0 = load double, double* %x1.addr, align 8
  call void @mul(%struct.vector* sret align 8 %agg.tmp, %struct.vector* byval(%struct.vector) align 8 %v1, double %0)
  %1 = load double, double* %x2.addr, align 8
  call void @mul(%struct.vector* sret align 8 %agg.tmp1, %struct.vector* byval(%struct.vector) align 8 %v2, double %1)
  call void @add(%struct.vector* sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %agg.tmp, %struct.vector* byval(%struct.vector) align 8 %agg.tmp1)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @vecAsStr(i8* %buffer, %struct.vector* byval(%struct.vector) align 8 %v) #0 {
entry:
  %buffer.addr = alloca i8*, align 4
  store i8* %buffer, i8** %buffer.addr, align 4
  %0 = load i8*, i8** %buffer.addr, align 4
  %x = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 0
  %1 = load double, double* %x, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %z = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 2
  %3 = load double, double* %z, align 8
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* %0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i32 0, i32 0), double %1, double %2, double %3)
  ret void
}

declare i32 @sprintf(i8* %0, i8* %1, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden void @rotate(%struct.vector* byval(%struct.vector) align 8 %i, %struct.vector* byval(%struct.vector) align 8 %j, double %alpha, %struct.vector* %ps) #0 {
entry:
  %alpha.addr = alloca double, align 8
  %ps.addr = alloca %struct.vector*, align 4
  %tmp = alloca %struct.vector, align 8
  %tmp2 = alloca %struct.vector, align 8
  store double %alpha, double* %alpha.addr, align 8
  store %struct.vector* %ps, %struct.vector** %ps.addr, align 4
  %0 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx = getelementptr inbounds %struct.vector, %struct.vector* %0, i32 0
  %1 = load double, double* %alpha.addr, align 8
  %2 = call double @llvm.cos.f64(double %1)
  %3 = load double, double* %alpha.addr, align 8
  %4 = call double @llvm.sin.f64(double %3)
  call void @mulAdd(%struct.vector* sret align 8 %tmp, %struct.vector* byval(%struct.vector) align 8 %i, %struct.vector* byval(%struct.vector) align 8 %j, double %2, double %4)
  %5 = bitcast %struct.vector* %arrayidx to i8*
  %6 = bitcast %struct.vector* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %5, i8* align 8 %6, i32 24, i1 false)
  %7 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx1 = getelementptr inbounds %struct.vector, %struct.vector* %7, i32 1
  %8 = load double, double* %alpha.addr, align 8
  %9 = call double @llvm.sin.f64(double %8)
  %fneg = fneg double %9
  %10 = load double, double* %alpha.addr, align 8
  %11 = call double @llvm.cos.f64(double %10)
  call void @mulAdd(%struct.vector* sret align 8 %tmp2, %struct.vector* byval(%struct.vector) align 8 %i, %struct.vector* byval(%struct.vector) align 8 %j, double %fneg, double %11)
  %12 = bitcast %struct.vector* %arrayidx1 to i8*
  %13 = bitcast %struct.vector* %tmp2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %12, i8* align 8 %13, i32 24, i1 false)
  ret void
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.cos.f64(double %0) #1

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sin.f64(double %0) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: noinline nounwind optnone
define hidden void @orbitalStateVectors(double %semimajorAxis, double %eccentricity, double %inclination, double %longitudeOfAscendingNode, double %argumentOfPeriapsis, double %trueAnomaly, %struct.vector* %ps) #0 {
entry:
  %semimajorAxis.addr = alloca double, align 8
  %eccentricity.addr = alloca double, align 8
  %inclination.addr = alloca double, align 8
  %longitudeOfAscendingNode.addr = alloca double, align 8
  %argumentOfPeriapsis.addr = alloca double, align 8
  %trueAnomaly.addr = alloca double, align 8
  %ps.addr = alloca %struct.vector*, align 4
  %i = alloca %struct.vector, align 8
  %j = alloca %struct.vector, align 8
  %k = alloca %struct.vector, align 8
  %l = alloca double, align 8
  %c = alloca double, align 8
  %s = alloca double, align 8
  %r = alloca double, align 8
  %rprime = alloca double, align 8
  %qs = alloca [2 x %struct.vector], align 16
  %tmp = alloca %struct.vector, align 8
  %tmp14 = alloca %struct.vector, align 8
  %tmp17 = alloca %struct.vector, align 8
  %tmp25 = alloca %struct.vector, align 8
  %tmp29 = alloca %struct.vector, align 8
  store double %semimajorAxis, double* %semimajorAxis.addr, align 8
  store double %eccentricity, double* %eccentricity.addr, align 8
  store double %inclination, double* %inclination.addr, align 8
  store double %longitudeOfAscendingNode, double* %longitudeOfAscendingNode.addr, align 8
  store double %argumentOfPeriapsis, double* %argumentOfPeriapsis.addr, align 8
  store double %trueAnomaly, double* %trueAnomaly.addr, align 8
  store %struct.vector* %ps, %struct.vector** %ps.addr, align 4
  %0 = bitcast %struct.vector* %i to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %0, i8* align 8 bitcast (%struct.vector* @__const.orbitalStateVectors.i to i8*), i32 24, i1 false)
  %1 = bitcast %struct.vector* %j to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %1, i8* align 8 bitcast (%struct.vector* @__const.orbitalStateVectors.j to i8*), i32 24, i1 false)
  %2 = bitcast %struct.vector* %k to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %2, i8* align 8 bitcast (%struct.vector* @__const.orbitalStateVectors.k to i8*), i32 24, i1 false)
  store double 2.000000e+00, double* %l, align 8
  %3 = load double, double* %longitudeOfAscendingNode.addr, align 8
  %arraydecay = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 0
  call void @rotate(%struct.vector* byval(%struct.vector) align 8 %i, %struct.vector* byval(%struct.vector) align 8 %j, double %3, %struct.vector* %arraydecay)
  %arrayidx = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 0
  %4 = bitcast %struct.vector* %i to i8*
  %5 = bitcast %struct.vector* %arrayidx to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %4, i8* align 16 %5, i32 24, i1 false)
  %arrayidx1 = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 1
  %6 = bitcast %struct.vector* %j to i8*
  %7 = bitcast %struct.vector* %arrayidx1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 24, i1 false)
  %8 = load double, double* %inclination.addr, align 8
  %arraydecay2 = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 0
  call void @rotate(%struct.vector* byval(%struct.vector) align 8 %j, %struct.vector* byval(%struct.vector) align 8 %k, double %8, %struct.vector* %arraydecay2)
  %arrayidx3 = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 0
  %9 = bitcast %struct.vector* %j to i8*
  %10 = bitcast %struct.vector* %arrayidx3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %9, i8* align 16 %10, i32 24, i1 false)
  %11 = load double, double* %argumentOfPeriapsis.addr, align 8
  %arraydecay4 = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 0
  call void @rotate(%struct.vector* byval(%struct.vector) align 8 %i, %struct.vector* byval(%struct.vector) align 8 %j, double %11, %struct.vector* %arraydecay4)
  %arrayidx5 = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 0
  %12 = bitcast %struct.vector* %i to i8*
  %13 = bitcast %struct.vector* %arrayidx5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %12, i8* align 16 %13, i32 24, i1 false)
  %arrayidx6 = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 1
  %14 = bitcast %struct.vector* %j to i8*
  %15 = bitcast %struct.vector* %arrayidx6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %14, i8* align 8 %15, i32 24, i1 false)
  %16 = load double, double* %eccentricity.addr, align 8
  %cmp = fcmp une double %16, 1.000000e+00
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %17 = load double, double* %eccentricity.addr, align 8
  %18 = load double, double* %eccentricity.addr, align 8
  %mul = fmul double %17, %18
  %sub = fsub double 1.000000e+00, %mul
  store double %sub, double* %l, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %19 = load double, double* %semimajorAxis.addr, align 8
  %20 = load double, double* %l, align 8
  %mul7 = fmul double %20, %19
  store double %mul7, double* %l, align 8
  %21 = load double, double* %trueAnomaly.addr, align 8
  %22 = call double @llvm.cos.f64(double %21)
  store double %22, double* %c, align 8
  %23 = load double, double* %trueAnomaly.addr, align 8
  %24 = call double @llvm.sin.f64(double %23)
  store double %24, double* %s, align 8
  %25 = load double, double* %l, align 8
  %26 = load double, double* %eccentricity.addr, align 8
  %27 = load double, double* %c, align 8
  %mul8 = fmul double %26, %27
  %add = fadd double 1.000000e+00, %mul8
  %div = fdiv double %25, %add
  store double %div, double* %r, align 8
  %28 = load double, double* %s, align 8
  %29 = load double, double* %r, align 8
  %mul9 = fmul double %28, %29
  %30 = load double, double* %r, align 8
  %mul10 = fmul double %mul9, %30
  %31 = load double, double* %l, align 8
  %div11 = fdiv double %mul10, %31
  store double %div11, double* %rprime, align 8
  %32 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx12 = getelementptr inbounds %struct.vector, %struct.vector* %32, i32 0
  %33 = load double, double* %c, align 8
  %34 = load double, double* %s, align 8
  call void @mulAdd(%struct.vector* sret align 8 %tmp, %struct.vector* byval(%struct.vector) align 8 %i, %struct.vector* byval(%struct.vector) align 8 %j, double %33, double %34)
  %35 = bitcast %struct.vector* %arrayidx12 to i8*
  %36 = bitcast %struct.vector* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %35, i8* align 8 %36, i32 24, i1 false)
  %37 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx13 = getelementptr inbounds %struct.vector, %struct.vector* %37, i32 0
  %38 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx15 = getelementptr inbounds %struct.vector, %struct.vector* %38, i32 0
  %39 = load double, double* %r, align 8
  call void @mul(%struct.vector* sret align 8 %tmp14, %struct.vector* byval(%struct.vector) align 8 %arrayidx15, double %39)
  %40 = bitcast %struct.vector* %arrayidx13 to i8*
  %41 = bitcast %struct.vector* %tmp14 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %40, i8* align 8 %41, i32 24, i1 false)
  %42 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx16 = getelementptr inbounds %struct.vector, %struct.vector* %42, i32 1
  %43 = load double, double* %rprime, align 8
  %44 = load double, double* %c, align 8
  %mul18 = fmul double %43, %44
  %45 = load double, double* %r, align 8
  %46 = load double, double* %s, align 8
  %mul19 = fmul double %45, %46
  %sub20 = fsub double %mul18, %mul19
  %47 = load double, double* %rprime, align 8
  %48 = load double, double* %s, align 8
  %mul21 = fmul double %47, %48
  %49 = load double, double* %r, align 8
  %50 = load double, double* %c, align 8
  %mul22 = fmul double %49, %50
  %add23 = fadd double %mul21, %mul22
  call void @mulAdd(%struct.vector* sret align 8 %tmp17, %struct.vector* byval(%struct.vector) align 8 %i, %struct.vector* byval(%struct.vector) align 8 %j, double %sub20, double %add23)
  %51 = bitcast %struct.vector* %arrayidx16 to i8*
  %52 = bitcast %struct.vector* %tmp17 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %51, i8* align 8 %52, i32 24, i1 false)
  %53 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx24 = getelementptr inbounds %struct.vector, %struct.vector* %53, i32 1
  %54 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx26 = getelementptr inbounds %struct.vector, %struct.vector* %54, i32 1
  %55 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx27 = getelementptr inbounds %struct.vector, %struct.vector* %55, i32 1
  %call = call double @vabs(%struct.vector* byval(%struct.vector) align 8 %arrayidx27)
  call void @div(%struct.vector* sret align 8 %tmp25, %struct.vector* byval(%struct.vector) align 8 %arrayidx26, double %call)
  %56 = bitcast %struct.vector* %arrayidx24 to i8*
  %57 = bitcast %struct.vector* %tmp25 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %56, i8* align 8 %57, i32 24, i1 false)
  %58 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx28 = getelementptr inbounds %struct.vector, %struct.vector* %58, i32 1
  %59 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx30 = getelementptr inbounds %struct.vector, %struct.vector* %59, i32 1
  %60 = load double, double* %r, align 8
  %div31 = fdiv double 2.000000e+00, %60
  %61 = load double, double* %semimajorAxis.addr, align 8
  %div32 = fdiv double 1.000000e+00, %61
  %sub33 = fsub double %div31, %div32
  %62 = call double @llvm.sqrt.f64(double %sub33)
  call void @mul(%struct.vector* sret align 8 %tmp29, %struct.vector* byval(%struct.vector) align 8 %arrayidx30, double %62)
  %63 = bitcast %struct.vector* %arrayidx28 to i8*
  %64 = bitcast %struct.vector* %tmp29 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %63, i8* align 8 %64, i32 24, i1 false)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %longitude = alloca double, align 8
  %ps = alloca [2 x %struct.vector], align 16
  %buffer = alloca [80 x i8], align 16
  store i32 0, i32* %retval, align 4
  store double 0x3FE0C152500C1525, double* %longitude, align 8
  %0 = load double, double* %longitude, align 8
  %arraydecay = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %ps, i32 0, i32 0
  call void @orbitalStateVectors(double 1.000000e+00, double 1.000000e-01, double 0.000000e+00, double %0, double 0.000000e+00, double 0.000000e+00, %struct.vector* %arraydecay)
  %arraydecay1 = getelementptr inbounds [80 x i8], [80 x i8]* %buffer, i32 0, i32 0
  %arrayidx = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %ps, i32 0, i32 0
  call void @vecAsStr(i8* %arraydecay1, %struct.vector* byval(%struct.vector) align 8 %arrayidx)
  %arraydecay2 = getelementptr inbounds [80 x i8], [80 x i8]* %buffer, i32 0, i32 0
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i32 0, i32 0), i8* %arraydecay2)
  %arraydecay3 = getelementptr inbounds [80 x i8], [80 x i8]* %buffer, i32 0, i32 0
  %arrayidx4 = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %ps, i32 0, i32 1
  call void @vecAsStr(i8* %arraydecay3, %struct.vector* byval(%struct.vector) align 8 %arrayidx4)
  %arraydecay5 = getelementptr inbounds [80 x i8], [80 x i8]* %buffer, i32 0, i32 0
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i32 0, i32 0), i8* %arraydecay5)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for mulAdd()

; entering Souper's runOnFunction() for vecAsStr()

; ModuleID = './Orbital_elements.c.bc'
source_filename = "./Orbital_elements.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.vector = type { double, double, double }

@.str = private unnamed_addr constant [22 x i8] c"(%.17g, %.17g, %.17g)\00", align 1
@__const.orbitalStateVectors.i = private unnamed_addr constant %struct.vector { double 1.000000e+00, double 0.000000e+00, double 0.000000e+00 }, align 8
@__const.orbitalStateVectors.j = private unnamed_addr constant %struct.vector { double 0.000000e+00, double 1.000000e+00, double 0.000000e+00 }, align 8
@__const.orbitalStateVectors.k = private unnamed_addr constant %struct.vector { double 0.000000e+00, double 0.000000e+00, double 1.000000e+00 }, align 8
@.str.1 = private unnamed_addr constant [15 x i8] c"Position : %s\0A\00", align 1
@.str.2 = private unnamed_addr constant [15 x i8] c"Speed    : %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @add(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %v, %struct.vector* byval(%struct.vector) align 8 %w) #0 {
entry:
  %x = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 0
  %0 = load double, double* %x1, align 8
  %x2 = getelementptr inbounds %struct.vector, %struct.vector* %w, i32 0, i32 0
  %1 = load double, double* %x2, align 8
  %add = fadd double %0, %1
  store double %add, double* %x, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  %y3 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 1
  %2 = load double, double* %y3, align 8
  %y4 = getelementptr inbounds %struct.vector, %struct.vector* %w, i32 0, i32 1
  %3 = load double, double* %y4, align 8
  %add5 = fadd double %2, %3
  store double %add5, double* %y, align 8
  %z = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 2
  %z6 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 2
  %4 = load double, double* %z6, align 8
  %z7 = getelementptr inbounds %struct.vector, %struct.vector* %w, i32 0, i32 2
  %5 = load double, double* %z7, align 8
  %add8 = fadd double %4, %5
  store double %add8, double* %z, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @mul(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %v, double %m) #0 {
entry:
  %m.addr = alloca double, align 8
  store double %m, double* %m.addr, align 8
  %x = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 0
  %0 = load double, double* %x1, align 8
  %1 = load double, double* %m.addr, align 8
  %mul = fmul double %0, %1
  store double %mul, double* %x, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  %y2 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 1
  %2 = load double, double* %y2, align 8
  %3 = load double, double* %m.addr, align 8
  %mul3 = fmul double %2, %3
  store double %mul3, double* %y, align 8
  %z = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 2
  %z4 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 2
  %4 = load double, double* %z4, align 8
  %5 = load double, double* %m.addr, align 8
  %mul5 = fmul double %4, %5
  store double %mul5, double* %z, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @div(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %v, double %d) #0 {
entry:
  %d.addr = alloca double, align 8
  store double %d, double* %d.addr, align 8
  %0 = load double, double* %d.addr, align 8
  %div = fdiv double 1.000000e+00, %0
  call void @mul(%struct.vector* sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %v, double %div)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double @vabs(%struct.vector* byval(%struct.vector) align 8 %v) #0 {
entry:
  %x = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %mul = fmul double %0, %1
  %y = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %y2 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 1
  %3 = load double, double* %y2, align 8
  %mul3 = fmul double %2, %3
  %add = fadd double %mul, %mul3
  %z = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 2
  %4 = load double, double* %z, align 8
  %z4 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 2
  %5 = load double, double* %z4, align 8
  %mul5 = fmul double %4, %5
  %add6 = fadd double %add, %mul5
  %6 = call double @llvm.sqrt.f64(double %add6)
  ret double %6
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sqrt.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @mulAdd(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %v1, %struct.vector* byval(%struct.vector) align 8 %v2, double %x1, double %x2) #0 {
entry:
  %x1.addr = alloca double, align 8
  %x2.addr = alloca double, align 8
  %agg.tmp = alloca %struct.vector, align 8
  %agg.tmp1 = alloca %struct.vector, align 8
  store double %x1, double* %x1.addr, align 8
  store double %x2, double* %x2.addr, align 8
  %0 = load double, double* %x1.addr, align 8
  call void @mul(%struct.vector* sret align 8 %agg.tmp, %struct.vector* byval(%struct.vector) align 8 %v1, double %0)
  %1 = load double, double* %x2.addr, align 8
  call void @mul(%struct.vector* sret align 8 %agg.tmp1, %struct.vector* byval(%struct.vector) align 8 %v2, double %1)
  call void @add(%struct.vector* sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %agg.tmp, %struct.vector* byval(%struct.vector) align 8 %agg.tmp1)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @vecAsStr(i8* %buffer, %struct.vector* byval(%struct.vector) align 8 %v) #0 {
entry:
  %buffer.addr = alloca i8*, align 4
  store i8* %buffer, i8** %buffer.addr, align 4
  %0 = load i8*, i8** %buffer.addr, align 4
  %x = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 0
  %1 = load double, double* %x, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %z = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 2
  %3 = load double, double* %z, align 8
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* %0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i32 0, i32 0), double %1, double %2, double %3)
  ret void
}

declare i32 @sprintf(i8* %0, i8* %1, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden void @rotate(%struct.vector* byval(%struct.vector) align 8 %i, %struct.vector* byval(%struct.vector) align 8 %j, double %alpha, %struct.vector* %ps) #0 {
entry:
  %alpha.addr = alloca double, align 8
  %ps.addr = alloca %struct.vector*, align 4
  %tmp = alloca %struct.vector, align 8
  %tmp2 = alloca %struct.vector, align 8
  store double %alpha, double* %alpha.addr, align 8
  store %struct.vector* %ps, %struct.vector** %ps.addr, align 4
  %0 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx = getelementptr inbounds %struct.vector, %struct.vector* %0, i32 0
  %1 = load double, double* %alpha.addr, align 8
  %2 = call double @llvm.cos.f64(double %1)
  %3 = load double, double* %alpha.addr, align 8
  %4 = call double @llvm.sin.f64(double %3)
  call void @mulAdd(%struct.vector* sret align 8 %tmp, %struct.vector* byval(%struct.vector) align 8 %i, %struct.vector* byval(%struct.vector) align 8 %j, double %2, double %4)
  %5 = bitcast %struct.vector* %arrayidx to i8*
  %6 = bitcast %struct.vector* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %5, i8* align 8 %6, i32 24, i1 false)
  %7 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx1 = getelementptr inbounds %struct.vector, %struct.vector* %7, i32 1
  %8 = load double, double* %alpha.addr, align 8
  %9 = call double @llvm.sin.f64(double %8)
  %fneg = fneg double %9
  %10 = load double, double* %alpha.addr, align 8
  %11 = call double @llvm.cos.f64(double %10)
  call void @mulAdd(%struct.vector* sret align 8 %tmp2, %struct.vector* byval(%struct.vector) align 8 %i, %struct.vector* byval(%struct.vector) align 8 %j, double %fneg, double %11)
  %12 = bitcast %struct.vector* %arrayidx1 to i8*
  %13 = bitcast %struct.vector* %tmp2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %12, i8* align 8 %13, i32 24, i1 false)
  ret void
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.cos.f64(double %0) #1

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sin.f64(double %0) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: noinline nounwind optnone
define hidden void @orbitalStateVectors(double %semimajorAxis, double %eccentricity, double %inclination, double %longitudeOfAscendingNode, double %argumentOfPeriapsis, double %trueAnomaly, %struct.vector* %ps) #0 {
entry:
  %semimajorAxis.addr = alloca double, align 8
  %eccentricity.addr = alloca double, align 8
  %inclination.addr = alloca double, align 8
  %longitudeOfAscendingNode.addr = alloca double, align 8
  %argumentOfPeriapsis.addr = alloca double, align 8
  %trueAnomaly.addr = alloca double, align 8
  %ps.addr = alloca %struct.vector*, align 4
  %i = alloca %struct.vector, align 8
  %j = alloca %struct.vector, align 8
  %k = alloca %struct.vector, align 8
  %l = alloca double, align 8
  %c = alloca double, align 8
  %s = alloca double, align 8
  %r = alloca double, align 8
  %rprime = alloca double, align 8
  %qs = alloca [2 x %struct.vector], align 16
  %tmp = alloca %struct.vector, align 8
  %tmp14 = alloca %struct.vector, align 8
  %tmp17 = alloca %struct.vector, align 8
  %tmp25 = alloca %struct.vector, align 8
  %tmp29 = alloca %struct.vector, align 8
  store double %semimajorAxis, double* %semimajorAxis.addr, align 8
  store double %eccentricity, double* %eccentricity.addr, align 8
  store double %inclination, double* %inclination.addr, align 8
  store double %longitudeOfAscendingNode, double* %longitudeOfAscendingNode.addr, align 8
  store double %argumentOfPeriapsis, double* %argumentOfPeriapsis.addr, align 8
  store double %trueAnomaly, double* %trueAnomaly.addr, align 8
  store %struct.vector* %ps, %struct.vector** %ps.addr, align 4
  %0 = bitcast %struct.vector* %i to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %0, i8* align 8 bitcast (%struct.vector* @__const.orbitalStateVectors.i to i8*), i32 24, i1 false)
  %1 = bitcast %struct.vector* %j to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %1, i8* align 8 bitcast (%struct.vector* @__const.orbitalStateVectors.j to i8*), i32 24, i1 false)
  %2 = bitcast %struct.vector* %k to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %2, i8* align 8 bitcast (%struct.vector* @__const.orbitalStateVectors.k to i8*), i32 24, i1 false)
  store double 2.000000e+00, double* %l, align 8
  %3 = load double, double* %longitudeOfAscendingNode.addr, align 8
  %arraydecay = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 0
  call void @rotate(%struct.vector* byval(%struct.vector) align 8 %i, %struct.vector* byval(%struct.vector) align 8 %j, double %3, %struct.vector* %arraydecay)
  %arrayidx = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 0
  %4 = bitcast %struct.vector* %i to i8*
  %5 = bitcast %struct.vector* %arrayidx to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %4, i8* align 16 %5, i32 24, i1 false)
  %arrayidx1 = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 1
  %6 = bitcast %struct.vector* %j to i8*
  %7 = bitcast %struct.vector* %arrayidx1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 24, i1 false)
  %8 = load double, double* %inclination.addr, align 8
  %arraydecay2 = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 0
  call void @rotate(%struct.vector* byval(%struct.vector) align 8 %j, %struct.vector* byval(%struct.vector) align 8 %k, double %8, %struct.vector* %arraydecay2)
  %arrayidx3 = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 0
  %9 = bitcast %struct.vector* %j to i8*
  %10 = bitcast %struct.vector* %arrayidx3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %9, i8* align 16 %10, i32 24, i1 false)
  %11 = load double, double* %argumentOfPeriapsis.addr, align 8
  %arraydecay4 = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 0
  call void @rotate(%struct.vector* byval(%struct.vector) align 8 %i, %struct.vector* byval(%struct.vector) align 8 %j, double %11, %struct.vector* %arraydecay4)
  %arrayidx5 = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 0
  %12 = bitcast %struct.vector* %i to i8*
  %13 = bitcast %struct.vector* %arrayidx5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %12, i8* align 16 %13, i32 24, i1 false)
  %arrayidx6 = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 1
  %14 = bitcast %struct.vector* %j to i8*
  %15 = bitcast %struct.vector* %arrayidx6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %14, i8* align 8 %15, i32 24, i1 false)
  %16 = load double, double* %eccentricity.addr, align 8
  %cmp = fcmp une double %16, 1.000000e+00
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %17 = load double, double* %eccentricity.addr, align 8
  %18 = load double, double* %eccentricity.addr, align 8
  %mul = fmul double %17, %18
  %sub = fsub double 1.000000e+00, %mul
  store double %sub, double* %l, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %19 = load double, double* %semimajorAxis.addr, align 8
  %20 = load double, double* %l, align 8
  %mul7 = fmul double %20, %19
  store double %mul7, double* %l, align 8
  %21 = load double, double* %trueAnomaly.addr, align 8
  %22 = call double @llvm.cos.f64(double %21)
  store double %22, double* %c, align 8
  %23 = load double, double* %trueAnomaly.addr, align 8
  %24 = call double @llvm.sin.f64(double %23)
  store double %24, double* %s, align 8
  %25 = load double, double* %l, align 8
  %26 = load double, double* %eccentricity.addr, align 8
  %27 = load double, double* %c, align 8
  %mul8 = fmul double %26, %27
  %add = fadd double 1.000000e+00, %mul8
  %div = fdiv double %25, %add
  store double %div, double* %r, align 8
  %28 = load double, double* %s, align 8
  %29 = load double, double* %r, align 8
  %mul9 = fmul double %28, %29
  %30 = load double, double* %r, align 8
  %mul10 = fmul double %mul9, %30
  %31 = load double, double* %l, align 8
  %div11 = fdiv double %mul10, %31
  store double %div11, double* %rprime, align 8
  %32 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx12 = getelementptr inbounds %struct.vector, %struct.vector* %32, i32 0
  %33 = load double, double* %c, align 8
  %34 = load double, double* %s, align 8
  call void @mulAdd(%struct.vector* sret align 8 %tmp, %struct.vector* byval(%struct.vector) align 8 %i, %struct.vector* byval(%struct.vector) align 8 %j, double %33, double %34)
  %35 = bitcast %struct.vector* %arrayidx12 to i8*
  %36 = bitcast %struct.vector* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %35, i8* align 8 %36, i32 24, i1 false)
  %37 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx13 = getelementptr inbounds %struct.vector, %struct.vector* %37, i32 0
  %38 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx15 = getelementptr inbounds %struct.vector, %struct.vector* %38, i32 0
  %39 = load double, double* %r, align 8
  call void @mul(%struct.vector* sret align 8 %tmp14, %struct.vector* byval(%struct.vector) align 8 %arrayidx15, double %39)
  %40 = bitcast %struct.vector* %arrayidx13 to i8*
  %41 = bitcast %struct.vector* %tmp14 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %40, i8* align 8 %41, i32 24, i1 false)
  %42 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx16 = getelementptr inbounds %struct.vector, %struct.vector* %42, i32 1
  %43 = load double, double* %rprime, align 8
  %44 = load double, double* %c, align 8
  %mul18 = fmul double %43, %44
  %45 = load double, double* %r, align 8
  %46 = load double, double* %s, align 8
  %mul19 = fmul double %45, %46
  %sub20 = fsub double %mul18, %mul19
  %47 = load double, double* %rprime, align 8
  %48 = load double, double* %s, align 8
  %mul21 = fmul double %47, %48
  %49 = load double, double* %r, align 8
  %50 = load double, double* %c, align 8
  %mul22 = fmul double %49, %50
  %add23 = fadd double %mul21, %mul22
  call void @mulAdd(%struct.vector* sret align 8 %tmp17, %struct.vector* byval(%struct.vector) align 8 %i, %struct.vector* byval(%struct.vector) align 8 %j, double %sub20, double %add23)
  %51 = bitcast %struct.vector* %arrayidx16 to i8*
  %52 = bitcast %struct.vector* %tmp17 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %51, i8* align 8 %52, i32 24, i1 false)
  %53 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx24 = getelementptr inbounds %struct.vector, %struct.vector* %53, i32 1
  %54 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx26 = getelementptr inbounds %struct.vector, %struct.vector* %54, i32 1
  %55 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx27 = getelementptr inbounds %struct.vector, %struct.vector* %55, i32 1
  %call = call double @vabs(%struct.vector* byval(%struct.vector) align 8 %arrayidx27)
  call void @div(%struct.vector* sret align 8 %tmp25, %struct.vector* byval(%struct.vector) align 8 %arrayidx26, double %call)
  %56 = bitcast %struct.vector* %arrayidx24 to i8*
  %57 = bitcast %struct.vector* %tmp25 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %56, i8* align 8 %57, i32 24, i1 false)
  %58 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx28 = getelementptr inbounds %struct.vector, %struct.vector* %58, i32 1
  %59 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx30 = getelementptr inbounds %struct.vector, %struct.vector* %59, i32 1
  %60 = load double, double* %r, align 8
  %div31 = fdiv double 2.000000e+00, %60
  %61 = load double, double* %semimajorAxis.addr, align 8
  %div32 = fdiv double 1.000000e+00, %61
  %sub33 = fsub double %div31, %div32
  %62 = call double @llvm.sqrt.f64(double %sub33)
  call void @mul(%struct.vector* sret align 8 %tmp29, %struct.vector* byval(%struct.vector) align 8 %arrayidx30, double %62)
  %63 = bitcast %struct.vector* %arrayidx28 to i8*
  %64 = bitcast %struct.vector* %tmp29 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %63, i8* align 8 %64, i32 24, i1 false)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %longitude = alloca double, align 8
  %ps = alloca [2 x %struct.vector], align 16
  %buffer = alloca [80 x i8], align 16
  store i32 0, i32* %retval, align 4
  store double 0x3FE0C152500C1525, double* %longitude, align 8
  %0 = load double, double* %longitude, align 8
  %arraydecay = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %ps, i32 0, i32 0
  call void @orbitalStateVectors(double 1.000000e+00, double 1.000000e-01, double 0.000000e+00, double %0, double 0.000000e+00, double 0.000000e+00, %struct.vector* %arraydecay)
  %arraydecay1 = getelementptr inbounds [80 x i8], [80 x i8]* %buffer, i32 0, i32 0
  %arrayidx = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %ps, i32 0, i32 0
  call void @vecAsStr(i8* %arraydecay1, %struct.vector* byval(%struct.vector) align 8 %arrayidx)
  %arraydecay2 = getelementptr inbounds [80 x i8], [80 x i8]* %buffer, i32 0, i32 0
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i32 0, i32 0), i8* %arraydecay2)
  %arraydecay3 = getelementptr inbounds [80 x i8], [80 x i8]* %buffer, i32 0, i32 0
  %arrayidx4 = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %ps, i32 0, i32 1
  call void @vecAsStr(i8* %arraydecay3, %struct.vector* byval(%struct.vector) align 8 %arrayidx4)
  %arraydecay5 = getelementptr inbounds [80 x i8], [80 x i8]* %buffer, i32 0, i32 0
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i32 0, i32 0), i8* %arraydecay5)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for vecAsStr()

; entering Souper's runOnFunction() for rotate()

; ModuleID = './Orbital_elements.c.bc'
source_filename = "./Orbital_elements.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.vector = type { double, double, double }

@.str = private unnamed_addr constant [22 x i8] c"(%.17g, %.17g, %.17g)\00", align 1
@__const.orbitalStateVectors.i = private unnamed_addr constant %struct.vector { double 1.000000e+00, double 0.000000e+00, double 0.000000e+00 }, align 8
@__const.orbitalStateVectors.j = private unnamed_addr constant %struct.vector { double 0.000000e+00, double 1.000000e+00, double 0.000000e+00 }, align 8
@__const.orbitalStateVectors.k = private unnamed_addr constant %struct.vector { double 0.000000e+00, double 0.000000e+00, double 1.000000e+00 }, align 8
@.str.1 = private unnamed_addr constant [15 x i8] c"Position : %s\0A\00", align 1
@.str.2 = private unnamed_addr constant [15 x i8] c"Speed    : %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @add(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %v, %struct.vector* byval(%struct.vector) align 8 %w) #0 {
entry:
  %x = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 0
  %0 = load double, double* %x1, align 8
  %x2 = getelementptr inbounds %struct.vector, %struct.vector* %w, i32 0, i32 0
  %1 = load double, double* %x2, align 8
  %add = fadd double %0, %1
  store double %add, double* %x, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  %y3 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 1
  %2 = load double, double* %y3, align 8
  %y4 = getelementptr inbounds %struct.vector, %struct.vector* %w, i32 0, i32 1
  %3 = load double, double* %y4, align 8
  %add5 = fadd double %2, %3
  store double %add5, double* %y, align 8
  %z = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 2
  %z6 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 2
  %4 = load double, double* %z6, align 8
  %z7 = getelementptr inbounds %struct.vector, %struct.vector* %w, i32 0, i32 2
  %5 = load double, double* %z7, align 8
  %add8 = fadd double %4, %5
  store double %add8, double* %z, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @mul(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %v, double %m) #0 {
entry:
  %m.addr = alloca double, align 8
  store double %m, double* %m.addr, align 8
  %x = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 0
  %0 = load double, double* %x1, align 8
  %1 = load double, double* %m.addr, align 8
  %mul = fmul double %0, %1
  store double %mul, double* %x, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  %y2 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 1
  %2 = load double, double* %y2, align 8
  %3 = load double, double* %m.addr, align 8
  %mul3 = fmul double %2, %3
  store double %mul3, double* %y, align 8
  %z = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 2
  %z4 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 2
  %4 = load double, double* %z4, align 8
  %5 = load double, double* %m.addr, align 8
  %mul5 = fmul double %4, %5
  store double %mul5, double* %z, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @div(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %v, double %d) #0 {
entry:
  %d.addr = alloca double, align 8
  store double %d, double* %d.addr, align 8
  %0 = load double, double* %d.addr, align 8
  %div = fdiv double 1.000000e+00, %0
  call void @mul(%struct.vector* sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %v, double %div)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double @vabs(%struct.vector* byval(%struct.vector) align 8 %v) #0 {
entry:
  %x = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %mul = fmul double %0, %1
  %y = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %y2 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 1
  %3 = load double, double* %y2, align 8
  %mul3 = fmul double %2, %3
  %add = fadd double %mul, %mul3
  %z = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 2
  %4 = load double, double* %z, align 8
  %z4 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 2
  %5 = load double, double* %z4, align 8
  %mul5 = fmul double %4, %5
  %add6 = fadd double %add, %mul5
  %6 = call double @llvm.sqrt.f64(double %add6)
  ret double %6
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sqrt.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @mulAdd(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %v1, %struct.vector* byval(%struct.vector) align 8 %v2, double %x1, double %x2) #0 {
entry:
  %x1.addr = alloca double, align 8
  %x2.addr = alloca double, align 8
  %agg.tmp = alloca %struct.vector, align 8
  %agg.tmp1 = alloca %struct.vector, align 8
  store double %x1, double* %x1.addr, align 8
  store double %x2, double* %x2.addr, align 8
  %0 = load double, double* %x1.addr, align 8
  call void @mul(%struct.vector* sret align 8 %agg.tmp, %struct.vector* byval(%struct.vector) align 8 %v1, double %0)
  %1 = load double, double* %x2.addr, align 8
  call void @mul(%struct.vector* sret align 8 %agg.tmp1, %struct.vector* byval(%struct.vector) align 8 %v2, double %1)
  call void @add(%struct.vector* sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %agg.tmp, %struct.vector* byval(%struct.vector) align 8 %agg.tmp1)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @vecAsStr(i8* %buffer, %struct.vector* byval(%struct.vector) align 8 %v) #0 {
entry:
  %buffer.addr = alloca i8*, align 4
  store i8* %buffer, i8** %buffer.addr, align 4
  %0 = load i8*, i8** %buffer.addr, align 4
  %x = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 0
  %1 = load double, double* %x, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %z = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 2
  %3 = load double, double* %z, align 8
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* %0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i32 0, i32 0), double %1, double %2, double %3)
  ret void
}

declare i32 @sprintf(i8* %0, i8* %1, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden void @rotate(%struct.vector* byval(%struct.vector) align 8 %i, %struct.vector* byval(%struct.vector) align 8 %j, double %alpha, %struct.vector* %ps) #0 {
entry:
  %alpha.addr = alloca double, align 8
  %ps.addr = alloca %struct.vector*, align 4
  %tmp = alloca %struct.vector, align 8
  %tmp2 = alloca %struct.vector, align 8
  store double %alpha, double* %alpha.addr, align 8
  store %struct.vector* %ps, %struct.vector** %ps.addr, align 4
  %0 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx = getelementptr inbounds %struct.vector, %struct.vector* %0, i32 0
  %1 = load double, double* %alpha.addr, align 8
  %2 = call double @llvm.cos.f64(double %1)
  %3 = load double, double* %alpha.addr, align 8
  %4 = call double @llvm.sin.f64(double %3)
  call void @mulAdd(%struct.vector* sret align 8 %tmp, %struct.vector* byval(%struct.vector) align 8 %i, %struct.vector* byval(%struct.vector) align 8 %j, double %2, double %4)
  %5 = bitcast %struct.vector* %arrayidx to i8*
  %6 = bitcast %struct.vector* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %5, i8* align 8 %6, i32 24, i1 false)
  %7 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx1 = getelementptr inbounds %struct.vector, %struct.vector* %7, i32 1
  %8 = load double, double* %alpha.addr, align 8
  %9 = call double @llvm.sin.f64(double %8)
  %fneg = fneg double %9
  %10 = load double, double* %alpha.addr, align 8
  %11 = call double @llvm.cos.f64(double %10)
  call void @mulAdd(%struct.vector* sret align 8 %tmp2, %struct.vector* byval(%struct.vector) align 8 %i, %struct.vector* byval(%struct.vector) align 8 %j, double %fneg, double %11)
  %12 = bitcast %struct.vector* %arrayidx1 to i8*
  %13 = bitcast %struct.vector* %tmp2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %12, i8* align 8 %13, i32 24, i1 false)
  ret void
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.cos.f64(double %0) #1

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sin.f64(double %0) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: noinline nounwind optnone
define hidden void @orbitalStateVectors(double %semimajorAxis, double %eccentricity, double %inclination, double %longitudeOfAscendingNode, double %argumentOfPeriapsis, double %trueAnomaly, %struct.vector* %ps) #0 {
entry:
  %semimajorAxis.addr = alloca double, align 8
  %eccentricity.addr = alloca double, align 8
  %inclination.addr = alloca double, align 8
  %longitudeOfAscendingNode.addr = alloca double, align 8
  %argumentOfPeriapsis.addr = alloca double, align 8
  %trueAnomaly.addr = alloca double, align 8
  %ps.addr = alloca %struct.vector*, align 4
  %i = alloca %struct.vector, align 8
  %j = alloca %struct.vector, align 8
  %k = alloca %struct.vector, align 8
  %l = alloca double, align 8
  %c = alloca double, align 8
  %s = alloca double, align 8
  %r = alloca double, align 8
  %rprime = alloca double, align 8
  %qs = alloca [2 x %struct.vector], align 16
  %tmp = alloca %struct.vector, align 8
  %tmp14 = alloca %struct.vector, align 8
  %tmp17 = alloca %struct.vector, align 8
  %tmp25 = alloca %struct.vector, align 8
  %tmp29 = alloca %struct.vector, align 8
  store double %semimajorAxis, double* %semimajorAxis.addr, align 8
  store double %eccentricity, double* %eccentricity.addr, align 8
  store double %inclination, double* %inclination.addr, align 8
  store double %longitudeOfAscendingNode, double* %longitudeOfAscendingNode.addr, align 8
  store double %argumentOfPeriapsis, double* %argumentOfPeriapsis.addr, align 8
  store double %trueAnomaly, double* %trueAnomaly.addr, align 8
  store %struct.vector* %ps, %struct.vector** %ps.addr, align 4
  %0 = bitcast %struct.vector* %i to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %0, i8* align 8 bitcast (%struct.vector* @__const.orbitalStateVectors.i to i8*), i32 24, i1 false)
  %1 = bitcast %struct.vector* %j to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %1, i8* align 8 bitcast (%struct.vector* @__const.orbitalStateVectors.j to i8*), i32 24, i1 false)
  %2 = bitcast %struct.vector* %k to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %2, i8* align 8 bitcast (%struct.vector* @__const.orbitalStateVectors.k to i8*), i32 24, i1 false)
  store double 2.000000e+00, double* %l, align 8
  %3 = load double, double* %longitudeOfAscendingNode.addr, align 8
  %arraydecay = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 0
  call void @rotate(%struct.vector* byval(%struct.vector) align 8 %i, %struct.vector* byval(%struct.vector) align 8 %j, double %3, %struct.vector* %arraydecay)
  %arrayidx = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 0
  %4 = bitcast %struct.vector* %i to i8*
  %5 = bitcast %struct.vector* %arrayidx to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %4, i8* align 16 %5, i32 24, i1 false)
  %arrayidx1 = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 1
  %6 = bitcast %struct.vector* %j to i8*
  %7 = bitcast %struct.vector* %arrayidx1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 24, i1 false)
  %8 = load double, double* %inclination.addr, align 8
  %arraydecay2 = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 0
  call void @rotate(%struct.vector* byval(%struct.vector) align 8 %j, %struct.vector* byval(%struct.vector) align 8 %k, double %8, %struct.vector* %arraydecay2)
  %arrayidx3 = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 0
  %9 = bitcast %struct.vector* %j to i8*
  %10 = bitcast %struct.vector* %arrayidx3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %9, i8* align 16 %10, i32 24, i1 false)
  %11 = load double, double* %argumentOfPeriapsis.addr, align 8
  %arraydecay4 = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 0
  call void @rotate(%struct.vector* byval(%struct.vector) align 8 %i, %struct.vector* byval(%struct.vector) align 8 %j, double %11, %struct.vector* %arraydecay4)
  %arrayidx5 = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 0
  %12 = bitcast %struct.vector* %i to i8*
  %13 = bitcast %struct.vector* %arrayidx5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %12, i8* align 16 %13, i32 24, i1 false)
  %arrayidx6 = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 1
  %14 = bitcast %struct.vector* %j to i8*
  %15 = bitcast %struct.vector* %arrayidx6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %14, i8* align 8 %15, i32 24, i1 false)
  %16 = load double, double* %eccentricity.addr, align 8
  %cmp = fcmp une double %16, 1.000000e+00
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %17 = load double, double* %eccentricity.addr, align 8
  %18 = load double, double* %eccentricity.addr, align 8
  %mul = fmul double %17, %18
  %sub = fsub double 1.000000e+00, %mul
  store double %sub, double* %l, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %19 = load double, double* %semimajorAxis.addr, align 8
  %20 = load double, double* %l, align 8
  %mul7 = fmul double %20, %19
  store double %mul7, double* %l, align 8
  %21 = load double, double* %trueAnomaly.addr, align 8
  %22 = call double @llvm.cos.f64(double %21)
  store double %22, double* %c, align 8
  %23 = load double, double* %trueAnomaly.addr, align 8
  %24 = call double @llvm.sin.f64(double %23)
  store double %24, double* %s, align 8
  %25 = load double, double* %l, align 8
  %26 = load double, double* %eccentricity.addr, align 8
  %27 = load double, double* %c, align 8
  %mul8 = fmul double %26, %27
  %add = fadd double 1.000000e+00, %mul8
  %div = fdiv double %25, %add
  store double %div, double* %r, align 8
  %28 = load double, double* %s, align 8
  %29 = load double, double* %r, align 8
  %mul9 = fmul double %28, %29
  %30 = load double, double* %r, align 8
  %mul10 = fmul double %mul9, %30
  %31 = load double, double* %l, align 8
  %div11 = fdiv double %mul10, %31
  store double %div11, double* %rprime, align 8
  %32 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx12 = getelementptr inbounds %struct.vector, %struct.vector* %32, i32 0
  %33 = load double, double* %c, align 8
  %34 = load double, double* %s, align 8
  call void @mulAdd(%struct.vector* sret align 8 %tmp, %struct.vector* byval(%struct.vector) align 8 %i, %struct.vector* byval(%struct.vector) align 8 %j, double %33, double %34)
  %35 = bitcast %struct.vector* %arrayidx12 to i8*
  %36 = bitcast %struct.vector* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %35, i8* align 8 %36, i32 24, i1 false)
  %37 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx13 = getelementptr inbounds %struct.vector, %struct.vector* %37, i32 0
  %38 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx15 = getelementptr inbounds %struct.vector, %struct.vector* %38, i32 0
  %39 = load double, double* %r, align 8
  call void @mul(%struct.vector* sret align 8 %tmp14, %struct.vector* byval(%struct.vector) align 8 %arrayidx15, double %39)
  %40 = bitcast %struct.vector* %arrayidx13 to i8*
  %41 = bitcast %struct.vector* %tmp14 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %40, i8* align 8 %41, i32 24, i1 false)
  %42 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx16 = getelementptr inbounds %struct.vector, %struct.vector* %42, i32 1
  %43 = load double, double* %rprime, align 8
  %44 = load double, double* %c, align 8
  %mul18 = fmul double %43, %44
  %45 = load double, double* %r, align 8
  %46 = load double, double* %s, align 8
  %mul19 = fmul double %45, %46
  %sub20 = fsub double %mul18, %mul19
  %47 = load double, double* %rprime, align 8
  %48 = load double, double* %s, align 8
  %mul21 = fmul double %47, %48
  %49 = load double, double* %r, align 8
  %50 = load double, double* %c, align 8
  %mul22 = fmul double %49, %50
  %add23 = fadd double %mul21, %mul22
  call void @mulAdd(%struct.vector* sret align 8 %tmp17, %struct.vector* byval(%struct.vector) align 8 %i, %struct.vector* byval(%struct.vector) align 8 %j, double %sub20, double %add23)
  %51 = bitcast %struct.vector* %arrayidx16 to i8*
  %52 = bitcast %struct.vector* %tmp17 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %51, i8* align 8 %52, i32 24, i1 false)
  %53 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx24 = getelementptr inbounds %struct.vector, %struct.vector* %53, i32 1
  %54 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx26 = getelementptr inbounds %struct.vector, %struct.vector* %54, i32 1
  %55 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx27 = getelementptr inbounds %struct.vector, %struct.vector* %55, i32 1
  %call = call double @vabs(%struct.vector* byval(%struct.vector) align 8 %arrayidx27)
  call void @div(%struct.vector* sret align 8 %tmp25, %struct.vector* byval(%struct.vector) align 8 %arrayidx26, double %call)
  %56 = bitcast %struct.vector* %arrayidx24 to i8*
  %57 = bitcast %struct.vector* %tmp25 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %56, i8* align 8 %57, i32 24, i1 false)
  %58 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx28 = getelementptr inbounds %struct.vector, %struct.vector* %58, i32 1
  %59 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx30 = getelementptr inbounds %struct.vector, %struct.vector* %59, i32 1
  %60 = load double, double* %r, align 8
  %div31 = fdiv double 2.000000e+00, %60
  %61 = load double, double* %semimajorAxis.addr, align 8
  %div32 = fdiv double 1.000000e+00, %61
  %sub33 = fsub double %div31, %div32
  %62 = call double @llvm.sqrt.f64(double %sub33)
  call void @mul(%struct.vector* sret align 8 %tmp29, %struct.vector* byval(%struct.vector) align 8 %arrayidx30, double %62)
  %63 = bitcast %struct.vector* %arrayidx28 to i8*
  %64 = bitcast %struct.vector* %tmp29 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %63, i8* align 8 %64, i32 24, i1 false)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %longitude = alloca double, align 8
  %ps = alloca [2 x %struct.vector], align 16
  %buffer = alloca [80 x i8], align 16
  store i32 0, i32* %retval, align 4
  store double 0x3FE0C152500C1525, double* %longitude, align 8
  %0 = load double, double* %longitude, align 8
  %arraydecay = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %ps, i32 0, i32 0
  call void @orbitalStateVectors(double 1.000000e+00, double 1.000000e-01, double 0.000000e+00, double %0, double 0.000000e+00, double 0.000000e+00, %struct.vector* %arraydecay)
  %arraydecay1 = getelementptr inbounds [80 x i8], [80 x i8]* %buffer, i32 0, i32 0
  %arrayidx = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %ps, i32 0, i32 0
  call void @vecAsStr(i8* %arraydecay1, %struct.vector* byval(%struct.vector) align 8 %arrayidx)
  %arraydecay2 = getelementptr inbounds [80 x i8], [80 x i8]* %buffer, i32 0, i32 0
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i32 0, i32 0), i8* %arraydecay2)
  %arraydecay3 = getelementptr inbounds [80 x i8], [80 x i8]* %buffer, i32 0, i32 0
  %arrayidx4 = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %ps, i32 0, i32 1
  call void @vecAsStr(i8* %arraydecay3, %struct.vector* byval(%struct.vector) align 8 %arrayidx4)
  %arraydecay5 = getelementptr inbounds [80 x i8], [80 x i8]* %buffer, i32 0, i32 0
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i32 0, i32 0), i8* %arraydecay5)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for rotate()

; entering Souper's runOnFunction() for orbitalStateVectors()

; ModuleID = './Orbital_elements.c.bc'
source_filename = "./Orbital_elements.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.vector = type { double, double, double }

@.str = private unnamed_addr constant [22 x i8] c"(%.17g, %.17g, %.17g)\00", align 1
@__const.orbitalStateVectors.i = private unnamed_addr constant %struct.vector { double 1.000000e+00, double 0.000000e+00, double 0.000000e+00 }, align 8
@__const.orbitalStateVectors.j = private unnamed_addr constant %struct.vector { double 0.000000e+00, double 1.000000e+00, double 0.000000e+00 }, align 8
@__const.orbitalStateVectors.k = private unnamed_addr constant %struct.vector { double 0.000000e+00, double 0.000000e+00, double 1.000000e+00 }, align 8
@.str.1 = private unnamed_addr constant [15 x i8] c"Position : %s\0A\00", align 1
@.str.2 = private unnamed_addr constant [15 x i8] c"Speed    : %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @add(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %v, %struct.vector* byval(%struct.vector) align 8 %w) #0 {
entry:
  %x = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 0
  %0 = load double, double* %x1, align 8
  %x2 = getelementptr inbounds %struct.vector, %struct.vector* %w, i32 0, i32 0
  %1 = load double, double* %x2, align 8
  %add = fadd double %0, %1
  store double %add, double* %x, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  %y3 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 1
  %2 = load double, double* %y3, align 8
  %y4 = getelementptr inbounds %struct.vector, %struct.vector* %w, i32 0, i32 1
  %3 = load double, double* %y4, align 8
  %add5 = fadd double %2, %3
  store double %add5, double* %y, align 8
  %z = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 2
  %z6 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 2
  %4 = load double, double* %z6, align 8
  %z7 = getelementptr inbounds %struct.vector, %struct.vector* %w, i32 0, i32 2
  %5 = load double, double* %z7, align 8
  %add8 = fadd double %4, %5
  store double %add8, double* %z, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @mul(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %v, double %m) #0 {
entry:
  %m.addr = alloca double, align 8
  store double %m, double* %m.addr, align 8
  %x = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 0
  %0 = load double, double* %x1, align 8
  %1 = load double, double* %m.addr, align 8
  %mul = fmul double %0, %1
  store double %mul, double* %x, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  %y2 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 1
  %2 = load double, double* %y2, align 8
  %3 = load double, double* %m.addr, align 8
  %mul3 = fmul double %2, %3
  store double %mul3, double* %y, align 8
  %z = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 2
  %z4 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 2
  %4 = load double, double* %z4, align 8
  %5 = load double, double* %m.addr, align 8
  %mul5 = fmul double %4, %5
  store double %mul5, double* %z, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @div(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %v, double %d) #0 {
entry:
  %d.addr = alloca double, align 8
  store double %d, double* %d.addr, align 8
  %0 = load double, double* %d.addr, align 8
  %div = fdiv double 1.000000e+00, %0
  call void @mul(%struct.vector* sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %v, double %div)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double @vabs(%struct.vector* byval(%struct.vector) align 8 %v) #0 {
entry:
  %x = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %mul = fmul double %0, %1
  %y = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %y2 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 1
  %3 = load double, double* %y2, align 8
  %mul3 = fmul double %2, %3
  %add = fadd double %mul, %mul3
  %z = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 2
  %4 = load double, double* %z, align 8
  %z4 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 2
  %5 = load double, double* %z4, align 8
  %mul5 = fmul double %4, %5
  %add6 = fadd double %add, %mul5
  %6 = call double @llvm.sqrt.f64(double %add6)
  ret double %6
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sqrt.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @mulAdd(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %v1, %struct.vector* byval(%struct.vector) align 8 %v2, double %x1, double %x2) #0 {
entry:
  %x1.addr = alloca double, align 8
  %x2.addr = alloca double, align 8
  %agg.tmp = alloca %struct.vector, align 8
  %agg.tmp1 = alloca %struct.vector, align 8
  store double %x1, double* %x1.addr, align 8
  store double %x2, double* %x2.addr, align 8
  %0 = load double, double* %x1.addr, align 8
  call void @mul(%struct.vector* sret align 8 %agg.tmp, %struct.vector* byval(%struct.vector) align 8 %v1, double %0)
  %1 = load double, double* %x2.addr, align 8
  call void @mul(%struct.vector* sret align 8 %agg.tmp1, %struct.vector* byval(%struct.vector) align 8 %v2, double %1)
  call void @add(%struct.vector* sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %agg.tmp, %struct.vector* byval(%struct.vector) align 8 %agg.tmp1)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @vecAsStr(i8* %buffer, %struct.vector* byval(%struct.vector) align 8 %v) #0 {
entry:
  %buffer.addr = alloca i8*, align 4
  store i8* %buffer, i8** %buffer.addr, align 4
  %0 = load i8*, i8** %buffer.addr, align 4
  %x = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 0
  %1 = load double, double* %x, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %z = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 2
  %3 = load double, double* %z, align 8
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* %0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i32 0, i32 0), double %1, double %2, double %3)
  ret void
}

declare i32 @sprintf(i8* %0, i8* %1, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden void @rotate(%struct.vector* byval(%struct.vector) align 8 %i, %struct.vector* byval(%struct.vector) align 8 %j, double %alpha, %struct.vector* %ps) #0 {
entry:
  %alpha.addr = alloca double, align 8
  %ps.addr = alloca %struct.vector*, align 4
  %tmp = alloca %struct.vector, align 8
  %tmp2 = alloca %struct.vector, align 8
  store double %alpha, double* %alpha.addr, align 8
  store %struct.vector* %ps, %struct.vector** %ps.addr, align 4
  %0 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx = getelementptr inbounds %struct.vector, %struct.vector* %0, i32 0
  %1 = load double, double* %alpha.addr, align 8
  %2 = call double @llvm.cos.f64(double %1)
  %3 = load double, double* %alpha.addr, align 8
  %4 = call double @llvm.sin.f64(double %3)
  call void @mulAdd(%struct.vector* sret align 8 %tmp, %struct.vector* byval(%struct.vector) align 8 %i, %struct.vector* byval(%struct.vector) align 8 %j, double %2, double %4)
  %5 = bitcast %struct.vector* %arrayidx to i8*
  %6 = bitcast %struct.vector* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %5, i8* align 8 %6, i32 24, i1 false)
  %7 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx1 = getelementptr inbounds %struct.vector, %struct.vector* %7, i32 1
  %8 = load double, double* %alpha.addr, align 8
  %9 = call double @llvm.sin.f64(double %8)
  %fneg = fneg double %9
  %10 = load double, double* %alpha.addr, align 8
  %11 = call double @llvm.cos.f64(double %10)
  call void @mulAdd(%struct.vector* sret align 8 %tmp2, %struct.vector* byval(%struct.vector) align 8 %i, %struct.vector* byval(%struct.vector) align 8 %j, double %fneg, double %11)
  %12 = bitcast %struct.vector* %arrayidx1 to i8*
  %13 = bitcast %struct.vector* %tmp2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %12, i8* align 8 %13, i32 24, i1 false)
  ret void
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.cos.f64(double %0) #1

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sin.f64(double %0) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: noinline nounwind optnone
define hidden void @orbitalStateVectors(double %semimajorAxis, double %eccentricity, double %inclination, double %longitudeOfAscendingNode, double %argumentOfPeriapsis, double %trueAnomaly, %struct.vector* %ps) #0 {
entry:
  %semimajorAxis.addr = alloca double, align 8
  %eccentricity.addr = alloca double, align 8
  %inclination.addr = alloca double, align 8
  %longitudeOfAscendingNode.addr = alloca double, align 8
  %argumentOfPeriapsis.addr = alloca double, align 8
  %trueAnomaly.addr = alloca double, align 8
  %ps.addr = alloca %struct.vector*, align 4
  %i = alloca %struct.vector, align 8
  %j = alloca %struct.vector, align 8
  %k = alloca %struct.vector, align 8
  %l = alloca double, align 8
  %c = alloca double, align 8
  %s = alloca double, align 8
  %r = alloca double, align 8
  %rprime = alloca double, align 8
  %qs = alloca [2 x %struct.vector], align 16
  %tmp = alloca %struct.vector, align 8
  %tmp14 = alloca %struct.vector, align 8
  %tmp17 = alloca %struct.vector, align 8
  %tmp25 = alloca %struct.vector, align 8
  %tmp29 = alloca %struct.vector, align 8
  store double %semimajorAxis, double* %semimajorAxis.addr, align 8
  store double %eccentricity, double* %eccentricity.addr, align 8
  store double %inclination, double* %inclination.addr, align 8
  store double %longitudeOfAscendingNode, double* %longitudeOfAscendingNode.addr, align 8
  store double %argumentOfPeriapsis, double* %argumentOfPeriapsis.addr, align 8
  store double %trueAnomaly, double* %trueAnomaly.addr, align 8
  store %struct.vector* %ps, %struct.vector** %ps.addr, align 4
  %0 = bitcast %struct.vector* %i to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %0, i8* align 8 bitcast (%struct.vector* @__const.orbitalStateVectors.i to i8*), i32 24, i1 false)
  %1 = bitcast %struct.vector* %j to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %1, i8* align 8 bitcast (%struct.vector* @__const.orbitalStateVectors.j to i8*), i32 24, i1 false)
  %2 = bitcast %struct.vector* %k to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %2, i8* align 8 bitcast (%struct.vector* @__const.orbitalStateVectors.k to i8*), i32 24, i1 false)
  store double 2.000000e+00, double* %l, align 8
  %3 = load double, double* %longitudeOfAscendingNode.addr, align 8
  %arraydecay = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 0
  call void @rotate(%struct.vector* byval(%struct.vector) align 8 %i, %struct.vector* byval(%struct.vector) align 8 %j, double %3, %struct.vector* %arraydecay)
  %arrayidx = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 0
  %4 = bitcast %struct.vector* %i to i8*
  %5 = bitcast %struct.vector* %arrayidx to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %4, i8* align 16 %5, i32 24, i1 false)
  %arrayidx1 = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 1
  %6 = bitcast %struct.vector* %j to i8*
  %7 = bitcast %struct.vector* %arrayidx1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 24, i1 false)
  %8 = load double, double* %inclination.addr, align 8
  %arraydecay2 = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 0
  call void @rotate(%struct.vector* byval(%struct.vector) align 8 %j, %struct.vector* byval(%struct.vector) align 8 %k, double %8, %struct.vector* %arraydecay2)
  %arrayidx3 = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 0
  %9 = bitcast %struct.vector* %j to i8*
  %10 = bitcast %struct.vector* %arrayidx3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %9, i8* align 16 %10, i32 24, i1 false)
  %11 = load double, double* %argumentOfPeriapsis.addr, align 8
  %arraydecay4 = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 0
  call void @rotate(%struct.vector* byval(%struct.vector) align 8 %i, %struct.vector* byval(%struct.vector) align 8 %j, double %11, %struct.vector* %arraydecay4)
  %arrayidx5 = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 0
  %12 = bitcast %struct.vector* %i to i8*
  %13 = bitcast %struct.vector* %arrayidx5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %12, i8* align 16 %13, i32 24, i1 false)
  %arrayidx6 = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 1
  %14 = bitcast %struct.vector* %j to i8*
  %15 = bitcast %struct.vector* %arrayidx6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %14, i8* align 8 %15, i32 24, i1 false)
  %16 = load double, double* %eccentricity.addr, align 8
  %cmp = fcmp une double %16, 1.000000e+00
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %17 = load double, double* %eccentricity.addr, align 8
  %18 = load double, double* %eccentricity.addr, align 8
  %mul = fmul double %17, %18
  %sub = fsub double 1.000000e+00, %mul
  store double %sub, double* %l, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %19 = load double, double* %semimajorAxis.addr, align 8
  %20 = load double, double* %l, align 8
  %mul7 = fmul double %20, %19
  store double %mul7, double* %l, align 8
  %21 = load double, double* %trueAnomaly.addr, align 8
  %22 = call double @llvm.cos.f64(double %21)
  store double %22, double* %c, align 8
  %23 = load double, double* %trueAnomaly.addr, align 8
  %24 = call double @llvm.sin.f64(double %23)
  store double %24, double* %s, align 8
  %25 = load double, double* %l, align 8
  %26 = load double, double* %eccentricity.addr, align 8
  %27 = load double, double* %c, align 8
  %mul8 = fmul double %26, %27
  %add = fadd double 1.000000e+00, %mul8
  %div = fdiv double %25, %add
  store double %div, double* %r, align 8
  %28 = load double, double* %s, align 8
  %29 = load double, double* %r, align 8
  %mul9 = fmul double %28, %29
  %30 = load double, double* %r, align 8
  %mul10 = fmul double %mul9, %30
  %31 = load double, double* %l, align 8
  %div11 = fdiv double %mul10, %31
  store double %div11, double* %rprime, align 8
  %32 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx12 = getelementptr inbounds %struct.vector, %struct.vector* %32, i32 0
  %33 = load double, double* %c, align 8
  %34 = load double, double* %s, align 8
  call void @mulAdd(%struct.vector* sret align 8 %tmp, %struct.vector* byval(%struct.vector) align 8 %i, %struct.vector* byval(%struct.vector) align 8 %j, double %33, double %34)
  %35 = bitcast %struct.vector* %arrayidx12 to i8*
  %36 = bitcast %struct.vector* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %35, i8* align 8 %36, i32 24, i1 false)
  %37 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx13 = getelementptr inbounds %struct.vector, %struct.vector* %37, i32 0
  %38 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx15 = getelementptr inbounds %struct.vector, %struct.vector* %38, i32 0
  %39 = load double, double* %r, align 8
  call void @mul(%struct.vector* sret align 8 %tmp14, %struct.vector* byval(%struct.vector) align 8 %arrayidx15, double %39)
  %40 = bitcast %struct.vector* %arrayidx13 to i8*
  %41 = bitcast %struct.vector* %tmp14 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %40, i8* align 8 %41, i32 24, i1 false)
  %42 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx16 = getelementptr inbounds %struct.vector, %struct.vector* %42, i32 1
  %43 = load double, double* %rprime, align 8
  %44 = load double, double* %c, align 8
  %mul18 = fmul double %43, %44
  %45 = load double, double* %r, align 8
  %46 = load double, double* %s, align 8
  %mul19 = fmul double %45, %46
  %sub20 = fsub double %mul18, %mul19
  %47 = load double, double* %rprime, align 8
  %48 = load double, double* %s, align 8
  %mul21 = fmul double %47, %48
  %49 = load double, double* %r, align 8
  %50 = load double, double* %c, align 8
  %mul22 = fmul double %49, %50
  %add23 = fadd double %mul21, %mul22
  call void @mulAdd(%struct.vector* sret align 8 %tmp17, %struct.vector* byval(%struct.vector) align 8 %i, %struct.vector* byval(%struct.vector) align 8 %j, double %sub20, double %add23)
  %51 = bitcast %struct.vector* %arrayidx16 to i8*
  %52 = bitcast %struct.vector* %tmp17 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %51, i8* align 8 %52, i32 24, i1 false)
  %53 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx24 = getelementptr inbounds %struct.vector, %struct.vector* %53, i32 1
  %54 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx26 = getelementptr inbounds %struct.vector, %struct.vector* %54, i32 1
  %55 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx27 = getelementptr inbounds %struct.vector, %struct.vector* %55, i32 1
  %call = call double @vabs(%struct.vector* byval(%struct.vector) align 8 %arrayidx27)
  call void @div(%struct.vector* sret align 8 %tmp25, %struct.vector* byval(%struct.vector) align 8 %arrayidx26, double %call)
  %56 = bitcast %struct.vector* %arrayidx24 to i8*
  %57 = bitcast %struct.vector* %tmp25 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %56, i8* align 8 %57, i32 24, i1 false)
  %58 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx28 = getelementptr inbounds %struct.vector, %struct.vector* %58, i32 1
  %59 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx30 = getelementptr inbounds %struct.vector, %struct.vector* %59, i32 1
  %60 = load double, double* %r, align 8
  %div31 = fdiv double 2.000000e+00, %60
  %61 = load double, double* %semimajorAxis.addr, align 8
  %div32 = fdiv double 1.000000e+00, %61
  %sub33 = fsub double %div31, %div32
  %62 = call double @llvm.sqrt.f64(double %sub33)
  call void @mul(%struct.vector* sret align 8 %tmp29, %struct.vector* byval(%struct.vector) align 8 %arrayidx30, double %62)
  %63 = bitcast %struct.vector* %arrayidx28 to i8*
  %64 = bitcast %struct.vector* %tmp29 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %63, i8* align 8 %64, i32 24, i1 false)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %longitude = alloca double, align 8
  %ps = alloca [2 x %struct.vector], align 16
  %buffer = alloca [80 x i8], align 16
  store i32 0, i32* %retval, align 4
  store double 0x3FE0C152500C1525, double* %longitude, align 8
  %0 = load double, double* %longitude, align 8
  %arraydecay = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %ps, i32 0, i32 0
  call void @orbitalStateVectors(double 1.000000e+00, double 1.000000e-01, double 0.000000e+00, double %0, double 0.000000e+00, double 0.000000e+00, %struct.vector* %arraydecay)
  %arraydecay1 = getelementptr inbounds [80 x i8], [80 x i8]* %buffer, i32 0, i32 0
  %arrayidx = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %ps, i32 0, i32 0
  call void @vecAsStr(i8* %arraydecay1, %struct.vector* byval(%struct.vector) align 8 %arrayidx)
  %arraydecay2 = getelementptr inbounds [80 x i8], [80 x i8]* %buffer, i32 0, i32 0
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i32 0, i32 0), i8* %arraydecay2)
  %arraydecay3 = getelementptr inbounds [80 x i8], [80 x i8]* %buffer, i32 0, i32 0
  %arrayidx4 = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %ps, i32 0, i32 1
  call void @vecAsStr(i8* %arraydecay3, %struct.vector* byval(%struct.vector) align 8 %arrayidx4)
  %arraydecay5 = getelementptr inbounds [80 x i8], [80 x i8]* %buffer, i32 0, i32 0
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i32 0, i32 0), i8* %arraydecay5)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %cmp = fcmp une double %16, 1.000000e+00
; Looking for a replacement for:
%0:i1 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for orbitalStateVectors()

; entering Souper's runOnFunction() for main()

; ModuleID = './Orbital_elements.c.bc'
source_filename = "./Orbital_elements.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.vector = type { double, double, double }

@.str = private unnamed_addr constant [22 x i8] c"(%.17g, %.17g, %.17g)\00", align 1
@__const.orbitalStateVectors.i = private unnamed_addr constant %struct.vector { double 1.000000e+00, double 0.000000e+00, double 0.000000e+00 }, align 8
@__const.orbitalStateVectors.j = private unnamed_addr constant %struct.vector { double 0.000000e+00, double 1.000000e+00, double 0.000000e+00 }, align 8
@__const.orbitalStateVectors.k = private unnamed_addr constant %struct.vector { double 0.000000e+00, double 0.000000e+00, double 1.000000e+00 }, align 8
@.str.1 = private unnamed_addr constant [15 x i8] c"Position : %s\0A\00", align 1
@.str.2 = private unnamed_addr constant [15 x i8] c"Speed    : %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @add(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %v, %struct.vector* byval(%struct.vector) align 8 %w) #0 {
entry:
  %x = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 0
  %0 = load double, double* %x1, align 8
  %x2 = getelementptr inbounds %struct.vector, %struct.vector* %w, i32 0, i32 0
  %1 = load double, double* %x2, align 8
  %add = fadd double %0, %1
  store double %add, double* %x, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  %y3 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 1
  %2 = load double, double* %y3, align 8
  %y4 = getelementptr inbounds %struct.vector, %struct.vector* %w, i32 0, i32 1
  %3 = load double, double* %y4, align 8
  %add5 = fadd double %2, %3
  store double %add5, double* %y, align 8
  %z = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 2
  %z6 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 2
  %4 = load double, double* %z6, align 8
  %z7 = getelementptr inbounds %struct.vector, %struct.vector* %w, i32 0, i32 2
  %5 = load double, double* %z7, align 8
  %add8 = fadd double %4, %5
  store double %add8, double* %z, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @mul(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %v, double %m) #0 {
entry:
  %m.addr = alloca double, align 8
  store double %m, double* %m.addr, align 8
  %x = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 0
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 0
  %0 = load double, double* %x1, align 8
  %1 = load double, double* %m.addr, align 8
  %mul = fmul double %0, %1
  store double %mul, double* %x, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 1
  %y2 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 1
  %2 = load double, double* %y2, align 8
  %3 = load double, double* %m.addr, align 8
  %mul3 = fmul double %2, %3
  store double %mul3, double* %y, align 8
  %z = getelementptr inbounds %struct.vector, %struct.vector* %agg.result, i32 0, i32 2
  %z4 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 2
  %4 = load double, double* %z4, align 8
  %5 = load double, double* %m.addr, align 8
  %mul5 = fmul double %4, %5
  store double %mul5, double* %z, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @div(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %v, double %d) #0 {
entry:
  %d.addr = alloca double, align 8
  store double %d, double* %d.addr, align 8
  %0 = load double, double* %d.addr, align 8
  %div = fdiv double 1.000000e+00, %0
  call void @mul(%struct.vector* sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %v, double %div)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double @vabs(%struct.vector* byval(%struct.vector) align 8 %v) #0 {
entry:
  %x = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %x1 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 0
  %1 = load double, double* %x1, align 8
  %mul = fmul double %0, %1
  %y = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %y2 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 1
  %3 = load double, double* %y2, align 8
  %mul3 = fmul double %2, %3
  %add = fadd double %mul, %mul3
  %z = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 2
  %4 = load double, double* %z, align 8
  %z4 = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 2
  %5 = load double, double* %z4, align 8
  %mul5 = fmul double %4, %5
  %add6 = fadd double %add, %mul5
  %6 = call double @llvm.sqrt.f64(double %add6)
  ret double %6
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sqrt.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @mulAdd(%struct.vector* noalias sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %v1, %struct.vector* byval(%struct.vector) align 8 %v2, double %x1, double %x2) #0 {
entry:
  %x1.addr = alloca double, align 8
  %x2.addr = alloca double, align 8
  %agg.tmp = alloca %struct.vector, align 8
  %agg.tmp1 = alloca %struct.vector, align 8
  store double %x1, double* %x1.addr, align 8
  store double %x2, double* %x2.addr, align 8
  %0 = load double, double* %x1.addr, align 8
  call void @mul(%struct.vector* sret align 8 %agg.tmp, %struct.vector* byval(%struct.vector) align 8 %v1, double %0)
  %1 = load double, double* %x2.addr, align 8
  call void @mul(%struct.vector* sret align 8 %agg.tmp1, %struct.vector* byval(%struct.vector) align 8 %v2, double %1)
  call void @add(%struct.vector* sret align 8 %agg.result, %struct.vector* byval(%struct.vector) align 8 %agg.tmp, %struct.vector* byval(%struct.vector) align 8 %agg.tmp1)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @vecAsStr(i8* %buffer, %struct.vector* byval(%struct.vector) align 8 %v) #0 {
entry:
  %buffer.addr = alloca i8*, align 4
  store i8* %buffer, i8** %buffer.addr, align 4
  %0 = load i8*, i8** %buffer.addr, align 4
  %x = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 0
  %1 = load double, double* %x, align 8
  %y = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 1
  %2 = load double, double* %y, align 8
  %z = getelementptr inbounds %struct.vector, %struct.vector* %v, i32 0, i32 2
  %3 = load double, double* %z, align 8
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* %0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i32 0, i32 0), double %1, double %2, double %3)
  ret void
}

declare i32 @sprintf(i8* %0, i8* %1, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden void @rotate(%struct.vector* byval(%struct.vector) align 8 %i, %struct.vector* byval(%struct.vector) align 8 %j, double %alpha, %struct.vector* %ps) #0 {
entry:
  %alpha.addr = alloca double, align 8
  %ps.addr = alloca %struct.vector*, align 4
  %tmp = alloca %struct.vector, align 8
  %tmp2 = alloca %struct.vector, align 8
  store double %alpha, double* %alpha.addr, align 8
  store %struct.vector* %ps, %struct.vector** %ps.addr, align 4
  %0 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx = getelementptr inbounds %struct.vector, %struct.vector* %0, i32 0
  %1 = load double, double* %alpha.addr, align 8
  %2 = call double @llvm.cos.f64(double %1)
  %3 = load double, double* %alpha.addr, align 8
  %4 = call double @llvm.sin.f64(double %3)
  call void @mulAdd(%struct.vector* sret align 8 %tmp, %struct.vector* byval(%struct.vector) align 8 %i, %struct.vector* byval(%struct.vector) align 8 %j, double %2, double %4)
  %5 = bitcast %struct.vector* %arrayidx to i8*
  %6 = bitcast %struct.vector* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %5, i8* align 8 %6, i32 24, i1 false)
  %7 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx1 = getelementptr inbounds %struct.vector, %struct.vector* %7, i32 1
  %8 = load double, double* %alpha.addr, align 8
  %9 = call double @llvm.sin.f64(double %8)
  %fneg = fneg double %9
  %10 = load double, double* %alpha.addr, align 8
  %11 = call double @llvm.cos.f64(double %10)
  call void @mulAdd(%struct.vector* sret align 8 %tmp2, %struct.vector* byval(%struct.vector) align 8 %i, %struct.vector* byval(%struct.vector) align 8 %j, double %fneg, double %11)
  %12 = bitcast %struct.vector* %arrayidx1 to i8*
  %13 = bitcast %struct.vector* %tmp2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %12, i8* align 8 %13, i32 24, i1 false)
  ret void
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.cos.f64(double %0) #1

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sin.f64(double %0) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #3

; Function Attrs: noinline nounwind optnone
define hidden void @orbitalStateVectors(double %semimajorAxis, double %eccentricity, double %inclination, double %longitudeOfAscendingNode, double %argumentOfPeriapsis, double %trueAnomaly, %struct.vector* %ps) #0 {
entry:
  %semimajorAxis.addr = alloca double, align 8
  %eccentricity.addr = alloca double, align 8
  %inclination.addr = alloca double, align 8
  %longitudeOfAscendingNode.addr = alloca double, align 8
  %argumentOfPeriapsis.addr = alloca double, align 8
  %trueAnomaly.addr = alloca double, align 8
  %ps.addr = alloca %struct.vector*, align 4
  %i = alloca %struct.vector, align 8
  %j = alloca %struct.vector, align 8
  %k = alloca %struct.vector, align 8
  %l = alloca double, align 8
  %c = alloca double, align 8
  %s = alloca double, align 8
  %r = alloca double, align 8
  %rprime = alloca double, align 8
  %qs = alloca [2 x %struct.vector], align 16
  %tmp = alloca %struct.vector, align 8
  %tmp14 = alloca %struct.vector, align 8
  %tmp17 = alloca %struct.vector, align 8
  %tmp25 = alloca %struct.vector, align 8
  %tmp29 = alloca %struct.vector, align 8
  store double %semimajorAxis, double* %semimajorAxis.addr, align 8
  store double %eccentricity, double* %eccentricity.addr, align 8
  store double %inclination, double* %inclination.addr, align 8
  store double %longitudeOfAscendingNode, double* %longitudeOfAscendingNode.addr, align 8
  store double %argumentOfPeriapsis, double* %argumentOfPeriapsis.addr, align 8
  store double %trueAnomaly, double* %trueAnomaly.addr, align 8
  store %struct.vector* %ps, %struct.vector** %ps.addr, align 4
  %0 = bitcast %struct.vector* %i to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %0, i8* align 8 bitcast (%struct.vector* @__const.orbitalStateVectors.i to i8*), i32 24, i1 false)
  %1 = bitcast %struct.vector* %j to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %1, i8* align 8 bitcast (%struct.vector* @__const.orbitalStateVectors.j to i8*), i32 24, i1 false)
  %2 = bitcast %struct.vector* %k to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %2, i8* align 8 bitcast (%struct.vector* @__const.orbitalStateVectors.k to i8*), i32 24, i1 false)
  store double 2.000000e+00, double* %l, align 8
  %3 = load double, double* %longitudeOfAscendingNode.addr, align 8
  %arraydecay = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 0
  call void @rotate(%struct.vector* byval(%struct.vector) align 8 %i, %struct.vector* byval(%struct.vector) align 8 %j, double %3, %struct.vector* %arraydecay)
  %arrayidx = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 0
  %4 = bitcast %struct.vector* %i to i8*
  %5 = bitcast %struct.vector* %arrayidx to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %4, i8* align 16 %5, i32 24, i1 false)
  %arrayidx1 = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 1
  %6 = bitcast %struct.vector* %j to i8*
  %7 = bitcast %struct.vector* %arrayidx1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 24, i1 false)
  %8 = load double, double* %inclination.addr, align 8
  %arraydecay2 = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 0
  call void @rotate(%struct.vector* byval(%struct.vector) align 8 %j, %struct.vector* byval(%struct.vector) align 8 %k, double %8, %struct.vector* %arraydecay2)
  %arrayidx3 = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 0
  %9 = bitcast %struct.vector* %j to i8*
  %10 = bitcast %struct.vector* %arrayidx3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %9, i8* align 16 %10, i32 24, i1 false)
  %11 = load double, double* %argumentOfPeriapsis.addr, align 8
  %arraydecay4 = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 0
  call void @rotate(%struct.vector* byval(%struct.vector) align 8 %i, %struct.vector* byval(%struct.vector) align 8 %j, double %11, %struct.vector* %arraydecay4)
  %arrayidx5 = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 0
  %12 = bitcast %struct.vector* %i to i8*
  %13 = bitcast %struct.vector* %arrayidx5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %12, i8* align 16 %13, i32 24, i1 false)
  %arrayidx6 = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %qs, i32 0, i32 1
  %14 = bitcast %struct.vector* %j to i8*
  %15 = bitcast %struct.vector* %arrayidx6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %14, i8* align 8 %15, i32 24, i1 false)
  %16 = load double, double* %eccentricity.addr, align 8
  %cmp = fcmp une double %16, 1.000000e+00
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %17 = load double, double* %eccentricity.addr, align 8
  %18 = load double, double* %eccentricity.addr, align 8
  %mul = fmul double %17, %18
  %sub = fsub double 1.000000e+00, %mul
  store double %sub, double* %l, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %19 = load double, double* %semimajorAxis.addr, align 8
  %20 = load double, double* %l, align 8
  %mul7 = fmul double %20, %19
  store double %mul7, double* %l, align 8
  %21 = load double, double* %trueAnomaly.addr, align 8
  %22 = call double @llvm.cos.f64(double %21)
  store double %22, double* %c, align 8
  %23 = load double, double* %trueAnomaly.addr, align 8
  %24 = call double @llvm.sin.f64(double %23)
  store double %24, double* %s, align 8
  %25 = load double, double* %l, align 8
  %26 = load double, double* %eccentricity.addr, align 8
  %27 = load double, double* %c, align 8
  %mul8 = fmul double %26, %27
  %add = fadd double 1.000000e+00, %mul8
  %div = fdiv double %25, %add
  store double %div, double* %r, align 8
  %28 = load double, double* %s, align 8
  %29 = load double, double* %r, align 8
  %mul9 = fmul double %28, %29
  %30 = load double, double* %r, align 8
  %mul10 = fmul double %mul9, %30
  %31 = load double, double* %l, align 8
  %div11 = fdiv double %mul10, %31
  store double %div11, double* %rprime, align 8
  %32 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx12 = getelementptr inbounds %struct.vector, %struct.vector* %32, i32 0
  %33 = load double, double* %c, align 8
  %34 = load double, double* %s, align 8
  call void @mulAdd(%struct.vector* sret align 8 %tmp, %struct.vector* byval(%struct.vector) align 8 %i, %struct.vector* byval(%struct.vector) align 8 %j, double %33, double %34)
  %35 = bitcast %struct.vector* %arrayidx12 to i8*
  %36 = bitcast %struct.vector* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %35, i8* align 8 %36, i32 24, i1 false)
  %37 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx13 = getelementptr inbounds %struct.vector, %struct.vector* %37, i32 0
  %38 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx15 = getelementptr inbounds %struct.vector, %struct.vector* %38, i32 0
  %39 = load double, double* %r, align 8
  call void @mul(%struct.vector* sret align 8 %tmp14, %struct.vector* byval(%struct.vector) align 8 %arrayidx15, double %39)
  %40 = bitcast %struct.vector* %arrayidx13 to i8*
  %41 = bitcast %struct.vector* %tmp14 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %40, i8* align 8 %41, i32 24, i1 false)
  %42 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx16 = getelementptr inbounds %struct.vector, %struct.vector* %42, i32 1
  %43 = load double, double* %rprime, align 8
  %44 = load double, double* %c, align 8
  %mul18 = fmul double %43, %44
  %45 = load double, double* %r, align 8
  %46 = load double, double* %s, align 8
  %mul19 = fmul double %45, %46
  %sub20 = fsub double %mul18, %mul19
  %47 = load double, double* %rprime, align 8
  %48 = load double, double* %s, align 8
  %mul21 = fmul double %47, %48
  %49 = load double, double* %r, align 8
  %50 = load double, double* %c, align 8
  %mul22 = fmul double %49, %50
  %add23 = fadd double %mul21, %mul22
  call void @mulAdd(%struct.vector* sret align 8 %tmp17, %struct.vector* byval(%struct.vector) align 8 %i, %struct.vector* byval(%struct.vector) align 8 %j, double %sub20, double %add23)
  %51 = bitcast %struct.vector* %arrayidx16 to i8*
  %52 = bitcast %struct.vector* %tmp17 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %51, i8* align 8 %52, i32 24, i1 false)
  %53 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx24 = getelementptr inbounds %struct.vector, %struct.vector* %53, i32 1
  %54 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx26 = getelementptr inbounds %struct.vector, %struct.vector* %54, i32 1
  %55 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx27 = getelementptr inbounds %struct.vector, %struct.vector* %55, i32 1
  %call = call double @vabs(%struct.vector* byval(%struct.vector) align 8 %arrayidx27)
  call void @div(%struct.vector* sret align 8 %tmp25, %struct.vector* byval(%struct.vector) align 8 %arrayidx26, double %call)
  %56 = bitcast %struct.vector* %arrayidx24 to i8*
  %57 = bitcast %struct.vector* %tmp25 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %56, i8* align 8 %57, i32 24, i1 false)
  %58 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx28 = getelementptr inbounds %struct.vector, %struct.vector* %58, i32 1
  %59 = load %struct.vector*, %struct.vector** %ps.addr, align 4
  %arrayidx30 = getelementptr inbounds %struct.vector, %struct.vector* %59, i32 1
  %60 = load double, double* %r, align 8
  %div31 = fdiv double 2.000000e+00, %60
  %61 = load double, double* %semimajorAxis.addr, align 8
  %div32 = fdiv double 1.000000e+00, %61
  %sub33 = fsub double %div31, %div32
  %62 = call double @llvm.sqrt.f64(double %sub33)
  call void @mul(%struct.vector* sret align 8 %tmp29, %struct.vector* byval(%struct.vector) align 8 %arrayidx30, double %62)
  %63 = bitcast %struct.vector* %arrayidx28 to i8*
  %64 = bitcast %struct.vector* %tmp29 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %63, i8* align 8 %64, i32 24, i1 false)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %longitude = alloca double, align 8
  %ps = alloca [2 x %struct.vector], align 16
  %buffer = alloca [80 x i8], align 16
  store i32 0, i32* %retval, align 4
  store double 0x3FE0C152500C1525, double* %longitude, align 8
  %0 = load double, double* %longitude, align 8
  %arraydecay = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %ps, i32 0, i32 0
  call void @orbitalStateVectors(double 1.000000e+00, double 1.000000e-01, double 0.000000e+00, double %0, double 0.000000e+00, double 0.000000e+00, %struct.vector* %arraydecay)
  %arraydecay1 = getelementptr inbounds [80 x i8], [80 x i8]* %buffer, i32 0, i32 0
  %arrayidx = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %ps, i32 0, i32 0
  call void @vecAsStr(i8* %arraydecay1, %struct.vector* byval(%struct.vector) align 8 %arrayidx)
  %arraydecay2 = getelementptr inbounds [80 x i8], [80 x i8]* %buffer, i32 0, i32 0
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i32 0, i32 0), i8* %arraydecay2)
  %arraydecay3 = getelementptr inbounds [80 x i8], [80 x i8]* %buffer, i32 0, i32 0
  %arrayidx4 = getelementptr inbounds [2 x %struct.vector], [2 x %struct.vector]* %ps, i32 0, i32 1
  call void @vecAsStr(i8* %arraydecay3, %struct.vector* byval(%struct.vector) align 8 %arrayidx4)
  %arraydecay5 = getelementptr inbounds [80 x i8], [80 x i8]* %buffer, i32 0, i32 0
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i32 0, i32 0), i8* %arraydecay5)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
