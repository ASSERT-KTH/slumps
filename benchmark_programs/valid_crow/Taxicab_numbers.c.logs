
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for add_cube()

; ModuleID = './Taxicab_numbers.c.bc'
source_filename = "./Taxicab_numbers.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.sum_t = type { i32, i32, i64 }

@n_cubes = hidden global i32 0, align 4
@cube = hidden global i64* null, align 4
@pq_len = hidden global i32 0, align 4
@pq_cap = hidden global i32 0, align 4
@pq = hidden global %struct.sum_t* null, align 4
@.str = private unnamed_addr constant [11 x i8] c"%4u:%10llu\00", align 1
@.str.1 = private unnamed_addr constant [17 x i8] c" = %4u^3 + %4u^3\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @add_cube() #0 {
entry:
  %x = alloca i32, align 4
  %tmp = alloca %struct.sum_t, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %0 = load i32, i32* @n_cubes, align 4
  %inc = add i32 %0, 1
  store i32 %inc, i32* @n_cubes, align 4
  store i32 %0, i32* %x, align 4
  %1 = load i64*, i64** @cube, align 4
  %2 = bitcast i64* %1 to i8*
  %3 = load i32, i32* @n_cubes, align 4
  %add = add i32 %3, 1
  %mul = mul i32 8, %add
  %call = call i8* @realloc(i8* %2, i32 %mul)
  %4 = bitcast i8* %call to i64*
  store i64* %4, i64** @cube, align 4
  %5 = load i32, i32* @n_cubes, align 4
  %conv = zext i32 %5 to i64
  %6 = load i32, i32* @n_cubes, align 4
  %conv1 = zext i32 %6 to i64
  %mul2 = mul i64 %conv, %conv1
  %7 = load i32, i32* @n_cubes, align 4
  %conv3 = zext i32 %7 to i64
  %mul4 = mul i64 %mul2, %conv3
  %8 = load i64*, i64** @cube, align 4
  %9 = load i32, i32* @n_cubes, align 4
  %arrayidx = getelementptr inbounds i64, i64* %8, i32 %9
  store i64 %mul4, i64* %arrayidx, align 8
  %10 = load i32, i32* %x, align 4
  %cmp = icmp ult i32 %10, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %11 = load i32, i32* @pq_len, align 4
  %inc6 = add i32 %11, 1
  store i32 %inc6, i32* @pq_len, align 4
  %12 = load i32, i32* @pq_cap, align 4
  %cmp7 = icmp uge i32 %inc6, %12
  br i1 %cmp7, label %if.then9, label %if.end15

if.then9:                                         ; preds = %if.end
  %13 = load i32, i32* @pq_cap, align 4
  %mul10 = mul i32 %13, 2
  store i32 %mul10, i32* @pq_cap, align 4
  %tobool = icmp ne i32 %mul10, 0
  br i1 %tobool, label %if.end12, label %if.then11

if.then11:                                        ; preds = %if.then9
  store i32 2, i32* @pq_cap, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then11, %if.then9
  %14 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %15 = bitcast %struct.sum_t* %14 to i8*
  %16 = load i32, i32* @pq_cap, align 4
  %mul13 = mul i32 16, %16
  %call14 = call i8* @realloc(i8* %15, i32 %mul13)
  %17 = bitcast i8* %call14 to %struct.sum_t*
  store %struct.sum_t* %17, %struct.sum_t** @pq, align 4
  br label %if.end15

if.end15:                                         ; preds = %if.end12, %if.end
  %x16 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %tmp, i32 0, i32 0
  %18 = load i32, i32* %x, align 4
  store i32 %18, i32* %x16, align 8
  %y = getelementptr inbounds %struct.sum_t, %struct.sum_t* %tmp, i32 0, i32 1
  store i32 1, i32* %y, align 4
  %value = getelementptr inbounds %struct.sum_t, %struct.sum_t* %tmp, i32 0, i32 2
  %19 = load i64*, i64** @cube, align 4
  %20 = load i32, i32* %x, align 4
  %arrayidx17 = getelementptr inbounds i64, i64* %19, i32 %20
  %21 = load i64, i64* %arrayidx17, align 8
  %add18 = add i64 %21, 1
  store i64 %add18, i64* %value, align 8
  %22 = load i32, i32* @pq_len, align 4
  store i32 %22, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end15
  %23 = load i32, i32* %i, align 4
  %cmp19 = icmp uge i32 %23, 1
  br i1 %cmp19, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %24 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %25 = load i32, i32* %i, align 4
  %shr = lshr i32 %25, 1
  store i32 %shr, i32* %j, align 4
  %arrayidx21 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %24, i32 %shr
  %value22 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %arrayidx21, i32 0, i32 2
  %26 = load i64, i64* %value22, align 8
  %value23 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %tmp, i32 0, i32 2
  %27 = load i64, i64* %value23, align 8
  %cmp24 = icmp ugt i64 %26, %27
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %28 = phi i1 [ false, %for.cond ], [ %cmp24, %land.rhs ]
  br i1 %28, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %29 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %29, i32 %30
  %31 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %32 = load i32, i32* %j, align 4
  %arrayidx27 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %31, i32 %32
  %33 = bitcast %struct.sum_t* %arrayidx26 to i8*
  %34 = bitcast %struct.sum_t* %arrayidx27 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %33, i8* align 8 %34, i32 16, i1 false)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %35 = load i32, i32* %j, align 4
  store i32 %35, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  %36 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %37 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %36, i32 %37
  %38 = bitcast %struct.sum_t* %arrayidx28 to i8*
  %39 = bitcast %struct.sum_t* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %38, i8* align 8 %39, i32 16, i1 false)
  br label %return

return:                                           ; preds = %for.end, %if.then
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define hidden void @next_sum() #0 {
entry:
  %tmp = alloca %struct.sum_t, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  br label %redo

redo:                                             ; preds = %if.then7, %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %redo
  %0 = load i32, i32* @pq_len, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %while.cond
  %1 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %arrayidx = getelementptr inbounds %struct.sum_t, %struct.sum_t* %1, i32 1
  %value = getelementptr inbounds %struct.sum_t, %struct.sum_t* %arrayidx, i32 0, i32 2
  %2 = load i64, i64* %value, align 8
  %3 = load i64*, i64** @cube, align 4
  %4 = load i32, i32* @n_cubes, align 4
  %arrayidx1 = getelementptr inbounds i64, i64* %3, i32 %4
  %5 = load i64, i64* %arrayidx1, align 8
  %cmp = icmp uge i64 %2, %5
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %while.cond
  %6 = phi i1 [ true, %while.cond ], [ %cmp, %lor.rhs ]
  br i1 %6, label %while.body, label %while.end

while.body:                                       ; preds = %lor.end
  call void @add_cube()
  br label %while.cond

while.end:                                        ; preds = %lor.end
  %7 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %arrayidx2 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %7, i32 0
  %8 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %arrayidx3 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %8, i32 1
  %9 = bitcast %struct.sum_t* %arrayidx2 to i8*
  %10 = bitcast %struct.sum_t* %arrayidx3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %9, i8* align 8 %10, i32 16, i1 false)
  %11 = bitcast %struct.sum_t* %tmp to i8*
  %12 = bitcast %struct.sum_t* %arrayidx2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %11, i8* align 8 %12, i32 16, i1 false)
  %y = getelementptr inbounds %struct.sum_t, %struct.sum_t* %tmp, i32 0, i32 1
  %13 = load i32, i32* %y, align 4
  %inc = add i32 %13, 1
  store i32 %inc, i32* %y, align 4
  %x = getelementptr inbounds %struct.sum_t, %struct.sum_t* %tmp, i32 0, i32 0
  %14 = load i32, i32* %x, align 8
  %cmp4 = icmp uge i32 %inc, %14
  br i1 %cmp4, label %if.then, label %if.else

if.then:                                          ; preds = %while.end
  %15 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %16 = load i32, i32* @pq_len, align 4
  %dec = add i32 %16, -1
  store i32 %dec, i32* @pq_len, align 4
  %arrayidx5 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %15, i32 %16
  %17 = bitcast %struct.sum_t* %tmp to i8*
  %18 = bitcast %struct.sum_t* %arrayidx5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %17, i8* align 8 %18, i32 16, i1 false)
  %19 = load i32, i32* @pq_len, align 4
  %tobool6 = icmp ne i32 %19, 0
  br i1 %tobool6, label %if.end, label %if.then7

if.then7:                                         ; preds = %if.then
  br label %redo

if.end:                                           ; preds = %if.then
  br label %if.end14

if.else:                                          ; preds = %while.end
  %20 = load i64*, i64** @cube, align 4
  %y8 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %tmp, i32 0, i32 1
  %21 = load i32, i32* %y8, align 4
  %arrayidx9 = getelementptr inbounds i64, i64* %20, i32 %21
  %22 = load i64, i64* %arrayidx9, align 8
  %23 = load i64*, i64** @cube, align 4
  %y10 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %tmp, i32 0, i32 1
  %24 = load i32, i32* %y10, align 4
  %sub = sub i32 %24, 1
  %arrayidx11 = getelementptr inbounds i64, i64* %23, i32 %sub
  %25 = load i64, i64* %arrayidx11, align 8
  %sub12 = sub i64 %22, %25
  %value13 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %tmp, i32 0, i32 2
  %26 = load i64, i64* %value13, align 8
  %add = add i64 %26, %sub12
  store i64 %add, i64* %value13, align 8
  br label %if.end14

if.end14:                                         ; preds = %if.else, %if.end
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end14
  %27 = load i32, i32* %i, align 4
  %shl = shl i32 %27, 1
  store i32 %shl, i32* %j, align 4
  %28 = load i32, i32* @pq_len, align 4
  %cmp15 = icmp ule i32 %shl, %28
  br i1 %cmp15, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %29 = load i32, i32* %j, align 4
  %30 = load i32, i32* @pq_len, align 4
  %cmp16 = icmp ult i32 %29, %30
  br i1 %cmp16, label %land.lhs.true, label %if.end25

land.lhs.true:                                    ; preds = %for.body
  %31 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %32 = load i32, i32* %j, align 4
  %add17 = add i32 %32, 1
  %arrayidx18 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %31, i32 %add17
  %value19 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %arrayidx18, i32 0, i32 2
  %33 = load i64, i64* %value19, align 8
  %34 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %35 = load i32, i32* %j, align 4
  %arrayidx20 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %34, i32 %35
  %value21 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %arrayidx20, i32 0, i32 2
  %36 = load i64, i64* %value21, align 8
  %cmp22 = icmp ult i64 %33, %36
  br i1 %cmp22, label %if.then23, label %if.end25

if.then23:                                        ; preds = %land.lhs.true
  %37 = load i32, i32* %j, align 4
  %inc24 = add i32 %37, 1
  store i32 %inc24, i32* %j, align 4
  br label %if.end25

if.end25:                                         ; preds = %if.then23, %land.lhs.true, %for.body
  %38 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %39 = load i32, i32* %j, align 4
  %arrayidx26 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %38, i32 %39
  %value27 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %arrayidx26, i32 0, i32 2
  %40 = load i64, i64* %value27, align 8
  %value28 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %tmp, i32 0, i32 2
  %41 = load i64, i64* %value28, align 8
  %cmp29 = icmp uge i64 %40, %41
  br i1 %cmp29, label %if.then30, label %if.end31

if.then30:                                        ; preds = %if.end25
  br label %for.end

if.end31:                                         ; preds = %if.end25
  br label %for.inc

for.inc:                                          ; preds = %if.end31
  %42 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %43 = load i32, i32* %i, align 4
  %arrayidx32 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %42, i32 %43
  %44 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %45 = load i32, i32* %j, align 4
  %arrayidx33 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %44, i32 %45
  %46 = bitcast %struct.sum_t* %arrayidx32 to i8*
  %47 = bitcast %struct.sum_t* %arrayidx33 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %46, i8* align 8 %47, i32 16, i1 false)
  %48 = load i32, i32* %j, align 4
  store i32 %48, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then30, %for.cond
  %49 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %50 = load i32, i32* %i, align 4
  %arrayidx34 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %49, i32 %50
  %51 = bitcast %struct.sum_t* %arrayidx34 to i8*
  %52 = bitcast %struct.sum_t* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %51, i8* align 8 %52, i32 16, i1 false)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @next_taxi(%struct.sum_t* %hist) #0 {
entry:
  %hist.addr = alloca %struct.sum_t*, align 4
  %len = alloca i32, align 4
  store %struct.sum_t* %hist, %struct.sum_t** %hist.addr, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  call void @next_sum()
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %0 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %arrayidx = getelementptr inbounds %struct.sum_t, %struct.sum_t* %0, i32 0
  %value = getelementptr inbounds %struct.sum_t, %struct.sum_t* %arrayidx, i32 0, i32 2
  %1 = load i64, i64* %value, align 8
  %2 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %arrayidx1 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %2, i32 1
  %value2 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %arrayidx1, i32 0, i32 2
  %3 = load i64, i64* %value2, align 8
  %cmp = icmp ne i64 %1, %3
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  store i32 1, i32* %len, align 4
  %4 = load %struct.sum_t*, %struct.sum_t** %hist.addr, align 4
  %arrayidx3 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %4, i32 0
  %5 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %arrayidx4 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %5, i32 0
  %6 = bitcast %struct.sum_t* %arrayidx3 to i8*
  %7 = bitcast %struct.sum_t* %arrayidx4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 16, i1 false)
  br label %do.body5

do.body5:                                         ; preds = %do.cond8, %do.end
  %8 = load %struct.sum_t*, %struct.sum_t** %hist.addr, align 4
  %9 = load i32, i32* %len, align 4
  %inc = add i32 %9, 1
  store i32 %inc, i32* %len, align 4
  %arrayidx6 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %8, i32 %9
  %10 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %arrayidx7 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %10, i32 1
  %11 = bitcast %struct.sum_t* %arrayidx6 to i8*
  %12 = bitcast %struct.sum_t* %arrayidx7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %11, i8* align 8 %12, i32 16, i1 false)
  call void @next_sum()
  br label %do.cond8

do.cond8:                                         ; preds = %do.body5
  %13 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %arrayidx9 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %13, i32 0
  %value10 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %arrayidx9, i32 0, i32 2
  %14 = load i64, i64* %value10, align 8
  %15 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %arrayidx11 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %15, i32 1
  %value12 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %arrayidx11, i32 0, i32 2
  %16 = load i64, i64* %value12, align 8
  %cmp13 = icmp eq i64 %14, %16
  br i1 %cmp13, label %do.body5, label %do.end14

do.end14:                                         ; preds = %do.cond8
  %17 = load i32, i32* %len, align 4
  ret i32 %17
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %l = alloca i32, align 4
  %x = alloca [10 x %struct.sum_t], align 16
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ule i32 %0, 2006
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay = getelementptr inbounds [10 x %struct.sum_t], [10 x %struct.sum_t]* %x, i32 0, i32 0
  %call = call i32 @next_taxi(%struct.sum_t* %arraydecay)
  store i32 %call, i32* %l, align 4
  %1 = load i32, i32* %i, align 4
  %cmp1 = icmp ult i32 25, %1
  br i1 %cmp1, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %2 = load i32, i32* %i, align 4
  %cmp2 = icmp ult i32 %2, 2000
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  br label %for.inc

if.end:                                           ; preds = %land.lhs.true, %for.body
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [10 x %struct.sum_t], [10 x %struct.sum_t]* %x, i32 0, i32 0
  %value = getelementptr inbounds %struct.sum_t, %struct.sum_t* %arrayidx, i32 0, i32 2
  %4 = load i64, i64* %value, align 8
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0), i32 %3, i64 %4)
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %5 = load i32, i32* %l, align 4
  %dec = add i32 %5, -1
  store i32 %dec, i32* %l, align 4
  %tobool = icmp ne i32 %5, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load i32, i32* %l, align 4
  %arrayidx4 = getelementptr inbounds [10 x %struct.sum_t], [10 x %struct.sum_t]* %x, i32 0, i32 %6
  %x5 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %arrayidx4, i32 0, i32 0
  %7 = load i32, i32* %x5, align 16
  %8 = load i32, i32* %l, align 4
  %arrayidx6 = getelementptr inbounds [10 x %struct.sum_t], [10 x %struct.sum_t]* %x, i32 0, i32 %8
  %y = getelementptr inbounds %struct.sum_t, %struct.sum_t* %arrayidx6, i32 0, i32 1
  %9 = load i32, i32* %y, align 4
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i32 0, i32 0), i32 %7, i32 %9)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %call8 = call i32 @putchar(i32 10)
  br label %for.inc

for.inc:                                          ; preds = %while.end, %if.then
  %10 = load i32, i32* %i, align 4
  %inc = add i32 %10, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

declare i32 @putchar(i32 %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* @n_cubes, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add i32 %0, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* @n_cubes, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add i32 %3, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %mul = mul i32 8, %add
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
%2:i32 = mul 8:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %5 = load i32, i32* @n_cubes, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = zext i32 %5 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* @n_cubes, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %conv1 = zext i32 %6 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %mul2 = mul i64 %conv, %conv1
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i64 = zext %2
%4:i64 = mul %1, %3
infer %4

; *****
; For LLVM instruction:
;  %7 = load i32, i32* @n_cubes, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %conv3 = zext i32 %7 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %mul4 = mul i64 %mul2, %conv3
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i64 = zext %2
%4:i64 = mul %1, %3
%5:i32 = var
%6:i64 = zext %5
%7:i64 = mul %4, %6
infer %7

; *****
; For LLVM instruction:
;  %9 = load i32, i32* @n_cubes, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %x, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ult i32 %10, 2
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ult %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* @pq_len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc6 = add i32 %11, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* @pq_cap, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp7 = icmp uge i32 %inc6, %12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add 1:i32, %1 (hasExternalUses)
%3:i1 = ule %0, %2
infer %3

; *****
; For LLVM instruction:
;  %13 = load i32, i32* @pq_cap, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul10 = mul i32 %13, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %mul10, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 2:i32, %0 (hasExternalUses)
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %16 = load i32, i32* @pq_cap, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul13 = mul i32 16, %16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 16:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %x, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %x, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i64, i64* %arrayidx17, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %add18 = add i64 %21, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = add 1:i64, %0
infer %1

; *****
; For LLVM instruction:
;  %22 = load i32, i32* @pq_len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp19 = icmp uge i32 %23, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ule 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=11111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %shr = lshr i32 %25, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = lshr %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %26 = load i64, i64* %value22, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %27 = load i64, i64* %value23, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp24 = icmp ugt i64 %26, %27
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %28 = phi i1 [ false, %for.cond ], [ %cmp24, %land.rhs ]
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = add 1:i32, %0
%2:i32 = mul 8:i32, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 8
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741832
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = add 1:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0
infer %1


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4294967295
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i64 = zext %2
%4:i64 = mul %1, %3
infer %4


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
ConstantSynthesis: solver returns error on first query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = zext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i64 = zext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0
%2:i32 = var
%3:i64 = zext %2
%4:i64 = mul %1, %3
%5:i32 = var
%6:i64 = zext %5
%7:i64 = mul %4, %6
infer %7


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
ConstantSynthesis: solver returns error on first query

--------------------------------
guess 1

%0:i32 = var
%1:i64 = zext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i64 = zext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i64 = zext %0

Cost = 1
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ult %0, 2:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add 1:i32, %1 (hasExternalUses)
%3:i1 = ule %0, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mul 2:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mul 2:i32, %0 (hasExternalUses)
%2:i1 = ne 0:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mul 16:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i64 = var
infer %0


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = add 1:i64, %0
infer %1


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ule 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0 (demandedBits=11111111111111111111111111111110)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = lshr %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147483647
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i1 = ult %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for add_cube()

; entering Souper's runOnFunction() for next_sum()

; ModuleID = './Taxicab_numbers.c.bc'
source_filename = "./Taxicab_numbers.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.sum_t = type { i32, i32, i64 }

@n_cubes = hidden global i32 0, align 4
@cube = hidden global i64* null, align 4
@pq_len = hidden global i32 0, align 4
@pq_cap = hidden global i32 0, align 4
@pq = hidden global %struct.sum_t* null, align 4
@.str = private unnamed_addr constant [11 x i8] c"%4u:%10llu\00", align 1
@.str.1 = private unnamed_addr constant [17 x i8] c" = %4u^3 + %4u^3\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @add_cube() #0 {
entry:
  %x = alloca i32, align 4
  %tmp = alloca %struct.sum_t, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %0 = load i32, i32* @n_cubes, align 4
  %inc = add i32 %0, 1
  store i32 %inc, i32* @n_cubes, align 4
  store i32 %0, i32* %x, align 4
  %1 = load i64*, i64** @cube, align 4
  %2 = bitcast i64* %1 to i8*
  %3 = load i32, i32* @n_cubes, align 4
  %add = add i32 %3, 1
  %mul = mul i32 8, %add
  %call = call i8* @realloc(i8* %2, i32 %mul)
  %4 = bitcast i8* %call to i64*
  store i64* %4, i64** @cube, align 4
  %5 = load i32, i32* @n_cubes, align 4
  %conv = zext i32 %5 to i64
  %6 = load i32, i32* @n_cubes, align 4
  %conv1 = zext i32 %6 to i64
  %mul2 = mul i64 %conv, %conv1
  %7 = load i32, i32* @n_cubes, align 4
  %conv3 = zext i32 %7 to i64
  %mul4 = mul i64 %mul2, %conv3
  %8 = load i64*, i64** @cube, align 4
  %9 = load i32, i32* @n_cubes, align 4
  %arrayidx = getelementptr inbounds i64, i64* %8, i32 %9
  store i64 %mul4, i64* %arrayidx, align 8
  %10 = load i32, i32* %x, align 4
  %cmp = icmp ult i32 %10, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %11 = load i32, i32* @pq_len, align 4
  %inc6 = add i32 %11, 1
  store i32 %inc6, i32* @pq_len, align 4
  %12 = load i32, i32* @pq_cap, align 4
  %cmp7 = icmp uge i32 %inc6, %12
  br i1 %cmp7, label %if.then9, label %if.end15

if.then9:                                         ; preds = %if.end
  %13 = load i32, i32* @pq_cap, align 4
  %mul10 = mul i32 %13, 2
  store i32 %mul10, i32* @pq_cap, align 4
  %tobool = icmp ne i32 %mul10, 0
  br i1 %tobool, label %if.end12, label %if.then11

if.then11:                                        ; preds = %if.then9
  store i32 2, i32* @pq_cap, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then11, %if.then9
  %14 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %15 = bitcast %struct.sum_t* %14 to i8*
  %16 = load i32, i32* @pq_cap, align 4
  %mul13 = mul i32 16, %16
  %call14 = call i8* @realloc(i8* %15, i32 %mul13)
  %17 = bitcast i8* %call14 to %struct.sum_t*
  store %struct.sum_t* %17, %struct.sum_t** @pq, align 4
  br label %if.end15

if.end15:                                         ; preds = %if.end12, %if.end
  %x16 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %tmp, i32 0, i32 0
  %18 = load i32, i32* %x, align 4
  store i32 %18, i32* %x16, align 8
  %y = getelementptr inbounds %struct.sum_t, %struct.sum_t* %tmp, i32 0, i32 1
  store i32 1, i32* %y, align 4
  %value = getelementptr inbounds %struct.sum_t, %struct.sum_t* %tmp, i32 0, i32 2
  %19 = load i64*, i64** @cube, align 4
  %20 = load i32, i32* %x, align 4
  %arrayidx17 = getelementptr inbounds i64, i64* %19, i32 %20
  %21 = load i64, i64* %arrayidx17, align 8
  %add18 = add i64 %21, 1
  store i64 %add18, i64* %value, align 8
  %22 = load i32, i32* @pq_len, align 4
  store i32 %22, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end15
  %23 = load i32, i32* %i, align 4
  %cmp19 = icmp uge i32 %23, 1
  br i1 %cmp19, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %24 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %25 = load i32, i32* %i, align 4
  %shr = lshr i32 %25, 1
  store i32 %shr, i32* %j, align 4
  %arrayidx21 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %24, i32 %shr
  %value22 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %arrayidx21, i32 0, i32 2
  %26 = load i64, i64* %value22, align 8
  %value23 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %tmp, i32 0, i32 2
  %27 = load i64, i64* %value23, align 8
  %cmp24 = icmp ugt i64 %26, %27
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %28 = phi i1 [ false, %for.cond ], [ %cmp24, %land.rhs ]
  br i1 %28, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %29 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %29, i32 %30
  %31 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %32 = load i32, i32* %j, align 4
  %arrayidx27 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %31, i32 %32
  %33 = bitcast %struct.sum_t* %arrayidx26 to i8*
  %34 = bitcast %struct.sum_t* %arrayidx27 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %33, i8* align 8 %34, i32 16, i1 false)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %35 = load i32, i32* %j, align 4
  store i32 %35, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  %36 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %37 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %36, i32 %37
  %38 = bitcast %struct.sum_t* %arrayidx28 to i8*
  %39 = bitcast %struct.sum_t* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %38, i8* align 8 %39, i32 16, i1 false)
  br label %return

return:                                           ; preds = %for.end, %if.then
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define hidden void @next_sum() #0 {
entry:
  %tmp = alloca %struct.sum_t, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  br label %redo

redo:                                             ; preds = %if.then7, %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %redo
  %0 = load i32, i32* @pq_len, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %while.cond
  %1 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %arrayidx = getelementptr inbounds %struct.sum_t, %struct.sum_t* %1, i32 1
  %value = getelementptr inbounds %struct.sum_t, %struct.sum_t* %arrayidx, i32 0, i32 2
  %2 = load i64, i64* %value, align 8
  %3 = load i64*, i64** @cube, align 4
  %4 = load i32, i32* @n_cubes, align 4
  %arrayidx1 = getelementptr inbounds i64, i64* %3, i32 %4
  %5 = load i64, i64* %arrayidx1, align 8
  %cmp = icmp uge i64 %2, %5
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %while.cond
  %6 = phi i1 [ true, %while.cond ], [ %cmp, %lor.rhs ]
  br i1 %6, label %while.body, label %while.end

while.body:                                       ; preds = %lor.end
  call void @add_cube()
  br label %while.cond

while.end:                                        ; preds = %lor.end
  %7 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %arrayidx2 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %7, i32 0
  %8 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %arrayidx3 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %8, i32 1
  %9 = bitcast %struct.sum_t* %arrayidx2 to i8*
  %10 = bitcast %struct.sum_t* %arrayidx3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %9, i8* align 8 %10, i32 16, i1 false)
  %11 = bitcast %struct.sum_t* %tmp to i8*
  %12 = bitcast %struct.sum_t* %arrayidx2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %11, i8* align 8 %12, i32 16, i1 false)
  %y = getelementptr inbounds %struct.sum_t, %struct.sum_t* %tmp, i32 0, i32 1
  %13 = load i32, i32* %y, align 4
  %inc = add i32 %13, 1
  store i32 %inc, i32* %y, align 4
  %x = getelementptr inbounds %struct.sum_t, %struct.sum_t* %tmp, i32 0, i32 0
  %14 = load i32, i32* %x, align 8
  %cmp4 = icmp uge i32 %inc, %14
  br i1 %cmp4, label %if.then, label %if.else

if.then:                                          ; preds = %while.end
  %15 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %16 = load i32, i32* @pq_len, align 4
  %dec = add i32 %16, -1
  store i32 %dec, i32* @pq_len, align 4
  %arrayidx5 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %15, i32 %16
  %17 = bitcast %struct.sum_t* %tmp to i8*
  %18 = bitcast %struct.sum_t* %arrayidx5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %17, i8* align 8 %18, i32 16, i1 false)
  %19 = load i32, i32* @pq_len, align 4
  %tobool6 = icmp ne i32 %19, 0
  br i1 %tobool6, label %if.end, label %if.then7

if.then7:                                         ; preds = %if.then
  br label %redo

if.end:                                           ; preds = %if.then
  br label %if.end14

if.else:                                          ; preds = %while.end
  %20 = load i64*, i64** @cube, align 4
  %y8 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %tmp, i32 0, i32 1
  %21 = load i32, i32* %y8, align 4
  %arrayidx9 = getelementptr inbounds i64, i64* %20, i32 %21
  %22 = load i64, i64* %arrayidx9, align 8
  %23 = load i64*, i64** @cube, align 4
  %y10 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %tmp, i32 0, i32 1
  %24 = load i32, i32* %y10, align 4
  %sub = sub i32 %24, 1
  %arrayidx11 = getelementptr inbounds i64, i64* %23, i32 %sub
  %25 = load i64, i64* %arrayidx11, align 8
  %sub12 = sub i64 %22, %25
  %value13 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %tmp, i32 0, i32 2
  %26 = load i64, i64* %value13, align 8
  %add = add i64 %26, %sub12
  store i64 %add, i64* %value13, align 8
  br label %if.end14

if.end14:                                         ; preds = %if.else, %if.end
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end14
  %27 = load i32, i32* %i, align 4
  %shl = shl i32 %27, 1
  store i32 %shl, i32* %j, align 4
  %28 = load i32, i32* @pq_len, align 4
  %cmp15 = icmp ule i32 %shl, %28
  br i1 %cmp15, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %29 = load i32, i32* %j, align 4
  %30 = load i32, i32* @pq_len, align 4
  %cmp16 = icmp ult i32 %29, %30
  br i1 %cmp16, label %land.lhs.true, label %if.end25

land.lhs.true:                                    ; preds = %for.body
  %31 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %32 = load i32, i32* %j, align 4
  %add17 = add i32 %32, 1
  %arrayidx18 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %31, i32 %add17
  %value19 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %arrayidx18, i32 0, i32 2
  %33 = load i64, i64* %value19, align 8
  %34 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %35 = load i32, i32* %j, align 4
  %arrayidx20 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %34, i32 %35
  %value21 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %arrayidx20, i32 0, i32 2
  %36 = load i64, i64* %value21, align 8
  %cmp22 = icmp ult i64 %33, %36
  br i1 %cmp22, label %if.then23, label %if.end25

if.then23:                                        ; preds = %land.lhs.true
  %37 = load i32, i32* %j, align 4
  %inc24 = add i32 %37, 1
  store i32 %inc24, i32* %j, align 4
  br label %if.end25

if.end25:                                         ; preds = %if.then23, %land.lhs.true, %for.body
  %38 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %39 = load i32, i32* %j, align 4
  %arrayidx26 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %38, i32 %39
  %value27 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %arrayidx26, i32 0, i32 2
  %40 = load i64, i64* %value27, align 8
  %value28 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %tmp, i32 0, i32 2
  %41 = load i64, i64* %value28, align 8
  %cmp29 = icmp uge i64 %40, %41
  br i1 %cmp29, label %if.then30, label %if.end31

if.then30:                                        ; preds = %if.end25
  br label %for.end

if.end31:                                         ; preds = %if.end25
  br label %for.inc

for.inc:                                          ; preds = %if.end31
  %42 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %43 = load i32, i32* %i, align 4
  %arrayidx32 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %42, i32 %43
  %44 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %45 = load i32, i32* %j, align 4
  %arrayidx33 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %44, i32 %45
  %46 = bitcast %struct.sum_t* %arrayidx32 to i8*
  %47 = bitcast %struct.sum_t* %arrayidx33 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %46, i8* align 8 %47, i32 16, i1 false)
  %48 = load i32, i32* %j, align 4
  store i32 %48, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then30, %for.cond
  %49 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %50 = load i32, i32* %i, align 4
  %arrayidx34 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %49, i32 %50
  %51 = bitcast %struct.sum_t* %arrayidx34 to i8*
  %52 = bitcast %struct.sum_t* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %51, i8* align 8 %52, i32 16, i1 false)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @next_taxi(%struct.sum_t* %hist) #0 {
entry:
  %hist.addr = alloca %struct.sum_t*, align 4
  %len = alloca i32, align 4
  store %struct.sum_t* %hist, %struct.sum_t** %hist.addr, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  call void @next_sum()
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %0 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %arrayidx = getelementptr inbounds %struct.sum_t, %struct.sum_t* %0, i32 0
  %value = getelementptr inbounds %struct.sum_t, %struct.sum_t* %arrayidx, i32 0, i32 2
  %1 = load i64, i64* %value, align 8
  %2 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %arrayidx1 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %2, i32 1
  %value2 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %arrayidx1, i32 0, i32 2
  %3 = load i64, i64* %value2, align 8
  %cmp = icmp ne i64 %1, %3
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  store i32 1, i32* %len, align 4
  %4 = load %struct.sum_t*, %struct.sum_t** %hist.addr, align 4
  %arrayidx3 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %4, i32 0
  %5 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %arrayidx4 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %5, i32 0
  %6 = bitcast %struct.sum_t* %arrayidx3 to i8*
  %7 = bitcast %struct.sum_t* %arrayidx4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 16, i1 false)
  br label %do.body5

do.body5:                                         ; preds = %do.cond8, %do.end
  %8 = load %struct.sum_t*, %struct.sum_t** %hist.addr, align 4
  %9 = load i32, i32* %len, align 4
  %inc = add i32 %9, 1
  store i32 %inc, i32* %len, align 4
  %arrayidx6 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %8, i32 %9
  %10 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %arrayidx7 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %10, i32 1
  %11 = bitcast %struct.sum_t* %arrayidx6 to i8*
  %12 = bitcast %struct.sum_t* %arrayidx7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %11, i8* align 8 %12, i32 16, i1 false)
  call void @next_sum()
  br label %do.cond8

do.cond8:                                         ; preds = %do.body5
  %13 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %arrayidx9 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %13, i32 0
  %value10 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %arrayidx9, i32 0, i32 2
  %14 = load i64, i64* %value10, align 8
  %15 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %arrayidx11 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %15, i32 1
  %value12 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %arrayidx11, i32 0, i32 2
  %16 = load i64, i64* %value12, align 8
  %cmp13 = icmp eq i64 %14, %16
  br i1 %cmp13, label %do.body5, label %do.end14

do.end14:                                         ; preds = %do.cond8
  %17 = load i32, i32* %len, align 4
  ret i32 %17
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %l = alloca i32, align 4
  %x = alloca [10 x %struct.sum_t], align 16
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ule i32 %0, 2006
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay = getelementptr inbounds [10 x %struct.sum_t], [10 x %struct.sum_t]* %x, i32 0, i32 0
  %call = call i32 @next_taxi(%struct.sum_t* %arraydecay)
  store i32 %call, i32* %l, align 4
  %1 = load i32, i32* %i, align 4
  %cmp1 = icmp ult i32 25, %1
  br i1 %cmp1, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %2 = load i32, i32* %i, align 4
  %cmp2 = icmp ult i32 %2, 2000
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  br label %for.inc

if.end:                                           ; preds = %land.lhs.true, %for.body
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [10 x %struct.sum_t], [10 x %struct.sum_t]* %x, i32 0, i32 0
  %value = getelementptr inbounds %struct.sum_t, %struct.sum_t* %arrayidx, i32 0, i32 2
  %4 = load i64, i64* %value, align 8
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0), i32 %3, i64 %4)
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %5 = load i32, i32* %l, align 4
  %dec = add i32 %5, -1
  store i32 %dec, i32* %l, align 4
  %tobool = icmp ne i32 %5, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load i32, i32* %l, align 4
  %arrayidx4 = getelementptr inbounds [10 x %struct.sum_t], [10 x %struct.sum_t]* %x, i32 0, i32 %6
  %x5 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %arrayidx4, i32 0, i32 0
  %7 = load i32, i32* %x5, align 16
  %8 = load i32, i32* %l, align 4
  %arrayidx6 = getelementptr inbounds [10 x %struct.sum_t], [10 x %struct.sum_t]* %x, i32 0, i32 %8
  %y = getelementptr inbounds %struct.sum_t, %struct.sum_t* %arrayidx6, i32 0, i32 1
  %9 = load i32, i32* %y, align 4
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i32 0, i32 0), i32 %7, i32 %9)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %call8 = call i32 @putchar(i32 10)
  br label %for.inc

for.inc:                                          ; preds = %while.end, %if.then
  %10 = load i32, i32* %i, align 4
  %inc = add i32 %10, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

declare i32 @putchar(i32 %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* @pq_len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %0, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i64, i64* %value, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* @n_cubes, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i64, i64* %arrayidx1, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp uge i64 %2, %5
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i1 = ule %0, %1
infer %2

; *****
; For LLVM instruction:
;  %6 = phi i1 [ true, %while.cond ], [ %cmp, %lor.rhs ]
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %y, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add i32 %13, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %x, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp4 = icmp uge i32 %inc, %14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add 1:i32, %1 (hasExternalUses)
%3:i1 = ule %0, %2
infer %3

; *****
; For LLVM instruction:
;  %16 = load i32, i32* @pq_len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec = add i32 %16, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %19 = load i32, i32* @pq_len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool6 = icmp ne i32 %19, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %y8, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i64, i64* %arrayidx9, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %y10, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub i32 %24, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %25 = load i64, i64* %arrayidx11, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %sub12 = sub i64 %22, %25
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = sub %0, %1
infer %2

; *****
; For LLVM instruction:
;  %26 = load i64, i64* %value13, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add i64 %26, %sub12
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = sub %1, %2
%4:i64 = add %0, %3
infer %4

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=01111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %shl = shl i32 %27, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %28 = load i32, i32* @pq_len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp15 = icmp ule i32 %shl, %28
; Looking for a replacement for:
%0:i32 = var
%1:i32 = shl %0, 1:i32 (hasExternalUses)
%2:i32 = var
%3:i1 = ule %1, %2
infer %3

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i32, i32* @pq_len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp16 = icmp ult i32 %29, %30
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add17 = add i32 %32, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %33 = load i64, i64* %value19, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %36 = load i64, i64* %value21, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp22 = icmp ult i64 %33, %36
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc24 = add i32 %37, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %40 = load i64, i64* %value27, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %41 = load i64, i64* %value28, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp29 = icmp uge i64 %40, %41
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i1 = ule %0, %1
infer %2

; *****
; For LLVM instruction:
;  %43 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %45 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %48 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %50 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i1 = ule %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = add 4294967295:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sub %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = sub %0, %1
infer %2


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = sub %1, %2
%4:i64 = add %0, %3
infer %4


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i64 = var
%1:i64 = var
%2:i64 = sub %0, %1

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0 (demandedBits=01111111111111111111111111111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147483647
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = shl %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = shl %0, 1:i32 (hasExternalUses)
%2:i32 = var
%3:i1 = ule %1, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for next_sum()

; entering Souper's runOnFunction() for next_taxi()

; ModuleID = './Taxicab_numbers.c.bc'
source_filename = "./Taxicab_numbers.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.sum_t = type { i32, i32, i64 }

@n_cubes = hidden global i32 0, align 4
@cube = hidden global i64* null, align 4
@pq_len = hidden global i32 0, align 4
@pq_cap = hidden global i32 0, align 4
@pq = hidden global %struct.sum_t* null, align 4
@.str = private unnamed_addr constant [11 x i8] c"%4u:%10llu\00", align 1
@.str.1 = private unnamed_addr constant [17 x i8] c" = %4u^3 + %4u^3\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @add_cube() #0 {
entry:
  %x = alloca i32, align 4
  %tmp = alloca %struct.sum_t, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %0 = load i32, i32* @n_cubes, align 4
  %inc = add i32 %0, 1
  store i32 %inc, i32* @n_cubes, align 4
  store i32 %0, i32* %x, align 4
  %1 = load i64*, i64** @cube, align 4
  %2 = bitcast i64* %1 to i8*
  %3 = load i32, i32* @n_cubes, align 4
  %add = add i32 %3, 1
  %mul = mul i32 8, %add
  %call = call i8* @realloc(i8* %2, i32 %mul)
  %4 = bitcast i8* %call to i64*
  store i64* %4, i64** @cube, align 4
  %5 = load i32, i32* @n_cubes, align 4
  %conv = zext i32 %5 to i64
  %6 = load i32, i32* @n_cubes, align 4
  %conv1 = zext i32 %6 to i64
  %mul2 = mul i64 %conv, %conv1
  %7 = load i32, i32* @n_cubes, align 4
  %conv3 = zext i32 %7 to i64
  %mul4 = mul i64 %mul2, %conv3
  %8 = load i64*, i64** @cube, align 4
  %9 = load i32, i32* @n_cubes, align 4
  %arrayidx = getelementptr inbounds i64, i64* %8, i32 %9
  store i64 %mul4, i64* %arrayidx, align 8
  %10 = load i32, i32* %x, align 4
  %cmp = icmp ult i32 %10, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %11 = load i32, i32* @pq_len, align 4
  %inc6 = add i32 %11, 1
  store i32 %inc6, i32* @pq_len, align 4
  %12 = load i32, i32* @pq_cap, align 4
  %cmp7 = icmp uge i32 %inc6, %12
  br i1 %cmp7, label %if.then9, label %if.end15

if.then9:                                         ; preds = %if.end
  %13 = load i32, i32* @pq_cap, align 4
  %mul10 = mul i32 %13, 2
  store i32 %mul10, i32* @pq_cap, align 4
  %tobool = icmp ne i32 %mul10, 0
  br i1 %tobool, label %if.end12, label %if.then11

if.then11:                                        ; preds = %if.then9
  store i32 2, i32* @pq_cap, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then11, %if.then9
  %14 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %15 = bitcast %struct.sum_t* %14 to i8*
  %16 = load i32, i32* @pq_cap, align 4
  %mul13 = mul i32 16, %16
  %call14 = call i8* @realloc(i8* %15, i32 %mul13)
  %17 = bitcast i8* %call14 to %struct.sum_t*
  store %struct.sum_t* %17, %struct.sum_t** @pq, align 4
  br label %if.end15

if.end15:                                         ; preds = %if.end12, %if.end
  %x16 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %tmp, i32 0, i32 0
  %18 = load i32, i32* %x, align 4
  store i32 %18, i32* %x16, align 8
  %y = getelementptr inbounds %struct.sum_t, %struct.sum_t* %tmp, i32 0, i32 1
  store i32 1, i32* %y, align 4
  %value = getelementptr inbounds %struct.sum_t, %struct.sum_t* %tmp, i32 0, i32 2
  %19 = load i64*, i64** @cube, align 4
  %20 = load i32, i32* %x, align 4
  %arrayidx17 = getelementptr inbounds i64, i64* %19, i32 %20
  %21 = load i64, i64* %arrayidx17, align 8
  %add18 = add i64 %21, 1
  store i64 %add18, i64* %value, align 8
  %22 = load i32, i32* @pq_len, align 4
  store i32 %22, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end15
  %23 = load i32, i32* %i, align 4
  %cmp19 = icmp uge i32 %23, 1
  br i1 %cmp19, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %24 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %25 = load i32, i32* %i, align 4
  %shr = lshr i32 %25, 1
  store i32 %shr, i32* %j, align 4
  %arrayidx21 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %24, i32 %shr
  %value22 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %arrayidx21, i32 0, i32 2
  %26 = load i64, i64* %value22, align 8
  %value23 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %tmp, i32 0, i32 2
  %27 = load i64, i64* %value23, align 8
  %cmp24 = icmp ugt i64 %26, %27
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %28 = phi i1 [ false, %for.cond ], [ %cmp24, %land.rhs ]
  br i1 %28, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %29 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %29, i32 %30
  %31 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %32 = load i32, i32* %j, align 4
  %arrayidx27 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %31, i32 %32
  %33 = bitcast %struct.sum_t* %arrayidx26 to i8*
  %34 = bitcast %struct.sum_t* %arrayidx27 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %33, i8* align 8 %34, i32 16, i1 false)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %35 = load i32, i32* %j, align 4
  store i32 %35, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  %36 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %37 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %36, i32 %37
  %38 = bitcast %struct.sum_t* %arrayidx28 to i8*
  %39 = bitcast %struct.sum_t* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %38, i8* align 8 %39, i32 16, i1 false)
  br label %return

return:                                           ; preds = %for.end, %if.then
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define hidden void @next_sum() #0 {
entry:
  %tmp = alloca %struct.sum_t, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  br label %redo

redo:                                             ; preds = %if.then7, %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %redo
  %0 = load i32, i32* @pq_len, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %while.cond
  %1 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %arrayidx = getelementptr inbounds %struct.sum_t, %struct.sum_t* %1, i32 1
  %value = getelementptr inbounds %struct.sum_t, %struct.sum_t* %arrayidx, i32 0, i32 2
  %2 = load i64, i64* %value, align 8
  %3 = load i64*, i64** @cube, align 4
  %4 = load i32, i32* @n_cubes, align 4
  %arrayidx1 = getelementptr inbounds i64, i64* %3, i32 %4
  %5 = load i64, i64* %arrayidx1, align 8
  %cmp = icmp uge i64 %2, %5
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %while.cond
  %6 = phi i1 [ true, %while.cond ], [ %cmp, %lor.rhs ]
  br i1 %6, label %while.body, label %while.end

while.body:                                       ; preds = %lor.end
  call void @add_cube()
  br label %while.cond

while.end:                                        ; preds = %lor.end
  %7 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %arrayidx2 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %7, i32 0
  %8 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %arrayidx3 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %8, i32 1
  %9 = bitcast %struct.sum_t* %arrayidx2 to i8*
  %10 = bitcast %struct.sum_t* %arrayidx3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %9, i8* align 8 %10, i32 16, i1 false)
  %11 = bitcast %struct.sum_t* %tmp to i8*
  %12 = bitcast %struct.sum_t* %arrayidx2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %11, i8* align 8 %12, i32 16, i1 false)
  %y = getelementptr inbounds %struct.sum_t, %struct.sum_t* %tmp, i32 0, i32 1
  %13 = load i32, i32* %y, align 4
  %inc = add i32 %13, 1
  store i32 %inc, i32* %y, align 4
  %x = getelementptr inbounds %struct.sum_t, %struct.sum_t* %tmp, i32 0, i32 0
  %14 = load i32, i32* %x, align 8
  %cmp4 = icmp uge i32 %inc, %14
  br i1 %cmp4, label %if.then, label %if.else

if.then:                                          ; preds = %while.end
  %15 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %16 = load i32, i32* @pq_len, align 4
  %dec = add i32 %16, -1
  store i32 %dec, i32* @pq_len, align 4
  %arrayidx5 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %15, i32 %16
  %17 = bitcast %struct.sum_t* %tmp to i8*
  %18 = bitcast %struct.sum_t* %arrayidx5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %17, i8* align 8 %18, i32 16, i1 false)
  %19 = load i32, i32* @pq_len, align 4
  %tobool6 = icmp ne i32 %19, 0
  br i1 %tobool6, label %if.end, label %if.then7

if.then7:                                         ; preds = %if.then
  br label %redo

if.end:                                           ; preds = %if.then
  br label %if.end14

if.else:                                          ; preds = %while.end
  %20 = load i64*, i64** @cube, align 4
  %y8 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %tmp, i32 0, i32 1
  %21 = load i32, i32* %y8, align 4
  %arrayidx9 = getelementptr inbounds i64, i64* %20, i32 %21
  %22 = load i64, i64* %arrayidx9, align 8
  %23 = load i64*, i64** @cube, align 4
  %y10 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %tmp, i32 0, i32 1
  %24 = load i32, i32* %y10, align 4
  %sub = sub i32 %24, 1
  %arrayidx11 = getelementptr inbounds i64, i64* %23, i32 %sub
  %25 = load i64, i64* %arrayidx11, align 8
  %sub12 = sub i64 %22, %25
  %value13 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %tmp, i32 0, i32 2
  %26 = load i64, i64* %value13, align 8
  %add = add i64 %26, %sub12
  store i64 %add, i64* %value13, align 8
  br label %if.end14

if.end14:                                         ; preds = %if.else, %if.end
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end14
  %27 = load i32, i32* %i, align 4
  %shl = shl i32 %27, 1
  store i32 %shl, i32* %j, align 4
  %28 = load i32, i32* @pq_len, align 4
  %cmp15 = icmp ule i32 %shl, %28
  br i1 %cmp15, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %29 = load i32, i32* %j, align 4
  %30 = load i32, i32* @pq_len, align 4
  %cmp16 = icmp ult i32 %29, %30
  br i1 %cmp16, label %land.lhs.true, label %if.end25

land.lhs.true:                                    ; preds = %for.body
  %31 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %32 = load i32, i32* %j, align 4
  %add17 = add i32 %32, 1
  %arrayidx18 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %31, i32 %add17
  %value19 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %arrayidx18, i32 0, i32 2
  %33 = load i64, i64* %value19, align 8
  %34 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %35 = load i32, i32* %j, align 4
  %arrayidx20 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %34, i32 %35
  %value21 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %arrayidx20, i32 0, i32 2
  %36 = load i64, i64* %value21, align 8
  %cmp22 = icmp ult i64 %33, %36
  br i1 %cmp22, label %if.then23, label %if.end25

if.then23:                                        ; preds = %land.lhs.true
  %37 = load i32, i32* %j, align 4
  %inc24 = add i32 %37, 1
  store i32 %inc24, i32* %j, align 4
  br label %if.end25

if.end25:                                         ; preds = %if.then23, %land.lhs.true, %for.body
  %38 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %39 = load i32, i32* %j, align 4
  %arrayidx26 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %38, i32 %39
  %value27 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %arrayidx26, i32 0, i32 2
  %40 = load i64, i64* %value27, align 8
  %value28 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %tmp, i32 0, i32 2
  %41 = load i64, i64* %value28, align 8
  %cmp29 = icmp uge i64 %40, %41
  br i1 %cmp29, label %if.then30, label %if.end31

if.then30:                                        ; preds = %if.end25
  br label %for.end

if.end31:                                         ; preds = %if.end25
  br label %for.inc

for.inc:                                          ; preds = %if.end31
  %42 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %43 = load i32, i32* %i, align 4
  %arrayidx32 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %42, i32 %43
  %44 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %45 = load i32, i32* %j, align 4
  %arrayidx33 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %44, i32 %45
  %46 = bitcast %struct.sum_t* %arrayidx32 to i8*
  %47 = bitcast %struct.sum_t* %arrayidx33 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %46, i8* align 8 %47, i32 16, i1 false)
  %48 = load i32, i32* %j, align 4
  store i32 %48, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then30, %for.cond
  %49 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %50 = load i32, i32* %i, align 4
  %arrayidx34 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %49, i32 %50
  %51 = bitcast %struct.sum_t* %arrayidx34 to i8*
  %52 = bitcast %struct.sum_t* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %51, i8* align 8 %52, i32 16, i1 false)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @next_taxi(%struct.sum_t* %hist) #0 {
entry:
  %hist.addr = alloca %struct.sum_t*, align 4
  %len = alloca i32, align 4
  store %struct.sum_t* %hist, %struct.sum_t** %hist.addr, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  call void @next_sum()
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %0 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %arrayidx = getelementptr inbounds %struct.sum_t, %struct.sum_t* %0, i32 0
  %value = getelementptr inbounds %struct.sum_t, %struct.sum_t* %arrayidx, i32 0, i32 2
  %1 = load i64, i64* %value, align 8
  %2 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %arrayidx1 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %2, i32 1
  %value2 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %arrayidx1, i32 0, i32 2
  %3 = load i64, i64* %value2, align 8
  %cmp = icmp ne i64 %1, %3
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  store i32 1, i32* %len, align 4
  %4 = load %struct.sum_t*, %struct.sum_t** %hist.addr, align 4
  %arrayidx3 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %4, i32 0
  %5 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %arrayidx4 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %5, i32 0
  %6 = bitcast %struct.sum_t* %arrayidx3 to i8*
  %7 = bitcast %struct.sum_t* %arrayidx4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 16, i1 false)
  br label %do.body5

do.body5:                                         ; preds = %do.cond8, %do.end
  %8 = load %struct.sum_t*, %struct.sum_t** %hist.addr, align 4
  %9 = load i32, i32* %len, align 4
  %inc = add i32 %9, 1
  store i32 %inc, i32* %len, align 4
  %arrayidx6 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %8, i32 %9
  %10 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %arrayidx7 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %10, i32 1
  %11 = bitcast %struct.sum_t* %arrayidx6 to i8*
  %12 = bitcast %struct.sum_t* %arrayidx7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %11, i8* align 8 %12, i32 16, i1 false)
  call void @next_sum()
  br label %do.cond8

do.cond8:                                         ; preds = %do.body5
  %13 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %arrayidx9 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %13, i32 0
  %value10 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %arrayidx9, i32 0, i32 2
  %14 = load i64, i64* %value10, align 8
  %15 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %arrayidx11 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %15, i32 1
  %value12 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %arrayidx11, i32 0, i32 2
  %16 = load i64, i64* %value12, align 8
  %cmp13 = icmp eq i64 %14, %16
  br i1 %cmp13, label %do.body5, label %do.end14

do.end14:                                         ; preds = %do.cond8
  %17 = load i32, i32* %len, align 4
  ret i32 %17
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %l = alloca i32, align 4
  %x = alloca [10 x %struct.sum_t], align 16
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ule i32 %0, 2006
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay = getelementptr inbounds [10 x %struct.sum_t], [10 x %struct.sum_t]* %x, i32 0, i32 0
  %call = call i32 @next_taxi(%struct.sum_t* %arraydecay)
  store i32 %call, i32* %l, align 4
  %1 = load i32, i32* %i, align 4
  %cmp1 = icmp ult i32 25, %1
  br i1 %cmp1, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %2 = load i32, i32* %i, align 4
  %cmp2 = icmp ult i32 %2, 2000
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  br label %for.inc

if.end:                                           ; preds = %land.lhs.true, %for.body
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [10 x %struct.sum_t], [10 x %struct.sum_t]* %x, i32 0, i32 0
  %value = getelementptr inbounds %struct.sum_t, %struct.sum_t* %arrayidx, i32 0, i32 2
  %4 = load i64, i64* %value, align 8
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0), i32 %3, i64 %4)
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %5 = load i32, i32* %l, align 4
  %dec = add i32 %5, -1
  store i32 %dec, i32* %l, align 4
  %tobool = icmp ne i32 %5, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load i32, i32* %l, align 4
  %arrayidx4 = getelementptr inbounds [10 x %struct.sum_t], [10 x %struct.sum_t]* %x, i32 0, i32 %6
  %x5 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %arrayidx4, i32 0, i32 0
  %7 = load i32, i32* %x5, align 16
  %8 = load i32, i32* %l, align 4
  %arrayidx6 = getelementptr inbounds [10 x %struct.sum_t], [10 x %struct.sum_t]* %x, i32 0, i32 %8
  %y = getelementptr inbounds %struct.sum_t, %struct.sum_t* %arrayidx6, i32 0, i32 1
  %9 = load i32, i32* %y, align 4
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i32 0, i32 0), i32 %7, i32 %9)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %call8 = call i32 @putchar(i32 10)
  br label %for.inc

for.inc:                                          ; preds = %while.end, %if.then
  %10 = load i32, i32* %i, align 4
  %inc = add i32 %10, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

declare i32 @putchar(i32 %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i64, i64* %value, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i64, i64* %value2, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ne i64 %1, %3
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i1 = ne %0, %1
infer %2

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add i32 %9, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %14 = load i64, i64* %value10, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i64, i64* %value12, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp13 = icmp eq i64 %14, %16
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 3 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i1 = ne %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i1 = eq %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for next_taxi()

; entering Souper's runOnFunction() for main()

; ModuleID = './Taxicab_numbers.c.bc'
source_filename = "./Taxicab_numbers.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.sum_t = type { i32, i32, i64 }

@n_cubes = hidden global i32 0, align 4
@cube = hidden global i64* null, align 4
@pq_len = hidden global i32 0, align 4
@pq_cap = hidden global i32 0, align 4
@pq = hidden global %struct.sum_t* null, align 4
@.str = private unnamed_addr constant [11 x i8] c"%4u:%10llu\00", align 1
@.str.1 = private unnamed_addr constant [17 x i8] c" = %4u^3 + %4u^3\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @add_cube() #0 {
entry:
  %x = alloca i32, align 4
  %tmp = alloca %struct.sum_t, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %0 = load i32, i32* @n_cubes, align 4
  %inc = add i32 %0, 1
  store i32 %inc, i32* @n_cubes, align 4
  store i32 %0, i32* %x, align 4
  %1 = load i64*, i64** @cube, align 4
  %2 = bitcast i64* %1 to i8*
  %3 = load i32, i32* @n_cubes, align 4
  %add = add i32 %3, 1
  %mul = mul i32 8, %add
  %call = call i8* @realloc(i8* %2, i32 %mul)
  %4 = bitcast i8* %call to i64*
  store i64* %4, i64** @cube, align 4
  %5 = load i32, i32* @n_cubes, align 4
  %conv = zext i32 %5 to i64
  %6 = load i32, i32* @n_cubes, align 4
  %conv1 = zext i32 %6 to i64
  %mul2 = mul i64 %conv, %conv1
  %7 = load i32, i32* @n_cubes, align 4
  %conv3 = zext i32 %7 to i64
  %mul4 = mul i64 %mul2, %conv3
  %8 = load i64*, i64** @cube, align 4
  %9 = load i32, i32* @n_cubes, align 4
  %arrayidx = getelementptr inbounds i64, i64* %8, i32 %9
  store i64 %mul4, i64* %arrayidx, align 8
  %10 = load i32, i32* %x, align 4
  %cmp = icmp ult i32 %10, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %11 = load i32, i32* @pq_len, align 4
  %inc6 = add i32 %11, 1
  store i32 %inc6, i32* @pq_len, align 4
  %12 = load i32, i32* @pq_cap, align 4
  %cmp7 = icmp uge i32 %inc6, %12
  br i1 %cmp7, label %if.then9, label %if.end15

if.then9:                                         ; preds = %if.end
  %13 = load i32, i32* @pq_cap, align 4
  %mul10 = mul i32 %13, 2
  store i32 %mul10, i32* @pq_cap, align 4
  %tobool = icmp ne i32 %mul10, 0
  br i1 %tobool, label %if.end12, label %if.then11

if.then11:                                        ; preds = %if.then9
  store i32 2, i32* @pq_cap, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then11, %if.then9
  %14 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %15 = bitcast %struct.sum_t* %14 to i8*
  %16 = load i32, i32* @pq_cap, align 4
  %mul13 = mul i32 16, %16
  %call14 = call i8* @realloc(i8* %15, i32 %mul13)
  %17 = bitcast i8* %call14 to %struct.sum_t*
  store %struct.sum_t* %17, %struct.sum_t** @pq, align 4
  br label %if.end15

if.end15:                                         ; preds = %if.end12, %if.end
  %x16 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %tmp, i32 0, i32 0
  %18 = load i32, i32* %x, align 4
  store i32 %18, i32* %x16, align 8
  %y = getelementptr inbounds %struct.sum_t, %struct.sum_t* %tmp, i32 0, i32 1
  store i32 1, i32* %y, align 4
  %value = getelementptr inbounds %struct.sum_t, %struct.sum_t* %tmp, i32 0, i32 2
  %19 = load i64*, i64** @cube, align 4
  %20 = load i32, i32* %x, align 4
  %arrayidx17 = getelementptr inbounds i64, i64* %19, i32 %20
  %21 = load i64, i64* %arrayidx17, align 8
  %add18 = add i64 %21, 1
  store i64 %add18, i64* %value, align 8
  %22 = load i32, i32* @pq_len, align 4
  store i32 %22, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end15
  %23 = load i32, i32* %i, align 4
  %cmp19 = icmp uge i32 %23, 1
  br i1 %cmp19, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %24 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %25 = load i32, i32* %i, align 4
  %shr = lshr i32 %25, 1
  store i32 %shr, i32* %j, align 4
  %arrayidx21 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %24, i32 %shr
  %value22 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %arrayidx21, i32 0, i32 2
  %26 = load i64, i64* %value22, align 8
  %value23 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %tmp, i32 0, i32 2
  %27 = load i64, i64* %value23, align 8
  %cmp24 = icmp ugt i64 %26, %27
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %28 = phi i1 [ false, %for.cond ], [ %cmp24, %land.rhs ]
  br i1 %28, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %29 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %29, i32 %30
  %31 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %32 = load i32, i32* %j, align 4
  %arrayidx27 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %31, i32 %32
  %33 = bitcast %struct.sum_t* %arrayidx26 to i8*
  %34 = bitcast %struct.sum_t* %arrayidx27 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %33, i8* align 8 %34, i32 16, i1 false)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %35 = load i32, i32* %j, align 4
  store i32 %35, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  %36 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %37 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %36, i32 %37
  %38 = bitcast %struct.sum_t* %arrayidx28 to i8*
  %39 = bitcast %struct.sum_t* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %38, i8* align 8 %39, i32 16, i1 false)
  br label %return

return:                                           ; preds = %for.end, %if.then
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define hidden void @next_sum() #0 {
entry:
  %tmp = alloca %struct.sum_t, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  br label %redo

redo:                                             ; preds = %if.then7, %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %redo
  %0 = load i32, i32* @pq_len, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %while.cond
  %1 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %arrayidx = getelementptr inbounds %struct.sum_t, %struct.sum_t* %1, i32 1
  %value = getelementptr inbounds %struct.sum_t, %struct.sum_t* %arrayidx, i32 0, i32 2
  %2 = load i64, i64* %value, align 8
  %3 = load i64*, i64** @cube, align 4
  %4 = load i32, i32* @n_cubes, align 4
  %arrayidx1 = getelementptr inbounds i64, i64* %3, i32 %4
  %5 = load i64, i64* %arrayidx1, align 8
  %cmp = icmp uge i64 %2, %5
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %while.cond
  %6 = phi i1 [ true, %while.cond ], [ %cmp, %lor.rhs ]
  br i1 %6, label %while.body, label %while.end

while.body:                                       ; preds = %lor.end
  call void @add_cube()
  br label %while.cond

while.end:                                        ; preds = %lor.end
  %7 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %arrayidx2 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %7, i32 0
  %8 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %arrayidx3 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %8, i32 1
  %9 = bitcast %struct.sum_t* %arrayidx2 to i8*
  %10 = bitcast %struct.sum_t* %arrayidx3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %9, i8* align 8 %10, i32 16, i1 false)
  %11 = bitcast %struct.sum_t* %tmp to i8*
  %12 = bitcast %struct.sum_t* %arrayidx2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %11, i8* align 8 %12, i32 16, i1 false)
  %y = getelementptr inbounds %struct.sum_t, %struct.sum_t* %tmp, i32 0, i32 1
  %13 = load i32, i32* %y, align 4
  %inc = add i32 %13, 1
  store i32 %inc, i32* %y, align 4
  %x = getelementptr inbounds %struct.sum_t, %struct.sum_t* %tmp, i32 0, i32 0
  %14 = load i32, i32* %x, align 8
  %cmp4 = icmp uge i32 %inc, %14
  br i1 %cmp4, label %if.then, label %if.else

if.then:                                          ; preds = %while.end
  %15 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %16 = load i32, i32* @pq_len, align 4
  %dec = add i32 %16, -1
  store i32 %dec, i32* @pq_len, align 4
  %arrayidx5 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %15, i32 %16
  %17 = bitcast %struct.sum_t* %tmp to i8*
  %18 = bitcast %struct.sum_t* %arrayidx5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %17, i8* align 8 %18, i32 16, i1 false)
  %19 = load i32, i32* @pq_len, align 4
  %tobool6 = icmp ne i32 %19, 0
  br i1 %tobool6, label %if.end, label %if.then7

if.then7:                                         ; preds = %if.then
  br label %redo

if.end:                                           ; preds = %if.then
  br label %if.end14

if.else:                                          ; preds = %while.end
  %20 = load i64*, i64** @cube, align 4
  %y8 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %tmp, i32 0, i32 1
  %21 = load i32, i32* %y8, align 4
  %arrayidx9 = getelementptr inbounds i64, i64* %20, i32 %21
  %22 = load i64, i64* %arrayidx9, align 8
  %23 = load i64*, i64** @cube, align 4
  %y10 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %tmp, i32 0, i32 1
  %24 = load i32, i32* %y10, align 4
  %sub = sub i32 %24, 1
  %arrayidx11 = getelementptr inbounds i64, i64* %23, i32 %sub
  %25 = load i64, i64* %arrayidx11, align 8
  %sub12 = sub i64 %22, %25
  %value13 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %tmp, i32 0, i32 2
  %26 = load i64, i64* %value13, align 8
  %add = add i64 %26, %sub12
  store i64 %add, i64* %value13, align 8
  br label %if.end14

if.end14:                                         ; preds = %if.else, %if.end
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end14
  %27 = load i32, i32* %i, align 4
  %shl = shl i32 %27, 1
  store i32 %shl, i32* %j, align 4
  %28 = load i32, i32* @pq_len, align 4
  %cmp15 = icmp ule i32 %shl, %28
  br i1 %cmp15, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %29 = load i32, i32* %j, align 4
  %30 = load i32, i32* @pq_len, align 4
  %cmp16 = icmp ult i32 %29, %30
  br i1 %cmp16, label %land.lhs.true, label %if.end25

land.lhs.true:                                    ; preds = %for.body
  %31 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %32 = load i32, i32* %j, align 4
  %add17 = add i32 %32, 1
  %arrayidx18 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %31, i32 %add17
  %value19 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %arrayidx18, i32 0, i32 2
  %33 = load i64, i64* %value19, align 8
  %34 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %35 = load i32, i32* %j, align 4
  %arrayidx20 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %34, i32 %35
  %value21 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %arrayidx20, i32 0, i32 2
  %36 = load i64, i64* %value21, align 8
  %cmp22 = icmp ult i64 %33, %36
  br i1 %cmp22, label %if.then23, label %if.end25

if.then23:                                        ; preds = %land.lhs.true
  %37 = load i32, i32* %j, align 4
  %inc24 = add i32 %37, 1
  store i32 %inc24, i32* %j, align 4
  br label %if.end25

if.end25:                                         ; preds = %if.then23, %land.lhs.true, %for.body
  %38 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %39 = load i32, i32* %j, align 4
  %arrayidx26 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %38, i32 %39
  %value27 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %arrayidx26, i32 0, i32 2
  %40 = load i64, i64* %value27, align 8
  %value28 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %tmp, i32 0, i32 2
  %41 = load i64, i64* %value28, align 8
  %cmp29 = icmp uge i64 %40, %41
  br i1 %cmp29, label %if.then30, label %if.end31

if.then30:                                        ; preds = %if.end25
  br label %for.end

if.end31:                                         ; preds = %if.end25
  br label %for.inc

for.inc:                                          ; preds = %if.end31
  %42 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %43 = load i32, i32* %i, align 4
  %arrayidx32 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %42, i32 %43
  %44 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %45 = load i32, i32* %j, align 4
  %arrayidx33 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %44, i32 %45
  %46 = bitcast %struct.sum_t* %arrayidx32 to i8*
  %47 = bitcast %struct.sum_t* %arrayidx33 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %46, i8* align 8 %47, i32 16, i1 false)
  %48 = load i32, i32* %j, align 4
  store i32 %48, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then30, %for.cond
  %49 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %50 = load i32, i32* %i, align 4
  %arrayidx34 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %49, i32 %50
  %51 = bitcast %struct.sum_t* %arrayidx34 to i8*
  %52 = bitcast %struct.sum_t* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %51, i8* align 8 %52, i32 16, i1 false)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @next_taxi(%struct.sum_t* %hist) #0 {
entry:
  %hist.addr = alloca %struct.sum_t*, align 4
  %len = alloca i32, align 4
  store %struct.sum_t* %hist, %struct.sum_t** %hist.addr, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  call void @next_sum()
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %0 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %arrayidx = getelementptr inbounds %struct.sum_t, %struct.sum_t* %0, i32 0
  %value = getelementptr inbounds %struct.sum_t, %struct.sum_t* %arrayidx, i32 0, i32 2
  %1 = load i64, i64* %value, align 8
  %2 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %arrayidx1 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %2, i32 1
  %value2 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %arrayidx1, i32 0, i32 2
  %3 = load i64, i64* %value2, align 8
  %cmp = icmp ne i64 %1, %3
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  store i32 1, i32* %len, align 4
  %4 = load %struct.sum_t*, %struct.sum_t** %hist.addr, align 4
  %arrayidx3 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %4, i32 0
  %5 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %arrayidx4 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %5, i32 0
  %6 = bitcast %struct.sum_t* %arrayidx3 to i8*
  %7 = bitcast %struct.sum_t* %arrayidx4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %6, i8* align 8 %7, i32 16, i1 false)
  br label %do.body5

do.body5:                                         ; preds = %do.cond8, %do.end
  %8 = load %struct.sum_t*, %struct.sum_t** %hist.addr, align 4
  %9 = load i32, i32* %len, align 4
  %inc = add i32 %9, 1
  store i32 %inc, i32* %len, align 4
  %arrayidx6 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %8, i32 %9
  %10 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %arrayidx7 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %10, i32 1
  %11 = bitcast %struct.sum_t* %arrayidx6 to i8*
  %12 = bitcast %struct.sum_t* %arrayidx7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %11, i8* align 8 %12, i32 16, i1 false)
  call void @next_sum()
  br label %do.cond8

do.cond8:                                         ; preds = %do.body5
  %13 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %arrayidx9 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %13, i32 0
  %value10 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %arrayidx9, i32 0, i32 2
  %14 = load i64, i64* %value10, align 8
  %15 = load %struct.sum_t*, %struct.sum_t** @pq, align 4
  %arrayidx11 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %15, i32 1
  %value12 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %arrayidx11, i32 0, i32 2
  %16 = load i64, i64* %value12, align 8
  %cmp13 = icmp eq i64 %14, %16
  br i1 %cmp13, label %do.body5, label %do.end14

do.end14:                                         ; preds = %do.cond8
  %17 = load i32, i32* %len, align 4
  ret i32 %17
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %l = alloca i32, align 4
  %x = alloca [10 x %struct.sum_t], align 16
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ule i32 %0, 2006
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay = getelementptr inbounds [10 x %struct.sum_t], [10 x %struct.sum_t]* %x, i32 0, i32 0
  %call = call i32 @next_taxi(%struct.sum_t* %arraydecay)
  store i32 %call, i32* %l, align 4
  %1 = load i32, i32* %i, align 4
  %cmp1 = icmp ult i32 25, %1
  br i1 %cmp1, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %2 = load i32, i32* %i, align 4
  %cmp2 = icmp ult i32 %2, 2000
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  br label %for.inc

if.end:                                           ; preds = %land.lhs.true, %for.body
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [10 x %struct.sum_t], [10 x %struct.sum_t]* %x, i32 0, i32 0
  %value = getelementptr inbounds %struct.sum_t, %struct.sum_t* %arrayidx, i32 0, i32 2
  %4 = load i64, i64* %value, align 8
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0), i32 %3, i64 %4)
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %5 = load i32, i32* %l, align 4
  %dec = add i32 %5, -1
  store i32 %dec, i32* %l, align 4
  %tobool = icmp ne i32 %5, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load i32, i32* %l, align 4
  %arrayidx4 = getelementptr inbounds [10 x %struct.sum_t], [10 x %struct.sum_t]* %x, i32 0, i32 %6
  %x5 = getelementptr inbounds %struct.sum_t, %struct.sum_t* %arrayidx4, i32 0, i32 0
  %7 = load i32, i32* %x5, align 16
  %8 = load i32, i32* %l, align 4
  %arrayidx6 = getelementptr inbounds [10 x %struct.sum_t], [10 x %struct.sum_t]* %x, i32 0, i32 %8
  %y = getelementptr inbounds %struct.sum_t, %struct.sum_t* %arrayidx6, i32 0, i32 1
  %9 = load i32, i32* %y, align 4
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i32 0, i32 0), i32 %7, i32 %9)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %call8 = call i32 @putchar(i32 10)
  br label %for.inc

for.inc:                                          ; preds = %while.end, %if.then
  %10 = load i32, i32* %i, align 4
  %inc = add i32 %10, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

declare i32 @putchar(i32 %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ule i32 %0, 2006
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ule %0, 2006:i32
infer %1

; *****
; For LLVM instruction:
;  %call = call i32 @next_taxi(%struct.sum_t* %arraydecay)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = icmp ult i32 25, %1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ult 25:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp ult i32 %2, 2000
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ult %0, 2000:i32
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i64, i64* %value, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %l, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec = add i32 %5, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %5, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %l, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %x5, align 16
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %l, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %y, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add i32 %10, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ule %0, 2006:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ult 25:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ult %0, 2000:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
