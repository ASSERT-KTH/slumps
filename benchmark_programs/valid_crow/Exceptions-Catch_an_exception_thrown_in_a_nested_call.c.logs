
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for Create_Ex_Ctx()

; ModuleID = './Exceptions-Catch_an_exception_thrown_in_a_nested_call.c.bc'
source_filename = "./Exceptions-Catch_an_exception_thrown_in_a_nested_call.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque
%struct.exception_ctx = type { %struct.exception*, i32, i32 }
%struct.exception = type { i32, [128 x i8] }

@stderr = external constant %struct._IO_FILE*, align 4
@.str = private unnamed_addr constant [43 x i8] c"*** Error: Overflow in exception context.\0A\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@GLOBALEX = hidden global %struct.exception_ctx* null, align 4
@.str.2 = private unnamed_addr constant [48 x i8] c"U0 Drink Error. Insufficient drinks in bar Baz.\00", align 1
@.str.3 = private unnamed_addr constant [62 x i8] c"U1 Bartender Error. Bartender kicked customer out of bar Baz.\00", align 1
@stdout = external constant %struct._IO_FILE*, align 4
@.str.4 = private unnamed_addr constant [19 x i8] c"Bar door is open.\0A\00", align 1
@.str.5 = private unnamed_addr constant [37 x i8] c"Baz has been called without errors.\0A\00", align 1
@.str.6 = private unnamed_addr constant [21 x i8] c"Bar door is closed.\0A\00", align 1
@.str.7 = private unnamed_addr constant [19 x i8] c"Foo entering bar.\0A\00", align 1
@.str.8 = private unnamed_addr constant [82 x i8] c"I am foo() and I deaall wrth U0 DriNk Errors with my own bottle... GOT oNE! [%s]\0A\00", align 1
@.str.9 = private unnamed_addr constant [19 x i8] c"Foo left the bar.\0A\00", align 1
@.str.10 = private unnamed_addr constant [25 x i8] c"Foo entering bar again.\0A\00", align 1
@.str.11 = private unnamed_addr constant [24 x i8] c"No errors encountered.\0A\00", align 1
@.str.12 = private unnamed_addr constant [15 x i8] c"*** Error: %s\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden %struct.exception_ctx* @Create_Ex_Ctx(i32 %length) #0 {
entry:
  %retval = alloca %struct.exception_ctx*, align 4
  %length.addr = alloca i32, align 4
  %safety = alloca i32, align 4
  %tmp = alloca i8*, align 4
  %ctx = alloca %struct.exception_ctx*, align 4
  store i32 %length, i32* %length.addr, align 4
  store i32 8, i32* %safety, align 4
  %0 = load i32, i32* %length.addr, align 4
  %mul = mul i32 132, %0
  %add = add i32 20, %mul
  %call = call noalias i8* @malloc(i32 %add)
  store i8* %call, i8** %tmp, align 4
  %1 = load i8*, i8** %tmp, align 4
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct.exception_ctx* null, %struct.exception_ctx** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %tmp, align 4
  %3 = bitcast i8* %2 to %struct.exception_ctx*
  store %struct.exception_ctx* %3, %struct.exception_ctx** %ctx, align 4
  %4 = load i32, i32* %length.addr, align 4
  %5 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %size = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %5, i32 0, i32 1
  store i32 %4, i32* %size, align 4
  %6 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %6, i32 0, i32 2
  store i32 -1, i32* %pos, align 4
  %7 = load i8*, i8** %tmp, align 4
  %add.ptr = getelementptr inbounds i8, i8* %7, i32 12
  %8 = bitcast i8* %add.ptr to %struct.exception*
  %9 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %exs = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %9, i32 0, i32 0
  store %struct.exception* %8, %struct.exception** %exs, align 4
  %10 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  store %struct.exception_ctx* %10, %struct.exception_ctx** %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %11 = load %struct.exception_ctx*, %struct.exception_ctx** %retval, align 4
  ret %struct.exception_ctx* %11
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @Free_Ex_Ctx(%struct.exception_ctx* %ctx) #0 {
entry:
  %ctx.addr = alloca %struct.exception_ctx*, align 4
  store %struct.exception_ctx* %ctx, %struct.exception_ctx** %ctx.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %1 = bitcast %struct.exception_ctx* %0 to i8*
  call void @free(i8* %1)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @Has_Ex(%struct.exception_ctx* %ctx) #0 {
entry:
  %ctx.addr = alloca %struct.exception_ctx*, align 4
  store %struct.exception_ctx* %ctx, %struct.exception_ctx** %ctx.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %0, i32 0, i32 2
  %1 = load i32, i32* %pos, align 4
  %cmp = icmp sge i32 %1, 0
  %2 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i32 1, i32 0
  ret i32 %cond
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @Is_Ex_Type(%struct.exception_ctx* %exctx, i32 %extype) #0 {
entry:
  %exctx.addr = alloca %struct.exception_ctx*, align 4
  %extype.addr = alloca i32, align 4
  store %struct.exception_ctx* %exctx, %struct.exception_ctx** %exctx.addr, align 4
  store i32 %extype, i32* %extype.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %0, i32 0, i32 2
  %1 = load i32, i32* %pos, align 4
  %cmp = icmp sge i32 %1, 0
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %exs = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %2, i32 0, i32 0
  %3 = load %struct.exception*, %struct.exception** %exs, align 4
  %4 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos1 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %4, i32 0, i32 2
  %5 = load i32, i32* %pos1, align 4
  %arrayidx = getelementptr inbounds %struct.exception, %struct.exception* %3, i32 %5
  %extype2 = getelementptr inbounds %struct.exception, %struct.exception* %arrayidx, i32 0, i32 0
  %6 = load i32, i32* %extype2, align 4
  %7 = load i32, i32* %extype.addr, align 4
  %cmp3 = icmp eq i32 %6, %7
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %8 = phi i1 [ false, %entry ], [ %cmp3, %land.rhs ]
  %9 = zext i1 %8 to i64
  %cond = select i1 %8, i32 1, i32 0
  ret i32 %cond
}

; Function Attrs: noinline nounwind optnone
define hidden void @Pop_Ex(%struct.exception_ctx* %ctx) #0 {
entry:
  %ctx.addr = alloca %struct.exception_ctx*, align 4
  store %struct.exception_ctx* %ctx, %struct.exception_ctx** %ctx.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %0, i32 0, i32 2
  %1 = load i32, i32* %pos, align 4
  %cmp = icmp sge i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %pos1 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %2, i32 0, i32 2
  %3 = load i32, i32* %pos1, align 4
  %dec = add nsw i32 %3, -1
  store i32 %dec, i32* %pos1, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @Get_What(%struct.exception_ctx* %ctx) #0 {
entry:
  %retval = alloca i8*, align 4
  %ctx.addr = alloca %struct.exception_ctx*, align 4
  store %struct.exception_ctx* %ctx, %struct.exception_ctx** %ctx.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %0, i32 0, i32 2
  %1 = load i32, i32* %pos, align 4
  %cmp = icmp sge i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %exs = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %2, i32 0, i32 0
  %3 = load %struct.exception*, %struct.exception** %exs, align 4
  %4 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %pos1 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %4, i32 0, i32 2
  %5 = load i32, i32* %pos1, align 4
  %arrayidx = getelementptr inbounds %struct.exception, %struct.exception* %3, i32 %5
  %what = getelementptr inbounds %struct.exception, %struct.exception* %arrayidx, i32 0, i32 1
  %arraydecay = getelementptr inbounds [128 x i8], [128 x i8]* %what, i32 0, i32 0
  store i8* %arraydecay, i8** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  store i8* null, i8** %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %6 = load i8*, i8** %retval, align 4
  ret i8* %6
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @Push_Ex(%struct.exception_ctx* %exctx, i32 %extype, i8* %msg) #0 {
entry:
  %exctx.addr = alloca %struct.exception_ctx*, align 4
  %extype.addr = alloca i32, align 4
  %msg.addr = alloca i8*, align 4
  store %struct.exception_ctx* %exctx, %struct.exception_ctx** %exctx.addr, align 4
  store i32 %extype, i32* %extype.addr, align 4
  store i8* %msg, i8** %msg.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %0, i32 0, i32 2
  %1 = load i32, i32* %pos, align 4
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* %pos, align 4
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %size = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %2, i32 0, i32 1
  %3 = load i32, i32* %size, align 4
  %cmp = icmp eq i32 %inc, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos1 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %4, i32 0, i32 2
  %5 = load i32, i32* %pos1, align 4
  %dec = add nsw i32 %5, -1
  store i32 %dec, i32* %pos1, align 4
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %exs = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %7, i32 0, i32 0
  %8 = load %struct.exception*, %struct.exception** %exs, align 4
  %9 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos2 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %9, i32 0, i32 2
  %10 = load i32, i32* %pos2, align 4
  %arrayidx = getelementptr inbounds %struct.exception, %struct.exception* %8, i32 %10
  %what = getelementptr inbounds %struct.exception, %struct.exception* %arrayidx, i32 0, i32 1
  %arraydecay = getelementptr inbounds [128 x i8], [128 x i8]* %what, i32 0, i32 0
  %11 = load i8*, i8** %msg.addr, align 4
  %call3 = call i32 (i8*, i32, i8*, ...) @snprintf(i8* %arraydecay, i32 128, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i8* %11)
  %12 = load i32, i32* %extype.addr, align 4
  %13 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %exs4 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %13, i32 0, i32 0
  %14 = load %struct.exception*, %struct.exception** %exs4, align 4
  %15 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos5 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %15, i32 0, i32 2
  %16 = load i32, i32* %pos5, align 4
  %arrayidx6 = getelementptr inbounds %struct.exception, %struct.exception* %14, i32 %16
  %extype7 = getelementptr inbounds %struct.exception, %struct.exception* %arrayidx6, i32 0, i32 0
  store i32 %12, i32* %extype7, align 4
  ret i32 -1
}

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #1

declare i32 @snprintf(i8* %0, i32 %1, i8* %2, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @baz(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call = call i32 @Push_Ex(%struct.exception_ctx* %1, i32 10, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.2, i32 0, i32 0))
  br label %return

if.else:                                          ; preds = %entry
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call1 = call i32 @Push_Ex(%struct.exception_ctx* %2, i32 11, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.3, i32 0, i32 0))
  br label %return

return:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @bar(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.4, i32 0, i32 0))
  %1 = load i32, i32* %n.addr, align 4
  call void @baz(i32 %1)
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call1 = call i32 @Has_Ex(%struct.exception_ctx* %2)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %bar_cleanup

if.end:                                           ; preds = %entry
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.5, i32 0, i32 0))
  br label %bar_cleanup

bar_cleanup:                                      ; preds = %if.end, %if.then
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i32 0, i32 0))
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @foo() #0 {
entry:
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.7, i32 0, i32 0))
  call void @bar(i32 0)
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %1 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call1 = call i32 @Is_Ex_Type(%struct.exception_ctx* %1, i32 10)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %3 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call2 = call i8* @Get_What(%struct.exception_ctx* %3)
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.8, i32 0, i32 0), i8* %call2)
  %4 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  call void @Pop_Ex(%struct.exception_ctx* %4)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %5 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call4 = call i32 @Has_Ex(%struct.exception_ctx* %5)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.then, label %if.end

if.then:                                          ; preds = %while.end
  br label %return

if.end:                                           ; preds = %while.end
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.9, i32 0, i32 0))
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.10, i32 0, i32 0))
  call void @bar(i32 1)
  br label %while.cond8

while.cond8:                                      ; preds = %while.body11, %if.end
  %8 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call9 = call i32 @Is_Ex_Type(%struct.exception_ctx* %8, i32 10)
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %while.body11, label %while.end14

while.body11:                                     ; preds = %while.cond8
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %10 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call12 = call i8* @Get_What(%struct.exception_ctx* %10)
  %call13 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.8, i32 0, i32 0), i8* %call12)
  %11 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  call void @Pop_Ex(%struct.exception_ctx* %11)
  br label %while.cond8

while.end14:                                      ; preds = %while.cond8
  %12 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call15 = call i32 @Has_Ex(%struct.exception_ctx* %12)
  %tobool16 = icmp ne i32 %call15, 0
  br i1 %tobool16, label %if.then17, label %if.end18

if.then17:                                        ; preds = %while.end14
  br label %return

if.end18:                                         ; preds = %while.end14
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call19 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.9, i32 0, i32 0))
  br label %return

return:                                           ; preds = %if.end18, %if.then17, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %ctx = alloca %struct.exception_ctx*, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  %call = call %struct.exception_ctx* @Create_Ex_Ctx(i32 5)
  store %struct.exception_ctx* %call, %struct.exception_ctx** %ctx, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  store %struct.exception_ctx* %0, %struct.exception_ctx** @GLOBALEX, align 4
  call void @foo()
  %1 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %call1 = call i32 @Has_Ex(%struct.exception_ctx* %1)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %main_ex

if.end:                                           ; preds = %entry
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.11, i32 0, i32 0))
  br label %main_ex

main_ex:                                          ; preds = %if.end, %if.then
  br label %while.cond

while.cond:                                       ; preds = %while.body, %main_ex
  %3 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %call3 = call i32 @Has_Ex(%struct.exception_ctx* %3)
  %tobool4 = icmp ne i32 %call3, 0
  br i1 %tobool4, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %5 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %call5 = call i8* @Get_What(%struct.exception_ctx* %5)
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.12, i32 0, i32 0), i8* %call5)
  %6 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  call void @Pop_Ex(%struct.exception_ctx* %6)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %7 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  call void @Free_Ex_Ctx(%struct.exception_ctx* %7)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %length.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul i32 132, %0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 132:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %add = add i32 20, %mul
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 132:i32, %0
%2:i32 = add 20:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %tobool = icmp ne i8* %1, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %length.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mul 132:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mul 132:i32, %0
%2:i32 = add 20:i32, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 20
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741844
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = mul 132:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for Create_Ex_Ctx()

; entering Souper's runOnFunction() for Free_Ex_Ctx()

; ModuleID = './Exceptions-Catch_an_exception_thrown_in_a_nested_call.c.bc'
source_filename = "./Exceptions-Catch_an_exception_thrown_in_a_nested_call.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque
%struct.exception_ctx = type { %struct.exception*, i32, i32 }
%struct.exception = type { i32, [128 x i8] }

@stderr = external constant %struct._IO_FILE*, align 4
@.str = private unnamed_addr constant [43 x i8] c"*** Error: Overflow in exception context.\0A\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@GLOBALEX = hidden global %struct.exception_ctx* null, align 4
@.str.2 = private unnamed_addr constant [48 x i8] c"U0 Drink Error. Insufficient drinks in bar Baz.\00", align 1
@.str.3 = private unnamed_addr constant [62 x i8] c"U1 Bartender Error. Bartender kicked customer out of bar Baz.\00", align 1
@stdout = external constant %struct._IO_FILE*, align 4
@.str.4 = private unnamed_addr constant [19 x i8] c"Bar door is open.\0A\00", align 1
@.str.5 = private unnamed_addr constant [37 x i8] c"Baz has been called without errors.\0A\00", align 1
@.str.6 = private unnamed_addr constant [21 x i8] c"Bar door is closed.\0A\00", align 1
@.str.7 = private unnamed_addr constant [19 x i8] c"Foo entering bar.\0A\00", align 1
@.str.8 = private unnamed_addr constant [82 x i8] c"I am foo() and I deaall wrth U0 DriNk Errors with my own bottle... GOT oNE! [%s]\0A\00", align 1
@.str.9 = private unnamed_addr constant [19 x i8] c"Foo left the bar.\0A\00", align 1
@.str.10 = private unnamed_addr constant [25 x i8] c"Foo entering bar again.\0A\00", align 1
@.str.11 = private unnamed_addr constant [24 x i8] c"No errors encountered.\0A\00", align 1
@.str.12 = private unnamed_addr constant [15 x i8] c"*** Error: %s\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden %struct.exception_ctx* @Create_Ex_Ctx(i32 %length) #0 {
entry:
  %retval = alloca %struct.exception_ctx*, align 4
  %length.addr = alloca i32, align 4
  %safety = alloca i32, align 4
  %tmp = alloca i8*, align 4
  %ctx = alloca %struct.exception_ctx*, align 4
  store i32 %length, i32* %length.addr, align 4
  store i32 8, i32* %safety, align 4
  %0 = load i32, i32* %length.addr, align 4
  %mul = mul i32 132, %0
  %add = add i32 20, %mul
  %call = call noalias i8* @malloc(i32 %add)
  store i8* %call, i8** %tmp, align 4
  %1 = load i8*, i8** %tmp, align 4
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct.exception_ctx* null, %struct.exception_ctx** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %tmp, align 4
  %3 = bitcast i8* %2 to %struct.exception_ctx*
  store %struct.exception_ctx* %3, %struct.exception_ctx** %ctx, align 4
  %4 = load i32, i32* %length.addr, align 4
  %5 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %size = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %5, i32 0, i32 1
  store i32 %4, i32* %size, align 4
  %6 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %6, i32 0, i32 2
  store i32 -1, i32* %pos, align 4
  %7 = load i8*, i8** %tmp, align 4
  %add.ptr = getelementptr inbounds i8, i8* %7, i32 12
  %8 = bitcast i8* %add.ptr to %struct.exception*
  %9 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %exs = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %9, i32 0, i32 0
  store %struct.exception* %8, %struct.exception** %exs, align 4
  %10 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  store %struct.exception_ctx* %10, %struct.exception_ctx** %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %11 = load %struct.exception_ctx*, %struct.exception_ctx** %retval, align 4
  ret %struct.exception_ctx* %11
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @Free_Ex_Ctx(%struct.exception_ctx* %ctx) #0 {
entry:
  %ctx.addr = alloca %struct.exception_ctx*, align 4
  store %struct.exception_ctx* %ctx, %struct.exception_ctx** %ctx.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %1 = bitcast %struct.exception_ctx* %0 to i8*
  call void @free(i8* %1)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @Has_Ex(%struct.exception_ctx* %ctx) #0 {
entry:
  %ctx.addr = alloca %struct.exception_ctx*, align 4
  store %struct.exception_ctx* %ctx, %struct.exception_ctx** %ctx.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %0, i32 0, i32 2
  %1 = load i32, i32* %pos, align 4
  %cmp = icmp sge i32 %1, 0
  %2 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i32 1, i32 0
  ret i32 %cond
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @Is_Ex_Type(%struct.exception_ctx* %exctx, i32 %extype) #0 {
entry:
  %exctx.addr = alloca %struct.exception_ctx*, align 4
  %extype.addr = alloca i32, align 4
  store %struct.exception_ctx* %exctx, %struct.exception_ctx** %exctx.addr, align 4
  store i32 %extype, i32* %extype.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %0, i32 0, i32 2
  %1 = load i32, i32* %pos, align 4
  %cmp = icmp sge i32 %1, 0
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %exs = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %2, i32 0, i32 0
  %3 = load %struct.exception*, %struct.exception** %exs, align 4
  %4 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos1 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %4, i32 0, i32 2
  %5 = load i32, i32* %pos1, align 4
  %arrayidx = getelementptr inbounds %struct.exception, %struct.exception* %3, i32 %5
  %extype2 = getelementptr inbounds %struct.exception, %struct.exception* %arrayidx, i32 0, i32 0
  %6 = load i32, i32* %extype2, align 4
  %7 = load i32, i32* %extype.addr, align 4
  %cmp3 = icmp eq i32 %6, %7
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %8 = phi i1 [ false, %entry ], [ %cmp3, %land.rhs ]
  %9 = zext i1 %8 to i64
  %cond = select i1 %8, i32 1, i32 0
  ret i32 %cond
}

; Function Attrs: noinline nounwind optnone
define hidden void @Pop_Ex(%struct.exception_ctx* %ctx) #0 {
entry:
  %ctx.addr = alloca %struct.exception_ctx*, align 4
  store %struct.exception_ctx* %ctx, %struct.exception_ctx** %ctx.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %0, i32 0, i32 2
  %1 = load i32, i32* %pos, align 4
  %cmp = icmp sge i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %pos1 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %2, i32 0, i32 2
  %3 = load i32, i32* %pos1, align 4
  %dec = add nsw i32 %3, -1
  store i32 %dec, i32* %pos1, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @Get_What(%struct.exception_ctx* %ctx) #0 {
entry:
  %retval = alloca i8*, align 4
  %ctx.addr = alloca %struct.exception_ctx*, align 4
  store %struct.exception_ctx* %ctx, %struct.exception_ctx** %ctx.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %0, i32 0, i32 2
  %1 = load i32, i32* %pos, align 4
  %cmp = icmp sge i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %exs = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %2, i32 0, i32 0
  %3 = load %struct.exception*, %struct.exception** %exs, align 4
  %4 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %pos1 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %4, i32 0, i32 2
  %5 = load i32, i32* %pos1, align 4
  %arrayidx = getelementptr inbounds %struct.exception, %struct.exception* %3, i32 %5
  %what = getelementptr inbounds %struct.exception, %struct.exception* %arrayidx, i32 0, i32 1
  %arraydecay = getelementptr inbounds [128 x i8], [128 x i8]* %what, i32 0, i32 0
  store i8* %arraydecay, i8** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  store i8* null, i8** %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %6 = load i8*, i8** %retval, align 4
  ret i8* %6
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @Push_Ex(%struct.exception_ctx* %exctx, i32 %extype, i8* %msg) #0 {
entry:
  %exctx.addr = alloca %struct.exception_ctx*, align 4
  %extype.addr = alloca i32, align 4
  %msg.addr = alloca i8*, align 4
  store %struct.exception_ctx* %exctx, %struct.exception_ctx** %exctx.addr, align 4
  store i32 %extype, i32* %extype.addr, align 4
  store i8* %msg, i8** %msg.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %0, i32 0, i32 2
  %1 = load i32, i32* %pos, align 4
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* %pos, align 4
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %size = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %2, i32 0, i32 1
  %3 = load i32, i32* %size, align 4
  %cmp = icmp eq i32 %inc, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos1 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %4, i32 0, i32 2
  %5 = load i32, i32* %pos1, align 4
  %dec = add nsw i32 %5, -1
  store i32 %dec, i32* %pos1, align 4
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %exs = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %7, i32 0, i32 0
  %8 = load %struct.exception*, %struct.exception** %exs, align 4
  %9 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos2 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %9, i32 0, i32 2
  %10 = load i32, i32* %pos2, align 4
  %arrayidx = getelementptr inbounds %struct.exception, %struct.exception* %8, i32 %10
  %what = getelementptr inbounds %struct.exception, %struct.exception* %arrayidx, i32 0, i32 1
  %arraydecay = getelementptr inbounds [128 x i8], [128 x i8]* %what, i32 0, i32 0
  %11 = load i8*, i8** %msg.addr, align 4
  %call3 = call i32 (i8*, i32, i8*, ...) @snprintf(i8* %arraydecay, i32 128, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i8* %11)
  %12 = load i32, i32* %extype.addr, align 4
  %13 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %exs4 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %13, i32 0, i32 0
  %14 = load %struct.exception*, %struct.exception** %exs4, align 4
  %15 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos5 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %15, i32 0, i32 2
  %16 = load i32, i32* %pos5, align 4
  %arrayidx6 = getelementptr inbounds %struct.exception, %struct.exception* %14, i32 %16
  %extype7 = getelementptr inbounds %struct.exception, %struct.exception* %arrayidx6, i32 0, i32 0
  store i32 %12, i32* %extype7, align 4
  ret i32 -1
}

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #1

declare i32 @snprintf(i8* %0, i32 %1, i8* %2, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @baz(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call = call i32 @Push_Ex(%struct.exception_ctx* %1, i32 10, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.2, i32 0, i32 0))
  br label %return

if.else:                                          ; preds = %entry
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call1 = call i32 @Push_Ex(%struct.exception_ctx* %2, i32 11, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.3, i32 0, i32 0))
  br label %return

return:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @bar(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.4, i32 0, i32 0))
  %1 = load i32, i32* %n.addr, align 4
  call void @baz(i32 %1)
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call1 = call i32 @Has_Ex(%struct.exception_ctx* %2)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %bar_cleanup

if.end:                                           ; preds = %entry
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.5, i32 0, i32 0))
  br label %bar_cleanup

bar_cleanup:                                      ; preds = %if.end, %if.then
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i32 0, i32 0))
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @foo() #0 {
entry:
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.7, i32 0, i32 0))
  call void @bar(i32 0)
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %1 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call1 = call i32 @Is_Ex_Type(%struct.exception_ctx* %1, i32 10)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %3 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call2 = call i8* @Get_What(%struct.exception_ctx* %3)
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.8, i32 0, i32 0), i8* %call2)
  %4 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  call void @Pop_Ex(%struct.exception_ctx* %4)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %5 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call4 = call i32 @Has_Ex(%struct.exception_ctx* %5)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.then, label %if.end

if.then:                                          ; preds = %while.end
  br label %return

if.end:                                           ; preds = %while.end
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.9, i32 0, i32 0))
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.10, i32 0, i32 0))
  call void @bar(i32 1)
  br label %while.cond8

while.cond8:                                      ; preds = %while.body11, %if.end
  %8 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call9 = call i32 @Is_Ex_Type(%struct.exception_ctx* %8, i32 10)
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %while.body11, label %while.end14

while.body11:                                     ; preds = %while.cond8
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %10 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call12 = call i8* @Get_What(%struct.exception_ctx* %10)
  %call13 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.8, i32 0, i32 0), i8* %call12)
  %11 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  call void @Pop_Ex(%struct.exception_ctx* %11)
  br label %while.cond8

while.end14:                                      ; preds = %while.cond8
  %12 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call15 = call i32 @Has_Ex(%struct.exception_ctx* %12)
  %tobool16 = icmp ne i32 %call15, 0
  br i1 %tobool16, label %if.then17, label %if.end18

if.then17:                                        ; preds = %while.end14
  br label %return

if.end18:                                         ; preds = %while.end14
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call19 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.9, i32 0, i32 0))
  br label %return

return:                                           ; preds = %if.end18, %if.then17, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %ctx = alloca %struct.exception_ctx*, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  %call = call %struct.exception_ctx* @Create_Ex_Ctx(i32 5)
  store %struct.exception_ctx* %call, %struct.exception_ctx** %ctx, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  store %struct.exception_ctx* %0, %struct.exception_ctx** @GLOBALEX, align 4
  call void @foo()
  %1 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %call1 = call i32 @Has_Ex(%struct.exception_ctx* %1)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %main_ex

if.end:                                           ; preds = %entry
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.11, i32 0, i32 0))
  br label %main_ex

main_ex:                                          ; preds = %if.end, %if.then
  br label %while.cond

while.cond:                                       ; preds = %while.body, %main_ex
  %3 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %call3 = call i32 @Has_Ex(%struct.exception_ctx* %3)
  %tobool4 = icmp ne i32 %call3, 0
  br i1 %tobool4, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %5 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %call5 = call i8* @Get_What(%struct.exception_ctx* %5)
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.12, i32 0, i32 0), i8* %call5)
  %6 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  call void @Pop_Ex(%struct.exception_ctx* %6)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %7 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  call void @Free_Ex_Ctx(%struct.exception_ctx* %7)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for Free_Ex_Ctx()

; entering Souper's runOnFunction() for Has_Ex()

; ModuleID = './Exceptions-Catch_an_exception_thrown_in_a_nested_call.c.bc'
source_filename = "./Exceptions-Catch_an_exception_thrown_in_a_nested_call.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque
%struct.exception_ctx = type { %struct.exception*, i32, i32 }
%struct.exception = type { i32, [128 x i8] }

@stderr = external constant %struct._IO_FILE*, align 4
@.str = private unnamed_addr constant [43 x i8] c"*** Error: Overflow in exception context.\0A\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@GLOBALEX = hidden global %struct.exception_ctx* null, align 4
@.str.2 = private unnamed_addr constant [48 x i8] c"U0 Drink Error. Insufficient drinks in bar Baz.\00", align 1
@.str.3 = private unnamed_addr constant [62 x i8] c"U1 Bartender Error. Bartender kicked customer out of bar Baz.\00", align 1
@stdout = external constant %struct._IO_FILE*, align 4
@.str.4 = private unnamed_addr constant [19 x i8] c"Bar door is open.\0A\00", align 1
@.str.5 = private unnamed_addr constant [37 x i8] c"Baz has been called without errors.\0A\00", align 1
@.str.6 = private unnamed_addr constant [21 x i8] c"Bar door is closed.\0A\00", align 1
@.str.7 = private unnamed_addr constant [19 x i8] c"Foo entering bar.\0A\00", align 1
@.str.8 = private unnamed_addr constant [82 x i8] c"I am foo() and I deaall wrth U0 DriNk Errors with my own bottle... GOT oNE! [%s]\0A\00", align 1
@.str.9 = private unnamed_addr constant [19 x i8] c"Foo left the bar.\0A\00", align 1
@.str.10 = private unnamed_addr constant [25 x i8] c"Foo entering bar again.\0A\00", align 1
@.str.11 = private unnamed_addr constant [24 x i8] c"No errors encountered.\0A\00", align 1
@.str.12 = private unnamed_addr constant [15 x i8] c"*** Error: %s\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden %struct.exception_ctx* @Create_Ex_Ctx(i32 %length) #0 {
entry:
  %retval = alloca %struct.exception_ctx*, align 4
  %length.addr = alloca i32, align 4
  %safety = alloca i32, align 4
  %tmp = alloca i8*, align 4
  %ctx = alloca %struct.exception_ctx*, align 4
  store i32 %length, i32* %length.addr, align 4
  store i32 8, i32* %safety, align 4
  %0 = load i32, i32* %length.addr, align 4
  %mul = mul i32 132, %0
  %add = add i32 20, %mul
  %call = call noalias i8* @malloc(i32 %add)
  store i8* %call, i8** %tmp, align 4
  %1 = load i8*, i8** %tmp, align 4
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct.exception_ctx* null, %struct.exception_ctx** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %tmp, align 4
  %3 = bitcast i8* %2 to %struct.exception_ctx*
  store %struct.exception_ctx* %3, %struct.exception_ctx** %ctx, align 4
  %4 = load i32, i32* %length.addr, align 4
  %5 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %size = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %5, i32 0, i32 1
  store i32 %4, i32* %size, align 4
  %6 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %6, i32 0, i32 2
  store i32 -1, i32* %pos, align 4
  %7 = load i8*, i8** %tmp, align 4
  %add.ptr = getelementptr inbounds i8, i8* %7, i32 12
  %8 = bitcast i8* %add.ptr to %struct.exception*
  %9 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %exs = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %9, i32 0, i32 0
  store %struct.exception* %8, %struct.exception** %exs, align 4
  %10 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  store %struct.exception_ctx* %10, %struct.exception_ctx** %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %11 = load %struct.exception_ctx*, %struct.exception_ctx** %retval, align 4
  ret %struct.exception_ctx* %11
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @Free_Ex_Ctx(%struct.exception_ctx* %ctx) #0 {
entry:
  %ctx.addr = alloca %struct.exception_ctx*, align 4
  store %struct.exception_ctx* %ctx, %struct.exception_ctx** %ctx.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %1 = bitcast %struct.exception_ctx* %0 to i8*
  call void @free(i8* %1)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @Has_Ex(%struct.exception_ctx* %ctx) #0 {
entry:
  %ctx.addr = alloca %struct.exception_ctx*, align 4
  store %struct.exception_ctx* %ctx, %struct.exception_ctx** %ctx.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %0, i32 0, i32 2
  %1 = load i32, i32* %pos, align 4
  %cmp = icmp sge i32 %1, 0
  %2 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i32 1, i32 0
  ret i32 %cond
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @Is_Ex_Type(%struct.exception_ctx* %exctx, i32 %extype) #0 {
entry:
  %exctx.addr = alloca %struct.exception_ctx*, align 4
  %extype.addr = alloca i32, align 4
  store %struct.exception_ctx* %exctx, %struct.exception_ctx** %exctx.addr, align 4
  store i32 %extype, i32* %extype.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %0, i32 0, i32 2
  %1 = load i32, i32* %pos, align 4
  %cmp = icmp sge i32 %1, 0
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %exs = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %2, i32 0, i32 0
  %3 = load %struct.exception*, %struct.exception** %exs, align 4
  %4 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos1 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %4, i32 0, i32 2
  %5 = load i32, i32* %pos1, align 4
  %arrayidx = getelementptr inbounds %struct.exception, %struct.exception* %3, i32 %5
  %extype2 = getelementptr inbounds %struct.exception, %struct.exception* %arrayidx, i32 0, i32 0
  %6 = load i32, i32* %extype2, align 4
  %7 = load i32, i32* %extype.addr, align 4
  %cmp3 = icmp eq i32 %6, %7
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %8 = phi i1 [ false, %entry ], [ %cmp3, %land.rhs ]
  %9 = zext i1 %8 to i64
  %cond = select i1 %8, i32 1, i32 0
  ret i32 %cond
}

; Function Attrs: noinline nounwind optnone
define hidden void @Pop_Ex(%struct.exception_ctx* %ctx) #0 {
entry:
  %ctx.addr = alloca %struct.exception_ctx*, align 4
  store %struct.exception_ctx* %ctx, %struct.exception_ctx** %ctx.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %0, i32 0, i32 2
  %1 = load i32, i32* %pos, align 4
  %cmp = icmp sge i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %pos1 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %2, i32 0, i32 2
  %3 = load i32, i32* %pos1, align 4
  %dec = add nsw i32 %3, -1
  store i32 %dec, i32* %pos1, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @Get_What(%struct.exception_ctx* %ctx) #0 {
entry:
  %retval = alloca i8*, align 4
  %ctx.addr = alloca %struct.exception_ctx*, align 4
  store %struct.exception_ctx* %ctx, %struct.exception_ctx** %ctx.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %0, i32 0, i32 2
  %1 = load i32, i32* %pos, align 4
  %cmp = icmp sge i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %exs = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %2, i32 0, i32 0
  %3 = load %struct.exception*, %struct.exception** %exs, align 4
  %4 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %pos1 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %4, i32 0, i32 2
  %5 = load i32, i32* %pos1, align 4
  %arrayidx = getelementptr inbounds %struct.exception, %struct.exception* %3, i32 %5
  %what = getelementptr inbounds %struct.exception, %struct.exception* %arrayidx, i32 0, i32 1
  %arraydecay = getelementptr inbounds [128 x i8], [128 x i8]* %what, i32 0, i32 0
  store i8* %arraydecay, i8** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  store i8* null, i8** %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %6 = load i8*, i8** %retval, align 4
  ret i8* %6
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @Push_Ex(%struct.exception_ctx* %exctx, i32 %extype, i8* %msg) #0 {
entry:
  %exctx.addr = alloca %struct.exception_ctx*, align 4
  %extype.addr = alloca i32, align 4
  %msg.addr = alloca i8*, align 4
  store %struct.exception_ctx* %exctx, %struct.exception_ctx** %exctx.addr, align 4
  store i32 %extype, i32* %extype.addr, align 4
  store i8* %msg, i8** %msg.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %0, i32 0, i32 2
  %1 = load i32, i32* %pos, align 4
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* %pos, align 4
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %size = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %2, i32 0, i32 1
  %3 = load i32, i32* %size, align 4
  %cmp = icmp eq i32 %inc, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos1 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %4, i32 0, i32 2
  %5 = load i32, i32* %pos1, align 4
  %dec = add nsw i32 %5, -1
  store i32 %dec, i32* %pos1, align 4
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %exs = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %7, i32 0, i32 0
  %8 = load %struct.exception*, %struct.exception** %exs, align 4
  %9 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos2 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %9, i32 0, i32 2
  %10 = load i32, i32* %pos2, align 4
  %arrayidx = getelementptr inbounds %struct.exception, %struct.exception* %8, i32 %10
  %what = getelementptr inbounds %struct.exception, %struct.exception* %arrayidx, i32 0, i32 1
  %arraydecay = getelementptr inbounds [128 x i8], [128 x i8]* %what, i32 0, i32 0
  %11 = load i8*, i8** %msg.addr, align 4
  %call3 = call i32 (i8*, i32, i8*, ...) @snprintf(i8* %arraydecay, i32 128, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i8* %11)
  %12 = load i32, i32* %extype.addr, align 4
  %13 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %exs4 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %13, i32 0, i32 0
  %14 = load %struct.exception*, %struct.exception** %exs4, align 4
  %15 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos5 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %15, i32 0, i32 2
  %16 = load i32, i32* %pos5, align 4
  %arrayidx6 = getelementptr inbounds %struct.exception, %struct.exception* %14, i32 %16
  %extype7 = getelementptr inbounds %struct.exception, %struct.exception* %arrayidx6, i32 0, i32 0
  store i32 %12, i32* %extype7, align 4
  ret i32 -1
}

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #1

declare i32 @snprintf(i8* %0, i32 %1, i8* %2, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @baz(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call = call i32 @Push_Ex(%struct.exception_ctx* %1, i32 10, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.2, i32 0, i32 0))
  br label %return

if.else:                                          ; preds = %entry
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call1 = call i32 @Push_Ex(%struct.exception_ctx* %2, i32 11, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.3, i32 0, i32 0))
  br label %return

return:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @bar(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.4, i32 0, i32 0))
  %1 = load i32, i32* %n.addr, align 4
  call void @baz(i32 %1)
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call1 = call i32 @Has_Ex(%struct.exception_ctx* %2)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %bar_cleanup

if.end:                                           ; preds = %entry
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.5, i32 0, i32 0))
  br label %bar_cleanup

bar_cleanup:                                      ; preds = %if.end, %if.then
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i32 0, i32 0))
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @foo() #0 {
entry:
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.7, i32 0, i32 0))
  call void @bar(i32 0)
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %1 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call1 = call i32 @Is_Ex_Type(%struct.exception_ctx* %1, i32 10)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %3 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call2 = call i8* @Get_What(%struct.exception_ctx* %3)
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.8, i32 0, i32 0), i8* %call2)
  %4 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  call void @Pop_Ex(%struct.exception_ctx* %4)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %5 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call4 = call i32 @Has_Ex(%struct.exception_ctx* %5)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.then, label %if.end

if.then:                                          ; preds = %while.end
  br label %return

if.end:                                           ; preds = %while.end
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.9, i32 0, i32 0))
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.10, i32 0, i32 0))
  call void @bar(i32 1)
  br label %while.cond8

while.cond8:                                      ; preds = %while.body11, %if.end
  %8 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call9 = call i32 @Is_Ex_Type(%struct.exception_ctx* %8, i32 10)
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %while.body11, label %while.end14

while.body11:                                     ; preds = %while.cond8
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %10 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call12 = call i8* @Get_What(%struct.exception_ctx* %10)
  %call13 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.8, i32 0, i32 0), i8* %call12)
  %11 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  call void @Pop_Ex(%struct.exception_ctx* %11)
  br label %while.cond8

while.end14:                                      ; preds = %while.cond8
  %12 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call15 = call i32 @Has_Ex(%struct.exception_ctx* %12)
  %tobool16 = icmp ne i32 %call15, 0
  br i1 %tobool16, label %if.then17, label %if.end18

if.then17:                                        ; preds = %while.end14
  br label %return

if.end18:                                         ; preds = %while.end14
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call19 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.9, i32 0, i32 0))
  br label %return

return:                                           ; preds = %if.end18, %if.then17, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %ctx = alloca %struct.exception_ctx*, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  %call = call %struct.exception_ctx* @Create_Ex_Ctx(i32 5)
  store %struct.exception_ctx* %call, %struct.exception_ctx** %ctx, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  store %struct.exception_ctx* %0, %struct.exception_ctx** @GLOBALEX, align 4
  call void @foo()
  %1 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %call1 = call i32 @Has_Ex(%struct.exception_ctx* %1)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %main_ex

if.end:                                           ; preds = %entry
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.11, i32 0, i32 0))
  br label %main_ex

main_ex:                                          ; preds = %if.end, %if.then
  br label %while.cond

while.cond:                                       ; preds = %while.body, %main_ex
  %3 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %call3 = call i32 @Has_Ex(%struct.exception_ctx* %3)
  %tobool4 = icmp ne i32 %call3, 0
  br i1 %tobool4, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %5 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %call5 = call i8* @Get_What(%struct.exception_ctx* %5)
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.12, i32 0, i32 0), i8* %call5)
  %6 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  call void @Pop_Ex(%struct.exception_ctx* %6)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %7 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  call void @Free_Ex_Ctx(%struct.exception_ctx* %7)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %pos, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sge i32 %1, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cond = select i1 %cmp, i32 1, i32 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0 (hasExternalUses)
%2:i32 = select %1, 1:i32, 0:i32
infer %2
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle 0:i32, %0 (hasExternalUses)
%2:i32 = select %1, 1:i32, 0:i32
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for Has_Ex()

; entering Souper's runOnFunction() for Is_Ex_Type()

; ModuleID = './Exceptions-Catch_an_exception_thrown_in_a_nested_call.c.bc'
source_filename = "./Exceptions-Catch_an_exception_thrown_in_a_nested_call.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque
%struct.exception_ctx = type { %struct.exception*, i32, i32 }
%struct.exception = type { i32, [128 x i8] }

@stderr = external constant %struct._IO_FILE*, align 4
@.str = private unnamed_addr constant [43 x i8] c"*** Error: Overflow in exception context.\0A\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@GLOBALEX = hidden global %struct.exception_ctx* null, align 4
@.str.2 = private unnamed_addr constant [48 x i8] c"U0 Drink Error. Insufficient drinks in bar Baz.\00", align 1
@.str.3 = private unnamed_addr constant [62 x i8] c"U1 Bartender Error. Bartender kicked customer out of bar Baz.\00", align 1
@stdout = external constant %struct._IO_FILE*, align 4
@.str.4 = private unnamed_addr constant [19 x i8] c"Bar door is open.\0A\00", align 1
@.str.5 = private unnamed_addr constant [37 x i8] c"Baz has been called without errors.\0A\00", align 1
@.str.6 = private unnamed_addr constant [21 x i8] c"Bar door is closed.\0A\00", align 1
@.str.7 = private unnamed_addr constant [19 x i8] c"Foo entering bar.\0A\00", align 1
@.str.8 = private unnamed_addr constant [82 x i8] c"I am foo() and I deaall wrth U0 DriNk Errors with my own bottle... GOT oNE! [%s]\0A\00", align 1
@.str.9 = private unnamed_addr constant [19 x i8] c"Foo left the bar.\0A\00", align 1
@.str.10 = private unnamed_addr constant [25 x i8] c"Foo entering bar again.\0A\00", align 1
@.str.11 = private unnamed_addr constant [24 x i8] c"No errors encountered.\0A\00", align 1
@.str.12 = private unnamed_addr constant [15 x i8] c"*** Error: %s\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden %struct.exception_ctx* @Create_Ex_Ctx(i32 %length) #0 {
entry:
  %retval = alloca %struct.exception_ctx*, align 4
  %length.addr = alloca i32, align 4
  %safety = alloca i32, align 4
  %tmp = alloca i8*, align 4
  %ctx = alloca %struct.exception_ctx*, align 4
  store i32 %length, i32* %length.addr, align 4
  store i32 8, i32* %safety, align 4
  %0 = load i32, i32* %length.addr, align 4
  %mul = mul i32 132, %0
  %add = add i32 20, %mul
  %call = call noalias i8* @malloc(i32 %add)
  store i8* %call, i8** %tmp, align 4
  %1 = load i8*, i8** %tmp, align 4
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct.exception_ctx* null, %struct.exception_ctx** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %tmp, align 4
  %3 = bitcast i8* %2 to %struct.exception_ctx*
  store %struct.exception_ctx* %3, %struct.exception_ctx** %ctx, align 4
  %4 = load i32, i32* %length.addr, align 4
  %5 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %size = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %5, i32 0, i32 1
  store i32 %4, i32* %size, align 4
  %6 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %6, i32 0, i32 2
  store i32 -1, i32* %pos, align 4
  %7 = load i8*, i8** %tmp, align 4
  %add.ptr = getelementptr inbounds i8, i8* %7, i32 12
  %8 = bitcast i8* %add.ptr to %struct.exception*
  %9 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %exs = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %9, i32 0, i32 0
  store %struct.exception* %8, %struct.exception** %exs, align 4
  %10 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  store %struct.exception_ctx* %10, %struct.exception_ctx** %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %11 = load %struct.exception_ctx*, %struct.exception_ctx** %retval, align 4
  ret %struct.exception_ctx* %11
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @Free_Ex_Ctx(%struct.exception_ctx* %ctx) #0 {
entry:
  %ctx.addr = alloca %struct.exception_ctx*, align 4
  store %struct.exception_ctx* %ctx, %struct.exception_ctx** %ctx.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %1 = bitcast %struct.exception_ctx* %0 to i8*
  call void @free(i8* %1)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @Has_Ex(%struct.exception_ctx* %ctx) #0 {
entry:
  %ctx.addr = alloca %struct.exception_ctx*, align 4
  store %struct.exception_ctx* %ctx, %struct.exception_ctx** %ctx.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %0, i32 0, i32 2
  %1 = load i32, i32* %pos, align 4
  %cmp = icmp sge i32 %1, 0
  %2 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i32 1, i32 0
  ret i32 %cond
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @Is_Ex_Type(%struct.exception_ctx* %exctx, i32 %extype) #0 {
entry:
  %exctx.addr = alloca %struct.exception_ctx*, align 4
  %extype.addr = alloca i32, align 4
  store %struct.exception_ctx* %exctx, %struct.exception_ctx** %exctx.addr, align 4
  store i32 %extype, i32* %extype.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %0, i32 0, i32 2
  %1 = load i32, i32* %pos, align 4
  %cmp = icmp sge i32 %1, 0
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %exs = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %2, i32 0, i32 0
  %3 = load %struct.exception*, %struct.exception** %exs, align 4
  %4 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos1 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %4, i32 0, i32 2
  %5 = load i32, i32* %pos1, align 4
  %arrayidx = getelementptr inbounds %struct.exception, %struct.exception* %3, i32 %5
  %extype2 = getelementptr inbounds %struct.exception, %struct.exception* %arrayidx, i32 0, i32 0
  %6 = load i32, i32* %extype2, align 4
  %7 = load i32, i32* %extype.addr, align 4
  %cmp3 = icmp eq i32 %6, %7
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %8 = phi i1 [ false, %entry ], [ %cmp3, %land.rhs ]
  %9 = zext i1 %8 to i64
  %cond = select i1 %8, i32 1, i32 0
  ret i32 %cond
}

; Function Attrs: noinline nounwind optnone
define hidden void @Pop_Ex(%struct.exception_ctx* %ctx) #0 {
entry:
  %ctx.addr = alloca %struct.exception_ctx*, align 4
  store %struct.exception_ctx* %ctx, %struct.exception_ctx** %ctx.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %0, i32 0, i32 2
  %1 = load i32, i32* %pos, align 4
  %cmp = icmp sge i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %pos1 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %2, i32 0, i32 2
  %3 = load i32, i32* %pos1, align 4
  %dec = add nsw i32 %3, -1
  store i32 %dec, i32* %pos1, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @Get_What(%struct.exception_ctx* %ctx) #0 {
entry:
  %retval = alloca i8*, align 4
  %ctx.addr = alloca %struct.exception_ctx*, align 4
  store %struct.exception_ctx* %ctx, %struct.exception_ctx** %ctx.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %0, i32 0, i32 2
  %1 = load i32, i32* %pos, align 4
  %cmp = icmp sge i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %exs = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %2, i32 0, i32 0
  %3 = load %struct.exception*, %struct.exception** %exs, align 4
  %4 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %pos1 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %4, i32 0, i32 2
  %5 = load i32, i32* %pos1, align 4
  %arrayidx = getelementptr inbounds %struct.exception, %struct.exception* %3, i32 %5
  %what = getelementptr inbounds %struct.exception, %struct.exception* %arrayidx, i32 0, i32 1
  %arraydecay = getelementptr inbounds [128 x i8], [128 x i8]* %what, i32 0, i32 0
  store i8* %arraydecay, i8** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  store i8* null, i8** %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %6 = load i8*, i8** %retval, align 4
  ret i8* %6
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @Push_Ex(%struct.exception_ctx* %exctx, i32 %extype, i8* %msg) #0 {
entry:
  %exctx.addr = alloca %struct.exception_ctx*, align 4
  %extype.addr = alloca i32, align 4
  %msg.addr = alloca i8*, align 4
  store %struct.exception_ctx* %exctx, %struct.exception_ctx** %exctx.addr, align 4
  store i32 %extype, i32* %extype.addr, align 4
  store i8* %msg, i8** %msg.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %0, i32 0, i32 2
  %1 = load i32, i32* %pos, align 4
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* %pos, align 4
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %size = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %2, i32 0, i32 1
  %3 = load i32, i32* %size, align 4
  %cmp = icmp eq i32 %inc, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos1 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %4, i32 0, i32 2
  %5 = load i32, i32* %pos1, align 4
  %dec = add nsw i32 %5, -1
  store i32 %dec, i32* %pos1, align 4
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %exs = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %7, i32 0, i32 0
  %8 = load %struct.exception*, %struct.exception** %exs, align 4
  %9 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos2 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %9, i32 0, i32 2
  %10 = load i32, i32* %pos2, align 4
  %arrayidx = getelementptr inbounds %struct.exception, %struct.exception* %8, i32 %10
  %what = getelementptr inbounds %struct.exception, %struct.exception* %arrayidx, i32 0, i32 1
  %arraydecay = getelementptr inbounds [128 x i8], [128 x i8]* %what, i32 0, i32 0
  %11 = load i8*, i8** %msg.addr, align 4
  %call3 = call i32 (i8*, i32, i8*, ...) @snprintf(i8* %arraydecay, i32 128, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i8* %11)
  %12 = load i32, i32* %extype.addr, align 4
  %13 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %exs4 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %13, i32 0, i32 0
  %14 = load %struct.exception*, %struct.exception** %exs4, align 4
  %15 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos5 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %15, i32 0, i32 2
  %16 = load i32, i32* %pos5, align 4
  %arrayidx6 = getelementptr inbounds %struct.exception, %struct.exception* %14, i32 %16
  %extype7 = getelementptr inbounds %struct.exception, %struct.exception* %arrayidx6, i32 0, i32 0
  store i32 %12, i32* %extype7, align 4
  ret i32 -1
}

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #1

declare i32 @snprintf(i8* %0, i32 %1, i8* %2, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @baz(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call = call i32 @Push_Ex(%struct.exception_ctx* %1, i32 10, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.2, i32 0, i32 0))
  br label %return

if.else:                                          ; preds = %entry
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call1 = call i32 @Push_Ex(%struct.exception_ctx* %2, i32 11, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.3, i32 0, i32 0))
  br label %return

return:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @bar(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.4, i32 0, i32 0))
  %1 = load i32, i32* %n.addr, align 4
  call void @baz(i32 %1)
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call1 = call i32 @Has_Ex(%struct.exception_ctx* %2)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %bar_cleanup

if.end:                                           ; preds = %entry
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.5, i32 0, i32 0))
  br label %bar_cleanup

bar_cleanup:                                      ; preds = %if.end, %if.then
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i32 0, i32 0))
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @foo() #0 {
entry:
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.7, i32 0, i32 0))
  call void @bar(i32 0)
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %1 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call1 = call i32 @Is_Ex_Type(%struct.exception_ctx* %1, i32 10)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %3 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call2 = call i8* @Get_What(%struct.exception_ctx* %3)
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.8, i32 0, i32 0), i8* %call2)
  %4 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  call void @Pop_Ex(%struct.exception_ctx* %4)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %5 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call4 = call i32 @Has_Ex(%struct.exception_ctx* %5)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.then, label %if.end

if.then:                                          ; preds = %while.end
  br label %return

if.end:                                           ; preds = %while.end
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.9, i32 0, i32 0))
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.10, i32 0, i32 0))
  call void @bar(i32 1)
  br label %while.cond8

while.cond8:                                      ; preds = %while.body11, %if.end
  %8 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call9 = call i32 @Is_Ex_Type(%struct.exception_ctx* %8, i32 10)
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %while.body11, label %while.end14

while.body11:                                     ; preds = %while.cond8
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %10 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call12 = call i8* @Get_What(%struct.exception_ctx* %10)
  %call13 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.8, i32 0, i32 0), i8* %call12)
  %11 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  call void @Pop_Ex(%struct.exception_ctx* %11)
  br label %while.cond8

while.end14:                                      ; preds = %while.cond8
  %12 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call15 = call i32 @Has_Ex(%struct.exception_ctx* %12)
  %tobool16 = icmp ne i32 %call15, 0
  br i1 %tobool16, label %if.then17, label %if.end18

if.then17:                                        ; preds = %while.end14
  br label %return

if.end18:                                         ; preds = %while.end14
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call19 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.9, i32 0, i32 0))
  br label %return

return:                                           ; preds = %if.end18, %if.then17, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %ctx = alloca %struct.exception_ctx*, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  %call = call %struct.exception_ctx* @Create_Ex_Ctx(i32 5)
  store %struct.exception_ctx* %call, %struct.exception_ctx** %ctx, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  store %struct.exception_ctx* %0, %struct.exception_ctx** @GLOBALEX, align 4
  call void @foo()
  %1 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %call1 = call i32 @Has_Ex(%struct.exception_ctx* %1)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %main_ex

if.end:                                           ; preds = %entry
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.11, i32 0, i32 0))
  br label %main_ex

main_ex:                                          ; preds = %if.end, %if.then
  br label %while.cond

while.cond:                                       ; preds = %while.body, %main_ex
  %3 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %call3 = call i32 @Has_Ex(%struct.exception_ctx* %3)
  %tobool4 = icmp ne i32 %call3, 0
  br i1 %tobool4, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %5 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %call5 = call i8* @Get_What(%struct.exception_ctx* %5)
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.12, i32 0, i32 0), i8* %call5)
  %6 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  call void @Pop_Ex(%struct.exception_ctx* %6)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %7 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  call void @Free_Ex_Ctx(%struct.exception_ctx* %7)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %pos, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sge i32 %1, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %pos1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %extype2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %extype.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp3 = icmp eq i32 %6, %7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %8 = phi i1 [ false, %entry ], [ %cmp3, %land.rhs ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i1 = eq %1, %2
%4:i1 = phi %0, 0:i1, %3
infer %4

; *****
; For LLVM instruction:
;  %cond = select i1 %8, i32 1, i32 0
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i1 = eq %1, %2
%4:i1 = phi %0, 0:i1, %3
%5:i32 = select %4, 1:i32, 0:i32
infer %5
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i1 = eq %1, %2
%4:i1 = phi %0, 0:i1, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i1 = eq %1, %2
%4:i1 = phi %0, 0:i1, %3
%5:i32 = select %4, 1:i32, 0:i32
infer %5


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for Is_Ex_Type()

; entering Souper's runOnFunction() for Pop_Ex()

; ModuleID = './Exceptions-Catch_an_exception_thrown_in_a_nested_call.c.bc'
source_filename = "./Exceptions-Catch_an_exception_thrown_in_a_nested_call.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque
%struct.exception_ctx = type { %struct.exception*, i32, i32 }
%struct.exception = type { i32, [128 x i8] }

@stderr = external constant %struct._IO_FILE*, align 4
@.str = private unnamed_addr constant [43 x i8] c"*** Error: Overflow in exception context.\0A\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@GLOBALEX = hidden global %struct.exception_ctx* null, align 4
@.str.2 = private unnamed_addr constant [48 x i8] c"U0 Drink Error. Insufficient drinks in bar Baz.\00", align 1
@.str.3 = private unnamed_addr constant [62 x i8] c"U1 Bartender Error. Bartender kicked customer out of bar Baz.\00", align 1
@stdout = external constant %struct._IO_FILE*, align 4
@.str.4 = private unnamed_addr constant [19 x i8] c"Bar door is open.\0A\00", align 1
@.str.5 = private unnamed_addr constant [37 x i8] c"Baz has been called without errors.\0A\00", align 1
@.str.6 = private unnamed_addr constant [21 x i8] c"Bar door is closed.\0A\00", align 1
@.str.7 = private unnamed_addr constant [19 x i8] c"Foo entering bar.\0A\00", align 1
@.str.8 = private unnamed_addr constant [82 x i8] c"I am foo() and I deaall wrth U0 DriNk Errors with my own bottle... GOT oNE! [%s]\0A\00", align 1
@.str.9 = private unnamed_addr constant [19 x i8] c"Foo left the bar.\0A\00", align 1
@.str.10 = private unnamed_addr constant [25 x i8] c"Foo entering bar again.\0A\00", align 1
@.str.11 = private unnamed_addr constant [24 x i8] c"No errors encountered.\0A\00", align 1
@.str.12 = private unnamed_addr constant [15 x i8] c"*** Error: %s\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden %struct.exception_ctx* @Create_Ex_Ctx(i32 %length) #0 {
entry:
  %retval = alloca %struct.exception_ctx*, align 4
  %length.addr = alloca i32, align 4
  %safety = alloca i32, align 4
  %tmp = alloca i8*, align 4
  %ctx = alloca %struct.exception_ctx*, align 4
  store i32 %length, i32* %length.addr, align 4
  store i32 8, i32* %safety, align 4
  %0 = load i32, i32* %length.addr, align 4
  %mul = mul i32 132, %0
  %add = add i32 20, %mul
  %call = call noalias i8* @malloc(i32 %add)
  store i8* %call, i8** %tmp, align 4
  %1 = load i8*, i8** %tmp, align 4
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct.exception_ctx* null, %struct.exception_ctx** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %tmp, align 4
  %3 = bitcast i8* %2 to %struct.exception_ctx*
  store %struct.exception_ctx* %3, %struct.exception_ctx** %ctx, align 4
  %4 = load i32, i32* %length.addr, align 4
  %5 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %size = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %5, i32 0, i32 1
  store i32 %4, i32* %size, align 4
  %6 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %6, i32 0, i32 2
  store i32 -1, i32* %pos, align 4
  %7 = load i8*, i8** %tmp, align 4
  %add.ptr = getelementptr inbounds i8, i8* %7, i32 12
  %8 = bitcast i8* %add.ptr to %struct.exception*
  %9 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %exs = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %9, i32 0, i32 0
  store %struct.exception* %8, %struct.exception** %exs, align 4
  %10 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  store %struct.exception_ctx* %10, %struct.exception_ctx** %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %11 = load %struct.exception_ctx*, %struct.exception_ctx** %retval, align 4
  ret %struct.exception_ctx* %11
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @Free_Ex_Ctx(%struct.exception_ctx* %ctx) #0 {
entry:
  %ctx.addr = alloca %struct.exception_ctx*, align 4
  store %struct.exception_ctx* %ctx, %struct.exception_ctx** %ctx.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %1 = bitcast %struct.exception_ctx* %0 to i8*
  call void @free(i8* %1)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @Has_Ex(%struct.exception_ctx* %ctx) #0 {
entry:
  %ctx.addr = alloca %struct.exception_ctx*, align 4
  store %struct.exception_ctx* %ctx, %struct.exception_ctx** %ctx.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %0, i32 0, i32 2
  %1 = load i32, i32* %pos, align 4
  %cmp = icmp sge i32 %1, 0
  %2 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i32 1, i32 0
  ret i32 %cond
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @Is_Ex_Type(%struct.exception_ctx* %exctx, i32 %extype) #0 {
entry:
  %exctx.addr = alloca %struct.exception_ctx*, align 4
  %extype.addr = alloca i32, align 4
  store %struct.exception_ctx* %exctx, %struct.exception_ctx** %exctx.addr, align 4
  store i32 %extype, i32* %extype.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %0, i32 0, i32 2
  %1 = load i32, i32* %pos, align 4
  %cmp = icmp sge i32 %1, 0
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %exs = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %2, i32 0, i32 0
  %3 = load %struct.exception*, %struct.exception** %exs, align 4
  %4 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos1 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %4, i32 0, i32 2
  %5 = load i32, i32* %pos1, align 4
  %arrayidx = getelementptr inbounds %struct.exception, %struct.exception* %3, i32 %5
  %extype2 = getelementptr inbounds %struct.exception, %struct.exception* %arrayidx, i32 0, i32 0
  %6 = load i32, i32* %extype2, align 4
  %7 = load i32, i32* %extype.addr, align 4
  %cmp3 = icmp eq i32 %6, %7
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %8 = phi i1 [ false, %entry ], [ %cmp3, %land.rhs ]
  %9 = zext i1 %8 to i64
  %cond = select i1 %8, i32 1, i32 0
  ret i32 %cond
}

; Function Attrs: noinline nounwind optnone
define hidden void @Pop_Ex(%struct.exception_ctx* %ctx) #0 {
entry:
  %ctx.addr = alloca %struct.exception_ctx*, align 4
  store %struct.exception_ctx* %ctx, %struct.exception_ctx** %ctx.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %0, i32 0, i32 2
  %1 = load i32, i32* %pos, align 4
  %cmp = icmp sge i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %pos1 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %2, i32 0, i32 2
  %3 = load i32, i32* %pos1, align 4
  %dec = add nsw i32 %3, -1
  store i32 %dec, i32* %pos1, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @Get_What(%struct.exception_ctx* %ctx) #0 {
entry:
  %retval = alloca i8*, align 4
  %ctx.addr = alloca %struct.exception_ctx*, align 4
  store %struct.exception_ctx* %ctx, %struct.exception_ctx** %ctx.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %0, i32 0, i32 2
  %1 = load i32, i32* %pos, align 4
  %cmp = icmp sge i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %exs = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %2, i32 0, i32 0
  %3 = load %struct.exception*, %struct.exception** %exs, align 4
  %4 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %pos1 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %4, i32 0, i32 2
  %5 = load i32, i32* %pos1, align 4
  %arrayidx = getelementptr inbounds %struct.exception, %struct.exception* %3, i32 %5
  %what = getelementptr inbounds %struct.exception, %struct.exception* %arrayidx, i32 0, i32 1
  %arraydecay = getelementptr inbounds [128 x i8], [128 x i8]* %what, i32 0, i32 0
  store i8* %arraydecay, i8** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  store i8* null, i8** %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %6 = load i8*, i8** %retval, align 4
  ret i8* %6
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @Push_Ex(%struct.exception_ctx* %exctx, i32 %extype, i8* %msg) #0 {
entry:
  %exctx.addr = alloca %struct.exception_ctx*, align 4
  %extype.addr = alloca i32, align 4
  %msg.addr = alloca i8*, align 4
  store %struct.exception_ctx* %exctx, %struct.exception_ctx** %exctx.addr, align 4
  store i32 %extype, i32* %extype.addr, align 4
  store i8* %msg, i8** %msg.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %0, i32 0, i32 2
  %1 = load i32, i32* %pos, align 4
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* %pos, align 4
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %size = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %2, i32 0, i32 1
  %3 = load i32, i32* %size, align 4
  %cmp = icmp eq i32 %inc, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos1 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %4, i32 0, i32 2
  %5 = load i32, i32* %pos1, align 4
  %dec = add nsw i32 %5, -1
  store i32 %dec, i32* %pos1, align 4
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %exs = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %7, i32 0, i32 0
  %8 = load %struct.exception*, %struct.exception** %exs, align 4
  %9 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos2 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %9, i32 0, i32 2
  %10 = load i32, i32* %pos2, align 4
  %arrayidx = getelementptr inbounds %struct.exception, %struct.exception* %8, i32 %10
  %what = getelementptr inbounds %struct.exception, %struct.exception* %arrayidx, i32 0, i32 1
  %arraydecay = getelementptr inbounds [128 x i8], [128 x i8]* %what, i32 0, i32 0
  %11 = load i8*, i8** %msg.addr, align 4
  %call3 = call i32 (i8*, i32, i8*, ...) @snprintf(i8* %arraydecay, i32 128, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i8* %11)
  %12 = load i32, i32* %extype.addr, align 4
  %13 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %exs4 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %13, i32 0, i32 0
  %14 = load %struct.exception*, %struct.exception** %exs4, align 4
  %15 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos5 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %15, i32 0, i32 2
  %16 = load i32, i32* %pos5, align 4
  %arrayidx6 = getelementptr inbounds %struct.exception, %struct.exception* %14, i32 %16
  %extype7 = getelementptr inbounds %struct.exception, %struct.exception* %arrayidx6, i32 0, i32 0
  store i32 %12, i32* %extype7, align 4
  ret i32 -1
}

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #1

declare i32 @snprintf(i8* %0, i32 %1, i8* %2, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @baz(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call = call i32 @Push_Ex(%struct.exception_ctx* %1, i32 10, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.2, i32 0, i32 0))
  br label %return

if.else:                                          ; preds = %entry
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call1 = call i32 @Push_Ex(%struct.exception_ctx* %2, i32 11, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.3, i32 0, i32 0))
  br label %return

return:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @bar(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.4, i32 0, i32 0))
  %1 = load i32, i32* %n.addr, align 4
  call void @baz(i32 %1)
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call1 = call i32 @Has_Ex(%struct.exception_ctx* %2)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %bar_cleanup

if.end:                                           ; preds = %entry
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.5, i32 0, i32 0))
  br label %bar_cleanup

bar_cleanup:                                      ; preds = %if.end, %if.then
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i32 0, i32 0))
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @foo() #0 {
entry:
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.7, i32 0, i32 0))
  call void @bar(i32 0)
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %1 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call1 = call i32 @Is_Ex_Type(%struct.exception_ctx* %1, i32 10)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %3 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call2 = call i8* @Get_What(%struct.exception_ctx* %3)
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.8, i32 0, i32 0), i8* %call2)
  %4 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  call void @Pop_Ex(%struct.exception_ctx* %4)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %5 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call4 = call i32 @Has_Ex(%struct.exception_ctx* %5)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.then, label %if.end

if.then:                                          ; preds = %while.end
  br label %return

if.end:                                           ; preds = %while.end
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.9, i32 0, i32 0))
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.10, i32 0, i32 0))
  call void @bar(i32 1)
  br label %while.cond8

while.cond8:                                      ; preds = %while.body11, %if.end
  %8 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call9 = call i32 @Is_Ex_Type(%struct.exception_ctx* %8, i32 10)
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %while.body11, label %while.end14

while.body11:                                     ; preds = %while.cond8
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %10 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call12 = call i8* @Get_What(%struct.exception_ctx* %10)
  %call13 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.8, i32 0, i32 0), i8* %call12)
  %11 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  call void @Pop_Ex(%struct.exception_ctx* %11)
  br label %while.cond8

while.end14:                                      ; preds = %while.cond8
  %12 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call15 = call i32 @Has_Ex(%struct.exception_ctx* %12)
  %tobool16 = icmp ne i32 %call15, 0
  br i1 %tobool16, label %if.then17, label %if.end18

if.then17:                                        ; preds = %while.end14
  br label %return

if.end18:                                         ; preds = %while.end14
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call19 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.9, i32 0, i32 0))
  br label %return

return:                                           ; preds = %if.end18, %if.then17, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %ctx = alloca %struct.exception_ctx*, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  %call = call %struct.exception_ctx* @Create_Ex_Ctx(i32 5)
  store %struct.exception_ctx* %call, %struct.exception_ctx** %ctx, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  store %struct.exception_ctx* %0, %struct.exception_ctx** @GLOBALEX, align 4
  call void @foo()
  %1 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %call1 = call i32 @Has_Ex(%struct.exception_ctx* %1)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %main_ex

if.end:                                           ; preds = %entry
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.11, i32 0, i32 0))
  br label %main_ex

main_ex:                                          ; preds = %if.end, %if.then
  br label %while.cond

while.cond:                                       ; preds = %while.body, %main_ex
  %3 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %call3 = call i32 @Has_Ex(%struct.exception_ctx* %3)
  %tobool4 = icmp ne i32 %call3, 0
  br i1 %tobool4, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %5 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %call5 = call i8* @Get_What(%struct.exception_ctx* %5)
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.12, i32 0, i32 0), i8* %call5)
  %6 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  call void @Pop_Ex(%struct.exception_ctx* %6)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %7 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  call void @Free_Ex_Ctx(%struct.exception_ctx* %7)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %pos, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sge i32 %1, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %pos1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec = add nsw i32 %3, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for Pop_Ex()

; entering Souper's runOnFunction() for Get_What()

; ModuleID = './Exceptions-Catch_an_exception_thrown_in_a_nested_call.c.bc'
source_filename = "./Exceptions-Catch_an_exception_thrown_in_a_nested_call.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque
%struct.exception_ctx = type { %struct.exception*, i32, i32 }
%struct.exception = type { i32, [128 x i8] }

@stderr = external constant %struct._IO_FILE*, align 4
@.str = private unnamed_addr constant [43 x i8] c"*** Error: Overflow in exception context.\0A\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@GLOBALEX = hidden global %struct.exception_ctx* null, align 4
@.str.2 = private unnamed_addr constant [48 x i8] c"U0 Drink Error. Insufficient drinks in bar Baz.\00", align 1
@.str.3 = private unnamed_addr constant [62 x i8] c"U1 Bartender Error. Bartender kicked customer out of bar Baz.\00", align 1
@stdout = external constant %struct._IO_FILE*, align 4
@.str.4 = private unnamed_addr constant [19 x i8] c"Bar door is open.\0A\00", align 1
@.str.5 = private unnamed_addr constant [37 x i8] c"Baz has been called without errors.\0A\00", align 1
@.str.6 = private unnamed_addr constant [21 x i8] c"Bar door is closed.\0A\00", align 1
@.str.7 = private unnamed_addr constant [19 x i8] c"Foo entering bar.\0A\00", align 1
@.str.8 = private unnamed_addr constant [82 x i8] c"I am foo() and I deaall wrth U0 DriNk Errors with my own bottle... GOT oNE! [%s]\0A\00", align 1
@.str.9 = private unnamed_addr constant [19 x i8] c"Foo left the bar.\0A\00", align 1
@.str.10 = private unnamed_addr constant [25 x i8] c"Foo entering bar again.\0A\00", align 1
@.str.11 = private unnamed_addr constant [24 x i8] c"No errors encountered.\0A\00", align 1
@.str.12 = private unnamed_addr constant [15 x i8] c"*** Error: %s\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden %struct.exception_ctx* @Create_Ex_Ctx(i32 %length) #0 {
entry:
  %retval = alloca %struct.exception_ctx*, align 4
  %length.addr = alloca i32, align 4
  %safety = alloca i32, align 4
  %tmp = alloca i8*, align 4
  %ctx = alloca %struct.exception_ctx*, align 4
  store i32 %length, i32* %length.addr, align 4
  store i32 8, i32* %safety, align 4
  %0 = load i32, i32* %length.addr, align 4
  %mul = mul i32 132, %0
  %add = add i32 20, %mul
  %call = call noalias i8* @malloc(i32 %add)
  store i8* %call, i8** %tmp, align 4
  %1 = load i8*, i8** %tmp, align 4
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct.exception_ctx* null, %struct.exception_ctx** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %tmp, align 4
  %3 = bitcast i8* %2 to %struct.exception_ctx*
  store %struct.exception_ctx* %3, %struct.exception_ctx** %ctx, align 4
  %4 = load i32, i32* %length.addr, align 4
  %5 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %size = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %5, i32 0, i32 1
  store i32 %4, i32* %size, align 4
  %6 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %6, i32 0, i32 2
  store i32 -1, i32* %pos, align 4
  %7 = load i8*, i8** %tmp, align 4
  %add.ptr = getelementptr inbounds i8, i8* %7, i32 12
  %8 = bitcast i8* %add.ptr to %struct.exception*
  %9 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %exs = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %9, i32 0, i32 0
  store %struct.exception* %8, %struct.exception** %exs, align 4
  %10 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  store %struct.exception_ctx* %10, %struct.exception_ctx** %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %11 = load %struct.exception_ctx*, %struct.exception_ctx** %retval, align 4
  ret %struct.exception_ctx* %11
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @Free_Ex_Ctx(%struct.exception_ctx* %ctx) #0 {
entry:
  %ctx.addr = alloca %struct.exception_ctx*, align 4
  store %struct.exception_ctx* %ctx, %struct.exception_ctx** %ctx.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %1 = bitcast %struct.exception_ctx* %0 to i8*
  call void @free(i8* %1)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @Has_Ex(%struct.exception_ctx* %ctx) #0 {
entry:
  %ctx.addr = alloca %struct.exception_ctx*, align 4
  store %struct.exception_ctx* %ctx, %struct.exception_ctx** %ctx.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %0, i32 0, i32 2
  %1 = load i32, i32* %pos, align 4
  %cmp = icmp sge i32 %1, 0
  %2 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i32 1, i32 0
  ret i32 %cond
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @Is_Ex_Type(%struct.exception_ctx* %exctx, i32 %extype) #0 {
entry:
  %exctx.addr = alloca %struct.exception_ctx*, align 4
  %extype.addr = alloca i32, align 4
  store %struct.exception_ctx* %exctx, %struct.exception_ctx** %exctx.addr, align 4
  store i32 %extype, i32* %extype.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %0, i32 0, i32 2
  %1 = load i32, i32* %pos, align 4
  %cmp = icmp sge i32 %1, 0
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %exs = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %2, i32 0, i32 0
  %3 = load %struct.exception*, %struct.exception** %exs, align 4
  %4 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos1 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %4, i32 0, i32 2
  %5 = load i32, i32* %pos1, align 4
  %arrayidx = getelementptr inbounds %struct.exception, %struct.exception* %3, i32 %5
  %extype2 = getelementptr inbounds %struct.exception, %struct.exception* %arrayidx, i32 0, i32 0
  %6 = load i32, i32* %extype2, align 4
  %7 = load i32, i32* %extype.addr, align 4
  %cmp3 = icmp eq i32 %6, %7
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %8 = phi i1 [ false, %entry ], [ %cmp3, %land.rhs ]
  %9 = zext i1 %8 to i64
  %cond = select i1 %8, i32 1, i32 0
  ret i32 %cond
}

; Function Attrs: noinline nounwind optnone
define hidden void @Pop_Ex(%struct.exception_ctx* %ctx) #0 {
entry:
  %ctx.addr = alloca %struct.exception_ctx*, align 4
  store %struct.exception_ctx* %ctx, %struct.exception_ctx** %ctx.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %0, i32 0, i32 2
  %1 = load i32, i32* %pos, align 4
  %cmp = icmp sge i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %pos1 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %2, i32 0, i32 2
  %3 = load i32, i32* %pos1, align 4
  %dec = add nsw i32 %3, -1
  store i32 %dec, i32* %pos1, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @Get_What(%struct.exception_ctx* %ctx) #0 {
entry:
  %retval = alloca i8*, align 4
  %ctx.addr = alloca %struct.exception_ctx*, align 4
  store %struct.exception_ctx* %ctx, %struct.exception_ctx** %ctx.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %0, i32 0, i32 2
  %1 = load i32, i32* %pos, align 4
  %cmp = icmp sge i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %exs = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %2, i32 0, i32 0
  %3 = load %struct.exception*, %struct.exception** %exs, align 4
  %4 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %pos1 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %4, i32 0, i32 2
  %5 = load i32, i32* %pos1, align 4
  %arrayidx = getelementptr inbounds %struct.exception, %struct.exception* %3, i32 %5
  %what = getelementptr inbounds %struct.exception, %struct.exception* %arrayidx, i32 0, i32 1
  %arraydecay = getelementptr inbounds [128 x i8], [128 x i8]* %what, i32 0, i32 0
  store i8* %arraydecay, i8** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  store i8* null, i8** %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %6 = load i8*, i8** %retval, align 4
  ret i8* %6
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @Push_Ex(%struct.exception_ctx* %exctx, i32 %extype, i8* %msg) #0 {
entry:
  %exctx.addr = alloca %struct.exception_ctx*, align 4
  %extype.addr = alloca i32, align 4
  %msg.addr = alloca i8*, align 4
  store %struct.exception_ctx* %exctx, %struct.exception_ctx** %exctx.addr, align 4
  store i32 %extype, i32* %extype.addr, align 4
  store i8* %msg, i8** %msg.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %0, i32 0, i32 2
  %1 = load i32, i32* %pos, align 4
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* %pos, align 4
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %size = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %2, i32 0, i32 1
  %3 = load i32, i32* %size, align 4
  %cmp = icmp eq i32 %inc, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos1 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %4, i32 0, i32 2
  %5 = load i32, i32* %pos1, align 4
  %dec = add nsw i32 %5, -1
  store i32 %dec, i32* %pos1, align 4
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %exs = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %7, i32 0, i32 0
  %8 = load %struct.exception*, %struct.exception** %exs, align 4
  %9 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos2 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %9, i32 0, i32 2
  %10 = load i32, i32* %pos2, align 4
  %arrayidx = getelementptr inbounds %struct.exception, %struct.exception* %8, i32 %10
  %what = getelementptr inbounds %struct.exception, %struct.exception* %arrayidx, i32 0, i32 1
  %arraydecay = getelementptr inbounds [128 x i8], [128 x i8]* %what, i32 0, i32 0
  %11 = load i8*, i8** %msg.addr, align 4
  %call3 = call i32 (i8*, i32, i8*, ...) @snprintf(i8* %arraydecay, i32 128, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i8* %11)
  %12 = load i32, i32* %extype.addr, align 4
  %13 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %exs4 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %13, i32 0, i32 0
  %14 = load %struct.exception*, %struct.exception** %exs4, align 4
  %15 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos5 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %15, i32 0, i32 2
  %16 = load i32, i32* %pos5, align 4
  %arrayidx6 = getelementptr inbounds %struct.exception, %struct.exception* %14, i32 %16
  %extype7 = getelementptr inbounds %struct.exception, %struct.exception* %arrayidx6, i32 0, i32 0
  store i32 %12, i32* %extype7, align 4
  ret i32 -1
}

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #1

declare i32 @snprintf(i8* %0, i32 %1, i8* %2, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @baz(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call = call i32 @Push_Ex(%struct.exception_ctx* %1, i32 10, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.2, i32 0, i32 0))
  br label %return

if.else:                                          ; preds = %entry
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call1 = call i32 @Push_Ex(%struct.exception_ctx* %2, i32 11, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.3, i32 0, i32 0))
  br label %return

return:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @bar(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.4, i32 0, i32 0))
  %1 = load i32, i32* %n.addr, align 4
  call void @baz(i32 %1)
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call1 = call i32 @Has_Ex(%struct.exception_ctx* %2)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %bar_cleanup

if.end:                                           ; preds = %entry
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.5, i32 0, i32 0))
  br label %bar_cleanup

bar_cleanup:                                      ; preds = %if.end, %if.then
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i32 0, i32 0))
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @foo() #0 {
entry:
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.7, i32 0, i32 0))
  call void @bar(i32 0)
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %1 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call1 = call i32 @Is_Ex_Type(%struct.exception_ctx* %1, i32 10)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %3 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call2 = call i8* @Get_What(%struct.exception_ctx* %3)
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.8, i32 0, i32 0), i8* %call2)
  %4 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  call void @Pop_Ex(%struct.exception_ctx* %4)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %5 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call4 = call i32 @Has_Ex(%struct.exception_ctx* %5)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.then, label %if.end

if.then:                                          ; preds = %while.end
  br label %return

if.end:                                           ; preds = %while.end
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.9, i32 0, i32 0))
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.10, i32 0, i32 0))
  call void @bar(i32 1)
  br label %while.cond8

while.cond8:                                      ; preds = %while.body11, %if.end
  %8 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call9 = call i32 @Is_Ex_Type(%struct.exception_ctx* %8, i32 10)
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %while.body11, label %while.end14

while.body11:                                     ; preds = %while.cond8
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %10 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call12 = call i8* @Get_What(%struct.exception_ctx* %10)
  %call13 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.8, i32 0, i32 0), i8* %call12)
  %11 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  call void @Pop_Ex(%struct.exception_ctx* %11)
  br label %while.cond8

while.end14:                                      ; preds = %while.cond8
  %12 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call15 = call i32 @Has_Ex(%struct.exception_ctx* %12)
  %tobool16 = icmp ne i32 %call15, 0
  br i1 %tobool16, label %if.then17, label %if.end18

if.then17:                                        ; preds = %while.end14
  br label %return

if.end18:                                         ; preds = %while.end14
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call19 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.9, i32 0, i32 0))
  br label %return

return:                                           ; preds = %if.end18, %if.then17, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %ctx = alloca %struct.exception_ctx*, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  %call = call %struct.exception_ctx* @Create_Ex_Ctx(i32 5)
  store %struct.exception_ctx* %call, %struct.exception_ctx** %ctx, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  store %struct.exception_ctx* %0, %struct.exception_ctx** @GLOBALEX, align 4
  call void @foo()
  %1 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %call1 = call i32 @Has_Ex(%struct.exception_ctx* %1)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %main_ex

if.end:                                           ; preds = %entry
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.11, i32 0, i32 0))
  br label %main_ex

main_ex:                                          ; preds = %if.end, %if.then
  br label %while.cond

while.cond:                                       ; preds = %while.body, %main_ex
  %3 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %call3 = call i32 @Has_Ex(%struct.exception_ctx* %3)
  %tobool4 = icmp ne i32 %call3, 0
  br i1 %tobool4, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %5 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %call5 = call i8* @Get_What(%struct.exception_ctx* %5)
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.12, i32 0, i32 0), i8* %call5)
  %6 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  call void @Pop_Ex(%struct.exception_ctx* %6)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %7 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  call void @Free_Ex_Ctx(%struct.exception_ctx* %7)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %pos, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sge i32 %1, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %pos1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for Get_What()

; entering Souper's runOnFunction() for Push_Ex()

; ModuleID = './Exceptions-Catch_an_exception_thrown_in_a_nested_call.c.bc'
source_filename = "./Exceptions-Catch_an_exception_thrown_in_a_nested_call.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque
%struct.exception_ctx = type { %struct.exception*, i32, i32 }
%struct.exception = type { i32, [128 x i8] }

@stderr = external constant %struct._IO_FILE*, align 4
@.str = private unnamed_addr constant [43 x i8] c"*** Error: Overflow in exception context.\0A\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@GLOBALEX = hidden global %struct.exception_ctx* null, align 4
@.str.2 = private unnamed_addr constant [48 x i8] c"U0 Drink Error. Insufficient drinks in bar Baz.\00", align 1
@.str.3 = private unnamed_addr constant [62 x i8] c"U1 Bartender Error. Bartender kicked customer out of bar Baz.\00", align 1
@stdout = external constant %struct._IO_FILE*, align 4
@.str.4 = private unnamed_addr constant [19 x i8] c"Bar door is open.\0A\00", align 1
@.str.5 = private unnamed_addr constant [37 x i8] c"Baz has been called without errors.\0A\00", align 1
@.str.6 = private unnamed_addr constant [21 x i8] c"Bar door is closed.\0A\00", align 1
@.str.7 = private unnamed_addr constant [19 x i8] c"Foo entering bar.\0A\00", align 1
@.str.8 = private unnamed_addr constant [82 x i8] c"I am foo() and I deaall wrth U0 DriNk Errors with my own bottle... GOT oNE! [%s]\0A\00", align 1
@.str.9 = private unnamed_addr constant [19 x i8] c"Foo left the bar.\0A\00", align 1
@.str.10 = private unnamed_addr constant [25 x i8] c"Foo entering bar again.\0A\00", align 1
@.str.11 = private unnamed_addr constant [24 x i8] c"No errors encountered.\0A\00", align 1
@.str.12 = private unnamed_addr constant [15 x i8] c"*** Error: %s\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden %struct.exception_ctx* @Create_Ex_Ctx(i32 %length) #0 {
entry:
  %retval = alloca %struct.exception_ctx*, align 4
  %length.addr = alloca i32, align 4
  %safety = alloca i32, align 4
  %tmp = alloca i8*, align 4
  %ctx = alloca %struct.exception_ctx*, align 4
  store i32 %length, i32* %length.addr, align 4
  store i32 8, i32* %safety, align 4
  %0 = load i32, i32* %length.addr, align 4
  %mul = mul i32 132, %0
  %add = add i32 20, %mul
  %call = call noalias i8* @malloc(i32 %add)
  store i8* %call, i8** %tmp, align 4
  %1 = load i8*, i8** %tmp, align 4
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct.exception_ctx* null, %struct.exception_ctx** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %tmp, align 4
  %3 = bitcast i8* %2 to %struct.exception_ctx*
  store %struct.exception_ctx* %3, %struct.exception_ctx** %ctx, align 4
  %4 = load i32, i32* %length.addr, align 4
  %5 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %size = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %5, i32 0, i32 1
  store i32 %4, i32* %size, align 4
  %6 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %6, i32 0, i32 2
  store i32 -1, i32* %pos, align 4
  %7 = load i8*, i8** %tmp, align 4
  %add.ptr = getelementptr inbounds i8, i8* %7, i32 12
  %8 = bitcast i8* %add.ptr to %struct.exception*
  %9 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %exs = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %9, i32 0, i32 0
  store %struct.exception* %8, %struct.exception** %exs, align 4
  %10 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  store %struct.exception_ctx* %10, %struct.exception_ctx** %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %11 = load %struct.exception_ctx*, %struct.exception_ctx** %retval, align 4
  ret %struct.exception_ctx* %11
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @Free_Ex_Ctx(%struct.exception_ctx* %ctx) #0 {
entry:
  %ctx.addr = alloca %struct.exception_ctx*, align 4
  store %struct.exception_ctx* %ctx, %struct.exception_ctx** %ctx.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %1 = bitcast %struct.exception_ctx* %0 to i8*
  call void @free(i8* %1)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @Has_Ex(%struct.exception_ctx* %ctx) #0 {
entry:
  %ctx.addr = alloca %struct.exception_ctx*, align 4
  store %struct.exception_ctx* %ctx, %struct.exception_ctx** %ctx.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %0, i32 0, i32 2
  %1 = load i32, i32* %pos, align 4
  %cmp = icmp sge i32 %1, 0
  %2 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i32 1, i32 0
  ret i32 %cond
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @Is_Ex_Type(%struct.exception_ctx* %exctx, i32 %extype) #0 {
entry:
  %exctx.addr = alloca %struct.exception_ctx*, align 4
  %extype.addr = alloca i32, align 4
  store %struct.exception_ctx* %exctx, %struct.exception_ctx** %exctx.addr, align 4
  store i32 %extype, i32* %extype.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %0, i32 0, i32 2
  %1 = load i32, i32* %pos, align 4
  %cmp = icmp sge i32 %1, 0
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %exs = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %2, i32 0, i32 0
  %3 = load %struct.exception*, %struct.exception** %exs, align 4
  %4 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos1 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %4, i32 0, i32 2
  %5 = load i32, i32* %pos1, align 4
  %arrayidx = getelementptr inbounds %struct.exception, %struct.exception* %3, i32 %5
  %extype2 = getelementptr inbounds %struct.exception, %struct.exception* %arrayidx, i32 0, i32 0
  %6 = load i32, i32* %extype2, align 4
  %7 = load i32, i32* %extype.addr, align 4
  %cmp3 = icmp eq i32 %6, %7
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %8 = phi i1 [ false, %entry ], [ %cmp3, %land.rhs ]
  %9 = zext i1 %8 to i64
  %cond = select i1 %8, i32 1, i32 0
  ret i32 %cond
}

; Function Attrs: noinline nounwind optnone
define hidden void @Pop_Ex(%struct.exception_ctx* %ctx) #0 {
entry:
  %ctx.addr = alloca %struct.exception_ctx*, align 4
  store %struct.exception_ctx* %ctx, %struct.exception_ctx** %ctx.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %0, i32 0, i32 2
  %1 = load i32, i32* %pos, align 4
  %cmp = icmp sge i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %pos1 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %2, i32 0, i32 2
  %3 = load i32, i32* %pos1, align 4
  %dec = add nsw i32 %3, -1
  store i32 %dec, i32* %pos1, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @Get_What(%struct.exception_ctx* %ctx) #0 {
entry:
  %retval = alloca i8*, align 4
  %ctx.addr = alloca %struct.exception_ctx*, align 4
  store %struct.exception_ctx* %ctx, %struct.exception_ctx** %ctx.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %0, i32 0, i32 2
  %1 = load i32, i32* %pos, align 4
  %cmp = icmp sge i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %exs = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %2, i32 0, i32 0
  %3 = load %struct.exception*, %struct.exception** %exs, align 4
  %4 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %pos1 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %4, i32 0, i32 2
  %5 = load i32, i32* %pos1, align 4
  %arrayidx = getelementptr inbounds %struct.exception, %struct.exception* %3, i32 %5
  %what = getelementptr inbounds %struct.exception, %struct.exception* %arrayidx, i32 0, i32 1
  %arraydecay = getelementptr inbounds [128 x i8], [128 x i8]* %what, i32 0, i32 0
  store i8* %arraydecay, i8** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  store i8* null, i8** %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %6 = load i8*, i8** %retval, align 4
  ret i8* %6
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @Push_Ex(%struct.exception_ctx* %exctx, i32 %extype, i8* %msg) #0 {
entry:
  %exctx.addr = alloca %struct.exception_ctx*, align 4
  %extype.addr = alloca i32, align 4
  %msg.addr = alloca i8*, align 4
  store %struct.exception_ctx* %exctx, %struct.exception_ctx** %exctx.addr, align 4
  store i32 %extype, i32* %extype.addr, align 4
  store i8* %msg, i8** %msg.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %0, i32 0, i32 2
  %1 = load i32, i32* %pos, align 4
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* %pos, align 4
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %size = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %2, i32 0, i32 1
  %3 = load i32, i32* %size, align 4
  %cmp = icmp eq i32 %inc, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos1 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %4, i32 0, i32 2
  %5 = load i32, i32* %pos1, align 4
  %dec = add nsw i32 %5, -1
  store i32 %dec, i32* %pos1, align 4
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %exs = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %7, i32 0, i32 0
  %8 = load %struct.exception*, %struct.exception** %exs, align 4
  %9 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos2 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %9, i32 0, i32 2
  %10 = load i32, i32* %pos2, align 4
  %arrayidx = getelementptr inbounds %struct.exception, %struct.exception* %8, i32 %10
  %what = getelementptr inbounds %struct.exception, %struct.exception* %arrayidx, i32 0, i32 1
  %arraydecay = getelementptr inbounds [128 x i8], [128 x i8]* %what, i32 0, i32 0
  %11 = load i8*, i8** %msg.addr, align 4
  %call3 = call i32 (i8*, i32, i8*, ...) @snprintf(i8* %arraydecay, i32 128, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i8* %11)
  %12 = load i32, i32* %extype.addr, align 4
  %13 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %exs4 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %13, i32 0, i32 0
  %14 = load %struct.exception*, %struct.exception** %exs4, align 4
  %15 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos5 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %15, i32 0, i32 2
  %16 = load i32, i32* %pos5, align 4
  %arrayidx6 = getelementptr inbounds %struct.exception, %struct.exception* %14, i32 %16
  %extype7 = getelementptr inbounds %struct.exception, %struct.exception* %arrayidx6, i32 0, i32 0
  store i32 %12, i32* %extype7, align 4
  ret i32 -1
}

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #1

declare i32 @snprintf(i8* %0, i32 %1, i8* %2, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @baz(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call = call i32 @Push_Ex(%struct.exception_ctx* %1, i32 10, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.2, i32 0, i32 0))
  br label %return

if.else:                                          ; preds = %entry
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call1 = call i32 @Push_Ex(%struct.exception_ctx* %2, i32 11, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.3, i32 0, i32 0))
  br label %return

return:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @bar(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.4, i32 0, i32 0))
  %1 = load i32, i32* %n.addr, align 4
  call void @baz(i32 %1)
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call1 = call i32 @Has_Ex(%struct.exception_ctx* %2)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %bar_cleanup

if.end:                                           ; preds = %entry
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.5, i32 0, i32 0))
  br label %bar_cleanup

bar_cleanup:                                      ; preds = %if.end, %if.then
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i32 0, i32 0))
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @foo() #0 {
entry:
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.7, i32 0, i32 0))
  call void @bar(i32 0)
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %1 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call1 = call i32 @Is_Ex_Type(%struct.exception_ctx* %1, i32 10)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %3 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call2 = call i8* @Get_What(%struct.exception_ctx* %3)
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.8, i32 0, i32 0), i8* %call2)
  %4 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  call void @Pop_Ex(%struct.exception_ctx* %4)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %5 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call4 = call i32 @Has_Ex(%struct.exception_ctx* %5)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.then, label %if.end

if.then:                                          ; preds = %while.end
  br label %return

if.end:                                           ; preds = %while.end
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.9, i32 0, i32 0))
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.10, i32 0, i32 0))
  call void @bar(i32 1)
  br label %while.cond8

while.cond8:                                      ; preds = %while.body11, %if.end
  %8 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call9 = call i32 @Is_Ex_Type(%struct.exception_ctx* %8, i32 10)
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %while.body11, label %while.end14

while.body11:                                     ; preds = %while.cond8
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %10 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call12 = call i8* @Get_What(%struct.exception_ctx* %10)
  %call13 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.8, i32 0, i32 0), i8* %call12)
  %11 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  call void @Pop_Ex(%struct.exception_ctx* %11)
  br label %while.cond8

while.end14:                                      ; preds = %while.cond8
  %12 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call15 = call i32 @Has_Ex(%struct.exception_ctx* %12)
  %tobool16 = icmp ne i32 %call15, 0
  br i1 %tobool16, label %if.then17, label %if.end18

if.then17:                                        ; preds = %while.end14
  br label %return

if.end18:                                         ; preds = %while.end14
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call19 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.9, i32 0, i32 0))
  br label %return

return:                                           ; preds = %if.end18, %if.then17, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %ctx = alloca %struct.exception_ctx*, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  %call = call %struct.exception_ctx* @Create_Ex_Ctx(i32 5)
  store %struct.exception_ctx* %call, %struct.exception_ctx** %ctx, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  store %struct.exception_ctx* %0, %struct.exception_ctx** @GLOBALEX, align 4
  call void @foo()
  %1 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %call1 = call i32 @Has_Ex(%struct.exception_ctx* %1)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %main_ex

if.end:                                           ; preds = %entry
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.11, i32 0, i32 0))
  br label %main_ex

main_ex:                                          ; preds = %if.end, %if.then
  br label %while.cond

while.cond:                                       ; preds = %while.body, %main_ex
  %3 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %call3 = call i32 @Has_Ex(%struct.exception_ctx* %3)
  %tobool4 = icmp ne i32 %call3, 0
  br i1 %tobool4, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %5 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %call5 = call i8* @Get_What(%struct.exception_ctx* %5)
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.12, i32 0, i32 0), i8* %call5)
  %6 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  call void @Pop_Ex(%struct.exception_ctx* %6)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %7 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  call void @Free_Ex_Ctx(%struct.exception_ctx* %7)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %pos, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %1, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %size, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %inc, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1 (hasExternalUses)
%3:i1 = eq %0, %2
infer %3

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %pos1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec = add nsw i32 %5, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %pos2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %extype.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %pos5, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1 (hasExternalUses)
%3:i1 = eq %0, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for Push_Ex()

; entering Souper's runOnFunction() for baz()

; ModuleID = './Exceptions-Catch_an_exception_thrown_in_a_nested_call.c.bc'
source_filename = "./Exceptions-Catch_an_exception_thrown_in_a_nested_call.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque
%struct.exception_ctx = type { %struct.exception*, i32, i32 }
%struct.exception = type { i32, [128 x i8] }

@stderr = external constant %struct._IO_FILE*, align 4
@.str = private unnamed_addr constant [43 x i8] c"*** Error: Overflow in exception context.\0A\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@GLOBALEX = hidden global %struct.exception_ctx* null, align 4
@.str.2 = private unnamed_addr constant [48 x i8] c"U0 Drink Error. Insufficient drinks in bar Baz.\00", align 1
@.str.3 = private unnamed_addr constant [62 x i8] c"U1 Bartender Error. Bartender kicked customer out of bar Baz.\00", align 1
@stdout = external constant %struct._IO_FILE*, align 4
@.str.4 = private unnamed_addr constant [19 x i8] c"Bar door is open.\0A\00", align 1
@.str.5 = private unnamed_addr constant [37 x i8] c"Baz has been called without errors.\0A\00", align 1
@.str.6 = private unnamed_addr constant [21 x i8] c"Bar door is closed.\0A\00", align 1
@.str.7 = private unnamed_addr constant [19 x i8] c"Foo entering bar.\0A\00", align 1
@.str.8 = private unnamed_addr constant [82 x i8] c"I am foo() and I deaall wrth U0 DriNk Errors with my own bottle... GOT oNE! [%s]\0A\00", align 1
@.str.9 = private unnamed_addr constant [19 x i8] c"Foo left the bar.\0A\00", align 1
@.str.10 = private unnamed_addr constant [25 x i8] c"Foo entering bar again.\0A\00", align 1
@.str.11 = private unnamed_addr constant [24 x i8] c"No errors encountered.\0A\00", align 1
@.str.12 = private unnamed_addr constant [15 x i8] c"*** Error: %s\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden %struct.exception_ctx* @Create_Ex_Ctx(i32 %length) #0 {
entry:
  %retval = alloca %struct.exception_ctx*, align 4
  %length.addr = alloca i32, align 4
  %safety = alloca i32, align 4
  %tmp = alloca i8*, align 4
  %ctx = alloca %struct.exception_ctx*, align 4
  store i32 %length, i32* %length.addr, align 4
  store i32 8, i32* %safety, align 4
  %0 = load i32, i32* %length.addr, align 4
  %mul = mul i32 132, %0
  %add = add i32 20, %mul
  %call = call noalias i8* @malloc(i32 %add)
  store i8* %call, i8** %tmp, align 4
  %1 = load i8*, i8** %tmp, align 4
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct.exception_ctx* null, %struct.exception_ctx** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %tmp, align 4
  %3 = bitcast i8* %2 to %struct.exception_ctx*
  store %struct.exception_ctx* %3, %struct.exception_ctx** %ctx, align 4
  %4 = load i32, i32* %length.addr, align 4
  %5 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %size = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %5, i32 0, i32 1
  store i32 %4, i32* %size, align 4
  %6 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %6, i32 0, i32 2
  store i32 -1, i32* %pos, align 4
  %7 = load i8*, i8** %tmp, align 4
  %add.ptr = getelementptr inbounds i8, i8* %7, i32 12
  %8 = bitcast i8* %add.ptr to %struct.exception*
  %9 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %exs = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %9, i32 0, i32 0
  store %struct.exception* %8, %struct.exception** %exs, align 4
  %10 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  store %struct.exception_ctx* %10, %struct.exception_ctx** %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %11 = load %struct.exception_ctx*, %struct.exception_ctx** %retval, align 4
  ret %struct.exception_ctx* %11
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @Free_Ex_Ctx(%struct.exception_ctx* %ctx) #0 {
entry:
  %ctx.addr = alloca %struct.exception_ctx*, align 4
  store %struct.exception_ctx* %ctx, %struct.exception_ctx** %ctx.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %1 = bitcast %struct.exception_ctx* %0 to i8*
  call void @free(i8* %1)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @Has_Ex(%struct.exception_ctx* %ctx) #0 {
entry:
  %ctx.addr = alloca %struct.exception_ctx*, align 4
  store %struct.exception_ctx* %ctx, %struct.exception_ctx** %ctx.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %0, i32 0, i32 2
  %1 = load i32, i32* %pos, align 4
  %cmp = icmp sge i32 %1, 0
  %2 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i32 1, i32 0
  ret i32 %cond
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @Is_Ex_Type(%struct.exception_ctx* %exctx, i32 %extype) #0 {
entry:
  %exctx.addr = alloca %struct.exception_ctx*, align 4
  %extype.addr = alloca i32, align 4
  store %struct.exception_ctx* %exctx, %struct.exception_ctx** %exctx.addr, align 4
  store i32 %extype, i32* %extype.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %0, i32 0, i32 2
  %1 = load i32, i32* %pos, align 4
  %cmp = icmp sge i32 %1, 0
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %exs = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %2, i32 0, i32 0
  %3 = load %struct.exception*, %struct.exception** %exs, align 4
  %4 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos1 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %4, i32 0, i32 2
  %5 = load i32, i32* %pos1, align 4
  %arrayidx = getelementptr inbounds %struct.exception, %struct.exception* %3, i32 %5
  %extype2 = getelementptr inbounds %struct.exception, %struct.exception* %arrayidx, i32 0, i32 0
  %6 = load i32, i32* %extype2, align 4
  %7 = load i32, i32* %extype.addr, align 4
  %cmp3 = icmp eq i32 %6, %7
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %8 = phi i1 [ false, %entry ], [ %cmp3, %land.rhs ]
  %9 = zext i1 %8 to i64
  %cond = select i1 %8, i32 1, i32 0
  ret i32 %cond
}

; Function Attrs: noinline nounwind optnone
define hidden void @Pop_Ex(%struct.exception_ctx* %ctx) #0 {
entry:
  %ctx.addr = alloca %struct.exception_ctx*, align 4
  store %struct.exception_ctx* %ctx, %struct.exception_ctx** %ctx.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %0, i32 0, i32 2
  %1 = load i32, i32* %pos, align 4
  %cmp = icmp sge i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %pos1 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %2, i32 0, i32 2
  %3 = load i32, i32* %pos1, align 4
  %dec = add nsw i32 %3, -1
  store i32 %dec, i32* %pos1, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @Get_What(%struct.exception_ctx* %ctx) #0 {
entry:
  %retval = alloca i8*, align 4
  %ctx.addr = alloca %struct.exception_ctx*, align 4
  store %struct.exception_ctx* %ctx, %struct.exception_ctx** %ctx.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %0, i32 0, i32 2
  %1 = load i32, i32* %pos, align 4
  %cmp = icmp sge i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %exs = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %2, i32 0, i32 0
  %3 = load %struct.exception*, %struct.exception** %exs, align 4
  %4 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %pos1 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %4, i32 0, i32 2
  %5 = load i32, i32* %pos1, align 4
  %arrayidx = getelementptr inbounds %struct.exception, %struct.exception* %3, i32 %5
  %what = getelementptr inbounds %struct.exception, %struct.exception* %arrayidx, i32 0, i32 1
  %arraydecay = getelementptr inbounds [128 x i8], [128 x i8]* %what, i32 0, i32 0
  store i8* %arraydecay, i8** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  store i8* null, i8** %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %6 = load i8*, i8** %retval, align 4
  ret i8* %6
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @Push_Ex(%struct.exception_ctx* %exctx, i32 %extype, i8* %msg) #0 {
entry:
  %exctx.addr = alloca %struct.exception_ctx*, align 4
  %extype.addr = alloca i32, align 4
  %msg.addr = alloca i8*, align 4
  store %struct.exception_ctx* %exctx, %struct.exception_ctx** %exctx.addr, align 4
  store i32 %extype, i32* %extype.addr, align 4
  store i8* %msg, i8** %msg.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %0, i32 0, i32 2
  %1 = load i32, i32* %pos, align 4
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* %pos, align 4
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %size = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %2, i32 0, i32 1
  %3 = load i32, i32* %size, align 4
  %cmp = icmp eq i32 %inc, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos1 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %4, i32 0, i32 2
  %5 = load i32, i32* %pos1, align 4
  %dec = add nsw i32 %5, -1
  store i32 %dec, i32* %pos1, align 4
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %exs = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %7, i32 0, i32 0
  %8 = load %struct.exception*, %struct.exception** %exs, align 4
  %9 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos2 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %9, i32 0, i32 2
  %10 = load i32, i32* %pos2, align 4
  %arrayidx = getelementptr inbounds %struct.exception, %struct.exception* %8, i32 %10
  %what = getelementptr inbounds %struct.exception, %struct.exception* %arrayidx, i32 0, i32 1
  %arraydecay = getelementptr inbounds [128 x i8], [128 x i8]* %what, i32 0, i32 0
  %11 = load i8*, i8** %msg.addr, align 4
  %call3 = call i32 (i8*, i32, i8*, ...) @snprintf(i8* %arraydecay, i32 128, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i8* %11)
  %12 = load i32, i32* %extype.addr, align 4
  %13 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %exs4 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %13, i32 0, i32 0
  %14 = load %struct.exception*, %struct.exception** %exs4, align 4
  %15 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos5 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %15, i32 0, i32 2
  %16 = load i32, i32* %pos5, align 4
  %arrayidx6 = getelementptr inbounds %struct.exception, %struct.exception* %14, i32 %16
  %extype7 = getelementptr inbounds %struct.exception, %struct.exception* %arrayidx6, i32 0, i32 0
  store i32 %12, i32* %extype7, align 4
  ret i32 -1
}

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #1

declare i32 @snprintf(i8* %0, i32 %1, i8* %2, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @baz(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call = call i32 @Push_Ex(%struct.exception_ctx* %1, i32 10, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.2, i32 0, i32 0))
  br label %return

if.else:                                          ; preds = %entry
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call1 = call i32 @Push_Ex(%struct.exception_ctx* %2, i32 11, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.3, i32 0, i32 0))
  br label %return

return:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @bar(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.4, i32 0, i32 0))
  %1 = load i32, i32* %n.addr, align 4
  call void @baz(i32 %1)
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call1 = call i32 @Has_Ex(%struct.exception_ctx* %2)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %bar_cleanup

if.end:                                           ; preds = %entry
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.5, i32 0, i32 0))
  br label %bar_cleanup

bar_cleanup:                                      ; preds = %if.end, %if.then
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i32 0, i32 0))
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @foo() #0 {
entry:
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.7, i32 0, i32 0))
  call void @bar(i32 0)
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %1 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call1 = call i32 @Is_Ex_Type(%struct.exception_ctx* %1, i32 10)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %3 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call2 = call i8* @Get_What(%struct.exception_ctx* %3)
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.8, i32 0, i32 0), i8* %call2)
  %4 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  call void @Pop_Ex(%struct.exception_ctx* %4)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %5 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call4 = call i32 @Has_Ex(%struct.exception_ctx* %5)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.then, label %if.end

if.then:                                          ; preds = %while.end
  br label %return

if.end:                                           ; preds = %while.end
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.9, i32 0, i32 0))
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.10, i32 0, i32 0))
  call void @bar(i32 1)
  br label %while.cond8

while.cond8:                                      ; preds = %while.body11, %if.end
  %8 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call9 = call i32 @Is_Ex_Type(%struct.exception_ctx* %8, i32 10)
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %while.body11, label %while.end14

while.body11:                                     ; preds = %while.cond8
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %10 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call12 = call i8* @Get_What(%struct.exception_ctx* %10)
  %call13 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.8, i32 0, i32 0), i8* %call12)
  %11 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  call void @Pop_Ex(%struct.exception_ctx* %11)
  br label %while.cond8

while.end14:                                      ; preds = %while.cond8
  %12 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call15 = call i32 @Has_Ex(%struct.exception_ctx* %12)
  %tobool16 = icmp ne i32 %call15, 0
  br i1 %tobool16, label %if.then17, label %if.end18

if.then17:                                        ; preds = %while.end14
  br label %return

if.end18:                                         ; preds = %while.end14
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call19 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.9, i32 0, i32 0))
  br label %return

return:                                           ; preds = %if.end18, %if.then17, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %ctx = alloca %struct.exception_ctx*, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  %call = call %struct.exception_ctx* @Create_Ex_Ctx(i32 5)
  store %struct.exception_ctx* %call, %struct.exception_ctx** %ctx, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  store %struct.exception_ctx* %0, %struct.exception_ctx** @GLOBALEX, align 4
  call void @foo()
  %1 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %call1 = call i32 @Has_Ex(%struct.exception_ctx* %1)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %main_ex

if.end:                                           ; preds = %entry
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.11, i32 0, i32 0))
  br label %main_ex

main_ex:                                          ; preds = %if.end, %if.then
  br label %while.cond

while.cond:                                       ; preds = %while.body, %main_ex
  %3 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %call3 = call i32 @Has_Ex(%struct.exception_ctx* %3)
  %tobool4 = icmp ne i32 %call3, 0
  br i1 %tobool4, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %5 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %call5 = call i8* @Get_What(%struct.exception_ctx* %5)
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.12, i32 0, i32 0), i8* %call5)
  %6 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  call void @Pop_Ex(%struct.exception_ctx* %6)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %7 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  call void @Free_Ex_Ctx(%struct.exception_ctx* %7)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %0, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for baz()

; entering Souper's runOnFunction() for bar()

; ModuleID = './Exceptions-Catch_an_exception_thrown_in_a_nested_call.c.bc'
source_filename = "./Exceptions-Catch_an_exception_thrown_in_a_nested_call.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque
%struct.exception_ctx = type { %struct.exception*, i32, i32 }
%struct.exception = type { i32, [128 x i8] }

@stderr = external constant %struct._IO_FILE*, align 4
@.str = private unnamed_addr constant [43 x i8] c"*** Error: Overflow in exception context.\0A\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@GLOBALEX = hidden global %struct.exception_ctx* null, align 4
@.str.2 = private unnamed_addr constant [48 x i8] c"U0 Drink Error. Insufficient drinks in bar Baz.\00", align 1
@.str.3 = private unnamed_addr constant [62 x i8] c"U1 Bartender Error. Bartender kicked customer out of bar Baz.\00", align 1
@stdout = external constant %struct._IO_FILE*, align 4
@.str.4 = private unnamed_addr constant [19 x i8] c"Bar door is open.\0A\00", align 1
@.str.5 = private unnamed_addr constant [37 x i8] c"Baz has been called without errors.\0A\00", align 1
@.str.6 = private unnamed_addr constant [21 x i8] c"Bar door is closed.\0A\00", align 1
@.str.7 = private unnamed_addr constant [19 x i8] c"Foo entering bar.\0A\00", align 1
@.str.8 = private unnamed_addr constant [82 x i8] c"I am foo() and I deaall wrth U0 DriNk Errors with my own bottle... GOT oNE! [%s]\0A\00", align 1
@.str.9 = private unnamed_addr constant [19 x i8] c"Foo left the bar.\0A\00", align 1
@.str.10 = private unnamed_addr constant [25 x i8] c"Foo entering bar again.\0A\00", align 1
@.str.11 = private unnamed_addr constant [24 x i8] c"No errors encountered.\0A\00", align 1
@.str.12 = private unnamed_addr constant [15 x i8] c"*** Error: %s\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden %struct.exception_ctx* @Create_Ex_Ctx(i32 %length) #0 {
entry:
  %retval = alloca %struct.exception_ctx*, align 4
  %length.addr = alloca i32, align 4
  %safety = alloca i32, align 4
  %tmp = alloca i8*, align 4
  %ctx = alloca %struct.exception_ctx*, align 4
  store i32 %length, i32* %length.addr, align 4
  store i32 8, i32* %safety, align 4
  %0 = load i32, i32* %length.addr, align 4
  %mul = mul i32 132, %0
  %add = add i32 20, %mul
  %call = call noalias i8* @malloc(i32 %add)
  store i8* %call, i8** %tmp, align 4
  %1 = load i8*, i8** %tmp, align 4
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct.exception_ctx* null, %struct.exception_ctx** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %tmp, align 4
  %3 = bitcast i8* %2 to %struct.exception_ctx*
  store %struct.exception_ctx* %3, %struct.exception_ctx** %ctx, align 4
  %4 = load i32, i32* %length.addr, align 4
  %5 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %size = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %5, i32 0, i32 1
  store i32 %4, i32* %size, align 4
  %6 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %6, i32 0, i32 2
  store i32 -1, i32* %pos, align 4
  %7 = load i8*, i8** %tmp, align 4
  %add.ptr = getelementptr inbounds i8, i8* %7, i32 12
  %8 = bitcast i8* %add.ptr to %struct.exception*
  %9 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %exs = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %9, i32 0, i32 0
  store %struct.exception* %8, %struct.exception** %exs, align 4
  %10 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  store %struct.exception_ctx* %10, %struct.exception_ctx** %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %11 = load %struct.exception_ctx*, %struct.exception_ctx** %retval, align 4
  ret %struct.exception_ctx* %11
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @Free_Ex_Ctx(%struct.exception_ctx* %ctx) #0 {
entry:
  %ctx.addr = alloca %struct.exception_ctx*, align 4
  store %struct.exception_ctx* %ctx, %struct.exception_ctx** %ctx.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %1 = bitcast %struct.exception_ctx* %0 to i8*
  call void @free(i8* %1)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @Has_Ex(%struct.exception_ctx* %ctx) #0 {
entry:
  %ctx.addr = alloca %struct.exception_ctx*, align 4
  store %struct.exception_ctx* %ctx, %struct.exception_ctx** %ctx.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %0, i32 0, i32 2
  %1 = load i32, i32* %pos, align 4
  %cmp = icmp sge i32 %1, 0
  %2 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i32 1, i32 0
  ret i32 %cond
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @Is_Ex_Type(%struct.exception_ctx* %exctx, i32 %extype) #0 {
entry:
  %exctx.addr = alloca %struct.exception_ctx*, align 4
  %extype.addr = alloca i32, align 4
  store %struct.exception_ctx* %exctx, %struct.exception_ctx** %exctx.addr, align 4
  store i32 %extype, i32* %extype.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %0, i32 0, i32 2
  %1 = load i32, i32* %pos, align 4
  %cmp = icmp sge i32 %1, 0
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %exs = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %2, i32 0, i32 0
  %3 = load %struct.exception*, %struct.exception** %exs, align 4
  %4 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos1 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %4, i32 0, i32 2
  %5 = load i32, i32* %pos1, align 4
  %arrayidx = getelementptr inbounds %struct.exception, %struct.exception* %3, i32 %5
  %extype2 = getelementptr inbounds %struct.exception, %struct.exception* %arrayidx, i32 0, i32 0
  %6 = load i32, i32* %extype2, align 4
  %7 = load i32, i32* %extype.addr, align 4
  %cmp3 = icmp eq i32 %6, %7
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %8 = phi i1 [ false, %entry ], [ %cmp3, %land.rhs ]
  %9 = zext i1 %8 to i64
  %cond = select i1 %8, i32 1, i32 0
  ret i32 %cond
}

; Function Attrs: noinline nounwind optnone
define hidden void @Pop_Ex(%struct.exception_ctx* %ctx) #0 {
entry:
  %ctx.addr = alloca %struct.exception_ctx*, align 4
  store %struct.exception_ctx* %ctx, %struct.exception_ctx** %ctx.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %0, i32 0, i32 2
  %1 = load i32, i32* %pos, align 4
  %cmp = icmp sge i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %pos1 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %2, i32 0, i32 2
  %3 = load i32, i32* %pos1, align 4
  %dec = add nsw i32 %3, -1
  store i32 %dec, i32* %pos1, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @Get_What(%struct.exception_ctx* %ctx) #0 {
entry:
  %retval = alloca i8*, align 4
  %ctx.addr = alloca %struct.exception_ctx*, align 4
  store %struct.exception_ctx* %ctx, %struct.exception_ctx** %ctx.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %0, i32 0, i32 2
  %1 = load i32, i32* %pos, align 4
  %cmp = icmp sge i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %exs = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %2, i32 0, i32 0
  %3 = load %struct.exception*, %struct.exception** %exs, align 4
  %4 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %pos1 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %4, i32 0, i32 2
  %5 = load i32, i32* %pos1, align 4
  %arrayidx = getelementptr inbounds %struct.exception, %struct.exception* %3, i32 %5
  %what = getelementptr inbounds %struct.exception, %struct.exception* %arrayidx, i32 0, i32 1
  %arraydecay = getelementptr inbounds [128 x i8], [128 x i8]* %what, i32 0, i32 0
  store i8* %arraydecay, i8** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  store i8* null, i8** %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %6 = load i8*, i8** %retval, align 4
  ret i8* %6
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @Push_Ex(%struct.exception_ctx* %exctx, i32 %extype, i8* %msg) #0 {
entry:
  %exctx.addr = alloca %struct.exception_ctx*, align 4
  %extype.addr = alloca i32, align 4
  %msg.addr = alloca i8*, align 4
  store %struct.exception_ctx* %exctx, %struct.exception_ctx** %exctx.addr, align 4
  store i32 %extype, i32* %extype.addr, align 4
  store i8* %msg, i8** %msg.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %0, i32 0, i32 2
  %1 = load i32, i32* %pos, align 4
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* %pos, align 4
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %size = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %2, i32 0, i32 1
  %3 = load i32, i32* %size, align 4
  %cmp = icmp eq i32 %inc, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos1 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %4, i32 0, i32 2
  %5 = load i32, i32* %pos1, align 4
  %dec = add nsw i32 %5, -1
  store i32 %dec, i32* %pos1, align 4
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %exs = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %7, i32 0, i32 0
  %8 = load %struct.exception*, %struct.exception** %exs, align 4
  %9 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos2 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %9, i32 0, i32 2
  %10 = load i32, i32* %pos2, align 4
  %arrayidx = getelementptr inbounds %struct.exception, %struct.exception* %8, i32 %10
  %what = getelementptr inbounds %struct.exception, %struct.exception* %arrayidx, i32 0, i32 1
  %arraydecay = getelementptr inbounds [128 x i8], [128 x i8]* %what, i32 0, i32 0
  %11 = load i8*, i8** %msg.addr, align 4
  %call3 = call i32 (i8*, i32, i8*, ...) @snprintf(i8* %arraydecay, i32 128, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i8* %11)
  %12 = load i32, i32* %extype.addr, align 4
  %13 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %exs4 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %13, i32 0, i32 0
  %14 = load %struct.exception*, %struct.exception** %exs4, align 4
  %15 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos5 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %15, i32 0, i32 2
  %16 = load i32, i32* %pos5, align 4
  %arrayidx6 = getelementptr inbounds %struct.exception, %struct.exception* %14, i32 %16
  %extype7 = getelementptr inbounds %struct.exception, %struct.exception* %arrayidx6, i32 0, i32 0
  store i32 %12, i32* %extype7, align 4
  ret i32 -1
}

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #1

declare i32 @snprintf(i8* %0, i32 %1, i8* %2, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @baz(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call = call i32 @Push_Ex(%struct.exception_ctx* %1, i32 10, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.2, i32 0, i32 0))
  br label %return

if.else:                                          ; preds = %entry
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call1 = call i32 @Push_Ex(%struct.exception_ctx* %2, i32 11, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.3, i32 0, i32 0))
  br label %return

return:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @bar(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.4, i32 0, i32 0))
  %1 = load i32, i32* %n.addr, align 4
  call void @baz(i32 %1)
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call1 = call i32 @Has_Ex(%struct.exception_ctx* %2)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %bar_cleanup

if.end:                                           ; preds = %entry
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.5, i32 0, i32 0))
  br label %bar_cleanup

bar_cleanup:                                      ; preds = %if.end, %if.then
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i32 0, i32 0))
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @foo() #0 {
entry:
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.7, i32 0, i32 0))
  call void @bar(i32 0)
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %1 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call1 = call i32 @Is_Ex_Type(%struct.exception_ctx* %1, i32 10)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %3 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call2 = call i8* @Get_What(%struct.exception_ctx* %3)
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.8, i32 0, i32 0), i8* %call2)
  %4 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  call void @Pop_Ex(%struct.exception_ctx* %4)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %5 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call4 = call i32 @Has_Ex(%struct.exception_ctx* %5)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.then, label %if.end

if.then:                                          ; preds = %while.end
  br label %return

if.end:                                           ; preds = %while.end
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.9, i32 0, i32 0))
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.10, i32 0, i32 0))
  call void @bar(i32 1)
  br label %while.cond8

while.cond8:                                      ; preds = %while.body11, %if.end
  %8 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call9 = call i32 @Is_Ex_Type(%struct.exception_ctx* %8, i32 10)
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %while.body11, label %while.end14

while.body11:                                     ; preds = %while.cond8
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %10 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call12 = call i8* @Get_What(%struct.exception_ctx* %10)
  %call13 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.8, i32 0, i32 0), i8* %call12)
  %11 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  call void @Pop_Ex(%struct.exception_ctx* %11)
  br label %while.cond8

while.end14:                                      ; preds = %while.cond8
  %12 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call15 = call i32 @Has_Ex(%struct.exception_ctx* %12)
  %tobool16 = icmp ne i32 %call15, 0
  br i1 %tobool16, label %if.then17, label %if.end18

if.then17:                                        ; preds = %while.end14
  br label %return

if.end18:                                         ; preds = %while.end14
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call19 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.9, i32 0, i32 0))
  br label %return

return:                                           ; preds = %if.end18, %if.then17, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %ctx = alloca %struct.exception_ctx*, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  %call = call %struct.exception_ctx* @Create_Ex_Ctx(i32 5)
  store %struct.exception_ctx* %call, %struct.exception_ctx** %ctx, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  store %struct.exception_ctx* %0, %struct.exception_ctx** @GLOBALEX, align 4
  call void @foo()
  %1 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %call1 = call i32 @Has_Ex(%struct.exception_ctx* %1)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %main_ex

if.end:                                           ; preds = %entry
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.11, i32 0, i32 0))
  br label %main_ex

main_ex:                                          ; preds = %if.end, %if.then
  br label %while.cond

while.cond:                                       ; preds = %while.body, %main_ex
  %3 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %call3 = call i32 @Has_Ex(%struct.exception_ctx* %3)
  %tobool4 = icmp ne i32 %call3, 0
  br i1 %tobool4, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %5 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %call5 = call i8* @Get_What(%struct.exception_ctx* %5)
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.12, i32 0, i32 0), i8* %call5)
  %6 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  call void @Pop_Ex(%struct.exception_ctx* %6)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %7 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  call void @Free_Ex_Ctx(%struct.exception_ctx* %7)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call1 = call i32 @Has_Ex(%struct.exception_ctx* %2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %call1, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for bar()

; entering Souper's runOnFunction() for foo()

; ModuleID = './Exceptions-Catch_an_exception_thrown_in_a_nested_call.c.bc'
source_filename = "./Exceptions-Catch_an_exception_thrown_in_a_nested_call.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque
%struct.exception_ctx = type { %struct.exception*, i32, i32 }
%struct.exception = type { i32, [128 x i8] }

@stderr = external constant %struct._IO_FILE*, align 4
@.str = private unnamed_addr constant [43 x i8] c"*** Error: Overflow in exception context.\0A\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@GLOBALEX = hidden global %struct.exception_ctx* null, align 4
@.str.2 = private unnamed_addr constant [48 x i8] c"U0 Drink Error. Insufficient drinks in bar Baz.\00", align 1
@.str.3 = private unnamed_addr constant [62 x i8] c"U1 Bartender Error. Bartender kicked customer out of bar Baz.\00", align 1
@stdout = external constant %struct._IO_FILE*, align 4
@.str.4 = private unnamed_addr constant [19 x i8] c"Bar door is open.\0A\00", align 1
@.str.5 = private unnamed_addr constant [37 x i8] c"Baz has been called without errors.\0A\00", align 1
@.str.6 = private unnamed_addr constant [21 x i8] c"Bar door is closed.\0A\00", align 1
@.str.7 = private unnamed_addr constant [19 x i8] c"Foo entering bar.\0A\00", align 1
@.str.8 = private unnamed_addr constant [82 x i8] c"I am foo() and I deaall wrth U0 DriNk Errors with my own bottle... GOT oNE! [%s]\0A\00", align 1
@.str.9 = private unnamed_addr constant [19 x i8] c"Foo left the bar.\0A\00", align 1
@.str.10 = private unnamed_addr constant [25 x i8] c"Foo entering bar again.\0A\00", align 1
@.str.11 = private unnamed_addr constant [24 x i8] c"No errors encountered.\0A\00", align 1
@.str.12 = private unnamed_addr constant [15 x i8] c"*** Error: %s\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden %struct.exception_ctx* @Create_Ex_Ctx(i32 %length) #0 {
entry:
  %retval = alloca %struct.exception_ctx*, align 4
  %length.addr = alloca i32, align 4
  %safety = alloca i32, align 4
  %tmp = alloca i8*, align 4
  %ctx = alloca %struct.exception_ctx*, align 4
  store i32 %length, i32* %length.addr, align 4
  store i32 8, i32* %safety, align 4
  %0 = load i32, i32* %length.addr, align 4
  %mul = mul i32 132, %0
  %add = add i32 20, %mul
  %call = call noalias i8* @malloc(i32 %add)
  store i8* %call, i8** %tmp, align 4
  %1 = load i8*, i8** %tmp, align 4
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct.exception_ctx* null, %struct.exception_ctx** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %tmp, align 4
  %3 = bitcast i8* %2 to %struct.exception_ctx*
  store %struct.exception_ctx* %3, %struct.exception_ctx** %ctx, align 4
  %4 = load i32, i32* %length.addr, align 4
  %5 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %size = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %5, i32 0, i32 1
  store i32 %4, i32* %size, align 4
  %6 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %6, i32 0, i32 2
  store i32 -1, i32* %pos, align 4
  %7 = load i8*, i8** %tmp, align 4
  %add.ptr = getelementptr inbounds i8, i8* %7, i32 12
  %8 = bitcast i8* %add.ptr to %struct.exception*
  %9 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %exs = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %9, i32 0, i32 0
  store %struct.exception* %8, %struct.exception** %exs, align 4
  %10 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  store %struct.exception_ctx* %10, %struct.exception_ctx** %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %11 = load %struct.exception_ctx*, %struct.exception_ctx** %retval, align 4
  ret %struct.exception_ctx* %11
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @Free_Ex_Ctx(%struct.exception_ctx* %ctx) #0 {
entry:
  %ctx.addr = alloca %struct.exception_ctx*, align 4
  store %struct.exception_ctx* %ctx, %struct.exception_ctx** %ctx.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %1 = bitcast %struct.exception_ctx* %0 to i8*
  call void @free(i8* %1)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @Has_Ex(%struct.exception_ctx* %ctx) #0 {
entry:
  %ctx.addr = alloca %struct.exception_ctx*, align 4
  store %struct.exception_ctx* %ctx, %struct.exception_ctx** %ctx.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %0, i32 0, i32 2
  %1 = load i32, i32* %pos, align 4
  %cmp = icmp sge i32 %1, 0
  %2 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i32 1, i32 0
  ret i32 %cond
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @Is_Ex_Type(%struct.exception_ctx* %exctx, i32 %extype) #0 {
entry:
  %exctx.addr = alloca %struct.exception_ctx*, align 4
  %extype.addr = alloca i32, align 4
  store %struct.exception_ctx* %exctx, %struct.exception_ctx** %exctx.addr, align 4
  store i32 %extype, i32* %extype.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %0, i32 0, i32 2
  %1 = load i32, i32* %pos, align 4
  %cmp = icmp sge i32 %1, 0
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %exs = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %2, i32 0, i32 0
  %3 = load %struct.exception*, %struct.exception** %exs, align 4
  %4 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos1 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %4, i32 0, i32 2
  %5 = load i32, i32* %pos1, align 4
  %arrayidx = getelementptr inbounds %struct.exception, %struct.exception* %3, i32 %5
  %extype2 = getelementptr inbounds %struct.exception, %struct.exception* %arrayidx, i32 0, i32 0
  %6 = load i32, i32* %extype2, align 4
  %7 = load i32, i32* %extype.addr, align 4
  %cmp3 = icmp eq i32 %6, %7
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %8 = phi i1 [ false, %entry ], [ %cmp3, %land.rhs ]
  %9 = zext i1 %8 to i64
  %cond = select i1 %8, i32 1, i32 0
  ret i32 %cond
}

; Function Attrs: noinline nounwind optnone
define hidden void @Pop_Ex(%struct.exception_ctx* %ctx) #0 {
entry:
  %ctx.addr = alloca %struct.exception_ctx*, align 4
  store %struct.exception_ctx* %ctx, %struct.exception_ctx** %ctx.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %0, i32 0, i32 2
  %1 = load i32, i32* %pos, align 4
  %cmp = icmp sge i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %pos1 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %2, i32 0, i32 2
  %3 = load i32, i32* %pos1, align 4
  %dec = add nsw i32 %3, -1
  store i32 %dec, i32* %pos1, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @Get_What(%struct.exception_ctx* %ctx) #0 {
entry:
  %retval = alloca i8*, align 4
  %ctx.addr = alloca %struct.exception_ctx*, align 4
  store %struct.exception_ctx* %ctx, %struct.exception_ctx** %ctx.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %0, i32 0, i32 2
  %1 = load i32, i32* %pos, align 4
  %cmp = icmp sge i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %exs = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %2, i32 0, i32 0
  %3 = load %struct.exception*, %struct.exception** %exs, align 4
  %4 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %pos1 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %4, i32 0, i32 2
  %5 = load i32, i32* %pos1, align 4
  %arrayidx = getelementptr inbounds %struct.exception, %struct.exception* %3, i32 %5
  %what = getelementptr inbounds %struct.exception, %struct.exception* %arrayidx, i32 0, i32 1
  %arraydecay = getelementptr inbounds [128 x i8], [128 x i8]* %what, i32 0, i32 0
  store i8* %arraydecay, i8** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  store i8* null, i8** %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %6 = load i8*, i8** %retval, align 4
  ret i8* %6
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @Push_Ex(%struct.exception_ctx* %exctx, i32 %extype, i8* %msg) #0 {
entry:
  %exctx.addr = alloca %struct.exception_ctx*, align 4
  %extype.addr = alloca i32, align 4
  %msg.addr = alloca i8*, align 4
  store %struct.exception_ctx* %exctx, %struct.exception_ctx** %exctx.addr, align 4
  store i32 %extype, i32* %extype.addr, align 4
  store i8* %msg, i8** %msg.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %0, i32 0, i32 2
  %1 = load i32, i32* %pos, align 4
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* %pos, align 4
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %size = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %2, i32 0, i32 1
  %3 = load i32, i32* %size, align 4
  %cmp = icmp eq i32 %inc, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos1 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %4, i32 0, i32 2
  %5 = load i32, i32* %pos1, align 4
  %dec = add nsw i32 %5, -1
  store i32 %dec, i32* %pos1, align 4
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %exs = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %7, i32 0, i32 0
  %8 = load %struct.exception*, %struct.exception** %exs, align 4
  %9 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos2 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %9, i32 0, i32 2
  %10 = load i32, i32* %pos2, align 4
  %arrayidx = getelementptr inbounds %struct.exception, %struct.exception* %8, i32 %10
  %what = getelementptr inbounds %struct.exception, %struct.exception* %arrayidx, i32 0, i32 1
  %arraydecay = getelementptr inbounds [128 x i8], [128 x i8]* %what, i32 0, i32 0
  %11 = load i8*, i8** %msg.addr, align 4
  %call3 = call i32 (i8*, i32, i8*, ...) @snprintf(i8* %arraydecay, i32 128, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i8* %11)
  %12 = load i32, i32* %extype.addr, align 4
  %13 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %exs4 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %13, i32 0, i32 0
  %14 = load %struct.exception*, %struct.exception** %exs4, align 4
  %15 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos5 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %15, i32 0, i32 2
  %16 = load i32, i32* %pos5, align 4
  %arrayidx6 = getelementptr inbounds %struct.exception, %struct.exception* %14, i32 %16
  %extype7 = getelementptr inbounds %struct.exception, %struct.exception* %arrayidx6, i32 0, i32 0
  store i32 %12, i32* %extype7, align 4
  ret i32 -1
}

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #1

declare i32 @snprintf(i8* %0, i32 %1, i8* %2, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @baz(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call = call i32 @Push_Ex(%struct.exception_ctx* %1, i32 10, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.2, i32 0, i32 0))
  br label %return

if.else:                                          ; preds = %entry
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call1 = call i32 @Push_Ex(%struct.exception_ctx* %2, i32 11, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.3, i32 0, i32 0))
  br label %return

return:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @bar(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.4, i32 0, i32 0))
  %1 = load i32, i32* %n.addr, align 4
  call void @baz(i32 %1)
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call1 = call i32 @Has_Ex(%struct.exception_ctx* %2)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %bar_cleanup

if.end:                                           ; preds = %entry
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.5, i32 0, i32 0))
  br label %bar_cleanup

bar_cleanup:                                      ; preds = %if.end, %if.then
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i32 0, i32 0))
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @foo() #0 {
entry:
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.7, i32 0, i32 0))
  call void @bar(i32 0)
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %1 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call1 = call i32 @Is_Ex_Type(%struct.exception_ctx* %1, i32 10)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %3 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call2 = call i8* @Get_What(%struct.exception_ctx* %3)
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.8, i32 0, i32 0), i8* %call2)
  %4 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  call void @Pop_Ex(%struct.exception_ctx* %4)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %5 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call4 = call i32 @Has_Ex(%struct.exception_ctx* %5)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.then, label %if.end

if.then:                                          ; preds = %while.end
  br label %return

if.end:                                           ; preds = %while.end
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.9, i32 0, i32 0))
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.10, i32 0, i32 0))
  call void @bar(i32 1)
  br label %while.cond8

while.cond8:                                      ; preds = %while.body11, %if.end
  %8 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call9 = call i32 @Is_Ex_Type(%struct.exception_ctx* %8, i32 10)
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %while.body11, label %while.end14

while.body11:                                     ; preds = %while.cond8
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %10 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call12 = call i8* @Get_What(%struct.exception_ctx* %10)
  %call13 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.8, i32 0, i32 0), i8* %call12)
  %11 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  call void @Pop_Ex(%struct.exception_ctx* %11)
  br label %while.cond8

while.end14:                                      ; preds = %while.cond8
  %12 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call15 = call i32 @Has_Ex(%struct.exception_ctx* %12)
  %tobool16 = icmp ne i32 %call15, 0
  br i1 %tobool16, label %if.then17, label %if.end18

if.then17:                                        ; preds = %while.end14
  br label %return

if.end18:                                         ; preds = %while.end14
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call19 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.9, i32 0, i32 0))
  br label %return

return:                                           ; preds = %if.end18, %if.then17, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %ctx = alloca %struct.exception_ctx*, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  %call = call %struct.exception_ctx* @Create_Ex_Ctx(i32 5)
  store %struct.exception_ctx* %call, %struct.exception_ctx** %ctx, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  store %struct.exception_ctx* %0, %struct.exception_ctx** @GLOBALEX, align 4
  call void @foo()
  %1 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %call1 = call i32 @Has_Ex(%struct.exception_ctx* %1)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %main_ex

if.end:                                           ; preds = %entry
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.11, i32 0, i32 0))
  br label %main_ex

main_ex:                                          ; preds = %if.end, %if.then
  br label %while.cond

while.cond:                                       ; preds = %while.body, %main_ex
  %3 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %call3 = call i32 @Has_Ex(%struct.exception_ctx* %3)
  %tobool4 = icmp ne i32 %call3, 0
  br i1 %tobool4, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %5 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %call5 = call i8* @Get_What(%struct.exception_ctx* %5)
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.12, i32 0, i32 0), i8* %call5)
  %6 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  call void @Pop_Ex(%struct.exception_ctx* %6)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %7 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  call void @Free_Ex_Ctx(%struct.exception_ctx* %7)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call1 = call i32 @Is_Ex_Type(%struct.exception_ctx* %1, i32 10)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %call1, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call4 = call i32 @Has_Ex(%struct.exception_ctx* %5)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool5 = icmp ne i32 %call4, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call9 = call i32 @Is_Ex_Type(%struct.exception_ctx* %8, i32 10)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool10 = icmp ne i32 %call9, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call15 = call i32 @Has_Ex(%struct.exception_ctx* %12)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool16 = icmp ne i32 %call15, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for foo()

; entering Souper's runOnFunction() for __main_argc_argv()

; ModuleID = './Exceptions-Catch_an_exception_thrown_in_a_nested_call.c.bc'
source_filename = "./Exceptions-Catch_an_exception_thrown_in_a_nested_call.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque
%struct.exception_ctx = type { %struct.exception*, i32, i32 }
%struct.exception = type { i32, [128 x i8] }

@stderr = external constant %struct._IO_FILE*, align 4
@.str = private unnamed_addr constant [43 x i8] c"*** Error: Overflow in exception context.\0A\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@GLOBALEX = hidden global %struct.exception_ctx* null, align 4
@.str.2 = private unnamed_addr constant [48 x i8] c"U0 Drink Error. Insufficient drinks in bar Baz.\00", align 1
@.str.3 = private unnamed_addr constant [62 x i8] c"U1 Bartender Error. Bartender kicked customer out of bar Baz.\00", align 1
@stdout = external constant %struct._IO_FILE*, align 4
@.str.4 = private unnamed_addr constant [19 x i8] c"Bar door is open.\0A\00", align 1
@.str.5 = private unnamed_addr constant [37 x i8] c"Baz has been called without errors.\0A\00", align 1
@.str.6 = private unnamed_addr constant [21 x i8] c"Bar door is closed.\0A\00", align 1
@.str.7 = private unnamed_addr constant [19 x i8] c"Foo entering bar.\0A\00", align 1
@.str.8 = private unnamed_addr constant [82 x i8] c"I am foo() and I deaall wrth U0 DriNk Errors with my own bottle... GOT oNE! [%s]\0A\00", align 1
@.str.9 = private unnamed_addr constant [19 x i8] c"Foo left the bar.\0A\00", align 1
@.str.10 = private unnamed_addr constant [25 x i8] c"Foo entering bar again.\0A\00", align 1
@.str.11 = private unnamed_addr constant [24 x i8] c"No errors encountered.\0A\00", align 1
@.str.12 = private unnamed_addr constant [15 x i8] c"*** Error: %s\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden %struct.exception_ctx* @Create_Ex_Ctx(i32 %length) #0 {
entry:
  %retval = alloca %struct.exception_ctx*, align 4
  %length.addr = alloca i32, align 4
  %safety = alloca i32, align 4
  %tmp = alloca i8*, align 4
  %ctx = alloca %struct.exception_ctx*, align 4
  store i32 %length, i32* %length.addr, align 4
  store i32 8, i32* %safety, align 4
  %0 = load i32, i32* %length.addr, align 4
  %mul = mul i32 132, %0
  %add = add i32 20, %mul
  %call = call noalias i8* @malloc(i32 %add)
  store i8* %call, i8** %tmp, align 4
  %1 = load i8*, i8** %tmp, align 4
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct.exception_ctx* null, %struct.exception_ctx** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %tmp, align 4
  %3 = bitcast i8* %2 to %struct.exception_ctx*
  store %struct.exception_ctx* %3, %struct.exception_ctx** %ctx, align 4
  %4 = load i32, i32* %length.addr, align 4
  %5 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %size = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %5, i32 0, i32 1
  store i32 %4, i32* %size, align 4
  %6 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %6, i32 0, i32 2
  store i32 -1, i32* %pos, align 4
  %7 = load i8*, i8** %tmp, align 4
  %add.ptr = getelementptr inbounds i8, i8* %7, i32 12
  %8 = bitcast i8* %add.ptr to %struct.exception*
  %9 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %exs = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %9, i32 0, i32 0
  store %struct.exception* %8, %struct.exception** %exs, align 4
  %10 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  store %struct.exception_ctx* %10, %struct.exception_ctx** %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %11 = load %struct.exception_ctx*, %struct.exception_ctx** %retval, align 4
  ret %struct.exception_ctx* %11
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @Free_Ex_Ctx(%struct.exception_ctx* %ctx) #0 {
entry:
  %ctx.addr = alloca %struct.exception_ctx*, align 4
  store %struct.exception_ctx* %ctx, %struct.exception_ctx** %ctx.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %1 = bitcast %struct.exception_ctx* %0 to i8*
  call void @free(i8* %1)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @Has_Ex(%struct.exception_ctx* %ctx) #0 {
entry:
  %ctx.addr = alloca %struct.exception_ctx*, align 4
  store %struct.exception_ctx* %ctx, %struct.exception_ctx** %ctx.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %0, i32 0, i32 2
  %1 = load i32, i32* %pos, align 4
  %cmp = icmp sge i32 %1, 0
  %2 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i32 1, i32 0
  ret i32 %cond
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @Is_Ex_Type(%struct.exception_ctx* %exctx, i32 %extype) #0 {
entry:
  %exctx.addr = alloca %struct.exception_ctx*, align 4
  %extype.addr = alloca i32, align 4
  store %struct.exception_ctx* %exctx, %struct.exception_ctx** %exctx.addr, align 4
  store i32 %extype, i32* %extype.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %0, i32 0, i32 2
  %1 = load i32, i32* %pos, align 4
  %cmp = icmp sge i32 %1, 0
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %exs = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %2, i32 0, i32 0
  %3 = load %struct.exception*, %struct.exception** %exs, align 4
  %4 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos1 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %4, i32 0, i32 2
  %5 = load i32, i32* %pos1, align 4
  %arrayidx = getelementptr inbounds %struct.exception, %struct.exception* %3, i32 %5
  %extype2 = getelementptr inbounds %struct.exception, %struct.exception* %arrayidx, i32 0, i32 0
  %6 = load i32, i32* %extype2, align 4
  %7 = load i32, i32* %extype.addr, align 4
  %cmp3 = icmp eq i32 %6, %7
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %8 = phi i1 [ false, %entry ], [ %cmp3, %land.rhs ]
  %9 = zext i1 %8 to i64
  %cond = select i1 %8, i32 1, i32 0
  ret i32 %cond
}

; Function Attrs: noinline nounwind optnone
define hidden void @Pop_Ex(%struct.exception_ctx* %ctx) #0 {
entry:
  %ctx.addr = alloca %struct.exception_ctx*, align 4
  store %struct.exception_ctx* %ctx, %struct.exception_ctx** %ctx.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %0, i32 0, i32 2
  %1 = load i32, i32* %pos, align 4
  %cmp = icmp sge i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %pos1 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %2, i32 0, i32 2
  %3 = load i32, i32* %pos1, align 4
  %dec = add nsw i32 %3, -1
  store i32 %dec, i32* %pos1, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @Get_What(%struct.exception_ctx* %ctx) #0 {
entry:
  %retval = alloca i8*, align 4
  %ctx.addr = alloca %struct.exception_ctx*, align 4
  store %struct.exception_ctx* %ctx, %struct.exception_ctx** %ctx.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %0, i32 0, i32 2
  %1 = load i32, i32* %pos, align 4
  %cmp = icmp sge i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %exs = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %2, i32 0, i32 0
  %3 = load %struct.exception*, %struct.exception** %exs, align 4
  %4 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx.addr, align 4
  %pos1 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %4, i32 0, i32 2
  %5 = load i32, i32* %pos1, align 4
  %arrayidx = getelementptr inbounds %struct.exception, %struct.exception* %3, i32 %5
  %what = getelementptr inbounds %struct.exception, %struct.exception* %arrayidx, i32 0, i32 1
  %arraydecay = getelementptr inbounds [128 x i8], [128 x i8]* %what, i32 0, i32 0
  store i8* %arraydecay, i8** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  store i8* null, i8** %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %6 = load i8*, i8** %retval, align 4
  ret i8* %6
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @Push_Ex(%struct.exception_ctx* %exctx, i32 %extype, i8* %msg) #0 {
entry:
  %exctx.addr = alloca %struct.exception_ctx*, align 4
  %extype.addr = alloca i32, align 4
  %msg.addr = alloca i8*, align 4
  store %struct.exception_ctx* %exctx, %struct.exception_ctx** %exctx.addr, align 4
  store i32 %extype, i32* %extype.addr, align 4
  store i8* %msg, i8** %msg.addr, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %0, i32 0, i32 2
  %1 = load i32, i32* %pos, align 4
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* %pos, align 4
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %size = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %2, i32 0, i32 1
  %3 = load i32, i32* %size, align 4
  %cmp = icmp eq i32 %inc, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos1 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %4, i32 0, i32 2
  %5 = load i32, i32* %pos1, align 4
  %dec = add nsw i32 %5, -1
  store i32 %dec, i32* %pos1, align 4
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %exs = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %7, i32 0, i32 0
  %8 = load %struct.exception*, %struct.exception** %exs, align 4
  %9 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos2 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %9, i32 0, i32 2
  %10 = load i32, i32* %pos2, align 4
  %arrayidx = getelementptr inbounds %struct.exception, %struct.exception* %8, i32 %10
  %what = getelementptr inbounds %struct.exception, %struct.exception* %arrayidx, i32 0, i32 1
  %arraydecay = getelementptr inbounds [128 x i8], [128 x i8]* %what, i32 0, i32 0
  %11 = load i8*, i8** %msg.addr, align 4
  %call3 = call i32 (i8*, i32, i8*, ...) @snprintf(i8* %arraydecay, i32 128, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i8* %11)
  %12 = load i32, i32* %extype.addr, align 4
  %13 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %exs4 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %13, i32 0, i32 0
  %14 = load %struct.exception*, %struct.exception** %exs4, align 4
  %15 = load %struct.exception_ctx*, %struct.exception_ctx** %exctx.addr, align 4
  %pos5 = getelementptr inbounds %struct.exception_ctx, %struct.exception_ctx* %15, i32 0, i32 2
  %16 = load i32, i32* %pos5, align 4
  %arrayidx6 = getelementptr inbounds %struct.exception, %struct.exception* %14, i32 %16
  %extype7 = getelementptr inbounds %struct.exception, %struct.exception* %arrayidx6, i32 0, i32 0
  store i32 %12, i32* %extype7, align 4
  ret i32 -1
}

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #1

declare i32 @snprintf(i8* %0, i32 %1, i8* %2, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @baz(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call = call i32 @Push_Ex(%struct.exception_ctx* %1, i32 10, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.2, i32 0, i32 0))
  br label %return

if.else:                                          ; preds = %entry
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call1 = call i32 @Push_Ex(%struct.exception_ctx* %2, i32 11, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.3, i32 0, i32 0))
  br label %return

return:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @bar(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.4, i32 0, i32 0))
  %1 = load i32, i32* %n.addr, align 4
  call void @baz(i32 %1)
  %2 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call1 = call i32 @Has_Ex(%struct.exception_ctx* %2)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %bar_cleanup

if.end:                                           ; preds = %entry
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.5, i32 0, i32 0))
  br label %bar_cleanup

bar_cleanup:                                      ; preds = %if.end, %if.then
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i32 0, i32 0))
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @foo() #0 {
entry:
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.7, i32 0, i32 0))
  call void @bar(i32 0)
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %1 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call1 = call i32 @Is_Ex_Type(%struct.exception_ctx* %1, i32 10)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %3 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call2 = call i8* @Get_What(%struct.exception_ctx* %3)
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.8, i32 0, i32 0), i8* %call2)
  %4 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  call void @Pop_Ex(%struct.exception_ctx* %4)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %5 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call4 = call i32 @Has_Ex(%struct.exception_ctx* %5)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.then, label %if.end

if.then:                                          ; preds = %while.end
  br label %return

if.end:                                           ; preds = %while.end
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.9, i32 0, i32 0))
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.10, i32 0, i32 0))
  call void @bar(i32 1)
  br label %while.cond8

while.cond8:                                      ; preds = %while.body11, %if.end
  %8 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call9 = call i32 @Is_Ex_Type(%struct.exception_ctx* %8, i32 10)
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %while.body11, label %while.end14

while.body11:                                     ; preds = %while.cond8
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %10 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call12 = call i8* @Get_What(%struct.exception_ctx* %10)
  %call13 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.8, i32 0, i32 0), i8* %call12)
  %11 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  call void @Pop_Ex(%struct.exception_ctx* %11)
  br label %while.cond8

while.end14:                                      ; preds = %while.cond8
  %12 = load %struct.exception_ctx*, %struct.exception_ctx** @GLOBALEX, align 4
  %call15 = call i32 @Has_Ex(%struct.exception_ctx* %12)
  %tobool16 = icmp ne i32 %call15, 0
  br i1 %tobool16, label %if.then17, label %if.end18

if.then17:                                        ; preds = %while.end14
  br label %return

if.end18:                                         ; preds = %while.end14
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call19 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.9, i32 0, i32 0))
  br label %return

return:                                           ; preds = %if.end18, %if.then17, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %ctx = alloca %struct.exception_ctx*, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  %call = call %struct.exception_ctx* @Create_Ex_Ctx(i32 5)
  store %struct.exception_ctx* %call, %struct.exception_ctx** %ctx, align 4
  %0 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  store %struct.exception_ctx* %0, %struct.exception_ctx** @GLOBALEX, align 4
  call void @foo()
  %1 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %call1 = call i32 @Has_Ex(%struct.exception_ctx* %1)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %main_ex

if.end:                                           ; preds = %entry
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.11, i32 0, i32 0))
  br label %main_ex

main_ex:                                          ; preds = %if.end, %if.then
  br label %while.cond

while.cond:                                       ; preds = %while.body, %main_ex
  %3 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %call3 = call i32 @Has_Ex(%struct.exception_ctx* %3)
  %tobool4 = icmp ne i32 %call3, 0
  br i1 %tobool4, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %5 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  %call5 = call i8* @Get_What(%struct.exception_ctx* %5)
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.12, i32 0, i32 0), i8* %call5)
  %6 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  call void @Pop_Ex(%struct.exception_ctx* %6)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %7 = load %struct.exception_ctx*, %struct.exception_ctx** %ctx, align 4
  call void @Free_Ex_Ctx(%struct.exception_ctx* %7)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call1 = call i32 @Has_Ex(%struct.exception_ctx* %1)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %call1, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call3 = call i32 @Has_Ex(%struct.exception_ctx* %3)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool4 = icmp ne i32 %call3, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for __main_argc_argv()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
