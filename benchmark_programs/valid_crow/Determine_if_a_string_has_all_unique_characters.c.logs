
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for checkAndUpdateLetterList()

; ModuleID = './Determine_if_a_string_has_all_unique_characters.c.bc'
source_filename = "./Determine_if_a_string_has_all_unique_characters.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.letterList = type { i8, i32, %struct.positionList*, %struct.letterList* }
%struct.positionList = type { i32, %struct.positionList* }

@duplicatesFound = hidden global i8 0, align 1
@letterSet = hidden global %struct.letterList* null, align 4
@.str = private unnamed_addr constant [28 x i8] c"\0A'%c' (0x%x) at positions :\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%3d\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.3 = private unnamed_addr constant [26 x i8] c"Usage : %s <Test string>\0A\00", align 1
@.str.4 = private unnamed_addr constant [53 x i8] c"\22%s\22 - Length %d - Contains only unique characters.\0A\00", align 1
@.str.5 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.6 = private unnamed_addr constant [22 x i8] c"\22%s\22 - Length %d - %s\00", align 1
@.str.7 = private unnamed_addr constant [34 x i8] c"Contains only unique characters.\0A\00", align 1
@.str.8 = private unnamed_addr constant [46 x i8] c"Contains the following duplicate characters :\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @checkAndUpdateLetterList(i8 signext %c, i32 %pos) #0 {
entry:
  %c.addr = alloca i8, align 1
  %pos.addr = alloca i32, align 4
  %letterOccurs = alloca i8, align 1
  %letterIterator = alloca %struct.letterList*, align 4
  %newLetter = alloca %struct.letterList*, align 4
  %positionIterator = alloca %struct.positionList*, align 4
  %newPosition = alloca %struct.positionList*, align 4
  store i8 %c, i8* %c.addr, align 1
  store i32 %pos, i32* %pos.addr, align 4
  store i8 0, i8* %letterOccurs, align 1
  %0 = load %struct.letterList*, %struct.letterList** @letterSet, align 4
  %cmp = icmp eq %struct.letterList* %0, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call noalias i8* @malloc(i32 16)
  %1 = bitcast i8* %call to %struct.letterList*
  store %struct.letterList* %1, %struct.letterList** @letterSet, align 4
  %2 = load i8, i8* %c.addr, align 1
  %3 = load %struct.letterList*, %struct.letterList** @letterSet, align 4
  %letter = getelementptr inbounds %struct.letterList, %struct.letterList* %3, i32 0, i32 0
  store i8 %2, i8* %letter, align 4
  %4 = load %struct.letterList*, %struct.letterList** @letterSet, align 4
  %repititions = getelementptr inbounds %struct.letterList, %struct.letterList* %4, i32 0, i32 1
  store i32 0, i32* %repititions, align 4
  %call1 = call noalias i8* @malloc(i32 8)
  %5 = bitcast i8* %call1 to %struct.positionList*
  %6 = load %struct.letterList*, %struct.letterList** @letterSet, align 4
  %positions = getelementptr inbounds %struct.letterList, %struct.letterList* %6, i32 0, i32 2
  store %struct.positionList* %5, %struct.positionList** %positions, align 4
  %7 = load i32, i32* %pos.addr, align 4
  %8 = load %struct.letterList*, %struct.letterList** @letterSet, align 4
  %positions2 = getelementptr inbounds %struct.letterList, %struct.letterList* %8, i32 0, i32 2
  %9 = load %struct.positionList*, %struct.positionList** %positions2, align 4
  %position = getelementptr inbounds %struct.positionList, %struct.positionList* %9, i32 0, i32 0
  store i32 %7, i32* %position, align 4
  %10 = load %struct.letterList*, %struct.letterList** @letterSet, align 4
  %positions3 = getelementptr inbounds %struct.letterList, %struct.letterList* %10, i32 0, i32 2
  %11 = load %struct.positionList*, %struct.positionList** %positions3, align 4
  %next = getelementptr inbounds %struct.positionList, %struct.positionList* %11, i32 0, i32 1
  store %struct.positionList* null, %struct.positionList** %next, align 4
  %12 = load %struct.letterList*, %struct.letterList** @letterSet, align 4
  %next4 = getelementptr inbounds %struct.letterList, %struct.letterList* %12, i32 0, i32 3
  store %struct.letterList* null, %struct.letterList** %next4, align 4
  br label %if.end51

if.else:                                          ; preds = %entry
  %13 = load %struct.letterList*, %struct.letterList** @letterSet, align 4
  store %struct.letterList* %13, %struct.letterList** %letterIterator, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end32, %if.else
  %14 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %cmp5 = icmp ne %struct.letterList* %14, null
  br i1 %cmp5, label %while.body, label %while.end33

while.body:                                       ; preds = %while.cond
  %15 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %letter6 = getelementptr inbounds %struct.letterList, %struct.letterList* %15, i32 0, i32 0
  %16 = load i8, i8* %letter6, align 4
  %conv = sext i8 %16 to i32
  %17 = load i8, i8* %c.addr, align 1
  %conv7 = sext i8 %17 to i32
  %cmp8 = icmp eq i32 %conv, %conv7
  br i1 %cmp8, label %if.then10, label %if.end

if.then10:                                        ; preds = %while.body
  store i8 1, i8* %letterOccurs, align 1
  store i8 1, i8* @duplicatesFound, align 1
  %18 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %repititions11 = getelementptr inbounds %struct.letterList, %struct.letterList* %18, i32 0, i32 1
  %19 = load i32, i32* %repititions11, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %repititions11, align 4
  %20 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %positions12 = getelementptr inbounds %struct.letterList, %struct.letterList* %20, i32 0, i32 2
  %21 = load %struct.positionList*, %struct.positionList** %positions12, align 4
  store %struct.positionList* %21, %struct.positionList** %positionIterator, align 4
  br label %while.cond13

while.cond13:                                     ; preds = %while.body17, %if.then10
  %22 = load %struct.positionList*, %struct.positionList** %positionIterator, align 4
  %next14 = getelementptr inbounds %struct.positionList, %struct.positionList* %22, i32 0, i32 1
  %23 = load %struct.positionList*, %struct.positionList** %next14, align 4
  %cmp15 = icmp ne %struct.positionList* %23, null
  br i1 %cmp15, label %while.body17, label %while.end

while.body17:                                     ; preds = %while.cond13
  %24 = load %struct.positionList*, %struct.positionList** %positionIterator, align 4
  %next18 = getelementptr inbounds %struct.positionList, %struct.positionList* %24, i32 0, i32 1
  %25 = load %struct.positionList*, %struct.positionList** %next18, align 4
  store %struct.positionList* %25, %struct.positionList** %positionIterator, align 4
  br label %while.cond13

while.end:                                        ; preds = %while.cond13
  %call19 = call noalias i8* @malloc(i32 8)
  %26 = bitcast i8* %call19 to %struct.positionList*
  store %struct.positionList* %26, %struct.positionList** %newPosition, align 4
  %27 = load i32, i32* %pos.addr, align 4
  %28 = load %struct.positionList*, %struct.positionList** %newPosition, align 4
  %position20 = getelementptr inbounds %struct.positionList, %struct.positionList* %28, i32 0, i32 0
  store i32 %27, i32* %position20, align 4
  %29 = load %struct.positionList*, %struct.positionList** %newPosition, align 4
  %next21 = getelementptr inbounds %struct.positionList, %struct.positionList* %29, i32 0, i32 1
  store %struct.positionList* null, %struct.positionList** %next21, align 4
  %30 = load %struct.positionList*, %struct.positionList** %newPosition, align 4
  %31 = load %struct.positionList*, %struct.positionList** %positionIterator, align 4
  %next22 = getelementptr inbounds %struct.positionList, %struct.positionList* %31, i32 0, i32 1
  store %struct.positionList* %30, %struct.positionList** %next22, align 4
  br label %if.end

if.end:                                           ; preds = %while.end, %while.body
  %32 = load i8, i8* %letterOccurs, align 1
  %tobool = trunc i8 %32 to i1
  %conv23 = zext i1 %tobool to i32
  %cmp24 = icmp eq i32 %conv23, 0
  br i1 %cmp24, label %land.lhs.true, label %if.else30

land.lhs.true:                                    ; preds = %if.end
  %33 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %next26 = getelementptr inbounds %struct.letterList, %struct.letterList* %33, i32 0, i32 3
  %34 = load %struct.letterList*, %struct.letterList** %next26, align 4
  %cmp27 = icmp eq %struct.letterList* %34, null
  br i1 %cmp27, label %if.then29, label %if.else30

if.then29:                                        ; preds = %land.lhs.true
  br label %while.end33

if.else30:                                        ; preds = %land.lhs.true, %if.end
  %35 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %next31 = getelementptr inbounds %struct.letterList, %struct.letterList* %35, i32 0, i32 3
  %36 = load %struct.letterList*, %struct.letterList** %next31, align 4
  store %struct.letterList* %36, %struct.letterList** %letterIterator, align 4
  br label %if.end32

if.end32:                                         ; preds = %if.else30
  br label %while.cond

while.end33:                                      ; preds = %if.then29, %while.cond
  %37 = load i8, i8* %letterOccurs, align 1
  %tobool34 = trunc i8 %37 to i1
  %conv35 = zext i1 %tobool34 to i32
  %cmp36 = icmp eq i32 %conv35, 0
  br i1 %cmp36, label %if.then38, label %if.end50

if.then38:                                        ; preds = %while.end33
  %call39 = call noalias i8* @malloc(i32 16)
  %38 = bitcast i8* %call39 to %struct.letterList*
  store %struct.letterList* %38, %struct.letterList** %newLetter, align 4
  %39 = load i8, i8* %c.addr, align 1
  %40 = load %struct.letterList*, %struct.letterList** %newLetter, align 4
  %letter40 = getelementptr inbounds %struct.letterList, %struct.letterList* %40, i32 0, i32 0
  store i8 %39, i8* %letter40, align 4
  %41 = load %struct.letterList*, %struct.letterList** %newLetter, align 4
  %repititions41 = getelementptr inbounds %struct.letterList, %struct.letterList* %41, i32 0, i32 1
  store i32 0, i32* %repititions41, align 4
  %call42 = call noalias i8* @malloc(i32 8)
  %42 = bitcast i8* %call42 to %struct.positionList*
  %43 = load %struct.letterList*, %struct.letterList** %newLetter, align 4
  %positions43 = getelementptr inbounds %struct.letterList, %struct.letterList* %43, i32 0, i32 2
  store %struct.positionList* %42, %struct.positionList** %positions43, align 4
  %44 = load i32, i32* %pos.addr, align 4
  %45 = load %struct.letterList*, %struct.letterList** %newLetter, align 4
  %positions44 = getelementptr inbounds %struct.letterList, %struct.letterList* %45, i32 0, i32 2
  %46 = load %struct.positionList*, %struct.positionList** %positions44, align 4
  %position45 = getelementptr inbounds %struct.positionList, %struct.positionList* %46, i32 0, i32 0
  store i32 %44, i32* %position45, align 4
  %47 = load %struct.letterList*, %struct.letterList** %newLetter, align 4
  %positions46 = getelementptr inbounds %struct.letterList, %struct.letterList* %47, i32 0, i32 2
  %48 = load %struct.positionList*, %struct.positionList** %positions46, align 4
  %next47 = getelementptr inbounds %struct.positionList, %struct.positionList* %48, i32 0, i32 1
  store %struct.positionList* null, %struct.positionList** %next47, align 4
  %49 = load %struct.letterList*, %struct.letterList** %newLetter, align 4
  %next48 = getelementptr inbounds %struct.letterList, %struct.letterList* %49, i32 0, i32 3
  store %struct.letterList* null, %struct.letterList** %next48, align 4
  %50 = load %struct.letterList*, %struct.letterList** %newLetter, align 4
  %51 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %next49 = getelementptr inbounds %struct.letterList, %struct.letterList* %51, i32 0, i32 3
  store %struct.letterList* %50, %struct.letterList** %next49, align 4
  br label %if.end50

if.end50:                                         ; preds = %if.then38, %while.end33
  br label %if.end51

if.end51:                                         ; preds = %if.end50, %if.then
  ret void
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @printLetterList() #0 {
entry:
  %positionIterator = alloca %struct.positionList*, align 4
  %letterIterator = alloca %struct.letterList*, align 4
  %0 = load %struct.letterList*, %struct.letterList** @letterSet, align 4
  store %struct.letterList* %0, %struct.letterList** %letterIterator, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %1 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %cmp = icmp ne %struct.letterList* %1, null
  br i1 %cmp, label %while.body, label %while.end10

while.body:                                       ; preds = %while.cond
  %2 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %repititions = getelementptr inbounds %struct.letterList, %struct.letterList* %2, i32 0, i32 1
  %3 = load i32, i32* %repititions, align 4
  %cmp1 = icmp sgt i32 %3, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %4 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %letter = getelementptr inbounds %struct.letterList, %struct.letterList* %4, i32 0, i32 0
  %5 = load i8, i8* %letter, align 4
  %conv = sext i8 %5 to i32
  %6 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %letter2 = getelementptr inbounds %struct.letterList, %struct.letterList* %6, i32 0, i32 0
  %7 = load i8, i8* %letter2, align 4
  %conv3 = sext i8 %7 to i32
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str, i32 0, i32 0), i32 %conv, i32 %conv3)
  %8 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %positions = getelementptr inbounds %struct.letterList, %struct.letterList* %8, i32 0, i32 2
  %9 = load %struct.positionList*, %struct.positionList** %positions, align 4
  store %struct.positionList* %9, %struct.positionList** %positionIterator, align 4
  br label %while.cond4

while.cond4:                                      ; preds = %while.body7, %if.then
  %10 = load %struct.positionList*, %struct.positionList** %positionIterator, align 4
  %cmp5 = icmp ne %struct.positionList* %10, null
  br i1 %cmp5, label %while.body7, label %while.end

while.body7:                                      ; preds = %while.cond4
  %11 = load %struct.positionList*, %struct.positionList** %positionIterator, align 4
  %position = getelementptr inbounds %struct.positionList, %struct.positionList* %11, i32 0, i32 0
  %12 = load i32, i32* %position, align 4
  %add = add nsw i32 %12, 1
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %add)
  %13 = load %struct.positionList*, %struct.positionList** %positionIterator, align 4
  %next = getelementptr inbounds %struct.positionList, %struct.positionList* %13, i32 0, i32 1
  %14 = load %struct.positionList*, %struct.positionList** %next, align 4
  store %struct.positionList* %14, %struct.positionList** %positionIterator, align 4
  br label %while.cond4

while.end:                                        ; preds = %while.cond4
  br label %if.end

if.end:                                           ; preds = %while.end, %while.body
  %15 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %next9 = getelementptr inbounds %struct.letterList, %struct.letterList* %15, i32 0, i32 3
  %16 = load %struct.letterList*, %struct.letterList** %next9, align 4
  store %struct.letterList* %16, %struct.letterList** %letterIterator, align 4
  br label %while.cond

while.end10:                                      ; preds = %while.cond
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  %0 = load i32, i32* %argc.addr, align 4
  %cmp = icmp sgt i32 %0, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i8**, i8*** %argv.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 0
  %2 = load i8*, i8** %arrayidx, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.3, i32 0, i32 0), i8* %2)
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i32, i32* %argc.addr, align 4
  %cmp1 = icmp eq i32 %3, 1
  br i1 %cmp1, label %if.then5, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %4 = load i8**, i8*** %argv.addr, align 4
  %arrayidx2 = getelementptr inbounds i8*, i8** %4, i32 1
  %5 = load i8*, i8** %arrayidx2, align 4
  %call3 = call i32 @strlen(i8* %5) #3
  %cmp4 = icmp eq i32 %call3, 1
  br i1 %cmp4, label %if.then5, label %if.end11

if.then5:                                         ; preds = %lor.lhs.false, %if.end
  %6 = load i32, i32* %argc.addr, align 4
  %cmp6 = icmp eq i32 %6, 1
  br i1 %cmp6, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then5
  br label %cond.end

cond.false:                                       ; preds = %if.then5
  %7 = load i8**, i8*** %argv.addr, align 4
  %arrayidx7 = getelementptr inbounds i8*, i8** %7, i32 1
  %8 = load i8*, i8** %arrayidx7, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.5, i32 0, i32 0), %cond.true ], [ %8, %cond.false ]
  %9 = load i32, i32* %argc.addr, align 4
  %cmp8 = icmp eq i32 %9, 1
  %10 = zext i1 %cmp8 to i64
  %cond9 = select i1 %cmp8, i32 0, i32 1
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.4, i32 0, i32 0), i8* %cond, i32 %cond9)
  store i32 0, i32* %retval, align 4
  br label %return

if.end11:                                         ; preds = %lor.lhs.false
  %11 = load i8**, i8*** %argv.addr, align 4
  %arrayidx12 = getelementptr inbounds i8*, i8** %11, i32 1
  %12 = load i8*, i8** %arrayidx12, align 4
  %call13 = call i32 @strlen(i8* %12) #3
  store i32 %call13, i32* %len, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end11
  %13 = load i32, i32* %i, align 4
  %14 = load i32, i32* %len, align 4
  %cmp14 = icmp slt i32 %13, %14
  br i1 %cmp14, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %15 = load i8**, i8*** %argv.addr, align 4
  %arrayidx15 = getelementptr inbounds i8*, i8** %15, i32 1
  %16 = load i8*, i8** %arrayidx15, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx16 = getelementptr inbounds i8, i8* %16, i32 %17
  %18 = load i8, i8* %arrayidx16, align 1
  %19 = load i32, i32* %i, align 4
  call void @checkAndUpdateLetterList(i8 signext %18, i32 %19)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %20 = load i32, i32* %i, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %21 = load i8**, i8*** %argv.addr, align 4
  %arrayidx17 = getelementptr inbounds i8*, i8** %21, i32 1
  %22 = load i8*, i8** %arrayidx17, align 4
  %23 = load i32, i32* %len, align 4
  %24 = load i8, i8* @duplicatesFound, align 1
  %tobool = trunc i8 %24 to i1
  %conv = zext i1 %tobool to i32
  %cmp18 = icmp eq i32 %conv, 0
  %25 = zext i1 %cmp18 to i64
  %cond20 = select i1 %cmp18, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.8, i32 0, i32 0)
  %call21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.6, i32 0, i32 0), i8* %22, i32 %23, i8* %cond20)
  %26 = load i8, i8* @duplicatesFound, align 1
  %tobool22 = trunc i8 %26 to i1
  %conv23 = zext i1 %tobool22 to i32
  %cmp24 = icmp eq i32 %conv23, 1
  br i1 %cmp24, label %if.then26, label %if.end27

if.then26:                                        ; preds = %for.end
  call void @printLetterList()
  br label %if.end27

if.end27:                                         ; preds = %if.then26, %for.end
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end27, %cond.end, %if.then
  %27 = load i32, i32* %retval, align 4
  ret i32 %27
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %cmp = icmp eq %struct.letterList* %0, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i8, i8* %c.addr, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %pos.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp5 = icmp ne %struct.letterList* %14, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %16 = load i8, i8* %letter6, align 4
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %16 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %17 = load i8, i8* %c.addr, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv7 = sext i8 %17 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp8 = icmp eq i32 %conv, %conv7
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i1 = eq %1, %3
infer %4

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %repititions11, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %19, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp15 = icmp ne %struct.positionList* %23, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %pos.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %32 = load i8, i8* %letterOccurs, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0 (demandedBits=00000001)

; *****
; For LLVM instruction:
;  %tobool = trunc i8 %32 to i1
; Looking for a replacement for:
%0:i8 = var
%1:i1 = trunc %0
infer %1

; *****
; For LLVM instruction:
;  %conv23 = zext i1 %tobool to i32
; Looking for a replacement for:
%0:i8 = var
%1:i1 = trunc %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %cmp24 = icmp eq i32 %conv23, 0
; Looking for a replacement for:
%0:i8 = var
%1:i1 = trunc %0
%2:i32 = zext %1
%3:i1 = eq 0:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %cmp27 = icmp eq %struct.letterList* %34, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %37 = load i8, i8* %letterOccurs, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0 (demandedBits=00000001)

; *****
; For LLVM instruction:
;  %tobool34 = trunc i8 %37 to i1
; Looking for a replacement for:
%0:i8 = var
%1:i1 = trunc %0
infer %1

; *****
; For LLVM instruction:
;  %conv35 = zext i1 %tobool34 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i1 = trunc %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %cmp36 = icmp eq i32 %conv35, 0
; Looking for a replacement for:
%0:i8 = var
%1:i1 = trunc %0
%2:i32 = zext %1
%3:i1 = eq 0:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %39 = load i8, i8* %c.addr, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %44 = load i32, i32* %pos.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i1 = eq %1, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0 (demandedBits=00000001)


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i1 = trunc %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i1 = trunc %0
%2:i32 = zext %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i1 = trunc %0
%2:i32 = zext %1
%3:i1 = eq 0:i32, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i1 = trunc %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for checkAndUpdateLetterList()

; entering Souper's runOnFunction() for printLetterList()

; ModuleID = './Determine_if_a_string_has_all_unique_characters.c.bc'
source_filename = "./Determine_if_a_string_has_all_unique_characters.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.letterList = type { i8, i32, %struct.positionList*, %struct.letterList* }
%struct.positionList = type { i32, %struct.positionList* }

@duplicatesFound = hidden global i8 0, align 1
@letterSet = hidden global %struct.letterList* null, align 4
@.str = private unnamed_addr constant [28 x i8] c"\0A'%c' (0x%x) at positions :\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%3d\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.3 = private unnamed_addr constant [26 x i8] c"Usage : %s <Test string>\0A\00", align 1
@.str.4 = private unnamed_addr constant [53 x i8] c"\22%s\22 - Length %d - Contains only unique characters.\0A\00", align 1
@.str.5 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.6 = private unnamed_addr constant [22 x i8] c"\22%s\22 - Length %d - %s\00", align 1
@.str.7 = private unnamed_addr constant [34 x i8] c"Contains only unique characters.\0A\00", align 1
@.str.8 = private unnamed_addr constant [46 x i8] c"Contains the following duplicate characters :\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @checkAndUpdateLetterList(i8 signext %c, i32 %pos) #0 {
entry:
  %c.addr = alloca i8, align 1
  %pos.addr = alloca i32, align 4
  %letterOccurs = alloca i8, align 1
  %letterIterator = alloca %struct.letterList*, align 4
  %newLetter = alloca %struct.letterList*, align 4
  %positionIterator = alloca %struct.positionList*, align 4
  %newPosition = alloca %struct.positionList*, align 4
  store i8 %c, i8* %c.addr, align 1
  store i32 %pos, i32* %pos.addr, align 4
  store i8 0, i8* %letterOccurs, align 1
  %0 = load %struct.letterList*, %struct.letterList** @letterSet, align 4
  %cmp = icmp eq %struct.letterList* %0, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call noalias i8* @malloc(i32 16)
  %1 = bitcast i8* %call to %struct.letterList*
  store %struct.letterList* %1, %struct.letterList** @letterSet, align 4
  %2 = load i8, i8* %c.addr, align 1
  %3 = load %struct.letterList*, %struct.letterList** @letterSet, align 4
  %letter = getelementptr inbounds %struct.letterList, %struct.letterList* %3, i32 0, i32 0
  store i8 %2, i8* %letter, align 4
  %4 = load %struct.letterList*, %struct.letterList** @letterSet, align 4
  %repititions = getelementptr inbounds %struct.letterList, %struct.letterList* %4, i32 0, i32 1
  store i32 0, i32* %repititions, align 4
  %call1 = call noalias i8* @malloc(i32 8)
  %5 = bitcast i8* %call1 to %struct.positionList*
  %6 = load %struct.letterList*, %struct.letterList** @letterSet, align 4
  %positions = getelementptr inbounds %struct.letterList, %struct.letterList* %6, i32 0, i32 2
  store %struct.positionList* %5, %struct.positionList** %positions, align 4
  %7 = load i32, i32* %pos.addr, align 4
  %8 = load %struct.letterList*, %struct.letterList** @letterSet, align 4
  %positions2 = getelementptr inbounds %struct.letterList, %struct.letterList* %8, i32 0, i32 2
  %9 = load %struct.positionList*, %struct.positionList** %positions2, align 4
  %position = getelementptr inbounds %struct.positionList, %struct.positionList* %9, i32 0, i32 0
  store i32 %7, i32* %position, align 4
  %10 = load %struct.letterList*, %struct.letterList** @letterSet, align 4
  %positions3 = getelementptr inbounds %struct.letterList, %struct.letterList* %10, i32 0, i32 2
  %11 = load %struct.positionList*, %struct.positionList** %positions3, align 4
  %next = getelementptr inbounds %struct.positionList, %struct.positionList* %11, i32 0, i32 1
  store %struct.positionList* null, %struct.positionList** %next, align 4
  %12 = load %struct.letterList*, %struct.letterList** @letterSet, align 4
  %next4 = getelementptr inbounds %struct.letterList, %struct.letterList* %12, i32 0, i32 3
  store %struct.letterList* null, %struct.letterList** %next4, align 4
  br label %if.end51

if.else:                                          ; preds = %entry
  %13 = load %struct.letterList*, %struct.letterList** @letterSet, align 4
  store %struct.letterList* %13, %struct.letterList** %letterIterator, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end32, %if.else
  %14 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %cmp5 = icmp ne %struct.letterList* %14, null
  br i1 %cmp5, label %while.body, label %while.end33

while.body:                                       ; preds = %while.cond
  %15 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %letter6 = getelementptr inbounds %struct.letterList, %struct.letterList* %15, i32 0, i32 0
  %16 = load i8, i8* %letter6, align 4
  %conv = sext i8 %16 to i32
  %17 = load i8, i8* %c.addr, align 1
  %conv7 = sext i8 %17 to i32
  %cmp8 = icmp eq i32 %conv, %conv7
  br i1 %cmp8, label %if.then10, label %if.end

if.then10:                                        ; preds = %while.body
  store i8 1, i8* %letterOccurs, align 1
  store i8 1, i8* @duplicatesFound, align 1
  %18 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %repititions11 = getelementptr inbounds %struct.letterList, %struct.letterList* %18, i32 0, i32 1
  %19 = load i32, i32* %repititions11, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %repititions11, align 4
  %20 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %positions12 = getelementptr inbounds %struct.letterList, %struct.letterList* %20, i32 0, i32 2
  %21 = load %struct.positionList*, %struct.positionList** %positions12, align 4
  store %struct.positionList* %21, %struct.positionList** %positionIterator, align 4
  br label %while.cond13

while.cond13:                                     ; preds = %while.body17, %if.then10
  %22 = load %struct.positionList*, %struct.positionList** %positionIterator, align 4
  %next14 = getelementptr inbounds %struct.positionList, %struct.positionList* %22, i32 0, i32 1
  %23 = load %struct.positionList*, %struct.positionList** %next14, align 4
  %cmp15 = icmp ne %struct.positionList* %23, null
  br i1 %cmp15, label %while.body17, label %while.end

while.body17:                                     ; preds = %while.cond13
  %24 = load %struct.positionList*, %struct.positionList** %positionIterator, align 4
  %next18 = getelementptr inbounds %struct.positionList, %struct.positionList* %24, i32 0, i32 1
  %25 = load %struct.positionList*, %struct.positionList** %next18, align 4
  store %struct.positionList* %25, %struct.positionList** %positionIterator, align 4
  br label %while.cond13

while.end:                                        ; preds = %while.cond13
  %call19 = call noalias i8* @malloc(i32 8)
  %26 = bitcast i8* %call19 to %struct.positionList*
  store %struct.positionList* %26, %struct.positionList** %newPosition, align 4
  %27 = load i32, i32* %pos.addr, align 4
  %28 = load %struct.positionList*, %struct.positionList** %newPosition, align 4
  %position20 = getelementptr inbounds %struct.positionList, %struct.positionList* %28, i32 0, i32 0
  store i32 %27, i32* %position20, align 4
  %29 = load %struct.positionList*, %struct.positionList** %newPosition, align 4
  %next21 = getelementptr inbounds %struct.positionList, %struct.positionList* %29, i32 0, i32 1
  store %struct.positionList* null, %struct.positionList** %next21, align 4
  %30 = load %struct.positionList*, %struct.positionList** %newPosition, align 4
  %31 = load %struct.positionList*, %struct.positionList** %positionIterator, align 4
  %next22 = getelementptr inbounds %struct.positionList, %struct.positionList* %31, i32 0, i32 1
  store %struct.positionList* %30, %struct.positionList** %next22, align 4
  br label %if.end

if.end:                                           ; preds = %while.end, %while.body
  %32 = load i8, i8* %letterOccurs, align 1
  %tobool = trunc i8 %32 to i1
  %conv23 = zext i1 %tobool to i32
  %cmp24 = icmp eq i32 %conv23, 0
  br i1 %cmp24, label %land.lhs.true, label %if.else30

land.lhs.true:                                    ; preds = %if.end
  %33 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %next26 = getelementptr inbounds %struct.letterList, %struct.letterList* %33, i32 0, i32 3
  %34 = load %struct.letterList*, %struct.letterList** %next26, align 4
  %cmp27 = icmp eq %struct.letterList* %34, null
  br i1 %cmp27, label %if.then29, label %if.else30

if.then29:                                        ; preds = %land.lhs.true
  br label %while.end33

if.else30:                                        ; preds = %land.lhs.true, %if.end
  %35 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %next31 = getelementptr inbounds %struct.letterList, %struct.letterList* %35, i32 0, i32 3
  %36 = load %struct.letterList*, %struct.letterList** %next31, align 4
  store %struct.letterList* %36, %struct.letterList** %letterIterator, align 4
  br label %if.end32

if.end32:                                         ; preds = %if.else30
  br label %while.cond

while.end33:                                      ; preds = %if.then29, %while.cond
  %37 = load i8, i8* %letterOccurs, align 1
  %tobool34 = trunc i8 %37 to i1
  %conv35 = zext i1 %tobool34 to i32
  %cmp36 = icmp eq i32 %conv35, 0
  br i1 %cmp36, label %if.then38, label %if.end50

if.then38:                                        ; preds = %while.end33
  %call39 = call noalias i8* @malloc(i32 16)
  %38 = bitcast i8* %call39 to %struct.letterList*
  store %struct.letterList* %38, %struct.letterList** %newLetter, align 4
  %39 = load i8, i8* %c.addr, align 1
  %40 = load %struct.letterList*, %struct.letterList** %newLetter, align 4
  %letter40 = getelementptr inbounds %struct.letterList, %struct.letterList* %40, i32 0, i32 0
  store i8 %39, i8* %letter40, align 4
  %41 = load %struct.letterList*, %struct.letterList** %newLetter, align 4
  %repititions41 = getelementptr inbounds %struct.letterList, %struct.letterList* %41, i32 0, i32 1
  store i32 0, i32* %repititions41, align 4
  %call42 = call noalias i8* @malloc(i32 8)
  %42 = bitcast i8* %call42 to %struct.positionList*
  %43 = load %struct.letterList*, %struct.letterList** %newLetter, align 4
  %positions43 = getelementptr inbounds %struct.letterList, %struct.letterList* %43, i32 0, i32 2
  store %struct.positionList* %42, %struct.positionList** %positions43, align 4
  %44 = load i32, i32* %pos.addr, align 4
  %45 = load %struct.letterList*, %struct.letterList** %newLetter, align 4
  %positions44 = getelementptr inbounds %struct.letterList, %struct.letterList* %45, i32 0, i32 2
  %46 = load %struct.positionList*, %struct.positionList** %positions44, align 4
  %position45 = getelementptr inbounds %struct.positionList, %struct.positionList* %46, i32 0, i32 0
  store i32 %44, i32* %position45, align 4
  %47 = load %struct.letterList*, %struct.letterList** %newLetter, align 4
  %positions46 = getelementptr inbounds %struct.letterList, %struct.letterList* %47, i32 0, i32 2
  %48 = load %struct.positionList*, %struct.positionList** %positions46, align 4
  %next47 = getelementptr inbounds %struct.positionList, %struct.positionList* %48, i32 0, i32 1
  store %struct.positionList* null, %struct.positionList** %next47, align 4
  %49 = load %struct.letterList*, %struct.letterList** %newLetter, align 4
  %next48 = getelementptr inbounds %struct.letterList, %struct.letterList* %49, i32 0, i32 3
  store %struct.letterList* null, %struct.letterList** %next48, align 4
  %50 = load %struct.letterList*, %struct.letterList** %newLetter, align 4
  %51 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %next49 = getelementptr inbounds %struct.letterList, %struct.letterList* %51, i32 0, i32 3
  store %struct.letterList* %50, %struct.letterList** %next49, align 4
  br label %if.end50

if.end50:                                         ; preds = %if.then38, %while.end33
  br label %if.end51

if.end51:                                         ; preds = %if.end50, %if.then
  ret void
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @printLetterList() #0 {
entry:
  %positionIterator = alloca %struct.positionList*, align 4
  %letterIterator = alloca %struct.letterList*, align 4
  %0 = load %struct.letterList*, %struct.letterList** @letterSet, align 4
  store %struct.letterList* %0, %struct.letterList** %letterIterator, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %1 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %cmp = icmp ne %struct.letterList* %1, null
  br i1 %cmp, label %while.body, label %while.end10

while.body:                                       ; preds = %while.cond
  %2 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %repititions = getelementptr inbounds %struct.letterList, %struct.letterList* %2, i32 0, i32 1
  %3 = load i32, i32* %repititions, align 4
  %cmp1 = icmp sgt i32 %3, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %4 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %letter = getelementptr inbounds %struct.letterList, %struct.letterList* %4, i32 0, i32 0
  %5 = load i8, i8* %letter, align 4
  %conv = sext i8 %5 to i32
  %6 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %letter2 = getelementptr inbounds %struct.letterList, %struct.letterList* %6, i32 0, i32 0
  %7 = load i8, i8* %letter2, align 4
  %conv3 = sext i8 %7 to i32
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str, i32 0, i32 0), i32 %conv, i32 %conv3)
  %8 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %positions = getelementptr inbounds %struct.letterList, %struct.letterList* %8, i32 0, i32 2
  %9 = load %struct.positionList*, %struct.positionList** %positions, align 4
  store %struct.positionList* %9, %struct.positionList** %positionIterator, align 4
  br label %while.cond4

while.cond4:                                      ; preds = %while.body7, %if.then
  %10 = load %struct.positionList*, %struct.positionList** %positionIterator, align 4
  %cmp5 = icmp ne %struct.positionList* %10, null
  br i1 %cmp5, label %while.body7, label %while.end

while.body7:                                      ; preds = %while.cond4
  %11 = load %struct.positionList*, %struct.positionList** %positionIterator, align 4
  %position = getelementptr inbounds %struct.positionList, %struct.positionList* %11, i32 0, i32 0
  %12 = load i32, i32* %position, align 4
  %add = add nsw i32 %12, 1
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %add)
  %13 = load %struct.positionList*, %struct.positionList** %positionIterator, align 4
  %next = getelementptr inbounds %struct.positionList, %struct.positionList* %13, i32 0, i32 1
  %14 = load %struct.positionList*, %struct.positionList** %next, align 4
  store %struct.positionList* %14, %struct.positionList** %positionIterator, align 4
  br label %while.cond4

while.end:                                        ; preds = %while.cond4
  br label %if.end

if.end:                                           ; preds = %while.end, %while.body
  %15 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %next9 = getelementptr inbounds %struct.letterList, %struct.letterList* %15, i32 0, i32 3
  %16 = load %struct.letterList*, %struct.letterList** %next9, align 4
  store %struct.letterList* %16, %struct.letterList** %letterIterator, align 4
  br label %while.cond

while.end10:                                      ; preds = %while.cond
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  %0 = load i32, i32* %argc.addr, align 4
  %cmp = icmp sgt i32 %0, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i8**, i8*** %argv.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 0
  %2 = load i8*, i8** %arrayidx, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.3, i32 0, i32 0), i8* %2)
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i32, i32* %argc.addr, align 4
  %cmp1 = icmp eq i32 %3, 1
  br i1 %cmp1, label %if.then5, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %4 = load i8**, i8*** %argv.addr, align 4
  %arrayidx2 = getelementptr inbounds i8*, i8** %4, i32 1
  %5 = load i8*, i8** %arrayidx2, align 4
  %call3 = call i32 @strlen(i8* %5) #3
  %cmp4 = icmp eq i32 %call3, 1
  br i1 %cmp4, label %if.then5, label %if.end11

if.then5:                                         ; preds = %lor.lhs.false, %if.end
  %6 = load i32, i32* %argc.addr, align 4
  %cmp6 = icmp eq i32 %6, 1
  br i1 %cmp6, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then5
  br label %cond.end

cond.false:                                       ; preds = %if.then5
  %7 = load i8**, i8*** %argv.addr, align 4
  %arrayidx7 = getelementptr inbounds i8*, i8** %7, i32 1
  %8 = load i8*, i8** %arrayidx7, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.5, i32 0, i32 0), %cond.true ], [ %8, %cond.false ]
  %9 = load i32, i32* %argc.addr, align 4
  %cmp8 = icmp eq i32 %9, 1
  %10 = zext i1 %cmp8 to i64
  %cond9 = select i1 %cmp8, i32 0, i32 1
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.4, i32 0, i32 0), i8* %cond, i32 %cond9)
  store i32 0, i32* %retval, align 4
  br label %return

if.end11:                                         ; preds = %lor.lhs.false
  %11 = load i8**, i8*** %argv.addr, align 4
  %arrayidx12 = getelementptr inbounds i8*, i8** %11, i32 1
  %12 = load i8*, i8** %arrayidx12, align 4
  %call13 = call i32 @strlen(i8* %12) #3
  store i32 %call13, i32* %len, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end11
  %13 = load i32, i32* %i, align 4
  %14 = load i32, i32* %len, align 4
  %cmp14 = icmp slt i32 %13, %14
  br i1 %cmp14, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %15 = load i8**, i8*** %argv.addr, align 4
  %arrayidx15 = getelementptr inbounds i8*, i8** %15, i32 1
  %16 = load i8*, i8** %arrayidx15, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx16 = getelementptr inbounds i8, i8* %16, i32 %17
  %18 = load i8, i8* %arrayidx16, align 1
  %19 = load i32, i32* %i, align 4
  call void @checkAndUpdateLetterList(i8 signext %18, i32 %19)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %20 = load i32, i32* %i, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %21 = load i8**, i8*** %argv.addr, align 4
  %arrayidx17 = getelementptr inbounds i8*, i8** %21, i32 1
  %22 = load i8*, i8** %arrayidx17, align 4
  %23 = load i32, i32* %len, align 4
  %24 = load i8, i8* @duplicatesFound, align 1
  %tobool = trunc i8 %24 to i1
  %conv = zext i1 %tobool to i32
  %cmp18 = icmp eq i32 %conv, 0
  %25 = zext i1 %cmp18 to i64
  %cond20 = select i1 %cmp18, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.8, i32 0, i32 0)
  %call21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.6, i32 0, i32 0), i8* %22, i32 %23, i8* %cond20)
  %26 = load i8, i8* @duplicatesFound, align 1
  %tobool22 = trunc i8 %26 to i1
  %conv23 = zext i1 %tobool22 to i32
  %cmp24 = icmp eq i32 %conv23, 1
  br i1 %cmp24, label %if.then26, label %if.end27

if.then26:                                        ; preds = %for.end
  call void @printLetterList()
  br label %if.end27

if.end27:                                         ; preds = %if.then26, %for.end
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end27, %cond.end, %if.then
  %27 = load i32, i32* %retval, align 4
  ret i32 %27
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %cmp = icmp ne %struct.letterList* %1, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %repititions, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = icmp sgt i32 %3, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i8, i8* %letter, align 4
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %5 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i8, i8* %letter2, align 4
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv3 = sext i8 %7 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp5 = icmp ne %struct.positionList* %10, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %position, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %12, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for printLetterList()

; entering Souper's runOnFunction() for __main_argc_argv()

; ModuleID = './Determine_if_a_string_has_all_unique_characters.c.bc'
source_filename = "./Determine_if_a_string_has_all_unique_characters.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.letterList = type { i8, i32, %struct.positionList*, %struct.letterList* }
%struct.positionList = type { i32, %struct.positionList* }

@duplicatesFound = hidden global i8 0, align 1
@letterSet = hidden global %struct.letterList* null, align 4
@.str = private unnamed_addr constant [28 x i8] c"\0A'%c' (0x%x) at positions :\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%3d\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.3 = private unnamed_addr constant [26 x i8] c"Usage : %s <Test string>\0A\00", align 1
@.str.4 = private unnamed_addr constant [53 x i8] c"\22%s\22 - Length %d - Contains only unique characters.\0A\00", align 1
@.str.5 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.6 = private unnamed_addr constant [22 x i8] c"\22%s\22 - Length %d - %s\00", align 1
@.str.7 = private unnamed_addr constant [34 x i8] c"Contains only unique characters.\0A\00", align 1
@.str.8 = private unnamed_addr constant [46 x i8] c"Contains the following duplicate characters :\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @checkAndUpdateLetterList(i8 signext %c, i32 %pos) #0 {
entry:
  %c.addr = alloca i8, align 1
  %pos.addr = alloca i32, align 4
  %letterOccurs = alloca i8, align 1
  %letterIterator = alloca %struct.letterList*, align 4
  %newLetter = alloca %struct.letterList*, align 4
  %positionIterator = alloca %struct.positionList*, align 4
  %newPosition = alloca %struct.positionList*, align 4
  store i8 %c, i8* %c.addr, align 1
  store i32 %pos, i32* %pos.addr, align 4
  store i8 0, i8* %letterOccurs, align 1
  %0 = load %struct.letterList*, %struct.letterList** @letterSet, align 4
  %cmp = icmp eq %struct.letterList* %0, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call noalias i8* @malloc(i32 16)
  %1 = bitcast i8* %call to %struct.letterList*
  store %struct.letterList* %1, %struct.letterList** @letterSet, align 4
  %2 = load i8, i8* %c.addr, align 1
  %3 = load %struct.letterList*, %struct.letterList** @letterSet, align 4
  %letter = getelementptr inbounds %struct.letterList, %struct.letterList* %3, i32 0, i32 0
  store i8 %2, i8* %letter, align 4
  %4 = load %struct.letterList*, %struct.letterList** @letterSet, align 4
  %repititions = getelementptr inbounds %struct.letterList, %struct.letterList* %4, i32 0, i32 1
  store i32 0, i32* %repititions, align 4
  %call1 = call noalias i8* @malloc(i32 8)
  %5 = bitcast i8* %call1 to %struct.positionList*
  %6 = load %struct.letterList*, %struct.letterList** @letterSet, align 4
  %positions = getelementptr inbounds %struct.letterList, %struct.letterList* %6, i32 0, i32 2
  store %struct.positionList* %5, %struct.positionList** %positions, align 4
  %7 = load i32, i32* %pos.addr, align 4
  %8 = load %struct.letterList*, %struct.letterList** @letterSet, align 4
  %positions2 = getelementptr inbounds %struct.letterList, %struct.letterList* %8, i32 0, i32 2
  %9 = load %struct.positionList*, %struct.positionList** %positions2, align 4
  %position = getelementptr inbounds %struct.positionList, %struct.positionList* %9, i32 0, i32 0
  store i32 %7, i32* %position, align 4
  %10 = load %struct.letterList*, %struct.letterList** @letterSet, align 4
  %positions3 = getelementptr inbounds %struct.letterList, %struct.letterList* %10, i32 0, i32 2
  %11 = load %struct.positionList*, %struct.positionList** %positions3, align 4
  %next = getelementptr inbounds %struct.positionList, %struct.positionList* %11, i32 0, i32 1
  store %struct.positionList* null, %struct.positionList** %next, align 4
  %12 = load %struct.letterList*, %struct.letterList** @letterSet, align 4
  %next4 = getelementptr inbounds %struct.letterList, %struct.letterList* %12, i32 0, i32 3
  store %struct.letterList* null, %struct.letterList** %next4, align 4
  br label %if.end51

if.else:                                          ; preds = %entry
  %13 = load %struct.letterList*, %struct.letterList** @letterSet, align 4
  store %struct.letterList* %13, %struct.letterList** %letterIterator, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end32, %if.else
  %14 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %cmp5 = icmp ne %struct.letterList* %14, null
  br i1 %cmp5, label %while.body, label %while.end33

while.body:                                       ; preds = %while.cond
  %15 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %letter6 = getelementptr inbounds %struct.letterList, %struct.letterList* %15, i32 0, i32 0
  %16 = load i8, i8* %letter6, align 4
  %conv = sext i8 %16 to i32
  %17 = load i8, i8* %c.addr, align 1
  %conv7 = sext i8 %17 to i32
  %cmp8 = icmp eq i32 %conv, %conv7
  br i1 %cmp8, label %if.then10, label %if.end

if.then10:                                        ; preds = %while.body
  store i8 1, i8* %letterOccurs, align 1
  store i8 1, i8* @duplicatesFound, align 1
  %18 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %repititions11 = getelementptr inbounds %struct.letterList, %struct.letterList* %18, i32 0, i32 1
  %19 = load i32, i32* %repititions11, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %repititions11, align 4
  %20 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %positions12 = getelementptr inbounds %struct.letterList, %struct.letterList* %20, i32 0, i32 2
  %21 = load %struct.positionList*, %struct.positionList** %positions12, align 4
  store %struct.positionList* %21, %struct.positionList** %positionIterator, align 4
  br label %while.cond13

while.cond13:                                     ; preds = %while.body17, %if.then10
  %22 = load %struct.positionList*, %struct.positionList** %positionIterator, align 4
  %next14 = getelementptr inbounds %struct.positionList, %struct.positionList* %22, i32 0, i32 1
  %23 = load %struct.positionList*, %struct.positionList** %next14, align 4
  %cmp15 = icmp ne %struct.positionList* %23, null
  br i1 %cmp15, label %while.body17, label %while.end

while.body17:                                     ; preds = %while.cond13
  %24 = load %struct.positionList*, %struct.positionList** %positionIterator, align 4
  %next18 = getelementptr inbounds %struct.positionList, %struct.positionList* %24, i32 0, i32 1
  %25 = load %struct.positionList*, %struct.positionList** %next18, align 4
  store %struct.positionList* %25, %struct.positionList** %positionIterator, align 4
  br label %while.cond13

while.end:                                        ; preds = %while.cond13
  %call19 = call noalias i8* @malloc(i32 8)
  %26 = bitcast i8* %call19 to %struct.positionList*
  store %struct.positionList* %26, %struct.positionList** %newPosition, align 4
  %27 = load i32, i32* %pos.addr, align 4
  %28 = load %struct.positionList*, %struct.positionList** %newPosition, align 4
  %position20 = getelementptr inbounds %struct.positionList, %struct.positionList* %28, i32 0, i32 0
  store i32 %27, i32* %position20, align 4
  %29 = load %struct.positionList*, %struct.positionList** %newPosition, align 4
  %next21 = getelementptr inbounds %struct.positionList, %struct.positionList* %29, i32 0, i32 1
  store %struct.positionList* null, %struct.positionList** %next21, align 4
  %30 = load %struct.positionList*, %struct.positionList** %newPosition, align 4
  %31 = load %struct.positionList*, %struct.positionList** %positionIterator, align 4
  %next22 = getelementptr inbounds %struct.positionList, %struct.positionList* %31, i32 0, i32 1
  store %struct.positionList* %30, %struct.positionList** %next22, align 4
  br label %if.end

if.end:                                           ; preds = %while.end, %while.body
  %32 = load i8, i8* %letterOccurs, align 1
  %tobool = trunc i8 %32 to i1
  %conv23 = zext i1 %tobool to i32
  %cmp24 = icmp eq i32 %conv23, 0
  br i1 %cmp24, label %land.lhs.true, label %if.else30

land.lhs.true:                                    ; preds = %if.end
  %33 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %next26 = getelementptr inbounds %struct.letterList, %struct.letterList* %33, i32 0, i32 3
  %34 = load %struct.letterList*, %struct.letterList** %next26, align 4
  %cmp27 = icmp eq %struct.letterList* %34, null
  br i1 %cmp27, label %if.then29, label %if.else30

if.then29:                                        ; preds = %land.lhs.true
  br label %while.end33

if.else30:                                        ; preds = %land.lhs.true, %if.end
  %35 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %next31 = getelementptr inbounds %struct.letterList, %struct.letterList* %35, i32 0, i32 3
  %36 = load %struct.letterList*, %struct.letterList** %next31, align 4
  store %struct.letterList* %36, %struct.letterList** %letterIterator, align 4
  br label %if.end32

if.end32:                                         ; preds = %if.else30
  br label %while.cond

while.end33:                                      ; preds = %if.then29, %while.cond
  %37 = load i8, i8* %letterOccurs, align 1
  %tobool34 = trunc i8 %37 to i1
  %conv35 = zext i1 %tobool34 to i32
  %cmp36 = icmp eq i32 %conv35, 0
  br i1 %cmp36, label %if.then38, label %if.end50

if.then38:                                        ; preds = %while.end33
  %call39 = call noalias i8* @malloc(i32 16)
  %38 = bitcast i8* %call39 to %struct.letterList*
  store %struct.letterList* %38, %struct.letterList** %newLetter, align 4
  %39 = load i8, i8* %c.addr, align 1
  %40 = load %struct.letterList*, %struct.letterList** %newLetter, align 4
  %letter40 = getelementptr inbounds %struct.letterList, %struct.letterList* %40, i32 0, i32 0
  store i8 %39, i8* %letter40, align 4
  %41 = load %struct.letterList*, %struct.letterList** %newLetter, align 4
  %repititions41 = getelementptr inbounds %struct.letterList, %struct.letterList* %41, i32 0, i32 1
  store i32 0, i32* %repititions41, align 4
  %call42 = call noalias i8* @malloc(i32 8)
  %42 = bitcast i8* %call42 to %struct.positionList*
  %43 = load %struct.letterList*, %struct.letterList** %newLetter, align 4
  %positions43 = getelementptr inbounds %struct.letterList, %struct.letterList* %43, i32 0, i32 2
  store %struct.positionList* %42, %struct.positionList** %positions43, align 4
  %44 = load i32, i32* %pos.addr, align 4
  %45 = load %struct.letterList*, %struct.letterList** %newLetter, align 4
  %positions44 = getelementptr inbounds %struct.letterList, %struct.letterList* %45, i32 0, i32 2
  %46 = load %struct.positionList*, %struct.positionList** %positions44, align 4
  %position45 = getelementptr inbounds %struct.positionList, %struct.positionList* %46, i32 0, i32 0
  store i32 %44, i32* %position45, align 4
  %47 = load %struct.letterList*, %struct.letterList** %newLetter, align 4
  %positions46 = getelementptr inbounds %struct.letterList, %struct.letterList* %47, i32 0, i32 2
  %48 = load %struct.positionList*, %struct.positionList** %positions46, align 4
  %next47 = getelementptr inbounds %struct.positionList, %struct.positionList* %48, i32 0, i32 1
  store %struct.positionList* null, %struct.positionList** %next47, align 4
  %49 = load %struct.letterList*, %struct.letterList** %newLetter, align 4
  %next48 = getelementptr inbounds %struct.letterList, %struct.letterList* %49, i32 0, i32 3
  store %struct.letterList* null, %struct.letterList** %next48, align 4
  %50 = load %struct.letterList*, %struct.letterList** %newLetter, align 4
  %51 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %next49 = getelementptr inbounds %struct.letterList, %struct.letterList* %51, i32 0, i32 3
  store %struct.letterList* %50, %struct.letterList** %next49, align 4
  br label %if.end50

if.end50:                                         ; preds = %if.then38, %while.end33
  br label %if.end51

if.end51:                                         ; preds = %if.end50, %if.then
  ret void
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @printLetterList() #0 {
entry:
  %positionIterator = alloca %struct.positionList*, align 4
  %letterIterator = alloca %struct.letterList*, align 4
  %0 = load %struct.letterList*, %struct.letterList** @letterSet, align 4
  store %struct.letterList* %0, %struct.letterList** %letterIterator, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %1 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %cmp = icmp ne %struct.letterList* %1, null
  br i1 %cmp, label %while.body, label %while.end10

while.body:                                       ; preds = %while.cond
  %2 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %repititions = getelementptr inbounds %struct.letterList, %struct.letterList* %2, i32 0, i32 1
  %3 = load i32, i32* %repititions, align 4
  %cmp1 = icmp sgt i32 %3, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %4 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %letter = getelementptr inbounds %struct.letterList, %struct.letterList* %4, i32 0, i32 0
  %5 = load i8, i8* %letter, align 4
  %conv = sext i8 %5 to i32
  %6 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %letter2 = getelementptr inbounds %struct.letterList, %struct.letterList* %6, i32 0, i32 0
  %7 = load i8, i8* %letter2, align 4
  %conv3 = sext i8 %7 to i32
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str, i32 0, i32 0), i32 %conv, i32 %conv3)
  %8 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %positions = getelementptr inbounds %struct.letterList, %struct.letterList* %8, i32 0, i32 2
  %9 = load %struct.positionList*, %struct.positionList** %positions, align 4
  store %struct.positionList* %9, %struct.positionList** %positionIterator, align 4
  br label %while.cond4

while.cond4:                                      ; preds = %while.body7, %if.then
  %10 = load %struct.positionList*, %struct.positionList** %positionIterator, align 4
  %cmp5 = icmp ne %struct.positionList* %10, null
  br i1 %cmp5, label %while.body7, label %while.end

while.body7:                                      ; preds = %while.cond4
  %11 = load %struct.positionList*, %struct.positionList** %positionIterator, align 4
  %position = getelementptr inbounds %struct.positionList, %struct.positionList* %11, i32 0, i32 0
  %12 = load i32, i32* %position, align 4
  %add = add nsw i32 %12, 1
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %add)
  %13 = load %struct.positionList*, %struct.positionList** %positionIterator, align 4
  %next = getelementptr inbounds %struct.positionList, %struct.positionList* %13, i32 0, i32 1
  %14 = load %struct.positionList*, %struct.positionList** %next, align 4
  store %struct.positionList* %14, %struct.positionList** %positionIterator, align 4
  br label %while.cond4

while.end:                                        ; preds = %while.cond4
  br label %if.end

if.end:                                           ; preds = %while.end, %while.body
  %15 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %next9 = getelementptr inbounds %struct.letterList, %struct.letterList* %15, i32 0, i32 3
  %16 = load %struct.letterList*, %struct.letterList** %next9, align 4
  store %struct.letterList* %16, %struct.letterList** %letterIterator, align 4
  br label %while.cond

while.end10:                                      ; preds = %while.cond
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  %0 = load i32, i32* %argc.addr, align 4
  %cmp = icmp sgt i32 %0, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i8**, i8*** %argv.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 0
  %2 = load i8*, i8** %arrayidx, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.3, i32 0, i32 0), i8* %2)
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i32, i32* %argc.addr, align 4
  %cmp1 = icmp eq i32 %3, 1
  br i1 %cmp1, label %if.then5, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %4 = load i8**, i8*** %argv.addr, align 4
  %arrayidx2 = getelementptr inbounds i8*, i8** %4, i32 1
  %5 = load i8*, i8** %arrayidx2, align 4
  %call3 = call i32 @strlen(i8* %5) #3
  %cmp4 = icmp eq i32 %call3, 1
  br i1 %cmp4, label %if.then5, label %if.end11

if.then5:                                         ; preds = %lor.lhs.false, %if.end
  %6 = load i32, i32* %argc.addr, align 4
  %cmp6 = icmp eq i32 %6, 1
  br i1 %cmp6, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then5
  br label %cond.end

cond.false:                                       ; preds = %if.then5
  %7 = load i8**, i8*** %argv.addr, align 4
  %arrayidx7 = getelementptr inbounds i8*, i8** %7, i32 1
  %8 = load i8*, i8** %arrayidx7, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.5, i32 0, i32 0), %cond.true ], [ %8, %cond.false ]
  %9 = load i32, i32* %argc.addr, align 4
  %cmp8 = icmp eq i32 %9, 1
  %10 = zext i1 %cmp8 to i64
  %cond9 = select i1 %cmp8, i32 0, i32 1
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.4, i32 0, i32 0), i8* %cond, i32 %cond9)
  store i32 0, i32* %retval, align 4
  br label %return

if.end11:                                         ; preds = %lor.lhs.false
  %11 = load i8**, i8*** %argv.addr, align 4
  %arrayidx12 = getelementptr inbounds i8*, i8** %11, i32 1
  %12 = load i8*, i8** %arrayidx12, align 4
  %call13 = call i32 @strlen(i8* %12) #3
  store i32 %call13, i32* %len, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end11
  %13 = load i32, i32* %i, align 4
  %14 = load i32, i32* %len, align 4
  %cmp14 = icmp slt i32 %13, %14
  br i1 %cmp14, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %15 = load i8**, i8*** %argv.addr, align 4
  %arrayidx15 = getelementptr inbounds i8*, i8** %15, i32 1
  %16 = load i8*, i8** %arrayidx15, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx16 = getelementptr inbounds i8, i8* %16, i32 %17
  %18 = load i8, i8* %arrayidx16, align 1
  %19 = load i32, i32* %i, align 4
  call void @checkAndUpdateLetterList(i8 signext %18, i32 %19)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %20 = load i32, i32* %i, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %21 = load i8**, i8*** %argv.addr, align 4
  %arrayidx17 = getelementptr inbounds i8*, i8** %21, i32 1
  %22 = load i8*, i8** %arrayidx17, align 4
  %23 = load i32, i32* %len, align 4
  %24 = load i8, i8* @duplicatesFound, align 1
  %tobool = trunc i8 %24 to i1
  %conv = zext i1 %tobool to i32
  %cmp18 = icmp eq i32 %conv, 0
  %25 = zext i1 %cmp18 to i64
  %cond20 = select i1 %cmp18, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.8, i32 0, i32 0)
  %call21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.6, i32 0, i32 0), i8* %22, i32 %23, i8* %cond20)
  %26 = load i8, i8* @duplicatesFound, align 1
  %tobool22 = trunc i8 %26 to i1
  %conv23 = zext i1 %tobool22 to i32
  %cmp24 = icmp eq i32 %conv23, 1
  br i1 %cmp24, label %if.then26, label %if.end27

if.then26:                                        ; preds = %for.end
  call void @printLetterList()
  br label %if.end27

if.end27:                                         ; preds = %if.then26, %for.end
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end27, %cond.end, %if.then
  %27 = load i32, i32* %retval, align 4
  ret i32 %27
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %argc.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sgt i32 %0, 2
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %argc.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = icmp eq i32 %3, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call3 = call i32 @strlen(i8* %5) #3
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp4 = icmp eq i32 %call3, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %argc.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp6 = icmp eq i32 %6, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %argc.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp8 = icmp eq i32 %9, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cond9 = select i1 %cmp8, i32 0, i32 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 1:i32, %0 (hasExternalUses)
%2:i32 = select %1, 0:i32, 1:i32
infer %2

; *****
; For LLVM instruction:
;  %call13 = call i32 @strlen(i8* %12) #3
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp14 = icmp slt i32 %13, %14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i8, i8* %arrayidx16, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %20, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = load i8, i8* @duplicatesFound, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0 (demandedBits=00000001)

; *****
; For LLVM instruction:
;  %tobool = trunc i8 %24 to i1
; Looking for a replacement for:
%0:i8 = var
%1:i1 = trunc %0
infer %1

; *****
; For LLVM instruction:
;  %conv = zext i1 %tobool to i32
; Looking for a replacement for:
%0:i8 = var
%1:i1 = trunc %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %cmp18 = icmp eq i32 %conv, 0
; Looking for a replacement for:
%0:i8 = var
%1:i1 = trunc %0
%2:i32 = zext %1
%3:i1 = eq 0:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %26 = load i8, i8* @duplicatesFound, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0 (demandedBits=00000001)

; *****
; For LLVM instruction:
;  %tobool22 = trunc i8 %26 to i1
; Looking for a replacement for:
%0:i8 = var
%1:i1 = trunc %0
infer %1

; *****
; For LLVM instruction:
;  %conv23 = zext i1 %tobool22 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i1 = trunc %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %cmp24 = icmp eq i32 %conv23, 1
; Looking for a replacement for:
%0:i8 = var
%1:i1 = trunc %0
%2:i32 = zext %1
%3:i1 = eq 1:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt 2:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 1:i32, %0 (hasExternalUses)
%2:i32 = select %1, 0:i32, 1:i32
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i1 = trunc %0
%2:i32 = zext %1
%3:i1 = eq 1:i32, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i1 = trunc %0

Cost = 1
second query is UNSAT
Dataflow Pruned 0/0
There are 2 Guesses
There are 1 RHSs before deduplication
There are 1 RHSs after deduplication
"
; No valid RHS in the list
#########################################################

Module before replacement:
; ModuleID = './Determine_if_a_string_has_all_unique_characters.c.bc'
source_filename = "./Determine_if_a_string_has_all_unique_characters.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.letterList = type { i8, i32, %struct.positionList*, %struct.letterList* }
%struct.positionList = type { i32, %struct.positionList* }

@duplicatesFound = hidden global i8 0, align 1
@letterSet = hidden global %struct.letterList* null, align 4
@.str = private unnamed_addr constant [28 x i8] c"\0A'%c' (0x%x) at positions :\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%3d\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.3 = private unnamed_addr constant [26 x i8] c"Usage : %s <Test string>\0A\00", align 1
@.str.4 = private unnamed_addr constant [53 x i8] c"\22%s\22 - Length %d - Contains only unique characters.\0A\00", align 1
@.str.5 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.6 = private unnamed_addr constant [22 x i8] c"\22%s\22 - Length %d - %s\00", align 1
@.str.7 = private unnamed_addr constant [34 x i8] c"Contains only unique characters.\0A\00", align 1
@.str.8 = private unnamed_addr constant [46 x i8] c"Contains the following duplicate characters :\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @checkAndUpdateLetterList(i8 signext %c, i32 %pos) #0 {
entry:
  %c.addr = alloca i8, align 1
  %pos.addr = alloca i32, align 4
  %letterOccurs = alloca i8, align 1
  %letterIterator = alloca %struct.letterList*, align 4
  %newLetter = alloca %struct.letterList*, align 4
  %positionIterator = alloca %struct.positionList*, align 4
  %newPosition = alloca %struct.positionList*, align 4
  store i8 %c, i8* %c.addr, align 1
  store i32 %pos, i32* %pos.addr, align 4
  store i8 0, i8* %letterOccurs, align 1
  %0 = load %struct.letterList*, %struct.letterList** @letterSet, align 4
  %cmp = icmp eq %struct.letterList* %0, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call noalias i8* @malloc(i32 16)
  %1 = bitcast i8* %call to %struct.letterList*
  store %struct.letterList* %1, %struct.letterList** @letterSet, align 4
  %2 = load i8, i8* %c.addr, align 1
  %3 = load %struct.letterList*, %struct.letterList** @letterSet, align 4
  %letter = getelementptr inbounds %struct.letterList, %struct.letterList* %3, i32 0, i32 0
  store i8 %2, i8* %letter, align 4
  %4 = load %struct.letterList*, %struct.letterList** @letterSet, align 4
  %repititions = getelementptr inbounds %struct.letterList, %struct.letterList* %4, i32 0, i32 1
  store i32 0, i32* %repititions, align 4
  %call1 = call noalias i8* @malloc(i32 8)
  %5 = bitcast i8* %call1 to %struct.positionList*
  %6 = load %struct.letterList*, %struct.letterList** @letterSet, align 4
  %positions = getelementptr inbounds %struct.letterList, %struct.letterList* %6, i32 0, i32 2
  store %struct.positionList* %5, %struct.positionList** %positions, align 4
  %7 = load i32, i32* %pos.addr, align 4
  %8 = load %struct.letterList*, %struct.letterList** @letterSet, align 4
  %positions2 = getelementptr inbounds %struct.letterList, %struct.letterList* %8, i32 0, i32 2
  %9 = load %struct.positionList*, %struct.positionList** %positions2, align 4
  %position = getelementptr inbounds %struct.positionList, %struct.positionList* %9, i32 0, i32 0
  store i32 %7, i32* %position, align 4
  %10 = load %struct.letterList*, %struct.letterList** @letterSet, align 4
  %positions3 = getelementptr inbounds %struct.letterList, %struct.letterList* %10, i32 0, i32 2
  %11 = load %struct.positionList*, %struct.positionList** %positions3, align 4
  %next = getelementptr inbounds %struct.positionList, %struct.positionList* %11, i32 0, i32 1
  store %struct.positionList* null, %struct.positionList** %next, align 4
  %12 = load %struct.letterList*, %struct.letterList** @letterSet, align 4
  %next4 = getelementptr inbounds %struct.letterList, %struct.letterList* %12, i32 0, i32 3
  store %struct.letterList* null, %struct.letterList** %next4, align 4
  br label %if.end51

if.else:                                          ; preds = %entry
  %13 = load %struct.letterList*, %struct.letterList** @letterSet, align 4
  store %struct.letterList* %13, %struct.letterList** %letterIterator, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end32, %if.else
  %14 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %cmp5 = icmp ne %struct.letterList* %14, null
  br i1 %cmp5, label %while.body, label %while.end33

while.body:                                       ; preds = %while.cond
  %15 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %letter6 = getelementptr inbounds %struct.letterList, %struct.letterList* %15, i32 0, i32 0
  %16 = load i8, i8* %letter6, align 4
  %conv = sext i8 %16 to i32
  %17 = load i8, i8* %c.addr, align 1
  %conv7 = sext i8 %17 to i32
  %cmp8 = icmp eq i32 %conv, %conv7
  br i1 %cmp8, label %if.then10, label %if.end

if.then10:                                        ; preds = %while.body
  store i8 1, i8* %letterOccurs, align 1
  store i8 1, i8* @duplicatesFound, align 1
  %18 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %repititions11 = getelementptr inbounds %struct.letterList, %struct.letterList* %18, i32 0, i32 1
  %19 = load i32, i32* %repititions11, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %repititions11, align 4
  %20 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %positions12 = getelementptr inbounds %struct.letterList, %struct.letterList* %20, i32 0, i32 2
  %21 = load %struct.positionList*, %struct.positionList** %positions12, align 4
  store %struct.positionList* %21, %struct.positionList** %positionIterator, align 4
  br label %while.cond13

while.cond13:                                     ; preds = %while.body17, %if.then10
  %22 = load %struct.positionList*, %struct.positionList** %positionIterator, align 4
  %next14 = getelementptr inbounds %struct.positionList, %struct.positionList* %22, i32 0, i32 1
  %23 = load %struct.positionList*, %struct.positionList** %next14, align 4
  %cmp15 = icmp ne %struct.positionList* %23, null
  br i1 %cmp15, label %while.body17, label %while.end

while.body17:                                     ; preds = %while.cond13
  %24 = load %struct.positionList*, %struct.positionList** %positionIterator, align 4
  %next18 = getelementptr inbounds %struct.positionList, %struct.positionList* %24, i32 0, i32 1
  %25 = load %struct.positionList*, %struct.positionList** %next18, align 4
  store %struct.positionList* %25, %struct.positionList** %positionIterator, align 4
  br label %while.cond13

while.end:                                        ; preds = %while.cond13
  %call19 = call noalias i8* @malloc(i32 8)
  %26 = bitcast i8* %call19 to %struct.positionList*
  store %struct.positionList* %26, %struct.positionList** %newPosition, align 4
  %27 = load i32, i32* %pos.addr, align 4
  %28 = load %struct.positionList*, %struct.positionList** %newPosition, align 4
  %position20 = getelementptr inbounds %struct.positionList, %struct.positionList* %28, i32 0, i32 0
  store i32 %27, i32* %position20, align 4
  %29 = load %struct.positionList*, %struct.positionList** %newPosition, align 4
  %next21 = getelementptr inbounds %struct.positionList, %struct.positionList* %29, i32 0, i32 1
  store %struct.positionList* null, %struct.positionList** %next21, align 4
  %30 = load %struct.positionList*, %struct.positionList** %newPosition, align 4
  %31 = load %struct.positionList*, %struct.positionList** %positionIterator, align 4
  %next22 = getelementptr inbounds %struct.positionList, %struct.positionList* %31, i32 0, i32 1
  store %struct.positionList* %30, %struct.positionList** %next22, align 4
  br label %if.end

if.end:                                           ; preds = %while.end, %while.body
  %32 = load i8, i8* %letterOccurs, align 1
  %tobool = trunc i8 %32 to i1
  %conv23 = zext i1 %tobool to i32
  %cmp24 = icmp eq i32 %conv23, 0
  br i1 %cmp24, label %land.lhs.true, label %if.else30

land.lhs.true:                                    ; preds = %if.end
  %33 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %next26 = getelementptr inbounds %struct.letterList, %struct.letterList* %33, i32 0, i32 3
  %34 = load %struct.letterList*, %struct.letterList** %next26, align 4
  %cmp27 = icmp eq %struct.letterList* %34, null
  br i1 %cmp27, label %if.then29, label %if.else30

if.then29:                                        ; preds = %land.lhs.true
  br label %while.end33

if.else30:                                        ; preds = %land.lhs.true, %if.end
  %35 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %next31 = getelementptr inbounds %struct.letterList, %struct.letterList* %35, i32 0, i32 3
  %36 = load %struct.letterList*, %struct.letterList** %next31, align 4
  store %struct.letterList* %36, %struct.letterList** %letterIterator, align 4
  br label %if.end32

if.end32:                                         ; preds = %if.else30
  br label %while.cond

while.end33:                                      ; preds = %if.then29, %while.cond
  %37 = load i8, i8* %letterOccurs, align 1
  %tobool34 = trunc i8 %37 to i1
  %conv35 = zext i1 %tobool34 to i32
  %cmp36 = icmp eq i32 %conv35, 0
  br i1 %cmp36, label %if.then38, label %if.end50

if.then38:                                        ; preds = %while.end33
  %call39 = call noalias i8* @malloc(i32 16)
  %38 = bitcast i8* %call39 to %struct.letterList*
  store %struct.letterList* %38, %struct.letterList** %newLetter, align 4
  %39 = load i8, i8* %c.addr, align 1
  %40 = load %struct.letterList*, %struct.letterList** %newLetter, align 4
  %letter40 = getelementptr inbounds %struct.letterList, %struct.letterList* %40, i32 0, i32 0
  store i8 %39, i8* %letter40, align 4
  %41 = load %struct.letterList*, %struct.letterList** %newLetter, align 4
  %repititions41 = getelementptr inbounds %struct.letterList, %struct.letterList* %41, i32 0, i32 1
  store i32 0, i32* %repititions41, align 4
  %call42 = call noalias i8* @malloc(i32 8)
  %42 = bitcast i8* %call42 to %struct.positionList*
  %43 = load %struct.letterList*, %struct.letterList** %newLetter, align 4
  %positions43 = getelementptr inbounds %struct.letterList, %struct.letterList* %43, i32 0, i32 2
  store %struct.positionList* %42, %struct.positionList** %positions43, align 4
  %44 = load i32, i32* %pos.addr, align 4
  %45 = load %struct.letterList*, %struct.letterList** %newLetter, align 4
  %positions44 = getelementptr inbounds %struct.letterList, %struct.letterList* %45, i32 0, i32 2
  %46 = load %struct.positionList*, %struct.positionList** %positions44, align 4
  %position45 = getelementptr inbounds %struct.positionList, %struct.positionList* %46, i32 0, i32 0
  store i32 %44, i32* %position45, align 4
  %47 = load %struct.letterList*, %struct.letterList** %newLetter, align 4
  %positions46 = getelementptr inbounds %struct.letterList, %struct.letterList* %47, i32 0, i32 2
  %48 = load %struct.positionList*, %struct.positionList** %positions46, align 4
  %next47 = getelementptr inbounds %struct.positionList, %struct.positionList* %48, i32 0, i32 1
  store %struct.positionList* null, %struct.positionList** %next47, align 4
  %49 = load %struct.letterList*, %struct.letterList** %newLetter, align 4
  %next48 = getelementptr inbounds %struct.letterList, %struct.letterList* %49, i32 0, i32 3
  store %struct.letterList* null, %struct.letterList** %next48, align 4
  %50 = load %struct.letterList*, %struct.letterList** %newLetter, align 4
  %51 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %next49 = getelementptr inbounds %struct.letterList, %struct.letterList* %51, i32 0, i32 3
  store %struct.letterList* %50, %struct.letterList** %next49, align 4
  br label %if.end50

if.end50:                                         ; preds = %if.then38, %while.end33
  br label %if.end51

if.end51:                                         ; preds = %if.end50, %if.then
  ret void
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @printLetterList() #0 {
entry:
  %positionIterator = alloca %struct.positionList*, align 4
  %letterIterator = alloca %struct.letterList*, align 4
  %0 = load %struct.letterList*, %struct.letterList** @letterSet, align 4
  store %struct.letterList* %0, %struct.letterList** %letterIterator, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %1 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %cmp = icmp ne %struct.letterList* %1, null
  br i1 %cmp, label %while.body, label %while.end10

while.body:                                       ; preds = %while.cond
  %2 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %repititions = getelementptr inbounds %struct.letterList, %struct.letterList* %2, i32 0, i32 1
  %3 = load i32, i32* %repititions, align 4
  %cmp1 = icmp sgt i32 %3, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %4 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %letter = getelementptr inbounds %struct.letterList, %struct.letterList* %4, i32 0, i32 0
  %5 = load i8, i8* %letter, align 4
  %conv = sext i8 %5 to i32
  %6 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %letter2 = getelementptr inbounds %struct.letterList, %struct.letterList* %6, i32 0, i32 0
  %7 = load i8, i8* %letter2, align 4
  %conv3 = sext i8 %7 to i32
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str, i32 0, i32 0), i32 %conv, i32 %conv3)
  %8 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %positions = getelementptr inbounds %struct.letterList, %struct.letterList* %8, i32 0, i32 2
  %9 = load %struct.positionList*, %struct.positionList** %positions, align 4
  store %struct.positionList* %9, %struct.positionList** %positionIterator, align 4
  br label %while.cond4

while.cond4:                                      ; preds = %while.body7, %if.then
  %10 = load %struct.positionList*, %struct.positionList** %positionIterator, align 4
  %cmp5 = icmp ne %struct.positionList* %10, null
  br i1 %cmp5, label %while.body7, label %while.end

while.body7:                                      ; preds = %while.cond4
  %11 = load %struct.positionList*, %struct.positionList** %positionIterator, align 4
  %position = getelementptr inbounds %struct.positionList, %struct.positionList* %11, i32 0, i32 0
  %12 = load i32, i32* %position, align 4
  %add = add nsw i32 %12, 1
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %add)
  %13 = load %struct.positionList*, %struct.positionList** %positionIterator, align 4
  %next = getelementptr inbounds %struct.positionList, %struct.positionList* %13, i32 0, i32 1
  %14 = load %struct.positionList*, %struct.positionList** %next, align 4
  store %struct.positionList* %14, %struct.positionList** %positionIterator, align 4
  br label %while.cond4

while.end:                                        ; preds = %while.cond4
  br label %if.end

if.end:                                           ; preds = %while.end, %while.body
  %15 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %next9 = getelementptr inbounds %struct.letterList, %struct.letterList* %15, i32 0, i32 3
  %16 = load %struct.letterList*, %struct.letterList** %next9, align 4
  store %struct.letterList* %16, %struct.letterList** %letterIterator, align 4
  br label %while.cond

while.end10:                                      ; preds = %while.cond
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  %0 = load i32, i32* %argc.addr, align 4
  %cmp = icmp sgt i32 %0, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i8**, i8*** %argv.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 0
  %2 = load i8*, i8** %arrayidx, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.3, i32 0, i32 0), i8* %2)
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i32, i32* %argc.addr, align 4
  %cmp1 = icmp eq i32 %3, 1
  br i1 %cmp1, label %if.then5, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %4 = load i8**, i8*** %argv.addr, align 4
  %arrayidx2 = getelementptr inbounds i8*, i8** %4, i32 1
  %5 = load i8*, i8** %arrayidx2, align 4
  %call3 = call i32 @strlen(i8* %5) #3
  %cmp4 = icmp eq i32 %call3, 1
  br i1 %cmp4, label %if.then5, label %if.end11

if.then5:                                         ; preds = %lor.lhs.false, %if.end
  %6 = load i32, i32* %argc.addr, align 4
  %cmp6 = icmp eq i32 %6, 1
  br i1 %cmp6, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then5
  br label %cond.end

cond.false:                                       ; preds = %if.then5
  %7 = load i8**, i8*** %argv.addr, align 4
  %arrayidx7 = getelementptr inbounds i8*, i8** %7, i32 1
  %8 = load i8*, i8** %arrayidx7, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.5, i32 0, i32 0), %cond.true ], [ %8, %cond.false ]
  %9 = load i32, i32* %argc.addr, align 4
  %cmp8 = icmp eq i32 %9, 1
  %10 = zext i1 %cmp8 to i64
  %cond9 = select i1 %cmp8, i32 0, i32 1
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.4, i32 0, i32 0), i8* %cond, i32 %cond9)
  store i32 0, i32* %retval, align 4
  br label %return

if.end11:                                         ; preds = %lor.lhs.false
  %11 = load i8**, i8*** %argv.addr, align 4
  %arrayidx12 = getelementptr inbounds i8*, i8** %11, i32 1
  %12 = load i8*, i8** %arrayidx12, align 4
  %call13 = call i32 @strlen(i8* %12) #3
  store i32 %call13, i32* %len, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end11
  %13 = load i32, i32* %i, align 4
  %14 = load i32, i32* %len, align 4
  %cmp14 = icmp slt i32 %13, %14
  br i1 %cmp14, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %15 = load i8**, i8*** %argv.addr, align 4
  %arrayidx15 = getelementptr inbounds i8*, i8** %15, i32 1
  %16 = load i8*, i8** %arrayidx15, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx16 = getelementptr inbounds i8, i8* %16, i32 %17
  %18 = load i8, i8* %arrayidx16, align 1
  %19 = load i32, i32* %i, align 4
  call void @checkAndUpdateLetterList(i8 signext %18, i32 %19)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %20 = load i32, i32* %i, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %21 = load i8**, i8*** %argv.addr, align 4
  %arrayidx17 = getelementptr inbounds i8*, i8** %21, i32 1
  %22 = load i8*, i8** %arrayidx17, align 4
  %23 = load i32, i32* %len, align 4
  %24 = load i8, i8* @duplicatesFound, align 1
  %tobool = trunc i8 %24 to i1
  %conv = zext i1 %tobool to i32
  %cmp18 = icmp eq i32 %conv, 0
  %25 = zext i1 %cmp18 to i64
  %cond20 = select i1 %cmp18, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.8, i32 0, i32 0)
  %call21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.6, i32 0, i32 0), i8* %22, i32 %23, i8* %cond20)
  %26 = load i8, i8* @duplicatesFound, align 1
  %tobool22 = trunc i8 %26 to i1
  %conv23 = zext i1 %tobool22 to i32
  %cmp24 = icmp eq i32 %conv23, 1
  br i1 %cmp24, label %if.then26, label %if.end27

if.then26:                                        ; preds = %for.end
  call void @printLetterList()
  br label %if.end27

if.end27:                                         ; preds = %if.then26, %for.end
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end27, %cond.end, %if.then
  %27 = load i32, i32* %retval, align 4
  ret i32 %27
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; Replacing "  %cmp24 = icmp eq i32 %conv23, 1"
; from ""
; with "  %tobool22 = trunc i8 %26 to i1" in:
"%0:i8 = var
%1:i1 = trunc %0
%2:i32 = zext %1
%3:i1 = eq 1:i32, %2
cand %3 %1
"
; with "  %tobool22 = trunc i8 %26 to i1"

Module after replacement:
; ModuleID = './Determine_if_a_string_has_all_unique_characters.c.bc'
source_filename = "./Determine_if_a_string_has_all_unique_characters.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.letterList = type { i8, i32, %struct.positionList*, %struct.letterList* }
%struct.positionList = type { i32, %struct.positionList* }

@duplicatesFound = hidden global i8 0, align 1
@letterSet = hidden global %struct.letterList* null, align 4
@.str = private unnamed_addr constant [28 x i8] c"\0A'%c' (0x%x) at positions :\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%3d\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.3 = private unnamed_addr constant [26 x i8] c"Usage : %s <Test string>\0A\00", align 1
@.str.4 = private unnamed_addr constant [53 x i8] c"\22%s\22 - Length %d - Contains only unique characters.\0A\00", align 1
@.str.5 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.6 = private unnamed_addr constant [22 x i8] c"\22%s\22 - Length %d - %s\00", align 1
@.str.7 = private unnamed_addr constant [34 x i8] c"Contains only unique characters.\0A\00", align 1
@.str.8 = private unnamed_addr constant [46 x i8] c"Contains the following duplicate characters :\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @checkAndUpdateLetterList(i8 signext %c, i32 %pos) #0 {
entry:
  %c.addr = alloca i8, align 1
  %pos.addr = alloca i32, align 4
  %letterOccurs = alloca i8, align 1
  %letterIterator = alloca %struct.letterList*, align 4
  %newLetter = alloca %struct.letterList*, align 4
  %positionIterator = alloca %struct.positionList*, align 4
  %newPosition = alloca %struct.positionList*, align 4
  store i8 %c, i8* %c.addr, align 1
  store i32 %pos, i32* %pos.addr, align 4
  store i8 0, i8* %letterOccurs, align 1
  %0 = load %struct.letterList*, %struct.letterList** @letterSet, align 4
  %cmp = icmp eq %struct.letterList* %0, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call noalias i8* @malloc(i32 16)
  %1 = bitcast i8* %call to %struct.letterList*
  store %struct.letterList* %1, %struct.letterList** @letterSet, align 4
  %2 = load i8, i8* %c.addr, align 1
  %3 = load %struct.letterList*, %struct.letterList** @letterSet, align 4
  %letter = getelementptr inbounds %struct.letterList, %struct.letterList* %3, i32 0, i32 0
  store i8 %2, i8* %letter, align 4
  %4 = load %struct.letterList*, %struct.letterList** @letterSet, align 4
  %repititions = getelementptr inbounds %struct.letterList, %struct.letterList* %4, i32 0, i32 1
  store i32 0, i32* %repititions, align 4
  %call1 = call noalias i8* @malloc(i32 8)
  %5 = bitcast i8* %call1 to %struct.positionList*
  %6 = load %struct.letterList*, %struct.letterList** @letterSet, align 4
  %positions = getelementptr inbounds %struct.letterList, %struct.letterList* %6, i32 0, i32 2
  store %struct.positionList* %5, %struct.positionList** %positions, align 4
  %7 = load i32, i32* %pos.addr, align 4
  %8 = load %struct.letterList*, %struct.letterList** @letterSet, align 4
  %positions2 = getelementptr inbounds %struct.letterList, %struct.letterList* %8, i32 0, i32 2
  %9 = load %struct.positionList*, %struct.positionList** %positions2, align 4
  %position = getelementptr inbounds %struct.positionList, %struct.positionList* %9, i32 0, i32 0
  store i32 %7, i32* %position, align 4
  %10 = load %struct.letterList*, %struct.letterList** @letterSet, align 4
  %positions3 = getelementptr inbounds %struct.letterList, %struct.letterList* %10, i32 0, i32 2
  %11 = load %struct.positionList*, %struct.positionList** %positions3, align 4
  %next = getelementptr inbounds %struct.positionList, %struct.positionList* %11, i32 0, i32 1
  store %struct.positionList* null, %struct.positionList** %next, align 4
  %12 = load %struct.letterList*, %struct.letterList** @letterSet, align 4
  %next4 = getelementptr inbounds %struct.letterList, %struct.letterList* %12, i32 0, i32 3
  store %struct.letterList* null, %struct.letterList** %next4, align 4
  br label %if.end51

if.else:                                          ; preds = %entry
  %13 = load %struct.letterList*, %struct.letterList** @letterSet, align 4
  store %struct.letterList* %13, %struct.letterList** %letterIterator, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end32, %if.else
  %14 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %cmp5 = icmp ne %struct.letterList* %14, null
  br i1 %cmp5, label %while.body, label %while.end33

while.body:                                       ; preds = %while.cond
  %15 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %letter6 = getelementptr inbounds %struct.letterList, %struct.letterList* %15, i32 0, i32 0
  %16 = load i8, i8* %letter6, align 4
  %conv = sext i8 %16 to i32
  %17 = load i8, i8* %c.addr, align 1
  %conv7 = sext i8 %17 to i32
  %cmp8 = icmp eq i32 %conv, %conv7
  br i1 %cmp8, label %if.then10, label %if.end

if.then10:                                        ; preds = %while.body
  store i8 1, i8* %letterOccurs, align 1
  store i8 1, i8* @duplicatesFound, align 1
  %18 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %repititions11 = getelementptr inbounds %struct.letterList, %struct.letterList* %18, i32 0, i32 1
  %19 = load i32, i32* %repititions11, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %repititions11, align 4
  %20 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %positions12 = getelementptr inbounds %struct.letterList, %struct.letterList* %20, i32 0, i32 2
  %21 = load %struct.positionList*, %struct.positionList** %positions12, align 4
  store %struct.positionList* %21, %struct.positionList** %positionIterator, align 4
  br label %while.cond13

while.cond13:                                     ; preds = %while.body17, %if.then10
  %22 = load %struct.positionList*, %struct.positionList** %positionIterator, align 4
  %next14 = getelementptr inbounds %struct.positionList, %struct.positionList* %22, i32 0, i32 1
  %23 = load %struct.positionList*, %struct.positionList** %next14, align 4
  %cmp15 = icmp ne %struct.positionList* %23, null
  br i1 %cmp15, label %while.body17, label %while.end

while.body17:                                     ; preds = %while.cond13
  %24 = load %struct.positionList*, %struct.positionList** %positionIterator, align 4
  %next18 = getelementptr inbounds %struct.positionList, %struct.positionList* %24, i32 0, i32 1
  %25 = load %struct.positionList*, %struct.positionList** %next18, align 4
  store %struct.positionList* %25, %struct.positionList** %positionIterator, align 4
  br label %while.cond13

while.end:                                        ; preds = %while.cond13
  %call19 = call noalias i8* @malloc(i32 8)
  %26 = bitcast i8* %call19 to %struct.positionList*
  store %struct.positionList* %26, %struct.positionList** %newPosition, align 4
  %27 = load i32, i32* %pos.addr, align 4
  %28 = load %struct.positionList*, %struct.positionList** %newPosition, align 4
  %position20 = getelementptr inbounds %struct.positionList, %struct.positionList* %28, i32 0, i32 0
  store i32 %27, i32* %position20, align 4
  %29 = load %struct.positionList*, %struct.positionList** %newPosition, align 4
  %next21 = getelementptr inbounds %struct.positionList, %struct.positionList* %29, i32 0, i32 1
  store %struct.positionList* null, %struct.positionList** %next21, align 4
  %30 = load %struct.positionList*, %struct.positionList** %newPosition, align 4
  %31 = load %struct.positionList*, %struct.positionList** %positionIterator, align 4
  %next22 = getelementptr inbounds %struct.positionList, %struct.positionList* %31, i32 0, i32 1
  store %struct.positionList* %30, %struct.positionList** %next22, align 4
  br label %if.end

if.end:                                           ; preds = %while.end, %while.body
  %32 = load i8, i8* %letterOccurs, align 1
  %tobool = trunc i8 %32 to i1
  %conv23 = zext i1 %tobool to i32
  %cmp24 = icmp eq i32 %conv23, 0
  br i1 %cmp24, label %land.lhs.true, label %if.else30

land.lhs.true:                                    ; preds = %if.end
  %33 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %next26 = getelementptr inbounds %struct.letterList, %struct.letterList* %33, i32 0, i32 3
  %34 = load %struct.letterList*, %struct.letterList** %next26, align 4
  %cmp27 = icmp eq %struct.letterList* %34, null
  br i1 %cmp27, label %if.then29, label %if.else30

if.then29:                                        ; preds = %land.lhs.true
  br label %while.end33

if.else30:                                        ; preds = %land.lhs.true, %if.end
  %35 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %next31 = getelementptr inbounds %struct.letterList, %struct.letterList* %35, i32 0, i32 3
  %36 = load %struct.letterList*, %struct.letterList** %next31, align 4
  store %struct.letterList* %36, %struct.letterList** %letterIterator, align 4
  br label %if.end32

if.end32:                                         ; preds = %if.else30
  br label %while.cond

while.end33:                                      ; preds = %if.then29, %while.cond
  %37 = load i8, i8* %letterOccurs, align 1
  %tobool34 = trunc i8 %37 to i1
  %conv35 = zext i1 %tobool34 to i32
  %cmp36 = icmp eq i32 %conv35, 0
  br i1 %cmp36, label %if.then38, label %if.end50

if.then38:                                        ; preds = %while.end33
  %call39 = call noalias i8* @malloc(i32 16)
  %38 = bitcast i8* %call39 to %struct.letterList*
  store %struct.letterList* %38, %struct.letterList** %newLetter, align 4
  %39 = load i8, i8* %c.addr, align 1
  %40 = load %struct.letterList*, %struct.letterList** %newLetter, align 4
  %letter40 = getelementptr inbounds %struct.letterList, %struct.letterList* %40, i32 0, i32 0
  store i8 %39, i8* %letter40, align 4
  %41 = load %struct.letterList*, %struct.letterList** %newLetter, align 4
  %repititions41 = getelementptr inbounds %struct.letterList, %struct.letterList* %41, i32 0, i32 1
  store i32 0, i32* %repititions41, align 4
  %call42 = call noalias i8* @malloc(i32 8)
  %42 = bitcast i8* %call42 to %struct.positionList*
  %43 = load %struct.letterList*, %struct.letterList** %newLetter, align 4
  %positions43 = getelementptr inbounds %struct.letterList, %struct.letterList* %43, i32 0, i32 2
  store %struct.positionList* %42, %struct.positionList** %positions43, align 4
  %44 = load i32, i32* %pos.addr, align 4
  %45 = load %struct.letterList*, %struct.letterList** %newLetter, align 4
  %positions44 = getelementptr inbounds %struct.letterList, %struct.letterList* %45, i32 0, i32 2
  %46 = load %struct.positionList*, %struct.positionList** %positions44, align 4
  %position45 = getelementptr inbounds %struct.positionList, %struct.positionList* %46, i32 0, i32 0
  store i32 %44, i32* %position45, align 4
  %47 = load %struct.letterList*, %struct.letterList** %newLetter, align 4
  %positions46 = getelementptr inbounds %struct.letterList, %struct.letterList* %47, i32 0, i32 2
  %48 = load %struct.positionList*, %struct.positionList** %positions46, align 4
  %next47 = getelementptr inbounds %struct.positionList, %struct.positionList* %48, i32 0, i32 1
  store %struct.positionList* null, %struct.positionList** %next47, align 4
  %49 = load %struct.letterList*, %struct.letterList** %newLetter, align 4
  %next48 = getelementptr inbounds %struct.letterList, %struct.letterList* %49, i32 0, i32 3
  store %struct.letterList* null, %struct.letterList** %next48, align 4
  %50 = load %struct.letterList*, %struct.letterList** %newLetter, align 4
  %51 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %next49 = getelementptr inbounds %struct.letterList, %struct.letterList* %51, i32 0, i32 3
  store %struct.letterList* %50, %struct.letterList** %next49, align 4
  br label %if.end50

if.end50:                                         ; preds = %if.then38, %while.end33
  br label %if.end51

if.end51:                                         ; preds = %if.end50, %if.then
  ret void
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @printLetterList() #0 {
entry:
  %positionIterator = alloca %struct.positionList*, align 4
  %letterIterator = alloca %struct.letterList*, align 4
  %0 = load %struct.letterList*, %struct.letterList** @letterSet, align 4
  store %struct.letterList* %0, %struct.letterList** %letterIterator, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %1 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %cmp = icmp ne %struct.letterList* %1, null
  br i1 %cmp, label %while.body, label %while.end10

while.body:                                       ; preds = %while.cond
  %2 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %repititions = getelementptr inbounds %struct.letterList, %struct.letterList* %2, i32 0, i32 1
  %3 = load i32, i32* %repititions, align 4
  %cmp1 = icmp sgt i32 %3, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %4 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %letter = getelementptr inbounds %struct.letterList, %struct.letterList* %4, i32 0, i32 0
  %5 = load i8, i8* %letter, align 4
  %conv = sext i8 %5 to i32
  %6 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %letter2 = getelementptr inbounds %struct.letterList, %struct.letterList* %6, i32 0, i32 0
  %7 = load i8, i8* %letter2, align 4
  %conv3 = sext i8 %7 to i32
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str, i32 0, i32 0), i32 %conv, i32 %conv3)
  %8 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %positions = getelementptr inbounds %struct.letterList, %struct.letterList* %8, i32 0, i32 2
  %9 = load %struct.positionList*, %struct.positionList** %positions, align 4
  store %struct.positionList* %9, %struct.positionList** %positionIterator, align 4
  br label %while.cond4

while.cond4:                                      ; preds = %while.body7, %if.then
  %10 = load %struct.positionList*, %struct.positionList** %positionIterator, align 4
  %cmp5 = icmp ne %struct.positionList* %10, null
  br i1 %cmp5, label %while.body7, label %while.end

while.body7:                                      ; preds = %while.cond4
  %11 = load %struct.positionList*, %struct.positionList** %positionIterator, align 4
  %position = getelementptr inbounds %struct.positionList, %struct.positionList* %11, i32 0, i32 0
  %12 = load i32, i32* %position, align 4
  %add = add nsw i32 %12, 1
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %add)
  %13 = load %struct.positionList*, %struct.positionList** %positionIterator, align 4
  %next = getelementptr inbounds %struct.positionList, %struct.positionList* %13, i32 0, i32 1
  %14 = load %struct.positionList*, %struct.positionList** %next, align 4
  store %struct.positionList* %14, %struct.positionList** %positionIterator, align 4
  br label %while.cond4

while.end:                                        ; preds = %while.cond4
  br label %if.end

if.end:                                           ; preds = %while.end, %while.body
  %15 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %next9 = getelementptr inbounds %struct.letterList, %struct.letterList* %15, i32 0, i32 3
  %16 = load %struct.letterList*, %struct.letterList** %next9, align 4
  store %struct.letterList* %16, %struct.letterList** %letterIterator, align 4
  br label %while.cond

while.end10:                                      ; preds = %while.cond
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  %0 = load i32, i32* %argc.addr, align 4
  %cmp = icmp sgt i32 %0, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i8**, i8*** %argv.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 0
  %2 = load i8*, i8** %arrayidx, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.3, i32 0, i32 0), i8* %2)
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i32, i32* %argc.addr, align 4
  %cmp1 = icmp eq i32 %3, 1
  br i1 %cmp1, label %if.then5, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %4 = load i8**, i8*** %argv.addr, align 4
  %arrayidx2 = getelementptr inbounds i8*, i8** %4, i32 1
  %5 = load i8*, i8** %arrayidx2, align 4
  %call3 = call i32 @strlen(i8* %5) #3
  %cmp4 = icmp eq i32 %call3, 1
  br i1 %cmp4, label %if.then5, label %if.end11

if.then5:                                         ; preds = %lor.lhs.false, %if.end
  %6 = load i32, i32* %argc.addr, align 4
  %cmp6 = icmp eq i32 %6, 1
  br i1 %cmp6, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then5
  br label %cond.end

cond.false:                                       ; preds = %if.then5
  %7 = load i8**, i8*** %argv.addr, align 4
  %arrayidx7 = getelementptr inbounds i8*, i8** %7, i32 1
  %8 = load i8*, i8** %arrayidx7, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.5, i32 0, i32 0), %cond.true ], [ %8, %cond.false ]
  %9 = load i32, i32* %argc.addr, align 4
  %cmp8 = icmp eq i32 %9, 1
  %cond9 = select i1 %cmp8, i32 0, i32 1
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.4, i32 0, i32 0), i8* %cond, i32 %cond9)
  store i32 0, i32* %retval, align 4
  br label %return

if.end11:                                         ; preds = %lor.lhs.false
  %10 = load i8**, i8*** %argv.addr, align 4
  %arrayidx12 = getelementptr inbounds i8*, i8** %10, i32 1
  %11 = load i8*, i8** %arrayidx12, align 4
  %call13 = call i32 @strlen(i8* %11) #3
  store i32 %call13, i32* %len, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end11
  %12 = load i32, i32* %i, align 4
  %13 = load i32, i32* %len, align 4
  %cmp14 = icmp slt i32 %12, %13
  br i1 %cmp14, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %14 = load i8**, i8*** %argv.addr, align 4
  %arrayidx15 = getelementptr inbounds i8*, i8** %14, i32 1
  %15 = load i8*, i8** %arrayidx15, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx16 = getelementptr inbounds i8, i8* %15, i32 %16
  %17 = load i8, i8* %arrayidx16, align 1
  %18 = load i32, i32* %i, align 4
  call void @checkAndUpdateLetterList(i8 signext %17, i32 %18)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %19 = load i32, i32* %i, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %20 = load i8**, i8*** %argv.addr, align 4
  %arrayidx17 = getelementptr inbounds i8*, i8** %20, i32 1
  %21 = load i8*, i8** %arrayidx17, align 4
  %22 = load i32, i32* %len, align 4
  %23 = load i8, i8* @duplicatesFound, align 1
  %tobool = trunc i8 %23 to i1
  %conv = zext i1 %tobool to i32
  %cmp18 = icmp eq i32 %conv, 0
  %cond20 = select i1 %cmp18, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.8, i32 0, i32 0)
  %call21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.6, i32 0, i32 0), i8* %21, i32 %22, i8* %cond20)
  %24 = load i8, i8* @duplicatesFound, align 1
  %tobool22 = trunc i8 %24 to i1
  br i1 %tobool22, label %if.then26, label %if.end27

if.then26:                                        ; preds = %for.end
  call void @printLetterList()
  br label %if.end27

if.end27:                                         ; preds = %if.then26, %for.end
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end27, %cond.end, %if.then
  %25 = load i32, i32* %retval, align 4
  ret i32 %25
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

#########################################################
; exiting Souper's runOnFunction() for __main_argc_argv()
rescanning function after transformation was applied

; entering Souper's runOnFunction() for __main_argc_argv()

; ModuleID = './Determine_if_a_string_has_all_unique_characters.c.bc'
source_filename = "./Determine_if_a_string_has_all_unique_characters.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.letterList = type { i8, i32, %struct.positionList*, %struct.letterList* }
%struct.positionList = type { i32, %struct.positionList* }

@duplicatesFound = hidden global i8 0, align 1
@letterSet = hidden global %struct.letterList* null, align 4
@.str = private unnamed_addr constant [28 x i8] c"\0A'%c' (0x%x) at positions :\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%3d\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.3 = private unnamed_addr constant [26 x i8] c"Usage : %s <Test string>\0A\00", align 1
@.str.4 = private unnamed_addr constant [53 x i8] c"\22%s\22 - Length %d - Contains only unique characters.\0A\00", align 1
@.str.5 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.6 = private unnamed_addr constant [22 x i8] c"\22%s\22 - Length %d - %s\00", align 1
@.str.7 = private unnamed_addr constant [34 x i8] c"Contains only unique characters.\0A\00", align 1
@.str.8 = private unnamed_addr constant [46 x i8] c"Contains the following duplicate characters :\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @checkAndUpdateLetterList(i8 signext %c, i32 %pos) #0 {
entry:
  %c.addr = alloca i8, align 1
  %pos.addr = alloca i32, align 4
  %letterOccurs = alloca i8, align 1
  %letterIterator = alloca %struct.letterList*, align 4
  %newLetter = alloca %struct.letterList*, align 4
  %positionIterator = alloca %struct.positionList*, align 4
  %newPosition = alloca %struct.positionList*, align 4
  store i8 %c, i8* %c.addr, align 1
  store i32 %pos, i32* %pos.addr, align 4
  store i8 0, i8* %letterOccurs, align 1
  %0 = load %struct.letterList*, %struct.letterList** @letterSet, align 4
  %cmp = icmp eq %struct.letterList* %0, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call noalias i8* @malloc(i32 16)
  %1 = bitcast i8* %call to %struct.letterList*
  store %struct.letterList* %1, %struct.letterList** @letterSet, align 4
  %2 = load i8, i8* %c.addr, align 1
  %3 = load %struct.letterList*, %struct.letterList** @letterSet, align 4
  %letter = getelementptr inbounds %struct.letterList, %struct.letterList* %3, i32 0, i32 0
  store i8 %2, i8* %letter, align 4
  %4 = load %struct.letterList*, %struct.letterList** @letterSet, align 4
  %repititions = getelementptr inbounds %struct.letterList, %struct.letterList* %4, i32 0, i32 1
  store i32 0, i32* %repititions, align 4
  %call1 = call noalias i8* @malloc(i32 8)
  %5 = bitcast i8* %call1 to %struct.positionList*
  %6 = load %struct.letterList*, %struct.letterList** @letterSet, align 4
  %positions = getelementptr inbounds %struct.letterList, %struct.letterList* %6, i32 0, i32 2
  store %struct.positionList* %5, %struct.positionList** %positions, align 4
  %7 = load i32, i32* %pos.addr, align 4
  %8 = load %struct.letterList*, %struct.letterList** @letterSet, align 4
  %positions2 = getelementptr inbounds %struct.letterList, %struct.letterList* %8, i32 0, i32 2
  %9 = load %struct.positionList*, %struct.positionList** %positions2, align 4
  %position = getelementptr inbounds %struct.positionList, %struct.positionList* %9, i32 0, i32 0
  store i32 %7, i32* %position, align 4
  %10 = load %struct.letterList*, %struct.letterList** @letterSet, align 4
  %positions3 = getelementptr inbounds %struct.letterList, %struct.letterList* %10, i32 0, i32 2
  %11 = load %struct.positionList*, %struct.positionList** %positions3, align 4
  %next = getelementptr inbounds %struct.positionList, %struct.positionList* %11, i32 0, i32 1
  store %struct.positionList* null, %struct.positionList** %next, align 4
  %12 = load %struct.letterList*, %struct.letterList** @letterSet, align 4
  %next4 = getelementptr inbounds %struct.letterList, %struct.letterList* %12, i32 0, i32 3
  store %struct.letterList* null, %struct.letterList** %next4, align 4
  br label %if.end51

if.else:                                          ; preds = %entry
  %13 = load %struct.letterList*, %struct.letterList** @letterSet, align 4
  store %struct.letterList* %13, %struct.letterList** %letterIterator, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end32, %if.else
  %14 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %cmp5 = icmp ne %struct.letterList* %14, null
  br i1 %cmp5, label %while.body, label %while.end33

while.body:                                       ; preds = %while.cond
  %15 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %letter6 = getelementptr inbounds %struct.letterList, %struct.letterList* %15, i32 0, i32 0
  %16 = load i8, i8* %letter6, align 4
  %conv = sext i8 %16 to i32
  %17 = load i8, i8* %c.addr, align 1
  %conv7 = sext i8 %17 to i32
  %cmp8 = icmp eq i32 %conv, %conv7
  br i1 %cmp8, label %if.then10, label %if.end

if.then10:                                        ; preds = %while.body
  store i8 1, i8* %letterOccurs, align 1
  store i8 1, i8* @duplicatesFound, align 1
  %18 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %repititions11 = getelementptr inbounds %struct.letterList, %struct.letterList* %18, i32 0, i32 1
  %19 = load i32, i32* %repititions11, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %repititions11, align 4
  %20 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %positions12 = getelementptr inbounds %struct.letterList, %struct.letterList* %20, i32 0, i32 2
  %21 = load %struct.positionList*, %struct.positionList** %positions12, align 4
  store %struct.positionList* %21, %struct.positionList** %positionIterator, align 4
  br label %while.cond13

while.cond13:                                     ; preds = %while.body17, %if.then10
  %22 = load %struct.positionList*, %struct.positionList** %positionIterator, align 4
  %next14 = getelementptr inbounds %struct.positionList, %struct.positionList* %22, i32 0, i32 1
  %23 = load %struct.positionList*, %struct.positionList** %next14, align 4
  %cmp15 = icmp ne %struct.positionList* %23, null
  br i1 %cmp15, label %while.body17, label %while.end

while.body17:                                     ; preds = %while.cond13
  %24 = load %struct.positionList*, %struct.positionList** %positionIterator, align 4
  %next18 = getelementptr inbounds %struct.positionList, %struct.positionList* %24, i32 0, i32 1
  %25 = load %struct.positionList*, %struct.positionList** %next18, align 4
  store %struct.positionList* %25, %struct.positionList** %positionIterator, align 4
  br label %while.cond13

while.end:                                        ; preds = %while.cond13
  %call19 = call noalias i8* @malloc(i32 8)
  %26 = bitcast i8* %call19 to %struct.positionList*
  store %struct.positionList* %26, %struct.positionList** %newPosition, align 4
  %27 = load i32, i32* %pos.addr, align 4
  %28 = load %struct.positionList*, %struct.positionList** %newPosition, align 4
  %position20 = getelementptr inbounds %struct.positionList, %struct.positionList* %28, i32 0, i32 0
  store i32 %27, i32* %position20, align 4
  %29 = load %struct.positionList*, %struct.positionList** %newPosition, align 4
  %next21 = getelementptr inbounds %struct.positionList, %struct.positionList* %29, i32 0, i32 1
  store %struct.positionList* null, %struct.positionList** %next21, align 4
  %30 = load %struct.positionList*, %struct.positionList** %newPosition, align 4
  %31 = load %struct.positionList*, %struct.positionList** %positionIterator, align 4
  %next22 = getelementptr inbounds %struct.positionList, %struct.positionList* %31, i32 0, i32 1
  store %struct.positionList* %30, %struct.positionList** %next22, align 4
  br label %if.end

if.end:                                           ; preds = %while.end, %while.body
  %32 = load i8, i8* %letterOccurs, align 1
  %tobool = trunc i8 %32 to i1
  %conv23 = zext i1 %tobool to i32
  %cmp24 = icmp eq i32 %conv23, 0
  br i1 %cmp24, label %land.lhs.true, label %if.else30

land.lhs.true:                                    ; preds = %if.end
  %33 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %next26 = getelementptr inbounds %struct.letterList, %struct.letterList* %33, i32 0, i32 3
  %34 = load %struct.letterList*, %struct.letterList** %next26, align 4
  %cmp27 = icmp eq %struct.letterList* %34, null
  br i1 %cmp27, label %if.then29, label %if.else30

if.then29:                                        ; preds = %land.lhs.true
  br label %while.end33

if.else30:                                        ; preds = %land.lhs.true, %if.end
  %35 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %next31 = getelementptr inbounds %struct.letterList, %struct.letterList* %35, i32 0, i32 3
  %36 = load %struct.letterList*, %struct.letterList** %next31, align 4
  store %struct.letterList* %36, %struct.letterList** %letterIterator, align 4
  br label %if.end32

if.end32:                                         ; preds = %if.else30
  br label %while.cond

while.end33:                                      ; preds = %if.then29, %while.cond
  %37 = load i8, i8* %letterOccurs, align 1
  %tobool34 = trunc i8 %37 to i1
  %conv35 = zext i1 %tobool34 to i32
  %cmp36 = icmp eq i32 %conv35, 0
  br i1 %cmp36, label %if.then38, label %if.end50

if.then38:                                        ; preds = %while.end33
  %call39 = call noalias i8* @malloc(i32 16)
  %38 = bitcast i8* %call39 to %struct.letterList*
  store %struct.letterList* %38, %struct.letterList** %newLetter, align 4
  %39 = load i8, i8* %c.addr, align 1
  %40 = load %struct.letterList*, %struct.letterList** %newLetter, align 4
  %letter40 = getelementptr inbounds %struct.letterList, %struct.letterList* %40, i32 0, i32 0
  store i8 %39, i8* %letter40, align 4
  %41 = load %struct.letterList*, %struct.letterList** %newLetter, align 4
  %repititions41 = getelementptr inbounds %struct.letterList, %struct.letterList* %41, i32 0, i32 1
  store i32 0, i32* %repititions41, align 4
  %call42 = call noalias i8* @malloc(i32 8)
  %42 = bitcast i8* %call42 to %struct.positionList*
  %43 = load %struct.letterList*, %struct.letterList** %newLetter, align 4
  %positions43 = getelementptr inbounds %struct.letterList, %struct.letterList* %43, i32 0, i32 2
  store %struct.positionList* %42, %struct.positionList** %positions43, align 4
  %44 = load i32, i32* %pos.addr, align 4
  %45 = load %struct.letterList*, %struct.letterList** %newLetter, align 4
  %positions44 = getelementptr inbounds %struct.letterList, %struct.letterList* %45, i32 0, i32 2
  %46 = load %struct.positionList*, %struct.positionList** %positions44, align 4
  %position45 = getelementptr inbounds %struct.positionList, %struct.positionList* %46, i32 0, i32 0
  store i32 %44, i32* %position45, align 4
  %47 = load %struct.letterList*, %struct.letterList** %newLetter, align 4
  %positions46 = getelementptr inbounds %struct.letterList, %struct.letterList* %47, i32 0, i32 2
  %48 = load %struct.positionList*, %struct.positionList** %positions46, align 4
  %next47 = getelementptr inbounds %struct.positionList, %struct.positionList* %48, i32 0, i32 1
  store %struct.positionList* null, %struct.positionList** %next47, align 4
  %49 = load %struct.letterList*, %struct.letterList** %newLetter, align 4
  %next48 = getelementptr inbounds %struct.letterList, %struct.letterList* %49, i32 0, i32 3
  store %struct.letterList* null, %struct.letterList** %next48, align 4
  %50 = load %struct.letterList*, %struct.letterList** %newLetter, align 4
  %51 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %next49 = getelementptr inbounds %struct.letterList, %struct.letterList* %51, i32 0, i32 3
  store %struct.letterList* %50, %struct.letterList** %next49, align 4
  br label %if.end50

if.end50:                                         ; preds = %if.then38, %while.end33
  br label %if.end51

if.end51:                                         ; preds = %if.end50, %if.then
  ret void
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @printLetterList() #0 {
entry:
  %positionIterator = alloca %struct.positionList*, align 4
  %letterIterator = alloca %struct.letterList*, align 4
  %0 = load %struct.letterList*, %struct.letterList** @letterSet, align 4
  store %struct.letterList* %0, %struct.letterList** %letterIterator, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %1 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %cmp = icmp ne %struct.letterList* %1, null
  br i1 %cmp, label %while.body, label %while.end10

while.body:                                       ; preds = %while.cond
  %2 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %repititions = getelementptr inbounds %struct.letterList, %struct.letterList* %2, i32 0, i32 1
  %3 = load i32, i32* %repititions, align 4
  %cmp1 = icmp sgt i32 %3, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %4 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %letter = getelementptr inbounds %struct.letterList, %struct.letterList* %4, i32 0, i32 0
  %5 = load i8, i8* %letter, align 4
  %conv = sext i8 %5 to i32
  %6 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %letter2 = getelementptr inbounds %struct.letterList, %struct.letterList* %6, i32 0, i32 0
  %7 = load i8, i8* %letter2, align 4
  %conv3 = sext i8 %7 to i32
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str, i32 0, i32 0), i32 %conv, i32 %conv3)
  %8 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %positions = getelementptr inbounds %struct.letterList, %struct.letterList* %8, i32 0, i32 2
  %9 = load %struct.positionList*, %struct.positionList** %positions, align 4
  store %struct.positionList* %9, %struct.positionList** %positionIterator, align 4
  br label %while.cond4

while.cond4:                                      ; preds = %while.body7, %if.then
  %10 = load %struct.positionList*, %struct.positionList** %positionIterator, align 4
  %cmp5 = icmp ne %struct.positionList* %10, null
  br i1 %cmp5, label %while.body7, label %while.end

while.body7:                                      ; preds = %while.cond4
  %11 = load %struct.positionList*, %struct.positionList** %positionIterator, align 4
  %position = getelementptr inbounds %struct.positionList, %struct.positionList* %11, i32 0, i32 0
  %12 = load i32, i32* %position, align 4
  %add = add nsw i32 %12, 1
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %add)
  %13 = load %struct.positionList*, %struct.positionList** %positionIterator, align 4
  %next = getelementptr inbounds %struct.positionList, %struct.positionList* %13, i32 0, i32 1
  %14 = load %struct.positionList*, %struct.positionList** %next, align 4
  store %struct.positionList* %14, %struct.positionList** %positionIterator, align 4
  br label %while.cond4

while.end:                                        ; preds = %while.cond4
  br label %if.end

if.end:                                           ; preds = %while.end, %while.body
  %15 = load %struct.letterList*, %struct.letterList** %letterIterator, align 4
  %next9 = getelementptr inbounds %struct.letterList, %struct.letterList* %15, i32 0, i32 3
  %16 = load %struct.letterList*, %struct.letterList** %next9, align 4
  store %struct.letterList* %16, %struct.letterList** %letterIterator, align 4
  br label %while.cond

while.end10:                                      ; preds = %while.cond
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  %0 = load i32, i32* %argc.addr, align 4
  %cmp = icmp sgt i32 %0, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i8**, i8*** %argv.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 0
  %2 = load i8*, i8** %arrayidx, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.3, i32 0, i32 0), i8* %2)
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i32, i32* %argc.addr, align 4
  %cmp1 = icmp eq i32 %3, 1
  br i1 %cmp1, label %if.then5, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %4 = load i8**, i8*** %argv.addr, align 4
  %arrayidx2 = getelementptr inbounds i8*, i8** %4, i32 1
  %5 = load i8*, i8** %arrayidx2, align 4
  %call3 = call i32 @strlen(i8* %5) #3
  %cmp4 = icmp eq i32 %call3, 1
  br i1 %cmp4, label %if.then5, label %if.end11

if.then5:                                         ; preds = %lor.lhs.false, %if.end
  %6 = load i32, i32* %argc.addr, align 4
  %cmp6 = icmp eq i32 %6, 1
  br i1 %cmp6, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then5
  br label %cond.end

cond.false:                                       ; preds = %if.then5
  %7 = load i8**, i8*** %argv.addr, align 4
  %arrayidx7 = getelementptr inbounds i8*, i8** %7, i32 1
  %8 = load i8*, i8** %arrayidx7, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.5, i32 0, i32 0), %cond.true ], [ %8, %cond.false ]
  %9 = load i32, i32* %argc.addr, align 4
  %cmp8 = icmp eq i32 %9, 1
  %cond9 = select i1 %cmp8, i32 0, i32 1
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.4, i32 0, i32 0), i8* %cond, i32 %cond9)
  store i32 0, i32* %retval, align 4
  br label %return

if.end11:                                         ; preds = %lor.lhs.false
  %10 = load i8**, i8*** %argv.addr, align 4
  %arrayidx12 = getelementptr inbounds i8*, i8** %10, i32 1
  %11 = load i8*, i8** %arrayidx12, align 4
  %call13 = call i32 @strlen(i8* %11) #3
  store i32 %call13, i32* %len, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end11
  %12 = load i32, i32* %i, align 4
  %13 = load i32, i32* %len, align 4
  %cmp14 = icmp slt i32 %12, %13
  br i1 %cmp14, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %14 = load i8**, i8*** %argv.addr, align 4
  %arrayidx15 = getelementptr inbounds i8*, i8** %14, i32 1
  %15 = load i8*, i8** %arrayidx15, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx16 = getelementptr inbounds i8, i8* %15, i32 %16
  %17 = load i8, i8* %arrayidx16, align 1
  %18 = load i32, i32* %i, align 4
  call void @checkAndUpdateLetterList(i8 signext %17, i32 %18)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %19 = load i32, i32* %i, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %20 = load i8**, i8*** %argv.addr, align 4
  %arrayidx17 = getelementptr inbounds i8*, i8** %20, i32 1
  %21 = load i8*, i8** %arrayidx17, align 4
  %22 = load i32, i32* %len, align 4
  %23 = load i8, i8* @duplicatesFound, align 1
  %tobool = trunc i8 %23 to i1
  %conv = zext i1 %tobool to i32
  %cmp18 = icmp eq i32 %conv, 0
  %cond20 = select i1 %cmp18, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.8, i32 0, i32 0)
  %call21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.6, i32 0, i32 0), i8* %21, i32 %22, i8* %cond20)
  %24 = load i8, i8* @duplicatesFound, align 1
  %tobool22 = trunc i8 %24 to i1
  br i1 %tobool22, label %if.then26, label %if.end27

if.then26:                                        ; preds = %for.end
  call void @printLetterList()
  br label %if.end27

if.end27:                                         ; preds = %if.then26, %for.end
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end27, %cond.end, %if.then
  %25 = load i32, i32* %retval, align 4
  ret i32 %25
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %argc.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sgt i32 %0, 2
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %argc.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = icmp eq i32 %3, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call3 = call i32 @strlen(i8* %5) #3
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp4 = icmp eq i32 %call3, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %argc.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp6 = icmp eq i32 %6, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %argc.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp8 = icmp eq i32 %9, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cond9 = select i1 %cmp8, i32 0, i32 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 1:i32, %0
%2:i32 = select %1, 0:i32, 1:i32
infer %2

; *****
; For LLVM instruction:
;  %call13 = call i32 @strlen(i8* %11) #3
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp14 = icmp slt i32 %12, %13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i8, i8* %arrayidx16, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %19, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i8, i8* @duplicatesFound, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0 (demandedBits=00000001)

; *****
; For LLVM instruction:
;  %tobool = trunc i8 %23 to i1
; Looking for a replacement for:
%0:i8 = var
%1:i1 = trunc %0
infer %1

; *****
; For LLVM instruction:
;  %conv = zext i1 %tobool to i32
; Looking for a replacement for:
%0:i8 = var
%1:i1 = trunc %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %cmp18 = icmp eq i32 %conv, 0
; Looking for a replacement for:
%0:i8 = var
%1:i1 = trunc %0
%2:i32 = zext %1
%3:i1 = eq 0:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %24 = load i8, i8* @duplicatesFound, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0 (demandedBits=00000001)

; *****
; For LLVM instruction:
;  %tobool22 = trunc i8 %24 to i1
; Looking for a replacement for:
%0:i8 = var
%1:i1 = trunc %0
infer %1

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 1:i32, %0
%2:i32 = select %1, 0:i32, 1:i32
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for __main_argc_argv()
Total of 1 replacements done on this module
Total of 1 replacements candidates on this module
