
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for knapsack()

; ModuleID = './Knapsack_problem-0-1.c.bc'
source_filename = "./Knapsack_problem-0-1.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.item_t = type { i8*, i32, i32 }

@.str = private unnamed_addr constant [4 x i8] c"map\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"compass\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"water\00", align 1
@.str.3 = private unnamed_addr constant [9 x i8] c"sandwich\00", align 1
@.str.4 = private unnamed_addr constant [8 x i8] c"glucose\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"tin\00", align 1
@.str.6 = private unnamed_addr constant [7 x i8] c"banana\00", align 1
@.str.7 = private unnamed_addr constant [6 x i8] c"apple\00", align 1
@.str.8 = private unnamed_addr constant [7 x i8] c"cheese\00", align 1
@.str.9 = private unnamed_addr constant [5 x i8] c"beer\00", align 1
@.str.10 = private unnamed_addr constant [13 x i8] c"suntan cream\00", align 1
@.str.11 = private unnamed_addr constant [7 x i8] c"camera\00", align 1
@.str.12 = private unnamed_addr constant [8 x i8] c"T-shirt\00", align 1
@.str.13 = private unnamed_addr constant [9 x i8] c"trousers\00", align 1
@.str.14 = private unnamed_addr constant [9 x i8] c"umbrella\00", align 1
@.str.15 = private unnamed_addr constant [20 x i8] c"waterproof trousers\00", align 1
@.str.16 = private unnamed_addr constant [23 x i8] c"waterproof overclothes\00", align 1
@.str.17 = private unnamed_addr constant [10 x i8] c"note-case\00", align 1
@.str.18 = private unnamed_addr constant [11 x i8] c"sunglasses\00", align 1
@.str.19 = private unnamed_addr constant [6 x i8] c"towel\00", align 1
@.str.20 = private unnamed_addr constant [6 x i8] c"socks\00", align 1
@.str.21 = private unnamed_addr constant [5 x i8] c"book\00", align 1
@items = hidden global [22 x %struct.item_t] [%struct.item_t { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 9, i32 150 }, %struct.item_t { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0), i32 13, i32 35 }, %struct.item_t { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), i32 153, i32 200 }, %struct.item_t { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), i32 50, i32 160 }, %struct.item_t { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i32 0, i32 0), i32 15, i32 60 }, %struct.item_t { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 68, i32 45 }, %struct.item_t { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i32 0, i32 0), i32 27, i32 60 }, %struct.item_t { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i32 0, i32 0), i32 39, i32 40 }, %struct.item_t { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i32 0, i32 0), i32 23, i32 30 }, %struct.item_t { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i32 0, i32 0), i32 52, i32 10 }, %struct.item_t { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.10, i32 0, i32 0), i32 11, i32 70 }, %struct.item_t { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i32 0, i32 0), i32 32, i32 30 }, %struct.item_t { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.12, i32 0, i32 0), i32 24, i32 15 }, %struct.item_t { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.13, i32 0, i32 0), i32 48, i32 10 }, %struct.item_t { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.14, i32 0, i32 0), i32 73, i32 40 }, %struct.item_t { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.15, i32 0, i32 0), i32 42, i32 70 }, %struct.item_t { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.16, i32 0, i32 0), i32 43, i32 75 }, %struct.item_t { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.17, i32 0, i32 0), i32 22, i32 80 }, %struct.item_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.18, i32 0, i32 0), i32 7, i32 20 }, %struct.item_t { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.19, i32 0, i32 0), i32 18, i32 12 }, %struct.item_t { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.20, i32 0, i32 0), i32 4, i32 50 }, %struct.item_t { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.21, i32 0, i32 0), i32 30, i32 10 }], align 16
@.str.22 = private unnamed_addr constant [15 x i8] c"%-22s %5d %5d\0A\00", align 1
@.str.23 = private unnamed_addr constant [8 x i8] c"totals:\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32* @knapsack(%struct.item_t* %items, i32 %n, i32 %w) #0 {
entry:
  %items.addr = alloca %struct.item_t*, align 4
  %n.addr = alloca i32, align 4
  %w.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %mm = alloca i32*, align 4
  %m = alloca i32**, align 4
  %s = alloca i32*, align 4
  store %struct.item_t* %items, %struct.item_t** %items.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %w, i32* %w.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %add = add nsw i32 %0, 1
  %1 = load i32, i32* %w.addr, align 4
  %add1 = add nsw i32 %1, 1
  %mul = mul nsw i32 %add, %add1
  %call = call noalias i8* @calloc(i32 %mul, i32 4)
  %2 = bitcast i8* %call to i32*
  store i32* %2, i32** %mm, align 4
  %3 = load i32, i32* %n.addr, align 4
  %add2 = add nsw i32 %3, 1
  %mul3 = mul i32 %add2, 4
  %call4 = call noalias i8* @malloc(i32 %mul3)
  %4 = bitcast i8* %call4 to i32**
  store i32** %4, i32*** %m, align 4
  %5 = load i32*, i32** %mm, align 4
  %6 = load i32**, i32*** %m, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %6, i32 0
  store i32* %5, i32** %arrayidx, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc35, %entry
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %n.addr, align 4
  %cmp = icmp sle i32 %7, %8
  br i1 %cmp, label %for.body, label %for.end37

for.body:                                         ; preds = %for.cond
  %9 = load i32*, i32** %mm, align 4
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %w.addr, align 4
  %add5 = add nsw i32 %11, 1
  %mul6 = mul nsw i32 %10, %add5
  %arrayidx7 = getelementptr inbounds i32, i32* %9, i32 %mul6
  %12 = load i32**, i32*** %m, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds i32*, i32** %12, i32 %13
  store i32* %arrayidx7, i32** %arrayidx8, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc, %for.body
  %14 = load i32, i32* %j, align 4
  %15 = load i32, i32* %w.addr, align 4
  %cmp10 = icmp sle i32 %14, %15
  br i1 %cmp10, label %for.body11, label %for.end

for.body11:                                       ; preds = %for.cond9
  %16 = load %struct.item_t*, %struct.item_t** %items.addr, align 4
  %17 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %17, 1
  %arrayidx12 = getelementptr inbounds %struct.item_t, %struct.item_t* %16, i32 %sub
  %weight = getelementptr inbounds %struct.item_t, %struct.item_t* %arrayidx12, i32 0, i32 1
  %18 = load i32, i32* %weight, align 4
  %19 = load i32, i32* %j, align 4
  %cmp13 = icmp sgt i32 %18, %19
  br i1 %cmp13, label %if.then, label %if.else

if.then:                                          ; preds = %for.body11
  %20 = load i32**, i32*** %m, align 4
  %21 = load i32, i32* %i, align 4
  %sub14 = sub nsw i32 %21, 1
  %arrayidx15 = getelementptr inbounds i32*, i32** %20, i32 %sub14
  %22 = load i32*, i32** %arrayidx15, align 4
  %23 = load i32, i32* %j, align 4
  %arrayidx16 = getelementptr inbounds i32, i32* %22, i32 %23
  %24 = load i32, i32* %arrayidx16, align 4
  %25 = load i32**, i32*** %m, align 4
  %26 = load i32, i32* %i, align 4
  %arrayidx17 = getelementptr inbounds i32*, i32** %25, i32 %26
  %27 = load i32*, i32** %arrayidx17, align 4
  %28 = load i32, i32* %j, align 4
  %arrayidx18 = getelementptr inbounds i32, i32* %27, i32 %28
  store i32 %24, i32* %arrayidx18, align 4
  br label %if.end

if.else:                                          ; preds = %for.body11
  %29 = load i32**, i32*** %m, align 4
  %30 = load i32, i32* %i, align 4
  %sub19 = sub nsw i32 %30, 1
  %arrayidx20 = getelementptr inbounds i32*, i32** %29, i32 %sub19
  %31 = load i32*, i32** %arrayidx20, align 4
  %32 = load i32, i32* %j, align 4
  %arrayidx21 = getelementptr inbounds i32, i32* %31, i32 %32
  %33 = load i32, i32* %arrayidx21, align 4
  store i32 %33, i32* %a, align 4
  %34 = load i32**, i32*** %m, align 4
  %35 = load i32, i32* %i, align 4
  %sub22 = sub nsw i32 %35, 1
  %arrayidx23 = getelementptr inbounds i32*, i32** %34, i32 %sub22
  %36 = load i32*, i32** %arrayidx23, align 4
  %37 = load i32, i32* %j, align 4
  %38 = load %struct.item_t*, %struct.item_t** %items.addr, align 4
  %39 = load i32, i32* %i, align 4
  %sub24 = sub nsw i32 %39, 1
  %arrayidx25 = getelementptr inbounds %struct.item_t, %struct.item_t* %38, i32 %sub24
  %weight26 = getelementptr inbounds %struct.item_t, %struct.item_t* %arrayidx25, i32 0, i32 1
  %40 = load i32, i32* %weight26, align 4
  %sub27 = sub nsw i32 %37, %40
  %arrayidx28 = getelementptr inbounds i32, i32* %36, i32 %sub27
  %41 = load i32, i32* %arrayidx28, align 4
  %42 = load %struct.item_t*, %struct.item_t** %items.addr, align 4
  %43 = load i32, i32* %i, align 4
  %sub29 = sub nsw i32 %43, 1
  %arrayidx30 = getelementptr inbounds %struct.item_t, %struct.item_t* %42, i32 %sub29
  %value = getelementptr inbounds %struct.item_t, %struct.item_t* %arrayidx30, i32 0, i32 2
  %44 = load i32, i32* %value, align 4
  %add31 = add nsw i32 %41, %44
  store i32 %add31, i32* %b, align 4
  %45 = load i32, i32* %a, align 4
  %46 = load i32, i32* %b, align 4
  %cmp32 = icmp sgt i32 %45, %46
  br i1 %cmp32, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  %47 = load i32, i32* %a, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.else
  %48 = load i32, i32* %b, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %47, %cond.true ], [ %48, %cond.false ]
  %49 = load i32**, i32*** %m, align 4
  %50 = load i32, i32* %i, align 4
  %arrayidx33 = getelementptr inbounds i32*, i32** %49, i32 %50
  %51 = load i32*, i32** %arrayidx33, align 4
  %52 = load i32, i32* %j, align 4
  %arrayidx34 = getelementptr inbounds i32, i32* %51, i32 %52
  store i32 %cond, i32* %arrayidx34, align 4
  br label %if.end

if.end:                                           ; preds = %cond.end, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %53 = load i32, i32* %j, align 4
  %inc = add nsw i32 %53, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond9

for.end:                                          ; preds = %for.cond9
  br label %for.inc35

for.inc35:                                        ; preds = %for.end
  %54 = load i32, i32* %i, align 4
  %inc36 = add nsw i32 %54, 1
  store i32 %inc36, i32* %i, align 4
  br label %for.cond

for.end37:                                        ; preds = %for.cond
  %55 = load i32, i32* %n.addr, align 4
  %call38 = call noalias i8* @calloc(i32 %55, i32 4)
  %56 = bitcast i8* %call38 to i32*
  store i32* %56, i32** %s, align 4
  %57 = load i32, i32* %n.addr, align 4
  store i32 %57, i32* %i, align 4
  %58 = load i32, i32* %w.addr, align 4
  store i32 %58, i32* %j, align 4
  br label %for.cond39

for.cond39:                                       ; preds = %for.inc56, %for.end37
  %59 = load i32, i32* %i, align 4
  %cmp40 = icmp sgt i32 %59, 0
  br i1 %cmp40, label %for.body41, label %for.end57

for.body41:                                       ; preds = %for.cond39
  %60 = load i32**, i32*** %m, align 4
  %61 = load i32, i32* %i, align 4
  %arrayidx42 = getelementptr inbounds i32*, i32** %60, i32 %61
  %62 = load i32*, i32** %arrayidx42, align 4
  %63 = load i32, i32* %j, align 4
  %arrayidx43 = getelementptr inbounds i32, i32* %62, i32 %63
  %64 = load i32, i32* %arrayidx43, align 4
  %65 = load i32**, i32*** %m, align 4
  %66 = load i32, i32* %i, align 4
  %sub44 = sub nsw i32 %66, 1
  %arrayidx45 = getelementptr inbounds i32*, i32** %65, i32 %sub44
  %67 = load i32*, i32** %arrayidx45, align 4
  %68 = load i32, i32* %j, align 4
  %arrayidx46 = getelementptr inbounds i32, i32* %67, i32 %68
  %69 = load i32, i32* %arrayidx46, align 4
  %cmp47 = icmp sgt i32 %64, %69
  br i1 %cmp47, label %if.then48, label %if.end55

if.then48:                                        ; preds = %for.body41
  %70 = load i32*, i32** %s, align 4
  %71 = load i32, i32* %i, align 4
  %sub49 = sub nsw i32 %71, 1
  %arrayidx50 = getelementptr inbounds i32, i32* %70, i32 %sub49
  store i32 1, i32* %arrayidx50, align 4
  %72 = load %struct.item_t*, %struct.item_t** %items.addr, align 4
  %73 = load i32, i32* %i, align 4
  %sub51 = sub nsw i32 %73, 1
  %arrayidx52 = getelementptr inbounds %struct.item_t, %struct.item_t* %72, i32 %sub51
  %weight53 = getelementptr inbounds %struct.item_t, %struct.item_t* %arrayidx52, i32 0, i32 1
  %74 = load i32, i32* %weight53, align 4
  %75 = load i32, i32* %j, align 4
  %sub54 = sub nsw i32 %75, %74
  store i32 %sub54, i32* %j, align 4
  br label %if.end55

if.end55:                                         ; preds = %if.then48, %for.body41
  br label %for.inc56

for.inc56:                                        ; preds = %if.end55
  %76 = load i32, i32* %i, align 4
  %dec = add nsw i32 %76, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond39

for.end57:                                        ; preds = %for.cond39
  %77 = load i32*, i32** %mm, align 4
  %78 = bitcast i32* %77 to i8*
  call void @free(i8* %78)
  %79 = load i32**, i32*** %m, align 4
  %80 = bitcast i32** %79 to i8*
  call void @free(i8* %80)
  %81 = load i32*, i32** %s, align 4
  ret i32* %81
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

declare noalias i8* @malloc(i32 %0) #1

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  %tw = alloca i32, align 4
  %tv = alloca i32, align 4
  %s = alloca i32*, align 4
  store i32 0, i32* %retval, align 4
  store i32 0, i32* %tw, align 4
  store i32 0, i32* %tv, align 4
  store i32 22, i32* %n, align 4
  %0 = load i32, i32* %n, align 4
  %call = call i32* @knapsack(%struct.item_t* getelementptr inbounds ([22 x %struct.item_t], [22 x %struct.item_t]* @items, i32 0, i32 0), i32 %0, i32 400)
  store i32* %call, i32** %s, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32*, i32** %s, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %3, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  %tobool = icmp ne i32 %5, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [22 x %struct.item_t], [22 x %struct.item_t]* @items, i32 0, i32 %6
  %name = getelementptr inbounds %struct.item_t, %struct.item_t* %arrayidx1, i32 0, i32 0
  %7 = load i8*, i8** %name, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds [22 x %struct.item_t], [22 x %struct.item_t]* @items, i32 0, i32 %8
  %weight = getelementptr inbounds %struct.item_t, %struct.item_t* %arrayidx2, i32 0, i32 1
  %9 = load i32, i32* %weight, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds [22 x %struct.item_t], [22 x %struct.item_t]* @items, i32 0, i32 %10
  %value = getelementptr inbounds %struct.item_t, %struct.item_t* %arrayidx3, i32 0, i32 2
  %11 = load i32, i32* %value, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.22, i32 0, i32 0), i8* %7, i32 %9, i32 %11)
  %12 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds [22 x %struct.item_t], [22 x %struct.item_t]* @items, i32 0, i32 %12
  %weight6 = getelementptr inbounds %struct.item_t, %struct.item_t* %arrayidx5, i32 0, i32 1
  %13 = load i32, i32* %weight6, align 4
  %14 = load i32, i32* %tw, align 4
  %add = add nsw i32 %14, %13
  store i32 %add, i32* %tw, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [22 x %struct.item_t], [22 x %struct.item_t]* @items, i32 0, i32 %15
  %value8 = getelementptr inbounds %struct.item_t, %struct.item_t* %arrayidx7, i32 0, i32 2
  %16 = load i32, i32* %value8, align 4
  %17 = load i32, i32* %tv, align 4
  %add9 = add nsw i32 %17, %16
  store i32 %add9, i32* %tv, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %18 = load i32, i32* %i, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %19 = load i32, i32* %tw, align 4
  %20 = load i32, i32* %tv, align 4
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.23, i32 0, i32 0), i32 %19, i32 %20)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %0, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %w.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add1 = add nsw i32 %1, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %add, %add1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = var
%3:i32 = addnsw 1:i32, %2
%4:i32 = mulnsw %1, %3
infer %4

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add2 = add nsw i32 %3, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %mul3 = mul i32 %add2, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = mul 4:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sle i32 %7, %8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %w.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add5 = add nsw i32 %11, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %mul6 = mul nsw i32 %10, %add5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1
%3:i32 = mulnsw %0, %2
infer %3

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %w.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp10 = icmp sle i32 %14, %15
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %17, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %weight, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp13 = icmp sgt i32 %18, %19
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub14 = sub nsw i32 %21, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %arrayidx16, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub19 = sub nsw i32 %30, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %arrayidx21, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub22 = sub nsw i32 %35, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub24 = sub nsw i32 %39, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %40 = load i32, i32* %weight26, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub27 = sub nsw i32 %37, %40
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %41 = load i32, i32* %arrayidx28, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %43 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub29 = sub nsw i32 %43, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %44 = load i32, i32* %value, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add31 = add nsw i32 %41, %44
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %45 = load i32, i32* %a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %46 = load i32, i32* %b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp32 = icmp sgt i32 %45, %46
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %47 = load i32, i32* %a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %48 = load i32, i32* %b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cond = phi i32 [ %47, %cond.true ], [ %48, %cond.false ]
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %50 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %52 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %53 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %53, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %54 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc36 = add nsw i32 %54, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %55 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %57 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %58 = load i32, i32* %w.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %59 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp40 = icmp sgt i32 %59, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %61 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %63 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %64 = load i32, i32* %arrayidx43, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %66 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub44 = sub nsw i32 %66, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %68 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %69 = load i32, i32* %arrayidx46, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp47 = icmp sgt i32 %64, %69
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %71 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub49 = sub nsw i32 %71, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %73 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub51 = sub nsw i32 %73, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %74 = load i32, i32* %weight53, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %75 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub54 = sub nsw i32 %75, %74
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %76 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec = add nsw i32 %76, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = var
%3:i32 = addnsw 1:i32, %2
%4:i32 = mulnsw %1, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = mul 4:i32, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 4
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741828
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = addnsw 1:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1
%3:i32 = mulnsw %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147418112
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for knapsack()

; entering Souper's runOnFunction() for main()

; ModuleID = './Knapsack_problem-0-1.c.bc'
source_filename = "./Knapsack_problem-0-1.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.item_t = type { i8*, i32, i32 }

@.str = private unnamed_addr constant [4 x i8] c"map\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"compass\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"water\00", align 1
@.str.3 = private unnamed_addr constant [9 x i8] c"sandwich\00", align 1
@.str.4 = private unnamed_addr constant [8 x i8] c"glucose\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"tin\00", align 1
@.str.6 = private unnamed_addr constant [7 x i8] c"banana\00", align 1
@.str.7 = private unnamed_addr constant [6 x i8] c"apple\00", align 1
@.str.8 = private unnamed_addr constant [7 x i8] c"cheese\00", align 1
@.str.9 = private unnamed_addr constant [5 x i8] c"beer\00", align 1
@.str.10 = private unnamed_addr constant [13 x i8] c"suntan cream\00", align 1
@.str.11 = private unnamed_addr constant [7 x i8] c"camera\00", align 1
@.str.12 = private unnamed_addr constant [8 x i8] c"T-shirt\00", align 1
@.str.13 = private unnamed_addr constant [9 x i8] c"trousers\00", align 1
@.str.14 = private unnamed_addr constant [9 x i8] c"umbrella\00", align 1
@.str.15 = private unnamed_addr constant [20 x i8] c"waterproof trousers\00", align 1
@.str.16 = private unnamed_addr constant [23 x i8] c"waterproof overclothes\00", align 1
@.str.17 = private unnamed_addr constant [10 x i8] c"note-case\00", align 1
@.str.18 = private unnamed_addr constant [11 x i8] c"sunglasses\00", align 1
@.str.19 = private unnamed_addr constant [6 x i8] c"towel\00", align 1
@.str.20 = private unnamed_addr constant [6 x i8] c"socks\00", align 1
@.str.21 = private unnamed_addr constant [5 x i8] c"book\00", align 1
@items = hidden global [22 x %struct.item_t] [%struct.item_t { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 9, i32 150 }, %struct.item_t { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0), i32 13, i32 35 }, %struct.item_t { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), i32 153, i32 200 }, %struct.item_t { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), i32 50, i32 160 }, %struct.item_t { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i32 0, i32 0), i32 15, i32 60 }, %struct.item_t { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i32 68, i32 45 }, %struct.item_t { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i32 0, i32 0), i32 27, i32 60 }, %struct.item_t { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i32 0, i32 0), i32 39, i32 40 }, %struct.item_t { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i32 0, i32 0), i32 23, i32 30 }, %struct.item_t { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i32 0, i32 0), i32 52, i32 10 }, %struct.item_t { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.10, i32 0, i32 0), i32 11, i32 70 }, %struct.item_t { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i32 0, i32 0), i32 32, i32 30 }, %struct.item_t { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.12, i32 0, i32 0), i32 24, i32 15 }, %struct.item_t { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.13, i32 0, i32 0), i32 48, i32 10 }, %struct.item_t { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.14, i32 0, i32 0), i32 73, i32 40 }, %struct.item_t { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.15, i32 0, i32 0), i32 42, i32 70 }, %struct.item_t { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.16, i32 0, i32 0), i32 43, i32 75 }, %struct.item_t { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.17, i32 0, i32 0), i32 22, i32 80 }, %struct.item_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.18, i32 0, i32 0), i32 7, i32 20 }, %struct.item_t { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.19, i32 0, i32 0), i32 18, i32 12 }, %struct.item_t { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.20, i32 0, i32 0), i32 4, i32 50 }, %struct.item_t { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.21, i32 0, i32 0), i32 30, i32 10 }], align 16
@.str.22 = private unnamed_addr constant [15 x i8] c"%-22s %5d %5d\0A\00", align 1
@.str.23 = private unnamed_addr constant [8 x i8] c"totals:\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32* @knapsack(%struct.item_t* %items, i32 %n, i32 %w) #0 {
entry:
  %items.addr = alloca %struct.item_t*, align 4
  %n.addr = alloca i32, align 4
  %w.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %mm = alloca i32*, align 4
  %m = alloca i32**, align 4
  %s = alloca i32*, align 4
  store %struct.item_t* %items, %struct.item_t** %items.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %w, i32* %w.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %add = add nsw i32 %0, 1
  %1 = load i32, i32* %w.addr, align 4
  %add1 = add nsw i32 %1, 1
  %mul = mul nsw i32 %add, %add1
  %call = call noalias i8* @calloc(i32 %mul, i32 4)
  %2 = bitcast i8* %call to i32*
  store i32* %2, i32** %mm, align 4
  %3 = load i32, i32* %n.addr, align 4
  %add2 = add nsw i32 %3, 1
  %mul3 = mul i32 %add2, 4
  %call4 = call noalias i8* @malloc(i32 %mul3)
  %4 = bitcast i8* %call4 to i32**
  store i32** %4, i32*** %m, align 4
  %5 = load i32*, i32** %mm, align 4
  %6 = load i32**, i32*** %m, align 4
  %arrayidx = getelementptr inbounds i32*, i32** %6, i32 0
  store i32* %5, i32** %arrayidx, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc35, %entry
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %n.addr, align 4
  %cmp = icmp sle i32 %7, %8
  br i1 %cmp, label %for.body, label %for.end37

for.body:                                         ; preds = %for.cond
  %9 = load i32*, i32** %mm, align 4
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %w.addr, align 4
  %add5 = add nsw i32 %11, 1
  %mul6 = mul nsw i32 %10, %add5
  %arrayidx7 = getelementptr inbounds i32, i32* %9, i32 %mul6
  %12 = load i32**, i32*** %m, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds i32*, i32** %12, i32 %13
  store i32* %arrayidx7, i32** %arrayidx8, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc, %for.body
  %14 = load i32, i32* %j, align 4
  %15 = load i32, i32* %w.addr, align 4
  %cmp10 = icmp sle i32 %14, %15
  br i1 %cmp10, label %for.body11, label %for.end

for.body11:                                       ; preds = %for.cond9
  %16 = load %struct.item_t*, %struct.item_t** %items.addr, align 4
  %17 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %17, 1
  %arrayidx12 = getelementptr inbounds %struct.item_t, %struct.item_t* %16, i32 %sub
  %weight = getelementptr inbounds %struct.item_t, %struct.item_t* %arrayidx12, i32 0, i32 1
  %18 = load i32, i32* %weight, align 4
  %19 = load i32, i32* %j, align 4
  %cmp13 = icmp sgt i32 %18, %19
  br i1 %cmp13, label %if.then, label %if.else

if.then:                                          ; preds = %for.body11
  %20 = load i32**, i32*** %m, align 4
  %21 = load i32, i32* %i, align 4
  %sub14 = sub nsw i32 %21, 1
  %arrayidx15 = getelementptr inbounds i32*, i32** %20, i32 %sub14
  %22 = load i32*, i32** %arrayidx15, align 4
  %23 = load i32, i32* %j, align 4
  %arrayidx16 = getelementptr inbounds i32, i32* %22, i32 %23
  %24 = load i32, i32* %arrayidx16, align 4
  %25 = load i32**, i32*** %m, align 4
  %26 = load i32, i32* %i, align 4
  %arrayidx17 = getelementptr inbounds i32*, i32** %25, i32 %26
  %27 = load i32*, i32** %arrayidx17, align 4
  %28 = load i32, i32* %j, align 4
  %arrayidx18 = getelementptr inbounds i32, i32* %27, i32 %28
  store i32 %24, i32* %arrayidx18, align 4
  br label %if.end

if.else:                                          ; preds = %for.body11
  %29 = load i32**, i32*** %m, align 4
  %30 = load i32, i32* %i, align 4
  %sub19 = sub nsw i32 %30, 1
  %arrayidx20 = getelementptr inbounds i32*, i32** %29, i32 %sub19
  %31 = load i32*, i32** %arrayidx20, align 4
  %32 = load i32, i32* %j, align 4
  %arrayidx21 = getelementptr inbounds i32, i32* %31, i32 %32
  %33 = load i32, i32* %arrayidx21, align 4
  store i32 %33, i32* %a, align 4
  %34 = load i32**, i32*** %m, align 4
  %35 = load i32, i32* %i, align 4
  %sub22 = sub nsw i32 %35, 1
  %arrayidx23 = getelementptr inbounds i32*, i32** %34, i32 %sub22
  %36 = load i32*, i32** %arrayidx23, align 4
  %37 = load i32, i32* %j, align 4
  %38 = load %struct.item_t*, %struct.item_t** %items.addr, align 4
  %39 = load i32, i32* %i, align 4
  %sub24 = sub nsw i32 %39, 1
  %arrayidx25 = getelementptr inbounds %struct.item_t, %struct.item_t* %38, i32 %sub24
  %weight26 = getelementptr inbounds %struct.item_t, %struct.item_t* %arrayidx25, i32 0, i32 1
  %40 = load i32, i32* %weight26, align 4
  %sub27 = sub nsw i32 %37, %40
  %arrayidx28 = getelementptr inbounds i32, i32* %36, i32 %sub27
  %41 = load i32, i32* %arrayidx28, align 4
  %42 = load %struct.item_t*, %struct.item_t** %items.addr, align 4
  %43 = load i32, i32* %i, align 4
  %sub29 = sub nsw i32 %43, 1
  %arrayidx30 = getelementptr inbounds %struct.item_t, %struct.item_t* %42, i32 %sub29
  %value = getelementptr inbounds %struct.item_t, %struct.item_t* %arrayidx30, i32 0, i32 2
  %44 = load i32, i32* %value, align 4
  %add31 = add nsw i32 %41, %44
  store i32 %add31, i32* %b, align 4
  %45 = load i32, i32* %a, align 4
  %46 = load i32, i32* %b, align 4
  %cmp32 = icmp sgt i32 %45, %46
  br i1 %cmp32, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  %47 = load i32, i32* %a, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.else
  %48 = load i32, i32* %b, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %47, %cond.true ], [ %48, %cond.false ]
  %49 = load i32**, i32*** %m, align 4
  %50 = load i32, i32* %i, align 4
  %arrayidx33 = getelementptr inbounds i32*, i32** %49, i32 %50
  %51 = load i32*, i32** %arrayidx33, align 4
  %52 = load i32, i32* %j, align 4
  %arrayidx34 = getelementptr inbounds i32, i32* %51, i32 %52
  store i32 %cond, i32* %arrayidx34, align 4
  br label %if.end

if.end:                                           ; preds = %cond.end, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %53 = load i32, i32* %j, align 4
  %inc = add nsw i32 %53, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond9

for.end:                                          ; preds = %for.cond9
  br label %for.inc35

for.inc35:                                        ; preds = %for.end
  %54 = load i32, i32* %i, align 4
  %inc36 = add nsw i32 %54, 1
  store i32 %inc36, i32* %i, align 4
  br label %for.cond

for.end37:                                        ; preds = %for.cond
  %55 = load i32, i32* %n.addr, align 4
  %call38 = call noalias i8* @calloc(i32 %55, i32 4)
  %56 = bitcast i8* %call38 to i32*
  store i32* %56, i32** %s, align 4
  %57 = load i32, i32* %n.addr, align 4
  store i32 %57, i32* %i, align 4
  %58 = load i32, i32* %w.addr, align 4
  store i32 %58, i32* %j, align 4
  br label %for.cond39

for.cond39:                                       ; preds = %for.inc56, %for.end37
  %59 = load i32, i32* %i, align 4
  %cmp40 = icmp sgt i32 %59, 0
  br i1 %cmp40, label %for.body41, label %for.end57

for.body41:                                       ; preds = %for.cond39
  %60 = load i32**, i32*** %m, align 4
  %61 = load i32, i32* %i, align 4
  %arrayidx42 = getelementptr inbounds i32*, i32** %60, i32 %61
  %62 = load i32*, i32** %arrayidx42, align 4
  %63 = load i32, i32* %j, align 4
  %arrayidx43 = getelementptr inbounds i32, i32* %62, i32 %63
  %64 = load i32, i32* %arrayidx43, align 4
  %65 = load i32**, i32*** %m, align 4
  %66 = load i32, i32* %i, align 4
  %sub44 = sub nsw i32 %66, 1
  %arrayidx45 = getelementptr inbounds i32*, i32** %65, i32 %sub44
  %67 = load i32*, i32** %arrayidx45, align 4
  %68 = load i32, i32* %j, align 4
  %arrayidx46 = getelementptr inbounds i32, i32* %67, i32 %68
  %69 = load i32, i32* %arrayidx46, align 4
  %cmp47 = icmp sgt i32 %64, %69
  br i1 %cmp47, label %if.then48, label %if.end55

if.then48:                                        ; preds = %for.body41
  %70 = load i32*, i32** %s, align 4
  %71 = load i32, i32* %i, align 4
  %sub49 = sub nsw i32 %71, 1
  %arrayidx50 = getelementptr inbounds i32, i32* %70, i32 %sub49
  store i32 1, i32* %arrayidx50, align 4
  %72 = load %struct.item_t*, %struct.item_t** %items.addr, align 4
  %73 = load i32, i32* %i, align 4
  %sub51 = sub nsw i32 %73, 1
  %arrayidx52 = getelementptr inbounds %struct.item_t, %struct.item_t* %72, i32 %sub51
  %weight53 = getelementptr inbounds %struct.item_t, %struct.item_t* %arrayidx52, i32 0, i32 1
  %74 = load i32, i32* %weight53, align 4
  %75 = load i32, i32* %j, align 4
  %sub54 = sub nsw i32 %75, %74
  store i32 %sub54, i32* %j, align 4
  br label %if.end55

if.end55:                                         ; preds = %if.then48, %for.body41
  br label %for.inc56

for.inc56:                                        ; preds = %if.end55
  %76 = load i32, i32* %i, align 4
  %dec = add nsw i32 %76, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond39

for.end57:                                        ; preds = %for.cond39
  %77 = load i32*, i32** %mm, align 4
  %78 = bitcast i32* %77 to i8*
  call void @free(i8* %78)
  %79 = load i32**, i32*** %m, align 4
  %80 = bitcast i32** %79 to i8*
  call void @free(i8* %80)
  %81 = load i32*, i32** %s, align 4
  ret i32* %81
}

declare noalias i8* @calloc(i32 %0, i32 %1) #1

declare noalias i8* @malloc(i32 %0) #1

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  %tw = alloca i32, align 4
  %tv = alloca i32, align 4
  %s = alloca i32*, align 4
  store i32 0, i32* %retval, align 4
  store i32 0, i32* %tw, align 4
  store i32 0, i32* %tv, align 4
  store i32 22, i32* %n, align 4
  %0 = load i32, i32* %n, align 4
  %call = call i32* @knapsack(%struct.item_t* getelementptr inbounds ([22 x %struct.item_t], [22 x %struct.item_t]* @items, i32 0, i32 0), i32 %0, i32 400)
  store i32* %call, i32** %s, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32*, i32** %s, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %3, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  %tobool = icmp ne i32 %5, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [22 x %struct.item_t], [22 x %struct.item_t]* @items, i32 0, i32 %6
  %name = getelementptr inbounds %struct.item_t, %struct.item_t* %arrayidx1, i32 0, i32 0
  %7 = load i8*, i8** %name, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds [22 x %struct.item_t], [22 x %struct.item_t]* @items, i32 0, i32 %8
  %weight = getelementptr inbounds %struct.item_t, %struct.item_t* %arrayidx2, i32 0, i32 1
  %9 = load i32, i32* %weight, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds [22 x %struct.item_t], [22 x %struct.item_t]* @items, i32 0, i32 %10
  %value = getelementptr inbounds %struct.item_t, %struct.item_t* %arrayidx3, i32 0, i32 2
  %11 = load i32, i32* %value, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.22, i32 0, i32 0), i8* %7, i32 %9, i32 %11)
  %12 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds [22 x %struct.item_t], [22 x %struct.item_t]* @items, i32 0, i32 %12
  %weight6 = getelementptr inbounds %struct.item_t, %struct.item_t* %arrayidx5, i32 0, i32 1
  %13 = load i32, i32* %weight6, align 4
  %14 = load i32, i32* %tw, align 4
  %add = add nsw i32 %14, %13
  store i32 %add, i32* %tw, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [22 x %struct.item_t], [22 x %struct.item_t]* @items, i32 0, i32 %15
  %value8 = getelementptr inbounds %struct.item_t, %struct.item_t* %arrayidx7, i32 0, i32 2
  %16 = load i32, i32* %value8, align 4
  %17 = load i32, i32* %tv, align 4
  %add9 = add nsw i32 %17, %16
  store i32 %add9, i32* %tv, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %18 = load i32, i32* %i, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %19 = load i32, i32* %tw, align 4
  %20 = load i32, i32* %tv, align 4
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.23, i32 0, i32 0), i32 %19, i32 %20)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %1, %2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %5, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %weight, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %value, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %weight6, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %tw, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %14, %13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %value8, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %tv, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add9 = add nsw i32 %17, %16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %18, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %tw, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %tv, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
