
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for fps_new()

; ModuleID = './Formal_power_series.c.bc'
source_filename = "./Formal_power_series.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque
%struct.fps_t = type { i32, %struct.fps_t*, %struct.fps_t*, double }

@stderr = external constant %struct._IO_FILE*, align 4
@.str = private unnamed_addr constant [21 x i8] c"Unknown operator %d\0A\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"Sin:\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c" %g\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"\0ACos:\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"\0ATan:\00", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c"\0AExp:\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.fps_t* @fps_new() #0 {
entry:
  %x = alloca %struct.fps_t*, align 4
  %call = call noalias i8* @malloc(i32 24)
  %0 = bitcast i8* %call to %struct.fps_t*
  store %struct.fps_t* %0, %struct.fps_t** %x, align 4
  %1 = load %struct.fps_t*, %struct.fps_t** %x, align 4
  %a0 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %1, i32 0, i32 3
  store double 0.000000e+00, double* %a0, align 8
  %2 = load %struct.fps_t*, %struct.fps_t** %x, align 4
  %s2 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %2, i32 0, i32 2
  store %struct.fps_t* null, %struct.fps_t** %s2, align 8
  %3 = load %struct.fps_t*, %struct.fps_t** %x, align 4
  %s1 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %3, i32 0, i32 1
  store %struct.fps_t* null, %struct.fps_t** %s1, align 4
  %4 = load %struct.fps_t*, %struct.fps_t** %x, align 4
  %type = getelementptr inbounds %struct.fps_t, %struct.fps_t* %4, i32 0, i32 0
  store i32 0, i32* %type, align 8
  %5 = load %struct.fps_t*, %struct.fps_t** %x, align 4
  ret %struct.fps_t* %5
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @fps_redefine(%struct.fps_t* %x, i32 %op, %struct.fps_t* %y, %struct.fps_t* %z) #0 {
entry:
  %x.addr = alloca %struct.fps_t*, align 4
  %op.addr = alloca i32, align 4
  %y.addr = alloca %struct.fps_t*, align 4
  %z.addr = alloca %struct.fps_t*, align 4
  store %struct.fps_t* %x, %struct.fps_t** %x.addr, align 4
  store i32 %op, i32* %op.addr, align 4
  store %struct.fps_t* %y, %struct.fps_t** %y.addr, align 4
  store %struct.fps_t* %z, %struct.fps_t** %z.addr, align 4
  %0 = load i32, i32* %op.addr, align 4
  %1 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %type = getelementptr inbounds %struct.fps_t, %struct.fps_t* %1, i32 0, i32 0
  store i32 %0, i32* %type, align 8
  %2 = load %struct.fps_t*, %struct.fps_t** %y.addr, align 4
  %3 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s1 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %3, i32 0, i32 1
  store %struct.fps_t* %2, %struct.fps_t** %s1, align 4
  %4 = load %struct.fps_t*, %struct.fps_t** %z.addr, align 4
  %5 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s2 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %5, i32 0, i32 2
  store %struct.fps_t* %4, %struct.fps_t** %s2, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.fps_t* @_binary(%struct.fps_t* %x, %struct.fps_t* %y, i32 %op) #0 {
entry:
  %x.addr = alloca %struct.fps_t*, align 4
  %y.addr = alloca %struct.fps_t*, align 4
  %op.addr = alloca i32, align 4
  %s = alloca %struct.fps_t*, align 4
  store %struct.fps_t* %x, %struct.fps_t** %x.addr, align 4
  store %struct.fps_t* %y, %struct.fps_t** %y.addr, align 4
  store i32 %op, i32* %op.addr, align 4
  %call = call %struct.fps_t* @fps_new()
  store %struct.fps_t* %call, %struct.fps_t** %s, align 4
  %0 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %1 = load %struct.fps_t*, %struct.fps_t** %s, align 4
  %s1 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %1, i32 0, i32 1
  store %struct.fps_t* %0, %struct.fps_t** %s1, align 4
  %2 = load %struct.fps_t*, %struct.fps_t** %y.addr, align 4
  %3 = load %struct.fps_t*, %struct.fps_t** %s, align 4
  %s2 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %3, i32 0, i32 2
  store %struct.fps_t* %2, %struct.fps_t** %s2, align 8
  %4 = load i32, i32* %op.addr, align 4
  %5 = load %struct.fps_t*, %struct.fps_t** %s, align 4
  %type = getelementptr inbounds %struct.fps_t, %struct.fps_t* %5, i32 0, i32 0
  store i32 %4, i32* %type, align 8
  %6 = load %struct.fps_t*, %struct.fps_t** %s, align 4
  ret %struct.fps_t* %6
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.fps_t* @_unary(%struct.fps_t* %x, i32 %op) #0 {
entry:
  %x.addr = alloca %struct.fps_t*, align 4
  %op.addr = alloca i32, align 4
  %s = alloca %struct.fps_t*, align 4
  store %struct.fps_t* %x, %struct.fps_t** %x.addr, align 4
  store i32 %op, i32* %op.addr, align 4
  %call = call %struct.fps_t* @fps_new()
  store %struct.fps_t* %call, %struct.fps_t** %s, align 4
  %0 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %1 = load %struct.fps_t*, %struct.fps_t** %s, align 4
  %s1 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %1, i32 0, i32 1
  store %struct.fps_t* %0, %struct.fps_t** %s1, align 4
  %2 = load i32, i32* %op.addr, align 4
  %3 = load %struct.fps_t*, %struct.fps_t** %s, align 4
  %type = getelementptr inbounds %struct.fps_t, %struct.fps_t* %3, i32 0, i32 0
  store i32 %2, i32* %type, align 8
  %4 = load %struct.fps_t*, %struct.fps_t** %s, align 4
  ret %struct.fps_t* %4
}

; Function Attrs: noinline nounwind optnone
define hidden double @term(%struct.fps_t* %x, i32 %n) #0 {
entry:
  %retval = alloca double, align 8
  %x.addr = alloca %struct.fps_t*, align 4
  %n.addr = alloca i32, align 4
  %ret = alloca double, align 8
  %i = alloca i32, align 4
  store %struct.fps_t* %x, %struct.fps_t** %x.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store double 0.000000e+00, double* %ret, align 8
  %0 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %type = getelementptr inbounds %struct.fps_t, %struct.fps_t* %0, i32 0, i32 0
  %1 = load i32, i32* %type, align 8
  switch i32 %1, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
    i32 2, label %sw.bb3
    i32 3, label %sw.bb8
    i32 4, label %sw.bb16
    i32 5, label %sw.bb35
    i32 6, label %sw.bb40
  ]

sw.bb:                                            ; preds = %entry
  %2 = load i32, i32* %n.addr, align 4
  %cmp = icmp sgt i32 %2, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %sw.bb
  br label %cond.end

cond.false:                                       ; preds = %sw.bb
  %3 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %a0 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %3, i32 0, i32 3
  %4 = load double, double* %a0, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ 0.000000e+00, %cond.true ], [ %4, %cond.false ]
  store double %cond, double* %retval, align 8
  br label %return

sw.bb1:                                           ; preds = %entry
  %5 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s1 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %5, i32 0, i32 1
  %6 = load %struct.fps_t*, %struct.fps_t** %s1, align 4
  %7 = load i32, i32* %n.addr, align 4
  %call = call double @term(%struct.fps_t* %6, i32 %7)
  %8 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s2 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %8, i32 0, i32 2
  %9 = load %struct.fps_t*, %struct.fps_t** %s2, align 8
  %10 = load i32, i32* %n.addr, align 4
  %call2 = call double @term(%struct.fps_t* %9, i32 %10)
  %add = fadd double %call, %call2
  store double %add, double* %ret, align 8
  br label %sw.epilog

sw.bb3:                                           ; preds = %entry
  %11 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s14 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %11, i32 0, i32 1
  %12 = load %struct.fps_t*, %struct.fps_t** %s14, align 4
  %13 = load i32, i32* %n.addr, align 4
  %call5 = call double @term(%struct.fps_t* %12, i32 %13)
  %14 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s26 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %14, i32 0, i32 2
  %15 = load %struct.fps_t*, %struct.fps_t** %s26, align 8
  %16 = load i32, i32* %n.addr, align 4
  %call7 = call double @term(%struct.fps_t* %15, i32 %16)
  %sub = fsub double %call5, %call7
  store double %sub, double* %ret, align 8
  br label %sw.epilog

sw.bb8:                                           ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %sw.bb8
  %17 = load i32, i32* %i, align 4
  %18 = load i32, i32* %n.addr, align 4
  %cmp9 = icmp sle i32 %17, %18
  br i1 %cmp9, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %19 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s110 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %19, i32 0, i32 1
  %20 = load %struct.fps_t*, %struct.fps_t** %s110, align 4
  %21 = load i32, i32* %i, align 4
  %call11 = call double @term(%struct.fps_t* %20, i32 %21)
  %22 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s212 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %22, i32 0, i32 2
  %23 = load %struct.fps_t*, %struct.fps_t** %s212, align 8
  %24 = load i32, i32* %n.addr, align 4
  %25 = load i32, i32* %i, align 4
  %sub13 = sub nsw i32 %24, %25
  %call14 = call double @term(%struct.fps_t* %23, i32 %sub13)
  %mul = fmul double %call11, %call14
  %26 = load double, double* %ret, align 8
  %add15 = fadd double %26, %mul
  store double %add15, double* %ret, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %27 = load i32, i32* %i, align 4
  %inc = add nsw i32 %27, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %sw.epilog

sw.bb16:                                          ; preds = %entry
  %28 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s217 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %28, i32 0, i32 2
  %29 = load %struct.fps_t*, %struct.fps_t** %s217, align 8
  %call18 = call double @term(%struct.fps_t* %29, i32 0)
  %tobool = fcmp une double %call18, 0.000000e+00
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %sw.bb16
  store double 0x7FF8000000000000, double* %retval, align 8
  br label %return

if.end:                                           ; preds = %sw.bb16
  %30 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s119 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %30, i32 0, i32 1
  %31 = load %struct.fps_t*, %struct.fps_t** %s119, align 4
  %32 = load i32, i32* %n.addr, align 4
  %call20 = call double @term(%struct.fps_t* %31, i32 %32)
  store double %call20, double* %ret, align 8
  store i32 1, i32* %i, align 4
  br label %for.cond21

for.cond21:                                       ; preds = %for.inc32, %if.end
  %33 = load i32, i32* %i, align 4
  %34 = load i32, i32* %n.addr, align 4
  %cmp22 = icmp sle i32 %33, %34
  br i1 %cmp22, label %for.body23, label %for.end34

for.body23:                                       ; preds = %for.cond21
  %35 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s224 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %35, i32 0, i32 2
  %36 = load %struct.fps_t*, %struct.fps_t** %s224, align 8
  %37 = load i32, i32* %i, align 4
  %call25 = call double @term(%struct.fps_t* %36, i32 %37)
  %38 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %39 = load i32, i32* %n.addr, align 4
  %40 = load i32, i32* %i, align 4
  %sub26 = sub nsw i32 %39, %40
  %call27 = call double @term(%struct.fps_t* %38, i32 %sub26)
  %mul28 = fmul double %call25, %call27
  %41 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s229 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %41, i32 0, i32 2
  %42 = load %struct.fps_t*, %struct.fps_t** %s229, align 8
  %call30 = call double @term(%struct.fps_t* %42, i32 0)
  %div = fdiv double %mul28, %call30
  %43 = load double, double* %ret, align 8
  %sub31 = fsub double %43, %div
  store double %sub31, double* %ret, align 8
  br label %for.inc32

for.inc32:                                        ; preds = %for.body23
  %44 = load i32, i32* %i, align 4
  %inc33 = add nsw i32 %44, 1
  store i32 %inc33, i32* %i, align 4
  br label %for.cond21

for.end34:                                        ; preds = %for.cond21
  br label %sw.epilog

sw.bb35:                                          ; preds = %entry
  %45 = load i32, i32* %n.addr, align 4
  %conv = sitofp i32 %45 to double
  %46 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s136 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %46, i32 0, i32 1
  %47 = load %struct.fps_t*, %struct.fps_t** %s136, align 4
  %48 = load i32, i32* %n.addr, align 4
  %add37 = add nsw i32 %48, 1
  %call38 = call double @term(%struct.fps_t* %47, i32 %add37)
  %mul39 = fmul double %conv, %call38
  store double %mul39, double* %ret, align 8
  br label %sw.epilog

sw.bb40:                                          ; preds = %entry
  %49 = load i32, i32* %n.addr, align 4
  %tobool41 = icmp ne i32 %49, 0
  br i1 %tobool41, label %if.end44, label %if.then42

if.then42:                                        ; preds = %sw.bb40
  %50 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %a043 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %50, i32 0, i32 3
  %51 = load double, double* %a043, align 8
  store double %51, double* %retval, align 8
  br label %return

if.end44:                                         ; preds = %sw.bb40
  %52 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s145 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %52, i32 0, i32 1
  %53 = load %struct.fps_t*, %struct.fps_t** %s145, align 4
  %54 = load i32, i32* %n.addr, align 4
  %sub46 = sub nsw i32 %54, 1
  %call47 = call double @term(%struct.fps_t* %53, i32 %sub46)
  %55 = load i32, i32* %n.addr, align 4
  %conv48 = sitofp i32 %55 to double
  %div49 = fdiv double %call47, %conv48
  store double %div49, double* %ret, align 8
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  %56 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %57 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %type50 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %57, i32 0, i32 0
  %58 = load i32, i32* %type50, align 8
  %call51 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %56, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i32 0, i32 0), i32 %58)
  call void @exit(i32 1) #3
  unreachable

sw.epilog:                                        ; preds = %if.end44, %sw.bb35, %for.end34, %for.end, %sw.bb3, %sw.bb1
  %59 = load double, double* %ret, align 8
  store double %59, double* %retval, align 8
  br label %return

return:                                           ; preds = %sw.epilog, %if.then42, %if.then, %cond.end
  %60 = load double, double* %retval, align 8
  ret double %60
}

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #1

; Function Attrs: noreturn
declare void @exit(i32 %0) #2

; Function Attrs: noinline nounwind optnone
define hidden %struct.fps_t* @fps_const(double %a0) #0 {
entry:
  %a0.addr = alloca double, align 8
  %x = alloca %struct.fps_t*, align 4
  store double %a0, double* %a0.addr, align 8
  %call = call %struct.fps_t* @fps_new()
  store %struct.fps_t* %call, %struct.fps_t** %x, align 4
  %0 = load %struct.fps_t*, %struct.fps_t** %x, align 4
  %type = getelementptr inbounds %struct.fps_t, %struct.fps_t* %0, i32 0, i32 0
  store i32 0, i32* %type, align 8
  %1 = load double, double* %a0.addr, align 8
  %2 = load %struct.fps_t*, %struct.fps_t** %x, align 4
  %a01 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %2, i32 0, i32 3
  store double %1, double* %a01, align 8
  %3 = load %struct.fps_t*, %struct.fps_t** %x, align 4
  ret %struct.fps_t* %3
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %one = alloca %struct.fps_t*, align 4
  %fcos = alloca %struct.fps_t*, align 4
  %fsin = alloca %struct.fps_t*, align 4
  %ftan = alloca %struct.fps_t*, align 4
  %fexp = alloca %struct.fps_t*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.fps_t* @fps_const(double 1.000000e+00)
  store %struct.fps_t* %call, %struct.fps_t** %one, align 4
  %call1 = call %struct.fps_t* @fps_new()
  store %struct.fps_t* %call1, %struct.fps_t** %fcos, align 4
  %0 = load %struct.fps_t*, %struct.fps_t** %fcos, align 4
  %call2 = call %struct.fps_t* @_unary(%struct.fps_t* %0, i32 6)
  store %struct.fps_t* %call2, %struct.fps_t** %fsin, align 4
  %1 = load %struct.fps_t*, %struct.fps_t** %fsin, align 4
  %2 = load %struct.fps_t*, %struct.fps_t** %fcos, align 4
  %call3 = call %struct.fps_t* @_binary(%struct.fps_t* %1, %struct.fps_t* %2, i32 4)
  store %struct.fps_t* %call3, %struct.fps_t** %ftan, align 4
  %3 = load %struct.fps_t*, %struct.fps_t** %fcos, align 4
  %4 = load %struct.fps_t*, %struct.fps_t** %one, align 4
  %5 = load %struct.fps_t*, %struct.fps_t** %fsin, align 4
  %call4 = call %struct.fps_t* @_unary(%struct.fps_t* %5, i32 6)
  call void @fps_redefine(%struct.fps_t* %3, i32 2, %struct.fps_t* %4, %struct.fps_t* %call4)
  %call5 = call %struct.fps_t* @fps_const(double 1.000000e+00)
  store %struct.fps_t* %call5, %struct.fps_t** %fexp, align 4
  %6 = load %struct.fps_t*, %struct.fps_t** %fexp, align 4
  %7 = load %struct.fps_t*, %struct.fps_t** %fexp, align 4
  call void @fps_redefine(%struct.fps_t* %6, i32 6, %struct.fps_t* %7, %struct.fps_t* null)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %8 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %8, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load %struct.fps_t*, %struct.fps_t** %fsin, align 4
  %10 = load i32, i32* %i, align 4
  %call7 = call double @term(%struct.fps_t* %9, i32 %10)
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), double %call7)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc15, %for.end
  %12 = load i32, i32* %i, align 4
  %cmp11 = icmp slt i32 %12, 10
  br i1 %cmp11, label %for.body12, label %for.end17

for.body12:                                       ; preds = %for.cond10
  %13 = load %struct.fps_t*, %struct.fps_t** %fcos, align 4
  %14 = load i32, i32* %i, align 4
  %call13 = call double @term(%struct.fps_t* %13, i32 %14)
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), double %call13)
  br label %for.inc15

for.inc15:                                        ; preds = %for.body12
  %15 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %15, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond10

for.end17:                                        ; preds = %for.cond10
  %call18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond19

for.cond19:                                       ; preds = %for.inc24, %for.end17
  %16 = load i32, i32* %i, align 4
  %cmp20 = icmp slt i32 %16, 10
  br i1 %cmp20, label %for.body21, label %for.end26

for.body21:                                       ; preds = %for.cond19
  %17 = load %struct.fps_t*, %struct.fps_t** %ftan, align 4
  %18 = load i32, i32* %i, align 4
  %call22 = call double @term(%struct.fps_t* %17, i32 %18)
  %call23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), double %call22)
  br label %for.inc24

for.inc24:                                        ; preds = %for.body21
  %19 = load i32, i32* %i, align 4
  %inc25 = add nsw i32 %19, 1
  store i32 %inc25, i32* %i, align 4
  br label %for.cond19

for.end26:                                        ; preds = %for.cond19
  %call27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond28

for.cond28:                                       ; preds = %for.inc33, %for.end26
  %20 = load i32, i32* %i, align 4
  %cmp29 = icmp slt i32 %20, 10
  br i1 %cmp29, label %for.body30, label %for.end35

for.body30:                                       ; preds = %for.cond28
  %21 = load %struct.fps_t*, %struct.fps_t** %fexp, align 4
  %22 = load i32, i32* %i, align 4
  %call31 = call double @term(%struct.fps_t* %21, i32 %22)
  %call32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), double %call31)
  br label %for.inc33

for.inc33:                                        ; preds = %for.body30
  %23 = load i32, i32* %i, align 4
  %inc34 = add nsw i32 %23, 1
  store i32 %inc34, i32* %i, align 4
  br label %for.cond28

for.end35:                                        ; preds = %for.cond28
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for fps_new()

; entering Souper's runOnFunction() for fps_redefine()

; ModuleID = './Formal_power_series.c.bc'
source_filename = "./Formal_power_series.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque
%struct.fps_t = type { i32, %struct.fps_t*, %struct.fps_t*, double }

@stderr = external constant %struct._IO_FILE*, align 4
@.str = private unnamed_addr constant [21 x i8] c"Unknown operator %d\0A\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"Sin:\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c" %g\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"\0ACos:\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"\0ATan:\00", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c"\0AExp:\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.fps_t* @fps_new() #0 {
entry:
  %x = alloca %struct.fps_t*, align 4
  %call = call noalias i8* @malloc(i32 24)
  %0 = bitcast i8* %call to %struct.fps_t*
  store %struct.fps_t* %0, %struct.fps_t** %x, align 4
  %1 = load %struct.fps_t*, %struct.fps_t** %x, align 4
  %a0 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %1, i32 0, i32 3
  store double 0.000000e+00, double* %a0, align 8
  %2 = load %struct.fps_t*, %struct.fps_t** %x, align 4
  %s2 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %2, i32 0, i32 2
  store %struct.fps_t* null, %struct.fps_t** %s2, align 8
  %3 = load %struct.fps_t*, %struct.fps_t** %x, align 4
  %s1 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %3, i32 0, i32 1
  store %struct.fps_t* null, %struct.fps_t** %s1, align 4
  %4 = load %struct.fps_t*, %struct.fps_t** %x, align 4
  %type = getelementptr inbounds %struct.fps_t, %struct.fps_t* %4, i32 0, i32 0
  store i32 0, i32* %type, align 8
  %5 = load %struct.fps_t*, %struct.fps_t** %x, align 4
  ret %struct.fps_t* %5
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @fps_redefine(%struct.fps_t* %x, i32 %op, %struct.fps_t* %y, %struct.fps_t* %z) #0 {
entry:
  %x.addr = alloca %struct.fps_t*, align 4
  %op.addr = alloca i32, align 4
  %y.addr = alloca %struct.fps_t*, align 4
  %z.addr = alloca %struct.fps_t*, align 4
  store %struct.fps_t* %x, %struct.fps_t** %x.addr, align 4
  store i32 %op, i32* %op.addr, align 4
  store %struct.fps_t* %y, %struct.fps_t** %y.addr, align 4
  store %struct.fps_t* %z, %struct.fps_t** %z.addr, align 4
  %0 = load i32, i32* %op.addr, align 4
  %1 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %type = getelementptr inbounds %struct.fps_t, %struct.fps_t* %1, i32 0, i32 0
  store i32 %0, i32* %type, align 8
  %2 = load %struct.fps_t*, %struct.fps_t** %y.addr, align 4
  %3 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s1 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %3, i32 0, i32 1
  store %struct.fps_t* %2, %struct.fps_t** %s1, align 4
  %4 = load %struct.fps_t*, %struct.fps_t** %z.addr, align 4
  %5 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s2 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %5, i32 0, i32 2
  store %struct.fps_t* %4, %struct.fps_t** %s2, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.fps_t* @_binary(%struct.fps_t* %x, %struct.fps_t* %y, i32 %op) #0 {
entry:
  %x.addr = alloca %struct.fps_t*, align 4
  %y.addr = alloca %struct.fps_t*, align 4
  %op.addr = alloca i32, align 4
  %s = alloca %struct.fps_t*, align 4
  store %struct.fps_t* %x, %struct.fps_t** %x.addr, align 4
  store %struct.fps_t* %y, %struct.fps_t** %y.addr, align 4
  store i32 %op, i32* %op.addr, align 4
  %call = call %struct.fps_t* @fps_new()
  store %struct.fps_t* %call, %struct.fps_t** %s, align 4
  %0 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %1 = load %struct.fps_t*, %struct.fps_t** %s, align 4
  %s1 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %1, i32 0, i32 1
  store %struct.fps_t* %0, %struct.fps_t** %s1, align 4
  %2 = load %struct.fps_t*, %struct.fps_t** %y.addr, align 4
  %3 = load %struct.fps_t*, %struct.fps_t** %s, align 4
  %s2 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %3, i32 0, i32 2
  store %struct.fps_t* %2, %struct.fps_t** %s2, align 8
  %4 = load i32, i32* %op.addr, align 4
  %5 = load %struct.fps_t*, %struct.fps_t** %s, align 4
  %type = getelementptr inbounds %struct.fps_t, %struct.fps_t* %5, i32 0, i32 0
  store i32 %4, i32* %type, align 8
  %6 = load %struct.fps_t*, %struct.fps_t** %s, align 4
  ret %struct.fps_t* %6
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.fps_t* @_unary(%struct.fps_t* %x, i32 %op) #0 {
entry:
  %x.addr = alloca %struct.fps_t*, align 4
  %op.addr = alloca i32, align 4
  %s = alloca %struct.fps_t*, align 4
  store %struct.fps_t* %x, %struct.fps_t** %x.addr, align 4
  store i32 %op, i32* %op.addr, align 4
  %call = call %struct.fps_t* @fps_new()
  store %struct.fps_t* %call, %struct.fps_t** %s, align 4
  %0 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %1 = load %struct.fps_t*, %struct.fps_t** %s, align 4
  %s1 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %1, i32 0, i32 1
  store %struct.fps_t* %0, %struct.fps_t** %s1, align 4
  %2 = load i32, i32* %op.addr, align 4
  %3 = load %struct.fps_t*, %struct.fps_t** %s, align 4
  %type = getelementptr inbounds %struct.fps_t, %struct.fps_t* %3, i32 0, i32 0
  store i32 %2, i32* %type, align 8
  %4 = load %struct.fps_t*, %struct.fps_t** %s, align 4
  ret %struct.fps_t* %4
}

; Function Attrs: noinline nounwind optnone
define hidden double @term(%struct.fps_t* %x, i32 %n) #0 {
entry:
  %retval = alloca double, align 8
  %x.addr = alloca %struct.fps_t*, align 4
  %n.addr = alloca i32, align 4
  %ret = alloca double, align 8
  %i = alloca i32, align 4
  store %struct.fps_t* %x, %struct.fps_t** %x.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store double 0.000000e+00, double* %ret, align 8
  %0 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %type = getelementptr inbounds %struct.fps_t, %struct.fps_t* %0, i32 0, i32 0
  %1 = load i32, i32* %type, align 8
  switch i32 %1, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
    i32 2, label %sw.bb3
    i32 3, label %sw.bb8
    i32 4, label %sw.bb16
    i32 5, label %sw.bb35
    i32 6, label %sw.bb40
  ]

sw.bb:                                            ; preds = %entry
  %2 = load i32, i32* %n.addr, align 4
  %cmp = icmp sgt i32 %2, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %sw.bb
  br label %cond.end

cond.false:                                       ; preds = %sw.bb
  %3 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %a0 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %3, i32 0, i32 3
  %4 = load double, double* %a0, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ 0.000000e+00, %cond.true ], [ %4, %cond.false ]
  store double %cond, double* %retval, align 8
  br label %return

sw.bb1:                                           ; preds = %entry
  %5 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s1 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %5, i32 0, i32 1
  %6 = load %struct.fps_t*, %struct.fps_t** %s1, align 4
  %7 = load i32, i32* %n.addr, align 4
  %call = call double @term(%struct.fps_t* %6, i32 %7)
  %8 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s2 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %8, i32 0, i32 2
  %9 = load %struct.fps_t*, %struct.fps_t** %s2, align 8
  %10 = load i32, i32* %n.addr, align 4
  %call2 = call double @term(%struct.fps_t* %9, i32 %10)
  %add = fadd double %call, %call2
  store double %add, double* %ret, align 8
  br label %sw.epilog

sw.bb3:                                           ; preds = %entry
  %11 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s14 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %11, i32 0, i32 1
  %12 = load %struct.fps_t*, %struct.fps_t** %s14, align 4
  %13 = load i32, i32* %n.addr, align 4
  %call5 = call double @term(%struct.fps_t* %12, i32 %13)
  %14 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s26 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %14, i32 0, i32 2
  %15 = load %struct.fps_t*, %struct.fps_t** %s26, align 8
  %16 = load i32, i32* %n.addr, align 4
  %call7 = call double @term(%struct.fps_t* %15, i32 %16)
  %sub = fsub double %call5, %call7
  store double %sub, double* %ret, align 8
  br label %sw.epilog

sw.bb8:                                           ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %sw.bb8
  %17 = load i32, i32* %i, align 4
  %18 = load i32, i32* %n.addr, align 4
  %cmp9 = icmp sle i32 %17, %18
  br i1 %cmp9, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %19 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s110 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %19, i32 0, i32 1
  %20 = load %struct.fps_t*, %struct.fps_t** %s110, align 4
  %21 = load i32, i32* %i, align 4
  %call11 = call double @term(%struct.fps_t* %20, i32 %21)
  %22 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s212 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %22, i32 0, i32 2
  %23 = load %struct.fps_t*, %struct.fps_t** %s212, align 8
  %24 = load i32, i32* %n.addr, align 4
  %25 = load i32, i32* %i, align 4
  %sub13 = sub nsw i32 %24, %25
  %call14 = call double @term(%struct.fps_t* %23, i32 %sub13)
  %mul = fmul double %call11, %call14
  %26 = load double, double* %ret, align 8
  %add15 = fadd double %26, %mul
  store double %add15, double* %ret, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %27 = load i32, i32* %i, align 4
  %inc = add nsw i32 %27, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %sw.epilog

sw.bb16:                                          ; preds = %entry
  %28 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s217 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %28, i32 0, i32 2
  %29 = load %struct.fps_t*, %struct.fps_t** %s217, align 8
  %call18 = call double @term(%struct.fps_t* %29, i32 0)
  %tobool = fcmp une double %call18, 0.000000e+00
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %sw.bb16
  store double 0x7FF8000000000000, double* %retval, align 8
  br label %return

if.end:                                           ; preds = %sw.bb16
  %30 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s119 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %30, i32 0, i32 1
  %31 = load %struct.fps_t*, %struct.fps_t** %s119, align 4
  %32 = load i32, i32* %n.addr, align 4
  %call20 = call double @term(%struct.fps_t* %31, i32 %32)
  store double %call20, double* %ret, align 8
  store i32 1, i32* %i, align 4
  br label %for.cond21

for.cond21:                                       ; preds = %for.inc32, %if.end
  %33 = load i32, i32* %i, align 4
  %34 = load i32, i32* %n.addr, align 4
  %cmp22 = icmp sle i32 %33, %34
  br i1 %cmp22, label %for.body23, label %for.end34

for.body23:                                       ; preds = %for.cond21
  %35 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s224 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %35, i32 0, i32 2
  %36 = load %struct.fps_t*, %struct.fps_t** %s224, align 8
  %37 = load i32, i32* %i, align 4
  %call25 = call double @term(%struct.fps_t* %36, i32 %37)
  %38 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %39 = load i32, i32* %n.addr, align 4
  %40 = load i32, i32* %i, align 4
  %sub26 = sub nsw i32 %39, %40
  %call27 = call double @term(%struct.fps_t* %38, i32 %sub26)
  %mul28 = fmul double %call25, %call27
  %41 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s229 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %41, i32 0, i32 2
  %42 = load %struct.fps_t*, %struct.fps_t** %s229, align 8
  %call30 = call double @term(%struct.fps_t* %42, i32 0)
  %div = fdiv double %mul28, %call30
  %43 = load double, double* %ret, align 8
  %sub31 = fsub double %43, %div
  store double %sub31, double* %ret, align 8
  br label %for.inc32

for.inc32:                                        ; preds = %for.body23
  %44 = load i32, i32* %i, align 4
  %inc33 = add nsw i32 %44, 1
  store i32 %inc33, i32* %i, align 4
  br label %for.cond21

for.end34:                                        ; preds = %for.cond21
  br label %sw.epilog

sw.bb35:                                          ; preds = %entry
  %45 = load i32, i32* %n.addr, align 4
  %conv = sitofp i32 %45 to double
  %46 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s136 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %46, i32 0, i32 1
  %47 = load %struct.fps_t*, %struct.fps_t** %s136, align 4
  %48 = load i32, i32* %n.addr, align 4
  %add37 = add nsw i32 %48, 1
  %call38 = call double @term(%struct.fps_t* %47, i32 %add37)
  %mul39 = fmul double %conv, %call38
  store double %mul39, double* %ret, align 8
  br label %sw.epilog

sw.bb40:                                          ; preds = %entry
  %49 = load i32, i32* %n.addr, align 4
  %tobool41 = icmp ne i32 %49, 0
  br i1 %tobool41, label %if.end44, label %if.then42

if.then42:                                        ; preds = %sw.bb40
  %50 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %a043 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %50, i32 0, i32 3
  %51 = load double, double* %a043, align 8
  store double %51, double* %retval, align 8
  br label %return

if.end44:                                         ; preds = %sw.bb40
  %52 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s145 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %52, i32 0, i32 1
  %53 = load %struct.fps_t*, %struct.fps_t** %s145, align 4
  %54 = load i32, i32* %n.addr, align 4
  %sub46 = sub nsw i32 %54, 1
  %call47 = call double @term(%struct.fps_t* %53, i32 %sub46)
  %55 = load i32, i32* %n.addr, align 4
  %conv48 = sitofp i32 %55 to double
  %div49 = fdiv double %call47, %conv48
  store double %div49, double* %ret, align 8
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  %56 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %57 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %type50 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %57, i32 0, i32 0
  %58 = load i32, i32* %type50, align 8
  %call51 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %56, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i32 0, i32 0), i32 %58)
  call void @exit(i32 1) #3
  unreachable

sw.epilog:                                        ; preds = %if.end44, %sw.bb35, %for.end34, %for.end, %sw.bb3, %sw.bb1
  %59 = load double, double* %ret, align 8
  store double %59, double* %retval, align 8
  br label %return

return:                                           ; preds = %sw.epilog, %if.then42, %if.then, %cond.end
  %60 = load double, double* %retval, align 8
  ret double %60
}

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #1

; Function Attrs: noreturn
declare void @exit(i32 %0) #2

; Function Attrs: noinline nounwind optnone
define hidden %struct.fps_t* @fps_const(double %a0) #0 {
entry:
  %a0.addr = alloca double, align 8
  %x = alloca %struct.fps_t*, align 4
  store double %a0, double* %a0.addr, align 8
  %call = call %struct.fps_t* @fps_new()
  store %struct.fps_t* %call, %struct.fps_t** %x, align 4
  %0 = load %struct.fps_t*, %struct.fps_t** %x, align 4
  %type = getelementptr inbounds %struct.fps_t, %struct.fps_t* %0, i32 0, i32 0
  store i32 0, i32* %type, align 8
  %1 = load double, double* %a0.addr, align 8
  %2 = load %struct.fps_t*, %struct.fps_t** %x, align 4
  %a01 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %2, i32 0, i32 3
  store double %1, double* %a01, align 8
  %3 = load %struct.fps_t*, %struct.fps_t** %x, align 4
  ret %struct.fps_t* %3
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %one = alloca %struct.fps_t*, align 4
  %fcos = alloca %struct.fps_t*, align 4
  %fsin = alloca %struct.fps_t*, align 4
  %ftan = alloca %struct.fps_t*, align 4
  %fexp = alloca %struct.fps_t*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.fps_t* @fps_const(double 1.000000e+00)
  store %struct.fps_t* %call, %struct.fps_t** %one, align 4
  %call1 = call %struct.fps_t* @fps_new()
  store %struct.fps_t* %call1, %struct.fps_t** %fcos, align 4
  %0 = load %struct.fps_t*, %struct.fps_t** %fcos, align 4
  %call2 = call %struct.fps_t* @_unary(%struct.fps_t* %0, i32 6)
  store %struct.fps_t* %call2, %struct.fps_t** %fsin, align 4
  %1 = load %struct.fps_t*, %struct.fps_t** %fsin, align 4
  %2 = load %struct.fps_t*, %struct.fps_t** %fcos, align 4
  %call3 = call %struct.fps_t* @_binary(%struct.fps_t* %1, %struct.fps_t* %2, i32 4)
  store %struct.fps_t* %call3, %struct.fps_t** %ftan, align 4
  %3 = load %struct.fps_t*, %struct.fps_t** %fcos, align 4
  %4 = load %struct.fps_t*, %struct.fps_t** %one, align 4
  %5 = load %struct.fps_t*, %struct.fps_t** %fsin, align 4
  %call4 = call %struct.fps_t* @_unary(%struct.fps_t* %5, i32 6)
  call void @fps_redefine(%struct.fps_t* %3, i32 2, %struct.fps_t* %4, %struct.fps_t* %call4)
  %call5 = call %struct.fps_t* @fps_const(double 1.000000e+00)
  store %struct.fps_t* %call5, %struct.fps_t** %fexp, align 4
  %6 = load %struct.fps_t*, %struct.fps_t** %fexp, align 4
  %7 = load %struct.fps_t*, %struct.fps_t** %fexp, align 4
  call void @fps_redefine(%struct.fps_t* %6, i32 6, %struct.fps_t* %7, %struct.fps_t* null)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %8 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %8, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load %struct.fps_t*, %struct.fps_t** %fsin, align 4
  %10 = load i32, i32* %i, align 4
  %call7 = call double @term(%struct.fps_t* %9, i32 %10)
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), double %call7)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc15, %for.end
  %12 = load i32, i32* %i, align 4
  %cmp11 = icmp slt i32 %12, 10
  br i1 %cmp11, label %for.body12, label %for.end17

for.body12:                                       ; preds = %for.cond10
  %13 = load %struct.fps_t*, %struct.fps_t** %fcos, align 4
  %14 = load i32, i32* %i, align 4
  %call13 = call double @term(%struct.fps_t* %13, i32 %14)
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), double %call13)
  br label %for.inc15

for.inc15:                                        ; preds = %for.body12
  %15 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %15, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond10

for.end17:                                        ; preds = %for.cond10
  %call18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond19

for.cond19:                                       ; preds = %for.inc24, %for.end17
  %16 = load i32, i32* %i, align 4
  %cmp20 = icmp slt i32 %16, 10
  br i1 %cmp20, label %for.body21, label %for.end26

for.body21:                                       ; preds = %for.cond19
  %17 = load %struct.fps_t*, %struct.fps_t** %ftan, align 4
  %18 = load i32, i32* %i, align 4
  %call22 = call double @term(%struct.fps_t* %17, i32 %18)
  %call23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), double %call22)
  br label %for.inc24

for.inc24:                                        ; preds = %for.body21
  %19 = load i32, i32* %i, align 4
  %inc25 = add nsw i32 %19, 1
  store i32 %inc25, i32* %i, align 4
  br label %for.cond19

for.end26:                                        ; preds = %for.cond19
  %call27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond28

for.cond28:                                       ; preds = %for.inc33, %for.end26
  %20 = load i32, i32* %i, align 4
  %cmp29 = icmp slt i32 %20, 10
  br i1 %cmp29, label %for.body30, label %for.end35

for.body30:                                       ; preds = %for.cond28
  %21 = load %struct.fps_t*, %struct.fps_t** %fexp, align 4
  %22 = load i32, i32* %i, align 4
  %call31 = call double @term(%struct.fps_t* %21, i32 %22)
  %call32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), double %call31)
  br label %for.inc33

for.inc33:                                        ; preds = %for.body30
  %23 = load i32, i32* %i, align 4
  %inc34 = add nsw i32 %23, 1
  store i32 %inc34, i32* %i, align 4
  br label %for.cond28

for.end35:                                        ; preds = %for.cond28
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %op.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for fps_redefine()

; entering Souper's runOnFunction() for _binary()

; ModuleID = './Formal_power_series.c.bc'
source_filename = "./Formal_power_series.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque
%struct.fps_t = type { i32, %struct.fps_t*, %struct.fps_t*, double }

@stderr = external constant %struct._IO_FILE*, align 4
@.str = private unnamed_addr constant [21 x i8] c"Unknown operator %d\0A\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"Sin:\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c" %g\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"\0ACos:\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"\0ATan:\00", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c"\0AExp:\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.fps_t* @fps_new() #0 {
entry:
  %x = alloca %struct.fps_t*, align 4
  %call = call noalias i8* @malloc(i32 24)
  %0 = bitcast i8* %call to %struct.fps_t*
  store %struct.fps_t* %0, %struct.fps_t** %x, align 4
  %1 = load %struct.fps_t*, %struct.fps_t** %x, align 4
  %a0 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %1, i32 0, i32 3
  store double 0.000000e+00, double* %a0, align 8
  %2 = load %struct.fps_t*, %struct.fps_t** %x, align 4
  %s2 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %2, i32 0, i32 2
  store %struct.fps_t* null, %struct.fps_t** %s2, align 8
  %3 = load %struct.fps_t*, %struct.fps_t** %x, align 4
  %s1 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %3, i32 0, i32 1
  store %struct.fps_t* null, %struct.fps_t** %s1, align 4
  %4 = load %struct.fps_t*, %struct.fps_t** %x, align 4
  %type = getelementptr inbounds %struct.fps_t, %struct.fps_t* %4, i32 0, i32 0
  store i32 0, i32* %type, align 8
  %5 = load %struct.fps_t*, %struct.fps_t** %x, align 4
  ret %struct.fps_t* %5
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @fps_redefine(%struct.fps_t* %x, i32 %op, %struct.fps_t* %y, %struct.fps_t* %z) #0 {
entry:
  %x.addr = alloca %struct.fps_t*, align 4
  %op.addr = alloca i32, align 4
  %y.addr = alloca %struct.fps_t*, align 4
  %z.addr = alloca %struct.fps_t*, align 4
  store %struct.fps_t* %x, %struct.fps_t** %x.addr, align 4
  store i32 %op, i32* %op.addr, align 4
  store %struct.fps_t* %y, %struct.fps_t** %y.addr, align 4
  store %struct.fps_t* %z, %struct.fps_t** %z.addr, align 4
  %0 = load i32, i32* %op.addr, align 4
  %1 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %type = getelementptr inbounds %struct.fps_t, %struct.fps_t* %1, i32 0, i32 0
  store i32 %0, i32* %type, align 8
  %2 = load %struct.fps_t*, %struct.fps_t** %y.addr, align 4
  %3 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s1 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %3, i32 0, i32 1
  store %struct.fps_t* %2, %struct.fps_t** %s1, align 4
  %4 = load %struct.fps_t*, %struct.fps_t** %z.addr, align 4
  %5 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s2 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %5, i32 0, i32 2
  store %struct.fps_t* %4, %struct.fps_t** %s2, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.fps_t* @_binary(%struct.fps_t* %x, %struct.fps_t* %y, i32 %op) #0 {
entry:
  %x.addr = alloca %struct.fps_t*, align 4
  %y.addr = alloca %struct.fps_t*, align 4
  %op.addr = alloca i32, align 4
  %s = alloca %struct.fps_t*, align 4
  store %struct.fps_t* %x, %struct.fps_t** %x.addr, align 4
  store %struct.fps_t* %y, %struct.fps_t** %y.addr, align 4
  store i32 %op, i32* %op.addr, align 4
  %call = call %struct.fps_t* @fps_new()
  store %struct.fps_t* %call, %struct.fps_t** %s, align 4
  %0 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %1 = load %struct.fps_t*, %struct.fps_t** %s, align 4
  %s1 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %1, i32 0, i32 1
  store %struct.fps_t* %0, %struct.fps_t** %s1, align 4
  %2 = load %struct.fps_t*, %struct.fps_t** %y.addr, align 4
  %3 = load %struct.fps_t*, %struct.fps_t** %s, align 4
  %s2 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %3, i32 0, i32 2
  store %struct.fps_t* %2, %struct.fps_t** %s2, align 8
  %4 = load i32, i32* %op.addr, align 4
  %5 = load %struct.fps_t*, %struct.fps_t** %s, align 4
  %type = getelementptr inbounds %struct.fps_t, %struct.fps_t* %5, i32 0, i32 0
  store i32 %4, i32* %type, align 8
  %6 = load %struct.fps_t*, %struct.fps_t** %s, align 4
  ret %struct.fps_t* %6
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.fps_t* @_unary(%struct.fps_t* %x, i32 %op) #0 {
entry:
  %x.addr = alloca %struct.fps_t*, align 4
  %op.addr = alloca i32, align 4
  %s = alloca %struct.fps_t*, align 4
  store %struct.fps_t* %x, %struct.fps_t** %x.addr, align 4
  store i32 %op, i32* %op.addr, align 4
  %call = call %struct.fps_t* @fps_new()
  store %struct.fps_t* %call, %struct.fps_t** %s, align 4
  %0 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %1 = load %struct.fps_t*, %struct.fps_t** %s, align 4
  %s1 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %1, i32 0, i32 1
  store %struct.fps_t* %0, %struct.fps_t** %s1, align 4
  %2 = load i32, i32* %op.addr, align 4
  %3 = load %struct.fps_t*, %struct.fps_t** %s, align 4
  %type = getelementptr inbounds %struct.fps_t, %struct.fps_t* %3, i32 0, i32 0
  store i32 %2, i32* %type, align 8
  %4 = load %struct.fps_t*, %struct.fps_t** %s, align 4
  ret %struct.fps_t* %4
}

; Function Attrs: noinline nounwind optnone
define hidden double @term(%struct.fps_t* %x, i32 %n) #0 {
entry:
  %retval = alloca double, align 8
  %x.addr = alloca %struct.fps_t*, align 4
  %n.addr = alloca i32, align 4
  %ret = alloca double, align 8
  %i = alloca i32, align 4
  store %struct.fps_t* %x, %struct.fps_t** %x.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store double 0.000000e+00, double* %ret, align 8
  %0 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %type = getelementptr inbounds %struct.fps_t, %struct.fps_t* %0, i32 0, i32 0
  %1 = load i32, i32* %type, align 8
  switch i32 %1, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
    i32 2, label %sw.bb3
    i32 3, label %sw.bb8
    i32 4, label %sw.bb16
    i32 5, label %sw.bb35
    i32 6, label %sw.bb40
  ]

sw.bb:                                            ; preds = %entry
  %2 = load i32, i32* %n.addr, align 4
  %cmp = icmp sgt i32 %2, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %sw.bb
  br label %cond.end

cond.false:                                       ; preds = %sw.bb
  %3 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %a0 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %3, i32 0, i32 3
  %4 = load double, double* %a0, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ 0.000000e+00, %cond.true ], [ %4, %cond.false ]
  store double %cond, double* %retval, align 8
  br label %return

sw.bb1:                                           ; preds = %entry
  %5 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s1 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %5, i32 0, i32 1
  %6 = load %struct.fps_t*, %struct.fps_t** %s1, align 4
  %7 = load i32, i32* %n.addr, align 4
  %call = call double @term(%struct.fps_t* %6, i32 %7)
  %8 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s2 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %8, i32 0, i32 2
  %9 = load %struct.fps_t*, %struct.fps_t** %s2, align 8
  %10 = load i32, i32* %n.addr, align 4
  %call2 = call double @term(%struct.fps_t* %9, i32 %10)
  %add = fadd double %call, %call2
  store double %add, double* %ret, align 8
  br label %sw.epilog

sw.bb3:                                           ; preds = %entry
  %11 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s14 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %11, i32 0, i32 1
  %12 = load %struct.fps_t*, %struct.fps_t** %s14, align 4
  %13 = load i32, i32* %n.addr, align 4
  %call5 = call double @term(%struct.fps_t* %12, i32 %13)
  %14 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s26 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %14, i32 0, i32 2
  %15 = load %struct.fps_t*, %struct.fps_t** %s26, align 8
  %16 = load i32, i32* %n.addr, align 4
  %call7 = call double @term(%struct.fps_t* %15, i32 %16)
  %sub = fsub double %call5, %call7
  store double %sub, double* %ret, align 8
  br label %sw.epilog

sw.bb8:                                           ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %sw.bb8
  %17 = load i32, i32* %i, align 4
  %18 = load i32, i32* %n.addr, align 4
  %cmp9 = icmp sle i32 %17, %18
  br i1 %cmp9, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %19 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s110 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %19, i32 0, i32 1
  %20 = load %struct.fps_t*, %struct.fps_t** %s110, align 4
  %21 = load i32, i32* %i, align 4
  %call11 = call double @term(%struct.fps_t* %20, i32 %21)
  %22 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s212 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %22, i32 0, i32 2
  %23 = load %struct.fps_t*, %struct.fps_t** %s212, align 8
  %24 = load i32, i32* %n.addr, align 4
  %25 = load i32, i32* %i, align 4
  %sub13 = sub nsw i32 %24, %25
  %call14 = call double @term(%struct.fps_t* %23, i32 %sub13)
  %mul = fmul double %call11, %call14
  %26 = load double, double* %ret, align 8
  %add15 = fadd double %26, %mul
  store double %add15, double* %ret, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %27 = load i32, i32* %i, align 4
  %inc = add nsw i32 %27, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %sw.epilog

sw.bb16:                                          ; preds = %entry
  %28 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s217 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %28, i32 0, i32 2
  %29 = load %struct.fps_t*, %struct.fps_t** %s217, align 8
  %call18 = call double @term(%struct.fps_t* %29, i32 0)
  %tobool = fcmp une double %call18, 0.000000e+00
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %sw.bb16
  store double 0x7FF8000000000000, double* %retval, align 8
  br label %return

if.end:                                           ; preds = %sw.bb16
  %30 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s119 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %30, i32 0, i32 1
  %31 = load %struct.fps_t*, %struct.fps_t** %s119, align 4
  %32 = load i32, i32* %n.addr, align 4
  %call20 = call double @term(%struct.fps_t* %31, i32 %32)
  store double %call20, double* %ret, align 8
  store i32 1, i32* %i, align 4
  br label %for.cond21

for.cond21:                                       ; preds = %for.inc32, %if.end
  %33 = load i32, i32* %i, align 4
  %34 = load i32, i32* %n.addr, align 4
  %cmp22 = icmp sle i32 %33, %34
  br i1 %cmp22, label %for.body23, label %for.end34

for.body23:                                       ; preds = %for.cond21
  %35 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s224 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %35, i32 0, i32 2
  %36 = load %struct.fps_t*, %struct.fps_t** %s224, align 8
  %37 = load i32, i32* %i, align 4
  %call25 = call double @term(%struct.fps_t* %36, i32 %37)
  %38 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %39 = load i32, i32* %n.addr, align 4
  %40 = load i32, i32* %i, align 4
  %sub26 = sub nsw i32 %39, %40
  %call27 = call double @term(%struct.fps_t* %38, i32 %sub26)
  %mul28 = fmul double %call25, %call27
  %41 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s229 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %41, i32 0, i32 2
  %42 = load %struct.fps_t*, %struct.fps_t** %s229, align 8
  %call30 = call double @term(%struct.fps_t* %42, i32 0)
  %div = fdiv double %mul28, %call30
  %43 = load double, double* %ret, align 8
  %sub31 = fsub double %43, %div
  store double %sub31, double* %ret, align 8
  br label %for.inc32

for.inc32:                                        ; preds = %for.body23
  %44 = load i32, i32* %i, align 4
  %inc33 = add nsw i32 %44, 1
  store i32 %inc33, i32* %i, align 4
  br label %for.cond21

for.end34:                                        ; preds = %for.cond21
  br label %sw.epilog

sw.bb35:                                          ; preds = %entry
  %45 = load i32, i32* %n.addr, align 4
  %conv = sitofp i32 %45 to double
  %46 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s136 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %46, i32 0, i32 1
  %47 = load %struct.fps_t*, %struct.fps_t** %s136, align 4
  %48 = load i32, i32* %n.addr, align 4
  %add37 = add nsw i32 %48, 1
  %call38 = call double @term(%struct.fps_t* %47, i32 %add37)
  %mul39 = fmul double %conv, %call38
  store double %mul39, double* %ret, align 8
  br label %sw.epilog

sw.bb40:                                          ; preds = %entry
  %49 = load i32, i32* %n.addr, align 4
  %tobool41 = icmp ne i32 %49, 0
  br i1 %tobool41, label %if.end44, label %if.then42

if.then42:                                        ; preds = %sw.bb40
  %50 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %a043 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %50, i32 0, i32 3
  %51 = load double, double* %a043, align 8
  store double %51, double* %retval, align 8
  br label %return

if.end44:                                         ; preds = %sw.bb40
  %52 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s145 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %52, i32 0, i32 1
  %53 = load %struct.fps_t*, %struct.fps_t** %s145, align 4
  %54 = load i32, i32* %n.addr, align 4
  %sub46 = sub nsw i32 %54, 1
  %call47 = call double @term(%struct.fps_t* %53, i32 %sub46)
  %55 = load i32, i32* %n.addr, align 4
  %conv48 = sitofp i32 %55 to double
  %div49 = fdiv double %call47, %conv48
  store double %div49, double* %ret, align 8
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  %56 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %57 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %type50 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %57, i32 0, i32 0
  %58 = load i32, i32* %type50, align 8
  %call51 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %56, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i32 0, i32 0), i32 %58)
  call void @exit(i32 1) #3
  unreachable

sw.epilog:                                        ; preds = %if.end44, %sw.bb35, %for.end34, %for.end, %sw.bb3, %sw.bb1
  %59 = load double, double* %ret, align 8
  store double %59, double* %retval, align 8
  br label %return

return:                                           ; preds = %sw.epilog, %if.then42, %if.then, %cond.end
  %60 = load double, double* %retval, align 8
  ret double %60
}

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #1

; Function Attrs: noreturn
declare void @exit(i32 %0) #2

; Function Attrs: noinline nounwind optnone
define hidden %struct.fps_t* @fps_const(double %a0) #0 {
entry:
  %a0.addr = alloca double, align 8
  %x = alloca %struct.fps_t*, align 4
  store double %a0, double* %a0.addr, align 8
  %call = call %struct.fps_t* @fps_new()
  store %struct.fps_t* %call, %struct.fps_t** %x, align 4
  %0 = load %struct.fps_t*, %struct.fps_t** %x, align 4
  %type = getelementptr inbounds %struct.fps_t, %struct.fps_t* %0, i32 0, i32 0
  store i32 0, i32* %type, align 8
  %1 = load double, double* %a0.addr, align 8
  %2 = load %struct.fps_t*, %struct.fps_t** %x, align 4
  %a01 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %2, i32 0, i32 3
  store double %1, double* %a01, align 8
  %3 = load %struct.fps_t*, %struct.fps_t** %x, align 4
  ret %struct.fps_t* %3
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %one = alloca %struct.fps_t*, align 4
  %fcos = alloca %struct.fps_t*, align 4
  %fsin = alloca %struct.fps_t*, align 4
  %ftan = alloca %struct.fps_t*, align 4
  %fexp = alloca %struct.fps_t*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.fps_t* @fps_const(double 1.000000e+00)
  store %struct.fps_t* %call, %struct.fps_t** %one, align 4
  %call1 = call %struct.fps_t* @fps_new()
  store %struct.fps_t* %call1, %struct.fps_t** %fcos, align 4
  %0 = load %struct.fps_t*, %struct.fps_t** %fcos, align 4
  %call2 = call %struct.fps_t* @_unary(%struct.fps_t* %0, i32 6)
  store %struct.fps_t* %call2, %struct.fps_t** %fsin, align 4
  %1 = load %struct.fps_t*, %struct.fps_t** %fsin, align 4
  %2 = load %struct.fps_t*, %struct.fps_t** %fcos, align 4
  %call3 = call %struct.fps_t* @_binary(%struct.fps_t* %1, %struct.fps_t* %2, i32 4)
  store %struct.fps_t* %call3, %struct.fps_t** %ftan, align 4
  %3 = load %struct.fps_t*, %struct.fps_t** %fcos, align 4
  %4 = load %struct.fps_t*, %struct.fps_t** %one, align 4
  %5 = load %struct.fps_t*, %struct.fps_t** %fsin, align 4
  %call4 = call %struct.fps_t* @_unary(%struct.fps_t* %5, i32 6)
  call void @fps_redefine(%struct.fps_t* %3, i32 2, %struct.fps_t* %4, %struct.fps_t* %call4)
  %call5 = call %struct.fps_t* @fps_const(double 1.000000e+00)
  store %struct.fps_t* %call5, %struct.fps_t** %fexp, align 4
  %6 = load %struct.fps_t*, %struct.fps_t** %fexp, align 4
  %7 = load %struct.fps_t*, %struct.fps_t** %fexp, align 4
  call void @fps_redefine(%struct.fps_t* %6, i32 6, %struct.fps_t* %7, %struct.fps_t* null)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %8 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %8, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load %struct.fps_t*, %struct.fps_t** %fsin, align 4
  %10 = load i32, i32* %i, align 4
  %call7 = call double @term(%struct.fps_t* %9, i32 %10)
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), double %call7)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc15, %for.end
  %12 = load i32, i32* %i, align 4
  %cmp11 = icmp slt i32 %12, 10
  br i1 %cmp11, label %for.body12, label %for.end17

for.body12:                                       ; preds = %for.cond10
  %13 = load %struct.fps_t*, %struct.fps_t** %fcos, align 4
  %14 = load i32, i32* %i, align 4
  %call13 = call double @term(%struct.fps_t* %13, i32 %14)
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), double %call13)
  br label %for.inc15

for.inc15:                                        ; preds = %for.body12
  %15 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %15, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond10

for.end17:                                        ; preds = %for.cond10
  %call18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond19

for.cond19:                                       ; preds = %for.inc24, %for.end17
  %16 = load i32, i32* %i, align 4
  %cmp20 = icmp slt i32 %16, 10
  br i1 %cmp20, label %for.body21, label %for.end26

for.body21:                                       ; preds = %for.cond19
  %17 = load %struct.fps_t*, %struct.fps_t** %ftan, align 4
  %18 = load i32, i32* %i, align 4
  %call22 = call double @term(%struct.fps_t* %17, i32 %18)
  %call23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), double %call22)
  br label %for.inc24

for.inc24:                                        ; preds = %for.body21
  %19 = load i32, i32* %i, align 4
  %inc25 = add nsw i32 %19, 1
  store i32 %inc25, i32* %i, align 4
  br label %for.cond19

for.end26:                                        ; preds = %for.cond19
  %call27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond28

for.cond28:                                       ; preds = %for.inc33, %for.end26
  %20 = load i32, i32* %i, align 4
  %cmp29 = icmp slt i32 %20, 10
  br i1 %cmp29, label %for.body30, label %for.end35

for.body30:                                       ; preds = %for.cond28
  %21 = load %struct.fps_t*, %struct.fps_t** %fexp, align 4
  %22 = load i32, i32* %i, align 4
  %call31 = call double @term(%struct.fps_t* %21, i32 %22)
  %call32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), double %call31)
  br label %for.inc33

for.inc33:                                        ; preds = %for.body30
  %23 = load i32, i32* %i, align 4
  %inc34 = add nsw i32 %23, 1
  store i32 %inc34, i32* %i, align 4
  br label %for.cond28

for.end35:                                        ; preds = %for.cond28
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %op.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for _binary()

; entering Souper's runOnFunction() for _unary()

; ModuleID = './Formal_power_series.c.bc'
source_filename = "./Formal_power_series.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque
%struct.fps_t = type { i32, %struct.fps_t*, %struct.fps_t*, double }

@stderr = external constant %struct._IO_FILE*, align 4
@.str = private unnamed_addr constant [21 x i8] c"Unknown operator %d\0A\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"Sin:\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c" %g\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"\0ACos:\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"\0ATan:\00", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c"\0AExp:\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.fps_t* @fps_new() #0 {
entry:
  %x = alloca %struct.fps_t*, align 4
  %call = call noalias i8* @malloc(i32 24)
  %0 = bitcast i8* %call to %struct.fps_t*
  store %struct.fps_t* %0, %struct.fps_t** %x, align 4
  %1 = load %struct.fps_t*, %struct.fps_t** %x, align 4
  %a0 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %1, i32 0, i32 3
  store double 0.000000e+00, double* %a0, align 8
  %2 = load %struct.fps_t*, %struct.fps_t** %x, align 4
  %s2 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %2, i32 0, i32 2
  store %struct.fps_t* null, %struct.fps_t** %s2, align 8
  %3 = load %struct.fps_t*, %struct.fps_t** %x, align 4
  %s1 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %3, i32 0, i32 1
  store %struct.fps_t* null, %struct.fps_t** %s1, align 4
  %4 = load %struct.fps_t*, %struct.fps_t** %x, align 4
  %type = getelementptr inbounds %struct.fps_t, %struct.fps_t* %4, i32 0, i32 0
  store i32 0, i32* %type, align 8
  %5 = load %struct.fps_t*, %struct.fps_t** %x, align 4
  ret %struct.fps_t* %5
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @fps_redefine(%struct.fps_t* %x, i32 %op, %struct.fps_t* %y, %struct.fps_t* %z) #0 {
entry:
  %x.addr = alloca %struct.fps_t*, align 4
  %op.addr = alloca i32, align 4
  %y.addr = alloca %struct.fps_t*, align 4
  %z.addr = alloca %struct.fps_t*, align 4
  store %struct.fps_t* %x, %struct.fps_t** %x.addr, align 4
  store i32 %op, i32* %op.addr, align 4
  store %struct.fps_t* %y, %struct.fps_t** %y.addr, align 4
  store %struct.fps_t* %z, %struct.fps_t** %z.addr, align 4
  %0 = load i32, i32* %op.addr, align 4
  %1 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %type = getelementptr inbounds %struct.fps_t, %struct.fps_t* %1, i32 0, i32 0
  store i32 %0, i32* %type, align 8
  %2 = load %struct.fps_t*, %struct.fps_t** %y.addr, align 4
  %3 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s1 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %3, i32 0, i32 1
  store %struct.fps_t* %2, %struct.fps_t** %s1, align 4
  %4 = load %struct.fps_t*, %struct.fps_t** %z.addr, align 4
  %5 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s2 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %5, i32 0, i32 2
  store %struct.fps_t* %4, %struct.fps_t** %s2, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.fps_t* @_binary(%struct.fps_t* %x, %struct.fps_t* %y, i32 %op) #0 {
entry:
  %x.addr = alloca %struct.fps_t*, align 4
  %y.addr = alloca %struct.fps_t*, align 4
  %op.addr = alloca i32, align 4
  %s = alloca %struct.fps_t*, align 4
  store %struct.fps_t* %x, %struct.fps_t** %x.addr, align 4
  store %struct.fps_t* %y, %struct.fps_t** %y.addr, align 4
  store i32 %op, i32* %op.addr, align 4
  %call = call %struct.fps_t* @fps_new()
  store %struct.fps_t* %call, %struct.fps_t** %s, align 4
  %0 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %1 = load %struct.fps_t*, %struct.fps_t** %s, align 4
  %s1 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %1, i32 0, i32 1
  store %struct.fps_t* %0, %struct.fps_t** %s1, align 4
  %2 = load %struct.fps_t*, %struct.fps_t** %y.addr, align 4
  %3 = load %struct.fps_t*, %struct.fps_t** %s, align 4
  %s2 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %3, i32 0, i32 2
  store %struct.fps_t* %2, %struct.fps_t** %s2, align 8
  %4 = load i32, i32* %op.addr, align 4
  %5 = load %struct.fps_t*, %struct.fps_t** %s, align 4
  %type = getelementptr inbounds %struct.fps_t, %struct.fps_t* %5, i32 0, i32 0
  store i32 %4, i32* %type, align 8
  %6 = load %struct.fps_t*, %struct.fps_t** %s, align 4
  ret %struct.fps_t* %6
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.fps_t* @_unary(%struct.fps_t* %x, i32 %op) #0 {
entry:
  %x.addr = alloca %struct.fps_t*, align 4
  %op.addr = alloca i32, align 4
  %s = alloca %struct.fps_t*, align 4
  store %struct.fps_t* %x, %struct.fps_t** %x.addr, align 4
  store i32 %op, i32* %op.addr, align 4
  %call = call %struct.fps_t* @fps_new()
  store %struct.fps_t* %call, %struct.fps_t** %s, align 4
  %0 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %1 = load %struct.fps_t*, %struct.fps_t** %s, align 4
  %s1 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %1, i32 0, i32 1
  store %struct.fps_t* %0, %struct.fps_t** %s1, align 4
  %2 = load i32, i32* %op.addr, align 4
  %3 = load %struct.fps_t*, %struct.fps_t** %s, align 4
  %type = getelementptr inbounds %struct.fps_t, %struct.fps_t* %3, i32 0, i32 0
  store i32 %2, i32* %type, align 8
  %4 = load %struct.fps_t*, %struct.fps_t** %s, align 4
  ret %struct.fps_t* %4
}

; Function Attrs: noinline nounwind optnone
define hidden double @term(%struct.fps_t* %x, i32 %n) #0 {
entry:
  %retval = alloca double, align 8
  %x.addr = alloca %struct.fps_t*, align 4
  %n.addr = alloca i32, align 4
  %ret = alloca double, align 8
  %i = alloca i32, align 4
  store %struct.fps_t* %x, %struct.fps_t** %x.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store double 0.000000e+00, double* %ret, align 8
  %0 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %type = getelementptr inbounds %struct.fps_t, %struct.fps_t* %0, i32 0, i32 0
  %1 = load i32, i32* %type, align 8
  switch i32 %1, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
    i32 2, label %sw.bb3
    i32 3, label %sw.bb8
    i32 4, label %sw.bb16
    i32 5, label %sw.bb35
    i32 6, label %sw.bb40
  ]

sw.bb:                                            ; preds = %entry
  %2 = load i32, i32* %n.addr, align 4
  %cmp = icmp sgt i32 %2, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %sw.bb
  br label %cond.end

cond.false:                                       ; preds = %sw.bb
  %3 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %a0 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %3, i32 0, i32 3
  %4 = load double, double* %a0, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ 0.000000e+00, %cond.true ], [ %4, %cond.false ]
  store double %cond, double* %retval, align 8
  br label %return

sw.bb1:                                           ; preds = %entry
  %5 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s1 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %5, i32 0, i32 1
  %6 = load %struct.fps_t*, %struct.fps_t** %s1, align 4
  %7 = load i32, i32* %n.addr, align 4
  %call = call double @term(%struct.fps_t* %6, i32 %7)
  %8 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s2 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %8, i32 0, i32 2
  %9 = load %struct.fps_t*, %struct.fps_t** %s2, align 8
  %10 = load i32, i32* %n.addr, align 4
  %call2 = call double @term(%struct.fps_t* %9, i32 %10)
  %add = fadd double %call, %call2
  store double %add, double* %ret, align 8
  br label %sw.epilog

sw.bb3:                                           ; preds = %entry
  %11 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s14 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %11, i32 0, i32 1
  %12 = load %struct.fps_t*, %struct.fps_t** %s14, align 4
  %13 = load i32, i32* %n.addr, align 4
  %call5 = call double @term(%struct.fps_t* %12, i32 %13)
  %14 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s26 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %14, i32 0, i32 2
  %15 = load %struct.fps_t*, %struct.fps_t** %s26, align 8
  %16 = load i32, i32* %n.addr, align 4
  %call7 = call double @term(%struct.fps_t* %15, i32 %16)
  %sub = fsub double %call5, %call7
  store double %sub, double* %ret, align 8
  br label %sw.epilog

sw.bb8:                                           ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %sw.bb8
  %17 = load i32, i32* %i, align 4
  %18 = load i32, i32* %n.addr, align 4
  %cmp9 = icmp sle i32 %17, %18
  br i1 %cmp9, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %19 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s110 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %19, i32 0, i32 1
  %20 = load %struct.fps_t*, %struct.fps_t** %s110, align 4
  %21 = load i32, i32* %i, align 4
  %call11 = call double @term(%struct.fps_t* %20, i32 %21)
  %22 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s212 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %22, i32 0, i32 2
  %23 = load %struct.fps_t*, %struct.fps_t** %s212, align 8
  %24 = load i32, i32* %n.addr, align 4
  %25 = load i32, i32* %i, align 4
  %sub13 = sub nsw i32 %24, %25
  %call14 = call double @term(%struct.fps_t* %23, i32 %sub13)
  %mul = fmul double %call11, %call14
  %26 = load double, double* %ret, align 8
  %add15 = fadd double %26, %mul
  store double %add15, double* %ret, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %27 = load i32, i32* %i, align 4
  %inc = add nsw i32 %27, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %sw.epilog

sw.bb16:                                          ; preds = %entry
  %28 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s217 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %28, i32 0, i32 2
  %29 = load %struct.fps_t*, %struct.fps_t** %s217, align 8
  %call18 = call double @term(%struct.fps_t* %29, i32 0)
  %tobool = fcmp une double %call18, 0.000000e+00
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %sw.bb16
  store double 0x7FF8000000000000, double* %retval, align 8
  br label %return

if.end:                                           ; preds = %sw.bb16
  %30 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s119 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %30, i32 0, i32 1
  %31 = load %struct.fps_t*, %struct.fps_t** %s119, align 4
  %32 = load i32, i32* %n.addr, align 4
  %call20 = call double @term(%struct.fps_t* %31, i32 %32)
  store double %call20, double* %ret, align 8
  store i32 1, i32* %i, align 4
  br label %for.cond21

for.cond21:                                       ; preds = %for.inc32, %if.end
  %33 = load i32, i32* %i, align 4
  %34 = load i32, i32* %n.addr, align 4
  %cmp22 = icmp sle i32 %33, %34
  br i1 %cmp22, label %for.body23, label %for.end34

for.body23:                                       ; preds = %for.cond21
  %35 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s224 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %35, i32 0, i32 2
  %36 = load %struct.fps_t*, %struct.fps_t** %s224, align 8
  %37 = load i32, i32* %i, align 4
  %call25 = call double @term(%struct.fps_t* %36, i32 %37)
  %38 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %39 = load i32, i32* %n.addr, align 4
  %40 = load i32, i32* %i, align 4
  %sub26 = sub nsw i32 %39, %40
  %call27 = call double @term(%struct.fps_t* %38, i32 %sub26)
  %mul28 = fmul double %call25, %call27
  %41 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s229 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %41, i32 0, i32 2
  %42 = load %struct.fps_t*, %struct.fps_t** %s229, align 8
  %call30 = call double @term(%struct.fps_t* %42, i32 0)
  %div = fdiv double %mul28, %call30
  %43 = load double, double* %ret, align 8
  %sub31 = fsub double %43, %div
  store double %sub31, double* %ret, align 8
  br label %for.inc32

for.inc32:                                        ; preds = %for.body23
  %44 = load i32, i32* %i, align 4
  %inc33 = add nsw i32 %44, 1
  store i32 %inc33, i32* %i, align 4
  br label %for.cond21

for.end34:                                        ; preds = %for.cond21
  br label %sw.epilog

sw.bb35:                                          ; preds = %entry
  %45 = load i32, i32* %n.addr, align 4
  %conv = sitofp i32 %45 to double
  %46 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s136 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %46, i32 0, i32 1
  %47 = load %struct.fps_t*, %struct.fps_t** %s136, align 4
  %48 = load i32, i32* %n.addr, align 4
  %add37 = add nsw i32 %48, 1
  %call38 = call double @term(%struct.fps_t* %47, i32 %add37)
  %mul39 = fmul double %conv, %call38
  store double %mul39, double* %ret, align 8
  br label %sw.epilog

sw.bb40:                                          ; preds = %entry
  %49 = load i32, i32* %n.addr, align 4
  %tobool41 = icmp ne i32 %49, 0
  br i1 %tobool41, label %if.end44, label %if.then42

if.then42:                                        ; preds = %sw.bb40
  %50 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %a043 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %50, i32 0, i32 3
  %51 = load double, double* %a043, align 8
  store double %51, double* %retval, align 8
  br label %return

if.end44:                                         ; preds = %sw.bb40
  %52 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s145 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %52, i32 0, i32 1
  %53 = load %struct.fps_t*, %struct.fps_t** %s145, align 4
  %54 = load i32, i32* %n.addr, align 4
  %sub46 = sub nsw i32 %54, 1
  %call47 = call double @term(%struct.fps_t* %53, i32 %sub46)
  %55 = load i32, i32* %n.addr, align 4
  %conv48 = sitofp i32 %55 to double
  %div49 = fdiv double %call47, %conv48
  store double %div49, double* %ret, align 8
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  %56 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %57 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %type50 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %57, i32 0, i32 0
  %58 = load i32, i32* %type50, align 8
  %call51 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %56, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i32 0, i32 0), i32 %58)
  call void @exit(i32 1) #3
  unreachable

sw.epilog:                                        ; preds = %if.end44, %sw.bb35, %for.end34, %for.end, %sw.bb3, %sw.bb1
  %59 = load double, double* %ret, align 8
  store double %59, double* %retval, align 8
  br label %return

return:                                           ; preds = %sw.epilog, %if.then42, %if.then, %cond.end
  %60 = load double, double* %retval, align 8
  ret double %60
}

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #1

; Function Attrs: noreturn
declare void @exit(i32 %0) #2

; Function Attrs: noinline nounwind optnone
define hidden %struct.fps_t* @fps_const(double %a0) #0 {
entry:
  %a0.addr = alloca double, align 8
  %x = alloca %struct.fps_t*, align 4
  store double %a0, double* %a0.addr, align 8
  %call = call %struct.fps_t* @fps_new()
  store %struct.fps_t* %call, %struct.fps_t** %x, align 4
  %0 = load %struct.fps_t*, %struct.fps_t** %x, align 4
  %type = getelementptr inbounds %struct.fps_t, %struct.fps_t* %0, i32 0, i32 0
  store i32 0, i32* %type, align 8
  %1 = load double, double* %a0.addr, align 8
  %2 = load %struct.fps_t*, %struct.fps_t** %x, align 4
  %a01 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %2, i32 0, i32 3
  store double %1, double* %a01, align 8
  %3 = load %struct.fps_t*, %struct.fps_t** %x, align 4
  ret %struct.fps_t* %3
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %one = alloca %struct.fps_t*, align 4
  %fcos = alloca %struct.fps_t*, align 4
  %fsin = alloca %struct.fps_t*, align 4
  %ftan = alloca %struct.fps_t*, align 4
  %fexp = alloca %struct.fps_t*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.fps_t* @fps_const(double 1.000000e+00)
  store %struct.fps_t* %call, %struct.fps_t** %one, align 4
  %call1 = call %struct.fps_t* @fps_new()
  store %struct.fps_t* %call1, %struct.fps_t** %fcos, align 4
  %0 = load %struct.fps_t*, %struct.fps_t** %fcos, align 4
  %call2 = call %struct.fps_t* @_unary(%struct.fps_t* %0, i32 6)
  store %struct.fps_t* %call2, %struct.fps_t** %fsin, align 4
  %1 = load %struct.fps_t*, %struct.fps_t** %fsin, align 4
  %2 = load %struct.fps_t*, %struct.fps_t** %fcos, align 4
  %call3 = call %struct.fps_t* @_binary(%struct.fps_t* %1, %struct.fps_t* %2, i32 4)
  store %struct.fps_t* %call3, %struct.fps_t** %ftan, align 4
  %3 = load %struct.fps_t*, %struct.fps_t** %fcos, align 4
  %4 = load %struct.fps_t*, %struct.fps_t** %one, align 4
  %5 = load %struct.fps_t*, %struct.fps_t** %fsin, align 4
  %call4 = call %struct.fps_t* @_unary(%struct.fps_t* %5, i32 6)
  call void @fps_redefine(%struct.fps_t* %3, i32 2, %struct.fps_t* %4, %struct.fps_t* %call4)
  %call5 = call %struct.fps_t* @fps_const(double 1.000000e+00)
  store %struct.fps_t* %call5, %struct.fps_t** %fexp, align 4
  %6 = load %struct.fps_t*, %struct.fps_t** %fexp, align 4
  %7 = load %struct.fps_t*, %struct.fps_t** %fexp, align 4
  call void @fps_redefine(%struct.fps_t* %6, i32 6, %struct.fps_t* %7, %struct.fps_t* null)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %8 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %8, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load %struct.fps_t*, %struct.fps_t** %fsin, align 4
  %10 = load i32, i32* %i, align 4
  %call7 = call double @term(%struct.fps_t* %9, i32 %10)
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), double %call7)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc15, %for.end
  %12 = load i32, i32* %i, align 4
  %cmp11 = icmp slt i32 %12, 10
  br i1 %cmp11, label %for.body12, label %for.end17

for.body12:                                       ; preds = %for.cond10
  %13 = load %struct.fps_t*, %struct.fps_t** %fcos, align 4
  %14 = load i32, i32* %i, align 4
  %call13 = call double @term(%struct.fps_t* %13, i32 %14)
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), double %call13)
  br label %for.inc15

for.inc15:                                        ; preds = %for.body12
  %15 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %15, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond10

for.end17:                                        ; preds = %for.cond10
  %call18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond19

for.cond19:                                       ; preds = %for.inc24, %for.end17
  %16 = load i32, i32* %i, align 4
  %cmp20 = icmp slt i32 %16, 10
  br i1 %cmp20, label %for.body21, label %for.end26

for.body21:                                       ; preds = %for.cond19
  %17 = load %struct.fps_t*, %struct.fps_t** %ftan, align 4
  %18 = load i32, i32* %i, align 4
  %call22 = call double @term(%struct.fps_t* %17, i32 %18)
  %call23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), double %call22)
  br label %for.inc24

for.inc24:                                        ; preds = %for.body21
  %19 = load i32, i32* %i, align 4
  %inc25 = add nsw i32 %19, 1
  store i32 %inc25, i32* %i, align 4
  br label %for.cond19

for.end26:                                        ; preds = %for.cond19
  %call27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond28

for.cond28:                                       ; preds = %for.inc33, %for.end26
  %20 = load i32, i32* %i, align 4
  %cmp29 = icmp slt i32 %20, 10
  br i1 %cmp29, label %for.body30, label %for.end35

for.body30:                                       ; preds = %for.cond28
  %21 = load %struct.fps_t*, %struct.fps_t** %fexp, align 4
  %22 = load i32, i32* %i, align 4
  %call31 = call double @term(%struct.fps_t* %21, i32 %22)
  %call32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), double %call31)
  br label %for.inc33

for.inc33:                                        ; preds = %for.body30
  %23 = load i32, i32* %i, align 4
  %inc34 = add nsw i32 %23, 1
  store i32 %inc34, i32* %i, align 4
  br label %for.cond28

for.end35:                                        ; preds = %for.cond28
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %op.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for _unary()

; entering Souper's runOnFunction() for term()

; ModuleID = './Formal_power_series.c.bc'
source_filename = "./Formal_power_series.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque
%struct.fps_t = type { i32, %struct.fps_t*, %struct.fps_t*, double }

@stderr = external constant %struct._IO_FILE*, align 4
@.str = private unnamed_addr constant [21 x i8] c"Unknown operator %d\0A\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"Sin:\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c" %g\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"\0ACos:\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"\0ATan:\00", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c"\0AExp:\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.fps_t* @fps_new() #0 {
entry:
  %x = alloca %struct.fps_t*, align 4
  %call = call noalias i8* @malloc(i32 24)
  %0 = bitcast i8* %call to %struct.fps_t*
  store %struct.fps_t* %0, %struct.fps_t** %x, align 4
  %1 = load %struct.fps_t*, %struct.fps_t** %x, align 4
  %a0 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %1, i32 0, i32 3
  store double 0.000000e+00, double* %a0, align 8
  %2 = load %struct.fps_t*, %struct.fps_t** %x, align 4
  %s2 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %2, i32 0, i32 2
  store %struct.fps_t* null, %struct.fps_t** %s2, align 8
  %3 = load %struct.fps_t*, %struct.fps_t** %x, align 4
  %s1 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %3, i32 0, i32 1
  store %struct.fps_t* null, %struct.fps_t** %s1, align 4
  %4 = load %struct.fps_t*, %struct.fps_t** %x, align 4
  %type = getelementptr inbounds %struct.fps_t, %struct.fps_t* %4, i32 0, i32 0
  store i32 0, i32* %type, align 8
  %5 = load %struct.fps_t*, %struct.fps_t** %x, align 4
  ret %struct.fps_t* %5
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @fps_redefine(%struct.fps_t* %x, i32 %op, %struct.fps_t* %y, %struct.fps_t* %z) #0 {
entry:
  %x.addr = alloca %struct.fps_t*, align 4
  %op.addr = alloca i32, align 4
  %y.addr = alloca %struct.fps_t*, align 4
  %z.addr = alloca %struct.fps_t*, align 4
  store %struct.fps_t* %x, %struct.fps_t** %x.addr, align 4
  store i32 %op, i32* %op.addr, align 4
  store %struct.fps_t* %y, %struct.fps_t** %y.addr, align 4
  store %struct.fps_t* %z, %struct.fps_t** %z.addr, align 4
  %0 = load i32, i32* %op.addr, align 4
  %1 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %type = getelementptr inbounds %struct.fps_t, %struct.fps_t* %1, i32 0, i32 0
  store i32 %0, i32* %type, align 8
  %2 = load %struct.fps_t*, %struct.fps_t** %y.addr, align 4
  %3 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s1 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %3, i32 0, i32 1
  store %struct.fps_t* %2, %struct.fps_t** %s1, align 4
  %4 = load %struct.fps_t*, %struct.fps_t** %z.addr, align 4
  %5 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s2 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %5, i32 0, i32 2
  store %struct.fps_t* %4, %struct.fps_t** %s2, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.fps_t* @_binary(%struct.fps_t* %x, %struct.fps_t* %y, i32 %op) #0 {
entry:
  %x.addr = alloca %struct.fps_t*, align 4
  %y.addr = alloca %struct.fps_t*, align 4
  %op.addr = alloca i32, align 4
  %s = alloca %struct.fps_t*, align 4
  store %struct.fps_t* %x, %struct.fps_t** %x.addr, align 4
  store %struct.fps_t* %y, %struct.fps_t** %y.addr, align 4
  store i32 %op, i32* %op.addr, align 4
  %call = call %struct.fps_t* @fps_new()
  store %struct.fps_t* %call, %struct.fps_t** %s, align 4
  %0 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %1 = load %struct.fps_t*, %struct.fps_t** %s, align 4
  %s1 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %1, i32 0, i32 1
  store %struct.fps_t* %0, %struct.fps_t** %s1, align 4
  %2 = load %struct.fps_t*, %struct.fps_t** %y.addr, align 4
  %3 = load %struct.fps_t*, %struct.fps_t** %s, align 4
  %s2 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %3, i32 0, i32 2
  store %struct.fps_t* %2, %struct.fps_t** %s2, align 8
  %4 = load i32, i32* %op.addr, align 4
  %5 = load %struct.fps_t*, %struct.fps_t** %s, align 4
  %type = getelementptr inbounds %struct.fps_t, %struct.fps_t* %5, i32 0, i32 0
  store i32 %4, i32* %type, align 8
  %6 = load %struct.fps_t*, %struct.fps_t** %s, align 4
  ret %struct.fps_t* %6
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.fps_t* @_unary(%struct.fps_t* %x, i32 %op) #0 {
entry:
  %x.addr = alloca %struct.fps_t*, align 4
  %op.addr = alloca i32, align 4
  %s = alloca %struct.fps_t*, align 4
  store %struct.fps_t* %x, %struct.fps_t** %x.addr, align 4
  store i32 %op, i32* %op.addr, align 4
  %call = call %struct.fps_t* @fps_new()
  store %struct.fps_t* %call, %struct.fps_t** %s, align 4
  %0 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %1 = load %struct.fps_t*, %struct.fps_t** %s, align 4
  %s1 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %1, i32 0, i32 1
  store %struct.fps_t* %0, %struct.fps_t** %s1, align 4
  %2 = load i32, i32* %op.addr, align 4
  %3 = load %struct.fps_t*, %struct.fps_t** %s, align 4
  %type = getelementptr inbounds %struct.fps_t, %struct.fps_t* %3, i32 0, i32 0
  store i32 %2, i32* %type, align 8
  %4 = load %struct.fps_t*, %struct.fps_t** %s, align 4
  ret %struct.fps_t* %4
}

; Function Attrs: noinline nounwind optnone
define hidden double @term(%struct.fps_t* %x, i32 %n) #0 {
entry:
  %retval = alloca double, align 8
  %x.addr = alloca %struct.fps_t*, align 4
  %n.addr = alloca i32, align 4
  %ret = alloca double, align 8
  %i = alloca i32, align 4
  store %struct.fps_t* %x, %struct.fps_t** %x.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store double 0.000000e+00, double* %ret, align 8
  %0 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %type = getelementptr inbounds %struct.fps_t, %struct.fps_t* %0, i32 0, i32 0
  %1 = load i32, i32* %type, align 8
  switch i32 %1, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
    i32 2, label %sw.bb3
    i32 3, label %sw.bb8
    i32 4, label %sw.bb16
    i32 5, label %sw.bb35
    i32 6, label %sw.bb40
  ]

sw.bb:                                            ; preds = %entry
  %2 = load i32, i32* %n.addr, align 4
  %cmp = icmp sgt i32 %2, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %sw.bb
  br label %cond.end

cond.false:                                       ; preds = %sw.bb
  %3 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %a0 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %3, i32 0, i32 3
  %4 = load double, double* %a0, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ 0.000000e+00, %cond.true ], [ %4, %cond.false ]
  store double %cond, double* %retval, align 8
  br label %return

sw.bb1:                                           ; preds = %entry
  %5 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s1 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %5, i32 0, i32 1
  %6 = load %struct.fps_t*, %struct.fps_t** %s1, align 4
  %7 = load i32, i32* %n.addr, align 4
  %call = call double @term(%struct.fps_t* %6, i32 %7)
  %8 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s2 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %8, i32 0, i32 2
  %9 = load %struct.fps_t*, %struct.fps_t** %s2, align 8
  %10 = load i32, i32* %n.addr, align 4
  %call2 = call double @term(%struct.fps_t* %9, i32 %10)
  %add = fadd double %call, %call2
  store double %add, double* %ret, align 8
  br label %sw.epilog

sw.bb3:                                           ; preds = %entry
  %11 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s14 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %11, i32 0, i32 1
  %12 = load %struct.fps_t*, %struct.fps_t** %s14, align 4
  %13 = load i32, i32* %n.addr, align 4
  %call5 = call double @term(%struct.fps_t* %12, i32 %13)
  %14 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s26 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %14, i32 0, i32 2
  %15 = load %struct.fps_t*, %struct.fps_t** %s26, align 8
  %16 = load i32, i32* %n.addr, align 4
  %call7 = call double @term(%struct.fps_t* %15, i32 %16)
  %sub = fsub double %call5, %call7
  store double %sub, double* %ret, align 8
  br label %sw.epilog

sw.bb8:                                           ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %sw.bb8
  %17 = load i32, i32* %i, align 4
  %18 = load i32, i32* %n.addr, align 4
  %cmp9 = icmp sle i32 %17, %18
  br i1 %cmp9, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %19 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s110 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %19, i32 0, i32 1
  %20 = load %struct.fps_t*, %struct.fps_t** %s110, align 4
  %21 = load i32, i32* %i, align 4
  %call11 = call double @term(%struct.fps_t* %20, i32 %21)
  %22 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s212 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %22, i32 0, i32 2
  %23 = load %struct.fps_t*, %struct.fps_t** %s212, align 8
  %24 = load i32, i32* %n.addr, align 4
  %25 = load i32, i32* %i, align 4
  %sub13 = sub nsw i32 %24, %25
  %call14 = call double @term(%struct.fps_t* %23, i32 %sub13)
  %mul = fmul double %call11, %call14
  %26 = load double, double* %ret, align 8
  %add15 = fadd double %26, %mul
  store double %add15, double* %ret, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %27 = load i32, i32* %i, align 4
  %inc = add nsw i32 %27, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %sw.epilog

sw.bb16:                                          ; preds = %entry
  %28 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s217 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %28, i32 0, i32 2
  %29 = load %struct.fps_t*, %struct.fps_t** %s217, align 8
  %call18 = call double @term(%struct.fps_t* %29, i32 0)
  %tobool = fcmp une double %call18, 0.000000e+00
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %sw.bb16
  store double 0x7FF8000000000000, double* %retval, align 8
  br label %return

if.end:                                           ; preds = %sw.bb16
  %30 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s119 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %30, i32 0, i32 1
  %31 = load %struct.fps_t*, %struct.fps_t** %s119, align 4
  %32 = load i32, i32* %n.addr, align 4
  %call20 = call double @term(%struct.fps_t* %31, i32 %32)
  store double %call20, double* %ret, align 8
  store i32 1, i32* %i, align 4
  br label %for.cond21

for.cond21:                                       ; preds = %for.inc32, %if.end
  %33 = load i32, i32* %i, align 4
  %34 = load i32, i32* %n.addr, align 4
  %cmp22 = icmp sle i32 %33, %34
  br i1 %cmp22, label %for.body23, label %for.end34

for.body23:                                       ; preds = %for.cond21
  %35 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s224 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %35, i32 0, i32 2
  %36 = load %struct.fps_t*, %struct.fps_t** %s224, align 8
  %37 = load i32, i32* %i, align 4
  %call25 = call double @term(%struct.fps_t* %36, i32 %37)
  %38 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %39 = load i32, i32* %n.addr, align 4
  %40 = load i32, i32* %i, align 4
  %sub26 = sub nsw i32 %39, %40
  %call27 = call double @term(%struct.fps_t* %38, i32 %sub26)
  %mul28 = fmul double %call25, %call27
  %41 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s229 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %41, i32 0, i32 2
  %42 = load %struct.fps_t*, %struct.fps_t** %s229, align 8
  %call30 = call double @term(%struct.fps_t* %42, i32 0)
  %div = fdiv double %mul28, %call30
  %43 = load double, double* %ret, align 8
  %sub31 = fsub double %43, %div
  store double %sub31, double* %ret, align 8
  br label %for.inc32

for.inc32:                                        ; preds = %for.body23
  %44 = load i32, i32* %i, align 4
  %inc33 = add nsw i32 %44, 1
  store i32 %inc33, i32* %i, align 4
  br label %for.cond21

for.end34:                                        ; preds = %for.cond21
  br label %sw.epilog

sw.bb35:                                          ; preds = %entry
  %45 = load i32, i32* %n.addr, align 4
  %conv = sitofp i32 %45 to double
  %46 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s136 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %46, i32 0, i32 1
  %47 = load %struct.fps_t*, %struct.fps_t** %s136, align 4
  %48 = load i32, i32* %n.addr, align 4
  %add37 = add nsw i32 %48, 1
  %call38 = call double @term(%struct.fps_t* %47, i32 %add37)
  %mul39 = fmul double %conv, %call38
  store double %mul39, double* %ret, align 8
  br label %sw.epilog

sw.bb40:                                          ; preds = %entry
  %49 = load i32, i32* %n.addr, align 4
  %tobool41 = icmp ne i32 %49, 0
  br i1 %tobool41, label %if.end44, label %if.then42

if.then42:                                        ; preds = %sw.bb40
  %50 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %a043 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %50, i32 0, i32 3
  %51 = load double, double* %a043, align 8
  store double %51, double* %retval, align 8
  br label %return

if.end44:                                         ; preds = %sw.bb40
  %52 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s145 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %52, i32 0, i32 1
  %53 = load %struct.fps_t*, %struct.fps_t** %s145, align 4
  %54 = load i32, i32* %n.addr, align 4
  %sub46 = sub nsw i32 %54, 1
  %call47 = call double @term(%struct.fps_t* %53, i32 %sub46)
  %55 = load i32, i32* %n.addr, align 4
  %conv48 = sitofp i32 %55 to double
  %div49 = fdiv double %call47, %conv48
  store double %div49, double* %ret, align 8
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  %56 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %57 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %type50 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %57, i32 0, i32 0
  %58 = load i32, i32* %type50, align 8
  %call51 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %56, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i32 0, i32 0), i32 %58)
  call void @exit(i32 1) #3
  unreachable

sw.epilog:                                        ; preds = %if.end44, %sw.bb35, %for.end34, %for.end, %sw.bb3, %sw.bb1
  %59 = load double, double* %ret, align 8
  store double %59, double* %retval, align 8
  br label %return

return:                                           ; preds = %sw.epilog, %if.then42, %if.then, %cond.end
  %60 = load double, double* %retval, align 8
  ret double %60
}

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #1

; Function Attrs: noreturn
declare void @exit(i32 %0) #2

; Function Attrs: noinline nounwind optnone
define hidden %struct.fps_t* @fps_const(double %a0) #0 {
entry:
  %a0.addr = alloca double, align 8
  %x = alloca %struct.fps_t*, align 4
  store double %a0, double* %a0.addr, align 8
  %call = call %struct.fps_t* @fps_new()
  store %struct.fps_t* %call, %struct.fps_t** %x, align 4
  %0 = load %struct.fps_t*, %struct.fps_t** %x, align 4
  %type = getelementptr inbounds %struct.fps_t, %struct.fps_t* %0, i32 0, i32 0
  store i32 0, i32* %type, align 8
  %1 = load double, double* %a0.addr, align 8
  %2 = load %struct.fps_t*, %struct.fps_t** %x, align 4
  %a01 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %2, i32 0, i32 3
  store double %1, double* %a01, align 8
  %3 = load %struct.fps_t*, %struct.fps_t** %x, align 4
  ret %struct.fps_t* %3
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %one = alloca %struct.fps_t*, align 4
  %fcos = alloca %struct.fps_t*, align 4
  %fsin = alloca %struct.fps_t*, align 4
  %ftan = alloca %struct.fps_t*, align 4
  %fexp = alloca %struct.fps_t*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.fps_t* @fps_const(double 1.000000e+00)
  store %struct.fps_t* %call, %struct.fps_t** %one, align 4
  %call1 = call %struct.fps_t* @fps_new()
  store %struct.fps_t* %call1, %struct.fps_t** %fcos, align 4
  %0 = load %struct.fps_t*, %struct.fps_t** %fcos, align 4
  %call2 = call %struct.fps_t* @_unary(%struct.fps_t* %0, i32 6)
  store %struct.fps_t* %call2, %struct.fps_t** %fsin, align 4
  %1 = load %struct.fps_t*, %struct.fps_t** %fsin, align 4
  %2 = load %struct.fps_t*, %struct.fps_t** %fcos, align 4
  %call3 = call %struct.fps_t* @_binary(%struct.fps_t* %1, %struct.fps_t* %2, i32 4)
  store %struct.fps_t* %call3, %struct.fps_t** %ftan, align 4
  %3 = load %struct.fps_t*, %struct.fps_t** %fcos, align 4
  %4 = load %struct.fps_t*, %struct.fps_t** %one, align 4
  %5 = load %struct.fps_t*, %struct.fps_t** %fsin, align 4
  %call4 = call %struct.fps_t* @_unary(%struct.fps_t* %5, i32 6)
  call void @fps_redefine(%struct.fps_t* %3, i32 2, %struct.fps_t* %4, %struct.fps_t* %call4)
  %call5 = call %struct.fps_t* @fps_const(double 1.000000e+00)
  store %struct.fps_t* %call5, %struct.fps_t** %fexp, align 4
  %6 = load %struct.fps_t*, %struct.fps_t** %fexp, align 4
  %7 = load %struct.fps_t*, %struct.fps_t** %fexp, align 4
  call void @fps_redefine(%struct.fps_t* %6, i32 6, %struct.fps_t* %7, %struct.fps_t* null)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %8 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %8, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load %struct.fps_t*, %struct.fps_t** %fsin, align 4
  %10 = load i32, i32* %i, align 4
  %call7 = call double @term(%struct.fps_t* %9, i32 %10)
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), double %call7)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc15, %for.end
  %12 = load i32, i32* %i, align 4
  %cmp11 = icmp slt i32 %12, 10
  br i1 %cmp11, label %for.body12, label %for.end17

for.body12:                                       ; preds = %for.cond10
  %13 = load %struct.fps_t*, %struct.fps_t** %fcos, align 4
  %14 = load i32, i32* %i, align 4
  %call13 = call double @term(%struct.fps_t* %13, i32 %14)
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), double %call13)
  br label %for.inc15

for.inc15:                                        ; preds = %for.body12
  %15 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %15, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond10

for.end17:                                        ; preds = %for.cond10
  %call18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond19

for.cond19:                                       ; preds = %for.inc24, %for.end17
  %16 = load i32, i32* %i, align 4
  %cmp20 = icmp slt i32 %16, 10
  br i1 %cmp20, label %for.body21, label %for.end26

for.body21:                                       ; preds = %for.cond19
  %17 = load %struct.fps_t*, %struct.fps_t** %ftan, align 4
  %18 = load i32, i32* %i, align 4
  %call22 = call double @term(%struct.fps_t* %17, i32 %18)
  %call23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), double %call22)
  br label %for.inc24

for.inc24:                                        ; preds = %for.body21
  %19 = load i32, i32* %i, align 4
  %inc25 = add nsw i32 %19, 1
  store i32 %inc25, i32* %i, align 4
  br label %for.cond19

for.end26:                                        ; preds = %for.cond19
  %call27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond28

for.cond28:                                       ; preds = %for.inc33, %for.end26
  %20 = load i32, i32* %i, align 4
  %cmp29 = icmp slt i32 %20, 10
  br i1 %cmp29, label %for.body30, label %for.end35

for.body30:                                       ; preds = %for.cond28
  %21 = load %struct.fps_t*, %struct.fps_t** %fexp, align 4
  %22 = load i32, i32* %i, align 4
  %call31 = call double @term(%struct.fps_t* %21, i32 %22)
  %call32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), double %call31)
  br label %for.inc33

for.inc33:                                        ; preds = %for.body30
  %23 = load i32, i32* %i, align 4
  %inc34 = add nsw i32 %23, 1
  store i32 %inc34, i32* %i, align 4
  br label %for.cond28

for.end35:                                        ; preds = %for.cond28
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %type, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sgt i32 %2, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp9 = icmp sle i32 %17, %18
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub13 = sub nsw i32 %24, %25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %27, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool = fcmp une double %call18, 0.000000e+00
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp22 = icmp sle i32 %33, %34
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %40 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub26 = sub nsw i32 %39, %40
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %44 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc33 = add nsw i32 %44, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %45 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %48 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add37 = add nsw i32 %48, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %49 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool41 = icmp ne i32 %49, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %54 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub46 = sub nsw i32 %54, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %55 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %58 = load i32, i32* %type50, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147418112
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for term()

; entering Souper's runOnFunction() for fps_const()

; ModuleID = './Formal_power_series.c.bc'
source_filename = "./Formal_power_series.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque
%struct.fps_t = type { i32, %struct.fps_t*, %struct.fps_t*, double }

@stderr = external constant %struct._IO_FILE*, align 4
@.str = private unnamed_addr constant [21 x i8] c"Unknown operator %d\0A\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"Sin:\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c" %g\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"\0ACos:\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"\0ATan:\00", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c"\0AExp:\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.fps_t* @fps_new() #0 {
entry:
  %x = alloca %struct.fps_t*, align 4
  %call = call noalias i8* @malloc(i32 24)
  %0 = bitcast i8* %call to %struct.fps_t*
  store %struct.fps_t* %0, %struct.fps_t** %x, align 4
  %1 = load %struct.fps_t*, %struct.fps_t** %x, align 4
  %a0 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %1, i32 0, i32 3
  store double 0.000000e+00, double* %a0, align 8
  %2 = load %struct.fps_t*, %struct.fps_t** %x, align 4
  %s2 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %2, i32 0, i32 2
  store %struct.fps_t* null, %struct.fps_t** %s2, align 8
  %3 = load %struct.fps_t*, %struct.fps_t** %x, align 4
  %s1 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %3, i32 0, i32 1
  store %struct.fps_t* null, %struct.fps_t** %s1, align 4
  %4 = load %struct.fps_t*, %struct.fps_t** %x, align 4
  %type = getelementptr inbounds %struct.fps_t, %struct.fps_t* %4, i32 0, i32 0
  store i32 0, i32* %type, align 8
  %5 = load %struct.fps_t*, %struct.fps_t** %x, align 4
  ret %struct.fps_t* %5
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @fps_redefine(%struct.fps_t* %x, i32 %op, %struct.fps_t* %y, %struct.fps_t* %z) #0 {
entry:
  %x.addr = alloca %struct.fps_t*, align 4
  %op.addr = alloca i32, align 4
  %y.addr = alloca %struct.fps_t*, align 4
  %z.addr = alloca %struct.fps_t*, align 4
  store %struct.fps_t* %x, %struct.fps_t** %x.addr, align 4
  store i32 %op, i32* %op.addr, align 4
  store %struct.fps_t* %y, %struct.fps_t** %y.addr, align 4
  store %struct.fps_t* %z, %struct.fps_t** %z.addr, align 4
  %0 = load i32, i32* %op.addr, align 4
  %1 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %type = getelementptr inbounds %struct.fps_t, %struct.fps_t* %1, i32 0, i32 0
  store i32 %0, i32* %type, align 8
  %2 = load %struct.fps_t*, %struct.fps_t** %y.addr, align 4
  %3 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s1 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %3, i32 0, i32 1
  store %struct.fps_t* %2, %struct.fps_t** %s1, align 4
  %4 = load %struct.fps_t*, %struct.fps_t** %z.addr, align 4
  %5 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s2 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %5, i32 0, i32 2
  store %struct.fps_t* %4, %struct.fps_t** %s2, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.fps_t* @_binary(%struct.fps_t* %x, %struct.fps_t* %y, i32 %op) #0 {
entry:
  %x.addr = alloca %struct.fps_t*, align 4
  %y.addr = alloca %struct.fps_t*, align 4
  %op.addr = alloca i32, align 4
  %s = alloca %struct.fps_t*, align 4
  store %struct.fps_t* %x, %struct.fps_t** %x.addr, align 4
  store %struct.fps_t* %y, %struct.fps_t** %y.addr, align 4
  store i32 %op, i32* %op.addr, align 4
  %call = call %struct.fps_t* @fps_new()
  store %struct.fps_t* %call, %struct.fps_t** %s, align 4
  %0 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %1 = load %struct.fps_t*, %struct.fps_t** %s, align 4
  %s1 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %1, i32 0, i32 1
  store %struct.fps_t* %0, %struct.fps_t** %s1, align 4
  %2 = load %struct.fps_t*, %struct.fps_t** %y.addr, align 4
  %3 = load %struct.fps_t*, %struct.fps_t** %s, align 4
  %s2 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %3, i32 0, i32 2
  store %struct.fps_t* %2, %struct.fps_t** %s2, align 8
  %4 = load i32, i32* %op.addr, align 4
  %5 = load %struct.fps_t*, %struct.fps_t** %s, align 4
  %type = getelementptr inbounds %struct.fps_t, %struct.fps_t* %5, i32 0, i32 0
  store i32 %4, i32* %type, align 8
  %6 = load %struct.fps_t*, %struct.fps_t** %s, align 4
  ret %struct.fps_t* %6
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.fps_t* @_unary(%struct.fps_t* %x, i32 %op) #0 {
entry:
  %x.addr = alloca %struct.fps_t*, align 4
  %op.addr = alloca i32, align 4
  %s = alloca %struct.fps_t*, align 4
  store %struct.fps_t* %x, %struct.fps_t** %x.addr, align 4
  store i32 %op, i32* %op.addr, align 4
  %call = call %struct.fps_t* @fps_new()
  store %struct.fps_t* %call, %struct.fps_t** %s, align 4
  %0 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %1 = load %struct.fps_t*, %struct.fps_t** %s, align 4
  %s1 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %1, i32 0, i32 1
  store %struct.fps_t* %0, %struct.fps_t** %s1, align 4
  %2 = load i32, i32* %op.addr, align 4
  %3 = load %struct.fps_t*, %struct.fps_t** %s, align 4
  %type = getelementptr inbounds %struct.fps_t, %struct.fps_t* %3, i32 0, i32 0
  store i32 %2, i32* %type, align 8
  %4 = load %struct.fps_t*, %struct.fps_t** %s, align 4
  ret %struct.fps_t* %4
}

; Function Attrs: noinline nounwind optnone
define hidden double @term(%struct.fps_t* %x, i32 %n) #0 {
entry:
  %retval = alloca double, align 8
  %x.addr = alloca %struct.fps_t*, align 4
  %n.addr = alloca i32, align 4
  %ret = alloca double, align 8
  %i = alloca i32, align 4
  store %struct.fps_t* %x, %struct.fps_t** %x.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store double 0.000000e+00, double* %ret, align 8
  %0 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %type = getelementptr inbounds %struct.fps_t, %struct.fps_t* %0, i32 0, i32 0
  %1 = load i32, i32* %type, align 8
  switch i32 %1, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
    i32 2, label %sw.bb3
    i32 3, label %sw.bb8
    i32 4, label %sw.bb16
    i32 5, label %sw.bb35
    i32 6, label %sw.bb40
  ]

sw.bb:                                            ; preds = %entry
  %2 = load i32, i32* %n.addr, align 4
  %cmp = icmp sgt i32 %2, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %sw.bb
  br label %cond.end

cond.false:                                       ; preds = %sw.bb
  %3 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %a0 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %3, i32 0, i32 3
  %4 = load double, double* %a0, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ 0.000000e+00, %cond.true ], [ %4, %cond.false ]
  store double %cond, double* %retval, align 8
  br label %return

sw.bb1:                                           ; preds = %entry
  %5 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s1 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %5, i32 0, i32 1
  %6 = load %struct.fps_t*, %struct.fps_t** %s1, align 4
  %7 = load i32, i32* %n.addr, align 4
  %call = call double @term(%struct.fps_t* %6, i32 %7)
  %8 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s2 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %8, i32 0, i32 2
  %9 = load %struct.fps_t*, %struct.fps_t** %s2, align 8
  %10 = load i32, i32* %n.addr, align 4
  %call2 = call double @term(%struct.fps_t* %9, i32 %10)
  %add = fadd double %call, %call2
  store double %add, double* %ret, align 8
  br label %sw.epilog

sw.bb3:                                           ; preds = %entry
  %11 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s14 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %11, i32 0, i32 1
  %12 = load %struct.fps_t*, %struct.fps_t** %s14, align 4
  %13 = load i32, i32* %n.addr, align 4
  %call5 = call double @term(%struct.fps_t* %12, i32 %13)
  %14 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s26 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %14, i32 0, i32 2
  %15 = load %struct.fps_t*, %struct.fps_t** %s26, align 8
  %16 = load i32, i32* %n.addr, align 4
  %call7 = call double @term(%struct.fps_t* %15, i32 %16)
  %sub = fsub double %call5, %call7
  store double %sub, double* %ret, align 8
  br label %sw.epilog

sw.bb8:                                           ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %sw.bb8
  %17 = load i32, i32* %i, align 4
  %18 = load i32, i32* %n.addr, align 4
  %cmp9 = icmp sle i32 %17, %18
  br i1 %cmp9, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %19 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s110 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %19, i32 0, i32 1
  %20 = load %struct.fps_t*, %struct.fps_t** %s110, align 4
  %21 = load i32, i32* %i, align 4
  %call11 = call double @term(%struct.fps_t* %20, i32 %21)
  %22 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s212 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %22, i32 0, i32 2
  %23 = load %struct.fps_t*, %struct.fps_t** %s212, align 8
  %24 = load i32, i32* %n.addr, align 4
  %25 = load i32, i32* %i, align 4
  %sub13 = sub nsw i32 %24, %25
  %call14 = call double @term(%struct.fps_t* %23, i32 %sub13)
  %mul = fmul double %call11, %call14
  %26 = load double, double* %ret, align 8
  %add15 = fadd double %26, %mul
  store double %add15, double* %ret, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %27 = load i32, i32* %i, align 4
  %inc = add nsw i32 %27, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %sw.epilog

sw.bb16:                                          ; preds = %entry
  %28 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s217 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %28, i32 0, i32 2
  %29 = load %struct.fps_t*, %struct.fps_t** %s217, align 8
  %call18 = call double @term(%struct.fps_t* %29, i32 0)
  %tobool = fcmp une double %call18, 0.000000e+00
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %sw.bb16
  store double 0x7FF8000000000000, double* %retval, align 8
  br label %return

if.end:                                           ; preds = %sw.bb16
  %30 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s119 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %30, i32 0, i32 1
  %31 = load %struct.fps_t*, %struct.fps_t** %s119, align 4
  %32 = load i32, i32* %n.addr, align 4
  %call20 = call double @term(%struct.fps_t* %31, i32 %32)
  store double %call20, double* %ret, align 8
  store i32 1, i32* %i, align 4
  br label %for.cond21

for.cond21:                                       ; preds = %for.inc32, %if.end
  %33 = load i32, i32* %i, align 4
  %34 = load i32, i32* %n.addr, align 4
  %cmp22 = icmp sle i32 %33, %34
  br i1 %cmp22, label %for.body23, label %for.end34

for.body23:                                       ; preds = %for.cond21
  %35 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s224 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %35, i32 0, i32 2
  %36 = load %struct.fps_t*, %struct.fps_t** %s224, align 8
  %37 = load i32, i32* %i, align 4
  %call25 = call double @term(%struct.fps_t* %36, i32 %37)
  %38 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %39 = load i32, i32* %n.addr, align 4
  %40 = load i32, i32* %i, align 4
  %sub26 = sub nsw i32 %39, %40
  %call27 = call double @term(%struct.fps_t* %38, i32 %sub26)
  %mul28 = fmul double %call25, %call27
  %41 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s229 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %41, i32 0, i32 2
  %42 = load %struct.fps_t*, %struct.fps_t** %s229, align 8
  %call30 = call double @term(%struct.fps_t* %42, i32 0)
  %div = fdiv double %mul28, %call30
  %43 = load double, double* %ret, align 8
  %sub31 = fsub double %43, %div
  store double %sub31, double* %ret, align 8
  br label %for.inc32

for.inc32:                                        ; preds = %for.body23
  %44 = load i32, i32* %i, align 4
  %inc33 = add nsw i32 %44, 1
  store i32 %inc33, i32* %i, align 4
  br label %for.cond21

for.end34:                                        ; preds = %for.cond21
  br label %sw.epilog

sw.bb35:                                          ; preds = %entry
  %45 = load i32, i32* %n.addr, align 4
  %conv = sitofp i32 %45 to double
  %46 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s136 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %46, i32 0, i32 1
  %47 = load %struct.fps_t*, %struct.fps_t** %s136, align 4
  %48 = load i32, i32* %n.addr, align 4
  %add37 = add nsw i32 %48, 1
  %call38 = call double @term(%struct.fps_t* %47, i32 %add37)
  %mul39 = fmul double %conv, %call38
  store double %mul39, double* %ret, align 8
  br label %sw.epilog

sw.bb40:                                          ; preds = %entry
  %49 = load i32, i32* %n.addr, align 4
  %tobool41 = icmp ne i32 %49, 0
  br i1 %tobool41, label %if.end44, label %if.then42

if.then42:                                        ; preds = %sw.bb40
  %50 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %a043 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %50, i32 0, i32 3
  %51 = load double, double* %a043, align 8
  store double %51, double* %retval, align 8
  br label %return

if.end44:                                         ; preds = %sw.bb40
  %52 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s145 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %52, i32 0, i32 1
  %53 = load %struct.fps_t*, %struct.fps_t** %s145, align 4
  %54 = load i32, i32* %n.addr, align 4
  %sub46 = sub nsw i32 %54, 1
  %call47 = call double @term(%struct.fps_t* %53, i32 %sub46)
  %55 = load i32, i32* %n.addr, align 4
  %conv48 = sitofp i32 %55 to double
  %div49 = fdiv double %call47, %conv48
  store double %div49, double* %ret, align 8
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  %56 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %57 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %type50 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %57, i32 0, i32 0
  %58 = load i32, i32* %type50, align 8
  %call51 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %56, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i32 0, i32 0), i32 %58)
  call void @exit(i32 1) #3
  unreachable

sw.epilog:                                        ; preds = %if.end44, %sw.bb35, %for.end34, %for.end, %sw.bb3, %sw.bb1
  %59 = load double, double* %ret, align 8
  store double %59, double* %retval, align 8
  br label %return

return:                                           ; preds = %sw.epilog, %if.then42, %if.then, %cond.end
  %60 = load double, double* %retval, align 8
  ret double %60
}

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #1

; Function Attrs: noreturn
declare void @exit(i32 %0) #2

; Function Attrs: noinline nounwind optnone
define hidden %struct.fps_t* @fps_const(double %a0) #0 {
entry:
  %a0.addr = alloca double, align 8
  %x = alloca %struct.fps_t*, align 4
  store double %a0, double* %a0.addr, align 8
  %call = call %struct.fps_t* @fps_new()
  store %struct.fps_t* %call, %struct.fps_t** %x, align 4
  %0 = load %struct.fps_t*, %struct.fps_t** %x, align 4
  %type = getelementptr inbounds %struct.fps_t, %struct.fps_t* %0, i32 0, i32 0
  store i32 0, i32* %type, align 8
  %1 = load double, double* %a0.addr, align 8
  %2 = load %struct.fps_t*, %struct.fps_t** %x, align 4
  %a01 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %2, i32 0, i32 3
  store double %1, double* %a01, align 8
  %3 = load %struct.fps_t*, %struct.fps_t** %x, align 4
  ret %struct.fps_t* %3
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %one = alloca %struct.fps_t*, align 4
  %fcos = alloca %struct.fps_t*, align 4
  %fsin = alloca %struct.fps_t*, align 4
  %ftan = alloca %struct.fps_t*, align 4
  %fexp = alloca %struct.fps_t*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.fps_t* @fps_const(double 1.000000e+00)
  store %struct.fps_t* %call, %struct.fps_t** %one, align 4
  %call1 = call %struct.fps_t* @fps_new()
  store %struct.fps_t* %call1, %struct.fps_t** %fcos, align 4
  %0 = load %struct.fps_t*, %struct.fps_t** %fcos, align 4
  %call2 = call %struct.fps_t* @_unary(%struct.fps_t* %0, i32 6)
  store %struct.fps_t* %call2, %struct.fps_t** %fsin, align 4
  %1 = load %struct.fps_t*, %struct.fps_t** %fsin, align 4
  %2 = load %struct.fps_t*, %struct.fps_t** %fcos, align 4
  %call3 = call %struct.fps_t* @_binary(%struct.fps_t* %1, %struct.fps_t* %2, i32 4)
  store %struct.fps_t* %call3, %struct.fps_t** %ftan, align 4
  %3 = load %struct.fps_t*, %struct.fps_t** %fcos, align 4
  %4 = load %struct.fps_t*, %struct.fps_t** %one, align 4
  %5 = load %struct.fps_t*, %struct.fps_t** %fsin, align 4
  %call4 = call %struct.fps_t* @_unary(%struct.fps_t* %5, i32 6)
  call void @fps_redefine(%struct.fps_t* %3, i32 2, %struct.fps_t* %4, %struct.fps_t* %call4)
  %call5 = call %struct.fps_t* @fps_const(double 1.000000e+00)
  store %struct.fps_t* %call5, %struct.fps_t** %fexp, align 4
  %6 = load %struct.fps_t*, %struct.fps_t** %fexp, align 4
  %7 = load %struct.fps_t*, %struct.fps_t** %fexp, align 4
  call void @fps_redefine(%struct.fps_t* %6, i32 6, %struct.fps_t* %7, %struct.fps_t* null)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %8 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %8, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load %struct.fps_t*, %struct.fps_t** %fsin, align 4
  %10 = load i32, i32* %i, align 4
  %call7 = call double @term(%struct.fps_t* %9, i32 %10)
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), double %call7)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc15, %for.end
  %12 = load i32, i32* %i, align 4
  %cmp11 = icmp slt i32 %12, 10
  br i1 %cmp11, label %for.body12, label %for.end17

for.body12:                                       ; preds = %for.cond10
  %13 = load %struct.fps_t*, %struct.fps_t** %fcos, align 4
  %14 = load i32, i32* %i, align 4
  %call13 = call double @term(%struct.fps_t* %13, i32 %14)
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), double %call13)
  br label %for.inc15

for.inc15:                                        ; preds = %for.body12
  %15 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %15, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond10

for.end17:                                        ; preds = %for.cond10
  %call18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond19

for.cond19:                                       ; preds = %for.inc24, %for.end17
  %16 = load i32, i32* %i, align 4
  %cmp20 = icmp slt i32 %16, 10
  br i1 %cmp20, label %for.body21, label %for.end26

for.body21:                                       ; preds = %for.cond19
  %17 = load %struct.fps_t*, %struct.fps_t** %ftan, align 4
  %18 = load i32, i32* %i, align 4
  %call22 = call double @term(%struct.fps_t* %17, i32 %18)
  %call23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), double %call22)
  br label %for.inc24

for.inc24:                                        ; preds = %for.body21
  %19 = load i32, i32* %i, align 4
  %inc25 = add nsw i32 %19, 1
  store i32 %inc25, i32* %i, align 4
  br label %for.cond19

for.end26:                                        ; preds = %for.cond19
  %call27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond28

for.cond28:                                       ; preds = %for.inc33, %for.end26
  %20 = load i32, i32* %i, align 4
  %cmp29 = icmp slt i32 %20, 10
  br i1 %cmp29, label %for.body30, label %for.end35

for.body30:                                       ; preds = %for.cond28
  %21 = load %struct.fps_t*, %struct.fps_t** %fexp, align 4
  %22 = load i32, i32* %i, align 4
  %call31 = call double @term(%struct.fps_t* %21, i32 %22)
  %call32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), double %call31)
  br label %for.inc33

for.inc33:                                        ; preds = %for.body30
  %23 = load i32, i32* %i, align 4
  %inc34 = add nsw i32 %23, 1
  store i32 %inc34, i32* %i, align 4
  br label %for.cond28

for.end35:                                        ; preds = %for.cond28
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for fps_const()

; entering Souper's runOnFunction() for main()

; ModuleID = './Formal_power_series.c.bc'
source_filename = "./Formal_power_series.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque
%struct.fps_t = type { i32, %struct.fps_t*, %struct.fps_t*, double }

@stderr = external constant %struct._IO_FILE*, align 4
@.str = private unnamed_addr constant [21 x i8] c"Unknown operator %d\0A\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"Sin:\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c" %g\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"\0ACos:\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"\0ATan:\00", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c"\0AExp:\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.fps_t* @fps_new() #0 {
entry:
  %x = alloca %struct.fps_t*, align 4
  %call = call noalias i8* @malloc(i32 24)
  %0 = bitcast i8* %call to %struct.fps_t*
  store %struct.fps_t* %0, %struct.fps_t** %x, align 4
  %1 = load %struct.fps_t*, %struct.fps_t** %x, align 4
  %a0 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %1, i32 0, i32 3
  store double 0.000000e+00, double* %a0, align 8
  %2 = load %struct.fps_t*, %struct.fps_t** %x, align 4
  %s2 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %2, i32 0, i32 2
  store %struct.fps_t* null, %struct.fps_t** %s2, align 8
  %3 = load %struct.fps_t*, %struct.fps_t** %x, align 4
  %s1 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %3, i32 0, i32 1
  store %struct.fps_t* null, %struct.fps_t** %s1, align 4
  %4 = load %struct.fps_t*, %struct.fps_t** %x, align 4
  %type = getelementptr inbounds %struct.fps_t, %struct.fps_t* %4, i32 0, i32 0
  store i32 0, i32* %type, align 8
  %5 = load %struct.fps_t*, %struct.fps_t** %x, align 4
  ret %struct.fps_t* %5
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @fps_redefine(%struct.fps_t* %x, i32 %op, %struct.fps_t* %y, %struct.fps_t* %z) #0 {
entry:
  %x.addr = alloca %struct.fps_t*, align 4
  %op.addr = alloca i32, align 4
  %y.addr = alloca %struct.fps_t*, align 4
  %z.addr = alloca %struct.fps_t*, align 4
  store %struct.fps_t* %x, %struct.fps_t** %x.addr, align 4
  store i32 %op, i32* %op.addr, align 4
  store %struct.fps_t* %y, %struct.fps_t** %y.addr, align 4
  store %struct.fps_t* %z, %struct.fps_t** %z.addr, align 4
  %0 = load i32, i32* %op.addr, align 4
  %1 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %type = getelementptr inbounds %struct.fps_t, %struct.fps_t* %1, i32 0, i32 0
  store i32 %0, i32* %type, align 8
  %2 = load %struct.fps_t*, %struct.fps_t** %y.addr, align 4
  %3 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s1 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %3, i32 0, i32 1
  store %struct.fps_t* %2, %struct.fps_t** %s1, align 4
  %4 = load %struct.fps_t*, %struct.fps_t** %z.addr, align 4
  %5 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s2 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %5, i32 0, i32 2
  store %struct.fps_t* %4, %struct.fps_t** %s2, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.fps_t* @_binary(%struct.fps_t* %x, %struct.fps_t* %y, i32 %op) #0 {
entry:
  %x.addr = alloca %struct.fps_t*, align 4
  %y.addr = alloca %struct.fps_t*, align 4
  %op.addr = alloca i32, align 4
  %s = alloca %struct.fps_t*, align 4
  store %struct.fps_t* %x, %struct.fps_t** %x.addr, align 4
  store %struct.fps_t* %y, %struct.fps_t** %y.addr, align 4
  store i32 %op, i32* %op.addr, align 4
  %call = call %struct.fps_t* @fps_new()
  store %struct.fps_t* %call, %struct.fps_t** %s, align 4
  %0 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %1 = load %struct.fps_t*, %struct.fps_t** %s, align 4
  %s1 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %1, i32 0, i32 1
  store %struct.fps_t* %0, %struct.fps_t** %s1, align 4
  %2 = load %struct.fps_t*, %struct.fps_t** %y.addr, align 4
  %3 = load %struct.fps_t*, %struct.fps_t** %s, align 4
  %s2 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %3, i32 0, i32 2
  store %struct.fps_t* %2, %struct.fps_t** %s2, align 8
  %4 = load i32, i32* %op.addr, align 4
  %5 = load %struct.fps_t*, %struct.fps_t** %s, align 4
  %type = getelementptr inbounds %struct.fps_t, %struct.fps_t* %5, i32 0, i32 0
  store i32 %4, i32* %type, align 8
  %6 = load %struct.fps_t*, %struct.fps_t** %s, align 4
  ret %struct.fps_t* %6
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.fps_t* @_unary(%struct.fps_t* %x, i32 %op) #0 {
entry:
  %x.addr = alloca %struct.fps_t*, align 4
  %op.addr = alloca i32, align 4
  %s = alloca %struct.fps_t*, align 4
  store %struct.fps_t* %x, %struct.fps_t** %x.addr, align 4
  store i32 %op, i32* %op.addr, align 4
  %call = call %struct.fps_t* @fps_new()
  store %struct.fps_t* %call, %struct.fps_t** %s, align 4
  %0 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %1 = load %struct.fps_t*, %struct.fps_t** %s, align 4
  %s1 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %1, i32 0, i32 1
  store %struct.fps_t* %0, %struct.fps_t** %s1, align 4
  %2 = load i32, i32* %op.addr, align 4
  %3 = load %struct.fps_t*, %struct.fps_t** %s, align 4
  %type = getelementptr inbounds %struct.fps_t, %struct.fps_t* %3, i32 0, i32 0
  store i32 %2, i32* %type, align 8
  %4 = load %struct.fps_t*, %struct.fps_t** %s, align 4
  ret %struct.fps_t* %4
}

; Function Attrs: noinline nounwind optnone
define hidden double @term(%struct.fps_t* %x, i32 %n) #0 {
entry:
  %retval = alloca double, align 8
  %x.addr = alloca %struct.fps_t*, align 4
  %n.addr = alloca i32, align 4
  %ret = alloca double, align 8
  %i = alloca i32, align 4
  store %struct.fps_t* %x, %struct.fps_t** %x.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store double 0.000000e+00, double* %ret, align 8
  %0 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %type = getelementptr inbounds %struct.fps_t, %struct.fps_t* %0, i32 0, i32 0
  %1 = load i32, i32* %type, align 8
  switch i32 %1, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
    i32 2, label %sw.bb3
    i32 3, label %sw.bb8
    i32 4, label %sw.bb16
    i32 5, label %sw.bb35
    i32 6, label %sw.bb40
  ]

sw.bb:                                            ; preds = %entry
  %2 = load i32, i32* %n.addr, align 4
  %cmp = icmp sgt i32 %2, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %sw.bb
  br label %cond.end

cond.false:                                       ; preds = %sw.bb
  %3 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %a0 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %3, i32 0, i32 3
  %4 = load double, double* %a0, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ 0.000000e+00, %cond.true ], [ %4, %cond.false ]
  store double %cond, double* %retval, align 8
  br label %return

sw.bb1:                                           ; preds = %entry
  %5 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s1 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %5, i32 0, i32 1
  %6 = load %struct.fps_t*, %struct.fps_t** %s1, align 4
  %7 = load i32, i32* %n.addr, align 4
  %call = call double @term(%struct.fps_t* %6, i32 %7)
  %8 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s2 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %8, i32 0, i32 2
  %9 = load %struct.fps_t*, %struct.fps_t** %s2, align 8
  %10 = load i32, i32* %n.addr, align 4
  %call2 = call double @term(%struct.fps_t* %9, i32 %10)
  %add = fadd double %call, %call2
  store double %add, double* %ret, align 8
  br label %sw.epilog

sw.bb3:                                           ; preds = %entry
  %11 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s14 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %11, i32 0, i32 1
  %12 = load %struct.fps_t*, %struct.fps_t** %s14, align 4
  %13 = load i32, i32* %n.addr, align 4
  %call5 = call double @term(%struct.fps_t* %12, i32 %13)
  %14 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s26 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %14, i32 0, i32 2
  %15 = load %struct.fps_t*, %struct.fps_t** %s26, align 8
  %16 = load i32, i32* %n.addr, align 4
  %call7 = call double @term(%struct.fps_t* %15, i32 %16)
  %sub = fsub double %call5, %call7
  store double %sub, double* %ret, align 8
  br label %sw.epilog

sw.bb8:                                           ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %sw.bb8
  %17 = load i32, i32* %i, align 4
  %18 = load i32, i32* %n.addr, align 4
  %cmp9 = icmp sle i32 %17, %18
  br i1 %cmp9, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %19 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s110 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %19, i32 0, i32 1
  %20 = load %struct.fps_t*, %struct.fps_t** %s110, align 4
  %21 = load i32, i32* %i, align 4
  %call11 = call double @term(%struct.fps_t* %20, i32 %21)
  %22 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s212 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %22, i32 0, i32 2
  %23 = load %struct.fps_t*, %struct.fps_t** %s212, align 8
  %24 = load i32, i32* %n.addr, align 4
  %25 = load i32, i32* %i, align 4
  %sub13 = sub nsw i32 %24, %25
  %call14 = call double @term(%struct.fps_t* %23, i32 %sub13)
  %mul = fmul double %call11, %call14
  %26 = load double, double* %ret, align 8
  %add15 = fadd double %26, %mul
  store double %add15, double* %ret, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %27 = load i32, i32* %i, align 4
  %inc = add nsw i32 %27, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %sw.epilog

sw.bb16:                                          ; preds = %entry
  %28 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s217 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %28, i32 0, i32 2
  %29 = load %struct.fps_t*, %struct.fps_t** %s217, align 8
  %call18 = call double @term(%struct.fps_t* %29, i32 0)
  %tobool = fcmp une double %call18, 0.000000e+00
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %sw.bb16
  store double 0x7FF8000000000000, double* %retval, align 8
  br label %return

if.end:                                           ; preds = %sw.bb16
  %30 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s119 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %30, i32 0, i32 1
  %31 = load %struct.fps_t*, %struct.fps_t** %s119, align 4
  %32 = load i32, i32* %n.addr, align 4
  %call20 = call double @term(%struct.fps_t* %31, i32 %32)
  store double %call20, double* %ret, align 8
  store i32 1, i32* %i, align 4
  br label %for.cond21

for.cond21:                                       ; preds = %for.inc32, %if.end
  %33 = load i32, i32* %i, align 4
  %34 = load i32, i32* %n.addr, align 4
  %cmp22 = icmp sle i32 %33, %34
  br i1 %cmp22, label %for.body23, label %for.end34

for.body23:                                       ; preds = %for.cond21
  %35 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s224 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %35, i32 0, i32 2
  %36 = load %struct.fps_t*, %struct.fps_t** %s224, align 8
  %37 = load i32, i32* %i, align 4
  %call25 = call double @term(%struct.fps_t* %36, i32 %37)
  %38 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %39 = load i32, i32* %n.addr, align 4
  %40 = load i32, i32* %i, align 4
  %sub26 = sub nsw i32 %39, %40
  %call27 = call double @term(%struct.fps_t* %38, i32 %sub26)
  %mul28 = fmul double %call25, %call27
  %41 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s229 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %41, i32 0, i32 2
  %42 = load %struct.fps_t*, %struct.fps_t** %s229, align 8
  %call30 = call double @term(%struct.fps_t* %42, i32 0)
  %div = fdiv double %mul28, %call30
  %43 = load double, double* %ret, align 8
  %sub31 = fsub double %43, %div
  store double %sub31, double* %ret, align 8
  br label %for.inc32

for.inc32:                                        ; preds = %for.body23
  %44 = load i32, i32* %i, align 4
  %inc33 = add nsw i32 %44, 1
  store i32 %inc33, i32* %i, align 4
  br label %for.cond21

for.end34:                                        ; preds = %for.cond21
  br label %sw.epilog

sw.bb35:                                          ; preds = %entry
  %45 = load i32, i32* %n.addr, align 4
  %conv = sitofp i32 %45 to double
  %46 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s136 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %46, i32 0, i32 1
  %47 = load %struct.fps_t*, %struct.fps_t** %s136, align 4
  %48 = load i32, i32* %n.addr, align 4
  %add37 = add nsw i32 %48, 1
  %call38 = call double @term(%struct.fps_t* %47, i32 %add37)
  %mul39 = fmul double %conv, %call38
  store double %mul39, double* %ret, align 8
  br label %sw.epilog

sw.bb40:                                          ; preds = %entry
  %49 = load i32, i32* %n.addr, align 4
  %tobool41 = icmp ne i32 %49, 0
  br i1 %tobool41, label %if.end44, label %if.then42

if.then42:                                        ; preds = %sw.bb40
  %50 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %a043 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %50, i32 0, i32 3
  %51 = load double, double* %a043, align 8
  store double %51, double* %retval, align 8
  br label %return

if.end44:                                         ; preds = %sw.bb40
  %52 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %s145 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %52, i32 0, i32 1
  %53 = load %struct.fps_t*, %struct.fps_t** %s145, align 4
  %54 = load i32, i32* %n.addr, align 4
  %sub46 = sub nsw i32 %54, 1
  %call47 = call double @term(%struct.fps_t* %53, i32 %sub46)
  %55 = load i32, i32* %n.addr, align 4
  %conv48 = sitofp i32 %55 to double
  %div49 = fdiv double %call47, %conv48
  store double %div49, double* %ret, align 8
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  %56 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %57 = load %struct.fps_t*, %struct.fps_t** %x.addr, align 4
  %type50 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %57, i32 0, i32 0
  %58 = load i32, i32* %type50, align 8
  %call51 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %56, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i32 0, i32 0), i32 %58)
  call void @exit(i32 1) #3
  unreachable

sw.epilog:                                        ; preds = %if.end44, %sw.bb35, %for.end34, %for.end, %sw.bb3, %sw.bb1
  %59 = load double, double* %ret, align 8
  store double %59, double* %retval, align 8
  br label %return

return:                                           ; preds = %sw.epilog, %if.then42, %if.then, %cond.end
  %60 = load double, double* %retval, align 8
  ret double %60
}

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #1

; Function Attrs: noreturn
declare void @exit(i32 %0) #2

; Function Attrs: noinline nounwind optnone
define hidden %struct.fps_t* @fps_const(double %a0) #0 {
entry:
  %a0.addr = alloca double, align 8
  %x = alloca %struct.fps_t*, align 4
  store double %a0, double* %a0.addr, align 8
  %call = call %struct.fps_t* @fps_new()
  store %struct.fps_t* %call, %struct.fps_t** %x, align 4
  %0 = load %struct.fps_t*, %struct.fps_t** %x, align 4
  %type = getelementptr inbounds %struct.fps_t, %struct.fps_t* %0, i32 0, i32 0
  store i32 0, i32* %type, align 8
  %1 = load double, double* %a0.addr, align 8
  %2 = load %struct.fps_t*, %struct.fps_t** %x, align 4
  %a01 = getelementptr inbounds %struct.fps_t, %struct.fps_t* %2, i32 0, i32 3
  store double %1, double* %a01, align 8
  %3 = load %struct.fps_t*, %struct.fps_t** %x, align 4
  ret %struct.fps_t* %3
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %one = alloca %struct.fps_t*, align 4
  %fcos = alloca %struct.fps_t*, align 4
  %fsin = alloca %struct.fps_t*, align 4
  %ftan = alloca %struct.fps_t*, align 4
  %fexp = alloca %struct.fps_t*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.fps_t* @fps_const(double 1.000000e+00)
  store %struct.fps_t* %call, %struct.fps_t** %one, align 4
  %call1 = call %struct.fps_t* @fps_new()
  store %struct.fps_t* %call1, %struct.fps_t** %fcos, align 4
  %0 = load %struct.fps_t*, %struct.fps_t** %fcos, align 4
  %call2 = call %struct.fps_t* @_unary(%struct.fps_t* %0, i32 6)
  store %struct.fps_t* %call2, %struct.fps_t** %fsin, align 4
  %1 = load %struct.fps_t*, %struct.fps_t** %fsin, align 4
  %2 = load %struct.fps_t*, %struct.fps_t** %fcos, align 4
  %call3 = call %struct.fps_t* @_binary(%struct.fps_t* %1, %struct.fps_t* %2, i32 4)
  store %struct.fps_t* %call3, %struct.fps_t** %ftan, align 4
  %3 = load %struct.fps_t*, %struct.fps_t** %fcos, align 4
  %4 = load %struct.fps_t*, %struct.fps_t** %one, align 4
  %5 = load %struct.fps_t*, %struct.fps_t** %fsin, align 4
  %call4 = call %struct.fps_t* @_unary(%struct.fps_t* %5, i32 6)
  call void @fps_redefine(%struct.fps_t* %3, i32 2, %struct.fps_t* %4, %struct.fps_t* %call4)
  %call5 = call %struct.fps_t* @fps_const(double 1.000000e+00)
  store %struct.fps_t* %call5, %struct.fps_t** %fexp, align 4
  %6 = load %struct.fps_t*, %struct.fps_t** %fexp, align 4
  %7 = load %struct.fps_t*, %struct.fps_t** %fexp, align 4
  call void @fps_redefine(%struct.fps_t* %6, i32 6, %struct.fps_t* %7, %struct.fps_t* null)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %8 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %8, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load %struct.fps_t*, %struct.fps_t** %fsin, align 4
  %10 = load i32, i32* %i, align 4
  %call7 = call double @term(%struct.fps_t* %9, i32 %10)
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), double %call7)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc15, %for.end
  %12 = load i32, i32* %i, align 4
  %cmp11 = icmp slt i32 %12, 10
  br i1 %cmp11, label %for.body12, label %for.end17

for.body12:                                       ; preds = %for.cond10
  %13 = load %struct.fps_t*, %struct.fps_t** %fcos, align 4
  %14 = load i32, i32* %i, align 4
  %call13 = call double @term(%struct.fps_t* %13, i32 %14)
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), double %call13)
  br label %for.inc15

for.inc15:                                        ; preds = %for.body12
  %15 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %15, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond10

for.end17:                                        ; preds = %for.cond10
  %call18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond19

for.cond19:                                       ; preds = %for.inc24, %for.end17
  %16 = load i32, i32* %i, align 4
  %cmp20 = icmp slt i32 %16, 10
  br i1 %cmp20, label %for.body21, label %for.end26

for.body21:                                       ; preds = %for.cond19
  %17 = load %struct.fps_t*, %struct.fps_t** %ftan, align 4
  %18 = load i32, i32* %i, align 4
  %call22 = call double @term(%struct.fps_t* %17, i32 %18)
  %call23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), double %call22)
  br label %for.inc24

for.inc24:                                        ; preds = %for.body21
  %19 = load i32, i32* %i, align 4
  %inc25 = add nsw i32 %19, 1
  store i32 %inc25, i32* %i, align 4
  br label %for.cond19

for.end26:                                        ; preds = %for.cond19
  %call27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond28

for.cond28:                                       ; preds = %for.inc33, %for.end26
  %20 = load i32, i32* %i, align 4
  %cmp29 = icmp slt i32 %20, 10
  br i1 %cmp29, label %for.body30, label %for.end35

for.body30:                                       ; preds = %for.cond28
  %21 = load %struct.fps_t*, %struct.fps_t** %fexp, align 4
  %22 = load i32, i32* %i, align 4
  %call31 = call double @term(%struct.fps_t* %21, i32 %22)
  %call32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), double %call31)
  br label %for.inc33

for.inc33:                                        ; preds = %for.body30
  %23 = load i32, i32* %i, align 4
  %inc34 = add nsw i32 %23, 1
  store i32 %inc34, i32* %i, align 4
  br label %for.cond28

for.end35:                                        ; preds = %for.cond28
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %8, 10
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 10:i32
infer %1

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %11, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp11 = icmp slt i32 %12, 10
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 10:i32
infer %1

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc16 = add nsw i32 %15, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp20 = icmp slt i32 %16, 10
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 10:i32
infer %1

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc25 = add nsw i32 %19, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp29 = icmp slt i32 %20, 10
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 10:i32
infer %1

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc34 = add nsw i32 %23, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 10:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
