
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for codepoint_len()

; ModuleID = './UTF-8_encode_and_decode.c.bc'
source_filename = "./UTF-8_encode_and_decode.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.utf_t = type { i8, i8, i32, i32, i32 }

@.compoundliteral = internal global %struct.utf_t { i8 63, i8 -128, i32 0, i32 0, i32 6 }, align 4
@.compoundliteral.1 = internal global %struct.utf_t { i8 127, i8 0, i32 0, i32 127, i32 7 }, align 4
@.compoundliteral.2 = internal global %struct.utf_t { i8 31, i8 -64, i32 128, i32 2047, i32 5 }, align 4
@.compoundliteral.3 = internal global %struct.utf_t { i8 15, i8 -32, i32 2048, i32 65535, i32 4 }, align 4
@.compoundliteral.4 = internal global %struct.utf_t { i8 7, i8 -16, i32 65536, i32 1114111, i32 3 }, align 4
@.compoundliteral.5 = internal global %struct.utf_t zeroinitializer, align 4
@utf = hidden global [6 x %struct.utf_t*] [%struct.utf_t* @.compoundliteral, %struct.utf_t* @.compoundliteral.1, %struct.utf_t* @.compoundliteral.2, %struct.utf_t* @.compoundliteral.3, %struct.utf_t* @.compoundliteral.4, %struct.utf_t* @.compoundliteral.5], align 16
@to_utf8.ret = internal global [5 x i8] zeroinitializer, align 1
@__const.main.input = private unnamed_addr constant [6 x i32] [i32 65, i32 246, i32 1046, i32 8364, i32 119070, i32 0], align 16
@.str = private unnamed_addr constant [42 x i8] c"Character  Unicode  UTF-8 encoding (hex)\0A\00", align 1
@.str.6 = private unnamed_addr constant [42 x i8] c"----------------------------------------\0A\00", align 1
@.str.7 = private unnamed_addr constant [21 x i8] c"%s          U+%-7.4x\00", align 1
@.str.8 = private unnamed_addr constant [6 x i8] c"%hhx \00", align 1
@.str.9 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @codepoint_len(i32 %cp) #0 {
entry:
  %cp.addr = alloca i32, align 4
  %len = alloca i32, align 4
  %u = alloca %struct.utf_t**, align 4
  store i32 %cp, i32* %cp.addr, align 4
  store i32 0, i32* %len, align 4
  store %struct.utf_t** getelementptr inbounds ([6 x %struct.utf_t*], [6 x %struct.utf_t*]* @utf, i32 0, i32 0), %struct.utf_t*** %u, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.utf_t**, %struct.utf_t*** %u, align 4
  %1 = load %struct.utf_t*, %struct.utf_t** %0, align 4
  %tobool = icmp ne %struct.utf_t* %1, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %cp.addr, align 4
  %3 = load %struct.utf_t**, %struct.utf_t*** %u, align 4
  %4 = load %struct.utf_t*, %struct.utf_t** %3, align 4
  %beg = getelementptr inbounds %struct.utf_t, %struct.utf_t* %4, i32 0, i32 2
  %5 = load i32, i32* %beg, align 4
  %cmp = icmp uge i32 %2, %5
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %6 = load i32, i32* %cp.addr, align 4
  %7 = load %struct.utf_t**, %struct.utf_t*** %u, align 4
  %8 = load %struct.utf_t*, %struct.utf_t** %7, align 4
  %end = getelementptr inbounds %struct.utf_t, %struct.utf_t* %8, i32 0, i32 3
  %9 = load i32, i32* %end, align 4
  %cmp1 = icmp ule i32 %6, %9
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  br label %for.end

if.end:                                           ; preds = %land.lhs.true, %for.body
  %10 = load i32, i32* %len, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %len, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %11 = load %struct.utf_t**, %struct.utf_t*** %u, align 4
  %incdec.ptr = getelementptr inbounds %struct.utf_t*, %struct.utf_t** %11, i32 1
  store %struct.utf_t** %incdec.ptr, %struct.utf_t*** %u, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  %12 = load i32, i32* %len, align 4
  %cmp2 = icmp sgt i32 %12, 4
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %for.end
  call void @exit(i32 1) #4
  unreachable

if.end4:                                          ; preds = %for.end
  %13 = load i32, i32* %len, align 4
  ret i32 %13
}

; Function Attrs: noreturn
declare void @exit(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @utf8_len(i8 signext %ch) #0 {
entry:
  %ch.addr = alloca i8, align 1
  %len = alloca i32, align 4
  %u = alloca %struct.utf_t**, align 4
  store i8 %ch, i8* %ch.addr, align 1
  store i32 0, i32* %len, align 4
  store %struct.utf_t** getelementptr inbounds ([6 x %struct.utf_t*], [6 x %struct.utf_t*]* @utf, i32 0, i32 0), %struct.utf_t*** %u, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.utf_t**, %struct.utf_t*** %u, align 4
  %1 = load %struct.utf_t*, %struct.utf_t** %0, align 4
  %tobool = icmp ne %struct.utf_t* %1, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8, i8* %ch.addr, align 1
  %conv = sext i8 %2 to i32
  %3 = load %struct.utf_t**, %struct.utf_t*** %u, align 4
  %4 = load %struct.utf_t*, %struct.utf_t** %3, align 4
  %mask = getelementptr inbounds %struct.utf_t, %struct.utf_t* %4, i32 0, i32 0
  %5 = load i8, i8* %mask, align 4
  %conv1 = sext i8 %5 to i32
  %neg = xor i32 %conv1, -1
  %and = and i32 %conv, %neg
  %6 = load %struct.utf_t**, %struct.utf_t*** %u, align 4
  %7 = load %struct.utf_t*, %struct.utf_t** %6, align 4
  %lead = getelementptr inbounds %struct.utf_t, %struct.utf_t* %7, i32 0, i32 1
  %8 = load i8, i8* %lead, align 1
  %conv2 = sext i8 %8 to i32
  %cmp = icmp eq i32 %and, %conv2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.end

if.end:                                           ; preds = %for.body
  %9 = load i32, i32* %len, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %len, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %10 = load %struct.utf_t**, %struct.utf_t*** %u, align 4
  %incdec.ptr = getelementptr inbounds %struct.utf_t*, %struct.utf_t** %10, i32 1
  store %struct.utf_t** %incdec.ptr, %struct.utf_t*** %u, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  %11 = load i32, i32* %len, align 4
  %cmp4 = icmp sgt i32 %11, 4
  br i1 %cmp4, label %if.then6, label %if.end7

if.then6:                                         ; preds = %for.end
  call void @exit(i32 1) #4
  unreachable

if.end7:                                          ; preds = %for.end
  %12 = load i32, i32* %len, align 4
  ret i32 %12
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @to_utf8(i32 %cp) #0 {
entry:
  %cp.addr = alloca i32, align 4
  %bytes = alloca i32, align 4
  %shift = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %cp, i32* %cp.addr, align 4
  %0 = load i32, i32* %cp.addr, align 4
  %call = call i32 @codepoint_len(i32 %0)
  store i32 %call, i32* %bytes, align 4
  %1 = load %struct.utf_t*, %struct.utf_t** getelementptr inbounds ([6 x %struct.utf_t*], [6 x %struct.utf_t*]* @utf, i32 0, i32 0), align 16
  %bits_stored = getelementptr inbounds %struct.utf_t, %struct.utf_t* %1, i32 0, i32 4
  %2 = load i32, i32* %bits_stored, align 4
  %3 = load i32, i32* %bytes, align 4
  %sub = sub nsw i32 %3, 1
  %mul = mul nsw i32 %2, %sub
  store i32 %mul, i32* %shift, align 4
  %4 = load i32, i32* %cp.addr, align 4
  %5 = load i32, i32* %shift, align 4
  %shr = lshr i32 %4, %5
  %6 = load i32, i32* %bytes, align 4
  %arrayidx = getelementptr inbounds [6 x %struct.utf_t*], [6 x %struct.utf_t*]* @utf, i32 0, i32 %6
  %7 = load %struct.utf_t*, %struct.utf_t** %arrayidx, align 4
  %mask = getelementptr inbounds %struct.utf_t, %struct.utf_t* %7, i32 0, i32 0
  %8 = load i8, i8* %mask, align 4
  %conv = sext i8 %8 to i32
  %and = and i32 %shr, %conv
  %9 = load i32, i32* %bytes, align 4
  %arrayidx1 = getelementptr inbounds [6 x %struct.utf_t*], [6 x %struct.utf_t*]* @utf, i32 0, i32 %9
  %10 = load %struct.utf_t*, %struct.utf_t** %arrayidx1, align 4
  %lead = getelementptr inbounds %struct.utf_t, %struct.utf_t* %10, i32 0, i32 1
  %11 = load i8, i8* %lead, align 1
  %conv2 = sext i8 %11 to i32
  %or = or i32 %and, %conv2
  %conv3 = trunc i32 %or to i8
  store i8 %conv3, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @to_utf8.ret, i32 0, i32 0), align 1
  %12 = load %struct.utf_t*, %struct.utf_t** getelementptr inbounds ([6 x %struct.utf_t*], [6 x %struct.utf_t*]* @utf, i32 0, i32 0), align 16
  %bits_stored4 = getelementptr inbounds %struct.utf_t, %struct.utf_t* %12, i32 0, i32 4
  %13 = load i32, i32* %bits_stored4, align 4
  %14 = load i32, i32* %shift, align 4
  %sub5 = sub nsw i32 %14, %13
  store i32 %sub5, i32* %shift, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %15 = load i32, i32* %i, align 4
  %16 = load i32, i32* %bytes, align 4
  %cmp = icmp slt i32 %15, %16
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %17 = load i32, i32* %cp.addr, align 4
  %18 = load i32, i32* %shift, align 4
  %shr7 = lshr i32 %17, %18
  %19 = load %struct.utf_t*, %struct.utf_t** getelementptr inbounds ([6 x %struct.utf_t*], [6 x %struct.utf_t*]* @utf, i32 0, i32 0), align 16
  %mask8 = getelementptr inbounds %struct.utf_t, %struct.utf_t* %19, i32 0, i32 0
  %20 = load i8, i8* %mask8, align 4
  %conv9 = sext i8 %20 to i32
  %and10 = and i32 %shr7, %conv9
  %21 = load %struct.utf_t*, %struct.utf_t** getelementptr inbounds ([6 x %struct.utf_t*], [6 x %struct.utf_t*]* @utf, i32 0, i32 0), align 16
  %lead11 = getelementptr inbounds %struct.utf_t, %struct.utf_t* %21, i32 0, i32 1
  %22 = load i8, i8* %lead11, align 1
  %conv12 = sext i8 %22 to i32
  %or13 = or i32 %and10, %conv12
  %conv14 = trunc i32 %or13 to i8
  %23 = load i32, i32* %i, align 4
  %arrayidx15 = getelementptr inbounds [5 x i8], [5 x i8]* @to_utf8.ret, i32 0, i32 %23
  store i8 %conv14, i8* %arrayidx15, align 1
  %24 = load %struct.utf_t*, %struct.utf_t** getelementptr inbounds ([6 x %struct.utf_t*], [6 x %struct.utf_t*]* @utf, i32 0, i32 0), align 16
  %bits_stored16 = getelementptr inbounds %struct.utf_t, %struct.utf_t* %24, i32 0, i32 4
  %25 = load i32, i32* %bits_stored16, align 4
  %26 = load i32, i32* %shift, align 4
  %sub17 = sub nsw i32 %26, %25
  store i32 %sub17, i32* %shift, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %27 = load i32, i32* %i, align 4
  %inc = add nsw i32 %27, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %28 = load i32, i32* %bytes, align 4
  %arrayidx18 = getelementptr inbounds [5 x i8], [5 x i8]* @to_utf8.ret, i32 0, i32 %28
  store i8 0, i8* %arrayidx18, align 1
  ret i8* getelementptr inbounds ([5 x i8], [5 x i8]* @to_utf8.ret, i32 0, i32 0)
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @to_cp(i8* %chr) #0 {
entry:
  %chr.addr = alloca i8*, align 4
  %bytes = alloca i32, align 4
  %shift = alloca i32, align 4
  %codep = alloca i32, align 4
  %i = alloca i32, align 4
  store i8* %chr, i8** %chr.addr, align 4
  %0 = load i8*, i8** %chr.addr, align 4
  %1 = load i8, i8* %0, align 1
  %call = call i32 @utf8_len(i8 signext %1)
  store i32 %call, i32* %bytes, align 4
  %2 = load %struct.utf_t*, %struct.utf_t** getelementptr inbounds ([6 x %struct.utf_t*], [6 x %struct.utf_t*]* @utf, i32 0, i32 0), align 16
  %bits_stored = getelementptr inbounds %struct.utf_t, %struct.utf_t* %2, i32 0, i32 4
  %3 = load i32, i32* %bits_stored, align 4
  %4 = load i32, i32* %bytes, align 4
  %sub = sub nsw i32 %4, 1
  %mul = mul nsw i32 %3, %sub
  store i32 %mul, i32* %shift, align 4
  %5 = load i8*, i8** %chr.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %5, i32 1
  store i8* %incdec.ptr, i8** %chr.addr, align 4
  %6 = load i8, i8* %5, align 1
  %conv = sext i8 %6 to i32
  %7 = load i32, i32* %bytes, align 4
  %arrayidx = getelementptr inbounds [6 x %struct.utf_t*], [6 x %struct.utf_t*]* @utf, i32 0, i32 %7
  %8 = load %struct.utf_t*, %struct.utf_t** %arrayidx, align 4
  %mask = getelementptr inbounds %struct.utf_t, %struct.utf_t* %8, i32 0, i32 0
  %9 = load i8, i8* %mask, align 4
  %conv1 = sext i8 %9 to i32
  %and = and i32 %conv, %conv1
  %10 = load i32, i32* %shift, align 4
  %shl = shl i32 %and, %10
  store i32 %shl, i32* %codep, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %11 = load i32, i32* %i, align 4
  %12 = load i32, i32* %bytes, align 4
  %cmp = icmp slt i32 %11, %12
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %13 = load %struct.utf_t*, %struct.utf_t** getelementptr inbounds ([6 x %struct.utf_t*], [6 x %struct.utf_t*]* @utf, i32 0, i32 0), align 16
  %bits_stored3 = getelementptr inbounds %struct.utf_t, %struct.utf_t* %13, i32 0, i32 4
  %14 = load i32, i32* %bits_stored3, align 4
  %15 = load i32, i32* %shift, align 4
  %sub4 = sub nsw i32 %15, %14
  store i32 %sub4, i32* %shift, align 4
  %16 = load i8*, i8** %chr.addr, align 4
  %17 = load i8, i8* %16, align 1
  %conv5 = sext i8 %17 to i32
  %18 = load %struct.utf_t*, %struct.utf_t** getelementptr inbounds ([6 x %struct.utf_t*], [6 x %struct.utf_t*]* @utf, i32 0, i32 0), align 16
  %mask6 = getelementptr inbounds %struct.utf_t, %struct.utf_t* %18, i32 0, i32 0
  %19 = load i8, i8* %mask6, align 4
  %conv7 = sext i8 %19 to i32
  %and8 = and i32 %conv5, %conv7
  %20 = load i32, i32* %shift, align 4
  %shl9 = shl i32 %and8, %20
  %21 = load i32, i32* %codep, align 4
  %or = or i32 %21, %shl9
  store i32 %or, i32* %codep, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %22 = load i32, i32* %i, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %i, align 4
  %23 = load i8*, i8** %chr.addr, align 4
  %incdec.ptr10 = getelementptr inbounds i8, i8* %23, i32 1
  store i8* %incdec.ptr10, i8** %chr.addr, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %24 = load i32, i32* %codep, align 4
  ret i32 %24
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %in = alloca i32*, align 4
  %input = alloca [6 x i32], align 16
  %utf8 = alloca i8*, align 4
  %codepoint = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [6 x i32]* %input to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([6 x i32]* @__const.main.input to i8*), i32 24, i1 false)
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str, i32 0, i32 0))
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.6, i32 0, i32 0))
  %arraydecay = getelementptr inbounds [6 x i32], [6 x i32]* %input, i32 0, i32 0
  store i32* %arraydecay, i32** %in, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc13, %entry
  %1 = load i32*, i32** %in, align 4
  %2 = load i32, i32* %1, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %for.body, label %for.end14

for.body:                                         ; preds = %for.cond
  %3 = load i32*, i32** %in, align 4
  %4 = load i32, i32* %3, align 4
  %call2 = call i8* @to_utf8(i32 %4)
  store i8* %call2, i8** %utf8, align 4
  %5 = load i8*, i8** %utf8, align 4
  %call3 = call i32 @to_cp(i8* %5)
  store i32 %call3, i32* %codepoint, align 4
  %6 = load i8*, i8** %utf8, align 4
  %7 = load i32, i32* %codepoint, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.7, i32 0, i32 0), i8* %6, i32 %7)
  store i32 0, i32* %i, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %for.body
  %8 = load i8*, i8** %utf8, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %8, i32 %9
  %10 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %10 to i32
  %tobool6 = icmp ne i32 %conv, 0
  br i1 %tobool6, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond5
  %11 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %11, 4
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond5
  %12 = phi i1 [ false, %for.cond5 ], [ %cmp, %land.rhs ]
  br i1 %12, label %for.body8, label %for.end

for.body8:                                        ; preds = %land.end
  %13 = load i8*, i8** %utf8, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds i8, i8* %13, i32 %14
  %15 = load i8, i8* %arrayidx9, align 1
  %conv10 = sext i8 %15 to i32
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.8, i32 0, i32 0), i32 %conv10)
  br label %for.inc

for.inc:                                          ; preds = %for.body8
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond5

for.end:                                          ; preds = %land.end
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i32 0, i32 0))
  br label %for.inc13

for.inc13:                                        ; preds = %for.end
  %17 = load i32*, i32** %in, align 4
  %incdec.ptr = getelementptr inbounds i32, i32* %17, i32 1
  store i32* %incdec.ptr, i32** %in, align 4
  br label %for.cond

for.end14:                                        ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare i32 @printf(i8* %0, ...) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %tobool = icmp ne %struct.utf_t* %1, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %cp.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %beg, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp uge i32 %2, %5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ule %0, %1
infer %2

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %cp.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %end, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = icmp ule i32 %6, %9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ule %0, %1
infer %2

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %10, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp sgt i32 %12, 4
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = ule %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt 4:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for codepoint_len()

; entering Souper's runOnFunction() for utf8_len()

; ModuleID = './UTF-8_encode_and_decode.c.bc'
source_filename = "./UTF-8_encode_and_decode.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.utf_t = type { i8, i8, i32, i32, i32 }

@.compoundliteral = internal global %struct.utf_t { i8 63, i8 -128, i32 0, i32 0, i32 6 }, align 4
@.compoundliteral.1 = internal global %struct.utf_t { i8 127, i8 0, i32 0, i32 127, i32 7 }, align 4
@.compoundliteral.2 = internal global %struct.utf_t { i8 31, i8 -64, i32 128, i32 2047, i32 5 }, align 4
@.compoundliteral.3 = internal global %struct.utf_t { i8 15, i8 -32, i32 2048, i32 65535, i32 4 }, align 4
@.compoundliteral.4 = internal global %struct.utf_t { i8 7, i8 -16, i32 65536, i32 1114111, i32 3 }, align 4
@.compoundliteral.5 = internal global %struct.utf_t zeroinitializer, align 4
@utf = hidden global [6 x %struct.utf_t*] [%struct.utf_t* @.compoundliteral, %struct.utf_t* @.compoundliteral.1, %struct.utf_t* @.compoundliteral.2, %struct.utf_t* @.compoundliteral.3, %struct.utf_t* @.compoundliteral.4, %struct.utf_t* @.compoundliteral.5], align 16
@to_utf8.ret = internal global [5 x i8] zeroinitializer, align 1
@__const.main.input = private unnamed_addr constant [6 x i32] [i32 65, i32 246, i32 1046, i32 8364, i32 119070, i32 0], align 16
@.str = private unnamed_addr constant [42 x i8] c"Character  Unicode  UTF-8 encoding (hex)\0A\00", align 1
@.str.6 = private unnamed_addr constant [42 x i8] c"----------------------------------------\0A\00", align 1
@.str.7 = private unnamed_addr constant [21 x i8] c"%s          U+%-7.4x\00", align 1
@.str.8 = private unnamed_addr constant [6 x i8] c"%hhx \00", align 1
@.str.9 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @codepoint_len(i32 %cp) #0 {
entry:
  %cp.addr = alloca i32, align 4
  %len = alloca i32, align 4
  %u = alloca %struct.utf_t**, align 4
  store i32 %cp, i32* %cp.addr, align 4
  store i32 0, i32* %len, align 4
  store %struct.utf_t** getelementptr inbounds ([6 x %struct.utf_t*], [6 x %struct.utf_t*]* @utf, i32 0, i32 0), %struct.utf_t*** %u, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.utf_t**, %struct.utf_t*** %u, align 4
  %1 = load %struct.utf_t*, %struct.utf_t** %0, align 4
  %tobool = icmp ne %struct.utf_t* %1, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %cp.addr, align 4
  %3 = load %struct.utf_t**, %struct.utf_t*** %u, align 4
  %4 = load %struct.utf_t*, %struct.utf_t** %3, align 4
  %beg = getelementptr inbounds %struct.utf_t, %struct.utf_t* %4, i32 0, i32 2
  %5 = load i32, i32* %beg, align 4
  %cmp = icmp uge i32 %2, %5
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %6 = load i32, i32* %cp.addr, align 4
  %7 = load %struct.utf_t**, %struct.utf_t*** %u, align 4
  %8 = load %struct.utf_t*, %struct.utf_t** %7, align 4
  %end = getelementptr inbounds %struct.utf_t, %struct.utf_t* %8, i32 0, i32 3
  %9 = load i32, i32* %end, align 4
  %cmp1 = icmp ule i32 %6, %9
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  br label %for.end

if.end:                                           ; preds = %land.lhs.true, %for.body
  %10 = load i32, i32* %len, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %len, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %11 = load %struct.utf_t**, %struct.utf_t*** %u, align 4
  %incdec.ptr = getelementptr inbounds %struct.utf_t*, %struct.utf_t** %11, i32 1
  store %struct.utf_t** %incdec.ptr, %struct.utf_t*** %u, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  %12 = load i32, i32* %len, align 4
  %cmp2 = icmp sgt i32 %12, 4
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %for.end
  call void @exit(i32 1) #4
  unreachable

if.end4:                                          ; preds = %for.end
  %13 = load i32, i32* %len, align 4
  ret i32 %13
}

; Function Attrs: noreturn
declare void @exit(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @utf8_len(i8 signext %ch) #0 {
entry:
  %ch.addr = alloca i8, align 1
  %len = alloca i32, align 4
  %u = alloca %struct.utf_t**, align 4
  store i8 %ch, i8* %ch.addr, align 1
  store i32 0, i32* %len, align 4
  store %struct.utf_t** getelementptr inbounds ([6 x %struct.utf_t*], [6 x %struct.utf_t*]* @utf, i32 0, i32 0), %struct.utf_t*** %u, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.utf_t**, %struct.utf_t*** %u, align 4
  %1 = load %struct.utf_t*, %struct.utf_t** %0, align 4
  %tobool = icmp ne %struct.utf_t* %1, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8, i8* %ch.addr, align 1
  %conv = sext i8 %2 to i32
  %3 = load %struct.utf_t**, %struct.utf_t*** %u, align 4
  %4 = load %struct.utf_t*, %struct.utf_t** %3, align 4
  %mask = getelementptr inbounds %struct.utf_t, %struct.utf_t* %4, i32 0, i32 0
  %5 = load i8, i8* %mask, align 4
  %conv1 = sext i8 %5 to i32
  %neg = xor i32 %conv1, -1
  %and = and i32 %conv, %neg
  %6 = load %struct.utf_t**, %struct.utf_t*** %u, align 4
  %7 = load %struct.utf_t*, %struct.utf_t** %6, align 4
  %lead = getelementptr inbounds %struct.utf_t, %struct.utf_t* %7, i32 0, i32 1
  %8 = load i8, i8* %lead, align 1
  %conv2 = sext i8 %8 to i32
  %cmp = icmp eq i32 %and, %conv2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.end

if.end:                                           ; preds = %for.body
  %9 = load i32, i32* %len, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %len, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %10 = load %struct.utf_t**, %struct.utf_t*** %u, align 4
  %incdec.ptr = getelementptr inbounds %struct.utf_t*, %struct.utf_t** %10, i32 1
  store %struct.utf_t** %incdec.ptr, %struct.utf_t*** %u, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  %11 = load i32, i32* %len, align 4
  %cmp4 = icmp sgt i32 %11, 4
  br i1 %cmp4, label %if.then6, label %if.end7

if.then6:                                         ; preds = %for.end
  call void @exit(i32 1) #4
  unreachable

if.end7:                                          ; preds = %for.end
  %12 = load i32, i32* %len, align 4
  ret i32 %12
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @to_utf8(i32 %cp) #0 {
entry:
  %cp.addr = alloca i32, align 4
  %bytes = alloca i32, align 4
  %shift = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %cp, i32* %cp.addr, align 4
  %0 = load i32, i32* %cp.addr, align 4
  %call = call i32 @codepoint_len(i32 %0)
  store i32 %call, i32* %bytes, align 4
  %1 = load %struct.utf_t*, %struct.utf_t** getelementptr inbounds ([6 x %struct.utf_t*], [6 x %struct.utf_t*]* @utf, i32 0, i32 0), align 16
  %bits_stored = getelementptr inbounds %struct.utf_t, %struct.utf_t* %1, i32 0, i32 4
  %2 = load i32, i32* %bits_stored, align 4
  %3 = load i32, i32* %bytes, align 4
  %sub = sub nsw i32 %3, 1
  %mul = mul nsw i32 %2, %sub
  store i32 %mul, i32* %shift, align 4
  %4 = load i32, i32* %cp.addr, align 4
  %5 = load i32, i32* %shift, align 4
  %shr = lshr i32 %4, %5
  %6 = load i32, i32* %bytes, align 4
  %arrayidx = getelementptr inbounds [6 x %struct.utf_t*], [6 x %struct.utf_t*]* @utf, i32 0, i32 %6
  %7 = load %struct.utf_t*, %struct.utf_t** %arrayidx, align 4
  %mask = getelementptr inbounds %struct.utf_t, %struct.utf_t* %7, i32 0, i32 0
  %8 = load i8, i8* %mask, align 4
  %conv = sext i8 %8 to i32
  %and = and i32 %shr, %conv
  %9 = load i32, i32* %bytes, align 4
  %arrayidx1 = getelementptr inbounds [6 x %struct.utf_t*], [6 x %struct.utf_t*]* @utf, i32 0, i32 %9
  %10 = load %struct.utf_t*, %struct.utf_t** %arrayidx1, align 4
  %lead = getelementptr inbounds %struct.utf_t, %struct.utf_t* %10, i32 0, i32 1
  %11 = load i8, i8* %lead, align 1
  %conv2 = sext i8 %11 to i32
  %or = or i32 %and, %conv2
  %conv3 = trunc i32 %or to i8
  store i8 %conv3, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @to_utf8.ret, i32 0, i32 0), align 1
  %12 = load %struct.utf_t*, %struct.utf_t** getelementptr inbounds ([6 x %struct.utf_t*], [6 x %struct.utf_t*]* @utf, i32 0, i32 0), align 16
  %bits_stored4 = getelementptr inbounds %struct.utf_t, %struct.utf_t* %12, i32 0, i32 4
  %13 = load i32, i32* %bits_stored4, align 4
  %14 = load i32, i32* %shift, align 4
  %sub5 = sub nsw i32 %14, %13
  store i32 %sub5, i32* %shift, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %15 = load i32, i32* %i, align 4
  %16 = load i32, i32* %bytes, align 4
  %cmp = icmp slt i32 %15, %16
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %17 = load i32, i32* %cp.addr, align 4
  %18 = load i32, i32* %shift, align 4
  %shr7 = lshr i32 %17, %18
  %19 = load %struct.utf_t*, %struct.utf_t** getelementptr inbounds ([6 x %struct.utf_t*], [6 x %struct.utf_t*]* @utf, i32 0, i32 0), align 16
  %mask8 = getelementptr inbounds %struct.utf_t, %struct.utf_t* %19, i32 0, i32 0
  %20 = load i8, i8* %mask8, align 4
  %conv9 = sext i8 %20 to i32
  %and10 = and i32 %shr7, %conv9
  %21 = load %struct.utf_t*, %struct.utf_t** getelementptr inbounds ([6 x %struct.utf_t*], [6 x %struct.utf_t*]* @utf, i32 0, i32 0), align 16
  %lead11 = getelementptr inbounds %struct.utf_t, %struct.utf_t* %21, i32 0, i32 1
  %22 = load i8, i8* %lead11, align 1
  %conv12 = sext i8 %22 to i32
  %or13 = or i32 %and10, %conv12
  %conv14 = trunc i32 %or13 to i8
  %23 = load i32, i32* %i, align 4
  %arrayidx15 = getelementptr inbounds [5 x i8], [5 x i8]* @to_utf8.ret, i32 0, i32 %23
  store i8 %conv14, i8* %arrayidx15, align 1
  %24 = load %struct.utf_t*, %struct.utf_t** getelementptr inbounds ([6 x %struct.utf_t*], [6 x %struct.utf_t*]* @utf, i32 0, i32 0), align 16
  %bits_stored16 = getelementptr inbounds %struct.utf_t, %struct.utf_t* %24, i32 0, i32 4
  %25 = load i32, i32* %bits_stored16, align 4
  %26 = load i32, i32* %shift, align 4
  %sub17 = sub nsw i32 %26, %25
  store i32 %sub17, i32* %shift, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %27 = load i32, i32* %i, align 4
  %inc = add nsw i32 %27, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %28 = load i32, i32* %bytes, align 4
  %arrayidx18 = getelementptr inbounds [5 x i8], [5 x i8]* @to_utf8.ret, i32 0, i32 %28
  store i8 0, i8* %arrayidx18, align 1
  ret i8* getelementptr inbounds ([5 x i8], [5 x i8]* @to_utf8.ret, i32 0, i32 0)
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @to_cp(i8* %chr) #0 {
entry:
  %chr.addr = alloca i8*, align 4
  %bytes = alloca i32, align 4
  %shift = alloca i32, align 4
  %codep = alloca i32, align 4
  %i = alloca i32, align 4
  store i8* %chr, i8** %chr.addr, align 4
  %0 = load i8*, i8** %chr.addr, align 4
  %1 = load i8, i8* %0, align 1
  %call = call i32 @utf8_len(i8 signext %1)
  store i32 %call, i32* %bytes, align 4
  %2 = load %struct.utf_t*, %struct.utf_t** getelementptr inbounds ([6 x %struct.utf_t*], [6 x %struct.utf_t*]* @utf, i32 0, i32 0), align 16
  %bits_stored = getelementptr inbounds %struct.utf_t, %struct.utf_t* %2, i32 0, i32 4
  %3 = load i32, i32* %bits_stored, align 4
  %4 = load i32, i32* %bytes, align 4
  %sub = sub nsw i32 %4, 1
  %mul = mul nsw i32 %3, %sub
  store i32 %mul, i32* %shift, align 4
  %5 = load i8*, i8** %chr.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %5, i32 1
  store i8* %incdec.ptr, i8** %chr.addr, align 4
  %6 = load i8, i8* %5, align 1
  %conv = sext i8 %6 to i32
  %7 = load i32, i32* %bytes, align 4
  %arrayidx = getelementptr inbounds [6 x %struct.utf_t*], [6 x %struct.utf_t*]* @utf, i32 0, i32 %7
  %8 = load %struct.utf_t*, %struct.utf_t** %arrayidx, align 4
  %mask = getelementptr inbounds %struct.utf_t, %struct.utf_t* %8, i32 0, i32 0
  %9 = load i8, i8* %mask, align 4
  %conv1 = sext i8 %9 to i32
  %and = and i32 %conv, %conv1
  %10 = load i32, i32* %shift, align 4
  %shl = shl i32 %and, %10
  store i32 %shl, i32* %codep, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %11 = load i32, i32* %i, align 4
  %12 = load i32, i32* %bytes, align 4
  %cmp = icmp slt i32 %11, %12
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %13 = load %struct.utf_t*, %struct.utf_t** getelementptr inbounds ([6 x %struct.utf_t*], [6 x %struct.utf_t*]* @utf, i32 0, i32 0), align 16
  %bits_stored3 = getelementptr inbounds %struct.utf_t, %struct.utf_t* %13, i32 0, i32 4
  %14 = load i32, i32* %bits_stored3, align 4
  %15 = load i32, i32* %shift, align 4
  %sub4 = sub nsw i32 %15, %14
  store i32 %sub4, i32* %shift, align 4
  %16 = load i8*, i8** %chr.addr, align 4
  %17 = load i8, i8* %16, align 1
  %conv5 = sext i8 %17 to i32
  %18 = load %struct.utf_t*, %struct.utf_t** getelementptr inbounds ([6 x %struct.utf_t*], [6 x %struct.utf_t*]* @utf, i32 0, i32 0), align 16
  %mask6 = getelementptr inbounds %struct.utf_t, %struct.utf_t* %18, i32 0, i32 0
  %19 = load i8, i8* %mask6, align 4
  %conv7 = sext i8 %19 to i32
  %and8 = and i32 %conv5, %conv7
  %20 = load i32, i32* %shift, align 4
  %shl9 = shl i32 %and8, %20
  %21 = load i32, i32* %codep, align 4
  %or = or i32 %21, %shl9
  store i32 %or, i32* %codep, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %22 = load i32, i32* %i, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %i, align 4
  %23 = load i8*, i8** %chr.addr, align 4
  %incdec.ptr10 = getelementptr inbounds i8, i8* %23, i32 1
  store i8* %incdec.ptr10, i8** %chr.addr, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %24 = load i32, i32* %codep, align 4
  ret i32 %24
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %in = alloca i32*, align 4
  %input = alloca [6 x i32], align 16
  %utf8 = alloca i8*, align 4
  %codepoint = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [6 x i32]* %input to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([6 x i32]* @__const.main.input to i8*), i32 24, i1 false)
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str, i32 0, i32 0))
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.6, i32 0, i32 0))
  %arraydecay = getelementptr inbounds [6 x i32], [6 x i32]* %input, i32 0, i32 0
  store i32* %arraydecay, i32** %in, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc13, %entry
  %1 = load i32*, i32** %in, align 4
  %2 = load i32, i32* %1, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %for.body, label %for.end14

for.body:                                         ; preds = %for.cond
  %3 = load i32*, i32** %in, align 4
  %4 = load i32, i32* %3, align 4
  %call2 = call i8* @to_utf8(i32 %4)
  store i8* %call2, i8** %utf8, align 4
  %5 = load i8*, i8** %utf8, align 4
  %call3 = call i32 @to_cp(i8* %5)
  store i32 %call3, i32* %codepoint, align 4
  %6 = load i8*, i8** %utf8, align 4
  %7 = load i32, i32* %codepoint, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.7, i32 0, i32 0), i8* %6, i32 %7)
  store i32 0, i32* %i, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %for.body
  %8 = load i8*, i8** %utf8, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %8, i32 %9
  %10 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %10 to i32
  %tobool6 = icmp ne i32 %conv, 0
  br i1 %tobool6, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond5
  %11 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %11, 4
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond5
  %12 = phi i1 [ false, %for.cond5 ], [ %cmp, %land.rhs ]
  br i1 %12, label %for.body8, label %for.end

for.body8:                                        ; preds = %land.end
  %13 = load i8*, i8** %utf8, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds i8, i8* %13, i32 %14
  %15 = load i8, i8* %arrayidx9, align 1
  %conv10 = sext i8 %15 to i32
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.8, i32 0, i32 0), i32 %conv10)
  br label %for.inc

for.inc:                                          ; preds = %for.body8
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond5

for.end:                                          ; preds = %land.end
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i32 0, i32 0))
  br label %for.inc13

for.inc13:                                        ; preds = %for.end
  %17 = load i32*, i32** %in, align 4
  %incdec.ptr = getelementptr inbounds i32, i32* %17, i32 1
  store i32* %incdec.ptr, i32** %in, align 4
  br label %for.cond

for.end14:                                        ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare i32 @printf(i8* %0, ...) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %tobool = icmp ne %struct.utf_t* %1, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i8, i8* %ch.addr, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %2 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i8, i8* %mask, align 4
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv1 = sext i8 %5 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %neg = xor i32 %conv1, -1
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = xor 4294967295:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %and = and i32 %conv, %neg
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = xor 4294967295:i32, %1
%3:i8 = var
%4:i32 = sext %3
%5:i32 = and %2, %4
infer %5

; *****
; For LLVM instruction:
;  %8 = load i8, i8* %lead, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv2 = sext i8 %8 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %and, %conv2
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = xor 4294967295:i32, %1
%3:i8 = var
%4:i32 = sext %3
%5:i32 = and %2, %4
%6:i8 = var
%7:i32 = sext %6
%8:i1 = eq %5, %7
infer %8

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %9, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp4 = icmp sgt i32 %11, 4
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i32 = xor 4294967295:i32, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -33
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i32 = xor 4294967295:i32, %1
%3:i8 = var
%4:i32 = sext %3
%5:i32 = and %2, %4
infer %5


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var
%1:i32 = sext %0
%2:i32 = xor 4294967295:i32, %1

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i32 = xor 4294967295:i32, %1
%3:i8 = var
%4:i32 = sext %3
%5:i32 = and %2, %4
%6:i8 = var
%7:i32 = sext %6
%8:i1 = eq %5, %7
infer %8


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for utf8_len()

; entering Souper's runOnFunction() for to_utf8()

; ModuleID = './UTF-8_encode_and_decode.c.bc'
source_filename = "./UTF-8_encode_and_decode.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.utf_t = type { i8, i8, i32, i32, i32 }

@.compoundliteral = internal global %struct.utf_t { i8 63, i8 -128, i32 0, i32 0, i32 6 }, align 4
@.compoundliteral.1 = internal global %struct.utf_t { i8 127, i8 0, i32 0, i32 127, i32 7 }, align 4
@.compoundliteral.2 = internal global %struct.utf_t { i8 31, i8 -64, i32 128, i32 2047, i32 5 }, align 4
@.compoundliteral.3 = internal global %struct.utf_t { i8 15, i8 -32, i32 2048, i32 65535, i32 4 }, align 4
@.compoundliteral.4 = internal global %struct.utf_t { i8 7, i8 -16, i32 65536, i32 1114111, i32 3 }, align 4
@.compoundliteral.5 = internal global %struct.utf_t zeroinitializer, align 4
@utf = hidden global [6 x %struct.utf_t*] [%struct.utf_t* @.compoundliteral, %struct.utf_t* @.compoundliteral.1, %struct.utf_t* @.compoundliteral.2, %struct.utf_t* @.compoundliteral.3, %struct.utf_t* @.compoundliteral.4, %struct.utf_t* @.compoundliteral.5], align 16
@to_utf8.ret = internal global [5 x i8] zeroinitializer, align 1
@__const.main.input = private unnamed_addr constant [6 x i32] [i32 65, i32 246, i32 1046, i32 8364, i32 119070, i32 0], align 16
@.str = private unnamed_addr constant [42 x i8] c"Character  Unicode  UTF-8 encoding (hex)\0A\00", align 1
@.str.6 = private unnamed_addr constant [42 x i8] c"----------------------------------------\0A\00", align 1
@.str.7 = private unnamed_addr constant [21 x i8] c"%s          U+%-7.4x\00", align 1
@.str.8 = private unnamed_addr constant [6 x i8] c"%hhx \00", align 1
@.str.9 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @codepoint_len(i32 %cp) #0 {
entry:
  %cp.addr = alloca i32, align 4
  %len = alloca i32, align 4
  %u = alloca %struct.utf_t**, align 4
  store i32 %cp, i32* %cp.addr, align 4
  store i32 0, i32* %len, align 4
  store %struct.utf_t** getelementptr inbounds ([6 x %struct.utf_t*], [6 x %struct.utf_t*]* @utf, i32 0, i32 0), %struct.utf_t*** %u, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.utf_t**, %struct.utf_t*** %u, align 4
  %1 = load %struct.utf_t*, %struct.utf_t** %0, align 4
  %tobool = icmp ne %struct.utf_t* %1, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %cp.addr, align 4
  %3 = load %struct.utf_t**, %struct.utf_t*** %u, align 4
  %4 = load %struct.utf_t*, %struct.utf_t** %3, align 4
  %beg = getelementptr inbounds %struct.utf_t, %struct.utf_t* %4, i32 0, i32 2
  %5 = load i32, i32* %beg, align 4
  %cmp = icmp uge i32 %2, %5
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %6 = load i32, i32* %cp.addr, align 4
  %7 = load %struct.utf_t**, %struct.utf_t*** %u, align 4
  %8 = load %struct.utf_t*, %struct.utf_t** %7, align 4
  %end = getelementptr inbounds %struct.utf_t, %struct.utf_t* %8, i32 0, i32 3
  %9 = load i32, i32* %end, align 4
  %cmp1 = icmp ule i32 %6, %9
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  br label %for.end

if.end:                                           ; preds = %land.lhs.true, %for.body
  %10 = load i32, i32* %len, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %len, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %11 = load %struct.utf_t**, %struct.utf_t*** %u, align 4
  %incdec.ptr = getelementptr inbounds %struct.utf_t*, %struct.utf_t** %11, i32 1
  store %struct.utf_t** %incdec.ptr, %struct.utf_t*** %u, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  %12 = load i32, i32* %len, align 4
  %cmp2 = icmp sgt i32 %12, 4
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %for.end
  call void @exit(i32 1) #4
  unreachable

if.end4:                                          ; preds = %for.end
  %13 = load i32, i32* %len, align 4
  ret i32 %13
}

; Function Attrs: noreturn
declare void @exit(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @utf8_len(i8 signext %ch) #0 {
entry:
  %ch.addr = alloca i8, align 1
  %len = alloca i32, align 4
  %u = alloca %struct.utf_t**, align 4
  store i8 %ch, i8* %ch.addr, align 1
  store i32 0, i32* %len, align 4
  store %struct.utf_t** getelementptr inbounds ([6 x %struct.utf_t*], [6 x %struct.utf_t*]* @utf, i32 0, i32 0), %struct.utf_t*** %u, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.utf_t**, %struct.utf_t*** %u, align 4
  %1 = load %struct.utf_t*, %struct.utf_t** %0, align 4
  %tobool = icmp ne %struct.utf_t* %1, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8, i8* %ch.addr, align 1
  %conv = sext i8 %2 to i32
  %3 = load %struct.utf_t**, %struct.utf_t*** %u, align 4
  %4 = load %struct.utf_t*, %struct.utf_t** %3, align 4
  %mask = getelementptr inbounds %struct.utf_t, %struct.utf_t* %4, i32 0, i32 0
  %5 = load i8, i8* %mask, align 4
  %conv1 = sext i8 %5 to i32
  %neg = xor i32 %conv1, -1
  %and = and i32 %conv, %neg
  %6 = load %struct.utf_t**, %struct.utf_t*** %u, align 4
  %7 = load %struct.utf_t*, %struct.utf_t** %6, align 4
  %lead = getelementptr inbounds %struct.utf_t, %struct.utf_t* %7, i32 0, i32 1
  %8 = load i8, i8* %lead, align 1
  %conv2 = sext i8 %8 to i32
  %cmp = icmp eq i32 %and, %conv2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.end

if.end:                                           ; preds = %for.body
  %9 = load i32, i32* %len, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %len, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %10 = load %struct.utf_t**, %struct.utf_t*** %u, align 4
  %incdec.ptr = getelementptr inbounds %struct.utf_t*, %struct.utf_t** %10, i32 1
  store %struct.utf_t** %incdec.ptr, %struct.utf_t*** %u, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  %11 = load i32, i32* %len, align 4
  %cmp4 = icmp sgt i32 %11, 4
  br i1 %cmp4, label %if.then6, label %if.end7

if.then6:                                         ; preds = %for.end
  call void @exit(i32 1) #4
  unreachable

if.end7:                                          ; preds = %for.end
  %12 = load i32, i32* %len, align 4
  ret i32 %12
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @to_utf8(i32 %cp) #0 {
entry:
  %cp.addr = alloca i32, align 4
  %bytes = alloca i32, align 4
  %shift = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %cp, i32* %cp.addr, align 4
  %0 = load i32, i32* %cp.addr, align 4
  %call = call i32 @codepoint_len(i32 %0)
  store i32 %call, i32* %bytes, align 4
  %1 = load %struct.utf_t*, %struct.utf_t** getelementptr inbounds ([6 x %struct.utf_t*], [6 x %struct.utf_t*]* @utf, i32 0, i32 0), align 16
  %bits_stored = getelementptr inbounds %struct.utf_t, %struct.utf_t* %1, i32 0, i32 4
  %2 = load i32, i32* %bits_stored, align 4
  %3 = load i32, i32* %bytes, align 4
  %sub = sub nsw i32 %3, 1
  %mul = mul nsw i32 %2, %sub
  store i32 %mul, i32* %shift, align 4
  %4 = load i32, i32* %cp.addr, align 4
  %5 = load i32, i32* %shift, align 4
  %shr = lshr i32 %4, %5
  %6 = load i32, i32* %bytes, align 4
  %arrayidx = getelementptr inbounds [6 x %struct.utf_t*], [6 x %struct.utf_t*]* @utf, i32 0, i32 %6
  %7 = load %struct.utf_t*, %struct.utf_t** %arrayidx, align 4
  %mask = getelementptr inbounds %struct.utf_t, %struct.utf_t* %7, i32 0, i32 0
  %8 = load i8, i8* %mask, align 4
  %conv = sext i8 %8 to i32
  %and = and i32 %shr, %conv
  %9 = load i32, i32* %bytes, align 4
  %arrayidx1 = getelementptr inbounds [6 x %struct.utf_t*], [6 x %struct.utf_t*]* @utf, i32 0, i32 %9
  %10 = load %struct.utf_t*, %struct.utf_t** %arrayidx1, align 4
  %lead = getelementptr inbounds %struct.utf_t, %struct.utf_t* %10, i32 0, i32 1
  %11 = load i8, i8* %lead, align 1
  %conv2 = sext i8 %11 to i32
  %or = or i32 %and, %conv2
  %conv3 = trunc i32 %or to i8
  store i8 %conv3, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @to_utf8.ret, i32 0, i32 0), align 1
  %12 = load %struct.utf_t*, %struct.utf_t** getelementptr inbounds ([6 x %struct.utf_t*], [6 x %struct.utf_t*]* @utf, i32 0, i32 0), align 16
  %bits_stored4 = getelementptr inbounds %struct.utf_t, %struct.utf_t* %12, i32 0, i32 4
  %13 = load i32, i32* %bits_stored4, align 4
  %14 = load i32, i32* %shift, align 4
  %sub5 = sub nsw i32 %14, %13
  store i32 %sub5, i32* %shift, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %15 = load i32, i32* %i, align 4
  %16 = load i32, i32* %bytes, align 4
  %cmp = icmp slt i32 %15, %16
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %17 = load i32, i32* %cp.addr, align 4
  %18 = load i32, i32* %shift, align 4
  %shr7 = lshr i32 %17, %18
  %19 = load %struct.utf_t*, %struct.utf_t** getelementptr inbounds ([6 x %struct.utf_t*], [6 x %struct.utf_t*]* @utf, i32 0, i32 0), align 16
  %mask8 = getelementptr inbounds %struct.utf_t, %struct.utf_t* %19, i32 0, i32 0
  %20 = load i8, i8* %mask8, align 4
  %conv9 = sext i8 %20 to i32
  %and10 = and i32 %shr7, %conv9
  %21 = load %struct.utf_t*, %struct.utf_t** getelementptr inbounds ([6 x %struct.utf_t*], [6 x %struct.utf_t*]* @utf, i32 0, i32 0), align 16
  %lead11 = getelementptr inbounds %struct.utf_t, %struct.utf_t* %21, i32 0, i32 1
  %22 = load i8, i8* %lead11, align 1
  %conv12 = sext i8 %22 to i32
  %or13 = or i32 %and10, %conv12
  %conv14 = trunc i32 %or13 to i8
  %23 = load i32, i32* %i, align 4
  %arrayidx15 = getelementptr inbounds [5 x i8], [5 x i8]* @to_utf8.ret, i32 0, i32 %23
  store i8 %conv14, i8* %arrayidx15, align 1
  %24 = load %struct.utf_t*, %struct.utf_t** getelementptr inbounds ([6 x %struct.utf_t*], [6 x %struct.utf_t*]* @utf, i32 0, i32 0), align 16
  %bits_stored16 = getelementptr inbounds %struct.utf_t, %struct.utf_t* %24, i32 0, i32 4
  %25 = load i32, i32* %bits_stored16, align 4
  %26 = load i32, i32* %shift, align 4
  %sub17 = sub nsw i32 %26, %25
  store i32 %sub17, i32* %shift, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %27 = load i32, i32* %i, align 4
  %inc = add nsw i32 %27, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %28 = load i32, i32* %bytes, align 4
  %arrayidx18 = getelementptr inbounds [5 x i8], [5 x i8]* @to_utf8.ret, i32 0, i32 %28
  store i8 0, i8* %arrayidx18, align 1
  ret i8* getelementptr inbounds ([5 x i8], [5 x i8]* @to_utf8.ret, i32 0, i32 0)
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @to_cp(i8* %chr) #0 {
entry:
  %chr.addr = alloca i8*, align 4
  %bytes = alloca i32, align 4
  %shift = alloca i32, align 4
  %codep = alloca i32, align 4
  %i = alloca i32, align 4
  store i8* %chr, i8** %chr.addr, align 4
  %0 = load i8*, i8** %chr.addr, align 4
  %1 = load i8, i8* %0, align 1
  %call = call i32 @utf8_len(i8 signext %1)
  store i32 %call, i32* %bytes, align 4
  %2 = load %struct.utf_t*, %struct.utf_t** getelementptr inbounds ([6 x %struct.utf_t*], [6 x %struct.utf_t*]* @utf, i32 0, i32 0), align 16
  %bits_stored = getelementptr inbounds %struct.utf_t, %struct.utf_t* %2, i32 0, i32 4
  %3 = load i32, i32* %bits_stored, align 4
  %4 = load i32, i32* %bytes, align 4
  %sub = sub nsw i32 %4, 1
  %mul = mul nsw i32 %3, %sub
  store i32 %mul, i32* %shift, align 4
  %5 = load i8*, i8** %chr.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %5, i32 1
  store i8* %incdec.ptr, i8** %chr.addr, align 4
  %6 = load i8, i8* %5, align 1
  %conv = sext i8 %6 to i32
  %7 = load i32, i32* %bytes, align 4
  %arrayidx = getelementptr inbounds [6 x %struct.utf_t*], [6 x %struct.utf_t*]* @utf, i32 0, i32 %7
  %8 = load %struct.utf_t*, %struct.utf_t** %arrayidx, align 4
  %mask = getelementptr inbounds %struct.utf_t, %struct.utf_t* %8, i32 0, i32 0
  %9 = load i8, i8* %mask, align 4
  %conv1 = sext i8 %9 to i32
  %and = and i32 %conv, %conv1
  %10 = load i32, i32* %shift, align 4
  %shl = shl i32 %and, %10
  store i32 %shl, i32* %codep, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %11 = load i32, i32* %i, align 4
  %12 = load i32, i32* %bytes, align 4
  %cmp = icmp slt i32 %11, %12
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %13 = load %struct.utf_t*, %struct.utf_t** getelementptr inbounds ([6 x %struct.utf_t*], [6 x %struct.utf_t*]* @utf, i32 0, i32 0), align 16
  %bits_stored3 = getelementptr inbounds %struct.utf_t, %struct.utf_t* %13, i32 0, i32 4
  %14 = load i32, i32* %bits_stored3, align 4
  %15 = load i32, i32* %shift, align 4
  %sub4 = sub nsw i32 %15, %14
  store i32 %sub4, i32* %shift, align 4
  %16 = load i8*, i8** %chr.addr, align 4
  %17 = load i8, i8* %16, align 1
  %conv5 = sext i8 %17 to i32
  %18 = load %struct.utf_t*, %struct.utf_t** getelementptr inbounds ([6 x %struct.utf_t*], [6 x %struct.utf_t*]* @utf, i32 0, i32 0), align 16
  %mask6 = getelementptr inbounds %struct.utf_t, %struct.utf_t* %18, i32 0, i32 0
  %19 = load i8, i8* %mask6, align 4
  %conv7 = sext i8 %19 to i32
  %and8 = and i32 %conv5, %conv7
  %20 = load i32, i32* %shift, align 4
  %shl9 = shl i32 %and8, %20
  %21 = load i32, i32* %codep, align 4
  %or = or i32 %21, %shl9
  store i32 %or, i32* %codep, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %22 = load i32, i32* %i, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %i, align 4
  %23 = load i8*, i8** %chr.addr, align 4
  %incdec.ptr10 = getelementptr inbounds i8, i8* %23, i32 1
  store i8* %incdec.ptr10, i8** %chr.addr, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %24 = load i32, i32* %codep, align 4
  ret i32 %24
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %in = alloca i32*, align 4
  %input = alloca [6 x i32], align 16
  %utf8 = alloca i8*, align 4
  %codepoint = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [6 x i32]* %input to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([6 x i32]* @__const.main.input to i8*), i32 24, i1 false)
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str, i32 0, i32 0))
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.6, i32 0, i32 0))
  %arraydecay = getelementptr inbounds [6 x i32], [6 x i32]* %input, i32 0, i32 0
  store i32* %arraydecay, i32** %in, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc13, %entry
  %1 = load i32*, i32** %in, align 4
  %2 = load i32, i32* %1, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %for.body, label %for.end14

for.body:                                         ; preds = %for.cond
  %3 = load i32*, i32** %in, align 4
  %4 = load i32, i32* %3, align 4
  %call2 = call i8* @to_utf8(i32 %4)
  store i8* %call2, i8** %utf8, align 4
  %5 = load i8*, i8** %utf8, align 4
  %call3 = call i32 @to_cp(i8* %5)
  store i32 %call3, i32* %codepoint, align 4
  %6 = load i8*, i8** %utf8, align 4
  %7 = load i32, i32* %codepoint, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.7, i32 0, i32 0), i8* %6, i32 %7)
  store i32 0, i32* %i, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %for.body
  %8 = load i8*, i8** %utf8, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %8, i32 %9
  %10 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %10 to i32
  %tobool6 = icmp ne i32 %conv, 0
  br i1 %tobool6, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond5
  %11 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %11, 4
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond5
  %12 = phi i1 [ false, %for.cond5 ], [ %cmp, %land.rhs ]
  br i1 %12, label %for.body8, label %for.end

for.body8:                                        ; preds = %land.end
  %13 = load i8*, i8** %utf8, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds i8, i8* %13, i32 %14
  %15 = load i8, i8* %arrayidx9, align 1
  %conv10 = sext i8 %15 to i32
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.8, i32 0, i32 0), i32 %conv10)
  br label %for.inc

for.inc:                                          ; preds = %for.body8
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond5

for.end:                                          ; preds = %land.end
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i32 0, i32 0))
  br label %for.inc13

for.inc13:                                        ; preds = %for.end
  %17 = load i32*, i32** %in, align 4
  %incdec.ptr = getelementptr inbounds i32, i32* %17, i32 1
  store i32* %incdec.ptr, i32** %in, align 4
  br label %for.cond

for.end14:                                        ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare i32 @printf(i8* %0, ...) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %cp.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 @codepoint_len(i32 %0)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %bits_stored, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %bytes, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %3, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %2, %sub
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i32 = mulnsw %0, %2
infer %3

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %cp.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %shift, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %shr = lshr i32 %4, %5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %0, %1
infer %2 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %bytes, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i8, i8* %mask, align 4
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %8 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %and = and i32 %shr, %conv
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %0, %1
%3:i8 = var
%4:i32 = sext %3
%5:i32 = and %2, %4
infer %5 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %bytes, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i8, i8* %lead, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv2 = sext i8 %11 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %or = or i32 %and, %conv2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %0, %1
%3:i8 = var
%4:i32 = sext %3
%5:i32 = and %2, %4
%6:i8 = var
%7:i32 = sext %6
%8:i32 = or %5, %7
infer %8 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %conv3 = trunc i32 %or to i8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %0, %1
%3:i8 = var
%4:i32 = sext %3
%5:i32 = and %2, %4
%6:i8 = var
%7:i32 = sext %6
%8:i32 = or %5, %7
%9:i8 = trunc %8
infer %9

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %bits_stored4, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %shift, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub5 = sub nsw i32 %14, %13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %bytes, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %15, %16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %cp.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %shift, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %shr7 = lshr i32 %17, %18
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %0, %1
infer %2 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %20 = load i8, i8* %mask8, align 4
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv9 = sext i8 %20 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %and10 = and i32 %shr7, %conv9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %0, %1
%3:i8 = var
%4:i32 = sext %3
%5:i32 = and %2, %4
infer %5 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %22 = load i8, i8* %lead11, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv12 = sext i8 %22 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %or13 = or i32 %and10, %conv12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %0, %1
%3:i8 = var
%4:i32 = sext %3
%5:i32 = and %2, %4
%6:i8 = var
%7:i32 = sext %6
%8:i32 = or %5, %7
infer %8 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %conv14 = trunc i32 %or13 to i8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %0, %1
%3:i8 = var
%4:i32 = sext %3
%5:i32 = and %2, %4
%6:i8 = var
%7:i32 = sext %6
%8:i32 = or %5, %7
%9:i8 = trunc %8
infer %9

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %bits_stored16, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %shift, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub17 = sub nsw i32 %26, %25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %27, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %bytes, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i32 = mulnsw %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2013020161
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %0, %1
infer %2 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -268435328
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
infer %1 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %0, %1
%3:i8 = var
%4:i32 = sext %3
%5:i32 = and %2, %4
infer %5 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 191
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 64
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = lshr %0, %1

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %0, %1
%3:i8 = var
%4:i32 = sext %3
%5:i32 = and %2, %4
%6:i8 = var
%7:i32 = sext %6
%8:i32 = or %5, %7
infer %8 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 255
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = var
%2:i32 = lshr %0, %1

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i32 = var
%1:i32 = var
%2:i32 = lshr %0, %1
%3:i8 = var
%4:i32 = sext %3
%5:i32 = and %2, %4

Cost = 3
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 7 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = lshr %0, %1
%3:i8 = var
%4:i32 = sext %3
%5:i32 = and %2, %4
%6:i8 = var
%7:i32 = sext %6
%8:i32 = or %5, %7
%9:i8 = trunc %8
infer %9


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for to_utf8()

; entering Souper's runOnFunction() for to_cp()

; ModuleID = './UTF-8_encode_and_decode.c.bc'
source_filename = "./UTF-8_encode_and_decode.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.utf_t = type { i8, i8, i32, i32, i32 }

@.compoundliteral = internal global %struct.utf_t { i8 63, i8 -128, i32 0, i32 0, i32 6 }, align 4
@.compoundliteral.1 = internal global %struct.utf_t { i8 127, i8 0, i32 0, i32 127, i32 7 }, align 4
@.compoundliteral.2 = internal global %struct.utf_t { i8 31, i8 -64, i32 128, i32 2047, i32 5 }, align 4
@.compoundliteral.3 = internal global %struct.utf_t { i8 15, i8 -32, i32 2048, i32 65535, i32 4 }, align 4
@.compoundliteral.4 = internal global %struct.utf_t { i8 7, i8 -16, i32 65536, i32 1114111, i32 3 }, align 4
@.compoundliteral.5 = internal global %struct.utf_t zeroinitializer, align 4
@utf = hidden global [6 x %struct.utf_t*] [%struct.utf_t* @.compoundliteral, %struct.utf_t* @.compoundliteral.1, %struct.utf_t* @.compoundliteral.2, %struct.utf_t* @.compoundliteral.3, %struct.utf_t* @.compoundliteral.4, %struct.utf_t* @.compoundliteral.5], align 16
@to_utf8.ret = internal global [5 x i8] zeroinitializer, align 1
@__const.main.input = private unnamed_addr constant [6 x i32] [i32 65, i32 246, i32 1046, i32 8364, i32 119070, i32 0], align 16
@.str = private unnamed_addr constant [42 x i8] c"Character  Unicode  UTF-8 encoding (hex)\0A\00", align 1
@.str.6 = private unnamed_addr constant [42 x i8] c"----------------------------------------\0A\00", align 1
@.str.7 = private unnamed_addr constant [21 x i8] c"%s          U+%-7.4x\00", align 1
@.str.8 = private unnamed_addr constant [6 x i8] c"%hhx \00", align 1
@.str.9 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @codepoint_len(i32 %cp) #0 {
entry:
  %cp.addr = alloca i32, align 4
  %len = alloca i32, align 4
  %u = alloca %struct.utf_t**, align 4
  store i32 %cp, i32* %cp.addr, align 4
  store i32 0, i32* %len, align 4
  store %struct.utf_t** getelementptr inbounds ([6 x %struct.utf_t*], [6 x %struct.utf_t*]* @utf, i32 0, i32 0), %struct.utf_t*** %u, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.utf_t**, %struct.utf_t*** %u, align 4
  %1 = load %struct.utf_t*, %struct.utf_t** %0, align 4
  %tobool = icmp ne %struct.utf_t* %1, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %cp.addr, align 4
  %3 = load %struct.utf_t**, %struct.utf_t*** %u, align 4
  %4 = load %struct.utf_t*, %struct.utf_t** %3, align 4
  %beg = getelementptr inbounds %struct.utf_t, %struct.utf_t* %4, i32 0, i32 2
  %5 = load i32, i32* %beg, align 4
  %cmp = icmp uge i32 %2, %5
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %6 = load i32, i32* %cp.addr, align 4
  %7 = load %struct.utf_t**, %struct.utf_t*** %u, align 4
  %8 = load %struct.utf_t*, %struct.utf_t** %7, align 4
  %end = getelementptr inbounds %struct.utf_t, %struct.utf_t* %8, i32 0, i32 3
  %9 = load i32, i32* %end, align 4
  %cmp1 = icmp ule i32 %6, %9
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  br label %for.end

if.end:                                           ; preds = %land.lhs.true, %for.body
  %10 = load i32, i32* %len, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %len, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %11 = load %struct.utf_t**, %struct.utf_t*** %u, align 4
  %incdec.ptr = getelementptr inbounds %struct.utf_t*, %struct.utf_t** %11, i32 1
  store %struct.utf_t** %incdec.ptr, %struct.utf_t*** %u, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  %12 = load i32, i32* %len, align 4
  %cmp2 = icmp sgt i32 %12, 4
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %for.end
  call void @exit(i32 1) #4
  unreachable

if.end4:                                          ; preds = %for.end
  %13 = load i32, i32* %len, align 4
  ret i32 %13
}

; Function Attrs: noreturn
declare void @exit(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @utf8_len(i8 signext %ch) #0 {
entry:
  %ch.addr = alloca i8, align 1
  %len = alloca i32, align 4
  %u = alloca %struct.utf_t**, align 4
  store i8 %ch, i8* %ch.addr, align 1
  store i32 0, i32* %len, align 4
  store %struct.utf_t** getelementptr inbounds ([6 x %struct.utf_t*], [6 x %struct.utf_t*]* @utf, i32 0, i32 0), %struct.utf_t*** %u, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.utf_t**, %struct.utf_t*** %u, align 4
  %1 = load %struct.utf_t*, %struct.utf_t** %0, align 4
  %tobool = icmp ne %struct.utf_t* %1, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8, i8* %ch.addr, align 1
  %conv = sext i8 %2 to i32
  %3 = load %struct.utf_t**, %struct.utf_t*** %u, align 4
  %4 = load %struct.utf_t*, %struct.utf_t** %3, align 4
  %mask = getelementptr inbounds %struct.utf_t, %struct.utf_t* %4, i32 0, i32 0
  %5 = load i8, i8* %mask, align 4
  %conv1 = sext i8 %5 to i32
  %neg = xor i32 %conv1, -1
  %and = and i32 %conv, %neg
  %6 = load %struct.utf_t**, %struct.utf_t*** %u, align 4
  %7 = load %struct.utf_t*, %struct.utf_t** %6, align 4
  %lead = getelementptr inbounds %struct.utf_t, %struct.utf_t* %7, i32 0, i32 1
  %8 = load i8, i8* %lead, align 1
  %conv2 = sext i8 %8 to i32
  %cmp = icmp eq i32 %and, %conv2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.end

if.end:                                           ; preds = %for.body
  %9 = load i32, i32* %len, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %len, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %10 = load %struct.utf_t**, %struct.utf_t*** %u, align 4
  %incdec.ptr = getelementptr inbounds %struct.utf_t*, %struct.utf_t** %10, i32 1
  store %struct.utf_t** %incdec.ptr, %struct.utf_t*** %u, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  %11 = load i32, i32* %len, align 4
  %cmp4 = icmp sgt i32 %11, 4
  br i1 %cmp4, label %if.then6, label %if.end7

if.then6:                                         ; preds = %for.end
  call void @exit(i32 1) #4
  unreachable

if.end7:                                          ; preds = %for.end
  %12 = load i32, i32* %len, align 4
  ret i32 %12
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @to_utf8(i32 %cp) #0 {
entry:
  %cp.addr = alloca i32, align 4
  %bytes = alloca i32, align 4
  %shift = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %cp, i32* %cp.addr, align 4
  %0 = load i32, i32* %cp.addr, align 4
  %call = call i32 @codepoint_len(i32 %0)
  store i32 %call, i32* %bytes, align 4
  %1 = load %struct.utf_t*, %struct.utf_t** getelementptr inbounds ([6 x %struct.utf_t*], [6 x %struct.utf_t*]* @utf, i32 0, i32 0), align 16
  %bits_stored = getelementptr inbounds %struct.utf_t, %struct.utf_t* %1, i32 0, i32 4
  %2 = load i32, i32* %bits_stored, align 4
  %3 = load i32, i32* %bytes, align 4
  %sub = sub nsw i32 %3, 1
  %mul = mul nsw i32 %2, %sub
  store i32 %mul, i32* %shift, align 4
  %4 = load i32, i32* %cp.addr, align 4
  %5 = load i32, i32* %shift, align 4
  %shr = lshr i32 %4, %5
  %6 = load i32, i32* %bytes, align 4
  %arrayidx = getelementptr inbounds [6 x %struct.utf_t*], [6 x %struct.utf_t*]* @utf, i32 0, i32 %6
  %7 = load %struct.utf_t*, %struct.utf_t** %arrayidx, align 4
  %mask = getelementptr inbounds %struct.utf_t, %struct.utf_t* %7, i32 0, i32 0
  %8 = load i8, i8* %mask, align 4
  %conv = sext i8 %8 to i32
  %and = and i32 %shr, %conv
  %9 = load i32, i32* %bytes, align 4
  %arrayidx1 = getelementptr inbounds [6 x %struct.utf_t*], [6 x %struct.utf_t*]* @utf, i32 0, i32 %9
  %10 = load %struct.utf_t*, %struct.utf_t** %arrayidx1, align 4
  %lead = getelementptr inbounds %struct.utf_t, %struct.utf_t* %10, i32 0, i32 1
  %11 = load i8, i8* %lead, align 1
  %conv2 = sext i8 %11 to i32
  %or = or i32 %and, %conv2
  %conv3 = trunc i32 %or to i8
  store i8 %conv3, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @to_utf8.ret, i32 0, i32 0), align 1
  %12 = load %struct.utf_t*, %struct.utf_t** getelementptr inbounds ([6 x %struct.utf_t*], [6 x %struct.utf_t*]* @utf, i32 0, i32 0), align 16
  %bits_stored4 = getelementptr inbounds %struct.utf_t, %struct.utf_t* %12, i32 0, i32 4
  %13 = load i32, i32* %bits_stored4, align 4
  %14 = load i32, i32* %shift, align 4
  %sub5 = sub nsw i32 %14, %13
  store i32 %sub5, i32* %shift, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %15 = load i32, i32* %i, align 4
  %16 = load i32, i32* %bytes, align 4
  %cmp = icmp slt i32 %15, %16
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %17 = load i32, i32* %cp.addr, align 4
  %18 = load i32, i32* %shift, align 4
  %shr7 = lshr i32 %17, %18
  %19 = load %struct.utf_t*, %struct.utf_t** getelementptr inbounds ([6 x %struct.utf_t*], [6 x %struct.utf_t*]* @utf, i32 0, i32 0), align 16
  %mask8 = getelementptr inbounds %struct.utf_t, %struct.utf_t* %19, i32 0, i32 0
  %20 = load i8, i8* %mask8, align 4
  %conv9 = sext i8 %20 to i32
  %and10 = and i32 %shr7, %conv9
  %21 = load %struct.utf_t*, %struct.utf_t** getelementptr inbounds ([6 x %struct.utf_t*], [6 x %struct.utf_t*]* @utf, i32 0, i32 0), align 16
  %lead11 = getelementptr inbounds %struct.utf_t, %struct.utf_t* %21, i32 0, i32 1
  %22 = load i8, i8* %lead11, align 1
  %conv12 = sext i8 %22 to i32
  %or13 = or i32 %and10, %conv12
  %conv14 = trunc i32 %or13 to i8
  %23 = load i32, i32* %i, align 4
  %arrayidx15 = getelementptr inbounds [5 x i8], [5 x i8]* @to_utf8.ret, i32 0, i32 %23
  store i8 %conv14, i8* %arrayidx15, align 1
  %24 = load %struct.utf_t*, %struct.utf_t** getelementptr inbounds ([6 x %struct.utf_t*], [6 x %struct.utf_t*]* @utf, i32 0, i32 0), align 16
  %bits_stored16 = getelementptr inbounds %struct.utf_t, %struct.utf_t* %24, i32 0, i32 4
  %25 = load i32, i32* %bits_stored16, align 4
  %26 = load i32, i32* %shift, align 4
  %sub17 = sub nsw i32 %26, %25
  store i32 %sub17, i32* %shift, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %27 = load i32, i32* %i, align 4
  %inc = add nsw i32 %27, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %28 = load i32, i32* %bytes, align 4
  %arrayidx18 = getelementptr inbounds [5 x i8], [5 x i8]* @to_utf8.ret, i32 0, i32 %28
  store i8 0, i8* %arrayidx18, align 1
  ret i8* getelementptr inbounds ([5 x i8], [5 x i8]* @to_utf8.ret, i32 0, i32 0)
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @to_cp(i8* %chr) #0 {
entry:
  %chr.addr = alloca i8*, align 4
  %bytes = alloca i32, align 4
  %shift = alloca i32, align 4
  %codep = alloca i32, align 4
  %i = alloca i32, align 4
  store i8* %chr, i8** %chr.addr, align 4
  %0 = load i8*, i8** %chr.addr, align 4
  %1 = load i8, i8* %0, align 1
  %call = call i32 @utf8_len(i8 signext %1)
  store i32 %call, i32* %bytes, align 4
  %2 = load %struct.utf_t*, %struct.utf_t** getelementptr inbounds ([6 x %struct.utf_t*], [6 x %struct.utf_t*]* @utf, i32 0, i32 0), align 16
  %bits_stored = getelementptr inbounds %struct.utf_t, %struct.utf_t* %2, i32 0, i32 4
  %3 = load i32, i32* %bits_stored, align 4
  %4 = load i32, i32* %bytes, align 4
  %sub = sub nsw i32 %4, 1
  %mul = mul nsw i32 %3, %sub
  store i32 %mul, i32* %shift, align 4
  %5 = load i8*, i8** %chr.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %5, i32 1
  store i8* %incdec.ptr, i8** %chr.addr, align 4
  %6 = load i8, i8* %5, align 1
  %conv = sext i8 %6 to i32
  %7 = load i32, i32* %bytes, align 4
  %arrayidx = getelementptr inbounds [6 x %struct.utf_t*], [6 x %struct.utf_t*]* @utf, i32 0, i32 %7
  %8 = load %struct.utf_t*, %struct.utf_t** %arrayidx, align 4
  %mask = getelementptr inbounds %struct.utf_t, %struct.utf_t* %8, i32 0, i32 0
  %9 = load i8, i8* %mask, align 4
  %conv1 = sext i8 %9 to i32
  %and = and i32 %conv, %conv1
  %10 = load i32, i32* %shift, align 4
  %shl = shl i32 %and, %10
  store i32 %shl, i32* %codep, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %11 = load i32, i32* %i, align 4
  %12 = load i32, i32* %bytes, align 4
  %cmp = icmp slt i32 %11, %12
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %13 = load %struct.utf_t*, %struct.utf_t** getelementptr inbounds ([6 x %struct.utf_t*], [6 x %struct.utf_t*]* @utf, i32 0, i32 0), align 16
  %bits_stored3 = getelementptr inbounds %struct.utf_t, %struct.utf_t* %13, i32 0, i32 4
  %14 = load i32, i32* %bits_stored3, align 4
  %15 = load i32, i32* %shift, align 4
  %sub4 = sub nsw i32 %15, %14
  store i32 %sub4, i32* %shift, align 4
  %16 = load i8*, i8** %chr.addr, align 4
  %17 = load i8, i8* %16, align 1
  %conv5 = sext i8 %17 to i32
  %18 = load %struct.utf_t*, %struct.utf_t** getelementptr inbounds ([6 x %struct.utf_t*], [6 x %struct.utf_t*]* @utf, i32 0, i32 0), align 16
  %mask6 = getelementptr inbounds %struct.utf_t, %struct.utf_t* %18, i32 0, i32 0
  %19 = load i8, i8* %mask6, align 4
  %conv7 = sext i8 %19 to i32
  %and8 = and i32 %conv5, %conv7
  %20 = load i32, i32* %shift, align 4
  %shl9 = shl i32 %and8, %20
  %21 = load i32, i32* %codep, align 4
  %or = or i32 %21, %shl9
  store i32 %or, i32* %codep, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %22 = load i32, i32* %i, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %i, align 4
  %23 = load i8*, i8** %chr.addr, align 4
  %incdec.ptr10 = getelementptr inbounds i8, i8* %23, i32 1
  store i8* %incdec.ptr10, i8** %chr.addr, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %24 = load i32, i32* %codep, align 4
  ret i32 %24
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %in = alloca i32*, align 4
  %input = alloca [6 x i32], align 16
  %utf8 = alloca i8*, align 4
  %codepoint = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [6 x i32]* %input to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([6 x i32]* @__const.main.input to i8*), i32 24, i1 false)
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str, i32 0, i32 0))
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.6, i32 0, i32 0))
  %arraydecay = getelementptr inbounds [6 x i32], [6 x i32]* %input, i32 0, i32 0
  store i32* %arraydecay, i32** %in, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc13, %entry
  %1 = load i32*, i32** %in, align 4
  %2 = load i32, i32* %1, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %for.body, label %for.end14

for.body:                                         ; preds = %for.cond
  %3 = load i32*, i32** %in, align 4
  %4 = load i32, i32* %3, align 4
  %call2 = call i8* @to_utf8(i32 %4)
  store i8* %call2, i8** %utf8, align 4
  %5 = load i8*, i8** %utf8, align 4
  %call3 = call i32 @to_cp(i8* %5)
  store i32 %call3, i32* %codepoint, align 4
  %6 = load i8*, i8** %utf8, align 4
  %7 = load i32, i32* %codepoint, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.7, i32 0, i32 0), i8* %6, i32 %7)
  store i32 0, i32* %i, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %for.body
  %8 = load i8*, i8** %utf8, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %8, i32 %9
  %10 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %10 to i32
  %tobool6 = icmp ne i32 %conv, 0
  br i1 %tobool6, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond5
  %11 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %11, 4
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond5
  %12 = phi i1 [ false, %for.cond5 ], [ %cmp, %land.rhs ]
  br i1 %12, label %for.body8, label %for.end

for.body8:                                        ; preds = %land.end
  %13 = load i8*, i8** %utf8, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds i8, i8* %13, i32 %14
  %15 = load i8, i8* %arrayidx9, align 1
  %conv10 = sext i8 %15 to i32
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.8, i32 0, i32 0), i32 %conv10)
  br label %for.inc

for.inc:                                          ; preds = %for.body8
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond5

for.end:                                          ; preds = %land.end
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i32 0, i32 0))
  br label %for.inc13

for.inc13:                                        ; preds = %for.end
  %17 = load i32*, i32** %in, align 4
  %incdec.ptr = getelementptr inbounds i32, i32* %17, i32 1
  store i32* %incdec.ptr, i32** %in, align 4
  br label %for.cond

for.end14:                                        ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare i32 @printf(i8* %0, ...) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i8, i8* %0, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 @utf8_len(i8 signext %1)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %bits_stored, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %bytes, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %4, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %3, %sub
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i32 = mulnsw %0, %2
infer %3

; *****
; For LLVM instruction:
;  %6 = load i8, i8* %5, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %6 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %bytes, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i8, i8* %mask, align 4
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv1 = sext i8 %9 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %and = and i32 %conv, %conv1
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i32 = and %1, %3
infer %4

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %shift, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %shl = shl i32 %and, %10
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i32 = and %1, %3
%5:i32 = var
%6:i32 = shl %4, %5
infer %6

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %bytes, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %11, %12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %bits_stored3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %shift, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub4 = sub nsw i32 %15, %14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %17 = load i8, i8* %16, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv5 = sext i8 %17 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %19 = load i8, i8* %mask6, align 4
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv7 = sext i8 %19 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %and8 = and i32 %conv5, %conv7
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i32 = and %1, %3
infer %4

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %shift, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %shl9 = shl i32 %and8, %20
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i32 = and %1, %3
%5:i32 = var
%6:i32 = shl %4, %5
infer %6

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %codep, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %or = or i32 %21, %shl9
; Looking for a replacement for:
%0:i32 = var
%1:i8 = var
%2:i32 = sext %1
%3:i8 = var
%4:i32 = sext %3
%5:i32 = and %2, %4
%6:i32 = var
%7:i32 = shl %5, %6
%8:i32 = or %0, %7
infer %8

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %22, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %codep, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 5 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i32 = and %1, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 123
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 7 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i32 = and %1, %3
%5:i32 = var
%6:i32 = shl %4, %5
infer %6


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 238
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i32 = and %1, %3

Cost = 3
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i8 = var
%2:i32 = sext %1
%3:i8 = var
%4:i32 = sext %3
%5:i32 = and %2, %4
%6:i32 = var
%7:i32 = shl %5, %6
%8:i32 = or %0, %7
infer %8


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -33
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i32 = and %1, %3

Cost = 3
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i32 = and %1, %3
%5:i32 = var
%6:i32 = shl %4, %5

Cost = 4
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 7 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for to_cp()

; entering Souper's runOnFunction() for main()

; ModuleID = './UTF-8_encode_and_decode.c.bc'
source_filename = "./UTF-8_encode_and_decode.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.utf_t = type { i8, i8, i32, i32, i32 }

@.compoundliteral = internal global %struct.utf_t { i8 63, i8 -128, i32 0, i32 0, i32 6 }, align 4
@.compoundliteral.1 = internal global %struct.utf_t { i8 127, i8 0, i32 0, i32 127, i32 7 }, align 4
@.compoundliteral.2 = internal global %struct.utf_t { i8 31, i8 -64, i32 128, i32 2047, i32 5 }, align 4
@.compoundliteral.3 = internal global %struct.utf_t { i8 15, i8 -32, i32 2048, i32 65535, i32 4 }, align 4
@.compoundliteral.4 = internal global %struct.utf_t { i8 7, i8 -16, i32 65536, i32 1114111, i32 3 }, align 4
@.compoundliteral.5 = internal global %struct.utf_t zeroinitializer, align 4
@utf = hidden global [6 x %struct.utf_t*] [%struct.utf_t* @.compoundliteral, %struct.utf_t* @.compoundliteral.1, %struct.utf_t* @.compoundliteral.2, %struct.utf_t* @.compoundliteral.3, %struct.utf_t* @.compoundliteral.4, %struct.utf_t* @.compoundliteral.5], align 16
@to_utf8.ret = internal global [5 x i8] zeroinitializer, align 1
@__const.main.input = private unnamed_addr constant [6 x i32] [i32 65, i32 246, i32 1046, i32 8364, i32 119070, i32 0], align 16
@.str = private unnamed_addr constant [42 x i8] c"Character  Unicode  UTF-8 encoding (hex)\0A\00", align 1
@.str.6 = private unnamed_addr constant [42 x i8] c"----------------------------------------\0A\00", align 1
@.str.7 = private unnamed_addr constant [21 x i8] c"%s          U+%-7.4x\00", align 1
@.str.8 = private unnamed_addr constant [6 x i8] c"%hhx \00", align 1
@.str.9 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @codepoint_len(i32 %cp) #0 {
entry:
  %cp.addr = alloca i32, align 4
  %len = alloca i32, align 4
  %u = alloca %struct.utf_t**, align 4
  store i32 %cp, i32* %cp.addr, align 4
  store i32 0, i32* %len, align 4
  store %struct.utf_t** getelementptr inbounds ([6 x %struct.utf_t*], [6 x %struct.utf_t*]* @utf, i32 0, i32 0), %struct.utf_t*** %u, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.utf_t**, %struct.utf_t*** %u, align 4
  %1 = load %struct.utf_t*, %struct.utf_t** %0, align 4
  %tobool = icmp ne %struct.utf_t* %1, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %cp.addr, align 4
  %3 = load %struct.utf_t**, %struct.utf_t*** %u, align 4
  %4 = load %struct.utf_t*, %struct.utf_t** %3, align 4
  %beg = getelementptr inbounds %struct.utf_t, %struct.utf_t* %4, i32 0, i32 2
  %5 = load i32, i32* %beg, align 4
  %cmp = icmp uge i32 %2, %5
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %6 = load i32, i32* %cp.addr, align 4
  %7 = load %struct.utf_t**, %struct.utf_t*** %u, align 4
  %8 = load %struct.utf_t*, %struct.utf_t** %7, align 4
  %end = getelementptr inbounds %struct.utf_t, %struct.utf_t* %8, i32 0, i32 3
  %9 = load i32, i32* %end, align 4
  %cmp1 = icmp ule i32 %6, %9
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  br label %for.end

if.end:                                           ; preds = %land.lhs.true, %for.body
  %10 = load i32, i32* %len, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %len, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %11 = load %struct.utf_t**, %struct.utf_t*** %u, align 4
  %incdec.ptr = getelementptr inbounds %struct.utf_t*, %struct.utf_t** %11, i32 1
  store %struct.utf_t** %incdec.ptr, %struct.utf_t*** %u, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  %12 = load i32, i32* %len, align 4
  %cmp2 = icmp sgt i32 %12, 4
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %for.end
  call void @exit(i32 1) #4
  unreachable

if.end4:                                          ; preds = %for.end
  %13 = load i32, i32* %len, align 4
  ret i32 %13
}

; Function Attrs: noreturn
declare void @exit(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @utf8_len(i8 signext %ch) #0 {
entry:
  %ch.addr = alloca i8, align 1
  %len = alloca i32, align 4
  %u = alloca %struct.utf_t**, align 4
  store i8 %ch, i8* %ch.addr, align 1
  store i32 0, i32* %len, align 4
  store %struct.utf_t** getelementptr inbounds ([6 x %struct.utf_t*], [6 x %struct.utf_t*]* @utf, i32 0, i32 0), %struct.utf_t*** %u, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.utf_t**, %struct.utf_t*** %u, align 4
  %1 = load %struct.utf_t*, %struct.utf_t** %0, align 4
  %tobool = icmp ne %struct.utf_t* %1, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8, i8* %ch.addr, align 1
  %conv = sext i8 %2 to i32
  %3 = load %struct.utf_t**, %struct.utf_t*** %u, align 4
  %4 = load %struct.utf_t*, %struct.utf_t** %3, align 4
  %mask = getelementptr inbounds %struct.utf_t, %struct.utf_t* %4, i32 0, i32 0
  %5 = load i8, i8* %mask, align 4
  %conv1 = sext i8 %5 to i32
  %neg = xor i32 %conv1, -1
  %and = and i32 %conv, %neg
  %6 = load %struct.utf_t**, %struct.utf_t*** %u, align 4
  %7 = load %struct.utf_t*, %struct.utf_t** %6, align 4
  %lead = getelementptr inbounds %struct.utf_t, %struct.utf_t* %7, i32 0, i32 1
  %8 = load i8, i8* %lead, align 1
  %conv2 = sext i8 %8 to i32
  %cmp = icmp eq i32 %and, %conv2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.end

if.end:                                           ; preds = %for.body
  %9 = load i32, i32* %len, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %len, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %10 = load %struct.utf_t**, %struct.utf_t*** %u, align 4
  %incdec.ptr = getelementptr inbounds %struct.utf_t*, %struct.utf_t** %10, i32 1
  store %struct.utf_t** %incdec.ptr, %struct.utf_t*** %u, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  %11 = load i32, i32* %len, align 4
  %cmp4 = icmp sgt i32 %11, 4
  br i1 %cmp4, label %if.then6, label %if.end7

if.then6:                                         ; preds = %for.end
  call void @exit(i32 1) #4
  unreachable

if.end7:                                          ; preds = %for.end
  %12 = load i32, i32* %len, align 4
  ret i32 %12
}

; Function Attrs: noinline nounwind optnone
define hidden i8* @to_utf8(i32 %cp) #0 {
entry:
  %cp.addr = alloca i32, align 4
  %bytes = alloca i32, align 4
  %shift = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %cp, i32* %cp.addr, align 4
  %0 = load i32, i32* %cp.addr, align 4
  %call = call i32 @codepoint_len(i32 %0)
  store i32 %call, i32* %bytes, align 4
  %1 = load %struct.utf_t*, %struct.utf_t** getelementptr inbounds ([6 x %struct.utf_t*], [6 x %struct.utf_t*]* @utf, i32 0, i32 0), align 16
  %bits_stored = getelementptr inbounds %struct.utf_t, %struct.utf_t* %1, i32 0, i32 4
  %2 = load i32, i32* %bits_stored, align 4
  %3 = load i32, i32* %bytes, align 4
  %sub = sub nsw i32 %3, 1
  %mul = mul nsw i32 %2, %sub
  store i32 %mul, i32* %shift, align 4
  %4 = load i32, i32* %cp.addr, align 4
  %5 = load i32, i32* %shift, align 4
  %shr = lshr i32 %4, %5
  %6 = load i32, i32* %bytes, align 4
  %arrayidx = getelementptr inbounds [6 x %struct.utf_t*], [6 x %struct.utf_t*]* @utf, i32 0, i32 %6
  %7 = load %struct.utf_t*, %struct.utf_t** %arrayidx, align 4
  %mask = getelementptr inbounds %struct.utf_t, %struct.utf_t* %7, i32 0, i32 0
  %8 = load i8, i8* %mask, align 4
  %conv = sext i8 %8 to i32
  %and = and i32 %shr, %conv
  %9 = load i32, i32* %bytes, align 4
  %arrayidx1 = getelementptr inbounds [6 x %struct.utf_t*], [6 x %struct.utf_t*]* @utf, i32 0, i32 %9
  %10 = load %struct.utf_t*, %struct.utf_t** %arrayidx1, align 4
  %lead = getelementptr inbounds %struct.utf_t, %struct.utf_t* %10, i32 0, i32 1
  %11 = load i8, i8* %lead, align 1
  %conv2 = sext i8 %11 to i32
  %or = or i32 %and, %conv2
  %conv3 = trunc i32 %or to i8
  store i8 %conv3, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @to_utf8.ret, i32 0, i32 0), align 1
  %12 = load %struct.utf_t*, %struct.utf_t** getelementptr inbounds ([6 x %struct.utf_t*], [6 x %struct.utf_t*]* @utf, i32 0, i32 0), align 16
  %bits_stored4 = getelementptr inbounds %struct.utf_t, %struct.utf_t* %12, i32 0, i32 4
  %13 = load i32, i32* %bits_stored4, align 4
  %14 = load i32, i32* %shift, align 4
  %sub5 = sub nsw i32 %14, %13
  store i32 %sub5, i32* %shift, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %15 = load i32, i32* %i, align 4
  %16 = load i32, i32* %bytes, align 4
  %cmp = icmp slt i32 %15, %16
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %17 = load i32, i32* %cp.addr, align 4
  %18 = load i32, i32* %shift, align 4
  %shr7 = lshr i32 %17, %18
  %19 = load %struct.utf_t*, %struct.utf_t** getelementptr inbounds ([6 x %struct.utf_t*], [6 x %struct.utf_t*]* @utf, i32 0, i32 0), align 16
  %mask8 = getelementptr inbounds %struct.utf_t, %struct.utf_t* %19, i32 0, i32 0
  %20 = load i8, i8* %mask8, align 4
  %conv9 = sext i8 %20 to i32
  %and10 = and i32 %shr7, %conv9
  %21 = load %struct.utf_t*, %struct.utf_t** getelementptr inbounds ([6 x %struct.utf_t*], [6 x %struct.utf_t*]* @utf, i32 0, i32 0), align 16
  %lead11 = getelementptr inbounds %struct.utf_t, %struct.utf_t* %21, i32 0, i32 1
  %22 = load i8, i8* %lead11, align 1
  %conv12 = sext i8 %22 to i32
  %or13 = or i32 %and10, %conv12
  %conv14 = trunc i32 %or13 to i8
  %23 = load i32, i32* %i, align 4
  %arrayidx15 = getelementptr inbounds [5 x i8], [5 x i8]* @to_utf8.ret, i32 0, i32 %23
  store i8 %conv14, i8* %arrayidx15, align 1
  %24 = load %struct.utf_t*, %struct.utf_t** getelementptr inbounds ([6 x %struct.utf_t*], [6 x %struct.utf_t*]* @utf, i32 0, i32 0), align 16
  %bits_stored16 = getelementptr inbounds %struct.utf_t, %struct.utf_t* %24, i32 0, i32 4
  %25 = load i32, i32* %bits_stored16, align 4
  %26 = load i32, i32* %shift, align 4
  %sub17 = sub nsw i32 %26, %25
  store i32 %sub17, i32* %shift, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %27 = load i32, i32* %i, align 4
  %inc = add nsw i32 %27, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %28 = load i32, i32* %bytes, align 4
  %arrayidx18 = getelementptr inbounds [5 x i8], [5 x i8]* @to_utf8.ret, i32 0, i32 %28
  store i8 0, i8* %arrayidx18, align 1
  ret i8* getelementptr inbounds ([5 x i8], [5 x i8]* @to_utf8.ret, i32 0, i32 0)
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @to_cp(i8* %chr) #0 {
entry:
  %chr.addr = alloca i8*, align 4
  %bytes = alloca i32, align 4
  %shift = alloca i32, align 4
  %codep = alloca i32, align 4
  %i = alloca i32, align 4
  store i8* %chr, i8** %chr.addr, align 4
  %0 = load i8*, i8** %chr.addr, align 4
  %1 = load i8, i8* %0, align 1
  %call = call i32 @utf8_len(i8 signext %1)
  store i32 %call, i32* %bytes, align 4
  %2 = load %struct.utf_t*, %struct.utf_t** getelementptr inbounds ([6 x %struct.utf_t*], [6 x %struct.utf_t*]* @utf, i32 0, i32 0), align 16
  %bits_stored = getelementptr inbounds %struct.utf_t, %struct.utf_t* %2, i32 0, i32 4
  %3 = load i32, i32* %bits_stored, align 4
  %4 = load i32, i32* %bytes, align 4
  %sub = sub nsw i32 %4, 1
  %mul = mul nsw i32 %3, %sub
  store i32 %mul, i32* %shift, align 4
  %5 = load i8*, i8** %chr.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %5, i32 1
  store i8* %incdec.ptr, i8** %chr.addr, align 4
  %6 = load i8, i8* %5, align 1
  %conv = sext i8 %6 to i32
  %7 = load i32, i32* %bytes, align 4
  %arrayidx = getelementptr inbounds [6 x %struct.utf_t*], [6 x %struct.utf_t*]* @utf, i32 0, i32 %7
  %8 = load %struct.utf_t*, %struct.utf_t** %arrayidx, align 4
  %mask = getelementptr inbounds %struct.utf_t, %struct.utf_t* %8, i32 0, i32 0
  %9 = load i8, i8* %mask, align 4
  %conv1 = sext i8 %9 to i32
  %and = and i32 %conv, %conv1
  %10 = load i32, i32* %shift, align 4
  %shl = shl i32 %and, %10
  store i32 %shl, i32* %codep, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %11 = load i32, i32* %i, align 4
  %12 = load i32, i32* %bytes, align 4
  %cmp = icmp slt i32 %11, %12
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %13 = load %struct.utf_t*, %struct.utf_t** getelementptr inbounds ([6 x %struct.utf_t*], [6 x %struct.utf_t*]* @utf, i32 0, i32 0), align 16
  %bits_stored3 = getelementptr inbounds %struct.utf_t, %struct.utf_t* %13, i32 0, i32 4
  %14 = load i32, i32* %bits_stored3, align 4
  %15 = load i32, i32* %shift, align 4
  %sub4 = sub nsw i32 %15, %14
  store i32 %sub4, i32* %shift, align 4
  %16 = load i8*, i8** %chr.addr, align 4
  %17 = load i8, i8* %16, align 1
  %conv5 = sext i8 %17 to i32
  %18 = load %struct.utf_t*, %struct.utf_t** getelementptr inbounds ([6 x %struct.utf_t*], [6 x %struct.utf_t*]* @utf, i32 0, i32 0), align 16
  %mask6 = getelementptr inbounds %struct.utf_t, %struct.utf_t* %18, i32 0, i32 0
  %19 = load i8, i8* %mask6, align 4
  %conv7 = sext i8 %19 to i32
  %and8 = and i32 %conv5, %conv7
  %20 = load i32, i32* %shift, align 4
  %shl9 = shl i32 %and8, %20
  %21 = load i32, i32* %codep, align 4
  %or = or i32 %21, %shl9
  store i32 %or, i32* %codep, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %22 = load i32, i32* %i, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %i, align 4
  %23 = load i8*, i8** %chr.addr, align 4
  %incdec.ptr10 = getelementptr inbounds i8, i8* %23, i32 1
  store i8* %incdec.ptr10, i8** %chr.addr, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %24 = load i32, i32* %codep, align 4
  ret i32 %24
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %in = alloca i32*, align 4
  %input = alloca [6 x i32], align 16
  %utf8 = alloca i8*, align 4
  %codepoint = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [6 x i32]* %input to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([6 x i32]* @__const.main.input to i8*), i32 24, i1 false)
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str, i32 0, i32 0))
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.6, i32 0, i32 0))
  %arraydecay = getelementptr inbounds [6 x i32], [6 x i32]* %input, i32 0, i32 0
  store i32* %arraydecay, i32** %in, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc13, %entry
  %1 = load i32*, i32** %in, align 4
  %2 = load i32, i32* %1, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %for.body, label %for.end14

for.body:                                         ; preds = %for.cond
  %3 = load i32*, i32** %in, align 4
  %4 = load i32, i32* %3, align 4
  %call2 = call i8* @to_utf8(i32 %4)
  store i8* %call2, i8** %utf8, align 4
  %5 = load i8*, i8** %utf8, align 4
  %call3 = call i32 @to_cp(i8* %5)
  store i32 %call3, i32* %codepoint, align 4
  %6 = load i8*, i8** %utf8, align 4
  %7 = load i32, i32* %codepoint, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.7, i32 0, i32 0), i8* %6, i32 %7)
  store i32 0, i32* %i, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %for.body
  %8 = load i8*, i8** %utf8, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %8, i32 %9
  %10 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %10 to i32
  %tobool6 = icmp ne i32 %conv, 0
  br i1 %tobool6, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond5
  %11 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %11, 4
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond5
  %12 = phi i1 [ false, %for.cond5 ], [ %cmp, %land.rhs ]
  br i1 %12, label %for.body8, label %for.end

for.body8:                                        ; preds = %land.end
  %13 = load i8*, i8** %utf8, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds i8, i8* %13, i32 %14
  %15 = load i8, i8* %arrayidx9, align 1
  %conv10 = sext i8 %15 to i32
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.8, i32 0, i32 0), i32 %conv10)
  br label %for.inc

for.inc:                                          ; preds = %for.body8
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond5

for.end:                                          ; preds = %land.end
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i32 0, i32 0))
  br label %for.inc13

for.inc13:                                        ; preds = %for.end
  %17 = load i32*, i32** %in, align 4
  %incdec.ptr = getelementptr inbounds i32, i32* %17, i32 1
  store i32* %incdec.ptr, i32** %in, align 4
  br label %for.cond

for.end14:                                        ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare i32 @printf(i8* %0, ...) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %2, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call3 = call i32 @to_cp(i8* %5)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %codepoint, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i8, i8* %arrayidx, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %10 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %tobool6 = icmp ne i32 %conv, 0
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %11, 4
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 4:i32
infer %1

; *****
; For LLVM instruction:
;  %12 = phi i1 [ false, %for.cond5 ], [ %cmp, %land.rhs ]
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i8, i8* %arrayidx9, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv10 = sext i8 %15 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %16, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 0:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 4:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
