
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for create_huffman_codes()

; ModuleID = './Huffman_coding.c.bc'
source_filename = "./Huffman_coding.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.huffcode = type { i32, i32 }
%struct.huffheap = type { i32*, i32, i32, i32, i32* }

@.str = private unnamed_addr constant [40 x i8] c"this is an example for huffman encoding\00", align 1
@test = hidden global i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i32 0, i32 0), align 4
@.str.1 = private unnamed_addr constant [12 x i8] c"%c (%d) %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.huffcode** @create_huffman_codes(i32* %freqs) #0 {
entry:
  %retval = alloca %struct.huffcode**, align 4
  %freqs.addr = alloca i32*, align 4
  %codes = alloca %struct.huffcode**, align 4
  %heap = alloca %struct.huffheap*, align 4
  %efreqs = alloca [512 x i32], align 16
  %preds = alloca [512 x i32], align 16
  %i = alloca i32, align 4
  %extf = alloca i32, align 4
  %r1 = alloca i32, align 4
  %r2 = alloca i32, align 4
  %bc = alloca i32, align 4
  %bn = alloca i32, align 4
  %ix = alloca i32, align 4
  store i32* %freqs, i32** %freqs.addr, align 4
  store i32 256, i32* %extf, align 4
  %arraydecay = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 0
  %0 = bitcast i32* %arraydecay to i8*
  %1 = load i32*, i32** %freqs.addr, align 4
  %2 = bitcast i32* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 4 %2, i32 1024, i1 false)
  %arrayidx = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 256
  %3 = bitcast i32* %arrayidx to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %3, i8 0, i32 1024, i1 false)
  %arraydecay1 = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 0
  %call = call %struct.huffheap* @_heap_create(i32 512, i32* %arraydecay1)
  store %struct.huffheap* %call, %struct.huffheap** %heap, align 4
  %4 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  %cmp = icmp eq %struct.huffheap* %4, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.huffcode** null, %struct.huffcode*** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %5 = load i32, i32* %i, align 4
  %cmp2 = icmp slt i32 %5, 256
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 %6
  %7 = load i32, i32* %arrayidx3, align 4
  %cmp4 = icmp sgt i32 %7, 0
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %for.body
  %8 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  %9 = load i32, i32* %i, align 4
  call void @_heap_add(%struct.huffheap* %8, i32 %9)
  br label %if.end6

if.end6:                                          ; preds = %if.then5, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end6
  %10 = load i32, i32* %i, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end
  %11 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  %n = getelementptr inbounds %struct.huffheap, %struct.huffheap* %11, i32 0, i32 1
  %12 = load i32, i32* %n, align 4
  %cmp7 = icmp sgt i32 %12, 1
  br i1 %cmp7, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %13 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  %call8 = call i32 @_heap_remove(%struct.huffheap* %13)
  store i32 %call8, i32* %r1, align 4
  %14 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  %call9 = call i32 @_heap_remove(%struct.huffheap* %14)
  store i32 %call9, i32* %r2, align 4
  %15 = load i32, i32* %r1, align 4
  %arrayidx10 = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 %15
  %16 = load i32, i32* %arrayidx10, align 4
  %17 = load i32, i32* %r2, align 4
  %arrayidx11 = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 %17
  %18 = load i32, i32* %arrayidx11, align 4
  %add = add nsw i32 %16, %18
  %19 = load i32, i32* %extf, align 4
  %arrayidx12 = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 %19
  store i32 %add, i32* %arrayidx12, align 4
  %20 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  %21 = load i32, i32* %extf, align 4
  call void @_heap_add(%struct.huffheap* %20, i32 %21)
  %22 = load i32, i32* %extf, align 4
  %23 = load i32, i32* %r1, align 4
  %arrayidx13 = getelementptr inbounds [512 x i32], [512 x i32]* %preds, i32 0, i32 %23
  store i32 %22, i32* %arrayidx13, align 4
  %24 = load i32, i32* %extf, align 4
  %sub = sub nsw i32 0, %24
  %25 = load i32, i32* %r2, align 4
  %arrayidx14 = getelementptr inbounds [512 x i32], [512 x i32]* %preds, i32 0, i32 %25
  store i32 %sub, i32* %arrayidx14, align 4
  %26 = load i32, i32* %extf, align 4
  %inc15 = add nsw i32 %26, 1
  store i32 %inc15, i32* %extf, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %27 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  %call16 = call i32 @_heap_remove(%struct.huffheap* %27)
  store i32 %call16, i32* %r1, align 4
  %28 = load i32, i32* %r1, align 4
  %29 = load i32, i32* %r1, align 4
  %arrayidx17 = getelementptr inbounds [512 x i32], [512 x i32]* %preds, i32 0, i32 %29
  store i32 %28, i32* %arrayidx17, align 4
  %30 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  call void @_heap_destroy(%struct.huffheap* %30)
  %call18 = call noalias i8* @malloc(i32 1024)
  %31 = bitcast i8* %call18 to %struct.huffcode**
  store %struct.huffcode** %31, %struct.huffcode*** %codes, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond19

for.cond19:                                       ; preds = %for.inc42, %while.end
  %32 = load i32, i32* %i, align 4
  %cmp20 = icmp slt i32 %32, 256
  br i1 %cmp20, label %for.body21, label %for.end44

for.body21:                                       ; preds = %for.cond19
  store i32 0, i32* %bc, align 4
  store i32 0, i32* %bn, align 4
  %33 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 %33
  %34 = load i32, i32* %arrayidx22, align 4
  %cmp23 = icmp eq i32 %34, 0
  br i1 %cmp23, label %if.then24, label %if.end26

if.then24:                                        ; preds = %for.body21
  %35 = load %struct.huffcode**, %struct.huffcode*** %codes, align 4
  %36 = load i32, i32* %i, align 4
  %arrayidx25 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %35, i32 %36
  store %struct.huffcode* null, %struct.huffcode** %arrayidx25, align 4
  br label %for.inc42

if.end26:                                         ; preds = %for.body21
  %37 = load i32, i32* %i, align 4
  store i32 %37, i32* %ix, align 4
  br label %while.cond27

while.cond27:                                     ; preds = %while.body31, %if.end26
  %38 = load i32, i32* %ix, align 4
  %arrayidx28 = getelementptr inbounds [512 x i32], [512 x i32]* %preds, i32 0, i32 %38
  %39 = load i32, i32* %arrayidx28, align 4
  %call29 = call i32 @abs(i32 %39) #5
  %40 = load i32, i32* %ix, align 4
  %cmp30 = icmp ne i32 %call29, %40
  br i1 %cmp30, label %while.body31, label %while.end37

while.body31:                                     ; preds = %while.cond27
  %41 = load i32, i32* %ix, align 4
  %arrayidx32 = getelementptr inbounds [512 x i32], [512 x i32]* %preds, i32 0, i32 %41
  %42 = load i32, i32* %arrayidx32, align 4
  %cmp33 = icmp sge i32 %42, 0
  %43 = zext i1 %cmp33 to i64
  %cond = select i1 %cmp33, i32 1, i32 0
  %44 = load i32, i32* %bn, align 4
  %shl = shl i32 %cond, %44
  %45 = load i32, i32* %bc, align 4
  %or = or i32 %45, %shl
  store i32 %or, i32* %bc, align 4
  %46 = load i32, i32* %ix, align 4
  %arrayidx34 = getelementptr inbounds [512 x i32], [512 x i32]* %preds, i32 0, i32 %46
  %47 = load i32, i32* %arrayidx34, align 4
  %call35 = call i32 @abs(i32 %47) #5
  store i32 %call35, i32* %ix, align 4
  %48 = load i32, i32* %bn, align 4
  %inc36 = add nsw i32 %48, 1
  store i32 %inc36, i32* %bn, align 4
  br label %while.cond27

while.end37:                                      ; preds = %while.cond27
  %call38 = call noalias i8* @malloc(i32 8)
  %49 = bitcast i8* %call38 to %struct.huffcode*
  %50 = load %struct.huffcode**, %struct.huffcode*** %codes, align 4
  %51 = load i32, i32* %i, align 4
  %arrayidx39 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %50, i32 %51
  store %struct.huffcode* %49, %struct.huffcode** %arrayidx39, align 4
  %52 = load i32, i32* %bn, align 4
  %53 = load %struct.huffcode**, %struct.huffcode*** %codes, align 4
  %54 = load i32, i32* %i, align 4
  %arrayidx40 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %53, i32 %54
  %55 = load %struct.huffcode*, %struct.huffcode** %arrayidx40, align 4
  %nbits = getelementptr inbounds %struct.huffcode, %struct.huffcode* %55, i32 0, i32 0
  store i32 %52, i32* %nbits, align 4
  %56 = load i32, i32* %bc, align 4
  %57 = load %struct.huffcode**, %struct.huffcode*** %codes, align 4
  %58 = load i32, i32* %i, align 4
  %arrayidx41 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %57, i32 %58
  %59 = load %struct.huffcode*, %struct.huffcode** %arrayidx41, align 4
  %code = getelementptr inbounds %struct.huffcode, %struct.huffcode* %59, i32 0, i32 1
  store i32 %56, i32* %code, align 4
  br label %for.inc42

for.inc42:                                        ; preds = %while.end37, %if.then24
  %60 = load i32, i32* %i, align 4
  %inc43 = add nsw i32 %60, 1
  store i32 %inc43, i32* %i, align 4
  br label %for.cond19

for.end44:                                        ; preds = %for.cond19
  %61 = load %struct.huffcode**, %struct.huffcode*** %codes, align 4
  store %struct.huffcode** %61, %struct.huffcode*** %retval, align 4
  br label %return

return:                                           ; preds = %for.end44, %if.then
  %62 = load %struct.huffcode**, %struct.huffcode*** %retval, align 4
  ret %struct.huffcode** %62
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define internal %struct.huffheap* @_heap_create(i32 %s, i32* %f) #0 {
entry:
  %s.addr = alloca i32, align 4
  %f.addr = alloca i32*, align 4
  %h = alloca %struct.huffheap*, align 4
  store i32 %s, i32* %s.addr, align 4
  store i32* %f, i32** %f.addr, align 4
  %call = call noalias i8* @malloc(i32 20)
  %0 = bitcast i8* %call to %struct.huffheap*
  store %struct.huffheap* %0, %struct.huffheap** %h, align 4
  %1 = load i32, i32* %s.addr, align 4
  %mul = mul i32 4, %1
  %call1 = call noalias i8* @malloc(i32 %mul)
  %2 = bitcast i8* %call1 to i32*
  %3 = load %struct.huffheap*, %struct.huffheap** %h, align 4
  %h2 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %3, i32 0, i32 0
  store i32* %2, i32** %h2, align 4
  %4 = load i32, i32* %s.addr, align 4
  %5 = load %struct.huffheap*, %struct.huffheap** %h, align 4
  %cs = getelementptr inbounds %struct.huffheap, %struct.huffheap* %5, i32 0, i32 3
  store i32 %4, i32* %cs, align 4
  %6 = load %struct.huffheap*, %struct.huffheap** %h, align 4
  %s3 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %6, i32 0, i32 2
  store i32 %4, i32* %s3, align 4
  %7 = load %struct.huffheap*, %struct.huffheap** %h, align 4
  %n = getelementptr inbounds %struct.huffheap, %struct.huffheap* %7, i32 0, i32 1
  store i32 0, i32* %n, align 4
  %8 = load i32*, i32** %f.addr, align 4
  %9 = load %struct.huffheap*, %struct.huffheap** %h, align 4
  %f4 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %9, i32 0, i32 4
  store i32* %8, i32** %f4, align 4
  %10 = load %struct.huffheap*, %struct.huffheap** %h, align 4
  ret %struct.huffheap* %10
}

; Function Attrs: noinline nounwind optnone
define internal void @_heap_add(%struct.huffheap* %heap, i32 %c) #0 {
entry:
  %heap.addr = alloca %struct.huffheap*, align 4
  %c.addr = alloca i32, align 4
  store %struct.huffheap* %heap, %struct.huffheap** %heap.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  %0 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %n = getelementptr inbounds %struct.huffheap, %struct.huffheap* %0, i32 0, i32 1
  %1 = load i32, i32* %n, align 4
  %add = add nsw i32 %1, 1
  %2 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %s = getelementptr inbounds %struct.huffheap, %struct.huffheap* %2, i32 0, i32 2
  %3 = load i32, i32* %s, align 4
  %cmp = icmp sgt i32 %add, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %h = getelementptr inbounds %struct.huffheap, %struct.huffheap* %4, i32 0, i32 0
  %5 = load i32*, i32** %h, align 4
  %6 = bitcast i32* %5 to i8*
  %7 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %s1 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %7, i32 0, i32 2
  %8 = load i32, i32* %s1, align 4
  %9 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %cs = getelementptr inbounds %struct.huffheap, %struct.huffheap* %9, i32 0, i32 3
  %10 = load i32, i32* %cs, align 4
  %add2 = add nsw i32 %8, %10
  %call = call i8* @realloc(i8* %6, i32 %add2)
  %11 = bitcast i8* %call to i32*
  %12 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %h3 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %12, i32 0, i32 0
  store i32* %11, i32** %h3, align 4
  %13 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %cs4 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %13, i32 0, i32 3
  %14 = load i32, i32* %cs4, align 4
  %15 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %s5 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %15, i32 0, i32 2
  %16 = load i32, i32* %s5, align 4
  %add6 = add nsw i32 %16, %14
  store i32 %add6, i32* %s5, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %17 = load i32, i32* %c.addr, align 4
  %18 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %h7 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %18, i32 0, i32 0
  %19 = load i32*, i32** %h7, align 4
  %20 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %n8 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %20, i32 0, i32 1
  %21 = load i32, i32* %n8, align 4
  %arrayidx = getelementptr inbounds i32, i32* %19, i32 %21
  store i32 %17, i32* %arrayidx, align 4
  %22 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %n9 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %22, i32 0, i32 1
  %23 = load i32, i32* %n9, align 4
  %inc = add nsw i32 %23, 1
  store i32 %inc, i32* %n9, align 4
  %24 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  call void @_heap_sort(%struct.huffheap* %24)
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i32 @_heap_remove(%struct.huffheap* %heap) #0 {
entry:
  %retval = alloca i32, align 4
  %heap.addr = alloca %struct.huffheap*, align 4
  store %struct.huffheap* %heap, %struct.huffheap** %heap.addr, align 4
  %0 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %n = getelementptr inbounds %struct.huffheap, %struct.huffheap* %0, i32 0, i32 1
  %1 = load i32, i32* %n, align 4
  %cmp = icmp sgt i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %n1 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %2, i32 0, i32 1
  %3 = load i32, i32* %n1, align 4
  %dec = add nsw i32 %3, -1
  store i32 %dec, i32* %n1, align 4
  %4 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %h = getelementptr inbounds %struct.huffheap, %struct.huffheap* %4, i32 0, i32 0
  %5 = load i32*, i32** %h, align 4
  %6 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %n2 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %6, i32 0, i32 1
  %7 = load i32, i32* %n2, align 4
  %arrayidx = getelementptr inbounds i32, i32* %5, i32 %7
  %8 = load i32, i32* %arrayidx, align 4
  store i32 %8, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  store i32 -1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %9 = load i32, i32* %retval, align 4
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone
define internal void @_heap_destroy(%struct.huffheap* %heap) #0 {
entry:
  %heap.addr = alloca %struct.huffheap*, align 4
  store %struct.huffheap* %heap, %struct.huffheap** %heap.addr, align 4
  %0 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %h = getelementptr inbounds %struct.huffheap, %struct.huffheap* %0, i32 0, i32 0
  %1 = load i32*, i32** %h, align 4
  %2 = bitcast i32* %1 to i8*
  call void @free(i8* %2)
  %3 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %4 = bitcast %struct.huffheap* %3 to i8*
  call void @free(i8* %4)
  ret void
}

declare noalias i8* @malloc(i32 %0) #3

; Function Attrs: nounwind readnone
declare i32 @abs(i32 %0) #4

; Function Attrs: noinline nounwind optnone
define hidden void @free_huffman_codes(%struct.huffcode** %c) #0 {
entry:
  %c.addr = alloca %struct.huffcode**, align 4
  %i = alloca i32, align 4
  store %struct.huffcode** %c, %struct.huffcode*** %c.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 256
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load %struct.huffcode**, %struct.huffcode*** %c.addr, align 4
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %1, i32 %2
  %3 = load %struct.huffcode*, %struct.huffcode** %arrayidx, align 4
  %4 = bitcast %struct.huffcode* %3 to i8*
  call void @free(i8* %4)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %6 = load %struct.huffcode**, %struct.huffcode*** %c.addr, align 4
  %7 = bitcast %struct.huffcode** %6 to i8*
  call void @free(i8* %7)
  ret void
}

declare void @free(i8* %0) #3

; Function Attrs: noinline nounwind optnone
define hidden void @inttobits(i32 %c, i32 %n, i8* %s) #0 {
entry:
  %c.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %s.addr = alloca i8*, align 4
  store i32 %c, i32* %c.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i8* %s, i8** %s.addr, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %0, i32 %1
  store i8 0, i8* %arrayidx, align 1
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %2 = load i32, i32* %n.addr, align 4
  %cmp = icmp sgt i32 %2, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i32, i32* %c.addr, align 4
  %rem = srem i32 %3, 2
  %add = add nsw i32 %rem, 48
  %conv = trunc i32 %add to i8
  %4 = load i8*, i8** %s.addr, align 4
  %5 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %5, 1
  %arrayidx1 = getelementptr inbounds i8, i8* %4, i32 %sub
  store i8 %conv, i8* %arrayidx1, align 1
  %6 = load i32, i32* %c.addr, align 4
  %shr = ashr i32 %6, 1
  store i32 %shr, i32* %c.addr, align 4
  %7 = load i32, i32* %n.addr, align 4
  %dec = add nsw i32 %7, -1
  store i32 %dec, i32* %n.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %r = alloca %struct.huffcode**, align 4
  %i = alloca i32, align 4
  %strbit = alloca [100 x i8], align 16
  %p = alloca i8*, align 4
  %freqs = alloca [256 x i32], align 16
  store i32 0, i32* %retval, align 4
  %arraydecay = getelementptr inbounds [256 x i32], [256 x i32]* %freqs, i32 0, i32 0
  %0 = bitcast i32* %arraydecay to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 1024, i1 false)
  %1 = load i8*, i8** @test, align 4
  store i8* %1, i8** %p, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %2 = load i8*, i8** %p, align 4
  %3 = load i8, i8* %2, align 1
  %conv = sext i8 %3 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i8*, i8** %p, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 1
  store i8* %incdec.ptr, i8** %p, align 4
  %5 = load i8, i8* %4, align 1
  %idxprom = sext i8 %5 to i32
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* %freqs, i32 0, i32 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %arrayidx, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %arraydecay2 = getelementptr inbounds [256 x i32], [256 x i32]* %freqs, i32 0, i32 0
  %call = call %struct.huffcode** @create_huffman_codes(i32* %arraydecay2)
  store %struct.huffcode** %call, %struct.huffcode*** %r, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.end
  %7 = load i32, i32* %i, align 4
  %cmp3 = icmp slt i32 %7, 256
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load %struct.huffcode**, %struct.huffcode*** %r, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %8, i32 %9
  %10 = load %struct.huffcode*, %struct.huffcode** %arrayidx5, align 4
  %cmp6 = icmp ne %struct.huffcode* %10, null
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %11 = load %struct.huffcode**, %struct.huffcode*** %r, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %11, i32 %12
  %13 = load %struct.huffcode*, %struct.huffcode** %arrayidx8, align 4
  %code = getelementptr inbounds %struct.huffcode, %struct.huffcode* %13, i32 0, i32 1
  %14 = load i32, i32* %code, align 4
  %15 = load %struct.huffcode**, %struct.huffcode*** %r, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %15, i32 %16
  %17 = load %struct.huffcode*, %struct.huffcode** %arrayidx9, align 4
  %nbits = getelementptr inbounds %struct.huffcode, %struct.huffcode* %17, i32 0, i32 0
  %18 = load i32, i32* %nbits, align 4
  %arraydecay10 = getelementptr inbounds [100 x i8], [100 x i8]* %strbit, i32 0, i32 0
  call void @inttobits(i32 %14, i32 %18, i8* %arraydecay10)
  %19 = load i32, i32* %i, align 4
  %20 = load %struct.huffcode**, %struct.huffcode*** %r, align 4
  %21 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %20, i32 %21
  %22 = load %struct.huffcode*, %struct.huffcode** %arrayidx11, align 4
  %code12 = getelementptr inbounds %struct.huffcode, %struct.huffcode* %22, i32 0, i32 1
  %23 = load i32, i32* %code12, align 4
  %arraydecay13 = getelementptr inbounds [100 x i8], [100 x i8]* %strbit, i32 0, i32 0
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i32 0, i32 0), i32 %19, i32 %23, i8* %arraydecay13)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %24 = load i32, i32* %i, align 4
  %inc15 = add nsw i32 %24, 1
  store i32 %inc15, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %25 = load %struct.huffcode**, %struct.huffcode*** %r, align 4
  call void @free_huffman_codes(%struct.huffcode** %25)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #3

declare i8* @realloc(i8* %0, i32 %1) #3

; Function Attrs: noinline nounwind optnone
define internal void @_heap_sort(%struct.huffheap* %heap) #0 {
entry:
  %heap.addr = alloca %struct.huffheap*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %a = alloca i32*, align 4
  %t_ = alloca i32, align 4
  store %struct.huffheap* %heap, %struct.huffheap** %heap.addr, align 4
  store i32 1, i32* %i, align 4
  store i32 2, i32* %j, align 4
  %0 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %h = getelementptr inbounds %struct.huffheap, %struct.huffheap* %0, i32 0, i32 0
  %1 = load i32*, i32** %h, align 4
  store i32* %1, i32** %a, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %n = getelementptr inbounds %struct.huffheap, %struct.huffheap* %3, i32 0, i32 1
  %4 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %2, %4
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %f = getelementptr inbounds %struct.huffheap, %struct.huffheap* %5, i32 0, i32 4
  %6 = load i32*, i32** %f, align 4
  %7 = load i32*, i32** %a, align 4
  %8 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %8, 1
  %arrayidx = getelementptr inbounds i32, i32* %7, i32 %sub
  %9 = load i32, i32* %arrayidx, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %6, i32 %9
  %10 = load i32, i32* %arrayidx1, align 4
  %11 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %f2 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %11, i32 0, i32 4
  %12 = load i32*, i32** %f2, align 4
  %13 = load i32*, i32** %a, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i32, i32* %13, i32 %14
  %15 = load i32, i32* %arrayidx3, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %12, i32 %15
  %16 = load i32, i32* %arrayidx4, align 4
  %cmp5 = icmp sge i32 %10, %16
  br i1 %cmp5, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %17 = load i32, i32* %j, align 4
  store i32 %17, i32* %i, align 4
  %18 = load i32, i32* %j, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %j, align 4
  br label %if.end

if.else:                                          ; preds = %while.body
  br label %do.body

do.body:                                          ; preds = %if.else
  %19 = load i32*, i32** %a, align 4
  %20 = load i32, i32* %i, align 4
  %sub6 = sub nsw i32 %20, 1
  %arrayidx7 = getelementptr inbounds i32, i32* %19, i32 %sub6
  %21 = load i32, i32* %arrayidx7, align 4
  store i32 %21, i32* %t_, align 4
  %22 = load i32*, i32** %a, align 4
  %23 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %22, i32 %23
  %24 = load i32, i32* %arrayidx8, align 4
  %25 = load i32*, i32** %a, align 4
  %26 = load i32, i32* %i, align 4
  %sub9 = sub nsw i32 %26, 1
  %arrayidx10 = getelementptr inbounds i32, i32* %25, i32 %sub9
  store i32 %24, i32* %arrayidx10, align 4
  %27 = load i32, i32* %t_, align 4
  %28 = load i32*, i32** %a, align 4
  %29 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds i32, i32* %28, i32 %29
  store i32 %27, i32* %arrayidx11, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %30 = load i32, i32* %i, align 4
  %dec = add nsw i32 %30, -1
  store i32 %dec, i32* %i, align 4
  %31 = load i32, i32* %i, align 4
  %cmp12 = icmp eq i32 %31, 0
  br i1 %cmp12, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.end
  %32 = load i32, i32* %j, align 4
  %inc13 = add nsw i32 %32, 1
  store i32 %inc13, i32* %j, align 4
  br label %cond.end

cond.false:                                       ; preds = %do.end
  %33 = load i32, i32* %i, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %32, %cond.true ], [ %33, %cond.false ]
  store i32 %cond, i32* %i, align 4
  br label %if.end

if.end:                                           ; preds = %cond.end, %if.then
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { argmemonly nounwind willreturn writeonly }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %cmp = icmp eq %struct.huffheap* %4, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp slt i32 %5, 256
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 256:i32
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %arrayidx3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp4 = icmp sgt i32 %7, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %10, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp7 = icmp sgt i32 %12, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call8 = call i32 @_heap_remove(%struct.huffheap* %13)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call9 = call i32 @_heap_remove(%struct.huffheap* %14)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %r1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %arrayidx10, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %r2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %arrayidx11, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %16, %18
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %extf, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %extf, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %extf, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %r1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %extf, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 0, %24
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %r2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %extf, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc15 = add nsw i32 %26, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call16 = call i32 @_heap_remove(%struct.huffheap* %27)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %r1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %r1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp20 = icmp slt i32 %32, 256
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 256:i32
infer %1

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %arrayidx22, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp23 = icmp eq i32 %34, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %38 = load i32, i32* %ix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %arrayidx28, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call29 = call i32 @abs(i32 %39) #5
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 0:i32, %0
%2:i32 = subnsw 0:i32, %0
%3:i32 = select %1, %0, %2
infer %3

; *****
; For LLVM instruction:
;  %40 = load i32, i32* %ix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp30 = icmp ne i32 %call29, %40
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt 0:i32, %1
%3:i32 = subnsw 0:i32, %1
%4:i32 = select %2, %1, %3
%5:i1 = ne %0, %4
infer %5

; *****
; For LLVM instruction:
;  %41 = load i32, i32* %ix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %42 = load i32, i32* %arrayidx32, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp33 = icmp sge i32 %42, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cond = select i1 %cmp33, i32 1, i32 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0 (hasExternalUses)
%2:i32 = select %1, 1:i32, 0:i32
infer %2

; *****
; For LLVM instruction:
;  %44 = load i32, i32* %bn, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %shl = shl i32 %cond, %44
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0 (hasExternalUses)
%2:i32 = select %1, 1:i32, 0:i32
%3:i32 = var
%4:i32 = shl %2, %3
infer %4

; *****
; For LLVM instruction:
;  %45 = load i32, i32* %bc, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %or = or i32 %45, %shl
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle 0:i32, %1 (hasExternalUses)
%3:i32 = select %2, 1:i32, 0:i32
%4:i32 = var
%5:i32 = shl %3, %4
%6:i32 = or %0, %5
infer %6

; *****
; For LLVM instruction:
;  %46 = load i32, i32* %ix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %47 = load i32, i32* %arrayidx34, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call35 = call i32 @abs(i32 %47) #5
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 0:i32, %0
%2:i32 = subnsw 0:i32, %0
%3:i32 = select %1, %0, %2
infer %3

; *****
; For LLVM instruction:
;  %48 = load i32, i32* %bn, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc36 = add nsw i32 %48, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %51 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %52 = load i32, i32* %bn, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %54 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %56 = load i32, i32* %bc, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %58 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %60 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc43 = add nsw i32 %60, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 256:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -536870912
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt 0:i32, %0
%2:i32 = subnsw 0:i32, %0
%3:i32 = select %1, %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 497679720
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt 0:i32, %1
%3:i32 = subnsw 0:i32, %1
%4:i32 = select %2, %1, %3
%5:i1 = ne %0, %4
infer %5


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle 0:i32, %0 (hasExternalUses)
%2:i32 = select %1, 1:i32, 0:i32
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle 0:i32, %0 (hasExternalUses)
%2:i32 = select %1, 1:i32, 0:i32
%3:i32 = var
%4:i32 = shl %2, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 7 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = sle 0:i32, %1 (hasExternalUses)
%3:i32 = select %2, 1:i32, 0:i32
%4:i32 = var
%5:i32 = shl %3, %4
%6:i32 = or %0, %5
infer %6


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 33554432
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i1 = sle 0:i32, %0 (hasExternalUses)
%2:i32 = select %1, 1:i32, 0:i32

Cost = 3
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for create_huffman_codes()

; entering Souper's runOnFunction() for ./Huffman_coding.c.bc:_heap_create()

; ModuleID = './Huffman_coding.c.bc'
source_filename = "./Huffman_coding.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.huffcode = type { i32, i32 }
%struct.huffheap = type { i32*, i32, i32, i32, i32* }

@.str = private unnamed_addr constant [40 x i8] c"this is an example for huffman encoding\00", align 1
@test = hidden global i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i32 0, i32 0), align 4
@.str.1 = private unnamed_addr constant [12 x i8] c"%c (%d) %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.huffcode** @create_huffman_codes(i32* %freqs) #0 {
entry:
  %retval = alloca %struct.huffcode**, align 4
  %freqs.addr = alloca i32*, align 4
  %codes = alloca %struct.huffcode**, align 4
  %heap = alloca %struct.huffheap*, align 4
  %efreqs = alloca [512 x i32], align 16
  %preds = alloca [512 x i32], align 16
  %i = alloca i32, align 4
  %extf = alloca i32, align 4
  %r1 = alloca i32, align 4
  %r2 = alloca i32, align 4
  %bc = alloca i32, align 4
  %bn = alloca i32, align 4
  %ix = alloca i32, align 4
  store i32* %freqs, i32** %freqs.addr, align 4
  store i32 256, i32* %extf, align 4
  %arraydecay = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 0
  %0 = bitcast i32* %arraydecay to i8*
  %1 = load i32*, i32** %freqs.addr, align 4
  %2 = bitcast i32* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 4 %2, i32 1024, i1 false)
  %arrayidx = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 256
  %3 = bitcast i32* %arrayidx to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %3, i8 0, i32 1024, i1 false)
  %arraydecay1 = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 0
  %call = call %struct.huffheap* @_heap_create(i32 512, i32* %arraydecay1)
  store %struct.huffheap* %call, %struct.huffheap** %heap, align 4
  %4 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  %cmp = icmp eq %struct.huffheap* %4, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.huffcode** null, %struct.huffcode*** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %5 = load i32, i32* %i, align 4
  %cmp2 = icmp slt i32 %5, 256
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 %6
  %7 = load i32, i32* %arrayidx3, align 4
  %cmp4 = icmp sgt i32 %7, 0
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %for.body
  %8 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  %9 = load i32, i32* %i, align 4
  call void @_heap_add(%struct.huffheap* %8, i32 %9)
  br label %if.end6

if.end6:                                          ; preds = %if.then5, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end6
  %10 = load i32, i32* %i, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end
  %11 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  %n = getelementptr inbounds %struct.huffheap, %struct.huffheap* %11, i32 0, i32 1
  %12 = load i32, i32* %n, align 4
  %cmp7 = icmp sgt i32 %12, 1
  br i1 %cmp7, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %13 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  %call8 = call i32 @_heap_remove(%struct.huffheap* %13)
  store i32 %call8, i32* %r1, align 4
  %14 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  %call9 = call i32 @_heap_remove(%struct.huffheap* %14)
  store i32 %call9, i32* %r2, align 4
  %15 = load i32, i32* %r1, align 4
  %arrayidx10 = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 %15
  %16 = load i32, i32* %arrayidx10, align 4
  %17 = load i32, i32* %r2, align 4
  %arrayidx11 = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 %17
  %18 = load i32, i32* %arrayidx11, align 4
  %add = add nsw i32 %16, %18
  %19 = load i32, i32* %extf, align 4
  %arrayidx12 = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 %19
  store i32 %add, i32* %arrayidx12, align 4
  %20 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  %21 = load i32, i32* %extf, align 4
  call void @_heap_add(%struct.huffheap* %20, i32 %21)
  %22 = load i32, i32* %extf, align 4
  %23 = load i32, i32* %r1, align 4
  %arrayidx13 = getelementptr inbounds [512 x i32], [512 x i32]* %preds, i32 0, i32 %23
  store i32 %22, i32* %arrayidx13, align 4
  %24 = load i32, i32* %extf, align 4
  %sub = sub nsw i32 0, %24
  %25 = load i32, i32* %r2, align 4
  %arrayidx14 = getelementptr inbounds [512 x i32], [512 x i32]* %preds, i32 0, i32 %25
  store i32 %sub, i32* %arrayidx14, align 4
  %26 = load i32, i32* %extf, align 4
  %inc15 = add nsw i32 %26, 1
  store i32 %inc15, i32* %extf, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %27 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  %call16 = call i32 @_heap_remove(%struct.huffheap* %27)
  store i32 %call16, i32* %r1, align 4
  %28 = load i32, i32* %r1, align 4
  %29 = load i32, i32* %r1, align 4
  %arrayidx17 = getelementptr inbounds [512 x i32], [512 x i32]* %preds, i32 0, i32 %29
  store i32 %28, i32* %arrayidx17, align 4
  %30 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  call void @_heap_destroy(%struct.huffheap* %30)
  %call18 = call noalias i8* @malloc(i32 1024)
  %31 = bitcast i8* %call18 to %struct.huffcode**
  store %struct.huffcode** %31, %struct.huffcode*** %codes, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond19

for.cond19:                                       ; preds = %for.inc42, %while.end
  %32 = load i32, i32* %i, align 4
  %cmp20 = icmp slt i32 %32, 256
  br i1 %cmp20, label %for.body21, label %for.end44

for.body21:                                       ; preds = %for.cond19
  store i32 0, i32* %bc, align 4
  store i32 0, i32* %bn, align 4
  %33 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 %33
  %34 = load i32, i32* %arrayidx22, align 4
  %cmp23 = icmp eq i32 %34, 0
  br i1 %cmp23, label %if.then24, label %if.end26

if.then24:                                        ; preds = %for.body21
  %35 = load %struct.huffcode**, %struct.huffcode*** %codes, align 4
  %36 = load i32, i32* %i, align 4
  %arrayidx25 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %35, i32 %36
  store %struct.huffcode* null, %struct.huffcode** %arrayidx25, align 4
  br label %for.inc42

if.end26:                                         ; preds = %for.body21
  %37 = load i32, i32* %i, align 4
  store i32 %37, i32* %ix, align 4
  br label %while.cond27

while.cond27:                                     ; preds = %while.body31, %if.end26
  %38 = load i32, i32* %ix, align 4
  %arrayidx28 = getelementptr inbounds [512 x i32], [512 x i32]* %preds, i32 0, i32 %38
  %39 = load i32, i32* %arrayidx28, align 4
  %call29 = call i32 @abs(i32 %39) #5
  %40 = load i32, i32* %ix, align 4
  %cmp30 = icmp ne i32 %call29, %40
  br i1 %cmp30, label %while.body31, label %while.end37

while.body31:                                     ; preds = %while.cond27
  %41 = load i32, i32* %ix, align 4
  %arrayidx32 = getelementptr inbounds [512 x i32], [512 x i32]* %preds, i32 0, i32 %41
  %42 = load i32, i32* %arrayidx32, align 4
  %cmp33 = icmp sge i32 %42, 0
  %43 = zext i1 %cmp33 to i64
  %cond = select i1 %cmp33, i32 1, i32 0
  %44 = load i32, i32* %bn, align 4
  %shl = shl i32 %cond, %44
  %45 = load i32, i32* %bc, align 4
  %or = or i32 %45, %shl
  store i32 %or, i32* %bc, align 4
  %46 = load i32, i32* %ix, align 4
  %arrayidx34 = getelementptr inbounds [512 x i32], [512 x i32]* %preds, i32 0, i32 %46
  %47 = load i32, i32* %arrayidx34, align 4
  %call35 = call i32 @abs(i32 %47) #5
  store i32 %call35, i32* %ix, align 4
  %48 = load i32, i32* %bn, align 4
  %inc36 = add nsw i32 %48, 1
  store i32 %inc36, i32* %bn, align 4
  br label %while.cond27

while.end37:                                      ; preds = %while.cond27
  %call38 = call noalias i8* @malloc(i32 8)
  %49 = bitcast i8* %call38 to %struct.huffcode*
  %50 = load %struct.huffcode**, %struct.huffcode*** %codes, align 4
  %51 = load i32, i32* %i, align 4
  %arrayidx39 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %50, i32 %51
  store %struct.huffcode* %49, %struct.huffcode** %arrayidx39, align 4
  %52 = load i32, i32* %bn, align 4
  %53 = load %struct.huffcode**, %struct.huffcode*** %codes, align 4
  %54 = load i32, i32* %i, align 4
  %arrayidx40 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %53, i32 %54
  %55 = load %struct.huffcode*, %struct.huffcode** %arrayidx40, align 4
  %nbits = getelementptr inbounds %struct.huffcode, %struct.huffcode* %55, i32 0, i32 0
  store i32 %52, i32* %nbits, align 4
  %56 = load i32, i32* %bc, align 4
  %57 = load %struct.huffcode**, %struct.huffcode*** %codes, align 4
  %58 = load i32, i32* %i, align 4
  %arrayidx41 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %57, i32 %58
  %59 = load %struct.huffcode*, %struct.huffcode** %arrayidx41, align 4
  %code = getelementptr inbounds %struct.huffcode, %struct.huffcode* %59, i32 0, i32 1
  store i32 %56, i32* %code, align 4
  br label %for.inc42

for.inc42:                                        ; preds = %while.end37, %if.then24
  %60 = load i32, i32* %i, align 4
  %inc43 = add nsw i32 %60, 1
  store i32 %inc43, i32* %i, align 4
  br label %for.cond19

for.end44:                                        ; preds = %for.cond19
  %61 = load %struct.huffcode**, %struct.huffcode*** %codes, align 4
  store %struct.huffcode** %61, %struct.huffcode*** %retval, align 4
  br label %return

return:                                           ; preds = %for.end44, %if.then
  %62 = load %struct.huffcode**, %struct.huffcode*** %retval, align 4
  ret %struct.huffcode** %62
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define internal %struct.huffheap* @_heap_create(i32 %s, i32* %f) #0 {
entry:
  %s.addr = alloca i32, align 4
  %f.addr = alloca i32*, align 4
  %h = alloca %struct.huffheap*, align 4
  store i32 %s, i32* %s.addr, align 4
  store i32* %f, i32** %f.addr, align 4
  %call = call noalias i8* @malloc(i32 20)
  %0 = bitcast i8* %call to %struct.huffheap*
  store %struct.huffheap* %0, %struct.huffheap** %h, align 4
  %1 = load i32, i32* %s.addr, align 4
  %mul = mul i32 4, %1
  %call1 = call noalias i8* @malloc(i32 %mul)
  %2 = bitcast i8* %call1 to i32*
  %3 = load %struct.huffheap*, %struct.huffheap** %h, align 4
  %h2 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %3, i32 0, i32 0
  store i32* %2, i32** %h2, align 4
  %4 = load i32, i32* %s.addr, align 4
  %5 = load %struct.huffheap*, %struct.huffheap** %h, align 4
  %cs = getelementptr inbounds %struct.huffheap, %struct.huffheap* %5, i32 0, i32 3
  store i32 %4, i32* %cs, align 4
  %6 = load %struct.huffheap*, %struct.huffheap** %h, align 4
  %s3 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %6, i32 0, i32 2
  store i32 %4, i32* %s3, align 4
  %7 = load %struct.huffheap*, %struct.huffheap** %h, align 4
  %n = getelementptr inbounds %struct.huffheap, %struct.huffheap* %7, i32 0, i32 1
  store i32 0, i32* %n, align 4
  %8 = load i32*, i32** %f.addr, align 4
  %9 = load %struct.huffheap*, %struct.huffheap** %h, align 4
  %f4 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %9, i32 0, i32 4
  store i32* %8, i32** %f4, align 4
  %10 = load %struct.huffheap*, %struct.huffheap** %h, align 4
  ret %struct.huffheap* %10
}

; Function Attrs: noinline nounwind optnone
define internal void @_heap_add(%struct.huffheap* %heap, i32 %c) #0 {
entry:
  %heap.addr = alloca %struct.huffheap*, align 4
  %c.addr = alloca i32, align 4
  store %struct.huffheap* %heap, %struct.huffheap** %heap.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  %0 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %n = getelementptr inbounds %struct.huffheap, %struct.huffheap* %0, i32 0, i32 1
  %1 = load i32, i32* %n, align 4
  %add = add nsw i32 %1, 1
  %2 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %s = getelementptr inbounds %struct.huffheap, %struct.huffheap* %2, i32 0, i32 2
  %3 = load i32, i32* %s, align 4
  %cmp = icmp sgt i32 %add, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %h = getelementptr inbounds %struct.huffheap, %struct.huffheap* %4, i32 0, i32 0
  %5 = load i32*, i32** %h, align 4
  %6 = bitcast i32* %5 to i8*
  %7 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %s1 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %7, i32 0, i32 2
  %8 = load i32, i32* %s1, align 4
  %9 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %cs = getelementptr inbounds %struct.huffheap, %struct.huffheap* %9, i32 0, i32 3
  %10 = load i32, i32* %cs, align 4
  %add2 = add nsw i32 %8, %10
  %call = call i8* @realloc(i8* %6, i32 %add2)
  %11 = bitcast i8* %call to i32*
  %12 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %h3 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %12, i32 0, i32 0
  store i32* %11, i32** %h3, align 4
  %13 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %cs4 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %13, i32 0, i32 3
  %14 = load i32, i32* %cs4, align 4
  %15 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %s5 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %15, i32 0, i32 2
  %16 = load i32, i32* %s5, align 4
  %add6 = add nsw i32 %16, %14
  store i32 %add6, i32* %s5, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %17 = load i32, i32* %c.addr, align 4
  %18 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %h7 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %18, i32 0, i32 0
  %19 = load i32*, i32** %h7, align 4
  %20 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %n8 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %20, i32 0, i32 1
  %21 = load i32, i32* %n8, align 4
  %arrayidx = getelementptr inbounds i32, i32* %19, i32 %21
  store i32 %17, i32* %arrayidx, align 4
  %22 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %n9 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %22, i32 0, i32 1
  %23 = load i32, i32* %n9, align 4
  %inc = add nsw i32 %23, 1
  store i32 %inc, i32* %n9, align 4
  %24 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  call void @_heap_sort(%struct.huffheap* %24)
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i32 @_heap_remove(%struct.huffheap* %heap) #0 {
entry:
  %retval = alloca i32, align 4
  %heap.addr = alloca %struct.huffheap*, align 4
  store %struct.huffheap* %heap, %struct.huffheap** %heap.addr, align 4
  %0 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %n = getelementptr inbounds %struct.huffheap, %struct.huffheap* %0, i32 0, i32 1
  %1 = load i32, i32* %n, align 4
  %cmp = icmp sgt i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %n1 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %2, i32 0, i32 1
  %3 = load i32, i32* %n1, align 4
  %dec = add nsw i32 %3, -1
  store i32 %dec, i32* %n1, align 4
  %4 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %h = getelementptr inbounds %struct.huffheap, %struct.huffheap* %4, i32 0, i32 0
  %5 = load i32*, i32** %h, align 4
  %6 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %n2 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %6, i32 0, i32 1
  %7 = load i32, i32* %n2, align 4
  %arrayidx = getelementptr inbounds i32, i32* %5, i32 %7
  %8 = load i32, i32* %arrayidx, align 4
  store i32 %8, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  store i32 -1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %9 = load i32, i32* %retval, align 4
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone
define internal void @_heap_destroy(%struct.huffheap* %heap) #0 {
entry:
  %heap.addr = alloca %struct.huffheap*, align 4
  store %struct.huffheap* %heap, %struct.huffheap** %heap.addr, align 4
  %0 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %h = getelementptr inbounds %struct.huffheap, %struct.huffheap* %0, i32 0, i32 0
  %1 = load i32*, i32** %h, align 4
  %2 = bitcast i32* %1 to i8*
  call void @free(i8* %2)
  %3 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %4 = bitcast %struct.huffheap* %3 to i8*
  call void @free(i8* %4)
  ret void
}

declare noalias i8* @malloc(i32 %0) #3

; Function Attrs: nounwind readnone
declare i32 @abs(i32 %0) #4

; Function Attrs: noinline nounwind optnone
define hidden void @free_huffman_codes(%struct.huffcode** %c) #0 {
entry:
  %c.addr = alloca %struct.huffcode**, align 4
  %i = alloca i32, align 4
  store %struct.huffcode** %c, %struct.huffcode*** %c.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 256
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load %struct.huffcode**, %struct.huffcode*** %c.addr, align 4
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %1, i32 %2
  %3 = load %struct.huffcode*, %struct.huffcode** %arrayidx, align 4
  %4 = bitcast %struct.huffcode* %3 to i8*
  call void @free(i8* %4)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %6 = load %struct.huffcode**, %struct.huffcode*** %c.addr, align 4
  %7 = bitcast %struct.huffcode** %6 to i8*
  call void @free(i8* %7)
  ret void
}

declare void @free(i8* %0) #3

; Function Attrs: noinline nounwind optnone
define hidden void @inttobits(i32 %c, i32 %n, i8* %s) #0 {
entry:
  %c.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %s.addr = alloca i8*, align 4
  store i32 %c, i32* %c.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i8* %s, i8** %s.addr, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %0, i32 %1
  store i8 0, i8* %arrayidx, align 1
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %2 = load i32, i32* %n.addr, align 4
  %cmp = icmp sgt i32 %2, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i32, i32* %c.addr, align 4
  %rem = srem i32 %3, 2
  %add = add nsw i32 %rem, 48
  %conv = trunc i32 %add to i8
  %4 = load i8*, i8** %s.addr, align 4
  %5 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %5, 1
  %arrayidx1 = getelementptr inbounds i8, i8* %4, i32 %sub
  store i8 %conv, i8* %arrayidx1, align 1
  %6 = load i32, i32* %c.addr, align 4
  %shr = ashr i32 %6, 1
  store i32 %shr, i32* %c.addr, align 4
  %7 = load i32, i32* %n.addr, align 4
  %dec = add nsw i32 %7, -1
  store i32 %dec, i32* %n.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %r = alloca %struct.huffcode**, align 4
  %i = alloca i32, align 4
  %strbit = alloca [100 x i8], align 16
  %p = alloca i8*, align 4
  %freqs = alloca [256 x i32], align 16
  store i32 0, i32* %retval, align 4
  %arraydecay = getelementptr inbounds [256 x i32], [256 x i32]* %freqs, i32 0, i32 0
  %0 = bitcast i32* %arraydecay to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 1024, i1 false)
  %1 = load i8*, i8** @test, align 4
  store i8* %1, i8** %p, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %2 = load i8*, i8** %p, align 4
  %3 = load i8, i8* %2, align 1
  %conv = sext i8 %3 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i8*, i8** %p, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 1
  store i8* %incdec.ptr, i8** %p, align 4
  %5 = load i8, i8* %4, align 1
  %idxprom = sext i8 %5 to i32
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* %freqs, i32 0, i32 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %arrayidx, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %arraydecay2 = getelementptr inbounds [256 x i32], [256 x i32]* %freqs, i32 0, i32 0
  %call = call %struct.huffcode** @create_huffman_codes(i32* %arraydecay2)
  store %struct.huffcode** %call, %struct.huffcode*** %r, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.end
  %7 = load i32, i32* %i, align 4
  %cmp3 = icmp slt i32 %7, 256
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load %struct.huffcode**, %struct.huffcode*** %r, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %8, i32 %9
  %10 = load %struct.huffcode*, %struct.huffcode** %arrayidx5, align 4
  %cmp6 = icmp ne %struct.huffcode* %10, null
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %11 = load %struct.huffcode**, %struct.huffcode*** %r, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %11, i32 %12
  %13 = load %struct.huffcode*, %struct.huffcode** %arrayidx8, align 4
  %code = getelementptr inbounds %struct.huffcode, %struct.huffcode* %13, i32 0, i32 1
  %14 = load i32, i32* %code, align 4
  %15 = load %struct.huffcode**, %struct.huffcode*** %r, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %15, i32 %16
  %17 = load %struct.huffcode*, %struct.huffcode** %arrayidx9, align 4
  %nbits = getelementptr inbounds %struct.huffcode, %struct.huffcode* %17, i32 0, i32 0
  %18 = load i32, i32* %nbits, align 4
  %arraydecay10 = getelementptr inbounds [100 x i8], [100 x i8]* %strbit, i32 0, i32 0
  call void @inttobits(i32 %14, i32 %18, i8* %arraydecay10)
  %19 = load i32, i32* %i, align 4
  %20 = load %struct.huffcode**, %struct.huffcode*** %r, align 4
  %21 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %20, i32 %21
  %22 = load %struct.huffcode*, %struct.huffcode** %arrayidx11, align 4
  %code12 = getelementptr inbounds %struct.huffcode, %struct.huffcode* %22, i32 0, i32 1
  %23 = load i32, i32* %code12, align 4
  %arraydecay13 = getelementptr inbounds [100 x i8], [100 x i8]* %strbit, i32 0, i32 0
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i32 0, i32 0), i32 %19, i32 %23, i8* %arraydecay13)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %24 = load i32, i32* %i, align 4
  %inc15 = add nsw i32 %24, 1
  store i32 %inc15, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %25 = load %struct.huffcode**, %struct.huffcode*** %r, align 4
  call void @free_huffman_codes(%struct.huffcode** %25)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #3

declare i8* @realloc(i8* %0, i32 %1) #3

; Function Attrs: noinline nounwind optnone
define internal void @_heap_sort(%struct.huffheap* %heap) #0 {
entry:
  %heap.addr = alloca %struct.huffheap*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %a = alloca i32*, align 4
  %t_ = alloca i32, align 4
  store %struct.huffheap* %heap, %struct.huffheap** %heap.addr, align 4
  store i32 1, i32* %i, align 4
  store i32 2, i32* %j, align 4
  %0 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %h = getelementptr inbounds %struct.huffheap, %struct.huffheap* %0, i32 0, i32 0
  %1 = load i32*, i32** %h, align 4
  store i32* %1, i32** %a, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %n = getelementptr inbounds %struct.huffheap, %struct.huffheap* %3, i32 0, i32 1
  %4 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %2, %4
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %f = getelementptr inbounds %struct.huffheap, %struct.huffheap* %5, i32 0, i32 4
  %6 = load i32*, i32** %f, align 4
  %7 = load i32*, i32** %a, align 4
  %8 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %8, 1
  %arrayidx = getelementptr inbounds i32, i32* %7, i32 %sub
  %9 = load i32, i32* %arrayidx, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %6, i32 %9
  %10 = load i32, i32* %arrayidx1, align 4
  %11 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %f2 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %11, i32 0, i32 4
  %12 = load i32*, i32** %f2, align 4
  %13 = load i32*, i32** %a, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i32, i32* %13, i32 %14
  %15 = load i32, i32* %arrayidx3, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %12, i32 %15
  %16 = load i32, i32* %arrayidx4, align 4
  %cmp5 = icmp sge i32 %10, %16
  br i1 %cmp5, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %17 = load i32, i32* %j, align 4
  store i32 %17, i32* %i, align 4
  %18 = load i32, i32* %j, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %j, align 4
  br label %if.end

if.else:                                          ; preds = %while.body
  br label %do.body

do.body:                                          ; preds = %if.else
  %19 = load i32*, i32** %a, align 4
  %20 = load i32, i32* %i, align 4
  %sub6 = sub nsw i32 %20, 1
  %arrayidx7 = getelementptr inbounds i32, i32* %19, i32 %sub6
  %21 = load i32, i32* %arrayidx7, align 4
  store i32 %21, i32* %t_, align 4
  %22 = load i32*, i32** %a, align 4
  %23 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %22, i32 %23
  %24 = load i32, i32* %arrayidx8, align 4
  %25 = load i32*, i32** %a, align 4
  %26 = load i32, i32* %i, align 4
  %sub9 = sub nsw i32 %26, 1
  %arrayidx10 = getelementptr inbounds i32, i32* %25, i32 %sub9
  store i32 %24, i32* %arrayidx10, align 4
  %27 = load i32, i32* %t_, align 4
  %28 = load i32*, i32** %a, align 4
  %29 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds i32, i32* %28, i32 %29
  store i32 %27, i32* %arrayidx11, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %30 = load i32, i32* %i, align 4
  %dec = add nsw i32 %30, -1
  store i32 %dec, i32* %i, align 4
  %31 = load i32, i32* %i, align 4
  %cmp12 = icmp eq i32 %31, 0
  br i1 %cmp12, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.end
  %32 = load i32, i32* %j, align 4
  %inc13 = add nsw i32 %32, 1
  store i32 %inc13, i32* %j, align 4
  br label %cond.end

cond.false:                                       ; preds = %do.end
  %33 = load i32, i32* %i, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %32, %cond.true ], [ %33, %cond.false ]
  store i32 %cond, i32* %i, align 4
  br label %if.end

if.end:                                           ; preds = %cond.end, %if.then
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { argmemonly nounwind willreturn writeonly }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %s.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul i32 4, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %s.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for ./Huffman_coding.c.bc:_heap_create()

; entering Souper's runOnFunction() for ./Huffman_coding.c.bc:_heap_add()

; ModuleID = './Huffman_coding.c.bc'
source_filename = "./Huffman_coding.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.huffcode = type { i32, i32 }
%struct.huffheap = type { i32*, i32, i32, i32, i32* }

@.str = private unnamed_addr constant [40 x i8] c"this is an example for huffman encoding\00", align 1
@test = hidden global i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i32 0, i32 0), align 4
@.str.1 = private unnamed_addr constant [12 x i8] c"%c (%d) %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.huffcode** @create_huffman_codes(i32* %freqs) #0 {
entry:
  %retval = alloca %struct.huffcode**, align 4
  %freqs.addr = alloca i32*, align 4
  %codes = alloca %struct.huffcode**, align 4
  %heap = alloca %struct.huffheap*, align 4
  %efreqs = alloca [512 x i32], align 16
  %preds = alloca [512 x i32], align 16
  %i = alloca i32, align 4
  %extf = alloca i32, align 4
  %r1 = alloca i32, align 4
  %r2 = alloca i32, align 4
  %bc = alloca i32, align 4
  %bn = alloca i32, align 4
  %ix = alloca i32, align 4
  store i32* %freqs, i32** %freqs.addr, align 4
  store i32 256, i32* %extf, align 4
  %arraydecay = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 0
  %0 = bitcast i32* %arraydecay to i8*
  %1 = load i32*, i32** %freqs.addr, align 4
  %2 = bitcast i32* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 4 %2, i32 1024, i1 false)
  %arrayidx = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 256
  %3 = bitcast i32* %arrayidx to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %3, i8 0, i32 1024, i1 false)
  %arraydecay1 = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 0
  %call = call %struct.huffheap* @_heap_create(i32 512, i32* %arraydecay1)
  store %struct.huffheap* %call, %struct.huffheap** %heap, align 4
  %4 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  %cmp = icmp eq %struct.huffheap* %4, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.huffcode** null, %struct.huffcode*** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %5 = load i32, i32* %i, align 4
  %cmp2 = icmp slt i32 %5, 256
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 %6
  %7 = load i32, i32* %arrayidx3, align 4
  %cmp4 = icmp sgt i32 %7, 0
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %for.body
  %8 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  %9 = load i32, i32* %i, align 4
  call void @_heap_add(%struct.huffheap* %8, i32 %9)
  br label %if.end6

if.end6:                                          ; preds = %if.then5, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end6
  %10 = load i32, i32* %i, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end
  %11 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  %n = getelementptr inbounds %struct.huffheap, %struct.huffheap* %11, i32 0, i32 1
  %12 = load i32, i32* %n, align 4
  %cmp7 = icmp sgt i32 %12, 1
  br i1 %cmp7, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %13 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  %call8 = call i32 @_heap_remove(%struct.huffheap* %13)
  store i32 %call8, i32* %r1, align 4
  %14 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  %call9 = call i32 @_heap_remove(%struct.huffheap* %14)
  store i32 %call9, i32* %r2, align 4
  %15 = load i32, i32* %r1, align 4
  %arrayidx10 = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 %15
  %16 = load i32, i32* %arrayidx10, align 4
  %17 = load i32, i32* %r2, align 4
  %arrayidx11 = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 %17
  %18 = load i32, i32* %arrayidx11, align 4
  %add = add nsw i32 %16, %18
  %19 = load i32, i32* %extf, align 4
  %arrayidx12 = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 %19
  store i32 %add, i32* %arrayidx12, align 4
  %20 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  %21 = load i32, i32* %extf, align 4
  call void @_heap_add(%struct.huffheap* %20, i32 %21)
  %22 = load i32, i32* %extf, align 4
  %23 = load i32, i32* %r1, align 4
  %arrayidx13 = getelementptr inbounds [512 x i32], [512 x i32]* %preds, i32 0, i32 %23
  store i32 %22, i32* %arrayidx13, align 4
  %24 = load i32, i32* %extf, align 4
  %sub = sub nsw i32 0, %24
  %25 = load i32, i32* %r2, align 4
  %arrayidx14 = getelementptr inbounds [512 x i32], [512 x i32]* %preds, i32 0, i32 %25
  store i32 %sub, i32* %arrayidx14, align 4
  %26 = load i32, i32* %extf, align 4
  %inc15 = add nsw i32 %26, 1
  store i32 %inc15, i32* %extf, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %27 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  %call16 = call i32 @_heap_remove(%struct.huffheap* %27)
  store i32 %call16, i32* %r1, align 4
  %28 = load i32, i32* %r1, align 4
  %29 = load i32, i32* %r1, align 4
  %arrayidx17 = getelementptr inbounds [512 x i32], [512 x i32]* %preds, i32 0, i32 %29
  store i32 %28, i32* %arrayidx17, align 4
  %30 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  call void @_heap_destroy(%struct.huffheap* %30)
  %call18 = call noalias i8* @malloc(i32 1024)
  %31 = bitcast i8* %call18 to %struct.huffcode**
  store %struct.huffcode** %31, %struct.huffcode*** %codes, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond19

for.cond19:                                       ; preds = %for.inc42, %while.end
  %32 = load i32, i32* %i, align 4
  %cmp20 = icmp slt i32 %32, 256
  br i1 %cmp20, label %for.body21, label %for.end44

for.body21:                                       ; preds = %for.cond19
  store i32 0, i32* %bc, align 4
  store i32 0, i32* %bn, align 4
  %33 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 %33
  %34 = load i32, i32* %arrayidx22, align 4
  %cmp23 = icmp eq i32 %34, 0
  br i1 %cmp23, label %if.then24, label %if.end26

if.then24:                                        ; preds = %for.body21
  %35 = load %struct.huffcode**, %struct.huffcode*** %codes, align 4
  %36 = load i32, i32* %i, align 4
  %arrayidx25 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %35, i32 %36
  store %struct.huffcode* null, %struct.huffcode** %arrayidx25, align 4
  br label %for.inc42

if.end26:                                         ; preds = %for.body21
  %37 = load i32, i32* %i, align 4
  store i32 %37, i32* %ix, align 4
  br label %while.cond27

while.cond27:                                     ; preds = %while.body31, %if.end26
  %38 = load i32, i32* %ix, align 4
  %arrayidx28 = getelementptr inbounds [512 x i32], [512 x i32]* %preds, i32 0, i32 %38
  %39 = load i32, i32* %arrayidx28, align 4
  %call29 = call i32 @abs(i32 %39) #5
  %40 = load i32, i32* %ix, align 4
  %cmp30 = icmp ne i32 %call29, %40
  br i1 %cmp30, label %while.body31, label %while.end37

while.body31:                                     ; preds = %while.cond27
  %41 = load i32, i32* %ix, align 4
  %arrayidx32 = getelementptr inbounds [512 x i32], [512 x i32]* %preds, i32 0, i32 %41
  %42 = load i32, i32* %arrayidx32, align 4
  %cmp33 = icmp sge i32 %42, 0
  %43 = zext i1 %cmp33 to i64
  %cond = select i1 %cmp33, i32 1, i32 0
  %44 = load i32, i32* %bn, align 4
  %shl = shl i32 %cond, %44
  %45 = load i32, i32* %bc, align 4
  %or = or i32 %45, %shl
  store i32 %or, i32* %bc, align 4
  %46 = load i32, i32* %ix, align 4
  %arrayidx34 = getelementptr inbounds [512 x i32], [512 x i32]* %preds, i32 0, i32 %46
  %47 = load i32, i32* %arrayidx34, align 4
  %call35 = call i32 @abs(i32 %47) #5
  store i32 %call35, i32* %ix, align 4
  %48 = load i32, i32* %bn, align 4
  %inc36 = add nsw i32 %48, 1
  store i32 %inc36, i32* %bn, align 4
  br label %while.cond27

while.end37:                                      ; preds = %while.cond27
  %call38 = call noalias i8* @malloc(i32 8)
  %49 = bitcast i8* %call38 to %struct.huffcode*
  %50 = load %struct.huffcode**, %struct.huffcode*** %codes, align 4
  %51 = load i32, i32* %i, align 4
  %arrayidx39 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %50, i32 %51
  store %struct.huffcode* %49, %struct.huffcode** %arrayidx39, align 4
  %52 = load i32, i32* %bn, align 4
  %53 = load %struct.huffcode**, %struct.huffcode*** %codes, align 4
  %54 = load i32, i32* %i, align 4
  %arrayidx40 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %53, i32 %54
  %55 = load %struct.huffcode*, %struct.huffcode** %arrayidx40, align 4
  %nbits = getelementptr inbounds %struct.huffcode, %struct.huffcode* %55, i32 0, i32 0
  store i32 %52, i32* %nbits, align 4
  %56 = load i32, i32* %bc, align 4
  %57 = load %struct.huffcode**, %struct.huffcode*** %codes, align 4
  %58 = load i32, i32* %i, align 4
  %arrayidx41 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %57, i32 %58
  %59 = load %struct.huffcode*, %struct.huffcode** %arrayidx41, align 4
  %code = getelementptr inbounds %struct.huffcode, %struct.huffcode* %59, i32 0, i32 1
  store i32 %56, i32* %code, align 4
  br label %for.inc42

for.inc42:                                        ; preds = %while.end37, %if.then24
  %60 = load i32, i32* %i, align 4
  %inc43 = add nsw i32 %60, 1
  store i32 %inc43, i32* %i, align 4
  br label %for.cond19

for.end44:                                        ; preds = %for.cond19
  %61 = load %struct.huffcode**, %struct.huffcode*** %codes, align 4
  store %struct.huffcode** %61, %struct.huffcode*** %retval, align 4
  br label %return

return:                                           ; preds = %for.end44, %if.then
  %62 = load %struct.huffcode**, %struct.huffcode*** %retval, align 4
  ret %struct.huffcode** %62
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define internal %struct.huffheap* @_heap_create(i32 %s, i32* %f) #0 {
entry:
  %s.addr = alloca i32, align 4
  %f.addr = alloca i32*, align 4
  %h = alloca %struct.huffheap*, align 4
  store i32 %s, i32* %s.addr, align 4
  store i32* %f, i32** %f.addr, align 4
  %call = call noalias i8* @malloc(i32 20)
  %0 = bitcast i8* %call to %struct.huffheap*
  store %struct.huffheap* %0, %struct.huffheap** %h, align 4
  %1 = load i32, i32* %s.addr, align 4
  %mul = mul i32 4, %1
  %call1 = call noalias i8* @malloc(i32 %mul)
  %2 = bitcast i8* %call1 to i32*
  %3 = load %struct.huffheap*, %struct.huffheap** %h, align 4
  %h2 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %3, i32 0, i32 0
  store i32* %2, i32** %h2, align 4
  %4 = load i32, i32* %s.addr, align 4
  %5 = load %struct.huffheap*, %struct.huffheap** %h, align 4
  %cs = getelementptr inbounds %struct.huffheap, %struct.huffheap* %5, i32 0, i32 3
  store i32 %4, i32* %cs, align 4
  %6 = load %struct.huffheap*, %struct.huffheap** %h, align 4
  %s3 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %6, i32 0, i32 2
  store i32 %4, i32* %s3, align 4
  %7 = load %struct.huffheap*, %struct.huffheap** %h, align 4
  %n = getelementptr inbounds %struct.huffheap, %struct.huffheap* %7, i32 0, i32 1
  store i32 0, i32* %n, align 4
  %8 = load i32*, i32** %f.addr, align 4
  %9 = load %struct.huffheap*, %struct.huffheap** %h, align 4
  %f4 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %9, i32 0, i32 4
  store i32* %8, i32** %f4, align 4
  %10 = load %struct.huffheap*, %struct.huffheap** %h, align 4
  ret %struct.huffheap* %10
}

; Function Attrs: noinline nounwind optnone
define internal void @_heap_add(%struct.huffheap* %heap, i32 %c) #0 {
entry:
  %heap.addr = alloca %struct.huffheap*, align 4
  %c.addr = alloca i32, align 4
  store %struct.huffheap* %heap, %struct.huffheap** %heap.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  %0 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %n = getelementptr inbounds %struct.huffheap, %struct.huffheap* %0, i32 0, i32 1
  %1 = load i32, i32* %n, align 4
  %add = add nsw i32 %1, 1
  %2 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %s = getelementptr inbounds %struct.huffheap, %struct.huffheap* %2, i32 0, i32 2
  %3 = load i32, i32* %s, align 4
  %cmp = icmp sgt i32 %add, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %h = getelementptr inbounds %struct.huffheap, %struct.huffheap* %4, i32 0, i32 0
  %5 = load i32*, i32** %h, align 4
  %6 = bitcast i32* %5 to i8*
  %7 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %s1 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %7, i32 0, i32 2
  %8 = load i32, i32* %s1, align 4
  %9 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %cs = getelementptr inbounds %struct.huffheap, %struct.huffheap* %9, i32 0, i32 3
  %10 = load i32, i32* %cs, align 4
  %add2 = add nsw i32 %8, %10
  %call = call i8* @realloc(i8* %6, i32 %add2)
  %11 = bitcast i8* %call to i32*
  %12 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %h3 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %12, i32 0, i32 0
  store i32* %11, i32** %h3, align 4
  %13 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %cs4 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %13, i32 0, i32 3
  %14 = load i32, i32* %cs4, align 4
  %15 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %s5 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %15, i32 0, i32 2
  %16 = load i32, i32* %s5, align 4
  %add6 = add nsw i32 %16, %14
  store i32 %add6, i32* %s5, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %17 = load i32, i32* %c.addr, align 4
  %18 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %h7 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %18, i32 0, i32 0
  %19 = load i32*, i32** %h7, align 4
  %20 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %n8 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %20, i32 0, i32 1
  %21 = load i32, i32* %n8, align 4
  %arrayidx = getelementptr inbounds i32, i32* %19, i32 %21
  store i32 %17, i32* %arrayidx, align 4
  %22 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %n9 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %22, i32 0, i32 1
  %23 = load i32, i32* %n9, align 4
  %inc = add nsw i32 %23, 1
  store i32 %inc, i32* %n9, align 4
  %24 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  call void @_heap_sort(%struct.huffheap* %24)
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i32 @_heap_remove(%struct.huffheap* %heap) #0 {
entry:
  %retval = alloca i32, align 4
  %heap.addr = alloca %struct.huffheap*, align 4
  store %struct.huffheap* %heap, %struct.huffheap** %heap.addr, align 4
  %0 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %n = getelementptr inbounds %struct.huffheap, %struct.huffheap* %0, i32 0, i32 1
  %1 = load i32, i32* %n, align 4
  %cmp = icmp sgt i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %n1 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %2, i32 0, i32 1
  %3 = load i32, i32* %n1, align 4
  %dec = add nsw i32 %3, -1
  store i32 %dec, i32* %n1, align 4
  %4 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %h = getelementptr inbounds %struct.huffheap, %struct.huffheap* %4, i32 0, i32 0
  %5 = load i32*, i32** %h, align 4
  %6 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %n2 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %6, i32 0, i32 1
  %7 = load i32, i32* %n2, align 4
  %arrayidx = getelementptr inbounds i32, i32* %5, i32 %7
  %8 = load i32, i32* %arrayidx, align 4
  store i32 %8, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  store i32 -1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %9 = load i32, i32* %retval, align 4
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone
define internal void @_heap_destroy(%struct.huffheap* %heap) #0 {
entry:
  %heap.addr = alloca %struct.huffheap*, align 4
  store %struct.huffheap* %heap, %struct.huffheap** %heap.addr, align 4
  %0 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %h = getelementptr inbounds %struct.huffheap, %struct.huffheap* %0, i32 0, i32 0
  %1 = load i32*, i32** %h, align 4
  %2 = bitcast i32* %1 to i8*
  call void @free(i8* %2)
  %3 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %4 = bitcast %struct.huffheap* %3 to i8*
  call void @free(i8* %4)
  ret void
}

declare noalias i8* @malloc(i32 %0) #3

; Function Attrs: nounwind readnone
declare i32 @abs(i32 %0) #4

; Function Attrs: noinline nounwind optnone
define hidden void @free_huffman_codes(%struct.huffcode** %c) #0 {
entry:
  %c.addr = alloca %struct.huffcode**, align 4
  %i = alloca i32, align 4
  store %struct.huffcode** %c, %struct.huffcode*** %c.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 256
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load %struct.huffcode**, %struct.huffcode*** %c.addr, align 4
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %1, i32 %2
  %3 = load %struct.huffcode*, %struct.huffcode** %arrayidx, align 4
  %4 = bitcast %struct.huffcode* %3 to i8*
  call void @free(i8* %4)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %6 = load %struct.huffcode**, %struct.huffcode*** %c.addr, align 4
  %7 = bitcast %struct.huffcode** %6 to i8*
  call void @free(i8* %7)
  ret void
}

declare void @free(i8* %0) #3

; Function Attrs: noinline nounwind optnone
define hidden void @inttobits(i32 %c, i32 %n, i8* %s) #0 {
entry:
  %c.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %s.addr = alloca i8*, align 4
  store i32 %c, i32* %c.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i8* %s, i8** %s.addr, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %0, i32 %1
  store i8 0, i8* %arrayidx, align 1
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %2 = load i32, i32* %n.addr, align 4
  %cmp = icmp sgt i32 %2, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i32, i32* %c.addr, align 4
  %rem = srem i32 %3, 2
  %add = add nsw i32 %rem, 48
  %conv = trunc i32 %add to i8
  %4 = load i8*, i8** %s.addr, align 4
  %5 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %5, 1
  %arrayidx1 = getelementptr inbounds i8, i8* %4, i32 %sub
  store i8 %conv, i8* %arrayidx1, align 1
  %6 = load i32, i32* %c.addr, align 4
  %shr = ashr i32 %6, 1
  store i32 %shr, i32* %c.addr, align 4
  %7 = load i32, i32* %n.addr, align 4
  %dec = add nsw i32 %7, -1
  store i32 %dec, i32* %n.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %r = alloca %struct.huffcode**, align 4
  %i = alloca i32, align 4
  %strbit = alloca [100 x i8], align 16
  %p = alloca i8*, align 4
  %freqs = alloca [256 x i32], align 16
  store i32 0, i32* %retval, align 4
  %arraydecay = getelementptr inbounds [256 x i32], [256 x i32]* %freqs, i32 0, i32 0
  %0 = bitcast i32* %arraydecay to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 1024, i1 false)
  %1 = load i8*, i8** @test, align 4
  store i8* %1, i8** %p, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %2 = load i8*, i8** %p, align 4
  %3 = load i8, i8* %2, align 1
  %conv = sext i8 %3 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i8*, i8** %p, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 1
  store i8* %incdec.ptr, i8** %p, align 4
  %5 = load i8, i8* %4, align 1
  %idxprom = sext i8 %5 to i32
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* %freqs, i32 0, i32 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %arrayidx, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %arraydecay2 = getelementptr inbounds [256 x i32], [256 x i32]* %freqs, i32 0, i32 0
  %call = call %struct.huffcode** @create_huffman_codes(i32* %arraydecay2)
  store %struct.huffcode** %call, %struct.huffcode*** %r, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.end
  %7 = load i32, i32* %i, align 4
  %cmp3 = icmp slt i32 %7, 256
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load %struct.huffcode**, %struct.huffcode*** %r, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %8, i32 %9
  %10 = load %struct.huffcode*, %struct.huffcode** %arrayidx5, align 4
  %cmp6 = icmp ne %struct.huffcode* %10, null
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %11 = load %struct.huffcode**, %struct.huffcode*** %r, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %11, i32 %12
  %13 = load %struct.huffcode*, %struct.huffcode** %arrayidx8, align 4
  %code = getelementptr inbounds %struct.huffcode, %struct.huffcode* %13, i32 0, i32 1
  %14 = load i32, i32* %code, align 4
  %15 = load %struct.huffcode**, %struct.huffcode*** %r, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %15, i32 %16
  %17 = load %struct.huffcode*, %struct.huffcode** %arrayidx9, align 4
  %nbits = getelementptr inbounds %struct.huffcode, %struct.huffcode* %17, i32 0, i32 0
  %18 = load i32, i32* %nbits, align 4
  %arraydecay10 = getelementptr inbounds [100 x i8], [100 x i8]* %strbit, i32 0, i32 0
  call void @inttobits(i32 %14, i32 %18, i8* %arraydecay10)
  %19 = load i32, i32* %i, align 4
  %20 = load %struct.huffcode**, %struct.huffcode*** %r, align 4
  %21 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %20, i32 %21
  %22 = load %struct.huffcode*, %struct.huffcode** %arrayidx11, align 4
  %code12 = getelementptr inbounds %struct.huffcode, %struct.huffcode* %22, i32 0, i32 1
  %23 = load i32, i32* %code12, align 4
  %arraydecay13 = getelementptr inbounds [100 x i8], [100 x i8]* %strbit, i32 0, i32 0
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i32 0, i32 0), i32 %19, i32 %23, i8* %arraydecay13)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %24 = load i32, i32* %i, align 4
  %inc15 = add nsw i32 %24, 1
  store i32 %inc15, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %25 = load %struct.huffcode**, %struct.huffcode*** %r, align 4
  call void @free_huffman_codes(%struct.huffcode** %25)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #3

declare i8* @realloc(i8* %0, i32 %1) #3

; Function Attrs: noinline nounwind optnone
define internal void @_heap_sort(%struct.huffheap* %heap) #0 {
entry:
  %heap.addr = alloca %struct.huffheap*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %a = alloca i32*, align 4
  %t_ = alloca i32, align 4
  store %struct.huffheap* %heap, %struct.huffheap** %heap.addr, align 4
  store i32 1, i32* %i, align 4
  store i32 2, i32* %j, align 4
  %0 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %h = getelementptr inbounds %struct.huffheap, %struct.huffheap* %0, i32 0, i32 0
  %1 = load i32*, i32** %h, align 4
  store i32* %1, i32** %a, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %n = getelementptr inbounds %struct.huffheap, %struct.huffheap* %3, i32 0, i32 1
  %4 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %2, %4
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %f = getelementptr inbounds %struct.huffheap, %struct.huffheap* %5, i32 0, i32 4
  %6 = load i32*, i32** %f, align 4
  %7 = load i32*, i32** %a, align 4
  %8 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %8, 1
  %arrayidx = getelementptr inbounds i32, i32* %7, i32 %sub
  %9 = load i32, i32* %arrayidx, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %6, i32 %9
  %10 = load i32, i32* %arrayidx1, align 4
  %11 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %f2 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %11, i32 0, i32 4
  %12 = load i32*, i32** %f2, align 4
  %13 = load i32*, i32** %a, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i32, i32* %13, i32 %14
  %15 = load i32, i32* %arrayidx3, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %12, i32 %15
  %16 = load i32, i32* %arrayidx4, align 4
  %cmp5 = icmp sge i32 %10, %16
  br i1 %cmp5, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %17 = load i32, i32* %j, align 4
  store i32 %17, i32* %i, align 4
  %18 = load i32, i32* %j, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %j, align 4
  br label %if.end

if.else:                                          ; preds = %while.body
  br label %do.body

do.body:                                          ; preds = %if.else
  %19 = load i32*, i32** %a, align 4
  %20 = load i32, i32* %i, align 4
  %sub6 = sub nsw i32 %20, 1
  %arrayidx7 = getelementptr inbounds i32, i32* %19, i32 %sub6
  %21 = load i32, i32* %arrayidx7, align 4
  store i32 %21, i32* %t_, align 4
  %22 = load i32*, i32** %a, align 4
  %23 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %22, i32 %23
  %24 = load i32, i32* %arrayidx8, align 4
  %25 = load i32*, i32** %a, align 4
  %26 = load i32, i32* %i, align 4
  %sub9 = sub nsw i32 %26, 1
  %arrayidx10 = getelementptr inbounds i32, i32* %25, i32 %sub9
  store i32 %24, i32* %arrayidx10, align 4
  %27 = load i32, i32* %t_, align 4
  %28 = load i32*, i32** %a, align 4
  %29 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds i32, i32* %28, i32 %29
  store i32 %27, i32* %arrayidx11, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %30 = load i32, i32* %i, align 4
  %dec = add nsw i32 %30, -1
  store i32 %dec, i32* %i, align 4
  %31 = load i32, i32* %i, align 4
  %cmp12 = icmp eq i32 %31, 0
  br i1 %cmp12, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.end
  %32 = load i32, i32* %j, align 4
  %inc13 = add nsw i32 %32, 1
  store i32 %inc13, i32* %j, align 4
  br label %cond.end

cond.false:                                       ; preds = %do.end
  %33 = load i32, i32* %i, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %32, %cond.true ], [ %33, %cond.false ]
  store i32 %cond, i32* %i, align 4
  br label %if.end

if.end:                                           ; preds = %cond.end, %if.then
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { argmemonly nounwind willreturn writeonly }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %1, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %s, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sgt i32 %add, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1
%3:i1 = slt %0, %2
infer %3

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %s1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %cs, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add2 = add nsw i32 %8, %10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %cs4, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %s5, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add6 = add nsw i32 %16, %14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %c.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %n8, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %n9, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %23, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1
%3:i1 = slt %0, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for ./Huffman_coding.c.bc:_heap_add()

; entering Souper's runOnFunction() for ./Huffman_coding.c.bc:_heap_remove()

; ModuleID = './Huffman_coding.c.bc'
source_filename = "./Huffman_coding.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.huffcode = type { i32, i32 }
%struct.huffheap = type { i32*, i32, i32, i32, i32* }

@.str = private unnamed_addr constant [40 x i8] c"this is an example for huffman encoding\00", align 1
@test = hidden global i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i32 0, i32 0), align 4
@.str.1 = private unnamed_addr constant [12 x i8] c"%c (%d) %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.huffcode** @create_huffman_codes(i32* %freqs) #0 {
entry:
  %retval = alloca %struct.huffcode**, align 4
  %freqs.addr = alloca i32*, align 4
  %codes = alloca %struct.huffcode**, align 4
  %heap = alloca %struct.huffheap*, align 4
  %efreqs = alloca [512 x i32], align 16
  %preds = alloca [512 x i32], align 16
  %i = alloca i32, align 4
  %extf = alloca i32, align 4
  %r1 = alloca i32, align 4
  %r2 = alloca i32, align 4
  %bc = alloca i32, align 4
  %bn = alloca i32, align 4
  %ix = alloca i32, align 4
  store i32* %freqs, i32** %freqs.addr, align 4
  store i32 256, i32* %extf, align 4
  %arraydecay = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 0
  %0 = bitcast i32* %arraydecay to i8*
  %1 = load i32*, i32** %freqs.addr, align 4
  %2 = bitcast i32* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 4 %2, i32 1024, i1 false)
  %arrayidx = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 256
  %3 = bitcast i32* %arrayidx to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %3, i8 0, i32 1024, i1 false)
  %arraydecay1 = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 0
  %call = call %struct.huffheap* @_heap_create(i32 512, i32* %arraydecay1)
  store %struct.huffheap* %call, %struct.huffheap** %heap, align 4
  %4 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  %cmp = icmp eq %struct.huffheap* %4, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.huffcode** null, %struct.huffcode*** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %5 = load i32, i32* %i, align 4
  %cmp2 = icmp slt i32 %5, 256
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 %6
  %7 = load i32, i32* %arrayidx3, align 4
  %cmp4 = icmp sgt i32 %7, 0
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %for.body
  %8 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  %9 = load i32, i32* %i, align 4
  call void @_heap_add(%struct.huffheap* %8, i32 %9)
  br label %if.end6

if.end6:                                          ; preds = %if.then5, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end6
  %10 = load i32, i32* %i, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end
  %11 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  %n = getelementptr inbounds %struct.huffheap, %struct.huffheap* %11, i32 0, i32 1
  %12 = load i32, i32* %n, align 4
  %cmp7 = icmp sgt i32 %12, 1
  br i1 %cmp7, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %13 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  %call8 = call i32 @_heap_remove(%struct.huffheap* %13)
  store i32 %call8, i32* %r1, align 4
  %14 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  %call9 = call i32 @_heap_remove(%struct.huffheap* %14)
  store i32 %call9, i32* %r2, align 4
  %15 = load i32, i32* %r1, align 4
  %arrayidx10 = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 %15
  %16 = load i32, i32* %arrayidx10, align 4
  %17 = load i32, i32* %r2, align 4
  %arrayidx11 = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 %17
  %18 = load i32, i32* %arrayidx11, align 4
  %add = add nsw i32 %16, %18
  %19 = load i32, i32* %extf, align 4
  %arrayidx12 = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 %19
  store i32 %add, i32* %arrayidx12, align 4
  %20 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  %21 = load i32, i32* %extf, align 4
  call void @_heap_add(%struct.huffheap* %20, i32 %21)
  %22 = load i32, i32* %extf, align 4
  %23 = load i32, i32* %r1, align 4
  %arrayidx13 = getelementptr inbounds [512 x i32], [512 x i32]* %preds, i32 0, i32 %23
  store i32 %22, i32* %arrayidx13, align 4
  %24 = load i32, i32* %extf, align 4
  %sub = sub nsw i32 0, %24
  %25 = load i32, i32* %r2, align 4
  %arrayidx14 = getelementptr inbounds [512 x i32], [512 x i32]* %preds, i32 0, i32 %25
  store i32 %sub, i32* %arrayidx14, align 4
  %26 = load i32, i32* %extf, align 4
  %inc15 = add nsw i32 %26, 1
  store i32 %inc15, i32* %extf, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %27 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  %call16 = call i32 @_heap_remove(%struct.huffheap* %27)
  store i32 %call16, i32* %r1, align 4
  %28 = load i32, i32* %r1, align 4
  %29 = load i32, i32* %r1, align 4
  %arrayidx17 = getelementptr inbounds [512 x i32], [512 x i32]* %preds, i32 0, i32 %29
  store i32 %28, i32* %arrayidx17, align 4
  %30 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  call void @_heap_destroy(%struct.huffheap* %30)
  %call18 = call noalias i8* @malloc(i32 1024)
  %31 = bitcast i8* %call18 to %struct.huffcode**
  store %struct.huffcode** %31, %struct.huffcode*** %codes, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond19

for.cond19:                                       ; preds = %for.inc42, %while.end
  %32 = load i32, i32* %i, align 4
  %cmp20 = icmp slt i32 %32, 256
  br i1 %cmp20, label %for.body21, label %for.end44

for.body21:                                       ; preds = %for.cond19
  store i32 0, i32* %bc, align 4
  store i32 0, i32* %bn, align 4
  %33 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 %33
  %34 = load i32, i32* %arrayidx22, align 4
  %cmp23 = icmp eq i32 %34, 0
  br i1 %cmp23, label %if.then24, label %if.end26

if.then24:                                        ; preds = %for.body21
  %35 = load %struct.huffcode**, %struct.huffcode*** %codes, align 4
  %36 = load i32, i32* %i, align 4
  %arrayidx25 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %35, i32 %36
  store %struct.huffcode* null, %struct.huffcode** %arrayidx25, align 4
  br label %for.inc42

if.end26:                                         ; preds = %for.body21
  %37 = load i32, i32* %i, align 4
  store i32 %37, i32* %ix, align 4
  br label %while.cond27

while.cond27:                                     ; preds = %while.body31, %if.end26
  %38 = load i32, i32* %ix, align 4
  %arrayidx28 = getelementptr inbounds [512 x i32], [512 x i32]* %preds, i32 0, i32 %38
  %39 = load i32, i32* %arrayidx28, align 4
  %call29 = call i32 @abs(i32 %39) #5
  %40 = load i32, i32* %ix, align 4
  %cmp30 = icmp ne i32 %call29, %40
  br i1 %cmp30, label %while.body31, label %while.end37

while.body31:                                     ; preds = %while.cond27
  %41 = load i32, i32* %ix, align 4
  %arrayidx32 = getelementptr inbounds [512 x i32], [512 x i32]* %preds, i32 0, i32 %41
  %42 = load i32, i32* %arrayidx32, align 4
  %cmp33 = icmp sge i32 %42, 0
  %43 = zext i1 %cmp33 to i64
  %cond = select i1 %cmp33, i32 1, i32 0
  %44 = load i32, i32* %bn, align 4
  %shl = shl i32 %cond, %44
  %45 = load i32, i32* %bc, align 4
  %or = or i32 %45, %shl
  store i32 %or, i32* %bc, align 4
  %46 = load i32, i32* %ix, align 4
  %arrayidx34 = getelementptr inbounds [512 x i32], [512 x i32]* %preds, i32 0, i32 %46
  %47 = load i32, i32* %arrayidx34, align 4
  %call35 = call i32 @abs(i32 %47) #5
  store i32 %call35, i32* %ix, align 4
  %48 = load i32, i32* %bn, align 4
  %inc36 = add nsw i32 %48, 1
  store i32 %inc36, i32* %bn, align 4
  br label %while.cond27

while.end37:                                      ; preds = %while.cond27
  %call38 = call noalias i8* @malloc(i32 8)
  %49 = bitcast i8* %call38 to %struct.huffcode*
  %50 = load %struct.huffcode**, %struct.huffcode*** %codes, align 4
  %51 = load i32, i32* %i, align 4
  %arrayidx39 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %50, i32 %51
  store %struct.huffcode* %49, %struct.huffcode** %arrayidx39, align 4
  %52 = load i32, i32* %bn, align 4
  %53 = load %struct.huffcode**, %struct.huffcode*** %codes, align 4
  %54 = load i32, i32* %i, align 4
  %arrayidx40 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %53, i32 %54
  %55 = load %struct.huffcode*, %struct.huffcode** %arrayidx40, align 4
  %nbits = getelementptr inbounds %struct.huffcode, %struct.huffcode* %55, i32 0, i32 0
  store i32 %52, i32* %nbits, align 4
  %56 = load i32, i32* %bc, align 4
  %57 = load %struct.huffcode**, %struct.huffcode*** %codes, align 4
  %58 = load i32, i32* %i, align 4
  %arrayidx41 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %57, i32 %58
  %59 = load %struct.huffcode*, %struct.huffcode** %arrayidx41, align 4
  %code = getelementptr inbounds %struct.huffcode, %struct.huffcode* %59, i32 0, i32 1
  store i32 %56, i32* %code, align 4
  br label %for.inc42

for.inc42:                                        ; preds = %while.end37, %if.then24
  %60 = load i32, i32* %i, align 4
  %inc43 = add nsw i32 %60, 1
  store i32 %inc43, i32* %i, align 4
  br label %for.cond19

for.end44:                                        ; preds = %for.cond19
  %61 = load %struct.huffcode**, %struct.huffcode*** %codes, align 4
  store %struct.huffcode** %61, %struct.huffcode*** %retval, align 4
  br label %return

return:                                           ; preds = %for.end44, %if.then
  %62 = load %struct.huffcode**, %struct.huffcode*** %retval, align 4
  ret %struct.huffcode** %62
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define internal %struct.huffheap* @_heap_create(i32 %s, i32* %f) #0 {
entry:
  %s.addr = alloca i32, align 4
  %f.addr = alloca i32*, align 4
  %h = alloca %struct.huffheap*, align 4
  store i32 %s, i32* %s.addr, align 4
  store i32* %f, i32** %f.addr, align 4
  %call = call noalias i8* @malloc(i32 20)
  %0 = bitcast i8* %call to %struct.huffheap*
  store %struct.huffheap* %0, %struct.huffheap** %h, align 4
  %1 = load i32, i32* %s.addr, align 4
  %mul = mul i32 4, %1
  %call1 = call noalias i8* @malloc(i32 %mul)
  %2 = bitcast i8* %call1 to i32*
  %3 = load %struct.huffheap*, %struct.huffheap** %h, align 4
  %h2 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %3, i32 0, i32 0
  store i32* %2, i32** %h2, align 4
  %4 = load i32, i32* %s.addr, align 4
  %5 = load %struct.huffheap*, %struct.huffheap** %h, align 4
  %cs = getelementptr inbounds %struct.huffheap, %struct.huffheap* %5, i32 0, i32 3
  store i32 %4, i32* %cs, align 4
  %6 = load %struct.huffheap*, %struct.huffheap** %h, align 4
  %s3 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %6, i32 0, i32 2
  store i32 %4, i32* %s3, align 4
  %7 = load %struct.huffheap*, %struct.huffheap** %h, align 4
  %n = getelementptr inbounds %struct.huffheap, %struct.huffheap* %7, i32 0, i32 1
  store i32 0, i32* %n, align 4
  %8 = load i32*, i32** %f.addr, align 4
  %9 = load %struct.huffheap*, %struct.huffheap** %h, align 4
  %f4 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %9, i32 0, i32 4
  store i32* %8, i32** %f4, align 4
  %10 = load %struct.huffheap*, %struct.huffheap** %h, align 4
  ret %struct.huffheap* %10
}

; Function Attrs: noinline nounwind optnone
define internal void @_heap_add(%struct.huffheap* %heap, i32 %c) #0 {
entry:
  %heap.addr = alloca %struct.huffheap*, align 4
  %c.addr = alloca i32, align 4
  store %struct.huffheap* %heap, %struct.huffheap** %heap.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  %0 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %n = getelementptr inbounds %struct.huffheap, %struct.huffheap* %0, i32 0, i32 1
  %1 = load i32, i32* %n, align 4
  %add = add nsw i32 %1, 1
  %2 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %s = getelementptr inbounds %struct.huffheap, %struct.huffheap* %2, i32 0, i32 2
  %3 = load i32, i32* %s, align 4
  %cmp = icmp sgt i32 %add, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %h = getelementptr inbounds %struct.huffheap, %struct.huffheap* %4, i32 0, i32 0
  %5 = load i32*, i32** %h, align 4
  %6 = bitcast i32* %5 to i8*
  %7 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %s1 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %7, i32 0, i32 2
  %8 = load i32, i32* %s1, align 4
  %9 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %cs = getelementptr inbounds %struct.huffheap, %struct.huffheap* %9, i32 0, i32 3
  %10 = load i32, i32* %cs, align 4
  %add2 = add nsw i32 %8, %10
  %call = call i8* @realloc(i8* %6, i32 %add2)
  %11 = bitcast i8* %call to i32*
  %12 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %h3 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %12, i32 0, i32 0
  store i32* %11, i32** %h3, align 4
  %13 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %cs4 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %13, i32 0, i32 3
  %14 = load i32, i32* %cs4, align 4
  %15 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %s5 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %15, i32 0, i32 2
  %16 = load i32, i32* %s5, align 4
  %add6 = add nsw i32 %16, %14
  store i32 %add6, i32* %s5, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %17 = load i32, i32* %c.addr, align 4
  %18 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %h7 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %18, i32 0, i32 0
  %19 = load i32*, i32** %h7, align 4
  %20 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %n8 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %20, i32 0, i32 1
  %21 = load i32, i32* %n8, align 4
  %arrayidx = getelementptr inbounds i32, i32* %19, i32 %21
  store i32 %17, i32* %arrayidx, align 4
  %22 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %n9 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %22, i32 0, i32 1
  %23 = load i32, i32* %n9, align 4
  %inc = add nsw i32 %23, 1
  store i32 %inc, i32* %n9, align 4
  %24 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  call void @_heap_sort(%struct.huffheap* %24)
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i32 @_heap_remove(%struct.huffheap* %heap) #0 {
entry:
  %retval = alloca i32, align 4
  %heap.addr = alloca %struct.huffheap*, align 4
  store %struct.huffheap* %heap, %struct.huffheap** %heap.addr, align 4
  %0 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %n = getelementptr inbounds %struct.huffheap, %struct.huffheap* %0, i32 0, i32 1
  %1 = load i32, i32* %n, align 4
  %cmp = icmp sgt i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %n1 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %2, i32 0, i32 1
  %3 = load i32, i32* %n1, align 4
  %dec = add nsw i32 %3, -1
  store i32 %dec, i32* %n1, align 4
  %4 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %h = getelementptr inbounds %struct.huffheap, %struct.huffheap* %4, i32 0, i32 0
  %5 = load i32*, i32** %h, align 4
  %6 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %n2 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %6, i32 0, i32 1
  %7 = load i32, i32* %n2, align 4
  %arrayidx = getelementptr inbounds i32, i32* %5, i32 %7
  %8 = load i32, i32* %arrayidx, align 4
  store i32 %8, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  store i32 -1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %9 = load i32, i32* %retval, align 4
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone
define internal void @_heap_destroy(%struct.huffheap* %heap) #0 {
entry:
  %heap.addr = alloca %struct.huffheap*, align 4
  store %struct.huffheap* %heap, %struct.huffheap** %heap.addr, align 4
  %0 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %h = getelementptr inbounds %struct.huffheap, %struct.huffheap* %0, i32 0, i32 0
  %1 = load i32*, i32** %h, align 4
  %2 = bitcast i32* %1 to i8*
  call void @free(i8* %2)
  %3 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %4 = bitcast %struct.huffheap* %3 to i8*
  call void @free(i8* %4)
  ret void
}

declare noalias i8* @malloc(i32 %0) #3

; Function Attrs: nounwind readnone
declare i32 @abs(i32 %0) #4

; Function Attrs: noinline nounwind optnone
define hidden void @free_huffman_codes(%struct.huffcode** %c) #0 {
entry:
  %c.addr = alloca %struct.huffcode**, align 4
  %i = alloca i32, align 4
  store %struct.huffcode** %c, %struct.huffcode*** %c.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 256
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load %struct.huffcode**, %struct.huffcode*** %c.addr, align 4
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %1, i32 %2
  %3 = load %struct.huffcode*, %struct.huffcode** %arrayidx, align 4
  %4 = bitcast %struct.huffcode* %3 to i8*
  call void @free(i8* %4)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %6 = load %struct.huffcode**, %struct.huffcode*** %c.addr, align 4
  %7 = bitcast %struct.huffcode** %6 to i8*
  call void @free(i8* %7)
  ret void
}

declare void @free(i8* %0) #3

; Function Attrs: noinline nounwind optnone
define hidden void @inttobits(i32 %c, i32 %n, i8* %s) #0 {
entry:
  %c.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %s.addr = alloca i8*, align 4
  store i32 %c, i32* %c.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i8* %s, i8** %s.addr, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %0, i32 %1
  store i8 0, i8* %arrayidx, align 1
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %2 = load i32, i32* %n.addr, align 4
  %cmp = icmp sgt i32 %2, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i32, i32* %c.addr, align 4
  %rem = srem i32 %3, 2
  %add = add nsw i32 %rem, 48
  %conv = trunc i32 %add to i8
  %4 = load i8*, i8** %s.addr, align 4
  %5 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %5, 1
  %arrayidx1 = getelementptr inbounds i8, i8* %4, i32 %sub
  store i8 %conv, i8* %arrayidx1, align 1
  %6 = load i32, i32* %c.addr, align 4
  %shr = ashr i32 %6, 1
  store i32 %shr, i32* %c.addr, align 4
  %7 = load i32, i32* %n.addr, align 4
  %dec = add nsw i32 %7, -1
  store i32 %dec, i32* %n.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %r = alloca %struct.huffcode**, align 4
  %i = alloca i32, align 4
  %strbit = alloca [100 x i8], align 16
  %p = alloca i8*, align 4
  %freqs = alloca [256 x i32], align 16
  store i32 0, i32* %retval, align 4
  %arraydecay = getelementptr inbounds [256 x i32], [256 x i32]* %freqs, i32 0, i32 0
  %0 = bitcast i32* %arraydecay to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 1024, i1 false)
  %1 = load i8*, i8** @test, align 4
  store i8* %1, i8** %p, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %2 = load i8*, i8** %p, align 4
  %3 = load i8, i8* %2, align 1
  %conv = sext i8 %3 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i8*, i8** %p, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 1
  store i8* %incdec.ptr, i8** %p, align 4
  %5 = load i8, i8* %4, align 1
  %idxprom = sext i8 %5 to i32
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* %freqs, i32 0, i32 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %arrayidx, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %arraydecay2 = getelementptr inbounds [256 x i32], [256 x i32]* %freqs, i32 0, i32 0
  %call = call %struct.huffcode** @create_huffman_codes(i32* %arraydecay2)
  store %struct.huffcode** %call, %struct.huffcode*** %r, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.end
  %7 = load i32, i32* %i, align 4
  %cmp3 = icmp slt i32 %7, 256
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load %struct.huffcode**, %struct.huffcode*** %r, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %8, i32 %9
  %10 = load %struct.huffcode*, %struct.huffcode** %arrayidx5, align 4
  %cmp6 = icmp ne %struct.huffcode* %10, null
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %11 = load %struct.huffcode**, %struct.huffcode*** %r, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %11, i32 %12
  %13 = load %struct.huffcode*, %struct.huffcode** %arrayidx8, align 4
  %code = getelementptr inbounds %struct.huffcode, %struct.huffcode* %13, i32 0, i32 1
  %14 = load i32, i32* %code, align 4
  %15 = load %struct.huffcode**, %struct.huffcode*** %r, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %15, i32 %16
  %17 = load %struct.huffcode*, %struct.huffcode** %arrayidx9, align 4
  %nbits = getelementptr inbounds %struct.huffcode, %struct.huffcode* %17, i32 0, i32 0
  %18 = load i32, i32* %nbits, align 4
  %arraydecay10 = getelementptr inbounds [100 x i8], [100 x i8]* %strbit, i32 0, i32 0
  call void @inttobits(i32 %14, i32 %18, i8* %arraydecay10)
  %19 = load i32, i32* %i, align 4
  %20 = load %struct.huffcode**, %struct.huffcode*** %r, align 4
  %21 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %20, i32 %21
  %22 = load %struct.huffcode*, %struct.huffcode** %arrayidx11, align 4
  %code12 = getelementptr inbounds %struct.huffcode, %struct.huffcode* %22, i32 0, i32 1
  %23 = load i32, i32* %code12, align 4
  %arraydecay13 = getelementptr inbounds [100 x i8], [100 x i8]* %strbit, i32 0, i32 0
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i32 0, i32 0), i32 %19, i32 %23, i8* %arraydecay13)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %24 = load i32, i32* %i, align 4
  %inc15 = add nsw i32 %24, 1
  store i32 %inc15, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %25 = load %struct.huffcode**, %struct.huffcode*** %r, align 4
  call void @free_huffman_codes(%struct.huffcode** %25)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #3

declare i8* @realloc(i8* %0, i32 %1) #3

; Function Attrs: noinline nounwind optnone
define internal void @_heap_sort(%struct.huffheap* %heap) #0 {
entry:
  %heap.addr = alloca %struct.huffheap*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %a = alloca i32*, align 4
  %t_ = alloca i32, align 4
  store %struct.huffheap* %heap, %struct.huffheap** %heap.addr, align 4
  store i32 1, i32* %i, align 4
  store i32 2, i32* %j, align 4
  %0 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %h = getelementptr inbounds %struct.huffheap, %struct.huffheap* %0, i32 0, i32 0
  %1 = load i32*, i32** %h, align 4
  store i32* %1, i32** %a, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %n = getelementptr inbounds %struct.huffheap, %struct.huffheap* %3, i32 0, i32 1
  %4 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %2, %4
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %f = getelementptr inbounds %struct.huffheap, %struct.huffheap* %5, i32 0, i32 4
  %6 = load i32*, i32** %f, align 4
  %7 = load i32*, i32** %a, align 4
  %8 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %8, 1
  %arrayidx = getelementptr inbounds i32, i32* %7, i32 %sub
  %9 = load i32, i32* %arrayidx, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %6, i32 %9
  %10 = load i32, i32* %arrayidx1, align 4
  %11 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %f2 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %11, i32 0, i32 4
  %12 = load i32*, i32** %f2, align 4
  %13 = load i32*, i32** %a, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i32, i32* %13, i32 %14
  %15 = load i32, i32* %arrayidx3, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %12, i32 %15
  %16 = load i32, i32* %arrayidx4, align 4
  %cmp5 = icmp sge i32 %10, %16
  br i1 %cmp5, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %17 = load i32, i32* %j, align 4
  store i32 %17, i32* %i, align 4
  %18 = load i32, i32* %j, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %j, align 4
  br label %if.end

if.else:                                          ; preds = %while.body
  br label %do.body

do.body:                                          ; preds = %if.else
  %19 = load i32*, i32** %a, align 4
  %20 = load i32, i32* %i, align 4
  %sub6 = sub nsw i32 %20, 1
  %arrayidx7 = getelementptr inbounds i32, i32* %19, i32 %sub6
  %21 = load i32, i32* %arrayidx7, align 4
  store i32 %21, i32* %t_, align 4
  %22 = load i32*, i32** %a, align 4
  %23 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %22, i32 %23
  %24 = load i32, i32* %arrayidx8, align 4
  %25 = load i32*, i32** %a, align 4
  %26 = load i32, i32* %i, align 4
  %sub9 = sub nsw i32 %26, 1
  %arrayidx10 = getelementptr inbounds i32, i32* %25, i32 %sub9
  store i32 %24, i32* %arrayidx10, align 4
  %27 = load i32, i32* %t_, align 4
  %28 = load i32*, i32** %a, align 4
  %29 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds i32, i32* %28, i32 %29
  store i32 %27, i32* %arrayidx11, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %30 = load i32, i32* %i, align 4
  %dec = add nsw i32 %30, -1
  store i32 %dec, i32* %i, align 4
  %31 = load i32, i32* %i, align 4
  %cmp12 = icmp eq i32 %31, 0
  br i1 %cmp12, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.end
  %32 = load i32, i32* %j, align 4
  %inc13 = add nsw i32 %32, 1
  store i32 %inc13, i32* %j, align 4
  br label %cond.end

cond.false:                                       ; preds = %do.end
  %33 = load i32, i32* %i, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %32, %cond.true ], [ %33, %cond.false ]
  store i32 %cond, i32* %i, align 4
  br label %if.end

if.end:                                           ; preds = %cond.end, %if.then
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { argmemonly nounwind willreturn writeonly }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sgt i32 %1, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %n1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec = add nsw i32 %3, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %n2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for ./Huffman_coding.c.bc:_heap_remove()

; entering Souper's runOnFunction() for ./Huffman_coding.c.bc:_heap_destroy()

; ModuleID = './Huffman_coding.c.bc'
source_filename = "./Huffman_coding.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.huffcode = type { i32, i32 }
%struct.huffheap = type { i32*, i32, i32, i32, i32* }

@.str = private unnamed_addr constant [40 x i8] c"this is an example for huffman encoding\00", align 1
@test = hidden global i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i32 0, i32 0), align 4
@.str.1 = private unnamed_addr constant [12 x i8] c"%c (%d) %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.huffcode** @create_huffman_codes(i32* %freqs) #0 {
entry:
  %retval = alloca %struct.huffcode**, align 4
  %freqs.addr = alloca i32*, align 4
  %codes = alloca %struct.huffcode**, align 4
  %heap = alloca %struct.huffheap*, align 4
  %efreqs = alloca [512 x i32], align 16
  %preds = alloca [512 x i32], align 16
  %i = alloca i32, align 4
  %extf = alloca i32, align 4
  %r1 = alloca i32, align 4
  %r2 = alloca i32, align 4
  %bc = alloca i32, align 4
  %bn = alloca i32, align 4
  %ix = alloca i32, align 4
  store i32* %freqs, i32** %freqs.addr, align 4
  store i32 256, i32* %extf, align 4
  %arraydecay = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 0
  %0 = bitcast i32* %arraydecay to i8*
  %1 = load i32*, i32** %freqs.addr, align 4
  %2 = bitcast i32* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 4 %2, i32 1024, i1 false)
  %arrayidx = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 256
  %3 = bitcast i32* %arrayidx to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %3, i8 0, i32 1024, i1 false)
  %arraydecay1 = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 0
  %call = call %struct.huffheap* @_heap_create(i32 512, i32* %arraydecay1)
  store %struct.huffheap* %call, %struct.huffheap** %heap, align 4
  %4 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  %cmp = icmp eq %struct.huffheap* %4, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.huffcode** null, %struct.huffcode*** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %5 = load i32, i32* %i, align 4
  %cmp2 = icmp slt i32 %5, 256
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 %6
  %7 = load i32, i32* %arrayidx3, align 4
  %cmp4 = icmp sgt i32 %7, 0
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %for.body
  %8 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  %9 = load i32, i32* %i, align 4
  call void @_heap_add(%struct.huffheap* %8, i32 %9)
  br label %if.end6

if.end6:                                          ; preds = %if.then5, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end6
  %10 = load i32, i32* %i, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end
  %11 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  %n = getelementptr inbounds %struct.huffheap, %struct.huffheap* %11, i32 0, i32 1
  %12 = load i32, i32* %n, align 4
  %cmp7 = icmp sgt i32 %12, 1
  br i1 %cmp7, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %13 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  %call8 = call i32 @_heap_remove(%struct.huffheap* %13)
  store i32 %call8, i32* %r1, align 4
  %14 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  %call9 = call i32 @_heap_remove(%struct.huffheap* %14)
  store i32 %call9, i32* %r2, align 4
  %15 = load i32, i32* %r1, align 4
  %arrayidx10 = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 %15
  %16 = load i32, i32* %arrayidx10, align 4
  %17 = load i32, i32* %r2, align 4
  %arrayidx11 = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 %17
  %18 = load i32, i32* %arrayidx11, align 4
  %add = add nsw i32 %16, %18
  %19 = load i32, i32* %extf, align 4
  %arrayidx12 = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 %19
  store i32 %add, i32* %arrayidx12, align 4
  %20 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  %21 = load i32, i32* %extf, align 4
  call void @_heap_add(%struct.huffheap* %20, i32 %21)
  %22 = load i32, i32* %extf, align 4
  %23 = load i32, i32* %r1, align 4
  %arrayidx13 = getelementptr inbounds [512 x i32], [512 x i32]* %preds, i32 0, i32 %23
  store i32 %22, i32* %arrayidx13, align 4
  %24 = load i32, i32* %extf, align 4
  %sub = sub nsw i32 0, %24
  %25 = load i32, i32* %r2, align 4
  %arrayidx14 = getelementptr inbounds [512 x i32], [512 x i32]* %preds, i32 0, i32 %25
  store i32 %sub, i32* %arrayidx14, align 4
  %26 = load i32, i32* %extf, align 4
  %inc15 = add nsw i32 %26, 1
  store i32 %inc15, i32* %extf, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %27 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  %call16 = call i32 @_heap_remove(%struct.huffheap* %27)
  store i32 %call16, i32* %r1, align 4
  %28 = load i32, i32* %r1, align 4
  %29 = load i32, i32* %r1, align 4
  %arrayidx17 = getelementptr inbounds [512 x i32], [512 x i32]* %preds, i32 0, i32 %29
  store i32 %28, i32* %arrayidx17, align 4
  %30 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  call void @_heap_destroy(%struct.huffheap* %30)
  %call18 = call noalias i8* @malloc(i32 1024)
  %31 = bitcast i8* %call18 to %struct.huffcode**
  store %struct.huffcode** %31, %struct.huffcode*** %codes, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond19

for.cond19:                                       ; preds = %for.inc42, %while.end
  %32 = load i32, i32* %i, align 4
  %cmp20 = icmp slt i32 %32, 256
  br i1 %cmp20, label %for.body21, label %for.end44

for.body21:                                       ; preds = %for.cond19
  store i32 0, i32* %bc, align 4
  store i32 0, i32* %bn, align 4
  %33 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 %33
  %34 = load i32, i32* %arrayidx22, align 4
  %cmp23 = icmp eq i32 %34, 0
  br i1 %cmp23, label %if.then24, label %if.end26

if.then24:                                        ; preds = %for.body21
  %35 = load %struct.huffcode**, %struct.huffcode*** %codes, align 4
  %36 = load i32, i32* %i, align 4
  %arrayidx25 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %35, i32 %36
  store %struct.huffcode* null, %struct.huffcode** %arrayidx25, align 4
  br label %for.inc42

if.end26:                                         ; preds = %for.body21
  %37 = load i32, i32* %i, align 4
  store i32 %37, i32* %ix, align 4
  br label %while.cond27

while.cond27:                                     ; preds = %while.body31, %if.end26
  %38 = load i32, i32* %ix, align 4
  %arrayidx28 = getelementptr inbounds [512 x i32], [512 x i32]* %preds, i32 0, i32 %38
  %39 = load i32, i32* %arrayidx28, align 4
  %call29 = call i32 @abs(i32 %39) #5
  %40 = load i32, i32* %ix, align 4
  %cmp30 = icmp ne i32 %call29, %40
  br i1 %cmp30, label %while.body31, label %while.end37

while.body31:                                     ; preds = %while.cond27
  %41 = load i32, i32* %ix, align 4
  %arrayidx32 = getelementptr inbounds [512 x i32], [512 x i32]* %preds, i32 0, i32 %41
  %42 = load i32, i32* %arrayidx32, align 4
  %cmp33 = icmp sge i32 %42, 0
  %43 = zext i1 %cmp33 to i64
  %cond = select i1 %cmp33, i32 1, i32 0
  %44 = load i32, i32* %bn, align 4
  %shl = shl i32 %cond, %44
  %45 = load i32, i32* %bc, align 4
  %or = or i32 %45, %shl
  store i32 %or, i32* %bc, align 4
  %46 = load i32, i32* %ix, align 4
  %arrayidx34 = getelementptr inbounds [512 x i32], [512 x i32]* %preds, i32 0, i32 %46
  %47 = load i32, i32* %arrayidx34, align 4
  %call35 = call i32 @abs(i32 %47) #5
  store i32 %call35, i32* %ix, align 4
  %48 = load i32, i32* %bn, align 4
  %inc36 = add nsw i32 %48, 1
  store i32 %inc36, i32* %bn, align 4
  br label %while.cond27

while.end37:                                      ; preds = %while.cond27
  %call38 = call noalias i8* @malloc(i32 8)
  %49 = bitcast i8* %call38 to %struct.huffcode*
  %50 = load %struct.huffcode**, %struct.huffcode*** %codes, align 4
  %51 = load i32, i32* %i, align 4
  %arrayidx39 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %50, i32 %51
  store %struct.huffcode* %49, %struct.huffcode** %arrayidx39, align 4
  %52 = load i32, i32* %bn, align 4
  %53 = load %struct.huffcode**, %struct.huffcode*** %codes, align 4
  %54 = load i32, i32* %i, align 4
  %arrayidx40 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %53, i32 %54
  %55 = load %struct.huffcode*, %struct.huffcode** %arrayidx40, align 4
  %nbits = getelementptr inbounds %struct.huffcode, %struct.huffcode* %55, i32 0, i32 0
  store i32 %52, i32* %nbits, align 4
  %56 = load i32, i32* %bc, align 4
  %57 = load %struct.huffcode**, %struct.huffcode*** %codes, align 4
  %58 = load i32, i32* %i, align 4
  %arrayidx41 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %57, i32 %58
  %59 = load %struct.huffcode*, %struct.huffcode** %arrayidx41, align 4
  %code = getelementptr inbounds %struct.huffcode, %struct.huffcode* %59, i32 0, i32 1
  store i32 %56, i32* %code, align 4
  br label %for.inc42

for.inc42:                                        ; preds = %while.end37, %if.then24
  %60 = load i32, i32* %i, align 4
  %inc43 = add nsw i32 %60, 1
  store i32 %inc43, i32* %i, align 4
  br label %for.cond19

for.end44:                                        ; preds = %for.cond19
  %61 = load %struct.huffcode**, %struct.huffcode*** %codes, align 4
  store %struct.huffcode** %61, %struct.huffcode*** %retval, align 4
  br label %return

return:                                           ; preds = %for.end44, %if.then
  %62 = load %struct.huffcode**, %struct.huffcode*** %retval, align 4
  ret %struct.huffcode** %62
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define internal %struct.huffheap* @_heap_create(i32 %s, i32* %f) #0 {
entry:
  %s.addr = alloca i32, align 4
  %f.addr = alloca i32*, align 4
  %h = alloca %struct.huffheap*, align 4
  store i32 %s, i32* %s.addr, align 4
  store i32* %f, i32** %f.addr, align 4
  %call = call noalias i8* @malloc(i32 20)
  %0 = bitcast i8* %call to %struct.huffheap*
  store %struct.huffheap* %0, %struct.huffheap** %h, align 4
  %1 = load i32, i32* %s.addr, align 4
  %mul = mul i32 4, %1
  %call1 = call noalias i8* @malloc(i32 %mul)
  %2 = bitcast i8* %call1 to i32*
  %3 = load %struct.huffheap*, %struct.huffheap** %h, align 4
  %h2 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %3, i32 0, i32 0
  store i32* %2, i32** %h2, align 4
  %4 = load i32, i32* %s.addr, align 4
  %5 = load %struct.huffheap*, %struct.huffheap** %h, align 4
  %cs = getelementptr inbounds %struct.huffheap, %struct.huffheap* %5, i32 0, i32 3
  store i32 %4, i32* %cs, align 4
  %6 = load %struct.huffheap*, %struct.huffheap** %h, align 4
  %s3 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %6, i32 0, i32 2
  store i32 %4, i32* %s3, align 4
  %7 = load %struct.huffheap*, %struct.huffheap** %h, align 4
  %n = getelementptr inbounds %struct.huffheap, %struct.huffheap* %7, i32 0, i32 1
  store i32 0, i32* %n, align 4
  %8 = load i32*, i32** %f.addr, align 4
  %9 = load %struct.huffheap*, %struct.huffheap** %h, align 4
  %f4 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %9, i32 0, i32 4
  store i32* %8, i32** %f4, align 4
  %10 = load %struct.huffheap*, %struct.huffheap** %h, align 4
  ret %struct.huffheap* %10
}

; Function Attrs: noinline nounwind optnone
define internal void @_heap_add(%struct.huffheap* %heap, i32 %c) #0 {
entry:
  %heap.addr = alloca %struct.huffheap*, align 4
  %c.addr = alloca i32, align 4
  store %struct.huffheap* %heap, %struct.huffheap** %heap.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  %0 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %n = getelementptr inbounds %struct.huffheap, %struct.huffheap* %0, i32 0, i32 1
  %1 = load i32, i32* %n, align 4
  %add = add nsw i32 %1, 1
  %2 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %s = getelementptr inbounds %struct.huffheap, %struct.huffheap* %2, i32 0, i32 2
  %3 = load i32, i32* %s, align 4
  %cmp = icmp sgt i32 %add, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %h = getelementptr inbounds %struct.huffheap, %struct.huffheap* %4, i32 0, i32 0
  %5 = load i32*, i32** %h, align 4
  %6 = bitcast i32* %5 to i8*
  %7 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %s1 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %7, i32 0, i32 2
  %8 = load i32, i32* %s1, align 4
  %9 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %cs = getelementptr inbounds %struct.huffheap, %struct.huffheap* %9, i32 0, i32 3
  %10 = load i32, i32* %cs, align 4
  %add2 = add nsw i32 %8, %10
  %call = call i8* @realloc(i8* %6, i32 %add2)
  %11 = bitcast i8* %call to i32*
  %12 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %h3 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %12, i32 0, i32 0
  store i32* %11, i32** %h3, align 4
  %13 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %cs4 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %13, i32 0, i32 3
  %14 = load i32, i32* %cs4, align 4
  %15 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %s5 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %15, i32 0, i32 2
  %16 = load i32, i32* %s5, align 4
  %add6 = add nsw i32 %16, %14
  store i32 %add6, i32* %s5, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %17 = load i32, i32* %c.addr, align 4
  %18 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %h7 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %18, i32 0, i32 0
  %19 = load i32*, i32** %h7, align 4
  %20 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %n8 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %20, i32 0, i32 1
  %21 = load i32, i32* %n8, align 4
  %arrayidx = getelementptr inbounds i32, i32* %19, i32 %21
  store i32 %17, i32* %arrayidx, align 4
  %22 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %n9 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %22, i32 0, i32 1
  %23 = load i32, i32* %n9, align 4
  %inc = add nsw i32 %23, 1
  store i32 %inc, i32* %n9, align 4
  %24 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  call void @_heap_sort(%struct.huffheap* %24)
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i32 @_heap_remove(%struct.huffheap* %heap) #0 {
entry:
  %retval = alloca i32, align 4
  %heap.addr = alloca %struct.huffheap*, align 4
  store %struct.huffheap* %heap, %struct.huffheap** %heap.addr, align 4
  %0 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %n = getelementptr inbounds %struct.huffheap, %struct.huffheap* %0, i32 0, i32 1
  %1 = load i32, i32* %n, align 4
  %cmp = icmp sgt i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %n1 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %2, i32 0, i32 1
  %3 = load i32, i32* %n1, align 4
  %dec = add nsw i32 %3, -1
  store i32 %dec, i32* %n1, align 4
  %4 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %h = getelementptr inbounds %struct.huffheap, %struct.huffheap* %4, i32 0, i32 0
  %5 = load i32*, i32** %h, align 4
  %6 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %n2 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %6, i32 0, i32 1
  %7 = load i32, i32* %n2, align 4
  %arrayidx = getelementptr inbounds i32, i32* %5, i32 %7
  %8 = load i32, i32* %arrayidx, align 4
  store i32 %8, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  store i32 -1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %9 = load i32, i32* %retval, align 4
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone
define internal void @_heap_destroy(%struct.huffheap* %heap) #0 {
entry:
  %heap.addr = alloca %struct.huffheap*, align 4
  store %struct.huffheap* %heap, %struct.huffheap** %heap.addr, align 4
  %0 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %h = getelementptr inbounds %struct.huffheap, %struct.huffheap* %0, i32 0, i32 0
  %1 = load i32*, i32** %h, align 4
  %2 = bitcast i32* %1 to i8*
  call void @free(i8* %2)
  %3 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %4 = bitcast %struct.huffheap* %3 to i8*
  call void @free(i8* %4)
  ret void
}

declare noalias i8* @malloc(i32 %0) #3

; Function Attrs: nounwind readnone
declare i32 @abs(i32 %0) #4

; Function Attrs: noinline nounwind optnone
define hidden void @free_huffman_codes(%struct.huffcode** %c) #0 {
entry:
  %c.addr = alloca %struct.huffcode**, align 4
  %i = alloca i32, align 4
  store %struct.huffcode** %c, %struct.huffcode*** %c.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 256
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load %struct.huffcode**, %struct.huffcode*** %c.addr, align 4
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %1, i32 %2
  %3 = load %struct.huffcode*, %struct.huffcode** %arrayidx, align 4
  %4 = bitcast %struct.huffcode* %3 to i8*
  call void @free(i8* %4)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %6 = load %struct.huffcode**, %struct.huffcode*** %c.addr, align 4
  %7 = bitcast %struct.huffcode** %6 to i8*
  call void @free(i8* %7)
  ret void
}

declare void @free(i8* %0) #3

; Function Attrs: noinline nounwind optnone
define hidden void @inttobits(i32 %c, i32 %n, i8* %s) #0 {
entry:
  %c.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %s.addr = alloca i8*, align 4
  store i32 %c, i32* %c.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i8* %s, i8** %s.addr, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %0, i32 %1
  store i8 0, i8* %arrayidx, align 1
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %2 = load i32, i32* %n.addr, align 4
  %cmp = icmp sgt i32 %2, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i32, i32* %c.addr, align 4
  %rem = srem i32 %3, 2
  %add = add nsw i32 %rem, 48
  %conv = trunc i32 %add to i8
  %4 = load i8*, i8** %s.addr, align 4
  %5 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %5, 1
  %arrayidx1 = getelementptr inbounds i8, i8* %4, i32 %sub
  store i8 %conv, i8* %arrayidx1, align 1
  %6 = load i32, i32* %c.addr, align 4
  %shr = ashr i32 %6, 1
  store i32 %shr, i32* %c.addr, align 4
  %7 = load i32, i32* %n.addr, align 4
  %dec = add nsw i32 %7, -1
  store i32 %dec, i32* %n.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %r = alloca %struct.huffcode**, align 4
  %i = alloca i32, align 4
  %strbit = alloca [100 x i8], align 16
  %p = alloca i8*, align 4
  %freqs = alloca [256 x i32], align 16
  store i32 0, i32* %retval, align 4
  %arraydecay = getelementptr inbounds [256 x i32], [256 x i32]* %freqs, i32 0, i32 0
  %0 = bitcast i32* %arraydecay to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 1024, i1 false)
  %1 = load i8*, i8** @test, align 4
  store i8* %1, i8** %p, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %2 = load i8*, i8** %p, align 4
  %3 = load i8, i8* %2, align 1
  %conv = sext i8 %3 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i8*, i8** %p, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 1
  store i8* %incdec.ptr, i8** %p, align 4
  %5 = load i8, i8* %4, align 1
  %idxprom = sext i8 %5 to i32
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* %freqs, i32 0, i32 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %arrayidx, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %arraydecay2 = getelementptr inbounds [256 x i32], [256 x i32]* %freqs, i32 0, i32 0
  %call = call %struct.huffcode** @create_huffman_codes(i32* %arraydecay2)
  store %struct.huffcode** %call, %struct.huffcode*** %r, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.end
  %7 = load i32, i32* %i, align 4
  %cmp3 = icmp slt i32 %7, 256
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load %struct.huffcode**, %struct.huffcode*** %r, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %8, i32 %9
  %10 = load %struct.huffcode*, %struct.huffcode** %arrayidx5, align 4
  %cmp6 = icmp ne %struct.huffcode* %10, null
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %11 = load %struct.huffcode**, %struct.huffcode*** %r, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %11, i32 %12
  %13 = load %struct.huffcode*, %struct.huffcode** %arrayidx8, align 4
  %code = getelementptr inbounds %struct.huffcode, %struct.huffcode* %13, i32 0, i32 1
  %14 = load i32, i32* %code, align 4
  %15 = load %struct.huffcode**, %struct.huffcode*** %r, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %15, i32 %16
  %17 = load %struct.huffcode*, %struct.huffcode** %arrayidx9, align 4
  %nbits = getelementptr inbounds %struct.huffcode, %struct.huffcode* %17, i32 0, i32 0
  %18 = load i32, i32* %nbits, align 4
  %arraydecay10 = getelementptr inbounds [100 x i8], [100 x i8]* %strbit, i32 0, i32 0
  call void @inttobits(i32 %14, i32 %18, i8* %arraydecay10)
  %19 = load i32, i32* %i, align 4
  %20 = load %struct.huffcode**, %struct.huffcode*** %r, align 4
  %21 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %20, i32 %21
  %22 = load %struct.huffcode*, %struct.huffcode** %arrayidx11, align 4
  %code12 = getelementptr inbounds %struct.huffcode, %struct.huffcode* %22, i32 0, i32 1
  %23 = load i32, i32* %code12, align 4
  %arraydecay13 = getelementptr inbounds [100 x i8], [100 x i8]* %strbit, i32 0, i32 0
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i32 0, i32 0), i32 %19, i32 %23, i8* %arraydecay13)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %24 = load i32, i32* %i, align 4
  %inc15 = add nsw i32 %24, 1
  store i32 %inc15, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %25 = load %struct.huffcode**, %struct.huffcode*** %r, align 4
  call void @free_huffman_codes(%struct.huffcode** %25)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #3

declare i8* @realloc(i8* %0, i32 %1) #3

; Function Attrs: noinline nounwind optnone
define internal void @_heap_sort(%struct.huffheap* %heap) #0 {
entry:
  %heap.addr = alloca %struct.huffheap*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %a = alloca i32*, align 4
  %t_ = alloca i32, align 4
  store %struct.huffheap* %heap, %struct.huffheap** %heap.addr, align 4
  store i32 1, i32* %i, align 4
  store i32 2, i32* %j, align 4
  %0 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %h = getelementptr inbounds %struct.huffheap, %struct.huffheap* %0, i32 0, i32 0
  %1 = load i32*, i32** %h, align 4
  store i32* %1, i32** %a, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %n = getelementptr inbounds %struct.huffheap, %struct.huffheap* %3, i32 0, i32 1
  %4 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %2, %4
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %f = getelementptr inbounds %struct.huffheap, %struct.huffheap* %5, i32 0, i32 4
  %6 = load i32*, i32** %f, align 4
  %7 = load i32*, i32** %a, align 4
  %8 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %8, 1
  %arrayidx = getelementptr inbounds i32, i32* %7, i32 %sub
  %9 = load i32, i32* %arrayidx, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %6, i32 %9
  %10 = load i32, i32* %arrayidx1, align 4
  %11 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %f2 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %11, i32 0, i32 4
  %12 = load i32*, i32** %f2, align 4
  %13 = load i32*, i32** %a, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i32, i32* %13, i32 %14
  %15 = load i32, i32* %arrayidx3, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %12, i32 %15
  %16 = load i32, i32* %arrayidx4, align 4
  %cmp5 = icmp sge i32 %10, %16
  br i1 %cmp5, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %17 = load i32, i32* %j, align 4
  store i32 %17, i32* %i, align 4
  %18 = load i32, i32* %j, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %j, align 4
  br label %if.end

if.else:                                          ; preds = %while.body
  br label %do.body

do.body:                                          ; preds = %if.else
  %19 = load i32*, i32** %a, align 4
  %20 = load i32, i32* %i, align 4
  %sub6 = sub nsw i32 %20, 1
  %arrayidx7 = getelementptr inbounds i32, i32* %19, i32 %sub6
  %21 = load i32, i32* %arrayidx7, align 4
  store i32 %21, i32* %t_, align 4
  %22 = load i32*, i32** %a, align 4
  %23 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %22, i32 %23
  %24 = load i32, i32* %arrayidx8, align 4
  %25 = load i32*, i32** %a, align 4
  %26 = load i32, i32* %i, align 4
  %sub9 = sub nsw i32 %26, 1
  %arrayidx10 = getelementptr inbounds i32, i32* %25, i32 %sub9
  store i32 %24, i32* %arrayidx10, align 4
  %27 = load i32, i32* %t_, align 4
  %28 = load i32*, i32** %a, align 4
  %29 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds i32, i32* %28, i32 %29
  store i32 %27, i32* %arrayidx11, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %30 = load i32, i32* %i, align 4
  %dec = add nsw i32 %30, -1
  store i32 %dec, i32* %i, align 4
  %31 = load i32, i32* %i, align 4
  %cmp12 = icmp eq i32 %31, 0
  br i1 %cmp12, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.end
  %32 = load i32, i32* %j, align 4
  %inc13 = add nsw i32 %32, 1
  store i32 %inc13, i32* %j, align 4
  br label %cond.end

cond.false:                                       ; preds = %do.end
  %33 = load i32, i32* %i, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %32, %cond.true ], [ %33, %cond.false ]
  store i32 %cond, i32* %i, align 4
  br label %if.end

if.end:                                           ; preds = %cond.end, %if.then
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { argmemonly nounwind willreturn writeonly }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for ./Huffman_coding.c.bc:_heap_destroy()

; entering Souper's runOnFunction() for free_huffman_codes()

; ModuleID = './Huffman_coding.c.bc'
source_filename = "./Huffman_coding.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.huffcode = type { i32, i32 }
%struct.huffheap = type { i32*, i32, i32, i32, i32* }

@.str = private unnamed_addr constant [40 x i8] c"this is an example for huffman encoding\00", align 1
@test = hidden global i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i32 0, i32 0), align 4
@.str.1 = private unnamed_addr constant [12 x i8] c"%c (%d) %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.huffcode** @create_huffman_codes(i32* %freqs) #0 {
entry:
  %retval = alloca %struct.huffcode**, align 4
  %freqs.addr = alloca i32*, align 4
  %codes = alloca %struct.huffcode**, align 4
  %heap = alloca %struct.huffheap*, align 4
  %efreqs = alloca [512 x i32], align 16
  %preds = alloca [512 x i32], align 16
  %i = alloca i32, align 4
  %extf = alloca i32, align 4
  %r1 = alloca i32, align 4
  %r2 = alloca i32, align 4
  %bc = alloca i32, align 4
  %bn = alloca i32, align 4
  %ix = alloca i32, align 4
  store i32* %freqs, i32** %freqs.addr, align 4
  store i32 256, i32* %extf, align 4
  %arraydecay = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 0
  %0 = bitcast i32* %arraydecay to i8*
  %1 = load i32*, i32** %freqs.addr, align 4
  %2 = bitcast i32* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 4 %2, i32 1024, i1 false)
  %arrayidx = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 256
  %3 = bitcast i32* %arrayidx to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %3, i8 0, i32 1024, i1 false)
  %arraydecay1 = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 0
  %call = call %struct.huffheap* @_heap_create(i32 512, i32* %arraydecay1)
  store %struct.huffheap* %call, %struct.huffheap** %heap, align 4
  %4 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  %cmp = icmp eq %struct.huffheap* %4, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.huffcode** null, %struct.huffcode*** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %5 = load i32, i32* %i, align 4
  %cmp2 = icmp slt i32 %5, 256
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 %6
  %7 = load i32, i32* %arrayidx3, align 4
  %cmp4 = icmp sgt i32 %7, 0
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %for.body
  %8 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  %9 = load i32, i32* %i, align 4
  call void @_heap_add(%struct.huffheap* %8, i32 %9)
  br label %if.end6

if.end6:                                          ; preds = %if.then5, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end6
  %10 = load i32, i32* %i, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end
  %11 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  %n = getelementptr inbounds %struct.huffheap, %struct.huffheap* %11, i32 0, i32 1
  %12 = load i32, i32* %n, align 4
  %cmp7 = icmp sgt i32 %12, 1
  br i1 %cmp7, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %13 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  %call8 = call i32 @_heap_remove(%struct.huffheap* %13)
  store i32 %call8, i32* %r1, align 4
  %14 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  %call9 = call i32 @_heap_remove(%struct.huffheap* %14)
  store i32 %call9, i32* %r2, align 4
  %15 = load i32, i32* %r1, align 4
  %arrayidx10 = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 %15
  %16 = load i32, i32* %arrayidx10, align 4
  %17 = load i32, i32* %r2, align 4
  %arrayidx11 = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 %17
  %18 = load i32, i32* %arrayidx11, align 4
  %add = add nsw i32 %16, %18
  %19 = load i32, i32* %extf, align 4
  %arrayidx12 = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 %19
  store i32 %add, i32* %arrayidx12, align 4
  %20 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  %21 = load i32, i32* %extf, align 4
  call void @_heap_add(%struct.huffheap* %20, i32 %21)
  %22 = load i32, i32* %extf, align 4
  %23 = load i32, i32* %r1, align 4
  %arrayidx13 = getelementptr inbounds [512 x i32], [512 x i32]* %preds, i32 0, i32 %23
  store i32 %22, i32* %arrayidx13, align 4
  %24 = load i32, i32* %extf, align 4
  %sub = sub nsw i32 0, %24
  %25 = load i32, i32* %r2, align 4
  %arrayidx14 = getelementptr inbounds [512 x i32], [512 x i32]* %preds, i32 0, i32 %25
  store i32 %sub, i32* %arrayidx14, align 4
  %26 = load i32, i32* %extf, align 4
  %inc15 = add nsw i32 %26, 1
  store i32 %inc15, i32* %extf, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %27 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  %call16 = call i32 @_heap_remove(%struct.huffheap* %27)
  store i32 %call16, i32* %r1, align 4
  %28 = load i32, i32* %r1, align 4
  %29 = load i32, i32* %r1, align 4
  %arrayidx17 = getelementptr inbounds [512 x i32], [512 x i32]* %preds, i32 0, i32 %29
  store i32 %28, i32* %arrayidx17, align 4
  %30 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  call void @_heap_destroy(%struct.huffheap* %30)
  %call18 = call noalias i8* @malloc(i32 1024)
  %31 = bitcast i8* %call18 to %struct.huffcode**
  store %struct.huffcode** %31, %struct.huffcode*** %codes, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond19

for.cond19:                                       ; preds = %for.inc42, %while.end
  %32 = load i32, i32* %i, align 4
  %cmp20 = icmp slt i32 %32, 256
  br i1 %cmp20, label %for.body21, label %for.end44

for.body21:                                       ; preds = %for.cond19
  store i32 0, i32* %bc, align 4
  store i32 0, i32* %bn, align 4
  %33 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 %33
  %34 = load i32, i32* %arrayidx22, align 4
  %cmp23 = icmp eq i32 %34, 0
  br i1 %cmp23, label %if.then24, label %if.end26

if.then24:                                        ; preds = %for.body21
  %35 = load %struct.huffcode**, %struct.huffcode*** %codes, align 4
  %36 = load i32, i32* %i, align 4
  %arrayidx25 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %35, i32 %36
  store %struct.huffcode* null, %struct.huffcode** %arrayidx25, align 4
  br label %for.inc42

if.end26:                                         ; preds = %for.body21
  %37 = load i32, i32* %i, align 4
  store i32 %37, i32* %ix, align 4
  br label %while.cond27

while.cond27:                                     ; preds = %while.body31, %if.end26
  %38 = load i32, i32* %ix, align 4
  %arrayidx28 = getelementptr inbounds [512 x i32], [512 x i32]* %preds, i32 0, i32 %38
  %39 = load i32, i32* %arrayidx28, align 4
  %call29 = call i32 @abs(i32 %39) #5
  %40 = load i32, i32* %ix, align 4
  %cmp30 = icmp ne i32 %call29, %40
  br i1 %cmp30, label %while.body31, label %while.end37

while.body31:                                     ; preds = %while.cond27
  %41 = load i32, i32* %ix, align 4
  %arrayidx32 = getelementptr inbounds [512 x i32], [512 x i32]* %preds, i32 0, i32 %41
  %42 = load i32, i32* %arrayidx32, align 4
  %cmp33 = icmp sge i32 %42, 0
  %43 = zext i1 %cmp33 to i64
  %cond = select i1 %cmp33, i32 1, i32 0
  %44 = load i32, i32* %bn, align 4
  %shl = shl i32 %cond, %44
  %45 = load i32, i32* %bc, align 4
  %or = or i32 %45, %shl
  store i32 %or, i32* %bc, align 4
  %46 = load i32, i32* %ix, align 4
  %arrayidx34 = getelementptr inbounds [512 x i32], [512 x i32]* %preds, i32 0, i32 %46
  %47 = load i32, i32* %arrayidx34, align 4
  %call35 = call i32 @abs(i32 %47) #5
  store i32 %call35, i32* %ix, align 4
  %48 = load i32, i32* %bn, align 4
  %inc36 = add nsw i32 %48, 1
  store i32 %inc36, i32* %bn, align 4
  br label %while.cond27

while.end37:                                      ; preds = %while.cond27
  %call38 = call noalias i8* @malloc(i32 8)
  %49 = bitcast i8* %call38 to %struct.huffcode*
  %50 = load %struct.huffcode**, %struct.huffcode*** %codes, align 4
  %51 = load i32, i32* %i, align 4
  %arrayidx39 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %50, i32 %51
  store %struct.huffcode* %49, %struct.huffcode** %arrayidx39, align 4
  %52 = load i32, i32* %bn, align 4
  %53 = load %struct.huffcode**, %struct.huffcode*** %codes, align 4
  %54 = load i32, i32* %i, align 4
  %arrayidx40 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %53, i32 %54
  %55 = load %struct.huffcode*, %struct.huffcode** %arrayidx40, align 4
  %nbits = getelementptr inbounds %struct.huffcode, %struct.huffcode* %55, i32 0, i32 0
  store i32 %52, i32* %nbits, align 4
  %56 = load i32, i32* %bc, align 4
  %57 = load %struct.huffcode**, %struct.huffcode*** %codes, align 4
  %58 = load i32, i32* %i, align 4
  %arrayidx41 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %57, i32 %58
  %59 = load %struct.huffcode*, %struct.huffcode** %arrayidx41, align 4
  %code = getelementptr inbounds %struct.huffcode, %struct.huffcode* %59, i32 0, i32 1
  store i32 %56, i32* %code, align 4
  br label %for.inc42

for.inc42:                                        ; preds = %while.end37, %if.then24
  %60 = load i32, i32* %i, align 4
  %inc43 = add nsw i32 %60, 1
  store i32 %inc43, i32* %i, align 4
  br label %for.cond19

for.end44:                                        ; preds = %for.cond19
  %61 = load %struct.huffcode**, %struct.huffcode*** %codes, align 4
  store %struct.huffcode** %61, %struct.huffcode*** %retval, align 4
  br label %return

return:                                           ; preds = %for.end44, %if.then
  %62 = load %struct.huffcode**, %struct.huffcode*** %retval, align 4
  ret %struct.huffcode** %62
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define internal %struct.huffheap* @_heap_create(i32 %s, i32* %f) #0 {
entry:
  %s.addr = alloca i32, align 4
  %f.addr = alloca i32*, align 4
  %h = alloca %struct.huffheap*, align 4
  store i32 %s, i32* %s.addr, align 4
  store i32* %f, i32** %f.addr, align 4
  %call = call noalias i8* @malloc(i32 20)
  %0 = bitcast i8* %call to %struct.huffheap*
  store %struct.huffheap* %0, %struct.huffheap** %h, align 4
  %1 = load i32, i32* %s.addr, align 4
  %mul = mul i32 4, %1
  %call1 = call noalias i8* @malloc(i32 %mul)
  %2 = bitcast i8* %call1 to i32*
  %3 = load %struct.huffheap*, %struct.huffheap** %h, align 4
  %h2 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %3, i32 0, i32 0
  store i32* %2, i32** %h2, align 4
  %4 = load i32, i32* %s.addr, align 4
  %5 = load %struct.huffheap*, %struct.huffheap** %h, align 4
  %cs = getelementptr inbounds %struct.huffheap, %struct.huffheap* %5, i32 0, i32 3
  store i32 %4, i32* %cs, align 4
  %6 = load %struct.huffheap*, %struct.huffheap** %h, align 4
  %s3 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %6, i32 0, i32 2
  store i32 %4, i32* %s3, align 4
  %7 = load %struct.huffheap*, %struct.huffheap** %h, align 4
  %n = getelementptr inbounds %struct.huffheap, %struct.huffheap* %7, i32 0, i32 1
  store i32 0, i32* %n, align 4
  %8 = load i32*, i32** %f.addr, align 4
  %9 = load %struct.huffheap*, %struct.huffheap** %h, align 4
  %f4 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %9, i32 0, i32 4
  store i32* %8, i32** %f4, align 4
  %10 = load %struct.huffheap*, %struct.huffheap** %h, align 4
  ret %struct.huffheap* %10
}

; Function Attrs: noinline nounwind optnone
define internal void @_heap_add(%struct.huffheap* %heap, i32 %c) #0 {
entry:
  %heap.addr = alloca %struct.huffheap*, align 4
  %c.addr = alloca i32, align 4
  store %struct.huffheap* %heap, %struct.huffheap** %heap.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  %0 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %n = getelementptr inbounds %struct.huffheap, %struct.huffheap* %0, i32 0, i32 1
  %1 = load i32, i32* %n, align 4
  %add = add nsw i32 %1, 1
  %2 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %s = getelementptr inbounds %struct.huffheap, %struct.huffheap* %2, i32 0, i32 2
  %3 = load i32, i32* %s, align 4
  %cmp = icmp sgt i32 %add, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %h = getelementptr inbounds %struct.huffheap, %struct.huffheap* %4, i32 0, i32 0
  %5 = load i32*, i32** %h, align 4
  %6 = bitcast i32* %5 to i8*
  %7 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %s1 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %7, i32 0, i32 2
  %8 = load i32, i32* %s1, align 4
  %9 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %cs = getelementptr inbounds %struct.huffheap, %struct.huffheap* %9, i32 0, i32 3
  %10 = load i32, i32* %cs, align 4
  %add2 = add nsw i32 %8, %10
  %call = call i8* @realloc(i8* %6, i32 %add2)
  %11 = bitcast i8* %call to i32*
  %12 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %h3 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %12, i32 0, i32 0
  store i32* %11, i32** %h3, align 4
  %13 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %cs4 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %13, i32 0, i32 3
  %14 = load i32, i32* %cs4, align 4
  %15 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %s5 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %15, i32 0, i32 2
  %16 = load i32, i32* %s5, align 4
  %add6 = add nsw i32 %16, %14
  store i32 %add6, i32* %s5, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %17 = load i32, i32* %c.addr, align 4
  %18 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %h7 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %18, i32 0, i32 0
  %19 = load i32*, i32** %h7, align 4
  %20 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %n8 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %20, i32 0, i32 1
  %21 = load i32, i32* %n8, align 4
  %arrayidx = getelementptr inbounds i32, i32* %19, i32 %21
  store i32 %17, i32* %arrayidx, align 4
  %22 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %n9 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %22, i32 0, i32 1
  %23 = load i32, i32* %n9, align 4
  %inc = add nsw i32 %23, 1
  store i32 %inc, i32* %n9, align 4
  %24 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  call void @_heap_sort(%struct.huffheap* %24)
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i32 @_heap_remove(%struct.huffheap* %heap) #0 {
entry:
  %retval = alloca i32, align 4
  %heap.addr = alloca %struct.huffheap*, align 4
  store %struct.huffheap* %heap, %struct.huffheap** %heap.addr, align 4
  %0 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %n = getelementptr inbounds %struct.huffheap, %struct.huffheap* %0, i32 0, i32 1
  %1 = load i32, i32* %n, align 4
  %cmp = icmp sgt i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %n1 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %2, i32 0, i32 1
  %3 = load i32, i32* %n1, align 4
  %dec = add nsw i32 %3, -1
  store i32 %dec, i32* %n1, align 4
  %4 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %h = getelementptr inbounds %struct.huffheap, %struct.huffheap* %4, i32 0, i32 0
  %5 = load i32*, i32** %h, align 4
  %6 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %n2 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %6, i32 0, i32 1
  %7 = load i32, i32* %n2, align 4
  %arrayidx = getelementptr inbounds i32, i32* %5, i32 %7
  %8 = load i32, i32* %arrayidx, align 4
  store i32 %8, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  store i32 -1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %9 = load i32, i32* %retval, align 4
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone
define internal void @_heap_destroy(%struct.huffheap* %heap) #0 {
entry:
  %heap.addr = alloca %struct.huffheap*, align 4
  store %struct.huffheap* %heap, %struct.huffheap** %heap.addr, align 4
  %0 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %h = getelementptr inbounds %struct.huffheap, %struct.huffheap* %0, i32 0, i32 0
  %1 = load i32*, i32** %h, align 4
  %2 = bitcast i32* %1 to i8*
  call void @free(i8* %2)
  %3 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %4 = bitcast %struct.huffheap* %3 to i8*
  call void @free(i8* %4)
  ret void
}

declare noalias i8* @malloc(i32 %0) #3

; Function Attrs: nounwind readnone
declare i32 @abs(i32 %0) #4

; Function Attrs: noinline nounwind optnone
define hidden void @free_huffman_codes(%struct.huffcode** %c) #0 {
entry:
  %c.addr = alloca %struct.huffcode**, align 4
  %i = alloca i32, align 4
  store %struct.huffcode** %c, %struct.huffcode*** %c.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 256
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load %struct.huffcode**, %struct.huffcode*** %c.addr, align 4
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %1, i32 %2
  %3 = load %struct.huffcode*, %struct.huffcode** %arrayidx, align 4
  %4 = bitcast %struct.huffcode* %3 to i8*
  call void @free(i8* %4)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %6 = load %struct.huffcode**, %struct.huffcode*** %c.addr, align 4
  %7 = bitcast %struct.huffcode** %6 to i8*
  call void @free(i8* %7)
  ret void
}

declare void @free(i8* %0) #3

; Function Attrs: noinline nounwind optnone
define hidden void @inttobits(i32 %c, i32 %n, i8* %s) #0 {
entry:
  %c.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %s.addr = alloca i8*, align 4
  store i32 %c, i32* %c.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i8* %s, i8** %s.addr, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %0, i32 %1
  store i8 0, i8* %arrayidx, align 1
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %2 = load i32, i32* %n.addr, align 4
  %cmp = icmp sgt i32 %2, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i32, i32* %c.addr, align 4
  %rem = srem i32 %3, 2
  %add = add nsw i32 %rem, 48
  %conv = trunc i32 %add to i8
  %4 = load i8*, i8** %s.addr, align 4
  %5 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %5, 1
  %arrayidx1 = getelementptr inbounds i8, i8* %4, i32 %sub
  store i8 %conv, i8* %arrayidx1, align 1
  %6 = load i32, i32* %c.addr, align 4
  %shr = ashr i32 %6, 1
  store i32 %shr, i32* %c.addr, align 4
  %7 = load i32, i32* %n.addr, align 4
  %dec = add nsw i32 %7, -1
  store i32 %dec, i32* %n.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %r = alloca %struct.huffcode**, align 4
  %i = alloca i32, align 4
  %strbit = alloca [100 x i8], align 16
  %p = alloca i8*, align 4
  %freqs = alloca [256 x i32], align 16
  store i32 0, i32* %retval, align 4
  %arraydecay = getelementptr inbounds [256 x i32], [256 x i32]* %freqs, i32 0, i32 0
  %0 = bitcast i32* %arraydecay to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 1024, i1 false)
  %1 = load i8*, i8** @test, align 4
  store i8* %1, i8** %p, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %2 = load i8*, i8** %p, align 4
  %3 = load i8, i8* %2, align 1
  %conv = sext i8 %3 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i8*, i8** %p, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 1
  store i8* %incdec.ptr, i8** %p, align 4
  %5 = load i8, i8* %4, align 1
  %idxprom = sext i8 %5 to i32
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* %freqs, i32 0, i32 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %arrayidx, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %arraydecay2 = getelementptr inbounds [256 x i32], [256 x i32]* %freqs, i32 0, i32 0
  %call = call %struct.huffcode** @create_huffman_codes(i32* %arraydecay2)
  store %struct.huffcode** %call, %struct.huffcode*** %r, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.end
  %7 = load i32, i32* %i, align 4
  %cmp3 = icmp slt i32 %7, 256
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load %struct.huffcode**, %struct.huffcode*** %r, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %8, i32 %9
  %10 = load %struct.huffcode*, %struct.huffcode** %arrayidx5, align 4
  %cmp6 = icmp ne %struct.huffcode* %10, null
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %11 = load %struct.huffcode**, %struct.huffcode*** %r, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %11, i32 %12
  %13 = load %struct.huffcode*, %struct.huffcode** %arrayidx8, align 4
  %code = getelementptr inbounds %struct.huffcode, %struct.huffcode* %13, i32 0, i32 1
  %14 = load i32, i32* %code, align 4
  %15 = load %struct.huffcode**, %struct.huffcode*** %r, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %15, i32 %16
  %17 = load %struct.huffcode*, %struct.huffcode** %arrayidx9, align 4
  %nbits = getelementptr inbounds %struct.huffcode, %struct.huffcode* %17, i32 0, i32 0
  %18 = load i32, i32* %nbits, align 4
  %arraydecay10 = getelementptr inbounds [100 x i8], [100 x i8]* %strbit, i32 0, i32 0
  call void @inttobits(i32 %14, i32 %18, i8* %arraydecay10)
  %19 = load i32, i32* %i, align 4
  %20 = load %struct.huffcode**, %struct.huffcode*** %r, align 4
  %21 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %20, i32 %21
  %22 = load %struct.huffcode*, %struct.huffcode** %arrayidx11, align 4
  %code12 = getelementptr inbounds %struct.huffcode, %struct.huffcode* %22, i32 0, i32 1
  %23 = load i32, i32* %code12, align 4
  %arraydecay13 = getelementptr inbounds [100 x i8], [100 x i8]* %strbit, i32 0, i32 0
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i32 0, i32 0), i32 %19, i32 %23, i8* %arraydecay13)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %24 = load i32, i32* %i, align 4
  %inc15 = add nsw i32 %24, 1
  store i32 %inc15, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %25 = load %struct.huffcode**, %struct.huffcode*** %r, align 4
  call void @free_huffman_codes(%struct.huffcode** %25)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #3

declare i8* @realloc(i8* %0, i32 %1) #3

; Function Attrs: noinline nounwind optnone
define internal void @_heap_sort(%struct.huffheap* %heap) #0 {
entry:
  %heap.addr = alloca %struct.huffheap*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %a = alloca i32*, align 4
  %t_ = alloca i32, align 4
  store %struct.huffheap* %heap, %struct.huffheap** %heap.addr, align 4
  store i32 1, i32* %i, align 4
  store i32 2, i32* %j, align 4
  %0 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %h = getelementptr inbounds %struct.huffheap, %struct.huffheap* %0, i32 0, i32 0
  %1 = load i32*, i32** %h, align 4
  store i32* %1, i32** %a, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %n = getelementptr inbounds %struct.huffheap, %struct.huffheap* %3, i32 0, i32 1
  %4 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %2, %4
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %f = getelementptr inbounds %struct.huffheap, %struct.huffheap* %5, i32 0, i32 4
  %6 = load i32*, i32** %f, align 4
  %7 = load i32*, i32** %a, align 4
  %8 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %8, 1
  %arrayidx = getelementptr inbounds i32, i32* %7, i32 %sub
  %9 = load i32, i32* %arrayidx, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %6, i32 %9
  %10 = load i32, i32* %arrayidx1, align 4
  %11 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %f2 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %11, i32 0, i32 4
  %12 = load i32*, i32** %f2, align 4
  %13 = load i32*, i32** %a, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i32, i32* %13, i32 %14
  %15 = load i32, i32* %arrayidx3, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %12, i32 %15
  %16 = load i32, i32* %arrayidx4, align 4
  %cmp5 = icmp sge i32 %10, %16
  br i1 %cmp5, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %17 = load i32, i32* %j, align 4
  store i32 %17, i32* %i, align 4
  %18 = load i32, i32* %j, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %j, align 4
  br label %if.end

if.else:                                          ; preds = %while.body
  br label %do.body

do.body:                                          ; preds = %if.else
  %19 = load i32*, i32** %a, align 4
  %20 = load i32, i32* %i, align 4
  %sub6 = sub nsw i32 %20, 1
  %arrayidx7 = getelementptr inbounds i32, i32* %19, i32 %sub6
  %21 = load i32, i32* %arrayidx7, align 4
  store i32 %21, i32* %t_, align 4
  %22 = load i32*, i32** %a, align 4
  %23 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %22, i32 %23
  %24 = load i32, i32* %arrayidx8, align 4
  %25 = load i32*, i32** %a, align 4
  %26 = load i32, i32* %i, align 4
  %sub9 = sub nsw i32 %26, 1
  %arrayidx10 = getelementptr inbounds i32, i32* %25, i32 %sub9
  store i32 %24, i32* %arrayidx10, align 4
  %27 = load i32, i32* %t_, align 4
  %28 = load i32*, i32** %a, align 4
  %29 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds i32, i32* %28, i32 %29
  store i32 %27, i32* %arrayidx11, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %30 = load i32, i32* %i, align 4
  %dec = add nsw i32 %30, -1
  store i32 %dec, i32* %i, align 4
  %31 = load i32, i32* %i, align 4
  %cmp12 = icmp eq i32 %31, 0
  br i1 %cmp12, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.end
  %32 = load i32, i32* %j, align 4
  %inc13 = add nsw i32 %32, 1
  store i32 %inc13, i32* %j, align 4
  br label %cond.end

cond.false:                                       ; preds = %do.end
  %33 = load i32, i32* %i, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %32, %cond.true ], [ %33, %cond.false ]
  store i32 %cond, i32* %i, align 4
  br label %if.end

if.end:                                           ; preds = %cond.end, %if.then
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { argmemonly nounwind willreturn writeonly }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, 256
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 256:i32
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %5, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for free_huffman_codes()

; entering Souper's runOnFunction() for inttobits()

; ModuleID = './Huffman_coding.c.bc'
source_filename = "./Huffman_coding.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.huffcode = type { i32, i32 }
%struct.huffheap = type { i32*, i32, i32, i32, i32* }

@.str = private unnamed_addr constant [40 x i8] c"this is an example for huffman encoding\00", align 1
@test = hidden global i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i32 0, i32 0), align 4
@.str.1 = private unnamed_addr constant [12 x i8] c"%c (%d) %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.huffcode** @create_huffman_codes(i32* %freqs) #0 {
entry:
  %retval = alloca %struct.huffcode**, align 4
  %freqs.addr = alloca i32*, align 4
  %codes = alloca %struct.huffcode**, align 4
  %heap = alloca %struct.huffheap*, align 4
  %efreqs = alloca [512 x i32], align 16
  %preds = alloca [512 x i32], align 16
  %i = alloca i32, align 4
  %extf = alloca i32, align 4
  %r1 = alloca i32, align 4
  %r2 = alloca i32, align 4
  %bc = alloca i32, align 4
  %bn = alloca i32, align 4
  %ix = alloca i32, align 4
  store i32* %freqs, i32** %freqs.addr, align 4
  store i32 256, i32* %extf, align 4
  %arraydecay = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 0
  %0 = bitcast i32* %arraydecay to i8*
  %1 = load i32*, i32** %freqs.addr, align 4
  %2 = bitcast i32* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 4 %2, i32 1024, i1 false)
  %arrayidx = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 256
  %3 = bitcast i32* %arrayidx to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %3, i8 0, i32 1024, i1 false)
  %arraydecay1 = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 0
  %call = call %struct.huffheap* @_heap_create(i32 512, i32* %arraydecay1)
  store %struct.huffheap* %call, %struct.huffheap** %heap, align 4
  %4 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  %cmp = icmp eq %struct.huffheap* %4, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.huffcode** null, %struct.huffcode*** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %5 = load i32, i32* %i, align 4
  %cmp2 = icmp slt i32 %5, 256
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 %6
  %7 = load i32, i32* %arrayidx3, align 4
  %cmp4 = icmp sgt i32 %7, 0
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %for.body
  %8 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  %9 = load i32, i32* %i, align 4
  call void @_heap_add(%struct.huffheap* %8, i32 %9)
  br label %if.end6

if.end6:                                          ; preds = %if.then5, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end6
  %10 = load i32, i32* %i, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end
  %11 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  %n = getelementptr inbounds %struct.huffheap, %struct.huffheap* %11, i32 0, i32 1
  %12 = load i32, i32* %n, align 4
  %cmp7 = icmp sgt i32 %12, 1
  br i1 %cmp7, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %13 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  %call8 = call i32 @_heap_remove(%struct.huffheap* %13)
  store i32 %call8, i32* %r1, align 4
  %14 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  %call9 = call i32 @_heap_remove(%struct.huffheap* %14)
  store i32 %call9, i32* %r2, align 4
  %15 = load i32, i32* %r1, align 4
  %arrayidx10 = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 %15
  %16 = load i32, i32* %arrayidx10, align 4
  %17 = load i32, i32* %r2, align 4
  %arrayidx11 = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 %17
  %18 = load i32, i32* %arrayidx11, align 4
  %add = add nsw i32 %16, %18
  %19 = load i32, i32* %extf, align 4
  %arrayidx12 = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 %19
  store i32 %add, i32* %arrayidx12, align 4
  %20 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  %21 = load i32, i32* %extf, align 4
  call void @_heap_add(%struct.huffheap* %20, i32 %21)
  %22 = load i32, i32* %extf, align 4
  %23 = load i32, i32* %r1, align 4
  %arrayidx13 = getelementptr inbounds [512 x i32], [512 x i32]* %preds, i32 0, i32 %23
  store i32 %22, i32* %arrayidx13, align 4
  %24 = load i32, i32* %extf, align 4
  %sub = sub nsw i32 0, %24
  %25 = load i32, i32* %r2, align 4
  %arrayidx14 = getelementptr inbounds [512 x i32], [512 x i32]* %preds, i32 0, i32 %25
  store i32 %sub, i32* %arrayidx14, align 4
  %26 = load i32, i32* %extf, align 4
  %inc15 = add nsw i32 %26, 1
  store i32 %inc15, i32* %extf, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %27 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  %call16 = call i32 @_heap_remove(%struct.huffheap* %27)
  store i32 %call16, i32* %r1, align 4
  %28 = load i32, i32* %r1, align 4
  %29 = load i32, i32* %r1, align 4
  %arrayidx17 = getelementptr inbounds [512 x i32], [512 x i32]* %preds, i32 0, i32 %29
  store i32 %28, i32* %arrayidx17, align 4
  %30 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  call void @_heap_destroy(%struct.huffheap* %30)
  %call18 = call noalias i8* @malloc(i32 1024)
  %31 = bitcast i8* %call18 to %struct.huffcode**
  store %struct.huffcode** %31, %struct.huffcode*** %codes, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond19

for.cond19:                                       ; preds = %for.inc42, %while.end
  %32 = load i32, i32* %i, align 4
  %cmp20 = icmp slt i32 %32, 256
  br i1 %cmp20, label %for.body21, label %for.end44

for.body21:                                       ; preds = %for.cond19
  store i32 0, i32* %bc, align 4
  store i32 0, i32* %bn, align 4
  %33 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 %33
  %34 = load i32, i32* %arrayidx22, align 4
  %cmp23 = icmp eq i32 %34, 0
  br i1 %cmp23, label %if.then24, label %if.end26

if.then24:                                        ; preds = %for.body21
  %35 = load %struct.huffcode**, %struct.huffcode*** %codes, align 4
  %36 = load i32, i32* %i, align 4
  %arrayidx25 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %35, i32 %36
  store %struct.huffcode* null, %struct.huffcode** %arrayidx25, align 4
  br label %for.inc42

if.end26:                                         ; preds = %for.body21
  %37 = load i32, i32* %i, align 4
  store i32 %37, i32* %ix, align 4
  br label %while.cond27

while.cond27:                                     ; preds = %while.body31, %if.end26
  %38 = load i32, i32* %ix, align 4
  %arrayidx28 = getelementptr inbounds [512 x i32], [512 x i32]* %preds, i32 0, i32 %38
  %39 = load i32, i32* %arrayidx28, align 4
  %call29 = call i32 @abs(i32 %39) #5
  %40 = load i32, i32* %ix, align 4
  %cmp30 = icmp ne i32 %call29, %40
  br i1 %cmp30, label %while.body31, label %while.end37

while.body31:                                     ; preds = %while.cond27
  %41 = load i32, i32* %ix, align 4
  %arrayidx32 = getelementptr inbounds [512 x i32], [512 x i32]* %preds, i32 0, i32 %41
  %42 = load i32, i32* %arrayidx32, align 4
  %cmp33 = icmp sge i32 %42, 0
  %43 = zext i1 %cmp33 to i64
  %cond = select i1 %cmp33, i32 1, i32 0
  %44 = load i32, i32* %bn, align 4
  %shl = shl i32 %cond, %44
  %45 = load i32, i32* %bc, align 4
  %or = or i32 %45, %shl
  store i32 %or, i32* %bc, align 4
  %46 = load i32, i32* %ix, align 4
  %arrayidx34 = getelementptr inbounds [512 x i32], [512 x i32]* %preds, i32 0, i32 %46
  %47 = load i32, i32* %arrayidx34, align 4
  %call35 = call i32 @abs(i32 %47) #5
  store i32 %call35, i32* %ix, align 4
  %48 = load i32, i32* %bn, align 4
  %inc36 = add nsw i32 %48, 1
  store i32 %inc36, i32* %bn, align 4
  br label %while.cond27

while.end37:                                      ; preds = %while.cond27
  %call38 = call noalias i8* @malloc(i32 8)
  %49 = bitcast i8* %call38 to %struct.huffcode*
  %50 = load %struct.huffcode**, %struct.huffcode*** %codes, align 4
  %51 = load i32, i32* %i, align 4
  %arrayidx39 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %50, i32 %51
  store %struct.huffcode* %49, %struct.huffcode** %arrayidx39, align 4
  %52 = load i32, i32* %bn, align 4
  %53 = load %struct.huffcode**, %struct.huffcode*** %codes, align 4
  %54 = load i32, i32* %i, align 4
  %arrayidx40 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %53, i32 %54
  %55 = load %struct.huffcode*, %struct.huffcode** %arrayidx40, align 4
  %nbits = getelementptr inbounds %struct.huffcode, %struct.huffcode* %55, i32 0, i32 0
  store i32 %52, i32* %nbits, align 4
  %56 = load i32, i32* %bc, align 4
  %57 = load %struct.huffcode**, %struct.huffcode*** %codes, align 4
  %58 = load i32, i32* %i, align 4
  %arrayidx41 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %57, i32 %58
  %59 = load %struct.huffcode*, %struct.huffcode** %arrayidx41, align 4
  %code = getelementptr inbounds %struct.huffcode, %struct.huffcode* %59, i32 0, i32 1
  store i32 %56, i32* %code, align 4
  br label %for.inc42

for.inc42:                                        ; preds = %while.end37, %if.then24
  %60 = load i32, i32* %i, align 4
  %inc43 = add nsw i32 %60, 1
  store i32 %inc43, i32* %i, align 4
  br label %for.cond19

for.end44:                                        ; preds = %for.cond19
  %61 = load %struct.huffcode**, %struct.huffcode*** %codes, align 4
  store %struct.huffcode** %61, %struct.huffcode*** %retval, align 4
  br label %return

return:                                           ; preds = %for.end44, %if.then
  %62 = load %struct.huffcode**, %struct.huffcode*** %retval, align 4
  ret %struct.huffcode** %62
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define internal %struct.huffheap* @_heap_create(i32 %s, i32* %f) #0 {
entry:
  %s.addr = alloca i32, align 4
  %f.addr = alloca i32*, align 4
  %h = alloca %struct.huffheap*, align 4
  store i32 %s, i32* %s.addr, align 4
  store i32* %f, i32** %f.addr, align 4
  %call = call noalias i8* @malloc(i32 20)
  %0 = bitcast i8* %call to %struct.huffheap*
  store %struct.huffheap* %0, %struct.huffheap** %h, align 4
  %1 = load i32, i32* %s.addr, align 4
  %mul = mul i32 4, %1
  %call1 = call noalias i8* @malloc(i32 %mul)
  %2 = bitcast i8* %call1 to i32*
  %3 = load %struct.huffheap*, %struct.huffheap** %h, align 4
  %h2 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %3, i32 0, i32 0
  store i32* %2, i32** %h2, align 4
  %4 = load i32, i32* %s.addr, align 4
  %5 = load %struct.huffheap*, %struct.huffheap** %h, align 4
  %cs = getelementptr inbounds %struct.huffheap, %struct.huffheap* %5, i32 0, i32 3
  store i32 %4, i32* %cs, align 4
  %6 = load %struct.huffheap*, %struct.huffheap** %h, align 4
  %s3 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %6, i32 0, i32 2
  store i32 %4, i32* %s3, align 4
  %7 = load %struct.huffheap*, %struct.huffheap** %h, align 4
  %n = getelementptr inbounds %struct.huffheap, %struct.huffheap* %7, i32 0, i32 1
  store i32 0, i32* %n, align 4
  %8 = load i32*, i32** %f.addr, align 4
  %9 = load %struct.huffheap*, %struct.huffheap** %h, align 4
  %f4 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %9, i32 0, i32 4
  store i32* %8, i32** %f4, align 4
  %10 = load %struct.huffheap*, %struct.huffheap** %h, align 4
  ret %struct.huffheap* %10
}

; Function Attrs: noinline nounwind optnone
define internal void @_heap_add(%struct.huffheap* %heap, i32 %c) #0 {
entry:
  %heap.addr = alloca %struct.huffheap*, align 4
  %c.addr = alloca i32, align 4
  store %struct.huffheap* %heap, %struct.huffheap** %heap.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  %0 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %n = getelementptr inbounds %struct.huffheap, %struct.huffheap* %0, i32 0, i32 1
  %1 = load i32, i32* %n, align 4
  %add = add nsw i32 %1, 1
  %2 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %s = getelementptr inbounds %struct.huffheap, %struct.huffheap* %2, i32 0, i32 2
  %3 = load i32, i32* %s, align 4
  %cmp = icmp sgt i32 %add, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %h = getelementptr inbounds %struct.huffheap, %struct.huffheap* %4, i32 0, i32 0
  %5 = load i32*, i32** %h, align 4
  %6 = bitcast i32* %5 to i8*
  %7 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %s1 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %7, i32 0, i32 2
  %8 = load i32, i32* %s1, align 4
  %9 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %cs = getelementptr inbounds %struct.huffheap, %struct.huffheap* %9, i32 0, i32 3
  %10 = load i32, i32* %cs, align 4
  %add2 = add nsw i32 %8, %10
  %call = call i8* @realloc(i8* %6, i32 %add2)
  %11 = bitcast i8* %call to i32*
  %12 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %h3 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %12, i32 0, i32 0
  store i32* %11, i32** %h3, align 4
  %13 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %cs4 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %13, i32 0, i32 3
  %14 = load i32, i32* %cs4, align 4
  %15 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %s5 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %15, i32 0, i32 2
  %16 = load i32, i32* %s5, align 4
  %add6 = add nsw i32 %16, %14
  store i32 %add6, i32* %s5, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %17 = load i32, i32* %c.addr, align 4
  %18 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %h7 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %18, i32 0, i32 0
  %19 = load i32*, i32** %h7, align 4
  %20 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %n8 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %20, i32 0, i32 1
  %21 = load i32, i32* %n8, align 4
  %arrayidx = getelementptr inbounds i32, i32* %19, i32 %21
  store i32 %17, i32* %arrayidx, align 4
  %22 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %n9 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %22, i32 0, i32 1
  %23 = load i32, i32* %n9, align 4
  %inc = add nsw i32 %23, 1
  store i32 %inc, i32* %n9, align 4
  %24 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  call void @_heap_sort(%struct.huffheap* %24)
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i32 @_heap_remove(%struct.huffheap* %heap) #0 {
entry:
  %retval = alloca i32, align 4
  %heap.addr = alloca %struct.huffheap*, align 4
  store %struct.huffheap* %heap, %struct.huffheap** %heap.addr, align 4
  %0 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %n = getelementptr inbounds %struct.huffheap, %struct.huffheap* %0, i32 0, i32 1
  %1 = load i32, i32* %n, align 4
  %cmp = icmp sgt i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %n1 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %2, i32 0, i32 1
  %3 = load i32, i32* %n1, align 4
  %dec = add nsw i32 %3, -1
  store i32 %dec, i32* %n1, align 4
  %4 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %h = getelementptr inbounds %struct.huffheap, %struct.huffheap* %4, i32 0, i32 0
  %5 = load i32*, i32** %h, align 4
  %6 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %n2 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %6, i32 0, i32 1
  %7 = load i32, i32* %n2, align 4
  %arrayidx = getelementptr inbounds i32, i32* %5, i32 %7
  %8 = load i32, i32* %arrayidx, align 4
  store i32 %8, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  store i32 -1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %9 = load i32, i32* %retval, align 4
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone
define internal void @_heap_destroy(%struct.huffheap* %heap) #0 {
entry:
  %heap.addr = alloca %struct.huffheap*, align 4
  store %struct.huffheap* %heap, %struct.huffheap** %heap.addr, align 4
  %0 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %h = getelementptr inbounds %struct.huffheap, %struct.huffheap* %0, i32 0, i32 0
  %1 = load i32*, i32** %h, align 4
  %2 = bitcast i32* %1 to i8*
  call void @free(i8* %2)
  %3 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %4 = bitcast %struct.huffheap* %3 to i8*
  call void @free(i8* %4)
  ret void
}

declare noalias i8* @malloc(i32 %0) #3

; Function Attrs: nounwind readnone
declare i32 @abs(i32 %0) #4

; Function Attrs: noinline nounwind optnone
define hidden void @free_huffman_codes(%struct.huffcode** %c) #0 {
entry:
  %c.addr = alloca %struct.huffcode**, align 4
  %i = alloca i32, align 4
  store %struct.huffcode** %c, %struct.huffcode*** %c.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 256
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load %struct.huffcode**, %struct.huffcode*** %c.addr, align 4
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %1, i32 %2
  %3 = load %struct.huffcode*, %struct.huffcode** %arrayidx, align 4
  %4 = bitcast %struct.huffcode* %3 to i8*
  call void @free(i8* %4)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %6 = load %struct.huffcode**, %struct.huffcode*** %c.addr, align 4
  %7 = bitcast %struct.huffcode** %6 to i8*
  call void @free(i8* %7)
  ret void
}

declare void @free(i8* %0) #3

; Function Attrs: noinline nounwind optnone
define hidden void @inttobits(i32 %c, i32 %n, i8* %s) #0 {
entry:
  %c.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %s.addr = alloca i8*, align 4
  store i32 %c, i32* %c.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i8* %s, i8** %s.addr, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %0, i32 %1
  store i8 0, i8* %arrayidx, align 1
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %2 = load i32, i32* %n.addr, align 4
  %cmp = icmp sgt i32 %2, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i32, i32* %c.addr, align 4
  %rem = srem i32 %3, 2
  %add = add nsw i32 %rem, 48
  %conv = trunc i32 %add to i8
  %4 = load i8*, i8** %s.addr, align 4
  %5 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %5, 1
  %arrayidx1 = getelementptr inbounds i8, i8* %4, i32 %sub
  store i8 %conv, i8* %arrayidx1, align 1
  %6 = load i32, i32* %c.addr, align 4
  %shr = ashr i32 %6, 1
  store i32 %shr, i32* %c.addr, align 4
  %7 = load i32, i32* %n.addr, align 4
  %dec = add nsw i32 %7, -1
  store i32 %dec, i32* %n.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %r = alloca %struct.huffcode**, align 4
  %i = alloca i32, align 4
  %strbit = alloca [100 x i8], align 16
  %p = alloca i8*, align 4
  %freqs = alloca [256 x i32], align 16
  store i32 0, i32* %retval, align 4
  %arraydecay = getelementptr inbounds [256 x i32], [256 x i32]* %freqs, i32 0, i32 0
  %0 = bitcast i32* %arraydecay to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 1024, i1 false)
  %1 = load i8*, i8** @test, align 4
  store i8* %1, i8** %p, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %2 = load i8*, i8** %p, align 4
  %3 = load i8, i8* %2, align 1
  %conv = sext i8 %3 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i8*, i8** %p, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 1
  store i8* %incdec.ptr, i8** %p, align 4
  %5 = load i8, i8* %4, align 1
  %idxprom = sext i8 %5 to i32
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* %freqs, i32 0, i32 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %arrayidx, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %arraydecay2 = getelementptr inbounds [256 x i32], [256 x i32]* %freqs, i32 0, i32 0
  %call = call %struct.huffcode** @create_huffman_codes(i32* %arraydecay2)
  store %struct.huffcode** %call, %struct.huffcode*** %r, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.end
  %7 = load i32, i32* %i, align 4
  %cmp3 = icmp slt i32 %7, 256
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load %struct.huffcode**, %struct.huffcode*** %r, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %8, i32 %9
  %10 = load %struct.huffcode*, %struct.huffcode** %arrayidx5, align 4
  %cmp6 = icmp ne %struct.huffcode* %10, null
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %11 = load %struct.huffcode**, %struct.huffcode*** %r, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %11, i32 %12
  %13 = load %struct.huffcode*, %struct.huffcode** %arrayidx8, align 4
  %code = getelementptr inbounds %struct.huffcode, %struct.huffcode* %13, i32 0, i32 1
  %14 = load i32, i32* %code, align 4
  %15 = load %struct.huffcode**, %struct.huffcode*** %r, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %15, i32 %16
  %17 = load %struct.huffcode*, %struct.huffcode** %arrayidx9, align 4
  %nbits = getelementptr inbounds %struct.huffcode, %struct.huffcode* %17, i32 0, i32 0
  %18 = load i32, i32* %nbits, align 4
  %arraydecay10 = getelementptr inbounds [100 x i8], [100 x i8]* %strbit, i32 0, i32 0
  call void @inttobits(i32 %14, i32 %18, i8* %arraydecay10)
  %19 = load i32, i32* %i, align 4
  %20 = load %struct.huffcode**, %struct.huffcode*** %r, align 4
  %21 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %20, i32 %21
  %22 = load %struct.huffcode*, %struct.huffcode** %arrayidx11, align 4
  %code12 = getelementptr inbounds %struct.huffcode, %struct.huffcode* %22, i32 0, i32 1
  %23 = load i32, i32* %code12, align 4
  %arraydecay13 = getelementptr inbounds [100 x i8], [100 x i8]* %strbit, i32 0, i32 0
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i32 0, i32 0), i32 %19, i32 %23, i8* %arraydecay13)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %24 = load i32, i32* %i, align 4
  %inc15 = add nsw i32 %24, 1
  store i32 %inc15, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %25 = load %struct.huffcode**, %struct.huffcode*** %r, align 4
  call void @free_huffman_codes(%struct.huffcode** %25)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #3

declare i8* @realloc(i8* %0, i32 %1) #3

; Function Attrs: noinline nounwind optnone
define internal void @_heap_sort(%struct.huffheap* %heap) #0 {
entry:
  %heap.addr = alloca %struct.huffheap*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %a = alloca i32*, align 4
  %t_ = alloca i32, align 4
  store %struct.huffheap* %heap, %struct.huffheap** %heap.addr, align 4
  store i32 1, i32* %i, align 4
  store i32 2, i32* %j, align 4
  %0 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %h = getelementptr inbounds %struct.huffheap, %struct.huffheap* %0, i32 0, i32 0
  %1 = load i32*, i32** %h, align 4
  store i32* %1, i32** %a, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %n = getelementptr inbounds %struct.huffheap, %struct.huffheap* %3, i32 0, i32 1
  %4 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %2, %4
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %f = getelementptr inbounds %struct.huffheap, %struct.huffheap* %5, i32 0, i32 4
  %6 = load i32*, i32** %f, align 4
  %7 = load i32*, i32** %a, align 4
  %8 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %8, 1
  %arrayidx = getelementptr inbounds i32, i32* %7, i32 %sub
  %9 = load i32, i32* %arrayidx, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %6, i32 %9
  %10 = load i32, i32* %arrayidx1, align 4
  %11 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %f2 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %11, i32 0, i32 4
  %12 = load i32*, i32** %f2, align 4
  %13 = load i32*, i32** %a, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i32, i32* %13, i32 %14
  %15 = load i32, i32* %arrayidx3, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %12, i32 %15
  %16 = load i32, i32* %arrayidx4, align 4
  %cmp5 = icmp sge i32 %10, %16
  br i1 %cmp5, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %17 = load i32, i32* %j, align 4
  store i32 %17, i32* %i, align 4
  %18 = load i32, i32* %j, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %j, align 4
  br label %if.end

if.else:                                          ; preds = %while.body
  br label %do.body

do.body:                                          ; preds = %if.else
  %19 = load i32*, i32** %a, align 4
  %20 = load i32, i32* %i, align 4
  %sub6 = sub nsw i32 %20, 1
  %arrayidx7 = getelementptr inbounds i32, i32* %19, i32 %sub6
  %21 = load i32, i32* %arrayidx7, align 4
  store i32 %21, i32* %t_, align 4
  %22 = load i32*, i32** %a, align 4
  %23 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %22, i32 %23
  %24 = load i32, i32* %arrayidx8, align 4
  %25 = load i32*, i32** %a, align 4
  %26 = load i32, i32* %i, align 4
  %sub9 = sub nsw i32 %26, 1
  %arrayidx10 = getelementptr inbounds i32, i32* %25, i32 %sub9
  store i32 %24, i32* %arrayidx10, align 4
  %27 = load i32, i32* %t_, align 4
  %28 = load i32*, i32** %a, align 4
  %29 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds i32, i32* %28, i32 %29
  store i32 %27, i32* %arrayidx11, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %30 = load i32, i32* %i, align 4
  %dec = add nsw i32 %30, -1
  store i32 %dec, i32* %i, align 4
  %31 = load i32, i32* %i, align 4
  %cmp12 = icmp eq i32 %31, 0
  br i1 %cmp12, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.end
  %32 = load i32, i32* %j, align 4
  %inc13 = add nsw i32 %32, 1
  store i32 %inc13, i32* %j, align 4
  br label %cond.end

cond.false:                                       ; preds = %do.end
  %33 = load i32, i32* %i, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %32, %cond.true ], [ %33, %cond.false ]
  store i32 %cond, i32* %i, align 4
  br label %if.end

if.end:                                           ; preds = %cond.end, %if.then
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { argmemonly nounwind willreturn writeonly }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sgt i32 %2, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %c.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem = srem i32 %3, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 2:i32
infer %1 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %add = add nsw i32 %rem, 48
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 2:i32
%2:i32 = addnsw 48:i32, %1
infer %2 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %conv = trunc i32 %add to i8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 2:i32
%2:i32 = addnsw 48:i32, %1
%3:i8 = trunc %2
infer %3

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %5, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %c.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=11111111111111111111111111111110)

; *****
; For LLVM instruction:
;  %shr = ashr i32 %6, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = ashr %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec = add nsw i32 %7, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem %0, 2:i32
infer %1 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem %0, 2:i32
%2:i32 = addnsw 48:i32, %1
infer %2 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 48
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 49
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = srem %0, 2:i32

Cost = 5
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem %0, 2:i32
%2:i32 = addnsw 48:i32, %1
%3:i8 = trunc %2
infer %3


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 48
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 49
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0 (demandedBits=11111111111111111111111111111110)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = ashr %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870912
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for inttobits()

; entering Souper's runOnFunction() for main()

; ModuleID = './Huffman_coding.c.bc'
source_filename = "./Huffman_coding.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.huffcode = type { i32, i32 }
%struct.huffheap = type { i32*, i32, i32, i32, i32* }

@.str = private unnamed_addr constant [40 x i8] c"this is an example for huffman encoding\00", align 1
@test = hidden global i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i32 0, i32 0), align 4
@.str.1 = private unnamed_addr constant [12 x i8] c"%c (%d) %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.huffcode** @create_huffman_codes(i32* %freqs) #0 {
entry:
  %retval = alloca %struct.huffcode**, align 4
  %freqs.addr = alloca i32*, align 4
  %codes = alloca %struct.huffcode**, align 4
  %heap = alloca %struct.huffheap*, align 4
  %efreqs = alloca [512 x i32], align 16
  %preds = alloca [512 x i32], align 16
  %i = alloca i32, align 4
  %extf = alloca i32, align 4
  %r1 = alloca i32, align 4
  %r2 = alloca i32, align 4
  %bc = alloca i32, align 4
  %bn = alloca i32, align 4
  %ix = alloca i32, align 4
  store i32* %freqs, i32** %freqs.addr, align 4
  store i32 256, i32* %extf, align 4
  %arraydecay = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 0
  %0 = bitcast i32* %arraydecay to i8*
  %1 = load i32*, i32** %freqs.addr, align 4
  %2 = bitcast i32* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 4 %2, i32 1024, i1 false)
  %arrayidx = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 256
  %3 = bitcast i32* %arrayidx to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %3, i8 0, i32 1024, i1 false)
  %arraydecay1 = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 0
  %call = call %struct.huffheap* @_heap_create(i32 512, i32* %arraydecay1)
  store %struct.huffheap* %call, %struct.huffheap** %heap, align 4
  %4 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  %cmp = icmp eq %struct.huffheap* %4, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.huffcode** null, %struct.huffcode*** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %5 = load i32, i32* %i, align 4
  %cmp2 = icmp slt i32 %5, 256
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 %6
  %7 = load i32, i32* %arrayidx3, align 4
  %cmp4 = icmp sgt i32 %7, 0
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %for.body
  %8 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  %9 = load i32, i32* %i, align 4
  call void @_heap_add(%struct.huffheap* %8, i32 %9)
  br label %if.end6

if.end6:                                          ; preds = %if.then5, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end6
  %10 = load i32, i32* %i, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end
  %11 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  %n = getelementptr inbounds %struct.huffheap, %struct.huffheap* %11, i32 0, i32 1
  %12 = load i32, i32* %n, align 4
  %cmp7 = icmp sgt i32 %12, 1
  br i1 %cmp7, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %13 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  %call8 = call i32 @_heap_remove(%struct.huffheap* %13)
  store i32 %call8, i32* %r1, align 4
  %14 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  %call9 = call i32 @_heap_remove(%struct.huffheap* %14)
  store i32 %call9, i32* %r2, align 4
  %15 = load i32, i32* %r1, align 4
  %arrayidx10 = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 %15
  %16 = load i32, i32* %arrayidx10, align 4
  %17 = load i32, i32* %r2, align 4
  %arrayidx11 = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 %17
  %18 = load i32, i32* %arrayidx11, align 4
  %add = add nsw i32 %16, %18
  %19 = load i32, i32* %extf, align 4
  %arrayidx12 = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 %19
  store i32 %add, i32* %arrayidx12, align 4
  %20 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  %21 = load i32, i32* %extf, align 4
  call void @_heap_add(%struct.huffheap* %20, i32 %21)
  %22 = load i32, i32* %extf, align 4
  %23 = load i32, i32* %r1, align 4
  %arrayidx13 = getelementptr inbounds [512 x i32], [512 x i32]* %preds, i32 0, i32 %23
  store i32 %22, i32* %arrayidx13, align 4
  %24 = load i32, i32* %extf, align 4
  %sub = sub nsw i32 0, %24
  %25 = load i32, i32* %r2, align 4
  %arrayidx14 = getelementptr inbounds [512 x i32], [512 x i32]* %preds, i32 0, i32 %25
  store i32 %sub, i32* %arrayidx14, align 4
  %26 = load i32, i32* %extf, align 4
  %inc15 = add nsw i32 %26, 1
  store i32 %inc15, i32* %extf, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %27 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  %call16 = call i32 @_heap_remove(%struct.huffheap* %27)
  store i32 %call16, i32* %r1, align 4
  %28 = load i32, i32* %r1, align 4
  %29 = load i32, i32* %r1, align 4
  %arrayidx17 = getelementptr inbounds [512 x i32], [512 x i32]* %preds, i32 0, i32 %29
  store i32 %28, i32* %arrayidx17, align 4
  %30 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  call void @_heap_destroy(%struct.huffheap* %30)
  %call18 = call noalias i8* @malloc(i32 1024)
  %31 = bitcast i8* %call18 to %struct.huffcode**
  store %struct.huffcode** %31, %struct.huffcode*** %codes, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond19

for.cond19:                                       ; preds = %for.inc42, %while.end
  %32 = load i32, i32* %i, align 4
  %cmp20 = icmp slt i32 %32, 256
  br i1 %cmp20, label %for.body21, label %for.end44

for.body21:                                       ; preds = %for.cond19
  store i32 0, i32* %bc, align 4
  store i32 0, i32* %bn, align 4
  %33 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 %33
  %34 = load i32, i32* %arrayidx22, align 4
  %cmp23 = icmp eq i32 %34, 0
  br i1 %cmp23, label %if.then24, label %if.end26

if.then24:                                        ; preds = %for.body21
  %35 = load %struct.huffcode**, %struct.huffcode*** %codes, align 4
  %36 = load i32, i32* %i, align 4
  %arrayidx25 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %35, i32 %36
  store %struct.huffcode* null, %struct.huffcode** %arrayidx25, align 4
  br label %for.inc42

if.end26:                                         ; preds = %for.body21
  %37 = load i32, i32* %i, align 4
  store i32 %37, i32* %ix, align 4
  br label %while.cond27

while.cond27:                                     ; preds = %while.body31, %if.end26
  %38 = load i32, i32* %ix, align 4
  %arrayidx28 = getelementptr inbounds [512 x i32], [512 x i32]* %preds, i32 0, i32 %38
  %39 = load i32, i32* %arrayidx28, align 4
  %call29 = call i32 @abs(i32 %39) #5
  %40 = load i32, i32* %ix, align 4
  %cmp30 = icmp ne i32 %call29, %40
  br i1 %cmp30, label %while.body31, label %while.end37

while.body31:                                     ; preds = %while.cond27
  %41 = load i32, i32* %ix, align 4
  %arrayidx32 = getelementptr inbounds [512 x i32], [512 x i32]* %preds, i32 0, i32 %41
  %42 = load i32, i32* %arrayidx32, align 4
  %cmp33 = icmp sge i32 %42, 0
  %43 = zext i1 %cmp33 to i64
  %cond = select i1 %cmp33, i32 1, i32 0
  %44 = load i32, i32* %bn, align 4
  %shl = shl i32 %cond, %44
  %45 = load i32, i32* %bc, align 4
  %or = or i32 %45, %shl
  store i32 %or, i32* %bc, align 4
  %46 = load i32, i32* %ix, align 4
  %arrayidx34 = getelementptr inbounds [512 x i32], [512 x i32]* %preds, i32 0, i32 %46
  %47 = load i32, i32* %arrayidx34, align 4
  %call35 = call i32 @abs(i32 %47) #5
  store i32 %call35, i32* %ix, align 4
  %48 = load i32, i32* %bn, align 4
  %inc36 = add nsw i32 %48, 1
  store i32 %inc36, i32* %bn, align 4
  br label %while.cond27

while.end37:                                      ; preds = %while.cond27
  %call38 = call noalias i8* @malloc(i32 8)
  %49 = bitcast i8* %call38 to %struct.huffcode*
  %50 = load %struct.huffcode**, %struct.huffcode*** %codes, align 4
  %51 = load i32, i32* %i, align 4
  %arrayidx39 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %50, i32 %51
  store %struct.huffcode* %49, %struct.huffcode** %arrayidx39, align 4
  %52 = load i32, i32* %bn, align 4
  %53 = load %struct.huffcode**, %struct.huffcode*** %codes, align 4
  %54 = load i32, i32* %i, align 4
  %arrayidx40 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %53, i32 %54
  %55 = load %struct.huffcode*, %struct.huffcode** %arrayidx40, align 4
  %nbits = getelementptr inbounds %struct.huffcode, %struct.huffcode* %55, i32 0, i32 0
  store i32 %52, i32* %nbits, align 4
  %56 = load i32, i32* %bc, align 4
  %57 = load %struct.huffcode**, %struct.huffcode*** %codes, align 4
  %58 = load i32, i32* %i, align 4
  %arrayidx41 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %57, i32 %58
  %59 = load %struct.huffcode*, %struct.huffcode** %arrayidx41, align 4
  %code = getelementptr inbounds %struct.huffcode, %struct.huffcode* %59, i32 0, i32 1
  store i32 %56, i32* %code, align 4
  br label %for.inc42

for.inc42:                                        ; preds = %while.end37, %if.then24
  %60 = load i32, i32* %i, align 4
  %inc43 = add nsw i32 %60, 1
  store i32 %inc43, i32* %i, align 4
  br label %for.cond19

for.end44:                                        ; preds = %for.cond19
  %61 = load %struct.huffcode**, %struct.huffcode*** %codes, align 4
  store %struct.huffcode** %61, %struct.huffcode*** %retval, align 4
  br label %return

return:                                           ; preds = %for.end44, %if.then
  %62 = load %struct.huffcode**, %struct.huffcode*** %retval, align 4
  ret %struct.huffcode** %62
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define internal %struct.huffheap* @_heap_create(i32 %s, i32* %f) #0 {
entry:
  %s.addr = alloca i32, align 4
  %f.addr = alloca i32*, align 4
  %h = alloca %struct.huffheap*, align 4
  store i32 %s, i32* %s.addr, align 4
  store i32* %f, i32** %f.addr, align 4
  %call = call noalias i8* @malloc(i32 20)
  %0 = bitcast i8* %call to %struct.huffheap*
  store %struct.huffheap* %0, %struct.huffheap** %h, align 4
  %1 = load i32, i32* %s.addr, align 4
  %mul = mul i32 4, %1
  %call1 = call noalias i8* @malloc(i32 %mul)
  %2 = bitcast i8* %call1 to i32*
  %3 = load %struct.huffheap*, %struct.huffheap** %h, align 4
  %h2 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %3, i32 0, i32 0
  store i32* %2, i32** %h2, align 4
  %4 = load i32, i32* %s.addr, align 4
  %5 = load %struct.huffheap*, %struct.huffheap** %h, align 4
  %cs = getelementptr inbounds %struct.huffheap, %struct.huffheap* %5, i32 0, i32 3
  store i32 %4, i32* %cs, align 4
  %6 = load %struct.huffheap*, %struct.huffheap** %h, align 4
  %s3 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %6, i32 0, i32 2
  store i32 %4, i32* %s3, align 4
  %7 = load %struct.huffheap*, %struct.huffheap** %h, align 4
  %n = getelementptr inbounds %struct.huffheap, %struct.huffheap* %7, i32 0, i32 1
  store i32 0, i32* %n, align 4
  %8 = load i32*, i32** %f.addr, align 4
  %9 = load %struct.huffheap*, %struct.huffheap** %h, align 4
  %f4 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %9, i32 0, i32 4
  store i32* %8, i32** %f4, align 4
  %10 = load %struct.huffheap*, %struct.huffheap** %h, align 4
  ret %struct.huffheap* %10
}

; Function Attrs: noinline nounwind optnone
define internal void @_heap_add(%struct.huffheap* %heap, i32 %c) #0 {
entry:
  %heap.addr = alloca %struct.huffheap*, align 4
  %c.addr = alloca i32, align 4
  store %struct.huffheap* %heap, %struct.huffheap** %heap.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  %0 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %n = getelementptr inbounds %struct.huffheap, %struct.huffheap* %0, i32 0, i32 1
  %1 = load i32, i32* %n, align 4
  %add = add nsw i32 %1, 1
  %2 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %s = getelementptr inbounds %struct.huffheap, %struct.huffheap* %2, i32 0, i32 2
  %3 = load i32, i32* %s, align 4
  %cmp = icmp sgt i32 %add, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %h = getelementptr inbounds %struct.huffheap, %struct.huffheap* %4, i32 0, i32 0
  %5 = load i32*, i32** %h, align 4
  %6 = bitcast i32* %5 to i8*
  %7 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %s1 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %7, i32 0, i32 2
  %8 = load i32, i32* %s1, align 4
  %9 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %cs = getelementptr inbounds %struct.huffheap, %struct.huffheap* %9, i32 0, i32 3
  %10 = load i32, i32* %cs, align 4
  %add2 = add nsw i32 %8, %10
  %call = call i8* @realloc(i8* %6, i32 %add2)
  %11 = bitcast i8* %call to i32*
  %12 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %h3 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %12, i32 0, i32 0
  store i32* %11, i32** %h3, align 4
  %13 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %cs4 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %13, i32 0, i32 3
  %14 = load i32, i32* %cs4, align 4
  %15 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %s5 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %15, i32 0, i32 2
  %16 = load i32, i32* %s5, align 4
  %add6 = add nsw i32 %16, %14
  store i32 %add6, i32* %s5, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %17 = load i32, i32* %c.addr, align 4
  %18 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %h7 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %18, i32 0, i32 0
  %19 = load i32*, i32** %h7, align 4
  %20 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %n8 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %20, i32 0, i32 1
  %21 = load i32, i32* %n8, align 4
  %arrayidx = getelementptr inbounds i32, i32* %19, i32 %21
  store i32 %17, i32* %arrayidx, align 4
  %22 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %n9 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %22, i32 0, i32 1
  %23 = load i32, i32* %n9, align 4
  %inc = add nsw i32 %23, 1
  store i32 %inc, i32* %n9, align 4
  %24 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  call void @_heap_sort(%struct.huffheap* %24)
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i32 @_heap_remove(%struct.huffheap* %heap) #0 {
entry:
  %retval = alloca i32, align 4
  %heap.addr = alloca %struct.huffheap*, align 4
  store %struct.huffheap* %heap, %struct.huffheap** %heap.addr, align 4
  %0 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %n = getelementptr inbounds %struct.huffheap, %struct.huffheap* %0, i32 0, i32 1
  %1 = load i32, i32* %n, align 4
  %cmp = icmp sgt i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %n1 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %2, i32 0, i32 1
  %3 = load i32, i32* %n1, align 4
  %dec = add nsw i32 %3, -1
  store i32 %dec, i32* %n1, align 4
  %4 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %h = getelementptr inbounds %struct.huffheap, %struct.huffheap* %4, i32 0, i32 0
  %5 = load i32*, i32** %h, align 4
  %6 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %n2 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %6, i32 0, i32 1
  %7 = load i32, i32* %n2, align 4
  %arrayidx = getelementptr inbounds i32, i32* %5, i32 %7
  %8 = load i32, i32* %arrayidx, align 4
  store i32 %8, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  store i32 -1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %9 = load i32, i32* %retval, align 4
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone
define internal void @_heap_destroy(%struct.huffheap* %heap) #0 {
entry:
  %heap.addr = alloca %struct.huffheap*, align 4
  store %struct.huffheap* %heap, %struct.huffheap** %heap.addr, align 4
  %0 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %h = getelementptr inbounds %struct.huffheap, %struct.huffheap* %0, i32 0, i32 0
  %1 = load i32*, i32** %h, align 4
  %2 = bitcast i32* %1 to i8*
  call void @free(i8* %2)
  %3 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %4 = bitcast %struct.huffheap* %3 to i8*
  call void @free(i8* %4)
  ret void
}

declare noalias i8* @malloc(i32 %0) #3

; Function Attrs: nounwind readnone
declare i32 @abs(i32 %0) #4

; Function Attrs: noinline nounwind optnone
define hidden void @free_huffman_codes(%struct.huffcode** %c) #0 {
entry:
  %c.addr = alloca %struct.huffcode**, align 4
  %i = alloca i32, align 4
  store %struct.huffcode** %c, %struct.huffcode*** %c.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 256
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load %struct.huffcode**, %struct.huffcode*** %c.addr, align 4
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %1, i32 %2
  %3 = load %struct.huffcode*, %struct.huffcode** %arrayidx, align 4
  %4 = bitcast %struct.huffcode* %3 to i8*
  call void @free(i8* %4)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %6 = load %struct.huffcode**, %struct.huffcode*** %c.addr, align 4
  %7 = bitcast %struct.huffcode** %6 to i8*
  call void @free(i8* %7)
  ret void
}

declare void @free(i8* %0) #3

; Function Attrs: noinline nounwind optnone
define hidden void @inttobits(i32 %c, i32 %n, i8* %s) #0 {
entry:
  %c.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %s.addr = alloca i8*, align 4
  store i32 %c, i32* %c.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i8* %s, i8** %s.addr, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %0, i32 %1
  store i8 0, i8* %arrayidx, align 1
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %2 = load i32, i32* %n.addr, align 4
  %cmp = icmp sgt i32 %2, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i32, i32* %c.addr, align 4
  %rem = srem i32 %3, 2
  %add = add nsw i32 %rem, 48
  %conv = trunc i32 %add to i8
  %4 = load i8*, i8** %s.addr, align 4
  %5 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %5, 1
  %arrayidx1 = getelementptr inbounds i8, i8* %4, i32 %sub
  store i8 %conv, i8* %arrayidx1, align 1
  %6 = load i32, i32* %c.addr, align 4
  %shr = ashr i32 %6, 1
  store i32 %shr, i32* %c.addr, align 4
  %7 = load i32, i32* %n.addr, align 4
  %dec = add nsw i32 %7, -1
  store i32 %dec, i32* %n.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %r = alloca %struct.huffcode**, align 4
  %i = alloca i32, align 4
  %strbit = alloca [100 x i8], align 16
  %p = alloca i8*, align 4
  %freqs = alloca [256 x i32], align 16
  store i32 0, i32* %retval, align 4
  %arraydecay = getelementptr inbounds [256 x i32], [256 x i32]* %freqs, i32 0, i32 0
  %0 = bitcast i32* %arraydecay to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 1024, i1 false)
  %1 = load i8*, i8** @test, align 4
  store i8* %1, i8** %p, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %2 = load i8*, i8** %p, align 4
  %3 = load i8, i8* %2, align 1
  %conv = sext i8 %3 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i8*, i8** %p, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 1
  store i8* %incdec.ptr, i8** %p, align 4
  %5 = load i8, i8* %4, align 1
  %idxprom = sext i8 %5 to i32
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* %freqs, i32 0, i32 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %arrayidx, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %arraydecay2 = getelementptr inbounds [256 x i32], [256 x i32]* %freqs, i32 0, i32 0
  %call = call %struct.huffcode** @create_huffman_codes(i32* %arraydecay2)
  store %struct.huffcode** %call, %struct.huffcode*** %r, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.end
  %7 = load i32, i32* %i, align 4
  %cmp3 = icmp slt i32 %7, 256
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load %struct.huffcode**, %struct.huffcode*** %r, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %8, i32 %9
  %10 = load %struct.huffcode*, %struct.huffcode** %arrayidx5, align 4
  %cmp6 = icmp ne %struct.huffcode* %10, null
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %11 = load %struct.huffcode**, %struct.huffcode*** %r, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %11, i32 %12
  %13 = load %struct.huffcode*, %struct.huffcode** %arrayidx8, align 4
  %code = getelementptr inbounds %struct.huffcode, %struct.huffcode* %13, i32 0, i32 1
  %14 = load i32, i32* %code, align 4
  %15 = load %struct.huffcode**, %struct.huffcode*** %r, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %15, i32 %16
  %17 = load %struct.huffcode*, %struct.huffcode** %arrayidx9, align 4
  %nbits = getelementptr inbounds %struct.huffcode, %struct.huffcode* %17, i32 0, i32 0
  %18 = load i32, i32* %nbits, align 4
  %arraydecay10 = getelementptr inbounds [100 x i8], [100 x i8]* %strbit, i32 0, i32 0
  call void @inttobits(i32 %14, i32 %18, i8* %arraydecay10)
  %19 = load i32, i32* %i, align 4
  %20 = load %struct.huffcode**, %struct.huffcode*** %r, align 4
  %21 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %20, i32 %21
  %22 = load %struct.huffcode*, %struct.huffcode** %arrayidx11, align 4
  %code12 = getelementptr inbounds %struct.huffcode, %struct.huffcode* %22, i32 0, i32 1
  %23 = load i32, i32* %code12, align 4
  %arraydecay13 = getelementptr inbounds [100 x i8], [100 x i8]* %strbit, i32 0, i32 0
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i32 0, i32 0), i32 %19, i32 %23, i8* %arraydecay13)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %24 = load i32, i32* %i, align 4
  %inc15 = add nsw i32 %24, 1
  store i32 %inc15, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %25 = load %struct.huffcode**, %struct.huffcode*** %r, align 4
  call void @free_huffman_codes(%struct.huffcode** %25)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #3

declare i8* @realloc(i8* %0, i32 %1) #3

; Function Attrs: noinline nounwind optnone
define internal void @_heap_sort(%struct.huffheap* %heap) #0 {
entry:
  %heap.addr = alloca %struct.huffheap*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %a = alloca i32*, align 4
  %t_ = alloca i32, align 4
  store %struct.huffheap* %heap, %struct.huffheap** %heap.addr, align 4
  store i32 1, i32* %i, align 4
  store i32 2, i32* %j, align 4
  %0 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %h = getelementptr inbounds %struct.huffheap, %struct.huffheap* %0, i32 0, i32 0
  %1 = load i32*, i32** %h, align 4
  store i32* %1, i32** %a, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %n = getelementptr inbounds %struct.huffheap, %struct.huffheap* %3, i32 0, i32 1
  %4 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %2, %4
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %f = getelementptr inbounds %struct.huffheap, %struct.huffheap* %5, i32 0, i32 4
  %6 = load i32*, i32** %f, align 4
  %7 = load i32*, i32** %a, align 4
  %8 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %8, 1
  %arrayidx = getelementptr inbounds i32, i32* %7, i32 %sub
  %9 = load i32, i32* %arrayidx, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %6, i32 %9
  %10 = load i32, i32* %arrayidx1, align 4
  %11 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %f2 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %11, i32 0, i32 4
  %12 = load i32*, i32** %f2, align 4
  %13 = load i32*, i32** %a, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i32, i32* %13, i32 %14
  %15 = load i32, i32* %arrayidx3, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %12, i32 %15
  %16 = load i32, i32* %arrayidx4, align 4
  %cmp5 = icmp sge i32 %10, %16
  br i1 %cmp5, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %17 = load i32, i32* %j, align 4
  store i32 %17, i32* %i, align 4
  %18 = load i32, i32* %j, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %j, align 4
  br label %if.end

if.else:                                          ; preds = %while.body
  br label %do.body

do.body:                                          ; preds = %if.else
  %19 = load i32*, i32** %a, align 4
  %20 = load i32, i32* %i, align 4
  %sub6 = sub nsw i32 %20, 1
  %arrayidx7 = getelementptr inbounds i32, i32* %19, i32 %sub6
  %21 = load i32, i32* %arrayidx7, align 4
  store i32 %21, i32* %t_, align 4
  %22 = load i32*, i32** %a, align 4
  %23 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %22, i32 %23
  %24 = load i32, i32* %arrayidx8, align 4
  %25 = load i32*, i32** %a, align 4
  %26 = load i32, i32* %i, align 4
  %sub9 = sub nsw i32 %26, 1
  %arrayidx10 = getelementptr inbounds i32, i32* %25, i32 %sub9
  store i32 %24, i32* %arrayidx10, align 4
  %27 = load i32, i32* %t_, align 4
  %28 = load i32*, i32** %a, align 4
  %29 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds i32, i32* %28, i32 %29
  store i32 %27, i32* %arrayidx11, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %30 = load i32, i32* %i, align 4
  %dec = add nsw i32 %30, -1
  store i32 %dec, i32* %i, align 4
  %31 = load i32, i32* %i, align 4
  %cmp12 = icmp eq i32 %31, 0
  br i1 %cmp12, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.end
  %32 = load i32, i32* %j, align 4
  %inc13 = add nsw i32 %32, 1
  store i32 %inc13, i32* %j, align 4
  br label %cond.end

cond.false:                                       ; preds = %do.end
  %33 = load i32, i32* %i, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %32, %cond.true ], [ %33, %cond.false ]
  store i32 %cond, i32* %i, align 4
  br label %if.end

if.end:                                           ; preds = %cond.end, %if.then
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { argmemonly nounwind willreturn writeonly }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %3 = load i8, i8* %2, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %3 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp = icmp ne i32 %conv, 0
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %5 = load i8, i8* %4, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %idxprom = sext i8 %5 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %6, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp3 = icmp slt i32 %7, 256
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 256:i32
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp6 = icmp ne %struct.huffcode* %10, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %code, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %nbits, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %code12, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc15 = add nsw i32 %24, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 0:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()

; entering Souper's runOnFunction() for ./Huffman_coding.c.bc:_heap_sort()

; ModuleID = './Huffman_coding.c.bc'
source_filename = "./Huffman_coding.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.huffcode = type { i32, i32 }
%struct.huffheap = type { i32*, i32, i32, i32, i32* }

@.str = private unnamed_addr constant [40 x i8] c"this is an example for huffman encoding\00", align 1
@test = hidden global i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i32 0, i32 0), align 4
@.str.1 = private unnamed_addr constant [12 x i8] c"%c (%d) %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.huffcode** @create_huffman_codes(i32* %freqs) #0 {
entry:
  %retval = alloca %struct.huffcode**, align 4
  %freqs.addr = alloca i32*, align 4
  %codes = alloca %struct.huffcode**, align 4
  %heap = alloca %struct.huffheap*, align 4
  %efreqs = alloca [512 x i32], align 16
  %preds = alloca [512 x i32], align 16
  %i = alloca i32, align 4
  %extf = alloca i32, align 4
  %r1 = alloca i32, align 4
  %r2 = alloca i32, align 4
  %bc = alloca i32, align 4
  %bn = alloca i32, align 4
  %ix = alloca i32, align 4
  store i32* %freqs, i32** %freqs.addr, align 4
  store i32 256, i32* %extf, align 4
  %arraydecay = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 0
  %0 = bitcast i32* %arraydecay to i8*
  %1 = load i32*, i32** %freqs.addr, align 4
  %2 = bitcast i32* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 4 %2, i32 1024, i1 false)
  %arrayidx = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 256
  %3 = bitcast i32* %arrayidx to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %3, i8 0, i32 1024, i1 false)
  %arraydecay1 = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 0
  %call = call %struct.huffheap* @_heap_create(i32 512, i32* %arraydecay1)
  store %struct.huffheap* %call, %struct.huffheap** %heap, align 4
  %4 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  %cmp = icmp eq %struct.huffheap* %4, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.huffcode** null, %struct.huffcode*** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %5 = load i32, i32* %i, align 4
  %cmp2 = icmp slt i32 %5, 256
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 %6
  %7 = load i32, i32* %arrayidx3, align 4
  %cmp4 = icmp sgt i32 %7, 0
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %for.body
  %8 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  %9 = load i32, i32* %i, align 4
  call void @_heap_add(%struct.huffheap* %8, i32 %9)
  br label %if.end6

if.end6:                                          ; preds = %if.then5, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end6
  %10 = load i32, i32* %i, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end
  %11 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  %n = getelementptr inbounds %struct.huffheap, %struct.huffheap* %11, i32 0, i32 1
  %12 = load i32, i32* %n, align 4
  %cmp7 = icmp sgt i32 %12, 1
  br i1 %cmp7, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %13 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  %call8 = call i32 @_heap_remove(%struct.huffheap* %13)
  store i32 %call8, i32* %r1, align 4
  %14 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  %call9 = call i32 @_heap_remove(%struct.huffheap* %14)
  store i32 %call9, i32* %r2, align 4
  %15 = load i32, i32* %r1, align 4
  %arrayidx10 = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 %15
  %16 = load i32, i32* %arrayidx10, align 4
  %17 = load i32, i32* %r2, align 4
  %arrayidx11 = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 %17
  %18 = load i32, i32* %arrayidx11, align 4
  %add = add nsw i32 %16, %18
  %19 = load i32, i32* %extf, align 4
  %arrayidx12 = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 %19
  store i32 %add, i32* %arrayidx12, align 4
  %20 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  %21 = load i32, i32* %extf, align 4
  call void @_heap_add(%struct.huffheap* %20, i32 %21)
  %22 = load i32, i32* %extf, align 4
  %23 = load i32, i32* %r1, align 4
  %arrayidx13 = getelementptr inbounds [512 x i32], [512 x i32]* %preds, i32 0, i32 %23
  store i32 %22, i32* %arrayidx13, align 4
  %24 = load i32, i32* %extf, align 4
  %sub = sub nsw i32 0, %24
  %25 = load i32, i32* %r2, align 4
  %arrayidx14 = getelementptr inbounds [512 x i32], [512 x i32]* %preds, i32 0, i32 %25
  store i32 %sub, i32* %arrayidx14, align 4
  %26 = load i32, i32* %extf, align 4
  %inc15 = add nsw i32 %26, 1
  store i32 %inc15, i32* %extf, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %27 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  %call16 = call i32 @_heap_remove(%struct.huffheap* %27)
  store i32 %call16, i32* %r1, align 4
  %28 = load i32, i32* %r1, align 4
  %29 = load i32, i32* %r1, align 4
  %arrayidx17 = getelementptr inbounds [512 x i32], [512 x i32]* %preds, i32 0, i32 %29
  store i32 %28, i32* %arrayidx17, align 4
  %30 = load %struct.huffheap*, %struct.huffheap** %heap, align 4
  call void @_heap_destroy(%struct.huffheap* %30)
  %call18 = call noalias i8* @malloc(i32 1024)
  %31 = bitcast i8* %call18 to %struct.huffcode**
  store %struct.huffcode** %31, %struct.huffcode*** %codes, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond19

for.cond19:                                       ; preds = %for.inc42, %while.end
  %32 = load i32, i32* %i, align 4
  %cmp20 = icmp slt i32 %32, 256
  br i1 %cmp20, label %for.body21, label %for.end44

for.body21:                                       ; preds = %for.cond19
  store i32 0, i32* %bc, align 4
  store i32 0, i32* %bn, align 4
  %33 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds [512 x i32], [512 x i32]* %efreqs, i32 0, i32 %33
  %34 = load i32, i32* %arrayidx22, align 4
  %cmp23 = icmp eq i32 %34, 0
  br i1 %cmp23, label %if.then24, label %if.end26

if.then24:                                        ; preds = %for.body21
  %35 = load %struct.huffcode**, %struct.huffcode*** %codes, align 4
  %36 = load i32, i32* %i, align 4
  %arrayidx25 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %35, i32 %36
  store %struct.huffcode* null, %struct.huffcode** %arrayidx25, align 4
  br label %for.inc42

if.end26:                                         ; preds = %for.body21
  %37 = load i32, i32* %i, align 4
  store i32 %37, i32* %ix, align 4
  br label %while.cond27

while.cond27:                                     ; preds = %while.body31, %if.end26
  %38 = load i32, i32* %ix, align 4
  %arrayidx28 = getelementptr inbounds [512 x i32], [512 x i32]* %preds, i32 0, i32 %38
  %39 = load i32, i32* %arrayidx28, align 4
  %call29 = call i32 @abs(i32 %39) #5
  %40 = load i32, i32* %ix, align 4
  %cmp30 = icmp ne i32 %call29, %40
  br i1 %cmp30, label %while.body31, label %while.end37

while.body31:                                     ; preds = %while.cond27
  %41 = load i32, i32* %ix, align 4
  %arrayidx32 = getelementptr inbounds [512 x i32], [512 x i32]* %preds, i32 0, i32 %41
  %42 = load i32, i32* %arrayidx32, align 4
  %cmp33 = icmp sge i32 %42, 0
  %43 = zext i1 %cmp33 to i64
  %cond = select i1 %cmp33, i32 1, i32 0
  %44 = load i32, i32* %bn, align 4
  %shl = shl i32 %cond, %44
  %45 = load i32, i32* %bc, align 4
  %or = or i32 %45, %shl
  store i32 %or, i32* %bc, align 4
  %46 = load i32, i32* %ix, align 4
  %arrayidx34 = getelementptr inbounds [512 x i32], [512 x i32]* %preds, i32 0, i32 %46
  %47 = load i32, i32* %arrayidx34, align 4
  %call35 = call i32 @abs(i32 %47) #5
  store i32 %call35, i32* %ix, align 4
  %48 = load i32, i32* %bn, align 4
  %inc36 = add nsw i32 %48, 1
  store i32 %inc36, i32* %bn, align 4
  br label %while.cond27

while.end37:                                      ; preds = %while.cond27
  %call38 = call noalias i8* @malloc(i32 8)
  %49 = bitcast i8* %call38 to %struct.huffcode*
  %50 = load %struct.huffcode**, %struct.huffcode*** %codes, align 4
  %51 = load i32, i32* %i, align 4
  %arrayidx39 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %50, i32 %51
  store %struct.huffcode* %49, %struct.huffcode** %arrayidx39, align 4
  %52 = load i32, i32* %bn, align 4
  %53 = load %struct.huffcode**, %struct.huffcode*** %codes, align 4
  %54 = load i32, i32* %i, align 4
  %arrayidx40 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %53, i32 %54
  %55 = load %struct.huffcode*, %struct.huffcode** %arrayidx40, align 4
  %nbits = getelementptr inbounds %struct.huffcode, %struct.huffcode* %55, i32 0, i32 0
  store i32 %52, i32* %nbits, align 4
  %56 = load i32, i32* %bc, align 4
  %57 = load %struct.huffcode**, %struct.huffcode*** %codes, align 4
  %58 = load i32, i32* %i, align 4
  %arrayidx41 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %57, i32 %58
  %59 = load %struct.huffcode*, %struct.huffcode** %arrayidx41, align 4
  %code = getelementptr inbounds %struct.huffcode, %struct.huffcode* %59, i32 0, i32 1
  store i32 %56, i32* %code, align 4
  br label %for.inc42

for.inc42:                                        ; preds = %while.end37, %if.then24
  %60 = load i32, i32* %i, align 4
  %inc43 = add nsw i32 %60, 1
  store i32 %inc43, i32* %i, align 4
  br label %for.cond19

for.end44:                                        ; preds = %for.cond19
  %61 = load %struct.huffcode**, %struct.huffcode*** %codes, align 4
  store %struct.huffcode** %61, %struct.huffcode*** %retval, align 4
  br label %return

return:                                           ; preds = %for.end44, %if.then
  %62 = load %struct.huffcode**, %struct.huffcode*** %retval, align 4
  ret %struct.huffcode** %62
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define internal %struct.huffheap* @_heap_create(i32 %s, i32* %f) #0 {
entry:
  %s.addr = alloca i32, align 4
  %f.addr = alloca i32*, align 4
  %h = alloca %struct.huffheap*, align 4
  store i32 %s, i32* %s.addr, align 4
  store i32* %f, i32** %f.addr, align 4
  %call = call noalias i8* @malloc(i32 20)
  %0 = bitcast i8* %call to %struct.huffheap*
  store %struct.huffheap* %0, %struct.huffheap** %h, align 4
  %1 = load i32, i32* %s.addr, align 4
  %mul = mul i32 4, %1
  %call1 = call noalias i8* @malloc(i32 %mul)
  %2 = bitcast i8* %call1 to i32*
  %3 = load %struct.huffheap*, %struct.huffheap** %h, align 4
  %h2 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %3, i32 0, i32 0
  store i32* %2, i32** %h2, align 4
  %4 = load i32, i32* %s.addr, align 4
  %5 = load %struct.huffheap*, %struct.huffheap** %h, align 4
  %cs = getelementptr inbounds %struct.huffheap, %struct.huffheap* %5, i32 0, i32 3
  store i32 %4, i32* %cs, align 4
  %6 = load %struct.huffheap*, %struct.huffheap** %h, align 4
  %s3 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %6, i32 0, i32 2
  store i32 %4, i32* %s3, align 4
  %7 = load %struct.huffheap*, %struct.huffheap** %h, align 4
  %n = getelementptr inbounds %struct.huffheap, %struct.huffheap* %7, i32 0, i32 1
  store i32 0, i32* %n, align 4
  %8 = load i32*, i32** %f.addr, align 4
  %9 = load %struct.huffheap*, %struct.huffheap** %h, align 4
  %f4 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %9, i32 0, i32 4
  store i32* %8, i32** %f4, align 4
  %10 = load %struct.huffheap*, %struct.huffheap** %h, align 4
  ret %struct.huffheap* %10
}

; Function Attrs: noinline nounwind optnone
define internal void @_heap_add(%struct.huffheap* %heap, i32 %c) #0 {
entry:
  %heap.addr = alloca %struct.huffheap*, align 4
  %c.addr = alloca i32, align 4
  store %struct.huffheap* %heap, %struct.huffheap** %heap.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  %0 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %n = getelementptr inbounds %struct.huffheap, %struct.huffheap* %0, i32 0, i32 1
  %1 = load i32, i32* %n, align 4
  %add = add nsw i32 %1, 1
  %2 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %s = getelementptr inbounds %struct.huffheap, %struct.huffheap* %2, i32 0, i32 2
  %3 = load i32, i32* %s, align 4
  %cmp = icmp sgt i32 %add, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %h = getelementptr inbounds %struct.huffheap, %struct.huffheap* %4, i32 0, i32 0
  %5 = load i32*, i32** %h, align 4
  %6 = bitcast i32* %5 to i8*
  %7 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %s1 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %7, i32 0, i32 2
  %8 = load i32, i32* %s1, align 4
  %9 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %cs = getelementptr inbounds %struct.huffheap, %struct.huffheap* %9, i32 0, i32 3
  %10 = load i32, i32* %cs, align 4
  %add2 = add nsw i32 %8, %10
  %call = call i8* @realloc(i8* %6, i32 %add2)
  %11 = bitcast i8* %call to i32*
  %12 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %h3 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %12, i32 0, i32 0
  store i32* %11, i32** %h3, align 4
  %13 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %cs4 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %13, i32 0, i32 3
  %14 = load i32, i32* %cs4, align 4
  %15 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %s5 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %15, i32 0, i32 2
  %16 = load i32, i32* %s5, align 4
  %add6 = add nsw i32 %16, %14
  store i32 %add6, i32* %s5, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %17 = load i32, i32* %c.addr, align 4
  %18 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %h7 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %18, i32 0, i32 0
  %19 = load i32*, i32** %h7, align 4
  %20 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %n8 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %20, i32 0, i32 1
  %21 = load i32, i32* %n8, align 4
  %arrayidx = getelementptr inbounds i32, i32* %19, i32 %21
  store i32 %17, i32* %arrayidx, align 4
  %22 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %n9 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %22, i32 0, i32 1
  %23 = load i32, i32* %n9, align 4
  %inc = add nsw i32 %23, 1
  store i32 %inc, i32* %n9, align 4
  %24 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  call void @_heap_sort(%struct.huffheap* %24)
  ret void
}

; Function Attrs: noinline nounwind optnone
define internal i32 @_heap_remove(%struct.huffheap* %heap) #0 {
entry:
  %retval = alloca i32, align 4
  %heap.addr = alloca %struct.huffheap*, align 4
  store %struct.huffheap* %heap, %struct.huffheap** %heap.addr, align 4
  %0 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %n = getelementptr inbounds %struct.huffheap, %struct.huffheap* %0, i32 0, i32 1
  %1 = load i32, i32* %n, align 4
  %cmp = icmp sgt i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %n1 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %2, i32 0, i32 1
  %3 = load i32, i32* %n1, align 4
  %dec = add nsw i32 %3, -1
  store i32 %dec, i32* %n1, align 4
  %4 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %h = getelementptr inbounds %struct.huffheap, %struct.huffheap* %4, i32 0, i32 0
  %5 = load i32*, i32** %h, align 4
  %6 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %n2 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %6, i32 0, i32 1
  %7 = load i32, i32* %n2, align 4
  %arrayidx = getelementptr inbounds i32, i32* %5, i32 %7
  %8 = load i32, i32* %arrayidx, align 4
  store i32 %8, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  store i32 -1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %9 = load i32, i32* %retval, align 4
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone
define internal void @_heap_destroy(%struct.huffheap* %heap) #0 {
entry:
  %heap.addr = alloca %struct.huffheap*, align 4
  store %struct.huffheap* %heap, %struct.huffheap** %heap.addr, align 4
  %0 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %h = getelementptr inbounds %struct.huffheap, %struct.huffheap* %0, i32 0, i32 0
  %1 = load i32*, i32** %h, align 4
  %2 = bitcast i32* %1 to i8*
  call void @free(i8* %2)
  %3 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %4 = bitcast %struct.huffheap* %3 to i8*
  call void @free(i8* %4)
  ret void
}

declare noalias i8* @malloc(i32 %0) #3

; Function Attrs: nounwind readnone
declare i32 @abs(i32 %0) #4

; Function Attrs: noinline nounwind optnone
define hidden void @free_huffman_codes(%struct.huffcode** %c) #0 {
entry:
  %c.addr = alloca %struct.huffcode**, align 4
  %i = alloca i32, align 4
  store %struct.huffcode** %c, %struct.huffcode*** %c.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 256
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load %struct.huffcode**, %struct.huffcode*** %c.addr, align 4
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %1, i32 %2
  %3 = load %struct.huffcode*, %struct.huffcode** %arrayidx, align 4
  %4 = bitcast %struct.huffcode* %3 to i8*
  call void @free(i8* %4)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %6 = load %struct.huffcode**, %struct.huffcode*** %c.addr, align 4
  %7 = bitcast %struct.huffcode** %6 to i8*
  call void @free(i8* %7)
  ret void
}

declare void @free(i8* %0) #3

; Function Attrs: noinline nounwind optnone
define hidden void @inttobits(i32 %c, i32 %n, i8* %s) #0 {
entry:
  %c.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %s.addr = alloca i8*, align 4
  store i32 %c, i32* %c.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i8* %s, i8** %s.addr, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %1 = load i32, i32* %n.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %0, i32 %1
  store i8 0, i8* %arrayidx, align 1
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %2 = load i32, i32* %n.addr, align 4
  %cmp = icmp sgt i32 %2, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i32, i32* %c.addr, align 4
  %rem = srem i32 %3, 2
  %add = add nsw i32 %rem, 48
  %conv = trunc i32 %add to i8
  %4 = load i8*, i8** %s.addr, align 4
  %5 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %5, 1
  %arrayidx1 = getelementptr inbounds i8, i8* %4, i32 %sub
  store i8 %conv, i8* %arrayidx1, align 1
  %6 = load i32, i32* %c.addr, align 4
  %shr = ashr i32 %6, 1
  store i32 %shr, i32* %c.addr, align 4
  %7 = load i32, i32* %n.addr, align 4
  %dec = add nsw i32 %7, -1
  store i32 %dec, i32* %n.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %r = alloca %struct.huffcode**, align 4
  %i = alloca i32, align 4
  %strbit = alloca [100 x i8], align 16
  %p = alloca i8*, align 4
  %freqs = alloca [256 x i32], align 16
  store i32 0, i32* %retval, align 4
  %arraydecay = getelementptr inbounds [256 x i32], [256 x i32]* %freqs, i32 0, i32 0
  %0 = bitcast i32* %arraydecay to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 1024, i1 false)
  %1 = load i8*, i8** @test, align 4
  store i8* %1, i8** %p, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %2 = load i8*, i8** %p, align 4
  %3 = load i8, i8* %2, align 1
  %conv = sext i8 %3 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i8*, i8** %p, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 1
  store i8* %incdec.ptr, i8** %p, align 4
  %5 = load i8, i8* %4, align 1
  %idxprom = sext i8 %5 to i32
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* %freqs, i32 0, i32 %idxprom
  %6 = load i32, i32* %arrayidx, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %arrayidx, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %arraydecay2 = getelementptr inbounds [256 x i32], [256 x i32]* %freqs, i32 0, i32 0
  %call = call %struct.huffcode** @create_huffman_codes(i32* %arraydecay2)
  store %struct.huffcode** %call, %struct.huffcode*** %r, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.end
  %7 = load i32, i32* %i, align 4
  %cmp3 = icmp slt i32 %7, 256
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load %struct.huffcode**, %struct.huffcode*** %r, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %8, i32 %9
  %10 = load %struct.huffcode*, %struct.huffcode** %arrayidx5, align 4
  %cmp6 = icmp ne %struct.huffcode* %10, null
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %11 = load %struct.huffcode**, %struct.huffcode*** %r, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %11, i32 %12
  %13 = load %struct.huffcode*, %struct.huffcode** %arrayidx8, align 4
  %code = getelementptr inbounds %struct.huffcode, %struct.huffcode* %13, i32 0, i32 1
  %14 = load i32, i32* %code, align 4
  %15 = load %struct.huffcode**, %struct.huffcode*** %r, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %15, i32 %16
  %17 = load %struct.huffcode*, %struct.huffcode** %arrayidx9, align 4
  %nbits = getelementptr inbounds %struct.huffcode, %struct.huffcode* %17, i32 0, i32 0
  %18 = load i32, i32* %nbits, align 4
  %arraydecay10 = getelementptr inbounds [100 x i8], [100 x i8]* %strbit, i32 0, i32 0
  call void @inttobits(i32 %14, i32 %18, i8* %arraydecay10)
  %19 = load i32, i32* %i, align 4
  %20 = load %struct.huffcode**, %struct.huffcode*** %r, align 4
  %21 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds %struct.huffcode*, %struct.huffcode** %20, i32 %21
  %22 = load %struct.huffcode*, %struct.huffcode** %arrayidx11, align 4
  %code12 = getelementptr inbounds %struct.huffcode, %struct.huffcode* %22, i32 0, i32 1
  %23 = load i32, i32* %code12, align 4
  %arraydecay13 = getelementptr inbounds [100 x i8], [100 x i8]* %strbit, i32 0, i32 0
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i32 0, i32 0), i32 %19, i32 %23, i8* %arraydecay13)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %24 = load i32, i32* %i, align 4
  %inc15 = add nsw i32 %24, 1
  store i32 %inc15, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %25 = load %struct.huffcode**, %struct.huffcode*** %r, align 4
  call void @free_huffman_codes(%struct.huffcode** %25)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #3

declare i8* @realloc(i8* %0, i32 %1) #3

; Function Attrs: noinline nounwind optnone
define internal void @_heap_sort(%struct.huffheap* %heap) #0 {
entry:
  %heap.addr = alloca %struct.huffheap*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %a = alloca i32*, align 4
  %t_ = alloca i32, align 4
  store %struct.huffheap* %heap, %struct.huffheap** %heap.addr, align 4
  store i32 1, i32* %i, align 4
  store i32 2, i32* %j, align 4
  %0 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %h = getelementptr inbounds %struct.huffheap, %struct.huffheap* %0, i32 0, i32 0
  %1 = load i32*, i32** %h, align 4
  store i32* %1, i32** %a, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %n = getelementptr inbounds %struct.huffheap, %struct.huffheap* %3, i32 0, i32 1
  %4 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %2, %4
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %f = getelementptr inbounds %struct.huffheap, %struct.huffheap* %5, i32 0, i32 4
  %6 = load i32*, i32** %f, align 4
  %7 = load i32*, i32** %a, align 4
  %8 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %8, 1
  %arrayidx = getelementptr inbounds i32, i32* %7, i32 %sub
  %9 = load i32, i32* %arrayidx, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %6, i32 %9
  %10 = load i32, i32* %arrayidx1, align 4
  %11 = load %struct.huffheap*, %struct.huffheap** %heap.addr, align 4
  %f2 = getelementptr inbounds %struct.huffheap, %struct.huffheap* %11, i32 0, i32 4
  %12 = load i32*, i32** %f2, align 4
  %13 = load i32*, i32** %a, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i32, i32* %13, i32 %14
  %15 = load i32, i32* %arrayidx3, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %12, i32 %15
  %16 = load i32, i32* %arrayidx4, align 4
  %cmp5 = icmp sge i32 %10, %16
  br i1 %cmp5, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %17 = load i32, i32* %j, align 4
  store i32 %17, i32* %i, align 4
  %18 = load i32, i32* %j, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %j, align 4
  br label %if.end

if.else:                                          ; preds = %while.body
  br label %do.body

do.body:                                          ; preds = %if.else
  %19 = load i32*, i32** %a, align 4
  %20 = load i32, i32* %i, align 4
  %sub6 = sub nsw i32 %20, 1
  %arrayidx7 = getelementptr inbounds i32, i32* %19, i32 %sub6
  %21 = load i32, i32* %arrayidx7, align 4
  store i32 %21, i32* %t_, align 4
  %22 = load i32*, i32** %a, align 4
  %23 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %22, i32 %23
  %24 = load i32, i32* %arrayidx8, align 4
  %25 = load i32*, i32** %a, align 4
  %26 = load i32, i32* %i, align 4
  %sub9 = sub nsw i32 %26, 1
  %arrayidx10 = getelementptr inbounds i32, i32* %25, i32 %sub9
  store i32 %24, i32* %arrayidx10, align 4
  %27 = load i32, i32* %t_, align 4
  %28 = load i32*, i32** %a, align 4
  %29 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds i32, i32* %28, i32 %29
  store i32 %27, i32* %arrayidx11, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %30 = load i32, i32* %i, align 4
  %dec = add nsw i32 %30, -1
  store i32 %dec, i32* %i, align 4
  %31 = load i32, i32* %i, align 4
  %cmp12 = icmp eq i32 %31, 0
  br i1 %cmp12, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.end
  %32 = load i32, i32* %j, align 4
  %inc13 = add nsw i32 %32, 1
  store i32 %inc13, i32* %j, align 4
  br label %cond.end

cond.false:                                       ; preds = %do.end
  %33 = load i32, i32* %i, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %32, %cond.true ], [ %33, %cond.false ]
  store i32 %cond, i32* %i, align 4
  br label %if.end

if.end:                                           ; preds = %cond.end, %if.then
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { argmemonly nounwind willreturn writeonly }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %2, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %8, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %arrayidx1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %arrayidx3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %arrayidx4, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp5 = icmp sge i32 %10, %16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %18, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub6 = sub nsw i32 %20, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %arrayidx7, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %arrayidx8, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub9 = sub nsw i32 %26, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %t_, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec = add nsw i32 %30, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp12 = icmp eq i32 %31, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc13 = add nsw i32 %32, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cond = phi i32 [ %32, %cond.true ], [ %33, %cond.false ]
; Looking for a replacement for:
%0:i32 = var
infer %0
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for ./Huffman_coding.c.bc:_heap_sort()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
