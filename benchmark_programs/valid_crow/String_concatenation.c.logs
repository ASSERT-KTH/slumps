
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for sconcat()

; ModuleID = './String_concatenation.c.bc'
source_filename = "./String_concatenation.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [6 x i8] c"hello\00", align 1
@.str.1 = private unnamed_addr constant [12 x i8] c"%s literal\0A\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"%s%s\0A\00", align 1
@.str.3 = private unnamed_addr constant [9 x i8] c" literal\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i8* @sconcat(i8* %s1, i8* %s2) #0 {
entry:
  %s1.addr = alloca i8*, align 4
  %s2.addr = alloca i8*, align 4
  %s0 = alloca i8*, align 4
  store i8* %s1, i8** %s1.addr, align 4
  store i8* %s2, i8** %s2.addr, align 4
  %0 = load i8*, i8** %s1.addr, align 4
  %call = call i32 @strlen(i8* %0) #3
  %1 = load i8*, i8** %s2.addr, align 4
  %call1 = call i32 @strlen(i8* %1) #3
  %add = add i32 %call, %call1
  %add2 = add i32 %add, 1
  %call3 = call noalias i8* @malloc(i32 %add2)
  store i8* %call3, i8** %s0, align 4
  %2 = load i8*, i8** %s0, align 4
  %3 = load i8*, i8** %s1.addr, align 4
  %call4 = call i8* @strcpy(i8* %2, i8* %3)
  %4 = load i8*, i8** %s0, align 4
  %5 = load i8*, i8** %s2.addr, align 4
  %call5 = call i8* @strcat(i8* %4, i8* %5)
  %6 = load i8*, i8** %s0, align 4
  ret i8* %6
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

declare i8* @strcpy(i8* %0, i8* %1) #1

declare i8* @strcat(i8* %0, i8* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %s = alloca i8*, align 4
  %s2 = alloca i8*, align 4
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i8** %s, align 4
  %0 = load i8*, i8** %s, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i32 0, i32 0), i8* %0)
  %1 = load i8*, i8** %s, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), i8* %1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0))
  %2 = load i8*, i8** %s, align 4
  %call2 = call i8* @sconcat(i8* %2, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0))
  store i8* %call2, i8** %s2, align 4
  %3 = load i8*, i8** %s2, align 4
  %call3 = call i32 @puts(i8* %3)
  %4 = load i8*, i8** %s2, align 4
  call void @free(i8* %4)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

declare i32 @puts(i8* %0) #1

declare void @free(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 @strlen(i8* %0) #3
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call1 = call i32 @strlen(i8* %1) #3
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add i32 %call, %call1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %add2 = add i32 %add, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = add 1:i32, %2
infer %3
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = add 1:i32, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for sconcat()

; entering Souper's runOnFunction() for main()

; ModuleID = './String_concatenation.c.bc'
source_filename = "./String_concatenation.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [6 x i8] c"hello\00", align 1
@.str.1 = private unnamed_addr constant [12 x i8] c"%s literal\0A\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"%s%s\0A\00", align 1
@.str.3 = private unnamed_addr constant [9 x i8] c" literal\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i8* @sconcat(i8* %s1, i8* %s2) #0 {
entry:
  %s1.addr = alloca i8*, align 4
  %s2.addr = alloca i8*, align 4
  %s0 = alloca i8*, align 4
  store i8* %s1, i8** %s1.addr, align 4
  store i8* %s2, i8** %s2.addr, align 4
  %0 = load i8*, i8** %s1.addr, align 4
  %call = call i32 @strlen(i8* %0) #3
  %1 = load i8*, i8** %s2.addr, align 4
  %call1 = call i32 @strlen(i8* %1) #3
  %add = add i32 %call, %call1
  %add2 = add i32 %add, 1
  %call3 = call noalias i8* @malloc(i32 %add2)
  store i8* %call3, i8** %s0, align 4
  %2 = load i8*, i8** %s0, align 4
  %3 = load i8*, i8** %s1.addr, align 4
  %call4 = call i8* @strcpy(i8* %2, i8* %3)
  %4 = load i8*, i8** %s0, align 4
  %5 = load i8*, i8** %s2.addr, align 4
  %call5 = call i8* @strcat(i8* %4, i8* %5)
  %6 = load i8*, i8** %s0, align 4
  ret i8* %6
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

declare i8* @strcpy(i8* %0, i8* %1) #1

declare i8* @strcat(i8* %0, i8* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %s = alloca i8*, align 4
  %s2 = alloca i8*, align 4
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i8** %s, align 4
  %0 = load i8*, i8** %s, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i32 0, i32 0), i8* %0)
  %1 = load i8*, i8** %s, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), i8* %1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0))
  %2 = load i8*, i8** %s, align 4
  %call2 = call i8* @sconcat(i8* %2, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0))
  store i8* %call2, i8** %s2, align 4
  %3 = load i8*, i8** %s2, align 4
  %call3 = call i32 @puts(i8* %3)
  %4 = load i8*, i8** %s2, align 4
  call void @free(i8* %4)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

declare i32 @puts(i8* %0) #1

declare void @free(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
