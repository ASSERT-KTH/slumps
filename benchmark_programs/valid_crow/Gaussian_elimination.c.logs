
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for swap_row()

; ModuleID = './Gaussian_elimination.c.bc'
source_filename = "./Gaussian_elimination.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@__const.main.a = private unnamed_addr constant [36 x double] [double 1.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 1.000000e+00, double 6.300000e-01, double 3.900000e-01, double 2.500000e-01, double 1.600000e-01, double 1.000000e-01, double 1.000000e+00, double 1.260000e+00, double 1.580000e+00, double 1.980000e+00, double 2.490000e+00, double 3.130000e+00, double 1.000000e+00, double 1.880000e+00, double 3.550000e+00, double 6.700000e+00, double 1.262000e+01, double 2.380000e+01, double 1.000000e+00, double 2.510000e+00, double 6.320000e+00, double 1.588000e+01, double 3.990000e+01, double 1.002800e+02, double 1.000000e+00, double 3.140000e+00, double 0x4023BD70A3D70A3D, double 3.101000e+01, double 0x40585A3D70A3D70A, double 3.060200e+02], align 16
@.str = private unnamed_addr constant [4 x i8] c"%g\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @swap_row(double* %a, double* %b, i32 %r1, i32 %r2, i32 %n) #0 {
entry:
  %a.addr = alloca double*, align 4
  %b.addr = alloca double*, align 4
  %r1.addr = alloca i32, align 4
  %r2.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %tmp = alloca double, align 8
  %p1 = alloca double*, align 4
  %p2 = alloca double*, align 4
  %i = alloca i32, align 4
  store double* %a, double** %a.addr, align 4
  store double* %b, double** %b.addr, align 4
  store i32 %r1, i32* %r1.addr, align 4
  store i32 %r2, i32* %r2.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %r1.addr, align 4
  %1 = load i32, i32* %r2.addr, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %n.addr, align 4
  %cmp1 = icmp slt i32 %2, %3
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load double*, double** %a.addr, align 4
  %5 = load i32, i32* %r1.addr, align 4
  %6 = load i32, i32* %n.addr, align 4
  %mul = mul nsw i32 %5, %6
  %7 = load i32, i32* %i, align 4
  %add = add nsw i32 %mul, %7
  %add.ptr = getelementptr inbounds double, double* %4, i32 %add
  store double* %add.ptr, double** %p1, align 4
  %8 = load double*, double** %a.addr, align 4
  %9 = load i32, i32* %r2.addr, align 4
  %10 = load i32, i32* %n.addr, align 4
  %mul2 = mul nsw i32 %9, %10
  %11 = load i32, i32* %i, align 4
  %add3 = add nsw i32 %mul2, %11
  %add.ptr4 = getelementptr inbounds double, double* %8, i32 %add3
  store double* %add.ptr4, double** %p2, align 4
  %12 = load double*, double** %p1, align 4
  %13 = load double, double* %12, align 8
  store double %13, double* %tmp, align 8
  %14 = load double*, double** %p2, align 4
  %15 = load double, double* %14, align 8
  %16 = load double*, double** %p1, align 4
  store double %15, double* %16, align 8
  %17 = load double, double* %tmp, align 8
  %18 = load double*, double** %p2, align 4
  store double %17, double* %18, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %19 = load i32, i32* %i, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %20 = load double*, double** %b.addr, align 4
  %21 = load i32, i32* %r1.addr, align 4
  %arrayidx = getelementptr inbounds double, double* %20, i32 %21
  %22 = load double, double* %arrayidx, align 8
  store double %22, double* %tmp, align 8
  %23 = load double*, double** %b.addr, align 4
  %24 = load i32, i32* %r2.addr, align 4
  %arrayidx5 = getelementptr inbounds double, double* %23, i32 %24
  %25 = load double, double* %arrayidx5, align 8
  %26 = load double*, double** %b.addr, align 4
  %27 = load i32, i32* %r1.addr, align 4
  %arrayidx6 = getelementptr inbounds double, double* %26, i32 %27
  store double %25, double* %arrayidx6, align 8
  %28 = load double, double* %tmp, align 8
  %29 = load double*, double** %b.addr, align 4
  %30 = load i32, i32* %r2.addr, align 4
  %arrayidx7 = getelementptr inbounds double, double* %29, i32 %30
  store double %28, double* %arrayidx7, align 8
  br label %return

return:                                           ; preds = %for.end, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @gauss_eliminate(double* %a, double* %b, double* %x, i32 %n) #0 {
entry:
  %a.addr = alloca double*, align 4
  %b.addr = alloca double*, align 4
  %x.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %col = alloca i32, align 4
  %row = alloca i32, align 4
  %max_row = alloca i32, align 4
  %dia = alloca i32, align 4
  %max = alloca double, align 8
  %tmp = alloca double, align 8
  store double* %a, double** %a.addr, align 4
  store double* %b, double** %b.addr, align 4
  store double* %x, double** %x.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %dia, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc42, %entry
  %0 = load i32, i32* %dia, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end44

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %dia, align 4
  store i32 %2, i32* %max_row, align 4
  %3 = load double*, double** %a.addr, align 4
  %4 = load i32, i32* %dia, align 4
  %5 = load i32, i32* %n.addr, align 4
  %mul = mul nsw i32 %4, %5
  %6 = load i32, i32* %dia, align 4
  %add = add nsw i32 %mul, %6
  %add.ptr = getelementptr inbounds double, double* %3, i32 %add
  %7 = load double, double* %add.ptr, align 8
  store double %7, double* %max, align 8
  %8 = load i32, i32* %dia, align 4
  %add1 = add nsw i32 %8, 1
  store i32 %add1, i32* %row, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %for.body
  %9 = load i32, i32* %row, align 4
  %10 = load i32, i32* %n.addr, align 4
  %cmp3 = icmp slt i32 %9, %10
  br i1 %cmp3, label %for.body4, label %for.end

for.body4:                                        ; preds = %for.cond2
  %11 = load double*, double** %a.addr, align 4
  %12 = load i32, i32* %row, align 4
  %13 = load i32, i32* %n.addr, align 4
  %mul5 = mul nsw i32 %12, %13
  %14 = load i32, i32* %dia, align 4
  %add6 = add nsw i32 %mul5, %14
  %add.ptr7 = getelementptr inbounds double, double* %11, i32 %add6
  %15 = load double, double* %add.ptr7, align 8
  %16 = call double @llvm.fabs.f64(double %15)
  store double %16, double* %tmp, align 8
  %17 = load double, double* %max, align 8
  %cmp8 = fcmp ogt double %16, %17
  br i1 %cmp8, label %if.then, label %if.end

if.then:                                          ; preds = %for.body4
  %18 = load i32, i32* %row, align 4
  store i32 %18, i32* %max_row, align 4
  %19 = load double, double* %tmp, align 8
  store double %19, double* %max, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body4
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %20 = load i32, i32* %row, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %row, align 4
  br label %for.cond2

for.end:                                          ; preds = %for.cond2
  %21 = load double*, double** %a.addr, align 4
  %22 = load double*, double** %b.addr, align 4
  %23 = load i32, i32* %dia, align 4
  %24 = load i32, i32* %max_row, align 4
  %25 = load i32, i32* %n.addr, align 4
  call void @swap_row(double* %21, double* %22, i32 %23, i32 %24, i32 %25)
  %26 = load i32, i32* %dia, align 4
  %add9 = add nsw i32 %26, 1
  store i32 %add9, i32* %row, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc39, %for.end
  %27 = load i32, i32* %row, align 4
  %28 = load i32, i32* %n.addr, align 4
  %cmp11 = icmp slt i32 %27, %28
  br i1 %cmp11, label %for.body12, label %for.end41

for.body12:                                       ; preds = %for.cond10
  %29 = load double*, double** %a.addr, align 4
  %30 = load i32, i32* %row, align 4
  %31 = load i32, i32* %n.addr, align 4
  %mul13 = mul nsw i32 %30, %31
  %32 = load i32, i32* %dia, align 4
  %add14 = add nsw i32 %mul13, %32
  %add.ptr15 = getelementptr inbounds double, double* %29, i32 %add14
  %33 = load double, double* %add.ptr15, align 8
  %34 = load double*, double** %a.addr, align 4
  %35 = load i32, i32* %dia, align 4
  %36 = load i32, i32* %n.addr, align 4
  %mul16 = mul nsw i32 %35, %36
  %37 = load i32, i32* %dia, align 4
  %add17 = add nsw i32 %mul16, %37
  %add.ptr18 = getelementptr inbounds double, double* %34, i32 %add17
  %38 = load double, double* %add.ptr18, align 8
  %div = fdiv double %33, %38
  store double %div, double* %tmp, align 8
  %39 = load i32, i32* %dia, align 4
  %add19 = add nsw i32 %39, 1
  store i32 %add19, i32* %col, align 4
  br label %for.cond20

for.cond20:                                       ; preds = %for.inc30, %for.body12
  %40 = load i32, i32* %col, align 4
  %41 = load i32, i32* %n.addr, align 4
  %cmp21 = icmp slt i32 %40, %41
  br i1 %cmp21, label %for.body22, label %for.end32

for.body22:                                       ; preds = %for.cond20
  %42 = load double, double* %tmp, align 8
  %43 = load double*, double** %a.addr, align 4
  %44 = load i32, i32* %dia, align 4
  %45 = load i32, i32* %n.addr, align 4
  %mul23 = mul nsw i32 %44, %45
  %46 = load i32, i32* %col, align 4
  %add24 = add nsw i32 %mul23, %46
  %add.ptr25 = getelementptr inbounds double, double* %43, i32 %add24
  %47 = load double, double* %add.ptr25, align 8
  %mul26 = fmul double %42, %47
  %48 = load double*, double** %a.addr, align 4
  %49 = load i32, i32* %row, align 4
  %50 = load i32, i32* %n.addr, align 4
  %mul27 = mul nsw i32 %49, %50
  %51 = load i32, i32* %col, align 4
  %add28 = add nsw i32 %mul27, %51
  %add.ptr29 = getelementptr inbounds double, double* %48, i32 %add28
  %52 = load double, double* %add.ptr29, align 8
  %sub = fsub double %52, %mul26
  store double %sub, double* %add.ptr29, align 8
  br label %for.inc30

for.inc30:                                        ; preds = %for.body22
  %53 = load i32, i32* %col, align 4
  %inc31 = add nsw i32 %53, 1
  store i32 %inc31, i32* %col, align 4
  br label %for.cond20

for.end32:                                        ; preds = %for.cond20
  %54 = load double*, double** %a.addr, align 4
  %55 = load i32, i32* %row, align 4
  %56 = load i32, i32* %n.addr, align 4
  %mul33 = mul nsw i32 %55, %56
  %57 = load i32, i32* %dia, align 4
  %add34 = add nsw i32 %mul33, %57
  %add.ptr35 = getelementptr inbounds double, double* %54, i32 %add34
  store double 0.000000e+00, double* %add.ptr35, align 8
  %58 = load double, double* %tmp, align 8
  %59 = load double*, double** %b.addr, align 4
  %60 = load i32, i32* %dia, align 4
  %arrayidx = getelementptr inbounds double, double* %59, i32 %60
  %61 = load double, double* %arrayidx, align 8
  %mul36 = fmul double %58, %61
  %62 = load double*, double** %b.addr, align 4
  %63 = load i32, i32* %row, align 4
  %arrayidx37 = getelementptr inbounds double, double* %62, i32 %63
  %64 = load double, double* %arrayidx37, align 8
  %sub38 = fsub double %64, %mul36
  store double %sub38, double* %arrayidx37, align 8
  br label %for.inc39

for.inc39:                                        ; preds = %for.end32
  %65 = load i32, i32* %row, align 4
  %inc40 = add nsw i32 %65, 1
  store i32 %inc40, i32* %row, align 4
  br label %for.cond10

for.end41:                                        ; preds = %for.cond10
  br label %for.inc42

for.inc42:                                        ; preds = %for.end41
  %66 = load i32, i32* %dia, align 4
  %inc43 = add nsw i32 %66, 1
  store i32 %inc43, i32* %dia, align 4
  br label %for.cond

for.end44:                                        ; preds = %for.cond
  %67 = load i32, i32* %n.addr, align 4
  %sub45 = sub nsw i32 %67, 1
  store i32 %sub45, i32* %row, align 4
  br label %for.cond46

for.cond46:                                       ; preds = %for.inc67, %for.end44
  %68 = load i32, i32* %row, align 4
  %cmp47 = icmp sge i32 %68, 0
  br i1 %cmp47, label %for.body48, label %for.end69

for.body48:                                       ; preds = %for.cond46
  %69 = load double*, double** %b.addr, align 4
  %70 = load i32, i32* %row, align 4
  %arrayidx49 = getelementptr inbounds double, double* %69, i32 %70
  %71 = load double, double* %arrayidx49, align 8
  store double %71, double* %tmp, align 8
  %72 = load i32, i32* %n.addr, align 4
  %sub50 = sub nsw i32 %72, 1
  store i32 %sub50, i32* %j, align 4
  br label %for.cond51

for.cond51:                                       ; preds = %for.inc60, %for.body48
  %73 = load i32, i32* %j, align 4
  %74 = load i32, i32* %row, align 4
  %cmp52 = icmp sgt i32 %73, %74
  br i1 %cmp52, label %for.body53, label %for.end61

for.body53:                                       ; preds = %for.cond51
  %75 = load double*, double** %x.addr, align 4
  %76 = load i32, i32* %j, align 4
  %arrayidx54 = getelementptr inbounds double, double* %75, i32 %76
  %77 = load double, double* %arrayidx54, align 8
  %78 = load double*, double** %a.addr, align 4
  %79 = load i32, i32* %row, align 4
  %80 = load i32, i32* %n.addr, align 4
  %mul55 = mul nsw i32 %79, %80
  %81 = load i32, i32* %j, align 4
  %add56 = add nsw i32 %mul55, %81
  %add.ptr57 = getelementptr inbounds double, double* %78, i32 %add56
  %82 = load double, double* %add.ptr57, align 8
  %mul58 = fmul double %77, %82
  %83 = load double, double* %tmp, align 8
  %sub59 = fsub double %83, %mul58
  store double %sub59, double* %tmp, align 8
  br label %for.inc60

for.inc60:                                        ; preds = %for.body53
  %84 = load i32, i32* %j, align 4
  %dec = add nsw i32 %84, -1
  store i32 %dec, i32* %j, align 4
  br label %for.cond51

for.end61:                                        ; preds = %for.cond51
  %85 = load double, double* %tmp, align 8
  %86 = load double*, double** %a.addr, align 4
  %87 = load i32, i32* %row, align 4
  %88 = load i32, i32* %n.addr, align 4
  %mul62 = mul nsw i32 %87, %88
  %89 = load i32, i32* %row, align 4
  %add63 = add nsw i32 %mul62, %89
  %add.ptr64 = getelementptr inbounds double, double* %86, i32 %add63
  %90 = load double, double* %add.ptr64, align 8
  %div65 = fdiv double %85, %90
  %91 = load double*, double** %x.addr, align 4
  %92 = load i32, i32* %row, align 4
  %arrayidx66 = getelementptr inbounds double, double* %91, i32 %92
  store double %div65, double* %arrayidx66, align 8
  br label %for.inc67

for.inc67:                                        ; preds = %for.end61
  %93 = load i32, i32* %row, align 4
  %dec68 = add nsw i32 %93, -1
  store i32 %dec68, i32* %row, align 4
  br label %for.cond46

for.end69:                                        ; preds = %for.cond46
  ret void
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %a = alloca [36 x double], align 16
  %b = alloca [6 x double], align 16
  %x = alloca [6 x double], align 16
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [36 x double]* %a to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([36 x double]* @__const.main.a to i8*), i32 288, i1 false)
  %1 = bitcast [6 x double]* %b to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %1, i8 0, i32 48, i1 false)
  %2 = bitcast i8* %1 to [6 x double]*
  %3 = getelementptr inbounds [6 x double], [6 x double]* %2, i32 0, i32 0
  store double -1.000000e-02, double* %3, align 16
  %4 = getelementptr inbounds [6 x double], [6 x double]* %2, i32 0, i32 1
  store double 6.100000e-01, double* %4, align 8
  %5 = getelementptr inbounds [6 x double], [6 x double]* %2, i32 0, i32 2
  store double 9.100000e-01, double* %5, align 16
  %6 = getelementptr inbounds [6 x double], [6 x double]* %2, i32 0, i32 3
  store double 0x3FEFAE147AE147AE, double* %6, align 8
  %7 = getelementptr inbounds [6 x double], [6 x double]* %2, i32 0, i32 4
  store double 6.000000e-01, double* %7, align 16
  %8 = getelementptr inbounds [6 x double], [6 x double]* %2, i32 0, i32 5
  store double 2.000000e-02, double* %8, align 8
  %arraydecay = getelementptr inbounds [36 x double], [36 x double]* %a, i32 0, i32 0
  %arraydecay1 = getelementptr inbounds [6 x double], [6 x double]* %b, i32 0, i32 0
  %arraydecay2 = getelementptr inbounds [6 x double], [6 x double]* %x, i32 0, i32 0
  call void @gauss_eliminate(double* %arraydecay, double* %arraydecay1, double* %arraydecay2, i32 6)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %9 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %9, 6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %10 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [6 x double], [6 x double]* %x, i32 0, i32 %10
  %11 = load double, double* %arrayidx, align 8
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), double %11)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %i, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #3

declare i32 @printf(i8* %0, ...) #4

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { argmemonly nounwind willreturn writeonly }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %r1.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %r2.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = icmp slt i32 %2, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %r1.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %5, %6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %mul, %7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = addnsw %0, %3
infer %4

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %r2.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul2 = mul nsw i32 %9, %10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add3 = add nsw i32 %mul2, %11
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = addnsw %0, %3
infer %4

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %19, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %r1.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %r2.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %r1.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %r2.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = addnsw %0, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -4
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for swap_row()

; entering Souper's runOnFunction() for gauss_eliminate()

; ModuleID = './Gaussian_elimination.c.bc'
source_filename = "./Gaussian_elimination.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@__const.main.a = private unnamed_addr constant [36 x double] [double 1.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 1.000000e+00, double 6.300000e-01, double 3.900000e-01, double 2.500000e-01, double 1.600000e-01, double 1.000000e-01, double 1.000000e+00, double 1.260000e+00, double 1.580000e+00, double 1.980000e+00, double 2.490000e+00, double 3.130000e+00, double 1.000000e+00, double 1.880000e+00, double 3.550000e+00, double 6.700000e+00, double 1.262000e+01, double 2.380000e+01, double 1.000000e+00, double 2.510000e+00, double 6.320000e+00, double 1.588000e+01, double 3.990000e+01, double 1.002800e+02, double 1.000000e+00, double 3.140000e+00, double 0x4023BD70A3D70A3D, double 3.101000e+01, double 0x40585A3D70A3D70A, double 3.060200e+02], align 16
@.str = private unnamed_addr constant [4 x i8] c"%g\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @swap_row(double* %a, double* %b, i32 %r1, i32 %r2, i32 %n) #0 {
entry:
  %a.addr = alloca double*, align 4
  %b.addr = alloca double*, align 4
  %r1.addr = alloca i32, align 4
  %r2.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %tmp = alloca double, align 8
  %p1 = alloca double*, align 4
  %p2 = alloca double*, align 4
  %i = alloca i32, align 4
  store double* %a, double** %a.addr, align 4
  store double* %b, double** %b.addr, align 4
  store i32 %r1, i32* %r1.addr, align 4
  store i32 %r2, i32* %r2.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %r1.addr, align 4
  %1 = load i32, i32* %r2.addr, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %n.addr, align 4
  %cmp1 = icmp slt i32 %2, %3
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load double*, double** %a.addr, align 4
  %5 = load i32, i32* %r1.addr, align 4
  %6 = load i32, i32* %n.addr, align 4
  %mul = mul nsw i32 %5, %6
  %7 = load i32, i32* %i, align 4
  %add = add nsw i32 %mul, %7
  %add.ptr = getelementptr inbounds double, double* %4, i32 %add
  store double* %add.ptr, double** %p1, align 4
  %8 = load double*, double** %a.addr, align 4
  %9 = load i32, i32* %r2.addr, align 4
  %10 = load i32, i32* %n.addr, align 4
  %mul2 = mul nsw i32 %9, %10
  %11 = load i32, i32* %i, align 4
  %add3 = add nsw i32 %mul2, %11
  %add.ptr4 = getelementptr inbounds double, double* %8, i32 %add3
  store double* %add.ptr4, double** %p2, align 4
  %12 = load double*, double** %p1, align 4
  %13 = load double, double* %12, align 8
  store double %13, double* %tmp, align 8
  %14 = load double*, double** %p2, align 4
  %15 = load double, double* %14, align 8
  %16 = load double*, double** %p1, align 4
  store double %15, double* %16, align 8
  %17 = load double, double* %tmp, align 8
  %18 = load double*, double** %p2, align 4
  store double %17, double* %18, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %19 = load i32, i32* %i, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %20 = load double*, double** %b.addr, align 4
  %21 = load i32, i32* %r1.addr, align 4
  %arrayidx = getelementptr inbounds double, double* %20, i32 %21
  %22 = load double, double* %arrayidx, align 8
  store double %22, double* %tmp, align 8
  %23 = load double*, double** %b.addr, align 4
  %24 = load i32, i32* %r2.addr, align 4
  %arrayidx5 = getelementptr inbounds double, double* %23, i32 %24
  %25 = load double, double* %arrayidx5, align 8
  %26 = load double*, double** %b.addr, align 4
  %27 = load i32, i32* %r1.addr, align 4
  %arrayidx6 = getelementptr inbounds double, double* %26, i32 %27
  store double %25, double* %arrayidx6, align 8
  %28 = load double, double* %tmp, align 8
  %29 = load double*, double** %b.addr, align 4
  %30 = load i32, i32* %r2.addr, align 4
  %arrayidx7 = getelementptr inbounds double, double* %29, i32 %30
  store double %28, double* %arrayidx7, align 8
  br label %return

return:                                           ; preds = %for.end, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @gauss_eliminate(double* %a, double* %b, double* %x, i32 %n) #0 {
entry:
  %a.addr = alloca double*, align 4
  %b.addr = alloca double*, align 4
  %x.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %col = alloca i32, align 4
  %row = alloca i32, align 4
  %max_row = alloca i32, align 4
  %dia = alloca i32, align 4
  %max = alloca double, align 8
  %tmp = alloca double, align 8
  store double* %a, double** %a.addr, align 4
  store double* %b, double** %b.addr, align 4
  store double* %x, double** %x.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %dia, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc42, %entry
  %0 = load i32, i32* %dia, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end44

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %dia, align 4
  store i32 %2, i32* %max_row, align 4
  %3 = load double*, double** %a.addr, align 4
  %4 = load i32, i32* %dia, align 4
  %5 = load i32, i32* %n.addr, align 4
  %mul = mul nsw i32 %4, %5
  %6 = load i32, i32* %dia, align 4
  %add = add nsw i32 %mul, %6
  %add.ptr = getelementptr inbounds double, double* %3, i32 %add
  %7 = load double, double* %add.ptr, align 8
  store double %7, double* %max, align 8
  %8 = load i32, i32* %dia, align 4
  %add1 = add nsw i32 %8, 1
  store i32 %add1, i32* %row, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %for.body
  %9 = load i32, i32* %row, align 4
  %10 = load i32, i32* %n.addr, align 4
  %cmp3 = icmp slt i32 %9, %10
  br i1 %cmp3, label %for.body4, label %for.end

for.body4:                                        ; preds = %for.cond2
  %11 = load double*, double** %a.addr, align 4
  %12 = load i32, i32* %row, align 4
  %13 = load i32, i32* %n.addr, align 4
  %mul5 = mul nsw i32 %12, %13
  %14 = load i32, i32* %dia, align 4
  %add6 = add nsw i32 %mul5, %14
  %add.ptr7 = getelementptr inbounds double, double* %11, i32 %add6
  %15 = load double, double* %add.ptr7, align 8
  %16 = call double @llvm.fabs.f64(double %15)
  store double %16, double* %tmp, align 8
  %17 = load double, double* %max, align 8
  %cmp8 = fcmp ogt double %16, %17
  br i1 %cmp8, label %if.then, label %if.end

if.then:                                          ; preds = %for.body4
  %18 = load i32, i32* %row, align 4
  store i32 %18, i32* %max_row, align 4
  %19 = load double, double* %tmp, align 8
  store double %19, double* %max, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body4
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %20 = load i32, i32* %row, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %row, align 4
  br label %for.cond2

for.end:                                          ; preds = %for.cond2
  %21 = load double*, double** %a.addr, align 4
  %22 = load double*, double** %b.addr, align 4
  %23 = load i32, i32* %dia, align 4
  %24 = load i32, i32* %max_row, align 4
  %25 = load i32, i32* %n.addr, align 4
  call void @swap_row(double* %21, double* %22, i32 %23, i32 %24, i32 %25)
  %26 = load i32, i32* %dia, align 4
  %add9 = add nsw i32 %26, 1
  store i32 %add9, i32* %row, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc39, %for.end
  %27 = load i32, i32* %row, align 4
  %28 = load i32, i32* %n.addr, align 4
  %cmp11 = icmp slt i32 %27, %28
  br i1 %cmp11, label %for.body12, label %for.end41

for.body12:                                       ; preds = %for.cond10
  %29 = load double*, double** %a.addr, align 4
  %30 = load i32, i32* %row, align 4
  %31 = load i32, i32* %n.addr, align 4
  %mul13 = mul nsw i32 %30, %31
  %32 = load i32, i32* %dia, align 4
  %add14 = add nsw i32 %mul13, %32
  %add.ptr15 = getelementptr inbounds double, double* %29, i32 %add14
  %33 = load double, double* %add.ptr15, align 8
  %34 = load double*, double** %a.addr, align 4
  %35 = load i32, i32* %dia, align 4
  %36 = load i32, i32* %n.addr, align 4
  %mul16 = mul nsw i32 %35, %36
  %37 = load i32, i32* %dia, align 4
  %add17 = add nsw i32 %mul16, %37
  %add.ptr18 = getelementptr inbounds double, double* %34, i32 %add17
  %38 = load double, double* %add.ptr18, align 8
  %div = fdiv double %33, %38
  store double %div, double* %tmp, align 8
  %39 = load i32, i32* %dia, align 4
  %add19 = add nsw i32 %39, 1
  store i32 %add19, i32* %col, align 4
  br label %for.cond20

for.cond20:                                       ; preds = %for.inc30, %for.body12
  %40 = load i32, i32* %col, align 4
  %41 = load i32, i32* %n.addr, align 4
  %cmp21 = icmp slt i32 %40, %41
  br i1 %cmp21, label %for.body22, label %for.end32

for.body22:                                       ; preds = %for.cond20
  %42 = load double, double* %tmp, align 8
  %43 = load double*, double** %a.addr, align 4
  %44 = load i32, i32* %dia, align 4
  %45 = load i32, i32* %n.addr, align 4
  %mul23 = mul nsw i32 %44, %45
  %46 = load i32, i32* %col, align 4
  %add24 = add nsw i32 %mul23, %46
  %add.ptr25 = getelementptr inbounds double, double* %43, i32 %add24
  %47 = load double, double* %add.ptr25, align 8
  %mul26 = fmul double %42, %47
  %48 = load double*, double** %a.addr, align 4
  %49 = load i32, i32* %row, align 4
  %50 = load i32, i32* %n.addr, align 4
  %mul27 = mul nsw i32 %49, %50
  %51 = load i32, i32* %col, align 4
  %add28 = add nsw i32 %mul27, %51
  %add.ptr29 = getelementptr inbounds double, double* %48, i32 %add28
  %52 = load double, double* %add.ptr29, align 8
  %sub = fsub double %52, %mul26
  store double %sub, double* %add.ptr29, align 8
  br label %for.inc30

for.inc30:                                        ; preds = %for.body22
  %53 = load i32, i32* %col, align 4
  %inc31 = add nsw i32 %53, 1
  store i32 %inc31, i32* %col, align 4
  br label %for.cond20

for.end32:                                        ; preds = %for.cond20
  %54 = load double*, double** %a.addr, align 4
  %55 = load i32, i32* %row, align 4
  %56 = load i32, i32* %n.addr, align 4
  %mul33 = mul nsw i32 %55, %56
  %57 = load i32, i32* %dia, align 4
  %add34 = add nsw i32 %mul33, %57
  %add.ptr35 = getelementptr inbounds double, double* %54, i32 %add34
  store double 0.000000e+00, double* %add.ptr35, align 8
  %58 = load double, double* %tmp, align 8
  %59 = load double*, double** %b.addr, align 4
  %60 = load i32, i32* %dia, align 4
  %arrayidx = getelementptr inbounds double, double* %59, i32 %60
  %61 = load double, double* %arrayidx, align 8
  %mul36 = fmul double %58, %61
  %62 = load double*, double** %b.addr, align 4
  %63 = load i32, i32* %row, align 4
  %arrayidx37 = getelementptr inbounds double, double* %62, i32 %63
  %64 = load double, double* %arrayidx37, align 8
  %sub38 = fsub double %64, %mul36
  store double %sub38, double* %arrayidx37, align 8
  br label %for.inc39

for.inc39:                                        ; preds = %for.end32
  %65 = load i32, i32* %row, align 4
  %inc40 = add nsw i32 %65, 1
  store i32 %inc40, i32* %row, align 4
  br label %for.cond10

for.end41:                                        ; preds = %for.cond10
  br label %for.inc42

for.inc42:                                        ; preds = %for.end41
  %66 = load i32, i32* %dia, align 4
  %inc43 = add nsw i32 %66, 1
  store i32 %inc43, i32* %dia, align 4
  br label %for.cond

for.end44:                                        ; preds = %for.cond
  %67 = load i32, i32* %n.addr, align 4
  %sub45 = sub nsw i32 %67, 1
  store i32 %sub45, i32* %row, align 4
  br label %for.cond46

for.cond46:                                       ; preds = %for.inc67, %for.end44
  %68 = load i32, i32* %row, align 4
  %cmp47 = icmp sge i32 %68, 0
  br i1 %cmp47, label %for.body48, label %for.end69

for.body48:                                       ; preds = %for.cond46
  %69 = load double*, double** %b.addr, align 4
  %70 = load i32, i32* %row, align 4
  %arrayidx49 = getelementptr inbounds double, double* %69, i32 %70
  %71 = load double, double* %arrayidx49, align 8
  store double %71, double* %tmp, align 8
  %72 = load i32, i32* %n.addr, align 4
  %sub50 = sub nsw i32 %72, 1
  store i32 %sub50, i32* %j, align 4
  br label %for.cond51

for.cond51:                                       ; preds = %for.inc60, %for.body48
  %73 = load i32, i32* %j, align 4
  %74 = load i32, i32* %row, align 4
  %cmp52 = icmp sgt i32 %73, %74
  br i1 %cmp52, label %for.body53, label %for.end61

for.body53:                                       ; preds = %for.cond51
  %75 = load double*, double** %x.addr, align 4
  %76 = load i32, i32* %j, align 4
  %arrayidx54 = getelementptr inbounds double, double* %75, i32 %76
  %77 = load double, double* %arrayidx54, align 8
  %78 = load double*, double** %a.addr, align 4
  %79 = load i32, i32* %row, align 4
  %80 = load i32, i32* %n.addr, align 4
  %mul55 = mul nsw i32 %79, %80
  %81 = load i32, i32* %j, align 4
  %add56 = add nsw i32 %mul55, %81
  %add.ptr57 = getelementptr inbounds double, double* %78, i32 %add56
  %82 = load double, double* %add.ptr57, align 8
  %mul58 = fmul double %77, %82
  %83 = load double, double* %tmp, align 8
  %sub59 = fsub double %83, %mul58
  store double %sub59, double* %tmp, align 8
  br label %for.inc60

for.inc60:                                        ; preds = %for.body53
  %84 = load i32, i32* %j, align 4
  %dec = add nsw i32 %84, -1
  store i32 %dec, i32* %j, align 4
  br label %for.cond51

for.end61:                                        ; preds = %for.cond51
  %85 = load double, double* %tmp, align 8
  %86 = load double*, double** %a.addr, align 4
  %87 = load i32, i32* %row, align 4
  %88 = load i32, i32* %n.addr, align 4
  %mul62 = mul nsw i32 %87, %88
  %89 = load i32, i32* %row, align 4
  %add63 = add nsw i32 %mul62, %89
  %add.ptr64 = getelementptr inbounds double, double* %86, i32 %add63
  %90 = load double, double* %add.ptr64, align 8
  %div65 = fdiv double %85, %90
  %91 = load double*, double** %x.addr, align 4
  %92 = load i32, i32* %row, align 4
  %arrayidx66 = getelementptr inbounds double, double* %91, i32 %92
  store double %div65, double* %arrayidx66, align 8
  br label %for.inc67

for.inc67:                                        ; preds = %for.end61
  %93 = load i32, i32* %row, align 4
  %dec68 = add nsw i32 %93, -1
  store i32 %dec68, i32* %row, align 4
  br label %for.cond46

for.end69:                                        ; preds = %for.cond46
  ret void
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %a = alloca [36 x double], align 16
  %b = alloca [6 x double], align 16
  %x = alloca [6 x double], align 16
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [36 x double]* %a to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([36 x double]* @__const.main.a to i8*), i32 288, i1 false)
  %1 = bitcast [6 x double]* %b to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %1, i8 0, i32 48, i1 false)
  %2 = bitcast i8* %1 to [6 x double]*
  %3 = getelementptr inbounds [6 x double], [6 x double]* %2, i32 0, i32 0
  store double -1.000000e-02, double* %3, align 16
  %4 = getelementptr inbounds [6 x double], [6 x double]* %2, i32 0, i32 1
  store double 6.100000e-01, double* %4, align 8
  %5 = getelementptr inbounds [6 x double], [6 x double]* %2, i32 0, i32 2
  store double 9.100000e-01, double* %5, align 16
  %6 = getelementptr inbounds [6 x double], [6 x double]* %2, i32 0, i32 3
  store double 0x3FEFAE147AE147AE, double* %6, align 8
  %7 = getelementptr inbounds [6 x double], [6 x double]* %2, i32 0, i32 4
  store double 6.000000e-01, double* %7, align 16
  %8 = getelementptr inbounds [6 x double], [6 x double]* %2, i32 0, i32 5
  store double 2.000000e-02, double* %8, align 8
  %arraydecay = getelementptr inbounds [36 x double], [36 x double]* %a, i32 0, i32 0
  %arraydecay1 = getelementptr inbounds [6 x double], [6 x double]* %b, i32 0, i32 0
  %arraydecay2 = getelementptr inbounds [6 x double], [6 x double]* %x, i32 0, i32 0
  call void @gauss_eliminate(double* %arraydecay, double* %arraydecay1, double* %arraydecay2, i32 6)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %9 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %9, 6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %10 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [6 x double], [6 x double]* %x, i32 0, i32 %10
  %11 = load double, double* %arrayidx, align 8
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), double %11)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %i, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #3

declare i32 @printf(i8* %0, ...) #4

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { argmemonly nounwind willreturn writeonly }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %dia, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %dia, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %dia, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %4, %5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %dia, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %mul, %6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = addnsw %0, %3
infer %4

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %dia, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add1 = add nsw i32 %8, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %row, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp3 = icmp slt i32 %9, %10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %row, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul5 = mul nsw i32 %12, %13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %dia, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add6 = add nsw i32 %mul5, %14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = addnsw %0, %3
infer %4

; *****
; For LLVM instruction:
;  %cmp8 = fcmp ogt double %16, %17
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %row, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %row, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %20, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %dia, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %max_row, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %dia, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add9 = add nsw i32 %26, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %row, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp11 = icmp slt i32 %27, %28
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %row, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul13 = mul nsw i32 %30, %31
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %dia, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add14 = add nsw i32 %mul13, %32
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = addnsw %0, %3
infer %4

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %dia, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul16 = mul nsw i32 %35, %36
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %dia, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add17 = add nsw i32 %mul16, %37
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = addnsw %0, %3
infer %4

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %dia, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add19 = add nsw i32 %39, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %40 = load i32, i32* %col, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %41 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp21 = icmp slt i32 %40, %41
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %44 = load i32, i32* %dia, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %45 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul23 = mul nsw i32 %44, %45
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %46 = load i32, i32* %col, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add24 = add nsw i32 %mul23, %46
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = addnsw %0, %3
infer %4

; *****
; For LLVM instruction:
;  %49 = load i32, i32* %row, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %50 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul27 = mul nsw i32 %49, %50
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %51 = load i32, i32* %col, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add28 = add nsw i32 %mul27, %51
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = addnsw %0, %3
infer %4

; *****
; For LLVM instruction:
;  %53 = load i32, i32* %col, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc31 = add nsw i32 %53, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %55 = load i32, i32* %row, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %56 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul33 = mul nsw i32 %55, %56
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %57 = load i32, i32* %dia, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add34 = add nsw i32 %mul33, %57
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = addnsw %0, %3
infer %4

; *****
; For LLVM instruction:
;  %60 = load i32, i32* %dia, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %63 = load i32, i32* %row, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %65 = load i32, i32* %row, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc40 = add nsw i32 %65, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %66 = load i32, i32* %dia, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc43 = add nsw i32 %66, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %67 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub45 = sub nsw i32 %67, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %68 = load i32, i32* %row, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp47 = icmp sge i32 %68, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %70 = load i32, i32* %row, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %72 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub50 = sub nsw i32 %72, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %73 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %74 = load i32, i32* %row, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp52 = icmp sgt i32 %73, %74
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %76 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %79 = load i32, i32* %row, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %80 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul55 = mul nsw i32 %79, %80
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %81 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add56 = add nsw i32 %mul55, %81
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = addnsw %0, %3
infer %4

; *****
; For LLVM instruction:
;  %84 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec = add nsw i32 %84, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %87 = load i32, i32* %row, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %88 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul62 = mul nsw i32 %87, %88
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %89 = load i32, i32* %row, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add63 = add nsw i32 %mul62, %89
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = addnsw %0, %3
infer %4

; *****
; For LLVM instruction:
;  %92 = load i32, i32* %row, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %93 = load i32, i32* %row, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec68 = add nsw i32 %93, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for gauss_eliminate()

; entering Souper's runOnFunction() for main()

; ModuleID = './Gaussian_elimination.c.bc'
source_filename = "./Gaussian_elimination.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@__const.main.a = private unnamed_addr constant [36 x double] [double 1.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 1.000000e+00, double 6.300000e-01, double 3.900000e-01, double 2.500000e-01, double 1.600000e-01, double 1.000000e-01, double 1.000000e+00, double 1.260000e+00, double 1.580000e+00, double 1.980000e+00, double 2.490000e+00, double 3.130000e+00, double 1.000000e+00, double 1.880000e+00, double 3.550000e+00, double 6.700000e+00, double 1.262000e+01, double 2.380000e+01, double 1.000000e+00, double 2.510000e+00, double 6.320000e+00, double 1.588000e+01, double 3.990000e+01, double 1.002800e+02, double 1.000000e+00, double 3.140000e+00, double 0x4023BD70A3D70A3D, double 3.101000e+01, double 0x40585A3D70A3D70A, double 3.060200e+02], align 16
@.str = private unnamed_addr constant [4 x i8] c"%g\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @swap_row(double* %a, double* %b, i32 %r1, i32 %r2, i32 %n) #0 {
entry:
  %a.addr = alloca double*, align 4
  %b.addr = alloca double*, align 4
  %r1.addr = alloca i32, align 4
  %r2.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %tmp = alloca double, align 8
  %p1 = alloca double*, align 4
  %p2 = alloca double*, align 4
  %i = alloca i32, align 4
  store double* %a, double** %a.addr, align 4
  store double* %b, double** %b.addr, align 4
  store i32 %r1, i32* %r1.addr, align 4
  store i32 %r2, i32* %r2.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %r1.addr, align 4
  %1 = load i32, i32* %r2.addr, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %n.addr, align 4
  %cmp1 = icmp slt i32 %2, %3
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load double*, double** %a.addr, align 4
  %5 = load i32, i32* %r1.addr, align 4
  %6 = load i32, i32* %n.addr, align 4
  %mul = mul nsw i32 %5, %6
  %7 = load i32, i32* %i, align 4
  %add = add nsw i32 %mul, %7
  %add.ptr = getelementptr inbounds double, double* %4, i32 %add
  store double* %add.ptr, double** %p1, align 4
  %8 = load double*, double** %a.addr, align 4
  %9 = load i32, i32* %r2.addr, align 4
  %10 = load i32, i32* %n.addr, align 4
  %mul2 = mul nsw i32 %9, %10
  %11 = load i32, i32* %i, align 4
  %add3 = add nsw i32 %mul2, %11
  %add.ptr4 = getelementptr inbounds double, double* %8, i32 %add3
  store double* %add.ptr4, double** %p2, align 4
  %12 = load double*, double** %p1, align 4
  %13 = load double, double* %12, align 8
  store double %13, double* %tmp, align 8
  %14 = load double*, double** %p2, align 4
  %15 = load double, double* %14, align 8
  %16 = load double*, double** %p1, align 4
  store double %15, double* %16, align 8
  %17 = load double, double* %tmp, align 8
  %18 = load double*, double** %p2, align 4
  store double %17, double* %18, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %19 = load i32, i32* %i, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %20 = load double*, double** %b.addr, align 4
  %21 = load i32, i32* %r1.addr, align 4
  %arrayidx = getelementptr inbounds double, double* %20, i32 %21
  %22 = load double, double* %arrayidx, align 8
  store double %22, double* %tmp, align 8
  %23 = load double*, double** %b.addr, align 4
  %24 = load i32, i32* %r2.addr, align 4
  %arrayidx5 = getelementptr inbounds double, double* %23, i32 %24
  %25 = load double, double* %arrayidx5, align 8
  %26 = load double*, double** %b.addr, align 4
  %27 = load i32, i32* %r1.addr, align 4
  %arrayidx6 = getelementptr inbounds double, double* %26, i32 %27
  store double %25, double* %arrayidx6, align 8
  %28 = load double, double* %tmp, align 8
  %29 = load double*, double** %b.addr, align 4
  %30 = load i32, i32* %r2.addr, align 4
  %arrayidx7 = getelementptr inbounds double, double* %29, i32 %30
  store double %28, double* %arrayidx7, align 8
  br label %return

return:                                           ; preds = %for.end, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @gauss_eliminate(double* %a, double* %b, double* %x, i32 %n) #0 {
entry:
  %a.addr = alloca double*, align 4
  %b.addr = alloca double*, align 4
  %x.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %col = alloca i32, align 4
  %row = alloca i32, align 4
  %max_row = alloca i32, align 4
  %dia = alloca i32, align 4
  %max = alloca double, align 8
  %tmp = alloca double, align 8
  store double* %a, double** %a.addr, align 4
  store double* %b, double** %b.addr, align 4
  store double* %x, double** %x.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %dia, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc42, %entry
  %0 = load i32, i32* %dia, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end44

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %dia, align 4
  store i32 %2, i32* %max_row, align 4
  %3 = load double*, double** %a.addr, align 4
  %4 = load i32, i32* %dia, align 4
  %5 = load i32, i32* %n.addr, align 4
  %mul = mul nsw i32 %4, %5
  %6 = load i32, i32* %dia, align 4
  %add = add nsw i32 %mul, %6
  %add.ptr = getelementptr inbounds double, double* %3, i32 %add
  %7 = load double, double* %add.ptr, align 8
  store double %7, double* %max, align 8
  %8 = load i32, i32* %dia, align 4
  %add1 = add nsw i32 %8, 1
  store i32 %add1, i32* %row, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %for.body
  %9 = load i32, i32* %row, align 4
  %10 = load i32, i32* %n.addr, align 4
  %cmp3 = icmp slt i32 %9, %10
  br i1 %cmp3, label %for.body4, label %for.end

for.body4:                                        ; preds = %for.cond2
  %11 = load double*, double** %a.addr, align 4
  %12 = load i32, i32* %row, align 4
  %13 = load i32, i32* %n.addr, align 4
  %mul5 = mul nsw i32 %12, %13
  %14 = load i32, i32* %dia, align 4
  %add6 = add nsw i32 %mul5, %14
  %add.ptr7 = getelementptr inbounds double, double* %11, i32 %add6
  %15 = load double, double* %add.ptr7, align 8
  %16 = call double @llvm.fabs.f64(double %15)
  store double %16, double* %tmp, align 8
  %17 = load double, double* %max, align 8
  %cmp8 = fcmp ogt double %16, %17
  br i1 %cmp8, label %if.then, label %if.end

if.then:                                          ; preds = %for.body4
  %18 = load i32, i32* %row, align 4
  store i32 %18, i32* %max_row, align 4
  %19 = load double, double* %tmp, align 8
  store double %19, double* %max, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body4
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %20 = load i32, i32* %row, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %row, align 4
  br label %for.cond2

for.end:                                          ; preds = %for.cond2
  %21 = load double*, double** %a.addr, align 4
  %22 = load double*, double** %b.addr, align 4
  %23 = load i32, i32* %dia, align 4
  %24 = load i32, i32* %max_row, align 4
  %25 = load i32, i32* %n.addr, align 4
  call void @swap_row(double* %21, double* %22, i32 %23, i32 %24, i32 %25)
  %26 = load i32, i32* %dia, align 4
  %add9 = add nsw i32 %26, 1
  store i32 %add9, i32* %row, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc39, %for.end
  %27 = load i32, i32* %row, align 4
  %28 = load i32, i32* %n.addr, align 4
  %cmp11 = icmp slt i32 %27, %28
  br i1 %cmp11, label %for.body12, label %for.end41

for.body12:                                       ; preds = %for.cond10
  %29 = load double*, double** %a.addr, align 4
  %30 = load i32, i32* %row, align 4
  %31 = load i32, i32* %n.addr, align 4
  %mul13 = mul nsw i32 %30, %31
  %32 = load i32, i32* %dia, align 4
  %add14 = add nsw i32 %mul13, %32
  %add.ptr15 = getelementptr inbounds double, double* %29, i32 %add14
  %33 = load double, double* %add.ptr15, align 8
  %34 = load double*, double** %a.addr, align 4
  %35 = load i32, i32* %dia, align 4
  %36 = load i32, i32* %n.addr, align 4
  %mul16 = mul nsw i32 %35, %36
  %37 = load i32, i32* %dia, align 4
  %add17 = add nsw i32 %mul16, %37
  %add.ptr18 = getelementptr inbounds double, double* %34, i32 %add17
  %38 = load double, double* %add.ptr18, align 8
  %div = fdiv double %33, %38
  store double %div, double* %tmp, align 8
  %39 = load i32, i32* %dia, align 4
  %add19 = add nsw i32 %39, 1
  store i32 %add19, i32* %col, align 4
  br label %for.cond20

for.cond20:                                       ; preds = %for.inc30, %for.body12
  %40 = load i32, i32* %col, align 4
  %41 = load i32, i32* %n.addr, align 4
  %cmp21 = icmp slt i32 %40, %41
  br i1 %cmp21, label %for.body22, label %for.end32

for.body22:                                       ; preds = %for.cond20
  %42 = load double, double* %tmp, align 8
  %43 = load double*, double** %a.addr, align 4
  %44 = load i32, i32* %dia, align 4
  %45 = load i32, i32* %n.addr, align 4
  %mul23 = mul nsw i32 %44, %45
  %46 = load i32, i32* %col, align 4
  %add24 = add nsw i32 %mul23, %46
  %add.ptr25 = getelementptr inbounds double, double* %43, i32 %add24
  %47 = load double, double* %add.ptr25, align 8
  %mul26 = fmul double %42, %47
  %48 = load double*, double** %a.addr, align 4
  %49 = load i32, i32* %row, align 4
  %50 = load i32, i32* %n.addr, align 4
  %mul27 = mul nsw i32 %49, %50
  %51 = load i32, i32* %col, align 4
  %add28 = add nsw i32 %mul27, %51
  %add.ptr29 = getelementptr inbounds double, double* %48, i32 %add28
  %52 = load double, double* %add.ptr29, align 8
  %sub = fsub double %52, %mul26
  store double %sub, double* %add.ptr29, align 8
  br label %for.inc30

for.inc30:                                        ; preds = %for.body22
  %53 = load i32, i32* %col, align 4
  %inc31 = add nsw i32 %53, 1
  store i32 %inc31, i32* %col, align 4
  br label %for.cond20

for.end32:                                        ; preds = %for.cond20
  %54 = load double*, double** %a.addr, align 4
  %55 = load i32, i32* %row, align 4
  %56 = load i32, i32* %n.addr, align 4
  %mul33 = mul nsw i32 %55, %56
  %57 = load i32, i32* %dia, align 4
  %add34 = add nsw i32 %mul33, %57
  %add.ptr35 = getelementptr inbounds double, double* %54, i32 %add34
  store double 0.000000e+00, double* %add.ptr35, align 8
  %58 = load double, double* %tmp, align 8
  %59 = load double*, double** %b.addr, align 4
  %60 = load i32, i32* %dia, align 4
  %arrayidx = getelementptr inbounds double, double* %59, i32 %60
  %61 = load double, double* %arrayidx, align 8
  %mul36 = fmul double %58, %61
  %62 = load double*, double** %b.addr, align 4
  %63 = load i32, i32* %row, align 4
  %arrayidx37 = getelementptr inbounds double, double* %62, i32 %63
  %64 = load double, double* %arrayidx37, align 8
  %sub38 = fsub double %64, %mul36
  store double %sub38, double* %arrayidx37, align 8
  br label %for.inc39

for.inc39:                                        ; preds = %for.end32
  %65 = load i32, i32* %row, align 4
  %inc40 = add nsw i32 %65, 1
  store i32 %inc40, i32* %row, align 4
  br label %for.cond10

for.end41:                                        ; preds = %for.cond10
  br label %for.inc42

for.inc42:                                        ; preds = %for.end41
  %66 = load i32, i32* %dia, align 4
  %inc43 = add nsw i32 %66, 1
  store i32 %inc43, i32* %dia, align 4
  br label %for.cond

for.end44:                                        ; preds = %for.cond
  %67 = load i32, i32* %n.addr, align 4
  %sub45 = sub nsw i32 %67, 1
  store i32 %sub45, i32* %row, align 4
  br label %for.cond46

for.cond46:                                       ; preds = %for.inc67, %for.end44
  %68 = load i32, i32* %row, align 4
  %cmp47 = icmp sge i32 %68, 0
  br i1 %cmp47, label %for.body48, label %for.end69

for.body48:                                       ; preds = %for.cond46
  %69 = load double*, double** %b.addr, align 4
  %70 = load i32, i32* %row, align 4
  %arrayidx49 = getelementptr inbounds double, double* %69, i32 %70
  %71 = load double, double* %arrayidx49, align 8
  store double %71, double* %tmp, align 8
  %72 = load i32, i32* %n.addr, align 4
  %sub50 = sub nsw i32 %72, 1
  store i32 %sub50, i32* %j, align 4
  br label %for.cond51

for.cond51:                                       ; preds = %for.inc60, %for.body48
  %73 = load i32, i32* %j, align 4
  %74 = load i32, i32* %row, align 4
  %cmp52 = icmp sgt i32 %73, %74
  br i1 %cmp52, label %for.body53, label %for.end61

for.body53:                                       ; preds = %for.cond51
  %75 = load double*, double** %x.addr, align 4
  %76 = load i32, i32* %j, align 4
  %arrayidx54 = getelementptr inbounds double, double* %75, i32 %76
  %77 = load double, double* %arrayidx54, align 8
  %78 = load double*, double** %a.addr, align 4
  %79 = load i32, i32* %row, align 4
  %80 = load i32, i32* %n.addr, align 4
  %mul55 = mul nsw i32 %79, %80
  %81 = load i32, i32* %j, align 4
  %add56 = add nsw i32 %mul55, %81
  %add.ptr57 = getelementptr inbounds double, double* %78, i32 %add56
  %82 = load double, double* %add.ptr57, align 8
  %mul58 = fmul double %77, %82
  %83 = load double, double* %tmp, align 8
  %sub59 = fsub double %83, %mul58
  store double %sub59, double* %tmp, align 8
  br label %for.inc60

for.inc60:                                        ; preds = %for.body53
  %84 = load i32, i32* %j, align 4
  %dec = add nsw i32 %84, -1
  store i32 %dec, i32* %j, align 4
  br label %for.cond51

for.end61:                                        ; preds = %for.cond51
  %85 = load double, double* %tmp, align 8
  %86 = load double*, double** %a.addr, align 4
  %87 = load i32, i32* %row, align 4
  %88 = load i32, i32* %n.addr, align 4
  %mul62 = mul nsw i32 %87, %88
  %89 = load i32, i32* %row, align 4
  %add63 = add nsw i32 %mul62, %89
  %add.ptr64 = getelementptr inbounds double, double* %86, i32 %add63
  %90 = load double, double* %add.ptr64, align 8
  %div65 = fdiv double %85, %90
  %91 = load double*, double** %x.addr, align 4
  %92 = load i32, i32* %row, align 4
  %arrayidx66 = getelementptr inbounds double, double* %91, i32 %92
  store double %div65, double* %arrayidx66, align 8
  br label %for.inc67

for.inc67:                                        ; preds = %for.end61
  %93 = load i32, i32* %row, align 4
  %dec68 = add nsw i32 %93, -1
  store i32 %dec68, i32* %row, align 4
  br label %for.cond46

for.end69:                                        ; preds = %for.cond46
  ret void
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %a = alloca [36 x double], align 16
  %b = alloca [6 x double], align 16
  %x = alloca [6 x double], align 16
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [36 x double]* %a to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([36 x double]* @__const.main.a to i8*), i32 288, i1 false)
  %1 = bitcast [6 x double]* %b to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %1, i8 0, i32 48, i1 false)
  %2 = bitcast i8* %1 to [6 x double]*
  %3 = getelementptr inbounds [6 x double], [6 x double]* %2, i32 0, i32 0
  store double -1.000000e-02, double* %3, align 16
  %4 = getelementptr inbounds [6 x double], [6 x double]* %2, i32 0, i32 1
  store double 6.100000e-01, double* %4, align 8
  %5 = getelementptr inbounds [6 x double], [6 x double]* %2, i32 0, i32 2
  store double 9.100000e-01, double* %5, align 16
  %6 = getelementptr inbounds [6 x double], [6 x double]* %2, i32 0, i32 3
  store double 0x3FEFAE147AE147AE, double* %6, align 8
  %7 = getelementptr inbounds [6 x double], [6 x double]* %2, i32 0, i32 4
  store double 6.000000e-01, double* %7, align 16
  %8 = getelementptr inbounds [6 x double], [6 x double]* %2, i32 0, i32 5
  store double 2.000000e-02, double* %8, align 8
  %arraydecay = getelementptr inbounds [36 x double], [36 x double]* %a, i32 0, i32 0
  %arraydecay1 = getelementptr inbounds [6 x double], [6 x double]* %b, i32 0, i32 0
  %arraydecay2 = getelementptr inbounds [6 x double], [6 x double]* %x, i32 0, i32 0
  call void @gauss_eliminate(double* %arraydecay, double* %arraydecay1, double* %arraydecay2, i32 6)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %9 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %9, 6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %10 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [6 x double], [6 x double]* %x, i32 0, i32 %10
  %11 = load double, double* %arrayidx, align 8
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), double %11)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %i, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #3

declare i32 @printf(i8* %0, ...) #4

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { argmemonly nounwind willreturn writeonly }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %9, 6
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 6:i32
infer %1

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %12, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 6:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
