
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for number_of_digits()

; ModuleID = './JortSort.c.bc'
source_filename = "./JortSort.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [70 x i8] c"Did you forgot to turn on your brain?! This array is already sorted!\0A\00", align 1
@.str.1 = private unnamed_addr constant [57 x i8] c"Am I really supposed to sort this? Sort it by yourself!\0A\00", align 1
@.str.2 = private unnamed_addr constant [47 x i8] c"Am I really supposed to sort this? Bhahahaha!\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden i32 @number_of_digits(i32 %x) #0 {
entry:
  %x.addr = alloca i32, align 4
  %NumberOfDigits = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 0, i32* %NumberOfDigits, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %x.addr, align 4
  %cmp = icmp ne i32 %0, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %x.addr, align 4
  %div = sdiv i32 %1, 10
  store i32 %div, i32* %x.addr, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %NumberOfDigits, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %NumberOfDigits, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %3 = load i32, i32* %NumberOfDigits, align 4
  ret i32 %3
}

; Function Attrs: noinline nounwind optnone
define hidden i32* @convert_array(i8* %array, i32 %NumberOfElements) #0 {
entry:
  %array.addr = alloca i8*, align 4
  %NumberOfElements.addr = alloca i32, align 4
  %convertedArray = alloca i32*, align 4
  %originalElement = alloca i32, align 4
  %convertedElement = alloca i32, align 4
  store i8* %array, i8** %array.addr, align 4
  store i32 %NumberOfElements, i32* %NumberOfElements.addr, align 4
  %0 = load i32, i32* %NumberOfElements.addr, align 4
  %mul = mul i32 %0, 4
  %call = call noalias i8* @malloc(i32 %mul)
  %1 = bitcast i8* %call to i32*
  store i32* %1, i32** %convertedArray, align 4
  store i32 0, i32* %convertedElement, align 4
  store i32 0, i32* %originalElement, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %convertedElement, align 4
  %3 = load i32, i32* %NumberOfElements.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i8*, i8** %array.addr, align 4
  %5 = load i32, i32* %originalElement, align 4
  %arrayidx = getelementptr inbounds i8, i8* %4, i32 %5
  %call1 = call i32 @atoi(i8* %arrayidx)
  %6 = load i32*, i32** %convertedArray, align 4
  %7 = load i32, i32* %convertedElement, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %6, i32 %7
  store i32 %call1, i32* %arrayidx2, align 4
  %8 = load i32*, i32** %convertedArray, align 4
  %9 = load i32, i32* %convertedElement, align 4
  %arrayidx3 = getelementptr inbounds i32, i32* %8, i32 %9
  %10 = load i32, i32* %arrayidx3, align 4
  %call4 = call i32 @number_of_digits(i32 %10)
  %add = add nsw i32 %call4, 1
  %11 = load i32, i32* %originalElement, align 4
  %add5 = add nsw i32 %11, %add
  store i32 %add5, i32* %originalElement, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %convertedElement, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %convertedElement, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %13 = load i32*, i32** %convertedArray, align 4
  ret i32* %13
}

declare noalias i8* @malloc(i32 %0) #1

declare i32 @atoi(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @isSorted(i32* %array, i32 %numberOfElements) #0 {
entry:
  %array.addr = alloca i32*, align 4
  %numberOfElements.addr = alloca i32, align 4
  %sorted = alloca i32, align 4
  %counter = alloca i32, align 4
  store i32* %array, i32** %array.addr, align 4
  store i32 %numberOfElements, i32* %numberOfElements.addr, align 4
  store i32 1, i32* %sorted, align 4
  store i32 0, i32* %counter, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %counter, align 4
  %1 = load i32, i32* %numberOfElements.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %counter, align 4
  %cmp1 = icmp ne i32 %2, 0
  br i1 %cmp1, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %3 = load i32*, i32** %array.addr, align 4
  %4 = load i32, i32* %counter, align 4
  %sub = sub nsw i32 %4, 1
  %arrayidx = getelementptr inbounds i32, i32* %3, i32 %sub
  %5 = load i32, i32* %arrayidx, align 4
  %6 = load i32*, i32** %array.addr, align 4
  %7 = load i32, i32* %counter, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %6, i32 %7
  %8 = load i32, i32* %arrayidx2, align 4
  %cmp3 = icmp sgt i32 %5, %8
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %9 = load i32, i32* %sorted, align 4
  %dec = add nsw i32 %9, -1
  store i32 %dec, i32* %sorted, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %10 = load i32, i32* %counter, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %counter, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %11 = load i32, i32* %sorted, align 4
  ret i32 %11
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %convertedArray = alloca i32*, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  %0 = load i8**, i8*** %argv.addr, align 4
  %add.ptr = getelementptr inbounds i8*, i8** %0, i32 1
  %1 = load i8*, i8** %add.ptr, align 4
  %2 = load i32, i32* %argc.addr, align 4
  %sub = sub nsw i32 %2, 1
  %call = call i32* @convert_array(i8* %1, i32 %sub)
  store i32* %call, i32** %convertedArray, align 4
  %3 = load i32*, i32** %convertedArray, align 4
  %4 = load i32, i32* %argc.addr, align 4
  %sub1 = sub nsw i32 %4, 1
  %call2 = call i32 @isSorted(i32* %3, i32 %sub1)
  %cmp = icmp eq i32 %call2, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str, i32 0, i32 0))
  br label %if.end10

if.else:                                          ; preds = %entry
  %5 = load i32, i32* %argc.addr, align 4
  %sub4 = sub nsw i32 %5, 1
  %cmp5 = icmp sle i32 %sub4, 10
  br i1 %cmp5, label %if.then6, label %if.else8

if.then6:                                         ; preds = %if.else
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.1, i32 0, i32 0))
  br label %if.end

if.else8:                                         ; preds = %if.else
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else8, %if.then6
  br label %if.end10

if.end10:                                         ; preds = %if.end, %if.then
  %6 = load i32*, i32** %convertedArray, align 4
  %7 = bitcast i32* %6 to i8*
  call void @free(i8* %7)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

declare void @free(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %x.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ne i32 %0, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %x.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div = sdiv i32 %1, 10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sdiv %0, 10:i32
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %NumberOfDigits, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %2, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %NumberOfDigits, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sdiv %0, 10:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 134217728
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for number_of_digits()

; entering Souper's runOnFunction() for convert_array()

; ModuleID = './JortSort.c.bc'
source_filename = "./JortSort.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [70 x i8] c"Did you forgot to turn on your brain?! This array is already sorted!\0A\00", align 1
@.str.1 = private unnamed_addr constant [57 x i8] c"Am I really supposed to sort this? Sort it by yourself!\0A\00", align 1
@.str.2 = private unnamed_addr constant [47 x i8] c"Am I really supposed to sort this? Bhahahaha!\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden i32 @number_of_digits(i32 %x) #0 {
entry:
  %x.addr = alloca i32, align 4
  %NumberOfDigits = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 0, i32* %NumberOfDigits, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %x.addr, align 4
  %cmp = icmp ne i32 %0, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %x.addr, align 4
  %div = sdiv i32 %1, 10
  store i32 %div, i32* %x.addr, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %NumberOfDigits, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %NumberOfDigits, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %3 = load i32, i32* %NumberOfDigits, align 4
  ret i32 %3
}

; Function Attrs: noinline nounwind optnone
define hidden i32* @convert_array(i8* %array, i32 %NumberOfElements) #0 {
entry:
  %array.addr = alloca i8*, align 4
  %NumberOfElements.addr = alloca i32, align 4
  %convertedArray = alloca i32*, align 4
  %originalElement = alloca i32, align 4
  %convertedElement = alloca i32, align 4
  store i8* %array, i8** %array.addr, align 4
  store i32 %NumberOfElements, i32* %NumberOfElements.addr, align 4
  %0 = load i32, i32* %NumberOfElements.addr, align 4
  %mul = mul i32 %0, 4
  %call = call noalias i8* @malloc(i32 %mul)
  %1 = bitcast i8* %call to i32*
  store i32* %1, i32** %convertedArray, align 4
  store i32 0, i32* %convertedElement, align 4
  store i32 0, i32* %originalElement, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %convertedElement, align 4
  %3 = load i32, i32* %NumberOfElements.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i8*, i8** %array.addr, align 4
  %5 = load i32, i32* %originalElement, align 4
  %arrayidx = getelementptr inbounds i8, i8* %4, i32 %5
  %call1 = call i32 @atoi(i8* %arrayidx)
  %6 = load i32*, i32** %convertedArray, align 4
  %7 = load i32, i32* %convertedElement, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %6, i32 %7
  store i32 %call1, i32* %arrayidx2, align 4
  %8 = load i32*, i32** %convertedArray, align 4
  %9 = load i32, i32* %convertedElement, align 4
  %arrayidx3 = getelementptr inbounds i32, i32* %8, i32 %9
  %10 = load i32, i32* %arrayidx3, align 4
  %call4 = call i32 @number_of_digits(i32 %10)
  %add = add nsw i32 %call4, 1
  %11 = load i32, i32* %originalElement, align 4
  %add5 = add nsw i32 %11, %add
  store i32 %add5, i32* %originalElement, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %convertedElement, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %convertedElement, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %13 = load i32*, i32** %convertedArray, align 4
  ret i32* %13
}

declare noalias i8* @malloc(i32 %0) #1

declare i32 @atoi(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @isSorted(i32* %array, i32 %numberOfElements) #0 {
entry:
  %array.addr = alloca i32*, align 4
  %numberOfElements.addr = alloca i32, align 4
  %sorted = alloca i32, align 4
  %counter = alloca i32, align 4
  store i32* %array, i32** %array.addr, align 4
  store i32 %numberOfElements, i32* %numberOfElements.addr, align 4
  store i32 1, i32* %sorted, align 4
  store i32 0, i32* %counter, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %counter, align 4
  %1 = load i32, i32* %numberOfElements.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %counter, align 4
  %cmp1 = icmp ne i32 %2, 0
  br i1 %cmp1, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %3 = load i32*, i32** %array.addr, align 4
  %4 = load i32, i32* %counter, align 4
  %sub = sub nsw i32 %4, 1
  %arrayidx = getelementptr inbounds i32, i32* %3, i32 %sub
  %5 = load i32, i32* %arrayidx, align 4
  %6 = load i32*, i32** %array.addr, align 4
  %7 = load i32, i32* %counter, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %6, i32 %7
  %8 = load i32, i32* %arrayidx2, align 4
  %cmp3 = icmp sgt i32 %5, %8
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %9 = load i32, i32* %sorted, align 4
  %dec = add nsw i32 %9, -1
  store i32 %dec, i32* %sorted, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %10 = load i32, i32* %counter, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %counter, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %11 = load i32, i32* %sorted, align 4
  ret i32 %11
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %convertedArray = alloca i32*, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  %0 = load i8**, i8*** %argv.addr, align 4
  %add.ptr = getelementptr inbounds i8*, i8** %0, i32 1
  %1 = load i8*, i8** %add.ptr, align 4
  %2 = load i32, i32* %argc.addr, align 4
  %sub = sub nsw i32 %2, 1
  %call = call i32* @convert_array(i8* %1, i32 %sub)
  store i32* %call, i32** %convertedArray, align 4
  %3 = load i32*, i32** %convertedArray, align 4
  %4 = load i32, i32* %argc.addr, align 4
  %sub1 = sub nsw i32 %4, 1
  %call2 = call i32 @isSorted(i32* %3, i32 %sub1)
  %cmp = icmp eq i32 %call2, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str, i32 0, i32 0))
  br label %if.end10

if.else:                                          ; preds = %entry
  %5 = load i32, i32* %argc.addr, align 4
  %sub4 = sub nsw i32 %5, 1
  %cmp5 = icmp sle i32 %sub4, 10
  br i1 %cmp5, label %if.then6, label %if.else8

if.then6:                                         ; preds = %if.else
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.1, i32 0, i32 0))
  br label %if.end

if.else8:                                         ; preds = %if.else
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else8, %if.then6
  br label %if.end10

if.end10:                                         ; preds = %if.end, %if.then
  %6 = load i32*, i32** %convertedArray, align 4
  %7 = bitcast i32* %6 to i8*
  call void @free(i8* %7)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

declare void @free(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %NumberOfElements.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul i32 %0, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %convertedElement, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %NumberOfElements.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %2, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %originalElement, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call1 = call i32 @atoi(i8* %arrayidx)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %convertedElement, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %convertedElement, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %arrayidx3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call4 = call i32 @number_of_digits(i32 %10)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %call4, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %originalElement, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add5 = add nsw i32 %11, %add
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1
%3:i32 = addnsw %0, %2
infer %3

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %convertedElement, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %12, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1
%3:i32 = addnsw %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1699896465
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = addnsw 1:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for convert_array()

; entering Souper's runOnFunction() for isSorted()

; ModuleID = './JortSort.c.bc'
source_filename = "./JortSort.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [70 x i8] c"Did you forgot to turn on your brain?! This array is already sorted!\0A\00", align 1
@.str.1 = private unnamed_addr constant [57 x i8] c"Am I really supposed to sort this? Sort it by yourself!\0A\00", align 1
@.str.2 = private unnamed_addr constant [47 x i8] c"Am I really supposed to sort this? Bhahahaha!\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden i32 @number_of_digits(i32 %x) #0 {
entry:
  %x.addr = alloca i32, align 4
  %NumberOfDigits = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 0, i32* %NumberOfDigits, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %x.addr, align 4
  %cmp = icmp ne i32 %0, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %x.addr, align 4
  %div = sdiv i32 %1, 10
  store i32 %div, i32* %x.addr, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %NumberOfDigits, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %NumberOfDigits, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %3 = load i32, i32* %NumberOfDigits, align 4
  ret i32 %3
}

; Function Attrs: noinline nounwind optnone
define hidden i32* @convert_array(i8* %array, i32 %NumberOfElements) #0 {
entry:
  %array.addr = alloca i8*, align 4
  %NumberOfElements.addr = alloca i32, align 4
  %convertedArray = alloca i32*, align 4
  %originalElement = alloca i32, align 4
  %convertedElement = alloca i32, align 4
  store i8* %array, i8** %array.addr, align 4
  store i32 %NumberOfElements, i32* %NumberOfElements.addr, align 4
  %0 = load i32, i32* %NumberOfElements.addr, align 4
  %mul = mul i32 %0, 4
  %call = call noalias i8* @malloc(i32 %mul)
  %1 = bitcast i8* %call to i32*
  store i32* %1, i32** %convertedArray, align 4
  store i32 0, i32* %convertedElement, align 4
  store i32 0, i32* %originalElement, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %convertedElement, align 4
  %3 = load i32, i32* %NumberOfElements.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i8*, i8** %array.addr, align 4
  %5 = load i32, i32* %originalElement, align 4
  %arrayidx = getelementptr inbounds i8, i8* %4, i32 %5
  %call1 = call i32 @atoi(i8* %arrayidx)
  %6 = load i32*, i32** %convertedArray, align 4
  %7 = load i32, i32* %convertedElement, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %6, i32 %7
  store i32 %call1, i32* %arrayidx2, align 4
  %8 = load i32*, i32** %convertedArray, align 4
  %9 = load i32, i32* %convertedElement, align 4
  %arrayidx3 = getelementptr inbounds i32, i32* %8, i32 %9
  %10 = load i32, i32* %arrayidx3, align 4
  %call4 = call i32 @number_of_digits(i32 %10)
  %add = add nsw i32 %call4, 1
  %11 = load i32, i32* %originalElement, align 4
  %add5 = add nsw i32 %11, %add
  store i32 %add5, i32* %originalElement, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %convertedElement, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %convertedElement, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %13 = load i32*, i32** %convertedArray, align 4
  ret i32* %13
}

declare noalias i8* @malloc(i32 %0) #1

declare i32 @atoi(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @isSorted(i32* %array, i32 %numberOfElements) #0 {
entry:
  %array.addr = alloca i32*, align 4
  %numberOfElements.addr = alloca i32, align 4
  %sorted = alloca i32, align 4
  %counter = alloca i32, align 4
  store i32* %array, i32** %array.addr, align 4
  store i32 %numberOfElements, i32* %numberOfElements.addr, align 4
  store i32 1, i32* %sorted, align 4
  store i32 0, i32* %counter, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %counter, align 4
  %1 = load i32, i32* %numberOfElements.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %counter, align 4
  %cmp1 = icmp ne i32 %2, 0
  br i1 %cmp1, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %3 = load i32*, i32** %array.addr, align 4
  %4 = load i32, i32* %counter, align 4
  %sub = sub nsw i32 %4, 1
  %arrayidx = getelementptr inbounds i32, i32* %3, i32 %sub
  %5 = load i32, i32* %arrayidx, align 4
  %6 = load i32*, i32** %array.addr, align 4
  %7 = load i32, i32* %counter, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %6, i32 %7
  %8 = load i32, i32* %arrayidx2, align 4
  %cmp3 = icmp sgt i32 %5, %8
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %9 = load i32, i32* %sorted, align 4
  %dec = add nsw i32 %9, -1
  store i32 %dec, i32* %sorted, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %10 = load i32, i32* %counter, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %counter, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %11 = load i32, i32* %sorted, align 4
  ret i32 %11
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %convertedArray = alloca i32*, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  %0 = load i8**, i8*** %argv.addr, align 4
  %add.ptr = getelementptr inbounds i8*, i8** %0, i32 1
  %1 = load i8*, i8** %add.ptr, align 4
  %2 = load i32, i32* %argc.addr, align 4
  %sub = sub nsw i32 %2, 1
  %call = call i32* @convert_array(i8* %1, i32 %sub)
  store i32* %call, i32** %convertedArray, align 4
  %3 = load i32*, i32** %convertedArray, align 4
  %4 = load i32, i32* %argc.addr, align 4
  %sub1 = sub nsw i32 %4, 1
  %call2 = call i32 @isSorted(i32* %3, i32 %sub1)
  %cmp = icmp eq i32 %call2, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str, i32 0, i32 0))
  br label %if.end10

if.else:                                          ; preds = %entry
  %5 = load i32, i32* %argc.addr, align 4
  %sub4 = sub nsw i32 %5, 1
  %cmp5 = icmp sle i32 %sub4, 10
  br i1 %cmp5, label %if.then6, label %if.else8

if.then6:                                         ; preds = %if.else
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.1, i32 0, i32 0))
  br label %if.end

if.else8:                                         ; preds = %if.else
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else8, %if.then6
  br label %if.end10

if.end10:                                         ; preds = %if.end, %if.then
  %6 = load i32*, i32** %convertedArray, align 4
  %7 = bitcast i32* %6 to i8*
  call void @free(i8* %7)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

declare void @free(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %counter, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %numberOfElements.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %counter, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = icmp ne i32 %2, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %counter, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %4, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %counter, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %arrayidx2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp3 = icmp sgt i32 %5, %8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %sorted, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec = add nsw i32 %9, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %counter, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %10, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %sorted, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for isSorted()

; entering Souper's runOnFunction() for __main_argc_argv()

; ModuleID = './JortSort.c.bc'
source_filename = "./JortSort.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [70 x i8] c"Did you forgot to turn on your brain?! This array is already sorted!\0A\00", align 1
@.str.1 = private unnamed_addr constant [57 x i8] c"Am I really supposed to sort this? Sort it by yourself!\0A\00", align 1
@.str.2 = private unnamed_addr constant [47 x i8] c"Am I really supposed to sort this? Bhahahaha!\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden i32 @number_of_digits(i32 %x) #0 {
entry:
  %x.addr = alloca i32, align 4
  %NumberOfDigits = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 0, i32* %NumberOfDigits, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %x.addr, align 4
  %cmp = icmp ne i32 %0, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %x.addr, align 4
  %div = sdiv i32 %1, 10
  store i32 %div, i32* %x.addr, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %NumberOfDigits, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %NumberOfDigits, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %3 = load i32, i32* %NumberOfDigits, align 4
  ret i32 %3
}

; Function Attrs: noinline nounwind optnone
define hidden i32* @convert_array(i8* %array, i32 %NumberOfElements) #0 {
entry:
  %array.addr = alloca i8*, align 4
  %NumberOfElements.addr = alloca i32, align 4
  %convertedArray = alloca i32*, align 4
  %originalElement = alloca i32, align 4
  %convertedElement = alloca i32, align 4
  store i8* %array, i8** %array.addr, align 4
  store i32 %NumberOfElements, i32* %NumberOfElements.addr, align 4
  %0 = load i32, i32* %NumberOfElements.addr, align 4
  %mul = mul i32 %0, 4
  %call = call noalias i8* @malloc(i32 %mul)
  %1 = bitcast i8* %call to i32*
  store i32* %1, i32** %convertedArray, align 4
  store i32 0, i32* %convertedElement, align 4
  store i32 0, i32* %originalElement, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %convertedElement, align 4
  %3 = load i32, i32* %NumberOfElements.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i8*, i8** %array.addr, align 4
  %5 = load i32, i32* %originalElement, align 4
  %arrayidx = getelementptr inbounds i8, i8* %4, i32 %5
  %call1 = call i32 @atoi(i8* %arrayidx)
  %6 = load i32*, i32** %convertedArray, align 4
  %7 = load i32, i32* %convertedElement, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %6, i32 %7
  store i32 %call1, i32* %arrayidx2, align 4
  %8 = load i32*, i32** %convertedArray, align 4
  %9 = load i32, i32* %convertedElement, align 4
  %arrayidx3 = getelementptr inbounds i32, i32* %8, i32 %9
  %10 = load i32, i32* %arrayidx3, align 4
  %call4 = call i32 @number_of_digits(i32 %10)
  %add = add nsw i32 %call4, 1
  %11 = load i32, i32* %originalElement, align 4
  %add5 = add nsw i32 %11, %add
  store i32 %add5, i32* %originalElement, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %convertedElement, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %convertedElement, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %13 = load i32*, i32** %convertedArray, align 4
  ret i32* %13
}

declare noalias i8* @malloc(i32 %0) #1

declare i32 @atoi(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @isSorted(i32* %array, i32 %numberOfElements) #0 {
entry:
  %array.addr = alloca i32*, align 4
  %numberOfElements.addr = alloca i32, align 4
  %sorted = alloca i32, align 4
  %counter = alloca i32, align 4
  store i32* %array, i32** %array.addr, align 4
  store i32 %numberOfElements, i32* %numberOfElements.addr, align 4
  store i32 1, i32* %sorted, align 4
  store i32 0, i32* %counter, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %counter, align 4
  %1 = load i32, i32* %numberOfElements.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %counter, align 4
  %cmp1 = icmp ne i32 %2, 0
  br i1 %cmp1, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %3 = load i32*, i32** %array.addr, align 4
  %4 = load i32, i32* %counter, align 4
  %sub = sub nsw i32 %4, 1
  %arrayidx = getelementptr inbounds i32, i32* %3, i32 %sub
  %5 = load i32, i32* %arrayidx, align 4
  %6 = load i32*, i32** %array.addr, align 4
  %7 = load i32, i32* %counter, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %6, i32 %7
  %8 = load i32, i32* %arrayidx2, align 4
  %cmp3 = icmp sgt i32 %5, %8
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %9 = load i32, i32* %sorted, align 4
  %dec = add nsw i32 %9, -1
  store i32 %dec, i32* %sorted, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %10 = load i32, i32* %counter, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %counter, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %11 = load i32, i32* %sorted, align 4
  ret i32 %11
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %convertedArray = alloca i32*, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  %0 = load i8**, i8*** %argv.addr, align 4
  %add.ptr = getelementptr inbounds i8*, i8** %0, i32 1
  %1 = load i8*, i8** %add.ptr, align 4
  %2 = load i32, i32* %argc.addr, align 4
  %sub = sub nsw i32 %2, 1
  %call = call i32* @convert_array(i8* %1, i32 %sub)
  store i32* %call, i32** %convertedArray, align 4
  %3 = load i32*, i32** %convertedArray, align 4
  %4 = load i32, i32* %argc.addr, align 4
  %sub1 = sub nsw i32 %4, 1
  %call2 = call i32 @isSorted(i32* %3, i32 %sub1)
  %cmp = icmp eq i32 %call2, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str, i32 0, i32 0))
  br label %if.end10

if.else:                                          ; preds = %entry
  %5 = load i32, i32* %argc.addr, align 4
  %sub4 = sub nsw i32 %5, 1
  %cmp5 = icmp sle i32 %sub4, 10
  br i1 %cmp5, label %if.then6, label %if.else8

if.then6:                                         ; preds = %if.else
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.1, i32 0, i32 0))
  br label %if.end

if.else8:                                         ; preds = %if.else
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else8, %if.then6
  br label %if.end10

if.end10:                                         ; preds = %if.end, %if.then
  %6 = load i32*, i32** %convertedArray, align 4
  %7 = bitcast i32* %6 to i8*
  call void @free(i8* %7)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

declare void @free(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %argc.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %2, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %argc.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub1 = sub nsw i32 %4, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %call2 = call i32 @isSorted(i32* %3, i32 %sub1)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %call2, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %argc.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub4 = sub nsw i32 %5, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp5 = icmp sle i32 %sub4, 10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
%2:i1 = sle %1, 10:i32
infer %2
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
%2:i1 = sle %1, 10:i32
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for __main_argc_argv()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
