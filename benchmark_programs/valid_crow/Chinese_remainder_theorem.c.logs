
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for mul_inv()

; ModuleID = './Chinese_remainder_theorem.c.bc'
source_filename = "./Chinese_remainder_theorem.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@__const.main.n = private unnamed_addr constant [3 x i32] [i32 3, i32 5, i32 7], align 4
@__const.main.a = private unnamed_addr constant [3 x i32] [i32 2, i32 3, i32 2], align 4
@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @mul_inv(i32 %a, i32 %b) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %b0 = alloca i32, align 4
  %t = alloca i32, align 4
  %q = alloca i32, align 4
  %x0 = alloca i32, align 4
  %x1 = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  %0 = load i32, i32* %b.addr, align 4
  store i32 %0, i32* %b0, align 4
  store i32 0, i32* %x0, align 4
  store i32 1, i32* %x1, align 4
  %1 = load i32, i32* %b.addr, align 4
  %cmp = icmp eq i32 %1, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %2 = load i32, i32* %a.addr, align 4
  %cmp1 = icmp sgt i32 %2, 1
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i32, i32* %a.addr, align 4
  %4 = load i32, i32* %b.addr, align 4
  %div = sdiv i32 %3, %4
  store i32 %div, i32* %q, align 4
  %5 = load i32, i32* %b.addr, align 4
  store i32 %5, i32* %t, align 4
  %6 = load i32, i32* %a.addr, align 4
  %7 = load i32, i32* %b.addr, align 4
  %rem = srem i32 %6, %7
  store i32 %rem, i32* %b.addr, align 4
  %8 = load i32, i32* %t, align 4
  store i32 %8, i32* %a.addr, align 4
  %9 = load i32, i32* %x0, align 4
  store i32 %9, i32* %t, align 4
  %10 = load i32, i32* %x1, align 4
  %11 = load i32, i32* %q, align 4
  %12 = load i32, i32* %x0, align 4
  %mul = mul nsw i32 %11, %12
  %sub = sub nsw i32 %10, %mul
  store i32 %sub, i32* %x0, align 4
  %13 = load i32, i32* %t, align 4
  store i32 %13, i32* %x1, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %14 = load i32, i32* %x1, align 4
  %cmp2 = icmp slt i32 %14, 0
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %while.end
  %15 = load i32, i32* %b0, align 4
  %16 = load i32, i32* %x1, align 4
  %add = add nsw i32 %16, %15
  store i32 %add, i32* %x1, align 4
  br label %if.end4

if.end4:                                          ; preds = %if.then3, %while.end
  %17 = load i32, i32* %x1, align 4
  store i32 %17, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end4, %if.then
  %18 = load i32, i32* %retval, align 4
  ret i32 %18
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @chinese_remainder(i32* %n, i32* %a, i32 %len) #0 {
entry:
  %n.addr = alloca i32*, align 4
  %a.addr = alloca i32*, align 4
  %len.addr = alloca i32, align 4
  %p = alloca i32, align 4
  %i = alloca i32, align 4
  %prod = alloca i32, align 4
  %sum = alloca i32, align 4
  store i32* %n, i32** %n.addr, align 4
  store i32* %a, i32** %a.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 1, i32* %prod, align 4
  store i32 0, i32* %sum, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32*, i32** %n.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %2, i32 %3
  %4 = load i32, i32* %arrayidx, align 4
  %5 = load i32, i32* %prod, align 4
  %mul = mul nsw i32 %5, %4
  store i32 %mul, i32* %prod, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc9, %for.end
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %len.addr, align 4
  %cmp2 = icmp slt i32 %7, %8
  br i1 %cmp2, label %for.body3, label %for.end11

for.body3:                                        ; preds = %for.cond1
  %9 = load i32, i32* %prod, align 4
  %10 = load i32*, i32** %n.addr, align 4
  %11 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %10, i32 %11
  %12 = load i32, i32* %arrayidx4, align 4
  %div = sdiv i32 %9, %12
  store i32 %div, i32* %p, align 4
  %13 = load i32*, i32** %a.addr, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %13, i32 %14
  %15 = load i32, i32* %arrayidx5, align 4
  %16 = load i32, i32* %p, align 4
  %17 = load i32*, i32** %n.addr, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds i32, i32* %17, i32 %18
  %19 = load i32, i32* %arrayidx6, align 4
  %call = call i32 @mul_inv(i32 %16, i32 %19)
  %mul7 = mul nsw i32 %15, %call
  %20 = load i32, i32* %p, align 4
  %mul8 = mul nsw i32 %mul7, %20
  %21 = load i32, i32* %sum, align 4
  %add = add nsw i32 %21, %mul8
  store i32 %add, i32* %sum, align 4
  br label %for.inc9

for.inc9:                                         ; preds = %for.body3
  %22 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %22, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond1

for.end11:                                        ; preds = %for.cond1
  %23 = load i32, i32* %sum, align 4
  %24 = load i32, i32* %prod, align 4
  %rem = srem i32 %23, %24
  ret i32 %rem
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %n = alloca [3 x i32], align 4
  %a = alloca [3 x i32], align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [3 x i32]* %n to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 bitcast ([3 x i32]* @__const.main.n to i8*), i32 12, i1 false)
  %1 = bitcast [3 x i32]* %a to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %1, i8* align 4 bitcast ([3 x i32]* @__const.main.a to i8*), i32 12, i1 false)
  %arraydecay = getelementptr inbounds [3 x i32], [3 x i32]* %n, i32 0, i32 0
  %arraydecay1 = getelementptr inbounds [3 x i32], [3 x i32]* %a, i32 0, i32 0
  %call = call i32 @chinese_remainder(i32* %arraydecay, i32* %arraydecay1, i32 3)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %call)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %b.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %b.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %1, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %a.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = icmp sgt i32 %2, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %a.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %b.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div = sdiv i32 %3, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sdiv %0, %1
infer %2

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %b.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %a.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %b.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem = srem i32 %6, %7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = srem %0, %1
infer %2

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %t, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %x0, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %x1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %q, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %x0, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %11, %12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %10, %mul
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = subnsw %0, %3
infer %4

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %t, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %x1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp slt i32 %14, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 0:i32
infer %1

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %b0, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %x1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %16, %15
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %x1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = sdiv %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = srem %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -120454654
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = subnsw %0, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 0:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for mul_inv()

; entering Souper's runOnFunction() for chinese_remainder()

; ModuleID = './Chinese_remainder_theorem.c.bc'
source_filename = "./Chinese_remainder_theorem.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@__const.main.n = private unnamed_addr constant [3 x i32] [i32 3, i32 5, i32 7], align 4
@__const.main.a = private unnamed_addr constant [3 x i32] [i32 2, i32 3, i32 2], align 4
@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @mul_inv(i32 %a, i32 %b) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %b0 = alloca i32, align 4
  %t = alloca i32, align 4
  %q = alloca i32, align 4
  %x0 = alloca i32, align 4
  %x1 = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  %0 = load i32, i32* %b.addr, align 4
  store i32 %0, i32* %b0, align 4
  store i32 0, i32* %x0, align 4
  store i32 1, i32* %x1, align 4
  %1 = load i32, i32* %b.addr, align 4
  %cmp = icmp eq i32 %1, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %2 = load i32, i32* %a.addr, align 4
  %cmp1 = icmp sgt i32 %2, 1
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i32, i32* %a.addr, align 4
  %4 = load i32, i32* %b.addr, align 4
  %div = sdiv i32 %3, %4
  store i32 %div, i32* %q, align 4
  %5 = load i32, i32* %b.addr, align 4
  store i32 %5, i32* %t, align 4
  %6 = load i32, i32* %a.addr, align 4
  %7 = load i32, i32* %b.addr, align 4
  %rem = srem i32 %6, %7
  store i32 %rem, i32* %b.addr, align 4
  %8 = load i32, i32* %t, align 4
  store i32 %8, i32* %a.addr, align 4
  %9 = load i32, i32* %x0, align 4
  store i32 %9, i32* %t, align 4
  %10 = load i32, i32* %x1, align 4
  %11 = load i32, i32* %q, align 4
  %12 = load i32, i32* %x0, align 4
  %mul = mul nsw i32 %11, %12
  %sub = sub nsw i32 %10, %mul
  store i32 %sub, i32* %x0, align 4
  %13 = load i32, i32* %t, align 4
  store i32 %13, i32* %x1, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %14 = load i32, i32* %x1, align 4
  %cmp2 = icmp slt i32 %14, 0
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %while.end
  %15 = load i32, i32* %b0, align 4
  %16 = load i32, i32* %x1, align 4
  %add = add nsw i32 %16, %15
  store i32 %add, i32* %x1, align 4
  br label %if.end4

if.end4:                                          ; preds = %if.then3, %while.end
  %17 = load i32, i32* %x1, align 4
  store i32 %17, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end4, %if.then
  %18 = load i32, i32* %retval, align 4
  ret i32 %18
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @chinese_remainder(i32* %n, i32* %a, i32 %len) #0 {
entry:
  %n.addr = alloca i32*, align 4
  %a.addr = alloca i32*, align 4
  %len.addr = alloca i32, align 4
  %p = alloca i32, align 4
  %i = alloca i32, align 4
  %prod = alloca i32, align 4
  %sum = alloca i32, align 4
  store i32* %n, i32** %n.addr, align 4
  store i32* %a, i32** %a.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 1, i32* %prod, align 4
  store i32 0, i32* %sum, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32*, i32** %n.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %2, i32 %3
  %4 = load i32, i32* %arrayidx, align 4
  %5 = load i32, i32* %prod, align 4
  %mul = mul nsw i32 %5, %4
  store i32 %mul, i32* %prod, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc9, %for.end
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %len.addr, align 4
  %cmp2 = icmp slt i32 %7, %8
  br i1 %cmp2, label %for.body3, label %for.end11

for.body3:                                        ; preds = %for.cond1
  %9 = load i32, i32* %prod, align 4
  %10 = load i32*, i32** %n.addr, align 4
  %11 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %10, i32 %11
  %12 = load i32, i32* %arrayidx4, align 4
  %div = sdiv i32 %9, %12
  store i32 %div, i32* %p, align 4
  %13 = load i32*, i32** %a.addr, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %13, i32 %14
  %15 = load i32, i32* %arrayidx5, align 4
  %16 = load i32, i32* %p, align 4
  %17 = load i32*, i32** %n.addr, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds i32, i32* %17, i32 %18
  %19 = load i32, i32* %arrayidx6, align 4
  %call = call i32 @mul_inv(i32 %16, i32 %19)
  %mul7 = mul nsw i32 %15, %call
  %20 = load i32, i32* %p, align 4
  %mul8 = mul nsw i32 %mul7, %20
  %21 = load i32, i32* %sum, align 4
  %add = add nsw i32 %21, %mul8
  store i32 %add, i32* %sum, align 4
  br label %for.inc9

for.inc9:                                         ; preds = %for.body3
  %22 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %22, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond1

for.end11:                                        ; preds = %for.cond1
  %23 = load i32, i32* %sum, align 4
  %24 = load i32, i32* %prod, align 4
  %rem = srem i32 %23, %24
  ret i32 %rem
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %n = alloca [3 x i32], align 4
  %a = alloca [3 x i32], align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [3 x i32]* %n to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 bitcast ([3 x i32]* @__const.main.n to i8*), i32 12, i1 false)
  %1 = bitcast [3 x i32]* %a to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %1, i8* align 4 bitcast ([3 x i32]* @__const.main.a to i8*), i32 12, i1 false)
  %arraydecay = getelementptr inbounds [3 x i32], [3 x i32]* %n, i32 0, i32 0
  %arraydecay1 = getelementptr inbounds [3 x i32], [3 x i32]* %a, i32 0, i32 0
  %call = call i32 @chinese_remainder(i32* %arraydecay, i32* %arraydecay1, i32 3)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %call)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %prod, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %5, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %6, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp slt i32 %7, %8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %prod, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %arrayidx4, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div = sdiv i32 %9, %12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sdiv %0, %1
infer %2

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %arrayidx5, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %p, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %arrayidx6, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 @mul_inv(i32 %16, i32 %19)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul7 = mul nsw i32 %15, %call
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %p, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul8 = mul nsw i32 %mul7, %20
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = mulnsw %0, %3
infer %4

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %sum, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %21, %mul8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = mulnsw %2, %3
%5:i32 = mulnsw %1, %4
%6:i32 = addnsw %0, %5
infer %6

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc10 = add nsw i32 %22, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %sum, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %prod, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem = srem i32 %23, %24
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = srem %0, %1
infer %2
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = mulnsw %0, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 7 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = var
%4:i32 = mulnsw %2, %3
%5:i32 = mulnsw %1, %4
%6:i32 = addnsw %0, %5
infer %6


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 7 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for chinese_remainder()

; entering Souper's runOnFunction() for main()

; ModuleID = './Chinese_remainder_theorem.c.bc'
source_filename = "./Chinese_remainder_theorem.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@__const.main.n = private unnamed_addr constant [3 x i32] [i32 3, i32 5, i32 7], align 4
@__const.main.a = private unnamed_addr constant [3 x i32] [i32 2, i32 3, i32 2], align 4
@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @mul_inv(i32 %a, i32 %b) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %b0 = alloca i32, align 4
  %t = alloca i32, align 4
  %q = alloca i32, align 4
  %x0 = alloca i32, align 4
  %x1 = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  %0 = load i32, i32* %b.addr, align 4
  store i32 %0, i32* %b0, align 4
  store i32 0, i32* %x0, align 4
  store i32 1, i32* %x1, align 4
  %1 = load i32, i32* %b.addr, align 4
  %cmp = icmp eq i32 %1, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %2 = load i32, i32* %a.addr, align 4
  %cmp1 = icmp sgt i32 %2, 1
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i32, i32* %a.addr, align 4
  %4 = load i32, i32* %b.addr, align 4
  %div = sdiv i32 %3, %4
  store i32 %div, i32* %q, align 4
  %5 = load i32, i32* %b.addr, align 4
  store i32 %5, i32* %t, align 4
  %6 = load i32, i32* %a.addr, align 4
  %7 = load i32, i32* %b.addr, align 4
  %rem = srem i32 %6, %7
  store i32 %rem, i32* %b.addr, align 4
  %8 = load i32, i32* %t, align 4
  store i32 %8, i32* %a.addr, align 4
  %9 = load i32, i32* %x0, align 4
  store i32 %9, i32* %t, align 4
  %10 = load i32, i32* %x1, align 4
  %11 = load i32, i32* %q, align 4
  %12 = load i32, i32* %x0, align 4
  %mul = mul nsw i32 %11, %12
  %sub = sub nsw i32 %10, %mul
  store i32 %sub, i32* %x0, align 4
  %13 = load i32, i32* %t, align 4
  store i32 %13, i32* %x1, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %14 = load i32, i32* %x1, align 4
  %cmp2 = icmp slt i32 %14, 0
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %while.end
  %15 = load i32, i32* %b0, align 4
  %16 = load i32, i32* %x1, align 4
  %add = add nsw i32 %16, %15
  store i32 %add, i32* %x1, align 4
  br label %if.end4

if.end4:                                          ; preds = %if.then3, %while.end
  %17 = load i32, i32* %x1, align 4
  store i32 %17, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end4, %if.then
  %18 = load i32, i32* %retval, align 4
  ret i32 %18
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @chinese_remainder(i32* %n, i32* %a, i32 %len) #0 {
entry:
  %n.addr = alloca i32*, align 4
  %a.addr = alloca i32*, align 4
  %len.addr = alloca i32, align 4
  %p = alloca i32, align 4
  %i = alloca i32, align 4
  %prod = alloca i32, align 4
  %sum = alloca i32, align 4
  store i32* %n, i32** %n.addr, align 4
  store i32* %a, i32** %a.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 1, i32* %prod, align 4
  store i32 0, i32* %sum, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32*, i32** %n.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %2, i32 %3
  %4 = load i32, i32* %arrayidx, align 4
  %5 = load i32, i32* %prod, align 4
  %mul = mul nsw i32 %5, %4
  store i32 %mul, i32* %prod, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc9, %for.end
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %len.addr, align 4
  %cmp2 = icmp slt i32 %7, %8
  br i1 %cmp2, label %for.body3, label %for.end11

for.body3:                                        ; preds = %for.cond1
  %9 = load i32, i32* %prod, align 4
  %10 = load i32*, i32** %n.addr, align 4
  %11 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %10, i32 %11
  %12 = load i32, i32* %arrayidx4, align 4
  %div = sdiv i32 %9, %12
  store i32 %div, i32* %p, align 4
  %13 = load i32*, i32** %a.addr, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %13, i32 %14
  %15 = load i32, i32* %arrayidx5, align 4
  %16 = load i32, i32* %p, align 4
  %17 = load i32*, i32** %n.addr, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds i32, i32* %17, i32 %18
  %19 = load i32, i32* %arrayidx6, align 4
  %call = call i32 @mul_inv(i32 %16, i32 %19)
  %mul7 = mul nsw i32 %15, %call
  %20 = load i32, i32* %p, align 4
  %mul8 = mul nsw i32 %mul7, %20
  %21 = load i32, i32* %sum, align 4
  %add = add nsw i32 %21, %mul8
  store i32 %add, i32* %sum, align 4
  br label %for.inc9

for.inc9:                                         ; preds = %for.body3
  %22 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %22, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond1

for.end11:                                        ; preds = %for.cond1
  %23 = load i32, i32* %sum, align 4
  %24 = load i32, i32* %prod, align 4
  %rem = srem i32 %23, %24
  ret i32 %rem
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %n = alloca [3 x i32], align 4
  %a = alloca [3 x i32], align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [3 x i32]* %n to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 bitcast ([3 x i32]* @__const.main.n to i8*), i32 12, i1 false)
  %1 = bitcast [3 x i32]* %a to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %1, i8* align 4 bitcast ([3 x i32]* @__const.main.a to i8*), i32 12, i1 false)
  %arraydecay = getelementptr inbounds [3 x i32], [3 x i32]* %n, i32 0, i32 0
  %arraydecay1 = getelementptr inbounds [3 x i32], [3 x i32]* %a, i32 0, i32 0
  %call = call i32 @chinese_remainder(i32* %arraydecay, i32* %arraydecay1, i32 3)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %call)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 @chinese_remainder(i32* %arraydecay, i32* %arraydecay1, i32 3)
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
