
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for f_1()

; ModuleID = './Man_or_boy_test.c.bc'
source_filename = "./Man_or_boy_test.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.arg = type { {}*, i32*, %struct.arg*, %struct.arg*, %struct.arg*, %struct.arg*, %struct.arg* }

@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden i32 @f_1(%struct.arg* %_) #0 {
entry:
  %_.addr = alloca %struct.arg*, align 4
  store %struct.arg* %_, %struct.arg** %_.addr, align 4
  ret i32 -1
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @f0(%struct.arg* %_) #0 {
entry:
  %_.addr = alloca %struct.arg*, align 4
  store %struct.arg* %_, %struct.arg** %_.addr, align 4
  ret i32 0
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @f1(%struct.arg* %_) #0 {
entry:
  %_.addr = alloca %struct.arg*, align 4
  store %struct.arg* %_, %struct.arg** %_.addr, align 4
  ret i32 1
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @eval(%struct.arg* %a) #0 {
entry:
  %a.addr = alloca %struct.arg*, align 4
  store %struct.arg* %a, %struct.arg** %a.addr, align 4
  %0 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %fn = getelementptr inbounds %struct.arg, %struct.arg* %0, i32 0, i32 0
  %fn1 = bitcast {}** %fn to i32 (%struct.arg*)**
  %1 = load i32 (%struct.arg*)*, i32 (%struct.arg*)** %fn1, align 4
  %2 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %call = call i32 %1(%struct.arg* %2)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @B(%struct.arg* %a) #0 {
entry:
  %a.addr = alloca %struct.arg*, align 4
  %k = alloca i32, align 4
  %.compoundliteral = alloca %struct.arg, align 4
  store %struct.arg* %a, %struct.arg** %a.addr, align 4
  %0 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %k1 = getelementptr inbounds %struct.arg, %struct.arg* %0, i32 0, i32 1
  %1 = load i32*, i32** %k1, align 4
  %2 = load i32, i32* %1, align 4
  %sub = sub nsw i32 %2, 1
  store i32 %sub, i32* %1, align 4
  store i32 %sub, i32* %k, align 4
  %fn = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 0
  %fn2 = bitcast {}** %fn to i32 (%struct.arg*)**
  store i32 (%struct.arg*)* @B, i32 (%struct.arg*)** %fn2, align 4
  %k3 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 1
  store i32* %k, i32** %k3, align 4
  %x1 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 2
  %3 = load %struct.arg*, %struct.arg** %a.addr, align 4
  store %struct.arg* %3, %struct.arg** %x1, align 4
  %x2 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 3
  %4 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %x14 = getelementptr inbounds %struct.arg, %struct.arg* %4, i32 0, i32 2
  %5 = load %struct.arg*, %struct.arg** %x14, align 4
  store %struct.arg* %5, %struct.arg** %x2, align 4
  %x3 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 4
  %6 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %x25 = getelementptr inbounds %struct.arg, %struct.arg* %6, i32 0, i32 3
  %7 = load %struct.arg*, %struct.arg** %x25, align 4
  store %struct.arg* %7, %struct.arg** %x3, align 4
  %x4 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 5
  %8 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %x36 = getelementptr inbounds %struct.arg, %struct.arg* %8, i32 0, i32 4
  %9 = load %struct.arg*, %struct.arg** %x36, align 4
  store %struct.arg* %9, %struct.arg** %x4, align 4
  %x5 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 6
  %10 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %x47 = getelementptr inbounds %struct.arg, %struct.arg* %10, i32 0, i32 5
  %11 = load %struct.arg*, %struct.arg** %x47, align 4
  store %struct.arg* %11, %struct.arg** %x5, align 4
  %call = call i32 @A(%struct.arg* %.compoundliteral)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @A(%struct.arg* %a) #0 {
entry:
  %a.addr = alloca %struct.arg*, align 4
  store %struct.arg* %a, %struct.arg** %a.addr, align 4
  %0 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %k = getelementptr inbounds %struct.arg, %struct.arg* %0, i32 0, i32 1
  %1 = load i32*, i32** %k, align 4
  %2 = load i32, i32* %1, align 4
  %cmp = icmp sle i32 %2, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %x4 = getelementptr inbounds %struct.arg, %struct.arg* %3, i32 0, i32 5
  %4 = load %struct.arg*, %struct.arg** %x4, align 4
  %call = call i32 @eval(%struct.arg* %4)
  %5 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %x5 = getelementptr inbounds %struct.arg, %struct.arg* %5, i32 0, i32 6
  %6 = load %struct.arg*, %struct.arg** %x5, align 4
  %call1 = call i32 @eval(%struct.arg* %6)
  %add = add nsw i32 %call, %call1
  br label %cond.end

cond.false:                                       ; preds = %entry
  %7 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %call2 = call i32 @B(%struct.arg* %7)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %add, %cond.true ], [ %call2, %cond.false ]
  ret i32 %cond
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %k = alloca i32, align 4
  %.compoundliteral = alloca %struct.arg, align 4
  %.compoundliteral3 = alloca %struct.arg, align 4
  %.compoundliteral8 = alloca %struct.arg, align 4
  %.compoundliteral14 = alloca %struct.arg, align 4
  %.compoundliteral21 = alloca %struct.arg, align 4
  %.compoundliteral29 = alloca %struct.arg, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  %0 = load i32, i32* %argc.addr, align 4
  %cmp = icmp eq i32 %0, 2
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i8**, i8*** %argv.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 1
  %2 = load i8*, i8** %arrayidx, align 4
  %call = call i32 @strtol(i8* %2, i8** null, i32 0)
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ 10, %cond.false ]
  store i32 %cond, i32* %k, align 4
  %fn = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 0
  %fn1 = bitcast {}** %fn to i32 (%struct.arg*)**
  store i32 (%struct.arg*)* @B, i32 (%struct.arg*)** %fn1, align 4
  %k2 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 1
  store i32* %k, i32** %k2, align 4
  %x1 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 2
  %3 = bitcast %struct.arg* %.compoundliteral3 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %3, i8 0, i64 28, i1 false)
  %fn4 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral3, i32 0, i32 0
  %fn5 = bitcast {}** %fn4 to i32 (%struct.arg*)**
  store i32 (%struct.arg*)* @f1, i32 (%struct.arg*)** %fn5, align 4
  store %struct.arg* %.compoundliteral3, %struct.arg** %x1, align 4
  %x2 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 3
  %4 = bitcast %struct.arg* %.compoundliteral8 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %4, i8 0, i64 28, i1 false)
  %fn9 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral8, i32 0, i32 0
  %fn10 = bitcast {}** %fn9 to i32 (%struct.arg*)**
  store i32 (%struct.arg*)* @f_1, i32 (%struct.arg*)** %fn10, align 4
  store %struct.arg* %.compoundliteral8, %struct.arg** %x2, align 4
  %x3 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 4
  %5 = bitcast %struct.arg* %.compoundliteral14 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %5, i8 0, i64 28, i1 false)
  %fn15 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral14, i32 0, i32 0
  %fn16 = bitcast {}** %fn15 to i32 (%struct.arg*)**
  store i32 (%struct.arg*)* @f_1, i32 (%struct.arg*)** %fn16, align 4
  store %struct.arg* %.compoundliteral14, %struct.arg** %x3, align 4
  %x4 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 5
  %6 = bitcast %struct.arg* %.compoundliteral21 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %6, i8 0, i64 28, i1 false)
  %fn22 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral21, i32 0, i32 0
  %fn23 = bitcast {}** %fn22 to i32 (%struct.arg*)**
  store i32 (%struct.arg*)* @f1, i32 (%struct.arg*)** %fn23, align 4
  store %struct.arg* %.compoundliteral21, %struct.arg** %x4, align 4
  %x5 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 6
  %7 = bitcast %struct.arg* %.compoundliteral29 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %7, i8 0, i64 28, i1 false)
  %fn30 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral29, i32 0, i32 0
  %fn31 = bitcast {}** %fn30 to i32 (%struct.arg*)**
  store i32 (%struct.arg*)* @f0, i32 (%struct.arg*)** %fn31, align 4
  store %struct.arg* %.compoundliteral29, %struct.arg** %x5, align 4
  %call38 = call i32 @A(%struct.arg* %.compoundliteral)
  %call39 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %call38)
  ret i32 0
}

declare i32 @strtol(i8* %0, i8** %1, i32 %2) #1

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly %0, i8 %1, i64 %2, i1 immarg %3) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn writeonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for f_1()

; entering Souper's runOnFunction() for f0()

; ModuleID = './Man_or_boy_test.c.bc'
source_filename = "./Man_or_boy_test.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.arg = type { {}*, i32*, %struct.arg*, %struct.arg*, %struct.arg*, %struct.arg*, %struct.arg* }

@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden i32 @f_1(%struct.arg* %_) #0 {
entry:
  %_.addr = alloca %struct.arg*, align 4
  store %struct.arg* %_, %struct.arg** %_.addr, align 4
  ret i32 -1
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @f0(%struct.arg* %_) #0 {
entry:
  %_.addr = alloca %struct.arg*, align 4
  store %struct.arg* %_, %struct.arg** %_.addr, align 4
  ret i32 0
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @f1(%struct.arg* %_) #0 {
entry:
  %_.addr = alloca %struct.arg*, align 4
  store %struct.arg* %_, %struct.arg** %_.addr, align 4
  ret i32 1
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @eval(%struct.arg* %a) #0 {
entry:
  %a.addr = alloca %struct.arg*, align 4
  store %struct.arg* %a, %struct.arg** %a.addr, align 4
  %0 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %fn = getelementptr inbounds %struct.arg, %struct.arg* %0, i32 0, i32 0
  %fn1 = bitcast {}** %fn to i32 (%struct.arg*)**
  %1 = load i32 (%struct.arg*)*, i32 (%struct.arg*)** %fn1, align 4
  %2 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %call = call i32 %1(%struct.arg* %2)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @B(%struct.arg* %a) #0 {
entry:
  %a.addr = alloca %struct.arg*, align 4
  %k = alloca i32, align 4
  %.compoundliteral = alloca %struct.arg, align 4
  store %struct.arg* %a, %struct.arg** %a.addr, align 4
  %0 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %k1 = getelementptr inbounds %struct.arg, %struct.arg* %0, i32 0, i32 1
  %1 = load i32*, i32** %k1, align 4
  %2 = load i32, i32* %1, align 4
  %sub = sub nsw i32 %2, 1
  store i32 %sub, i32* %1, align 4
  store i32 %sub, i32* %k, align 4
  %fn = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 0
  %fn2 = bitcast {}** %fn to i32 (%struct.arg*)**
  store i32 (%struct.arg*)* @B, i32 (%struct.arg*)** %fn2, align 4
  %k3 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 1
  store i32* %k, i32** %k3, align 4
  %x1 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 2
  %3 = load %struct.arg*, %struct.arg** %a.addr, align 4
  store %struct.arg* %3, %struct.arg** %x1, align 4
  %x2 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 3
  %4 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %x14 = getelementptr inbounds %struct.arg, %struct.arg* %4, i32 0, i32 2
  %5 = load %struct.arg*, %struct.arg** %x14, align 4
  store %struct.arg* %5, %struct.arg** %x2, align 4
  %x3 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 4
  %6 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %x25 = getelementptr inbounds %struct.arg, %struct.arg* %6, i32 0, i32 3
  %7 = load %struct.arg*, %struct.arg** %x25, align 4
  store %struct.arg* %7, %struct.arg** %x3, align 4
  %x4 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 5
  %8 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %x36 = getelementptr inbounds %struct.arg, %struct.arg* %8, i32 0, i32 4
  %9 = load %struct.arg*, %struct.arg** %x36, align 4
  store %struct.arg* %9, %struct.arg** %x4, align 4
  %x5 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 6
  %10 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %x47 = getelementptr inbounds %struct.arg, %struct.arg* %10, i32 0, i32 5
  %11 = load %struct.arg*, %struct.arg** %x47, align 4
  store %struct.arg* %11, %struct.arg** %x5, align 4
  %call = call i32 @A(%struct.arg* %.compoundliteral)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @A(%struct.arg* %a) #0 {
entry:
  %a.addr = alloca %struct.arg*, align 4
  store %struct.arg* %a, %struct.arg** %a.addr, align 4
  %0 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %k = getelementptr inbounds %struct.arg, %struct.arg* %0, i32 0, i32 1
  %1 = load i32*, i32** %k, align 4
  %2 = load i32, i32* %1, align 4
  %cmp = icmp sle i32 %2, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %x4 = getelementptr inbounds %struct.arg, %struct.arg* %3, i32 0, i32 5
  %4 = load %struct.arg*, %struct.arg** %x4, align 4
  %call = call i32 @eval(%struct.arg* %4)
  %5 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %x5 = getelementptr inbounds %struct.arg, %struct.arg* %5, i32 0, i32 6
  %6 = load %struct.arg*, %struct.arg** %x5, align 4
  %call1 = call i32 @eval(%struct.arg* %6)
  %add = add nsw i32 %call, %call1
  br label %cond.end

cond.false:                                       ; preds = %entry
  %7 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %call2 = call i32 @B(%struct.arg* %7)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %add, %cond.true ], [ %call2, %cond.false ]
  ret i32 %cond
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %k = alloca i32, align 4
  %.compoundliteral = alloca %struct.arg, align 4
  %.compoundliteral3 = alloca %struct.arg, align 4
  %.compoundliteral8 = alloca %struct.arg, align 4
  %.compoundliteral14 = alloca %struct.arg, align 4
  %.compoundliteral21 = alloca %struct.arg, align 4
  %.compoundliteral29 = alloca %struct.arg, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  %0 = load i32, i32* %argc.addr, align 4
  %cmp = icmp eq i32 %0, 2
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i8**, i8*** %argv.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 1
  %2 = load i8*, i8** %arrayidx, align 4
  %call = call i32 @strtol(i8* %2, i8** null, i32 0)
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ 10, %cond.false ]
  store i32 %cond, i32* %k, align 4
  %fn = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 0
  %fn1 = bitcast {}** %fn to i32 (%struct.arg*)**
  store i32 (%struct.arg*)* @B, i32 (%struct.arg*)** %fn1, align 4
  %k2 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 1
  store i32* %k, i32** %k2, align 4
  %x1 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 2
  %3 = bitcast %struct.arg* %.compoundliteral3 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %3, i8 0, i64 28, i1 false)
  %fn4 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral3, i32 0, i32 0
  %fn5 = bitcast {}** %fn4 to i32 (%struct.arg*)**
  store i32 (%struct.arg*)* @f1, i32 (%struct.arg*)** %fn5, align 4
  store %struct.arg* %.compoundliteral3, %struct.arg** %x1, align 4
  %x2 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 3
  %4 = bitcast %struct.arg* %.compoundliteral8 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %4, i8 0, i64 28, i1 false)
  %fn9 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral8, i32 0, i32 0
  %fn10 = bitcast {}** %fn9 to i32 (%struct.arg*)**
  store i32 (%struct.arg*)* @f_1, i32 (%struct.arg*)** %fn10, align 4
  store %struct.arg* %.compoundliteral8, %struct.arg** %x2, align 4
  %x3 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 4
  %5 = bitcast %struct.arg* %.compoundliteral14 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %5, i8 0, i64 28, i1 false)
  %fn15 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral14, i32 0, i32 0
  %fn16 = bitcast {}** %fn15 to i32 (%struct.arg*)**
  store i32 (%struct.arg*)* @f_1, i32 (%struct.arg*)** %fn16, align 4
  store %struct.arg* %.compoundliteral14, %struct.arg** %x3, align 4
  %x4 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 5
  %6 = bitcast %struct.arg* %.compoundliteral21 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %6, i8 0, i64 28, i1 false)
  %fn22 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral21, i32 0, i32 0
  %fn23 = bitcast {}** %fn22 to i32 (%struct.arg*)**
  store i32 (%struct.arg*)* @f1, i32 (%struct.arg*)** %fn23, align 4
  store %struct.arg* %.compoundliteral21, %struct.arg** %x4, align 4
  %x5 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 6
  %7 = bitcast %struct.arg* %.compoundliteral29 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %7, i8 0, i64 28, i1 false)
  %fn30 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral29, i32 0, i32 0
  %fn31 = bitcast {}** %fn30 to i32 (%struct.arg*)**
  store i32 (%struct.arg*)* @f0, i32 (%struct.arg*)** %fn31, align 4
  store %struct.arg* %.compoundliteral29, %struct.arg** %x5, align 4
  %call38 = call i32 @A(%struct.arg* %.compoundliteral)
  %call39 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %call38)
  ret i32 0
}

declare i32 @strtol(i8* %0, i8** %1, i32 %2) #1

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly %0, i8 %1, i64 %2, i1 immarg %3) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn writeonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for f0()

; entering Souper's runOnFunction() for f1()

; ModuleID = './Man_or_boy_test.c.bc'
source_filename = "./Man_or_boy_test.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.arg = type { {}*, i32*, %struct.arg*, %struct.arg*, %struct.arg*, %struct.arg*, %struct.arg* }

@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden i32 @f_1(%struct.arg* %_) #0 {
entry:
  %_.addr = alloca %struct.arg*, align 4
  store %struct.arg* %_, %struct.arg** %_.addr, align 4
  ret i32 -1
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @f0(%struct.arg* %_) #0 {
entry:
  %_.addr = alloca %struct.arg*, align 4
  store %struct.arg* %_, %struct.arg** %_.addr, align 4
  ret i32 0
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @f1(%struct.arg* %_) #0 {
entry:
  %_.addr = alloca %struct.arg*, align 4
  store %struct.arg* %_, %struct.arg** %_.addr, align 4
  ret i32 1
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @eval(%struct.arg* %a) #0 {
entry:
  %a.addr = alloca %struct.arg*, align 4
  store %struct.arg* %a, %struct.arg** %a.addr, align 4
  %0 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %fn = getelementptr inbounds %struct.arg, %struct.arg* %0, i32 0, i32 0
  %fn1 = bitcast {}** %fn to i32 (%struct.arg*)**
  %1 = load i32 (%struct.arg*)*, i32 (%struct.arg*)** %fn1, align 4
  %2 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %call = call i32 %1(%struct.arg* %2)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @B(%struct.arg* %a) #0 {
entry:
  %a.addr = alloca %struct.arg*, align 4
  %k = alloca i32, align 4
  %.compoundliteral = alloca %struct.arg, align 4
  store %struct.arg* %a, %struct.arg** %a.addr, align 4
  %0 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %k1 = getelementptr inbounds %struct.arg, %struct.arg* %0, i32 0, i32 1
  %1 = load i32*, i32** %k1, align 4
  %2 = load i32, i32* %1, align 4
  %sub = sub nsw i32 %2, 1
  store i32 %sub, i32* %1, align 4
  store i32 %sub, i32* %k, align 4
  %fn = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 0
  %fn2 = bitcast {}** %fn to i32 (%struct.arg*)**
  store i32 (%struct.arg*)* @B, i32 (%struct.arg*)** %fn2, align 4
  %k3 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 1
  store i32* %k, i32** %k3, align 4
  %x1 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 2
  %3 = load %struct.arg*, %struct.arg** %a.addr, align 4
  store %struct.arg* %3, %struct.arg** %x1, align 4
  %x2 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 3
  %4 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %x14 = getelementptr inbounds %struct.arg, %struct.arg* %4, i32 0, i32 2
  %5 = load %struct.arg*, %struct.arg** %x14, align 4
  store %struct.arg* %5, %struct.arg** %x2, align 4
  %x3 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 4
  %6 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %x25 = getelementptr inbounds %struct.arg, %struct.arg* %6, i32 0, i32 3
  %7 = load %struct.arg*, %struct.arg** %x25, align 4
  store %struct.arg* %7, %struct.arg** %x3, align 4
  %x4 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 5
  %8 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %x36 = getelementptr inbounds %struct.arg, %struct.arg* %8, i32 0, i32 4
  %9 = load %struct.arg*, %struct.arg** %x36, align 4
  store %struct.arg* %9, %struct.arg** %x4, align 4
  %x5 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 6
  %10 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %x47 = getelementptr inbounds %struct.arg, %struct.arg* %10, i32 0, i32 5
  %11 = load %struct.arg*, %struct.arg** %x47, align 4
  store %struct.arg* %11, %struct.arg** %x5, align 4
  %call = call i32 @A(%struct.arg* %.compoundliteral)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @A(%struct.arg* %a) #0 {
entry:
  %a.addr = alloca %struct.arg*, align 4
  store %struct.arg* %a, %struct.arg** %a.addr, align 4
  %0 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %k = getelementptr inbounds %struct.arg, %struct.arg* %0, i32 0, i32 1
  %1 = load i32*, i32** %k, align 4
  %2 = load i32, i32* %1, align 4
  %cmp = icmp sle i32 %2, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %x4 = getelementptr inbounds %struct.arg, %struct.arg* %3, i32 0, i32 5
  %4 = load %struct.arg*, %struct.arg** %x4, align 4
  %call = call i32 @eval(%struct.arg* %4)
  %5 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %x5 = getelementptr inbounds %struct.arg, %struct.arg* %5, i32 0, i32 6
  %6 = load %struct.arg*, %struct.arg** %x5, align 4
  %call1 = call i32 @eval(%struct.arg* %6)
  %add = add nsw i32 %call, %call1
  br label %cond.end

cond.false:                                       ; preds = %entry
  %7 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %call2 = call i32 @B(%struct.arg* %7)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %add, %cond.true ], [ %call2, %cond.false ]
  ret i32 %cond
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %k = alloca i32, align 4
  %.compoundliteral = alloca %struct.arg, align 4
  %.compoundliteral3 = alloca %struct.arg, align 4
  %.compoundliteral8 = alloca %struct.arg, align 4
  %.compoundliteral14 = alloca %struct.arg, align 4
  %.compoundliteral21 = alloca %struct.arg, align 4
  %.compoundliteral29 = alloca %struct.arg, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  %0 = load i32, i32* %argc.addr, align 4
  %cmp = icmp eq i32 %0, 2
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i8**, i8*** %argv.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 1
  %2 = load i8*, i8** %arrayidx, align 4
  %call = call i32 @strtol(i8* %2, i8** null, i32 0)
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ 10, %cond.false ]
  store i32 %cond, i32* %k, align 4
  %fn = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 0
  %fn1 = bitcast {}** %fn to i32 (%struct.arg*)**
  store i32 (%struct.arg*)* @B, i32 (%struct.arg*)** %fn1, align 4
  %k2 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 1
  store i32* %k, i32** %k2, align 4
  %x1 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 2
  %3 = bitcast %struct.arg* %.compoundliteral3 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %3, i8 0, i64 28, i1 false)
  %fn4 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral3, i32 0, i32 0
  %fn5 = bitcast {}** %fn4 to i32 (%struct.arg*)**
  store i32 (%struct.arg*)* @f1, i32 (%struct.arg*)** %fn5, align 4
  store %struct.arg* %.compoundliteral3, %struct.arg** %x1, align 4
  %x2 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 3
  %4 = bitcast %struct.arg* %.compoundliteral8 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %4, i8 0, i64 28, i1 false)
  %fn9 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral8, i32 0, i32 0
  %fn10 = bitcast {}** %fn9 to i32 (%struct.arg*)**
  store i32 (%struct.arg*)* @f_1, i32 (%struct.arg*)** %fn10, align 4
  store %struct.arg* %.compoundliteral8, %struct.arg** %x2, align 4
  %x3 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 4
  %5 = bitcast %struct.arg* %.compoundliteral14 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %5, i8 0, i64 28, i1 false)
  %fn15 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral14, i32 0, i32 0
  %fn16 = bitcast {}** %fn15 to i32 (%struct.arg*)**
  store i32 (%struct.arg*)* @f_1, i32 (%struct.arg*)** %fn16, align 4
  store %struct.arg* %.compoundliteral14, %struct.arg** %x3, align 4
  %x4 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 5
  %6 = bitcast %struct.arg* %.compoundliteral21 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %6, i8 0, i64 28, i1 false)
  %fn22 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral21, i32 0, i32 0
  %fn23 = bitcast {}** %fn22 to i32 (%struct.arg*)**
  store i32 (%struct.arg*)* @f1, i32 (%struct.arg*)** %fn23, align 4
  store %struct.arg* %.compoundliteral21, %struct.arg** %x4, align 4
  %x5 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 6
  %7 = bitcast %struct.arg* %.compoundliteral29 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %7, i8 0, i64 28, i1 false)
  %fn30 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral29, i32 0, i32 0
  %fn31 = bitcast {}** %fn30 to i32 (%struct.arg*)**
  store i32 (%struct.arg*)* @f0, i32 (%struct.arg*)** %fn31, align 4
  store %struct.arg* %.compoundliteral29, %struct.arg** %x5, align 4
  %call38 = call i32 @A(%struct.arg* %.compoundliteral)
  %call39 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %call38)
  ret i32 0
}

declare i32 @strtol(i8* %0, i8** %1, i32 %2) #1

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly %0, i8 %1, i64 %2, i1 immarg %3) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn writeonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for f1()

; entering Souper's runOnFunction() for eval()

; ModuleID = './Man_or_boy_test.c.bc'
source_filename = "./Man_or_boy_test.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.arg = type { {}*, i32*, %struct.arg*, %struct.arg*, %struct.arg*, %struct.arg*, %struct.arg* }

@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden i32 @f_1(%struct.arg* %_) #0 {
entry:
  %_.addr = alloca %struct.arg*, align 4
  store %struct.arg* %_, %struct.arg** %_.addr, align 4
  ret i32 -1
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @f0(%struct.arg* %_) #0 {
entry:
  %_.addr = alloca %struct.arg*, align 4
  store %struct.arg* %_, %struct.arg** %_.addr, align 4
  ret i32 0
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @f1(%struct.arg* %_) #0 {
entry:
  %_.addr = alloca %struct.arg*, align 4
  store %struct.arg* %_, %struct.arg** %_.addr, align 4
  ret i32 1
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @eval(%struct.arg* %a) #0 {
entry:
  %a.addr = alloca %struct.arg*, align 4
  store %struct.arg* %a, %struct.arg** %a.addr, align 4
  %0 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %fn = getelementptr inbounds %struct.arg, %struct.arg* %0, i32 0, i32 0
  %fn1 = bitcast {}** %fn to i32 (%struct.arg*)**
  %1 = load i32 (%struct.arg*)*, i32 (%struct.arg*)** %fn1, align 4
  %2 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %call = call i32 %1(%struct.arg* %2)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @B(%struct.arg* %a) #0 {
entry:
  %a.addr = alloca %struct.arg*, align 4
  %k = alloca i32, align 4
  %.compoundliteral = alloca %struct.arg, align 4
  store %struct.arg* %a, %struct.arg** %a.addr, align 4
  %0 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %k1 = getelementptr inbounds %struct.arg, %struct.arg* %0, i32 0, i32 1
  %1 = load i32*, i32** %k1, align 4
  %2 = load i32, i32* %1, align 4
  %sub = sub nsw i32 %2, 1
  store i32 %sub, i32* %1, align 4
  store i32 %sub, i32* %k, align 4
  %fn = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 0
  %fn2 = bitcast {}** %fn to i32 (%struct.arg*)**
  store i32 (%struct.arg*)* @B, i32 (%struct.arg*)** %fn2, align 4
  %k3 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 1
  store i32* %k, i32** %k3, align 4
  %x1 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 2
  %3 = load %struct.arg*, %struct.arg** %a.addr, align 4
  store %struct.arg* %3, %struct.arg** %x1, align 4
  %x2 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 3
  %4 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %x14 = getelementptr inbounds %struct.arg, %struct.arg* %4, i32 0, i32 2
  %5 = load %struct.arg*, %struct.arg** %x14, align 4
  store %struct.arg* %5, %struct.arg** %x2, align 4
  %x3 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 4
  %6 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %x25 = getelementptr inbounds %struct.arg, %struct.arg* %6, i32 0, i32 3
  %7 = load %struct.arg*, %struct.arg** %x25, align 4
  store %struct.arg* %7, %struct.arg** %x3, align 4
  %x4 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 5
  %8 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %x36 = getelementptr inbounds %struct.arg, %struct.arg* %8, i32 0, i32 4
  %9 = load %struct.arg*, %struct.arg** %x36, align 4
  store %struct.arg* %9, %struct.arg** %x4, align 4
  %x5 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 6
  %10 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %x47 = getelementptr inbounds %struct.arg, %struct.arg* %10, i32 0, i32 5
  %11 = load %struct.arg*, %struct.arg** %x47, align 4
  store %struct.arg* %11, %struct.arg** %x5, align 4
  %call = call i32 @A(%struct.arg* %.compoundliteral)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @A(%struct.arg* %a) #0 {
entry:
  %a.addr = alloca %struct.arg*, align 4
  store %struct.arg* %a, %struct.arg** %a.addr, align 4
  %0 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %k = getelementptr inbounds %struct.arg, %struct.arg* %0, i32 0, i32 1
  %1 = load i32*, i32** %k, align 4
  %2 = load i32, i32* %1, align 4
  %cmp = icmp sle i32 %2, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %x4 = getelementptr inbounds %struct.arg, %struct.arg* %3, i32 0, i32 5
  %4 = load %struct.arg*, %struct.arg** %x4, align 4
  %call = call i32 @eval(%struct.arg* %4)
  %5 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %x5 = getelementptr inbounds %struct.arg, %struct.arg* %5, i32 0, i32 6
  %6 = load %struct.arg*, %struct.arg** %x5, align 4
  %call1 = call i32 @eval(%struct.arg* %6)
  %add = add nsw i32 %call, %call1
  br label %cond.end

cond.false:                                       ; preds = %entry
  %7 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %call2 = call i32 @B(%struct.arg* %7)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %add, %cond.true ], [ %call2, %cond.false ]
  ret i32 %cond
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %k = alloca i32, align 4
  %.compoundliteral = alloca %struct.arg, align 4
  %.compoundliteral3 = alloca %struct.arg, align 4
  %.compoundliteral8 = alloca %struct.arg, align 4
  %.compoundliteral14 = alloca %struct.arg, align 4
  %.compoundliteral21 = alloca %struct.arg, align 4
  %.compoundliteral29 = alloca %struct.arg, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  %0 = load i32, i32* %argc.addr, align 4
  %cmp = icmp eq i32 %0, 2
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i8**, i8*** %argv.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 1
  %2 = load i8*, i8** %arrayidx, align 4
  %call = call i32 @strtol(i8* %2, i8** null, i32 0)
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ 10, %cond.false ]
  store i32 %cond, i32* %k, align 4
  %fn = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 0
  %fn1 = bitcast {}** %fn to i32 (%struct.arg*)**
  store i32 (%struct.arg*)* @B, i32 (%struct.arg*)** %fn1, align 4
  %k2 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 1
  store i32* %k, i32** %k2, align 4
  %x1 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 2
  %3 = bitcast %struct.arg* %.compoundliteral3 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %3, i8 0, i64 28, i1 false)
  %fn4 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral3, i32 0, i32 0
  %fn5 = bitcast {}** %fn4 to i32 (%struct.arg*)**
  store i32 (%struct.arg*)* @f1, i32 (%struct.arg*)** %fn5, align 4
  store %struct.arg* %.compoundliteral3, %struct.arg** %x1, align 4
  %x2 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 3
  %4 = bitcast %struct.arg* %.compoundliteral8 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %4, i8 0, i64 28, i1 false)
  %fn9 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral8, i32 0, i32 0
  %fn10 = bitcast {}** %fn9 to i32 (%struct.arg*)**
  store i32 (%struct.arg*)* @f_1, i32 (%struct.arg*)** %fn10, align 4
  store %struct.arg* %.compoundliteral8, %struct.arg** %x2, align 4
  %x3 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 4
  %5 = bitcast %struct.arg* %.compoundliteral14 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %5, i8 0, i64 28, i1 false)
  %fn15 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral14, i32 0, i32 0
  %fn16 = bitcast {}** %fn15 to i32 (%struct.arg*)**
  store i32 (%struct.arg*)* @f_1, i32 (%struct.arg*)** %fn16, align 4
  store %struct.arg* %.compoundliteral14, %struct.arg** %x3, align 4
  %x4 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 5
  %6 = bitcast %struct.arg* %.compoundliteral21 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %6, i8 0, i64 28, i1 false)
  %fn22 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral21, i32 0, i32 0
  %fn23 = bitcast {}** %fn22 to i32 (%struct.arg*)**
  store i32 (%struct.arg*)* @f1, i32 (%struct.arg*)** %fn23, align 4
  store %struct.arg* %.compoundliteral21, %struct.arg** %x4, align 4
  %x5 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 6
  %7 = bitcast %struct.arg* %.compoundliteral29 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %7, i8 0, i64 28, i1 false)
  %fn30 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral29, i32 0, i32 0
  %fn31 = bitcast {}** %fn30 to i32 (%struct.arg*)**
  store i32 (%struct.arg*)* @f0, i32 (%struct.arg*)** %fn31, align 4
  store %struct.arg* %.compoundliteral29, %struct.arg** %x5, align 4
  %call38 = call i32 @A(%struct.arg* %.compoundliteral)
  %call39 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %call38)
  ret i32 0
}

declare i32 @strtol(i8* %0, i8** %1, i32 %2) #1

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly %0, i8 %1, i64 %2, i1 immarg %3) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn writeonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 %1(%struct.arg* %2)
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for eval()

; entering Souper's runOnFunction() for B()

; ModuleID = './Man_or_boy_test.c.bc'
source_filename = "./Man_or_boy_test.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.arg = type { {}*, i32*, %struct.arg*, %struct.arg*, %struct.arg*, %struct.arg*, %struct.arg* }

@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden i32 @f_1(%struct.arg* %_) #0 {
entry:
  %_.addr = alloca %struct.arg*, align 4
  store %struct.arg* %_, %struct.arg** %_.addr, align 4
  ret i32 -1
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @f0(%struct.arg* %_) #0 {
entry:
  %_.addr = alloca %struct.arg*, align 4
  store %struct.arg* %_, %struct.arg** %_.addr, align 4
  ret i32 0
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @f1(%struct.arg* %_) #0 {
entry:
  %_.addr = alloca %struct.arg*, align 4
  store %struct.arg* %_, %struct.arg** %_.addr, align 4
  ret i32 1
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @eval(%struct.arg* %a) #0 {
entry:
  %a.addr = alloca %struct.arg*, align 4
  store %struct.arg* %a, %struct.arg** %a.addr, align 4
  %0 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %fn = getelementptr inbounds %struct.arg, %struct.arg* %0, i32 0, i32 0
  %fn1 = bitcast {}** %fn to i32 (%struct.arg*)**
  %1 = load i32 (%struct.arg*)*, i32 (%struct.arg*)** %fn1, align 4
  %2 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %call = call i32 %1(%struct.arg* %2)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @B(%struct.arg* %a) #0 {
entry:
  %a.addr = alloca %struct.arg*, align 4
  %k = alloca i32, align 4
  %.compoundliteral = alloca %struct.arg, align 4
  store %struct.arg* %a, %struct.arg** %a.addr, align 4
  %0 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %k1 = getelementptr inbounds %struct.arg, %struct.arg* %0, i32 0, i32 1
  %1 = load i32*, i32** %k1, align 4
  %2 = load i32, i32* %1, align 4
  %sub = sub nsw i32 %2, 1
  store i32 %sub, i32* %1, align 4
  store i32 %sub, i32* %k, align 4
  %fn = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 0
  %fn2 = bitcast {}** %fn to i32 (%struct.arg*)**
  store i32 (%struct.arg*)* @B, i32 (%struct.arg*)** %fn2, align 4
  %k3 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 1
  store i32* %k, i32** %k3, align 4
  %x1 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 2
  %3 = load %struct.arg*, %struct.arg** %a.addr, align 4
  store %struct.arg* %3, %struct.arg** %x1, align 4
  %x2 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 3
  %4 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %x14 = getelementptr inbounds %struct.arg, %struct.arg* %4, i32 0, i32 2
  %5 = load %struct.arg*, %struct.arg** %x14, align 4
  store %struct.arg* %5, %struct.arg** %x2, align 4
  %x3 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 4
  %6 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %x25 = getelementptr inbounds %struct.arg, %struct.arg* %6, i32 0, i32 3
  %7 = load %struct.arg*, %struct.arg** %x25, align 4
  store %struct.arg* %7, %struct.arg** %x3, align 4
  %x4 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 5
  %8 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %x36 = getelementptr inbounds %struct.arg, %struct.arg* %8, i32 0, i32 4
  %9 = load %struct.arg*, %struct.arg** %x36, align 4
  store %struct.arg* %9, %struct.arg** %x4, align 4
  %x5 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 6
  %10 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %x47 = getelementptr inbounds %struct.arg, %struct.arg* %10, i32 0, i32 5
  %11 = load %struct.arg*, %struct.arg** %x47, align 4
  store %struct.arg* %11, %struct.arg** %x5, align 4
  %call = call i32 @A(%struct.arg* %.compoundliteral)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @A(%struct.arg* %a) #0 {
entry:
  %a.addr = alloca %struct.arg*, align 4
  store %struct.arg* %a, %struct.arg** %a.addr, align 4
  %0 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %k = getelementptr inbounds %struct.arg, %struct.arg* %0, i32 0, i32 1
  %1 = load i32*, i32** %k, align 4
  %2 = load i32, i32* %1, align 4
  %cmp = icmp sle i32 %2, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %x4 = getelementptr inbounds %struct.arg, %struct.arg* %3, i32 0, i32 5
  %4 = load %struct.arg*, %struct.arg** %x4, align 4
  %call = call i32 @eval(%struct.arg* %4)
  %5 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %x5 = getelementptr inbounds %struct.arg, %struct.arg* %5, i32 0, i32 6
  %6 = load %struct.arg*, %struct.arg** %x5, align 4
  %call1 = call i32 @eval(%struct.arg* %6)
  %add = add nsw i32 %call, %call1
  br label %cond.end

cond.false:                                       ; preds = %entry
  %7 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %call2 = call i32 @B(%struct.arg* %7)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %add, %cond.true ], [ %call2, %cond.false ]
  ret i32 %cond
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %k = alloca i32, align 4
  %.compoundliteral = alloca %struct.arg, align 4
  %.compoundliteral3 = alloca %struct.arg, align 4
  %.compoundliteral8 = alloca %struct.arg, align 4
  %.compoundliteral14 = alloca %struct.arg, align 4
  %.compoundliteral21 = alloca %struct.arg, align 4
  %.compoundliteral29 = alloca %struct.arg, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  %0 = load i32, i32* %argc.addr, align 4
  %cmp = icmp eq i32 %0, 2
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i8**, i8*** %argv.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 1
  %2 = load i8*, i8** %arrayidx, align 4
  %call = call i32 @strtol(i8* %2, i8** null, i32 0)
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ 10, %cond.false ]
  store i32 %cond, i32* %k, align 4
  %fn = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 0
  %fn1 = bitcast {}** %fn to i32 (%struct.arg*)**
  store i32 (%struct.arg*)* @B, i32 (%struct.arg*)** %fn1, align 4
  %k2 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 1
  store i32* %k, i32** %k2, align 4
  %x1 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 2
  %3 = bitcast %struct.arg* %.compoundliteral3 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %3, i8 0, i64 28, i1 false)
  %fn4 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral3, i32 0, i32 0
  %fn5 = bitcast {}** %fn4 to i32 (%struct.arg*)**
  store i32 (%struct.arg*)* @f1, i32 (%struct.arg*)** %fn5, align 4
  store %struct.arg* %.compoundliteral3, %struct.arg** %x1, align 4
  %x2 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 3
  %4 = bitcast %struct.arg* %.compoundliteral8 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %4, i8 0, i64 28, i1 false)
  %fn9 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral8, i32 0, i32 0
  %fn10 = bitcast {}** %fn9 to i32 (%struct.arg*)**
  store i32 (%struct.arg*)* @f_1, i32 (%struct.arg*)** %fn10, align 4
  store %struct.arg* %.compoundliteral8, %struct.arg** %x2, align 4
  %x3 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 4
  %5 = bitcast %struct.arg* %.compoundliteral14 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %5, i8 0, i64 28, i1 false)
  %fn15 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral14, i32 0, i32 0
  %fn16 = bitcast {}** %fn15 to i32 (%struct.arg*)**
  store i32 (%struct.arg*)* @f_1, i32 (%struct.arg*)** %fn16, align 4
  store %struct.arg* %.compoundliteral14, %struct.arg** %x3, align 4
  %x4 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 5
  %6 = bitcast %struct.arg* %.compoundliteral21 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %6, i8 0, i64 28, i1 false)
  %fn22 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral21, i32 0, i32 0
  %fn23 = bitcast {}** %fn22 to i32 (%struct.arg*)**
  store i32 (%struct.arg*)* @f1, i32 (%struct.arg*)** %fn23, align 4
  store %struct.arg* %.compoundliteral21, %struct.arg** %x4, align 4
  %x5 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 6
  %7 = bitcast %struct.arg* %.compoundliteral29 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %7, i8 0, i64 28, i1 false)
  %fn30 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral29, i32 0, i32 0
  %fn31 = bitcast {}** %fn30 to i32 (%struct.arg*)**
  store i32 (%struct.arg*)* @f0, i32 (%struct.arg*)** %fn31, align 4
  store %struct.arg* %.compoundliteral29, %struct.arg** %x5, align 4
  %call38 = call i32 @A(%struct.arg* %.compoundliteral)
  %call39 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %call38)
  ret i32 0
}

declare i32 @strtol(i8* %0, i8** %1, i32 %2) #1

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly %0, i8 %1, i64 %2, i1 immarg %3) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn writeonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %2, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %call = call i32 @A(%struct.arg* %.compoundliteral)
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for B()

; entering Souper's runOnFunction() for A()

; ModuleID = './Man_or_boy_test.c.bc'
source_filename = "./Man_or_boy_test.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.arg = type { {}*, i32*, %struct.arg*, %struct.arg*, %struct.arg*, %struct.arg*, %struct.arg* }

@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden i32 @f_1(%struct.arg* %_) #0 {
entry:
  %_.addr = alloca %struct.arg*, align 4
  store %struct.arg* %_, %struct.arg** %_.addr, align 4
  ret i32 -1
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @f0(%struct.arg* %_) #0 {
entry:
  %_.addr = alloca %struct.arg*, align 4
  store %struct.arg* %_, %struct.arg** %_.addr, align 4
  ret i32 0
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @f1(%struct.arg* %_) #0 {
entry:
  %_.addr = alloca %struct.arg*, align 4
  store %struct.arg* %_, %struct.arg** %_.addr, align 4
  ret i32 1
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @eval(%struct.arg* %a) #0 {
entry:
  %a.addr = alloca %struct.arg*, align 4
  store %struct.arg* %a, %struct.arg** %a.addr, align 4
  %0 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %fn = getelementptr inbounds %struct.arg, %struct.arg* %0, i32 0, i32 0
  %fn1 = bitcast {}** %fn to i32 (%struct.arg*)**
  %1 = load i32 (%struct.arg*)*, i32 (%struct.arg*)** %fn1, align 4
  %2 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %call = call i32 %1(%struct.arg* %2)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @B(%struct.arg* %a) #0 {
entry:
  %a.addr = alloca %struct.arg*, align 4
  %k = alloca i32, align 4
  %.compoundliteral = alloca %struct.arg, align 4
  store %struct.arg* %a, %struct.arg** %a.addr, align 4
  %0 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %k1 = getelementptr inbounds %struct.arg, %struct.arg* %0, i32 0, i32 1
  %1 = load i32*, i32** %k1, align 4
  %2 = load i32, i32* %1, align 4
  %sub = sub nsw i32 %2, 1
  store i32 %sub, i32* %1, align 4
  store i32 %sub, i32* %k, align 4
  %fn = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 0
  %fn2 = bitcast {}** %fn to i32 (%struct.arg*)**
  store i32 (%struct.arg*)* @B, i32 (%struct.arg*)** %fn2, align 4
  %k3 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 1
  store i32* %k, i32** %k3, align 4
  %x1 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 2
  %3 = load %struct.arg*, %struct.arg** %a.addr, align 4
  store %struct.arg* %3, %struct.arg** %x1, align 4
  %x2 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 3
  %4 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %x14 = getelementptr inbounds %struct.arg, %struct.arg* %4, i32 0, i32 2
  %5 = load %struct.arg*, %struct.arg** %x14, align 4
  store %struct.arg* %5, %struct.arg** %x2, align 4
  %x3 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 4
  %6 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %x25 = getelementptr inbounds %struct.arg, %struct.arg* %6, i32 0, i32 3
  %7 = load %struct.arg*, %struct.arg** %x25, align 4
  store %struct.arg* %7, %struct.arg** %x3, align 4
  %x4 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 5
  %8 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %x36 = getelementptr inbounds %struct.arg, %struct.arg* %8, i32 0, i32 4
  %9 = load %struct.arg*, %struct.arg** %x36, align 4
  store %struct.arg* %9, %struct.arg** %x4, align 4
  %x5 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 6
  %10 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %x47 = getelementptr inbounds %struct.arg, %struct.arg* %10, i32 0, i32 5
  %11 = load %struct.arg*, %struct.arg** %x47, align 4
  store %struct.arg* %11, %struct.arg** %x5, align 4
  %call = call i32 @A(%struct.arg* %.compoundliteral)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @A(%struct.arg* %a) #0 {
entry:
  %a.addr = alloca %struct.arg*, align 4
  store %struct.arg* %a, %struct.arg** %a.addr, align 4
  %0 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %k = getelementptr inbounds %struct.arg, %struct.arg* %0, i32 0, i32 1
  %1 = load i32*, i32** %k, align 4
  %2 = load i32, i32* %1, align 4
  %cmp = icmp sle i32 %2, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %x4 = getelementptr inbounds %struct.arg, %struct.arg* %3, i32 0, i32 5
  %4 = load %struct.arg*, %struct.arg** %x4, align 4
  %call = call i32 @eval(%struct.arg* %4)
  %5 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %x5 = getelementptr inbounds %struct.arg, %struct.arg* %5, i32 0, i32 6
  %6 = load %struct.arg*, %struct.arg** %x5, align 4
  %call1 = call i32 @eval(%struct.arg* %6)
  %add = add nsw i32 %call, %call1
  br label %cond.end

cond.false:                                       ; preds = %entry
  %7 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %call2 = call i32 @B(%struct.arg* %7)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %add, %cond.true ], [ %call2, %cond.false ]
  ret i32 %cond
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %k = alloca i32, align 4
  %.compoundliteral = alloca %struct.arg, align 4
  %.compoundliteral3 = alloca %struct.arg, align 4
  %.compoundliteral8 = alloca %struct.arg, align 4
  %.compoundliteral14 = alloca %struct.arg, align 4
  %.compoundliteral21 = alloca %struct.arg, align 4
  %.compoundliteral29 = alloca %struct.arg, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  %0 = load i32, i32* %argc.addr, align 4
  %cmp = icmp eq i32 %0, 2
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i8**, i8*** %argv.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 1
  %2 = load i8*, i8** %arrayidx, align 4
  %call = call i32 @strtol(i8* %2, i8** null, i32 0)
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ 10, %cond.false ]
  store i32 %cond, i32* %k, align 4
  %fn = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 0
  %fn1 = bitcast {}** %fn to i32 (%struct.arg*)**
  store i32 (%struct.arg*)* @B, i32 (%struct.arg*)** %fn1, align 4
  %k2 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 1
  store i32* %k, i32** %k2, align 4
  %x1 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 2
  %3 = bitcast %struct.arg* %.compoundliteral3 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %3, i8 0, i64 28, i1 false)
  %fn4 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral3, i32 0, i32 0
  %fn5 = bitcast {}** %fn4 to i32 (%struct.arg*)**
  store i32 (%struct.arg*)* @f1, i32 (%struct.arg*)** %fn5, align 4
  store %struct.arg* %.compoundliteral3, %struct.arg** %x1, align 4
  %x2 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 3
  %4 = bitcast %struct.arg* %.compoundliteral8 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %4, i8 0, i64 28, i1 false)
  %fn9 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral8, i32 0, i32 0
  %fn10 = bitcast {}** %fn9 to i32 (%struct.arg*)**
  store i32 (%struct.arg*)* @f_1, i32 (%struct.arg*)** %fn10, align 4
  store %struct.arg* %.compoundliteral8, %struct.arg** %x2, align 4
  %x3 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 4
  %5 = bitcast %struct.arg* %.compoundliteral14 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %5, i8 0, i64 28, i1 false)
  %fn15 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral14, i32 0, i32 0
  %fn16 = bitcast {}** %fn15 to i32 (%struct.arg*)**
  store i32 (%struct.arg*)* @f_1, i32 (%struct.arg*)** %fn16, align 4
  store %struct.arg* %.compoundliteral14, %struct.arg** %x3, align 4
  %x4 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 5
  %6 = bitcast %struct.arg* %.compoundliteral21 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %6, i8 0, i64 28, i1 false)
  %fn22 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral21, i32 0, i32 0
  %fn23 = bitcast {}** %fn22 to i32 (%struct.arg*)**
  store i32 (%struct.arg*)* @f1, i32 (%struct.arg*)** %fn23, align 4
  store %struct.arg* %.compoundliteral21, %struct.arg** %x4, align 4
  %x5 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 6
  %7 = bitcast %struct.arg* %.compoundliteral29 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %7, i8 0, i64 28, i1 false)
  %fn30 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral29, i32 0, i32 0
  %fn31 = bitcast {}** %fn30 to i32 (%struct.arg*)**
  store i32 (%struct.arg*)* @f0, i32 (%struct.arg*)** %fn31, align 4
  store %struct.arg* %.compoundliteral29, %struct.arg** %x5, align 4
  %call38 = call i32 @A(%struct.arg* %.compoundliteral)
  %call39 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %call38)
  ret i32 0
}

declare i32 @strtol(i8* %0, i8** %1, i32 %2) #1

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly %0, i8 %1, i64 %2, i1 immarg %3) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn writeonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sle i32 %2, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle %0, 0:i32
infer %1

; *****
; For LLVM instruction:
;  %call = call i32 @eval(%struct.arg* %4)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call1 = call i32 @eval(%struct.arg* %6)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %call, %call1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %call2 = call i32 @B(%struct.arg* %7)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cond = phi i32 [ %add, %cond.true ], [ %call2, %cond.false ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = addnsw %1, %2
%4:i32 = var
%5:i32 = phi %0, %3, %4
infer %5
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle %0, 0:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
ConstantSynthesis: solver returns error on first query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = addnsw %1, %2
%4:i32 = var
%5:i32 = phi %0, %3, %4
infer %5


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2013265920
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for A()

; entering Souper's runOnFunction() for __main_argc_argv()

; ModuleID = './Man_or_boy_test.c.bc'
source_filename = "./Man_or_boy_test.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.arg = type { {}*, i32*, %struct.arg*, %struct.arg*, %struct.arg*, %struct.arg*, %struct.arg* }

@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden i32 @f_1(%struct.arg* %_) #0 {
entry:
  %_.addr = alloca %struct.arg*, align 4
  store %struct.arg* %_, %struct.arg** %_.addr, align 4
  ret i32 -1
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @f0(%struct.arg* %_) #0 {
entry:
  %_.addr = alloca %struct.arg*, align 4
  store %struct.arg* %_, %struct.arg** %_.addr, align 4
  ret i32 0
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @f1(%struct.arg* %_) #0 {
entry:
  %_.addr = alloca %struct.arg*, align 4
  store %struct.arg* %_, %struct.arg** %_.addr, align 4
  ret i32 1
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @eval(%struct.arg* %a) #0 {
entry:
  %a.addr = alloca %struct.arg*, align 4
  store %struct.arg* %a, %struct.arg** %a.addr, align 4
  %0 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %fn = getelementptr inbounds %struct.arg, %struct.arg* %0, i32 0, i32 0
  %fn1 = bitcast {}** %fn to i32 (%struct.arg*)**
  %1 = load i32 (%struct.arg*)*, i32 (%struct.arg*)** %fn1, align 4
  %2 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %call = call i32 %1(%struct.arg* %2)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @B(%struct.arg* %a) #0 {
entry:
  %a.addr = alloca %struct.arg*, align 4
  %k = alloca i32, align 4
  %.compoundliteral = alloca %struct.arg, align 4
  store %struct.arg* %a, %struct.arg** %a.addr, align 4
  %0 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %k1 = getelementptr inbounds %struct.arg, %struct.arg* %0, i32 0, i32 1
  %1 = load i32*, i32** %k1, align 4
  %2 = load i32, i32* %1, align 4
  %sub = sub nsw i32 %2, 1
  store i32 %sub, i32* %1, align 4
  store i32 %sub, i32* %k, align 4
  %fn = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 0
  %fn2 = bitcast {}** %fn to i32 (%struct.arg*)**
  store i32 (%struct.arg*)* @B, i32 (%struct.arg*)** %fn2, align 4
  %k3 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 1
  store i32* %k, i32** %k3, align 4
  %x1 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 2
  %3 = load %struct.arg*, %struct.arg** %a.addr, align 4
  store %struct.arg* %3, %struct.arg** %x1, align 4
  %x2 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 3
  %4 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %x14 = getelementptr inbounds %struct.arg, %struct.arg* %4, i32 0, i32 2
  %5 = load %struct.arg*, %struct.arg** %x14, align 4
  store %struct.arg* %5, %struct.arg** %x2, align 4
  %x3 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 4
  %6 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %x25 = getelementptr inbounds %struct.arg, %struct.arg* %6, i32 0, i32 3
  %7 = load %struct.arg*, %struct.arg** %x25, align 4
  store %struct.arg* %7, %struct.arg** %x3, align 4
  %x4 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 5
  %8 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %x36 = getelementptr inbounds %struct.arg, %struct.arg* %8, i32 0, i32 4
  %9 = load %struct.arg*, %struct.arg** %x36, align 4
  store %struct.arg* %9, %struct.arg** %x4, align 4
  %x5 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 6
  %10 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %x47 = getelementptr inbounds %struct.arg, %struct.arg* %10, i32 0, i32 5
  %11 = load %struct.arg*, %struct.arg** %x47, align 4
  store %struct.arg* %11, %struct.arg** %x5, align 4
  %call = call i32 @A(%struct.arg* %.compoundliteral)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @A(%struct.arg* %a) #0 {
entry:
  %a.addr = alloca %struct.arg*, align 4
  store %struct.arg* %a, %struct.arg** %a.addr, align 4
  %0 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %k = getelementptr inbounds %struct.arg, %struct.arg* %0, i32 0, i32 1
  %1 = load i32*, i32** %k, align 4
  %2 = load i32, i32* %1, align 4
  %cmp = icmp sle i32 %2, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %x4 = getelementptr inbounds %struct.arg, %struct.arg* %3, i32 0, i32 5
  %4 = load %struct.arg*, %struct.arg** %x4, align 4
  %call = call i32 @eval(%struct.arg* %4)
  %5 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %x5 = getelementptr inbounds %struct.arg, %struct.arg* %5, i32 0, i32 6
  %6 = load %struct.arg*, %struct.arg** %x5, align 4
  %call1 = call i32 @eval(%struct.arg* %6)
  %add = add nsw i32 %call, %call1
  br label %cond.end

cond.false:                                       ; preds = %entry
  %7 = load %struct.arg*, %struct.arg** %a.addr, align 4
  %call2 = call i32 @B(%struct.arg* %7)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %add, %cond.true ], [ %call2, %cond.false ]
  ret i32 %cond
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %k = alloca i32, align 4
  %.compoundliteral = alloca %struct.arg, align 4
  %.compoundliteral3 = alloca %struct.arg, align 4
  %.compoundliteral8 = alloca %struct.arg, align 4
  %.compoundliteral14 = alloca %struct.arg, align 4
  %.compoundliteral21 = alloca %struct.arg, align 4
  %.compoundliteral29 = alloca %struct.arg, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  %0 = load i32, i32* %argc.addr, align 4
  %cmp = icmp eq i32 %0, 2
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i8**, i8*** %argv.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 1
  %2 = load i8*, i8** %arrayidx, align 4
  %call = call i32 @strtol(i8* %2, i8** null, i32 0)
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ 10, %cond.false ]
  store i32 %cond, i32* %k, align 4
  %fn = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 0
  %fn1 = bitcast {}** %fn to i32 (%struct.arg*)**
  store i32 (%struct.arg*)* @B, i32 (%struct.arg*)** %fn1, align 4
  %k2 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 1
  store i32* %k, i32** %k2, align 4
  %x1 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 2
  %3 = bitcast %struct.arg* %.compoundliteral3 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %3, i8 0, i64 28, i1 false)
  %fn4 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral3, i32 0, i32 0
  %fn5 = bitcast {}** %fn4 to i32 (%struct.arg*)**
  store i32 (%struct.arg*)* @f1, i32 (%struct.arg*)** %fn5, align 4
  store %struct.arg* %.compoundliteral3, %struct.arg** %x1, align 4
  %x2 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 3
  %4 = bitcast %struct.arg* %.compoundliteral8 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %4, i8 0, i64 28, i1 false)
  %fn9 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral8, i32 0, i32 0
  %fn10 = bitcast {}** %fn9 to i32 (%struct.arg*)**
  store i32 (%struct.arg*)* @f_1, i32 (%struct.arg*)** %fn10, align 4
  store %struct.arg* %.compoundliteral8, %struct.arg** %x2, align 4
  %x3 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 4
  %5 = bitcast %struct.arg* %.compoundliteral14 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %5, i8 0, i64 28, i1 false)
  %fn15 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral14, i32 0, i32 0
  %fn16 = bitcast {}** %fn15 to i32 (%struct.arg*)**
  store i32 (%struct.arg*)* @f_1, i32 (%struct.arg*)** %fn16, align 4
  store %struct.arg* %.compoundliteral14, %struct.arg** %x3, align 4
  %x4 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 5
  %6 = bitcast %struct.arg* %.compoundliteral21 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %6, i8 0, i64 28, i1 false)
  %fn22 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral21, i32 0, i32 0
  %fn23 = bitcast {}** %fn22 to i32 (%struct.arg*)**
  store i32 (%struct.arg*)* @f1, i32 (%struct.arg*)** %fn23, align 4
  store %struct.arg* %.compoundliteral21, %struct.arg** %x4, align 4
  %x5 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral, i32 0, i32 6
  %7 = bitcast %struct.arg* %.compoundliteral29 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %7, i8 0, i64 28, i1 false)
  %fn30 = getelementptr inbounds %struct.arg, %struct.arg* %.compoundliteral29, i32 0, i32 0
  %fn31 = bitcast {}** %fn30 to i32 (%struct.arg*)**
  store i32 (%struct.arg*)* @f0, i32 (%struct.arg*)** %fn31, align 4
  store %struct.arg* %.compoundliteral29, %struct.arg** %x5, align 4
  %call38 = call i32 @A(%struct.arg* %.compoundliteral)
  %call39 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %call38)
  ret i32 0
}

declare i32 @strtol(i8* %0, i8** %1, i32 %2) #1

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly %0, i8 %1, i64 %2, i1 immarg %3) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn writeonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %argc.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %0, 2
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call = call i32 @strtol(i8* %2, i8** null, i32 0)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cond = phi i32 [ %call, %cond.true ], [ 10, %cond.false ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = phi %0, %1, 10:i32
infer %2

; *****
; For LLVM instruction:
;  %call38 = call i32 @A(%struct.arg* %.compoundliteral)
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 2:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = phi %0, %1, 10:i32
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 10
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -11
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for __main_argc_argv()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
