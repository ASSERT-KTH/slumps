
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for main()

; ModuleID = './Perfect_shuffle.c.bc'
source_filename = "./Perfect_shuffle.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque

@kDecks = hidden constant [7 x i32] [i32 8, i32 24, i32 52, i32 100, i32 1020, i32 1024, i32 10000], align 16
@stderr = external constant %struct._IO_FILE*, align 4
@.str = private unnamed_addr constant [25 x i8] c"Error: malloc() failed!\0A\00", align 1
@.str.1 = private unnamed_addr constant [41 x i8] c"Cards count: %d, shuffles required: %d.\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %nCards = alloca i32, align 4
  %nShuffles = alloca i32, align 4
  %deck = alloca i32*, align 4
  store i32 0, i32* %retval, align 4
  store i32* null, i32** %deck, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 7
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [7 x i32], [7 x i32]* @kDecks, i32 0, i32 %1
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %nCards, align 4
  %3 = load i32, i32* %nCards, align 4
  %call = call i32 @CreateDeck(i32** %deck, i32 %3)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.body
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i32 0, i32 0))
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %for.body
  %5 = load i32*, i32** %deck, align 4
  %6 = load i32, i32* %nCards, align 4
  call void @InitDeck(i32* %5, i32 %6)
  store i32 0, i32* %nShuffles, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end
  %7 = load i32*, i32** %deck, align 4
  %8 = load i32, i32* %nCards, align 4
  %call2 = call i32 @ShuffleDeck(i32* %7, i32 %8)
  %9 = load i32, i32* %nShuffles, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %nShuffles, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %10 = load i32*, i32** %deck, align 4
  %11 = load i32, i32* %nCards, align 4
  %call3 = call i32 @InitedDeck(i32* %10, i32 %11)
  %tobool4 = icmp ne i32 %call3, 0
  %lnot = xor i1 %tobool4, true
  br i1 %lnot, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %12 = load i32, i32* %nCards, align 4
  %13 = load i32, i32* %nShuffles, align 4
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.1, i32 0, i32 0), i32 %12, i32 %13)
  call void @FreeDeck(i32** %deck)
  br label %for.inc

for.inc:                                          ; preds = %do.end
  %14 = load i32, i32* %i, align 4
  %inc6 = add nsw i32 %14, 1
  store i32 %inc6, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  %15 = load i32, i32* %retval, align 4
  ret i32 %15
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @CreateDeck(i32** %deck, i32 %nCards) #0 {
entry:
  %deck.addr = alloca i32**, align 4
  %nCards.addr = alloca i32, align 4
  %tmp = alloca i32*, align 4
  store i32** %deck, i32*** %deck.addr, align 4
  store i32 %nCards, i32* %nCards.addr, align 4
  store i32* null, i32** %tmp, align 4
  %0 = load i32**, i32*** %deck.addr, align 4
  %cmp = icmp ne i32** %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %nCards.addr, align 4
  %mul = mul i32 %1, 4
  %call = call noalias i8* @malloc(i32 %mul)
  %2 = bitcast i8* %call to i32*
  store i32* %2, i32** %tmp, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load i32*, i32** %tmp, align 4
  %cmp1 = icmp ne i32* %3, null
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %4 = load i32*, i32** %tmp, align 4
  %5 = load i32**, i32*** %deck.addr, align 4
  store i32* %4, i32** %5, align 4
  %cmp2 = icmp ne i32* %4, null
  %conv = zext i1 %cmp2 to i32
  br label %cond.end

cond.false:                                       ; preds = %if.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv, %cond.true ], [ 0, %cond.false ]
  ret i32 %cond
}

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @InitDeck(i32* %deck, i32 %nCards) #0 {
entry:
  %deck.addr = alloca i32*, align 4
  %nCards.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32* %deck, i32** %deck.addr, align 4
  store i32 %nCards, i32* %nCards.addr, align 4
  %0 = load i32*, i32** %deck.addr, align 4
  %cmp = icmp ne i32* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %nCards.addr, align 4
  %cmp1 = icmp slt i32 %1, %2
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %4 = load i32*, i32** %deck.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %4, i32 %5
  store i32 %3, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @ShuffleDeck(i32* %deck, i32 %nCards) #0 {
entry:
  %retval = alloca i32, align 4
  %deck.addr = alloca i32*, align 4
  %nCards.addr = alloca i32, align 4
  %copy = alloca i32*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32* %deck, i32** %deck.addr, align 4
  store i32 %nCards, i32* %nCards.addr, align 4
  store i32* null, i32** %copy, align 4
  %0 = load i32*, i32** %deck.addr, align 4
  %1 = load i32, i32* %nCards.addr, align 4
  %call = call i32 @DuplicateDeck(i32** %copy, i32* %0, i32 %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %nCards.addr, align 4
  %div = sdiv i32 %3, 2
  %cmp = icmp slt i32 %2, %div
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32*, i32** %copy, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %4, i32 %5
  %6 = load i32, i32* %arrayidx, align 4
  %7 = load i32*, i32** %deck.addr, align 4
  %8 = load i32, i32* %j, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %7, i32 %8
  store i32 %6, i32* %arrayidx1, align 4
  %9 = load i32*, i32** %copy, align 4
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %nCards.addr, align 4
  %div2 = sdiv i32 %11, 2
  %add = add nsw i32 %10, %div2
  %arrayidx3 = getelementptr inbounds i32, i32* %9, i32 %add
  %12 = load i32, i32* %arrayidx3, align 4
  %13 = load i32*, i32** %deck.addr, align 4
  %14 = load i32, i32* %j, align 4
  %add4 = add nsw i32 %14, 1
  %arrayidx5 = getelementptr inbounds i32, i32* %13, i32 %add4
  store i32 %12, i32* %arrayidx5, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %15 = load i32, i32* %i, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %i, align 4
  %16 = load i32, i32* %j, align 4
  %add6 = add nsw i32 %16, 2
  store i32 %add6, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  call void @FreeDeck(i32** %copy)
  store i32 1, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.else, %for.end
  %17 = load i32, i32* %retval, align 4
  ret i32 %17
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @InitedDeck(i32* %deck, i32 %nCards) #0 {
entry:
  %retval = alloca i32, align 4
  %deck.addr = alloca i32*, align 4
  %nCards.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32* %deck, i32** %deck.addr, align 4
  store i32 %nCards, i32* %nCards.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %nCards.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32*, i32** %deck.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %2, i32 %3
  %4 = load i32, i32* %arrayidx, align 4
  %5 = load i32, i32* %i, align 4
  %cmp1 = icmp ne i32 %4, %5
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  %7 = load i32, i32* %retval, align 4
  ret i32 %7
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @FreeDeck(i32** %deck) #0 {
entry:
  %deck.addr = alloca i32**, align 4
  store i32** %deck, i32*** %deck.addr, align 4
  %0 = load i32**, i32*** %deck.addr, align 4
  %1 = load i32*, i32** %0, align 4
  %cmp = icmp ne i32* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i32**, i32*** %deck.addr, align 4
  %3 = load i32*, i32** %2, align 4
  %4 = bitcast i32* %3 to i8*
  call void @free(i8* %4)
  %5 = load i32**, i32*** %deck.addr, align 4
  store i32* null, i32** %5, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @DuplicateDeck(i32** %dest, i32* %orig, i32 %nCards) #0 {
entry:
  %retval = alloca i32, align 4
  %dest.addr = alloca i32**, align 4
  %orig.addr = alloca i32*, align 4
  %nCards.addr = alloca i32, align 4
  store i32** %dest, i32*** %dest.addr, align 4
  store i32* %orig, i32** %orig.addr, align 4
  store i32 %nCards, i32* %nCards.addr, align 4
  %0 = load i32*, i32** %orig.addr, align 4
  %cmp = icmp ne i32* %0, null
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %1 = load i32**, i32*** %dest.addr, align 4
  %2 = load i32, i32* %nCards.addr, align 4
  %call = call i32 @CreateDeck(i32** %1, i32 %2)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %3 = load i32**, i32*** %dest.addr, align 4
  %4 = load i32*, i32** %3, align 4
  %5 = bitcast i32* %4 to i8*
  %6 = load i32*, i32** %orig.addr, align 4
  %7 = bitcast i32* %6 to i8*
  %8 = load i32, i32* %nCards.addr, align 4
  %mul = mul i32 %8, 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %5, i8* align 4 %7, i32 %mul, i1 false)
  store i32 1, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %land.lhs.true, %entry
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4
  ret i32 %9
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare void @free(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, 7
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 7:i32
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %nCards, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 @CreateDeck(i32** %deck, i32 %3)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %call, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %nCards, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %nCards, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %nShuffles, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %9, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %nCards, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call3 = call i32 @InitedDeck(i32* %10, i32 %11)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool4 = icmp ne i32 %call3, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %lnot = xor i1 %tobool4, true
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i1 = xor 1:i1, %1
infer %2

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %nCards, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %nShuffles, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc6 = add nsw i32 %14, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 7:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i1 = xor 1:i1, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var
%1:i1 = ne 0:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()

; entering Souper's runOnFunction() for CreateDeck()

; ModuleID = './Perfect_shuffle.c.bc'
source_filename = "./Perfect_shuffle.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque

@kDecks = hidden constant [7 x i32] [i32 8, i32 24, i32 52, i32 100, i32 1020, i32 1024, i32 10000], align 16
@stderr = external constant %struct._IO_FILE*, align 4
@.str = private unnamed_addr constant [25 x i8] c"Error: malloc() failed!\0A\00", align 1
@.str.1 = private unnamed_addr constant [41 x i8] c"Cards count: %d, shuffles required: %d.\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %nCards = alloca i32, align 4
  %nShuffles = alloca i32, align 4
  %deck = alloca i32*, align 4
  store i32 0, i32* %retval, align 4
  store i32* null, i32** %deck, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 7
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [7 x i32], [7 x i32]* @kDecks, i32 0, i32 %1
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %nCards, align 4
  %3 = load i32, i32* %nCards, align 4
  %call = call i32 @CreateDeck(i32** %deck, i32 %3)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.body
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i32 0, i32 0))
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %for.body
  %5 = load i32*, i32** %deck, align 4
  %6 = load i32, i32* %nCards, align 4
  call void @InitDeck(i32* %5, i32 %6)
  store i32 0, i32* %nShuffles, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end
  %7 = load i32*, i32** %deck, align 4
  %8 = load i32, i32* %nCards, align 4
  %call2 = call i32 @ShuffleDeck(i32* %7, i32 %8)
  %9 = load i32, i32* %nShuffles, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %nShuffles, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %10 = load i32*, i32** %deck, align 4
  %11 = load i32, i32* %nCards, align 4
  %call3 = call i32 @InitedDeck(i32* %10, i32 %11)
  %tobool4 = icmp ne i32 %call3, 0
  %lnot = xor i1 %tobool4, true
  br i1 %lnot, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %12 = load i32, i32* %nCards, align 4
  %13 = load i32, i32* %nShuffles, align 4
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.1, i32 0, i32 0), i32 %12, i32 %13)
  call void @FreeDeck(i32** %deck)
  br label %for.inc

for.inc:                                          ; preds = %do.end
  %14 = load i32, i32* %i, align 4
  %inc6 = add nsw i32 %14, 1
  store i32 %inc6, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  %15 = load i32, i32* %retval, align 4
  ret i32 %15
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @CreateDeck(i32** %deck, i32 %nCards) #0 {
entry:
  %deck.addr = alloca i32**, align 4
  %nCards.addr = alloca i32, align 4
  %tmp = alloca i32*, align 4
  store i32** %deck, i32*** %deck.addr, align 4
  store i32 %nCards, i32* %nCards.addr, align 4
  store i32* null, i32** %tmp, align 4
  %0 = load i32**, i32*** %deck.addr, align 4
  %cmp = icmp ne i32** %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %nCards.addr, align 4
  %mul = mul i32 %1, 4
  %call = call noalias i8* @malloc(i32 %mul)
  %2 = bitcast i8* %call to i32*
  store i32* %2, i32** %tmp, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load i32*, i32** %tmp, align 4
  %cmp1 = icmp ne i32* %3, null
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %4 = load i32*, i32** %tmp, align 4
  %5 = load i32**, i32*** %deck.addr, align 4
  store i32* %4, i32** %5, align 4
  %cmp2 = icmp ne i32* %4, null
  %conv = zext i1 %cmp2 to i32
  br label %cond.end

cond.false:                                       ; preds = %if.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv, %cond.true ], [ 0, %cond.false ]
  ret i32 %cond
}

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @InitDeck(i32* %deck, i32 %nCards) #0 {
entry:
  %deck.addr = alloca i32*, align 4
  %nCards.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32* %deck, i32** %deck.addr, align 4
  store i32 %nCards, i32* %nCards.addr, align 4
  %0 = load i32*, i32** %deck.addr, align 4
  %cmp = icmp ne i32* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %nCards.addr, align 4
  %cmp1 = icmp slt i32 %1, %2
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %4 = load i32*, i32** %deck.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %4, i32 %5
  store i32 %3, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @ShuffleDeck(i32* %deck, i32 %nCards) #0 {
entry:
  %retval = alloca i32, align 4
  %deck.addr = alloca i32*, align 4
  %nCards.addr = alloca i32, align 4
  %copy = alloca i32*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32* %deck, i32** %deck.addr, align 4
  store i32 %nCards, i32* %nCards.addr, align 4
  store i32* null, i32** %copy, align 4
  %0 = load i32*, i32** %deck.addr, align 4
  %1 = load i32, i32* %nCards.addr, align 4
  %call = call i32 @DuplicateDeck(i32** %copy, i32* %0, i32 %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %nCards.addr, align 4
  %div = sdiv i32 %3, 2
  %cmp = icmp slt i32 %2, %div
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32*, i32** %copy, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %4, i32 %5
  %6 = load i32, i32* %arrayidx, align 4
  %7 = load i32*, i32** %deck.addr, align 4
  %8 = load i32, i32* %j, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %7, i32 %8
  store i32 %6, i32* %arrayidx1, align 4
  %9 = load i32*, i32** %copy, align 4
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %nCards.addr, align 4
  %div2 = sdiv i32 %11, 2
  %add = add nsw i32 %10, %div2
  %arrayidx3 = getelementptr inbounds i32, i32* %9, i32 %add
  %12 = load i32, i32* %arrayidx3, align 4
  %13 = load i32*, i32** %deck.addr, align 4
  %14 = load i32, i32* %j, align 4
  %add4 = add nsw i32 %14, 1
  %arrayidx5 = getelementptr inbounds i32, i32* %13, i32 %add4
  store i32 %12, i32* %arrayidx5, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %15 = load i32, i32* %i, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %i, align 4
  %16 = load i32, i32* %j, align 4
  %add6 = add nsw i32 %16, 2
  store i32 %add6, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  call void @FreeDeck(i32** %copy)
  store i32 1, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.else, %for.end
  %17 = load i32, i32* %retval, align 4
  ret i32 %17
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @InitedDeck(i32* %deck, i32 %nCards) #0 {
entry:
  %retval = alloca i32, align 4
  %deck.addr = alloca i32*, align 4
  %nCards.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32* %deck, i32** %deck.addr, align 4
  store i32 %nCards, i32* %nCards.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %nCards.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32*, i32** %deck.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %2, i32 %3
  %4 = load i32, i32* %arrayidx, align 4
  %5 = load i32, i32* %i, align 4
  %cmp1 = icmp ne i32 %4, %5
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  %7 = load i32, i32* %retval, align 4
  ret i32 %7
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @FreeDeck(i32** %deck) #0 {
entry:
  %deck.addr = alloca i32**, align 4
  store i32** %deck, i32*** %deck.addr, align 4
  %0 = load i32**, i32*** %deck.addr, align 4
  %1 = load i32*, i32** %0, align 4
  %cmp = icmp ne i32* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i32**, i32*** %deck.addr, align 4
  %3 = load i32*, i32** %2, align 4
  %4 = bitcast i32* %3 to i8*
  call void @free(i8* %4)
  %5 = load i32**, i32*** %deck.addr, align 4
  store i32* null, i32** %5, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @DuplicateDeck(i32** %dest, i32* %orig, i32 %nCards) #0 {
entry:
  %retval = alloca i32, align 4
  %dest.addr = alloca i32**, align 4
  %orig.addr = alloca i32*, align 4
  %nCards.addr = alloca i32, align 4
  store i32** %dest, i32*** %dest.addr, align 4
  store i32* %orig, i32** %orig.addr, align 4
  store i32 %nCards, i32* %nCards.addr, align 4
  %0 = load i32*, i32** %orig.addr, align 4
  %cmp = icmp ne i32* %0, null
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %1 = load i32**, i32*** %dest.addr, align 4
  %2 = load i32, i32* %nCards.addr, align 4
  %call = call i32 @CreateDeck(i32** %1, i32 %2)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %3 = load i32**, i32*** %dest.addr, align 4
  %4 = load i32*, i32** %3, align 4
  %5 = bitcast i32* %4 to i8*
  %6 = load i32*, i32** %orig.addr, align 4
  %7 = bitcast i32* %6 to i8*
  %8 = load i32, i32* %nCards.addr, align 4
  %mul = mul i32 %8, 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %5, i8* align 4 %7, i32 %mul, i1 false)
  store i32 1, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %land.lhs.true, %entry
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4
  ret i32 %9
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare void @free(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %cmp = icmp ne i32** %0, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %nCards.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul i32 %1, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp1 = icmp ne i32* %3, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp2 = icmp ne i32* %4, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv = zext i1 %cmp2 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %cond = phi i32 [ %conv, %cond.true ], [ 0, %cond.false ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i1 = ne 0:i32, %1
%3:i32 = zext %2
%4:i32 = phi %0, %3, 0:i32
infer %4
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i32 = zext %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i1 = ne 0:i32, %1
%3:i32 = zext %2
%4:i32 = phi %0, %3, 0:i32
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i32 = zext %1

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for CreateDeck()

; entering Souper's runOnFunction() for InitDeck()

; ModuleID = './Perfect_shuffle.c.bc'
source_filename = "./Perfect_shuffle.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque

@kDecks = hidden constant [7 x i32] [i32 8, i32 24, i32 52, i32 100, i32 1020, i32 1024, i32 10000], align 16
@stderr = external constant %struct._IO_FILE*, align 4
@.str = private unnamed_addr constant [25 x i8] c"Error: malloc() failed!\0A\00", align 1
@.str.1 = private unnamed_addr constant [41 x i8] c"Cards count: %d, shuffles required: %d.\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %nCards = alloca i32, align 4
  %nShuffles = alloca i32, align 4
  %deck = alloca i32*, align 4
  store i32 0, i32* %retval, align 4
  store i32* null, i32** %deck, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 7
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [7 x i32], [7 x i32]* @kDecks, i32 0, i32 %1
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %nCards, align 4
  %3 = load i32, i32* %nCards, align 4
  %call = call i32 @CreateDeck(i32** %deck, i32 %3)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.body
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i32 0, i32 0))
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %for.body
  %5 = load i32*, i32** %deck, align 4
  %6 = load i32, i32* %nCards, align 4
  call void @InitDeck(i32* %5, i32 %6)
  store i32 0, i32* %nShuffles, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end
  %7 = load i32*, i32** %deck, align 4
  %8 = load i32, i32* %nCards, align 4
  %call2 = call i32 @ShuffleDeck(i32* %7, i32 %8)
  %9 = load i32, i32* %nShuffles, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %nShuffles, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %10 = load i32*, i32** %deck, align 4
  %11 = load i32, i32* %nCards, align 4
  %call3 = call i32 @InitedDeck(i32* %10, i32 %11)
  %tobool4 = icmp ne i32 %call3, 0
  %lnot = xor i1 %tobool4, true
  br i1 %lnot, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %12 = load i32, i32* %nCards, align 4
  %13 = load i32, i32* %nShuffles, align 4
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.1, i32 0, i32 0), i32 %12, i32 %13)
  call void @FreeDeck(i32** %deck)
  br label %for.inc

for.inc:                                          ; preds = %do.end
  %14 = load i32, i32* %i, align 4
  %inc6 = add nsw i32 %14, 1
  store i32 %inc6, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  %15 = load i32, i32* %retval, align 4
  ret i32 %15
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @CreateDeck(i32** %deck, i32 %nCards) #0 {
entry:
  %deck.addr = alloca i32**, align 4
  %nCards.addr = alloca i32, align 4
  %tmp = alloca i32*, align 4
  store i32** %deck, i32*** %deck.addr, align 4
  store i32 %nCards, i32* %nCards.addr, align 4
  store i32* null, i32** %tmp, align 4
  %0 = load i32**, i32*** %deck.addr, align 4
  %cmp = icmp ne i32** %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %nCards.addr, align 4
  %mul = mul i32 %1, 4
  %call = call noalias i8* @malloc(i32 %mul)
  %2 = bitcast i8* %call to i32*
  store i32* %2, i32** %tmp, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load i32*, i32** %tmp, align 4
  %cmp1 = icmp ne i32* %3, null
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %4 = load i32*, i32** %tmp, align 4
  %5 = load i32**, i32*** %deck.addr, align 4
  store i32* %4, i32** %5, align 4
  %cmp2 = icmp ne i32* %4, null
  %conv = zext i1 %cmp2 to i32
  br label %cond.end

cond.false:                                       ; preds = %if.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv, %cond.true ], [ 0, %cond.false ]
  ret i32 %cond
}

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @InitDeck(i32* %deck, i32 %nCards) #0 {
entry:
  %deck.addr = alloca i32*, align 4
  %nCards.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32* %deck, i32** %deck.addr, align 4
  store i32 %nCards, i32* %nCards.addr, align 4
  %0 = load i32*, i32** %deck.addr, align 4
  %cmp = icmp ne i32* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %nCards.addr, align 4
  %cmp1 = icmp slt i32 %1, %2
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %4 = load i32*, i32** %deck.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %4, i32 %5
  store i32 %3, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @ShuffleDeck(i32* %deck, i32 %nCards) #0 {
entry:
  %retval = alloca i32, align 4
  %deck.addr = alloca i32*, align 4
  %nCards.addr = alloca i32, align 4
  %copy = alloca i32*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32* %deck, i32** %deck.addr, align 4
  store i32 %nCards, i32* %nCards.addr, align 4
  store i32* null, i32** %copy, align 4
  %0 = load i32*, i32** %deck.addr, align 4
  %1 = load i32, i32* %nCards.addr, align 4
  %call = call i32 @DuplicateDeck(i32** %copy, i32* %0, i32 %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %nCards.addr, align 4
  %div = sdiv i32 %3, 2
  %cmp = icmp slt i32 %2, %div
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32*, i32** %copy, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %4, i32 %5
  %6 = load i32, i32* %arrayidx, align 4
  %7 = load i32*, i32** %deck.addr, align 4
  %8 = load i32, i32* %j, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %7, i32 %8
  store i32 %6, i32* %arrayidx1, align 4
  %9 = load i32*, i32** %copy, align 4
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %nCards.addr, align 4
  %div2 = sdiv i32 %11, 2
  %add = add nsw i32 %10, %div2
  %arrayidx3 = getelementptr inbounds i32, i32* %9, i32 %add
  %12 = load i32, i32* %arrayidx3, align 4
  %13 = load i32*, i32** %deck.addr, align 4
  %14 = load i32, i32* %j, align 4
  %add4 = add nsw i32 %14, 1
  %arrayidx5 = getelementptr inbounds i32, i32* %13, i32 %add4
  store i32 %12, i32* %arrayidx5, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %15 = load i32, i32* %i, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %i, align 4
  %16 = load i32, i32* %j, align 4
  %add6 = add nsw i32 %16, 2
  store i32 %add6, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  call void @FreeDeck(i32** %copy)
  store i32 1, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.else, %for.end
  %17 = load i32, i32* %retval, align 4
  ret i32 %17
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @InitedDeck(i32* %deck, i32 %nCards) #0 {
entry:
  %retval = alloca i32, align 4
  %deck.addr = alloca i32*, align 4
  %nCards.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32* %deck, i32** %deck.addr, align 4
  store i32 %nCards, i32* %nCards.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %nCards.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32*, i32** %deck.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %2, i32 %3
  %4 = load i32, i32* %arrayidx, align 4
  %5 = load i32, i32* %i, align 4
  %cmp1 = icmp ne i32 %4, %5
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  %7 = load i32, i32* %retval, align 4
  ret i32 %7
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @FreeDeck(i32** %deck) #0 {
entry:
  %deck.addr = alloca i32**, align 4
  store i32** %deck, i32*** %deck.addr, align 4
  %0 = load i32**, i32*** %deck.addr, align 4
  %1 = load i32*, i32** %0, align 4
  %cmp = icmp ne i32* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i32**, i32*** %deck.addr, align 4
  %3 = load i32*, i32** %2, align 4
  %4 = bitcast i32* %3 to i8*
  call void @free(i8* %4)
  %5 = load i32**, i32*** %deck.addr, align 4
  store i32* null, i32** %5, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @DuplicateDeck(i32** %dest, i32* %orig, i32 %nCards) #0 {
entry:
  %retval = alloca i32, align 4
  %dest.addr = alloca i32**, align 4
  %orig.addr = alloca i32*, align 4
  %nCards.addr = alloca i32, align 4
  store i32** %dest, i32*** %dest.addr, align 4
  store i32* %orig, i32** %orig.addr, align 4
  store i32 %nCards, i32* %nCards.addr, align 4
  %0 = load i32*, i32** %orig.addr, align 4
  %cmp = icmp ne i32* %0, null
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %1 = load i32**, i32*** %dest.addr, align 4
  %2 = load i32, i32* %nCards.addr, align 4
  %call = call i32 @CreateDeck(i32** %1, i32 %2)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %3 = load i32**, i32*** %dest.addr, align 4
  %4 = load i32*, i32** %3, align 4
  %5 = bitcast i32* %4 to i8*
  %6 = load i32*, i32** %orig.addr, align 4
  %7 = bitcast i32* %6 to i8*
  %8 = load i32, i32* %nCards.addr, align 4
  %mul = mul i32 %8, 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %5, i8* align 4 %7, i32 %mul, i1 false)
  store i32 1, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %land.lhs.true, %entry
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4
  ret i32 %9
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare void @free(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %cmp = icmp ne i32* %0, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %nCards.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = icmp slt i32 %1, %2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %6, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for InitDeck()

; entering Souper's runOnFunction() for ShuffleDeck()

; ModuleID = './Perfect_shuffle.c.bc'
source_filename = "./Perfect_shuffle.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque

@kDecks = hidden constant [7 x i32] [i32 8, i32 24, i32 52, i32 100, i32 1020, i32 1024, i32 10000], align 16
@stderr = external constant %struct._IO_FILE*, align 4
@.str = private unnamed_addr constant [25 x i8] c"Error: malloc() failed!\0A\00", align 1
@.str.1 = private unnamed_addr constant [41 x i8] c"Cards count: %d, shuffles required: %d.\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %nCards = alloca i32, align 4
  %nShuffles = alloca i32, align 4
  %deck = alloca i32*, align 4
  store i32 0, i32* %retval, align 4
  store i32* null, i32** %deck, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 7
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [7 x i32], [7 x i32]* @kDecks, i32 0, i32 %1
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %nCards, align 4
  %3 = load i32, i32* %nCards, align 4
  %call = call i32 @CreateDeck(i32** %deck, i32 %3)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.body
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i32 0, i32 0))
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %for.body
  %5 = load i32*, i32** %deck, align 4
  %6 = load i32, i32* %nCards, align 4
  call void @InitDeck(i32* %5, i32 %6)
  store i32 0, i32* %nShuffles, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end
  %7 = load i32*, i32** %deck, align 4
  %8 = load i32, i32* %nCards, align 4
  %call2 = call i32 @ShuffleDeck(i32* %7, i32 %8)
  %9 = load i32, i32* %nShuffles, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %nShuffles, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %10 = load i32*, i32** %deck, align 4
  %11 = load i32, i32* %nCards, align 4
  %call3 = call i32 @InitedDeck(i32* %10, i32 %11)
  %tobool4 = icmp ne i32 %call3, 0
  %lnot = xor i1 %tobool4, true
  br i1 %lnot, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %12 = load i32, i32* %nCards, align 4
  %13 = load i32, i32* %nShuffles, align 4
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.1, i32 0, i32 0), i32 %12, i32 %13)
  call void @FreeDeck(i32** %deck)
  br label %for.inc

for.inc:                                          ; preds = %do.end
  %14 = load i32, i32* %i, align 4
  %inc6 = add nsw i32 %14, 1
  store i32 %inc6, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  %15 = load i32, i32* %retval, align 4
  ret i32 %15
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @CreateDeck(i32** %deck, i32 %nCards) #0 {
entry:
  %deck.addr = alloca i32**, align 4
  %nCards.addr = alloca i32, align 4
  %tmp = alloca i32*, align 4
  store i32** %deck, i32*** %deck.addr, align 4
  store i32 %nCards, i32* %nCards.addr, align 4
  store i32* null, i32** %tmp, align 4
  %0 = load i32**, i32*** %deck.addr, align 4
  %cmp = icmp ne i32** %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %nCards.addr, align 4
  %mul = mul i32 %1, 4
  %call = call noalias i8* @malloc(i32 %mul)
  %2 = bitcast i8* %call to i32*
  store i32* %2, i32** %tmp, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load i32*, i32** %tmp, align 4
  %cmp1 = icmp ne i32* %3, null
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %4 = load i32*, i32** %tmp, align 4
  %5 = load i32**, i32*** %deck.addr, align 4
  store i32* %4, i32** %5, align 4
  %cmp2 = icmp ne i32* %4, null
  %conv = zext i1 %cmp2 to i32
  br label %cond.end

cond.false:                                       ; preds = %if.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv, %cond.true ], [ 0, %cond.false ]
  ret i32 %cond
}

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @InitDeck(i32* %deck, i32 %nCards) #0 {
entry:
  %deck.addr = alloca i32*, align 4
  %nCards.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32* %deck, i32** %deck.addr, align 4
  store i32 %nCards, i32* %nCards.addr, align 4
  %0 = load i32*, i32** %deck.addr, align 4
  %cmp = icmp ne i32* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %nCards.addr, align 4
  %cmp1 = icmp slt i32 %1, %2
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %4 = load i32*, i32** %deck.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %4, i32 %5
  store i32 %3, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @ShuffleDeck(i32* %deck, i32 %nCards) #0 {
entry:
  %retval = alloca i32, align 4
  %deck.addr = alloca i32*, align 4
  %nCards.addr = alloca i32, align 4
  %copy = alloca i32*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32* %deck, i32** %deck.addr, align 4
  store i32 %nCards, i32* %nCards.addr, align 4
  store i32* null, i32** %copy, align 4
  %0 = load i32*, i32** %deck.addr, align 4
  %1 = load i32, i32* %nCards.addr, align 4
  %call = call i32 @DuplicateDeck(i32** %copy, i32* %0, i32 %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %nCards.addr, align 4
  %div = sdiv i32 %3, 2
  %cmp = icmp slt i32 %2, %div
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32*, i32** %copy, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %4, i32 %5
  %6 = load i32, i32* %arrayidx, align 4
  %7 = load i32*, i32** %deck.addr, align 4
  %8 = load i32, i32* %j, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %7, i32 %8
  store i32 %6, i32* %arrayidx1, align 4
  %9 = load i32*, i32** %copy, align 4
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %nCards.addr, align 4
  %div2 = sdiv i32 %11, 2
  %add = add nsw i32 %10, %div2
  %arrayidx3 = getelementptr inbounds i32, i32* %9, i32 %add
  %12 = load i32, i32* %arrayidx3, align 4
  %13 = load i32*, i32** %deck.addr, align 4
  %14 = load i32, i32* %j, align 4
  %add4 = add nsw i32 %14, 1
  %arrayidx5 = getelementptr inbounds i32, i32* %13, i32 %add4
  store i32 %12, i32* %arrayidx5, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %15 = load i32, i32* %i, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %i, align 4
  %16 = load i32, i32* %j, align 4
  %add6 = add nsw i32 %16, 2
  store i32 %add6, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  call void @FreeDeck(i32** %copy)
  store i32 1, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.else, %for.end
  %17 = load i32, i32* %retval, align 4
  ret i32 %17
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @InitedDeck(i32* %deck, i32 %nCards) #0 {
entry:
  %retval = alloca i32, align 4
  %deck.addr = alloca i32*, align 4
  %nCards.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32* %deck, i32** %deck.addr, align 4
  store i32 %nCards, i32* %nCards.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %nCards.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32*, i32** %deck.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %2, i32 %3
  %4 = load i32, i32* %arrayidx, align 4
  %5 = load i32, i32* %i, align 4
  %cmp1 = icmp ne i32 %4, %5
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  %7 = load i32, i32* %retval, align 4
  ret i32 %7
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @FreeDeck(i32** %deck) #0 {
entry:
  %deck.addr = alloca i32**, align 4
  store i32** %deck, i32*** %deck.addr, align 4
  %0 = load i32**, i32*** %deck.addr, align 4
  %1 = load i32*, i32** %0, align 4
  %cmp = icmp ne i32* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i32**, i32*** %deck.addr, align 4
  %3 = load i32*, i32** %2, align 4
  %4 = bitcast i32* %3 to i8*
  call void @free(i8* %4)
  %5 = load i32**, i32*** %deck.addr, align 4
  store i32* null, i32** %5, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @DuplicateDeck(i32** %dest, i32* %orig, i32 %nCards) #0 {
entry:
  %retval = alloca i32, align 4
  %dest.addr = alloca i32**, align 4
  %orig.addr = alloca i32*, align 4
  %nCards.addr = alloca i32, align 4
  store i32** %dest, i32*** %dest.addr, align 4
  store i32* %orig, i32** %orig.addr, align 4
  store i32 %nCards, i32* %nCards.addr, align 4
  %0 = load i32*, i32** %orig.addr, align 4
  %cmp = icmp ne i32* %0, null
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %1 = load i32**, i32*** %dest.addr, align 4
  %2 = load i32, i32* %nCards.addr, align 4
  %call = call i32 @CreateDeck(i32** %1, i32 %2)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %3 = load i32**, i32*** %dest.addr, align 4
  %4 = load i32*, i32** %3, align 4
  %5 = bitcast i32* %4 to i8*
  %6 = load i32*, i32** %orig.addr, align 4
  %7 = bitcast i32* %6 to i8*
  %8 = load i32, i32* %nCards.addr, align 4
  %mul = mul i32 %8, 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %5, i8* align 4 %7, i32 %mul, i1 false)
  store i32 1, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %land.lhs.true, %entry
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4
  ret i32 %9
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare void @free(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %nCards.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 @DuplicateDeck(i32** %copy, i32* %0, i32 %1)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %call, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %nCards.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div = sdiv i32 %3, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sdiv %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %2, %div
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sdiv %1, 2:i32
%3:i1 = slt %0, %2
infer %3

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %nCards.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div2 = sdiv i32 %11, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sdiv %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %add = add nsw i32 %10, %div2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sdiv %1, 2:i32
%3:i32 = addnsw %0, %2
infer %3

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %arrayidx3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add4 = add nsw i32 %14, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %15, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add6 = add nsw i32 %16, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sdiv %0, 2:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 631636206
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = sdiv %1, 2:i32
%3:i1 = slt %0, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = sdiv %1, 2:i32
%3:i32 = addnsw %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870780
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = sdiv %0, 2:i32

Cost = 5
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 2:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 2
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741826
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for ShuffleDeck()

; entering Souper's runOnFunction() for InitedDeck()

; ModuleID = './Perfect_shuffle.c.bc'
source_filename = "./Perfect_shuffle.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque

@kDecks = hidden constant [7 x i32] [i32 8, i32 24, i32 52, i32 100, i32 1020, i32 1024, i32 10000], align 16
@stderr = external constant %struct._IO_FILE*, align 4
@.str = private unnamed_addr constant [25 x i8] c"Error: malloc() failed!\0A\00", align 1
@.str.1 = private unnamed_addr constant [41 x i8] c"Cards count: %d, shuffles required: %d.\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %nCards = alloca i32, align 4
  %nShuffles = alloca i32, align 4
  %deck = alloca i32*, align 4
  store i32 0, i32* %retval, align 4
  store i32* null, i32** %deck, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 7
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [7 x i32], [7 x i32]* @kDecks, i32 0, i32 %1
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %nCards, align 4
  %3 = load i32, i32* %nCards, align 4
  %call = call i32 @CreateDeck(i32** %deck, i32 %3)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.body
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i32 0, i32 0))
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %for.body
  %5 = load i32*, i32** %deck, align 4
  %6 = load i32, i32* %nCards, align 4
  call void @InitDeck(i32* %5, i32 %6)
  store i32 0, i32* %nShuffles, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end
  %7 = load i32*, i32** %deck, align 4
  %8 = load i32, i32* %nCards, align 4
  %call2 = call i32 @ShuffleDeck(i32* %7, i32 %8)
  %9 = load i32, i32* %nShuffles, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %nShuffles, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %10 = load i32*, i32** %deck, align 4
  %11 = load i32, i32* %nCards, align 4
  %call3 = call i32 @InitedDeck(i32* %10, i32 %11)
  %tobool4 = icmp ne i32 %call3, 0
  %lnot = xor i1 %tobool4, true
  br i1 %lnot, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %12 = load i32, i32* %nCards, align 4
  %13 = load i32, i32* %nShuffles, align 4
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.1, i32 0, i32 0), i32 %12, i32 %13)
  call void @FreeDeck(i32** %deck)
  br label %for.inc

for.inc:                                          ; preds = %do.end
  %14 = load i32, i32* %i, align 4
  %inc6 = add nsw i32 %14, 1
  store i32 %inc6, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  %15 = load i32, i32* %retval, align 4
  ret i32 %15
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @CreateDeck(i32** %deck, i32 %nCards) #0 {
entry:
  %deck.addr = alloca i32**, align 4
  %nCards.addr = alloca i32, align 4
  %tmp = alloca i32*, align 4
  store i32** %deck, i32*** %deck.addr, align 4
  store i32 %nCards, i32* %nCards.addr, align 4
  store i32* null, i32** %tmp, align 4
  %0 = load i32**, i32*** %deck.addr, align 4
  %cmp = icmp ne i32** %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %nCards.addr, align 4
  %mul = mul i32 %1, 4
  %call = call noalias i8* @malloc(i32 %mul)
  %2 = bitcast i8* %call to i32*
  store i32* %2, i32** %tmp, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load i32*, i32** %tmp, align 4
  %cmp1 = icmp ne i32* %3, null
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %4 = load i32*, i32** %tmp, align 4
  %5 = load i32**, i32*** %deck.addr, align 4
  store i32* %4, i32** %5, align 4
  %cmp2 = icmp ne i32* %4, null
  %conv = zext i1 %cmp2 to i32
  br label %cond.end

cond.false:                                       ; preds = %if.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv, %cond.true ], [ 0, %cond.false ]
  ret i32 %cond
}

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @InitDeck(i32* %deck, i32 %nCards) #0 {
entry:
  %deck.addr = alloca i32*, align 4
  %nCards.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32* %deck, i32** %deck.addr, align 4
  store i32 %nCards, i32* %nCards.addr, align 4
  %0 = load i32*, i32** %deck.addr, align 4
  %cmp = icmp ne i32* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %nCards.addr, align 4
  %cmp1 = icmp slt i32 %1, %2
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %4 = load i32*, i32** %deck.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %4, i32 %5
  store i32 %3, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @ShuffleDeck(i32* %deck, i32 %nCards) #0 {
entry:
  %retval = alloca i32, align 4
  %deck.addr = alloca i32*, align 4
  %nCards.addr = alloca i32, align 4
  %copy = alloca i32*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32* %deck, i32** %deck.addr, align 4
  store i32 %nCards, i32* %nCards.addr, align 4
  store i32* null, i32** %copy, align 4
  %0 = load i32*, i32** %deck.addr, align 4
  %1 = load i32, i32* %nCards.addr, align 4
  %call = call i32 @DuplicateDeck(i32** %copy, i32* %0, i32 %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %nCards.addr, align 4
  %div = sdiv i32 %3, 2
  %cmp = icmp slt i32 %2, %div
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32*, i32** %copy, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %4, i32 %5
  %6 = load i32, i32* %arrayidx, align 4
  %7 = load i32*, i32** %deck.addr, align 4
  %8 = load i32, i32* %j, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %7, i32 %8
  store i32 %6, i32* %arrayidx1, align 4
  %9 = load i32*, i32** %copy, align 4
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %nCards.addr, align 4
  %div2 = sdiv i32 %11, 2
  %add = add nsw i32 %10, %div2
  %arrayidx3 = getelementptr inbounds i32, i32* %9, i32 %add
  %12 = load i32, i32* %arrayidx3, align 4
  %13 = load i32*, i32** %deck.addr, align 4
  %14 = load i32, i32* %j, align 4
  %add4 = add nsw i32 %14, 1
  %arrayidx5 = getelementptr inbounds i32, i32* %13, i32 %add4
  store i32 %12, i32* %arrayidx5, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %15 = load i32, i32* %i, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %i, align 4
  %16 = load i32, i32* %j, align 4
  %add6 = add nsw i32 %16, 2
  store i32 %add6, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  call void @FreeDeck(i32** %copy)
  store i32 1, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.else, %for.end
  %17 = load i32, i32* %retval, align 4
  ret i32 %17
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @InitedDeck(i32* %deck, i32 %nCards) #0 {
entry:
  %retval = alloca i32, align 4
  %deck.addr = alloca i32*, align 4
  %nCards.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32* %deck, i32** %deck.addr, align 4
  store i32 %nCards, i32* %nCards.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %nCards.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32*, i32** %deck.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %2, i32 %3
  %4 = load i32, i32* %arrayidx, align 4
  %5 = load i32, i32* %i, align 4
  %cmp1 = icmp ne i32 %4, %5
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  %7 = load i32, i32* %retval, align 4
  ret i32 %7
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @FreeDeck(i32** %deck) #0 {
entry:
  %deck.addr = alloca i32**, align 4
  store i32** %deck, i32*** %deck.addr, align 4
  %0 = load i32**, i32*** %deck.addr, align 4
  %1 = load i32*, i32** %0, align 4
  %cmp = icmp ne i32* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i32**, i32*** %deck.addr, align 4
  %3 = load i32*, i32** %2, align 4
  %4 = bitcast i32* %3 to i8*
  call void @free(i8* %4)
  %5 = load i32**, i32*** %deck.addr, align 4
  store i32* null, i32** %5, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @DuplicateDeck(i32** %dest, i32* %orig, i32 %nCards) #0 {
entry:
  %retval = alloca i32, align 4
  %dest.addr = alloca i32**, align 4
  %orig.addr = alloca i32*, align 4
  %nCards.addr = alloca i32, align 4
  store i32** %dest, i32*** %dest.addr, align 4
  store i32* %orig, i32** %orig.addr, align 4
  store i32 %nCards, i32* %nCards.addr, align 4
  %0 = load i32*, i32** %orig.addr, align 4
  %cmp = icmp ne i32* %0, null
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %1 = load i32**, i32*** %dest.addr, align 4
  %2 = load i32, i32* %nCards.addr, align 4
  %call = call i32 @CreateDeck(i32** %1, i32 %2)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %3 = load i32**, i32*** %dest.addr, align 4
  %4 = load i32*, i32** %3, align 4
  %5 = bitcast i32* %4 to i8*
  %6 = load i32*, i32** %orig.addr, align 4
  %7 = bitcast i32* %6 to i8*
  %8 = load i32, i32* %nCards.addr, align 4
  %mul = mul i32 %8, 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %5, i8* align 4 %7, i32 %mul, i1 false)
  store i32 1, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %land.lhs.true, %entry
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4
  ret i32 %9
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare void @free(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %nCards.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = icmp ne i32 %4, %5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %6, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for InitedDeck()

; entering Souper's runOnFunction() for FreeDeck()

; ModuleID = './Perfect_shuffle.c.bc'
source_filename = "./Perfect_shuffle.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque

@kDecks = hidden constant [7 x i32] [i32 8, i32 24, i32 52, i32 100, i32 1020, i32 1024, i32 10000], align 16
@stderr = external constant %struct._IO_FILE*, align 4
@.str = private unnamed_addr constant [25 x i8] c"Error: malloc() failed!\0A\00", align 1
@.str.1 = private unnamed_addr constant [41 x i8] c"Cards count: %d, shuffles required: %d.\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %nCards = alloca i32, align 4
  %nShuffles = alloca i32, align 4
  %deck = alloca i32*, align 4
  store i32 0, i32* %retval, align 4
  store i32* null, i32** %deck, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 7
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [7 x i32], [7 x i32]* @kDecks, i32 0, i32 %1
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %nCards, align 4
  %3 = load i32, i32* %nCards, align 4
  %call = call i32 @CreateDeck(i32** %deck, i32 %3)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.body
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i32 0, i32 0))
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %for.body
  %5 = load i32*, i32** %deck, align 4
  %6 = load i32, i32* %nCards, align 4
  call void @InitDeck(i32* %5, i32 %6)
  store i32 0, i32* %nShuffles, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end
  %7 = load i32*, i32** %deck, align 4
  %8 = load i32, i32* %nCards, align 4
  %call2 = call i32 @ShuffleDeck(i32* %7, i32 %8)
  %9 = load i32, i32* %nShuffles, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %nShuffles, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %10 = load i32*, i32** %deck, align 4
  %11 = load i32, i32* %nCards, align 4
  %call3 = call i32 @InitedDeck(i32* %10, i32 %11)
  %tobool4 = icmp ne i32 %call3, 0
  %lnot = xor i1 %tobool4, true
  br i1 %lnot, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %12 = load i32, i32* %nCards, align 4
  %13 = load i32, i32* %nShuffles, align 4
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.1, i32 0, i32 0), i32 %12, i32 %13)
  call void @FreeDeck(i32** %deck)
  br label %for.inc

for.inc:                                          ; preds = %do.end
  %14 = load i32, i32* %i, align 4
  %inc6 = add nsw i32 %14, 1
  store i32 %inc6, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  %15 = load i32, i32* %retval, align 4
  ret i32 %15
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @CreateDeck(i32** %deck, i32 %nCards) #0 {
entry:
  %deck.addr = alloca i32**, align 4
  %nCards.addr = alloca i32, align 4
  %tmp = alloca i32*, align 4
  store i32** %deck, i32*** %deck.addr, align 4
  store i32 %nCards, i32* %nCards.addr, align 4
  store i32* null, i32** %tmp, align 4
  %0 = load i32**, i32*** %deck.addr, align 4
  %cmp = icmp ne i32** %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %nCards.addr, align 4
  %mul = mul i32 %1, 4
  %call = call noalias i8* @malloc(i32 %mul)
  %2 = bitcast i8* %call to i32*
  store i32* %2, i32** %tmp, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load i32*, i32** %tmp, align 4
  %cmp1 = icmp ne i32* %3, null
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %4 = load i32*, i32** %tmp, align 4
  %5 = load i32**, i32*** %deck.addr, align 4
  store i32* %4, i32** %5, align 4
  %cmp2 = icmp ne i32* %4, null
  %conv = zext i1 %cmp2 to i32
  br label %cond.end

cond.false:                                       ; preds = %if.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv, %cond.true ], [ 0, %cond.false ]
  ret i32 %cond
}

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @InitDeck(i32* %deck, i32 %nCards) #0 {
entry:
  %deck.addr = alloca i32*, align 4
  %nCards.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32* %deck, i32** %deck.addr, align 4
  store i32 %nCards, i32* %nCards.addr, align 4
  %0 = load i32*, i32** %deck.addr, align 4
  %cmp = icmp ne i32* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %nCards.addr, align 4
  %cmp1 = icmp slt i32 %1, %2
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %4 = load i32*, i32** %deck.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %4, i32 %5
  store i32 %3, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @ShuffleDeck(i32* %deck, i32 %nCards) #0 {
entry:
  %retval = alloca i32, align 4
  %deck.addr = alloca i32*, align 4
  %nCards.addr = alloca i32, align 4
  %copy = alloca i32*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32* %deck, i32** %deck.addr, align 4
  store i32 %nCards, i32* %nCards.addr, align 4
  store i32* null, i32** %copy, align 4
  %0 = load i32*, i32** %deck.addr, align 4
  %1 = load i32, i32* %nCards.addr, align 4
  %call = call i32 @DuplicateDeck(i32** %copy, i32* %0, i32 %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %nCards.addr, align 4
  %div = sdiv i32 %3, 2
  %cmp = icmp slt i32 %2, %div
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32*, i32** %copy, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %4, i32 %5
  %6 = load i32, i32* %arrayidx, align 4
  %7 = load i32*, i32** %deck.addr, align 4
  %8 = load i32, i32* %j, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %7, i32 %8
  store i32 %6, i32* %arrayidx1, align 4
  %9 = load i32*, i32** %copy, align 4
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %nCards.addr, align 4
  %div2 = sdiv i32 %11, 2
  %add = add nsw i32 %10, %div2
  %arrayidx3 = getelementptr inbounds i32, i32* %9, i32 %add
  %12 = load i32, i32* %arrayidx3, align 4
  %13 = load i32*, i32** %deck.addr, align 4
  %14 = load i32, i32* %j, align 4
  %add4 = add nsw i32 %14, 1
  %arrayidx5 = getelementptr inbounds i32, i32* %13, i32 %add4
  store i32 %12, i32* %arrayidx5, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %15 = load i32, i32* %i, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %i, align 4
  %16 = load i32, i32* %j, align 4
  %add6 = add nsw i32 %16, 2
  store i32 %add6, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  call void @FreeDeck(i32** %copy)
  store i32 1, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.else, %for.end
  %17 = load i32, i32* %retval, align 4
  ret i32 %17
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @InitedDeck(i32* %deck, i32 %nCards) #0 {
entry:
  %retval = alloca i32, align 4
  %deck.addr = alloca i32*, align 4
  %nCards.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32* %deck, i32** %deck.addr, align 4
  store i32 %nCards, i32* %nCards.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %nCards.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32*, i32** %deck.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %2, i32 %3
  %4 = load i32, i32* %arrayidx, align 4
  %5 = load i32, i32* %i, align 4
  %cmp1 = icmp ne i32 %4, %5
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  %7 = load i32, i32* %retval, align 4
  ret i32 %7
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @FreeDeck(i32** %deck) #0 {
entry:
  %deck.addr = alloca i32**, align 4
  store i32** %deck, i32*** %deck.addr, align 4
  %0 = load i32**, i32*** %deck.addr, align 4
  %1 = load i32*, i32** %0, align 4
  %cmp = icmp ne i32* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i32**, i32*** %deck.addr, align 4
  %3 = load i32*, i32** %2, align 4
  %4 = bitcast i32* %3 to i8*
  call void @free(i8* %4)
  %5 = load i32**, i32*** %deck.addr, align 4
  store i32* null, i32** %5, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @DuplicateDeck(i32** %dest, i32* %orig, i32 %nCards) #0 {
entry:
  %retval = alloca i32, align 4
  %dest.addr = alloca i32**, align 4
  %orig.addr = alloca i32*, align 4
  %nCards.addr = alloca i32, align 4
  store i32** %dest, i32*** %dest.addr, align 4
  store i32* %orig, i32** %orig.addr, align 4
  store i32 %nCards, i32* %nCards.addr, align 4
  %0 = load i32*, i32** %orig.addr, align 4
  %cmp = icmp ne i32* %0, null
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %1 = load i32**, i32*** %dest.addr, align 4
  %2 = load i32, i32* %nCards.addr, align 4
  %call = call i32 @CreateDeck(i32** %1, i32 %2)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %3 = load i32**, i32*** %dest.addr, align 4
  %4 = load i32*, i32** %3, align 4
  %5 = bitcast i32* %4 to i8*
  %6 = load i32*, i32** %orig.addr, align 4
  %7 = bitcast i32* %6 to i8*
  %8 = load i32, i32* %nCards.addr, align 4
  %mul = mul i32 %8, 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %5, i8* align 4 %7, i32 %mul, i1 false)
  store i32 1, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %land.lhs.true, %entry
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4
  ret i32 %9
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare void @free(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %cmp = icmp ne i32* %1, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for FreeDeck()

; entering Souper's runOnFunction() for DuplicateDeck()

; ModuleID = './Perfect_shuffle.c.bc'
source_filename = "./Perfect_shuffle.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque

@kDecks = hidden constant [7 x i32] [i32 8, i32 24, i32 52, i32 100, i32 1020, i32 1024, i32 10000], align 16
@stderr = external constant %struct._IO_FILE*, align 4
@.str = private unnamed_addr constant [25 x i8] c"Error: malloc() failed!\0A\00", align 1
@.str.1 = private unnamed_addr constant [41 x i8] c"Cards count: %d, shuffles required: %d.\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %nCards = alloca i32, align 4
  %nShuffles = alloca i32, align 4
  %deck = alloca i32*, align 4
  store i32 0, i32* %retval, align 4
  store i32* null, i32** %deck, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 7
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [7 x i32], [7 x i32]* @kDecks, i32 0, i32 %1
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %nCards, align 4
  %3 = load i32, i32* %nCards, align 4
  %call = call i32 @CreateDeck(i32** %deck, i32 %3)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.body
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i32 0, i32 0))
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %for.body
  %5 = load i32*, i32** %deck, align 4
  %6 = load i32, i32* %nCards, align 4
  call void @InitDeck(i32* %5, i32 %6)
  store i32 0, i32* %nShuffles, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end
  %7 = load i32*, i32** %deck, align 4
  %8 = load i32, i32* %nCards, align 4
  %call2 = call i32 @ShuffleDeck(i32* %7, i32 %8)
  %9 = load i32, i32* %nShuffles, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %nShuffles, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %10 = load i32*, i32** %deck, align 4
  %11 = load i32, i32* %nCards, align 4
  %call3 = call i32 @InitedDeck(i32* %10, i32 %11)
  %tobool4 = icmp ne i32 %call3, 0
  %lnot = xor i1 %tobool4, true
  br i1 %lnot, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %12 = load i32, i32* %nCards, align 4
  %13 = load i32, i32* %nShuffles, align 4
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.1, i32 0, i32 0), i32 %12, i32 %13)
  call void @FreeDeck(i32** %deck)
  br label %for.inc

for.inc:                                          ; preds = %do.end
  %14 = load i32, i32* %i, align 4
  %inc6 = add nsw i32 %14, 1
  store i32 %inc6, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  %15 = load i32, i32* %retval, align 4
  ret i32 %15
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @CreateDeck(i32** %deck, i32 %nCards) #0 {
entry:
  %deck.addr = alloca i32**, align 4
  %nCards.addr = alloca i32, align 4
  %tmp = alloca i32*, align 4
  store i32** %deck, i32*** %deck.addr, align 4
  store i32 %nCards, i32* %nCards.addr, align 4
  store i32* null, i32** %tmp, align 4
  %0 = load i32**, i32*** %deck.addr, align 4
  %cmp = icmp ne i32** %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %nCards.addr, align 4
  %mul = mul i32 %1, 4
  %call = call noalias i8* @malloc(i32 %mul)
  %2 = bitcast i8* %call to i32*
  store i32* %2, i32** %tmp, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load i32*, i32** %tmp, align 4
  %cmp1 = icmp ne i32* %3, null
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %4 = load i32*, i32** %tmp, align 4
  %5 = load i32**, i32*** %deck.addr, align 4
  store i32* %4, i32** %5, align 4
  %cmp2 = icmp ne i32* %4, null
  %conv = zext i1 %cmp2 to i32
  br label %cond.end

cond.false:                                       ; preds = %if.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv, %cond.true ], [ 0, %cond.false ]
  ret i32 %cond
}

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @InitDeck(i32* %deck, i32 %nCards) #0 {
entry:
  %deck.addr = alloca i32*, align 4
  %nCards.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32* %deck, i32** %deck.addr, align 4
  store i32 %nCards, i32* %nCards.addr, align 4
  %0 = load i32*, i32** %deck.addr, align 4
  %cmp = icmp ne i32* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %nCards.addr, align 4
  %cmp1 = icmp slt i32 %1, %2
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %4 = load i32*, i32** %deck.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %4, i32 %5
  store i32 %3, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @ShuffleDeck(i32* %deck, i32 %nCards) #0 {
entry:
  %retval = alloca i32, align 4
  %deck.addr = alloca i32*, align 4
  %nCards.addr = alloca i32, align 4
  %copy = alloca i32*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32* %deck, i32** %deck.addr, align 4
  store i32 %nCards, i32* %nCards.addr, align 4
  store i32* null, i32** %copy, align 4
  %0 = load i32*, i32** %deck.addr, align 4
  %1 = load i32, i32* %nCards.addr, align 4
  %call = call i32 @DuplicateDeck(i32** %copy, i32* %0, i32 %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %nCards.addr, align 4
  %div = sdiv i32 %3, 2
  %cmp = icmp slt i32 %2, %div
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32*, i32** %copy, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %4, i32 %5
  %6 = load i32, i32* %arrayidx, align 4
  %7 = load i32*, i32** %deck.addr, align 4
  %8 = load i32, i32* %j, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %7, i32 %8
  store i32 %6, i32* %arrayidx1, align 4
  %9 = load i32*, i32** %copy, align 4
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %nCards.addr, align 4
  %div2 = sdiv i32 %11, 2
  %add = add nsw i32 %10, %div2
  %arrayidx3 = getelementptr inbounds i32, i32* %9, i32 %add
  %12 = load i32, i32* %arrayidx3, align 4
  %13 = load i32*, i32** %deck.addr, align 4
  %14 = load i32, i32* %j, align 4
  %add4 = add nsw i32 %14, 1
  %arrayidx5 = getelementptr inbounds i32, i32* %13, i32 %add4
  store i32 %12, i32* %arrayidx5, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %15 = load i32, i32* %i, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %i, align 4
  %16 = load i32, i32* %j, align 4
  %add6 = add nsw i32 %16, 2
  store i32 %add6, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  call void @FreeDeck(i32** %copy)
  store i32 1, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.else, %for.end
  %17 = load i32, i32* %retval, align 4
  ret i32 %17
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @InitedDeck(i32* %deck, i32 %nCards) #0 {
entry:
  %retval = alloca i32, align 4
  %deck.addr = alloca i32*, align 4
  %nCards.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32* %deck, i32** %deck.addr, align 4
  store i32 %nCards, i32* %nCards.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %nCards.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32*, i32** %deck.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %2, i32 %3
  %4 = load i32, i32* %arrayidx, align 4
  %5 = load i32, i32* %i, align 4
  %cmp1 = icmp ne i32 %4, %5
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  %7 = load i32, i32* %retval, align 4
  ret i32 %7
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @FreeDeck(i32** %deck) #0 {
entry:
  %deck.addr = alloca i32**, align 4
  store i32** %deck, i32*** %deck.addr, align 4
  %0 = load i32**, i32*** %deck.addr, align 4
  %1 = load i32*, i32** %0, align 4
  %cmp = icmp ne i32* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i32**, i32*** %deck.addr, align 4
  %3 = load i32*, i32** %2, align 4
  %4 = bitcast i32* %3 to i8*
  call void @free(i8* %4)
  %5 = load i32**, i32*** %deck.addr, align 4
  store i32* null, i32** %5, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @DuplicateDeck(i32** %dest, i32* %orig, i32 %nCards) #0 {
entry:
  %retval = alloca i32, align 4
  %dest.addr = alloca i32**, align 4
  %orig.addr = alloca i32*, align 4
  %nCards.addr = alloca i32, align 4
  store i32** %dest, i32*** %dest.addr, align 4
  store i32* %orig, i32** %orig.addr, align 4
  store i32 %nCards, i32* %nCards.addr, align 4
  %0 = load i32*, i32** %orig.addr, align 4
  %cmp = icmp ne i32* %0, null
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %1 = load i32**, i32*** %dest.addr, align 4
  %2 = load i32, i32* %nCards.addr, align 4
  %call = call i32 @CreateDeck(i32** %1, i32 %2)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %3 = load i32**, i32*** %dest.addr, align 4
  %4 = load i32*, i32** %3, align 4
  %5 = bitcast i32* %4 to i8*
  %6 = load i32*, i32** %orig.addr, align 4
  %7 = bitcast i32* %6 to i8*
  %8 = load i32, i32* %nCards.addr, align 4
  %mul = mul i32 %8, 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %5, i8* align 4 %7, i32 %mul, i1 false)
  store i32 1, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %land.lhs.true, %entry
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4
  ret i32 %9
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare void @free(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %cmp = icmp ne i32* %0, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %nCards.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 @CreateDeck(i32** %1, i32 %2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %call, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %nCards.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul i32 %8, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for DuplicateDeck()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
