
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for can_make_words()

; ModuleID = './ABC_Problem.c.bc'
source_filename = "./ABC_Problem.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [3 x i8] c"BO\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"XK\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"DQ\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"CP\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"NA\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"GT\00", align 1
@.str.6 = private unnamed_addr constant [3 x i8] c"RE\00", align 1
@.str.7 = private unnamed_addr constant [3 x i8] c"TG\00", align 1
@.str.8 = private unnamed_addr constant [3 x i8] c"QD\00", align 1
@.str.9 = private unnamed_addr constant [3 x i8] c"FS\00", align 1
@.str.10 = private unnamed_addr constant [3 x i8] c"JW\00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c"HU\00", align 1
@.str.12 = private unnamed_addr constant [3 x i8] c"VI\00", align 1
@.str.13 = private unnamed_addr constant [3 x i8] c"AN\00", align 1
@.str.14 = private unnamed_addr constant [3 x i8] c"OB\00", align 1
@.str.15 = private unnamed_addr constant [3 x i8] c"ER\00", align 1
@.str.16 = private unnamed_addr constant [3 x i8] c"LY\00", align 1
@.str.17 = private unnamed_addr constant [3 x i8] c"PC\00", align 1
@.str.18 = private unnamed_addr constant [3 x i8] c"ZM\00", align 1
@__const.main.blocks = private unnamed_addr constant [21 x i8*] [i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18, i32 0, i32 0), i8* null], align 16
@.str.19 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.20 = private unnamed_addr constant [2 x i8] c"A\00", align 1
@.str.21 = private unnamed_addr constant [5 x i8] c"BARK\00", align 1
@.str.22 = private unnamed_addr constant [5 x i8] c"BOOK\00", align 1
@.str.23 = private unnamed_addr constant [6 x i8] c"TREAT\00", align 1
@.str.24 = private unnamed_addr constant [7 x i8] c"COMMON\00", align 1
@.str.25 = private unnamed_addr constant [6 x i8] c"SQUAD\00", align 1
@.str.26 = private unnamed_addr constant [8 x i8] c"Confuse\00", align 1
@__const.main.words = private unnamed_addr constant [9 x i8*] [i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.24, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.26, i32 0, i32 0), i8* null], align 16
@.str.27 = private unnamed_addr constant [7 x i8] c"%s\09%d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @can_make_words(i8** %b, i8* %word) #0 {
entry:
  %retval = alloca i32, align 4
  %b.addr = alloca i8**, align 4
  %word.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %ret = alloca i32, align 4
  %c = alloca i32, align 4
  %tmp = alloca i8*, align 4
  %tmp35 = alloca i8*, align 4
  store i8** %b, i8*** %b.addr, align 4
  store i8* %word, i8** %word.addr, align 4
  store i32 0, i32* %ret, align 4
  %0 = load i8*, i8** %word.addr, align 4
  %1 = load i8, i8* %0, align 1
  %conv = sext i8 %1 to i32
  %call = call i32 @toupper(i32 %conv) #4
  store i32 %call, i32* %c, align 4
  %2 = load i32, i32* %c, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i8**, i8*** %b.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %3, i32 0
  %4 = load i8*, i8** %arrayidx, align 4
  %tobool1 = icmp ne i8* %4, null
  br i1 %tobool1, label %if.end3, label %if.then2

if.then2:                                         ; preds = %if.end
  store i32 0, i32* %retval, align 4
  br label %return

if.end3:                                          ; preds = %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end3
  %5 = load i8**, i8*** %b.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds i8*, i8** %5, i32 %6
  %7 = load i8*, i8** %arrayidx4, align 4
  %tobool5 = icmp ne i8* %7, null
  br i1 %tobool5, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %8 = load i32, i32* %ret, align 4
  %tobool6 = icmp ne i32 %8, 0
  %lnot = xor i1 %tobool6, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %9 = phi i1 [ false, %for.cond ], [ %lnot, %land.rhs ]
  br i1 %9, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %10 = load i8**, i8*** %b.addr, align 4
  %11 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds i8*, i8** %10, i32 %11
  %12 = load i8*, i8** %arrayidx7, align 4
  %arrayidx8 = getelementptr inbounds i8, i8* %12, i32 0
  %13 = load i8, i8* %arrayidx8, align 1
  %conv9 = sext i8 %13 to i32
  %14 = load i32, i32* %c, align 4
  %cmp = icmp ne i32 %conv9, %14
  br i1 %cmp, label %land.lhs.true, label %if.end17

land.lhs.true:                                    ; preds = %for.body
  %15 = load i8**, i8*** %b.addr, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds i8*, i8** %15, i32 %16
  %17 = load i8*, i8** %arrayidx11, align 4
  %arrayidx12 = getelementptr inbounds i8, i8* %17, i32 1
  %18 = load i8, i8* %arrayidx12, align 1
  %conv13 = sext i8 %18 to i32
  %19 = load i32, i32* %c, align 4
  %cmp14 = icmp ne i32 %conv13, %19
  br i1 %cmp14, label %if.then16, label %if.end17

if.then16:                                        ; preds = %land.lhs.true
  br label %for.inc

if.end17:                                         ; preds = %land.lhs.true, %for.body
  %20 = load i8**, i8*** %b.addr, align 4
  %21 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds i8*, i8** %20, i32 %21
  %22 = load i8*, i8** %arrayidx18, align 4
  %23 = load i8**, i8*** %b.addr, align 4
  %arrayidx19 = getelementptr inbounds i8*, i8** %23, i32 0
  %24 = load i8*, i8** %arrayidx19, align 4
  %cmp20 = icmp ne i8* %22, %24
  br i1 %cmp20, label %if.then22, label %if.end27

if.then22:                                        ; preds = %if.end17
  %25 = load i8**, i8*** %b.addr, align 4
  %26 = load i32, i32* %i, align 4
  %arrayidx23 = getelementptr inbounds i8*, i8** %25, i32 %26
  %27 = load i8*, i8** %arrayidx23, align 4
  store i8* %27, i8** %tmp, align 4
  %28 = load i8**, i8*** %b.addr, align 4
  %arrayidx24 = getelementptr inbounds i8*, i8** %28, i32 0
  %29 = load i8*, i8** %arrayidx24, align 4
  %30 = load i8**, i8*** %b.addr, align 4
  %31 = load i32, i32* %i, align 4
  %arrayidx25 = getelementptr inbounds i8*, i8** %30, i32 %31
  store i8* %29, i8** %arrayidx25, align 4
  %32 = load i8*, i8** %tmp, align 4
  %33 = load i8**, i8*** %b.addr, align 4
  %arrayidx26 = getelementptr inbounds i8*, i8** %33, i32 0
  store i8* %32, i8** %arrayidx26, align 4
  br label %if.end27

if.end27:                                         ; preds = %if.then22, %if.end17
  %34 = load i8**, i8*** %b.addr, align 4
  %add.ptr = getelementptr inbounds i8*, i8** %34, i32 1
  %35 = load i8*, i8** %word.addr, align 4
  %add.ptr28 = getelementptr inbounds i8, i8* %35, i32 1
  %call29 = call i32 @can_make_words(i8** %add.ptr, i8* %add.ptr28)
  store i32 %call29, i32* %ret, align 4
  %36 = load i8**, i8*** %b.addr, align 4
  %37 = load i32, i32* %i, align 4
  %arrayidx30 = getelementptr inbounds i8*, i8** %36, i32 %37
  %38 = load i8*, i8** %arrayidx30, align 4
  %39 = load i8**, i8*** %b.addr, align 4
  %arrayidx31 = getelementptr inbounds i8*, i8** %39, i32 0
  %40 = load i8*, i8** %arrayidx31, align 4
  %cmp32 = icmp ne i8* %38, %40
  br i1 %cmp32, label %if.then34, label %if.end40

if.then34:                                        ; preds = %if.end27
  %41 = load i8**, i8*** %b.addr, align 4
  %42 = load i32, i32* %i, align 4
  %arrayidx36 = getelementptr inbounds i8*, i8** %41, i32 %42
  %43 = load i8*, i8** %arrayidx36, align 4
  store i8* %43, i8** %tmp35, align 4
  %44 = load i8**, i8*** %b.addr, align 4
  %arrayidx37 = getelementptr inbounds i8*, i8** %44, i32 0
  %45 = load i8*, i8** %arrayidx37, align 4
  %46 = load i8**, i8*** %b.addr, align 4
  %47 = load i32, i32* %i, align 4
  %arrayidx38 = getelementptr inbounds i8*, i8** %46, i32 %47
  store i8* %45, i8** %arrayidx38, align 4
  %48 = load i8*, i8** %tmp35, align 4
  %49 = load i8**, i8*** %b.addr, align 4
  %arrayidx39 = getelementptr inbounds i8*, i8** %49, i32 0
  store i8* %48, i8** %arrayidx39, align 4
  br label %if.end40

if.end40:                                         ; preds = %if.then34, %if.end27
  br label %for.inc

for.inc:                                          ; preds = %if.end40, %if.then16
  %50 = load i32, i32* %i, align 4
  %inc = add nsw i32 %50, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  %51 = load i32, i32* %ret, align 4
  store i32 %51, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then2, %if.then
  %52 = load i32, i32* %retval, align 4
  ret i32 %52
}

; Function Attrs: nounwind readonly
declare i32 @toupper(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %blocks = alloca [21 x i8*], align 16
  %words = alloca [9 x i8*], align 16
  %w = alloca i8**, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [21 x i8*]* %blocks to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([21 x i8*]* @__const.main.blocks to i8*), i32 84, i1 false)
  %1 = bitcast [9 x i8*]* %words to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %1, i8* align 16 bitcast ([9 x i8*]* @__const.main.words to i8*), i32 36, i1 false)
  %arraydecay = getelementptr inbounds [9 x i8*], [9 x i8*]* %words, i32 0, i32 0
  store i8** %arraydecay, i8*** %w, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i8**, i8*** %w, align 4
  %3 = load i8*, i8** %2, align 4
  %tobool = icmp ne i8* %3, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i8**, i8*** %w, align 4
  %5 = load i8*, i8** %4, align 4
  %arraydecay1 = getelementptr inbounds [21 x i8*], [21 x i8*]* %blocks, i32 0, i32 0
  %6 = load i8**, i8*** %w, align 4
  %7 = load i8*, i8** %6, align 4
  %call = call i32 @can_make_words(i8** %arraydecay1, i8* %7)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.27, i32 0, i32 0), i8* %5, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i8**, i8*** %w, align 4
  %incdec.ptr = getelementptr inbounds i8*, i8** %8, i32 1
  store i8** %incdec.ptr, i8*** %w, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare i32 @printf(i8* %0, ...) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i8, i8* %0, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %1 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %call = call i32 @toupper(i32 %conv) #4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %2, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool1 = icmp ne i8* %4, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool5 = icmp ne i8* %7, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %ret, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool6 = icmp ne i32 %8, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %lnot = xor i1 %tobool6, true
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i1 = xor 1:i1, %1
infer %2

; *****
; For LLVM instruction:
;  %9 = phi i1 [ false, %for.cond ], [ %lnot, %land.rhs ]
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i8, i8* %arrayidx8, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv9 = sext i8 %13 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ne i32 %conv9, %14
; Looking for a replacement for:
%0:i32 = var
%1:i8 = var
%2:i32 = sext %1
%3:i1 = ne %0, %2
infer %3

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i8, i8* %arrayidx12, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv13 = sext i8 %18 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp14 = icmp ne i32 %conv13, %19
; Looking for a replacement for:
%0:i32 = var
%1:i8 = var
%2:i32 = sext %1
%3:i1 = ne %0, %2
infer %3

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp20 = icmp ne i8* %22, %24
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call29 = call i32 @can_make_words(i8** %add.ptr, i8* %add.ptr28)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp32 = icmp ne i8* %38, %40
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2

; *****
; For LLVM instruction:
;  %42 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %47 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %50 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %50, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %51 = load i32, i32* %ret, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %52 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i1 = xor 1:i1, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var
%1:i1 = ne 0:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i8 = var
%2:i32 = sext %1
%3:i1 = ne %0, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for can_make_words()

; entering Souper's runOnFunction() for main()

; ModuleID = './ABC_Problem.c.bc'
source_filename = "./ABC_Problem.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [3 x i8] c"BO\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"XK\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"DQ\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"CP\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"NA\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"GT\00", align 1
@.str.6 = private unnamed_addr constant [3 x i8] c"RE\00", align 1
@.str.7 = private unnamed_addr constant [3 x i8] c"TG\00", align 1
@.str.8 = private unnamed_addr constant [3 x i8] c"QD\00", align 1
@.str.9 = private unnamed_addr constant [3 x i8] c"FS\00", align 1
@.str.10 = private unnamed_addr constant [3 x i8] c"JW\00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c"HU\00", align 1
@.str.12 = private unnamed_addr constant [3 x i8] c"VI\00", align 1
@.str.13 = private unnamed_addr constant [3 x i8] c"AN\00", align 1
@.str.14 = private unnamed_addr constant [3 x i8] c"OB\00", align 1
@.str.15 = private unnamed_addr constant [3 x i8] c"ER\00", align 1
@.str.16 = private unnamed_addr constant [3 x i8] c"LY\00", align 1
@.str.17 = private unnamed_addr constant [3 x i8] c"PC\00", align 1
@.str.18 = private unnamed_addr constant [3 x i8] c"ZM\00", align 1
@__const.main.blocks = private unnamed_addr constant [21 x i8*] [i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18, i32 0, i32 0), i8* null], align 16
@.str.19 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.20 = private unnamed_addr constant [2 x i8] c"A\00", align 1
@.str.21 = private unnamed_addr constant [5 x i8] c"BARK\00", align 1
@.str.22 = private unnamed_addr constant [5 x i8] c"BOOK\00", align 1
@.str.23 = private unnamed_addr constant [6 x i8] c"TREAT\00", align 1
@.str.24 = private unnamed_addr constant [7 x i8] c"COMMON\00", align 1
@.str.25 = private unnamed_addr constant [6 x i8] c"SQUAD\00", align 1
@.str.26 = private unnamed_addr constant [8 x i8] c"Confuse\00", align 1
@__const.main.words = private unnamed_addr constant [9 x i8*] [i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.24, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.26, i32 0, i32 0), i8* null], align 16
@.str.27 = private unnamed_addr constant [7 x i8] c"%s\09%d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @can_make_words(i8** %b, i8* %word) #0 {
entry:
  %retval = alloca i32, align 4
  %b.addr = alloca i8**, align 4
  %word.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %ret = alloca i32, align 4
  %c = alloca i32, align 4
  %tmp = alloca i8*, align 4
  %tmp35 = alloca i8*, align 4
  store i8** %b, i8*** %b.addr, align 4
  store i8* %word, i8** %word.addr, align 4
  store i32 0, i32* %ret, align 4
  %0 = load i8*, i8** %word.addr, align 4
  %1 = load i8, i8* %0, align 1
  %conv = sext i8 %1 to i32
  %call = call i32 @toupper(i32 %conv) #4
  store i32 %call, i32* %c, align 4
  %2 = load i32, i32* %c, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i8**, i8*** %b.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %3, i32 0
  %4 = load i8*, i8** %arrayidx, align 4
  %tobool1 = icmp ne i8* %4, null
  br i1 %tobool1, label %if.end3, label %if.then2

if.then2:                                         ; preds = %if.end
  store i32 0, i32* %retval, align 4
  br label %return

if.end3:                                          ; preds = %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end3
  %5 = load i8**, i8*** %b.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds i8*, i8** %5, i32 %6
  %7 = load i8*, i8** %arrayidx4, align 4
  %tobool5 = icmp ne i8* %7, null
  br i1 %tobool5, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %8 = load i32, i32* %ret, align 4
  %tobool6 = icmp ne i32 %8, 0
  %lnot = xor i1 %tobool6, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %9 = phi i1 [ false, %for.cond ], [ %lnot, %land.rhs ]
  br i1 %9, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %10 = load i8**, i8*** %b.addr, align 4
  %11 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds i8*, i8** %10, i32 %11
  %12 = load i8*, i8** %arrayidx7, align 4
  %arrayidx8 = getelementptr inbounds i8, i8* %12, i32 0
  %13 = load i8, i8* %arrayidx8, align 1
  %conv9 = sext i8 %13 to i32
  %14 = load i32, i32* %c, align 4
  %cmp = icmp ne i32 %conv9, %14
  br i1 %cmp, label %land.lhs.true, label %if.end17

land.lhs.true:                                    ; preds = %for.body
  %15 = load i8**, i8*** %b.addr, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds i8*, i8** %15, i32 %16
  %17 = load i8*, i8** %arrayidx11, align 4
  %arrayidx12 = getelementptr inbounds i8, i8* %17, i32 1
  %18 = load i8, i8* %arrayidx12, align 1
  %conv13 = sext i8 %18 to i32
  %19 = load i32, i32* %c, align 4
  %cmp14 = icmp ne i32 %conv13, %19
  br i1 %cmp14, label %if.then16, label %if.end17

if.then16:                                        ; preds = %land.lhs.true
  br label %for.inc

if.end17:                                         ; preds = %land.lhs.true, %for.body
  %20 = load i8**, i8*** %b.addr, align 4
  %21 = load i32, i32* %i, align 4
  %arrayidx18 = getelementptr inbounds i8*, i8** %20, i32 %21
  %22 = load i8*, i8** %arrayidx18, align 4
  %23 = load i8**, i8*** %b.addr, align 4
  %arrayidx19 = getelementptr inbounds i8*, i8** %23, i32 0
  %24 = load i8*, i8** %arrayidx19, align 4
  %cmp20 = icmp ne i8* %22, %24
  br i1 %cmp20, label %if.then22, label %if.end27

if.then22:                                        ; preds = %if.end17
  %25 = load i8**, i8*** %b.addr, align 4
  %26 = load i32, i32* %i, align 4
  %arrayidx23 = getelementptr inbounds i8*, i8** %25, i32 %26
  %27 = load i8*, i8** %arrayidx23, align 4
  store i8* %27, i8** %tmp, align 4
  %28 = load i8**, i8*** %b.addr, align 4
  %arrayidx24 = getelementptr inbounds i8*, i8** %28, i32 0
  %29 = load i8*, i8** %arrayidx24, align 4
  %30 = load i8**, i8*** %b.addr, align 4
  %31 = load i32, i32* %i, align 4
  %arrayidx25 = getelementptr inbounds i8*, i8** %30, i32 %31
  store i8* %29, i8** %arrayidx25, align 4
  %32 = load i8*, i8** %tmp, align 4
  %33 = load i8**, i8*** %b.addr, align 4
  %arrayidx26 = getelementptr inbounds i8*, i8** %33, i32 0
  store i8* %32, i8** %arrayidx26, align 4
  br label %if.end27

if.end27:                                         ; preds = %if.then22, %if.end17
  %34 = load i8**, i8*** %b.addr, align 4
  %add.ptr = getelementptr inbounds i8*, i8** %34, i32 1
  %35 = load i8*, i8** %word.addr, align 4
  %add.ptr28 = getelementptr inbounds i8, i8* %35, i32 1
  %call29 = call i32 @can_make_words(i8** %add.ptr, i8* %add.ptr28)
  store i32 %call29, i32* %ret, align 4
  %36 = load i8**, i8*** %b.addr, align 4
  %37 = load i32, i32* %i, align 4
  %arrayidx30 = getelementptr inbounds i8*, i8** %36, i32 %37
  %38 = load i8*, i8** %arrayidx30, align 4
  %39 = load i8**, i8*** %b.addr, align 4
  %arrayidx31 = getelementptr inbounds i8*, i8** %39, i32 0
  %40 = load i8*, i8** %arrayidx31, align 4
  %cmp32 = icmp ne i8* %38, %40
  br i1 %cmp32, label %if.then34, label %if.end40

if.then34:                                        ; preds = %if.end27
  %41 = load i8**, i8*** %b.addr, align 4
  %42 = load i32, i32* %i, align 4
  %arrayidx36 = getelementptr inbounds i8*, i8** %41, i32 %42
  %43 = load i8*, i8** %arrayidx36, align 4
  store i8* %43, i8** %tmp35, align 4
  %44 = load i8**, i8*** %b.addr, align 4
  %arrayidx37 = getelementptr inbounds i8*, i8** %44, i32 0
  %45 = load i8*, i8** %arrayidx37, align 4
  %46 = load i8**, i8*** %b.addr, align 4
  %47 = load i32, i32* %i, align 4
  %arrayidx38 = getelementptr inbounds i8*, i8** %46, i32 %47
  store i8* %45, i8** %arrayidx38, align 4
  %48 = load i8*, i8** %tmp35, align 4
  %49 = load i8**, i8*** %b.addr, align 4
  %arrayidx39 = getelementptr inbounds i8*, i8** %49, i32 0
  store i8* %48, i8** %arrayidx39, align 4
  br label %if.end40

if.end40:                                         ; preds = %if.then34, %if.end27
  br label %for.inc

for.inc:                                          ; preds = %if.end40, %if.then16
  %50 = load i32, i32* %i, align 4
  %inc = add nsw i32 %50, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  %51 = load i32, i32* %ret, align 4
  store i32 %51, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then2, %if.then
  %52 = load i32, i32* %retval, align 4
  ret i32 %52
}

; Function Attrs: nounwind readonly
declare i32 @toupper(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %blocks = alloca [21 x i8*], align 16
  %words = alloca [9 x i8*], align 16
  %w = alloca i8**, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [21 x i8*]* %blocks to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([21 x i8*]* @__const.main.blocks to i8*), i32 84, i1 false)
  %1 = bitcast [9 x i8*]* %words to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %1, i8* align 16 bitcast ([9 x i8*]* @__const.main.words to i8*), i32 36, i1 false)
  %arraydecay = getelementptr inbounds [9 x i8*], [9 x i8*]* %words, i32 0, i32 0
  store i8** %arraydecay, i8*** %w, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i8**, i8*** %w, align 4
  %3 = load i8*, i8** %2, align 4
  %tobool = icmp ne i8* %3, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i8**, i8*** %w, align 4
  %5 = load i8*, i8** %4, align 4
  %arraydecay1 = getelementptr inbounds [21 x i8*], [21 x i8*]* %blocks, i32 0, i32 0
  %6 = load i8**, i8*** %w, align 4
  %7 = load i8*, i8** %6, align 4
  %call = call i32 @can_make_words(i8** %arraydecay1, i8* %7)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.27, i32 0, i32 0), i8* %5, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i8**, i8*** %w, align 4
  %incdec.ptr = getelementptr inbounds i8*, i8** %8, i32 1
  store i8** %incdec.ptr, i8*** %w, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare i32 @printf(i8* %0, ...) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %tobool = icmp ne i8* %3, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call = call i32 @can_make_words(i8** %arraydecay1, i8* %7)
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
