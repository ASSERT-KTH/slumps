
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for SumDigits()

; ModuleID = './Sum_digits_of_an_integer.c.bc'
source_filename = "./Sum_digits_of_an_integer.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [16 x i8] c"%d %d %d %d %d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @SumDigits(i64 %n, i32 %base) #0 {
entry:
  %n.addr = alloca i64, align 8
  %base.addr = alloca i32, align 4
  %sum = alloca i32, align 4
  store i64 %n, i64* %n.addr, align 8
  store i32 %base, i32* %base.addr, align 4
  store i32 0, i32* %sum, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i64, i64* %n.addr, align 8
  %tobool = icmp ne i64 %0, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i64, i64* %n.addr, align 8
  %2 = load i32, i32* %base.addr, align 4
  %conv = sext i32 %2 to i64
  %rem = urem i64 %1, %conv
  %3 = load i32, i32* %sum, align 4
  %conv1 = sext i32 %3 to i64
  %add = add i64 %conv1, %rem
  %conv2 = trunc i64 %add to i32
  store i32 %conv2, i32* %sum, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %base.addr, align 4
  %conv3 = sext i32 %4 to i64
  %5 = load i64, i64* %n.addr, align 8
  %div = udiv i64 %5, %conv3
  store i64 %div, i64* %n.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %6 = load i32, i32* %sum, align 4
  ret i32 %6
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call i32 @SumDigits(i64 1, i32 10)
  %call1 = call i32 @SumDigits(i64 12345, i32 10)
  %call2 = call i32 @SumDigits(i64 123045, i32 10)
  %call3 = call i32 @SumDigits(i64 254, i32 16)
  %call4 = call i32 @SumDigits(i64 3854, i32 16)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i32 0, i32 0), i32 %call, i32 %call1, i32 %call2, i32 %call3, i32 %call4)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i64, i64* %n.addr, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i64 %0, 0
; Looking for a replacement for:
%0:i64 = var
%1:i1 = ne 0:i64, %0
infer %1

; *****
; For LLVM instruction:
;  %1 = load i64, i64* %n.addr, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %base.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i32 %2 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %rem = urem i64 %1, %conv
; Looking for a replacement for:
%0:i64 = var
%1:i32 = var
%2:i64 = sext %1
%3:i64 = urem %0, %2
infer %3 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %sum, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %conv1 = sext i32 %3 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0
infer %1 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %add = add i64 %conv1, %rem
; Looking for a replacement for:
%0:i64 = var
%1:i32 = var
%2:i64 = sext %1
%3:i64 = urem %0, %2
%4:i32 = var
%5:i64 = sext %4
%6:i64 = add %3, %5
infer %6 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %conv2 = trunc i64 %add to i32
; Looking for a replacement for:
%0:i64 = var
%1:i32 = var
%2:i64 = sext %1
%3:i64 = urem %0, %2
%4:i32 = var
%5:i64 = sext %4
%6:i64 = add %3, %5
%7:i32 = trunc %6
infer %7

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %base.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %conv3 = sext i32 %4 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i64, i64* %n.addr, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %div = udiv i64 %5, %conv3
; Looking for a replacement for:
%0:i64 = var
%1:i32 = var
%2:i64 = sext %1
%3:i64 = udiv %0, %2
infer %3

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %sum, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i64 = var
infer %0


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i1 = ne 0:i64, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0
infer %1


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i32 = var
%2:i64 = sext %1
%3:i64 = urem %0, %2
infer %3 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 782260638
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i64 = sext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0
infer %1 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 7 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i32 = var
%2:i64 = sext %1
%3:i64 = urem %0, %2
%4:i32 = var
%5:i64 = sext %4
%6:i64 = add %3, %5
infer %6 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i64 = sext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i64 = sext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i64 = var
%1:i32 = var
%2:i64 = sext %1
%3:i64 = urem %0, %2

Cost = 6
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i32 = var
%2:i64 = sext %1
%3:i64 = urem %0, %2
%4:i32 = var
%5:i64 = sext %4
%6:i64 = add %3, %5
%7:i32 = trunc %6
infer %7


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i32 = var
%2:i64 = sext %1
%3:i64 = udiv %0, %2
infer %3


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 5547518937339527166
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i64 = sext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for SumDigits()

; entering Souper's runOnFunction() for main()

; ModuleID = './Sum_digits_of_an_integer.c.bc'
source_filename = "./Sum_digits_of_an_integer.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [16 x i8] c"%d %d %d %d %d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @SumDigits(i64 %n, i32 %base) #0 {
entry:
  %n.addr = alloca i64, align 8
  %base.addr = alloca i32, align 4
  %sum = alloca i32, align 4
  store i64 %n, i64* %n.addr, align 8
  store i32 %base, i32* %base.addr, align 4
  store i32 0, i32* %sum, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i64, i64* %n.addr, align 8
  %tobool = icmp ne i64 %0, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i64, i64* %n.addr, align 8
  %2 = load i32, i32* %base.addr, align 4
  %conv = sext i32 %2 to i64
  %rem = urem i64 %1, %conv
  %3 = load i32, i32* %sum, align 4
  %conv1 = sext i32 %3 to i64
  %add = add i64 %conv1, %rem
  %conv2 = trunc i64 %add to i32
  store i32 %conv2, i32* %sum, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %base.addr, align 4
  %conv3 = sext i32 %4 to i64
  %5 = load i64, i64* %n.addr, align 8
  %div = udiv i64 %5, %conv3
  store i64 %div, i64* %n.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %6 = load i32, i32* %sum, align 4
  ret i32 %6
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call i32 @SumDigits(i64 1, i32 10)
  %call1 = call i32 @SumDigits(i64 12345, i32 10)
  %call2 = call i32 @SumDigits(i64 123045, i32 10)
  %call3 = call i32 @SumDigits(i64 254, i32 16)
  %call4 = call i32 @SumDigits(i64 3854, i32 16)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i32 0, i32 0), i32 %call, i32 %call1, i32 %call2, i32 %call3, i32 %call4)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 @SumDigits(i64 1, i32 10)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call1 = call i32 @SumDigits(i64 12345, i32 10)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call2 = call i32 @SumDigits(i64 123045, i32 10)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call3 = call i32 @SumDigits(i64 254, i32 16)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call4 = call i32 @SumDigits(i64 3854, i32 16)
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
