
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for str_new()

; ModuleID = './Binary_strings.c.bc'
source_filename = "./Binary_strings.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.str_t = type { i32, i32, i8* }

@.str = private unnamed_addr constant [18 x i8] c"aaaaHaaaaaFaaaaHa\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"___.\00", align 1
@.str.2 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"%.*s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_new(i32 %len) #0 {
entry:
  %len.addr = alloca i32, align 4
  %s = alloca %struct.str_t*, align 4
  store i32 %len, i32* %len.addr, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.str_t*
  store %struct.str_t* %0, %struct.str_t** %s, align 4
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp ult i32 %1, 8
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 8, i32* %len.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i32, i32* %len.addr, align 4
  %3 = load %struct.str_t*, %struct.str_t** %s, align 4
  %alloc = getelementptr inbounds %struct.str_t, %struct.str_t* %3, i32 0, i32 1
  store i32 %2, i32* %alloc, align 4
  %4 = load i32, i32* %len.addr, align 4
  %call1 = call noalias i8* @malloc(i32 %4)
  %5 = load %struct.str_t*, %struct.str_t** %s, align 4
  %s2 = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 2
  store i8* %call1, i8** %s2, align 4
  %6 = load %struct.str_t*, %struct.str_t** %s, align 4
  %len3 = getelementptr inbounds %struct.str_t, %struct.str_t* %6, i32 0, i32 0
  store i32 0, i32* %len3, align 4
  %7 = load %struct.str_t*, %struct.str_t** %s, align 4
  ret %struct.str_t* %7
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @str_extend(%struct.str_t* %s) #0 {
entry:
  %s.addr = alloca %struct.str_t*, align 4
  %ns = alloca i32, align 4
  store %struct.str_t* %s, %struct.str_t** %s.addr, align 4
  %0 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 1
  %1 = load i32, i32* %alloc, align 4
  %mul = mul i32 %1, 2
  store i32 %mul, i32* %ns, align 4
  %2 = load i32, i32* %ns, align 4
  %3 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc1 = getelementptr inbounds %struct.str_t, %struct.str_t* %3, i32 0, i32 1
  %4 = load i32, i32* %alloc1, align 4
  %sub = sub i32 %2, %4
  %cmp = icmp ugt i32 %sub, 1024
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc2 = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 1
  %6 = load i32, i32* %alloc2, align 4
  %add = add i32 %6, 1024
  store i32 %add, i32* %ns, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s3 = getelementptr inbounds %struct.str_t, %struct.str_t* %7, i32 0, i32 2
  %8 = load i8*, i8** %s3, align 4
  %9 = load i32, i32* %ns, align 4
  %call = call i8* @realloc(i8* %8, i32 %9)
  %10 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s4 = getelementptr inbounds %struct.str_t, %struct.str_t* %10, i32 0, i32 2
  store i8* %call, i8** %s4, align 4
  %11 = load i32, i32* %ns, align 4
  %12 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc5 = getelementptr inbounds %struct.str_t, %struct.str_t* %12, i32 0, i32 1
  store i32 %11, i32* %alloc5, align 4
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @str_del(%struct.str_t* %s) #0 {
entry:
  %s.addr = alloca %struct.str_t*, align 4
  store %struct.str_t* %s, %struct.str_t** %s.addr, align 4
  %0 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s1 = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 2
  %1 = load i8*, i8** %s1, align 4
  call void @free(i8* %1)
  %2 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %3 = bitcast %struct.str_t* %2 to i8*
  call void @free(i8* %3)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @str_cmp(%struct.str_t* %l, %struct.str_t* %r) #0 {
entry:
  %retval = alloca i32, align 4
  %l.addr = alloca %struct.str_t*, align 4
  %r.addr = alloca %struct.str_t*, align 4
  %res = alloca i32, align 4
  %len = alloca i32, align 4
  store %struct.str_t* %l, %struct.str_t** %l.addr, align 4
  store %struct.str_t* %r, %struct.str_t** %r.addr, align 4
  %0 = load %struct.str_t*, %struct.str_t** %l.addr, align 4
  %len1 = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 0
  %1 = load i32, i32* %len1, align 4
  store i32 %1, i32* %len, align 4
  %2 = load i32, i32* %len, align 4
  %3 = load %struct.str_t*, %struct.str_t** %r.addr, align 4
  %len2 = getelementptr inbounds %struct.str_t, %struct.str_t* %3, i32 0, i32 0
  %4 = load i32, i32* %len2, align 4
  %cmp = icmp ugt i32 %2, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.str_t*, %struct.str_t** %r.addr, align 4
  %len3 = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 0
  %6 = load i32, i32* %len3, align 4
  store i32 %6, i32* %len, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.str_t*, %struct.str_t** %l.addr, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %7, i32 0, i32 2
  %8 = load i8*, i8** %s, align 4
  %9 = load %struct.str_t*, %struct.str_t** %r.addr, align 4
  %s4 = getelementptr inbounds %struct.str_t, %struct.str_t* %9, i32 0, i32 2
  %10 = load i8*, i8** %s4, align 4
  %11 = load i32, i32* %len, align 4
  %call = call i32 @memcmp(i8* %8, i8* %10, i32 %11)
  store i32 %call, i32* %res, align 4
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  %12 = load i32, i32* %res, align 4
  store i32 %12, i32* %retval, align 4
  br label %return

if.end6:                                          ; preds = %if.end
  %13 = load %struct.str_t*, %struct.str_t** %l.addr, align 4
  %len7 = getelementptr inbounds %struct.str_t, %struct.str_t* %13, i32 0, i32 0
  %14 = load i32, i32* %len7, align 4
  %15 = load %struct.str_t*, %struct.str_t** %r.addr, align 4
  %len8 = getelementptr inbounds %struct.str_t, %struct.str_t* %15, i32 0, i32 0
  %16 = load i32, i32* %len8, align 4
  %cmp9 = icmp ugt i32 %14, %16
  %17 = zext i1 %cmp9 to i64
  %cond = select i1 %cmp9, i32 1, i32 -1
  store i32 %cond, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end6, %if.then5
  %18 = load i32, i32* %retval, align 4
  ret i32 %18
}

declare i32 @memcmp(i8* %0, i8* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_dup(%struct.str_t* %src) #0 {
entry:
  %src.addr = alloca %struct.str_t*, align 4
  %x = alloca %struct.str_t*, align 4
  store %struct.str_t* %src, %struct.str_t** %src.addr, align 4
  %0 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 0
  %1 = load i32, i32* %len, align 4
  %call = call %struct.str_t* @str_new(i32 %1)
  store %struct.str_t* %call, %struct.str_t** %x, align 4
  %2 = load %struct.str_t*, %struct.str_t** %x, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %2, i32 0, i32 2
  %3 = load i8*, i8** %s, align 4
  %4 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %s1 = getelementptr inbounds %struct.str_t, %struct.str_t* %4, i32 0, i32 2
  %5 = load i8*, i8** %s1, align 4
  %6 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len2 = getelementptr inbounds %struct.str_t, %struct.str_t* %6, i32 0, i32 0
  %7 = load i32, i32* %len2, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %3, i8* align 1 %5, i32 %7, i1 false)
  %8 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len3 = getelementptr inbounds %struct.str_t, %struct.str_t* %8, i32 0, i32 0
  %9 = load i32, i32* %len3, align 4
  %10 = load %struct.str_t*, %struct.str_t** %x, align 4
  %len4 = getelementptr inbounds %struct.str_t, %struct.str_t* %10, i32 0, i32 0
  store i32 %9, i32* %len4, align 4
  %11 = load %struct.str_t*, %struct.str_t** %x, align 4
  ret %struct.str_t* %11
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_from_chars(i8* %t) #0 {
entry:
  %retval = alloca %struct.str_t*, align 4
  %t.addr = alloca i8*, align 4
  %l = alloca i32, align 4
  %x = alloca %struct.str_t*, align 4
  store i8* %t, i8** %t.addr, align 4
  %0 = load i8*, i8** %t.addr, align 4
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call = call %struct.str_t* @str_new(i32 0)
  store %struct.str_t* %call, %struct.str_t** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i8*, i8** %t.addr, align 4
  %call1 = call i32 @strlen(i8* %1) #4
  store i32 %call1, i32* %l, align 4
  %2 = load i32, i32* %l, align 4
  %add = add i32 %2, 1
  %call2 = call %struct.str_t* @str_new(i32 %add)
  store %struct.str_t* %call2, %struct.str_t** %x, align 4
  %3 = load i32, i32* %l, align 4
  %4 = load %struct.str_t*, %struct.str_t** %x, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %4, i32 0, i32 0
  store i32 %3, i32* %len, align 4
  %5 = load %struct.str_t*, %struct.str_t** %x, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 2
  %6 = load i8*, i8** %s, align 4
  %7 = load i8*, i8** %t.addr, align 4
  %8 = load i32, i32* %l, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %6, i8* align 1 %7, i32 %8, i1 false)
  %9 = load %struct.str_t*, %struct.str_t** %x, align 4
  store %struct.str_t* %9, %struct.str_t** %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %10 = load %struct.str_t*, %struct.str_t** %retval, align 4
  ret %struct.str_t* %10
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #3

; Function Attrs: noinline nounwind optnone
define hidden void @str_append(%struct.str_t* %s, i8 zeroext %b) #0 {
entry:
  %s.addr = alloca %struct.str_t*, align 4
  %b.addr = alloca i8, align 1
  store %struct.str_t* %s, %struct.str_t** %s.addr, align 4
  store i8 %b, i8* %b.addr, align 1
  %0 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 0
  %1 = load i32, i32* %len, align 4
  %2 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc = getelementptr inbounds %struct.str_t, %struct.str_t* %2, i32 0, i32 1
  %3 = load i32, i32* %alloc, align 4
  %cmp = icmp uge i32 %1, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  call void @str_extend(%struct.str_t* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load i8, i8* %b.addr, align 1
  %6 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s1 = getelementptr inbounds %struct.str_t, %struct.str_t* %6, i32 0, i32 2
  %7 = load i8*, i8** %s1, align 4
  %8 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len2 = getelementptr inbounds %struct.str_t, %struct.str_t* %8, i32 0, i32 0
  %9 = load i32, i32* %len2, align 4
  %inc = add i32 %9, 1
  store i32 %inc, i32* %len2, align 4
  %arrayidx = getelementptr inbounds i8, i8* %7, i32 %9
  store i8 %5, i8* %arrayidx, align 1
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_substr(%struct.str_t* %s, i32 %from, i32 %to) #0 {
entry:
  %retval = alloca %struct.str_t*, align 4
  %s.addr = alloca %struct.str_t*, align 4
  %from.addr = alloca i32, align 4
  %to.addr = alloca i32, align 4
  %x = alloca %struct.str_t*, align 4
  store %struct.str_t* %s, %struct.str_t** %s.addr, align 4
  store i32 %from, i32* %from.addr, align 4
  store i32 %to, i32* %to.addr, align 4
  %0 = load i32, i32* %to.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %1, i32 0, i32 0
  %2 = load i32, i32* %len, align 4
  store i32 %2, i32* %to.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load i32, i32* %from.addr, align 4
  %cmp = icmp slt i32 %3, 0
  br i1 %cmp, label %if.then1, label %if.end3

if.then1:                                         ; preds = %if.end
  %4 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len2 = getelementptr inbounds %struct.str_t, %struct.str_t* %4, i32 0, i32 0
  %5 = load i32, i32* %len2, align 4
  %6 = load i32, i32* %from.addr, align 4
  %add = add i32 %6, %5
  store i32 %add, i32* %from.addr, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.end
  %7 = load i32, i32* %from.addr, align 4
  %cmp4 = icmp slt i32 %7, 0
  br i1 %cmp4, label %if.then7, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end3
  %8 = load i32, i32* %from.addr, align 4
  %9 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len5 = getelementptr inbounds %struct.str_t, %struct.str_t* %9, i32 0, i32 0
  %10 = load i32, i32* %len5, align 4
  %cmp6 = icmp uge i32 %8, %10
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %lor.lhs.false, %if.end3
  store %struct.str_t* null, %struct.str_t** %retval, align 4
  br label %return

if.end8:                                          ; preds = %lor.lhs.false
  %11 = load i32, i32* %to.addr, align 4
  %12 = load i32, i32* %from.addr, align 4
  %cmp9 = icmp slt i32 %11, %12
  br i1 %cmp9, label %if.then10, label %if.end12

if.then10:                                        ; preds = %if.end8
  %13 = load i32, i32* %from.addr, align 4
  %add11 = add nsw i32 %13, 1
  store i32 %add11, i32* %to.addr, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then10, %if.end8
  %14 = load i32, i32* %to.addr, align 4
  %15 = load i32, i32* %from.addr, align 4
  %sub = sub nsw i32 %14, %15
  %call = call %struct.str_t* @str_new(i32 %sub)
  store %struct.str_t* %call, %struct.str_t** %x, align 4
  %16 = load i32, i32* %to.addr, align 4
  %17 = load i32, i32* %from.addr, align 4
  %sub13 = sub nsw i32 %16, %17
  %18 = load %struct.str_t*, %struct.str_t** %x, align 4
  %len14 = getelementptr inbounds %struct.str_t, %struct.str_t* %18, i32 0, i32 0
  store i32 %sub13, i32* %len14, align 4
  %19 = load %struct.str_t*, %struct.str_t** %x, align 4
  %s15 = getelementptr inbounds %struct.str_t, %struct.str_t* %19, i32 0, i32 2
  %20 = load i8*, i8** %s15, align 4
  %21 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s16 = getelementptr inbounds %struct.str_t, %struct.str_t* %21, i32 0, i32 2
  %22 = load i8*, i8** %s16, align 4
  %23 = load i32, i32* %from.addr, align 4
  %add.ptr = getelementptr inbounds i8, i8* %22, i32 %23
  %24 = load %struct.str_t*, %struct.str_t** %x, align 4
  %len17 = getelementptr inbounds %struct.str_t, %struct.str_t* %24, i32 0, i32 0
  %25 = load i32, i32* %len17, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %20, i8* align 1 %add.ptr, i32 %25, i1 false)
  %26 = load %struct.str_t*, %struct.str_t** %x, align 4
  store %struct.str_t* %26, %struct.str_t** %retval, align 4
  br label %return

return:                                           ; preds = %if.end12, %if.then7
  %27 = load %struct.str_t*, %struct.str_t** %retval, align 4
  ret %struct.str_t* %27
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_cat(%struct.str_t* %s, %struct.str_t* %s2) #0 {
entry:
  %s.addr = alloca %struct.str_t*, align 4
  %s2.addr = alloca %struct.str_t*, align 4
  store %struct.str_t* %s, %struct.str_t** %s.addr, align 4
  store %struct.str_t* %s2, %struct.str_t** %s2.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 1
  %1 = load i32, i32* %alloc, align 4
  %2 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %2, i32 0, i32 0
  %3 = load i32, i32* %len, align 4
  %4 = load %struct.str_t*, %struct.str_t** %s2.addr, align 4
  %len1 = getelementptr inbounds %struct.str_t, %struct.str_t* %4, i32 0, i32 0
  %5 = load i32, i32* %len1, align 4
  %add = add i32 %3, %5
  %cmp = icmp ult i32 %1, %add
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  call void @str_extend(%struct.str_t* %6)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %7 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s3 = getelementptr inbounds %struct.str_t, %struct.str_t* %7, i32 0, i32 2
  %8 = load i8*, i8** %s3, align 4
  %9 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len4 = getelementptr inbounds %struct.str_t, %struct.str_t* %9, i32 0, i32 0
  %10 = load i32, i32* %len4, align 4
  %add.ptr = getelementptr inbounds i8, i8* %8, i32 %10
  %11 = load %struct.str_t*, %struct.str_t** %s2.addr, align 4
  %s5 = getelementptr inbounds %struct.str_t, %struct.str_t* %11, i32 0, i32 2
  %12 = load i8*, i8** %s5, align 4
  %13 = load %struct.str_t*, %struct.str_t** %s2.addr, align 4
  %len6 = getelementptr inbounds %struct.str_t, %struct.str_t* %13, i32 0, i32 0
  %14 = load i32, i32* %len6, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %add.ptr, i8* align 1 %12, i32 %14, i1 false)
  %15 = load %struct.str_t*, %struct.str_t** %s2.addr, align 4
  %len7 = getelementptr inbounds %struct.str_t, %struct.str_t* %15, i32 0, i32 0
  %16 = load i32, i32* %len7, align 4
  %17 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len8 = getelementptr inbounds %struct.str_t, %struct.str_t* %17, i32 0, i32 0
  %18 = load i32, i32* %len8, align 4
  %add9 = add i32 %18, %16
  store i32 %add9, i32* %len8, align 4
  %19 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  ret %struct.str_t* %19
}

; Function Attrs: noinline nounwind optnone
define hidden void @str_swap(%struct.str_t* %a, %struct.str_t* %b) #0 {
entry:
  %a.addr = alloca %struct.str_t*, align 4
  %b.addr = alloca %struct.str_t*, align 4
  %tz = alloca i32, align 4
  %ts = alloca i8*, align 4
  store %struct.str_t* %a, %struct.str_t** %a.addr, align 4
  store %struct.str_t* %b, %struct.str_t** %b.addr, align 4
  %0 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %alloc = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 1
  %1 = load i32, i32* %alloc, align 4
  store i32 %1, i32* %tz, align 4
  %2 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %alloc1 = getelementptr inbounds %struct.str_t, %struct.str_t* %2, i32 0, i32 1
  %3 = load i32, i32* %alloc1, align 4
  %4 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %alloc2 = getelementptr inbounds %struct.str_t, %struct.str_t* %4, i32 0, i32 1
  store i32 %3, i32* %alloc2, align 4
  %5 = load i32, i32* %tz, align 4
  %6 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %alloc3 = getelementptr inbounds %struct.str_t, %struct.str_t* %6, i32 0, i32 1
  store i32 %5, i32* %alloc3, align 4
  %7 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %7, i32 0, i32 0
  %8 = load i32, i32* %len, align 4
  store i32 %8, i32* %tz, align 4
  %9 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %len4 = getelementptr inbounds %struct.str_t, %struct.str_t* %9, i32 0, i32 0
  %10 = load i32, i32* %len4, align 4
  %11 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %len5 = getelementptr inbounds %struct.str_t, %struct.str_t* %11, i32 0, i32 0
  store i32 %10, i32* %len5, align 4
  %12 = load i32, i32* %tz, align 4
  %13 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %len6 = getelementptr inbounds %struct.str_t, %struct.str_t* %13, i32 0, i32 0
  store i32 %12, i32* %len6, align 4
  %14 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %14, i32 0, i32 2
  %15 = load i8*, i8** %s, align 4
  store i8* %15, i8** %ts, align 4
  %16 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %s7 = getelementptr inbounds %struct.str_t, %struct.str_t* %16, i32 0, i32 2
  %17 = load i8*, i8** %s7, align 4
  %18 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %s8 = getelementptr inbounds %struct.str_t, %struct.str_t* %18, i32 0, i32 2
  store i8* %17, i8** %s8, align 4
  %19 = load i8*, i8** %ts, align 4
  %20 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %s9 = getelementptr inbounds %struct.str_t, %struct.str_t* %20, i32 0, i32 2
  store i8* %19, i8** %s9, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_subst(%struct.str_t* %tgt, %struct.str_t* %pat, %struct.str_t* %repl) #0 {
entry:
  %tgt.addr = alloca %struct.str_t*, align 4
  %pat.addr = alloca %struct.str_t*, align 4
  %repl.addr = alloca %struct.str_t*, align 4
  %tmp = alloca %struct.str_t*, align 4
  %i = alloca i32, align 4
  store %struct.str_t* %tgt, %struct.str_t** %tgt.addr, align 4
  store %struct.str_t* %pat, %struct.str_t** %pat.addr, align 4
  store %struct.str_t* %repl, %struct.str_t** %repl.addr, align 4
  %call = call %struct.str_t* @str_new(i32 0)
  store %struct.str_t* %call, %struct.str_t** %tmp, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %if.end15, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.str_t*, %struct.str_t** %pat.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %1, i32 0, i32 0
  %2 = load i32, i32* %len, align 4
  %add = add i32 %0, %2
  %3 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %len1 = getelementptr inbounds %struct.str_t, %struct.str_t* %3, i32 0, i32 0
  %4 = load i32, i32* %len1, align 4
  %cmp = icmp ule i32 %add, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 2
  %6 = load i8*, i8** %s, align 4
  %7 = load i32, i32* %i, align 4
  %add.ptr = getelementptr inbounds i8, i8* %6, i32 %7
  %8 = load %struct.str_t*, %struct.str_t** %pat.addr, align 4
  %s2 = getelementptr inbounds %struct.str_t, %struct.str_t* %8, i32 0, i32 2
  %9 = load i8*, i8** %s2, align 4
  %10 = load %struct.str_t*, %struct.str_t** %pat.addr, align 4
  %len3 = getelementptr inbounds %struct.str_t, %struct.str_t* %10, i32 0, i32 0
  %11 = load i32, i32* %len3, align 4
  %call4 = call i32 @memcmp(i8* %add.ptr, i8* %9, i32 %11)
  %tobool = icmp ne i32 %call4, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %12 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  %13 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %s5 = getelementptr inbounds %struct.str_t, %struct.str_t* %13, i32 0, i32 2
  %14 = load i8*, i8** %s5, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %14, i32 %15
  %16 = load i8, i8* %arrayidx, align 1
  call void @str_append(%struct.str_t* %12, i8 zeroext %16)
  %17 = load i32, i32* %i, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %i, align 4
  br label %if.end15

if.else:                                          ; preds = %for.body
  %18 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  %19 = load %struct.str_t*, %struct.str_t** %repl.addr, align 4
  %call6 = call %struct.str_t* @str_cat(%struct.str_t* %18, %struct.str_t* %19)
  %20 = load %struct.str_t*, %struct.str_t** %pat.addr, align 4
  %len7 = getelementptr inbounds %struct.str_t, %struct.str_t* %20, i32 0, i32 0
  %21 = load i32, i32* %len7, align 4
  %22 = load i32, i32* %i, align 4
  %add8 = add i32 %22, %21
  store i32 %add8, i32* %i, align 4
  %23 = load %struct.str_t*, %struct.str_t** %pat.addr, align 4
  %len9 = getelementptr inbounds %struct.str_t, %struct.str_t* %23, i32 0, i32 0
  %24 = load i32, i32* %len9, align 4
  %tobool10 = icmp ne i32 %24, 0
  br i1 %tobool10, label %if.end, label %if.then11

if.then11:                                        ; preds = %if.else
  %25 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  %26 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %s12 = getelementptr inbounds %struct.str_t, %struct.str_t* %26, i32 0, i32 2
  %27 = load i8*, i8** %s12, align 4
  %28 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %28, 1
  store i32 %inc13, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds i8, i8* %27, i32 %28
  %29 = load i8, i8* %arrayidx14, align 1
  call void @str_append(%struct.str_t* %25, i8 zeroext %29)
  br label %if.end

if.end:                                           ; preds = %if.then11, %if.else
  br label %if.end15

if.end15:                                         ; preds = %if.end, %if.then
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end
  %30 = load i32, i32* %i, align 4
  %31 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %len16 = getelementptr inbounds %struct.str_t, %struct.str_t* %31, i32 0, i32 0
  %32 = load i32, i32* %len16, align 4
  %cmp17 = icmp ult i32 %30, %32
  br i1 %cmp17, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %33 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  %34 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %s18 = getelementptr inbounds %struct.str_t, %struct.str_t* %34, i32 0, i32 2
  %35 = load i8*, i8** %s18, align 4
  %36 = load i32, i32* %i, align 4
  %inc19 = add nsw i32 %36, 1
  store i32 %inc19, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds i8, i8* %35, i32 %36
  %37 = load i8, i8* %arrayidx20, align 1
  call void @str_append(%struct.str_t* %33, i8 zeroext %37)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %38 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  %39 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  call void @str_swap(%struct.str_t* %38, %struct.str_t* %39)
  %40 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  call void @str_del(%struct.str_t* %40)
  %41 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  ret %struct.str_t* %41
}

; Function Attrs: noinline nounwind optnone
define hidden void @str_set(%struct.str_t* %dest, %struct.str_t* %src) #0 {
entry:
  %dest.addr = alloca %struct.str_t*, align 4
  %src.addr = alloca %struct.str_t*, align 4
  store %struct.str_t* %dest, %struct.str_t** %dest.addr, align 4
  store %struct.str_t* %src, %struct.str_t** %src.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct.str_t*, %struct.str_t** %dest.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 0
  %1 = load i32, i32* %len, align 4
  %2 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len1 = getelementptr inbounds %struct.str_t, %struct.str_t* %2, i32 0, i32 0
  %3 = load i32, i32* %len1, align 4
  %cmp = icmp ult i32 %1, %3
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load %struct.str_t*, %struct.str_t** %dest.addr, align 4
  call void @str_extend(%struct.str_t* %4)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %5 = load %struct.str_t*, %struct.str_t** %dest.addr, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 2
  %6 = load i8*, i8** %s, align 4
  %7 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %s2 = getelementptr inbounds %struct.str_t, %struct.str_t* %7, i32 0, i32 2
  %8 = load i8*, i8** %s2, align 4
  %9 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len3 = getelementptr inbounds %struct.str_t, %struct.str_t* %9, i32 0, i32 0
  %10 = load i32, i32* %len3, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %6, i8* align 1 %8, i32 %10, i1 false)
  %11 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len4 = getelementptr inbounds %struct.str_t, %struct.str_t* %11, i32 0, i32 0
  %12 = load i32, i32* %len4, align 4
  %13 = load %struct.str_t*, %struct.str_t** %dest.addr, align 4
  %len5 = getelementptr inbounds %struct.str_t, %struct.str_t* %13, i32 0, i32 0
  store i32 %12, i32* %len5, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %s = alloca %struct.str_t*, align 4
  %s2 = alloca %struct.str_t*, align 4
  %s3 = alloca %struct.str_t*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.str_t* @str_from_chars(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i32 0, i32 0))
  store %struct.str_t* %call, %struct.str_t** %s, align 4
  %call1 = call %struct.str_t* @str_from_chars(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0))
  store %struct.str_t* %call1, %struct.str_t** %s2, align 4
  %call2 = call %struct.str_t* @str_from_chars(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2, i32 0, i32 0))
  store %struct.str_t* %call2, %struct.str_t** %s3, align 4
  %0 = load %struct.str_t*, %struct.str_t** %s, align 4
  %1 = load %struct.str_t*, %struct.str_t** %s3, align 4
  %2 = load %struct.str_t*, %struct.str_t** %s2, align 4
  %call3 = call %struct.str_t* @str_subst(%struct.str_t* %0, %struct.str_t* %1, %struct.str_t* %2)
  %3 = load %struct.str_t*, %struct.str_t** %s, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %3, i32 0, i32 0
  %4 = load i32, i32* %len, align 4
  %5 = load %struct.str_t*, %struct.str_t** %s, align 4
  %s4 = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 2
  %6 = load i8*, i8** %s4, align 4
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0), i32 %4, i8* %6)
  %7 = load %struct.str_t*, %struct.str_t** %s, align 4
  call void @str_del(%struct.str_t* %7)
  %8 = load %struct.str_t*, %struct.str_t** %s2, align 4
  call void @str_del(%struct.str_t* %8)
  %9 = load %struct.str_t*, %struct.str_t** %s3, align 4
  call void @str_del(%struct.str_t* %9)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ult i32 %1, 8
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ult %0, 8:i32
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ult %0, 8:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for str_new()

; entering Souper's runOnFunction() for str_extend()

; ModuleID = './Binary_strings.c.bc'
source_filename = "./Binary_strings.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.str_t = type { i32, i32, i8* }

@.str = private unnamed_addr constant [18 x i8] c"aaaaHaaaaaFaaaaHa\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"___.\00", align 1
@.str.2 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"%.*s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_new(i32 %len) #0 {
entry:
  %len.addr = alloca i32, align 4
  %s = alloca %struct.str_t*, align 4
  store i32 %len, i32* %len.addr, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.str_t*
  store %struct.str_t* %0, %struct.str_t** %s, align 4
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp ult i32 %1, 8
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 8, i32* %len.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i32, i32* %len.addr, align 4
  %3 = load %struct.str_t*, %struct.str_t** %s, align 4
  %alloc = getelementptr inbounds %struct.str_t, %struct.str_t* %3, i32 0, i32 1
  store i32 %2, i32* %alloc, align 4
  %4 = load i32, i32* %len.addr, align 4
  %call1 = call noalias i8* @malloc(i32 %4)
  %5 = load %struct.str_t*, %struct.str_t** %s, align 4
  %s2 = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 2
  store i8* %call1, i8** %s2, align 4
  %6 = load %struct.str_t*, %struct.str_t** %s, align 4
  %len3 = getelementptr inbounds %struct.str_t, %struct.str_t* %6, i32 0, i32 0
  store i32 0, i32* %len3, align 4
  %7 = load %struct.str_t*, %struct.str_t** %s, align 4
  ret %struct.str_t* %7
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @str_extend(%struct.str_t* %s) #0 {
entry:
  %s.addr = alloca %struct.str_t*, align 4
  %ns = alloca i32, align 4
  store %struct.str_t* %s, %struct.str_t** %s.addr, align 4
  %0 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 1
  %1 = load i32, i32* %alloc, align 4
  %mul = mul i32 %1, 2
  store i32 %mul, i32* %ns, align 4
  %2 = load i32, i32* %ns, align 4
  %3 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc1 = getelementptr inbounds %struct.str_t, %struct.str_t* %3, i32 0, i32 1
  %4 = load i32, i32* %alloc1, align 4
  %sub = sub i32 %2, %4
  %cmp = icmp ugt i32 %sub, 1024
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc2 = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 1
  %6 = load i32, i32* %alloc2, align 4
  %add = add i32 %6, 1024
  store i32 %add, i32* %ns, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s3 = getelementptr inbounds %struct.str_t, %struct.str_t* %7, i32 0, i32 2
  %8 = load i8*, i8** %s3, align 4
  %9 = load i32, i32* %ns, align 4
  %call = call i8* @realloc(i8* %8, i32 %9)
  %10 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s4 = getelementptr inbounds %struct.str_t, %struct.str_t* %10, i32 0, i32 2
  store i8* %call, i8** %s4, align 4
  %11 = load i32, i32* %ns, align 4
  %12 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc5 = getelementptr inbounds %struct.str_t, %struct.str_t* %12, i32 0, i32 1
  store i32 %11, i32* %alloc5, align 4
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @str_del(%struct.str_t* %s) #0 {
entry:
  %s.addr = alloca %struct.str_t*, align 4
  store %struct.str_t* %s, %struct.str_t** %s.addr, align 4
  %0 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s1 = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 2
  %1 = load i8*, i8** %s1, align 4
  call void @free(i8* %1)
  %2 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %3 = bitcast %struct.str_t* %2 to i8*
  call void @free(i8* %3)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @str_cmp(%struct.str_t* %l, %struct.str_t* %r) #0 {
entry:
  %retval = alloca i32, align 4
  %l.addr = alloca %struct.str_t*, align 4
  %r.addr = alloca %struct.str_t*, align 4
  %res = alloca i32, align 4
  %len = alloca i32, align 4
  store %struct.str_t* %l, %struct.str_t** %l.addr, align 4
  store %struct.str_t* %r, %struct.str_t** %r.addr, align 4
  %0 = load %struct.str_t*, %struct.str_t** %l.addr, align 4
  %len1 = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 0
  %1 = load i32, i32* %len1, align 4
  store i32 %1, i32* %len, align 4
  %2 = load i32, i32* %len, align 4
  %3 = load %struct.str_t*, %struct.str_t** %r.addr, align 4
  %len2 = getelementptr inbounds %struct.str_t, %struct.str_t* %3, i32 0, i32 0
  %4 = load i32, i32* %len2, align 4
  %cmp = icmp ugt i32 %2, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.str_t*, %struct.str_t** %r.addr, align 4
  %len3 = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 0
  %6 = load i32, i32* %len3, align 4
  store i32 %6, i32* %len, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.str_t*, %struct.str_t** %l.addr, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %7, i32 0, i32 2
  %8 = load i8*, i8** %s, align 4
  %9 = load %struct.str_t*, %struct.str_t** %r.addr, align 4
  %s4 = getelementptr inbounds %struct.str_t, %struct.str_t* %9, i32 0, i32 2
  %10 = load i8*, i8** %s4, align 4
  %11 = load i32, i32* %len, align 4
  %call = call i32 @memcmp(i8* %8, i8* %10, i32 %11)
  store i32 %call, i32* %res, align 4
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  %12 = load i32, i32* %res, align 4
  store i32 %12, i32* %retval, align 4
  br label %return

if.end6:                                          ; preds = %if.end
  %13 = load %struct.str_t*, %struct.str_t** %l.addr, align 4
  %len7 = getelementptr inbounds %struct.str_t, %struct.str_t* %13, i32 0, i32 0
  %14 = load i32, i32* %len7, align 4
  %15 = load %struct.str_t*, %struct.str_t** %r.addr, align 4
  %len8 = getelementptr inbounds %struct.str_t, %struct.str_t* %15, i32 0, i32 0
  %16 = load i32, i32* %len8, align 4
  %cmp9 = icmp ugt i32 %14, %16
  %17 = zext i1 %cmp9 to i64
  %cond = select i1 %cmp9, i32 1, i32 -1
  store i32 %cond, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end6, %if.then5
  %18 = load i32, i32* %retval, align 4
  ret i32 %18
}

declare i32 @memcmp(i8* %0, i8* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_dup(%struct.str_t* %src) #0 {
entry:
  %src.addr = alloca %struct.str_t*, align 4
  %x = alloca %struct.str_t*, align 4
  store %struct.str_t* %src, %struct.str_t** %src.addr, align 4
  %0 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 0
  %1 = load i32, i32* %len, align 4
  %call = call %struct.str_t* @str_new(i32 %1)
  store %struct.str_t* %call, %struct.str_t** %x, align 4
  %2 = load %struct.str_t*, %struct.str_t** %x, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %2, i32 0, i32 2
  %3 = load i8*, i8** %s, align 4
  %4 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %s1 = getelementptr inbounds %struct.str_t, %struct.str_t* %4, i32 0, i32 2
  %5 = load i8*, i8** %s1, align 4
  %6 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len2 = getelementptr inbounds %struct.str_t, %struct.str_t* %6, i32 0, i32 0
  %7 = load i32, i32* %len2, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %3, i8* align 1 %5, i32 %7, i1 false)
  %8 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len3 = getelementptr inbounds %struct.str_t, %struct.str_t* %8, i32 0, i32 0
  %9 = load i32, i32* %len3, align 4
  %10 = load %struct.str_t*, %struct.str_t** %x, align 4
  %len4 = getelementptr inbounds %struct.str_t, %struct.str_t* %10, i32 0, i32 0
  store i32 %9, i32* %len4, align 4
  %11 = load %struct.str_t*, %struct.str_t** %x, align 4
  ret %struct.str_t* %11
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_from_chars(i8* %t) #0 {
entry:
  %retval = alloca %struct.str_t*, align 4
  %t.addr = alloca i8*, align 4
  %l = alloca i32, align 4
  %x = alloca %struct.str_t*, align 4
  store i8* %t, i8** %t.addr, align 4
  %0 = load i8*, i8** %t.addr, align 4
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call = call %struct.str_t* @str_new(i32 0)
  store %struct.str_t* %call, %struct.str_t** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i8*, i8** %t.addr, align 4
  %call1 = call i32 @strlen(i8* %1) #4
  store i32 %call1, i32* %l, align 4
  %2 = load i32, i32* %l, align 4
  %add = add i32 %2, 1
  %call2 = call %struct.str_t* @str_new(i32 %add)
  store %struct.str_t* %call2, %struct.str_t** %x, align 4
  %3 = load i32, i32* %l, align 4
  %4 = load %struct.str_t*, %struct.str_t** %x, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %4, i32 0, i32 0
  store i32 %3, i32* %len, align 4
  %5 = load %struct.str_t*, %struct.str_t** %x, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 2
  %6 = load i8*, i8** %s, align 4
  %7 = load i8*, i8** %t.addr, align 4
  %8 = load i32, i32* %l, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %6, i8* align 1 %7, i32 %8, i1 false)
  %9 = load %struct.str_t*, %struct.str_t** %x, align 4
  store %struct.str_t* %9, %struct.str_t** %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %10 = load %struct.str_t*, %struct.str_t** %retval, align 4
  ret %struct.str_t* %10
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #3

; Function Attrs: noinline nounwind optnone
define hidden void @str_append(%struct.str_t* %s, i8 zeroext %b) #0 {
entry:
  %s.addr = alloca %struct.str_t*, align 4
  %b.addr = alloca i8, align 1
  store %struct.str_t* %s, %struct.str_t** %s.addr, align 4
  store i8 %b, i8* %b.addr, align 1
  %0 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 0
  %1 = load i32, i32* %len, align 4
  %2 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc = getelementptr inbounds %struct.str_t, %struct.str_t* %2, i32 0, i32 1
  %3 = load i32, i32* %alloc, align 4
  %cmp = icmp uge i32 %1, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  call void @str_extend(%struct.str_t* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load i8, i8* %b.addr, align 1
  %6 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s1 = getelementptr inbounds %struct.str_t, %struct.str_t* %6, i32 0, i32 2
  %7 = load i8*, i8** %s1, align 4
  %8 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len2 = getelementptr inbounds %struct.str_t, %struct.str_t* %8, i32 0, i32 0
  %9 = load i32, i32* %len2, align 4
  %inc = add i32 %9, 1
  store i32 %inc, i32* %len2, align 4
  %arrayidx = getelementptr inbounds i8, i8* %7, i32 %9
  store i8 %5, i8* %arrayidx, align 1
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_substr(%struct.str_t* %s, i32 %from, i32 %to) #0 {
entry:
  %retval = alloca %struct.str_t*, align 4
  %s.addr = alloca %struct.str_t*, align 4
  %from.addr = alloca i32, align 4
  %to.addr = alloca i32, align 4
  %x = alloca %struct.str_t*, align 4
  store %struct.str_t* %s, %struct.str_t** %s.addr, align 4
  store i32 %from, i32* %from.addr, align 4
  store i32 %to, i32* %to.addr, align 4
  %0 = load i32, i32* %to.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %1, i32 0, i32 0
  %2 = load i32, i32* %len, align 4
  store i32 %2, i32* %to.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load i32, i32* %from.addr, align 4
  %cmp = icmp slt i32 %3, 0
  br i1 %cmp, label %if.then1, label %if.end3

if.then1:                                         ; preds = %if.end
  %4 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len2 = getelementptr inbounds %struct.str_t, %struct.str_t* %4, i32 0, i32 0
  %5 = load i32, i32* %len2, align 4
  %6 = load i32, i32* %from.addr, align 4
  %add = add i32 %6, %5
  store i32 %add, i32* %from.addr, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.end
  %7 = load i32, i32* %from.addr, align 4
  %cmp4 = icmp slt i32 %7, 0
  br i1 %cmp4, label %if.then7, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end3
  %8 = load i32, i32* %from.addr, align 4
  %9 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len5 = getelementptr inbounds %struct.str_t, %struct.str_t* %9, i32 0, i32 0
  %10 = load i32, i32* %len5, align 4
  %cmp6 = icmp uge i32 %8, %10
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %lor.lhs.false, %if.end3
  store %struct.str_t* null, %struct.str_t** %retval, align 4
  br label %return

if.end8:                                          ; preds = %lor.lhs.false
  %11 = load i32, i32* %to.addr, align 4
  %12 = load i32, i32* %from.addr, align 4
  %cmp9 = icmp slt i32 %11, %12
  br i1 %cmp9, label %if.then10, label %if.end12

if.then10:                                        ; preds = %if.end8
  %13 = load i32, i32* %from.addr, align 4
  %add11 = add nsw i32 %13, 1
  store i32 %add11, i32* %to.addr, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then10, %if.end8
  %14 = load i32, i32* %to.addr, align 4
  %15 = load i32, i32* %from.addr, align 4
  %sub = sub nsw i32 %14, %15
  %call = call %struct.str_t* @str_new(i32 %sub)
  store %struct.str_t* %call, %struct.str_t** %x, align 4
  %16 = load i32, i32* %to.addr, align 4
  %17 = load i32, i32* %from.addr, align 4
  %sub13 = sub nsw i32 %16, %17
  %18 = load %struct.str_t*, %struct.str_t** %x, align 4
  %len14 = getelementptr inbounds %struct.str_t, %struct.str_t* %18, i32 0, i32 0
  store i32 %sub13, i32* %len14, align 4
  %19 = load %struct.str_t*, %struct.str_t** %x, align 4
  %s15 = getelementptr inbounds %struct.str_t, %struct.str_t* %19, i32 0, i32 2
  %20 = load i8*, i8** %s15, align 4
  %21 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s16 = getelementptr inbounds %struct.str_t, %struct.str_t* %21, i32 0, i32 2
  %22 = load i8*, i8** %s16, align 4
  %23 = load i32, i32* %from.addr, align 4
  %add.ptr = getelementptr inbounds i8, i8* %22, i32 %23
  %24 = load %struct.str_t*, %struct.str_t** %x, align 4
  %len17 = getelementptr inbounds %struct.str_t, %struct.str_t* %24, i32 0, i32 0
  %25 = load i32, i32* %len17, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %20, i8* align 1 %add.ptr, i32 %25, i1 false)
  %26 = load %struct.str_t*, %struct.str_t** %x, align 4
  store %struct.str_t* %26, %struct.str_t** %retval, align 4
  br label %return

return:                                           ; preds = %if.end12, %if.then7
  %27 = load %struct.str_t*, %struct.str_t** %retval, align 4
  ret %struct.str_t* %27
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_cat(%struct.str_t* %s, %struct.str_t* %s2) #0 {
entry:
  %s.addr = alloca %struct.str_t*, align 4
  %s2.addr = alloca %struct.str_t*, align 4
  store %struct.str_t* %s, %struct.str_t** %s.addr, align 4
  store %struct.str_t* %s2, %struct.str_t** %s2.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 1
  %1 = load i32, i32* %alloc, align 4
  %2 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %2, i32 0, i32 0
  %3 = load i32, i32* %len, align 4
  %4 = load %struct.str_t*, %struct.str_t** %s2.addr, align 4
  %len1 = getelementptr inbounds %struct.str_t, %struct.str_t* %4, i32 0, i32 0
  %5 = load i32, i32* %len1, align 4
  %add = add i32 %3, %5
  %cmp = icmp ult i32 %1, %add
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  call void @str_extend(%struct.str_t* %6)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %7 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s3 = getelementptr inbounds %struct.str_t, %struct.str_t* %7, i32 0, i32 2
  %8 = load i8*, i8** %s3, align 4
  %9 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len4 = getelementptr inbounds %struct.str_t, %struct.str_t* %9, i32 0, i32 0
  %10 = load i32, i32* %len4, align 4
  %add.ptr = getelementptr inbounds i8, i8* %8, i32 %10
  %11 = load %struct.str_t*, %struct.str_t** %s2.addr, align 4
  %s5 = getelementptr inbounds %struct.str_t, %struct.str_t* %11, i32 0, i32 2
  %12 = load i8*, i8** %s5, align 4
  %13 = load %struct.str_t*, %struct.str_t** %s2.addr, align 4
  %len6 = getelementptr inbounds %struct.str_t, %struct.str_t* %13, i32 0, i32 0
  %14 = load i32, i32* %len6, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %add.ptr, i8* align 1 %12, i32 %14, i1 false)
  %15 = load %struct.str_t*, %struct.str_t** %s2.addr, align 4
  %len7 = getelementptr inbounds %struct.str_t, %struct.str_t* %15, i32 0, i32 0
  %16 = load i32, i32* %len7, align 4
  %17 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len8 = getelementptr inbounds %struct.str_t, %struct.str_t* %17, i32 0, i32 0
  %18 = load i32, i32* %len8, align 4
  %add9 = add i32 %18, %16
  store i32 %add9, i32* %len8, align 4
  %19 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  ret %struct.str_t* %19
}

; Function Attrs: noinline nounwind optnone
define hidden void @str_swap(%struct.str_t* %a, %struct.str_t* %b) #0 {
entry:
  %a.addr = alloca %struct.str_t*, align 4
  %b.addr = alloca %struct.str_t*, align 4
  %tz = alloca i32, align 4
  %ts = alloca i8*, align 4
  store %struct.str_t* %a, %struct.str_t** %a.addr, align 4
  store %struct.str_t* %b, %struct.str_t** %b.addr, align 4
  %0 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %alloc = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 1
  %1 = load i32, i32* %alloc, align 4
  store i32 %1, i32* %tz, align 4
  %2 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %alloc1 = getelementptr inbounds %struct.str_t, %struct.str_t* %2, i32 0, i32 1
  %3 = load i32, i32* %alloc1, align 4
  %4 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %alloc2 = getelementptr inbounds %struct.str_t, %struct.str_t* %4, i32 0, i32 1
  store i32 %3, i32* %alloc2, align 4
  %5 = load i32, i32* %tz, align 4
  %6 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %alloc3 = getelementptr inbounds %struct.str_t, %struct.str_t* %6, i32 0, i32 1
  store i32 %5, i32* %alloc3, align 4
  %7 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %7, i32 0, i32 0
  %8 = load i32, i32* %len, align 4
  store i32 %8, i32* %tz, align 4
  %9 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %len4 = getelementptr inbounds %struct.str_t, %struct.str_t* %9, i32 0, i32 0
  %10 = load i32, i32* %len4, align 4
  %11 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %len5 = getelementptr inbounds %struct.str_t, %struct.str_t* %11, i32 0, i32 0
  store i32 %10, i32* %len5, align 4
  %12 = load i32, i32* %tz, align 4
  %13 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %len6 = getelementptr inbounds %struct.str_t, %struct.str_t* %13, i32 0, i32 0
  store i32 %12, i32* %len6, align 4
  %14 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %14, i32 0, i32 2
  %15 = load i8*, i8** %s, align 4
  store i8* %15, i8** %ts, align 4
  %16 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %s7 = getelementptr inbounds %struct.str_t, %struct.str_t* %16, i32 0, i32 2
  %17 = load i8*, i8** %s7, align 4
  %18 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %s8 = getelementptr inbounds %struct.str_t, %struct.str_t* %18, i32 0, i32 2
  store i8* %17, i8** %s8, align 4
  %19 = load i8*, i8** %ts, align 4
  %20 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %s9 = getelementptr inbounds %struct.str_t, %struct.str_t* %20, i32 0, i32 2
  store i8* %19, i8** %s9, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_subst(%struct.str_t* %tgt, %struct.str_t* %pat, %struct.str_t* %repl) #0 {
entry:
  %tgt.addr = alloca %struct.str_t*, align 4
  %pat.addr = alloca %struct.str_t*, align 4
  %repl.addr = alloca %struct.str_t*, align 4
  %tmp = alloca %struct.str_t*, align 4
  %i = alloca i32, align 4
  store %struct.str_t* %tgt, %struct.str_t** %tgt.addr, align 4
  store %struct.str_t* %pat, %struct.str_t** %pat.addr, align 4
  store %struct.str_t* %repl, %struct.str_t** %repl.addr, align 4
  %call = call %struct.str_t* @str_new(i32 0)
  store %struct.str_t* %call, %struct.str_t** %tmp, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %if.end15, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.str_t*, %struct.str_t** %pat.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %1, i32 0, i32 0
  %2 = load i32, i32* %len, align 4
  %add = add i32 %0, %2
  %3 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %len1 = getelementptr inbounds %struct.str_t, %struct.str_t* %3, i32 0, i32 0
  %4 = load i32, i32* %len1, align 4
  %cmp = icmp ule i32 %add, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 2
  %6 = load i8*, i8** %s, align 4
  %7 = load i32, i32* %i, align 4
  %add.ptr = getelementptr inbounds i8, i8* %6, i32 %7
  %8 = load %struct.str_t*, %struct.str_t** %pat.addr, align 4
  %s2 = getelementptr inbounds %struct.str_t, %struct.str_t* %8, i32 0, i32 2
  %9 = load i8*, i8** %s2, align 4
  %10 = load %struct.str_t*, %struct.str_t** %pat.addr, align 4
  %len3 = getelementptr inbounds %struct.str_t, %struct.str_t* %10, i32 0, i32 0
  %11 = load i32, i32* %len3, align 4
  %call4 = call i32 @memcmp(i8* %add.ptr, i8* %9, i32 %11)
  %tobool = icmp ne i32 %call4, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %12 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  %13 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %s5 = getelementptr inbounds %struct.str_t, %struct.str_t* %13, i32 0, i32 2
  %14 = load i8*, i8** %s5, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %14, i32 %15
  %16 = load i8, i8* %arrayidx, align 1
  call void @str_append(%struct.str_t* %12, i8 zeroext %16)
  %17 = load i32, i32* %i, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %i, align 4
  br label %if.end15

if.else:                                          ; preds = %for.body
  %18 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  %19 = load %struct.str_t*, %struct.str_t** %repl.addr, align 4
  %call6 = call %struct.str_t* @str_cat(%struct.str_t* %18, %struct.str_t* %19)
  %20 = load %struct.str_t*, %struct.str_t** %pat.addr, align 4
  %len7 = getelementptr inbounds %struct.str_t, %struct.str_t* %20, i32 0, i32 0
  %21 = load i32, i32* %len7, align 4
  %22 = load i32, i32* %i, align 4
  %add8 = add i32 %22, %21
  store i32 %add8, i32* %i, align 4
  %23 = load %struct.str_t*, %struct.str_t** %pat.addr, align 4
  %len9 = getelementptr inbounds %struct.str_t, %struct.str_t* %23, i32 0, i32 0
  %24 = load i32, i32* %len9, align 4
  %tobool10 = icmp ne i32 %24, 0
  br i1 %tobool10, label %if.end, label %if.then11

if.then11:                                        ; preds = %if.else
  %25 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  %26 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %s12 = getelementptr inbounds %struct.str_t, %struct.str_t* %26, i32 0, i32 2
  %27 = load i8*, i8** %s12, align 4
  %28 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %28, 1
  store i32 %inc13, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds i8, i8* %27, i32 %28
  %29 = load i8, i8* %arrayidx14, align 1
  call void @str_append(%struct.str_t* %25, i8 zeroext %29)
  br label %if.end

if.end:                                           ; preds = %if.then11, %if.else
  br label %if.end15

if.end15:                                         ; preds = %if.end, %if.then
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end
  %30 = load i32, i32* %i, align 4
  %31 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %len16 = getelementptr inbounds %struct.str_t, %struct.str_t* %31, i32 0, i32 0
  %32 = load i32, i32* %len16, align 4
  %cmp17 = icmp ult i32 %30, %32
  br i1 %cmp17, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %33 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  %34 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %s18 = getelementptr inbounds %struct.str_t, %struct.str_t* %34, i32 0, i32 2
  %35 = load i8*, i8** %s18, align 4
  %36 = load i32, i32* %i, align 4
  %inc19 = add nsw i32 %36, 1
  store i32 %inc19, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds i8, i8* %35, i32 %36
  %37 = load i8, i8* %arrayidx20, align 1
  call void @str_append(%struct.str_t* %33, i8 zeroext %37)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %38 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  %39 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  call void @str_swap(%struct.str_t* %38, %struct.str_t* %39)
  %40 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  call void @str_del(%struct.str_t* %40)
  %41 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  ret %struct.str_t* %41
}

; Function Attrs: noinline nounwind optnone
define hidden void @str_set(%struct.str_t* %dest, %struct.str_t* %src) #0 {
entry:
  %dest.addr = alloca %struct.str_t*, align 4
  %src.addr = alloca %struct.str_t*, align 4
  store %struct.str_t* %dest, %struct.str_t** %dest.addr, align 4
  store %struct.str_t* %src, %struct.str_t** %src.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct.str_t*, %struct.str_t** %dest.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 0
  %1 = load i32, i32* %len, align 4
  %2 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len1 = getelementptr inbounds %struct.str_t, %struct.str_t* %2, i32 0, i32 0
  %3 = load i32, i32* %len1, align 4
  %cmp = icmp ult i32 %1, %3
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load %struct.str_t*, %struct.str_t** %dest.addr, align 4
  call void @str_extend(%struct.str_t* %4)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %5 = load %struct.str_t*, %struct.str_t** %dest.addr, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 2
  %6 = load i8*, i8** %s, align 4
  %7 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %s2 = getelementptr inbounds %struct.str_t, %struct.str_t* %7, i32 0, i32 2
  %8 = load i8*, i8** %s2, align 4
  %9 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len3 = getelementptr inbounds %struct.str_t, %struct.str_t* %9, i32 0, i32 0
  %10 = load i32, i32* %len3, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %6, i8* align 1 %8, i32 %10, i1 false)
  %11 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len4 = getelementptr inbounds %struct.str_t, %struct.str_t* %11, i32 0, i32 0
  %12 = load i32, i32* %len4, align 4
  %13 = load %struct.str_t*, %struct.str_t** %dest.addr, align 4
  %len5 = getelementptr inbounds %struct.str_t, %struct.str_t* %13, i32 0, i32 0
  store i32 %12, i32* %len5, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %s = alloca %struct.str_t*, align 4
  %s2 = alloca %struct.str_t*, align 4
  %s3 = alloca %struct.str_t*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.str_t* @str_from_chars(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i32 0, i32 0))
  store %struct.str_t* %call, %struct.str_t** %s, align 4
  %call1 = call %struct.str_t* @str_from_chars(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0))
  store %struct.str_t* %call1, %struct.str_t** %s2, align 4
  %call2 = call %struct.str_t* @str_from_chars(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2, i32 0, i32 0))
  store %struct.str_t* %call2, %struct.str_t** %s3, align 4
  %0 = load %struct.str_t*, %struct.str_t** %s, align 4
  %1 = load %struct.str_t*, %struct.str_t** %s3, align 4
  %2 = load %struct.str_t*, %struct.str_t** %s2, align 4
  %call3 = call %struct.str_t* @str_subst(%struct.str_t* %0, %struct.str_t* %1, %struct.str_t* %2)
  %3 = load %struct.str_t*, %struct.str_t** %s, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %3, i32 0, i32 0
  %4 = load i32, i32* %len, align 4
  %5 = load %struct.str_t*, %struct.str_t** %s, align 4
  %s4 = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 2
  %6 = load i8*, i8** %s4, align 4
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0), i32 %4, i8* %6)
  %7 = load %struct.str_t*, %struct.str_t** %s, align 4
  call void @str_del(%struct.str_t* %7)
  %8 = load %struct.str_t*, %struct.str_t** %s2, align 4
  call void @str_del(%struct.str_t* %8)
  %9 = load %struct.str_t*, %struct.str_t** %s3, align 4
  call void @str_del(%struct.str_t* %9)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %alloc, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul i32 %1, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %ns, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %alloc1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub i32 %2, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1
infer %2

; *****
; For LLVM instruction:
;  %cmp = icmp ugt i32 %sub, 1024
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1
%3:i1 = ult 1024:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %alloc2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add i32 %6, 1024
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1024:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %ns, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %ns, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mul 2:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1
%3:i1 = ult 1024:i32, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = add 1024:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1024
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1023
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for str_extend()

; entering Souper's runOnFunction() for str_del()

; ModuleID = './Binary_strings.c.bc'
source_filename = "./Binary_strings.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.str_t = type { i32, i32, i8* }

@.str = private unnamed_addr constant [18 x i8] c"aaaaHaaaaaFaaaaHa\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"___.\00", align 1
@.str.2 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"%.*s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_new(i32 %len) #0 {
entry:
  %len.addr = alloca i32, align 4
  %s = alloca %struct.str_t*, align 4
  store i32 %len, i32* %len.addr, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.str_t*
  store %struct.str_t* %0, %struct.str_t** %s, align 4
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp ult i32 %1, 8
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 8, i32* %len.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i32, i32* %len.addr, align 4
  %3 = load %struct.str_t*, %struct.str_t** %s, align 4
  %alloc = getelementptr inbounds %struct.str_t, %struct.str_t* %3, i32 0, i32 1
  store i32 %2, i32* %alloc, align 4
  %4 = load i32, i32* %len.addr, align 4
  %call1 = call noalias i8* @malloc(i32 %4)
  %5 = load %struct.str_t*, %struct.str_t** %s, align 4
  %s2 = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 2
  store i8* %call1, i8** %s2, align 4
  %6 = load %struct.str_t*, %struct.str_t** %s, align 4
  %len3 = getelementptr inbounds %struct.str_t, %struct.str_t* %6, i32 0, i32 0
  store i32 0, i32* %len3, align 4
  %7 = load %struct.str_t*, %struct.str_t** %s, align 4
  ret %struct.str_t* %7
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @str_extend(%struct.str_t* %s) #0 {
entry:
  %s.addr = alloca %struct.str_t*, align 4
  %ns = alloca i32, align 4
  store %struct.str_t* %s, %struct.str_t** %s.addr, align 4
  %0 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 1
  %1 = load i32, i32* %alloc, align 4
  %mul = mul i32 %1, 2
  store i32 %mul, i32* %ns, align 4
  %2 = load i32, i32* %ns, align 4
  %3 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc1 = getelementptr inbounds %struct.str_t, %struct.str_t* %3, i32 0, i32 1
  %4 = load i32, i32* %alloc1, align 4
  %sub = sub i32 %2, %4
  %cmp = icmp ugt i32 %sub, 1024
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc2 = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 1
  %6 = load i32, i32* %alloc2, align 4
  %add = add i32 %6, 1024
  store i32 %add, i32* %ns, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s3 = getelementptr inbounds %struct.str_t, %struct.str_t* %7, i32 0, i32 2
  %8 = load i8*, i8** %s3, align 4
  %9 = load i32, i32* %ns, align 4
  %call = call i8* @realloc(i8* %8, i32 %9)
  %10 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s4 = getelementptr inbounds %struct.str_t, %struct.str_t* %10, i32 0, i32 2
  store i8* %call, i8** %s4, align 4
  %11 = load i32, i32* %ns, align 4
  %12 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc5 = getelementptr inbounds %struct.str_t, %struct.str_t* %12, i32 0, i32 1
  store i32 %11, i32* %alloc5, align 4
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @str_del(%struct.str_t* %s) #0 {
entry:
  %s.addr = alloca %struct.str_t*, align 4
  store %struct.str_t* %s, %struct.str_t** %s.addr, align 4
  %0 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s1 = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 2
  %1 = load i8*, i8** %s1, align 4
  call void @free(i8* %1)
  %2 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %3 = bitcast %struct.str_t* %2 to i8*
  call void @free(i8* %3)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @str_cmp(%struct.str_t* %l, %struct.str_t* %r) #0 {
entry:
  %retval = alloca i32, align 4
  %l.addr = alloca %struct.str_t*, align 4
  %r.addr = alloca %struct.str_t*, align 4
  %res = alloca i32, align 4
  %len = alloca i32, align 4
  store %struct.str_t* %l, %struct.str_t** %l.addr, align 4
  store %struct.str_t* %r, %struct.str_t** %r.addr, align 4
  %0 = load %struct.str_t*, %struct.str_t** %l.addr, align 4
  %len1 = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 0
  %1 = load i32, i32* %len1, align 4
  store i32 %1, i32* %len, align 4
  %2 = load i32, i32* %len, align 4
  %3 = load %struct.str_t*, %struct.str_t** %r.addr, align 4
  %len2 = getelementptr inbounds %struct.str_t, %struct.str_t* %3, i32 0, i32 0
  %4 = load i32, i32* %len2, align 4
  %cmp = icmp ugt i32 %2, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.str_t*, %struct.str_t** %r.addr, align 4
  %len3 = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 0
  %6 = load i32, i32* %len3, align 4
  store i32 %6, i32* %len, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.str_t*, %struct.str_t** %l.addr, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %7, i32 0, i32 2
  %8 = load i8*, i8** %s, align 4
  %9 = load %struct.str_t*, %struct.str_t** %r.addr, align 4
  %s4 = getelementptr inbounds %struct.str_t, %struct.str_t* %9, i32 0, i32 2
  %10 = load i8*, i8** %s4, align 4
  %11 = load i32, i32* %len, align 4
  %call = call i32 @memcmp(i8* %8, i8* %10, i32 %11)
  store i32 %call, i32* %res, align 4
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  %12 = load i32, i32* %res, align 4
  store i32 %12, i32* %retval, align 4
  br label %return

if.end6:                                          ; preds = %if.end
  %13 = load %struct.str_t*, %struct.str_t** %l.addr, align 4
  %len7 = getelementptr inbounds %struct.str_t, %struct.str_t* %13, i32 0, i32 0
  %14 = load i32, i32* %len7, align 4
  %15 = load %struct.str_t*, %struct.str_t** %r.addr, align 4
  %len8 = getelementptr inbounds %struct.str_t, %struct.str_t* %15, i32 0, i32 0
  %16 = load i32, i32* %len8, align 4
  %cmp9 = icmp ugt i32 %14, %16
  %17 = zext i1 %cmp9 to i64
  %cond = select i1 %cmp9, i32 1, i32 -1
  store i32 %cond, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end6, %if.then5
  %18 = load i32, i32* %retval, align 4
  ret i32 %18
}

declare i32 @memcmp(i8* %0, i8* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_dup(%struct.str_t* %src) #0 {
entry:
  %src.addr = alloca %struct.str_t*, align 4
  %x = alloca %struct.str_t*, align 4
  store %struct.str_t* %src, %struct.str_t** %src.addr, align 4
  %0 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 0
  %1 = load i32, i32* %len, align 4
  %call = call %struct.str_t* @str_new(i32 %1)
  store %struct.str_t* %call, %struct.str_t** %x, align 4
  %2 = load %struct.str_t*, %struct.str_t** %x, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %2, i32 0, i32 2
  %3 = load i8*, i8** %s, align 4
  %4 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %s1 = getelementptr inbounds %struct.str_t, %struct.str_t* %4, i32 0, i32 2
  %5 = load i8*, i8** %s1, align 4
  %6 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len2 = getelementptr inbounds %struct.str_t, %struct.str_t* %6, i32 0, i32 0
  %7 = load i32, i32* %len2, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %3, i8* align 1 %5, i32 %7, i1 false)
  %8 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len3 = getelementptr inbounds %struct.str_t, %struct.str_t* %8, i32 0, i32 0
  %9 = load i32, i32* %len3, align 4
  %10 = load %struct.str_t*, %struct.str_t** %x, align 4
  %len4 = getelementptr inbounds %struct.str_t, %struct.str_t* %10, i32 0, i32 0
  store i32 %9, i32* %len4, align 4
  %11 = load %struct.str_t*, %struct.str_t** %x, align 4
  ret %struct.str_t* %11
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_from_chars(i8* %t) #0 {
entry:
  %retval = alloca %struct.str_t*, align 4
  %t.addr = alloca i8*, align 4
  %l = alloca i32, align 4
  %x = alloca %struct.str_t*, align 4
  store i8* %t, i8** %t.addr, align 4
  %0 = load i8*, i8** %t.addr, align 4
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call = call %struct.str_t* @str_new(i32 0)
  store %struct.str_t* %call, %struct.str_t** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i8*, i8** %t.addr, align 4
  %call1 = call i32 @strlen(i8* %1) #4
  store i32 %call1, i32* %l, align 4
  %2 = load i32, i32* %l, align 4
  %add = add i32 %2, 1
  %call2 = call %struct.str_t* @str_new(i32 %add)
  store %struct.str_t* %call2, %struct.str_t** %x, align 4
  %3 = load i32, i32* %l, align 4
  %4 = load %struct.str_t*, %struct.str_t** %x, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %4, i32 0, i32 0
  store i32 %3, i32* %len, align 4
  %5 = load %struct.str_t*, %struct.str_t** %x, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 2
  %6 = load i8*, i8** %s, align 4
  %7 = load i8*, i8** %t.addr, align 4
  %8 = load i32, i32* %l, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %6, i8* align 1 %7, i32 %8, i1 false)
  %9 = load %struct.str_t*, %struct.str_t** %x, align 4
  store %struct.str_t* %9, %struct.str_t** %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %10 = load %struct.str_t*, %struct.str_t** %retval, align 4
  ret %struct.str_t* %10
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #3

; Function Attrs: noinline nounwind optnone
define hidden void @str_append(%struct.str_t* %s, i8 zeroext %b) #0 {
entry:
  %s.addr = alloca %struct.str_t*, align 4
  %b.addr = alloca i8, align 1
  store %struct.str_t* %s, %struct.str_t** %s.addr, align 4
  store i8 %b, i8* %b.addr, align 1
  %0 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 0
  %1 = load i32, i32* %len, align 4
  %2 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc = getelementptr inbounds %struct.str_t, %struct.str_t* %2, i32 0, i32 1
  %3 = load i32, i32* %alloc, align 4
  %cmp = icmp uge i32 %1, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  call void @str_extend(%struct.str_t* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load i8, i8* %b.addr, align 1
  %6 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s1 = getelementptr inbounds %struct.str_t, %struct.str_t* %6, i32 0, i32 2
  %7 = load i8*, i8** %s1, align 4
  %8 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len2 = getelementptr inbounds %struct.str_t, %struct.str_t* %8, i32 0, i32 0
  %9 = load i32, i32* %len2, align 4
  %inc = add i32 %9, 1
  store i32 %inc, i32* %len2, align 4
  %arrayidx = getelementptr inbounds i8, i8* %7, i32 %9
  store i8 %5, i8* %arrayidx, align 1
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_substr(%struct.str_t* %s, i32 %from, i32 %to) #0 {
entry:
  %retval = alloca %struct.str_t*, align 4
  %s.addr = alloca %struct.str_t*, align 4
  %from.addr = alloca i32, align 4
  %to.addr = alloca i32, align 4
  %x = alloca %struct.str_t*, align 4
  store %struct.str_t* %s, %struct.str_t** %s.addr, align 4
  store i32 %from, i32* %from.addr, align 4
  store i32 %to, i32* %to.addr, align 4
  %0 = load i32, i32* %to.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %1, i32 0, i32 0
  %2 = load i32, i32* %len, align 4
  store i32 %2, i32* %to.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load i32, i32* %from.addr, align 4
  %cmp = icmp slt i32 %3, 0
  br i1 %cmp, label %if.then1, label %if.end3

if.then1:                                         ; preds = %if.end
  %4 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len2 = getelementptr inbounds %struct.str_t, %struct.str_t* %4, i32 0, i32 0
  %5 = load i32, i32* %len2, align 4
  %6 = load i32, i32* %from.addr, align 4
  %add = add i32 %6, %5
  store i32 %add, i32* %from.addr, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.end
  %7 = load i32, i32* %from.addr, align 4
  %cmp4 = icmp slt i32 %7, 0
  br i1 %cmp4, label %if.then7, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end3
  %8 = load i32, i32* %from.addr, align 4
  %9 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len5 = getelementptr inbounds %struct.str_t, %struct.str_t* %9, i32 0, i32 0
  %10 = load i32, i32* %len5, align 4
  %cmp6 = icmp uge i32 %8, %10
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %lor.lhs.false, %if.end3
  store %struct.str_t* null, %struct.str_t** %retval, align 4
  br label %return

if.end8:                                          ; preds = %lor.lhs.false
  %11 = load i32, i32* %to.addr, align 4
  %12 = load i32, i32* %from.addr, align 4
  %cmp9 = icmp slt i32 %11, %12
  br i1 %cmp9, label %if.then10, label %if.end12

if.then10:                                        ; preds = %if.end8
  %13 = load i32, i32* %from.addr, align 4
  %add11 = add nsw i32 %13, 1
  store i32 %add11, i32* %to.addr, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then10, %if.end8
  %14 = load i32, i32* %to.addr, align 4
  %15 = load i32, i32* %from.addr, align 4
  %sub = sub nsw i32 %14, %15
  %call = call %struct.str_t* @str_new(i32 %sub)
  store %struct.str_t* %call, %struct.str_t** %x, align 4
  %16 = load i32, i32* %to.addr, align 4
  %17 = load i32, i32* %from.addr, align 4
  %sub13 = sub nsw i32 %16, %17
  %18 = load %struct.str_t*, %struct.str_t** %x, align 4
  %len14 = getelementptr inbounds %struct.str_t, %struct.str_t* %18, i32 0, i32 0
  store i32 %sub13, i32* %len14, align 4
  %19 = load %struct.str_t*, %struct.str_t** %x, align 4
  %s15 = getelementptr inbounds %struct.str_t, %struct.str_t* %19, i32 0, i32 2
  %20 = load i8*, i8** %s15, align 4
  %21 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s16 = getelementptr inbounds %struct.str_t, %struct.str_t* %21, i32 0, i32 2
  %22 = load i8*, i8** %s16, align 4
  %23 = load i32, i32* %from.addr, align 4
  %add.ptr = getelementptr inbounds i8, i8* %22, i32 %23
  %24 = load %struct.str_t*, %struct.str_t** %x, align 4
  %len17 = getelementptr inbounds %struct.str_t, %struct.str_t* %24, i32 0, i32 0
  %25 = load i32, i32* %len17, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %20, i8* align 1 %add.ptr, i32 %25, i1 false)
  %26 = load %struct.str_t*, %struct.str_t** %x, align 4
  store %struct.str_t* %26, %struct.str_t** %retval, align 4
  br label %return

return:                                           ; preds = %if.end12, %if.then7
  %27 = load %struct.str_t*, %struct.str_t** %retval, align 4
  ret %struct.str_t* %27
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_cat(%struct.str_t* %s, %struct.str_t* %s2) #0 {
entry:
  %s.addr = alloca %struct.str_t*, align 4
  %s2.addr = alloca %struct.str_t*, align 4
  store %struct.str_t* %s, %struct.str_t** %s.addr, align 4
  store %struct.str_t* %s2, %struct.str_t** %s2.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 1
  %1 = load i32, i32* %alloc, align 4
  %2 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %2, i32 0, i32 0
  %3 = load i32, i32* %len, align 4
  %4 = load %struct.str_t*, %struct.str_t** %s2.addr, align 4
  %len1 = getelementptr inbounds %struct.str_t, %struct.str_t* %4, i32 0, i32 0
  %5 = load i32, i32* %len1, align 4
  %add = add i32 %3, %5
  %cmp = icmp ult i32 %1, %add
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  call void @str_extend(%struct.str_t* %6)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %7 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s3 = getelementptr inbounds %struct.str_t, %struct.str_t* %7, i32 0, i32 2
  %8 = load i8*, i8** %s3, align 4
  %9 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len4 = getelementptr inbounds %struct.str_t, %struct.str_t* %9, i32 0, i32 0
  %10 = load i32, i32* %len4, align 4
  %add.ptr = getelementptr inbounds i8, i8* %8, i32 %10
  %11 = load %struct.str_t*, %struct.str_t** %s2.addr, align 4
  %s5 = getelementptr inbounds %struct.str_t, %struct.str_t* %11, i32 0, i32 2
  %12 = load i8*, i8** %s5, align 4
  %13 = load %struct.str_t*, %struct.str_t** %s2.addr, align 4
  %len6 = getelementptr inbounds %struct.str_t, %struct.str_t* %13, i32 0, i32 0
  %14 = load i32, i32* %len6, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %add.ptr, i8* align 1 %12, i32 %14, i1 false)
  %15 = load %struct.str_t*, %struct.str_t** %s2.addr, align 4
  %len7 = getelementptr inbounds %struct.str_t, %struct.str_t* %15, i32 0, i32 0
  %16 = load i32, i32* %len7, align 4
  %17 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len8 = getelementptr inbounds %struct.str_t, %struct.str_t* %17, i32 0, i32 0
  %18 = load i32, i32* %len8, align 4
  %add9 = add i32 %18, %16
  store i32 %add9, i32* %len8, align 4
  %19 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  ret %struct.str_t* %19
}

; Function Attrs: noinline nounwind optnone
define hidden void @str_swap(%struct.str_t* %a, %struct.str_t* %b) #0 {
entry:
  %a.addr = alloca %struct.str_t*, align 4
  %b.addr = alloca %struct.str_t*, align 4
  %tz = alloca i32, align 4
  %ts = alloca i8*, align 4
  store %struct.str_t* %a, %struct.str_t** %a.addr, align 4
  store %struct.str_t* %b, %struct.str_t** %b.addr, align 4
  %0 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %alloc = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 1
  %1 = load i32, i32* %alloc, align 4
  store i32 %1, i32* %tz, align 4
  %2 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %alloc1 = getelementptr inbounds %struct.str_t, %struct.str_t* %2, i32 0, i32 1
  %3 = load i32, i32* %alloc1, align 4
  %4 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %alloc2 = getelementptr inbounds %struct.str_t, %struct.str_t* %4, i32 0, i32 1
  store i32 %3, i32* %alloc2, align 4
  %5 = load i32, i32* %tz, align 4
  %6 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %alloc3 = getelementptr inbounds %struct.str_t, %struct.str_t* %6, i32 0, i32 1
  store i32 %5, i32* %alloc3, align 4
  %7 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %7, i32 0, i32 0
  %8 = load i32, i32* %len, align 4
  store i32 %8, i32* %tz, align 4
  %9 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %len4 = getelementptr inbounds %struct.str_t, %struct.str_t* %9, i32 0, i32 0
  %10 = load i32, i32* %len4, align 4
  %11 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %len5 = getelementptr inbounds %struct.str_t, %struct.str_t* %11, i32 0, i32 0
  store i32 %10, i32* %len5, align 4
  %12 = load i32, i32* %tz, align 4
  %13 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %len6 = getelementptr inbounds %struct.str_t, %struct.str_t* %13, i32 0, i32 0
  store i32 %12, i32* %len6, align 4
  %14 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %14, i32 0, i32 2
  %15 = load i8*, i8** %s, align 4
  store i8* %15, i8** %ts, align 4
  %16 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %s7 = getelementptr inbounds %struct.str_t, %struct.str_t* %16, i32 0, i32 2
  %17 = load i8*, i8** %s7, align 4
  %18 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %s8 = getelementptr inbounds %struct.str_t, %struct.str_t* %18, i32 0, i32 2
  store i8* %17, i8** %s8, align 4
  %19 = load i8*, i8** %ts, align 4
  %20 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %s9 = getelementptr inbounds %struct.str_t, %struct.str_t* %20, i32 0, i32 2
  store i8* %19, i8** %s9, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_subst(%struct.str_t* %tgt, %struct.str_t* %pat, %struct.str_t* %repl) #0 {
entry:
  %tgt.addr = alloca %struct.str_t*, align 4
  %pat.addr = alloca %struct.str_t*, align 4
  %repl.addr = alloca %struct.str_t*, align 4
  %tmp = alloca %struct.str_t*, align 4
  %i = alloca i32, align 4
  store %struct.str_t* %tgt, %struct.str_t** %tgt.addr, align 4
  store %struct.str_t* %pat, %struct.str_t** %pat.addr, align 4
  store %struct.str_t* %repl, %struct.str_t** %repl.addr, align 4
  %call = call %struct.str_t* @str_new(i32 0)
  store %struct.str_t* %call, %struct.str_t** %tmp, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %if.end15, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.str_t*, %struct.str_t** %pat.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %1, i32 0, i32 0
  %2 = load i32, i32* %len, align 4
  %add = add i32 %0, %2
  %3 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %len1 = getelementptr inbounds %struct.str_t, %struct.str_t* %3, i32 0, i32 0
  %4 = load i32, i32* %len1, align 4
  %cmp = icmp ule i32 %add, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 2
  %6 = load i8*, i8** %s, align 4
  %7 = load i32, i32* %i, align 4
  %add.ptr = getelementptr inbounds i8, i8* %6, i32 %7
  %8 = load %struct.str_t*, %struct.str_t** %pat.addr, align 4
  %s2 = getelementptr inbounds %struct.str_t, %struct.str_t* %8, i32 0, i32 2
  %9 = load i8*, i8** %s2, align 4
  %10 = load %struct.str_t*, %struct.str_t** %pat.addr, align 4
  %len3 = getelementptr inbounds %struct.str_t, %struct.str_t* %10, i32 0, i32 0
  %11 = load i32, i32* %len3, align 4
  %call4 = call i32 @memcmp(i8* %add.ptr, i8* %9, i32 %11)
  %tobool = icmp ne i32 %call4, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %12 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  %13 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %s5 = getelementptr inbounds %struct.str_t, %struct.str_t* %13, i32 0, i32 2
  %14 = load i8*, i8** %s5, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %14, i32 %15
  %16 = load i8, i8* %arrayidx, align 1
  call void @str_append(%struct.str_t* %12, i8 zeroext %16)
  %17 = load i32, i32* %i, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %i, align 4
  br label %if.end15

if.else:                                          ; preds = %for.body
  %18 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  %19 = load %struct.str_t*, %struct.str_t** %repl.addr, align 4
  %call6 = call %struct.str_t* @str_cat(%struct.str_t* %18, %struct.str_t* %19)
  %20 = load %struct.str_t*, %struct.str_t** %pat.addr, align 4
  %len7 = getelementptr inbounds %struct.str_t, %struct.str_t* %20, i32 0, i32 0
  %21 = load i32, i32* %len7, align 4
  %22 = load i32, i32* %i, align 4
  %add8 = add i32 %22, %21
  store i32 %add8, i32* %i, align 4
  %23 = load %struct.str_t*, %struct.str_t** %pat.addr, align 4
  %len9 = getelementptr inbounds %struct.str_t, %struct.str_t* %23, i32 0, i32 0
  %24 = load i32, i32* %len9, align 4
  %tobool10 = icmp ne i32 %24, 0
  br i1 %tobool10, label %if.end, label %if.then11

if.then11:                                        ; preds = %if.else
  %25 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  %26 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %s12 = getelementptr inbounds %struct.str_t, %struct.str_t* %26, i32 0, i32 2
  %27 = load i8*, i8** %s12, align 4
  %28 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %28, 1
  store i32 %inc13, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds i8, i8* %27, i32 %28
  %29 = load i8, i8* %arrayidx14, align 1
  call void @str_append(%struct.str_t* %25, i8 zeroext %29)
  br label %if.end

if.end:                                           ; preds = %if.then11, %if.else
  br label %if.end15

if.end15:                                         ; preds = %if.end, %if.then
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end
  %30 = load i32, i32* %i, align 4
  %31 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %len16 = getelementptr inbounds %struct.str_t, %struct.str_t* %31, i32 0, i32 0
  %32 = load i32, i32* %len16, align 4
  %cmp17 = icmp ult i32 %30, %32
  br i1 %cmp17, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %33 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  %34 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %s18 = getelementptr inbounds %struct.str_t, %struct.str_t* %34, i32 0, i32 2
  %35 = load i8*, i8** %s18, align 4
  %36 = load i32, i32* %i, align 4
  %inc19 = add nsw i32 %36, 1
  store i32 %inc19, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds i8, i8* %35, i32 %36
  %37 = load i8, i8* %arrayidx20, align 1
  call void @str_append(%struct.str_t* %33, i8 zeroext %37)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %38 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  %39 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  call void @str_swap(%struct.str_t* %38, %struct.str_t* %39)
  %40 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  call void @str_del(%struct.str_t* %40)
  %41 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  ret %struct.str_t* %41
}

; Function Attrs: noinline nounwind optnone
define hidden void @str_set(%struct.str_t* %dest, %struct.str_t* %src) #0 {
entry:
  %dest.addr = alloca %struct.str_t*, align 4
  %src.addr = alloca %struct.str_t*, align 4
  store %struct.str_t* %dest, %struct.str_t** %dest.addr, align 4
  store %struct.str_t* %src, %struct.str_t** %src.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct.str_t*, %struct.str_t** %dest.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 0
  %1 = load i32, i32* %len, align 4
  %2 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len1 = getelementptr inbounds %struct.str_t, %struct.str_t* %2, i32 0, i32 0
  %3 = load i32, i32* %len1, align 4
  %cmp = icmp ult i32 %1, %3
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load %struct.str_t*, %struct.str_t** %dest.addr, align 4
  call void @str_extend(%struct.str_t* %4)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %5 = load %struct.str_t*, %struct.str_t** %dest.addr, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 2
  %6 = load i8*, i8** %s, align 4
  %7 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %s2 = getelementptr inbounds %struct.str_t, %struct.str_t* %7, i32 0, i32 2
  %8 = load i8*, i8** %s2, align 4
  %9 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len3 = getelementptr inbounds %struct.str_t, %struct.str_t* %9, i32 0, i32 0
  %10 = load i32, i32* %len3, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %6, i8* align 1 %8, i32 %10, i1 false)
  %11 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len4 = getelementptr inbounds %struct.str_t, %struct.str_t* %11, i32 0, i32 0
  %12 = load i32, i32* %len4, align 4
  %13 = load %struct.str_t*, %struct.str_t** %dest.addr, align 4
  %len5 = getelementptr inbounds %struct.str_t, %struct.str_t* %13, i32 0, i32 0
  store i32 %12, i32* %len5, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %s = alloca %struct.str_t*, align 4
  %s2 = alloca %struct.str_t*, align 4
  %s3 = alloca %struct.str_t*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.str_t* @str_from_chars(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i32 0, i32 0))
  store %struct.str_t* %call, %struct.str_t** %s, align 4
  %call1 = call %struct.str_t* @str_from_chars(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0))
  store %struct.str_t* %call1, %struct.str_t** %s2, align 4
  %call2 = call %struct.str_t* @str_from_chars(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2, i32 0, i32 0))
  store %struct.str_t* %call2, %struct.str_t** %s3, align 4
  %0 = load %struct.str_t*, %struct.str_t** %s, align 4
  %1 = load %struct.str_t*, %struct.str_t** %s3, align 4
  %2 = load %struct.str_t*, %struct.str_t** %s2, align 4
  %call3 = call %struct.str_t* @str_subst(%struct.str_t* %0, %struct.str_t* %1, %struct.str_t* %2)
  %3 = load %struct.str_t*, %struct.str_t** %s, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %3, i32 0, i32 0
  %4 = load i32, i32* %len, align 4
  %5 = load %struct.str_t*, %struct.str_t** %s, align 4
  %s4 = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 2
  %6 = load i8*, i8** %s4, align 4
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0), i32 %4, i8* %6)
  %7 = load %struct.str_t*, %struct.str_t** %s, align 4
  call void @str_del(%struct.str_t* %7)
  %8 = load %struct.str_t*, %struct.str_t** %s2, align 4
  call void @str_del(%struct.str_t* %8)
  %9 = load %struct.str_t*, %struct.str_t** %s3, align 4
  call void @str_del(%struct.str_t* %9)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for str_del()

; entering Souper's runOnFunction() for str_cmp()

; ModuleID = './Binary_strings.c.bc'
source_filename = "./Binary_strings.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.str_t = type { i32, i32, i8* }

@.str = private unnamed_addr constant [18 x i8] c"aaaaHaaaaaFaaaaHa\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"___.\00", align 1
@.str.2 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"%.*s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_new(i32 %len) #0 {
entry:
  %len.addr = alloca i32, align 4
  %s = alloca %struct.str_t*, align 4
  store i32 %len, i32* %len.addr, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.str_t*
  store %struct.str_t* %0, %struct.str_t** %s, align 4
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp ult i32 %1, 8
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 8, i32* %len.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i32, i32* %len.addr, align 4
  %3 = load %struct.str_t*, %struct.str_t** %s, align 4
  %alloc = getelementptr inbounds %struct.str_t, %struct.str_t* %3, i32 0, i32 1
  store i32 %2, i32* %alloc, align 4
  %4 = load i32, i32* %len.addr, align 4
  %call1 = call noalias i8* @malloc(i32 %4)
  %5 = load %struct.str_t*, %struct.str_t** %s, align 4
  %s2 = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 2
  store i8* %call1, i8** %s2, align 4
  %6 = load %struct.str_t*, %struct.str_t** %s, align 4
  %len3 = getelementptr inbounds %struct.str_t, %struct.str_t* %6, i32 0, i32 0
  store i32 0, i32* %len3, align 4
  %7 = load %struct.str_t*, %struct.str_t** %s, align 4
  ret %struct.str_t* %7
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @str_extend(%struct.str_t* %s) #0 {
entry:
  %s.addr = alloca %struct.str_t*, align 4
  %ns = alloca i32, align 4
  store %struct.str_t* %s, %struct.str_t** %s.addr, align 4
  %0 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 1
  %1 = load i32, i32* %alloc, align 4
  %mul = mul i32 %1, 2
  store i32 %mul, i32* %ns, align 4
  %2 = load i32, i32* %ns, align 4
  %3 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc1 = getelementptr inbounds %struct.str_t, %struct.str_t* %3, i32 0, i32 1
  %4 = load i32, i32* %alloc1, align 4
  %sub = sub i32 %2, %4
  %cmp = icmp ugt i32 %sub, 1024
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc2 = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 1
  %6 = load i32, i32* %alloc2, align 4
  %add = add i32 %6, 1024
  store i32 %add, i32* %ns, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s3 = getelementptr inbounds %struct.str_t, %struct.str_t* %7, i32 0, i32 2
  %8 = load i8*, i8** %s3, align 4
  %9 = load i32, i32* %ns, align 4
  %call = call i8* @realloc(i8* %8, i32 %9)
  %10 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s4 = getelementptr inbounds %struct.str_t, %struct.str_t* %10, i32 0, i32 2
  store i8* %call, i8** %s4, align 4
  %11 = load i32, i32* %ns, align 4
  %12 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc5 = getelementptr inbounds %struct.str_t, %struct.str_t* %12, i32 0, i32 1
  store i32 %11, i32* %alloc5, align 4
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @str_del(%struct.str_t* %s) #0 {
entry:
  %s.addr = alloca %struct.str_t*, align 4
  store %struct.str_t* %s, %struct.str_t** %s.addr, align 4
  %0 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s1 = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 2
  %1 = load i8*, i8** %s1, align 4
  call void @free(i8* %1)
  %2 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %3 = bitcast %struct.str_t* %2 to i8*
  call void @free(i8* %3)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @str_cmp(%struct.str_t* %l, %struct.str_t* %r) #0 {
entry:
  %retval = alloca i32, align 4
  %l.addr = alloca %struct.str_t*, align 4
  %r.addr = alloca %struct.str_t*, align 4
  %res = alloca i32, align 4
  %len = alloca i32, align 4
  store %struct.str_t* %l, %struct.str_t** %l.addr, align 4
  store %struct.str_t* %r, %struct.str_t** %r.addr, align 4
  %0 = load %struct.str_t*, %struct.str_t** %l.addr, align 4
  %len1 = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 0
  %1 = load i32, i32* %len1, align 4
  store i32 %1, i32* %len, align 4
  %2 = load i32, i32* %len, align 4
  %3 = load %struct.str_t*, %struct.str_t** %r.addr, align 4
  %len2 = getelementptr inbounds %struct.str_t, %struct.str_t* %3, i32 0, i32 0
  %4 = load i32, i32* %len2, align 4
  %cmp = icmp ugt i32 %2, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.str_t*, %struct.str_t** %r.addr, align 4
  %len3 = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 0
  %6 = load i32, i32* %len3, align 4
  store i32 %6, i32* %len, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.str_t*, %struct.str_t** %l.addr, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %7, i32 0, i32 2
  %8 = load i8*, i8** %s, align 4
  %9 = load %struct.str_t*, %struct.str_t** %r.addr, align 4
  %s4 = getelementptr inbounds %struct.str_t, %struct.str_t* %9, i32 0, i32 2
  %10 = load i8*, i8** %s4, align 4
  %11 = load i32, i32* %len, align 4
  %call = call i32 @memcmp(i8* %8, i8* %10, i32 %11)
  store i32 %call, i32* %res, align 4
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  %12 = load i32, i32* %res, align 4
  store i32 %12, i32* %retval, align 4
  br label %return

if.end6:                                          ; preds = %if.end
  %13 = load %struct.str_t*, %struct.str_t** %l.addr, align 4
  %len7 = getelementptr inbounds %struct.str_t, %struct.str_t* %13, i32 0, i32 0
  %14 = load i32, i32* %len7, align 4
  %15 = load %struct.str_t*, %struct.str_t** %r.addr, align 4
  %len8 = getelementptr inbounds %struct.str_t, %struct.str_t* %15, i32 0, i32 0
  %16 = load i32, i32* %len8, align 4
  %cmp9 = icmp ugt i32 %14, %16
  %17 = zext i1 %cmp9 to i64
  %cond = select i1 %cmp9, i32 1, i32 -1
  store i32 %cond, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end6, %if.then5
  %18 = load i32, i32* %retval, align 4
  ret i32 %18
}

declare i32 @memcmp(i8* %0, i8* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_dup(%struct.str_t* %src) #0 {
entry:
  %src.addr = alloca %struct.str_t*, align 4
  %x = alloca %struct.str_t*, align 4
  store %struct.str_t* %src, %struct.str_t** %src.addr, align 4
  %0 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 0
  %1 = load i32, i32* %len, align 4
  %call = call %struct.str_t* @str_new(i32 %1)
  store %struct.str_t* %call, %struct.str_t** %x, align 4
  %2 = load %struct.str_t*, %struct.str_t** %x, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %2, i32 0, i32 2
  %3 = load i8*, i8** %s, align 4
  %4 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %s1 = getelementptr inbounds %struct.str_t, %struct.str_t* %4, i32 0, i32 2
  %5 = load i8*, i8** %s1, align 4
  %6 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len2 = getelementptr inbounds %struct.str_t, %struct.str_t* %6, i32 0, i32 0
  %7 = load i32, i32* %len2, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %3, i8* align 1 %5, i32 %7, i1 false)
  %8 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len3 = getelementptr inbounds %struct.str_t, %struct.str_t* %8, i32 0, i32 0
  %9 = load i32, i32* %len3, align 4
  %10 = load %struct.str_t*, %struct.str_t** %x, align 4
  %len4 = getelementptr inbounds %struct.str_t, %struct.str_t* %10, i32 0, i32 0
  store i32 %9, i32* %len4, align 4
  %11 = load %struct.str_t*, %struct.str_t** %x, align 4
  ret %struct.str_t* %11
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_from_chars(i8* %t) #0 {
entry:
  %retval = alloca %struct.str_t*, align 4
  %t.addr = alloca i8*, align 4
  %l = alloca i32, align 4
  %x = alloca %struct.str_t*, align 4
  store i8* %t, i8** %t.addr, align 4
  %0 = load i8*, i8** %t.addr, align 4
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call = call %struct.str_t* @str_new(i32 0)
  store %struct.str_t* %call, %struct.str_t** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i8*, i8** %t.addr, align 4
  %call1 = call i32 @strlen(i8* %1) #4
  store i32 %call1, i32* %l, align 4
  %2 = load i32, i32* %l, align 4
  %add = add i32 %2, 1
  %call2 = call %struct.str_t* @str_new(i32 %add)
  store %struct.str_t* %call2, %struct.str_t** %x, align 4
  %3 = load i32, i32* %l, align 4
  %4 = load %struct.str_t*, %struct.str_t** %x, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %4, i32 0, i32 0
  store i32 %3, i32* %len, align 4
  %5 = load %struct.str_t*, %struct.str_t** %x, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 2
  %6 = load i8*, i8** %s, align 4
  %7 = load i8*, i8** %t.addr, align 4
  %8 = load i32, i32* %l, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %6, i8* align 1 %7, i32 %8, i1 false)
  %9 = load %struct.str_t*, %struct.str_t** %x, align 4
  store %struct.str_t* %9, %struct.str_t** %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %10 = load %struct.str_t*, %struct.str_t** %retval, align 4
  ret %struct.str_t* %10
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #3

; Function Attrs: noinline nounwind optnone
define hidden void @str_append(%struct.str_t* %s, i8 zeroext %b) #0 {
entry:
  %s.addr = alloca %struct.str_t*, align 4
  %b.addr = alloca i8, align 1
  store %struct.str_t* %s, %struct.str_t** %s.addr, align 4
  store i8 %b, i8* %b.addr, align 1
  %0 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 0
  %1 = load i32, i32* %len, align 4
  %2 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc = getelementptr inbounds %struct.str_t, %struct.str_t* %2, i32 0, i32 1
  %3 = load i32, i32* %alloc, align 4
  %cmp = icmp uge i32 %1, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  call void @str_extend(%struct.str_t* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load i8, i8* %b.addr, align 1
  %6 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s1 = getelementptr inbounds %struct.str_t, %struct.str_t* %6, i32 0, i32 2
  %7 = load i8*, i8** %s1, align 4
  %8 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len2 = getelementptr inbounds %struct.str_t, %struct.str_t* %8, i32 0, i32 0
  %9 = load i32, i32* %len2, align 4
  %inc = add i32 %9, 1
  store i32 %inc, i32* %len2, align 4
  %arrayidx = getelementptr inbounds i8, i8* %7, i32 %9
  store i8 %5, i8* %arrayidx, align 1
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_substr(%struct.str_t* %s, i32 %from, i32 %to) #0 {
entry:
  %retval = alloca %struct.str_t*, align 4
  %s.addr = alloca %struct.str_t*, align 4
  %from.addr = alloca i32, align 4
  %to.addr = alloca i32, align 4
  %x = alloca %struct.str_t*, align 4
  store %struct.str_t* %s, %struct.str_t** %s.addr, align 4
  store i32 %from, i32* %from.addr, align 4
  store i32 %to, i32* %to.addr, align 4
  %0 = load i32, i32* %to.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %1, i32 0, i32 0
  %2 = load i32, i32* %len, align 4
  store i32 %2, i32* %to.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load i32, i32* %from.addr, align 4
  %cmp = icmp slt i32 %3, 0
  br i1 %cmp, label %if.then1, label %if.end3

if.then1:                                         ; preds = %if.end
  %4 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len2 = getelementptr inbounds %struct.str_t, %struct.str_t* %4, i32 0, i32 0
  %5 = load i32, i32* %len2, align 4
  %6 = load i32, i32* %from.addr, align 4
  %add = add i32 %6, %5
  store i32 %add, i32* %from.addr, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.end
  %7 = load i32, i32* %from.addr, align 4
  %cmp4 = icmp slt i32 %7, 0
  br i1 %cmp4, label %if.then7, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end3
  %8 = load i32, i32* %from.addr, align 4
  %9 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len5 = getelementptr inbounds %struct.str_t, %struct.str_t* %9, i32 0, i32 0
  %10 = load i32, i32* %len5, align 4
  %cmp6 = icmp uge i32 %8, %10
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %lor.lhs.false, %if.end3
  store %struct.str_t* null, %struct.str_t** %retval, align 4
  br label %return

if.end8:                                          ; preds = %lor.lhs.false
  %11 = load i32, i32* %to.addr, align 4
  %12 = load i32, i32* %from.addr, align 4
  %cmp9 = icmp slt i32 %11, %12
  br i1 %cmp9, label %if.then10, label %if.end12

if.then10:                                        ; preds = %if.end8
  %13 = load i32, i32* %from.addr, align 4
  %add11 = add nsw i32 %13, 1
  store i32 %add11, i32* %to.addr, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then10, %if.end8
  %14 = load i32, i32* %to.addr, align 4
  %15 = load i32, i32* %from.addr, align 4
  %sub = sub nsw i32 %14, %15
  %call = call %struct.str_t* @str_new(i32 %sub)
  store %struct.str_t* %call, %struct.str_t** %x, align 4
  %16 = load i32, i32* %to.addr, align 4
  %17 = load i32, i32* %from.addr, align 4
  %sub13 = sub nsw i32 %16, %17
  %18 = load %struct.str_t*, %struct.str_t** %x, align 4
  %len14 = getelementptr inbounds %struct.str_t, %struct.str_t* %18, i32 0, i32 0
  store i32 %sub13, i32* %len14, align 4
  %19 = load %struct.str_t*, %struct.str_t** %x, align 4
  %s15 = getelementptr inbounds %struct.str_t, %struct.str_t* %19, i32 0, i32 2
  %20 = load i8*, i8** %s15, align 4
  %21 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s16 = getelementptr inbounds %struct.str_t, %struct.str_t* %21, i32 0, i32 2
  %22 = load i8*, i8** %s16, align 4
  %23 = load i32, i32* %from.addr, align 4
  %add.ptr = getelementptr inbounds i8, i8* %22, i32 %23
  %24 = load %struct.str_t*, %struct.str_t** %x, align 4
  %len17 = getelementptr inbounds %struct.str_t, %struct.str_t* %24, i32 0, i32 0
  %25 = load i32, i32* %len17, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %20, i8* align 1 %add.ptr, i32 %25, i1 false)
  %26 = load %struct.str_t*, %struct.str_t** %x, align 4
  store %struct.str_t* %26, %struct.str_t** %retval, align 4
  br label %return

return:                                           ; preds = %if.end12, %if.then7
  %27 = load %struct.str_t*, %struct.str_t** %retval, align 4
  ret %struct.str_t* %27
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_cat(%struct.str_t* %s, %struct.str_t* %s2) #0 {
entry:
  %s.addr = alloca %struct.str_t*, align 4
  %s2.addr = alloca %struct.str_t*, align 4
  store %struct.str_t* %s, %struct.str_t** %s.addr, align 4
  store %struct.str_t* %s2, %struct.str_t** %s2.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 1
  %1 = load i32, i32* %alloc, align 4
  %2 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %2, i32 0, i32 0
  %3 = load i32, i32* %len, align 4
  %4 = load %struct.str_t*, %struct.str_t** %s2.addr, align 4
  %len1 = getelementptr inbounds %struct.str_t, %struct.str_t* %4, i32 0, i32 0
  %5 = load i32, i32* %len1, align 4
  %add = add i32 %3, %5
  %cmp = icmp ult i32 %1, %add
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  call void @str_extend(%struct.str_t* %6)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %7 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s3 = getelementptr inbounds %struct.str_t, %struct.str_t* %7, i32 0, i32 2
  %8 = load i8*, i8** %s3, align 4
  %9 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len4 = getelementptr inbounds %struct.str_t, %struct.str_t* %9, i32 0, i32 0
  %10 = load i32, i32* %len4, align 4
  %add.ptr = getelementptr inbounds i8, i8* %8, i32 %10
  %11 = load %struct.str_t*, %struct.str_t** %s2.addr, align 4
  %s5 = getelementptr inbounds %struct.str_t, %struct.str_t* %11, i32 0, i32 2
  %12 = load i8*, i8** %s5, align 4
  %13 = load %struct.str_t*, %struct.str_t** %s2.addr, align 4
  %len6 = getelementptr inbounds %struct.str_t, %struct.str_t* %13, i32 0, i32 0
  %14 = load i32, i32* %len6, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %add.ptr, i8* align 1 %12, i32 %14, i1 false)
  %15 = load %struct.str_t*, %struct.str_t** %s2.addr, align 4
  %len7 = getelementptr inbounds %struct.str_t, %struct.str_t* %15, i32 0, i32 0
  %16 = load i32, i32* %len7, align 4
  %17 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len8 = getelementptr inbounds %struct.str_t, %struct.str_t* %17, i32 0, i32 0
  %18 = load i32, i32* %len8, align 4
  %add9 = add i32 %18, %16
  store i32 %add9, i32* %len8, align 4
  %19 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  ret %struct.str_t* %19
}

; Function Attrs: noinline nounwind optnone
define hidden void @str_swap(%struct.str_t* %a, %struct.str_t* %b) #0 {
entry:
  %a.addr = alloca %struct.str_t*, align 4
  %b.addr = alloca %struct.str_t*, align 4
  %tz = alloca i32, align 4
  %ts = alloca i8*, align 4
  store %struct.str_t* %a, %struct.str_t** %a.addr, align 4
  store %struct.str_t* %b, %struct.str_t** %b.addr, align 4
  %0 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %alloc = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 1
  %1 = load i32, i32* %alloc, align 4
  store i32 %1, i32* %tz, align 4
  %2 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %alloc1 = getelementptr inbounds %struct.str_t, %struct.str_t* %2, i32 0, i32 1
  %3 = load i32, i32* %alloc1, align 4
  %4 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %alloc2 = getelementptr inbounds %struct.str_t, %struct.str_t* %4, i32 0, i32 1
  store i32 %3, i32* %alloc2, align 4
  %5 = load i32, i32* %tz, align 4
  %6 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %alloc3 = getelementptr inbounds %struct.str_t, %struct.str_t* %6, i32 0, i32 1
  store i32 %5, i32* %alloc3, align 4
  %7 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %7, i32 0, i32 0
  %8 = load i32, i32* %len, align 4
  store i32 %8, i32* %tz, align 4
  %9 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %len4 = getelementptr inbounds %struct.str_t, %struct.str_t* %9, i32 0, i32 0
  %10 = load i32, i32* %len4, align 4
  %11 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %len5 = getelementptr inbounds %struct.str_t, %struct.str_t* %11, i32 0, i32 0
  store i32 %10, i32* %len5, align 4
  %12 = load i32, i32* %tz, align 4
  %13 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %len6 = getelementptr inbounds %struct.str_t, %struct.str_t* %13, i32 0, i32 0
  store i32 %12, i32* %len6, align 4
  %14 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %14, i32 0, i32 2
  %15 = load i8*, i8** %s, align 4
  store i8* %15, i8** %ts, align 4
  %16 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %s7 = getelementptr inbounds %struct.str_t, %struct.str_t* %16, i32 0, i32 2
  %17 = load i8*, i8** %s7, align 4
  %18 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %s8 = getelementptr inbounds %struct.str_t, %struct.str_t* %18, i32 0, i32 2
  store i8* %17, i8** %s8, align 4
  %19 = load i8*, i8** %ts, align 4
  %20 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %s9 = getelementptr inbounds %struct.str_t, %struct.str_t* %20, i32 0, i32 2
  store i8* %19, i8** %s9, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_subst(%struct.str_t* %tgt, %struct.str_t* %pat, %struct.str_t* %repl) #0 {
entry:
  %tgt.addr = alloca %struct.str_t*, align 4
  %pat.addr = alloca %struct.str_t*, align 4
  %repl.addr = alloca %struct.str_t*, align 4
  %tmp = alloca %struct.str_t*, align 4
  %i = alloca i32, align 4
  store %struct.str_t* %tgt, %struct.str_t** %tgt.addr, align 4
  store %struct.str_t* %pat, %struct.str_t** %pat.addr, align 4
  store %struct.str_t* %repl, %struct.str_t** %repl.addr, align 4
  %call = call %struct.str_t* @str_new(i32 0)
  store %struct.str_t* %call, %struct.str_t** %tmp, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %if.end15, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.str_t*, %struct.str_t** %pat.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %1, i32 0, i32 0
  %2 = load i32, i32* %len, align 4
  %add = add i32 %0, %2
  %3 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %len1 = getelementptr inbounds %struct.str_t, %struct.str_t* %3, i32 0, i32 0
  %4 = load i32, i32* %len1, align 4
  %cmp = icmp ule i32 %add, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 2
  %6 = load i8*, i8** %s, align 4
  %7 = load i32, i32* %i, align 4
  %add.ptr = getelementptr inbounds i8, i8* %6, i32 %7
  %8 = load %struct.str_t*, %struct.str_t** %pat.addr, align 4
  %s2 = getelementptr inbounds %struct.str_t, %struct.str_t* %8, i32 0, i32 2
  %9 = load i8*, i8** %s2, align 4
  %10 = load %struct.str_t*, %struct.str_t** %pat.addr, align 4
  %len3 = getelementptr inbounds %struct.str_t, %struct.str_t* %10, i32 0, i32 0
  %11 = load i32, i32* %len3, align 4
  %call4 = call i32 @memcmp(i8* %add.ptr, i8* %9, i32 %11)
  %tobool = icmp ne i32 %call4, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %12 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  %13 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %s5 = getelementptr inbounds %struct.str_t, %struct.str_t* %13, i32 0, i32 2
  %14 = load i8*, i8** %s5, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %14, i32 %15
  %16 = load i8, i8* %arrayidx, align 1
  call void @str_append(%struct.str_t* %12, i8 zeroext %16)
  %17 = load i32, i32* %i, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %i, align 4
  br label %if.end15

if.else:                                          ; preds = %for.body
  %18 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  %19 = load %struct.str_t*, %struct.str_t** %repl.addr, align 4
  %call6 = call %struct.str_t* @str_cat(%struct.str_t* %18, %struct.str_t* %19)
  %20 = load %struct.str_t*, %struct.str_t** %pat.addr, align 4
  %len7 = getelementptr inbounds %struct.str_t, %struct.str_t* %20, i32 0, i32 0
  %21 = load i32, i32* %len7, align 4
  %22 = load i32, i32* %i, align 4
  %add8 = add i32 %22, %21
  store i32 %add8, i32* %i, align 4
  %23 = load %struct.str_t*, %struct.str_t** %pat.addr, align 4
  %len9 = getelementptr inbounds %struct.str_t, %struct.str_t* %23, i32 0, i32 0
  %24 = load i32, i32* %len9, align 4
  %tobool10 = icmp ne i32 %24, 0
  br i1 %tobool10, label %if.end, label %if.then11

if.then11:                                        ; preds = %if.else
  %25 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  %26 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %s12 = getelementptr inbounds %struct.str_t, %struct.str_t* %26, i32 0, i32 2
  %27 = load i8*, i8** %s12, align 4
  %28 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %28, 1
  store i32 %inc13, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds i8, i8* %27, i32 %28
  %29 = load i8, i8* %arrayidx14, align 1
  call void @str_append(%struct.str_t* %25, i8 zeroext %29)
  br label %if.end

if.end:                                           ; preds = %if.then11, %if.else
  br label %if.end15

if.end15:                                         ; preds = %if.end, %if.then
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end
  %30 = load i32, i32* %i, align 4
  %31 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %len16 = getelementptr inbounds %struct.str_t, %struct.str_t* %31, i32 0, i32 0
  %32 = load i32, i32* %len16, align 4
  %cmp17 = icmp ult i32 %30, %32
  br i1 %cmp17, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %33 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  %34 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %s18 = getelementptr inbounds %struct.str_t, %struct.str_t* %34, i32 0, i32 2
  %35 = load i8*, i8** %s18, align 4
  %36 = load i32, i32* %i, align 4
  %inc19 = add nsw i32 %36, 1
  store i32 %inc19, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds i8, i8* %35, i32 %36
  %37 = load i8, i8* %arrayidx20, align 1
  call void @str_append(%struct.str_t* %33, i8 zeroext %37)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %38 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  %39 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  call void @str_swap(%struct.str_t* %38, %struct.str_t* %39)
  %40 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  call void @str_del(%struct.str_t* %40)
  %41 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  ret %struct.str_t* %41
}

; Function Attrs: noinline nounwind optnone
define hidden void @str_set(%struct.str_t* %dest, %struct.str_t* %src) #0 {
entry:
  %dest.addr = alloca %struct.str_t*, align 4
  %src.addr = alloca %struct.str_t*, align 4
  store %struct.str_t* %dest, %struct.str_t** %dest.addr, align 4
  store %struct.str_t* %src, %struct.str_t** %src.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct.str_t*, %struct.str_t** %dest.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 0
  %1 = load i32, i32* %len, align 4
  %2 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len1 = getelementptr inbounds %struct.str_t, %struct.str_t* %2, i32 0, i32 0
  %3 = load i32, i32* %len1, align 4
  %cmp = icmp ult i32 %1, %3
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load %struct.str_t*, %struct.str_t** %dest.addr, align 4
  call void @str_extend(%struct.str_t* %4)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %5 = load %struct.str_t*, %struct.str_t** %dest.addr, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 2
  %6 = load i8*, i8** %s, align 4
  %7 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %s2 = getelementptr inbounds %struct.str_t, %struct.str_t* %7, i32 0, i32 2
  %8 = load i8*, i8** %s2, align 4
  %9 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len3 = getelementptr inbounds %struct.str_t, %struct.str_t* %9, i32 0, i32 0
  %10 = load i32, i32* %len3, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %6, i8* align 1 %8, i32 %10, i1 false)
  %11 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len4 = getelementptr inbounds %struct.str_t, %struct.str_t* %11, i32 0, i32 0
  %12 = load i32, i32* %len4, align 4
  %13 = load %struct.str_t*, %struct.str_t** %dest.addr, align 4
  %len5 = getelementptr inbounds %struct.str_t, %struct.str_t* %13, i32 0, i32 0
  store i32 %12, i32* %len5, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %s = alloca %struct.str_t*, align 4
  %s2 = alloca %struct.str_t*, align 4
  %s3 = alloca %struct.str_t*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.str_t* @str_from_chars(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i32 0, i32 0))
  store %struct.str_t* %call, %struct.str_t** %s, align 4
  %call1 = call %struct.str_t* @str_from_chars(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0))
  store %struct.str_t* %call1, %struct.str_t** %s2, align 4
  %call2 = call %struct.str_t* @str_from_chars(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2, i32 0, i32 0))
  store %struct.str_t* %call2, %struct.str_t** %s3, align 4
  %0 = load %struct.str_t*, %struct.str_t** %s, align 4
  %1 = load %struct.str_t*, %struct.str_t** %s3, align 4
  %2 = load %struct.str_t*, %struct.str_t** %s2, align 4
  %call3 = call %struct.str_t* @str_subst(%struct.str_t* %0, %struct.str_t* %1, %struct.str_t* %2)
  %3 = load %struct.str_t*, %struct.str_t** %s, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %3, i32 0, i32 0
  %4 = load i32, i32* %len, align 4
  %5 = load %struct.str_t*, %struct.str_t** %s, align 4
  %s4 = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 2
  %6 = load i8*, i8** %s4, align 4
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0), i32 %4, i8* %6)
  %7 = load %struct.str_t*, %struct.str_t** %s, align 4
  call void @str_del(%struct.str_t* %7)
  %8 = load %struct.str_t*, %struct.str_t** %s2, align 4
  call void @str_del(%struct.str_t* %8)
  %9 = load %struct.str_t*, %struct.str_t** %s3, align 4
  call void @str_del(%struct.str_t* %9)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %len1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %len2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ugt i32 %2, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %len3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 @memcmp(i8* %8, i8* %10, i32 %11)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %call, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %res, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %len7, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %len8, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp9 = icmp ugt i32 %14, %16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %cond = select i1 %cmp9, i32 1, i32 -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1 (hasExternalUses)
%3:i32 = select %2, 1:i32, 4294967295:i32
infer %3

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1 (hasExternalUses)
%3:i32 = select %2, 1:i32, 4294967295:i32
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for str_cmp()

; entering Souper's runOnFunction() for str_dup()

; ModuleID = './Binary_strings.c.bc'
source_filename = "./Binary_strings.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.str_t = type { i32, i32, i8* }

@.str = private unnamed_addr constant [18 x i8] c"aaaaHaaaaaFaaaaHa\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"___.\00", align 1
@.str.2 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"%.*s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_new(i32 %len) #0 {
entry:
  %len.addr = alloca i32, align 4
  %s = alloca %struct.str_t*, align 4
  store i32 %len, i32* %len.addr, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.str_t*
  store %struct.str_t* %0, %struct.str_t** %s, align 4
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp ult i32 %1, 8
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 8, i32* %len.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i32, i32* %len.addr, align 4
  %3 = load %struct.str_t*, %struct.str_t** %s, align 4
  %alloc = getelementptr inbounds %struct.str_t, %struct.str_t* %3, i32 0, i32 1
  store i32 %2, i32* %alloc, align 4
  %4 = load i32, i32* %len.addr, align 4
  %call1 = call noalias i8* @malloc(i32 %4)
  %5 = load %struct.str_t*, %struct.str_t** %s, align 4
  %s2 = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 2
  store i8* %call1, i8** %s2, align 4
  %6 = load %struct.str_t*, %struct.str_t** %s, align 4
  %len3 = getelementptr inbounds %struct.str_t, %struct.str_t* %6, i32 0, i32 0
  store i32 0, i32* %len3, align 4
  %7 = load %struct.str_t*, %struct.str_t** %s, align 4
  ret %struct.str_t* %7
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @str_extend(%struct.str_t* %s) #0 {
entry:
  %s.addr = alloca %struct.str_t*, align 4
  %ns = alloca i32, align 4
  store %struct.str_t* %s, %struct.str_t** %s.addr, align 4
  %0 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 1
  %1 = load i32, i32* %alloc, align 4
  %mul = mul i32 %1, 2
  store i32 %mul, i32* %ns, align 4
  %2 = load i32, i32* %ns, align 4
  %3 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc1 = getelementptr inbounds %struct.str_t, %struct.str_t* %3, i32 0, i32 1
  %4 = load i32, i32* %alloc1, align 4
  %sub = sub i32 %2, %4
  %cmp = icmp ugt i32 %sub, 1024
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc2 = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 1
  %6 = load i32, i32* %alloc2, align 4
  %add = add i32 %6, 1024
  store i32 %add, i32* %ns, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s3 = getelementptr inbounds %struct.str_t, %struct.str_t* %7, i32 0, i32 2
  %8 = load i8*, i8** %s3, align 4
  %9 = load i32, i32* %ns, align 4
  %call = call i8* @realloc(i8* %8, i32 %9)
  %10 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s4 = getelementptr inbounds %struct.str_t, %struct.str_t* %10, i32 0, i32 2
  store i8* %call, i8** %s4, align 4
  %11 = load i32, i32* %ns, align 4
  %12 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc5 = getelementptr inbounds %struct.str_t, %struct.str_t* %12, i32 0, i32 1
  store i32 %11, i32* %alloc5, align 4
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @str_del(%struct.str_t* %s) #0 {
entry:
  %s.addr = alloca %struct.str_t*, align 4
  store %struct.str_t* %s, %struct.str_t** %s.addr, align 4
  %0 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s1 = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 2
  %1 = load i8*, i8** %s1, align 4
  call void @free(i8* %1)
  %2 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %3 = bitcast %struct.str_t* %2 to i8*
  call void @free(i8* %3)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @str_cmp(%struct.str_t* %l, %struct.str_t* %r) #0 {
entry:
  %retval = alloca i32, align 4
  %l.addr = alloca %struct.str_t*, align 4
  %r.addr = alloca %struct.str_t*, align 4
  %res = alloca i32, align 4
  %len = alloca i32, align 4
  store %struct.str_t* %l, %struct.str_t** %l.addr, align 4
  store %struct.str_t* %r, %struct.str_t** %r.addr, align 4
  %0 = load %struct.str_t*, %struct.str_t** %l.addr, align 4
  %len1 = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 0
  %1 = load i32, i32* %len1, align 4
  store i32 %1, i32* %len, align 4
  %2 = load i32, i32* %len, align 4
  %3 = load %struct.str_t*, %struct.str_t** %r.addr, align 4
  %len2 = getelementptr inbounds %struct.str_t, %struct.str_t* %3, i32 0, i32 0
  %4 = load i32, i32* %len2, align 4
  %cmp = icmp ugt i32 %2, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.str_t*, %struct.str_t** %r.addr, align 4
  %len3 = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 0
  %6 = load i32, i32* %len3, align 4
  store i32 %6, i32* %len, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.str_t*, %struct.str_t** %l.addr, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %7, i32 0, i32 2
  %8 = load i8*, i8** %s, align 4
  %9 = load %struct.str_t*, %struct.str_t** %r.addr, align 4
  %s4 = getelementptr inbounds %struct.str_t, %struct.str_t* %9, i32 0, i32 2
  %10 = load i8*, i8** %s4, align 4
  %11 = load i32, i32* %len, align 4
  %call = call i32 @memcmp(i8* %8, i8* %10, i32 %11)
  store i32 %call, i32* %res, align 4
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  %12 = load i32, i32* %res, align 4
  store i32 %12, i32* %retval, align 4
  br label %return

if.end6:                                          ; preds = %if.end
  %13 = load %struct.str_t*, %struct.str_t** %l.addr, align 4
  %len7 = getelementptr inbounds %struct.str_t, %struct.str_t* %13, i32 0, i32 0
  %14 = load i32, i32* %len7, align 4
  %15 = load %struct.str_t*, %struct.str_t** %r.addr, align 4
  %len8 = getelementptr inbounds %struct.str_t, %struct.str_t* %15, i32 0, i32 0
  %16 = load i32, i32* %len8, align 4
  %cmp9 = icmp ugt i32 %14, %16
  %17 = zext i1 %cmp9 to i64
  %cond = select i1 %cmp9, i32 1, i32 -1
  store i32 %cond, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end6, %if.then5
  %18 = load i32, i32* %retval, align 4
  ret i32 %18
}

declare i32 @memcmp(i8* %0, i8* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_dup(%struct.str_t* %src) #0 {
entry:
  %src.addr = alloca %struct.str_t*, align 4
  %x = alloca %struct.str_t*, align 4
  store %struct.str_t* %src, %struct.str_t** %src.addr, align 4
  %0 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 0
  %1 = load i32, i32* %len, align 4
  %call = call %struct.str_t* @str_new(i32 %1)
  store %struct.str_t* %call, %struct.str_t** %x, align 4
  %2 = load %struct.str_t*, %struct.str_t** %x, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %2, i32 0, i32 2
  %3 = load i8*, i8** %s, align 4
  %4 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %s1 = getelementptr inbounds %struct.str_t, %struct.str_t* %4, i32 0, i32 2
  %5 = load i8*, i8** %s1, align 4
  %6 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len2 = getelementptr inbounds %struct.str_t, %struct.str_t* %6, i32 0, i32 0
  %7 = load i32, i32* %len2, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %3, i8* align 1 %5, i32 %7, i1 false)
  %8 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len3 = getelementptr inbounds %struct.str_t, %struct.str_t* %8, i32 0, i32 0
  %9 = load i32, i32* %len3, align 4
  %10 = load %struct.str_t*, %struct.str_t** %x, align 4
  %len4 = getelementptr inbounds %struct.str_t, %struct.str_t* %10, i32 0, i32 0
  store i32 %9, i32* %len4, align 4
  %11 = load %struct.str_t*, %struct.str_t** %x, align 4
  ret %struct.str_t* %11
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_from_chars(i8* %t) #0 {
entry:
  %retval = alloca %struct.str_t*, align 4
  %t.addr = alloca i8*, align 4
  %l = alloca i32, align 4
  %x = alloca %struct.str_t*, align 4
  store i8* %t, i8** %t.addr, align 4
  %0 = load i8*, i8** %t.addr, align 4
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call = call %struct.str_t* @str_new(i32 0)
  store %struct.str_t* %call, %struct.str_t** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i8*, i8** %t.addr, align 4
  %call1 = call i32 @strlen(i8* %1) #4
  store i32 %call1, i32* %l, align 4
  %2 = load i32, i32* %l, align 4
  %add = add i32 %2, 1
  %call2 = call %struct.str_t* @str_new(i32 %add)
  store %struct.str_t* %call2, %struct.str_t** %x, align 4
  %3 = load i32, i32* %l, align 4
  %4 = load %struct.str_t*, %struct.str_t** %x, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %4, i32 0, i32 0
  store i32 %3, i32* %len, align 4
  %5 = load %struct.str_t*, %struct.str_t** %x, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 2
  %6 = load i8*, i8** %s, align 4
  %7 = load i8*, i8** %t.addr, align 4
  %8 = load i32, i32* %l, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %6, i8* align 1 %7, i32 %8, i1 false)
  %9 = load %struct.str_t*, %struct.str_t** %x, align 4
  store %struct.str_t* %9, %struct.str_t** %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %10 = load %struct.str_t*, %struct.str_t** %retval, align 4
  ret %struct.str_t* %10
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #3

; Function Attrs: noinline nounwind optnone
define hidden void @str_append(%struct.str_t* %s, i8 zeroext %b) #0 {
entry:
  %s.addr = alloca %struct.str_t*, align 4
  %b.addr = alloca i8, align 1
  store %struct.str_t* %s, %struct.str_t** %s.addr, align 4
  store i8 %b, i8* %b.addr, align 1
  %0 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 0
  %1 = load i32, i32* %len, align 4
  %2 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc = getelementptr inbounds %struct.str_t, %struct.str_t* %2, i32 0, i32 1
  %3 = load i32, i32* %alloc, align 4
  %cmp = icmp uge i32 %1, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  call void @str_extend(%struct.str_t* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load i8, i8* %b.addr, align 1
  %6 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s1 = getelementptr inbounds %struct.str_t, %struct.str_t* %6, i32 0, i32 2
  %7 = load i8*, i8** %s1, align 4
  %8 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len2 = getelementptr inbounds %struct.str_t, %struct.str_t* %8, i32 0, i32 0
  %9 = load i32, i32* %len2, align 4
  %inc = add i32 %9, 1
  store i32 %inc, i32* %len2, align 4
  %arrayidx = getelementptr inbounds i8, i8* %7, i32 %9
  store i8 %5, i8* %arrayidx, align 1
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_substr(%struct.str_t* %s, i32 %from, i32 %to) #0 {
entry:
  %retval = alloca %struct.str_t*, align 4
  %s.addr = alloca %struct.str_t*, align 4
  %from.addr = alloca i32, align 4
  %to.addr = alloca i32, align 4
  %x = alloca %struct.str_t*, align 4
  store %struct.str_t* %s, %struct.str_t** %s.addr, align 4
  store i32 %from, i32* %from.addr, align 4
  store i32 %to, i32* %to.addr, align 4
  %0 = load i32, i32* %to.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %1, i32 0, i32 0
  %2 = load i32, i32* %len, align 4
  store i32 %2, i32* %to.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load i32, i32* %from.addr, align 4
  %cmp = icmp slt i32 %3, 0
  br i1 %cmp, label %if.then1, label %if.end3

if.then1:                                         ; preds = %if.end
  %4 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len2 = getelementptr inbounds %struct.str_t, %struct.str_t* %4, i32 0, i32 0
  %5 = load i32, i32* %len2, align 4
  %6 = load i32, i32* %from.addr, align 4
  %add = add i32 %6, %5
  store i32 %add, i32* %from.addr, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.end
  %7 = load i32, i32* %from.addr, align 4
  %cmp4 = icmp slt i32 %7, 0
  br i1 %cmp4, label %if.then7, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end3
  %8 = load i32, i32* %from.addr, align 4
  %9 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len5 = getelementptr inbounds %struct.str_t, %struct.str_t* %9, i32 0, i32 0
  %10 = load i32, i32* %len5, align 4
  %cmp6 = icmp uge i32 %8, %10
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %lor.lhs.false, %if.end3
  store %struct.str_t* null, %struct.str_t** %retval, align 4
  br label %return

if.end8:                                          ; preds = %lor.lhs.false
  %11 = load i32, i32* %to.addr, align 4
  %12 = load i32, i32* %from.addr, align 4
  %cmp9 = icmp slt i32 %11, %12
  br i1 %cmp9, label %if.then10, label %if.end12

if.then10:                                        ; preds = %if.end8
  %13 = load i32, i32* %from.addr, align 4
  %add11 = add nsw i32 %13, 1
  store i32 %add11, i32* %to.addr, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then10, %if.end8
  %14 = load i32, i32* %to.addr, align 4
  %15 = load i32, i32* %from.addr, align 4
  %sub = sub nsw i32 %14, %15
  %call = call %struct.str_t* @str_new(i32 %sub)
  store %struct.str_t* %call, %struct.str_t** %x, align 4
  %16 = load i32, i32* %to.addr, align 4
  %17 = load i32, i32* %from.addr, align 4
  %sub13 = sub nsw i32 %16, %17
  %18 = load %struct.str_t*, %struct.str_t** %x, align 4
  %len14 = getelementptr inbounds %struct.str_t, %struct.str_t* %18, i32 0, i32 0
  store i32 %sub13, i32* %len14, align 4
  %19 = load %struct.str_t*, %struct.str_t** %x, align 4
  %s15 = getelementptr inbounds %struct.str_t, %struct.str_t* %19, i32 0, i32 2
  %20 = load i8*, i8** %s15, align 4
  %21 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s16 = getelementptr inbounds %struct.str_t, %struct.str_t* %21, i32 0, i32 2
  %22 = load i8*, i8** %s16, align 4
  %23 = load i32, i32* %from.addr, align 4
  %add.ptr = getelementptr inbounds i8, i8* %22, i32 %23
  %24 = load %struct.str_t*, %struct.str_t** %x, align 4
  %len17 = getelementptr inbounds %struct.str_t, %struct.str_t* %24, i32 0, i32 0
  %25 = load i32, i32* %len17, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %20, i8* align 1 %add.ptr, i32 %25, i1 false)
  %26 = load %struct.str_t*, %struct.str_t** %x, align 4
  store %struct.str_t* %26, %struct.str_t** %retval, align 4
  br label %return

return:                                           ; preds = %if.end12, %if.then7
  %27 = load %struct.str_t*, %struct.str_t** %retval, align 4
  ret %struct.str_t* %27
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_cat(%struct.str_t* %s, %struct.str_t* %s2) #0 {
entry:
  %s.addr = alloca %struct.str_t*, align 4
  %s2.addr = alloca %struct.str_t*, align 4
  store %struct.str_t* %s, %struct.str_t** %s.addr, align 4
  store %struct.str_t* %s2, %struct.str_t** %s2.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 1
  %1 = load i32, i32* %alloc, align 4
  %2 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %2, i32 0, i32 0
  %3 = load i32, i32* %len, align 4
  %4 = load %struct.str_t*, %struct.str_t** %s2.addr, align 4
  %len1 = getelementptr inbounds %struct.str_t, %struct.str_t* %4, i32 0, i32 0
  %5 = load i32, i32* %len1, align 4
  %add = add i32 %3, %5
  %cmp = icmp ult i32 %1, %add
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  call void @str_extend(%struct.str_t* %6)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %7 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s3 = getelementptr inbounds %struct.str_t, %struct.str_t* %7, i32 0, i32 2
  %8 = load i8*, i8** %s3, align 4
  %9 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len4 = getelementptr inbounds %struct.str_t, %struct.str_t* %9, i32 0, i32 0
  %10 = load i32, i32* %len4, align 4
  %add.ptr = getelementptr inbounds i8, i8* %8, i32 %10
  %11 = load %struct.str_t*, %struct.str_t** %s2.addr, align 4
  %s5 = getelementptr inbounds %struct.str_t, %struct.str_t* %11, i32 0, i32 2
  %12 = load i8*, i8** %s5, align 4
  %13 = load %struct.str_t*, %struct.str_t** %s2.addr, align 4
  %len6 = getelementptr inbounds %struct.str_t, %struct.str_t* %13, i32 0, i32 0
  %14 = load i32, i32* %len6, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %add.ptr, i8* align 1 %12, i32 %14, i1 false)
  %15 = load %struct.str_t*, %struct.str_t** %s2.addr, align 4
  %len7 = getelementptr inbounds %struct.str_t, %struct.str_t* %15, i32 0, i32 0
  %16 = load i32, i32* %len7, align 4
  %17 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len8 = getelementptr inbounds %struct.str_t, %struct.str_t* %17, i32 0, i32 0
  %18 = load i32, i32* %len8, align 4
  %add9 = add i32 %18, %16
  store i32 %add9, i32* %len8, align 4
  %19 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  ret %struct.str_t* %19
}

; Function Attrs: noinline nounwind optnone
define hidden void @str_swap(%struct.str_t* %a, %struct.str_t* %b) #0 {
entry:
  %a.addr = alloca %struct.str_t*, align 4
  %b.addr = alloca %struct.str_t*, align 4
  %tz = alloca i32, align 4
  %ts = alloca i8*, align 4
  store %struct.str_t* %a, %struct.str_t** %a.addr, align 4
  store %struct.str_t* %b, %struct.str_t** %b.addr, align 4
  %0 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %alloc = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 1
  %1 = load i32, i32* %alloc, align 4
  store i32 %1, i32* %tz, align 4
  %2 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %alloc1 = getelementptr inbounds %struct.str_t, %struct.str_t* %2, i32 0, i32 1
  %3 = load i32, i32* %alloc1, align 4
  %4 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %alloc2 = getelementptr inbounds %struct.str_t, %struct.str_t* %4, i32 0, i32 1
  store i32 %3, i32* %alloc2, align 4
  %5 = load i32, i32* %tz, align 4
  %6 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %alloc3 = getelementptr inbounds %struct.str_t, %struct.str_t* %6, i32 0, i32 1
  store i32 %5, i32* %alloc3, align 4
  %7 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %7, i32 0, i32 0
  %8 = load i32, i32* %len, align 4
  store i32 %8, i32* %tz, align 4
  %9 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %len4 = getelementptr inbounds %struct.str_t, %struct.str_t* %9, i32 0, i32 0
  %10 = load i32, i32* %len4, align 4
  %11 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %len5 = getelementptr inbounds %struct.str_t, %struct.str_t* %11, i32 0, i32 0
  store i32 %10, i32* %len5, align 4
  %12 = load i32, i32* %tz, align 4
  %13 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %len6 = getelementptr inbounds %struct.str_t, %struct.str_t* %13, i32 0, i32 0
  store i32 %12, i32* %len6, align 4
  %14 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %14, i32 0, i32 2
  %15 = load i8*, i8** %s, align 4
  store i8* %15, i8** %ts, align 4
  %16 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %s7 = getelementptr inbounds %struct.str_t, %struct.str_t* %16, i32 0, i32 2
  %17 = load i8*, i8** %s7, align 4
  %18 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %s8 = getelementptr inbounds %struct.str_t, %struct.str_t* %18, i32 0, i32 2
  store i8* %17, i8** %s8, align 4
  %19 = load i8*, i8** %ts, align 4
  %20 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %s9 = getelementptr inbounds %struct.str_t, %struct.str_t* %20, i32 0, i32 2
  store i8* %19, i8** %s9, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_subst(%struct.str_t* %tgt, %struct.str_t* %pat, %struct.str_t* %repl) #0 {
entry:
  %tgt.addr = alloca %struct.str_t*, align 4
  %pat.addr = alloca %struct.str_t*, align 4
  %repl.addr = alloca %struct.str_t*, align 4
  %tmp = alloca %struct.str_t*, align 4
  %i = alloca i32, align 4
  store %struct.str_t* %tgt, %struct.str_t** %tgt.addr, align 4
  store %struct.str_t* %pat, %struct.str_t** %pat.addr, align 4
  store %struct.str_t* %repl, %struct.str_t** %repl.addr, align 4
  %call = call %struct.str_t* @str_new(i32 0)
  store %struct.str_t* %call, %struct.str_t** %tmp, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %if.end15, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.str_t*, %struct.str_t** %pat.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %1, i32 0, i32 0
  %2 = load i32, i32* %len, align 4
  %add = add i32 %0, %2
  %3 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %len1 = getelementptr inbounds %struct.str_t, %struct.str_t* %3, i32 0, i32 0
  %4 = load i32, i32* %len1, align 4
  %cmp = icmp ule i32 %add, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 2
  %6 = load i8*, i8** %s, align 4
  %7 = load i32, i32* %i, align 4
  %add.ptr = getelementptr inbounds i8, i8* %6, i32 %7
  %8 = load %struct.str_t*, %struct.str_t** %pat.addr, align 4
  %s2 = getelementptr inbounds %struct.str_t, %struct.str_t* %8, i32 0, i32 2
  %9 = load i8*, i8** %s2, align 4
  %10 = load %struct.str_t*, %struct.str_t** %pat.addr, align 4
  %len3 = getelementptr inbounds %struct.str_t, %struct.str_t* %10, i32 0, i32 0
  %11 = load i32, i32* %len3, align 4
  %call4 = call i32 @memcmp(i8* %add.ptr, i8* %9, i32 %11)
  %tobool = icmp ne i32 %call4, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %12 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  %13 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %s5 = getelementptr inbounds %struct.str_t, %struct.str_t* %13, i32 0, i32 2
  %14 = load i8*, i8** %s5, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %14, i32 %15
  %16 = load i8, i8* %arrayidx, align 1
  call void @str_append(%struct.str_t* %12, i8 zeroext %16)
  %17 = load i32, i32* %i, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %i, align 4
  br label %if.end15

if.else:                                          ; preds = %for.body
  %18 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  %19 = load %struct.str_t*, %struct.str_t** %repl.addr, align 4
  %call6 = call %struct.str_t* @str_cat(%struct.str_t* %18, %struct.str_t* %19)
  %20 = load %struct.str_t*, %struct.str_t** %pat.addr, align 4
  %len7 = getelementptr inbounds %struct.str_t, %struct.str_t* %20, i32 0, i32 0
  %21 = load i32, i32* %len7, align 4
  %22 = load i32, i32* %i, align 4
  %add8 = add i32 %22, %21
  store i32 %add8, i32* %i, align 4
  %23 = load %struct.str_t*, %struct.str_t** %pat.addr, align 4
  %len9 = getelementptr inbounds %struct.str_t, %struct.str_t* %23, i32 0, i32 0
  %24 = load i32, i32* %len9, align 4
  %tobool10 = icmp ne i32 %24, 0
  br i1 %tobool10, label %if.end, label %if.then11

if.then11:                                        ; preds = %if.else
  %25 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  %26 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %s12 = getelementptr inbounds %struct.str_t, %struct.str_t* %26, i32 0, i32 2
  %27 = load i8*, i8** %s12, align 4
  %28 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %28, 1
  store i32 %inc13, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds i8, i8* %27, i32 %28
  %29 = load i8, i8* %arrayidx14, align 1
  call void @str_append(%struct.str_t* %25, i8 zeroext %29)
  br label %if.end

if.end:                                           ; preds = %if.then11, %if.else
  br label %if.end15

if.end15:                                         ; preds = %if.end, %if.then
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end
  %30 = load i32, i32* %i, align 4
  %31 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %len16 = getelementptr inbounds %struct.str_t, %struct.str_t* %31, i32 0, i32 0
  %32 = load i32, i32* %len16, align 4
  %cmp17 = icmp ult i32 %30, %32
  br i1 %cmp17, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %33 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  %34 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %s18 = getelementptr inbounds %struct.str_t, %struct.str_t* %34, i32 0, i32 2
  %35 = load i8*, i8** %s18, align 4
  %36 = load i32, i32* %i, align 4
  %inc19 = add nsw i32 %36, 1
  store i32 %inc19, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds i8, i8* %35, i32 %36
  %37 = load i8, i8* %arrayidx20, align 1
  call void @str_append(%struct.str_t* %33, i8 zeroext %37)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %38 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  %39 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  call void @str_swap(%struct.str_t* %38, %struct.str_t* %39)
  %40 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  call void @str_del(%struct.str_t* %40)
  %41 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  ret %struct.str_t* %41
}

; Function Attrs: noinline nounwind optnone
define hidden void @str_set(%struct.str_t* %dest, %struct.str_t* %src) #0 {
entry:
  %dest.addr = alloca %struct.str_t*, align 4
  %src.addr = alloca %struct.str_t*, align 4
  store %struct.str_t* %dest, %struct.str_t** %dest.addr, align 4
  store %struct.str_t* %src, %struct.str_t** %src.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct.str_t*, %struct.str_t** %dest.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 0
  %1 = load i32, i32* %len, align 4
  %2 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len1 = getelementptr inbounds %struct.str_t, %struct.str_t* %2, i32 0, i32 0
  %3 = load i32, i32* %len1, align 4
  %cmp = icmp ult i32 %1, %3
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load %struct.str_t*, %struct.str_t** %dest.addr, align 4
  call void @str_extend(%struct.str_t* %4)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %5 = load %struct.str_t*, %struct.str_t** %dest.addr, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 2
  %6 = load i8*, i8** %s, align 4
  %7 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %s2 = getelementptr inbounds %struct.str_t, %struct.str_t* %7, i32 0, i32 2
  %8 = load i8*, i8** %s2, align 4
  %9 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len3 = getelementptr inbounds %struct.str_t, %struct.str_t* %9, i32 0, i32 0
  %10 = load i32, i32* %len3, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %6, i8* align 1 %8, i32 %10, i1 false)
  %11 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len4 = getelementptr inbounds %struct.str_t, %struct.str_t* %11, i32 0, i32 0
  %12 = load i32, i32* %len4, align 4
  %13 = load %struct.str_t*, %struct.str_t** %dest.addr, align 4
  %len5 = getelementptr inbounds %struct.str_t, %struct.str_t* %13, i32 0, i32 0
  store i32 %12, i32* %len5, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %s = alloca %struct.str_t*, align 4
  %s2 = alloca %struct.str_t*, align 4
  %s3 = alloca %struct.str_t*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.str_t* @str_from_chars(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i32 0, i32 0))
  store %struct.str_t* %call, %struct.str_t** %s, align 4
  %call1 = call %struct.str_t* @str_from_chars(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0))
  store %struct.str_t* %call1, %struct.str_t** %s2, align 4
  %call2 = call %struct.str_t* @str_from_chars(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2, i32 0, i32 0))
  store %struct.str_t* %call2, %struct.str_t** %s3, align 4
  %0 = load %struct.str_t*, %struct.str_t** %s, align 4
  %1 = load %struct.str_t*, %struct.str_t** %s3, align 4
  %2 = load %struct.str_t*, %struct.str_t** %s2, align 4
  %call3 = call %struct.str_t* @str_subst(%struct.str_t* %0, %struct.str_t* %1, %struct.str_t* %2)
  %3 = load %struct.str_t*, %struct.str_t** %s, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %3, i32 0, i32 0
  %4 = load i32, i32* %len, align 4
  %5 = load %struct.str_t*, %struct.str_t** %s, align 4
  %s4 = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 2
  %6 = load i8*, i8** %s4, align 4
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0), i32 %4, i8* %6)
  %7 = load %struct.str_t*, %struct.str_t** %s, align 4
  call void @str_del(%struct.str_t* %7)
  %8 = load %struct.str_t*, %struct.str_t** %s2, align 4
  call void @str_del(%struct.str_t* %8)
  %9 = load %struct.str_t*, %struct.str_t** %s3, align 4
  call void @str_del(%struct.str_t* %9)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %len2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %len3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for str_dup()

; entering Souper's runOnFunction() for str_from_chars()

; ModuleID = './Binary_strings.c.bc'
source_filename = "./Binary_strings.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.str_t = type { i32, i32, i8* }

@.str = private unnamed_addr constant [18 x i8] c"aaaaHaaaaaFaaaaHa\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"___.\00", align 1
@.str.2 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"%.*s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_new(i32 %len) #0 {
entry:
  %len.addr = alloca i32, align 4
  %s = alloca %struct.str_t*, align 4
  store i32 %len, i32* %len.addr, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.str_t*
  store %struct.str_t* %0, %struct.str_t** %s, align 4
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp ult i32 %1, 8
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 8, i32* %len.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i32, i32* %len.addr, align 4
  %3 = load %struct.str_t*, %struct.str_t** %s, align 4
  %alloc = getelementptr inbounds %struct.str_t, %struct.str_t* %3, i32 0, i32 1
  store i32 %2, i32* %alloc, align 4
  %4 = load i32, i32* %len.addr, align 4
  %call1 = call noalias i8* @malloc(i32 %4)
  %5 = load %struct.str_t*, %struct.str_t** %s, align 4
  %s2 = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 2
  store i8* %call1, i8** %s2, align 4
  %6 = load %struct.str_t*, %struct.str_t** %s, align 4
  %len3 = getelementptr inbounds %struct.str_t, %struct.str_t* %6, i32 0, i32 0
  store i32 0, i32* %len3, align 4
  %7 = load %struct.str_t*, %struct.str_t** %s, align 4
  ret %struct.str_t* %7
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @str_extend(%struct.str_t* %s) #0 {
entry:
  %s.addr = alloca %struct.str_t*, align 4
  %ns = alloca i32, align 4
  store %struct.str_t* %s, %struct.str_t** %s.addr, align 4
  %0 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 1
  %1 = load i32, i32* %alloc, align 4
  %mul = mul i32 %1, 2
  store i32 %mul, i32* %ns, align 4
  %2 = load i32, i32* %ns, align 4
  %3 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc1 = getelementptr inbounds %struct.str_t, %struct.str_t* %3, i32 0, i32 1
  %4 = load i32, i32* %alloc1, align 4
  %sub = sub i32 %2, %4
  %cmp = icmp ugt i32 %sub, 1024
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc2 = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 1
  %6 = load i32, i32* %alloc2, align 4
  %add = add i32 %6, 1024
  store i32 %add, i32* %ns, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s3 = getelementptr inbounds %struct.str_t, %struct.str_t* %7, i32 0, i32 2
  %8 = load i8*, i8** %s3, align 4
  %9 = load i32, i32* %ns, align 4
  %call = call i8* @realloc(i8* %8, i32 %9)
  %10 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s4 = getelementptr inbounds %struct.str_t, %struct.str_t* %10, i32 0, i32 2
  store i8* %call, i8** %s4, align 4
  %11 = load i32, i32* %ns, align 4
  %12 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc5 = getelementptr inbounds %struct.str_t, %struct.str_t* %12, i32 0, i32 1
  store i32 %11, i32* %alloc5, align 4
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @str_del(%struct.str_t* %s) #0 {
entry:
  %s.addr = alloca %struct.str_t*, align 4
  store %struct.str_t* %s, %struct.str_t** %s.addr, align 4
  %0 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s1 = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 2
  %1 = load i8*, i8** %s1, align 4
  call void @free(i8* %1)
  %2 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %3 = bitcast %struct.str_t* %2 to i8*
  call void @free(i8* %3)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @str_cmp(%struct.str_t* %l, %struct.str_t* %r) #0 {
entry:
  %retval = alloca i32, align 4
  %l.addr = alloca %struct.str_t*, align 4
  %r.addr = alloca %struct.str_t*, align 4
  %res = alloca i32, align 4
  %len = alloca i32, align 4
  store %struct.str_t* %l, %struct.str_t** %l.addr, align 4
  store %struct.str_t* %r, %struct.str_t** %r.addr, align 4
  %0 = load %struct.str_t*, %struct.str_t** %l.addr, align 4
  %len1 = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 0
  %1 = load i32, i32* %len1, align 4
  store i32 %1, i32* %len, align 4
  %2 = load i32, i32* %len, align 4
  %3 = load %struct.str_t*, %struct.str_t** %r.addr, align 4
  %len2 = getelementptr inbounds %struct.str_t, %struct.str_t* %3, i32 0, i32 0
  %4 = load i32, i32* %len2, align 4
  %cmp = icmp ugt i32 %2, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.str_t*, %struct.str_t** %r.addr, align 4
  %len3 = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 0
  %6 = load i32, i32* %len3, align 4
  store i32 %6, i32* %len, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.str_t*, %struct.str_t** %l.addr, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %7, i32 0, i32 2
  %8 = load i8*, i8** %s, align 4
  %9 = load %struct.str_t*, %struct.str_t** %r.addr, align 4
  %s4 = getelementptr inbounds %struct.str_t, %struct.str_t* %9, i32 0, i32 2
  %10 = load i8*, i8** %s4, align 4
  %11 = load i32, i32* %len, align 4
  %call = call i32 @memcmp(i8* %8, i8* %10, i32 %11)
  store i32 %call, i32* %res, align 4
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  %12 = load i32, i32* %res, align 4
  store i32 %12, i32* %retval, align 4
  br label %return

if.end6:                                          ; preds = %if.end
  %13 = load %struct.str_t*, %struct.str_t** %l.addr, align 4
  %len7 = getelementptr inbounds %struct.str_t, %struct.str_t* %13, i32 0, i32 0
  %14 = load i32, i32* %len7, align 4
  %15 = load %struct.str_t*, %struct.str_t** %r.addr, align 4
  %len8 = getelementptr inbounds %struct.str_t, %struct.str_t* %15, i32 0, i32 0
  %16 = load i32, i32* %len8, align 4
  %cmp9 = icmp ugt i32 %14, %16
  %17 = zext i1 %cmp9 to i64
  %cond = select i1 %cmp9, i32 1, i32 -1
  store i32 %cond, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end6, %if.then5
  %18 = load i32, i32* %retval, align 4
  ret i32 %18
}

declare i32 @memcmp(i8* %0, i8* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_dup(%struct.str_t* %src) #0 {
entry:
  %src.addr = alloca %struct.str_t*, align 4
  %x = alloca %struct.str_t*, align 4
  store %struct.str_t* %src, %struct.str_t** %src.addr, align 4
  %0 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 0
  %1 = load i32, i32* %len, align 4
  %call = call %struct.str_t* @str_new(i32 %1)
  store %struct.str_t* %call, %struct.str_t** %x, align 4
  %2 = load %struct.str_t*, %struct.str_t** %x, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %2, i32 0, i32 2
  %3 = load i8*, i8** %s, align 4
  %4 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %s1 = getelementptr inbounds %struct.str_t, %struct.str_t* %4, i32 0, i32 2
  %5 = load i8*, i8** %s1, align 4
  %6 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len2 = getelementptr inbounds %struct.str_t, %struct.str_t* %6, i32 0, i32 0
  %7 = load i32, i32* %len2, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %3, i8* align 1 %5, i32 %7, i1 false)
  %8 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len3 = getelementptr inbounds %struct.str_t, %struct.str_t* %8, i32 0, i32 0
  %9 = load i32, i32* %len3, align 4
  %10 = load %struct.str_t*, %struct.str_t** %x, align 4
  %len4 = getelementptr inbounds %struct.str_t, %struct.str_t* %10, i32 0, i32 0
  store i32 %9, i32* %len4, align 4
  %11 = load %struct.str_t*, %struct.str_t** %x, align 4
  ret %struct.str_t* %11
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_from_chars(i8* %t) #0 {
entry:
  %retval = alloca %struct.str_t*, align 4
  %t.addr = alloca i8*, align 4
  %l = alloca i32, align 4
  %x = alloca %struct.str_t*, align 4
  store i8* %t, i8** %t.addr, align 4
  %0 = load i8*, i8** %t.addr, align 4
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call = call %struct.str_t* @str_new(i32 0)
  store %struct.str_t* %call, %struct.str_t** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i8*, i8** %t.addr, align 4
  %call1 = call i32 @strlen(i8* %1) #4
  store i32 %call1, i32* %l, align 4
  %2 = load i32, i32* %l, align 4
  %add = add i32 %2, 1
  %call2 = call %struct.str_t* @str_new(i32 %add)
  store %struct.str_t* %call2, %struct.str_t** %x, align 4
  %3 = load i32, i32* %l, align 4
  %4 = load %struct.str_t*, %struct.str_t** %x, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %4, i32 0, i32 0
  store i32 %3, i32* %len, align 4
  %5 = load %struct.str_t*, %struct.str_t** %x, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 2
  %6 = load i8*, i8** %s, align 4
  %7 = load i8*, i8** %t.addr, align 4
  %8 = load i32, i32* %l, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %6, i8* align 1 %7, i32 %8, i1 false)
  %9 = load %struct.str_t*, %struct.str_t** %x, align 4
  store %struct.str_t* %9, %struct.str_t** %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %10 = load %struct.str_t*, %struct.str_t** %retval, align 4
  ret %struct.str_t* %10
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #3

; Function Attrs: noinline nounwind optnone
define hidden void @str_append(%struct.str_t* %s, i8 zeroext %b) #0 {
entry:
  %s.addr = alloca %struct.str_t*, align 4
  %b.addr = alloca i8, align 1
  store %struct.str_t* %s, %struct.str_t** %s.addr, align 4
  store i8 %b, i8* %b.addr, align 1
  %0 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 0
  %1 = load i32, i32* %len, align 4
  %2 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc = getelementptr inbounds %struct.str_t, %struct.str_t* %2, i32 0, i32 1
  %3 = load i32, i32* %alloc, align 4
  %cmp = icmp uge i32 %1, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  call void @str_extend(%struct.str_t* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load i8, i8* %b.addr, align 1
  %6 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s1 = getelementptr inbounds %struct.str_t, %struct.str_t* %6, i32 0, i32 2
  %7 = load i8*, i8** %s1, align 4
  %8 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len2 = getelementptr inbounds %struct.str_t, %struct.str_t* %8, i32 0, i32 0
  %9 = load i32, i32* %len2, align 4
  %inc = add i32 %9, 1
  store i32 %inc, i32* %len2, align 4
  %arrayidx = getelementptr inbounds i8, i8* %7, i32 %9
  store i8 %5, i8* %arrayidx, align 1
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_substr(%struct.str_t* %s, i32 %from, i32 %to) #0 {
entry:
  %retval = alloca %struct.str_t*, align 4
  %s.addr = alloca %struct.str_t*, align 4
  %from.addr = alloca i32, align 4
  %to.addr = alloca i32, align 4
  %x = alloca %struct.str_t*, align 4
  store %struct.str_t* %s, %struct.str_t** %s.addr, align 4
  store i32 %from, i32* %from.addr, align 4
  store i32 %to, i32* %to.addr, align 4
  %0 = load i32, i32* %to.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %1, i32 0, i32 0
  %2 = load i32, i32* %len, align 4
  store i32 %2, i32* %to.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load i32, i32* %from.addr, align 4
  %cmp = icmp slt i32 %3, 0
  br i1 %cmp, label %if.then1, label %if.end3

if.then1:                                         ; preds = %if.end
  %4 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len2 = getelementptr inbounds %struct.str_t, %struct.str_t* %4, i32 0, i32 0
  %5 = load i32, i32* %len2, align 4
  %6 = load i32, i32* %from.addr, align 4
  %add = add i32 %6, %5
  store i32 %add, i32* %from.addr, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.end
  %7 = load i32, i32* %from.addr, align 4
  %cmp4 = icmp slt i32 %7, 0
  br i1 %cmp4, label %if.then7, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end3
  %8 = load i32, i32* %from.addr, align 4
  %9 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len5 = getelementptr inbounds %struct.str_t, %struct.str_t* %9, i32 0, i32 0
  %10 = load i32, i32* %len5, align 4
  %cmp6 = icmp uge i32 %8, %10
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %lor.lhs.false, %if.end3
  store %struct.str_t* null, %struct.str_t** %retval, align 4
  br label %return

if.end8:                                          ; preds = %lor.lhs.false
  %11 = load i32, i32* %to.addr, align 4
  %12 = load i32, i32* %from.addr, align 4
  %cmp9 = icmp slt i32 %11, %12
  br i1 %cmp9, label %if.then10, label %if.end12

if.then10:                                        ; preds = %if.end8
  %13 = load i32, i32* %from.addr, align 4
  %add11 = add nsw i32 %13, 1
  store i32 %add11, i32* %to.addr, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then10, %if.end8
  %14 = load i32, i32* %to.addr, align 4
  %15 = load i32, i32* %from.addr, align 4
  %sub = sub nsw i32 %14, %15
  %call = call %struct.str_t* @str_new(i32 %sub)
  store %struct.str_t* %call, %struct.str_t** %x, align 4
  %16 = load i32, i32* %to.addr, align 4
  %17 = load i32, i32* %from.addr, align 4
  %sub13 = sub nsw i32 %16, %17
  %18 = load %struct.str_t*, %struct.str_t** %x, align 4
  %len14 = getelementptr inbounds %struct.str_t, %struct.str_t* %18, i32 0, i32 0
  store i32 %sub13, i32* %len14, align 4
  %19 = load %struct.str_t*, %struct.str_t** %x, align 4
  %s15 = getelementptr inbounds %struct.str_t, %struct.str_t* %19, i32 0, i32 2
  %20 = load i8*, i8** %s15, align 4
  %21 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s16 = getelementptr inbounds %struct.str_t, %struct.str_t* %21, i32 0, i32 2
  %22 = load i8*, i8** %s16, align 4
  %23 = load i32, i32* %from.addr, align 4
  %add.ptr = getelementptr inbounds i8, i8* %22, i32 %23
  %24 = load %struct.str_t*, %struct.str_t** %x, align 4
  %len17 = getelementptr inbounds %struct.str_t, %struct.str_t* %24, i32 0, i32 0
  %25 = load i32, i32* %len17, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %20, i8* align 1 %add.ptr, i32 %25, i1 false)
  %26 = load %struct.str_t*, %struct.str_t** %x, align 4
  store %struct.str_t* %26, %struct.str_t** %retval, align 4
  br label %return

return:                                           ; preds = %if.end12, %if.then7
  %27 = load %struct.str_t*, %struct.str_t** %retval, align 4
  ret %struct.str_t* %27
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_cat(%struct.str_t* %s, %struct.str_t* %s2) #0 {
entry:
  %s.addr = alloca %struct.str_t*, align 4
  %s2.addr = alloca %struct.str_t*, align 4
  store %struct.str_t* %s, %struct.str_t** %s.addr, align 4
  store %struct.str_t* %s2, %struct.str_t** %s2.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 1
  %1 = load i32, i32* %alloc, align 4
  %2 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %2, i32 0, i32 0
  %3 = load i32, i32* %len, align 4
  %4 = load %struct.str_t*, %struct.str_t** %s2.addr, align 4
  %len1 = getelementptr inbounds %struct.str_t, %struct.str_t* %4, i32 0, i32 0
  %5 = load i32, i32* %len1, align 4
  %add = add i32 %3, %5
  %cmp = icmp ult i32 %1, %add
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  call void @str_extend(%struct.str_t* %6)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %7 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s3 = getelementptr inbounds %struct.str_t, %struct.str_t* %7, i32 0, i32 2
  %8 = load i8*, i8** %s3, align 4
  %9 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len4 = getelementptr inbounds %struct.str_t, %struct.str_t* %9, i32 0, i32 0
  %10 = load i32, i32* %len4, align 4
  %add.ptr = getelementptr inbounds i8, i8* %8, i32 %10
  %11 = load %struct.str_t*, %struct.str_t** %s2.addr, align 4
  %s5 = getelementptr inbounds %struct.str_t, %struct.str_t* %11, i32 0, i32 2
  %12 = load i8*, i8** %s5, align 4
  %13 = load %struct.str_t*, %struct.str_t** %s2.addr, align 4
  %len6 = getelementptr inbounds %struct.str_t, %struct.str_t* %13, i32 0, i32 0
  %14 = load i32, i32* %len6, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %add.ptr, i8* align 1 %12, i32 %14, i1 false)
  %15 = load %struct.str_t*, %struct.str_t** %s2.addr, align 4
  %len7 = getelementptr inbounds %struct.str_t, %struct.str_t* %15, i32 0, i32 0
  %16 = load i32, i32* %len7, align 4
  %17 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len8 = getelementptr inbounds %struct.str_t, %struct.str_t* %17, i32 0, i32 0
  %18 = load i32, i32* %len8, align 4
  %add9 = add i32 %18, %16
  store i32 %add9, i32* %len8, align 4
  %19 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  ret %struct.str_t* %19
}

; Function Attrs: noinline nounwind optnone
define hidden void @str_swap(%struct.str_t* %a, %struct.str_t* %b) #0 {
entry:
  %a.addr = alloca %struct.str_t*, align 4
  %b.addr = alloca %struct.str_t*, align 4
  %tz = alloca i32, align 4
  %ts = alloca i8*, align 4
  store %struct.str_t* %a, %struct.str_t** %a.addr, align 4
  store %struct.str_t* %b, %struct.str_t** %b.addr, align 4
  %0 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %alloc = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 1
  %1 = load i32, i32* %alloc, align 4
  store i32 %1, i32* %tz, align 4
  %2 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %alloc1 = getelementptr inbounds %struct.str_t, %struct.str_t* %2, i32 0, i32 1
  %3 = load i32, i32* %alloc1, align 4
  %4 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %alloc2 = getelementptr inbounds %struct.str_t, %struct.str_t* %4, i32 0, i32 1
  store i32 %3, i32* %alloc2, align 4
  %5 = load i32, i32* %tz, align 4
  %6 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %alloc3 = getelementptr inbounds %struct.str_t, %struct.str_t* %6, i32 0, i32 1
  store i32 %5, i32* %alloc3, align 4
  %7 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %7, i32 0, i32 0
  %8 = load i32, i32* %len, align 4
  store i32 %8, i32* %tz, align 4
  %9 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %len4 = getelementptr inbounds %struct.str_t, %struct.str_t* %9, i32 0, i32 0
  %10 = load i32, i32* %len4, align 4
  %11 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %len5 = getelementptr inbounds %struct.str_t, %struct.str_t* %11, i32 0, i32 0
  store i32 %10, i32* %len5, align 4
  %12 = load i32, i32* %tz, align 4
  %13 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %len6 = getelementptr inbounds %struct.str_t, %struct.str_t* %13, i32 0, i32 0
  store i32 %12, i32* %len6, align 4
  %14 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %14, i32 0, i32 2
  %15 = load i8*, i8** %s, align 4
  store i8* %15, i8** %ts, align 4
  %16 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %s7 = getelementptr inbounds %struct.str_t, %struct.str_t* %16, i32 0, i32 2
  %17 = load i8*, i8** %s7, align 4
  %18 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %s8 = getelementptr inbounds %struct.str_t, %struct.str_t* %18, i32 0, i32 2
  store i8* %17, i8** %s8, align 4
  %19 = load i8*, i8** %ts, align 4
  %20 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %s9 = getelementptr inbounds %struct.str_t, %struct.str_t* %20, i32 0, i32 2
  store i8* %19, i8** %s9, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_subst(%struct.str_t* %tgt, %struct.str_t* %pat, %struct.str_t* %repl) #0 {
entry:
  %tgt.addr = alloca %struct.str_t*, align 4
  %pat.addr = alloca %struct.str_t*, align 4
  %repl.addr = alloca %struct.str_t*, align 4
  %tmp = alloca %struct.str_t*, align 4
  %i = alloca i32, align 4
  store %struct.str_t* %tgt, %struct.str_t** %tgt.addr, align 4
  store %struct.str_t* %pat, %struct.str_t** %pat.addr, align 4
  store %struct.str_t* %repl, %struct.str_t** %repl.addr, align 4
  %call = call %struct.str_t* @str_new(i32 0)
  store %struct.str_t* %call, %struct.str_t** %tmp, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %if.end15, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.str_t*, %struct.str_t** %pat.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %1, i32 0, i32 0
  %2 = load i32, i32* %len, align 4
  %add = add i32 %0, %2
  %3 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %len1 = getelementptr inbounds %struct.str_t, %struct.str_t* %3, i32 0, i32 0
  %4 = load i32, i32* %len1, align 4
  %cmp = icmp ule i32 %add, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 2
  %6 = load i8*, i8** %s, align 4
  %7 = load i32, i32* %i, align 4
  %add.ptr = getelementptr inbounds i8, i8* %6, i32 %7
  %8 = load %struct.str_t*, %struct.str_t** %pat.addr, align 4
  %s2 = getelementptr inbounds %struct.str_t, %struct.str_t* %8, i32 0, i32 2
  %9 = load i8*, i8** %s2, align 4
  %10 = load %struct.str_t*, %struct.str_t** %pat.addr, align 4
  %len3 = getelementptr inbounds %struct.str_t, %struct.str_t* %10, i32 0, i32 0
  %11 = load i32, i32* %len3, align 4
  %call4 = call i32 @memcmp(i8* %add.ptr, i8* %9, i32 %11)
  %tobool = icmp ne i32 %call4, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %12 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  %13 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %s5 = getelementptr inbounds %struct.str_t, %struct.str_t* %13, i32 0, i32 2
  %14 = load i8*, i8** %s5, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %14, i32 %15
  %16 = load i8, i8* %arrayidx, align 1
  call void @str_append(%struct.str_t* %12, i8 zeroext %16)
  %17 = load i32, i32* %i, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %i, align 4
  br label %if.end15

if.else:                                          ; preds = %for.body
  %18 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  %19 = load %struct.str_t*, %struct.str_t** %repl.addr, align 4
  %call6 = call %struct.str_t* @str_cat(%struct.str_t* %18, %struct.str_t* %19)
  %20 = load %struct.str_t*, %struct.str_t** %pat.addr, align 4
  %len7 = getelementptr inbounds %struct.str_t, %struct.str_t* %20, i32 0, i32 0
  %21 = load i32, i32* %len7, align 4
  %22 = load i32, i32* %i, align 4
  %add8 = add i32 %22, %21
  store i32 %add8, i32* %i, align 4
  %23 = load %struct.str_t*, %struct.str_t** %pat.addr, align 4
  %len9 = getelementptr inbounds %struct.str_t, %struct.str_t* %23, i32 0, i32 0
  %24 = load i32, i32* %len9, align 4
  %tobool10 = icmp ne i32 %24, 0
  br i1 %tobool10, label %if.end, label %if.then11

if.then11:                                        ; preds = %if.else
  %25 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  %26 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %s12 = getelementptr inbounds %struct.str_t, %struct.str_t* %26, i32 0, i32 2
  %27 = load i8*, i8** %s12, align 4
  %28 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %28, 1
  store i32 %inc13, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds i8, i8* %27, i32 %28
  %29 = load i8, i8* %arrayidx14, align 1
  call void @str_append(%struct.str_t* %25, i8 zeroext %29)
  br label %if.end

if.end:                                           ; preds = %if.then11, %if.else
  br label %if.end15

if.end15:                                         ; preds = %if.end, %if.then
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end
  %30 = load i32, i32* %i, align 4
  %31 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %len16 = getelementptr inbounds %struct.str_t, %struct.str_t* %31, i32 0, i32 0
  %32 = load i32, i32* %len16, align 4
  %cmp17 = icmp ult i32 %30, %32
  br i1 %cmp17, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %33 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  %34 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %s18 = getelementptr inbounds %struct.str_t, %struct.str_t* %34, i32 0, i32 2
  %35 = load i8*, i8** %s18, align 4
  %36 = load i32, i32* %i, align 4
  %inc19 = add nsw i32 %36, 1
  store i32 %inc19, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds i8, i8* %35, i32 %36
  %37 = load i8, i8* %arrayidx20, align 1
  call void @str_append(%struct.str_t* %33, i8 zeroext %37)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %38 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  %39 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  call void @str_swap(%struct.str_t* %38, %struct.str_t* %39)
  %40 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  call void @str_del(%struct.str_t* %40)
  %41 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  ret %struct.str_t* %41
}

; Function Attrs: noinline nounwind optnone
define hidden void @str_set(%struct.str_t* %dest, %struct.str_t* %src) #0 {
entry:
  %dest.addr = alloca %struct.str_t*, align 4
  %src.addr = alloca %struct.str_t*, align 4
  store %struct.str_t* %dest, %struct.str_t** %dest.addr, align 4
  store %struct.str_t* %src, %struct.str_t** %src.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct.str_t*, %struct.str_t** %dest.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 0
  %1 = load i32, i32* %len, align 4
  %2 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len1 = getelementptr inbounds %struct.str_t, %struct.str_t* %2, i32 0, i32 0
  %3 = load i32, i32* %len1, align 4
  %cmp = icmp ult i32 %1, %3
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load %struct.str_t*, %struct.str_t** %dest.addr, align 4
  call void @str_extend(%struct.str_t* %4)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %5 = load %struct.str_t*, %struct.str_t** %dest.addr, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 2
  %6 = load i8*, i8** %s, align 4
  %7 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %s2 = getelementptr inbounds %struct.str_t, %struct.str_t* %7, i32 0, i32 2
  %8 = load i8*, i8** %s2, align 4
  %9 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len3 = getelementptr inbounds %struct.str_t, %struct.str_t* %9, i32 0, i32 0
  %10 = load i32, i32* %len3, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %6, i8* align 1 %8, i32 %10, i1 false)
  %11 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len4 = getelementptr inbounds %struct.str_t, %struct.str_t* %11, i32 0, i32 0
  %12 = load i32, i32* %len4, align 4
  %13 = load %struct.str_t*, %struct.str_t** %dest.addr, align 4
  %len5 = getelementptr inbounds %struct.str_t, %struct.str_t* %13, i32 0, i32 0
  store i32 %12, i32* %len5, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %s = alloca %struct.str_t*, align 4
  %s2 = alloca %struct.str_t*, align 4
  %s3 = alloca %struct.str_t*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.str_t* @str_from_chars(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i32 0, i32 0))
  store %struct.str_t* %call, %struct.str_t** %s, align 4
  %call1 = call %struct.str_t* @str_from_chars(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0))
  store %struct.str_t* %call1, %struct.str_t** %s2, align 4
  %call2 = call %struct.str_t* @str_from_chars(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2, i32 0, i32 0))
  store %struct.str_t* %call2, %struct.str_t** %s3, align 4
  %0 = load %struct.str_t*, %struct.str_t** %s, align 4
  %1 = load %struct.str_t*, %struct.str_t** %s3, align 4
  %2 = load %struct.str_t*, %struct.str_t** %s2, align 4
  %call3 = call %struct.str_t* @str_subst(%struct.str_t* %0, %struct.str_t* %1, %struct.str_t* %2)
  %3 = load %struct.str_t*, %struct.str_t** %s, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %3, i32 0, i32 0
  %4 = load i32, i32* %len, align 4
  %5 = load %struct.str_t*, %struct.str_t** %s, align 4
  %s4 = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 2
  %6 = load i8*, i8** %s4, align 4
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0), i32 %4, i8* %6)
  %7 = load %struct.str_t*, %struct.str_t** %s, align 4
  call void @str_del(%struct.str_t* %7)
  %8 = load %struct.str_t*, %struct.str_t** %s2, align 4
  call void @str_del(%struct.str_t* %8)
  %9 = load %struct.str_t*, %struct.str_t** %s3, align 4
  call void @str_del(%struct.str_t* %9)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %tobool = icmp ne i8* %0, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call1 = call i32 @strlen(i8* %1) #4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %l, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add i32 %2, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %l, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %l, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for str_from_chars()

; entering Souper's runOnFunction() for str_append()

; ModuleID = './Binary_strings.c.bc'
source_filename = "./Binary_strings.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.str_t = type { i32, i32, i8* }

@.str = private unnamed_addr constant [18 x i8] c"aaaaHaaaaaFaaaaHa\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"___.\00", align 1
@.str.2 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"%.*s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_new(i32 %len) #0 {
entry:
  %len.addr = alloca i32, align 4
  %s = alloca %struct.str_t*, align 4
  store i32 %len, i32* %len.addr, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.str_t*
  store %struct.str_t* %0, %struct.str_t** %s, align 4
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp ult i32 %1, 8
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 8, i32* %len.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i32, i32* %len.addr, align 4
  %3 = load %struct.str_t*, %struct.str_t** %s, align 4
  %alloc = getelementptr inbounds %struct.str_t, %struct.str_t* %3, i32 0, i32 1
  store i32 %2, i32* %alloc, align 4
  %4 = load i32, i32* %len.addr, align 4
  %call1 = call noalias i8* @malloc(i32 %4)
  %5 = load %struct.str_t*, %struct.str_t** %s, align 4
  %s2 = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 2
  store i8* %call1, i8** %s2, align 4
  %6 = load %struct.str_t*, %struct.str_t** %s, align 4
  %len3 = getelementptr inbounds %struct.str_t, %struct.str_t* %6, i32 0, i32 0
  store i32 0, i32* %len3, align 4
  %7 = load %struct.str_t*, %struct.str_t** %s, align 4
  ret %struct.str_t* %7
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @str_extend(%struct.str_t* %s) #0 {
entry:
  %s.addr = alloca %struct.str_t*, align 4
  %ns = alloca i32, align 4
  store %struct.str_t* %s, %struct.str_t** %s.addr, align 4
  %0 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 1
  %1 = load i32, i32* %alloc, align 4
  %mul = mul i32 %1, 2
  store i32 %mul, i32* %ns, align 4
  %2 = load i32, i32* %ns, align 4
  %3 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc1 = getelementptr inbounds %struct.str_t, %struct.str_t* %3, i32 0, i32 1
  %4 = load i32, i32* %alloc1, align 4
  %sub = sub i32 %2, %4
  %cmp = icmp ugt i32 %sub, 1024
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc2 = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 1
  %6 = load i32, i32* %alloc2, align 4
  %add = add i32 %6, 1024
  store i32 %add, i32* %ns, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s3 = getelementptr inbounds %struct.str_t, %struct.str_t* %7, i32 0, i32 2
  %8 = load i8*, i8** %s3, align 4
  %9 = load i32, i32* %ns, align 4
  %call = call i8* @realloc(i8* %8, i32 %9)
  %10 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s4 = getelementptr inbounds %struct.str_t, %struct.str_t* %10, i32 0, i32 2
  store i8* %call, i8** %s4, align 4
  %11 = load i32, i32* %ns, align 4
  %12 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc5 = getelementptr inbounds %struct.str_t, %struct.str_t* %12, i32 0, i32 1
  store i32 %11, i32* %alloc5, align 4
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @str_del(%struct.str_t* %s) #0 {
entry:
  %s.addr = alloca %struct.str_t*, align 4
  store %struct.str_t* %s, %struct.str_t** %s.addr, align 4
  %0 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s1 = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 2
  %1 = load i8*, i8** %s1, align 4
  call void @free(i8* %1)
  %2 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %3 = bitcast %struct.str_t* %2 to i8*
  call void @free(i8* %3)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @str_cmp(%struct.str_t* %l, %struct.str_t* %r) #0 {
entry:
  %retval = alloca i32, align 4
  %l.addr = alloca %struct.str_t*, align 4
  %r.addr = alloca %struct.str_t*, align 4
  %res = alloca i32, align 4
  %len = alloca i32, align 4
  store %struct.str_t* %l, %struct.str_t** %l.addr, align 4
  store %struct.str_t* %r, %struct.str_t** %r.addr, align 4
  %0 = load %struct.str_t*, %struct.str_t** %l.addr, align 4
  %len1 = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 0
  %1 = load i32, i32* %len1, align 4
  store i32 %1, i32* %len, align 4
  %2 = load i32, i32* %len, align 4
  %3 = load %struct.str_t*, %struct.str_t** %r.addr, align 4
  %len2 = getelementptr inbounds %struct.str_t, %struct.str_t* %3, i32 0, i32 0
  %4 = load i32, i32* %len2, align 4
  %cmp = icmp ugt i32 %2, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.str_t*, %struct.str_t** %r.addr, align 4
  %len3 = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 0
  %6 = load i32, i32* %len3, align 4
  store i32 %6, i32* %len, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.str_t*, %struct.str_t** %l.addr, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %7, i32 0, i32 2
  %8 = load i8*, i8** %s, align 4
  %9 = load %struct.str_t*, %struct.str_t** %r.addr, align 4
  %s4 = getelementptr inbounds %struct.str_t, %struct.str_t* %9, i32 0, i32 2
  %10 = load i8*, i8** %s4, align 4
  %11 = load i32, i32* %len, align 4
  %call = call i32 @memcmp(i8* %8, i8* %10, i32 %11)
  store i32 %call, i32* %res, align 4
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  %12 = load i32, i32* %res, align 4
  store i32 %12, i32* %retval, align 4
  br label %return

if.end6:                                          ; preds = %if.end
  %13 = load %struct.str_t*, %struct.str_t** %l.addr, align 4
  %len7 = getelementptr inbounds %struct.str_t, %struct.str_t* %13, i32 0, i32 0
  %14 = load i32, i32* %len7, align 4
  %15 = load %struct.str_t*, %struct.str_t** %r.addr, align 4
  %len8 = getelementptr inbounds %struct.str_t, %struct.str_t* %15, i32 0, i32 0
  %16 = load i32, i32* %len8, align 4
  %cmp9 = icmp ugt i32 %14, %16
  %17 = zext i1 %cmp9 to i64
  %cond = select i1 %cmp9, i32 1, i32 -1
  store i32 %cond, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end6, %if.then5
  %18 = load i32, i32* %retval, align 4
  ret i32 %18
}

declare i32 @memcmp(i8* %0, i8* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_dup(%struct.str_t* %src) #0 {
entry:
  %src.addr = alloca %struct.str_t*, align 4
  %x = alloca %struct.str_t*, align 4
  store %struct.str_t* %src, %struct.str_t** %src.addr, align 4
  %0 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 0
  %1 = load i32, i32* %len, align 4
  %call = call %struct.str_t* @str_new(i32 %1)
  store %struct.str_t* %call, %struct.str_t** %x, align 4
  %2 = load %struct.str_t*, %struct.str_t** %x, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %2, i32 0, i32 2
  %3 = load i8*, i8** %s, align 4
  %4 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %s1 = getelementptr inbounds %struct.str_t, %struct.str_t* %4, i32 0, i32 2
  %5 = load i8*, i8** %s1, align 4
  %6 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len2 = getelementptr inbounds %struct.str_t, %struct.str_t* %6, i32 0, i32 0
  %7 = load i32, i32* %len2, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %3, i8* align 1 %5, i32 %7, i1 false)
  %8 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len3 = getelementptr inbounds %struct.str_t, %struct.str_t* %8, i32 0, i32 0
  %9 = load i32, i32* %len3, align 4
  %10 = load %struct.str_t*, %struct.str_t** %x, align 4
  %len4 = getelementptr inbounds %struct.str_t, %struct.str_t* %10, i32 0, i32 0
  store i32 %9, i32* %len4, align 4
  %11 = load %struct.str_t*, %struct.str_t** %x, align 4
  ret %struct.str_t* %11
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_from_chars(i8* %t) #0 {
entry:
  %retval = alloca %struct.str_t*, align 4
  %t.addr = alloca i8*, align 4
  %l = alloca i32, align 4
  %x = alloca %struct.str_t*, align 4
  store i8* %t, i8** %t.addr, align 4
  %0 = load i8*, i8** %t.addr, align 4
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call = call %struct.str_t* @str_new(i32 0)
  store %struct.str_t* %call, %struct.str_t** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i8*, i8** %t.addr, align 4
  %call1 = call i32 @strlen(i8* %1) #4
  store i32 %call1, i32* %l, align 4
  %2 = load i32, i32* %l, align 4
  %add = add i32 %2, 1
  %call2 = call %struct.str_t* @str_new(i32 %add)
  store %struct.str_t* %call2, %struct.str_t** %x, align 4
  %3 = load i32, i32* %l, align 4
  %4 = load %struct.str_t*, %struct.str_t** %x, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %4, i32 0, i32 0
  store i32 %3, i32* %len, align 4
  %5 = load %struct.str_t*, %struct.str_t** %x, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 2
  %6 = load i8*, i8** %s, align 4
  %7 = load i8*, i8** %t.addr, align 4
  %8 = load i32, i32* %l, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %6, i8* align 1 %7, i32 %8, i1 false)
  %9 = load %struct.str_t*, %struct.str_t** %x, align 4
  store %struct.str_t* %9, %struct.str_t** %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %10 = load %struct.str_t*, %struct.str_t** %retval, align 4
  ret %struct.str_t* %10
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #3

; Function Attrs: noinline nounwind optnone
define hidden void @str_append(%struct.str_t* %s, i8 zeroext %b) #0 {
entry:
  %s.addr = alloca %struct.str_t*, align 4
  %b.addr = alloca i8, align 1
  store %struct.str_t* %s, %struct.str_t** %s.addr, align 4
  store i8 %b, i8* %b.addr, align 1
  %0 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 0
  %1 = load i32, i32* %len, align 4
  %2 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc = getelementptr inbounds %struct.str_t, %struct.str_t* %2, i32 0, i32 1
  %3 = load i32, i32* %alloc, align 4
  %cmp = icmp uge i32 %1, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  call void @str_extend(%struct.str_t* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load i8, i8* %b.addr, align 1
  %6 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s1 = getelementptr inbounds %struct.str_t, %struct.str_t* %6, i32 0, i32 2
  %7 = load i8*, i8** %s1, align 4
  %8 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len2 = getelementptr inbounds %struct.str_t, %struct.str_t* %8, i32 0, i32 0
  %9 = load i32, i32* %len2, align 4
  %inc = add i32 %9, 1
  store i32 %inc, i32* %len2, align 4
  %arrayidx = getelementptr inbounds i8, i8* %7, i32 %9
  store i8 %5, i8* %arrayidx, align 1
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_substr(%struct.str_t* %s, i32 %from, i32 %to) #0 {
entry:
  %retval = alloca %struct.str_t*, align 4
  %s.addr = alloca %struct.str_t*, align 4
  %from.addr = alloca i32, align 4
  %to.addr = alloca i32, align 4
  %x = alloca %struct.str_t*, align 4
  store %struct.str_t* %s, %struct.str_t** %s.addr, align 4
  store i32 %from, i32* %from.addr, align 4
  store i32 %to, i32* %to.addr, align 4
  %0 = load i32, i32* %to.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %1, i32 0, i32 0
  %2 = load i32, i32* %len, align 4
  store i32 %2, i32* %to.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load i32, i32* %from.addr, align 4
  %cmp = icmp slt i32 %3, 0
  br i1 %cmp, label %if.then1, label %if.end3

if.then1:                                         ; preds = %if.end
  %4 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len2 = getelementptr inbounds %struct.str_t, %struct.str_t* %4, i32 0, i32 0
  %5 = load i32, i32* %len2, align 4
  %6 = load i32, i32* %from.addr, align 4
  %add = add i32 %6, %5
  store i32 %add, i32* %from.addr, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.end
  %7 = load i32, i32* %from.addr, align 4
  %cmp4 = icmp slt i32 %7, 0
  br i1 %cmp4, label %if.then7, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end3
  %8 = load i32, i32* %from.addr, align 4
  %9 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len5 = getelementptr inbounds %struct.str_t, %struct.str_t* %9, i32 0, i32 0
  %10 = load i32, i32* %len5, align 4
  %cmp6 = icmp uge i32 %8, %10
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %lor.lhs.false, %if.end3
  store %struct.str_t* null, %struct.str_t** %retval, align 4
  br label %return

if.end8:                                          ; preds = %lor.lhs.false
  %11 = load i32, i32* %to.addr, align 4
  %12 = load i32, i32* %from.addr, align 4
  %cmp9 = icmp slt i32 %11, %12
  br i1 %cmp9, label %if.then10, label %if.end12

if.then10:                                        ; preds = %if.end8
  %13 = load i32, i32* %from.addr, align 4
  %add11 = add nsw i32 %13, 1
  store i32 %add11, i32* %to.addr, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then10, %if.end8
  %14 = load i32, i32* %to.addr, align 4
  %15 = load i32, i32* %from.addr, align 4
  %sub = sub nsw i32 %14, %15
  %call = call %struct.str_t* @str_new(i32 %sub)
  store %struct.str_t* %call, %struct.str_t** %x, align 4
  %16 = load i32, i32* %to.addr, align 4
  %17 = load i32, i32* %from.addr, align 4
  %sub13 = sub nsw i32 %16, %17
  %18 = load %struct.str_t*, %struct.str_t** %x, align 4
  %len14 = getelementptr inbounds %struct.str_t, %struct.str_t* %18, i32 0, i32 0
  store i32 %sub13, i32* %len14, align 4
  %19 = load %struct.str_t*, %struct.str_t** %x, align 4
  %s15 = getelementptr inbounds %struct.str_t, %struct.str_t* %19, i32 0, i32 2
  %20 = load i8*, i8** %s15, align 4
  %21 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s16 = getelementptr inbounds %struct.str_t, %struct.str_t* %21, i32 0, i32 2
  %22 = load i8*, i8** %s16, align 4
  %23 = load i32, i32* %from.addr, align 4
  %add.ptr = getelementptr inbounds i8, i8* %22, i32 %23
  %24 = load %struct.str_t*, %struct.str_t** %x, align 4
  %len17 = getelementptr inbounds %struct.str_t, %struct.str_t* %24, i32 0, i32 0
  %25 = load i32, i32* %len17, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %20, i8* align 1 %add.ptr, i32 %25, i1 false)
  %26 = load %struct.str_t*, %struct.str_t** %x, align 4
  store %struct.str_t* %26, %struct.str_t** %retval, align 4
  br label %return

return:                                           ; preds = %if.end12, %if.then7
  %27 = load %struct.str_t*, %struct.str_t** %retval, align 4
  ret %struct.str_t* %27
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_cat(%struct.str_t* %s, %struct.str_t* %s2) #0 {
entry:
  %s.addr = alloca %struct.str_t*, align 4
  %s2.addr = alloca %struct.str_t*, align 4
  store %struct.str_t* %s, %struct.str_t** %s.addr, align 4
  store %struct.str_t* %s2, %struct.str_t** %s2.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 1
  %1 = load i32, i32* %alloc, align 4
  %2 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %2, i32 0, i32 0
  %3 = load i32, i32* %len, align 4
  %4 = load %struct.str_t*, %struct.str_t** %s2.addr, align 4
  %len1 = getelementptr inbounds %struct.str_t, %struct.str_t* %4, i32 0, i32 0
  %5 = load i32, i32* %len1, align 4
  %add = add i32 %3, %5
  %cmp = icmp ult i32 %1, %add
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  call void @str_extend(%struct.str_t* %6)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %7 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s3 = getelementptr inbounds %struct.str_t, %struct.str_t* %7, i32 0, i32 2
  %8 = load i8*, i8** %s3, align 4
  %9 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len4 = getelementptr inbounds %struct.str_t, %struct.str_t* %9, i32 0, i32 0
  %10 = load i32, i32* %len4, align 4
  %add.ptr = getelementptr inbounds i8, i8* %8, i32 %10
  %11 = load %struct.str_t*, %struct.str_t** %s2.addr, align 4
  %s5 = getelementptr inbounds %struct.str_t, %struct.str_t* %11, i32 0, i32 2
  %12 = load i8*, i8** %s5, align 4
  %13 = load %struct.str_t*, %struct.str_t** %s2.addr, align 4
  %len6 = getelementptr inbounds %struct.str_t, %struct.str_t* %13, i32 0, i32 0
  %14 = load i32, i32* %len6, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %add.ptr, i8* align 1 %12, i32 %14, i1 false)
  %15 = load %struct.str_t*, %struct.str_t** %s2.addr, align 4
  %len7 = getelementptr inbounds %struct.str_t, %struct.str_t* %15, i32 0, i32 0
  %16 = load i32, i32* %len7, align 4
  %17 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len8 = getelementptr inbounds %struct.str_t, %struct.str_t* %17, i32 0, i32 0
  %18 = load i32, i32* %len8, align 4
  %add9 = add i32 %18, %16
  store i32 %add9, i32* %len8, align 4
  %19 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  ret %struct.str_t* %19
}

; Function Attrs: noinline nounwind optnone
define hidden void @str_swap(%struct.str_t* %a, %struct.str_t* %b) #0 {
entry:
  %a.addr = alloca %struct.str_t*, align 4
  %b.addr = alloca %struct.str_t*, align 4
  %tz = alloca i32, align 4
  %ts = alloca i8*, align 4
  store %struct.str_t* %a, %struct.str_t** %a.addr, align 4
  store %struct.str_t* %b, %struct.str_t** %b.addr, align 4
  %0 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %alloc = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 1
  %1 = load i32, i32* %alloc, align 4
  store i32 %1, i32* %tz, align 4
  %2 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %alloc1 = getelementptr inbounds %struct.str_t, %struct.str_t* %2, i32 0, i32 1
  %3 = load i32, i32* %alloc1, align 4
  %4 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %alloc2 = getelementptr inbounds %struct.str_t, %struct.str_t* %4, i32 0, i32 1
  store i32 %3, i32* %alloc2, align 4
  %5 = load i32, i32* %tz, align 4
  %6 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %alloc3 = getelementptr inbounds %struct.str_t, %struct.str_t* %6, i32 0, i32 1
  store i32 %5, i32* %alloc3, align 4
  %7 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %7, i32 0, i32 0
  %8 = load i32, i32* %len, align 4
  store i32 %8, i32* %tz, align 4
  %9 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %len4 = getelementptr inbounds %struct.str_t, %struct.str_t* %9, i32 0, i32 0
  %10 = load i32, i32* %len4, align 4
  %11 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %len5 = getelementptr inbounds %struct.str_t, %struct.str_t* %11, i32 0, i32 0
  store i32 %10, i32* %len5, align 4
  %12 = load i32, i32* %tz, align 4
  %13 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %len6 = getelementptr inbounds %struct.str_t, %struct.str_t* %13, i32 0, i32 0
  store i32 %12, i32* %len6, align 4
  %14 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %14, i32 0, i32 2
  %15 = load i8*, i8** %s, align 4
  store i8* %15, i8** %ts, align 4
  %16 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %s7 = getelementptr inbounds %struct.str_t, %struct.str_t* %16, i32 0, i32 2
  %17 = load i8*, i8** %s7, align 4
  %18 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %s8 = getelementptr inbounds %struct.str_t, %struct.str_t* %18, i32 0, i32 2
  store i8* %17, i8** %s8, align 4
  %19 = load i8*, i8** %ts, align 4
  %20 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %s9 = getelementptr inbounds %struct.str_t, %struct.str_t* %20, i32 0, i32 2
  store i8* %19, i8** %s9, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_subst(%struct.str_t* %tgt, %struct.str_t* %pat, %struct.str_t* %repl) #0 {
entry:
  %tgt.addr = alloca %struct.str_t*, align 4
  %pat.addr = alloca %struct.str_t*, align 4
  %repl.addr = alloca %struct.str_t*, align 4
  %tmp = alloca %struct.str_t*, align 4
  %i = alloca i32, align 4
  store %struct.str_t* %tgt, %struct.str_t** %tgt.addr, align 4
  store %struct.str_t* %pat, %struct.str_t** %pat.addr, align 4
  store %struct.str_t* %repl, %struct.str_t** %repl.addr, align 4
  %call = call %struct.str_t* @str_new(i32 0)
  store %struct.str_t* %call, %struct.str_t** %tmp, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %if.end15, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.str_t*, %struct.str_t** %pat.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %1, i32 0, i32 0
  %2 = load i32, i32* %len, align 4
  %add = add i32 %0, %2
  %3 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %len1 = getelementptr inbounds %struct.str_t, %struct.str_t* %3, i32 0, i32 0
  %4 = load i32, i32* %len1, align 4
  %cmp = icmp ule i32 %add, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 2
  %6 = load i8*, i8** %s, align 4
  %7 = load i32, i32* %i, align 4
  %add.ptr = getelementptr inbounds i8, i8* %6, i32 %7
  %8 = load %struct.str_t*, %struct.str_t** %pat.addr, align 4
  %s2 = getelementptr inbounds %struct.str_t, %struct.str_t* %8, i32 0, i32 2
  %9 = load i8*, i8** %s2, align 4
  %10 = load %struct.str_t*, %struct.str_t** %pat.addr, align 4
  %len3 = getelementptr inbounds %struct.str_t, %struct.str_t* %10, i32 0, i32 0
  %11 = load i32, i32* %len3, align 4
  %call4 = call i32 @memcmp(i8* %add.ptr, i8* %9, i32 %11)
  %tobool = icmp ne i32 %call4, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %12 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  %13 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %s5 = getelementptr inbounds %struct.str_t, %struct.str_t* %13, i32 0, i32 2
  %14 = load i8*, i8** %s5, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %14, i32 %15
  %16 = load i8, i8* %arrayidx, align 1
  call void @str_append(%struct.str_t* %12, i8 zeroext %16)
  %17 = load i32, i32* %i, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %i, align 4
  br label %if.end15

if.else:                                          ; preds = %for.body
  %18 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  %19 = load %struct.str_t*, %struct.str_t** %repl.addr, align 4
  %call6 = call %struct.str_t* @str_cat(%struct.str_t* %18, %struct.str_t* %19)
  %20 = load %struct.str_t*, %struct.str_t** %pat.addr, align 4
  %len7 = getelementptr inbounds %struct.str_t, %struct.str_t* %20, i32 0, i32 0
  %21 = load i32, i32* %len7, align 4
  %22 = load i32, i32* %i, align 4
  %add8 = add i32 %22, %21
  store i32 %add8, i32* %i, align 4
  %23 = load %struct.str_t*, %struct.str_t** %pat.addr, align 4
  %len9 = getelementptr inbounds %struct.str_t, %struct.str_t* %23, i32 0, i32 0
  %24 = load i32, i32* %len9, align 4
  %tobool10 = icmp ne i32 %24, 0
  br i1 %tobool10, label %if.end, label %if.then11

if.then11:                                        ; preds = %if.else
  %25 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  %26 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %s12 = getelementptr inbounds %struct.str_t, %struct.str_t* %26, i32 0, i32 2
  %27 = load i8*, i8** %s12, align 4
  %28 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %28, 1
  store i32 %inc13, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds i8, i8* %27, i32 %28
  %29 = load i8, i8* %arrayidx14, align 1
  call void @str_append(%struct.str_t* %25, i8 zeroext %29)
  br label %if.end

if.end:                                           ; preds = %if.then11, %if.else
  br label %if.end15

if.end15:                                         ; preds = %if.end, %if.then
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end
  %30 = load i32, i32* %i, align 4
  %31 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %len16 = getelementptr inbounds %struct.str_t, %struct.str_t* %31, i32 0, i32 0
  %32 = load i32, i32* %len16, align 4
  %cmp17 = icmp ult i32 %30, %32
  br i1 %cmp17, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %33 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  %34 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %s18 = getelementptr inbounds %struct.str_t, %struct.str_t* %34, i32 0, i32 2
  %35 = load i8*, i8** %s18, align 4
  %36 = load i32, i32* %i, align 4
  %inc19 = add nsw i32 %36, 1
  store i32 %inc19, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds i8, i8* %35, i32 %36
  %37 = load i8, i8* %arrayidx20, align 1
  call void @str_append(%struct.str_t* %33, i8 zeroext %37)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %38 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  %39 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  call void @str_swap(%struct.str_t* %38, %struct.str_t* %39)
  %40 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  call void @str_del(%struct.str_t* %40)
  %41 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  ret %struct.str_t* %41
}

; Function Attrs: noinline nounwind optnone
define hidden void @str_set(%struct.str_t* %dest, %struct.str_t* %src) #0 {
entry:
  %dest.addr = alloca %struct.str_t*, align 4
  %src.addr = alloca %struct.str_t*, align 4
  store %struct.str_t* %dest, %struct.str_t** %dest.addr, align 4
  store %struct.str_t* %src, %struct.str_t** %src.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct.str_t*, %struct.str_t** %dest.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 0
  %1 = load i32, i32* %len, align 4
  %2 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len1 = getelementptr inbounds %struct.str_t, %struct.str_t* %2, i32 0, i32 0
  %3 = load i32, i32* %len1, align 4
  %cmp = icmp ult i32 %1, %3
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load %struct.str_t*, %struct.str_t** %dest.addr, align 4
  call void @str_extend(%struct.str_t* %4)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %5 = load %struct.str_t*, %struct.str_t** %dest.addr, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 2
  %6 = load i8*, i8** %s, align 4
  %7 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %s2 = getelementptr inbounds %struct.str_t, %struct.str_t* %7, i32 0, i32 2
  %8 = load i8*, i8** %s2, align 4
  %9 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len3 = getelementptr inbounds %struct.str_t, %struct.str_t* %9, i32 0, i32 0
  %10 = load i32, i32* %len3, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %6, i8* align 1 %8, i32 %10, i1 false)
  %11 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len4 = getelementptr inbounds %struct.str_t, %struct.str_t* %11, i32 0, i32 0
  %12 = load i32, i32* %len4, align 4
  %13 = load %struct.str_t*, %struct.str_t** %dest.addr, align 4
  %len5 = getelementptr inbounds %struct.str_t, %struct.str_t* %13, i32 0, i32 0
  store i32 %12, i32* %len5, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %s = alloca %struct.str_t*, align 4
  %s2 = alloca %struct.str_t*, align 4
  %s3 = alloca %struct.str_t*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.str_t* @str_from_chars(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i32 0, i32 0))
  store %struct.str_t* %call, %struct.str_t** %s, align 4
  %call1 = call %struct.str_t* @str_from_chars(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0))
  store %struct.str_t* %call1, %struct.str_t** %s2, align 4
  %call2 = call %struct.str_t* @str_from_chars(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2, i32 0, i32 0))
  store %struct.str_t* %call2, %struct.str_t** %s3, align 4
  %0 = load %struct.str_t*, %struct.str_t** %s, align 4
  %1 = load %struct.str_t*, %struct.str_t** %s3, align 4
  %2 = load %struct.str_t*, %struct.str_t** %s2, align 4
  %call3 = call %struct.str_t* @str_subst(%struct.str_t* %0, %struct.str_t* %1, %struct.str_t* %2)
  %3 = load %struct.str_t*, %struct.str_t** %s, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %3, i32 0, i32 0
  %4 = load i32, i32* %len, align 4
  %5 = load %struct.str_t*, %struct.str_t** %s, align 4
  %s4 = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 2
  %6 = load i8*, i8** %s4, align 4
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0), i32 %4, i8* %6)
  %7 = load %struct.str_t*, %struct.str_t** %s, align 4
  call void @str_del(%struct.str_t* %7)
  %8 = load %struct.str_t*, %struct.str_t** %s2, align 4
  call void @str_del(%struct.str_t* %8)
  %9 = load %struct.str_t*, %struct.str_t** %s3, align 4
  call void @str_del(%struct.str_t* %9)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %alloc, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp uge i32 %1, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ule %0, %1
infer %2

; *****
; For LLVM instruction:
;  %5 = load i8, i8* %b.addr, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %len2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add i32 %9, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = ule %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for str_append()

; entering Souper's runOnFunction() for str_substr()

; ModuleID = './Binary_strings.c.bc'
source_filename = "./Binary_strings.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.str_t = type { i32, i32, i8* }

@.str = private unnamed_addr constant [18 x i8] c"aaaaHaaaaaFaaaaHa\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"___.\00", align 1
@.str.2 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"%.*s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_new(i32 %len) #0 {
entry:
  %len.addr = alloca i32, align 4
  %s = alloca %struct.str_t*, align 4
  store i32 %len, i32* %len.addr, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.str_t*
  store %struct.str_t* %0, %struct.str_t** %s, align 4
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp ult i32 %1, 8
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 8, i32* %len.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i32, i32* %len.addr, align 4
  %3 = load %struct.str_t*, %struct.str_t** %s, align 4
  %alloc = getelementptr inbounds %struct.str_t, %struct.str_t* %3, i32 0, i32 1
  store i32 %2, i32* %alloc, align 4
  %4 = load i32, i32* %len.addr, align 4
  %call1 = call noalias i8* @malloc(i32 %4)
  %5 = load %struct.str_t*, %struct.str_t** %s, align 4
  %s2 = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 2
  store i8* %call1, i8** %s2, align 4
  %6 = load %struct.str_t*, %struct.str_t** %s, align 4
  %len3 = getelementptr inbounds %struct.str_t, %struct.str_t* %6, i32 0, i32 0
  store i32 0, i32* %len3, align 4
  %7 = load %struct.str_t*, %struct.str_t** %s, align 4
  ret %struct.str_t* %7
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @str_extend(%struct.str_t* %s) #0 {
entry:
  %s.addr = alloca %struct.str_t*, align 4
  %ns = alloca i32, align 4
  store %struct.str_t* %s, %struct.str_t** %s.addr, align 4
  %0 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 1
  %1 = load i32, i32* %alloc, align 4
  %mul = mul i32 %1, 2
  store i32 %mul, i32* %ns, align 4
  %2 = load i32, i32* %ns, align 4
  %3 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc1 = getelementptr inbounds %struct.str_t, %struct.str_t* %3, i32 0, i32 1
  %4 = load i32, i32* %alloc1, align 4
  %sub = sub i32 %2, %4
  %cmp = icmp ugt i32 %sub, 1024
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc2 = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 1
  %6 = load i32, i32* %alloc2, align 4
  %add = add i32 %6, 1024
  store i32 %add, i32* %ns, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s3 = getelementptr inbounds %struct.str_t, %struct.str_t* %7, i32 0, i32 2
  %8 = load i8*, i8** %s3, align 4
  %9 = load i32, i32* %ns, align 4
  %call = call i8* @realloc(i8* %8, i32 %9)
  %10 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s4 = getelementptr inbounds %struct.str_t, %struct.str_t* %10, i32 0, i32 2
  store i8* %call, i8** %s4, align 4
  %11 = load i32, i32* %ns, align 4
  %12 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc5 = getelementptr inbounds %struct.str_t, %struct.str_t* %12, i32 0, i32 1
  store i32 %11, i32* %alloc5, align 4
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @str_del(%struct.str_t* %s) #0 {
entry:
  %s.addr = alloca %struct.str_t*, align 4
  store %struct.str_t* %s, %struct.str_t** %s.addr, align 4
  %0 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s1 = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 2
  %1 = load i8*, i8** %s1, align 4
  call void @free(i8* %1)
  %2 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %3 = bitcast %struct.str_t* %2 to i8*
  call void @free(i8* %3)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @str_cmp(%struct.str_t* %l, %struct.str_t* %r) #0 {
entry:
  %retval = alloca i32, align 4
  %l.addr = alloca %struct.str_t*, align 4
  %r.addr = alloca %struct.str_t*, align 4
  %res = alloca i32, align 4
  %len = alloca i32, align 4
  store %struct.str_t* %l, %struct.str_t** %l.addr, align 4
  store %struct.str_t* %r, %struct.str_t** %r.addr, align 4
  %0 = load %struct.str_t*, %struct.str_t** %l.addr, align 4
  %len1 = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 0
  %1 = load i32, i32* %len1, align 4
  store i32 %1, i32* %len, align 4
  %2 = load i32, i32* %len, align 4
  %3 = load %struct.str_t*, %struct.str_t** %r.addr, align 4
  %len2 = getelementptr inbounds %struct.str_t, %struct.str_t* %3, i32 0, i32 0
  %4 = load i32, i32* %len2, align 4
  %cmp = icmp ugt i32 %2, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.str_t*, %struct.str_t** %r.addr, align 4
  %len3 = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 0
  %6 = load i32, i32* %len3, align 4
  store i32 %6, i32* %len, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.str_t*, %struct.str_t** %l.addr, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %7, i32 0, i32 2
  %8 = load i8*, i8** %s, align 4
  %9 = load %struct.str_t*, %struct.str_t** %r.addr, align 4
  %s4 = getelementptr inbounds %struct.str_t, %struct.str_t* %9, i32 0, i32 2
  %10 = load i8*, i8** %s4, align 4
  %11 = load i32, i32* %len, align 4
  %call = call i32 @memcmp(i8* %8, i8* %10, i32 %11)
  store i32 %call, i32* %res, align 4
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  %12 = load i32, i32* %res, align 4
  store i32 %12, i32* %retval, align 4
  br label %return

if.end6:                                          ; preds = %if.end
  %13 = load %struct.str_t*, %struct.str_t** %l.addr, align 4
  %len7 = getelementptr inbounds %struct.str_t, %struct.str_t* %13, i32 0, i32 0
  %14 = load i32, i32* %len7, align 4
  %15 = load %struct.str_t*, %struct.str_t** %r.addr, align 4
  %len8 = getelementptr inbounds %struct.str_t, %struct.str_t* %15, i32 0, i32 0
  %16 = load i32, i32* %len8, align 4
  %cmp9 = icmp ugt i32 %14, %16
  %17 = zext i1 %cmp9 to i64
  %cond = select i1 %cmp9, i32 1, i32 -1
  store i32 %cond, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end6, %if.then5
  %18 = load i32, i32* %retval, align 4
  ret i32 %18
}

declare i32 @memcmp(i8* %0, i8* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_dup(%struct.str_t* %src) #0 {
entry:
  %src.addr = alloca %struct.str_t*, align 4
  %x = alloca %struct.str_t*, align 4
  store %struct.str_t* %src, %struct.str_t** %src.addr, align 4
  %0 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 0
  %1 = load i32, i32* %len, align 4
  %call = call %struct.str_t* @str_new(i32 %1)
  store %struct.str_t* %call, %struct.str_t** %x, align 4
  %2 = load %struct.str_t*, %struct.str_t** %x, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %2, i32 0, i32 2
  %3 = load i8*, i8** %s, align 4
  %4 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %s1 = getelementptr inbounds %struct.str_t, %struct.str_t* %4, i32 0, i32 2
  %5 = load i8*, i8** %s1, align 4
  %6 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len2 = getelementptr inbounds %struct.str_t, %struct.str_t* %6, i32 0, i32 0
  %7 = load i32, i32* %len2, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %3, i8* align 1 %5, i32 %7, i1 false)
  %8 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len3 = getelementptr inbounds %struct.str_t, %struct.str_t* %8, i32 0, i32 0
  %9 = load i32, i32* %len3, align 4
  %10 = load %struct.str_t*, %struct.str_t** %x, align 4
  %len4 = getelementptr inbounds %struct.str_t, %struct.str_t* %10, i32 0, i32 0
  store i32 %9, i32* %len4, align 4
  %11 = load %struct.str_t*, %struct.str_t** %x, align 4
  ret %struct.str_t* %11
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_from_chars(i8* %t) #0 {
entry:
  %retval = alloca %struct.str_t*, align 4
  %t.addr = alloca i8*, align 4
  %l = alloca i32, align 4
  %x = alloca %struct.str_t*, align 4
  store i8* %t, i8** %t.addr, align 4
  %0 = load i8*, i8** %t.addr, align 4
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call = call %struct.str_t* @str_new(i32 0)
  store %struct.str_t* %call, %struct.str_t** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i8*, i8** %t.addr, align 4
  %call1 = call i32 @strlen(i8* %1) #4
  store i32 %call1, i32* %l, align 4
  %2 = load i32, i32* %l, align 4
  %add = add i32 %2, 1
  %call2 = call %struct.str_t* @str_new(i32 %add)
  store %struct.str_t* %call2, %struct.str_t** %x, align 4
  %3 = load i32, i32* %l, align 4
  %4 = load %struct.str_t*, %struct.str_t** %x, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %4, i32 0, i32 0
  store i32 %3, i32* %len, align 4
  %5 = load %struct.str_t*, %struct.str_t** %x, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 2
  %6 = load i8*, i8** %s, align 4
  %7 = load i8*, i8** %t.addr, align 4
  %8 = load i32, i32* %l, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %6, i8* align 1 %7, i32 %8, i1 false)
  %9 = load %struct.str_t*, %struct.str_t** %x, align 4
  store %struct.str_t* %9, %struct.str_t** %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %10 = load %struct.str_t*, %struct.str_t** %retval, align 4
  ret %struct.str_t* %10
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #3

; Function Attrs: noinline nounwind optnone
define hidden void @str_append(%struct.str_t* %s, i8 zeroext %b) #0 {
entry:
  %s.addr = alloca %struct.str_t*, align 4
  %b.addr = alloca i8, align 1
  store %struct.str_t* %s, %struct.str_t** %s.addr, align 4
  store i8 %b, i8* %b.addr, align 1
  %0 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 0
  %1 = load i32, i32* %len, align 4
  %2 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc = getelementptr inbounds %struct.str_t, %struct.str_t* %2, i32 0, i32 1
  %3 = load i32, i32* %alloc, align 4
  %cmp = icmp uge i32 %1, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  call void @str_extend(%struct.str_t* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load i8, i8* %b.addr, align 1
  %6 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s1 = getelementptr inbounds %struct.str_t, %struct.str_t* %6, i32 0, i32 2
  %7 = load i8*, i8** %s1, align 4
  %8 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len2 = getelementptr inbounds %struct.str_t, %struct.str_t* %8, i32 0, i32 0
  %9 = load i32, i32* %len2, align 4
  %inc = add i32 %9, 1
  store i32 %inc, i32* %len2, align 4
  %arrayidx = getelementptr inbounds i8, i8* %7, i32 %9
  store i8 %5, i8* %arrayidx, align 1
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_substr(%struct.str_t* %s, i32 %from, i32 %to) #0 {
entry:
  %retval = alloca %struct.str_t*, align 4
  %s.addr = alloca %struct.str_t*, align 4
  %from.addr = alloca i32, align 4
  %to.addr = alloca i32, align 4
  %x = alloca %struct.str_t*, align 4
  store %struct.str_t* %s, %struct.str_t** %s.addr, align 4
  store i32 %from, i32* %from.addr, align 4
  store i32 %to, i32* %to.addr, align 4
  %0 = load i32, i32* %to.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %1, i32 0, i32 0
  %2 = load i32, i32* %len, align 4
  store i32 %2, i32* %to.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load i32, i32* %from.addr, align 4
  %cmp = icmp slt i32 %3, 0
  br i1 %cmp, label %if.then1, label %if.end3

if.then1:                                         ; preds = %if.end
  %4 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len2 = getelementptr inbounds %struct.str_t, %struct.str_t* %4, i32 0, i32 0
  %5 = load i32, i32* %len2, align 4
  %6 = load i32, i32* %from.addr, align 4
  %add = add i32 %6, %5
  store i32 %add, i32* %from.addr, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.end
  %7 = load i32, i32* %from.addr, align 4
  %cmp4 = icmp slt i32 %7, 0
  br i1 %cmp4, label %if.then7, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end3
  %8 = load i32, i32* %from.addr, align 4
  %9 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len5 = getelementptr inbounds %struct.str_t, %struct.str_t* %9, i32 0, i32 0
  %10 = load i32, i32* %len5, align 4
  %cmp6 = icmp uge i32 %8, %10
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %lor.lhs.false, %if.end3
  store %struct.str_t* null, %struct.str_t** %retval, align 4
  br label %return

if.end8:                                          ; preds = %lor.lhs.false
  %11 = load i32, i32* %to.addr, align 4
  %12 = load i32, i32* %from.addr, align 4
  %cmp9 = icmp slt i32 %11, %12
  br i1 %cmp9, label %if.then10, label %if.end12

if.then10:                                        ; preds = %if.end8
  %13 = load i32, i32* %from.addr, align 4
  %add11 = add nsw i32 %13, 1
  store i32 %add11, i32* %to.addr, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then10, %if.end8
  %14 = load i32, i32* %to.addr, align 4
  %15 = load i32, i32* %from.addr, align 4
  %sub = sub nsw i32 %14, %15
  %call = call %struct.str_t* @str_new(i32 %sub)
  store %struct.str_t* %call, %struct.str_t** %x, align 4
  %16 = load i32, i32* %to.addr, align 4
  %17 = load i32, i32* %from.addr, align 4
  %sub13 = sub nsw i32 %16, %17
  %18 = load %struct.str_t*, %struct.str_t** %x, align 4
  %len14 = getelementptr inbounds %struct.str_t, %struct.str_t* %18, i32 0, i32 0
  store i32 %sub13, i32* %len14, align 4
  %19 = load %struct.str_t*, %struct.str_t** %x, align 4
  %s15 = getelementptr inbounds %struct.str_t, %struct.str_t* %19, i32 0, i32 2
  %20 = load i8*, i8** %s15, align 4
  %21 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s16 = getelementptr inbounds %struct.str_t, %struct.str_t* %21, i32 0, i32 2
  %22 = load i8*, i8** %s16, align 4
  %23 = load i32, i32* %from.addr, align 4
  %add.ptr = getelementptr inbounds i8, i8* %22, i32 %23
  %24 = load %struct.str_t*, %struct.str_t** %x, align 4
  %len17 = getelementptr inbounds %struct.str_t, %struct.str_t* %24, i32 0, i32 0
  %25 = load i32, i32* %len17, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %20, i8* align 1 %add.ptr, i32 %25, i1 false)
  %26 = load %struct.str_t*, %struct.str_t** %x, align 4
  store %struct.str_t* %26, %struct.str_t** %retval, align 4
  br label %return

return:                                           ; preds = %if.end12, %if.then7
  %27 = load %struct.str_t*, %struct.str_t** %retval, align 4
  ret %struct.str_t* %27
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_cat(%struct.str_t* %s, %struct.str_t* %s2) #0 {
entry:
  %s.addr = alloca %struct.str_t*, align 4
  %s2.addr = alloca %struct.str_t*, align 4
  store %struct.str_t* %s, %struct.str_t** %s.addr, align 4
  store %struct.str_t* %s2, %struct.str_t** %s2.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 1
  %1 = load i32, i32* %alloc, align 4
  %2 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %2, i32 0, i32 0
  %3 = load i32, i32* %len, align 4
  %4 = load %struct.str_t*, %struct.str_t** %s2.addr, align 4
  %len1 = getelementptr inbounds %struct.str_t, %struct.str_t* %4, i32 0, i32 0
  %5 = load i32, i32* %len1, align 4
  %add = add i32 %3, %5
  %cmp = icmp ult i32 %1, %add
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  call void @str_extend(%struct.str_t* %6)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %7 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s3 = getelementptr inbounds %struct.str_t, %struct.str_t* %7, i32 0, i32 2
  %8 = load i8*, i8** %s3, align 4
  %9 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len4 = getelementptr inbounds %struct.str_t, %struct.str_t* %9, i32 0, i32 0
  %10 = load i32, i32* %len4, align 4
  %add.ptr = getelementptr inbounds i8, i8* %8, i32 %10
  %11 = load %struct.str_t*, %struct.str_t** %s2.addr, align 4
  %s5 = getelementptr inbounds %struct.str_t, %struct.str_t* %11, i32 0, i32 2
  %12 = load i8*, i8** %s5, align 4
  %13 = load %struct.str_t*, %struct.str_t** %s2.addr, align 4
  %len6 = getelementptr inbounds %struct.str_t, %struct.str_t* %13, i32 0, i32 0
  %14 = load i32, i32* %len6, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %add.ptr, i8* align 1 %12, i32 %14, i1 false)
  %15 = load %struct.str_t*, %struct.str_t** %s2.addr, align 4
  %len7 = getelementptr inbounds %struct.str_t, %struct.str_t* %15, i32 0, i32 0
  %16 = load i32, i32* %len7, align 4
  %17 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len8 = getelementptr inbounds %struct.str_t, %struct.str_t* %17, i32 0, i32 0
  %18 = load i32, i32* %len8, align 4
  %add9 = add i32 %18, %16
  store i32 %add9, i32* %len8, align 4
  %19 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  ret %struct.str_t* %19
}

; Function Attrs: noinline nounwind optnone
define hidden void @str_swap(%struct.str_t* %a, %struct.str_t* %b) #0 {
entry:
  %a.addr = alloca %struct.str_t*, align 4
  %b.addr = alloca %struct.str_t*, align 4
  %tz = alloca i32, align 4
  %ts = alloca i8*, align 4
  store %struct.str_t* %a, %struct.str_t** %a.addr, align 4
  store %struct.str_t* %b, %struct.str_t** %b.addr, align 4
  %0 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %alloc = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 1
  %1 = load i32, i32* %alloc, align 4
  store i32 %1, i32* %tz, align 4
  %2 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %alloc1 = getelementptr inbounds %struct.str_t, %struct.str_t* %2, i32 0, i32 1
  %3 = load i32, i32* %alloc1, align 4
  %4 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %alloc2 = getelementptr inbounds %struct.str_t, %struct.str_t* %4, i32 0, i32 1
  store i32 %3, i32* %alloc2, align 4
  %5 = load i32, i32* %tz, align 4
  %6 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %alloc3 = getelementptr inbounds %struct.str_t, %struct.str_t* %6, i32 0, i32 1
  store i32 %5, i32* %alloc3, align 4
  %7 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %7, i32 0, i32 0
  %8 = load i32, i32* %len, align 4
  store i32 %8, i32* %tz, align 4
  %9 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %len4 = getelementptr inbounds %struct.str_t, %struct.str_t* %9, i32 0, i32 0
  %10 = load i32, i32* %len4, align 4
  %11 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %len5 = getelementptr inbounds %struct.str_t, %struct.str_t* %11, i32 0, i32 0
  store i32 %10, i32* %len5, align 4
  %12 = load i32, i32* %tz, align 4
  %13 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %len6 = getelementptr inbounds %struct.str_t, %struct.str_t* %13, i32 0, i32 0
  store i32 %12, i32* %len6, align 4
  %14 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %14, i32 0, i32 2
  %15 = load i8*, i8** %s, align 4
  store i8* %15, i8** %ts, align 4
  %16 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %s7 = getelementptr inbounds %struct.str_t, %struct.str_t* %16, i32 0, i32 2
  %17 = load i8*, i8** %s7, align 4
  %18 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %s8 = getelementptr inbounds %struct.str_t, %struct.str_t* %18, i32 0, i32 2
  store i8* %17, i8** %s8, align 4
  %19 = load i8*, i8** %ts, align 4
  %20 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %s9 = getelementptr inbounds %struct.str_t, %struct.str_t* %20, i32 0, i32 2
  store i8* %19, i8** %s9, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_subst(%struct.str_t* %tgt, %struct.str_t* %pat, %struct.str_t* %repl) #0 {
entry:
  %tgt.addr = alloca %struct.str_t*, align 4
  %pat.addr = alloca %struct.str_t*, align 4
  %repl.addr = alloca %struct.str_t*, align 4
  %tmp = alloca %struct.str_t*, align 4
  %i = alloca i32, align 4
  store %struct.str_t* %tgt, %struct.str_t** %tgt.addr, align 4
  store %struct.str_t* %pat, %struct.str_t** %pat.addr, align 4
  store %struct.str_t* %repl, %struct.str_t** %repl.addr, align 4
  %call = call %struct.str_t* @str_new(i32 0)
  store %struct.str_t* %call, %struct.str_t** %tmp, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %if.end15, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.str_t*, %struct.str_t** %pat.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %1, i32 0, i32 0
  %2 = load i32, i32* %len, align 4
  %add = add i32 %0, %2
  %3 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %len1 = getelementptr inbounds %struct.str_t, %struct.str_t* %3, i32 0, i32 0
  %4 = load i32, i32* %len1, align 4
  %cmp = icmp ule i32 %add, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 2
  %6 = load i8*, i8** %s, align 4
  %7 = load i32, i32* %i, align 4
  %add.ptr = getelementptr inbounds i8, i8* %6, i32 %7
  %8 = load %struct.str_t*, %struct.str_t** %pat.addr, align 4
  %s2 = getelementptr inbounds %struct.str_t, %struct.str_t* %8, i32 0, i32 2
  %9 = load i8*, i8** %s2, align 4
  %10 = load %struct.str_t*, %struct.str_t** %pat.addr, align 4
  %len3 = getelementptr inbounds %struct.str_t, %struct.str_t* %10, i32 0, i32 0
  %11 = load i32, i32* %len3, align 4
  %call4 = call i32 @memcmp(i8* %add.ptr, i8* %9, i32 %11)
  %tobool = icmp ne i32 %call4, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %12 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  %13 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %s5 = getelementptr inbounds %struct.str_t, %struct.str_t* %13, i32 0, i32 2
  %14 = load i8*, i8** %s5, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %14, i32 %15
  %16 = load i8, i8* %arrayidx, align 1
  call void @str_append(%struct.str_t* %12, i8 zeroext %16)
  %17 = load i32, i32* %i, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %i, align 4
  br label %if.end15

if.else:                                          ; preds = %for.body
  %18 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  %19 = load %struct.str_t*, %struct.str_t** %repl.addr, align 4
  %call6 = call %struct.str_t* @str_cat(%struct.str_t* %18, %struct.str_t* %19)
  %20 = load %struct.str_t*, %struct.str_t** %pat.addr, align 4
  %len7 = getelementptr inbounds %struct.str_t, %struct.str_t* %20, i32 0, i32 0
  %21 = load i32, i32* %len7, align 4
  %22 = load i32, i32* %i, align 4
  %add8 = add i32 %22, %21
  store i32 %add8, i32* %i, align 4
  %23 = load %struct.str_t*, %struct.str_t** %pat.addr, align 4
  %len9 = getelementptr inbounds %struct.str_t, %struct.str_t* %23, i32 0, i32 0
  %24 = load i32, i32* %len9, align 4
  %tobool10 = icmp ne i32 %24, 0
  br i1 %tobool10, label %if.end, label %if.then11

if.then11:                                        ; preds = %if.else
  %25 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  %26 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %s12 = getelementptr inbounds %struct.str_t, %struct.str_t* %26, i32 0, i32 2
  %27 = load i8*, i8** %s12, align 4
  %28 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %28, 1
  store i32 %inc13, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds i8, i8* %27, i32 %28
  %29 = load i8, i8* %arrayidx14, align 1
  call void @str_append(%struct.str_t* %25, i8 zeroext %29)
  br label %if.end

if.end:                                           ; preds = %if.then11, %if.else
  br label %if.end15

if.end15:                                         ; preds = %if.end, %if.then
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end
  %30 = load i32, i32* %i, align 4
  %31 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %len16 = getelementptr inbounds %struct.str_t, %struct.str_t* %31, i32 0, i32 0
  %32 = load i32, i32* %len16, align 4
  %cmp17 = icmp ult i32 %30, %32
  br i1 %cmp17, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %33 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  %34 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %s18 = getelementptr inbounds %struct.str_t, %struct.str_t* %34, i32 0, i32 2
  %35 = load i8*, i8** %s18, align 4
  %36 = load i32, i32* %i, align 4
  %inc19 = add nsw i32 %36, 1
  store i32 %inc19, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds i8, i8* %35, i32 %36
  %37 = load i8, i8* %arrayidx20, align 1
  call void @str_append(%struct.str_t* %33, i8 zeroext %37)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %38 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  %39 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  call void @str_swap(%struct.str_t* %38, %struct.str_t* %39)
  %40 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  call void @str_del(%struct.str_t* %40)
  %41 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  ret %struct.str_t* %41
}

; Function Attrs: noinline nounwind optnone
define hidden void @str_set(%struct.str_t* %dest, %struct.str_t* %src) #0 {
entry:
  %dest.addr = alloca %struct.str_t*, align 4
  %src.addr = alloca %struct.str_t*, align 4
  store %struct.str_t* %dest, %struct.str_t** %dest.addr, align 4
  store %struct.str_t* %src, %struct.str_t** %src.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct.str_t*, %struct.str_t** %dest.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 0
  %1 = load i32, i32* %len, align 4
  %2 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len1 = getelementptr inbounds %struct.str_t, %struct.str_t* %2, i32 0, i32 0
  %3 = load i32, i32* %len1, align 4
  %cmp = icmp ult i32 %1, %3
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load %struct.str_t*, %struct.str_t** %dest.addr, align 4
  call void @str_extend(%struct.str_t* %4)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %5 = load %struct.str_t*, %struct.str_t** %dest.addr, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 2
  %6 = load i8*, i8** %s, align 4
  %7 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %s2 = getelementptr inbounds %struct.str_t, %struct.str_t* %7, i32 0, i32 2
  %8 = load i8*, i8** %s2, align 4
  %9 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len3 = getelementptr inbounds %struct.str_t, %struct.str_t* %9, i32 0, i32 0
  %10 = load i32, i32* %len3, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %6, i8* align 1 %8, i32 %10, i1 false)
  %11 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len4 = getelementptr inbounds %struct.str_t, %struct.str_t* %11, i32 0, i32 0
  %12 = load i32, i32* %len4, align 4
  %13 = load %struct.str_t*, %struct.str_t** %dest.addr, align 4
  %len5 = getelementptr inbounds %struct.str_t, %struct.str_t* %13, i32 0, i32 0
  store i32 %12, i32* %len5, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %s = alloca %struct.str_t*, align 4
  %s2 = alloca %struct.str_t*, align 4
  %s3 = alloca %struct.str_t*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.str_t* @str_from_chars(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i32 0, i32 0))
  store %struct.str_t* %call, %struct.str_t** %s, align 4
  %call1 = call %struct.str_t* @str_from_chars(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0))
  store %struct.str_t* %call1, %struct.str_t** %s2, align 4
  %call2 = call %struct.str_t* @str_from_chars(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2, i32 0, i32 0))
  store %struct.str_t* %call2, %struct.str_t** %s3, align 4
  %0 = load %struct.str_t*, %struct.str_t** %s, align 4
  %1 = load %struct.str_t*, %struct.str_t** %s3, align 4
  %2 = load %struct.str_t*, %struct.str_t** %s2, align 4
  %call3 = call %struct.str_t* @str_subst(%struct.str_t* %0, %struct.str_t* %1, %struct.str_t* %2)
  %3 = load %struct.str_t*, %struct.str_t** %s, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %3, i32 0, i32 0
  %4 = load i32, i32* %len, align 4
  %5 = load %struct.str_t*, %struct.str_t** %s, align 4
  %s4 = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 2
  %6 = load i8*, i8** %s4, align 4
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0), i32 %4, i8* %6)
  %7 = load %struct.str_t*, %struct.str_t** %s, align 4
  call void @str_del(%struct.str_t* %7)
  %8 = load %struct.str_t*, %struct.str_t** %s2, align 4
  call void @str_del(%struct.str_t* %8)
  %9 = load %struct.str_t*, %struct.str_t** %s3, align 4
  call void @str_del(%struct.str_t* %9)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %to.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %0, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %from.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %3, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 0:i32
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %len2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %from.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add i32 %6, %5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %from.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp4 = icmp slt i32 %7, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 0:i32
infer %1

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %from.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %len5, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp6 = icmp uge i32 %8, %10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ule %0, %1
infer %2

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %to.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %from.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp9 = icmp slt i32 %11, %12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %from.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add11 = add nsw i32 %13, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %to.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %from.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %14, %15
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %to.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %from.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub13 = sub nsw i32 %16, %17
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %from.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %len17, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 0:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147418112
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for str_substr()

; entering Souper's runOnFunction() for str_cat()

; ModuleID = './Binary_strings.c.bc'
source_filename = "./Binary_strings.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.str_t = type { i32, i32, i8* }

@.str = private unnamed_addr constant [18 x i8] c"aaaaHaaaaaFaaaaHa\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"___.\00", align 1
@.str.2 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"%.*s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_new(i32 %len) #0 {
entry:
  %len.addr = alloca i32, align 4
  %s = alloca %struct.str_t*, align 4
  store i32 %len, i32* %len.addr, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.str_t*
  store %struct.str_t* %0, %struct.str_t** %s, align 4
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp ult i32 %1, 8
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 8, i32* %len.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i32, i32* %len.addr, align 4
  %3 = load %struct.str_t*, %struct.str_t** %s, align 4
  %alloc = getelementptr inbounds %struct.str_t, %struct.str_t* %3, i32 0, i32 1
  store i32 %2, i32* %alloc, align 4
  %4 = load i32, i32* %len.addr, align 4
  %call1 = call noalias i8* @malloc(i32 %4)
  %5 = load %struct.str_t*, %struct.str_t** %s, align 4
  %s2 = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 2
  store i8* %call1, i8** %s2, align 4
  %6 = load %struct.str_t*, %struct.str_t** %s, align 4
  %len3 = getelementptr inbounds %struct.str_t, %struct.str_t* %6, i32 0, i32 0
  store i32 0, i32* %len3, align 4
  %7 = load %struct.str_t*, %struct.str_t** %s, align 4
  ret %struct.str_t* %7
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @str_extend(%struct.str_t* %s) #0 {
entry:
  %s.addr = alloca %struct.str_t*, align 4
  %ns = alloca i32, align 4
  store %struct.str_t* %s, %struct.str_t** %s.addr, align 4
  %0 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 1
  %1 = load i32, i32* %alloc, align 4
  %mul = mul i32 %1, 2
  store i32 %mul, i32* %ns, align 4
  %2 = load i32, i32* %ns, align 4
  %3 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc1 = getelementptr inbounds %struct.str_t, %struct.str_t* %3, i32 0, i32 1
  %4 = load i32, i32* %alloc1, align 4
  %sub = sub i32 %2, %4
  %cmp = icmp ugt i32 %sub, 1024
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc2 = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 1
  %6 = load i32, i32* %alloc2, align 4
  %add = add i32 %6, 1024
  store i32 %add, i32* %ns, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s3 = getelementptr inbounds %struct.str_t, %struct.str_t* %7, i32 0, i32 2
  %8 = load i8*, i8** %s3, align 4
  %9 = load i32, i32* %ns, align 4
  %call = call i8* @realloc(i8* %8, i32 %9)
  %10 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s4 = getelementptr inbounds %struct.str_t, %struct.str_t* %10, i32 0, i32 2
  store i8* %call, i8** %s4, align 4
  %11 = load i32, i32* %ns, align 4
  %12 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc5 = getelementptr inbounds %struct.str_t, %struct.str_t* %12, i32 0, i32 1
  store i32 %11, i32* %alloc5, align 4
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @str_del(%struct.str_t* %s) #0 {
entry:
  %s.addr = alloca %struct.str_t*, align 4
  store %struct.str_t* %s, %struct.str_t** %s.addr, align 4
  %0 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s1 = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 2
  %1 = load i8*, i8** %s1, align 4
  call void @free(i8* %1)
  %2 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %3 = bitcast %struct.str_t* %2 to i8*
  call void @free(i8* %3)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @str_cmp(%struct.str_t* %l, %struct.str_t* %r) #0 {
entry:
  %retval = alloca i32, align 4
  %l.addr = alloca %struct.str_t*, align 4
  %r.addr = alloca %struct.str_t*, align 4
  %res = alloca i32, align 4
  %len = alloca i32, align 4
  store %struct.str_t* %l, %struct.str_t** %l.addr, align 4
  store %struct.str_t* %r, %struct.str_t** %r.addr, align 4
  %0 = load %struct.str_t*, %struct.str_t** %l.addr, align 4
  %len1 = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 0
  %1 = load i32, i32* %len1, align 4
  store i32 %1, i32* %len, align 4
  %2 = load i32, i32* %len, align 4
  %3 = load %struct.str_t*, %struct.str_t** %r.addr, align 4
  %len2 = getelementptr inbounds %struct.str_t, %struct.str_t* %3, i32 0, i32 0
  %4 = load i32, i32* %len2, align 4
  %cmp = icmp ugt i32 %2, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.str_t*, %struct.str_t** %r.addr, align 4
  %len3 = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 0
  %6 = load i32, i32* %len3, align 4
  store i32 %6, i32* %len, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.str_t*, %struct.str_t** %l.addr, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %7, i32 0, i32 2
  %8 = load i8*, i8** %s, align 4
  %9 = load %struct.str_t*, %struct.str_t** %r.addr, align 4
  %s4 = getelementptr inbounds %struct.str_t, %struct.str_t* %9, i32 0, i32 2
  %10 = load i8*, i8** %s4, align 4
  %11 = load i32, i32* %len, align 4
  %call = call i32 @memcmp(i8* %8, i8* %10, i32 %11)
  store i32 %call, i32* %res, align 4
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  %12 = load i32, i32* %res, align 4
  store i32 %12, i32* %retval, align 4
  br label %return

if.end6:                                          ; preds = %if.end
  %13 = load %struct.str_t*, %struct.str_t** %l.addr, align 4
  %len7 = getelementptr inbounds %struct.str_t, %struct.str_t* %13, i32 0, i32 0
  %14 = load i32, i32* %len7, align 4
  %15 = load %struct.str_t*, %struct.str_t** %r.addr, align 4
  %len8 = getelementptr inbounds %struct.str_t, %struct.str_t* %15, i32 0, i32 0
  %16 = load i32, i32* %len8, align 4
  %cmp9 = icmp ugt i32 %14, %16
  %17 = zext i1 %cmp9 to i64
  %cond = select i1 %cmp9, i32 1, i32 -1
  store i32 %cond, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end6, %if.then5
  %18 = load i32, i32* %retval, align 4
  ret i32 %18
}

declare i32 @memcmp(i8* %0, i8* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_dup(%struct.str_t* %src) #0 {
entry:
  %src.addr = alloca %struct.str_t*, align 4
  %x = alloca %struct.str_t*, align 4
  store %struct.str_t* %src, %struct.str_t** %src.addr, align 4
  %0 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 0
  %1 = load i32, i32* %len, align 4
  %call = call %struct.str_t* @str_new(i32 %1)
  store %struct.str_t* %call, %struct.str_t** %x, align 4
  %2 = load %struct.str_t*, %struct.str_t** %x, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %2, i32 0, i32 2
  %3 = load i8*, i8** %s, align 4
  %4 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %s1 = getelementptr inbounds %struct.str_t, %struct.str_t* %4, i32 0, i32 2
  %5 = load i8*, i8** %s1, align 4
  %6 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len2 = getelementptr inbounds %struct.str_t, %struct.str_t* %6, i32 0, i32 0
  %7 = load i32, i32* %len2, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %3, i8* align 1 %5, i32 %7, i1 false)
  %8 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len3 = getelementptr inbounds %struct.str_t, %struct.str_t* %8, i32 0, i32 0
  %9 = load i32, i32* %len3, align 4
  %10 = load %struct.str_t*, %struct.str_t** %x, align 4
  %len4 = getelementptr inbounds %struct.str_t, %struct.str_t* %10, i32 0, i32 0
  store i32 %9, i32* %len4, align 4
  %11 = load %struct.str_t*, %struct.str_t** %x, align 4
  ret %struct.str_t* %11
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_from_chars(i8* %t) #0 {
entry:
  %retval = alloca %struct.str_t*, align 4
  %t.addr = alloca i8*, align 4
  %l = alloca i32, align 4
  %x = alloca %struct.str_t*, align 4
  store i8* %t, i8** %t.addr, align 4
  %0 = load i8*, i8** %t.addr, align 4
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call = call %struct.str_t* @str_new(i32 0)
  store %struct.str_t* %call, %struct.str_t** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i8*, i8** %t.addr, align 4
  %call1 = call i32 @strlen(i8* %1) #4
  store i32 %call1, i32* %l, align 4
  %2 = load i32, i32* %l, align 4
  %add = add i32 %2, 1
  %call2 = call %struct.str_t* @str_new(i32 %add)
  store %struct.str_t* %call2, %struct.str_t** %x, align 4
  %3 = load i32, i32* %l, align 4
  %4 = load %struct.str_t*, %struct.str_t** %x, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %4, i32 0, i32 0
  store i32 %3, i32* %len, align 4
  %5 = load %struct.str_t*, %struct.str_t** %x, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 2
  %6 = load i8*, i8** %s, align 4
  %7 = load i8*, i8** %t.addr, align 4
  %8 = load i32, i32* %l, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %6, i8* align 1 %7, i32 %8, i1 false)
  %9 = load %struct.str_t*, %struct.str_t** %x, align 4
  store %struct.str_t* %9, %struct.str_t** %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %10 = load %struct.str_t*, %struct.str_t** %retval, align 4
  ret %struct.str_t* %10
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #3

; Function Attrs: noinline nounwind optnone
define hidden void @str_append(%struct.str_t* %s, i8 zeroext %b) #0 {
entry:
  %s.addr = alloca %struct.str_t*, align 4
  %b.addr = alloca i8, align 1
  store %struct.str_t* %s, %struct.str_t** %s.addr, align 4
  store i8 %b, i8* %b.addr, align 1
  %0 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 0
  %1 = load i32, i32* %len, align 4
  %2 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc = getelementptr inbounds %struct.str_t, %struct.str_t* %2, i32 0, i32 1
  %3 = load i32, i32* %alloc, align 4
  %cmp = icmp uge i32 %1, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  call void @str_extend(%struct.str_t* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load i8, i8* %b.addr, align 1
  %6 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s1 = getelementptr inbounds %struct.str_t, %struct.str_t* %6, i32 0, i32 2
  %7 = load i8*, i8** %s1, align 4
  %8 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len2 = getelementptr inbounds %struct.str_t, %struct.str_t* %8, i32 0, i32 0
  %9 = load i32, i32* %len2, align 4
  %inc = add i32 %9, 1
  store i32 %inc, i32* %len2, align 4
  %arrayidx = getelementptr inbounds i8, i8* %7, i32 %9
  store i8 %5, i8* %arrayidx, align 1
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_substr(%struct.str_t* %s, i32 %from, i32 %to) #0 {
entry:
  %retval = alloca %struct.str_t*, align 4
  %s.addr = alloca %struct.str_t*, align 4
  %from.addr = alloca i32, align 4
  %to.addr = alloca i32, align 4
  %x = alloca %struct.str_t*, align 4
  store %struct.str_t* %s, %struct.str_t** %s.addr, align 4
  store i32 %from, i32* %from.addr, align 4
  store i32 %to, i32* %to.addr, align 4
  %0 = load i32, i32* %to.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %1, i32 0, i32 0
  %2 = load i32, i32* %len, align 4
  store i32 %2, i32* %to.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load i32, i32* %from.addr, align 4
  %cmp = icmp slt i32 %3, 0
  br i1 %cmp, label %if.then1, label %if.end3

if.then1:                                         ; preds = %if.end
  %4 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len2 = getelementptr inbounds %struct.str_t, %struct.str_t* %4, i32 0, i32 0
  %5 = load i32, i32* %len2, align 4
  %6 = load i32, i32* %from.addr, align 4
  %add = add i32 %6, %5
  store i32 %add, i32* %from.addr, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.end
  %7 = load i32, i32* %from.addr, align 4
  %cmp4 = icmp slt i32 %7, 0
  br i1 %cmp4, label %if.then7, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end3
  %8 = load i32, i32* %from.addr, align 4
  %9 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len5 = getelementptr inbounds %struct.str_t, %struct.str_t* %9, i32 0, i32 0
  %10 = load i32, i32* %len5, align 4
  %cmp6 = icmp uge i32 %8, %10
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %lor.lhs.false, %if.end3
  store %struct.str_t* null, %struct.str_t** %retval, align 4
  br label %return

if.end8:                                          ; preds = %lor.lhs.false
  %11 = load i32, i32* %to.addr, align 4
  %12 = load i32, i32* %from.addr, align 4
  %cmp9 = icmp slt i32 %11, %12
  br i1 %cmp9, label %if.then10, label %if.end12

if.then10:                                        ; preds = %if.end8
  %13 = load i32, i32* %from.addr, align 4
  %add11 = add nsw i32 %13, 1
  store i32 %add11, i32* %to.addr, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then10, %if.end8
  %14 = load i32, i32* %to.addr, align 4
  %15 = load i32, i32* %from.addr, align 4
  %sub = sub nsw i32 %14, %15
  %call = call %struct.str_t* @str_new(i32 %sub)
  store %struct.str_t* %call, %struct.str_t** %x, align 4
  %16 = load i32, i32* %to.addr, align 4
  %17 = load i32, i32* %from.addr, align 4
  %sub13 = sub nsw i32 %16, %17
  %18 = load %struct.str_t*, %struct.str_t** %x, align 4
  %len14 = getelementptr inbounds %struct.str_t, %struct.str_t* %18, i32 0, i32 0
  store i32 %sub13, i32* %len14, align 4
  %19 = load %struct.str_t*, %struct.str_t** %x, align 4
  %s15 = getelementptr inbounds %struct.str_t, %struct.str_t* %19, i32 0, i32 2
  %20 = load i8*, i8** %s15, align 4
  %21 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s16 = getelementptr inbounds %struct.str_t, %struct.str_t* %21, i32 0, i32 2
  %22 = load i8*, i8** %s16, align 4
  %23 = load i32, i32* %from.addr, align 4
  %add.ptr = getelementptr inbounds i8, i8* %22, i32 %23
  %24 = load %struct.str_t*, %struct.str_t** %x, align 4
  %len17 = getelementptr inbounds %struct.str_t, %struct.str_t* %24, i32 0, i32 0
  %25 = load i32, i32* %len17, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %20, i8* align 1 %add.ptr, i32 %25, i1 false)
  %26 = load %struct.str_t*, %struct.str_t** %x, align 4
  store %struct.str_t* %26, %struct.str_t** %retval, align 4
  br label %return

return:                                           ; preds = %if.end12, %if.then7
  %27 = load %struct.str_t*, %struct.str_t** %retval, align 4
  ret %struct.str_t* %27
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_cat(%struct.str_t* %s, %struct.str_t* %s2) #0 {
entry:
  %s.addr = alloca %struct.str_t*, align 4
  %s2.addr = alloca %struct.str_t*, align 4
  store %struct.str_t* %s, %struct.str_t** %s.addr, align 4
  store %struct.str_t* %s2, %struct.str_t** %s2.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 1
  %1 = load i32, i32* %alloc, align 4
  %2 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %2, i32 0, i32 0
  %3 = load i32, i32* %len, align 4
  %4 = load %struct.str_t*, %struct.str_t** %s2.addr, align 4
  %len1 = getelementptr inbounds %struct.str_t, %struct.str_t* %4, i32 0, i32 0
  %5 = load i32, i32* %len1, align 4
  %add = add i32 %3, %5
  %cmp = icmp ult i32 %1, %add
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  call void @str_extend(%struct.str_t* %6)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %7 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s3 = getelementptr inbounds %struct.str_t, %struct.str_t* %7, i32 0, i32 2
  %8 = load i8*, i8** %s3, align 4
  %9 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len4 = getelementptr inbounds %struct.str_t, %struct.str_t* %9, i32 0, i32 0
  %10 = load i32, i32* %len4, align 4
  %add.ptr = getelementptr inbounds i8, i8* %8, i32 %10
  %11 = load %struct.str_t*, %struct.str_t** %s2.addr, align 4
  %s5 = getelementptr inbounds %struct.str_t, %struct.str_t* %11, i32 0, i32 2
  %12 = load i8*, i8** %s5, align 4
  %13 = load %struct.str_t*, %struct.str_t** %s2.addr, align 4
  %len6 = getelementptr inbounds %struct.str_t, %struct.str_t* %13, i32 0, i32 0
  %14 = load i32, i32* %len6, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %add.ptr, i8* align 1 %12, i32 %14, i1 false)
  %15 = load %struct.str_t*, %struct.str_t** %s2.addr, align 4
  %len7 = getelementptr inbounds %struct.str_t, %struct.str_t* %15, i32 0, i32 0
  %16 = load i32, i32* %len7, align 4
  %17 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len8 = getelementptr inbounds %struct.str_t, %struct.str_t* %17, i32 0, i32 0
  %18 = load i32, i32* %len8, align 4
  %add9 = add i32 %18, %16
  store i32 %add9, i32* %len8, align 4
  %19 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  ret %struct.str_t* %19
}

; Function Attrs: noinline nounwind optnone
define hidden void @str_swap(%struct.str_t* %a, %struct.str_t* %b) #0 {
entry:
  %a.addr = alloca %struct.str_t*, align 4
  %b.addr = alloca %struct.str_t*, align 4
  %tz = alloca i32, align 4
  %ts = alloca i8*, align 4
  store %struct.str_t* %a, %struct.str_t** %a.addr, align 4
  store %struct.str_t* %b, %struct.str_t** %b.addr, align 4
  %0 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %alloc = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 1
  %1 = load i32, i32* %alloc, align 4
  store i32 %1, i32* %tz, align 4
  %2 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %alloc1 = getelementptr inbounds %struct.str_t, %struct.str_t* %2, i32 0, i32 1
  %3 = load i32, i32* %alloc1, align 4
  %4 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %alloc2 = getelementptr inbounds %struct.str_t, %struct.str_t* %4, i32 0, i32 1
  store i32 %3, i32* %alloc2, align 4
  %5 = load i32, i32* %tz, align 4
  %6 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %alloc3 = getelementptr inbounds %struct.str_t, %struct.str_t* %6, i32 0, i32 1
  store i32 %5, i32* %alloc3, align 4
  %7 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %7, i32 0, i32 0
  %8 = load i32, i32* %len, align 4
  store i32 %8, i32* %tz, align 4
  %9 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %len4 = getelementptr inbounds %struct.str_t, %struct.str_t* %9, i32 0, i32 0
  %10 = load i32, i32* %len4, align 4
  %11 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %len5 = getelementptr inbounds %struct.str_t, %struct.str_t* %11, i32 0, i32 0
  store i32 %10, i32* %len5, align 4
  %12 = load i32, i32* %tz, align 4
  %13 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %len6 = getelementptr inbounds %struct.str_t, %struct.str_t* %13, i32 0, i32 0
  store i32 %12, i32* %len6, align 4
  %14 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %14, i32 0, i32 2
  %15 = load i8*, i8** %s, align 4
  store i8* %15, i8** %ts, align 4
  %16 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %s7 = getelementptr inbounds %struct.str_t, %struct.str_t* %16, i32 0, i32 2
  %17 = load i8*, i8** %s7, align 4
  %18 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %s8 = getelementptr inbounds %struct.str_t, %struct.str_t* %18, i32 0, i32 2
  store i8* %17, i8** %s8, align 4
  %19 = load i8*, i8** %ts, align 4
  %20 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %s9 = getelementptr inbounds %struct.str_t, %struct.str_t* %20, i32 0, i32 2
  store i8* %19, i8** %s9, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_subst(%struct.str_t* %tgt, %struct.str_t* %pat, %struct.str_t* %repl) #0 {
entry:
  %tgt.addr = alloca %struct.str_t*, align 4
  %pat.addr = alloca %struct.str_t*, align 4
  %repl.addr = alloca %struct.str_t*, align 4
  %tmp = alloca %struct.str_t*, align 4
  %i = alloca i32, align 4
  store %struct.str_t* %tgt, %struct.str_t** %tgt.addr, align 4
  store %struct.str_t* %pat, %struct.str_t** %pat.addr, align 4
  store %struct.str_t* %repl, %struct.str_t** %repl.addr, align 4
  %call = call %struct.str_t* @str_new(i32 0)
  store %struct.str_t* %call, %struct.str_t** %tmp, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %if.end15, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.str_t*, %struct.str_t** %pat.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %1, i32 0, i32 0
  %2 = load i32, i32* %len, align 4
  %add = add i32 %0, %2
  %3 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %len1 = getelementptr inbounds %struct.str_t, %struct.str_t* %3, i32 0, i32 0
  %4 = load i32, i32* %len1, align 4
  %cmp = icmp ule i32 %add, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 2
  %6 = load i8*, i8** %s, align 4
  %7 = load i32, i32* %i, align 4
  %add.ptr = getelementptr inbounds i8, i8* %6, i32 %7
  %8 = load %struct.str_t*, %struct.str_t** %pat.addr, align 4
  %s2 = getelementptr inbounds %struct.str_t, %struct.str_t* %8, i32 0, i32 2
  %9 = load i8*, i8** %s2, align 4
  %10 = load %struct.str_t*, %struct.str_t** %pat.addr, align 4
  %len3 = getelementptr inbounds %struct.str_t, %struct.str_t* %10, i32 0, i32 0
  %11 = load i32, i32* %len3, align 4
  %call4 = call i32 @memcmp(i8* %add.ptr, i8* %9, i32 %11)
  %tobool = icmp ne i32 %call4, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %12 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  %13 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %s5 = getelementptr inbounds %struct.str_t, %struct.str_t* %13, i32 0, i32 2
  %14 = load i8*, i8** %s5, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %14, i32 %15
  %16 = load i8, i8* %arrayidx, align 1
  call void @str_append(%struct.str_t* %12, i8 zeroext %16)
  %17 = load i32, i32* %i, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %i, align 4
  br label %if.end15

if.else:                                          ; preds = %for.body
  %18 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  %19 = load %struct.str_t*, %struct.str_t** %repl.addr, align 4
  %call6 = call %struct.str_t* @str_cat(%struct.str_t* %18, %struct.str_t* %19)
  %20 = load %struct.str_t*, %struct.str_t** %pat.addr, align 4
  %len7 = getelementptr inbounds %struct.str_t, %struct.str_t* %20, i32 0, i32 0
  %21 = load i32, i32* %len7, align 4
  %22 = load i32, i32* %i, align 4
  %add8 = add i32 %22, %21
  store i32 %add8, i32* %i, align 4
  %23 = load %struct.str_t*, %struct.str_t** %pat.addr, align 4
  %len9 = getelementptr inbounds %struct.str_t, %struct.str_t* %23, i32 0, i32 0
  %24 = load i32, i32* %len9, align 4
  %tobool10 = icmp ne i32 %24, 0
  br i1 %tobool10, label %if.end, label %if.then11

if.then11:                                        ; preds = %if.else
  %25 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  %26 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %s12 = getelementptr inbounds %struct.str_t, %struct.str_t* %26, i32 0, i32 2
  %27 = load i8*, i8** %s12, align 4
  %28 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %28, 1
  store i32 %inc13, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds i8, i8* %27, i32 %28
  %29 = load i8, i8* %arrayidx14, align 1
  call void @str_append(%struct.str_t* %25, i8 zeroext %29)
  br label %if.end

if.end:                                           ; preds = %if.then11, %if.else
  br label %if.end15

if.end15:                                         ; preds = %if.end, %if.then
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end
  %30 = load i32, i32* %i, align 4
  %31 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %len16 = getelementptr inbounds %struct.str_t, %struct.str_t* %31, i32 0, i32 0
  %32 = load i32, i32* %len16, align 4
  %cmp17 = icmp ult i32 %30, %32
  br i1 %cmp17, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %33 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  %34 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %s18 = getelementptr inbounds %struct.str_t, %struct.str_t* %34, i32 0, i32 2
  %35 = load i8*, i8** %s18, align 4
  %36 = load i32, i32* %i, align 4
  %inc19 = add nsw i32 %36, 1
  store i32 %inc19, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds i8, i8* %35, i32 %36
  %37 = load i8, i8* %arrayidx20, align 1
  call void @str_append(%struct.str_t* %33, i8 zeroext %37)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %38 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  %39 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  call void @str_swap(%struct.str_t* %38, %struct.str_t* %39)
  %40 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  call void @str_del(%struct.str_t* %40)
  %41 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  ret %struct.str_t* %41
}

; Function Attrs: noinline nounwind optnone
define hidden void @str_set(%struct.str_t* %dest, %struct.str_t* %src) #0 {
entry:
  %dest.addr = alloca %struct.str_t*, align 4
  %src.addr = alloca %struct.str_t*, align 4
  store %struct.str_t* %dest, %struct.str_t** %dest.addr, align 4
  store %struct.str_t* %src, %struct.str_t** %src.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct.str_t*, %struct.str_t** %dest.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 0
  %1 = load i32, i32* %len, align 4
  %2 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len1 = getelementptr inbounds %struct.str_t, %struct.str_t* %2, i32 0, i32 0
  %3 = load i32, i32* %len1, align 4
  %cmp = icmp ult i32 %1, %3
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load %struct.str_t*, %struct.str_t** %dest.addr, align 4
  call void @str_extend(%struct.str_t* %4)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %5 = load %struct.str_t*, %struct.str_t** %dest.addr, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 2
  %6 = load i8*, i8** %s, align 4
  %7 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %s2 = getelementptr inbounds %struct.str_t, %struct.str_t* %7, i32 0, i32 2
  %8 = load i8*, i8** %s2, align 4
  %9 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len3 = getelementptr inbounds %struct.str_t, %struct.str_t* %9, i32 0, i32 0
  %10 = load i32, i32* %len3, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %6, i8* align 1 %8, i32 %10, i1 false)
  %11 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len4 = getelementptr inbounds %struct.str_t, %struct.str_t* %11, i32 0, i32 0
  %12 = load i32, i32* %len4, align 4
  %13 = load %struct.str_t*, %struct.str_t** %dest.addr, align 4
  %len5 = getelementptr inbounds %struct.str_t, %struct.str_t* %13, i32 0, i32 0
  store i32 %12, i32* %len5, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %s = alloca %struct.str_t*, align 4
  %s2 = alloca %struct.str_t*, align 4
  %s3 = alloca %struct.str_t*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.str_t* @str_from_chars(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i32 0, i32 0))
  store %struct.str_t* %call, %struct.str_t** %s, align 4
  %call1 = call %struct.str_t* @str_from_chars(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0))
  store %struct.str_t* %call1, %struct.str_t** %s2, align 4
  %call2 = call %struct.str_t* @str_from_chars(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2, i32 0, i32 0))
  store %struct.str_t* %call2, %struct.str_t** %s3, align 4
  %0 = load %struct.str_t*, %struct.str_t** %s, align 4
  %1 = load %struct.str_t*, %struct.str_t** %s3, align 4
  %2 = load %struct.str_t*, %struct.str_t** %s2, align 4
  %call3 = call %struct.str_t* @str_subst(%struct.str_t* %0, %struct.str_t* %1, %struct.str_t* %2)
  %3 = load %struct.str_t*, %struct.str_t** %s, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %3, i32 0, i32 0
  %4 = load i32, i32* %len, align 4
  %5 = load %struct.str_t*, %struct.str_t** %s, align 4
  %s4 = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 2
  %6 = load i8*, i8** %s4, align 4
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0), i32 %4, i8* %6)
  %7 = load %struct.str_t*, %struct.str_t** %s, align 4
  call void @str_del(%struct.str_t* %7)
  %8 = load %struct.str_t*, %struct.str_t** %s2, align 4
  call void @str_del(%struct.str_t* %8)
  %9 = load %struct.str_t*, %struct.str_t** %s3, align 4
  call void @str_del(%struct.str_t* %9)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %alloc, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %len1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add i32 %3, %5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %cmp = icmp ult i32 %1, %add
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i1 = ult %0, %3
infer %4

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %len4, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %len6, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %len7, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %len8, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add9 = add i32 %18, %16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = add %1, %2
%4:i1 = ult %0, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for str_cat()

; entering Souper's runOnFunction() for str_swap()

; ModuleID = './Binary_strings.c.bc'
source_filename = "./Binary_strings.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.str_t = type { i32, i32, i8* }

@.str = private unnamed_addr constant [18 x i8] c"aaaaHaaaaaFaaaaHa\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"___.\00", align 1
@.str.2 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"%.*s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_new(i32 %len) #0 {
entry:
  %len.addr = alloca i32, align 4
  %s = alloca %struct.str_t*, align 4
  store i32 %len, i32* %len.addr, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.str_t*
  store %struct.str_t* %0, %struct.str_t** %s, align 4
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp ult i32 %1, 8
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 8, i32* %len.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i32, i32* %len.addr, align 4
  %3 = load %struct.str_t*, %struct.str_t** %s, align 4
  %alloc = getelementptr inbounds %struct.str_t, %struct.str_t* %3, i32 0, i32 1
  store i32 %2, i32* %alloc, align 4
  %4 = load i32, i32* %len.addr, align 4
  %call1 = call noalias i8* @malloc(i32 %4)
  %5 = load %struct.str_t*, %struct.str_t** %s, align 4
  %s2 = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 2
  store i8* %call1, i8** %s2, align 4
  %6 = load %struct.str_t*, %struct.str_t** %s, align 4
  %len3 = getelementptr inbounds %struct.str_t, %struct.str_t* %6, i32 0, i32 0
  store i32 0, i32* %len3, align 4
  %7 = load %struct.str_t*, %struct.str_t** %s, align 4
  ret %struct.str_t* %7
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @str_extend(%struct.str_t* %s) #0 {
entry:
  %s.addr = alloca %struct.str_t*, align 4
  %ns = alloca i32, align 4
  store %struct.str_t* %s, %struct.str_t** %s.addr, align 4
  %0 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 1
  %1 = load i32, i32* %alloc, align 4
  %mul = mul i32 %1, 2
  store i32 %mul, i32* %ns, align 4
  %2 = load i32, i32* %ns, align 4
  %3 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc1 = getelementptr inbounds %struct.str_t, %struct.str_t* %3, i32 0, i32 1
  %4 = load i32, i32* %alloc1, align 4
  %sub = sub i32 %2, %4
  %cmp = icmp ugt i32 %sub, 1024
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc2 = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 1
  %6 = load i32, i32* %alloc2, align 4
  %add = add i32 %6, 1024
  store i32 %add, i32* %ns, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s3 = getelementptr inbounds %struct.str_t, %struct.str_t* %7, i32 0, i32 2
  %8 = load i8*, i8** %s3, align 4
  %9 = load i32, i32* %ns, align 4
  %call = call i8* @realloc(i8* %8, i32 %9)
  %10 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s4 = getelementptr inbounds %struct.str_t, %struct.str_t* %10, i32 0, i32 2
  store i8* %call, i8** %s4, align 4
  %11 = load i32, i32* %ns, align 4
  %12 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc5 = getelementptr inbounds %struct.str_t, %struct.str_t* %12, i32 0, i32 1
  store i32 %11, i32* %alloc5, align 4
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @str_del(%struct.str_t* %s) #0 {
entry:
  %s.addr = alloca %struct.str_t*, align 4
  store %struct.str_t* %s, %struct.str_t** %s.addr, align 4
  %0 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s1 = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 2
  %1 = load i8*, i8** %s1, align 4
  call void @free(i8* %1)
  %2 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %3 = bitcast %struct.str_t* %2 to i8*
  call void @free(i8* %3)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @str_cmp(%struct.str_t* %l, %struct.str_t* %r) #0 {
entry:
  %retval = alloca i32, align 4
  %l.addr = alloca %struct.str_t*, align 4
  %r.addr = alloca %struct.str_t*, align 4
  %res = alloca i32, align 4
  %len = alloca i32, align 4
  store %struct.str_t* %l, %struct.str_t** %l.addr, align 4
  store %struct.str_t* %r, %struct.str_t** %r.addr, align 4
  %0 = load %struct.str_t*, %struct.str_t** %l.addr, align 4
  %len1 = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 0
  %1 = load i32, i32* %len1, align 4
  store i32 %1, i32* %len, align 4
  %2 = load i32, i32* %len, align 4
  %3 = load %struct.str_t*, %struct.str_t** %r.addr, align 4
  %len2 = getelementptr inbounds %struct.str_t, %struct.str_t* %3, i32 0, i32 0
  %4 = load i32, i32* %len2, align 4
  %cmp = icmp ugt i32 %2, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.str_t*, %struct.str_t** %r.addr, align 4
  %len3 = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 0
  %6 = load i32, i32* %len3, align 4
  store i32 %6, i32* %len, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.str_t*, %struct.str_t** %l.addr, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %7, i32 0, i32 2
  %8 = load i8*, i8** %s, align 4
  %9 = load %struct.str_t*, %struct.str_t** %r.addr, align 4
  %s4 = getelementptr inbounds %struct.str_t, %struct.str_t* %9, i32 0, i32 2
  %10 = load i8*, i8** %s4, align 4
  %11 = load i32, i32* %len, align 4
  %call = call i32 @memcmp(i8* %8, i8* %10, i32 %11)
  store i32 %call, i32* %res, align 4
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  %12 = load i32, i32* %res, align 4
  store i32 %12, i32* %retval, align 4
  br label %return

if.end6:                                          ; preds = %if.end
  %13 = load %struct.str_t*, %struct.str_t** %l.addr, align 4
  %len7 = getelementptr inbounds %struct.str_t, %struct.str_t* %13, i32 0, i32 0
  %14 = load i32, i32* %len7, align 4
  %15 = load %struct.str_t*, %struct.str_t** %r.addr, align 4
  %len8 = getelementptr inbounds %struct.str_t, %struct.str_t* %15, i32 0, i32 0
  %16 = load i32, i32* %len8, align 4
  %cmp9 = icmp ugt i32 %14, %16
  %17 = zext i1 %cmp9 to i64
  %cond = select i1 %cmp9, i32 1, i32 -1
  store i32 %cond, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end6, %if.then5
  %18 = load i32, i32* %retval, align 4
  ret i32 %18
}

declare i32 @memcmp(i8* %0, i8* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_dup(%struct.str_t* %src) #0 {
entry:
  %src.addr = alloca %struct.str_t*, align 4
  %x = alloca %struct.str_t*, align 4
  store %struct.str_t* %src, %struct.str_t** %src.addr, align 4
  %0 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 0
  %1 = load i32, i32* %len, align 4
  %call = call %struct.str_t* @str_new(i32 %1)
  store %struct.str_t* %call, %struct.str_t** %x, align 4
  %2 = load %struct.str_t*, %struct.str_t** %x, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %2, i32 0, i32 2
  %3 = load i8*, i8** %s, align 4
  %4 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %s1 = getelementptr inbounds %struct.str_t, %struct.str_t* %4, i32 0, i32 2
  %5 = load i8*, i8** %s1, align 4
  %6 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len2 = getelementptr inbounds %struct.str_t, %struct.str_t* %6, i32 0, i32 0
  %7 = load i32, i32* %len2, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %3, i8* align 1 %5, i32 %7, i1 false)
  %8 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len3 = getelementptr inbounds %struct.str_t, %struct.str_t* %8, i32 0, i32 0
  %9 = load i32, i32* %len3, align 4
  %10 = load %struct.str_t*, %struct.str_t** %x, align 4
  %len4 = getelementptr inbounds %struct.str_t, %struct.str_t* %10, i32 0, i32 0
  store i32 %9, i32* %len4, align 4
  %11 = load %struct.str_t*, %struct.str_t** %x, align 4
  ret %struct.str_t* %11
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_from_chars(i8* %t) #0 {
entry:
  %retval = alloca %struct.str_t*, align 4
  %t.addr = alloca i8*, align 4
  %l = alloca i32, align 4
  %x = alloca %struct.str_t*, align 4
  store i8* %t, i8** %t.addr, align 4
  %0 = load i8*, i8** %t.addr, align 4
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call = call %struct.str_t* @str_new(i32 0)
  store %struct.str_t* %call, %struct.str_t** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i8*, i8** %t.addr, align 4
  %call1 = call i32 @strlen(i8* %1) #4
  store i32 %call1, i32* %l, align 4
  %2 = load i32, i32* %l, align 4
  %add = add i32 %2, 1
  %call2 = call %struct.str_t* @str_new(i32 %add)
  store %struct.str_t* %call2, %struct.str_t** %x, align 4
  %3 = load i32, i32* %l, align 4
  %4 = load %struct.str_t*, %struct.str_t** %x, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %4, i32 0, i32 0
  store i32 %3, i32* %len, align 4
  %5 = load %struct.str_t*, %struct.str_t** %x, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 2
  %6 = load i8*, i8** %s, align 4
  %7 = load i8*, i8** %t.addr, align 4
  %8 = load i32, i32* %l, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %6, i8* align 1 %7, i32 %8, i1 false)
  %9 = load %struct.str_t*, %struct.str_t** %x, align 4
  store %struct.str_t* %9, %struct.str_t** %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %10 = load %struct.str_t*, %struct.str_t** %retval, align 4
  ret %struct.str_t* %10
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #3

; Function Attrs: noinline nounwind optnone
define hidden void @str_append(%struct.str_t* %s, i8 zeroext %b) #0 {
entry:
  %s.addr = alloca %struct.str_t*, align 4
  %b.addr = alloca i8, align 1
  store %struct.str_t* %s, %struct.str_t** %s.addr, align 4
  store i8 %b, i8* %b.addr, align 1
  %0 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 0
  %1 = load i32, i32* %len, align 4
  %2 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc = getelementptr inbounds %struct.str_t, %struct.str_t* %2, i32 0, i32 1
  %3 = load i32, i32* %alloc, align 4
  %cmp = icmp uge i32 %1, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  call void @str_extend(%struct.str_t* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load i8, i8* %b.addr, align 1
  %6 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s1 = getelementptr inbounds %struct.str_t, %struct.str_t* %6, i32 0, i32 2
  %7 = load i8*, i8** %s1, align 4
  %8 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len2 = getelementptr inbounds %struct.str_t, %struct.str_t* %8, i32 0, i32 0
  %9 = load i32, i32* %len2, align 4
  %inc = add i32 %9, 1
  store i32 %inc, i32* %len2, align 4
  %arrayidx = getelementptr inbounds i8, i8* %7, i32 %9
  store i8 %5, i8* %arrayidx, align 1
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_substr(%struct.str_t* %s, i32 %from, i32 %to) #0 {
entry:
  %retval = alloca %struct.str_t*, align 4
  %s.addr = alloca %struct.str_t*, align 4
  %from.addr = alloca i32, align 4
  %to.addr = alloca i32, align 4
  %x = alloca %struct.str_t*, align 4
  store %struct.str_t* %s, %struct.str_t** %s.addr, align 4
  store i32 %from, i32* %from.addr, align 4
  store i32 %to, i32* %to.addr, align 4
  %0 = load i32, i32* %to.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %1, i32 0, i32 0
  %2 = load i32, i32* %len, align 4
  store i32 %2, i32* %to.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load i32, i32* %from.addr, align 4
  %cmp = icmp slt i32 %3, 0
  br i1 %cmp, label %if.then1, label %if.end3

if.then1:                                         ; preds = %if.end
  %4 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len2 = getelementptr inbounds %struct.str_t, %struct.str_t* %4, i32 0, i32 0
  %5 = load i32, i32* %len2, align 4
  %6 = load i32, i32* %from.addr, align 4
  %add = add i32 %6, %5
  store i32 %add, i32* %from.addr, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.end
  %7 = load i32, i32* %from.addr, align 4
  %cmp4 = icmp slt i32 %7, 0
  br i1 %cmp4, label %if.then7, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end3
  %8 = load i32, i32* %from.addr, align 4
  %9 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len5 = getelementptr inbounds %struct.str_t, %struct.str_t* %9, i32 0, i32 0
  %10 = load i32, i32* %len5, align 4
  %cmp6 = icmp uge i32 %8, %10
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %lor.lhs.false, %if.end3
  store %struct.str_t* null, %struct.str_t** %retval, align 4
  br label %return

if.end8:                                          ; preds = %lor.lhs.false
  %11 = load i32, i32* %to.addr, align 4
  %12 = load i32, i32* %from.addr, align 4
  %cmp9 = icmp slt i32 %11, %12
  br i1 %cmp9, label %if.then10, label %if.end12

if.then10:                                        ; preds = %if.end8
  %13 = load i32, i32* %from.addr, align 4
  %add11 = add nsw i32 %13, 1
  store i32 %add11, i32* %to.addr, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then10, %if.end8
  %14 = load i32, i32* %to.addr, align 4
  %15 = load i32, i32* %from.addr, align 4
  %sub = sub nsw i32 %14, %15
  %call = call %struct.str_t* @str_new(i32 %sub)
  store %struct.str_t* %call, %struct.str_t** %x, align 4
  %16 = load i32, i32* %to.addr, align 4
  %17 = load i32, i32* %from.addr, align 4
  %sub13 = sub nsw i32 %16, %17
  %18 = load %struct.str_t*, %struct.str_t** %x, align 4
  %len14 = getelementptr inbounds %struct.str_t, %struct.str_t* %18, i32 0, i32 0
  store i32 %sub13, i32* %len14, align 4
  %19 = load %struct.str_t*, %struct.str_t** %x, align 4
  %s15 = getelementptr inbounds %struct.str_t, %struct.str_t* %19, i32 0, i32 2
  %20 = load i8*, i8** %s15, align 4
  %21 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s16 = getelementptr inbounds %struct.str_t, %struct.str_t* %21, i32 0, i32 2
  %22 = load i8*, i8** %s16, align 4
  %23 = load i32, i32* %from.addr, align 4
  %add.ptr = getelementptr inbounds i8, i8* %22, i32 %23
  %24 = load %struct.str_t*, %struct.str_t** %x, align 4
  %len17 = getelementptr inbounds %struct.str_t, %struct.str_t* %24, i32 0, i32 0
  %25 = load i32, i32* %len17, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %20, i8* align 1 %add.ptr, i32 %25, i1 false)
  %26 = load %struct.str_t*, %struct.str_t** %x, align 4
  store %struct.str_t* %26, %struct.str_t** %retval, align 4
  br label %return

return:                                           ; preds = %if.end12, %if.then7
  %27 = load %struct.str_t*, %struct.str_t** %retval, align 4
  ret %struct.str_t* %27
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_cat(%struct.str_t* %s, %struct.str_t* %s2) #0 {
entry:
  %s.addr = alloca %struct.str_t*, align 4
  %s2.addr = alloca %struct.str_t*, align 4
  store %struct.str_t* %s, %struct.str_t** %s.addr, align 4
  store %struct.str_t* %s2, %struct.str_t** %s2.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 1
  %1 = load i32, i32* %alloc, align 4
  %2 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %2, i32 0, i32 0
  %3 = load i32, i32* %len, align 4
  %4 = load %struct.str_t*, %struct.str_t** %s2.addr, align 4
  %len1 = getelementptr inbounds %struct.str_t, %struct.str_t* %4, i32 0, i32 0
  %5 = load i32, i32* %len1, align 4
  %add = add i32 %3, %5
  %cmp = icmp ult i32 %1, %add
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  call void @str_extend(%struct.str_t* %6)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %7 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s3 = getelementptr inbounds %struct.str_t, %struct.str_t* %7, i32 0, i32 2
  %8 = load i8*, i8** %s3, align 4
  %9 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len4 = getelementptr inbounds %struct.str_t, %struct.str_t* %9, i32 0, i32 0
  %10 = load i32, i32* %len4, align 4
  %add.ptr = getelementptr inbounds i8, i8* %8, i32 %10
  %11 = load %struct.str_t*, %struct.str_t** %s2.addr, align 4
  %s5 = getelementptr inbounds %struct.str_t, %struct.str_t* %11, i32 0, i32 2
  %12 = load i8*, i8** %s5, align 4
  %13 = load %struct.str_t*, %struct.str_t** %s2.addr, align 4
  %len6 = getelementptr inbounds %struct.str_t, %struct.str_t* %13, i32 0, i32 0
  %14 = load i32, i32* %len6, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %add.ptr, i8* align 1 %12, i32 %14, i1 false)
  %15 = load %struct.str_t*, %struct.str_t** %s2.addr, align 4
  %len7 = getelementptr inbounds %struct.str_t, %struct.str_t* %15, i32 0, i32 0
  %16 = load i32, i32* %len7, align 4
  %17 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len8 = getelementptr inbounds %struct.str_t, %struct.str_t* %17, i32 0, i32 0
  %18 = load i32, i32* %len8, align 4
  %add9 = add i32 %18, %16
  store i32 %add9, i32* %len8, align 4
  %19 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  ret %struct.str_t* %19
}

; Function Attrs: noinline nounwind optnone
define hidden void @str_swap(%struct.str_t* %a, %struct.str_t* %b) #0 {
entry:
  %a.addr = alloca %struct.str_t*, align 4
  %b.addr = alloca %struct.str_t*, align 4
  %tz = alloca i32, align 4
  %ts = alloca i8*, align 4
  store %struct.str_t* %a, %struct.str_t** %a.addr, align 4
  store %struct.str_t* %b, %struct.str_t** %b.addr, align 4
  %0 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %alloc = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 1
  %1 = load i32, i32* %alloc, align 4
  store i32 %1, i32* %tz, align 4
  %2 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %alloc1 = getelementptr inbounds %struct.str_t, %struct.str_t* %2, i32 0, i32 1
  %3 = load i32, i32* %alloc1, align 4
  %4 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %alloc2 = getelementptr inbounds %struct.str_t, %struct.str_t* %4, i32 0, i32 1
  store i32 %3, i32* %alloc2, align 4
  %5 = load i32, i32* %tz, align 4
  %6 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %alloc3 = getelementptr inbounds %struct.str_t, %struct.str_t* %6, i32 0, i32 1
  store i32 %5, i32* %alloc3, align 4
  %7 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %7, i32 0, i32 0
  %8 = load i32, i32* %len, align 4
  store i32 %8, i32* %tz, align 4
  %9 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %len4 = getelementptr inbounds %struct.str_t, %struct.str_t* %9, i32 0, i32 0
  %10 = load i32, i32* %len4, align 4
  %11 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %len5 = getelementptr inbounds %struct.str_t, %struct.str_t* %11, i32 0, i32 0
  store i32 %10, i32* %len5, align 4
  %12 = load i32, i32* %tz, align 4
  %13 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %len6 = getelementptr inbounds %struct.str_t, %struct.str_t* %13, i32 0, i32 0
  store i32 %12, i32* %len6, align 4
  %14 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %14, i32 0, i32 2
  %15 = load i8*, i8** %s, align 4
  store i8* %15, i8** %ts, align 4
  %16 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %s7 = getelementptr inbounds %struct.str_t, %struct.str_t* %16, i32 0, i32 2
  %17 = load i8*, i8** %s7, align 4
  %18 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %s8 = getelementptr inbounds %struct.str_t, %struct.str_t* %18, i32 0, i32 2
  store i8* %17, i8** %s8, align 4
  %19 = load i8*, i8** %ts, align 4
  %20 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %s9 = getelementptr inbounds %struct.str_t, %struct.str_t* %20, i32 0, i32 2
  store i8* %19, i8** %s9, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_subst(%struct.str_t* %tgt, %struct.str_t* %pat, %struct.str_t* %repl) #0 {
entry:
  %tgt.addr = alloca %struct.str_t*, align 4
  %pat.addr = alloca %struct.str_t*, align 4
  %repl.addr = alloca %struct.str_t*, align 4
  %tmp = alloca %struct.str_t*, align 4
  %i = alloca i32, align 4
  store %struct.str_t* %tgt, %struct.str_t** %tgt.addr, align 4
  store %struct.str_t* %pat, %struct.str_t** %pat.addr, align 4
  store %struct.str_t* %repl, %struct.str_t** %repl.addr, align 4
  %call = call %struct.str_t* @str_new(i32 0)
  store %struct.str_t* %call, %struct.str_t** %tmp, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %if.end15, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.str_t*, %struct.str_t** %pat.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %1, i32 0, i32 0
  %2 = load i32, i32* %len, align 4
  %add = add i32 %0, %2
  %3 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %len1 = getelementptr inbounds %struct.str_t, %struct.str_t* %3, i32 0, i32 0
  %4 = load i32, i32* %len1, align 4
  %cmp = icmp ule i32 %add, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 2
  %6 = load i8*, i8** %s, align 4
  %7 = load i32, i32* %i, align 4
  %add.ptr = getelementptr inbounds i8, i8* %6, i32 %7
  %8 = load %struct.str_t*, %struct.str_t** %pat.addr, align 4
  %s2 = getelementptr inbounds %struct.str_t, %struct.str_t* %8, i32 0, i32 2
  %9 = load i8*, i8** %s2, align 4
  %10 = load %struct.str_t*, %struct.str_t** %pat.addr, align 4
  %len3 = getelementptr inbounds %struct.str_t, %struct.str_t* %10, i32 0, i32 0
  %11 = load i32, i32* %len3, align 4
  %call4 = call i32 @memcmp(i8* %add.ptr, i8* %9, i32 %11)
  %tobool = icmp ne i32 %call4, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %12 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  %13 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %s5 = getelementptr inbounds %struct.str_t, %struct.str_t* %13, i32 0, i32 2
  %14 = load i8*, i8** %s5, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %14, i32 %15
  %16 = load i8, i8* %arrayidx, align 1
  call void @str_append(%struct.str_t* %12, i8 zeroext %16)
  %17 = load i32, i32* %i, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %i, align 4
  br label %if.end15

if.else:                                          ; preds = %for.body
  %18 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  %19 = load %struct.str_t*, %struct.str_t** %repl.addr, align 4
  %call6 = call %struct.str_t* @str_cat(%struct.str_t* %18, %struct.str_t* %19)
  %20 = load %struct.str_t*, %struct.str_t** %pat.addr, align 4
  %len7 = getelementptr inbounds %struct.str_t, %struct.str_t* %20, i32 0, i32 0
  %21 = load i32, i32* %len7, align 4
  %22 = load i32, i32* %i, align 4
  %add8 = add i32 %22, %21
  store i32 %add8, i32* %i, align 4
  %23 = load %struct.str_t*, %struct.str_t** %pat.addr, align 4
  %len9 = getelementptr inbounds %struct.str_t, %struct.str_t* %23, i32 0, i32 0
  %24 = load i32, i32* %len9, align 4
  %tobool10 = icmp ne i32 %24, 0
  br i1 %tobool10, label %if.end, label %if.then11

if.then11:                                        ; preds = %if.else
  %25 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  %26 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %s12 = getelementptr inbounds %struct.str_t, %struct.str_t* %26, i32 0, i32 2
  %27 = load i8*, i8** %s12, align 4
  %28 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %28, 1
  store i32 %inc13, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds i8, i8* %27, i32 %28
  %29 = load i8, i8* %arrayidx14, align 1
  call void @str_append(%struct.str_t* %25, i8 zeroext %29)
  br label %if.end

if.end:                                           ; preds = %if.then11, %if.else
  br label %if.end15

if.end15:                                         ; preds = %if.end, %if.then
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end
  %30 = load i32, i32* %i, align 4
  %31 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %len16 = getelementptr inbounds %struct.str_t, %struct.str_t* %31, i32 0, i32 0
  %32 = load i32, i32* %len16, align 4
  %cmp17 = icmp ult i32 %30, %32
  br i1 %cmp17, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %33 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  %34 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %s18 = getelementptr inbounds %struct.str_t, %struct.str_t* %34, i32 0, i32 2
  %35 = load i8*, i8** %s18, align 4
  %36 = load i32, i32* %i, align 4
  %inc19 = add nsw i32 %36, 1
  store i32 %inc19, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds i8, i8* %35, i32 %36
  %37 = load i8, i8* %arrayidx20, align 1
  call void @str_append(%struct.str_t* %33, i8 zeroext %37)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %38 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  %39 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  call void @str_swap(%struct.str_t* %38, %struct.str_t* %39)
  %40 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  call void @str_del(%struct.str_t* %40)
  %41 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  ret %struct.str_t* %41
}

; Function Attrs: noinline nounwind optnone
define hidden void @str_set(%struct.str_t* %dest, %struct.str_t* %src) #0 {
entry:
  %dest.addr = alloca %struct.str_t*, align 4
  %src.addr = alloca %struct.str_t*, align 4
  store %struct.str_t* %dest, %struct.str_t** %dest.addr, align 4
  store %struct.str_t* %src, %struct.str_t** %src.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct.str_t*, %struct.str_t** %dest.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 0
  %1 = load i32, i32* %len, align 4
  %2 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len1 = getelementptr inbounds %struct.str_t, %struct.str_t* %2, i32 0, i32 0
  %3 = load i32, i32* %len1, align 4
  %cmp = icmp ult i32 %1, %3
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load %struct.str_t*, %struct.str_t** %dest.addr, align 4
  call void @str_extend(%struct.str_t* %4)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %5 = load %struct.str_t*, %struct.str_t** %dest.addr, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 2
  %6 = load i8*, i8** %s, align 4
  %7 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %s2 = getelementptr inbounds %struct.str_t, %struct.str_t* %7, i32 0, i32 2
  %8 = load i8*, i8** %s2, align 4
  %9 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len3 = getelementptr inbounds %struct.str_t, %struct.str_t* %9, i32 0, i32 0
  %10 = load i32, i32* %len3, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %6, i8* align 1 %8, i32 %10, i1 false)
  %11 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len4 = getelementptr inbounds %struct.str_t, %struct.str_t* %11, i32 0, i32 0
  %12 = load i32, i32* %len4, align 4
  %13 = load %struct.str_t*, %struct.str_t** %dest.addr, align 4
  %len5 = getelementptr inbounds %struct.str_t, %struct.str_t* %13, i32 0, i32 0
  store i32 %12, i32* %len5, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %s = alloca %struct.str_t*, align 4
  %s2 = alloca %struct.str_t*, align 4
  %s3 = alloca %struct.str_t*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.str_t* @str_from_chars(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i32 0, i32 0))
  store %struct.str_t* %call, %struct.str_t** %s, align 4
  %call1 = call %struct.str_t* @str_from_chars(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0))
  store %struct.str_t* %call1, %struct.str_t** %s2, align 4
  %call2 = call %struct.str_t* @str_from_chars(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2, i32 0, i32 0))
  store %struct.str_t* %call2, %struct.str_t** %s3, align 4
  %0 = load %struct.str_t*, %struct.str_t** %s, align 4
  %1 = load %struct.str_t*, %struct.str_t** %s3, align 4
  %2 = load %struct.str_t*, %struct.str_t** %s2, align 4
  %call3 = call %struct.str_t* @str_subst(%struct.str_t* %0, %struct.str_t* %1, %struct.str_t* %2)
  %3 = load %struct.str_t*, %struct.str_t** %s, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %3, i32 0, i32 0
  %4 = load i32, i32* %len, align 4
  %5 = load %struct.str_t*, %struct.str_t** %s, align 4
  %s4 = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 2
  %6 = load i8*, i8** %s4, align 4
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0), i32 %4, i8* %6)
  %7 = load %struct.str_t*, %struct.str_t** %s, align 4
  call void @str_del(%struct.str_t* %7)
  %8 = load %struct.str_t*, %struct.str_t** %s2, align 4
  call void @str_del(%struct.str_t* %8)
  %9 = load %struct.str_t*, %struct.str_t** %s3, align 4
  call void @str_del(%struct.str_t* %9)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %alloc, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %alloc1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %tz, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %len4, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %tz, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for str_swap()

; entering Souper's runOnFunction() for str_subst()

; ModuleID = './Binary_strings.c.bc'
source_filename = "./Binary_strings.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.str_t = type { i32, i32, i8* }

@.str = private unnamed_addr constant [18 x i8] c"aaaaHaaaaaFaaaaHa\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"___.\00", align 1
@.str.2 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"%.*s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_new(i32 %len) #0 {
entry:
  %len.addr = alloca i32, align 4
  %s = alloca %struct.str_t*, align 4
  store i32 %len, i32* %len.addr, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.str_t*
  store %struct.str_t* %0, %struct.str_t** %s, align 4
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp ult i32 %1, 8
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 8, i32* %len.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i32, i32* %len.addr, align 4
  %3 = load %struct.str_t*, %struct.str_t** %s, align 4
  %alloc = getelementptr inbounds %struct.str_t, %struct.str_t* %3, i32 0, i32 1
  store i32 %2, i32* %alloc, align 4
  %4 = load i32, i32* %len.addr, align 4
  %call1 = call noalias i8* @malloc(i32 %4)
  %5 = load %struct.str_t*, %struct.str_t** %s, align 4
  %s2 = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 2
  store i8* %call1, i8** %s2, align 4
  %6 = load %struct.str_t*, %struct.str_t** %s, align 4
  %len3 = getelementptr inbounds %struct.str_t, %struct.str_t* %6, i32 0, i32 0
  store i32 0, i32* %len3, align 4
  %7 = load %struct.str_t*, %struct.str_t** %s, align 4
  ret %struct.str_t* %7
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @str_extend(%struct.str_t* %s) #0 {
entry:
  %s.addr = alloca %struct.str_t*, align 4
  %ns = alloca i32, align 4
  store %struct.str_t* %s, %struct.str_t** %s.addr, align 4
  %0 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 1
  %1 = load i32, i32* %alloc, align 4
  %mul = mul i32 %1, 2
  store i32 %mul, i32* %ns, align 4
  %2 = load i32, i32* %ns, align 4
  %3 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc1 = getelementptr inbounds %struct.str_t, %struct.str_t* %3, i32 0, i32 1
  %4 = load i32, i32* %alloc1, align 4
  %sub = sub i32 %2, %4
  %cmp = icmp ugt i32 %sub, 1024
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc2 = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 1
  %6 = load i32, i32* %alloc2, align 4
  %add = add i32 %6, 1024
  store i32 %add, i32* %ns, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s3 = getelementptr inbounds %struct.str_t, %struct.str_t* %7, i32 0, i32 2
  %8 = load i8*, i8** %s3, align 4
  %9 = load i32, i32* %ns, align 4
  %call = call i8* @realloc(i8* %8, i32 %9)
  %10 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s4 = getelementptr inbounds %struct.str_t, %struct.str_t* %10, i32 0, i32 2
  store i8* %call, i8** %s4, align 4
  %11 = load i32, i32* %ns, align 4
  %12 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc5 = getelementptr inbounds %struct.str_t, %struct.str_t* %12, i32 0, i32 1
  store i32 %11, i32* %alloc5, align 4
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @str_del(%struct.str_t* %s) #0 {
entry:
  %s.addr = alloca %struct.str_t*, align 4
  store %struct.str_t* %s, %struct.str_t** %s.addr, align 4
  %0 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s1 = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 2
  %1 = load i8*, i8** %s1, align 4
  call void @free(i8* %1)
  %2 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %3 = bitcast %struct.str_t* %2 to i8*
  call void @free(i8* %3)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @str_cmp(%struct.str_t* %l, %struct.str_t* %r) #0 {
entry:
  %retval = alloca i32, align 4
  %l.addr = alloca %struct.str_t*, align 4
  %r.addr = alloca %struct.str_t*, align 4
  %res = alloca i32, align 4
  %len = alloca i32, align 4
  store %struct.str_t* %l, %struct.str_t** %l.addr, align 4
  store %struct.str_t* %r, %struct.str_t** %r.addr, align 4
  %0 = load %struct.str_t*, %struct.str_t** %l.addr, align 4
  %len1 = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 0
  %1 = load i32, i32* %len1, align 4
  store i32 %1, i32* %len, align 4
  %2 = load i32, i32* %len, align 4
  %3 = load %struct.str_t*, %struct.str_t** %r.addr, align 4
  %len2 = getelementptr inbounds %struct.str_t, %struct.str_t* %3, i32 0, i32 0
  %4 = load i32, i32* %len2, align 4
  %cmp = icmp ugt i32 %2, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.str_t*, %struct.str_t** %r.addr, align 4
  %len3 = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 0
  %6 = load i32, i32* %len3, align 4
  store i32 %6, i32* %len, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.str_t*, %struct.str_t** %l.addr, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %7, i32 0, i32 2
  %8 = load i8*, i8** %s, align 4
  %9 = load %struct.str_t*, %struct.str_t** %r.addr, align 4
  %s4 = getelementptr inbounds %struct.str_t, %struct.str_t* %9, i32 0, i32 2
  %10 = load i8*, i8** %s4, align 4
  %11 = load i32, i32* %len, align 4
  %call = call i32 @memcmp(i8* %8, i8* %10, i32 %11)
  store i32 %call, i32* %res, align 4
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  %12 = load i32, i32* %res, align 4
  store i32 %12, i32* %retval, align 4
  br label %return

if.end6:                                          ; preds = %if.end
  %13 = load %struct.str_t*, %struct.str_t** %l.addr, align 4
  %len7 = getelementptr inbounds %struct.str_t, %struct.str_t* %13, i32 0, i32 0
  %14 = load i32, i32* %len7, align 4
  %15 = load %struct.str_t*, %struct.str_t** %r.addr, align 4
  %len8 = getelementptr inbounds %struct.str_t, %struct.str_t* %15, i32 0, i32 0
  %16 = load i32, i32* %len8, align 4
  %cmp9 = icmp ugt i32 %14, %16
  %17 = zext i1 %cmp9 to i64
  %cond = select i1 %cmp9, i32 1, i32 -1
  store i32 %cond, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end6, %if.then5
  %18 = load i32, i32* %retval, align 4
  ret i32 %18
}

declare i32 @memcmp(i8* %0, i8* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_dup(%struct.str_t* %src) #0 {
entry:
  %src.addr = alloca %struct.str_t*, align 4
  %x = alloca %struct.str_t*, align 4
  store %struct.str_t* %src, %struct.str_t** %src.addr, align 4
  %0 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 0
  %1 = load i32, i32* %len, align 4
  %call = call %struct.str_t* @str_new(i32 %1)
  store %struct.str_t* %call, %struct.str_t** %x, align 4
  %2 = load %struct.str_t*, %struct.str_t** %x, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %2, i32 0, i32 2
  %3 = load i8*, i8** %s, align 4
  %4 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %s1 = getelementptr inbounds %struct.str_t, %struct.str_t* %4, i32 0, i32 2
  %5 = load i8*, i8** %s1, align 4
  %6 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len2 = getelementptr inbounds %struct.str_t, %struct.str_t* %6, i32 0, i32 0
  %7 = load i32, i32* %len2, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %3, i8* align 1 %5, i32 %7, i1 false)
  %8 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len3 = getelementptr inbounds %struct.str_t, %struct.str_t* %8, i32 0, i32 0
  %9 = load i32, i32* %len3, align 4
  %10 = load %struct.str_t*, %struct.str_t** %x, align 4
  %len4 = getelementptr inbounds %struct.str_t, %struct.str_t* %10, i32 0, i32 0
  store i32 %9, i32* %len4, align 4
  %11 = load %struct.str_t*, %struct.str_t** %x, align 4
  ret %struct.str_t* %11
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_from_chars(i8* %t) #0 {
entry:
  %retval = alloca %struct.str_t*, align 4
  %t.addr = alloca i8*, align 4
  %l = alloca i32, align 4
  %x = alloca %struct.str_t*, align 4
  store i8* %t, i8** %t.addr, align 4
  %0 = load i8*, i8** %t.addr, align 4
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call = call %struct.str_t* @str_new(i32 0)
  store %struct.str_t* %call, %struct.str_t** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i8*, i8** %t.addr, align 4
  %call1 = call i32 @strlen(i8* %1) #4
  store i32 %call1, i32* %l, align 4
  %2 = load i32, i32* %l, align 4
  %add = add i32 %2, 1
  %call2 = call %struct.str_t* @str_new(i32 %add)
  store %struct.str_t* %call2, %struct.str_t** %x, align 4
  %3 = load i32, i32* %l, align 4
  %4 = load %struct.str_t*, %struct.str_t** %x, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %4, i32 0, i32 0
  store i32 %3, i32* %len, align 4
  %5 = load %struct.str_t*, %struct.str_t** %x, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 2
  %6 = load i8*, i8** %s, align 4
  %7 = load i8*, i8** %t.addr, align 4
  %8 = load i32, i32* %l, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %6, i8* align 1 %7, i32 %8, i1 false)
  %9 = load %struct.str_t*, %struct.str_t** %x, align 4
  store %struct.str_t* %9, %struct.str_t** %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %10 = load %struct.str_t*, %struct.str_t** %retval, align 4
  ret %struct.str_t* %10
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #3

; Function Attrs: noinline nounwind optnone
define hidden void @str_append(%struct.str_t* %s, i8 zeroext %b) #0 {
entry:
  %s.addr = alloca %struct.str_t*, align 4
  %b.addr = alloca i8, align 1
  store %struct.str_t* %s, %struct.str_t** %s.addr, align 4
  store i8 %b, i8* %b.addr, align 1
  %0 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 0
  %1 = load i32, i32* %len, align 4
  %2 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc = getelementptr inbounds %struct.str_t, %struct.str_t* %2, i32 0, i32 1
  %3 = load i32, i32* %alloc, align 4
  %cmp = icmp uge i32 %1, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  call void @str_extend(%struct.str_t* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load i8, i8* %b.addr, align 1
  %6 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s1 = getelementptr inbounds %struct.str_t, %struct.str_t* %6, i32 0, i32 2
  %7 = load i8*, i8** %s1, align 4
  %8 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len2 = getelementptr inbounds %struct.str_t, %struct.str_t* %8, i32 0, i32 0
  %9 = load i32, i32* %len2, align 4
  %inc = add i32 %9, 1
  store i32 %inc, i32* %len2, align 4
  %arrayidx = getelementptr inbounds i8, i8* %7, i32 %9
  store i8 %5, i8* %arrayidx, align 1
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_substr(%struct.str_t* %s, i32 %from, i32 %to) #0 {
entry:
  %retval = alloca %struct.str_t*, align 4
  %s.addr = alloca %struct.str_t*, align 4
  %from.addr = alloca i32, align 4
  %to.addr = alloca i32, align 4
  %x = alloca %struct.str_t*, align 4
  store %struct.str_t* %s, %struct.str_t** %s.addr, align 4
  store i32 %from, i32* %from.addr, align 4
  store i32 %to, i32* %to.addr, align 4
  %0 = load i32, i32* %to.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %1, i32 0, i32 0
  %2 = load i32, i32* %len, align 4
  store i32 %2, i32* %to.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load i32, i32* %from.addr, align 4
  %cmp = icmp slt i32 %3, 0
  br i1 %cmp, label %if.then1, label %if.end3

if.then1:                                         ; preds = %if.end
  %4 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len2 = getelementptr inbounds %struct.str_t, %struct.str_t* %4, i32 0, i32 0
  %5 = load i32, i32* %len2, align 4
  %6 = load i32, i32* %from.addr, align 4
  %add = add i32 %6, %5
  store i32 %add, i32* %from.addr, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.end
  %7 = load i32, i32* %from.addr, align 4
  %cmp4 = icmp slt i32 %7, 0
  br i1 %cmp4, label %if.then7, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end3
  %8 = load i32, i32* %from.addr, align 4
  %9 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len5 = getelementptr inbounds %struct.str_t, %struct.str_t* %9, i32 0, i32 0
  %10 = load i32, i32* %len5, align 4
  %cmp6 = icmp uge i32 %8, %10
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %lor.lhs.false, %if.end3
  store %struct.str_t* null, %struct.str_t** %retval, align 4
  br label %return

if.end8:                                          ; preds = %lor.lhs.false
  %11 = load i32, i32* %to.addr, align 4
  %12 = load i32, i32* %from.addr, align 4
  %cmp9 = icmp slt i32 %11, %12
  br i1 %cmp9, label %if.then10, label %if.end12

if.then10:                                        ; preds = %if.end8
  %13 = load i32, i32* %from.addr, align 4
  %add11 = add nsw i32 %13, 1
  store i32 %add11, i32* %to.addr, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then10, %if.end8
  %14 = load i32, i32* %to.addr, align 4
  %15 = load i32, i32* %from.addr, align 4
  %sub = sub nsw i32 %14, %15
  %call = call %struct.str_t* @str_new(i32 %sub)
  store %struct.str_t* %call, %struct.str_t** %x, align 4
  %16 = load i32, i32* %to.addr, align 4
  %17 = load i32, i32* %from.addr, align 4
  %sub13 = sub nsw i32 %16, %17
  %18 = load %struct.str_t*, %struct.str_t** %x, align 4
  %len14 = getelementptr inbounds %struct.str_t, %struct.str_t* %18, i32 0, i32 0
  store i32 %sub13, i32* %len14, align 4
  %19 = load %struct.str_t*, %struct.str_t** %x, align 4
  %s15 = getelementptr inbounds %struct.str_t, %struct.str_t* %19, i32 0, i32 2
  %20 = load i8*, i8** %s15, align 4
  %21 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s16 = getelementptr inbounds %struct.str_t, %struct.str_t* %21, i32 0, i32 2
  %22 = load i8*, i8** %s16, align 4
  %23 = load i32, i32* %from.addr, align 4
  %add.ptr = getelementptr inbounds i8, i8* %22, i32 %23
  %24 = load %struct.str_t*, %struct.str_t** %x, align 4
  %len17 = getelementptr inbounds %struct.str_t, %struct.str_t* %24, i32 0, i32 0
  %25 = load i32, i32* %len17, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %20, i8* align 1 %add.ptr, i32 %25, i1 false)
  %26 = load %struct.str_t*, %struct.str_t** %x, align 4
  store %struct.str_t* %26, %struct.str_t** %retval, align 4
  br label %return

return:                                           ; preds = %if.end12, %if.then7
  %27 = load %struct.str_t*, %struct.str_t** %retval, align 4
  ret %struct.str_t* %27
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_cat(%struct.str_t* %s, %struct.str_t* %s2) #0 {
entry:
  %s.addr = alloca %struct.str_t*, align 4
  %s2.addr = alloca %struct.str_t*, align 4
  store %struct.str_t* %s, %struct.str_t** %s.addr, align 4
  store %struct.str_t* %s2, %struct.str_t** %s2.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 1
  %1 = load i32, i32* %alloc, align 4
  %2 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %2, i32 0, i32 0
  %3 = load i32, i32* %len, align 4
  %4 = load %struct.str_t*, %struct.str_t** %s2.addr, align 4
  %len1 = getelementptr inbounds %struct.str_t, %struct.str_t* %4, i32 0, i32 0
  %5 = load i32, i32* %len1, align 4
  %add = add i32 %3, %5
  %cmp = icmp ult i32 %1, %add
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  call void @str_extend(%struct.str_t* %6)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %7 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s3 = getelementptr inbounds %struct.str_t, %struct.str_t* %7, i32 0, i32 2
  %8 = load i8*, i8** %s3, align 4
  %9 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len4 = getelementptr inbounds %struct.str_t, %struct.str_t* %9, i32 0, i32 0
  %10 = load i32, i32* %len4, align 4
  %add.ptr = getelementptr inbounds i8, i8* %8, i32 %10
  %11 = load %struct.str_t*, %struct.str_t** %s2.addr, align 4
  %s5 = getelementptr inbounds %struct.str_t, %struct.str_t* %11, i32 0, i32 2
  %12 = load i8*, i8** %s5, align 4
  %13 = load %struct.str_t*, %struct.str_t** %s2.addr, align 4
  %len6 = getelementptr inbounds %struct.str_t, %struct.str_t* %13, i32 0, i32 0
  %14 = load i32, i32* %len6, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %add.ptr, i8* align 1 %12, i32 %14, i1 false)
  %15 = load %struct.str_t*, %struct.str_t** %s2.addr, align 4
  %len7 = getelementptr inbounds %struct.str_t, %struct.str_t* %15, i32 0, i32 0
  %16 = load i32, i32* %len7, align 4
  %17 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len8 = getelementptr inbounds %struct.str_t, %struct.str_t* %17, i32 0, i32 0
  %18 = load i32, i32* %len8, align 4
  %add9 = add i32 %18, %16
  store i32 %add9, i32* %len8, align 4
  %19 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  ret %struct.str_t* %19
}

; Function Attrs: noinline nounwind optnone
define hidden void @str_swap(%struct.str_t* %a, %struct.str_t* %b) #0 {
entry:
  %a.addr = alloca %struct.str_t*, align 4
  %b.addr = alloca %struct.str_t*, align 4
  %tz = alloca i32, align 4
  %ts = alloca i8*, align 4
  store %struct.str_t* %a, %struct.str_t** %a.addr, align 4
  store %struct.str_t* %b, %struct.str_t** %b.addr, align 4
  %0 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %alloc = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 1
  %1 = load i32, i32* %alloc, align 4
  store i32 %1, i32* %tz, align 4
  %2 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %alloc1 = getelementptr inbounds %struct.str_t, %struct.str_t* %2, i32 0, i32 1
  %3 = load i32, i32* %alloc1, align 4
  %4 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %alloc2 = getelementptr inbounds %struct.str_t, %struct.str_t* %4, i32 0, i32 1
  store i32 %3, i32* %alloc2, align 4
  %5 = load i32, i32* %tz, align 4
  %6 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %alloc3 = getelementptr inbounds %struct.str_t, %struct.str_t* %6, i32 0, i32 1
  store i32 %5, i32* %alloc3, align 4
  %7 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %7, i32 0, i32 0
  %8 = load i32, i32* %len, align 4
  store i32 %8, i32* %tz, align 4
  %9 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %len4 = getelementptr inbounds %struct.str_t, %struct.str_t* %9, i32 0, i32 0
  %10 = load i32, i32* %len4, align 4
  %11 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %len5 = getelementptr inbounds %struct.str_t, %struct.str_t* %11, i32 0, i32 0
  store i32 %10, i32* %len5, align 4
  %12 = load i32, i32* %tz, align 4
  %13 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %len6 = getelementptr inbounds %struct.str_t, %struct.str_t* %13, i32 0, i32 0
  store i32 %12, i32* %len6, align 4
  %14 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %14, i32 0, i32 2
  %15 = load i8*, i8** %s, align 4
  store i8* %15, i8** %ts, align 4
  %16 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %s7 = getelementptr inbounds %struct.str_t, %struct.str_t* %16, i32 0, i32 2
  %17 = load i8*, i8** %s7, align 4
  %18 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %s8 = getelementptr inbounds %struct.str_t, %struct.str_t* %18, i32 0, i32 2
  store i8* %17, i8** %s8, align 4
  %19 = load i8*, i8** %ts, align 4
  %20 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %s9 = getelementptr inbounds %struct.str_t, %struct.str_t* %20, i32 0, i32 2
  store i8* %19, i8** %s9, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_subst(%struct.str_t* %tgt, %struct.str_t* %pat, %struct.str_t* %repl) #0 {
entry:
  %tgt.addr = alloca %struct.str_t*, align 4
  %pat.addr = alloca %struct.str_t*, align 4
  %repl.addr = alloca %struct.str_t*, align 4
  %tmp = alloca %struct.str_t*, align 4
  %i = alloca i32, align 4
  store %struct.str_t* %tgt, %struct.str_t** %tgt.addr, align 4
  store %struct.str_t* %pat, %struct.str_t** %pat.addr, align 4
  store %struct.str_t* %repl, %struct.str_t** %repl.addr, align 4
  %call = call %struct.str_t* @str_new(i32 0)
  store %struct.str_t* %call, %struct.str_t** %tmp, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %if.end15, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.str_t*, %struct.str_t** %pat.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %1, i32 0, i32 0
  %2 = load i32, i32* %len, align 4
  %add = add i32 %0, %2
  %3 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %len1 = getelementptr inbounds %struct.str_t, %struct.str_t* %3, i32 0, i32 0
  %4 = load i32, i32* %len1, align 4
  %cmp = icmp ule i32 %add, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 2
  %6 = load i8*, i8** %s, align 4
  %7 = load i32, i32* %i, align 4
  %add.ptr = getelementptr inbounds i8, i8* %6, i32 %7
  %8 = load %struct.str_t*, %struct.str_t** %pat.addr, align 4
  %s2 = getelementptr inbounds %struct.str_t, %struct.str_t* %8, i32 0, i32 2
  %9 = load i8*, i8** %s2, align 4
  %10 = load %struct.str_t*, %struct.str_t** %pat.addr, align 4
  %len3 = getelementptr inbounds %struct.str_t, %struct.str_t* %10, i32 0, i32 0
  %11 = load i32, i32* %len3, align 4
  %call4 = call i32 @memcmp(i8* %add.ptr, i8* %9, i32 %11)
  %tobool = icmp ne i32 %call4, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %12 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  %13 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %s5 = getelementptr inbounds %struct.str_t, %struct.str_t* %13, i32 0, i32 2
  %14 = load i8*, i8** %s5, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %14, i32 %15
  %16 = load i8, i8* %arrayidx, align 1
  call void @str_append(%struct.str_t* %12, i8 zeroext %16)
  %17 = load i32, i32* %i, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %i, align 4
  br label %if.end15

if.else:                                          ; preds = %for.body
  %18 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  %19 = load %struct.str_t*, %struct.str_t** %repl.addr, align 4
  %call6 = call %struct.str_t* @str_cat(%struct.str_t* %18, %struct.str_t* %19)
  %20 = load %struct.str_t*, %struct.str_t** %pat.addr, align 4
  %len7 = getelementptr inbounds %struct.str_t, %struct.str_t* %20, i32 0, i32 0
  %21 = load i32, i32* %len7, align 4
  %22 = load i32, i32* %i, align 4
  %add8 = add i32 %22, %21
  store i32 %add8, i32* %i, align 4
  %23 = load %struct.str_t*, %struct.str_t** %pat.addr, align 4
  %len9 = getelementptr inbounds %struct.str_t, %struct.str_t* %23, i32 0, i32 0
  %24 = load i32, i32* %len9, align 4
  %tobool10 = icmp ne i32 %24, 0
  br i1 %tobool10, label %if.end, label %if.then11

if.then11:                                        ; preds = %if.else
  %25 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  %26 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %s12 = getelementptr inbounds %struct.str_t, %struct.str_t* %26, i32 0, i32 2
  %27 = load i8*, i8** %s12, align 4
  %28 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %28, 1
  store i32 %inc13, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds i8, i8* %27, i32 %28
  %29 = load i8, i8* %arrayidx14, align 1
  call void @str_append(%struct.str_t* %25, i8 zeroext %29)
  br label %if.end

if.end:                                           ; preds = %if.then11, %if.else
  br label %if.end15

if.end15:                                         ; preds = %if.end, %if.then
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end
  %30 = load i32, i32* %i, align 4
  %31 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %len16 = getelementptr inbounds %struct.str_t, %struct.str_t* %31, i32 0, i32 0
  %32 = load i32, i32* %len16, align 4
  %cmp17 = icmp ult i32 %30, %32
  br i1 %cmp17, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %33 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  %34 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %s18 = getelementptr inbounds %struct.str_t, %struct.str_t* %34, i32 0, i32 2
  %35 = load i8*, i8** %s18, align 4
  %36 = load i32, i32* %i, align 4
  %inc19 = add nsw i32 %36, 1
  store i32 %inc19, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds i8, i8* %35, i32 %36
  %37 = load i8, i8* %arrayidx20, align 1
  call void @str_append(%struct.str_t* %33, i8 zeroext %37)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %38 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  %39 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  call void @str_swap(%struct.str_t* %38, %struct.str_t* %39)
  %40 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  call void @str_del(%struct.str_t* %40)
  %41 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  ret %struct.str_t* %41
}

; Function Attrs: noinline nounwind optnone
define hidden void @str_set(%struct.str_t* %dest, %struct.str_t* %src) #0 {
entry:
  %dest.addr = alloca %struct.str_t*, align 4
  %src.addr = alloca %struct.str_t*, align 4
  store %struct.str_t* %dest, %struct.str_t** %dest.addr, align 4
  store %struct.str_t* %src, %struct.str_t** %src.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct.str_t*, %struct.str_t** %dest.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 0
  %1 = load i32, i32* %len, align 4
  %2 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len1 = getelementptr inbounds %struct.str_t, %struct.str_t* %2, i32 0, i32 0
  %3 = load i32, i32* %len1, align 4
  %cmp = icmp ult i32 %1, %3
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load %struct.str_t*, %struct.str_t** %dest.addr, align 4
  call void @str_extend(%struct.str_t* %4)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %5 = load %struct.str_t*, %struct.str_t** %dest.addr, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 2
  %6 = load i8*, i8** %s, align 4
  %7 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %s2 = getelementptr inbounds %struct.str_t, %struct.str_t* %7, i32 0, i32 2
  %8 = load i8*, i8** %s2, align 4
  %9 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len3 = getelementptr inbounds %struct.str_t, %struct.str_t* %9, i32 0, i32 0
  %10 = load i32, i32* %len3, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %6, i8* align 1 %8, i32 %10, i1 false)
  %11 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len4 = getelementptr inbounds %struct.str_t, %struct.str_t* %11, i32 0, i32 0
  %12 = load i32, i32* %len4, align 4
  %13 = load %struct.str_t*, %struct.str_t** %dest.addr, align 4
  %len5 = getelementptr inbounds %struct.str_t, %struct.str_t* %13, i32 0, i32 0
  store i32 %12, i32* %len5, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %s = alloca %struct.str_t*, align 4
  %s2 = alloca %struct.str_t*, align 4
  %s3 = alloca %struct.str_t*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.str_t* @str_from_chars(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i32 0, i32 0))
  store %struct.str_t* %call, %struct.str_t** %s, align 4
  %call1 = call %struct.str_t* @str_from_chars(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0))
  store %struct.str_t* %call1, %struct.str_t** %s2, align 4
  %call2 = call %struct.str_t* @str_from_chars(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2, i32 0, i32 0))
  store %struct.str_t* %call2, %struct.str_t** %s3, align 4
  %0 = load %struct.str_t*, %struct.str_t** %s, align 4
  %1 = load %struct.str_t*, %struct.str_t** %s3, align 4
  %2 = load %struct.str_t*, %struct.str_t** %s2, align 4
  %call3 = call %struct.str_t* @str_subst(%struct.str_t* %0, %struct.str_t* %1, %struct.str_t* %2)
  %3 = load %struct.str_t*, %struct.str_t** %s, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %3, i32 0, i32 0
  %4 = load i32, i32* %len, align 4
  %5 = load %struct.str_t*, %struct.str_t** %s, align 4
  %s4 = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 2
  %6 = load i8*, i8** %s4, align 4
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0), i32 %4, i8* %6)
  %7 = load %struct.str_t*, %struct.str_t** %s, align 4
  call void @str_del(%struct.str_t* %7)
  %8 = load %struct.str_t*, %struct.str_t** %s2, align 4
  call void @str_del(%struct.str_t* %8)
  %9 = load %struct.str_t*, %struct.str_t** %s3, align 4
  call void @str_del(%struct.str_t* %9)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add i32 %0, %2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %len1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ule i32 %add, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i1 = ule %2, %3
infer %4

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %len3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call4 = call i32 @memcmp(i8* %add.ptr, i8* %9, i32 %11)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %call4, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i8, i8* %arrayidx, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %17, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %len7, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add8 = add i32 %22, %21
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %len9, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool10 = icmp ne i32 %24, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc13 = add nsw i32 %28, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %29 = load i8, i8* %arrayidx14, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %len16, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp17 = icmp ult i32 %30, %32
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc19 = add nsw i32 %36, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %37 = load i8, i8* %arrayidx20, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
%3:i32 = var
%4:i1 = ule %2, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for str_subst()

; entering Souper's runOnFunction() for str_set()

; ModuleID = './Binary_strings.c.bc'
source_filename = "./Binary_strings.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.str_t = type { i32, i32, i8* }

@.str = private unnamed_addr constant [18 x i8] c"aaaaHaaaaaFaaaaHa\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"___.\00", align 1
@.str.2 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"%.*s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_new(i32 %len) #0 {
entry:
  %len.addr = alloca i32, align 4
  %s = alloca %struct.str_t*, align 4
  store i32 %len, i32* %len.addr, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.str_t*
  store %struct.str_t* %0, %struct.str_t** %s, align 4
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp ult i32 %1, 8
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 8, i32* %len.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i32, i32* %len.addr, align 4
  %3 = load %struct.str_t*, %struct.str_t** %s, align 4
  %alloc = getelementptr inbounds %struct.str_t, %struct.str_t* %3, i32 0, i32 1
  store i32 %2, i32* %alloc, align 4
  %4 = load i32, i32* %len.addr, align 4
  %call1 = call noalias i8* @malloc(i32 %4)
  %5 = load %struct.str_t*, %struct.str_t** %s, align 4
  %s2 = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 2
  store i8* %call1, i8** %s2, align 4
  %6 = load %struct.str_t*, %struct.str_t** %s, align 4
  %len3 = getelementptr inbounds %struct.str_t, %struct.str_t* %6, i32 0, i32 0
  store i32 0, i32* %len3, align 4
  %7 = load %struct.str_t*, %struct.str_t** %s, align 4
  ret %struct.str_t* %7
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @str_extend(%struct.str_t* %s) #0 {
entry:
  %s.addr = alloca %struct.str_t*, align 4
  %ns = alloca i32, align 4
  store %struct.str_t* %s, %struct.str_t** %s.addr, align 4
  %0 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 1
  %1 = load i32, i32* %alloc, align 4
  %mul = mul i32 %1, 2
  store i32 %mul, i32* %ns, align 4
  %2 = load i32, i32* %ns, align 4
  %3 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc1 = getelementptr inbounds %struct.str_t, %struct.str_t* %3, i32 0, i32 1
  %4 = load i32, i32* %alloc1, align 4
  %sub = sub i32 %2, %4
  %cmp = icmp ugt i32 %sub, 1024
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc2 = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 1
  %6 = load i32, i32* %alloc2, align 4
  %add = add i32 %6, 1024
  store i32 %add, i32* %ns, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s3 = getelementptr inbounds %struct.str_t, %struct.str_t* %7, i32 0, i32 2
  %8 = load i8*, i8** %s3, align 4
  %9 = load i32, i32* %ns, align 4
  %call = call i8* @realloc(i8* %8, i32 %9)
  %10 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s4 = getelementptr inbounds %struct.str_t, %struct.str_t* %10, i32 0, i32 2
  store i8* %call, i8** %s4, align 4
  %11 = load i32, i32* %ns, align 4
  %12 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc5 = getelementptr inbounds %struct.str_t, %struct.str_t* %12, i32 0, i32 1
  store i32 %11, i32* %alloc5, align 4
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @str_del(%struct.str_t* %s) #0 {
entry:
  %s.addr = alloca %struct.str_t*, align 4
  store %struct.str_t* %s, %struct.str_t** %s.addr, align 4
  %0 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s1 = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 2
  %1 = load i8*, i8** %s1, align 4
  call void @free(i8* %1)
  %2 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %3 = bitcast %struct.str_t* %2 to i8*
  call void @free(i8* %3)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @str_cmp(%struct.str_t* %l, %struct.str_t* %r) #0 {
entry:
  %retval = alloca i32, align 4
  %l.addr = alloca %struct.str_t*, align 4
  %r.addr = alloca %struct.str_t*, align 4
  %res = alloca i32, align 4
  %len = alloca i32, align 4
  store %struct.str_t* %l, %struct.str_t** %l.addr, align 4
  store %struct.str_t* %r, %struct.str_t** %r.addr, align 4
  %0 = load %struct.str_t*, %struct.str_t** %l.addr, align 4
  %len1 = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 0
  %1 = load i32, i32* %len1, align 4
  store i32 %1, i32* %len, align 4
  %2 = load i32, i32* %len, align 4
  %3 = load %struct.str_t*, %struct.str_t** %r.addr, align 4
  %len2 = getelementptr inbounds %struct.str_t, %struct.str_t* %3, i32 0, i32 0
  %4 = load i32, i32* %len2, align 4
  %cmp = icmp ugt i32 %2, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.str_t*, %struct.str_t** %r.addr, align 4
  %len3 = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 0
  %6 = load i32, i32* %len3, align 4
  store i32 %6, i32* %len, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.str_t*, %struct.str_t** %l.addr, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %7, i32 0, i32 2
  %8 = load i8*, i8** %s, align 4
  %9 = load %struct.str_t*, %struct.str_t** %r.addr, align 4
  %s4 = getelementptr inbounds %struct.str_t, %struct.str_t* %9, i32 0, i32 2
  %10 = load i8*, i8** %s4, align 4
  %11 = load i32, i32* %len, align 4
  %call = call i32 @memcmp(i8* %8, i8* %10, i32 %11)
  store i32 %call, i32* %res, align 4
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  %12 = load i32, i32* %res, align 4
  store i32 %12, i32* %retval, align 4
  br label %return

if.end6:                                          ; preds = %if.end
  %13 = load %struct.str_t*, %struct.str_t** %l.addr, align 4
  %len7 = getelementptr inbounds %struct.str_t, %struct.str_t* %13, i32 0, i32 0
  %14 = load i32, i32* %len7, align 4
  %15 = load %struct.str_t*, %struct.str_t** %r.addr, align 4
  %len8 = getelementptr inbounds %struct.str_t, %struct.str_t* %15, i32 0, i32 0
  %16 = load i32, i32* %len8, align 4
  %cmp9 = icmp ugt i32 %14, %16
  %17 = zext i1 %cmp9 to i64
  %cond = select i1 %cmp9, i32 1, i32 -1
  store i32 %cond, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end6, %if.then5
  %18 = load i32, i32* %retval, align 4
  ret i32 %18
}

declare i32 @memcmp(i8* %0, i8* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_dup(%struct.str_t* %src) #0 {
entry:
  %src.addr = alloca %struct.str_t*, align 4
  %x = alloca %struct.str_t*, align 4
  store %struct.str_t* %src, %struct.str_t** %src.addr, align 4
  %0 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 0
  %1 = load i32, i32* %len, align 4
  %call = call %struct.str_t* @str_new(i32 %1)
  store %struct.str_t* %call, %struct.str_t** %x, align 4
  %2 = load %struct.str_t*, %struct.str_t** %x, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %2, i32 0, i32 2
  %3 = load i8*, i8** %s, align 4
  %4 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %s1 = getelementptr inbounds %struct.str_t, %struct.str_t* %4, i32 0, i32 2
  %5 = load i8*, i8** %s1, align 4
  %6 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len2 = getelementptr inbounds %struct.str_t, %struct.str_t* %6, i32 0, i32 0
  %7 = load i32, i32* %len2, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %3, i8* align 1 %5, i32 %7, i1 false)
  %8 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len3 = getelementptr inbounds %struct.str_t, %struct.str_t* %8, i32 0, i32 0
  %9 = load i32, i32* %len3, align 4
  %10 = load %struct.str_t*, %struct.str_t** %x, align 4
  %len4 = getelementptr inbounds %struct.str_t, %struct.str_t* %10, i32 0, i32 0
  store i32 %9, i32* %len4, align 4
  %11 = load %struct.str_t*, %struct.str_t** %x, align 4
  ret %struct.str_t* %11
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_from_chars(i8* %t) #0 {
entry:
  %retval = alloca %struct.str_t*, align 4
  %t.addr = alloca i8*, align 4
  %l = alloca i32, align 4
  %x = alloca %struct.str_t*, align 4
  store i8* %t, i8** %t.addr, align 4
  %0 = load i8*, i8** %t.addr, align 4
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call = call %struct.str_t* @str_new(i32 0)
  store %struct.str_t* %call, %struct.str_t** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i8*, i8** %t.addr, align 4
  %call1 = call i32 @strlen(i8* %1) #4
  store i32 %call1, i32* %l, align 4
  %2 = load i32, i32* %l, align 4
  %add = add i32 %2, 1
  %call2 = call %struct.str_t* @str_new(i32 %add)
  store %struct.str_t* %call2, %struct.str_t** %x, align 4
  %3 = load i32, i32* %l, align 4
  %4 = load %struct.str_t*, %struct.str_t** %x, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %4, i32 0, i32 0
  store i32 %3, i32* %len, align 4
  %5 = load %struct.str_t*, %struct.str_t** %x, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 2
  %6 = load i8*, i8** %s, align 4
  %7 = load i8*, i8** %t.addr, align 4
  %8 = load i32, i32* %l, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %6, i8* align 1 %7, i32 %8, i1 false)
  %9 = load %struct.str_t*, %struct.str_t** %x, align 4
  store %struct.str_t* %9, %struct.str_t** %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %10 = load %struct.str_t*, %struct.str_t** %retval, align 4
  ret %struct.str_t* %10
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #3

; Function Attrs: noinline nounwind optnone
define hidden void @str_append(%struct.str_t* %s, i8 zeroext %b) #0 {
entry:
  %s.addr = alloca %struct.str_t*, align 4
  %b.addr = alloca i8, align 1
  store %struct.str_t* %s, %struct.str_t** %s.addr, align 4
  store i8 %b, i8* %b.addr, align 1
  %0 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 0
  %1 = load i32, i32* %len, align 4
  %2 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc = getelementptr inbounds %struct.str_t, %struct.str_t* %2, i32 0, i32 1
  %3 = load i32, i32* %alloc, align 4
  %cmp = icmp uge i32 %1, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  call void @str_extend(%struct.str_t* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load i8, i8* %b.addr, align 1
  %6 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s1 = getelementptr inbounds %struct.str_t, %struct.str_t* %6, i32 0, i32 2
  %7 = load i8*, i8** %s1, align 4
  %8 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len2 = getelementptr inbounds %struct.str_t, %struct.str_t* %8, i32 0, i32 0
  %9 = load i32, i32* %len2, align 4
  %inc = add i32 %9, 1
  store i32 %inc, i32* %len2, align 4
  %arrayidx = getelementptr inbounds i8, i8* %7, i32 %9
  store i8 %5, i8* %arrayidx, align 1
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_substr(%struct.str_t* %s, i32 %from, i32 %to) #0 {
entry:
  %retval = alloca %struct.str_t*, align 4
  %s.addr = alloca %struct.str_t*, align 4
  %from.addr = alloca i32, align 4
  %to.addr = alloca i32, align 4
  %x = alloca %struct.str_t*, align 4
  store %struct.str_t* %s, %struct.str_t** %s.addr, align 4
  store i32 %from, i32* %from.addr, align 4
  store i32 %to, i32* %to.addr, align 4
  %0 = load i32, i32* %to.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %1, i32 0, i32 0
  %2 = load i32, i32* %len, align 4
  store i32 %2, i32* %to.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load i32, i32* %from.addr, align 4
  %cmp = icmp slt i32 %3, 0
  br i1 %cmp, label %if.then1, label %if.end3

if.then1:                                         ; preds = %if.end
  %4 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len2 = getelementptr inbounds %struct.str_t, %struct.str_t* %4, i32 0, i32 0
  %5 = load i32, i32* %len2, align 4
  %6 = load i32, i32* %from.addr, align 4
  %add = add i32 %6, %5
  store i32 %add, i32* %from.addr, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.end
  %7 = load i32, i32* %from.addr, align 4
  %cmp4 = icmp slt i32 %7, 0
  br i1 %cmp4, label %if.then7, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end3
  %8 = load i32, i32* %from.addr, align 4
  %9 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len5 = getelementptr inbounds %struct.str_t, %struct.str_t* %9, i32 0, i32 0
  %10 = load i32, i32* %len5, align 4
  %cmp6 = icmp uge i32 %8, %10
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %lor.lhs.false, %if.end3
  store %struct.str_t* null, %struct.str_t** %retval, align 4
  br label %return

if.end8:                                          ; preds = %lor.lhs.false
  %11 = load i32, i32* %to.addr, align 4
  %12 = load i32, i32* %from.addr, align 4
  %cmp9 = icmp slt i32 %11, %12
  br i1 %cmp9, label %if.then10, label %if.end12

if.then10:                                        ; preds = %if.end8
  %13 = load i32, i32* %from.addr, align 4
  %add11 = add nsw i32 %13, 1
  store i32 %add11, i32* %to.addr, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then10, %if.end8
  %14 = load i32, i32* %to.addr, align 4
  %15 = load i32, i32* %from.addr, align 4
  %sub = sub nsw i32 %14, %15
  %call = call %struct.str_t* @str_new(i32 %sub)
  store %struct.str_t* %call, %struct.str_t** %x, align 4
  %16 = load i32, i32* %to.addr, align 4
  %17 = load i32, i32* %from.addr, align 4
  %sub13 = sub nsw i32 %16, %17
  %18 = load %struct.str_t*, %struct.str_t** %x, align 4
  %len14 = getelementptr inbounds %struct.str_t, %struct.str_t* %18, i32 0, i32 0
  store i32 %sub13, i32* %len14, align 4
  %19 = load %struct.str_t*, %struct.str_t** %x, align 4
  %s15 = getelementptr inbounds %struct.str_t, %struct.str_t* %19, i32 0, i32 2
  %20 = load i8*, i8** %s15, align 4
  %21 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s16 = getelementptr inbounds %struct.str_t, %struct.str_t* %21, i32 0, i32 2
  %22 = load i8*, i8** %s16, align 4
  %23 = load i32, i32* %from.addr, align 4
  %add.ptr = getelementptr inbounds i8, i8* %22, i32 %23
  %24 = load %struct.str_t*, %struct.str_t** %x, align 4
  %len17 = getelementptr inbounds %struct.str_t, %struct.str_t* %24, i32 0, i32 0
  %25 = load i32, i32* %len17, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %20, i8* align 1 %add.ptr, i32 %25, i1 false)
  %26 = load %struct.str_t*, %struct.str_t** %x, align 4
  store %struct.str_t* %26, %struct.str_t** %retval, align 4
  br label %return

return:                                           ; preds = %if.end12, %if.then7
  %27 = load %struct.str_t*, %struct.str_t** %retval, align 4
  ret %struct.str_t* %27
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_cat(%struct.str_t* %s, %struct.str_t* %s2) #0 {
entry:
  %s.addr = alloca %struct.str_t*, align 4
  %s2.addr = alloca %struct.str_t*, align 4
  store %struct.str_t* %s, %struct.str_t** %s.addr, align 4
  store %struct.str_t* %s2, %struct.str_t** %s2.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 1
  %1 = load i32, i32* %alloc, align 4
  %2 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %2, i32 0, i32 0
  %3 = load i32, i32* %len, align 4
  %4 = load %struct.str_t*, %struct.str_t** %s2.addr, align 4
  %len1 = getelementptr inbounds %struct.str_t, %struct.str_t* %4, i32 0, i32 0
  %5 = load i32, i32* %len1, align 4
  %add = add i32 %3, %5
  %cmp = icmp ult i32 %1, %add
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  call void @str_extend(%struct.str_t* %6)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %7 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s3 = getelementptr inbounds %struct.str_t, %struct.str_t* %7, i32 0, i32 2
  %8 = load i8*, i8** %s3, align 4
  %9 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len4 = getelementptr inbounds %struct.str_t, %struct.str_t* %9, i32 0, i32 0
  %10 = load i32, i32* %len4, align 4
  %add.ptr = getelementptr inbounds i8, i8* %8, i32 %10
  %11 = load %struct.str_t*, %struct.str_t** %s2.addr, align 4
  %s5 = getelementptr inbounds %struct.str_t, %struct.str_t* %11, i32 0, i32 2
  %12 = load i8*, i8** %s5, align 4
  %13 = load %struct.str_t*, %struct.str_t** %s2.addr, align 4
  %len6 = getelementptr inbounds %struct.str_t, %struct.str_t* %13, i32 0, i32 0
  %14 = load i32, i32* %len6, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %add.ptr, i8* align 1 %12, i32 %14, i1 false)
  %15 = load %struct.str_t*, %struct.str_t** %s2.addr, align 4
  %len7 = getelementptr inbounds %struct.str_t, %struct.str_t* %15, i32 0, i32 0
  %16 = load i32, i32* %len7, align 4
  %17 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len8 = getelementptr inbounds %struct.str_t, %struct.str_t* %17, i32 0, i32 0
  %18 = load i32, i32* %len8, align 4
  %add9 = add i32 %18, %16
  store i32 %add9, i32* %len8, align 4
  %19 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  ret %struct.str_t* %19
}

; Function Attrs: noinline nounwind optnone
define hidden void @str_swap(%struct.str_t* %a, %struct.str_t* %b) #0 {
entry:
  %a.addr = alloca %struct.str_t*, align 4
  %b.addr = alloca %struct.str_t*, align 4
  %tz = alloca i32, align 4
  %ts = alloca i8*, align 4
  store %struct.str_t* %a, %struct.str_t** %a.addr, align 4
  store %struct.str_t* %b, %struct.str_t** %b.addr, align 4
  %0 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %alloc = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 1
  %1 = load i32, i32* %alloc, align 4
  store i32 %1, i32* %tz, align 4
  %2 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %alloc1 = getelementptr inbounds %struct.str_t, %struct.str_t* %2, i32 0, i32 1
  %3 = load i32, i32* %alloc1, align 4
  %4 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %alloc2 = getelementptr inbounds %struct.str_t, %struct.str_t* %4, i32 0, i32 1
  store i32 %3, i32* %alloc2, align 4
  %5 = load i32, i32* %tz, align 4
  %6 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %alloc3 = getelementptr inbounds %struct.str_t, %struct.str_t* %6, i32 0, i32 1
  store i32 %5, i32* %alloc3, align 4
  %7 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %7, i32 0, i32 0
  %8 = load i32, i32* %len, align 4
  store i32 %8, i32* %tz, align 4
  %9 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %len4 = getelementptr inbounds %struct.str_t, %struct.str_t* %9, i32 0, i32 0
  %10 = load i32, i32* %len4, align 4
  %11 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %len5 = getelementptr inbounds %struct.str_t, %struct.str_t* %11, i32 0, i32 0
  store i32 %10, i32* %len5, align 4
  %12 = load i32, i32* %tz, align 4
  %13 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %len6 = getelementptr inbounds %struct.str_t, %struct.str_t* %13, i32 0, i32 0
  store i32 %12, i32* %len6, align 4
  %14 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %14, i32 0, i32 2
  %15 = load i8*, i8** %s, align 4
  store i8* %15, i8** %ts, align 4
  %16 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %s7 = getelementptr inbounds %struct.str_t, %struct.str_t* %16, i32 0, i32 2
  %17 = load i8*, i8** %s7, align 4
  %18 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %s8 = getelementptr inbounds %struct.str_t, %struct.str_t* %18, i32 0, i32 2
  store i8* %17, i8** %s8, align 4
  %19 = load i8*, i8** %ts, align 4
  %20 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %s9 = getelementptr inbounds %struct.str_t, %struct.str_t* %20, i32 0, i32 2
  store i8* %19, i8** %s9, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_subst(%struct.str_t* %tgt, %struct.str_t* %pat, %struct.str_t* %repl) #0 {
entry:
  %tgt.addr = alloca %struct.str_t*, align 4
  %pat.addr = alloca %struct.str_t*, align 4
  %repl.addr = alloca %struct.str_t*, align 4
  %tmp = alloca %struct.str_t*, align 4
  %i = alloca i32, align 4
  store %struct.str_t* %tgt, %struct.str_t** %tgt.addr, align 4
  store %struct.str_t* %pat, %struct.str_t** %pat.addr, align 4
  store %struct.str_t* %repl, %struct.str_t** %repl.addr, align 4
  %call = call %struct.str_t* @str_new(i32 0)
  store %struct.str_t* %call, %struct.str_t** %tmp, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %if.end15, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.str_t*, %struct.str_t** %pat.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %1, i32 0, i32 0
  %2 = load i32, i32* %len, align 4
  %add = add i32 %0, %2
  %3 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %len1 = getelementptr inbounds %struct.str_t, %struct.str_t* %3, i32 0, i32 0
  %4 = load i32, i32* %len1, align 4
  %cmp = icmp ule i32 %add, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 2
  %6 = load i8*, i8** %s, align 4
  %7 = load i32, i32* %i, align 4
  %add.ptr = getelementptr inbounds i8, i8* %6, i32 %7
  %8 = load %struct.str_t*, %struct.str_t** %pat.addr, align 4
  %s2 = getelementptr inbounds %struct.str_t, %struct.str_t* %8, i32 0, i32 2
  %9 = load i8*, i8** %s2, align 4
  %10 = load %struct.str_t*, %struct.str_t** %pat.addr, align 4
  %len3 = getelementptr inbounds %struct.str_t, %struct.str_t* %10, i32 0, i32 0
  %11 = load i32, i32* %len3, align 4
  %call4 = call i32 @memcmp(i8* %add.ptr, i8* %9, i32 %11)
  %tobool = icmp ne i32 %call4, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %12 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  %13 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %s5 = getelementptr inbounds %struct.str_t, %struct.str_t* %13, i32 0, i32 2
  %14 = load i8*, i8** %s5, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %14, i32 %15
  %16 = load i8, i8* %arrayidx, align 1
  call void @str_append(%struct.str_t* %12, i8 zeroext %16)
  %17 = load i32, i32* %i, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %i, align 4
  br label %if.end15

if.else:                                          ; preds = %for.body
  %18 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  %19 = load %struct.str_t*, %struct.str_t** %repl.addr, align 4
  %call6 = call %struct.str_t* @str_cat(%struct.str_t* %18, %struct.str_t* %19)
  %20 = load %struct.str_t*, %struct.str_t** %pat.addr, align 4
  %len7 = getelementptr inbounds %struct.str_t, %struct.str_t* %20, i32 0, i32 0
  %21 = load i32, i32* %len7, align 4
  %22 = load i32, i32* %i, align 4
  %add8 = add i32 %22, %21
  store i32 %add8, i32* %i, align 4
  %23 = load %struct.str_t*, %struct.str_t** %pat.addr, align 4
  %len9 = getelementptr inbounds %struct.str_t, %struct.str_t* %23, i32 0, i32 0
  %24 = load i32, i32* %len9, align 4
  %tobool10 = icmp ne i32 %24, 0
  br i1 %tobool10, label %if.end, label %if.then11

if.then11:                                        ; preds = %if.else
  %25 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  %26 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %s12 = getelementptr inbounds %struct.str_t, %struct.str_t* %26, i32 0, i32 2
  %27 = load i8*, i8** %s12, align 4
  %28 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %28, 1
  store i32 %inc13, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds i8, i8* %27, i32 %28
  %29 = load i8, i8* %arrayidx14, align 1
  call void @str_append(%struct.str_t* %25, i8 zeroext %29)
  br label %if.end

if.end:                                           ; preds = %if.then11, %if.else
  br label %if.end15

if.end15:                                         ; preds = %if.end, %if.then
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end
  %30 = load i32, i32* %i, align 4
  %31 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %len16 = getelementptr inbounds %struct.str_t, %struct.str_t* %31, i32 0, i32 0
  %32 = load i32, i32* %len16, align 4
  %cmp17 = icmp ult i32 %30, %32
  br i1 %cmp17, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %33 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  %34 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %s18 = getelementptr inbounds %struct.str_t, %struct.str_t* %34, i32 0, i32 2
  %35 = load i8*, i8** %s18, align 4
  %36 = load i32, i32* %i, align 4
  %inc19 = add nsw i32 %36, 1
  store i32 %inc19, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds i8, i8* %35, i32 %36
  %37 = load i8, i8* %arrayidx20, align 1
  call void @str_append(%struct.str_t* %33, i8 zeroext %37)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %38 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  %39 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  call void @str_swap(%struct.str_t* %38, %struct.str_t* %39)
  %40 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  call void @str_del(%struct.str_t* %40)
  %41 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  ret %struct.str_t* %41
}

; Function Attrs: noinline nounwind optnone
define hidden void @str_set(%struct.str_t* %dest, %struct.str_t* %src) #0 {
entry:
  %dest.addr = alloca %struct.str_t*, align 4
  %src.addr = alloca %struct.str_t*, align 4
  store %struct.str_t* %dest, %struct.str_t** %dest.addr, align 4
  store %struct.str_t* %src, %struct.str_t** %src.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct.str_t*, %struct.str_t** %dest.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 0
  %1 = load i32, i32* %len, align 4
  %2 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len1 = getelementptr inbounds %struct.str_t, %struct.str_t* %2, i32 0, i32 0
  %3 = load i32, i32* %len1, align 4
  %cmp = icmp ult i32 %1, %3
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load %struct.str_t*, %struct.str_t** %dest.addr, align 4
  call void @str_extend(%struct.str_t* %4)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %5 = load %struct.str_t*, %struct.str_t** %dest.addr, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 2
  %6 = load i8*, i8** %s, align 4
  %7 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %s2 = getelementptr inbounds %struct.str_t, %struct.str_t* %7, i32 0, i32 2
  %8 = load i8*, i8** %s2, align 4
  %9 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len3 = getelementptr inbounds %struct.str_t, %struct.str_t* %9, i32 0, i32 0
  %10 = load i32, i32* %len3, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %6, i8* align 1 %8, i32 %10, i1 false)
  %11 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len4 = getelementptr inbounds %struct.str_t, %struct.str_t* %11, i32 0, i32 0
  %12 = load i32, i32* %len4, align 4
  %13 = load %struct.str_t*, %struct.str_t** %dest.addr, align 4
  %len5 = getelementptr inbounds %struct.str_t, %struct.str_t* %13, i32 0, i32 0
  store i32 %12, i32* %len5, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %s = alloca %struct.str_t*, align 4
  %s2 = alloca %struct.str_t*, align 4
  %s3 = alloca %struct.str_t*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.str_t* @str_from_chars(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i32 0, i32 0))
  store %struct.str_t* %call, %struct.str_t** %s, align 4
  %call1 = call %struct.str_t* @str_from_chars(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0))
  store %struct.str_t* %call1, %struct.str_t** %s2, align 4
  %call2 = call %struct.str_t* @str_from_chars(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2, i32 0, i32 0))
  store %struct.str_t* %call2, %struct.str_t** %s3, align 4
  %0 = load %struct.str_t*, %struct.str_t** %s, align 4
  %1 = load %struct.str_t*, %struct.str_t** %s3, align 4
  %2 = load %struct.str_t*, %struct.str_t** %s2, align 4
  %call3 = call %struct.str_t* @str_subst(%struct.str_t* %0, %struct.str_t* %1, %struct.str_t* %2)
  %3 = load %struct.str_t*, %struct.str_t** %s, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %3, i32 0, i32 0
  %4 = load i32, i32* %len, align 4
  %5 = load %struct.str_t*, %struct.str_t** %s, align 4
  %s4 = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 2
  %6 = load i8*, i8** %s4, align 4
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0), i32 %4, i8* %6)
  %7 = load %struct.str_t*, %struct.str_t** %s, align 4
  call void @str_del(%struct.str_t* %7)
  %8 = load %struct.str_t*, %struct.str_t** %s2, align 4
  call void @str_del(%struct.str_t* %8)
  %9 = load %struct.str_t*, %struct.str_t** %s3, align 4
  call void @str_del(%struct.str_t* %9)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %len1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ult i32 %1, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %len3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %len4, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for str_set()

; entering Souper's runOnFunction() for main()

; ModuleID = './Binary_strings.c.bc'
source_filename = "./Binary_strings.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.str_t = type { i32, i32, i8* }

@.str = private unnamed_addr constant [18 x i8] c"aaaaHaaaaaFaaaaHa\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"___.\00", align 1
@.str.2 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"%.*s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_new(i32 %len) #0 {
entry:
  %len.addr = alloca i32, align 4
  %s = alloca %struct.str_t*, align 4
  store i32 %len, i32* %len.addr, align 4
  %call = call noalias i8* @malloc(i32 12)
  %0 = bitcast i8* %call to %struct.str_t*
  store %struct.str_t* %0, %struct.str_t** %s, align 4
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp ult i32 %1, 8
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 8, i32* %len.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i32, i32* %len.addr, align 4
  %3 = load %struct.str_t*, %struct.str_t** %s, align 4
  %alloc = getelementptr inbounds %struct.str_t, %struct.str_t* %3, i32 0, i32 1
  store i32 %2, i32* %alloc, align 4
  %4 = load i32, i32* %len.addr, align 4
  %call1 = call noalias i8* @malloc(i32 %4)
  %5 = load %struct.str_t*, %struct.str_t** %s, align 4
  %s2 = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 2
  store i8* %call1, i8** %s2, align 4
  %6 = load %struct.str_t*, %struct.str_t** %s, align 4
  %len3 = getelementptr inbounds %struct.str_t, %struct.str_t* %6, i32 0, i32 0
  store i32 0, i32* %len3, align 4
  %7 = load %struct.str_t*, %struct.str_t** %s, align 4
  ret %struct.str_t* %7
}

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden void @str_extend(%struct.str_t* %s) #0 {
entry:
  %s.addr = alloca %struct.str_t*, align 4
  %ns = alloca i32, align 4
  store %struct.str_t* %s, %struct.str_t** %s.addr, align 4
  %0 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 1
  %1 = load i32, i32* %alloc, align 4
  %mul = mul i32 %1, 2
  store i32 %mul, i32* %ns, align 4
  %2 = load i32, i32* %ns, align 4
  %3 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc1 = getelementptr inbounds %struct.str_t, %struct.str_t* %3, i32 0, i32 1
  %4 = load i32, i32* %alloc1, align 4
  %sub = sub i32 %2, %4
  %cmp = icmp ugt i32 %sub, 1024
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc2 = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 1
  %6 = load i32, i32* %alloc2, align 4
  %add = add i32 %6, 1024
  store i32 %add, i32* %ns, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s3 = getelementptr inbounds %struct.str_t, %struct.str_t* %7, i32 0, i32 2
  %8 = load i8*, i8** %s3, align 4
  %9 = load i32, i32* %ns, align 4
  %call = call i8* @realloc(i8* %8, i32 %9)
  %10 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s4 = getelementptr inbounds %struct.str_t, %struct.str_t* %10, i32 0, i32 2
  store i8* %call, i8** %s4, align 4
  %11 = load i32, i32* %ns, align 4
  %12 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc5 = getelementptr inbounds %struct.str_t, %struct.str_t* %12, i32 0, i32 1
  store i32 %11, i32* %alloc5, align 4
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @str_del(%struct.str_t* %s) #0 {
entry:
  %s.addr = alloca %struct.str_t*, align 4
  store %struct.str_t* %s, %struct.str_t** %s.addr, align 4
  %0 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s1 = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 2
  %1 = load i8*, i8** %s1, align 4
  call void @free(i8* %1)
  %2 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %3 = bitcast %struct.str_t* %2 to i8*
  call void @free(i8* %3)
  ret void
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @str_cmp(%struct.str_t* %l, %struct.str_t* %r) #0 {
entry:
  %retval = alloca i32, align 4
  %l.addr = alloca %struct.str_t*, align 4
  %r.addr = alloca %struct.str_t*, align 4
  %res = alloca i32, align 4
  %len = alloca i32, align 4
  store %struct.str_t* %l, %struct.str_t** %l.addr, align 4
  store %struct.str_t* %r, %struct.str_t** %r.addr, align 4
  %0 = load %struct.str_t*, %struct.str_t** %l.addr, align 4
  %len1 = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 0
  %1 = load i32, i32* %len1, align 4
  store i32 %1, i32* %len, align 4
  %2 = load i32, i32* %len, align 4
  %3 = load %struct.str_t*, %struct.str_t** %r.addr, align 4
  %len2 = getelementptr inbounds %struct.str_t, %struct.str_t* %3, i32 0, i32 0
  %4 = load i32, i32* %len2, align 4
  %cmp = icmp ugt i32 %2, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.str_t*, %struct.str_t** %r.addr, align 4
  %len3 = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 0
  %6 = load i32, i32* %len3, align 4
  store i32 %6, i32* %len, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.str_t*, %struct.str_t** %l.addr, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %7, i32 0, i32 2
  %8 = load i8*, i8** %s, align 4
  %9 = load %struct.str_t*, %struct.str_t** %r.addr, align 4
  %s4 = getelementptr inbounds %struct.str_t, %struct.str_t* %9, i32 0, i32 2
  %10 = load i8*, i8** %s4, align 4
  %11 = load i32, i32* %len, align 4
  %call = call i32 @memcmp(i8* %8, i8* %10, i32 %11)
  store i32 %call, i32* %res, align 4
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  %12 = load i32, i32* %res, align 4
  store i32 %12, i32* %retval, align 4
  br label %return

if.end6:                                          ; preds = %if.end
  %13 = load %struct.str_t*, %struct.str_t** %l.addr, align 4
  %len7 = getelementptr inbounds %struct.str_t, %struct.str_t* %13, i32 0, i32 0
  %14 = load i32, i32* %len7, align 4
  %15 = load %struct.str_t*, %struct.str_t** %r.addr, align 4
  %len8 = getelementptr inbounds %struct.str_t, %struct.str_t* %15, i32 0, i32 0
  %16 = load i32, i32* %len8, align 4
  %cmp9 = icmp ugt i32 %14, %16
  %17 = zext i1 %cmp9 to i64
  %cond = select i1 %cmp9, i32 1, i32 -1
  store i32 %cond, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end6, %if.then5
  %18 = load i32, i32* %retval, align 4
  ret i32 %18
}

declare i32 @memcmp(i8* %0, i8* %1, i32 %2) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_dup(%struct.str_t* %src) #0 {
entry:
  %src.addr = alloca %struct.str_t*, align 4
  %x = alloca %struct.str_t*, align 4
  store %struct.str_t* %src, %struct.str_t** %src.addr, align 4
  %0 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 0
  %1 = load i32, i32* %len, align 4
  %call = call %struct.str_t* @str_new(i32 %1)
  store %struct.str_t* %call, %struct.str_t** %x, align 4
  %2 = load %struct.str_t*, %struct.str_t** %x, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %2, i32 0, i32 2
  %3 = load i8*, i8** %s, align 4
  %4 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %s1 = getelementptr inbounds %struct.str_t, %struct.str_t* %4, i32 0, i32 2
  %5 = load i8*, i8** %s1, align 4
  %6 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len2 = getelementptr inbounds %struct.str_t, %struct.str_t* %6, i32 0, i32 0
  %7 = load i32, i32* %len2, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %3, i8* align 1 %5, i32 %7, i1 false)
  %8 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len3 = getelementptr inbounds %struct.str_t, %struct.str_t* %8, i32 0, i32 0
  %9 = load i32, i32* %len3, align 4
  %10 = load %struct.str_t*, %struct.str_t** %x, align 4
  %len4 = getelementptr inbounds %struct.str_t, %struct.str_t* %10, i32 0, i32 0
  store i32 %9, i32* %len4, align 4
  %11 = load %struct.str_t*, %struct.str_t** %x, align 4
  ret %struct.str_t* %11
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_from_chars(i8* %t) #0 {
entry:
  %retval = alloca %struct.str_t*, align 4
  %t.addr = alloca i8*, align 4
  %l = alloca i32, align 4
  %x = alloca %struct.str_t*, align 4
  store i8* %t, i8** %t.addr, align 4
  %0 = load i8*, i8** %t.addr, align 4
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call = call %struct.str_t* @str_new(i32 0)
  store %struct.str_t* %call, %struct.str_t** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i8*, i8** %t.addr, align 4
  %call1 = call i32 @strlen(i8* %1) #4
  store i32 %call1, i32* %l, align 4
  %2 = load i32, i32* %l, align 4
  %add = add i32 %2, 1
  %call2 = call %struct.str_t* @str_new(i32 %add)
  store %struct.str_t* %call2, %struct.str_t** %x, align 4
  %3 = load i32, i32* %l, align 4
  %4 = load %struct.str_t*, %struct.str_t** %x, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %4, i32 0, i32 0
  store i32 %3, i32* %len, align 4
  %5 = load %struct.str_t*, %struct.str_t** %x, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 2
  %6 = load i8*, i8** %s, align 4
  %7 = load i8*, i8** %t.addr, align 4
  %8 = load i32, i32* %l, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %6, i8* align 1 %7, i32 %8, i1 false)
  %9 = load %struct.str_t*, %struct.str_t** %x, align 4
  store %struct.str_t* %9, %struct.str_t** %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %10 = load %struct.str_t*, %struct.str_t** %retval, align 4
  ret %struct.str_t* %10
}

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #3

; Function Attrs: noinline nounwind optnone
define hidden void @str_append(%struct.str_t* %s, i8 zeroext %b) #0 {
entry:
  %s.addr = alloca %struct.str_t*, align 4
  %b.addr = alloca i8, align 1
  store %struct.str_t* %s, %struct.str_t** %s.addr, align 4
  store i8 %b, i8* %b.addr, align 1
  %0 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 0
  %1 = load i32, i32* %len, align 4
  %2 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc = getelementptr inbounds %struct.str_t, %struct.str_t* %2, i32 0, i32 1
  %3 = load i32, i32* %alloc, align 4
  %cmp = icmp uge i32 %1, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  call void @str_extend(%struct.str_t* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load i8, i8* %b.addr, align 1
  %6 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s1 = getelementptr inbounds %struct.str_t, %struct.str_t* %6, i32 0, i32 2
  %7 = load i8*, i8** %s1, align 4
  %8 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len2 = getelementptr inbounds %struct.str_t, %struct.str_t* %8, i32 0, i32 0
  %9 = load i32, i32* %len2, align 4
  %inc = add i32 %9, 1
  store i32 %inc, i32* %len2, align 4
  %arrayidx = getelementptr inbounds i8, i8* %7, i32 %9
  store i8 %5, i8* %arrayidx, align 1
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_substr(%struct.str_t* %s, i32 %from, i32 %to) #0 {
entry:
  %retval = alloca %struct.str_t*, align 4
  %s.addr = alloca %struct.str_t*, align 4
  %from.addr = alloca i32, align 4
  %to.addr = alloca i32, align 4
  %x = alloca %struct.str_t*, align 4
  store %struct.str_t* %s, %struct.str_t** %s.addr, align 4
  store i32 %from, i32* %from.addr, align 4
  store i32 %to, i32* %to.addr, align 4
  %0 = load i32, i32* %to.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %1, i32 0, i32 0
  %2 = load i32, i32* %len, align 4
  store i32 %2, i32* %to.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load i32, i32* %from.addr, align 4
  %cmp = icmp slt i32 %3, 0
  br i1 %cmp, label %if.then1, label %if.end3

if.then1:                                         ; preds = %if.end
  %4 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len2 = getelementptr inbounds %struct.str_t, %struct.str_t* %4, i32 0, i32 0
  %5 = load i32, i32* %len2, align 4
  %6 = load i32, i32* %from.addr, align 4
  %add = add i32 %6, %5
  store i32 %add, i32* %from.addr, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then1, %if.end
  %7 = load i32, i32* %from.addr, align 4
  %cmp4 = icmp slt i32 %7, 0
  br i1 %cmp4, label %if.then7, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end3
  %8 = load i32, i32* %from.addr, align 4
  %9 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len5 = getelementptr inbounds %struct.str_t, %struct.str_t* %9, i32 0, i32 0
  %10 = load i32, i32* %len5, align 4
  %cmp6 = icmp uge i32 %8, %10
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %lor.lhs.false, %if.end3
  store %struct.str_t* null, %struct.str_t** %retval, align 4
  br label %return

if.end8:                                          ; preds = %lor.lhs.false
  %11 = load i32, i32* %to.addr, align 4
  %12 = load i32, i32* %from.addr, align 4
  %cmp9 = icmp slt i32 %11, %12
  br i1 %cmp9, label %if.then10, label %if.end12

if.then10:                                        ; preds = %if.end8
  %13 = load i32, i32* %from.addr, align 4
  %add11 = add nsw i32 %13, 1
  store i32 %add11, i32* %to.addr, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then10, %if.end8
  %14 = load i32, i32* %to.addr, align 4
  %15 = load i32, i32* %from.addr, align 4
  %sub = sub nsw i32 %14, %15
  %call = call %struct.str_t* @str_new(i32 %sub)
  store %struct.str_t* %call, %struct.str_t** %x, align 4
  %16 = load i32, i32* %to.addr, align 4
  %17 = load i32, i32* %from.addr, align 4
  %sub13 = sub nsw i32 %16, %17
  %18 = load %struct.str_t*, %struct.str_t** %x, align 4
  %len14 = getelementptr inbounds %struct.str_t, %struct.str_t* %18, i32 0, i32 0
  store i32 %sub13, i32* %len14, align 4
  %19 = load %struct.str_t*, %struct.str_t** %x, align 4
  %s15 = getelementptr inbounds %struct.str_t, %struct.str_t* %19, i32 0, i32 2
  %20 = load i8*, i8** %s15, align 4
  %21 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s16 = getelementptr inbounds %struct.str_t, %struct.str_t* %21, i32 0, i32 2
  %22 = load i8*, i8** %s16, align 4
  %23 = load i32, i32* %from.addr, align 4
  %add.ptr = getelementptr inbounds i8, i8* %22, i32 %23
  %24 = load %struct.str_t*, %struct.str_t** %x, align 4
  %len17 = getelementptr inbounds %struct.str_t, %struct.str_t* %24, i32 0, i32 0
  %25 = load i32, i32* %len17, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %20, i8* align 1 %add.ptr, i32 %25, i1 false)
  %26 = load %struct.str_t*, %struct.str_t** %x, align 4
  store %struct.str_t* %26, %struct.str_t** %retval, align 4
  br label %return

return:                                           ; preds = %if.end12, %if.then7
  %27 = load %struct.str_t*, %struct.str_t** %retval, align 4
  ret %struct.str_t* %27
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_cat(%struct.str_t* %s, %struct.str_t* %s2) #0 {
entry:
  %s.addr = alloca %struct.str_t*, align 4
  %s2.addr = alloca %struct.str_t*, align 4
  store %struct.str_t* %s, %struct.str_t** %s.addr, align 4
  store %struct.str_t* %s2, %struct.str_t** %s2.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %alloc = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 1
  %1 = load i32, i32* %alloc, align 4
  %2 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %2, i32 0, i32 0
  %3 = load i32, i32* %len, align 4
  %4 = load %struct.str_t*, %struct.str_t** %s2.addr, align 4
  %len1 = getelementptr inbounds %struct.str_t, %struct.str_t* %4, i32 0, i32 0
  %5 = load i32, i32* %len1, align 4
  %add = add i32 %3, %5
  %cmp = icmp ult i32 %1, %add
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  call void @str_extend(%struct.str_t* %6)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %7 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %s3 = getelementptr inbounds %struct.str_t, %struct.str_t* %7, i32 0, i32 2
  %8 = load i8*, i8** %s3, align 4
  %9 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len4 = getelementptr inbounds %struct.str_t, %struct.str_t* %9, i32 0, i32 0
  %10 = load i32, i32* %len4, align 4
  %add.ptr = getelementptr inbounds i8, i8* %8, i32 %10
  %11 = load %struct.str_t*, %struct.str_t** %s2.addr, align 4
  %s5 = getelementptr inbounds %struct.str_t, %struct.str_t* %11, i32 0, i32 2
  %12 = load i8*, i8** %s5, align 4
  %13 = load %struct.str_t*, %struct.str_t** %s2.addr, align 4
  %len6 = getelementptr inbounds %struct.str_t, %struct.str_t* %13, i32 0, i32 0
  %14 = load i32, i32* %len6, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %add.ptr, i8* align 1 %12, i32 %14, i1 false)
  %15 = load %struct.str_t*, %struct.str_t** %s2.addr, align 4
  %len7 = getelementptr inbounds %struct.str_t, %struct.str_t* %15, i32 0, i32 0
  %16 = load i32, i32* %len7, align 4
  %17 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  %len8 = getelementptr inbounds %struct.str_t, %struct.str_t* %17, i32 0, i32 0
  %18 = load i32, i32* %len8, align 4
  %add9 = add i32 %18, %16
  store i32 %add9, i32* %len8, align 4
  %19 = load %struct.str_t*, %struct.str_t** %s.addr, align 4
  ret %struct.str_t* %19
}

; Function Attrs: noinline nounwind optnone
define hidden void @str_swap(%struct.str_t* %a, %struct.str_t* %b) #0 {
entry:
  %a.addr = alloca %struct.str_t*, align 4
  %b.addr = alloca %struct.str_t*, align 4
  %tz = alloca i32, align 4
  %ts = alloca i8*, align 4
  store %struct.str_t* %a, %struct.str_t** %a.addr, align 4
  store %struct.str_t* %b, %struct.str_t** %b.addr, align 4
  %0 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %alloc = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 1
  %1 = load i32, i32* %alloc, align 4
  store i32 %1, i32* %tz, align 4
  %2 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %alloc1 = getelementptr inbounds %struct.str_t, %struct.str_t* %2, i32 0, i32 1
  %3 = load i32, i32* %alloc1, align 4
  %4 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %alloc2 = getelementptr inbounds %struct.str_t, %struct.str_t* %4, i32 0, i32 1
  store i32 %3, i32* %alloc2, align 4
  %5 = load i32, i32* %tz, align 4
  %6 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %alloc3 = getelementptr inbounds %struct.str_t, %struct.str_t* %6, i32 0, i32 1
  store i32 %5, i32* %alloc3, align 4
  %7 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %7, i32 0, i32 0
  %8 = load i32, i32* %len, align 4
  store i32 %8, i32* %tz, align 4
  %9 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %len4 = getelementptr inbounds %struct.str_t, %struct.str_t* %9, i32 0, i32 0
  %10 = load i32, i32* %len4, align 4
  %11 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %len5 = getelementptr inbounds %struct.str_t, %struct.str_t* %11, i32 0, i32 0
  store i32 %10, i32* %len5, align 4
  %12 = load i32, i32* %tz, align 4
  %13 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %len6 = getelementptr inbounds %struct.str_t, %struct.str_t* %13, i32 0, i32 0
  store i32 %12, i32* %len6, align 4
  %14 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %14, i32 0, i32 2
  %15 = load i8*, i8** %s, align 4
  store i8* %15, i8** %ts, align 4
  %16 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %s7 = getelementptr inbounds %struct.str_t, %struct.str_t* %16, i32 0, i32 2
  %17 = load i8*, i8** %s7, align 4
  %18 = load %struct.str_t*, %struct.str_t** %a.addr, align 4
  %s8 = getelementptr inbounds %struct.str_t, %struct.str_t* %18, i32 0, i32 2
  store i8* %17, i8** %s8, align 4
  %19 = load i8*, i8** %ts, align 4
  %20 = load %struct.str_t*, %struct.str_t** %b.addr, align 4
  %s9 = getelementptr inbounds %struct.str_t, %struct.str_t* %20, i32 0, i32 2
  store i8* %19, i8** %s9, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.str_t* @str_subst(%struct.str_t* %tgt, %struct.str_t* %pat, %struct.str_t* %repl) #0 {
entry:
  %tgt.addr = alloca %struct.str_t*, align 4
  %pat.addr = alloca %struct.str_t*, align 4
  %repl.addr = alloca %struct.str_t*, align 4
  %tmp = alloca %struct.str_t*, align 4
  %i = alloca i32, align 4
  store %struct.str_t* %tgt, %struct.str_t** %tgt.addr, align 4
  store %struct.str_t* %pat, %struct.str_t** %pat.addr, align 4
  store %struct.str_t* %repl, %struct.str_t** %repl.addr, align 4
  %call = call %struct.str_t* @str_new(i32 0)
  store %struct.str_t* %call, %struct.str_t** %tmp, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %if.end15, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.str_t*, %struct.str_t** %pat.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %1, i32 0, i32 0
  %2 = load i32, i32* %len, align 4
  %add = add i32 %0, %2
  %3 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %len1 = getelementptr inbounds %struct.str_t, %struct.str_t* %3, i32 0, i32 0
  %4 = load i32, i32* %len1, align 4
  %cmp = icmp ule i32 %add, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 2
  %6 = load i8*, i8** %s, align 4
  %7 = load i32, i32* %i, align 4
  %add.ptr = getelementptr inbounds i8, i8* %6, i32 %7
  %8 = load %struct.str_t*, %struct.str_t** %pat.addr, align 4
  %s2 = getelementptr inbounds %struct.str_t, %struct.str_t* %8, i32 0, i32 2
  %9 = load i8*, i8** %s2, align 4
  %10 = load %struct.str_t*, %struct.str_t** %pat.addr, align 4
  %len3 = getelementptr inbounds %struct.str_t, %struct.str_t* %10, i32 0, i32 0
  %11 = load i32, i32* %len3, align 4
  %call4 = call i32 @memcmp(i8* %add.ptr, i8* %9, i32 %11)
  %tobool = icmp ne i32 %call4, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %12 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  %13 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %s5 = getelementptr inbounds %struct.str_t, %struct.str_t* %13, i32 0, i32 2
  %14 = load i8*, i8** %s5, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %14, i32 %15
  %16 = load i8, i8* %arrayidx, align 1
  call void @str_append(%struct.str_t* %12, i8 zeroext %16)
  %17 = load i32, i32* %i, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %i, align 4
  br label %if.end15

if.else:                                          ; preds = %for.body
  %18 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  %19 = load %struct.str_t*, %struct.str_t** %repl.addr, align 4
  %call6 = call %struct.str_t* @str_cat(%struct.str_t* %18, %struct.str_t* %19)
  %20 = load %struct.str_t*, %struct.str_t** %pat.addr, align 4
  %len7 = getelementptr inbounds %struct.str_t, %struct.str_t* %20, i32 0, i32 0
  %21 = load i32, i32* %len7, align 4
  %22 = load i32, i32* %i, align 4
  %add8 = add i32 %22, %21
  store i32 %add8, i32* %i, align 4
  %23 = load %struct.str_t*, %struct.str_t** %pat.addr, align 4
  %len9 = getelementptr inbounds %struct.str_t, %struct.str_t* %23, i32 0, i32 0
  %24 = load i32, i32* %len9, align 4
  %tobool10 = icmp ne i32 %24, 0
  br i1 %tobool10, label %if.end, label %if.then11

if.then11:                                        ; preds = %if.else
  %25 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  %26 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %s12 = getelementptr inbounds %struct.str_t, %struct.str_t* %26, i32 0, i32 2
  %27 = load i8*, i8** %s12, align 4
  %28 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %28, 1
  store i32 %inc13, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds i8, i8* %27, i32 %28
  %29 = load i8, i8* %arrayidx14, align 1
  call void @str_append(%struct.str_t* %25, i8 zeroext %29)
  br label %if.end

if.end:                                           ; preds = %if.then11, %if.else
  br label %if.end15

if.end15:                                         ; preds = %if.end, %if.then
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end
  %30 = load i32, i32* %i, align 4
  %31 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %len16 = getelementptr inbounds %struct.str_t, %struct.str_t* %31, i32 0, i32 0
  %32 = load i32, i32* %len16, align 4
  %cmp17 = icmp ult i32 %30, %32
  br i1 %cmp17, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %33 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  %34 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  %s18 = getelementptr inbounds %struct.str_t, %struct.str_t* %34, i32 0, i32 2
  %35 = load i8*, i8** %s18, align 4
  %36 = load i32, i32* %i, align 4
  %inc19 = add nsw i32 %36, 1
  store i32 %inc19, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds i8, i8* %35, i32 %36
  %37 = load i8, i8* %arrayidx20, align 1
  call void @str_append(%struct.str_t* %33, i8 zeroext %37)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %38 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  %39 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  call void @str_swap(%struct.str_t* %38, %struct.str_t* %39)
  %40 = load %struct.str_t*, %struct.str_t** %tmp, align 4
  call void @str_del(%struct.str_t* %40)
  %41 = load %struct.str_t*, %struct.str_t** %tgt.addr, align 4
  ret %struct.str_t* %41
}

; Function Attrs: noinline nounwind optnone
define hidden void @str_set(%struct.str_t* %dest, %struct.str_t* %src) #0 {
entry:
  %dest.addr = alloca %struct.str_t*, align 4
  %src.addr = alloca %struct.str_t*, align 4
  store %struct.str_t* %dest, %struct.str_t** %dest.addr, align 4
  store %struct.str_t* %src, %struct.str_t** %src.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct.str_t*, %struct.str_t** %dest.addr, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %0, i32 0, i32 0
  %1 = load i32, i32* %len, align 4
  %2 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len1 = getelementptr inbounds %struct.str_t, %struct.str_t* %2, i32 0, i32 0
  %3 = load i32, i32* %len1, align 4
  %cmp = icmp ult i32 %1, %3
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load %struct.str_t*, %struct.str_t** %dest.addr, align 4
  call void @str_extend(%struct.str_t* %4)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %5 = load %struct.str_t*, %struct.str_t** %dest.addr, align 4
  %s = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 2
  %6 = load i8*, i8** %s, align 4
  %7 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %s2 = getelementptr inbounds %struct.str_t, %struct.str_t* %7, i32 0, i32 2
  %8 = load i8*, i8** %s2, align 4
  %9 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len3 = getelementptr inbounds %struct.str_t, %struct.str_t* %9, i32 0, i32 0
  %10 = load i32, i32* %len3, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %6, i8* align 1 %8, i32 %10, i1 false)
  %11 = load %struct.str_t*, %struct.str_t** %src.addr, align 4
  %len4 = getelementptr inbounds %struct.str_t, %struct.str_t* %11, i32 0, i32 0
  %12 = load i32, i32* %len4, align 4
  %13 = load %struct.str_t*, %struct.str_t** %dest.addr, align 4
  %len5 = getelementptr inbounds %struct.str_t, %struct.str_t* %13, i32 0, i32 0
  store i32 %12, i32* %len5, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %s = alloca %struct.str_t*, align 4
  %s2 = alloca %struct.str_t*, align 4
  %s3 = alloca %struct.str_t*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.str_t* @str_from_chars(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i32 0, i32 0))
  store %struct.str_t* %call, %struct.str_t** %s, align 4
  %call1 = call %struct.str_t* @str_from_chars(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0))
  store %struct.str_t* %call1, %struct.str_t** %s2, align 4
  %call2 = call %struct.str_t* @str_from_chars(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2, i32 0, i32 0))
  store %struct.str_t* %call2, %struct.str_t** %s3, align 4
  %0 = load %struct.str_t*, %struct.str_t** %s, align 4
  %1 = load %struct.str_t*, %struct.str_t** %s3, align 4
  %2 = load %struct.str_t*, %struct.str_t** %s2, align 4
  %call3 = call %struct.str_t* @str_subst(%struct.str_t* %0, %struct.str_t* %1, %struct.str_t* %2)
  %3 = load %struct.str_t*, %struct.str_t** %s, align 4
  %len = getelementptr inbounds %struct.str_t, %struct.str_t* %3, i32 0, i32 0
  %4 = load i32, i32* %len, align 4
  %5 = load %struct.str_t*, %struct.str_t** %s, align 4
  %s4 = getelementptr inbounds %struct.str_t, %struct.str_t* %5, i32 0, i32 2
  %6 = load i8*, i8** %s4, align 4
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0), i32 %4, i8* %6)
  %7 = load %struct.str_t*, %struct.str_t** %s, align 4
  call void @str_del(%struct.str_t* %7)
  %8 = load %struct.str_t*, %struct.str_t** %s2, align 4
  call void @str_del(%struct.str_t* %8)
  %9 = load %struct.str_t*, %struct.str_t** %s3, align 4
  call void @str_del(%struct.str_t* %9)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
