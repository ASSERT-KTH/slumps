
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for CmprRows()

; ModuleID = './Optional_parameters.c.bc'
source_filename = "./Optional_parameters.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.anon = type { i32 (i8*, i8*)*, i32, i32 }
%struct._IO_FILE = type opaque
%struct.sTable = type { i8***, i32, i32 }

@sortSpec = hidden global %struct.anon zeroinitializer, align 4
@.str = private unnamed_addr constant [4 x i8] c"   \00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.2 = private unnamed_addr constant [8 x i8] c" %-5.5s\00", align 1
@.str.3 = private unnamed_addr constant [8 x i8] c" %-9.9s\00", align 1
@__const.main.colFmts = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i32 0, i32 0)], align 4
@.str.4 = private unnamed_addr constant [5 x i8] c"a101\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"red\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"Java\00", align 1
@__const.main.r1 = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0)], align 4
@.str.7 = private unnamed_addr constant [5 x i8] c"ab40\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"gren\00", align 1
@.str.9 = private unnamed_addr constant [10 x i8] c"Smalltalk\00", align 1
@__const.main.r2 = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.9, i32 0, i32 0)], align 4
@.str.10 = private unnamed_addr constant [4 x i8] c"ab9\00", align 1
@.str.11 = private unnamed_addr constant [5 x i8] c"blue\00", align 1
@.str.12 = private unnamed_addr constant [8 x i8] c"Fortran\00", align 1
@__const.main.r3 = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.12, i32 0, i32 0)], align 4
@.str.13 = private unnamed_addr constant [5 x i8] c"ab09\00", align 1
@.str.14 = private unnamed_addr constant [5 x i8] c"ylow\00", align 1
@.str.15 = private unnamed_addr constant [7 x i8] c"Python\00", align 1
@__const.main.r4 = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.15, i32 0, i32 0)], align 4
@.str.16 = private unnamed_addr constant [5 x i8] c"ab1a\00", align 1
@.str.17 = private unnamed_addr constant [5 x i8] c"blak\00", align 1
@.str.18 = private unnamed_addr constant [7 x i8] c"Factor\00", align 1
@__const.main.r5 = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.18, i32 0, i32 0)], align 4
@.str.19 = private unnamed_addr constant [5 x i8] c"ab1b\00", align 1
@.str.20 = private unnamed_addr constant [5 x i8] c"brwn\00", align 1
@.str.21 = private unnamed_addr constant [8 x i8] c"C Sharp\00", align 1
@__const.main.r6 = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.21, i32 0, i32 0)], align 4
@.str.22 = private unnamed_addr constant [5 x i8] c"Ab1b\00", align 1
@.str.23 = private unnamed_addr constant [5 x i8] c"pink\00", align 1
@.str.24 = private unnamed_addr constant [5 x i8] c"Ruby\00", align 1
@__const.main.r7 = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.24, i32 0, i32 0)], align 4
@.str.25 = private unnamed_addr constant [4 x i8] c"ab1\00", align 1
@.str.26 = private unnamed_addr constant [5 x i8] c"orng\00", align 1
@.str.27 = private unnamed_addr constant [7 x i8] c"Scheme\00", align 1
@__const.main.r8 = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.26, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.27, i32 0, i32 0)], align 4
@.str.28 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.29 = private unnamed_addr constant [26 x i8] c"sort on col 0, ascending\0A\00", align 1
@stdout = external constant %struct._IO_FILE*, align 4
@.str.30 = private unnamed_addr constant [3 x i8] c"ro\00", align 1
@.str.31 = private unnamed_addr constant [32 x i8] c"sort on col 0, reverse.special\0A\00", align 1
@.str.32 = private unnamed_addr constant [2 x i8] c"c\00", align 1
@.str.33 = private unnamed_addr constant [26 x i8] c"sort on col 1, ascending\0A\00", align 1
@.str.34 = private unnamed_addr constant [3 x i8] c"cr\00", align 1
@.str.35 = private unnamed_addr constant [24 x i8] c"sort on col 2, reverse\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @CmprRows(i8* %aa, i8* %bb) #0 {
entry:
  %aa.addr = alloca i8*, align 4
  %bb.addr = alloca i8*, align 4
  %rA = alloca i8**, align 4
  %rB = alloca i8**, align 4
  %sortCol = alloca i32, align 4
  %left = alloca i8*, align 4
  %right = alloca i8*, align 4
  store i8* %aa, i8** %aa.addr, align 4
  store i8* %bb, i8** %bb.addr, align 4
  %0 = load i8*, i8** %aa.addr, align 4
  %1 = bitcast i8* %0 to i8***
  %2 = load i8**, i8*** %1, align 4
  store i8** %2, i8*** %rA, align 4
  %3 = load i8*, i8** %bb.addr, align 4
  %4 = bitcast i8* %3 to i8***
  %5 = load i8**, i8*** %4, align 4
  store i8** %5, i8*** %rB, align 4
  %6 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sortSpec, i32 0, i32 1), align 4
  store i32 %6, i32* %sortCol, align 4
  %7 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sortSpec, i32 0, i32 2), align 4
  %tobool = icmp ne i32 %7, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %8 = load i8**, i8*** %rB, align 4
  %9 = load i32, i32* %sortCol, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %8, i32 %9
  %10 = load i8*, i8** %arrayidx, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  %11 = load i8**, i8*** %rA, align 4
  %12 = load i32, i32* %sortCol, align 4
  %arrayidx1 = getelementptr inbounds i8*, i8** %11, i32 %12
  %13 = load i8*, i8** %arrayidx1, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %10, %cond.true ], [ %13, %cond.false ]
  store i8* %cond, i8** %left, align 4
  %14 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sortSpec, i32 0, i32 2), align 4
  %tobool2 = icmp ne i32 %14, 0
  br i1 %tobool2, label %cond.true3, label %cond.false5

cond.true3:                                       ; preds = %cond.end
  %15 = load i8**, i8*** %rA, align 4
  %16 = load i32, i32* %sortCol, align 4
  %arrayidx4 = getelementptr inbounds i8*, i8** %15, i32 %16
  %17 = load i8*, i8** %arrayidx4, align 4
  br label %cond.end7

cond.false5:                                      ; preds = %cond.end
  %18 = load i8**, i8*** %rB, align 4
  %19 = load i32, i32* %sortCol, align 4
  %arrayidx6 = getelementptr inbounds i8*, i8** %18, i32 %19
  %20 = load i8*, i8** %arrayidx6, align 4
  br label %cond.end7

cond.end7:                                        ; preds = %cond.false5, %cond.true3
  %cond8 = phi i8* [ %17, %cond.true3 ], [ %20, %cond.false5 ]
  store i8* %cond8, i8** %right, align 4
  %21 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** getelementptr inbounds (%struct.anon, %struct.anon* @sortSpec, i32 0, i32 0), align 4
  %22 = load i8*, i8** %left, align 4
  %23 = load i8*, i8** %right, align 4
  %call = call i32 %21(i8* %22, i8* %23)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @sortTable(%struct.sTable* %tbl, i8* %argSpec, ...) #0 {
entry:
  %tbl.addr = alloca %struct.sTable*, align 4
  %argSpec.addr = alloca i8*, align 4
  %vl = alloca i8*, align 4
  %p = alloca i8*, align 4
  %c = alloca i32, align 4
  store %struct.sTable* %tbl, %struct.sTable** %tbl.addr, align 4
  store i8* %argSpec, i8** %argSpec.addr, align 4
  store i32 (i8*, i8*)* @strcmp, i32 (i8*, i8*)** getelementptr inbounds (%struct.anon, %struct.anon* @sortSpec, i32 0, i32 0), align 4
  store i32 0, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sortSpec, i32 0, i32 1), align 4
  store i32 0, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sortSpec, i32 0, i32 2), align 4
  %vl1 = bitcast i8** %vl to i8*
  call void @llvm.va_start(i8* %vl1)
  %0 = load i8*, i8** %argSpec.addr, align 4
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.then, label %if.end15

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** %argSpec.addr, align 4
  store i8* %1, i8** %p, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %2 = load i8*, i8** %p, align 4
  %3 = load i8, i8* %2, align 1
  %tobool2 = icmp ne i8 %3, 0
  br i1 %tobool2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i8*, i8** %p, align 4
  %5 = load i8, i8* %4, align 1
  %conv = sext i8 %5 to i32
  switch i32 %conv, label %sw.epilog [
    i32 111, label %sw.bb
    i32 99, label %sw.bb3
    i32 114, label %sw.bb10
  ]

sw.bb:                                            ; preds = %for.body
  %argp.cur = load i8*, i8** %vl, align 4
  %argp.next = getelementptr inbounds i8, i8* %argp.cur, i32 4
  store i8* %argp.next, i8** %vl, align 4
  %6 = bitcast i8* %argp.cur to i32 (i8*, i8*)**
  %7 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %6, align 4
  store i32 (i8*, i8*)* %7, i32 (i8*, i8*)** getelementptr inbounds (%struct.anon, %struct.anon* @sortSpec, i32 0, i32 0), align 4
  br label %sw.epilog

sw.bb3:                                           ; preds = %for.body
  %argp.cur4 = load i8*, i8** %vl, align 4
  %argp.next5 = getelementptr inbounds i8, i8* %argp.cur4, i32 4
  store i8* %argp.next5, i8** %vl, align 4
  %8 = bitcast i8* %argp.cur4 to i32*
  %9 = load i32, i32* %8, align 4
  store i32 %9, i32* %c, align 4
  %10 = load i32, i32* %c, align 4
  %cmp = icmp sle i32 0, %10
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %sw.bb3
  %11 = load i32, i32* %c, align 4
  %12 = load %struct.sTable*, %struct.sTable** %tbl.addr, align 4
  %n_cols = getelementptr inbounds %struct.sTable, %struct.sTable* %12, i32 0, i32 2
  %13 = load i32, i32* %n_cols, align 4
  %cmp7 = icmp slt i32 %11, %13
  br i1 %cmp7, label %if.then9, label %if.end

if.then9:                                         ; preds = %land.lhs.true
  %14 = load i32, i32* %c, align 4
  store i32 %14, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sortSpec, i32 0, i32 1), align 4
  br label %if.end

if.end:                                           ; preds = %if.then9, %land.lhs.true, %sw.bb3
  br label %sw.epilog

sw.bb10:                                          ; preds = %for.body
  %argp.cur11 = load i8*, i8** %vl, align 4
  %argp.next12 = getelementptr inbounds i8, i8* %argp.cur11, i32 4
  store i8* %argp.next12, i8** %vl, align 4
  %15 = bitcast i8* %argp.cur11 to i32*
  %16 = load i32, i32* %15, align 4
  %cmp13 = icmp ne i32 0, %16
  %conv14 = zext i1 %cmp13 to i32
  store i32 %conv14, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sortSpec, i32 0, i32 2), align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %for.body, %sw.bb10, %if.end, %sw.bb
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %17 = load i8*, i8** %p, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %17, i32 1
  store i8* %incdec.ptr, i8** %p, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end15

if.end15:                                         ; preds = %for.end, %entry
  %vl16 = bitcast i8** %vl to i8*
  call void @llvm.va_end(i8* %vl16)
  %18 = load %struct.sTable*, %struct.sTable** %tbl.addr, align 4
  %rows = getelementptr inbounds %struct.sTable, %struct.sTable* %18, i32 0, i32 0
  %19 = load i8***, i8**** %rows, align 4
  %20 = bitcast i8*** %19 to i8*
  %21 = load %struct.sTable*, %struct.sTable** %tbl.addr, align 4
  %n_rows = getelementptr inbounds %struct.sTable, %struct.sTable* %21, i32 0, i32 1
  %22 = load i32, i32* %n_rows, align 4
  call void @qsort(i8* %20, i32 %22, i32 4, i32 (i8*, i8*)* @CmprRows)
  ret i32 0
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #1

; Function Attrs: nounwind
declare void @llvm.va_start(i8* %0) #2

; Function Attrs: nounwind
declare void @llvm.va_end(i8* %0) #2

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #3

; Function Attrs: noinline nounwind optnone
define hidden void @printTable(%struct.sTable* %tbl, %struct._IO_FILE* %fout, i8** %colFmts) #0 {
entry:
  %tbl.addr = alloca %struct.sTable*, align 4
  %fout.addr = alloca %struct._IO_FILE*, align 4
  %colFmts.addr = alloca i8**, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  store %struct.sTable* %tbl, %struct.sTable** %tbl.addr, align 4
  store %struct._IO_FILE* %fout, %struct._IO_FILE** %fout.addr, align 4
  store i8** %colFmts, i8*** %colFmts.addr, align 4
  store i32 0, i32* %row, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc8, %entry
  %0 = load i32, i32* %row, align 4
  %1 = load %struct.sTable*, %struct.sTable** %tbl.addr, align 4
  %n_rows = getelementptr inbounds %struct.sTable, %struct.sTable* %1, i32 0, i32 1
  %2 = load i32, i32* %n_rows, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end10

for.body:                                         ; preds = %for.cond
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %fout.addr, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %col, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %4 = load i32, i32* %col, align 4
  %5 = load %struct.sTable*, %struct.sTable** %tbl.addr, align 4
  %n_cols = getelementptr inbounds %struct.sTable, %struct.sTable* %5, i32 0, i32 2
  %6 = load i32, i32* %n_cols, align 4
  %cmp2 = icmp slt i32 %4, %6
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %fout.addr, align 4
  %8 = load i8**, i8*** %colFmts.addr, align 4
  %9 = load i32, i32* %col, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %8, i32 %9
  %10 = load i8*, i8** %arrayidx, align 4
  %11 = load %struct.sTable*, %struct.sTable** %tbl.addr, align 4
  %rows = getelementptr inbounds %struct.sTable, %struct.sTable* %11, i32 0, i32 0
  %12 = load i8***, i8**** %rows, align 4
  %13 = load i32, i32* %row, align 4
  %arrayidx4 = getelementptr inbounds i8**, i8*** %12, i32 %13
  %14 = load i8**, i8*** %arrayidx4, align 4
  %15 = load i32, i32* %col, align 4
  %arrayidx5 = getelementptr inbounds i8*, i8** %14, i32 %15
  %16 = load i8*, i8** %arrayidx5, align 4
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* %10, i8* %16)
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %17 = load i32, i32* %col, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %col, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** %fout.addr, align 4
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %18, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  br label %for.inc8

for.inc8:                                         ; preds = %for.end
  %19 = load i32, i32* %row, align 4
  %inc9 = add nsw i32 %19, 1
  store i32 %inc9, i32* %row, align 4
  br label %for.cond

for.end10:                                        ; preds = %for.cond
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** %fout.addr, align 4
  %call11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %20, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  ret void
}

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #3

; Function Attrs: noinline nounwind optnone
define hidden i32 @ord(i8 signext %v) #0 {
entry:
  %v.addr = alloca i8, align 1
  store i8 %v, i8* %v.addr, align 1
  %0 = load i8, i8* %v.addr, align 1
  %conv = sext i8 %0 to i32
  %sub = sub nsw i32 %conv, 48
  ret i32 %sub
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @cmprStrgs(i8* %s1, i8* %s2) #0 {
entry:
  %retval = alloca i32, align 4
  %s1.addr = alloca i8*, align 4
  %s2.addr = alloca i8*, align 4
  %p1 = alloca i8*, align 4
  %p2 = alloca i8*, align 4
  %mrk1 = alloca i8*, align 4
  %mrk2 = alloca i8*, align 4
  %v1 = alloca i32, align 4
  %v2 = alloca i32, align 4
  store i8* %s1, i8** %s1.addr, align 4
  store i8* %s2, i8** %s2.addr, align 4
  %0 = load i8*, i8** %s1.addr, align 4
  store i8* %0, i8** %p1, align 4
  %1 = load i8*, i8** %s2.addr, align 4
  store i8* %1, i8** %p2, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %2 = load i8*, i8** %p1, align 4
  %3 = load i8, i8* %2, align 1
  %conv = sext i8 %3 to i32
  %call = call i32 @tolower(i32 %conv) #5
  %4 = load i8*, i8** %p2, align 4
  %5 = load i8, i8* %4, align 1
  %conv1 = sext i8 %5 to i32
  %call2 = call i32 @tolower(i32 %conv1) #5
  %cmp = icmp eq i32 %call, %call2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %6 = load i8*, i8** %p1, align 4
  %7 = load i8, i8* %6, align 1
  %conv4 = sext i8 %7 to i32
  %tobool = icmp ne i32 %conv4, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %8 = phi i1 [ false, %while.cond ], [ %tobool, %land.rhs ]
  br i1 %8, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %9 = load i8*, i8** %p1, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr, i8** %p1, align 4
  %10 = load i8*, i8** %p2, align 4
  %incdec.ptr5 = getelementptr inbounds i8, i8* %10, i32 1
  store i8* %incdec.ptr5, i8** %p2, align 4
  br label %while.cond

while.end:                                        ; preds = %land.end
  br i1 false, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.end
  %11 = load i8*, i8** %p1, align 4
  %12 = load i8, i8* %11, align 1
  %conv6 = sext i8 %12 to i32
  %call7 = call i32 @isdigit(i32 %conv6) #5
  %tobool8 = icmp ne i32 %call7, 0
  br i1 %tobool8, label %land.lhs.true, label %if.end82

cond.false:                                       ; preds = %while.end
  %13 = load i8*, i8** %p1, align 4
  %14 = load i8, i8* %13, align 1
  %conv9 = sext i8 %14 to i32
  %sub = sub i32 %conv9, 48
  %cmp10 = icmp ult i32 %sub, 10
  br i1 %cmp10, label %land.lhs.true, label %if.end82

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  br i1 false, label %cond.true12, label %cond.false16

cond.true12:                                      ; preds = %land.lhs.true
  %15 = load i8*, i8** %p2, align 4
  %16 = load i8, i8* %15, align 1
  %conv13 = sext i8 %16 to i32
  %call14 = call i32 @isdigit(i32 %conv13) #5
  %tobool15 = icmp ne i32 %call14, 0
  br i1 %tobool15, label %if.then, label %if.end82

cond.false16:                                     ; preds = %land.lhs.true
  %17 = load i8*, i8** %p2, align 4
  %18 = load i8, i8* %17, align 1
  %conv17 = sext i8 %18 to i32
  %sub18 = sub i32 %conv17, 48
  %cmp19 = icmp ult i32 %sub18, 10
  br i1 %cmp19, label %if.then, label %if.end82

if.then:                                          ; preds = %cond.false16, %cond.true12
  %19 = load i8*, i8** %p1, align 4
  %20 = load i8, i8* %19, align 1
  %conv21 = sext i8 %20 to i32
  %cmp22 = icmp eq i32 %conv21, 48
  br i1 %cmp22, label %if.then27, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then
  %21 = load i8*, i8** %p2, align 4
  %22 = load i8, i8* %21, align 1
  %conv24 = sext i8 %22 to i32
  %cmp25 = icmp eq i32 %conv24, 48
  br i1 %cmp25, label %if.then27, label %if.end52

if.then27:                                        ; preds = %lor.lhs.false, %if.then
  br label %while.cond28

while.cond28:                                     ; preds = %if.end, %if.then27
  %23 = load i8*, i8** %p1, align 4
  %24 = load i8*, i8** %s1.addr, align 4
  %cmp29 = icmp ugt i8* %23, %24
  br i1 %cmp29, label %while.body31, label %while.end38

while.body31:                                     ; preds = %while.cond28
  %25 = load i8*, i8** %p1, align 4
  %incdec.ptr32 = getelementptr inbounds i8, i8* %25, i32 -1
  store i8* %incdec.ptr32, i8** %p1, align 4
  %26 = load i8*, i8** %p2, align 4
  %incdec.ptr33 = getelementptr inbounds i8, i8* %26, i32 -1
  store i8* %incdec.ptr33, i8** %p2, align 4
  %27 = load i8*, i8** %p1, align 4
  %28 = load i8, i8* %27, align 1
  %conv34 = sext i8 %28 to i32
  %cmp35 = icmp ne i32 %conv34, 48
  br i1 %cmp35, label %if.then37, label %if.end

if.then37:                                        ; preds = %while.body31
  br label %while.end38

if.end:                                           ; preds = %while.body31
  br label %while.cond28

while.end38:                                      ; preds = %if.then37, %while.cond28
  br i1 false, label %cond.true39, label %cond.false43

cond.true39:                                      ; preds = %while.end38
  %29 = load i8*, i8** %p1, align 4
  %30 = load i8, i8* %29, align 1
  %conv40 = sext i8 %30 to i32
  %call41 = call i32 @isdigit(i32 %conv40) #5
  %tobool42 = icmp ne i32 %call41, 0
  br i1 %tobool42, label %if.end51, label %if.then48

cond.false43:                                     ; preds = %while.end38
  %31 = load i8*, i8** %p1, align 4
  %32 = load i8, i8* %31, align 1
  %conv44 = sext i8 %32 to i32
  %sub45 = sub i32 %conv44, 48
  %cmp46 = icmp ult i32 %sub45, 10
  br i1 %cmp46, label %if.end51, label %if.then48

if.then48:                                        ; preds = %cond.false43, %cond.true39
  %33 = load i8*, i8** %p1, align 4
  %incdec.ptr49 = getelementptr inbounds i8, i8* %33, i32 1
  store i8* %incdec.ptr49, i8** %p1, align 4
  %34 = load i8*, i8** %p2, align 4
  %incdec.ptr50 = getelementptr inbounds i8, i8* %34, i32 1
  store i8* %incdec.ptr50, i8** %p2, align 4
  br label %if.end51

if.end51:                                         ; preds = %if.then48, %cond.false43, %cond.true39
  br label %if.end52

if.end52:                                         ; preds = %if.end51, %lor.lhs.false
  %35 = load i8*, i8** %p1, align 4
  store i8* %35, i8** %mrk1, align 4
  %36 = load i8*, i8** %p2, align 4
  store i8* %36, i8** %mrk2, align 4
  store i32 0, i32* %v1, align 4
  br label %while.cond53

while.cond53:                                     ; preds = %while.body58, %if.end52
  %37 = load i8*, i8** %p1, align 4
  %38 = load i8, i8* %37, align 1
  %conv54 = sext i8 %38 to i32
  %sub55 = sub i32 %conv54, 48
  %cmp56 = icmp ult i32 %sub55, 10
  br i1 %cmp56, label %while.body58, label %while.end61

while.body58:                                     ; preds = %while.cond53
  %39 = load i32, i32* %v1, align 4
  %mul = mul nsw i32 10, %39
  %40 = load i8*, i8** %p1, align 4
  %41 = load i8, i8* %40, align 1
  %call59 = call i32 @ord(i8 signext %41)
  %add = add nsw i32 %mul, %call59
  store i32 %add, i32* %v1, align 4
  %42 = load i8*, i8** %p1, align 4
  %incdec.ptr60 = getelementptr inbounds i8, i8* %42, i32 1
  store i8* %incdec.ptr60, i8** %p1, align 4
  br label %while.cond53

while.end61:                                      ; preds = %while.cond53
  store i32 0, i32* %v2, align 4
  br label %while.cond62

while.cond62:                                     ; preds = %while.body67, %while.end61
  %43 = load i8*, i8** %p2, align 4
  %44 = load i8, i8* %43, align 1
  %conv63 = sext i8 %44 to i32
  %sub64 = sub i32 %conv63, 48
  %cmp65 = icmp ult i32 %sub64, 10
  br i1 %cmp65, label %while.body67, label %while.end72

while.body67:                                     ; preds = %while.cond62
  %45 = load i32, i32* %v2, align 4
  %mul68 = mul nsw i32 10, %45
  %46 = load i8*, i8** %p2, align 4
  %47 = load i8, i8* %46, align 1
  %call69 = call i32 @ord(i8 signext %47)
  %add70 = add nsw i32 %mul68, %call69
  store i32 %add70, i32* %v2, align 4
  %48 = load i8*, i8** %p2, align 4
  %incdec.ptr71 = getelementptr inbounds i8, i8* %48, i32 1
  store i8* %incdec.ptr71, i8** %p2, align 4
  br label %while.cond62

while.end72:                                      ; preds = %while.cond62
  %49 = load i32, i32* %v1, align 4
  %50 = load i32, i32* %v2, align 4
  %cmp73 = icmp eq i32 %49, %50
  br i1 %cmp73, label %if.then75, label %if.end80

if.then75:                                        ; preds = %while.end72
  %51 = load i8*, i8** %p2, align 4
  %52 = load i8*, i8** %mrk2, align 4
  %sub.ptr.lhs.cast = ptrtoint i8* %51 to i32
  %sub.ptr.rhs.cast = ptrtoint i8* %52 to i32
  %sub.ptr.sub = sub i32 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %53 = load i8*, i8** %p1, align 4
  %54 = load i8*, i8** %mrk1, align 4
  %sub.ptr.lhs.cast76 = ptrtoint i8* %53 to i32
  %sub.ptr.rhs.cast77 = ptrtoint i8* %54 to i32
  %sub.ptr.sub78 = sub i32 %sub.ptr.lhs.cast76, %sub.ptr.rhs.cast77
  %sub79 = sub nsw i32 %sub.ptr.sub, %sub.ptr.sub78
  store i32 %sub79, i32* %retval, align 4
  br label %return

if.end80:                                         ; preds = %while.end72
  %55 = load i32, i32* %v1, align 4
  %56 = load i32, i32* %v2, align 4
  %sub81 = sub nsw i32 %55, %56
  store i32 %sub81, i32* %retval, align 4
  br label %return

if.end82:                                         ; preds = %cond.false16, %cond.true12, %cond.false, %cond.true
  %57 = load i8*, i8** %p1, align 4
  %58 = load i8, i8* %57, align 1
  %conv83 = sext i8 %58 to i32
  %call84 = call i32 @tolower(i32 %conv83) #5
  %59 = load i8*, i8** %p2, align 4
  %60 = load i8, i8* %59, align 1
  %conv85 = sext i8 %60 to i32
  %call86 = call i32 @tolower(i32 %conv85) #5
  %cmp87 = icmp ne i32 %call84, %call86
  br i1 %cmp87, label %if.then89, label %if.end95

if.then89:                                        ; preds = %if.end82
  %61 = load i8*, i8** %p1, align 4
  %62 = load i8, i8* %61, align 1
  %conv90 = sext i8 %62 to i32
  %call91 = call i32 @tolower(i32 %conv90) #5
  %63 = load i8*, i8** %p2, align 4
  %64 = load i8, i8* %63, align 1
  %conv92 = sext i8 %64 to i32
  %call93 = call i32 @tolower(i32 %conv92) #5
  %sub94 = sub nsw i32 %call91, %call93
  store i32 %sub94, i32* %retval, align 4
  br label %return

if.end95:                                         ; preds = %if.end82
  %65 = load i8*, i8** %s1.addr, align 4
  store i8* %65, i8** %p1, align 4
  %66 = load i8*, i8** %s2.addr, align 4
  store i8* %66, i8** %p2, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end95
  %67 = load i8*, i8** %p1, align 4
  %68 = load i8, i8* %67, align 1
  %conv96 = sext i8 %68 to i32
  %69 = load i8*, i8** %p2, align 4
  %70 = load i8, i8* %69, align 1
  %conv97 = sext i8 %70 to i32
  %cmp98 = icmp eq i32 %conv96, %conv97
  br i1 %cmp98, label %land.rhs100, label %land.end103

land.rhs100:                                      ; preds = %for.cond
  %71 = load i8*, i8** %p1, align 4
  %72 = load i8, i8* %71, align 1
  %conv101 = sext i8 %72 to i32
  %tobool102 = icmp ne i32 %conv101, 0
  br label %land.end103

land.end103:                                      ; preds = %land.rhs100, %for.cond
  %73 = phi i1 [ false, %for.cond ], [ %tobool102, %land.rhs100 ]
  br i1 %73, label %for.body, label %for.end

for.body:                                         ; preds = %land.end103
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %74 = load i8*, i8** %p1, align 4
  %incdec.ptr104 = getelementptr inbounds i8, i8* %74, i32 1
  store i8* %incdec.ptr104, i8** %p1, align 4
  %75 = load i8*, i8** %p2, align 4
  %incdec.ptr105 = getelementptr inbounds i8, i8* %75, i32 1
  store i8* %incdec.ptr105, i8** %p2, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end103
  %76 = load i8*, i8** %p1, align 4
  %77 = load i8, i8* %76, align 1
  %conv106 = sext i8 %77 to i32
  %78 = load i8*, i8** %p2, align 4
  %79 = load i8, i8* %78, align 1
  %conv107 = sext i8 %79 to i32
  %sub108 = sub nsw i32 %conv106, %conv107
  store i32 %sub108, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then89, %if.end80, %if.then75
  %80 = load i32, i32* %retval, align 4
  ret i32 %80
}

; Function Attrs: nounwind readonly
declare i32 @tolower(i32 %0) #1

; Function Attrs: nounwind readonly
declare i32 @isdigit(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %colFmts = alloca [3 x i8*], align 4
  %r1 = alloca [3 x i8*], align 4
  %r2 = alloca [3 x i8*], align 4
  %r3 = alloca [3 x i8*], align 4
  %r4 = alloca [3 x i8*], align 4
  %r5 = alloca [3 x i8*], align 4
  %r6 = alloca [3 x i8*], align 4
  %r7 = alloca [3 x i8*], align 4
  %r8 = alloca [3 x i8*], align 4
  %rows = alloca [8 x i8**], align 16
  %table = alloca %struct.sTable, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [3 x i8*]* %colFmts to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 bitcast ([3 x i8*]* @__const.main.colFmts to i8*), i32 12, i1 false)
  %1 = bitcast [3 x i8*]* %r1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %1, i8* align 4 bitcast ([3 x i8*]* @__const.main.r1 to i8*), i32 12, i1 false)
  %2 = bitcast [3 x i8*]* %r2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %2, i8* align 4 bitcast ([3 x i8*]* @__const.main.r2 to i8*), i32 12, i1 false)
  %3 = bitcast [3 x i8*]* %r3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %3, i8* align 4 bitcast ([3 x i8*]* @__const.main.r3 to i8*), i32 12, i1 false)
  %4 = bitcast [3 x i8*]* %r4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %4, i8* align 4 bitcast ([3 x i8*]* @__const.main.r4 to i8*), i32 12, i1 false)
  %5 = bitcast [3 x i8*]* %r5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %5, i8* align 4 bitcast ([3 x i8*]* @__const.main.r5 to i8*), i32 12, i1 false)
  %6 = bitcast [3 x i8*]* %r6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %6, i8* align 4 bitcast ([3 x i8*]* @__const.main.r6 to i8*), i32 12, i1 false)
  %7 = bitcast [3 x i8*]* %r7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %7, i8* align 4 bitcast ([3 x i8*]* @__const.main.r7 to i8*), i32 12, i1 false)
  %8 = bitcast [3 x i8*]* %r8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %8, i8* align 4 bitcast ([3 x i8*]* @__const.main.r8 to i8*), i32 12, i1 false)
  %arrayinit.begin = getelementptr inbounds [8 x i8**], [8 x i8**]* %rows, i32 0, i32 0
  %arraydecay = getelementptr inbounds [3 x i8*], [3 x i8*]* %r1, i32 0, i32 0
  store i8** %arraydecay, i8*** %arrayinit.begin, align 4
  %arrayinit.element = getelementptr inbounds i8**, i8*** %arrayinit.begin, i32 1
  %arraydecay1 = getelementptr inbounds [3 x i8*], [3 x i8*]* %r2, i32 0, i32 0
  store i8** %arraydecay1, i8*** %arrayinit.element, align 4
  %arrayinit.element2 = getelementptr inbounds i8**, i8*** %arrayinit.element, i32 1
  %arraydecay3 = getelementptr inbounds [3 x i8*], [3 x i8*]* %r3, i32 0, i32 0
  store i8** %arraydecay3, i8*** %arrayinit.element2, align 4
  %arrayinit.element4 = getelementptr inbounds i8**, i8*** %arrayinit.element2, i32 1
  %arraydecay5 = getelementptr inbounds [3 x i8*], [3 x i8*]* %r4, i32 0, i32 0
  store i8** %arraydecay5, i8*** %arrayinit.element4, align 4
  %arrayinit.element6 = getelementptr inbounds i8**, i8*** %arrayinit.element4, i32 1
  %arraydecay7 = getelementptr inbounds [3 x i8*], [3 x i8*]* %r5, i32 0, i32 0
  store i8** %arraydecay7, i8*** %arrayinit.element6, align 4
  %arrayinit.element8 = getelementptr inbounds i8**, i8*** %arrayinit.element6, i32 1
  %arraydecay9 = getelementptr inbounds [3 x i8*], [3 x i8*]* %r6, i32 0, i32 0
  store i8** %arraydecay9, i8*** %arrayinit.element8, align 4
  %arrayinit.element10 = getelementptr inbounds i8**, i8*** %arrayinit.element8, i32 1
  %arraydecay11 = getelementptr inbounds [3 x i8*], [3 x i8*]* %r7, i32 0, i32 0
  store i8** %arraydecay11, i8*** %arrayinit.element10, align 4
  %arrayinit.element12 = getelementptr inbounds i8**, i8*** %arrayinit.element10, i32 1
  %arraydecay13 = getelementptr inbounds [3 x i8*], [3 x i8*]* %r8, i32 0, i32 0
  store i8** %arraydecay13, i8*** %arrayinit.element12, align 4
  %arraydecay14 = getelementptr inbounds [8 x i8**], [8 x i8**]* %rows, i32 0, i32 0
  %rows15 = getelementptr inbounds %struct.sTable, %struct.sTable* %table, i32 0, i32 0
  store i8*** %arraydecay14, i8**** %rows15, align 4
  %n_rows = getelementptr inbounds %struct.sTable, %struct.sTable* %table, i32 0, i32 1
  store i32 8, i32* %n_rows, align 4
  %n_cols = getelementptr inbounds %struct.sTable, %struct.sTable* %table, i32 0, i32 2
  store i32 3, i32* %n_cols, align 4
  %call = call i32 (%struct.sTable*, i8*, ...) @sortTable(%struct.sTable* %table, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.28, i32 0, i32 0))
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.29, i32 0, i32 0))
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %arraydecay17 = getelementptr inbounds [3 x i8*], [3 x i8*]* %colFmts, i32 0, i32 0
  call void @printTable(%struct.sTable* %table, %struct._IO_FILE* %9, i8** %arraydecay17)
  %call18 = call i32 (%struct.sTable*, i8*, ...) @sortTable(%struct.sTable* %table, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.30, i32 0, i32 0), i32 1, i32 (i8*, i8*)* @cmprStrgs)
  %call19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.31, i32 0, i32 0))
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %arraydecay20 = getelementptr inbounds [3 x i8*], [3 x i8*]* %colFmts, i32 0, i32 0
  call void @printTable(%struct.sTable* %table, %struct._IO_FILE* %10, i8** %arraydecay20)
  %call21 = call i32 (%struct.sTable*, i8*, ...) @sortTable(%struct.sTable* %table, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.32, i32 0, i32 0), i32 1)
  %call22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.33, i32 0, i32 0))
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %arraydecay23 = getelementptr inbounds [3 x i8*], [3 x i8*]* %colFmts, i32 0, i32 0
  call void @printTable(%struct.sTable* %table, %struct._IO_FILE* %11, i8** %arraydecay23)
  %call24 = call i32 (%struct.sTable*, i8*, ...) @sortTable(%struct.sTable* %table, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.34, i32 0, i32 0), i32 2, i32 1)
  %call25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.35, i32 0, i32 0))
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %arraydecay26 = getelementptr inbounds [3 x i8*], [3 x i8*]* %colFmts, i32 0, i32 0
  call void @printTable(%struct.sTable* %table, %struct._IO_FILE* %12, i8** %arraydecay26)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #4

declare i32 @printf(i8* %0, ...) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind willreturn }
attributes #5 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %6 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sortSpec, i32 0, i32 1), align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sortSpec, i32 0, i32 2), align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %7, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %sortCol, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %sortCol, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sortSpec, i32 0, i32 2), align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool2 = icmp ne i32 %14, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %sortCol, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %sortCol, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 %21(i8* %22, i8* %23)
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for CmprRows()

; entering Souper's runOnFunction() for sortTable()

; ModuleID = './Optional_parameters.c.bc'
source_filename = "./Optional_parameters.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.anon = type { i32 (i8*, i8*)*, i32, i32 }
%struct._IO_FILE = type opaque
%struct.sTable = type { i8***, i32, i32 }

@sortSpec = hidden global %struct.anon zeroinitializer, align 4
@.str = private unnamed_addr constant [4 x i8] c"   \00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.2 = private unnamed_addr constant [8 x i8] c" %-5.5s\00", align 1
@.str.3 = private unnamed_addr constant [8 x i8] c" %-9.9s\00", align 1
@__const.main.colFmts = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i32 0, i32 0)], align 4
@.str.4 = private unnamed_addr constant [5 x i8] c"a101\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"red\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"Java\00", align 1
@__const.main.r1 = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0)], align 4
@.str.7 = private unnamed_addr constant [5 x i8] c"ab40\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"gren\00", align 1
@.str.9 = private unnamed_addr constant [10 x i8] c"Smalltalk\00", align 1
@__const.main.r2 = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.9, i32 0, i32 0)], align 4
@.str.10 = private unnamed_addr constant [4 x i8] c"ab9\00", align 1
@.str.11 = private unnamed_addr constant [5 x i8] c"blue\00", align 1
@.str.12 = private unnamed_addr constant [8 x i8] c"Fortran\00", align 1
@__const.main.r3 = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.12, i32 0, i32 0)], align 4
@.str.13 = private unnamed_addr constant [5 x i8] c"ab09\00", align 1
@.str.14 = private unnamed_addr constant [5 x i8] c"ylow\00", align 1
@.str.15 = private unnamed_addr constant [7 x i8] c"Python\00", align 1
@__const.main.r4 = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.15, i32 0, i32 0)], align 4
@.str.16 = private unnamed_addr constant [5 x i8] c"ab1a\00", align 1
@.str.17 = private unnamed_addr constant [5 x i8] c"blak\00", align 1
@.str.18 = private unnamed_addr constant [7 x i8] c"Factor\00", align 1
@__const.main.r5 = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.18, i32 0, i32 0)], align 4
@.str.19 = private unnamed_addr constant [5 x i8] c"ab1b\00", align 1
@.str.20 = private unnamed_addr constant [5 x i8] c"brwn\00", align 1
@.str.21 = private unnamed_addr constant [8 x i8] c"C Sharp\00", align 1
@__const.main.r6 = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.21, i32 0, i32 0)], align 4
@.str.22 = private unnamed_addr constant [5 x i8] c"Ab1b\00", align 1
@.str.23 = private unnamed_addr constant [5 x i8] c"pink\00", align 1
@.str.24 = private unnamed_addr constant [5 x i8] c"Ruby\00", align 1
@__const.main.r7 = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.24, i32 0, i32 0)], align 4
@.str.25 = private unnamed_addr constant [4 x i8] c"ab1\00", align 1
@.str.26 = private unnamed_addr constant [5 x i8] c"orng\00", align 1
@.str.27 = private unnamed_addr constant [7 x i8] c"Scheme\00", align 1
@__const.main.r8 = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.26, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.27, i32 0, i32 0)], align 4
@.str.28 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.29 = private unnamed_addr constant [26 x i8] c"sort on col 0, ascending\0A\00", align 1
@stdout = external constant %struct._IO_FILE*, align 4
@.str.30 = private unnamed_addr constant [3 x i8] c"ro\00", align 1
@.str.31 = private unnamed_addr constant [32 x i8] c"sort on col 0, reverse.special\0A\00", align 1
@.str.32 = private unnamed_addr constant [2 x i8] c"c\00", align 1
@.str.33 = private unnamed_addr constant [26 x i8] c"sort on col 1, ascending\0A\00", align 1
@.str.34 = private unnamed_addr constant [3 x i8] c"cr\00", align 1
@.str.35 = private unnamed_addr constant [24 x i8] c"sort on col 2, reverse\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @CmprRows(i8* %aa, i8* %bb) #0 {
entry:
  %aa.addr = alloca i8*, align 4
  %bb.addr = alloca i8*, align 4
  %rA = alloca i8**, align 4
  %rB = alloca i8**, align 4
  %sortCol = alloca i32, align 4
  %left = alloca i8*, align 4
  %right = alloca i8*, align 4
  store i8* %aa, i8** %aa.addr, align 4
  store i8* %bb, i8** %bb.addr, align 4
  %0 = load i8*, i8** %aa.addr, align 4
  %1 = bitcast i8* %0 to i8***
  %2 = load i8**, i8*** %1, align 4
  store i8** %2, i8*** %rA, align 4
  %3 = load i8*, i8** %bb.addr, align 4
  %4 = bitcast i8* %3 to i8***
  %5 = load i8**, i8*** %4, align 4
  store i8** %5, i8*** %rB, align 4
  %6 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sortSpec, i32 0, i32 1), align 4
  store i32 %6, i32* %sortCol, align 4
  %7 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sortSpec, i32 0, i32 2), align 4
  %tobool = icmp ne i32 %7, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %8 = load i8**, i8*** %rB, align 4
  %9 = load i32, i32* %sortCol, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %8, i32 %9
  %10 = load i8*, i8** %arrayidx, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  %11 = load i8**, i8*** %rA, align 4
  %12 = load i32, i32* %sortCol, align 4
  %arrayidx1 = getelementptr inbounds i8*, i8** %11, i32 %12
  %13 = load i8*, i8** %arrayidx1, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %10, %cond.true ], [ %13, %cond.false ]
  store i8* %cond, i8** %left, align 4
  %14 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sortSpec, i32 0, i32 2), align 4
  %tobool2 = icmp ne i32 %14, 0
  br i1 %tobool2, label %cond.true3, label %cond.false5

cond.true3:                                       ; preds = %cond.end
  %15 = load i8**, i8*** %rA, align 4
  %16 = load i32, i32* %sortCol, align 4
  %arrayidx4 = getelementptr inbounds i8*, i8** %15, i32 %16
  %17 = load i8*, i8** %arrayidx4, align 4
  br label %cond.end7

cond.false5:                                      ; preds = %cond.end
  %18 = load i8**, i8*** %rB, align 4
  %19 = load i32, i32* %sortCol, align 4
  %arrayidx6 = getelementptr inbounds i8*, i8** %18, i32 %19
  %20 = load i8*, i8** %arrayidx6, align 4
  br label %cond.end7

cond.end7:                                        ; preds = %cond.false5, %cond.true3
  %cond8 = phi i8* [ %17, %cond.true3 ], [ %20, %cond.false5 ]
  store i8* %cond8, i8** %right, align 4
  %21 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** getelementptr inbounds (%struct.anon, %struct.anon* @sortSpec, i32 0, i32 0), align 4
  %22 = load i8*, i8** %left, align 4
  %23 = load i8*, i8** %right, align 4
  %call = call i32 %21(i8* %22, i8* %23)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @sortTable(%struct.sTable* %tbl, i8* %argSpec, ...) #0 {
entry:
  %tbl.addr = alloca %struct.sTable*, align 4
  %argSpec.addr = alloca i8*, align 4
  %vl = alloca i8*, align 4
  %p = alloca i8*, align 4
  %c = alloca i32, align 4
  store %struct.sTable* %tbl, %struct.sTable** %tbl.addr, align 4
  store i8* %argSpec, i8** %argSpec.addr, align 4
  store i32 (i8*, i8*)* @strcmp, i32 (i8*, i8*)** getelementptr inbounds (%struct.anon, %struct.anon* @sortSpec, i32 0, i32 0), align 4
  store i32 0, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sortSpec, i32 0, i32 1), align 4
  store i32 0, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sortSpec, i32 0, i32 2), align 4
  %vl1 = bitcast i8** %vl to i8*
  call void @llvm.va_start(i8* %vl1)
  %0 = load i8*, i8** %argSpec.addr, align 4
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.then, label %if.end15

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** %argSpec.addr, align 4
  store i8* %1, i8** %p, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %2 = load i8*, i8** %p, align 4
  %3 = load i8, i8* %2, align 1
  %tobool2 = icmp ne i8 %3, 0
  br i1 %tobool2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i8*, i8** %p, align 4
  %5 = load i8, i8* %4, align 1
  %conv = sext i8 %5 to i32
  switch i32 %conv, label %sw.epilog [
    i32 111, label %sw.bb
    i32 99, label %sw.bb3
    i32 114, label %sw.bb10
  ]

sw.bb:                                            ; preds = %for.body
  %argp.cur = load i8*, i8** %vl, align 4
  %argp.next = getelementptr inbounds i8, i8* %argp.cur, i32 4
  store i8* %argp.next, i8** %vl, align 4
  %6 = bitcast i8* %argp.cur to i32 (i8*, i8*)**
  %7 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %6, align 4
  store i32 (i8*, i8*)* %7, i32 (i8*, i8*)** getelementptr inbounds (%struct.anon, %struct.anon* @sortSpec, i32 0, i32 0), align 4
  br label %sw.epilog

sw.bb3:                                           ; preds = %for.body
  %argp.cur4 = load i8*, i8** %vl, align 4
  %argp.next5 = getelementptr inbounds i8, i8* %argp.cur4, i32 4
  store i8* %argp.next5, i8** %vl, align 4
  %8 = bitcast i8* %argp.cur4 to i32*
  %9 = load i32, i32* %8, align 4
  store i32 %9, i32* %c, align 4
  %10 = load i32, i32* %c, align 4
  %cmp = icmp sle i32 0, %10
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %sw.bb3
  %11 = load i32, i32* %c, align 4
  %12 = load %struct.sTable*, %struct.sTable** %tbl.addr, align 4
  %n_cols = getelementptr inbounds %struct.sTable, %struct.sTable* %12, i32 0, i32 2
  %13 = load i32, i32* %n_cols, align 4
  %cmp7 = icmp slt i32 %11, %13
  br i1 %cmp7, label %if.then9, label %if.end

if.then9:                                         ; preds = %land.lhs.true
  %14 = load i32, i32* %c, align 4
  store i32 %14, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sortSpec, i32 0, i32 1), align 4
  br label %if.end

if.end:                                           ; preds = %if.then9, %land.lhs.true, %sw.bb3
  br label %sw.epilog

sw.bb10:                                          ; preds = %for.body
  %argp.cur11 = load i8*, i8** %vl, align 4
  %argp.next12 = getelementptr inbounds i8, i8* %argp.cur11, i32 4
  store i8* %argp.next12, i8** %vl, align 4
  %15 = bitcast i8* %argp.cur11 to i32*
  %16 = load i32, i32* %15, align 4
  %cmp13 = icmp ne i32 0, %16
  %conv14 = zext i1 %cmp13 to i32
  store i32 %conv14, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sortSpec, i32 0, i32 2), align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %for.body, %sw.bb10, %if.end, %sw.bb
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %17 = load i8*, i8** %p, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %17, i32 1
  store i8* %incdec.ptr, i8** %p, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end15

if.end15:                                         ; preds = %for.end, %entry
  %vl16 = bitcast i8** %vl to i8*
  call void @llvm.va_end(i8* %vl16)
  %18 = load %struct.sTable*, %struct.sTable** %tbl.addr, align 4
  %rows = getelementptr inbounds %struct.sTable, %struct.sTable* %18, i32 0, i32 0
  %19 = load i8***, i8**** %rows, align 4
  %20 = bitcast i8*** %19 to i8*
  %21 = load %struct.sTable*, %struct.sTable** %tbl.addr, align 4
  %n_rows = getelementptr inbounds %struct.sTable, %struct.sTable* %21, i32 0, i32 1
  %22 = load i32, i32* %n_rows, align 4
  call void @qsort(i8* %20, i32 %22, i32 4, i32 (i8*, i8*)* @CmprRows)
  ret i32 0
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #1

; Function Attrs: nounwind
declare void @llvm.va_start(i8* %0) #2

; Function Attrs: nounwind
declare void @llvm.va_end(i8* %0) #2

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #3

; Function Attrs: noinline nounwind optnone
define hidden void @printTable(%struct.sTable* %tbl, %struct._IO_FILE* %fout, i8** %colFmts) #0 {
entry:
  %tbl.addr = alloca %struct.sTable*, align 4
  %fout.addr = alloca %struct._IO_FILE*, align 4
  %colFmts.addr = alloca i8**, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  store %struct.sTable* %tbl, %struct.sTable** %tbl.addr, align 4
  store %struct._IO_FILE* %fout, %struct._IO_FILE** %fout.addr, align 4
  store i8** %colFmts, i8*** %colFmts.addr, align 4
  store i32 0, i32* %row, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc8, %entry
  %0 = load i32, i32* %row, align 4
  %1 = load %struct.sTable*, %struct.sTable** %tbl.addr, align 4
  %n_rows = getelementptr inbounds %struct.sTable, %struct.sTable* %1, i32 0, i32 1
  %2 = load i32, i32* %n_rows, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end10

for.body:                                         ; preds = %for.cond
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %fout.addr, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %col, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %4 = load i32, i32* %col, align 4
  %5 = load %struct.sTable*, %struct.sTable** %tbl.addr, align 4
  %n_cols = getelementptr inbounds %struct.sTable, %struct.sTable* %5, i32 0, i32 2
  %6 = load i32, i32* %n_cols, align 4
  %cmp2 = icmp slt i32 %4, %6
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %fout.addr, align 4
  %8 = load i8**, i8*** %colFmts.addr, align 4
  %9 = load i32, i32* %col, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %8, i32 %9
  %10 = load i8*, i8** %arrayidx, align 4
  %11 = load %struct.sTable*, %struct.sTable** %tbl.addr, align 4
  %rows = getelementptr inbounds %struct.sTable, %struct.sTable* %11, i32 0, i32 0
  %12 = load i8***, i8**** %rows, align 4
  %13 = load i32, i32* %row, align 4
  %arrayidx4 = getelementptr inbounds i8**, i8*** %12, i32 %13
  %14 = load i8**, i8*** %arrayidx4, align 4
  %15 = load i32, i32* %col, align 4
  %arrayidx5 = getelementptr inbounds i8*, i8** %14, i32 %15
  %16 = load i8*, i8** %arrayidx5, align 4
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* %10, i8* %16)
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %17 = load i32, i32* %col, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %col, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** %fout.addr, align 4
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %18, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  br label %for.inc8

for.inc8:                                         ; preds = %for.end
  %19 = load i32, i32* %row, align 4
  %inc9 = add nsw i32 %19, 1
  store i32 %inc9, i32* %row, align 4
  br label %for.cond

for.end10:                                        ; preds = %for.cond
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** %fout.addr, align 4
  %call11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %20, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  ret void
}

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #3

; Function Attrs: noinline nounwind optnone
define hidden i32 @ord(i8 signext %v) #0 {
entry:
  %v.addr = alloca i8, align 1
  store i8 %v, i8* %v.addr, align 1
  %0 = load i8, i8* %v.addr, align 1
  %conv = sext i8 %0 to i32
  %sub = sub nsw i32 %conv, 48
  ret i32 %sub
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @cmprStrgs(i8* %s1, i8* %s2) #0 {
entry:
  %retval = alloca i32, align 4
  %s1.addr = alloca i8*, align 4
  %s2.addr = alloca i8*, align 4
  %p1 = alloca i8*, align 4
  %p2 = alloca i8*, align 4
  %mrk1 = alloca i8*, align 4
  %mrk2 = alloca i8*, align 4
  %v1 = alloca i32, align 4
  %v2 = alloca i32, align 4
  store i8* %s1, i8** %s1.addr, align 4
  store i8* %s2, i8** %s2.addr, align 4
  %0 = load i8*, i8** %s1.addr, align 4
  store i8* %0, i8** %p1, align 4
  %1 = load i8*, i8** %s2.addr, align 4
  store i8* %1, i8** %p2, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %2 = load i8*, i8** %p1, align 4
  %3 = load i8, i8* %2, align 1
  %conv = sext i8 %3 to i32
  %call = call i32 @tolower(i32 %conv) #5
  %4 = load i8*, i8** %p2, align 4
  %5 = load i8, i8* %4, align 1
  %conv1 = sext i8 %5 to i32
  %call2 = call i32 @tolower(i32 %conv1) #5
  %cmp = icmp eq i32 %call, %call2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %6 = load i8*, i8** %p1, align 4
  %7 = load i8, i8* %6, align 1
  %conv4 = sext i8 %7 to i32
  %tobool = icmp ne i32 %conv4, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %8 = phi i1 [ false, %while.cond ], [ %tobool, %land.rhs ]
  br i1 %8, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %9 = load i8*, i8** %p1, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr, i8** %p1, align 4
  %10 = load i8*, i8** %p2, align 4
  %incdec.ptr5 = getelementptr inbounds i8, i8* %10, i32 1
  store i8* %incdec.ptr5, i8** %p2, align 4
  br label %while.cond

while.end:                                        ; preds = %land.end
  br i1 false, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.end
  %11 = load i8*, i8** %p1, align 4
  %12 = load i8, i8* %11, align 1
  %conv6 = sext i8 %12 to i32
  %call7 = call i32 @isdigit(i32 %conv6) #5
  %tobool8 = icmp ne i32 %call7, 0
  br i1 %tobool8, label %land.lhs.true, label %if.end82

cond.false:                                       ; preds = %while.end
  %13 = load i8*, i8** %p1, align 4
  %14 = load i8, i8* %13, align 1
  %conv9 = sext i8 %14 to i32
  %sub = sub i32 %conv9, 48
  %cmp10 = icmp ult i32 %sub, 10
  br i1 %cmp10, label %land.lhs.true, label %if.end82

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  br i1 false, label %cond.true12, label %cond.false16

cond.true12:                                      ; preds = %land.lhs.true
  %15 = load i8*, i8** %p2, align 4
  %16 = load i8, i8* %15, align 1
  %conv13 = sext i8 %16 to i32
  %call14 = call i32 @isdigit(i32 %conv13) #5
  %tobool15 = icmp ne i32 %call14, 0
  br i1 %tobool15, label %if.then, label %if.end82

cond.false16:                                     ; preds = %land.lhs.true
  %17 = load i8*, i8** %p2, align 4
  %18 = load i8, i8* %17, align 1
  %conv17 = sext i8 %18 to i32
  %sub18 = sub i32 %conv17, 48
  %cmp19 = icmp ult i32 %sub18, 10
  br i1 %cmp19, label %if.then, label %if.end82

if.then:                                          ; preds = %cond.false16, %cond.true12
  %19 = load i8*, i8** %p1, align 4
  %20 = load i8, i8* %19, align 1
  %conv21 = sext i8 %20 to i32
  %cmp22 = icmp eq i32 %conv21, 48
  br i1 %cmp22, label %if.then27, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then
  %21 = load i8*, i8** %p2, align 4
  %22 = load i8, i8* %21, align 1
  %conv24 = sext i8 %22 to i32
  %cmp25 = icmp eq i32 %conv24, 48
  br i1 %cmp25, label %if.then27, label %if.end52

if.then27:                                        ; preds = %lor.lhs.false, %if.then
  br label %while.cond28

while.cond28:                                     ; preds = %if.end, %if.then27
  %23 = load i8*, i8** %p1, align 4
  %24 = load i8*, i8** %s1.addr, align 4
  %cmp29 = icmp ugt i8* %23, %24
  br i1 %cmp29, label %while.body31, label %while.end38

while.body31:                                     ; preds = %while.cond28
  %25 = load i8*, i8** %p1, align 4
  %incdec.ptr32 = getelementptr inbounds i8, i8* %25, i32 -1
  store i8* %incdec.ptr32, i8** %p1, align 4
  %26 = load i8*, i8** %p2, align 4
  %incdec.ptr33 = getelementptr inbounds i8, i8* %26, i32 -1
  store i8* %incdec.ptr33, i8** %p2, align 4
  %27 = load i8*, i8** %p1, align 4
  %28 = load i8, i8* %27, align 1
  %conv34 = sext i8 %28 to i32
  %cmp35 = icmp ne i32 %conv34, 48
  br i1 %cmp35, label %if.then37, label %if.end

if.then37:                                        ; preds = %while.body31
  br label %while.end38

if.end:                                           ; preds = %while.body31
  br label %while.cond28

while.end38:                                      ; preds = %if.then37, %while.cond28
  br i1 false, label %cond.true39, label %cond.false43

cond.true39:                                      ; preds = %while.end38
  %29 = load i8*, i8** %p1, align 4
  %30 = load i8, i8* %29, align 1
  %conv40 = sext i8 %30 to i32
  %call41 = call i32 @isdigit(i32 %conv40) #5
  %tobool42 = icmp ne i32 %call41, 0
  br i1 %tobool42, label %if.end51, label %if.then48

cond.false43:                                     ; preds = %while.end38
  %31 = load i8*, i8** %p1, align 4
  %32 = load i8, i8* %31, align 1
  %conv44 = sext i8 %32 to i32
  %sub45 = sub i32 %conv44, 48
  %cmp46 = icmp ult i32 %sub45, 10
  br i1 %cmp46, label %if.end51, label %if.then48

if.then48:                                        ; preds = %cond.false43, %cond.true39
  %33 = load i8*, i8** %p1, align 4
  %incdec.ptr49 = getelementptr inbounds i8, i8* %33, i32 1
  store i8* %incdec.ptr49, i8** %p1, align 4
  %34 = load i8*, i8** %p2, align 4
  %incdec.ptr50 = getelementptr inbounds i8, i8* %34, i32 1
  store i8* %incdec.ptr50, i8** %p2, align 4
  br label %if.end51

if.end51:                                         ; preds = %if.then48, %cond.false43, %cond.true39
  br label %if.end52

if.end52:                                         ; preds = %if.end51, %lor.lhs.false
  %35 = load i8*, i8** %p1, align 4
  store i8* %35, i8** %mrk1, align 4
  %36 = load i8*, i8** %p2, align 4
  store i8* %36, i8** %mrk2, align 4
  store i32 0, i32* %v1, align 4
  br label %while.cond53

while.cond53:                                     ; preds = %while.body58, %if.end52
  %37 = load i8*, i8** %p1, align 4
  %38 = load i8, i8* %37, align 1
  %conv54 = sext i8 %38 to i32
  %sub55 = sub i32 %conv54, 48
  %cmp56 = icmp ult i32 %sub55, 10
  br i1 %cmp56, label %while.body58, label %while.end61

while.body58:                                     ; preds = %while.cond53
  %39 = load i32, i32* %v1, align 4
  %mul = mul nsw i32 10, %39
  %40 = load i8*, i8** %p1, align 4
  %41 = load i8, i8* %40, align 1
  %call59 = call i32 @ord(i8 signext %41)
  %add = add nsw i32 %mul, %call59
  store i32 %add, i32* %v1, align 4
  %42 = load i8*, i8** %p1, align 4
  %incdec.ptr60 = getelementptr inbounds i8, i8* %42, i32 1
  store i8* %incdec.ptr60, i8** %p1, align 4
  br label %while.cond53

while.end61:                                      ; preds = %while.cond53
  store i32 0, i32* %v2, align 4
  br label %while.cond62

while.cond62:                                     ; preds = %while.body67, %while.end61
  %43 = load i8*, i8** %p2, align 4
  %44 = load i8, i8* %43, align 1
  %conv63 = sext i8 %44 to i32
  %sub64 = sub i32 %conv63, 48
  %cmp65 = icmp ult i32 %sub64, 10
  br i1 %cmp65, label %while.body67, label %while.end72

while.body67:                                     ; preds = %while.cond62
  %45 = load i32, i32* %v2, align 4
  %mul68 = mul nsw i32 10, %45
  %46 = load i8*, i8** %p2, align 4
  %47 = load i8, i8* %46, align 1
  %call69 = call i32 @ord(i8 signext %47)
  %add70 = add nsw i32 %mul68, %call69
  store i32 %add70, i32* %v2, align 4
  %48 = load i8*, i8** %p2, align 4
  %incdec.ptr71 = getelementptr inbounds i8, i8* %48, i32 1
  store i8* %incdec.ptr71, i8** %p2, align 4
  br label %while.cond62

while.end72:                                      ; preds = %while.cond62
  %49 = load i32, i32* %v1, align 4
  %50 = load i32, i32* %v2, align 4
  %cmp73 = icmp eq i32 %49, %50
  br i1 %cmp73, label %if.then75, label %if.end80

if.then75:                                        ; preds = %while.end72
  %51 = load i8*, i8** %p2, align 4
  %52 = load i8*, i8** %mrk2, align 4
  %sub.ptr.lhs.cast = ptrtoint i8* %51 to i32
  %sub.ptr.rhs.cast = ptrtoint i8* %52 to i32
  %sub.ptr.sub = sub i32 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %53 = load i8*, i8** %p1, align 4
  %54 = load i8*, i8** %mrk1, align 4
  %sub.ptr.lhs.cast76 = ptrtoint i8* %53 to i32
  %sub.ptr.rhs.cast77 = ptrtoint i8* %54 to i32
  %sub.ptr.sub78 = sub i32 %sub.ptr.lhs.cast76, %sub.ptr.rhs.cast77
  %sub79 = sub nsw i32 %sub.ptr.sub, %sub.ptr.sub78
  store i32 %sub79, i32* %retval, align 4
  br label %return

if.end80:                                         ; preds = %while.end72
  %55 = load i32, i32* %v1, align 4
  %56 = load i32, i32* %v2, align 4
  %sub81 = sub nsw i32 %55, %56
  store i32 %sub81, i32* %retval, align 4
  br label %return

if.end82:                                         ; preds = %cond.false16, %cond.true12, %cond.false, %cond.true
  %57 = load i8*, i8** %p1, align 4
  %58 = load i8, i8* %57, align 1
  %conv83 = sext i8 %58 to i32
  %call84 = call i32 @tolower(i32 %conv83) #5
  %59 = load i8*, i8** %p2, align 4
  %60 = load i8, i8* %59, align 1
  %conv85 = sext i8 %60 to i32
  %call86 = call i32 @tolower(i32 %conv85) #5
  %cmp87 = icmp ne i32 %call84, %call86
  br i1 %cmp87, label %if.then89, label %if.end95

if.then89:                                        ; preds = %if.end82
  %61 = load i8*, i8** %p1, align 4
  %62 = load i8, i8* %61, align 1
  %conv90 = sext i8 %62 to i32
  %call91 = call i32 @tolower(i32 %conv90) #5
  %63 = load i8*, i8** %p2, align 4
  %64 = load i8, i8* %63, align 1
  %conv92 = sext i8 %64 to i32
  %call93 = call i32 @tolower(i32 %conv92) #5
  %sub94 = sub nsw i32 %call91, %call93
  store i32 %sub94, i32* %retval, align 4
  br label %return

if.end95:                                         ; preds = %if.end82
  %65 = load i8*, i8** %s1.addr, align 4
  store i8* %65, i8** %p1, align 4
  %66 = load i8*, i8** %s2.addr, align 4
  store i8* %66, i8** %p2, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end95
  %67 = load i8*, i8** %p1, align 4
  %68 = load i8, i8* %67, align 1
  %conv96 = sext i8 %68 to i32
  %69 = load i8*, i8** %p2, align 4
  %70 = load i8, i8* %69, align 1
  %conv97 = sext i8 %70 to i32
  %cmp98 = icmp eq i32 %conv96, %conv97
  br i1 %cmp98, label %land.rhs100, label %land.end103

land.rhs100:                                      ; preds = %for.cond
  %71 = load i8*, i8** %p1, align 4
  %72 = load i8, i8* %71, align 1
  %conv101 = sext i8 %72 to i32
  %tobool102 = icmp ne i32 %conv101, 0
  br label %land.end103

land.end103:                                      ; preds = %land.rhs100, %for.cond
  %73 = phi i1 [ false, %for.cond ], [ %tobool102, %land.rhs100 ]
  br i1 %73, label %for.body, label %for.end

for.body:                                         ; preds = %land.end103
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %74 = load i8*, i8** %p1, align 4
  %incdec.ptr104 = getelementptr inbounds i8, i8* %74, i32 1
  store i8* %incdec.ptr104, i8** %p1, align 4
  %75 = load i8*, i8** %p2, align 4
  %incdec.ptr105 = getelementptr inbounds i8, i8* %75, i32 1
  store i8* %incdec.ptr105, i8** %p2, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end103
  %76 = load i8*, i8** %p1, align 4
  %77 = load i8, i8* %76, align 1
  %conv106 = sext i8 %77 to i32
  %78 = load i8*, i8** %p2, align 4
  %79 = load i8, i8* %78, align 1
  %conv107 = sext i8 %79 to i32
  %sub108 = sub nsw i32 %conv106, %conv107
  store i32 %sub108, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then89, %if.end80, %if.then75
  %80 = load i32, i32* %retval, align 4
  ret i32 %80
}

; Function Attrs: nounwind readonly
declare i32 @tolower(i32 %0) #1

; Function Attrs: nounwind readonly
declare i32 @isdigit(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %colFmts = alloca [3 x i8*], align 4
  %r1 = alloca [3 x i8*], align 4
  %r2 = alloca [3 x i8*], align 4
  %r3 = alloca [3 x i8*], align 4
  %r4 = alloca [3 x i8*], align 4
  %r5 = alloca [3 x i8*], align 4
  %r6 = alloca [3 x i8*], align 4
  %r7 = alloca [3 x i8*], align 4
  %r8 = alloca [3 x i8*], align 4
  %rows = alloca [8 x i8**], align 16
  %table = alloca %struct.sTable, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [3 x i8*]* %colFmts to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 bitcast ([3 x i8*]* @__const.main.colFmts to i8*), i32 12, i1 false)
  %1 = bitcast [3 x i8*]* %r1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %1, i8* align 4 bitcast ([3 x i8*]* @__const.main.r1 to i8*), i32 12, i1 false)
  %2 = bitcast [3 x i8*]* %r2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %2, i8* align 4 bitcast ([3 x i8*]* @__const.main.r2 to i8*), i32 12, i1 false)
  %3 = bitcast [3 x i8*]* %r3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %3, i8* align 4 bitcast ([3 x i8*]* @__const.main.r3 to i8*), i32 12, i1 false)
  %4 = bitcast [3 x i8*]* %r4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %4, i8* align 4 bitcast ([3 x i8*]* @__const.main.r4 to i8*), i32 12, i1 false)
  %5 = bitcast [3 x i8*]* %r5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %5, i8* align 4 bitcast ([3 x i8*]* @__const.main.r5 to i8*), i32 12, i1 false)
  %6 = bitcast [3 x i8*]* %r6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %6, i8* align 4 bitcast ([3 x i8*]* @__const.main.r6 to i8*), i32 12, i1 false)
  %7 = bitcast [3 x i8*]* %r7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %7, i8* align 4 bitcast ([3 x i8*]* @__const.main.r7 to i8*), i32 12, i1 false)
  %8 = bitcast [3 x i8*]* %r8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %8, i8* align 4 bitcast ([3 x i8*]* @__const.main.r8 to i8*), i32 12, i1 false)
  %arrayinit.begin = getelementptr inbounds [8 x i8**], [8 x i8**]* %rows, i32 0, i32 0
  %arraydecay = getelementptr inbounds [3 x i8*], [3 x i8*]* %r1, i32 0, i32 0
  store i8** %arraydecay, i8*** %arrayinit.begin, align 4
  %arrayinit.element = getelementptr inbounds i8**, i8*** %arrayinit.begin, i32 1
  %arraydecay1 = getelementptr inbounds [3 x i8*], [3 x i8*]* %r2, i32 0, i32 0
  store i8** %arraydecay1, i8*** %arrayinit.element, align 4
  %arrayinit.element2 = getelementptr inbounds i8**, i8*** %arrayinit.element, i32 1
  %arraydecay3 = getelementptr inbounds [3 x i8*], [3 x i8*]* %r3, i32 0, i32 0
  store i8** %arraydecay3, i8*** %arrayinit.element2, align 4
  %arrayinit.element4 = getelementptr inbounds i8**, i8*** %arrayinit.element2, i32 1
  %arraydecay5 = getelementptr inbounds [3 x i8*], [3 x i8*]* %r4, i32 0, i32 0
  store i8** %arraydecay5, i8*** %arrayinit.element4, align 4
  %arrayinit.element6 = getelementptr inbounds i8**, i8*** %arrayinit.element4, i32 1
  %arraydecay7 = getelementptr inbounds [3 x i8*], [3 x i8*]* %r5, i32 0, i32 0
  store i8** %arraydecay7, i8*** %arrayinit.element6, align 4
  %arrayinit.element8 = getelementptr inbounds i8**, i8*** %arrayinit.element6, i32 1
  %arraydecay9 = getelementptr inbounds [3 x i8*], [3 x i8*]* %r6, i32 0, i32 0
  store i8** %arraydecay9, i8*** %arrayinit.element8, align 4
  %arrayinit.element10 = getelementptr inbounds i8**, i8*** %arrayinit.element8, i32 1
  %arraydecay11 = getelementptr inbounds [3 x i8*], [3 x i8*]* %r7, i32 0, i32 0
  store i8** %arraydecay11, i8*** %arrayinit.element10, align 4
  %arrayinit.element12 = getelementptr inbounds i8**, i8*** %arrayinit.element10, i32 1
  %arraydecay13 = getelementptr inbounds [3 x i8*], [3 x i8*]* %r8, i32 0, i32 0
  store i8** %arraydecay13, i8*** %arrayinit.element12, align 4
  %arraydecay14 = getelementptr inbounds [8 x i8**], [8 x i8**]* %rows, i32 0, i32 0
  %rows15 = getelementptr inbounds %struct.sTable, %struct.sTable* %table, i32 0, i32 0
  store i8*** %arraydecay14, i8**** %rows15, align 4
  %n_rows = getelementptr inbounds %struct.sTable, %struct.sTable* %table, i32 0, i32 1
  store i32 8, i32* %n_rows, align 4
  %n_cols = getelementptr inbounds %struct.sTable, %struct.sTable* %table, i32 0, i32 2
  store i32 3, i32* %n_cols, align 4
  %call = call i32 (%struct.sTable*, i8*, ...) @sortTable(%struct.sTable* %table, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.28, i32 0, i32 0))
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.29, i32 0, i32 0))
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %arraydecay17 = getelementptr inbounds [3 x i8*], [3 x i8*]* %colFmts, i32 0, i32 0
  call void @printTable(%struct.sTable* %table, %struct._IO_FILE* %9, i8** %arraydecay17)
  %call18 = call i32 (%struct.sTable*, i8*, ...) @sortTable(%struct.sTable* %table, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.30, i32 0, i32 0), i32 1, i32 (i8*, i8*)* @cmprStrgs)
  %call19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.31, i32 0, i32 0))
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %arraydecay20 = getelementptr inbounds [3 x i8*], [3 x i8*]* %colFmts, i32 0, i32 0
  call void @printTable(%struct.sTable* %table, %struct._IO_FILE* %10, i8** %arraydecay20)
  %call21 = call i32 (%struct.sTable*, i8*, ...) @sortTable(%struct.sTable* %table, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.32, i32 0, i32 0), i32 1)
  %call22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.33, i32 0, i32 0))
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %arraydecay23 = getelementptr inbounds [3 x i8*], [3 x i8*]* %colFmts, i32 0, i32 0
  call void @printTable(%struct.sTable* %table, %struct._IO_FILE* %11, i8** %arraydecay23)
  %call24 = call i32 (%struct.sTable*, i8*, ...) @sortTable(%struct.sTable* %table, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.34, i32 0, i32 0), i32 2, i32 1)
  %call25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.35, i32 0, i32 0))
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %arraydecay26 = getelementptr inbounds [3 x i8*], [3 x i8*]* %colFmts, i32 0, i32 0
  call void @printTable(%struct.sTable* %table, %struct._IO_FILE* %12, i8** %arraydecay26)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #4

declare i32 @printf(i8* %0, ...) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind willreturn }
attributes #5 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %tobool = icmp ne i8* %0, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i8, i8* %2, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool2 = icmp ne i8 %3, 0
; Looking for a replacement for:
%0:i8 = var
%1:i1 = ne 0:i8, %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i8, i8* %4, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %5 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %8, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sle i32 0, %10
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %n_cols, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp7 = icmp slt i32 %11, %13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %c, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %15, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp13 = icmp ne i32 0, %16
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv14 = zext i1 %cmp13 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %n_rows, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i1 = ne 0:i8, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i32 = zext %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for sortTable()

; entering Souper's runOnFunction() for printTable()

; ModuleID = './Optional_parameters.c.bc'
source_filename = "./Optional_parameters.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.anon = type { i32 (i8*, i8*)*, i32, i32 }
%struct._IO_FILE = type opaque
%struct.sTable = type { i8***, i32, i32 }

@sortSpec = hidden global %struct.anon zeroinitializer, align 4
@.str = private unnamed_addr constant [4 x i8] c"   \00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.2 = private unnamed_addr constant [8 x i8] c" %-5.5s\00", align 1
@.str.3 = private unnamed_addr constant [8 x i8] c" %-9.9s\00", align 1
@__const.main.colFmts = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i32 0, i32 0)], align 4
@.str.4 = private unnamed_addr constant [5 x i8] c"a101\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"red\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"Java\00", align 1
@__const.main.r1 = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0)], align 4
@.str.7 = private unnamed_addr constant [5 x i8] c"ab40\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"gren\00", align 1
@.str.9 = private unnamed_addr constant [10 x i8] c"Smalltalk\00", align 1
@__const.main.r2 = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.9, i32 0, i32 0)], align 4
@.str.10 = private unnamed_addr constant [4 x i8] c"ab9\00", align 1
@.str.11 = private unnamed_addr constant [5 x i8] c"blue\00", align 1
@.str.12 = private unnamed_addr constant [8 x i8] c"Fortran\00", align 1
@__const.main.r3 = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.12, i32 0, i32 0)], align 4
@.str.13 = private unnamed_addr constant [5 x i8] c"ab09\00", align 1
@.str.14 = private unnamed_addr constant [5 x i8] c"ylow\00", align 1
@.str.15 = private unnamed_addr constant [7 x i8] c"Python\00", align 1
@__const.main.r4 = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.15, i32 0, i32 0)], align 4
@.str.16 = private unnamed_addr constant [5 x i8] c"ab1a\00", align 1
@.str.17 = private unnamed_addr constant [5 x i8] c"blak\00", align 1
@.str.18 = private unnamed_addr constant [7 x i8] c"Factor\00", align 1
@__const.main.r5 = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.18, i32 0, i32 0)], align 4
@.str.19 = private unnamed_addr constant [5 x i8] c"ab1b\00", align 1
@.str.20 = private unnamed_addr constant [5 x i8] c"brwn\00", align 1
@.str.21 = private unnamed_addr constant [8 x i8] c"C Sharp\00", align 1
@__const.main.r6 = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.21, i32 0, i32 0)], align 4
@.str.22 = private unnamed_addr constant [5 x i8] c"Ab1b\00", align 1
@.str.23 = private unnamed_addr constant [5 x i8] c"pink\00", align 1
@.str.24 = private unnamed_addr constant [5 x i8] c"Ruby\00", align 1
@__const.main.r7 = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.24, i32 0, i32 0)], align 4
@.str.25 = private unnamed_addr constant [4 x i8] c"ab1\00", align 1
@.str.26 = private unnamed_addr constant [5 x i8] c"orng\00", align 1
@.str.27 = private unnamed_addr constant [7 x i8] c"Scheme\00", align 1
@__const.main.r8 = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.26, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.27, i32 0, i32 0)], align 4
@.str.28 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.29 = private unnamed_addr constant [26 x i8] c"sort on col 0, ascending\0A\00", align 1
@stdout = external constant %struct._IO_FILE*, align 4
@.str.30 = private unnamed_addr constant [3 x i8] c"ro\00", align 1
@.str.31 = private unnamed_addr constant [32 x i8] c"sort on col 0, reverse.special\0A\00", align 1
@.str.32 = private unnamed_addr constant [2 x i8] c"c\00", align 1
@.str.33 = private unnamed_addr constant [26 x i8] c"sort on col 1, ascending\0A\00", align 1
@.str.34 = private unnamed_addr constant [3 x i8] c"cr\00", align 1
@.str.35 = private unnamed_addr constant [24 x i8] c"sort on col 2, reverse\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @CmprRows(i8* %aa, i8* %bb) #0 {
entry:
  %aa.addr = alloca i8*, align 4
  %bb.addr = alloca i8*, align 4
  %rA = alloca i8**, align 4
  %rB = alloca i8**, align 4
  %sortCol = alloca i32, align 4
  %left = alloca i8*, align 4
  %right = alloca i8*, align 4
  store i8* %aa, i8** %aa.addr, align 4
  store i8* %bb, i8** %bb.addr, align 4
  %0 = load i8*, i8** %aa.addr, align 4
  %1 = bitcast i8* %0 to i8***
  %2 = load i8**, i8*** %1, align 4
  store i8** %2, i8*** %rA, align 4
  %3 = load i8*, i8** %bb.addr, align 4
  %4 = bitcast i8* %3 to i8***
  %5 = load i8**, i8*** %4, align 4
  store i8** %5, i8*** %rB, align 4
  %6 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sortSpec, i32 0, i32 1), align 4
  store i32 %6, i32* %sortCol, align 4
  %7 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sortSpec, i32 0, i32 2), align 4
  %tobool = icmp ne i32 %7, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %8 = load i8**, i8*** %rB, align 4
  %9 = load i32, i32* %sortCol, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %8, i32 %9
  %10 = load i8*, i8** %arrayidx, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  %11 = load i8**, i8*** %rA, align 4
  %12 = load i32, i32* %sortCol, align 4
  %arrayidx1 = getelementptr inbounds i8*, i8** %11, i32 %12
  %13 = load i8*, i8** %arrayidx1, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %10, %cond.true ], [ %13, %cond.false ]
  store i8* %cond, i8** %left, align 4
  %14 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sortSpec, i32 0, i32 2), align 4
  %tobool2 = icmp ne i32 %14, 0
  br i1 %tobool2, label %cond.true3, label %cond.false5

cond.true3:                                       ; preds = %cond.end
  %15 = load i8**, i8*** %rA, align 4
  %16 = load i32, i32* %sortCol, align 4
  %arrayidx4 = getelementptr inbounds i8*, i8** %15, i32 %16
  %17 = load i8*, i8** %arrayidx4, align 4
  br label %cond.end7

cond.false5:                                      ; preds = %cond.end
  %18 = load i8**, i8*** %rB, align 4
  %19 = load i32, i32* %sortCol, align 4
  %arrayidx6 = getelementptr inbounds i8*, i8** %18, i32 %19
  %20 = load i8*, i8** %arrayidx6, align 4
  br label %cond.end7

cond.end7:                                        ; preds = %cond.false5, %cond.true3
  %cond8 = phi i8* [ %17, %cond.true3 ], [ %20, %cond.false5 ]
  store i8* %cond8, i8** %right, align 4
  %21 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** getelementptr inbounds (%struct.anon, %struct.anon* @sortSpec, i32 0, i32 0), align 4
  %22 = load i8*, i8** %left, align 4
  %23 = load i8*, i8** %right, align 4
  %call = call i32 %21(i8* %22, i8* %23)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @sortTable(%struct.sTable* %tbl, i8* %argSpec, ...) #0 {
entry:
  %tbl.addr = alloca %struct.sTable*, align 4
  %argSpec.addr = alloca i8*, align 4
  %vl = alloca i8*, align 4
  %p = alloca i8*, align 4
  %c = alloca i32, align 4
  store %struct.sTable* %tbl, %struct.sTable** %tbl.addr, align 4
  store i8* %argSpec, i8** %argSpec.addr, align 4
  store i32 (i8*, i8*)* @strcmp, i32 (i8*, i8*)** getelementptr inbounds (%struct.anon, %struct.anon* @sortSpec, i32 0, i32 0), align 4
  store i32 0, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sortSpec, i32 0, i32 1), align 4
  store i32 0, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sortSpec, i32 0, i32 2), align 4
  %vl1 = bitcast i8** %vl to i8*
  call void @llvm.va_start(i8* %vl1)
  %0 = load i8*, i8** %argSpec.addr, align 4
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.then, label %if.end15

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** %argSpec.addr, align 4
  store i8* %1, i8** %p, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %2 = load i8*, i8** %p, align 4
  %3 = load i8, i8* %2, align 1
  %tobool2 = icmp ne i8 %3, 0
  br i1 %tobool2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i8*, i8** %p, align 4
  %5 = load i8, i8* %4, align 1
  %conv = sext i8 %5 to i32
  switch i32 %conv, label %sw.epilog [
    i32 111, label %sw.bb
    i32 99, label %sw.bb3
    i32 114, label %sw.bb10
  ]

sw.bb:                                            ; preds = %for.body
  %argp.cur = load i8*, i8** %vl, align 4
  %argp.next = getelementptr inbounds i8, i8* %argp.cur, i32 4
  store i8* %argp.next, i8** %vl, align 4
  %6 = bitcast i8* %argp.cur to i32 (i8*, i8*)**
  %7 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %6, align 4
  store i32 (i8*, i8*)* %7, i32 (i8*, i8*)** getelementptr inbounds (%struct.anon, %struct.anon* @sortSpec, i32 0, i32 0), align 4
  br label %sw.epilog

sw.bb3:                                           ; preds = %for.body
  %argp.cur4 = load i8*, i8** %vl, align 4
  %argp.next5 = getelementptr inbounds i8, i8* %argp.cur4, i32 4
  store i8* %argp.next5, i8** %vl, align 4
  %8 = bitcast i8* %argp.cur4 to i32*
  %9 = load i32, i32* %8, align 4
  store i32 %9, i32* %c, align 4
  %10 = load i32, i32* %c, align 4
  %cmp = icmp sle i32 0, %10
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %sw.bb3
  %11 = load i32, i32* %c, align 4
  %12 = load %struct.sTable*, %struct.sTable** %tbl.addr, align 4
  %n_cols = getelementptr inbounds %struct.sTable, %struct.sTable* %12, i32 0, i32 2
  %13 = load i32, i32* %n_cols, align 4
  %cmp7 = icmp slt i32 %11, %13
  br i1 %cmp7, label %if.then9, label %if.end

if.then9:                                         ; preds = %land.lhs.true
  %14 = load i32, i32* %c, align 4
  store i32 %14, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sortSpec, i32 0, i32 1), align 4
  br label %if.end

if.end:                                           ; preds = %if.then9, %land.lhs.true, %sw.bb3
  br label %sw.epilog

sw.bb10:                                          ; preds = %for.body
  %argp.cur11 = load i8*, i8** %vl, align 4
  %argp.next12 = getelementptr inbounds i8, i8* %argp.cur11, i32 4
  store i8* %argp.next12, i8** %vl, align 4
  %15 = bitcast i8* %argp.cur11 to i32*
  %16 = load i32, i32* %15, align 4
  %cmp13 = icmp ne i32 0, %16
  %conv14 = zext i1 %cmp13 to i32
  store i32 %conv14, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sortSpec, i32 0, i32 2), align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %for.body, %sw.bb10, %if.end, %sw.bb
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %17 = load i8*, i8** %p, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %17, i32 1
  store i8* %incdec.ptr, i8** %p, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end15

if.end15:                                         ; preds = %for.end, %entry
  %vl16 = bitcast i8** %vl to i8*
  call void @llvm.va_end(i8* %vl16)
  %18 = load %struct.sTable*, %struct.sTable** %tbl.addr, align 4
  %rows = getelementptr inbounds %struct.sTable, %struct.sTable* %18, i32 0, i32 0
  %19 = load i8***, i8**** %rows, align 4
  %20 = bitcast i8*** %19 to i8*
  %21 = load %struct.sTable*, %struct.sTable** %tbl.addr, align 4
  %n_rows = getelementptr inbounds %struct.sTable, %struct.sTable* %21, i32 0, i32 1
  %22 = load i32, i32* %n_rows, align 4
  call void @qsort(i8* %20, i32 %22, i32 4, i32 (i8*, i8*)* @CmprRows)
  ret i32 0
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #1

; Function Attrs: nounwind
declare void @llvm.va_start(i8* %0) #2

; Function Attrs: nounwind
declare void @llvm.va_end(i8* %0) #2

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #3

; Function Attrs: noinline nounwind optnone
define hidden void @printTable(%struct.sTable* %tbl, %struct._IO_FILE* %fout, i8** %colFmts) #0 {
entry:
  %tbl.addr = alloca %struct.sTable*, align 4
  %fout.addr = alloca %struct._IO_FILE*, align 4
  %colFmts.addr = alloca i8**, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  store %struct.sTable* %tbl, %struct.sTable** %tbl.addr, align 4
  store %struct._IO_FILE* %fout, %struct._IO_FILE** %fout.addr, align 4
  store i8** %colFmts, i8*** %colFmts.addr, align 4
  store i32 0, i32* %row, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc8, %entry
  %0 = load i32, i32* %row, align 4
  %1 = load %struct.sTable*, %struct.sTable** %tbl.addr, align 4
  %n_rows = getelementptr inbounds %struct.sTable, %struct.sTable* %1, i32 0, i32 1
  %2 = load i32, i32* %n_rows, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end10

for.body:                                         ; preds = %for.cond
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %fout.addr, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %col, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %4 = load i32, i32* %col, align 4
  %5 = load %struct.sTable*, %struct.sTable** %tbl.addr, align 4
  %n_cols = getelementptr inbounds %struct.sTable, %struct.sTable* %5, i32 0, i32 2
  %6 = load i32, i32* %n_cols, align 4
  %cmp2 = icmp slt i32 %4, %6
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %fout.addr, align 4
  %8 = load i8**, i8*** %colFmts.addr, align 4
  %9 = load i32, i32* %col, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %8, i32 %9
  %10 = load i8*, i8** %arrayidx, align 4
  %11 = load %struct.sTable*, %struct.sTable** %tbl.addr, align 4
  %rows = getelementptr inbounds %struct.sTable, %struct.sTable* %11, i32 0, i32 0
  %12 = load i8***, i8**** %rows, align 4
  %13 = load i32, i32* %row, align 4
  %arrayidx4 = getelementptr inbounds i8**, i8*** %12, i32 %13
  %14 = load i8**, i8*** %arrayidx4, align 4
  %15 = load i32, i32* %col, align 4
  %arrayidx5 = getelementptr inbounds i8*, i8** %14, i32 %15
  %16 = load i8*, i8** %arrayidx5, align 4
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* %10, i8* %16)
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %17 = load i32, i32* %col, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %col, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** %fout.addr, align 4
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %18, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  br label %for.inc8

for.inc8:                                         ; preds = %for.end
  %19 = load i32, i32* %row, align 4
  %inc9 = add nsw i32 %19, 1
  store i32 %inc9, i32* %row, align 4
  br label %for.cond

for.end10:                                        ; preds = %for.cond
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** %fout.addr, align 4
  %call11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %20, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  ret void
}

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #3

; Function Attrs: noinline nounwind optnone
define hidden i32 @ord(i8 signext %v) #0 {
entry:
  %v.addr = alloca i8, align 1
  store i8 %v, i8* %v.addr, align 1
  %0 = load i8, i8* %v.addr, align 1
  %conv = sext i8 %0 to i32
  %sub = sub nsw i32 %conv, 48
  ret i32 %sub
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @cmprStrgs(i8* %s1, i8* %s2) #0 {
entry:
  %retval = alloca i32, align 4
  %s1.addr = alloca i8*, align 4
  %s2.addr = alloca i8*, align 4
  %p1 = alloca i8*, align 4
  %p2 = alloca i8*, align 4
  %mrk1 = alloca i8*, align 4
  %mrk2 = alloca i8*, align 4
  %v1 = alloca i32, align 4
  %v2 = alloca i32, align 4
  store i8* %s1, i8** %s1.addr, align 4
  store i8* %s2, i8** %s2.addr, align 4
  %0 = load i8*, i8** %s1.addr, align 4
  store i8* %0, i8** %p1, align 4
  %1 = load i8*, i8** %s2.addr, align 4
  store i8* %1, i8** %p2, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %2 = load i8*, i8** %p1, align 4
  %3 = load i8, i8* %2, align 1
  %conv = sext i8 %3 to i32
  %call = call i32 @tolower(i32 %conv) #5
  %4 = load i8*, i8** %p2, align 4
  %5 = load i8, i8* %4, align 1
  %conv1 = sext i8 %5 to i32
  %call2 = call i32 @tolower(i32 %conv1) #5
  %cmp = icmp eq i32 %call, %call2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %6 = load i8*, i8** %p1, align 4
  %7 = load i8, i8* %6, align 1
  %conv4 = sext i8 %7 to i32
  %tobool = icmp ne i32 %conv4, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %8 = phi i1 [ false, %while.cond ], [ %tobool, %land.rhs ]
  br i1 %8, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %9 = load i8*, i8** %p1, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr, i8** %p1, align 4
  %10 = load i8*, i8** %p2, align 4
  %incdec.ptr5 = getelementptr inbounds i8, i8* %10, i32 1
  store i8* %incdec.ptr5, i8** %p2, align 4
  br label %while.cond

while.end:                                        ; preds = %land.end
  br i1 false, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.end
  %11 = load i8*, i8** %p1, align 4
  %12 = load i8, i8* %11, align 1
  %conv6 = sext i8 %12 to i32
  %call7 = call i32 @isdigit(i32 %conv6) #5
  %tobool8 = icmp ne i32 %call7, 0
  br i1 %tobool8, label %land.lhs.true, label %if.end82

cond.false:                                       ; preds = %while.end
  %13 = load i8*, i8** %p1, align 4
  %14 = load i8, i8* %13, align 1
  %conv9 = sext i8 %14 to i32
  %sub = sub i32 %conv9, 48
  %cmp10 = icmp ult i32 %sub, 10
  br i1 %cmp10, label %land.lhs.true, label %if.end82

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  br i1 false, label %cond.true12, label %cond.false16

cond.true12:                                      ; preds = %land.lhs.true
  %15 = load i8*, i8** %p2, align 4
  %16 = load i8, i8* %15, align 1
  %conv13 = sext i8 %16 to i32
  %call14 = call i32 @isdigit(i32 %conv13) #5
  %tobool15 = icmp ne i32 %call14, 0
  br i1 %tobool15, label %if.then, label %if.end82

cond.false16:                                     ; preds = %land.lhs.true
  %17 = load i8*, i8** %p2, align 4
  %18 = load i8, i8* %17, align 1
  %conv17 = sext i8 %18 to i32
  %sub18 = sub i32 %conv17, 48
  %cmp19 = icmp ult i32 %sub18, 10
  br i1 %cmp19, label %if.then, label %if.end82

if.then:                                          ; preds = %cond.false16, %cond.true12
  %19 = load i8*, i8** %p1, align 4
  %20 = load i8, i8* %19, align 1
  %conv21 = sext i8 %20 to i32
  %cmp22 = icmp eq i32 %conv21, 48
  br i1 %cmp22, label %if.then27, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then
  %21 = load i8*, i8** %p2, align 4
  %22 = load i8, i8* %21, align 1
  %conv24 = sext i8 %22 to i32
  %cmp25 = icmp eq i32 %conv24, 48
  br i1 %cmp25, label %if.then27, label %if.end52

if.then27:                                        ; preds = %lor.lhs.false, %if.then
  br label %while.cond28

while.cond28:                                     ; preds = %if.end, %if.then27
  %23 = load i8*, i8** %p1, align 4
  %24 = load i8*, i8** %s1.addr, align 4
  %cmp29 = icmp ugt i8* %23, %24
  br i1 %cmp29, label %while.body31, label %while.end38

while.body31:                                     ; preds = %while.cond28
  %25 = load i8*, i8** %p1, align 4
  %incdec.ptr32 = getelementptr inbounds i8, i8* %25, i32 -1
  store i8* %incdec.ptr32, i8** %p1, align 4
  %26 = load i8*, i8** %p2, align 4
  %incdec.ptr33 = getelementptr inbounds i8, i8* %26, i32 -1
  store i8* %incdec.ptr33, i8** %p2, align 4
  %27 = load i8*, i8** %p1, align 4
  %28 = load i8, i8* %27, align 1
  %conv34 = sext i8 %28 to i32
  %cmp35 = icmp ne i32 %conv34, 48
  br i1 %cmp35, label %if.then37, label %if.end

if.then37:                                        ; preds = %while.body31
  br label %while.end38

if.end:                                           ; preds = %while.body31
  br label %while.cond28

while.end38:                                      ; preds = %if.then37, %while.cond28
  br i1 false, label %cond.true39, label %cond.false43

cond.true39:                                      ; preds = %while.end38
  %29 = load i8*, i8** %p1, align 4
  %30 = load i8, i8* %29, align 1
  %conv40 = sext i8 %30 to i32
  %call41 = call i32 @isdigit(i32 %conv40) #5
  %tobool42 = icmp ne i32 %call41, 0
  br i1 %tobool42, label %if.end51, label %if.then48

cond.false43:                                     ; preds = %while.end38
  %31 = load i8*, i8** %p1, align 4
  %32 = load i8, i8* %31, align 1
  %conv44 = sext i8 %32 to i32
  %sub45 = sub i32 %conv44, 48
  %cmp46 = icmp ult i32 %sub45, 10
  br i1 %cmp46, label %if.end51, label %if.then48

if.then48:                                        ; preds = %cond.false43, %cond.true39
  %33 = load i8*, i8** %p1, align 4
  %incdec.ptr49 = getelementptr inbounds i8, i8* %33, i32 1
  store i8* %incdec.ptr49, i8** %p1, align 4
  %34 = load i8*, i8** %p2, align 4
  %incdec.ptr50 = getelementptr inbounds i8, i8* %34, i32 1
  store i8* %incdec.ptr50, i8** %p2, align 4
  br label %if.end51

if.end51:                                         ; preds = %if.then48, %cond.false43, %cond.true39
  br label %if.end52

if.end52:                                         ; preds = %if.end51, %lor.lhs.false
  %35 = load i8*, i8** %p1, align 4
  store i8* %35, i8** %mrk1, align 4
  %36 = load i8*, i8** %p2, align 4
  store i8* %36, i8** %mrk2, align 4
  store i32 0, i32* %v1, align 4
  br label %while.cond53

while.cond53:                                     ; preds = %while.body58, %if.end52
  %37 = load i8*, i8** %p1, align 4
  %38 = load i8, i8* %37, align 1
  %conv54 = sext i8 %38 to i32
  %sub55 = sub i32 %conv54, 48
  %cmp56 = icmp ult i32 %sub55, 10
  br i1 %cmp56, label %while.body58, label %while.end61

while.body58:                                     ; preds = %while.cond53
  %39 = load i32, i32* %v1, align 4
  %mul = mul nsw i32 10, %39
  %40 = load i8*, i8** %p1, align 4
  %41 = load i8, i8* %40, align 1
  %call59 = call i32 @ord(i8 signext %41)
  %add = add nsw i32 %mul, %call59
  store i32 %add, i32* %v1, align 4
  %42 = load i8*, i8** %p1, align 4
  %incdec.ptr60 = getelementptr inbounds i8, i8* %42, i32 1
  store i8* %incdec.ptr60, i8** %p1, align 4
  br label %while.cond53

while.end61:                                      ; preds = %while.cond53
  store i32 0, i32* %v2, align 4
  br label %while.cond62

while.cond62:                                     ; preds = %while.body67, %while.end61
  %43 = load i8*, i8** %p2, align 4
  %44 = load i8, i8* %43, align 1
  %conv63 = sext i8 %44 to i32
  %sub64 = sub i32 %conv63, 48
  %cmp65 = icmp ult i32 %sub64, 10
  br i1 %cmp65, label %while.body67, label %while.end72

while.body67:                                     ; preds = %while.cond62
  %45 = load i32, i32* %v2, align 4
  %mul68 = mul nsw i32 10, %45
  %46 = load i8*, i8** %p2, align 4
  %47 = load i8, i8* %46, align 1
  %call69 = call i32 @ord(i8 signext %47)
  %add70 = add nsw i32 %mul68, %call69
  store i32 %add70, i32* %v2, align 4
  %48 = load i8*, i8** %p2, align 4
  %incdec.ptr71 = getelementptr inbounds i8, i8* %48, i32 1
  store i8* %incdec.ptr71, i8** %p2, align 4
  br label %while.cond62

while.end72:                                      ; preds = %while.cond62
  %49 = load i32, i32* %v1, align 4
  %50 = load i32, i32* %v2, align 4
  %cmp73 = icmp eq i32 %49, %50
  br i1 %cmp73, label %if.then75, label %if.end80

if.then75:                                        ; preds = %while.end72
  %51 = load i8*, i8** %p2, align 4
  %52 = load i8*, i8** %mrk2, align 4
  %sub.ptr.lhs.cast = ptrtoint i8* %51 to i32
  %sub.ptr.rhs.cast = ptrtoint i8* %52 to i32
  %sub.ptr.sub = sub i32 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %53 = load i8*, i8** %p1, align 4
  %54 = load i8*, i8** %mrk1, align 4
  %sub.ptr.lhs.cast76 = ptrtoint i8* %53 to i32
  %sub.ptr.rhs.cast77 = ptrtoint i8* %54 to i32
  %sub.ptr.sub78 = sub i32 %sub.ptr.lhs.cast76, %sub.ptr.rhs.cast77
  %sub79 = sub nsw i32 %sub.ptr.sub, %sub.ptr.sub78
  store i32 %sub79, i32* %retval, align 4
  br label %return

if.end80:                                         ; preds = %while.end72
  %55 = load i32, i32* %v1, align 4
  %56 = load i32, i32* %v2, align 4
  %sub81 = sub nsw i32 %55, %56
  store i32 %sub81, i32* %retval, align 4
  br label %return

if.end82:                                         ; preds = %cond.false16, %cond.true12, %cond.false, %cond.true
  %57 = load i8*, i8** %p1, align 4
  %58 = load i8, i8* %57, align 1
  %conv83 = sext i8 %58 to i32
  %call84 = call i32 @tolower(i32 %conv83) #5
  %59 = load i8*, i8** %p2, align 4
  %60 = load i8, i8* %59, align 1
  %conv85 = sext i8 %60 to i32
  %call86 = call i32 @tolower(i32 %conv85) #5
  %cmp87 = icmp ne i32 %call84, %call86
  br i1 %cmp87, label %if.then89, label %if.end95

if.then89:                                        ; preds = %if.end82
  %61 = load i8*, i8** %p1, align 4
  %62 = load i8, i8* %61, align 1
  %conv90 = sext i8 %62 to i32
  %call91 = call i32 @tolower(i32 %conv90) #5
  %63 = load i8*, i8** %p2, align 4
  %64 = load i8, i8* %63, align 1
  %conv92 = sext i8 %64 to i32
  %call93 = call i32 @tolower(i32 %conv92) #5
  %sub94 = sub nsw i32 %call91, %call93
  store i32 %sub94, i32* %retval, align 4
  br label %return

if.end95:                                         ; preds = %if.end82
  %65 = load i8*, i8** %s1.addr, align 4
  store i8* %65, i8** %p1, align 4
  %66 = load i8*, i8** %s2.addr, align 4
  store i8* %66, i8** %p2, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end95
  %67 = load i8*, i8** %p1, align 4
  %68 = load i8, i8* %67, align 1
  %conv96 = sext i8 %68 to i32
  %69 = load i8*, i8** %p2, align 4
  %70 = load i8, i8* %69, align 1
  %conv97 = sext i8 %70 to i32
  %cmp98 = icmp eq i32 %conv96, %conv97
  br i1 %cmp98, label %land.rhs100, label %land.end103

land.rhs100:                                      ; preds = %for.cond
  %71 = load i8*, i8** %p1, align 4
  %72 = load i8, i8* %71, align 1
  %conv101 = sext i8 %72 to i32
  %tobool102 = icmp ne i32 %conv101, 0
  br label %land.end103

land.end103:                                      ; preds = %land.rhs100, %for.cond
  %73 = phi i1 [ false, %for.cond ], [ %tobool102, %land.rhs100 ]
  br i1 %73, label %for.body, label %for.end

for.body:                                         ; preds = %land.end103
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %74 = load i8*, i8** %p1, align 4
  %incdec.ptr104 = getelementptr inbounds i8, i8* %74, i32 1
  store i8* %incdec.ptr104, i8** %p1, align 4
  %75 = load i8*, i8** %p2, align 4
  %incdec.ptr105 = getelementptr inbounds i8, i8* %75, i32 1
  store i8* %incdec.ptr105, i8** %p2, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end103
  %76 = load i8*, i8** %p1, align 4
  %77 = load i8, i8* %76, align 1
  %conv106 = sext i8 %77 to i32
  %78 = load i8*, i8** %p2, align 4
  %79 = load i8, i8* %78, align 1
  %conv107 = sext i8 %79 to i32
  %sub108 = sub nsw i32 %conv106, %conv107
  store i32 %sub108, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then89, %if.end80, %if.then75
  %80 = load i32, i32* %retval, align 4
  ret i32 %80
}

; Function Attrs: nounwind readonly
declare i32 @tolower(i32 %0) #1

; Function Attrs: nounwind readonly
declare i32 @isdigit(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %colFmts = alloca [3 x i8*], align 4
  %r1 = alloca [3 x i8*], align 4
  %r2 = alloca [3 x i8*], align 4
  %r3 = alloca [3 x i8*], align 4
  %r4 = alloca [3 x i8*], align 4
  %r5 = alloca [3 x i8*], align 4
  %r6 = alloca [3 x i8*], align 4
  %r7 = alloca [3 x i8*], align 4
  %r8 = alloca [3 x i8*], align 4
  %rows = alloca [8 x i8**], align 16
  %table = alloca %struct.sTable, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [3 x i8*]* %colFmts to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 bitcast ([3 x i8*]* @__const.main.colFmts to i8*), i32 12, i1 false)
  %1 = bitcast [3 x i8*]* %r1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %1, i8* align 4 bitcast ([3 x i8*]* @__const.main.r1 to i8*), i32 12, i1 false)
  %2 = bitcast [3 x i8*]* %r2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %2, i8* align 4 bitcast ([3 x i8*]* @__const.main.r2 to i8*), i32 12, i1 false)
  %3 = bitcast [3 x i8*]* %r3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %3, i8* align 4 bitcast ([3 x i8*]* @__const.main.r3 to i8*), i32 12, i1 false)
  %4 = bitcast [3 x i8*]* %r4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %4, i8* align 4 bitcast ([3 x i8*]* @__const.main.r4 to i8*), i32 12, i1 false)
  %5 = bitcast [3 x i8*]* %r5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %5, i8* align 4 bitcast ([3 x i8*]* @__const.main.r5 to i8*), i32 12, i1 false)
  %6 = bitcast [3 x i8*]* %r6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %6, i8* align 4 bitcast ([3 x i8*]* @__const.main.r6 to i8*), i32 12, i1 false)
  %7 = bitcast [3 x i8*]* %r7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %7, i8* align 4 bitcast ([3 x i8*]* @__const.main.r7 to i8*), i32 12, i1 false)
  %8 = bitcast [3 x i8*]* %r8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %8, i8* align 4 bitcast ([3 x i8*]* @__const.main.r8 to i8*), i32 12, i1 false)
  %arrayinit.begin = getelementptr inbounds [8 x i8**], [8 x i8**]* %rows, i32 0, i32 0
  %arraydecay = getelementptr inbounds [3 x i8*], [3 x i8*]* %r1, i32 0, i32 0
  store i8** %arraydecay, i8*** %arrayinit.begin, align 4
  %arrayinit.element = getelementptr inbounds i8**, i8*** %arrayinit.begin, i32 1
  %arraydecay1 = getelementptr inbounds [3 x i8*], [3 x i8*]* %r2, i32 0, i32 0
  store i8** %arraydecay1, i8*** %arrayinit.element, align 4
  %arrayinit.element2 = getelementptr inbounds i8**, i8*** %arrayinit.element, i32 1
  %arraydecay3 = getelementptr inbounds [3 x i8*], [3 x i8*]* %r3, i32 0, i32 0
  store i8** %arraydecay3, i8*** %arrayinit.element2, align 4
  %arrayinit.element4 = getelementptr inbounds i8**, i8*** %arrayinit.element2, i32 1
  %arraydecay5 = getelementptr inbounds [3 x i8*], [3 x i8*]* %r4, i32 0, i32 0
  store i8** %arraydecay5, i8*** %arrayinit.element4, align 4
  %arrayinit.element6 = getelementptr inbounds i8**, i8*** %arrayinit.element4, i32 1
  %arraydecay7 = getelementptr inbounds [3 x i8*], [3 x i8*]* %r5, i32 0, i32 0
  store i8** %arraydecay7, i8*** %arrayinit.element6, align 4
  %arrayinit.element8 = getelementptr inbounds i8**, i8*** %arrayinit.element6, i32 1
  %arraydecay9 = getelementptr inbounds [3 x i8*], [3 x i8*]* %r6, i32 0, i32 0
  store i8** %arraydecay9, i8*** %arrayinit.element8, align 4
  %arrayinit.element10 = getelementptr inbounds i8**, i8*** %arrayinit.element8, i32 1
  %arraydecay11 = getelementptr inbounds [3 x i8*], [3 x i8*]* %r7, i32 0, i32 0
  store i8** %arraydecay11, i8*** %arrayinit.element10, align 4
  %arrayinit.element12 = getelementptr inbounds i8**, i8*** %arrayinit.element10, i32 1
  %arraydecay13 = getelementptr inbounds [3 x i8*], [3 x i8*]* %r8, i32 0, i32 0
  store i8** %arraydecay13, i8*** %arrayinit.element12, align 4
  %arraydecay14 = getelementptr inbounds [8 x i8**], [8 x i8**]* %rows, i32 0, i32 0
  %rows15 = getelementptr inbounds %struct.sTable, %struct.sTable* %table, i32 0, i32 0
  store i8*** %arraydecay14, i8**** %rows15, align 4
  %n_rows = getelementptr inbounds %struct.sTable, %struct.sTable* %table, i32 0, i32 1
  store i32 8, i32* %n_rows, align 4
  %n_cols = getelementptr inbounds %struct.sTable, %struct.sTable* %table, i32 0, i32 2
  store i32 3, i32* %n_cols, align 4
  %call = call i32 (%struct.sTable*, i8*, ...) @sortTable(%struct.sTable* %table, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.28, i32 0, i32 0))
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.29, i32 0, i32 0))
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %arraydecay17 = getelementptr inbounds [3 x i8*], [3 x i8*]* %colFmts, i32 0, i32 0
  call void @printTable(%struct.sTable* %table, %struct._IO_FILE* %9, i8** %arraydecay17)
  %call18 = call i32 (%struct.sTable*, i8*, ...) @sortTable(%struct.sTable* %table, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.30, i32 0, i32 0), i32 1, i32 (i8*, i8*)* @cmprStrgs)
  %call19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.31, i32 0, i32 0))
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %arraydecay20 = getelementptr inbounds [3 x i8*], [3 x i8*]* %colFmts, i32 0, i32 0
  call void @printTable(%struct.sTable* %table, %struct._IO_FILE* %10, i8** %arraydecay20)
  %call21 = call i32 (%struct.sTable*, i8*, ...) @sortTable(%struct.sTable* %table, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.32, i32 0, i32 0), i32 1)
  %call22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.33, i32 0, i32 0))
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %arraydecay23 = getelementptr inbounds [3 x i8*], [3 x i8*]* %colFmts, i32 0, i32 0
  call void @printTable(%struct.sTable* %table, %struct._IO_FILE* %11, i8** %arraydecay23)
  %call24 = call i32 (%struct.sTable*, i8*, ...) @sortTable(%struct.sTable* %table, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.34, i32 0, i32 0), i32 2, i32 1)
  %call25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.35, i32 0, i32 0))
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %arraydecay26 = getelementptr inbounds [3 x i8*], [3 x i8*]* %colFmts, i32 0, i32 0
  call void @printTable(%struct.sTable* %table, %struct._IO_FILE* %12, i8** %arraydecay26)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #4

declare i32 @printf(i8* %0, ...) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind willreturn }
attributes #5 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %row, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %n_rows, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, %2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %col, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %n_cols, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp slt i32 %4, %6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %col, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %row, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %col, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %col, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %17, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %row, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc9 = add nsw i32 %19, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for printTable()

; entering Souper's runOnFunction() for ord()

; ModuleID = './Optional_parameters.c.bc'
source_filename = "./Optional_parameters.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.anon = type { i32 (i8*, i8*)*, i32, i32 }
%struct._IO_FILE = type opaque
%struct.sTable = type { i8***, i32, i32 }

@sortSpec = hidden global %struct.anon zeroinitializer, align 4
@.str = private unnamed_addr constant [4 x i8] c"   \00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.2 = private unnamed_addr constant [8 x i8] c" %-5.5s\00", align 1
@.str.3 = private unnamed_addr constant [8 x i8] c" %-9.9s\00", align 1
@__const.main.colFmts = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i32 0, i32 0)], align 4
@.str.4 = private unnamed_addr constant [5 x i8] c"a101\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"red\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"Java\00", align 1
@__const.main.r1 = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0)], align 4
@.str.7 = private unnamed_addr constant [5 x i8] c"ab40\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"gren\00", align 1
@.str.9 = private unnamed_addr constant [10 x i8] c"Smalltalk\00", align 1
@__const.main.r2 = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.9, i32 0, i32 0)], align 4
@.str.10 = private unnamed_addr constant [4 x i8] c"ab9\00", align 1
@.str.11 = private unnamed_addr constant [5 x i8] c"blue\00", align 1
@.str.12 = private unnamed_addr constant [8 x i8] c"Fortran\00", align 1
@__const.main.r3 = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.12, i32 0, i32 0)], align 4
@.str.13 = private unnamed_addr constant [5 x i8] c"ab09\00", align 1
@.str.14 = private unnamed_addr constant [5 x i8] c"ylow\00", align 1
@.str.15 = private unnamed_addr constant [7 x i8] c"Python\00", align 1
@__const.main.r4 = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.15, i32 0, i32 0)], align 4
@.str.16 = private unnamed_addr constant [5 x i8] c"ab1a\00", align 1
@.str.17 = private unnamed_addr constant [5 x i8] c"blak\00", align 1
@.str.18 = private unnamed_addr constant [7 x i8] c"Factor\00", align 1
@__const.main.r5 = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.18, i32 0, i32 0)], align 4
@.str.19 = private unnamed_addr constant [5 x i8] c"ab1b\00", align 1
@.str.20 = private unnamed_addr constant [5 x i8] c"brwn\00", align 1
@.str.21 = private unnamed_addr constant [8 x i8] c"C Sharp\00", align 1
@__const.main.r6 = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.21, i32 0, i32 0)], align 4
@.str.22 = private unnamed_addr constant [5 x i8] c"Ab1b\00", align 1
@.str.23 = private unnamed_addr constant [5 x i8] c"pink\00", align 1
@.str.24 = private unnamed_addr constant [5 x i8] c"Ruby\00", align 1
@__const.main.r7 = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.24, i32 0, i32 0)], align 4
@.str.25 = private unnamed_addr constant [4 x i8] c"ab1\00", align 1
@.str.26 = private unnamed_addr constant [5 x i8] c"orng\00", align 1
@.str.27 = private unnamed_addr constant [7 x i8] c"Scheme\00", align 1
@__const.main.r8 = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.26, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.27, i32 0, i32 0)], align 4
@.str.28 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.29 = private unnamed_addr constant [26 x i8] c"sort on col 0, ascending\0A\00", align 1
@stdout = external constant %struct._IO_FILE*, align 4
@.str.30 = private unnamed_addr constant [3 x i8] c"ro\00", align 1
@.str.31 = private unnamed_addr constant [32 x i8] c"sort on col 0, reverse.special\0A\00", align 1
@.str.32 = private unnamed_addr constant [2 x i8] c"c\00", align 1
@.str.33 = private unnamed_addr constant [26 x i8] c"sort on col 1, ascending\0A\00", align 1
@.str.34 = private unnamed_addr constant [3 x i8] c"cr\00", align 1
@.str.35 = private unnamed_addr constant [24 x i8] c"sort on col 2, reverse\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @CmprRows(i8* %aa, i8* %bb) #0 {
entry:
  %aa.addr = alloca i8*, align 4
  %bb.addr = alloca i8*, align 4
  %rA = alloca i8**, align 4
  %rB = alloca i8**, align 4
  %sortCol = alloca i32, align 4
  %left = alloca i8*, align 4
  %right = alloca i8*, align 4
  store i8* %aa, i8** %aa.addr, align 4
  store i8* %bb, i8** %bb.addr, align 4
  %0 = load i8*, i8** %aa.addr, align 4
  %1 = bitcast i8* %0 to i8***
  %2 = load i8**, i8*** %1, align 4
  store i8** %2, i8*** %rA, align 4
  %3 = load i8*, i8** %bb.addr, align 4
  %4 = bitcast i8* %3 to i8***
  %5 = load i8**, i8*** %4, align 4
  store i8** %5, i8*** %rB, align 4
  %6 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sortSpec, i32 0, i32 1), align 4
  store i32 %6, i32* %sortCol, align 4
  %7 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sortSpec, i32 0, i32 2), align 4
  %tobool = icmp ne i32 %7, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %8 = load i8**, i8*** %rB, align 4
  %9 = load i32, i32* %sortCol, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %8, i32 %9
  %10 = load i8*, i8** %arrayidx, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  %11 = load i8**, i8*** %rA, align 4
  %12 = load i32, i32* %sortCol, align 4
  %arrayidx1 = getelementptr inbounds i8*, i8** %11, i32 %12
  %13 = load i8*, i8** %arrayidx1, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %10, %cond.true ], [ %13, %cond.false ]
  store i8* %cond, i8** %left, align 4
  %14 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sortSpec, i32 0, i32 2), align 4
  %tobool2 = icmp ne i32 %14, 0
  br i1 %tobool2, label %cond.true3, label %cond.false5

cond.true3:                                       ; preds = %cond.end
  %15 = load i8**, i8*** %rA, align 4
  %16 = load i32, i32* %sortCol, align 4
  %arrayidx4 = getelementptr inbounds i8*, i8** %15, i32 %16
  %17 = load i8*, i8** %arrayidx4, align 4
  br label %cond.end7

cond.false5:                                      ; preds = %cond.end
  %18 = load i8**, i8*** %rB, align 4
  %19 = load i32, i32* %sortCol, align 4
  %arrayidx6 = getelementptr inbounds i8*, i8** %18, i32 %19
  %20 = load i8*, i8** %arrayidx6, align 4
  br label %cond.end7

cond.end7:                                        ; preds = %cond.false5, %cond.true3
  %cond8 = phi i8* [ %17, %cond.true3 ], [ %20, %cond.false5 ]
  store i8* %cond8, i8** %right, align 4
  %21 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** getelementptr inbounds (%struct.anon, %struct.anon* @sortSpec, i32 0, i32 0), align 4
  %22 = load i8*, i8** %left, align 4
  %23 = load i8*, i8** %right, align 4
  %call = call i32 %21(i8* %22, i8* %23)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @sortTable(%struct.sTable* %tbl, i8* %argSpec, ...) #0 {
entry:
  %tbl.addr = alloca %struct.sTable*, align 4
  %argSpec.addr = alloca i8*, align 4
  %vl = alloca i8*, align 4
  %p = alloca i8*, align 4
  %c = alloca i32, align 4
  store %struct.sTable* %tbl, %struct.sTable** %tbl.addr, align 4
  store i8* %argSpec, i8** %argSpec.addr, align 4
  store i32 (i8*, i8*)* @strcmp, i32 (i8*, i8*)** getelementptr inbounds (%struct.anon, %struct.anon* @sortSpec, i32 0, i32 0), align 4
  store i32 0, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sortSpec, i32 0, i32 1), align 4
  store i32 0, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sortSpec, i32 0, i32 2), align 4
  %vl1 = bitcast i8** %vl to i8*
  call void @llvm.va_start(i8* %vl1)
  %0 = load i8*, i8** %argSpec.addr, align 4
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.then, label %if.end15

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** %argSpec.addr, align 4
  store i8* %1, i8** %p, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %2 = load i8*, i8** %p, align 4
  %3 = load i8, i8* %2, align 1
  %tobool2 = icmp ne i8 %3, 0
  br i1 %tobool2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i8*, i8** %p, align 4
  %5 = load i8, i8* %4, align 1
  %conv = sext i8 %5 to i32
  switch i32 %conv, label %sw.epilog [
    i32 111, label %sw.bb
    i32 99, label %sw.bb3
    i32 114, label %sw.bb10
  ]

sw.bb:                                            ; preds = %for.body
  %argp.cur = load i8*, i8** %vl, align 4
  %argp.next = getelementptr inbounds i8, i8* %argp.cur, i32 4
  store i8* %argp.next, i8** %vl, align 4
  %6 = bitcast i8* %argp.cur to i32 (i8*, i8*)**
  %7 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %6, align 4
  store i32 (i8*, i8*)* %7, i32 (i8*, i8*)** getelementptr inbounds (%struct.anon, %struct.anon* @sortSpec, i32 0, i32 0), align 4
  br label %sw.epilog

sw.bb3:                                           ; preds = %for.body
  %argp.cur4 = load i8*, i8** %vl, align 4
  %argp.next5 = getelementptr inbounds i8, i8* %argp.cur4, i32 4
  store i8* %argp.next5, i8** %vl, align 4
  %8 = bitcast i8* %argp.cur4 to i32*
  %9 = load i32, i32* %8, align 4
  store i32 %9, i32* %c, align 4
  %10 = load i32, i32* %c, align 4
  %cmp = icmp sle i32 0, %10
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %sw.bb3
  %11 = load i32, i32* %c, align 4
  %12 = load %struct.sTable*, %struct.sTable** %tbl.addr, align 4
  %n_cols = getelementptr inbounds %struct.sTable, %struct.sTable* %12, i32 0, i32 2
  %13 = load i32, i32* %n_cols, align 4
  %cmp7 = icmp slt i32 %11, %13
  br i1 %cmp7, label %if.then9, label %if.end

if.then9:                                         ; preds = %land.lhs.true
  %14 = load i32, i32* %c, align 4
  store i32 %14, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sortSpec, i32 0, i32 1), align 4
  br label %if.end

if.end:                                           ; preds = %if.then9, %land.lhs.true, %sw.bb3
  br label %sw.epilog

sw.bb10:                                          ; preds = %for.body
  %argp.cur11 = load i8*, i8** %vl, align 4
  %argp.next12 = getelementptr inbounds i8, i8* %argp.cur11, i32 4
  store i8* %argp.next12, i8** %vl, align 4
  %15 = bitcast i8* %argp.cur11 to i32*
  %16 = load i32, i32* %15, align 4
  %cmp13 = icmp ne i32 0, %16
  %conv14 = zext i1 %cmp13 to i32
  store i32 %conv14, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sortSpec, i32 0, i32 2), align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %for.body, %sw.bb10, %if.end, %sw.bb
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %17 = load i8*, i8** %p, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %17, i32 1
  store i8* %incdec.ptr, i8** %p, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end15

if.end15:                                         ; preds = %for.end, %entry
  %vl16 = bitcast i8** %vl to i8*
  call void @llvm.va_end(i8* %vl16)
  %18 = load %struct.sTable*, %struct.sTable** %tbl.addr, align 4
  %rows = getelementptr inbounds %struct.sTable, %struct.sTable* %18, i32 0, i32 0
  %19 = load i8***, i8**** %rows, align 4
  %20 = bitcast i8*** %19 to i8*
  %21 = load %struct.sTable*, %struct.sTable** %tbl.addr, align 4
  %n_rows = getelementptr inbounds %struct.sTable, %struct.sTable* %21, i32 0, i32 1
  %22 = load i32, i32* %n_rows, align 4
  call void @qsort(i8* %20, i32 %22, i32 4, i32 (i8*, i8*)* @CmprRows)
  ret i32 0
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #1

; Function Attrs: nounwind
declare void @llvm.va_start(i8* %0) #2

; Function Attrs: nounwind
declare void @llvm.va_end(i8* %0) #2

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #3

; Function Attrs: noinline nounwind optnone
define hidden void @printTable(%struct.sTable* %tbl, %struct._IO_FILE* %fout, i8** %colFmts) #0 {
entry:
  %tbl.addr = alloca %struct.sTable*, align 4
  %fout.addr = alloca %struct._IO_FILE*, align 4
  %colFmts.addr = alloca i8**, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  store %struct.sTable* %tbl, %struct.sTable** %tbl.addr, align 4
  store %struct._IO_FILE* %fout, %struct._IO_FILE** %fout.addr, align 4
  store i8** %colFmts, i8*** %colFmts.addr, align 4
  store i32 0, i32* %row, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc8, %entry
  %0 = load i32, i32* %row, align 4
  %1 = load %struct.sTable*, %struct.sTable** %tbl.addr, align 4
  %n_rows = getelementptr inbounds %struct.sTable, %struct.sTable* %1, i32 0, i32 1
  %2 = load i32, i32* %n_rows, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end10

for.body:                                         ; preds = %for.cond
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %fout.addr, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %col, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %4 = load i32, i32* %col, align 4
  %5 = load %struct.sTable*, %struct.sTable** %tbl.addr, align 4
  %n_cols = getelementptr inbounds %struct.sTable, %struct.sTable* %5, i32 0, i32 2
  %6 = load i32, i32* %n_cols, align 4
  %cmp2 = icmp slt i32 %4, %6
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %fout.addr, align 4
  %8 = load i8**, i8*** %colFmts.addr, align 4
  %9 = load i32, i32* %col, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %8, i32 %9
  %10 = load i8*, i8** %arrayidx, align 4
  %11 = load %struct.sTable*, %struct.sTable** %tbl.addr, align 4
  %rows = getelementptr inbounds %struct.sTable, %struct.sTable* %11, i32 0, i32 0
  %12 = load i8***, i8**** %rows, align 4
  %13 = load i32, i32* %row, align 4
  %arrayidx4 = getelementptr inbounds i8**, i8*** %12, i32 %13
  %14 = load i8**, i8*** %arrayidx4, align 4
  %15 = load i32, i32* %col, align 4
  %arrayidx5 = getelementptr inbounds i8*, i8** %14, i32 %15
  %16 = load i8*, i8** %arrayidx5, align 4
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* %10, i8* %16)
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %17 = load i32, i32* %col, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %col, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** %fout.addr, align 4
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %18, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  br label %for.inc8

for.inc8:                                         ; preds = %for.end
  %19 = load i32, i32* %row, align 4
  %inc9 = add nsw i32 %19, 1
  store i32 %inc9, i32* %row, align 4
  br label %for.cond

for.end10:                                        ; preds = %for.cond
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** %fout.addr, align 4
  %call11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %20, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  ret void
}

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #3

; Function Attrs: noinline nounwind optnone
define hidden i32 @ord(i8 signext %v) #0 {
entry:
  %v.addr = alloca i8, align 1
  store i8 %v, i8* %v.addr, align 1
  %0 = load i8, i8* %v.addr, align 1
  %conv = sext i8 %0 to i32
  %sub = sub nsw i32 %conv, 48
  ret i32 %sub
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @cmprStrgs(i8* %s1, i8* %s2) #0 {
entry:
  %retval = alloca i32, align 4
  %s1.addr = alloca i8*, align 4
  %s2.addr = alloca i8*, align 4
  %p1 = alloca i8*, align 4
  %p2 = alloca i8*, align 4
  %mrk1 = alloca i8*, align 4
  %mrk2 = alloca i8*, align 4
  %v1 = alloca i32, align 4
  %v2 = alloca i32, align 4
  store i8* %s1, i8** %s1.addr, align 4
  store i8* %s2, i8** %s2.addr, align 4
  %0 = load i8*, i8** %s1.addr, align 4
  store i8* %0, i8** %p1, align 4
  %1 = load i8*, i8** %s2.addr, align 4
  store i8* %1, i8** %p2, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %2 = load i8*, i8** %p1, align 4
  %3 = load i8, i8* %2, align 1
  %conv = sext i8 %3 to i32
  %call = call i32 @tolower(i32 %conv) #5
  %4 = load i8*, i8** %p2, align 4
  %5 = load i8, i8* %4, align 1
  %conv1 = sext i8 %5 to i32
  %call2 = call i32 @tolower(i32 %conv1) #5
  %cmp = icmp eq i32 %call, %call2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %6 = load i8*, i8** %p1, align 4
  %7 = load i8, i8* %6, align 1
  %conv4 = sext i8 %7 to i32
  %tobool = icmp ne i32 %conv4, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %8 = phi i1 [ false, %while.cond ], [ %tobool, %land.rhs ]
  br i1 %8, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %9 = load i8*, i8** %p1, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr, i8** %p1, align 4
  %10 = load i8*, i8** %p2, align 4
  %incdec.ptr5 = getelementptr inbounds i8, i8* %10, i32 1
  store i8* %incdec.ptr5, i8** %p2, align 4
  br label %while.cond

while.end:                                        ; preds = %land.end
  br i1 false, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.end
  %11 = load i8*, i8** %p1, align 4
  %12 = load i8, i8* %11, align 1
  %conv6 = sext i8 %12 to i32
  %call7 = call i32 @isdigit(i32 %conv6) #5
  %tobool8 = icmp ne i32 %call7, 0
  br i1 %tobool8, label %land.lhs.true, label %if.end82

cond.false:                                       ; preds = %while.end
  %13 = load i8*, i8** %p1, align 4
  %14 = load i8, i8* %13, align 1
  %conv9 = sext i8 %14 to i32
  %sub = sub i32 %conv9, 48
  %cmp10 = icmp ult i32 %sub, 10
  br i1 %cmp10, label %land.lhs.true, label %if.end82

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  br i1 false, label %cond.true12, label %cond.false16

cond.true12:                                      ; preds = %land.lhs.true
  %15 = load i8*, i8** %p2, align 4
  %16 = load i8, i8* %15, align 1
  %conv13 = sext i8 %16 to i32
  %call14 = call i32 @isdigit(i32 %conv13) #5
  %tobool15 = icmp ne i32 %call14, 0
  br i1 %tobool15, label %if.then, label %if.end82

cond.false16:                                     ; preds = %land.lhs.true
  %17 = load i8*, i8** %p2, align 4
  %18 = load i8, i8* %17, align 1
  %conv17 = sext i8 %18 to i32
  %sub18 = sub i32 %conv17, 48
  %cmp19 = icmp ult i32 %sub18, 10
  br i1 %cmp19, label %if.then, label %if.end82

if.then:                                          ; preds = %cond.false16, %cond.true12
  %19 = load i8*, i8** %p1, align 4
  %20 = load i8, i8* %19, align 1
  %conv21 = sext i8 %20 to i32
  %cmp22 = icmp eq i32 %conv21, 48
  br i1 %cmp22, label %if.then27, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then
  %21 = load i8*, i8** %p2, align 4
  %22 = load i8, i8* %21, align 1
  %conv24 = sext i8 %22 to i32
  %cmp25 = icmp eq i32 %conv24, 48
  br i1 %cmp25, label %if.then27, label %if.end52

if.then27:                                        ; preds = %lor.lhs.false, %if.then
  br label %while.cond28

while.cond28:                                     ; preds = %if.end, %if.then27
  %23 = load i8*, i8** %p1, align 4
  %24 = load i8*, i8** %s1.addr, align 4
  %cmp29 = icmp ugt i8* %23, %24
  br i1 %cmp29, label %while.body31, label %while.end38

while.body31:                                     ; preds = %while.cond28
  %25 = load i8*, i8** %p1, align 4
  %incdec.ptr32 = getelementptr inbounds i8, i8* %25, i32 -1
  store i8* %incdec.ptr32, i8** %p1, align 4
  %26 = load i8*, i8** %p2, align 4
  %incdec.ptr33 = getelementptr inbounds i8, i8* %26, i32 -1
  store i8* %incdec.ptr33, i8** %p2, align 4
  %27 = load i8*, i8** %p1, align 4
  %28 = load i8, i8* %27, align 1
  %conv34 = sext i8 %28 to i32
  %cmp35 = icmp ne i32 %conv34, 48
  br i1 %cmp35, label %if.then37, label %if.end

if.then37:                                        ; preds = %while.body31
  br label %while.end38

if.end:                                           ; preds = %while.body31
  br label %while.cond28

while.end38:                                      ; preds = %if.then37, %while.cond28
  br i1 false, label %cond.true39, label %cond.false43

cond.true39:                                      ; preds = %while.end38
  %29 = load i8*, i8** %p1, align 4
  %30 = load i8, i8* %29, align 1
  %conv40 = sext i8 %30 to i32
  %call41 = call i32 @isdigit(i32 %conv40) #5
  %tobool42 = icmp ne i32 %call41, 0
  br i1 %tobool42, label %if.end51, label %if.then48

cond.false43:                                     ; preds = %while.end38
  %31 = load i8*, i8** %p1, align 4
  %32 = load i8, i8* %31, align 1
  %conv44 = sext i8 %32 to i32
  %sub45 = sub i32 %conv44, 48
  %cmp46 = icmp ult i32 %sub45, 10
  br i1 %cmp46, label %if.end51, label %if.then48

if.then48:                                        ; preds = %cond.false43, %cond.true39
  %33 = load i8*, i8** %p1, align 4
  %incdec.ptr49 = getelementptr inbounds i8, i8* %33, i32 1
  store i8* %incdec.ptr49, i8** %p1, align 4
  %34 = load i8*, i8** %p2, align 4
  %incdec.ptr50 = getelementptr inbounds i8, i8* %34, i32 1
  store i8* %incdec.ptr50, i8** %p2, align 4
  br label %if.end51

if.end51:                                         ; preds = %if.then48, %cond.false43, %cond.true39
  br label %if.end52

if.end52:                                         ; preds = %if.end51, %lor.lhs.false
  %35 = load i8*, i8** %p1, align 4
  store i8* %35, i8** %mrk1, align 4
  %36 = load i8*, i8** %p2, align 4
  store i8* %36, i8** %mrk2, align 4
  store i32 0, i32* %v1, align 4
  br label %while.cond53

while.cond53:                                     ; preds = %while.body58, %if.end52
  %37 = load i8*, i8** %p1, align 4
  %38 = load i8, i8* %37, align 1
  %conv54 = sext i8 %38 to i32
  %sub55 = sub i32 %conv54, 48
  %cmp56 = icmp ult i32 %sub55, 10
  br i1 %cmp56, label %while.body58, label %while.end61

while.body58:                                     ; preds = %while.cond53
  %39 = load i32, i32* %v1, align 4
  %mul = mul nsw i32 10, %39
  %40 = load i8*, i8** %p1, align 4
  %41 = load i8, i8* %40, align 1
  %call59 = call i32 @ord(i8 signext %41)
  %add = add nsw i32 %mul, %call59
  store i32 %add, i32* %v1, align 4
  %42 = load i8*, i8** %p1, align 4
  %incdec.ptr60 = getelementptr inbounds i8, i8* %42, i32 1
  store i8* %incdec.ptr60, i8** %p1, align 4
  br label %while.cond53

while.end61:                                      ; preds = %while.cond53
  store i32 0, i32* %v2, align 4
  br label %while.cond62

while.cond62:                                     ; preds = %while.body67, %while.end61
  %43 = load i8*, i8** %p2, align 4
  %44 = load i8, i8* %43, align 1
  %conv63 = sext i8 %44 to i32
  %sub64 = sub i32 %conv63, 48
  %cmp65 = icmp ult i32 %sub64, 10
  br i1 %cmp65, label %while.body67, label %while.end72

while.body67:                                     ; preds = %while.cond62
  %45 = load i32, i32* %v2, align 4
  %mul68 = mul nsw i32 10, %45
  %46 = load i8*, i8** %p2, align 4
  %47 = load i8, i8* %46, align 1
  %call69 = call i32 @ord(i8 signext %47)
  %add70 = add nsw i32 %mul68, %call69
  store i32 %add70, i32* %v2, align 4
  %48 = load i8*, i8** %p2, align 4
  %incdec.ptr71 = getelementptr inbounds i8, i8* %48, i32 1
  store i8* %incdec.ptr71, i8** %p2, align 4
  br label %while.cond62

while.end72:                                      ; preds = %while.cond62
  %49 = load i32, i32* %v1, align 4
  %50 = load i32, i32* %v2, align 4
  %cmp73 = icmp eq i32 %49, %50
  br i1 %cmp73, label %if.then75, label %if.end80

if.then75:                                        ; preds = %while.end72
  %51 = load i8*, i8** %p2, align 4
  %52 = load i8*, i8** %mrk2, align 4
  %sub.ptr.lhs.cast = ptrtoint i8* %51 to i32
  %sub.ptr.rhs.cast = ptrtoint i8* %52 to i32
  %sub.ptr.sub = sub i32 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %53 = load i8*, i8** %p1, align 4
  %54 = load i8*, i8** %mrk1, align 4
  %sub.ptr.lhs.cast76 = ptrtoint i8* %53 to i32
  %sub.ptr.rhs.cast77 = ptrtoint i8* %54 to i32
  %sub.ptr.sub78 = sub i32 %sub.ptr.lhs.cast76, %sub.ptr.rhs.cast77
  %sub79 = sub nsw i32 %sub.ptr.sub, %sub.ptr.sub78
  store i32 %sub79, i32* %retval, align 4
  br label %return

if.end80:                                         ; preds = %while.end72
  %55 = load i32, i32* %v1, align 4
  %56 = load i32, i32* %v2, align 4
  %sub81 = sub nsw i32 %55, %56
  store i32 %sub81, i32* %retval, align 4
  br label %return

if.end82:                                         ; preds = %cond.false16, %cond.true12, %cond.false, %cond.true
  %57 = load i8*, i8** %p1, align 4
  %58 = load i8, i8* %57, align 1
  %conv83 = sext i8 %58 to i32
  %call84 = call i32 @tolower(i32 %conv83) #5
  %59 = load i8*, i8** %p2, align 4
  %60 = load i8, i8* %59, align 1
  %conv85 = sext i8 %60 to i32
  %call86 = call i32 @tolower(i32 %conv85) #5
  %cmp87 = icmp ne i32 %call84, %call86
  br i1 %cmp87, label %if.then89, label %if.end95

if.then89:                                        ; preds = %if.end82
  %61 = load i8*, i8** %p1, align 4
  %62 = load i8, i8* %61, align 1
  %conv90 = sext i8 %62 to i32
  %call91 = call i32 @tolower(i32 %conv90) #5
  %63 = load i8*, i8** %p2, align 4
  %64 = load i8, i8* %63, align 1
  %conv92 = sext i8 %64 to i32
  %call93 = call i32 @tolower(i32 %conv92) #5
  %sub94 = sub nsw i32 %call91, %call93
  store i32 %sub94, i32* %retval, align 4
  br label %return

if.end95:                                         ; preds = %if.end82
  %65 = load i8*, i8** %s1.addr, align 4
  store i8* %65, i8** %p1, align 4
  %66 = load i8*, i8** %s2.addr, align 4
  store i8* %66, i8** %p2, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end95
  %67 = load i8*, i8** %p1, align 4
  %68 = load i8, i8* %67, align 1
  %conv96 = sext i8 %68 to i32
  %69 = load i8*, i8** %p2, align 4
  %70 = load i8, i8* %69, align 1
  %conv97 = sext i8 %70 to i32
  %cmp98 = icmp eq i32 %conv96, %conv97
  br i1 %cmp98, label %land.rhs100, label %land.end103

land.rhs100:                                      ; preds = %for.cond
  %71 = load i8*, i8** %p1, align 4
  %72 = load i8, i8* %71, align 1
  %conv101 = sext i8 %72 to i32
  %tobool102 = icmp ne i32 %conv101, 0
  br label %land.end103

land.end103:                                      ; preds = %land.rhs100, %for.cond
  %73 = phi i1 [ false, %for.cond ], [ %tobool102, %land.rhs100 ]
  br i1 %73, label %for.body, label %for.end

for.body:                                         ; preds = %land.end103
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %74 = load i8*, i8** %p1, align 4
  %incdec.ptr104 = getelementptr inbounds i8, i8* %74, i32 1
  store i8* %incdec.ptr104, i8** %p1, align 4
  %75 = load i8*, i8** %p2, align 4
  %incdec.ptr105 = getelementptr inbounds i8, i8* %75, i32 1
  store i8* %incdec.ptr105, i8** %p2, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end103
  %76 = load i8*, i8** %p1, align 4
  %77 = load i8, i8* %76, align 1
  %conv106 = sext i8 %77 to i32
  %78 = load i8*, i8** %p2, align 4
  %79 = load i8, i8* %78, align 1
  %conv107 = sext i8 %79 to i32
  %sub108 = sub nsw i32 %conv106, %conv107
  store i32 %sub108, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then89, %if.end80, %if.then75
  %80 = load i32, i32* %retval, align 4
  ret i32 %80
}

; Function Attrs: nounwind readonly
declare i32 @tolower(i32 %0) #1

; Function Attrs: nounwind readonly
declare i32 @isdigit(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %colFmts = alloca [3 x i8*], align 4
  %r1 = alloca [3 x i8*], align 4
  %r2 = alloca [3 x i8*], align 4
  %r3 = alloca [3 x i8*], align 4
  %r4 = alloca [3 x i8*], align 4
  %r5 = alloca [3 x i8*], align 4
  %r6 = alloca [3 x i8*], align 4
  %r7 = alloca [3 x i8*], align 4
  %r8 = alloca [3 x i8*], align 4
  %rows = alloca [8 x i8**], align 16
  %table = alloca %struct.sTable, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [3 x i8*]* %colFmts to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 bitcast ([3 x i8*]* @__const.main.colFmts to i8*), i32 12, i1 false)
  %1 = bitcast [3 x i8*]* %r1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %1, i8* align 4 bitcast ([3 x i8*]* @__const.main.r1 to i8*), i32 12, i1 false)
  %2 = bitcast [3 x i8*]* %r2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %2, i8* align 4 bitcast ([3 x i8*]* @__const.main.r2 to i8*), i32 12, i1 false)
  %3 = bitcast [3 x i8*]* %r3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %3, i8* align 4 bitcast ([3 x i8*]* @__const.main.r3 to i8*), i32 12, i1 false)
  %4 = bitcast [3 x i8*]* %r4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %4, i8* align 4 bitcast ([3 x i8*]* @__const.main.r4 to i8*), i32 12, i1 false)
  %5 = bitcast [3 x i8*]* %r5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %5, i8* align 4 bitcast ([3 x i8*]* @__const.main.r5 to i8*), i32 12, i1 false)
  %6 = bitcast [3 x i8*]* %r6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %6, i8* align 4 bitcast ([3 x i8*]* @__const.main.r6 to i8*), i32 12, i1 false)
  %7 = bitcast [3 x i8*]* %r7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %7, i8* align 4 bitcast ([3 x i8*]* @__const.main.r7 to i8*), i32 12, i1 false)
  %8 = bitcast [3 x i8*]* %r8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %8, i8* align 4 bitcast ([3 x i8*]* @__const.main.r8 to i8*), i32 12, i1 false)
  %arrayinit.begin = getelementptr inbounds [8 x i8**], [8 x i8**]* %rows, i32 0, i32 0
  %arraydecay = getelementptr inbounds [3 x i8*], [3 x i8*]* %r1, i32 0, i32 0
  store i8** %arraydecay, i8*** %arrayinit.begin, align 4
  %arrayinit.element = getelementptr inbounds i8**, i8*** %arrayinit.begin, i32 1
  %arraydecay1 = getelementptr inbounds [3 x i8*], [3 x i8*]* %r2, i32 0, i32 0
  store i8** %arraydecay1, i8*** %arrayinit.element, align 4
  %arrayinit.element2 = getelementptr inbounds i8**, i8*** %arrayinit.element, i32 1
  %arraydecay3 = getelementptr inbounds [3 x i8*], [3 x i8*]* %r3, i32 0, i32 0
  store i8** %arraydecay3, i8*** %arrayinit.element2, align 4
  %arrayinit.element4 = getelementptr inbounds i8**, i8*** %arrayinit.element2, i32 1
  %arraydecay5 = getelementptr inbounds [3 x i8*], [3 x i8*]* %r4, i32 0, i32 0
  store i8** %arraydecay5, i8*** %arrayinit.element4, align 4
  %arrayinit.element6 = getelementptr inbounds i8**, i8*** %arrayinit.element4, i32 1
  %arraydecay7 = getelementptr inbounds [3 x i8*], [3 x i8*]* %r5, i32 0, i32 0
  store i8** %arraydecay7, i8*** %arrayinit.element6, align 4
  %arrayinit.element8 = getelementptr inbounds i8**, i8*** %arrayinit.element6, i32 1
  %arraydecay9 = getelementptr inbounds [3 x i8*], [3 x i8*]* %r6, i32 0, i32 0
  store i8** %arraydecay9, i8*** %arrayinit.element8, align 4
  %arrayinit.element10 = getelementptr inbounds i8**, i8*** %arrayinit.element8, i32 1
  %arraydecay11 = getelementptr inbounds [3 x i8*], [3 x i8*]* %r7, i32 0, i32 0
  store i8** %arraydecay11, i8*** %arrayinit.element10, align 4
  %arrayinit.element12 = getelementptr inbounds i8**, i8*** %arrayinit.element10, i32 1
  %arraydecay13 = getelementptr inbounds [3 x i8*], [3 x i8*]* %r8, i32 0, i32 0
  store i8** %arraydecay13, i8*** %arrayinit.element12, align 4
  %arraydecay14 = getelementptr inbounds [8 x i8**], [8 x i8**]* %rows, i32 0, i32 0
  %rows15 = getelementptr inbounds %struct.sTable, %struct.sTable* %table, i32 0, i32 0
  store i8*** %arraydecay14, i8**** %rows15, align 4
  %n_rows = getelementptr inbounds %struct.sTable, %struct.sTable* %table, i32 0, i32 1
  store i32 8, i32* %n_rows, align 4
  %n_cols = getelementptr inbounds %struct.sTable, %struct.sTable* %table, i32 0, i32 2
  store i32 3, i32* %n_cols, align 4
  %call = call i32 (%struct.sTable*, i8*, ...) @sortTable(%struct.sTable* %table, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.28, i32 0, i32 0))
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.29, i32 0, i32 0))
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %arraydecay17 = getelementptr inbounds [3 x i8*], [3 x i8*]* %colFmts, i32 0, i32 0
  call void @printTable(%struct.sTable* %table, %struct._IO_FILE* %9, i8** %arraydecay17)
  %call18 = call i32 (%struct.sTable*, i8*, ...) @sortTable(%struct.sTable* %table, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.30, i32 0, i32 0), i32 1, i32 (i8*, i8*)* @cmprStrgs)
  %call19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.31, i32 0, i32 0))
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %arraydecay20 = getelementptr inbounds [3 x i8*], [3 x i8*]* %colFmts, i32 0, i32 0
  call void @printTable(%struct.sTable* %table, %struct._IO_FILE* %10, i8** %arraydecay20)
  %call21 = call i32 (%struct.sTable*, i8*, ...) @sortTable(%struct.sTable* %table, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.32, i32 0, i32 0), i32 1)
  %call22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.33, i32 0, i32 0))
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %arraydecay23 = getelementptr inbounds [3 x i8*], [3 x i8*]* %colFmts, i32 0, i32 0
  call void @printTable(%struct.sTable* %table, %struct._IO_FILE* %11, i8** %arraydecay23)
  %call24 = call i32 (%struct.sTable*, i8*, ...) @sortTable(%struct.sTable* %table, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.34, i32 0, i32 0), i32 2, i32 1)
  %call25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.35, i32 0, i32 0))
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %arraydecay26 = getelementptr inbounds [3 x i8*], [3 x i8*]* %colFmts, i32 0, i32 0
  call void @printTable(%struct.sTable* %table, %struct._IO_FILE* %12, i8** %arraydecay26)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #4

declare i32 @printf(i8* %0, ...) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind willreturn }
attributes #5 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i8, i8* %v.addr, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %0 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %conv, 48
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = subnsw %1, 48:i32
infer %2
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i32 = subnsw %1, 48:i32
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -48
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 16
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for ord()

; entering Souper's runOnFunction() for cmprStrgs()

; ModuleID = './Optional_parameters.c.bc'
source_filename = "./Optional_parameters.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.anon = type { i32 (i8*, i8*)*, i32, i32 }
%struct._IO_FILE = type opaque
%struct.sTable = type { i8***, i32, i32 }

@sortSpec = hidden global %struct.anon zeroinitializer, align 4
@.str = private unnamed_addr constant [4 x i8] c"   \00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.2 = private unnamed_addr constant [8 x i8] c" %-5.5s\00", align 1
@.str.3 = private unnamed_addr constant [8 x i8] c" %-9.9s\00", align 1
@__const.main.colFmts = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i32 0, i32 0)], align 4
@.str.4 = private unnamed_addr constant [5 x i8] c"a101\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"red\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"Java\00", align 1
@__const.main.r1 = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0)], align 4
@.str.7 = private unnamed_addr constant [5 x i8] c"ab40\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"gren\00", align 1
@.str.9 = private unnamed_addr constant [10 x i8] c"Smalltalk\00", align 1
@__const.main.r2 = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.9, i32 0, i32 0)], align 4
@.str.10 = private unnamed_addr constant [4 x i8] c"ab9\00", align 1
@.str.11 = private unnamed_addr constant [5 x i8] c"blue\00", align 1
@.str.12 = private unnamed_addr constant [8 x i8] c"Fortran\00", align 1
@__const.main.r3 = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.12, i32 0, i32 0)], align 4
@.str.13 = private unnamed_addr constant [5 x i8] c"ab09\00", align 1
@.str.14 = private unnamed_addr constant [5 x i8] c"ylow\00", align 1
@.str.15 = private unnamed_addr constant [7 x i8] c"Python\00", align 1
@__const.main.r4 = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.15, i32 0, i32 0)], align 4
@.str.16 = private unnamed_addr constant [5 x i8] c"ab1a\00", align 1
@.str.17 = private unnamed_addr constant [5 x i8] c"blak\00", align 1
@.str.18 = private unnamed_addr constant [7 x i8] c"Factor\00", align 1
@__const.main.r5 = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.18, i32 0, i32 0)], align 4
@.str.19 = private unnamed_addr constant [5 x i8] c"ab1b\00", align 1
@.str.20 = private unnamed_addr constant [5 x i8] c"brwn\00", align 1
@.str.21 = private unnamed_addr constant [8 x i8] c"C Sharp\00", align 1
@__const.main.r6 = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.21, i32 0, i32 0)], align 4
@.str.22 = private unnamed_addr constant [5 x i8] c"Ab1b\00", align 1
@.str.23 = private unnamed_addr constant [5 x i8] c"pink\00", align 1
@.str.24 = private unnamed_addr constant [5 x i8] c"Ruby\00", align 1
@__const.main.r7 = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.24, i32 0, i32 0)], align 4
@.str.25 = private unnamed_addr constant [4 x i8] c"ab1\00", align 1
@.str.26 = private unnamed_addr constant [5 x i8] c"orng\00", align 1
@.str.27 = private unnamed_addr constant [7 x i8] c"Scheme\00", align 1
@__const.main.r8 = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.26, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.27, i32 0, i32 0)], align 4
@.str.28 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.29 = private unnamed_addr constant [26 x i8] c"sort on col 0, ascending\0A\00", align 1
@stdout = external constant %struct._IO_FILE*, align 4
@.str.30 = private unnamed_addr constant [3 x i8] c"ro\00", align 1
@.str.31 = private unnamed_addr constant [32 x i8] c"sort on col 0, reverse.special\0A\00", align 1
@.str.32 = private unnamed_addr constant [2 x i8] c"c\00", align 1
@.str.33 = private unnamed_addr constant [26 x i8] c"sort on col 1, ascending\0A\00", align 1
@.str.34 = private unnamed_addr constant [3 x i8] c"cr\00", align 1
@.str.35 = private unnamed_addr constant [24 x i8] c"sort on col 2, reverse\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @CmprRows(i8* %aa, i8* %bb) #0 {
entry:
  %aa.addr = alloca i8*, align 4
  %bb.addr = alloca i8*, align 4
  %rA = alloca i8**, align 4
  %rB = alloca i8**, align 4
  %sortCol = alloca i32, align 4
  %left = alloca i8*, align 4
  %right = alloca i8*, align 4
  store i8* %aa, i8** %aa.addr, align 4
  store i8* %bb, i8** %bb.addr, align 4
  %0 = load i8*, i8** %aa.addr, align 4
  %1 = bitcast i8* %0 to i8***
  %2 = load i8**, i8*** %1, align 4
  store i8** %2, i8*** %rA, align 4
  %3 = load i8*, i8** %bb.addr, align 4
  %4 = bitcast i8* %3 to i8***
  %5 = load i8**, i8*** %4, align 4
  store i8** %5, i8*** %rB, align 4
  %6 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sortSpec, i32 0, i32 1), align 4
  store i32 %6, i32* %sortCol, align 4
  %7 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sortSpec, i32 0, i32 2), align 4
  %tobool = icmp ne i32 %7, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %8 = load i8**, i8*** %rB, align 4
  %9 = load i32, i32* %sortCol, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %8, i32 %9
  %10 = load i8*, i8** %arrayidx, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  %11 = load i8**, i8*** %rA, align 4
  %12 = load i32, i32* %sortCol, align 4
  %arrayidx1 = getelementptr inbounds i8*, i8** %11, i32 %12
  %13 = load i8*, i8** %arrayidx1, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %10, %cond.true ], [ %13, %cond.false ]
  store i8* %cond, i8** %left, align 4
  %14 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sortSpec, i32 0, i32 2), align 4
  %tobool2 = icmp ne i32 %14, 0
  br i1 %tobool2, label %cond.true3, label %cond.false5

cond.true3:                                       ; preds = %cond.end
  %15 = load i8**, i8*** %rA, align 4
  %16 = load i32, i32* %sortCol, align 4
  %arrayidx4 = getelementptr inbounds i8*, i8** %15, i32 %16
  %17 = load i8*, i8** %arrayidx4, align 4
  br label %cond.end7

cond.false5:                                      ; preds = %cond.end
  %18 = load i8**, i8*** %rB, align 4
  %19 = load i32, i32* %sortCol, align 4
  %arrayidx6 = getelementptr inbounds i8*, i8** %18, i32 %19
  %20 = load i8*, i8** %arrayidx6, align 4
  br label %cond.end7

cond.end7:                                        ; preds = %cond.false5, %cond.true3
  %cond8 = phi i8* [ %17, %cond.true3 ], [ %20, %cond.false5 ]
  store i8* %cond8, i8** %right, align 4
  %21 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** getelementptr inbounds (%struct.anon, %struct.anon* @sortSpec, i32 0, i32 0), align 4
  %22 = load i8*, i8** %left, align 4
  %23 = load i8*, i8** %right, align 4
  %call = call i32 %21(i8* %22, i8* %23)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @sortTable(%struct.sTable* %tbl, i8* %argSpec, ...) #0 {
entry:
  %tbl.addr = alloca %struct.sTable*, align 4
  %argSpec.addr = alloca i8*, align 4
  %vl = alloca i8*, align 4
  %p = alloca i8*, align 4
  %c = alloca i32, align 4
  store %struct.sTable* %tbl, %struct.sTable** %tbl.addr, align 4
  store i8* %argSpec, i8** %argSpec.addr, align 4
  store i32 (i8*, i8*)* @strcmp, i32 (i8*, i8*)** getelementptr inbounds (%struct.anon, %struct.anon* @sortSpec, i32 0, i32 0), align 4
  store i32 0, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sortSpec, i32 0, i32 1), align 4
  store i32 0, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sortSpec, i32 0, i32 2), align 4
  %vl1 = bitcast i8** %vl to i8*
  call void @llvm.va_start(i8* %vl1)
  %0 = load i8*, i8** %argSpec.addr, align 4
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.then, label %if.end15

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** %argSpec.addr, align 4
  store i8* %1, i8** %p, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %2 = load i8*, i8** %p, align 4
  %3 = load i8, i8* %2, align 1
  %tobool2 = icmp ne i8 %3, 0
  br i1 %tobool2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i8*, i8** %p, align 4
  %5 = load i8, i8* %4, align 1
  %conv = sext i8 %5 to i32
  switch i32 %conv, label %sw.epilog [
    i32 111, label %sw.bb
    i32 99, label %sw.bb3
    i32 114, label %sw.bb10
  ]

sw.bb:                                            ; preds = %for.body
  %argp.cur = load i8*, i8** %vl, align 4
  %argp.next = getelementptr inbounds i8, i8* %argp.cur, i32 4
  store i8* %argp.next, i8** %vl, align 4
  %6 = bitcast i8* %argp.cur to i32 (i8*, i8*)**
  %7 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %6, align 4
  store i32 (i8*, i8*)* %7, i32 (i8*, i8*)** getelementptr inbounds (%struct.anon, %struct.anon* @sortSpec, i32 0, i32 0), align 4
  br label %sw.epilog

sw.bb3:                                           ; preds = %for.body
  %argp.cur4 = load i8*, i8** %vl, align 4
  %argp.next5 = getelementptr inbounds i8, i8* %argp.cur4, i32 4
  store i8* %argp.next5, i8** %vl, align 4
  %8 = bitcast i8* %argp.cur4 to i32*
  %9 = load i32, i32* %8, align 4
  store i32 %9, i32* %c, align 4
  %10 = load i32, i32* %c, align 4
  %cmp = icmp sle i32 0, %10
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %sw.bb3
  %11 = load i32, i32* %c, align 4
  %12 = load %struct.sTable*, %struct.sTable** %tbl.addr, align 4
  %n_cols = getelementptr inbounds %struct.sTable, %struct.sTable* %12, i32 0, i32 2
  %13 = load i32, i32* %n_cols, align 4
  %cmp7 = icmp slt i32 %11, %13
  br i1 %cmp7, label %if.then9, label %if.end

if.then9:                                         ; preds = %land.lhs.true
  %14 = load i32, i32* %c, align 4
  store i32 %14, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sortSpec, i32 0, i32 1), align 4
  br label %if.end

if.end:                                           ; preds = %if.then9, %land.lhs.true, %sw.bb3
  br label %sw.epilog

sw.bb10:                                          ; preds = %for.body
  %argp.cur11 = load i8*, i8** %vl, align 4
  %argp.next12 = getelementptr inbounds i8, i8* %argp.cur11, i32 4
  store i8* %argp.next12, i8** %vl, align 4
  %15 = bitcast i8* %argp.cur11 to i32*
  %16 = load i32, i32* %15, align 4
  %cmp13 = icmp ne i32 0, %16
  %conv14 = zext i1 %cmp13 to i32
  store i32 %conv14, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sortSpec, i32 0, i32 2), align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %for.body, %sw.bb10, %if.end, %sw.bb
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %17 = load i8*, i8** %p, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %17, i32 1
  store i8* %incdec.ptr, i8** %p, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end15

if.end15:                                         ; preds = %for.end, %entry
  %vl16 = bitcast i8** %vl to i8*
  call void @llvm.va_end(i8* %vl16)
  %18 = load %struct.sTable*, %struct.sTable** %tbl.addr, align 4
  %rows = getelementptr inbounds %struct.sTable, %struct.sTable* %18, i32 0, i32 0
  %19 = load i8***, i8**** %rows, align 4
  %20 = bitcast i8*** %19 to i8*
  %21 = load %struct.sTable*, %struct.sTable** %tbl.addr, align 4
  %n_rows = getelementptr inbounds %struct.sTable, %struct.sTable* %21, i32 0, i32 1
  %22 = load i32, i32* %n_rows, align 4
  call void @qsort(i8* %20, i32 %22, i32 4, i32 (i8*, i8*)* @CmprRows)
  ret i32 0
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #1

; Function Attrs: nounwind
declare void @llvm.va_start(i8* %0) #2

; Function Attrs: nounwind
declare void @llvm.va_end(i8* %0) #2

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #3

; Function Attrs: noinline nounwind optnone
define hidden void @printTable(%struct.sTable* %tbl, %struct._IO_FILE* %fout, i8** %colFmts) #0 {
entry:
  %tbl.addr = alloca %struct.sTable*, align 4
  %fout.addr = alloca %struct._IO_FILE*, align 4
  %colFmts.addr = alloca i8**, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  store %struct.sTable* %tbl, %struct.sTable** %tbl.addr, align 4
  store %struct._IO_FILE* %fout, %struct._IO_FILE** %fout.addr, align 4
  store i8** %colFmts, i8*** %colFmts.addr, align 4
  store i32 0, i32* %row, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc8, %entry
  %0 = load i32, i32* %row, align 4
  %1 = load %struct.sTable*, %struct.sTable** %tbl.addr, align 4
  %n_rows = getelementptr inbounds %struct.sTable, %struct.sTable* %1, i32 0, i32 1
  %2 = load i32, i32* %n_rows, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end10

for.body:                                         ; preds = %for.cond
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %fout.addr, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %col, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %4 = load i32, i32* %col, align 4
  %5 = load %struct.sTable*, %struct.sTable** %tbl.addr, align 4
  %n_cols = getelementptr inbounds %struct.sTable, %struct.sTable* %5, i32 0, i32 2
  %6 = load i32, i32* %n_cols, align 4
  %cmp2 = icmp slt i32 %4, %6
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %fout.addr, align 4
  %8 = load i8**, i8*** %colFmts.addr, align 4
  %9 = load i32, i32* %col, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %8, i32 %9
  %10 = load i8*, i8** %arrayidx, align 4
  %11 = load %struct.sTable*, %struct.sTable** %tbl.addr, align 4
  %rows = getelementptr inbounds %struct.sTable, %struct.sTable* %11, i32 0, i32 0
  %12 = load i8***, i8**** %rows, align 4
  %13 = load i32, i32* %row, align 4
  %arrayidx4 = getelementptr inbounds i8**, i8*** %12, i32 %13
  %14 = load i8**, i8*** %arrayidx4, align 4
  %15 = load i32, i32* %col, align 4
  %arrayidx5 = getelementptr inbounds i8*, i8** %14, i32 %15
  %16 = load i8*, i8** %arrayidx5, align 4
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* %10, i8* %16)
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %17 = load i32, i32* %col, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %col, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** %fout.addr, align 4
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %18, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  br label %for.inc8

for.inc8:                                         ; preds = %for.end
  %19 = load i32, i32* %row, align 4
  %inc9 = add nsw i32 %19, 1
  store i32 %inc9, i32* %row, align 4
  br label %for.cond

for.end10:                                        ; preds = %for.cond
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** %fout.addr, align 4
  %call11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %20, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  ret void
}

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #3

; Function Attrs: noinline nounwind optnone
define hidden i32 @ord(i8 signext %v) #0 {
entry:
  %v.addr = alloca i8, align 1
  store i8 %v, i8* %v.addr, align 1
  %0 = load i8, i8* %v.addr, align 1
  %conv = sext i8 %0 to i32
  %sub = sub nsw i32 %conv, 48
  ret i32 %sub
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @cmprStrgs(i8* %s1, i8* %s2) #0 {
entry:
  %retval = alloca i32, align 4
  %s1.addr = alloca i8*, align 4
  %s2.addr = alloca i8*, align 4
  %p1 = alloca i8*, align 4
  %p2 = alloca i8*, align 4
  %mrk1 = alloca i8*, align 4
  %mrk2 = alloca i8*, align 4
  %v1 = alloca i32, align 4
  %v2 = alloca i32, align 4
  store i8* %s1, i8** %s1.addr, align 4
  store i8* %s2, i8** %s2.addr, align 4
  %0 = load i8*, i8** %s1.addr, align 4
  store i8* %0, i8** %p1, align 4
  %1 = load i8*, i8** %s2.addr, align 4
  store i8* %1, i8** %p2, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %2 = load i8*, i8** %p1, align 4
  %3 = load i8, i8* %2, align 1
  %conv = sext i8 %3 to i32
  %call = call i32 @tolower(i32 %conv) #5
  %4 = load i8*, i8** %p2, align 4
  %5 = load i8, i8* %4, align 1
  %conv1 = sext i8 %5 to i32
  %call2 = call i32 @tolower(i32 %conv1) #5
  %cmp = icmp eq i32 %call, %call2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %6 = load i8*, i8** %p1, align 4
  %7 = load i8, i8* %6, align 1
  %conv4 = sext i8 %7 to i32
  %tobool = icmp ne i32 %conv4, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %8 = phi i1 [ false, %while.cond ], [ %tobool, %land.rhs ]
  br i1 %8, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %9 = load i8*, i8** %p1, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr, i8** %p1, align 4
  %10 = load i8*, i8** %p2, align 4
  %incdec.ptr5 = getelementptr inbounds i8, i8* %10, i32 1
  store i8* %incdec.ptr5, i8** %p2, align 4
  br label %while.cond

while.end:                                        ; preds = %land.end
  br i1 false, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.end
  %11 = load i8*, i8** %p1, align 4
  %12 = load i8, i8* %11, align 1
  %conv6 = sext i8 %12 to i32
  %call7 = call i32 @isdigit(i32 %conv6) #5
  %tobool8 = icmp ne i32 %call7, 0
  br i1 %tobool8, label %land.lhs.true, label %if.end82

cond.false:                                       ; preds = %while.end
  %13 = load i8*, i8** %p1, align 4
  %14 = load i8, i8* %13, align 1
  %conv9 = sext i8 %14 to i32
  %sub = sub i32 %conv9, 48
  %cmp10 = icmp ult i32 %sub, 10
  br i1 %cmp10, label %land.lhs.true, label %if.end82

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  br i1 false, label %cond.true12, label %cond.false16

cond.true12:                                      ; preds = %land.lhs.true
  %15 = load i8*, i8** %p2, align 4
  %16 = load i8, i8* %15, align 1
  %conv13 = sext i8 %16 to i32
  %call14 = call i32 @isdigit(i32 %conv13) #5
  %tobool15 = icmp ne i32 %call14, 0
  br i1 %tobool15, label %if.then, label %if.end82

cond.false16:                                     ; preds = %land.lhs.true
  %17 = load i8*, i8** %p2, align 4
  %18 = load i8, i8* %17, align 1
  %conv17 = sext i8 %18 to i32
  %sub18 = sub i32 %conv17, 48
  %cmp19 = icmp ult i32 %sub18, 10
  br i1 %cmp19, label %if.then, label %if.end82

if.then:                                          ; preds = %cond.false16, %cond.true12
  %19 = load i8*, i8** %p1, align 4
  %20 = load i8, i8* %19, align 1
  %conv21 = sext i8 %20 to i32
  %cmp22 = icmp eq i32 %conv21, 48
  br i1 %cmp22, label %if.then27, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then
  %21 = load i8*, i8** %p2, align 4
  %22 = load i8, i8* %21, align 1
  %conv24 = sext i8 %22 to i32
  %cmp25 = icmp eq i32 %conv24, 48
  br i1 %cmp25, label %if.then27, label %if.end52

if.then27:                                        ; preds = %lor.lhs.false, %if.then
  br label %while.cond28

while.cond28:                                     ; preds = %if.end, %if.then27
  %23 = load i8*, i8** %p1, align 4
  %24 = load i8*, i8** %s1.addr, align 4
  %cmp29 = icmp ugt i8* %23, %24
  br i1 %cmp29, label %while.body31, label %while.end38

while.body31:                                     ; preds = %while.cond28
  %25 = load i8*, i8** %p1, align 4
  %incdec.ptr32 = getelementptr inbounds i8, i8* %25, i32 -1
  store i8* %incdec.ptr32, i8** %p1, align 4
  %26 = load i8*, i8** %p2, align 4
  %incdec.ptr33 = getelementptr inbounds i8, i8* %26, i32 -1
  store i8* %incdec.ptr33, i8** %p2, align 4
  %27 = load i8*, i8** %p1, align 4
  %28 = load i8, i8* %27, align 1
  %conv34 = sext i8 %28 to i32
  %cmp35 = icmp ne i32 %conv34, 48
  br i1 %cmp35, label %if.then37, label %if.end

if.then37:                                        ; preds = %while.body31
  br label %while.end38

if.end:                                           ; preds = %while.body31
  br label %while.cond28

while.end38:                                      ; preds = %if.then37, %while.cond28
  br i1 false, label %cond.true39, label %cond.false43

cond.true39:                                      ; preds = %while.end38
  %29 = load i8*, i8** %p1, align 4
  %30 = load i8, i8* %29, align 1
  %conv40 = sext i8 %30 to i32
  %call41 = call i32 @isdigit(i32 %conv40) #5
  %tobool42 = icmp ne i32 %call41, 0
  br i1 %tobool42, label %if.end51, label %if.then48

cond.false43:                                     ; preds = %while.end38
  %31 = load i8*, i8** %p1, align 4
  %32 = load i8, i8* %31, align 1
  %conv44 = sext i8 %32 to i32
  %sub45 = sub i32 %conv44, 48
  %cmp46 = icmp ult i32 %sub45, 10
  br i1 %cmp46, label %if.end51, label %if.then48

if.then48:                                        ; preds = %cond.false43, %cond.true39
  %33 = load i8*, i8** %p1, align 4
  %incdec.ptr49 = getelementptr inbounds i8, i8* %33, i32 1
  store i8* %incdec.ptr49, i8** %p1, align 4
  %34 = load i8*, i8** %p2, align 4
  %incdec.ptr50 = getelementptr inbounds i8, i8* %34, i32 1
  store i8* %incdec.ptr50, i8** %p2, align 4
  br label %if.end51

if.end51:                                         ; preds = %if.then48, %cond.false43, %cond.true39
  br label %if.end52

if.end52:                                         ; preds = %if.end51, %lor.lhs.false
  %35 = load i8*, i8** %p1, align 4
  store i8* %35, i8** %mrk1, align 4
  %36 = load i8*, i8** %p2, align 4
  store i8* %36, i8** %mrk2, align 4
  store i32 0, i32* %v1, align 4
  br label %while.cond53

while.cond53:                                     ; preds = %while.body58, %if.end52
  %37 = load i8*, i8** %p1, align 4
  %38 = load i8, i8* %37, align 1
  %conv54 = sext i8 %38 to i32
  %sub55 = sub i32 %conv54, 48
  %cmp56 = icmp ult i32 %sub55, 10
  br i1 %cmp56, label %while.body58, label %while.end61

while.body58:                                     ; preds = %while.cond53
  %39 = load i32, i32* %v1, align 4
  %mul = mul nsw i32 10, %39
  %40 = load i8*, i8** %p1, align 4
  %41 = load i8, i8* %40, align 1
  %call59 = call i32 @ord(i8 signext %41)
  %add = add nsw i32 %mul, %call59
  store i32 %add, i32* %v1, align 4
  %42 = load i8*, i8** %p1, align 4
  %incdec.ptr60 = getelementptr inbounds i8, i8* %42, i32 1
  store i8* %incdec.ptr60, i8** %p1, align 4
  br label %while.cond53

while.end61:                                      ; preds = %while.cond53
  store i32 0, i32* %v2, align 4
  br label %while.cond62

while.cond62:                                     ; preds = %while.body67, %while.end61
  %43 = load i8*, i8** %p2, align 4
  %44 = load i8, i8* %43, align 1
  %conv63 = sext i8 %44 to i32
  %sub64 = sub i32 %conv63, 48
  %cmp65 = icmp ult i32 %sub64, 10
  br i1 %cmp65, label %while.body67, label %while.end72

while.body67:                                     ; preds = %while.cond62
  %45 = load i32, i32* %v2, align 4
  %mul68 = mul nsw i32 10, %45
  %46 = load i8*, i8** %p2, align 4
  %47 = load i8, i8* %46, align 1
  %call69 = call i32 @ord(i8 signext %47)
  %add70 = add nsw i32 %mul68, %call69
  store i32 %add70, i32* %v2, align 4
  %48 = load i8*, i8** %p2, align 4
  %incdec.ptr71 = getelementptr inbounds i8, i8* %48, i32 1
  store i8* %incdec.ptr71, i8** %p2, align 4
  br label %while.cond62

while.end72:                                      ; preds = %while.cond62
  %49 = load i32, i32* %v1, align 4
  %50 = load i32, i32* %v2, align 4
  %cmp73 = icmp eq i32 %49, %50
  br i1 %cmp73, label %if.then75, label %if.end80

if.then75:                                        ; preds = %while.end72
  %51 = load i8*, i8** %p2, align 4
  %52 = load i8*, i8** %mrk2, align 4
  %sub.ptr.lhs.cast = ptrtoint i8* %51 to i32
  %sub.ptr.rhs.cast = ptrtoint i8* %52 to i32
  %sub.ptr.sub = sub i32 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %53 = load i8*, i8** %p1, align 4
  %54 = load i8*, i8** %mrk1, align 4
  %sub.ptr.lhs.cast76 = ptrtoint i8* %53 to i32
  %sub.ptr.rhs.cast77 = ptrtoint i8* %54 to i32
  %sub.ptr.sub78 = sub i32 %sub.ptr.lhs.cast76, %sub.ptr.rhs.cast77
  %sub79 = sub nsw i32 %sub.ptr.sub, %sub.ptr.sub78
  store i32 %sub79, i32* %retval, align 4
  br label %return

if.end80:                                         ; preds = %while.end72
  %55 = load i32, i32* %v1, align 4
  %56 = load i32, i32* %v2, align 4
  %sub81 = sub nsw i32 %55, %56
  store i32 %sub81, i32* %retval, align 4
  br label %return

if.end82:                                         ; preds = %cond.false16, %cond.true12, %cond.false, %cond.true
  %57 = load i8*, i8** %p1, align 4
  %58 = load i8, i8* %57, align 1
  %conv83 = sext i8 %58 to i32
  %call84 = call i32 @tolower(i32 %conv83) #5
  %59 = load i8*, i8** %p2, align 4
  %60 = load i8, i8* %59, align 1
  %conv85 = sext i8 %60 to i32
  %call86 = call i32 @tolower(i32 %conv85) #5
  %cmp87 = icmp ne i32 %call84, %call86
  br i1 %cmp87, label %if.then89, label %if.end95

if.then89:                                        ; preds = %if.end82
  %61 = load i8*, i8** %p1, align 4
  %62 = load i8, i8* %61, align 1
  %conv90 = sext i8 %62 to i32
  %call91 = call i32 @tolower(i32 %conv90) #5
  %63 = load i8*, i8** %p2, align 4
  %64 = load i8, i8* %63, align 1
  %conv92 = sext i8 %64 to i32
  %call93 = call i32 @tolower(i32 %conv92) #5
  %sub94 = sub nsw i32 %call91, %call93
  store i32 %sub94, i32* %retval, align 4
  br label %return

if.end95:                                         ; preds = %if.end82
  %65 = load i8*, i8** %s1.addr, align 4
  store i8* %65, i8** %p1, align 4
  %66 = load i8*, i8** %s2.addr, align 4
  store i8* %66, i8** %p2, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end95
  %67 = load i8*, i8** %p1, align 4
  %68 = load i8, i8* %67, align 1
  %conv96 = sext i8 %68 to i32
  %69 = load i8*, i8** %p2, align 4
  %70 = load i8, i8* %69, align 1
  %conv97 = sext i8 %70 to i32
  %cmp98 = icmp eq i32 %conv96, %conv97
  br i1 %cmp98, label %land.rhs100, label %land.end103

land.rhs100:                                      ; preds = %for.cond
  %71 = load i8*, i8** %p1, align 4
  %72 = load i8, i8* %71, align 1
  %conv101 = sext i8 %72 to i32
  %tobool102 = icmp ne i32 %conv101, 0
  br label %land.end103

land.end103:                                      ; preds = %land.rhs100, %for.cond
  %73 = phi i1 [ false, %for.cond ], [ %tobool102, %land.rhs100 ]
  br i1 %73, label %for.body, label %for.end

for.body:                                         ; preds = %land.end103
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %74 = load i8*, i8** %p1, align 4
  %incdec.ptr104 = getelementptr inbounds i8, i8* %74, i32 1
  store i8* %incdec.ptr104, i8** %p1, align 4
  %75 = load i8*, i8** %p2, align 4
  %incdec.ptr105 = getelementptr inbounds i8, i8* %75, i32 1
  store i8* %incdec.ptr105, i8** %p2, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end103
  %76 = load i8*, i8** %p1, align 4
  %77 = load i8, i8* %76, align 1
  %conv106 = sext i8 %77 to i32
  %78 = load i8*, i8** %p2, align 4
  %79 = load i8, i8* %78, align 1
  %conv107 = sext i8 %79 to i32
  %sub108 = sub nsw i32 %conv106, %conv107
  store i32 %sub108, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then89, %if.end80, %if.then75
  %80 = load i32, i32* %retval, align 4
  ret i32 %80
}

; Function Attrs: nounwind readonly
declare i32 @tolower(i32 %0) #1

; Function Attrs: nounwind readonly
declare i32 @isdigit(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %colFmts = alloca [3 x i8*], align 4
  %r1 = alloca [3 x i8*], align 4
  %r2 = alloca [3 x i8*], align 4
  %r3 = alloca [3 x i8*], align 4
  %r4 = alloca [3 x i8*], align 4
  %r5 = alloca [3 x i8*], align 4
  %r6 = alloca [3 x i8*], align 4
  %r7 = alloca [3 x i8*], align 4
  %r8 = alloca [3 x i8*], align 4
  %rows = alloca [8 x i8**], align 16
  %table = alloca %struct.sTable, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [3 x i8*]* %colFmts to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 bitcast ([3 x i8*]* @__const.main.colFmts to i8*), i32 12, i1 false)
  %1 = bitcast [3 x i8*]* %r1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %1, i8* align 4 bitcast ([3 x i8*]* @__const.main.r1 to i8*), i32 12, i1 false)
  %2 = bitcast [3 x i8*]* %r2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %2, i8* align 4 bitcast ([3 x i8*]* @__const.main.r2 to i8*), i32 12, i1 false)
  %3 = bitcast [3 x i8*]* %r3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %3, i8* align 4 bitcast ([3 x i8*]* @__const.main.r3 to i8*), i32 12, i1 false)
  %4 = bitcast [3 x i8*]* %r4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %4, i8* align 4 bitcast ([3 x i8*]* @__const.main.r4 to i8*), i32 12, i1 false)
  %5 = bitcast [3 x i8*]* %r5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %5, i8* align 4 bitcast ([3 x i8*]* @__const.main.r5 to i8*), i32 12, i1 false)
  %6 = bitcast [3 x i8*]* %r6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %6, i8* align 4 bitcast ([3 x i8*]* @__const.main.r6 to i8*), i32 12, i1 false)
  %7 = bitcast [3 x i8*]* %r7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %7, i8* align 4 bitcast ([3 x i8*]* @__const.main.r7 to i8*), i32 12, i1 false)
  %8 = bitcast [3 x i8*]* %r8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %8, i8* align 4 bitcast ([3 x i8*]* @__const.main.r8 to i8*), i32 12, i1 false)
  %arrayinit.begin = getelementptr inbounds [8 x i8**], [8 x i8**]* %rows, i32 0, i32 0
  %arraydecay = getelementptr inbounds [3 x i8*], [3 x i8*]* %r1, i32 0, i32 0
  store i8** %arraydecay, i8*** %arrayinit.begin, align 4
  %arrayinit.element = getelementptr inbounds i8**, i8*** %arrayinit.begin, i32 1
  %arraydecay1 = getelementptr inbounds [3 x i8*], [3 x i8*]* %r2, i32 0, i32 0
  store i8** %arraydecay1, i8*** %arrayinit.element, align 4
  %arrayinit.element2 = getelementptr inbounds i8**, i8*** %arrayinit.element, i32 1
  %arraydecay3 = getelementptr inbounds [3 x i8*], [3 x i8*]* %r3, i32 0, i32 0
  store i8** %arraydecay3, i8*** %arrayinit.element2, align 4
  %arrayinit.element4 = getelementptr inbounds i8**, i8*** %arrayinit.element2, i32 1
  %arraydecay5 = getelementptr inbounds [3 x i8*], [3 x i8*]* %r4, i32 0, i32 0
  store i8** %arraydecay5, i8*** %arrayinit.element4, align 4
  %arrayinit.element6 = getelementptr inbounds i8**, i8*** %arrayinit.element4, i32 1
  %arraydecay7 = getelementptr inbounds [3 x i8*], [3 x i8*]* %r5, i32 0, i32 0
  store i8** %arraydecay7, i8*** %arrayinit.element6, align 4
  %arrayinit.element8 = getelementptr inbounds i8**, i8*** %arrayinit.element6, i32 1
  %arraydecay9 = getelementptr inbounds [3 x i8*], [3 x i8*]* %r6, i32 0, i32 0
  store i8** %arraydecay9, i8*** %arrayinit.element8, align 4
  %arrayinit.element10 = getelementptr inbounds i8**, i8*** %arrayinit.element8, i32 1
  %arraydecay11 = getelementptr inbounds [3 x i8*], [3 x i8*]* %r7, i32 0, i32 0
  store i8** %arraydecay11, i8*** %arrayinit.element10, align 4
  %arrayinit.element12 = getelementptr inbounds i8**, i8*** %arrayinit.element10, i32 1
  %arraydecay13 = getelementptr inbounds [3 x i8*], [3 x i8*]* %r8, i32 0, i32 0
  store i8** %arraydecay13, i8*** %arrayinit.element12, align 4
  %arraydecay14 = getelementptr inbounds [8 x i8**], [8 x i8**]* %rows, i32 0, i32 0
  %rows15 = getelementptr inbounds %struct.sTable, %struct.sTable* %table, i32 0, i32 0
  store i8*** %arraydecay14, i8**** %rows15, align 4
  %n_rows = getelementptr inbounds %struct.sTable, %struct.sTable* %table, i32 0, i32 1
  store i32 8, i32* %n_rows, align 4
  %n_cols = getelementptr inbounds %struct.sTable, %struct.sTable* %table, i32 0, i32 2
  store i32 3, i32* %n_cols, align 4
  %call = call i32 (%struct.sTable*, i8*, ...) @sortTable(%struct.sTable* %table, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.28, i32 0, i32 0))
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.29, i32 0, i32 0))
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %arraydecay17 = getelementptr inbounds [3 x i8*], [3 x i8*]* %colFmts, i32 0, i32 0
  call void @printTable(%struct.sTable* %table, %struct._IO_FILE* %9, i8** %arraydecay17)
  %call18 = call i32 (%struct.sTable*, i8*, ...) @sortTable(%struct.sTable* %table, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.30, i32 0, i32 0), i32 1, i32 (i8*, i8*)* @cmprStrgs)
  %call19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.31, i32 0, i32 0))
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %arraydecay20 = getelementptr inbounds [3 x i8*], [3 x i8*]* %colFmts, i32 0, i32 0
  call void @printTable(%struct.sTable* %table, %struct._IO_FILE* %10, i8** %arraydecay20)
  %call21 = call i32 (%struct.sTable*, i8*, ...) @sortTable(%struct.sTable* %table, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.32, i32 0, i32 0), i32 1)
  %call22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.33, i32 0, i32 0))
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %arraydecay23 = getelementptr inbounds [3 x i8*], [3 x i8*]* %colFmts, i32 0, i32 0
  call void @printTable(%struct.sTable* %table, %struct._IO_FILE* %11, i8** %arraydecay23)
  %call24 = call i32 (%struct.sTable*, i8*, ...) @sortTable(%struct.sTable* %table, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.34, i32 0, i32 0), i32 2, i32 1)
  %call25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.35, i32 0, i32 0))
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %arraydecay26 = getelementptr inbounds [3 x i8*], [3 x i8*]* %colFmts, i32 0, i32 0
  call void @printTable(%struct.sTable* %table, %struct._IO_FILE* %12, i8** %arraydecay26)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #4

declare i32 @printf(i8* %0, ...) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind willreturn }
attributes #5 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %3 = load i8, i8* %2, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %3 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %call = call i32 @tolower(i32 %conv) #5
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i8, i8* %4, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv1 = sext i8 %5 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %call2 = call i32 @tolower(i32 %conv1) #5
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %call, %call2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %7 = load i8, i8* %6, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv4 = sext i8 %7 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %conv4, 0
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %8 = phi i1 [ false, %while.cond ], [ %tobool, %land.rhs ]
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i8, i8* %11, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv6 = sext i8 %12 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %call7 = call i32 @isdigit(i32 %conv6) #5
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool8 = icmp ne i32 %call7, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %14 = load i8, i8* %13, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv9 = sext i8 %14 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %sub = sub i32 %conv9, 48
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 48:i32
infer %2

; *****
; For LLVM instruction:
;  %cmp10 = icmp ult i32 %sub, 10
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 48:i32
%3:i1 = ult %2, 10:i32
infer %3

; *****
; For LLVM instruction:
;  %16 = load i8, i8* %15, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv13 = sext i8 %16 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %call14 = call i32 @isdigit(i32 %conv13) #5
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool15 = icmp ne i32 %call14, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %18 = load i8, i8* %17, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv17 = sext i8 %18 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %sub18 = sub i32 %conv17, 48
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 48:i32
infer %2

; *****
; For LLVM instruction:
;  %cmp19 = icmp ult i32 %sub18, 10
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 48:i32
%3:i1 = ult %2, 10:i32
infer %3

; *****
; For LLVM instruction:
;  %20 = load i8, i8* %19, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv21 = sext i8 %20 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp22 = icmp eq i32 %conv21, 48
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 48:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %22 = load i8, i8* %21, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv24 = sext i8 %22 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp25 = icmp eq i32 %conv24, 48
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 48:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %cmp29 = icmp ugt i8* %23, %24
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %28 = load i8, i8* %27, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv34 = sext i8 %28 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp35 = icmp ne i32 %conv34, 48
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 48:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %30 = load i8, i8* %29, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv40 = sext i8 %30 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %call41 = call i32 @isdigit(i32 %conv40) #5
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool42 = icmp ne i32 %call41, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %32 = load i8, i8* %31, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv44 = sext i8 %32 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %sub45 = sub i32 %conv44, 48
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 48:i32
infer %2

; *****
; For LLVM instruction:
;  %cmp46 = icmp ult i32 %sub45, 10
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 48:i32
%3:i1 = ult %2, 10:i32
infer %3

; *****
; For LLVM instruction:
;  %38 = load i8, i8* %37, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv54 = sext i8 %38 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %sub55 = sub i32 %conv54, 48
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 48:i32
infer %2

; *****
; For LLVM instruction:
;  %cmp56 = icmp ult i32 %sub55, 10
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 48:i32
%3:i1 = ult %2, 10:i32
infer %3

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %v1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 10, %39
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 10:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %41 = load i8, i8* %40, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %call59 = call i32 @ord(i8 signext %41)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %mul, %call59
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw 10:i32, %1
%3:i32 = addnsw %0, %2
infer %3

; *****
; For LLVM instruction:
;  %44 = load i8, i8* %43, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv63 = sext i8 %44 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %sub64 = sub i32 %conv63, 48
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 48:i32
infer %2

; *****
; For LLVM instruction:
;  %cmp65 = icmp ult i32 %sub64, 10
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 48:i32
%3:i1 = ult %2, 10:i32
infer %3

; *****
; For LLVM instruction:
;  %45 = load i32, i32* %v2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul68 = mul nsw i32 10, %45
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 10:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %47 = load i8, i8* %46, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %call69 = call i32 @ord(i8 signext %47)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add70 = add nsw i32 %mul68, %call69
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw 10:i32, %1
%3:i32 = addnsw %0, %2
infer %3

; *****
; For LLVM instruction:
;  %49 = load i32, i32* %v1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %50 = load i32, i32* %v2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp73 = icmp eq i32 %49, %50
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %sub.ptr.lhs.cast = ptrtoint i8* %51 to i32
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub.ptr.rhs.cast = ptrtoint i8* %52 to i32
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub.ptr.sub = sub i32 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1
infer %2

; *****
; For LLVM instruction:
;  %sub.ptr.lhs.cast76 = ptrtoint i8* %53 to i32
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub.ptr.rhs.cast77 = ptrtoint i8* %54 to i32
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub.ptr.sub78 = sub i32 %sub.ptr.lhs.cast76, %sub.ptr.rhs.cast77
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1
infer %2

; *****
; For LLVM instruction:
;  %sub79 = sub nsw i32 %sub.ptr.sub, %sub.ptr.sub78
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = sub %3, %4
%6:i32 = subnsw %2, %5
infer %6

; *****
; For LLVM instruction:
;  %55 = load i32, i32* %v1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %56 = load i32, i32* %v2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub81 = sub nsw i32 %55, %56
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %58 = load i8, i8* %57, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv83 = sext i8 %58 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %call84 = call i32 @tolower(i32 %conv83) #5
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %60 = load i8, i8* %59, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv85 = sext i8 %60 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %call86 = call i32 @tolower(i32 %conv85) #5
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp87 = icmp ne i32 %call84, %call86
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2

; *****
; For LLVM instruction:
;  %62 = load i8, i8* %61, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv90 = sext i8 %62 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %call91 = call i32 @tolower(i32 %conv90) #5
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %64 = load i8, i8* %63, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv92 = sext i8 %64 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %call93 = call i32 @tolower(i32 %conv92) #5
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub94 = sub nsw i32 %call91, %call93
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %68 = load i8, i8* %67, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv96 = sext i8 %68 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %70 = load i8, i8* %69, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv97 = sext i8 %70 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp98 = icmp eq i32 %conv96, %conv97
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i1 = eq %1, %3
infer %4

; *****
; For LLVM instruction:
;  %72 = load i8, i8* %71, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv101 = sext i8 %72 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %tobool102 = icmp ne i32 %conv101, 0
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %73 = phi i1 [ false, %for.cond ], [ %tobool102, %land.rhs100 ]
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %77 = load i8, i8* %76, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv106 = sext i8 %77 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %79 = load i8, i8* %78, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv107 = sext i8 %79 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %sub108 = sub nsw i32 %conv106, %conv107
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i32 = subnsw %1, %3
infer %4

; *****
; For LLVM instruction:
;  %80 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 0:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 48:i32
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -48
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -49
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i32 = sub %1, 48:i32
%3:i1 = ult %2, 10:i32
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 48:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 48:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mulnsw 10:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1614807090
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw 10:i32, %1
%3:i32 = addnsw %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147483632
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = mulnsw 10:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 7 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1
%3:i32 = var
%4:i32 = var
%5:i32 = sub %3, %4
%6:i32 = subnsw %2, %5
infer %6


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147483646
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 7 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147418112
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i1 = eq %1, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i32 = subnsw %1, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for cmprStrgs()

; entering Souper's runOnFunction() for main()

; ModuleID = './Optional_parameters.c.bc'
source_filename = "./Optional_parameters.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.anon = type { i32 (i8*, i8*)*, i32, i32 }
%struct._IO_FILE = type opaque
%struct.sTable = type { i8***, i32, i32 }

@sortSpec = hidden global %struct.anon zeroinitializer, align 4
@.str = private unnamed_addr constant [4 x i8] c"   \00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.2 = private unnamed_addr constant [8 x i8] c" %-5.5s\00", align 1
@.str.3 = private unnamed_addr constant [8 x i8] c" %-9.9s\00", align 1
@__const.main.colFmts = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i32 0, i32 0)], align 4
@.str.4 = private unnamed_addr constant [5 x i8] c"a101\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"red\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"Java\00", align 1
@__const.main.r1 = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0)], align 4
@.str.7 = private unnamed_addr constant [5 x i8] c"ab40\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"gren\00", align 1
@.str.9 = private unnamed_addr constant [10 x i8] c"Smalltalk\00", align 1
@__const.main.r2 = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.9, i32 0, i32 0)], align 4
@.str.10 = private unnamed_addr constant [4 x i8] c"ab9\00", align 1
@.str.11 = private unnamed_addr constant [5 x i8] c"blue\00", align 1
@.str.12 = private unnamed_addr constant [8 x i8] c"Fortran\00", align 1
@__const.main.r3 = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.12, i32 0, i32 0)], align 4
@.str.13 = private unnamed_addr constant [5 x i8] c"ab09\00", align 1
@.str.14 = private unnamed_addr constant [5 x i8] c"ylow\00", align 1
@.str.15 = private unnamed_addr constant [7 x i8] c"Python\00", align 1
@__const.main.r4 = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.15, i32 0, i32 0)], align 4
@.str.16 = private unnamed_addr constant [5 x i8] c"ab1a\00", align 1
@.str.17 = private unnamed_addr constant [5 x i8] c"blak\00", align 1
@.str.18 = private unnamed_addr constant [7 x i8] c"Factor\00", align 1
@__const.main.r5 = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.18, i32 0, i32 0)], align 4
@.str.19 = private unnamed_addr constant [5 x i8] c"ab1b\00", align 1
@.str.20 = private unnamed_addr constant [5 x i8] c"brwn\00", align 1
@.str.21 = private unnamed_addr constant [8 x i8] c"C Sharp\00", align 1
@__const.main.r6 = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.21, i32 0, i32 0)], align 4
@.str.22 = private unnamed_addr constant [5 x i8] c"Ab1b\00", align 1
@.str.23 = private unnamed_addr constant [5 x i8] c"pink\00", align 1
@.str.24 = private unnamed_addr constant [5 x i8] c"Ruby\00", align 1
@__const.main.r7 = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.24, i32 0, i32 0)], align 4
@.str.25 = private unnamed_addr constant [4 x i8] c"ab1\00", align 1
@.str.26 = private unnamed_addr constant [5 x i8] c"orng\00", align 1
@.str.27 = private unnamed_addr constant [7 x i8] c"Scheme\00", align 1
@__const.main.r8 = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.26, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.27, i32 0, i32 0)], align 4
@.str.28 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.29 = private unnamed_addr constant [26 x i8] c"sort on col 0, ascending\0A\00", align 1
@stdout = external constant %struct._IO_FILE*, align 4
@.str.30 = private unnamed_addr constant [3 x i8] c"ro\00", align 1
@.str.31 = private unnamed_addr constant [32 x i8] c"sort on col 0, reverse.special\0A\00", align 1
@.str.32 = private unnamed_addr constant [2 x i8] c"c\00", align 1
@.str.33 = private unnamed_addr constant [26 x i8] c"sort on col 1, ascending\0A\00", align 1
@.str.34 = private unnamed_addr constant [3 x i8] c"cr\00", align 1
@.str.35 = private unnamed_addr constant [24 x i8] c"sort on col 2, reverse\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @CmprRows(i8* %aa, i8* %bb) #0 {
entry:
  %aa.addr = alloca i8*, align 4
  %bb.addr = alloca i8*, align 4
  %rA = alloca i8**, align 4
  %rB = alloca i8**, align 4
  %sortCol = alloca i32, align 4
  %left = alloca i8*, align 4
  %right = alloca i8*, align 4
  store i8* %aa, i8** %aa.addr, align 4
  store i8* %bb, i8** %bb.addr, align 4
  %0 = load i8*, i8** %aa.addr, align 4
  %1 = bitcast i8* %0 to i8***
  %2 = load i8**, i8*** %1, align 4
  store i8** %2, i8*** %rA, align 4
  %3 = load i8*, i8** %bb.addr, align 4
  %4 = bitcast i8* %3 to i8***
  %5 = load i8**, i8*** %4, align 4
  store i8** %5, i8*** %rB, align 4
  %6 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sortSpec, i32 0, i32 1), align 4
  store i32 %6, i32* %sortCol, align 4
  %7 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sortSpec, i32 0, i32 2), align 4
  %tobool = icmp ne i32 %7, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %8 = load i8**, i8*** %rB, align 4
  %9 = load i32, i32* %sortCol, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %8, i32 %9
  %10 = load i8*, i8** %arrayidx, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  %11 = load i8**, i8*** %rA, align 4
  %12 = load i32, i32* %sortCol, align 4
  %arrayidx1 = getelementptr inbounds i8*, i8** %11, i32 %12
  %13 = load i8*, i8** %arrayidx1, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %10, %cond.true ], [ %13, %cond.false ]
  store i8* %cond, i8** %left, align 4
  %14 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sortSpec, i32 0, i32 2), align 4
  %tobool2 = icmp ne i32 %14, 0
  br i1 %tobool2, label %cond.true3, label %cond.false5

cond.true3:                                       ; preds = %cond.end
  %15 = load i8**, i8*** %rA, align 4
  %16 = load i32, i32* %sortCol, align 4
  %arrayidx4 = getelementptr inbounds i8*, i8** %15, i32 %16
  %17 = load i8*, i8** %arrayidx4, align 4
  br label %cond.end7

cond.false5:                                      ; preds = %cond.end
  %18 = load i8**, i8*** %rB, align 4
  %19 = load i32, i32* %sortCol, align 4
  %arrayidx6 = getelementptr inbounds i8*, i8** %18, i32 %19
  %20 = load i8*, i8** %arrayidx6, align 4
  br label %cond.end7

cond.end7:                                        ; preds = %cond.false5, %cond.true3
  %cond8 = phi i8* [ %17, %cond.true3 ], [ %20, %cond.false5 ]
  store i8* %cond8, i8** %right, align 4
  %21 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** getelementptr inbounds (%struct.anon, %struct.anon* @sortSpec, i32 0, i32 0), align 4
  %22 = load i8*, i8** %left, align 4
  %23 = load i8*, i8** %right, align 4
  %call = call i32 %21(i8* %22, i8* %23)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @sortTable(%struct.sTable* %tbl, i8* %argSpec, ...) #0 {
entry:
  %tbl.addr = alloca %struct.sTable*, align 4
  %argSpec.addr = alloca i8*, align 4
  %vl = alloca i8*, align 4
  %p = alloca i8*, align 4
  %c = alloca i32, align 4
  store %struct.sTable* %tbl, %struct.sTable** %tbl.addr, align 4
  store i8* %argSpec, i8** %argSpec.addr, align 4
  store i32 (i8*, i8*)* @strcmp, i32 (i8*, i8*)** getelementptr inbounds (%struct.anon, %struct.anon* @sortSpec, i32 0, i32 0), align 4
  store i32 0, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sortSpec, i32 0, i32 1), align 4
  store i32 0, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sortSpec, i32 0, i32 2), align 4
  %vl1 = bitcast i8** %vl to i8*
  call void @llvm.va_start(i8* %vl1)
  %0 = load i8*, i8** %argSpec.addr, align 4
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.then, label %if.end15

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** %argSpec.addr, align 4
  store i8* %1, i8** %p, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %2 = load i8*, i8** %p, align 4
  %3 = load i8, i8* %2, align 1
  %tobool2 = icmp ne i8 %3, 0
  br i1 %tobool2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i8*, i8** %p, align 4
  %5 = load i8, i8* %4, align 1
  %conv = sext i8 %5 to i32
  switch i32 %conv, label %sw.epilog [
    i32 111, label %sw.bb
    i32 99, label %sw.bb3
    i32 114, label %sw.bb10
  ]

sw.bb:                                            ; preds = %for.body
  %argp.cur = load i8*, i8** %vl, align 4
  %argp.next = getelementptr inbounds i8, i8* %argp.cur, i32 4
  store i8* %argp.next, i8** %vl, align 4
  %6 = bitcast i8* %argp.cur to i32 (i8*, i8*)**
  %7 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %6, align 4
  store i32 (i8*, i8*)* %7, i32 (i8*, i8*)** getelementptr inbounds (%struct.anon, %struct.anon* @sortSpec, i32 0, i32 0), align 4
  br label %sw.epilog

sw.bb3:                                           ; preds = %for.body
  %argp.cur4 = load i8*, i8** %vl, align 4
  %argp.next5 = getelementptr inbounds i8, i8* %argp.cur4, i32 4
  store i8* %argp.next5, i8** %vl, align 4
  %8 = bitcast i8* %argp.cur4 to i32*
  %9 = load i32, i32* %8, align 4
  store i32 %9, i32* %c, align 4
  %10 = load i32, i32* %c, align 4
  %cmp = icmp sle i32 0, %10
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %sw.bb3
  %11 = load i32, i32* %c, align 4
  %12 = load %struct.sTable*, %struct.sTable** %tbl.addr, align 4
  %n_cols = getelementptr inbounds %struct.sTable, %struct.sTable* %12, i32 0, i32 2
  %13 = load i32, i32* %n_cols, align 4
  %cmp7 = icmp slt i32 %11, %13
  br i1 %cmp7, label %if.then9, label %if.end

if.then9:                                         ; preds = %land.lhs.true
  %14 = load i32, i32* %c, align 4
  store i32 %14, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sortSpec, i32 0, i32 1), align 4
  br label %if.end

if.end:                                           ; preds = %if.then9, %land.lhs.true, %sw.bb3
  br label %sw.epilog

sw.bb10:                                          ; preds = %for.body
  %argp.cur11 = load i8*, i8** %vl, align 4
  %argp.next12 = getelementptr inbounds i8, i8* %argp.cur11, i32 4
  store i8* %argp.next12, i8** %vl, align 4
  %15 = bitcast i8* %argp.cur11 to i32*
  %16 = load i32, i32* %15, align 4
  %cmp13 = icmp ne i32 0, %16
  %conv14 = zext i1 %cmp13 to i32
  store i32 %conv14, i32* getelementptr inbounds (%struct.anon, %struct.anon* @sortSpec, i32 0, i32 2), align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %for.body, %sw.bb10, %if.end, %sw.bb
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %17 = load i8*, i8** %p, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %17, i32 1
  store i8* %incdec.ptr, i8** %p, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end15

if.end15:                                         ; preds = %for.end, %entry
  %vl16 = bitcast i8** %vl to i8*
  call void @llvm.va_end(i8* %vl16)
  %18 = load %struct.sTable*, %struct.sTable** %tbl.addr, align 4
  %rows = getelementptr inbounds %struct.sTable, %struct.sTable* %18, i32 0, i32 0
  %19 = load i8***, i8**** %rows, align 4
  %20 = bitcast i8*** %19 to i8*
  %21 = load %struct.sTable*, %struct.sTable** %tbl.addr, align 4
  %n_rows = getelementptr inbounds %struct.sTable, %struct.sTable* %21, i32 0, i32 1
  %22 = load i32, i32* %n_rows, align 4
  call void @qsort(i8* %20, i32 %22, i32 4, i32 (i8*, i8*)* @CmprRows)
  ret i32 0
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #1

; Function Attrs: nounwind
declare void @llvm.va_start(i8* %0) #2

; Function Attrs: nounwind
declare void @llvm.va_end(i8* %0) #2

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #3

; Function Attrs: noinline nounwind optnone
define hidden void @printTable(%struct.sTable* %tbl, %struct._IO_FILE* %fout, i8** %colFmts) #0 {
entry:
  %tbl.addr = alloca %struct.sTable*, align 4
  %fout.addr = alloca %struct._IO_FILE*, align 4
  %colFmts.addr = alloca i8**, align 4
  %row = alloca i32, align 4
  %col = alloca i32, align 4
  store %struct.sTable* %tbl, %struct.sTable** %tbl.addr, align 4
  store %struct._IO_FILE* %fout, %struct._IO_FILE** %fout.addr, align 4
  store i8** %colFmts, i8*** %colFmts.addr, align 4
  store i32 0, i32* %row, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc8, %entry
  %0 = load i32, i32* %row, align 4
  %1 = load %struct.sTable*, %struct.sTable** %tbl.addr, align 4
  %n_rows = getelementptr inbounds %struct.sTable, %struct.sTable* %1, i32 0, i32 1
  %2 = load i32, i32* %n_rows, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end10

for.body:                                         ; preds = %for.cond
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %fout.addr, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %col, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %4 = load i32, i32* %col, align 4
  %5 = load %struct.sTable*, %struct.sTable** %tbl.addr, align 4
  %n_cols = getelementptr inbounds %struct.sTable, %struct.sTable* %5, i32 0, i32 2
  %6 = load i32, i32* %n_cols, align 4
  %cmp2 = icmp slt i32 %4, %6
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %fout.addr, align 4
  %8 = load i8**, i8*** %colFmts.addr, align 4
  %9 = load i32, i32* %col, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %8, i32 %9
  %10 = load i8*, i8** %arrayidx, align 4
  %11 = load %struct.sTable*, %struct.sTable** %tbl.addr, align 4
  %rows = getelementptr inbounds %struct.sTable, %struct.sTable* %11, i32 0, i32 0
  %12 = load i8***, i8**** %rows, align 4
  %13 = load i32, i32* %row, align 4
  %arrayidx4 = getelementptr inbounds i8**, i8*** %12, i32 %13
  %14 = load i8**, i8*** %arrayidx4, align 4
  %15 = load i32, i32* %col, align 4
  %arrayidx5 = getelementptr inbounds i8*, i8** %14, i32 %15
  %16 = load i8*, i8** %arrayidx5, align 4
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* %10, i8* %16)
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %17 = load i32, i32* %col, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %col, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** %fout.addr, align 4
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %18, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  br label %for.inc8

for.inc8:                                         ; preds = %for.end
  %19 = load i32, i32* %row, align 4
  %inc9 = add nsw i32 %19, 1
  store i32 %inc9, i32* %row, align 4
  br label %for.cond

for.end10:                                        ; preds = %for.cond
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** %fout.addr, align 4
  %call11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %20, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  ret void
}

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #3

; Function Attrs: noinline nounwind optnone
define hidden i32 @ord(i8 signext %v) #0 {
entry:
  %v.addr = alloca i8, align 1
  store i8 %v, i8* %v.addr, align 1
  %0 = load i8, i8* %v.addr, align 1
  %conv = sext i8 %0 to i32
  %sub = sub nsw i32 %conv, 48
  ret i32 %sub
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @cmprStrgs(i8* %s1, i8* %s2) #0 {
entry:
  %retval = alloca i32, align 4
  %s1.addr = alloca i8*, align 4
  %s2.addr = alloca i8*, align 4
  %p1 = alloca i8*, align 4
  %p2 = alloca i8*, align 4
  %mrk1 = alloca i8*, align 4
  %mrk2 = alloca i8*, align 4
  %v1 = alloca i32, align 4
  %v2 = alloca i32, align 4
  store i8* %s1, i8** %s1.addr, align 4
  store i8* %s2, i8** %s2.addr, align 4
  %0 = load i8*, i8** %s1.addr, align 4
  store i8* %0, i8** %p1, align 4
  %1 = load i8*, i8** %s2.addr, align 4
  store i8* %1, i8** %p2, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %2 = load i8*, i8** %p1, align 4
  %3 = load i8, i8* %2, align 1
  %conv = sext i8 %3 to i32
  %call = call i32 @tolower(i32 %conv) #5
  %4 = load i8*, i8** %p2, align 4
  %5 = load i8, i8* %4, align 1
  %conv1 = sext i8 %5 to i32
  %call2 = call i32 @tolower(i32 %conv1) #5
  %cmp = icmp eq i32 %call, %call2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %6 = load i8*, i8** %p1, align 4
  %7 = load i8, i8* %6, align 1
  %conv4 = sext i8 %7 to i32
  %tobool = icmp ne i32 %conv4, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %8 = phi i1 [ false, %while.cond ], [ %tobool, %land.rhs ]
  br i1 %8, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %9 = load i8*, i8** %p1, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr, i8** %p1, align 4
  %10 = load i8*, i8** %p2, align 4
  %incdec.ptr5 = getelementptr inbounds i8, i8* %10, i32 1
  store i8* %incdec.ptr5, i8** %p2, align 4
  br label %while.cond

while.end:                                        ; preds = %land.end
  br i1 false, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.end
  %11 = load i8*, i8** %p1, align 4
  %12 = load i8, i8* %11, align 1
  %conv6 = sext i8 %12 to i32
  %call7 = call i32 @isdigit(i32 %conv6) #5
  %tobool8 = icmp ne i32 %call7, 0
  br i1 %tobool8, label %land.lhs.true, label %if.end82

cond.false:                                       ; preds = %while.end
  %13 = load i8*, i8** %p1, align 4
  %14 = load i8, i8* %13, align 1
  %conv9 = sext i8 %14 to i32
  %sub = sub i32 %conv9, 48
  %cmp10 = icmp ult i32 %sub, 10
  br i1 %cmp10, label %land.lhs.true, label %if.end82

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  br i1 false, label %cond.true12, label %cond.false16

cond.true12:                                      ; preds = %land.lhs.true
  %15 = load i8*, i8** %p2, align 4
  %16 = load i8, i8* %15, align 1
  %conv13 = sext i8 %16 to i32
  %call14 = call i32 @isdigit(i32 %conv13) #5
  %tobool15 = icmp ne i32 %call14, 0
  br i1 %tobool15, label %if.then, label %if.end82

cond.false16:                                     ; preds = %land.lhs.true
  %17 = load i8*, i8** %p2, align 4
  %18 = load i8, i8* %17, align 1
  %conv17 = sext i8 %18 to i32
  %sub18 = sub i32 %conv17, 48
  %cmp19 = icmp ult i32 %sub18, 10
  br i1 %cmp19, label %if.then, label %if.end82

if.then:                                          ; preds = %cond.false16, %cond.true12
  %19 = load i8*, i8** %p1, align 4
  %20 = load i8, i8* %19, align 1
  %conv21 = sext i8 %20 to i32
  %cmp22 = icmp eq i32 %conv21, 48
  br i1 %cmp22, label %if.then27, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then
  %21 = load i8*, i8** %p2, align 4
  %22 = load i8, i8* %21, align 1
  %conv24 = sext i8 %22 to i32
  %cmp25 = icmp eq i32 %conv24, 48
  br i1 %cmp25, label %if.then27, label %if.end52

if.then27:                                        ; preds = %lor.lhs.false, %if.then
  br label %while.cond28

while.cond28:                                     ; preds = %if.end, %if.then27
  %23 = load i8*, i8** %p1, align 4
  %24 = load i8*, i8** %s1.addr, align 4
  %cmp29 = icmp ugt i8* %23, %24
  br i1 %cmp29, label %while.body31, label %while.end38

while.body31:                                     ; preds = %while.cond28
  %25 = load i8*, i8** %p1, align 4
  %incdec.ptr32 = getelementptr inbounds i8, i8* %25, i32 -1
  store i8* %incdec.ptr32, i8** %p1, align 4
  %26 = load i8*, i8** %p2, align 4
  %incdec.ptr33 = getelementptr inbounds i8, i8* %26, i32 -1
  store i8* %incdec.ptr33, i8** %p2, align 4
  %27 = load i8*, i8** %p1, align 4
  %28 = load i8, i8* %27, align 1
  %conv34 = sext i8 %28 to i32
  %cmp35 = icmp ne i32 %conv34, 48
  br i1 %cmp35, label %if.then37, label %if.end

if.then37:                                        ; preds = %while.body31
  br label %while.end38

if.end:                                           ; preds = %while.body31
  br label %while.cond28

while.end38:                                      ; preds = %if.then37, %while.cond28
  br i1 false, label %cond.true39, label %cond.false43

cond.true39:                                      ; preds = %while.end38
  %29 = load i8*, i8** %p1, align 4
  %30 = load i8, i8* %29, align 1
  %conv40 = sext i8 %30 to i32
  %call41 = call i32 @isdigit(i32 %conv40) #5
  %tobool42 = icmp ne i32 %call41, 0
  br i1 %tobool42, label %if.end51, label %if.then48

cond.false43:                                     ; preds = %while.end38
  %31 = load i8*, i8** %p1, align 4
  %32 = load i8, i8* %31, align 1
  %conv44 = sext i8 %32 to i32
  %sub45 = sub i32 %conv44, 48
  %cmp46 = icmp ult i32 %sub45, 10
  br i1 %cmp46, label %if.end51, label %if.then48

if.then48:                                        ; preds = %cond.false43, %cond.true39
  %33 = load i8*, i8** %p1, align 4
  %incdec.ptr49 = getelementptr inbounds i8, i8* %33, i32 1
  store i8* %incdec.ptr49, i8** %p1, align 4
  %34 = load i8*, i8** %p2, align 4
  %incdec.ptr50 = getelementptr inbounds i8, i8* %34, i32 1
  store i8* %incdec.ptr50, i8** %p2, align 4
  br label %if.end51

if.end51:                                         ; preds = %if.then48, %cond.false43, %cond.true39
  br label %if.end52

if.end52:                                         ; preds = %if.end51, %lor.lhs.false
  %35 = load i8*, i8** %p1, align 4
  store i8* %35, i8** %mrk1, align 4
  %36 = load i8*, i8** %p2, align 4
  store i8* %36, i8** %mrk2, align 4
  store i32 0, i32* %v1, align 4
  br label %while.cond53

while.cond53:                                     ; preds = %while.body58, %if.end52
  %37 = load i8*, i8** %p1, align 4
  %38 = load i8, i8* %37, align 1
  %conv54 = sext i8 %38 to i32
  %sub55 = sub i32 %conv54, 48
  %cmp56 = icmp ult i32 %sub55, 10
  br i1 %cmp56, label %while.body58, label %while.end61

while.body58:                                     ; preds = %while.cond53
  %39 = load i32, i32* %v1, align 4
  %mul = mul nsw i32 10, %39
  %40 = load i8*, i8** %p1, align 4
  %41 = load i8, i8* %40, align 1
  %call59 = call i32 @ord(i8 signext %41)
  %add = add nsw i32 %mul, %call59
  store i32 %add, i32* %v1, align 4
  %42 = load i8*, i8** %p1, align 4
  %incdec.ptr60 = getelementptr inbounds i8, i8* %42, i32 1
  store i8* %incdec.ptr60, i8** %p1, align 4
  br label %while.cond53

while.end61:                                      ; preds = %while.cond53
  store i32 0, i32* %v2, align 4
  br label %while.cond62

while.cond62:                                     ; preds = %while.body67, %while.end61
  %43 = load i8*, i8** %p2, align 4
  %44 = load i8, i8* %43, align 1
  %conv63 = sext i8 %44 to i32
  %sub64 = sub i32 %conv63, 48
  %cmp65 = icmp ult i32 %sub64, 10
  br i1 %cmp65, label %while.body67, label %while.end72

while.body67:                                     ; preds = %while.cond62
  %45 = load i32, i32* %v2, align 4
  %mul68 = mul nsw i32 10, %45
  %46 = load i8*, i8** %p2, align 4
  %47 = load i8, i8* %46, align 1
  %call69 = call i32 @ord(i8 signext %47)
  %add70 = add nsw i32 %mul68, %call69
  store i32 %add70, i32* %v2, align 4
  %48 = load i8*, i8** %p2, align 4
  %incdec.ptr71 = getelementptr inbounds i8, i8* %48, i32 1
  store i8* %incdec.ptr71, i8** %p2, align 4
  br label %while.cond62

while.end72:                                      ; preds = %while.cond62
  %49 = load i32, i32* %v1, align 4
  %50 = load i32, i32* %v2, align 4
  %cmp73 = icmp eq i32 %49, %50
  br i1 %cmp73, label %if.then75, label %if.end80

if.then75:                                        ; preds = %while.end72
  %51 = load i8*, i8** %p2, align 4
  %52 = load i8*, i8** %mrk2, align 4
  %sub.ptr.lhs.cast = ptrtoint i8* %51 to i32
  %sub.ptr.rhs.cast = ptrtoint i8* %52 to i32
  %sub.ptr.sub = sub i32 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %53 = load i8*, i8** %p1, align 4
  %54 = load i8*, i8** %mrk1, align 4
  %sub.ptr.lhs.cast76 = ptrtoint i8* %53 to i32
  %sub.ptr.rhs.cast77 = ptrtoint i8* %54 to i32
  %sub.ptr.sub78 = sub i32 %sub.ptr.lhs.cast76, %sub.ptr.rhs.cast77
  %sub79 = sub nsw i32 %sub.ptr.sub, %sub.ptr.sub78
  store i32 %sub79, i32* %retval, align 4
  br label %return

if.end80:                                         ; preds = %while.end72
  %55 = load i32, i32* %v1, align 4
  %56 = load i32, i32* %v2, align 4
  %sub81 = sub nsw i32 %55, %56
  store i32 %sub81, i32* %retval, align 4
  br label %return

if.end82:                                         ; preds = %cond.false16, %cond.true12, %cond.false, %cond.true
  %57 = load i8*, i8** %p1, align 4
  %58 = load i8, i8* %57, align 1
  %conv83 = sext i8 %58 to i32
  %call84 = call i32 @tolower(i32 %conv83) #5
  %59 = load i8*, i8** %p2, align 4
  %60 = load i8, i8* %59, align 1
  %conv85 = sext i8 %60 to i32
  %call86 = call i32 @tolower(i32 %conv85) #5
  %cmp87 = icmp ne i32 %call84, %call86
  br i1 %cmp87, label %if.then89, label %if.end95

if.then89:                                        ; preds = %if.end82
  %61 = load i8*, i8** %p1, align 4
  %62 = load i8, i8* %61, align 1
  %conv90 = sext i8 %62 to i32
  %call91 = call i32 @tolower(i32 %conv90) #5
  %63 = load i8*, i8** %p2, align 4
  %64 = load i8, i8* %63, align 1
  %conv92 = sext i8 %64 to i32
  %call93 = call i32 @tolower(i32 %conv92) #5
  %sub94 = sub nsw i32 %call91, %call93
  store i32 %sub94, i32* %retval, align 4
  br label %return

if.end95:                                         ; preds = %if.end82
  %65 = load i8*, i8** %s1.addr, align 4
  store i8* %65, i8** %p1, align 4
  %66 = load i8*, i8** %s2.addr, align 4
  store i8* %66, i8** %p2, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end95
  %67 = load i8*, i8** %p1, align 4
  %68 = load i8, i8* %67, align 1
  %conv96 = sext i8 %68 to i32
  %69 = load i8*, i8** %p2, align 4
  %70 = load i8, i8* %69, align 1
  %conv97 = sext i8 %70 to i32
  %cmp98 = icmp eq i32 %conv96, %conv97
  br i1 %cmp98, label %land.rhs100, label %land.end103

land.rhs100:                                      ; preds = %for.cond
  %71 = load i8*, i8** %p1, align 4
  %72 = load i8, i8* %71, align 1
  %conv101 = sext i8 %72 to i32
  %tobool102 = icmp ne i32 %conv101, 0
  br label %land.end103

land.end103:                                      ; preds = %land.rhs100, %for.cond
  %73 = phi i1 [ false, %for.cond ], [ %tobool102, %land.rhs100 ]
  br i1 %73, label %for.body, label %for.end

for.body:                                         ; preds = %land.end103
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %74 = load i8*, i8** %p1, align 4
  %incdec.ptr104 = getelementptr inbounds i8, i8* %74, i32 1
  store i8* %incdec.ptr104, i8** %p1, align 4
  %75 = load i8*, i8** %p2, align 4
  %incdec.ptr105 = getelementptr inbounds i8, i8* %75, i32 1
  store i8* %incdec.ptr105, i8** %p2, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end103
  %76 = load i8*, i8** %p1, align 4
  %77 = load i8, i8* %76, align 1
  %conv106 = sext i8 %77 to i32
  %78 = load i8*, i8** %p2, align 4
  %79 = load i8, i8* %78, align 1
  %conv107 = sext i8 %79 to i32
  %sub108 = sub nsw i32 %conv106, %conv107
  store i32 %sub108, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then89, %if.end80, %if.then75
  %80 = load i32, i32* %retval, align 4
  ret i32 %80
}

; Function Attrs: nounwind readonly
declare i32 @tolower(i32 %0) #1

; Function Attrs: nounwind readonly
declare i32 @isdigit(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %colFmts = alloca [3 x i8*], align 4
  %r1 = alloca [3 x i8*], align 4
  %r2 = alloca [3 x i8*], align 4
  %r3 = alloca [3 x i8*], align 4
  %r4 = alloca [3 x i8*], align 4
  %r5 = alloca [3 x i8*], align 4
  %r6 = alloca [3 x i8*], align 4
  %r7 = alloca [3 x i8*], align 4
  %r8 = alloca [3 x i8*], align 4
  %rows = alloca [8 x i8**], align 16
  %table = alloca %struct.sTable, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [3 x i8*]* %colFmts to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 bitcast ([3 x i8*]* @__const.main.colFmts to i8*), i32 12, i1 false)
  %1 = bitcast [3 x i8*]* %r1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %1, i8* align 4 bitcast ([3 x i8*]* @__const.main.r1 to i8*), i32 12, i1 false)
  %2 = bitcast [3 x i8*]* %r2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %2, i8* align 4 bitcast ([3 x i8*]* @__const.main.r2 to i8*), i32 12, i1 false)
  %3 = bitcast [3 x i8*]* %r3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %3, i8* align 4 bitcast ([3 x i8*]* @__const.main.r3 to i8*), i32 12, i1 false)
  %4 = bitcast [3 x i8*]* %r4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %4, i8* align 4 bitcast ([3 x i8*]* @__const.main.r4 to i8*), i32 12, i1 false)
  %5 = bitcast [3 x i8*]* %r5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %5, i8* align 4 bitcast ([3 x i8*]* @__const.main.r5 to i8*), i32 12, i1 false)
  %6 = bitcast [3 x i8*]* %r6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %6, i8* align 4 bitcast ([3 x i8*]* @__const.main.r6 to i8*), i32 12, i1 false)
  %7 = bitcast [3 x i8*]* %r7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %7, i8* align 4 bitcast ([3 x i8*]* @__const.main.r7 to i8*), i32 12, i1 false)
  %8 = bitcast [3 x i8*]* %r8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %8, i8* align 4 bitcast ([3 x i8*]* @__const.main.r8 to i8*), i32 12, i1 false)
  %arrayinit.begin = getelementptr inbounds [8 x i8**], [8 x i8**]* %rows, i32 0, i32 0
  %arraydecay = getelementptr inbounds [3 x i8*], [3 x i8*]* %r1, i32 0, i32 0
  store i8** %arraydecay, i8*** %arrayinit.begin, align 4
  %arrayinit.element = getelementptr inbounds i8**, i8*** %arrayinit.begin, i32 1
  %arraydecay1 = getelementptr inbounds [3 x i8*], [3 x i8*]* %r2, i32 0, i32 0
  store i8** %arraydecay1, i8*** %arrayinit.element, align 4
  %arrayinit.element2 = getelementptr inbounds i8**, i8*** %arrayinit.element, i32 1
  %arraydecay3 = getelementptr inbounds [3 x i8*], [3 x i8*]* %r3, i32 0, i32 0
  store i8** %arraydecay3, i8*** %arrayinit.element2, align 4
  %arrayinit.element4 = getelementptr inbounds i8**, i8*** %arrayinit.element2, i32 1
  %arraydecay5 = getelementptr inbounds [3 x i8*], [3 x i8*]* %r4, i32 0, i32 0
  store i8** %arraydecay5, i8*** %arrayinit.element4, align 4
  %arrayinit.element6 = getelementptr inbounds i8**, i8*** %arrayinit.element4, i32 1
  %arraydecay7 = getelementptr inbounds [3 x i8*], [3 x i8*]* %r5, i32 0, i32 0
  store i8** %arraydecay7, i8*** %arrayinit.element6, align 4
  %arrayinit.element8 = getelementptr inbounds i8**, i8*** %arrayinit.element6, i32 1
  %arraydecay9 = getelementptr inbounds [3 x i8*], [3 x i8*]* %r6, i32 0, i32 0
  store i8** %arraydecay9, i8*** %arrayinit.element8, align 4
  %arrayinit.element10 = getelementptr inbounds i8**, i8*** %arrayinit.element8, i32 1
  %arraydecay11 = getelementptr inbounds [3 x i8*], [3 x i8*]* %r7, i32 0, i32 0
  store i8** %arraydecay11, i8*** %arrayinit.element10, align 4
  %arrayinit.element12 = getelementptr inbounds i8**, i8*** %arrayinit.element10, i32 1
  %arraydecay13 = getelementptr inbounds [3 x i8*], [3 x i8*]* %r8, i32 0, i32 0
  store i8** %arraydecay13, i8*** %arrayinit.element12, align 4
  %arraydecay14 = getelementptr inbounds [8 x i8**], [8 x i8**]* %rows, i32 0, i32 0
  %rows15 = getelementptr inbounds %struct.sTable, %struct.sTable* %table, i32 0, i32 0
  store i8*** %arraydecay14, i8**** %rows15, align 4
  %n_rows = getelementptr inbounds %struct.sTable, %struct.sTable* %table, i32 0, i32 1
  store i32 8, i32* %n_rows, align 4
  %n_cols = getelementptr inbounds %struct.sTable, %struct.sTable* %table, i32 0, i32 2
  store i32 3, i32* %n_cols, align 4
  %call = call i32 (%struct.sTable*, i8*, ...) @sortTable(%struct.sTable* %table, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.28, i32 0, i32 0))
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.29, i32 0, i32 0))
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %arraydecay17 = getelementptr inbounds [3 x i8*], [3 x i8*]* %colFmts, i32 0, i32 0
  call void @printTable(%struct.sTable* %table, %struct._IO_FILE* %9, i8** %arraydecay17)
  %call18 = call i32 (%struct.sTable*, i8*, ...) @sortTable(%struct.sTable* %table, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.30, i32 0, i32 0), i32 1, i32 (i8*, i8*)* @cmprStrgs)
  %call19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.31, i32 0, i32 0))
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %arraydecay20 = getelementptr inbounds [3 x i8*], [3 x i8*]* %colFmts, i32 0, i32 0
  call void @printTable(%struct.sTable* %table, %struct._IO_FILE* %10, i8** %arraydecay20)
  %call21 = call i32 (%struct.sTable*, i8*, ...) @sortTable(%struct.sTable* %table, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.32, i32 0, i32 0), i32 1)
  %call22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.33, i32 0, i32 0))
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %arraydecay23 = getelementptr inbounds [3 x i8*], [3 x i8*]* %colFmts, i32 0, i32 0
  call void @printTable(%struct.sTable* %table, %struct._IO_FILE* %11, i8** %arraydecay23)
  %call24 = call i32 (%struct.sTable*, i8*, ...) @sortTable(%struct.sTable* %table, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.34, i32 0, i32 0), i32 2, i32 1)
  %call25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.35, i32 0, i32 0))
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  %arraydecay26 = getelementptr inbounds [3 x i8*], [3 x i8*]* %colFmts, i32 0, i32 0
  call void @printTable(%struct.sTable* %table, %struct._IO_FILE* %12, i8** %arraydecay26)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #4

declare i32 @printf(i8* %0, ...) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind willreturn }
attributes #5 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
