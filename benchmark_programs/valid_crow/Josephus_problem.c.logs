
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for jos()

; ModuleID = './Josephus_problem.c.bc'
source_filename = "./Josephus_problem.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [40 x i8] c"n = %llu, k = %llu, final survivor: %d\0A\00", align 1
@.str.1 = private unnamed_addr constant [37 x i8] c"n = %llu, k = %llu, three survivors:\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c" %llu\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @jos(i32 %n, i32 %k, i32 %m) #0 {
entry:
  %n.addr = alloca i32, align 4
  %k.addr = alloca i32, align 4
  %m.addr = alloca i32, align 4
  %a = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %k, i32* %k.addr, align 4
  store i32 %m, i32* %m.addr, align 4
  %0 = load i32, i32* %m.addr, align 4
  %add = add nsw i32 %0, 1
  store i32 %add, i32* %a, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %a, align 4
  %2 = load i32, i32* %n.addr, align 4
  %cmp = icmp sle i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %m.addr, align 4
  %4 = load i32, i32* %k.addr, align 4
  %add1 = add nsw i32 %3, %4
  %5 = load i32, i32* %a, align 4
  %rem = srem i32 %add1, %5
  store i32 %rem, i32* %m.addr, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %a, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %a, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %7 = load i32, i32* %m.addr, align 4
  ret i32 %7
}

; Function Attrs: noinline nounwind optnone
define hidden i64 @jos_large(i64 %n, i64 %k, i64 %m) #0 {
entry:
  %retval = alloca i64, align 8
  %n.addr = alloca i64, align 8
  %k.addr = alloca i64, align 8
  %m.addr = alloca i64, align 8
  %a = alloca i64, align 8
  %q = alloca i64, align 8
  store i64 %n, i64* %n.addr, align 8
  store i64 %k, i64* %k.addr, align 8
  store i64 %m, i64* %m.addr, align 8
  %0 = load i64, i64* %k.addr, align 8
  %cmp = icmp ule i64 %0, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i64, i64* %n.addr, align 8
  %2 = load i64, i64* %m.addr, align 8
  %sub = sub i64 %1, %2
  %sub1 = sub i64 %sub, 1
  store i64 %sub1, i64* %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i64, i64* %m.addr, align 8
  store i64 %3, i64* %a, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end12, %if.end
  %4 = load i64, i64* %a, align 8
  %5 = load i64, i64* %n.addr, align 8
  %cmp2 = icmp ult i64 %4, %5
  br i1 %cmp2, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load i64, i64* %a, align 8
  %7 = load i64, i64* %m.addr, align 8
  %sub3 = sub i64 %6, %7
  %8 = load i64, i64* %k.addr, align 8
  %add = add i64 %sub3, %8
  %sub4 = sub i64 %add, 2
  %9 = load i64, i64* %k.addr, align 8
  %sub5 = sub i64 %9, 1
  %div = udiv i64 %sub4, %sub5
  store i64 %div, i64* %q, align 8
  %10 = load i64, i64* %a, align 8
  %11 = load i64, i64* %q, align 8
  %add6 = add i64 %10, %11
  %12 = load i64, i64* %n.addr, align 8
  %cmp7 = icmp ugt i64 %add6, %12
  br i1 %cmp7, label %if.then8, label %if.else

if.then8:                                         ; preds = %while.body
  %13 = load i64, i64* %n.addr, align 8
  %14 = load i64, i64* %a, align 8
  %sub9 = sub i64 %13, %14
  store i64 %sub9, i64* %q, align 8
  br label %if.end12

if.else:                                          ; preds = %while.body
  %15 = load i64, i64* %q, align 8
  %tobool = icmp ne i64 %15, 0
  br i1 %tobool, label %if.end11, label %if.then10

if.then10:                                        ; preds = %if.else
  store i64 1, i64* %q, align 8
  br label %if.end11

if.end11:                                         ; preds = %if.then10, %if.else
  br label %if.end12

if.end12:                                         ; preds = %if.end11, %if.then8
  %16 = load i64, i64* %m.addr, align 8
  %17 = load i64, i64* %q, align 8
  %18 = load i64, i64* %k.addr, align 8
  %mul = mul i64 %17, %18
  %add13 = add i64 %16, %mul
  %19 = load i64, i64* %q, align 8
  %20 = load i64, i64* %a, align 8
  %add14 = add i64 %20, %19
  store i64 %add14, i64* %a, align 8
  %rem = urem i64 %add13, %add14
  store i64 %rem, i64* %m.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %21 = load i64, i64* %m.addr, align 8
  store i64 %21, i64* %retval, align 8
  br label %return

return:                                           ; preds = %while.end, %if.then
  %22 = load i64, i64* %retval, align 8
  ret i64 %22
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %n = alloca i64, align 8
  %k = alloca i64, align 8
  %i = alloca i64, align 8
  store i32 0, i32* %retval, align 4
  store i64 41, i64* %n, align 8
  store i64 3, i64* %k, align 8
  %0 = load i64, i64* %n, align 8
  %1 = load i64, i64* %k, align 8
  %2 = load i64, i64* %n, align 8
  %conv = trunc i64 %2 to i32
  %3 = load i64, i64* %k, align 8
  %conv1 = trunc i64 %3 to i32
  %call = call i32 @jos(i32 %conv, i32 %conv1, i32 0)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i32 0, i32 0), i64 %0, i64 %1, i32 %call)
  store i64 -8570200862721897295, i64* %n, align 8
  store i64 12031, i64* %k, align 8
  %4 = load i64, i64* %n, align 8
  %5 = load i64, i64* %k, align 8
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.1, i32 0, i32 0), i64 %4, i64 %5)
  store i64 3, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.body, %entry
  %6 = load i64, i64* %i, align 8
  %dec = add i64 %6, -1
  store i64 %dec, i64* %i, align 8
  %tobool = icmp ne i64 %6, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i64, i64* %n, align 8
  %8 = load i64, i64* %k, align 8
  %9 = load i64, i64* %i, align 8
  %call4 = call i64 @jos_large(i64 %7, i64 %8, i64 %9)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), i64 %call4)
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call6 = call i32 @putchar(i32 10)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

declare i32 @putchar(i32 %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %m.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %0, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sle i32 %1, %2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %m.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %k.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add1 = add nsw i32 %3, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem = srem i32 %add1, %5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
%3:i32 = var
%4:i32 = srem %2, %3
infer %4

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %6, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %m.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
%3:i32 = var
%4:i32 = srem %2, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for jos()

; entering Souper's runOnFunction() for jos_large()

; ModuleID = './Josephus_problem.c.bc'
source_filename = "./Josephus_problem.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [40 x i8] c"n = %llu, k = %llu, final survivor: %d\0A\00", align 1
@.str.1 = private unnamed_addr constant [37 x i8] c"n = %llu, k = %llu, three survivors:\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c" %llu\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @jos(i32 %n, i32 %k, i32 %m) #0 {
entry:
  %n.addr = alloca i32, align 4
  %k.addr = alloca i32, align 4
  %m.addr = alloca i32, align 4
  %a = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %k, i32* %k.addr, align 4
  store i32 %m, i32* %m.addr, align 4
  %0 = load i32, i32* %m.addr, align 4
  %add = add nsw i32 %0, 1
  store i32 %add, i32* %a, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %a, align 4
  %2 = load i32, i32* %n.addr, align 4
  %cmp = icmp sle i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %m.addr, align 4
  %4 = load i32, i32* %k.addr, align 4
  %add1 = add nsw i32 %3, %4
  %5 = load i32, i32* %a, align 4
  %rem = srem i32 %add1, %5
  store i32 %rem, i32* %m.addr, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %a, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %a, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %7 = load i32, i32* %m.addr, align 4
  ret i32 %7
}

; Function Attrs: noinline nounwind optnone
define hidden i64 @jos_large(i64 %n, i64 %k, i64 %m) #0 {
entry:
  %retval = alloca i64, align 8
  %n.addr = alloca i64, align 8
  %k.addr = alloca i64, align 8
  %m.addr = alloca i64, align 8
  %a = alloca i64, align 8
  %q = alloca i64, align 8
  store i64 %n, i64* %n.addr, align 8
  store i64 %k, i64* %k.addr, align 8
  store i64 %m, i64* %m.addr, align 8
  %0 = load i64, i64* %k.addr, align 8
  %cmp = icmp ule i64 %0, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i64, i64* %n.addr, align 8
  %2 = load i64, i64* %m.addr, align 8
  %sub = sub i64 %1, %2
  %sub1 = sub i64 %sub, 1
  store i64 %sub1, i64* %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i64, i64* %m.addr, align 8
  store i64 %3, i64* %a, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end12, %if.end
  %4 = load i64, i64* %a, align 8
  %5 = load i64, i64* %n.addr, align 8
  %cmp2 = icmp ult i64 %4, %5
  br i1 %cmp2, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load i64, i64* %a, align 8
  %7 = load i64, i64* %m.addr, align 8
  %sub3 = sub i64 %6, %7
  %8 = load i64, i64* %k.addr, align 8
  %add = add i64 %sub3, %8
  %sub4 = sub i64 %add, 2
  %9 = load i64, i64* %k.addr, align 8
  %sub5 = sub i64 %9, 1
  %div = udiv i64 %sub4, %sub5
  store i64 %div, i64* %q, align 8
  %10 = load i64, i64* %a, align 8
  %11 = load i64, i64* %q, align 8
  %add6 = add i64 %10, %11
  %12 = load i64, i64* %n.addr, align 8
  %cmp7 = icmp ugt i64 %add6, %12
  br i1 %cmp7, label %if.then8, label %if.else

if.then8:                                         ; preds = %while.body
  %13 = load i64, i64* %n.addr, align 8
  %14 = load i64, i64* %a, align 8
  %sub9 = sub i64 %13, %14
  store i64 %sub9, i64* %q, align 8
  br label %if.end12

if.else:                                          ; preds = %while.body
  %15 = load i64, i64* %q, align 8
  %tobool = icmp ne i64 %15, 0
  br i1 %tobool, label %if.end11, label %if.then10

if.then10:                                        ; preds = %if.else
  store i64 1, i64* %q, align 8
  br label %if.end11

if.end11:                                         ; preds = %if.then10, %if.else
  br label %if.end12

if.end12:                                         ; preds = %if.end11, %if.then8
  %16 = load i64, i64* %m.addr, align 8
  %17 = load i64, i64* %q, align 8
  %18 = load i64, i64* %k.addr, align 8
  %mul = mul i64 %17, %18
  %add13 = add i64 %16, %mul
  %19 = load i64, i64* %q, align 8
  %20 = load i64, i64* %a, align 8
  %add14 = add i64 %20, %19
  store i64 %add14, i64* %a, align 8
  %rem = urem i64 %add13, %add14
  store i64 %rem, i64* %m.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %21 = load i64, i64* %m.addr, align 8
  store i64 %21, i64* %retval, align 8
  br label %return

return:                                           ; preds = %while.end, %if.then
  %22 = load i64, i64* %retval, align 8
  ret i64 %22
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %n = alloca i64, align 8
  %k = alloca i64, align 8
  %i = alloca i64, align 8
  store i32 0, i32* %retval, align 4
  store i64 41, i64* %n, align 8
  store i64 3, i64* %k, align 8
  %0 = load i64, i64* %n, align 8
  %1 = load i64, i64* %k, align 8
  %2 = load i64, i64* %n, align 8
  %conv = trunc i64 %2 to i32
  %3 = load i64, i64* %k, align 8
  %conv1 = trunc i64 %3 to i32
  %call = call i32 @jos(i32 %conv, i32 %conv1, i32 0)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i32 0, i32 0), i64 %0, i64 %1, i32 %call)
  store i64 -8570200862721897295, i64* %n, align 8
  store i64 12031, i64* %k, align 8
  %4 = load i64, i64* %n, align 8
  %5 = load i64, i64* %k, align 8
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.1, i32 0, i32 0), i64 %4, i64 %5)
  store i64 3, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.body, %entry
  %6 = load i64, i64* %i, align 8
  %dec = add i64 %6, -1
  store i64 %dec, i64* %i, align 8
  %tobool = icmp ne i64 %6, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i64, i64* %n, align 8
  %8 = load i64, i64* %k, align 8
  %9 = load i64, i64* %i, align 8
  %call4 = call i64 @jos_large(i64 %7, i64 %8, i64 %9)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), i64 %call4)
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call6 = call i32 @putchar(i32 10)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

declare i32 @putchar(i32 %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i64, i64* %k.addr, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ule i64 %0, 1
; Looking for a replacement for:
%0:i64 = var
%1:i1 = ule %0, 1:i64
infer %1

; *****
; For LLVM instruction:
;  %1 = load i64, i64* %n.addr, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i64, i64* %m.addr, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub i64 %1, %2
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = sub %0, %1
infer %2

; *****
; For LLVM instruction:
;  %sub1 = sub i64 %sub, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = sub %0, %1
%3:i64 = sub %2, 1:i64
infer %3

; *****
; For LLVM instruction:
;  %3 = load i64, i64* %m.addr, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i64, i64* %a, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i64, i64* %n.addr, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp ult i64 %4, %5
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %6 = load i64, i64* %a, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i64, i64* %m.addr, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %sub3 = sub i64 %6, %7
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = sub %0, %1
infer %2

; *****
; For LLVM instruction:
;  %8 = load i64, i64* %k.addr, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add i64 %sub3, %8
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = sub %1, %2
%4:i64 = add %0, %3
infer %4

; *****
; For LLVM instruction:
;  %sub4 = sub i64 %add, 2
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = sub %1, %2
%4:i64 = add %0, %3
%5:i64 = sub %4, 2:i64
infer %5

; *****
; For LLVM instruction:
;  %9 = load i64, i64* %k.addr, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %sub5 = sub i64 %9, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = sub %0, 1:i64
infer %1

; *****
; For LLVM instruction:
;  %div = udiv i64 %sub4, %sub5
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = sub %1, %2
%4:i64 = add %0, %3
%5:i64 = sub %4, 2:i64
%6:i64 = var
%7:i64 = sub %6, 1:i64
%8:i64 = udiv %5, %7
infer %8

; *****
; For LLVM instruction:
;  %10 = load i64, i64* %a, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i64, i64* %q, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %add6 = add i64 %10, %11
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %12 = load i64, i64* %n.addr, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp7 = icmp ugt i64 %add6, %12
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = add %1, %2
%4:i1 = ult %0, %3
infer %4

; *****
; For LLVM instruction:
;  %13 = load i64, i64* %n.addr, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i64, i64* %a, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %sub9 = sub i64 %13, %14
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = sub %0, %1
infer %2

; *****
; For LLVM instruction:
;  %15 = load i64, i64* %q, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i64 %15, 0
; Looking for a replacement for:
%0:i64 = var
%1:i1 = ne 0:i64, %0
infer %1

; *****
; For LLVM instruction:
;  %16 = load i64, i64* %m.addr, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i64, i64* %q, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i64, i64* %k.addr, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul i64 %17, %18
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = mul %0, %1
infer %2

; *****
; For LLVM instruction:
;  %add13 = add i64 %16, %mul
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = mul %1, %2
%4:i64 = add %0, %3
infer %4

; *****
; For LLVM instruction:
;  %19 = load i64, i64* %q, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i64, i64* %a, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %add14 = add i64 %20, %19
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %rem = urem i64 %add13, %add14
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = mul %1, %2
%4:i64 = add %0, %3
%5:i64 = var
%6:i64 = var
%7:i64 = add %5, %6 (hasExternalUses)
%8:i64 = urem %4, %7
infer %8

; *****
; For LLVM instruction:
;  %21 = load i64, i64* %m.addr, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i64, i64* %retval, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i64 = var
infer %0


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i1 = ule %0, 1:i64
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = sub %0, %1
infer %2


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = sub %0, %1
%3:i64 = sub %2, 1:i64
infer %3


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i64 = var
%1:i64 = var
%2:i64 = sub %0, %1

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i1 = ult %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = sub %1, %2
%4:i64 = add %0, %3
infer %4


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i64 = var
%1:i64 = var
%2:i64 = sub %0, %1

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = sub %1, %2
%4:i64 = add %0, %3
%5:i64 = sub %4, 2:i64
infer %5


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -2
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -3
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i64 = var
%1:i64 = var
%2:i64 = sub %0, %1

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = sub %1, %2
%4:i64 = add %0, %3

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 6 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = sub %0, 1:i64
infer %1


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = sub %1, %2
%4:i64 = add %0, %3
%5:i64 = sub %4, 2:i64
%6:i64 = var
%7:i64 = sub %6, 1:i64
%8:i64 = udiv %5, %7
infer %8


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i64 = var
%1:i64 = sub %0, 1:i64

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i64 = var
%1:i64 = var
%2:i64 = sub %0, %1

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = sub %1, %2
%4:i64 = add %0, %3

Cost = 2
verification query failed!
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1
infer %2


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = add %1, %2
%4:i1 = ult %0, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i1 = ne 0:i64, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = mul %0, %1
infer %2


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = mul %1, %2
%4:i64 = add %0, %3
infer %4


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i64 = var
%1:i64 = var
%2:i64 = mul %0, %1

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = mul %1, %2
%4:i64 = add %0, %3
%5:i64 = var
%6:i64 = var
%7:i64 = add %5, %6 (hasExternalUses)
%8:i64 = urem %4, %7
infer %8


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 5

%0:i64 = var
%1:i64 = var
%2:i64 = add %0, %1

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 6

%0:i64 = var
%1:i64 = var
%2:i64 = mul %0, %1

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 7

%0:i64 = var
%1:i64 = var
%2:i64 = var
%3:i64 = mul %1, %2
%4:i64 = add %0, %3

Cost = 2
verification query failed!
Dataflow Pruned 0/0
There are 8 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for jos_large()

; entering Souper's runOnFunction() for main()

; ModuleID = './Josephus_problem.c.bc'
source_filename = "./Josephus_problem.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [40 x i8] c"n = %llu, k = %llu, final survivor: %d\0A\00", align 1
@.str.1 = private unnamed_addr constant [37 x i8] c"n = %llu, k = %llu, three survivors:\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c" %llu\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @jos(i32 %n, i32 %k, i32 %m) #0 {
entry:
  %n.addr = alloca i32, align 4
  %k.addr = alloca i32, align 4
  %m.addr = alloca i32, align 4
  %a = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %k, i32* %k.addr, align 4
  store i32 %m, i32* %m.addr, align 4
  %0 = load i32, i32* %m.addr, align 4
  %add = add nsw i32 %0, 1
  store i32 %add, i32* %a, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %a, align 4
  %2 = load i32, i32* %n.addr, align 4
  %cmp = icmp sle i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %m.addr, align 4
  %4 = load i32, i32* %k.addr, align 4
  %add1 = add nsw i32 %3, %4
  %5 = load i32, i32* %a, align 4
  %rem = srem i32 %add1, %5
  store i32 %rem, i32* %m.addr, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %a, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %a, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %7 = load i32, i32* %m.addr, align 4
  ret i32 %7
}

; Function Attrs: noinline nounwind optnone
define hidden i64 @jos_large(i64 %n, i64 %k, i64 %m) #0 {
entry:
  %retval = alloca i64, align 8
  %n.addr = alloca i64, align 8
  %k.addr = alloca i64, align 8
  %m.addr = alloca i64, align 8
  %a = alloca i64, align 8
  %q = alloca i64, align 8
  store i64 %n, i64* %n.addr, align 8
  store i64 %k, i64* %k.addr, align 8
  store i64 %m, i64* %m.addr, align 8
  %0 = load i64, i64* %k.addr, align 8
  %cmp = icmp ule i64 %0, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i64, i64* %n.addr, align 8
  %2 = load i64, i64* %m.addr, align 8
  %sub = sub i64 %1, %2
  %sub1 = sub i64 %sub, 1
  store i64 %sub1, i64* %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i64, i64* %m.addr, align 8
  store i64 %3, i64* %a, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end12, %if.end
  %4 = load i64, i64* %a, align 8
  %5 = load i64, i64* %n.addr, align 8
  %cmp2 = icmp ult i64 %4, %5
  br i1 %cmp2, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load i64, i64* %a, align 8
  %7 = load i64, i64* %m.addr, align 8
  %sub3 = sub i64 %6, %7
  %8 = load i64, i64* %k.addr, align 8
  %add = add i64 %sub3, %8
  %sub4 = sub i64 %add, 2
  %9 = load i64, i64* %k.addr, align 8
  %sub5 = sub i64 %9, 1
  %div = udiv i64 %sub4, %sub5
  store i64 %div, i64* %q, align 8
  %10 = load i64, i64* %a, align 8
  %11 = load i64, i64* %q, align 8
  %add6 = add i64 %10, %11
  %12 = load i64, i64* %n.addr, align 8
  %cmp7 = icmp ugt i64 %add6, %12
  br i1 %cmp7, label %if.then8, label %if.else

if.then8:                                         ; preds = %while.body
  %13 = load i64, i64* %n.addr, align 8
  %14 = load i64, i64* %a, align 8
  %sub9 = sub i64 %13, %14
  store i64 %sub9, i64* %q, align 8
  br label %if.end12

if.else:                                          ; preds = %while.body
  %15 = load i64, i64* %q, align 8
  %tobool = icmp ne i64 %15, 0
  br i1 %tobool, label %if.end11, label %if.then10

if.then10:                                        ; preds = %if.else
  store i64 1, i64* %q, align 8
  br label %if.end11

if.end11:                                         ; preds = %if.then10, %if.else
  br label %if.end12

if.end12:                                         ; preds = %if.end11, %if.then8
  %16 = load i64, i64* %m.addr, align 8
  %17 = load i64, i64* %q, align 8
  %18 = load i64, i64* %k.addr, align 8
  %mul = mul i64 %17, %18
  %add13 = add i64 %16, %mul
  %19 = load i64, i64* %q, align 8
  %20 = load i64, i64* %a, align 8
  %add14 = add i64 %20, %19
  store i64 %add14, i64* %a, align 8
  %rem = urem i64 %add13, %add14
  store i64 %rem, i64* %m.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %21 = load i64, i64* %m.addr, align 8
  store i64 %21, i64* %retval, align 8
  br label %return

return:                                           ; preds = %while.end, %if.then
  %22 = load i64, i64* %retval, align 8
  ret i64 %22
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %n = alloca i64, align 8
  %k = alloca i64, align 8
  %i = alloca i64, align 8
  store i32 0, i32* %retval, align 4
  store i64 41, i64* %n, align 8
  store i64 3, i64* %k, align 8
  %0 = load i64, i64* %n, align 8
  %1 = load i64, i64* %k, align 8
  %2 = load i64, i64* %n, align 8
  %conv = trunc i64 %2 to i32
  %3 = load i64, i64* %k, align 8
  %conv1 = trunc i64 %3 to i32
  %call = call i32 @jos(i32 %conv, i32 %conv1, i32 0)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i32 0, i32 0), i64 %0, i64 %1, i32 %call)
  store i64 -8570200862721897295, i64* %n, align 8
  store i64 12031, i64* %k, align 8
  %4 = load i64, i64* %n, align 8
  %5 = load i64, i64* %k, align 8
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.1, i32 0, i32 0), i64 %4, i64 %5)
  store i64 3, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.body, %entry
  %6 = load i64, i64* %i, align 8
  %dec = add i64 %6, -1
  store i64 %dec, i64* %i, align 8
  %tobool = icmp ne i64 %6, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i64, i64* %n, align 8
  %8 = load i64, i64* %k, align 8
  %9 = load i64, i64* %i, align 8
  %call4 = call i64 @jos_large(i64 %7, i64 %8, i64 %9)
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), i64 %call4)
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call6 = call i32 @putchar(i32 10)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

declare i32 @putchar(i32 %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i64, i64* %n, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i64, i64* %k, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i64, i64* %n, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %conv = trunc i64 %2 to i32
; Looking for a replacement for:
%0:i64 = var
%1:i32 = trunc %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i64, i64* %k, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %conv1 = trunc i64 %3 to i32
; Looking for a replacement for:
%0:i64 = var
%1:i32 = trunc %0
infer %1

; *****
; For LLVM instruction:
;  %call = call i32 @jos(i32 %conv, i32 %conv1, i32 0)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i64, i64* %n, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i64, i64* %k, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i64, i64* %i, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %dec = add i64 %6, -1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = add 18446744073709551615:i64, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool = icmp ne i64 %6, 0
; Looking for a replacement for:
%0:i64 = var
%1:i1 = ne 0:i64, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i64, i64* %n, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i64, i64* %k, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i64, i64* %i, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %call4 = call i64 @jos_large(i64 %7, i64 %8, i64 %9)
; Looking for a replacement for:
%0:i64 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i64 = var
infer %0 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4294967295
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i32 = trunc %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = add 18446744073709551615:i64, %0
infer %1


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
