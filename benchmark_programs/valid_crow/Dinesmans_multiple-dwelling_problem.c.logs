
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for c0()

; ModuleID = './Dinesmans_multiple-dwelling_problem.c.bc'
source_filename = "./Dinesmans_multiple-dwelling_problem.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@verbose = hidden global i32 0, align 4
@solution = hidden global [5 x i32] zeroinitializer, align 16
@occupied = hidden global [5 x i32] zeroinitializer, align 16
@.str = private unnamed_addr constant [6 x i8] c"baker\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"cooper\00", align 1
@.str.2 = private unnamed_addr constant [9 x i8] c"fletcher\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"miller\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"smith\00", align 1
@names = hidden global [5 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0)], align 16
@cond = hidden global [6 x i32 (i32*)*] [i32 (i32*)* @c0, i32 (i32*)* @c1, i32 (i32*)* @c2, i32 (i32*)* @c3, i32 (i32*)* @c4, i32 (i32*)* @c5], align 16
@.str.5 = private unnamed_addr constant [7 x i8] c"%d %s\0A\00", align 1
@.str.6 = private unnamed_addr constant [14 x i8] c"cond %d bad\0A\0A\00", align 1
@.str.7 = private unnamed_addr constant [20 x i8] c"Found arrangement:\0A\00", align 1
@.str.8 = private unnamed_addr constant [23 x i8] c"Nobody lives anywhere\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @c0(i32* %s) #0 {
entry:
  %s.addr = alloca i32*, align 4
  store i32* %s, i32** %s.addr, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %0, i32 0
  %1 = load i32, i32* %arrayidx, align 4
  %cmp = icmp ne i32 %1, 4
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @c1(i32* %s) #0 {
entry:
  %s.addr = alloca i32*, align 4
  store i32* %s, i32** %s.addr, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %0, i32 1
  %1 = load i32, i32* %arrayidx, align 4
  %cmp = icmp ne i32 %1, 0
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @c2(i32* %s) #0 {
entry:
  %s.addr = alloca i32*, align 4
  store i32* %s, i32** %s.addr, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %0, i32 2
  %1 = load i32, i32* %arrayidx, align 4
  %cmp = icmp ne i32 %1, 0
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %2 = load i32*, i32** %s.addr, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %2, i32 2
  %3 = load i32, i32* %arrayidx1, align 4
  %cmp2 = icmp ne i32 %3, 4
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ]
  %land.ext = zext i1 %4 to i32
  ret i32 %land.ext
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @c3(i32* %s) #0 {
entry:
  %s.addr = alloca i32*, align 4
  store i32* %s, i32** %s.addr, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %0, i32 3
  %1 = load i32, i32* %arrayidx, align 4
  %2 = load i32*, i32** %s.addr, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %2, i32 1
  %3 = load i32, i32* %arrayidx1, align 4
  %cmp = icmp sgt i32 %1, %3
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @c4(i32* %s) #0 {
entry:
  %s.addr = alloca i32*, align 4
  store i32* %s, i32** %s.addr, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %0, i32 4
  %1 = load i32, i32* %arrayidx, align 4
  %2 = load i32*, i32** %s.addr, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %2, i32 2
  %3 = load i32, i32* %arrayidx1, align 4
  %sub = sub nsw i32 %1, %3
  %call = call i32 @abs(i32 %sub) #3
  %cmp = icmp ne i32 %call, 1
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: nounwind readnone
declare i32 @abs(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @c5(i32* %s) #0 {
entry:
  %s.addr = alloca i32*, align 4
  store i32* %s, i32** %s.addr, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %0, i32 1
  %1 = load i32, i32* %arrayidx, align 4
  %2 = load i32*, i32** %s.addr, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %2, i32 2
  %3 = load i32, i32* %arrayidx1, align 4
  %sub = sub nsw i32 %1, %3
  %call = call i32 @abs(i32 %sub) #3
  %cmp = icmp ne i32 %call, 1
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @solve(i32 %person) #0 {
entry:
  %retval = alloca i32, align 4
  %person.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 %person, i32* %person.addr, align 4
  %0 = load i32, i32* %person.addr, align 4
  %cmp = icmp eq i32 %0, 5
  br i1 %cmp, label %if.then, label %if.end26

if.then:                                          ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc13, %if.then
  %1 = load i32, i32* %i, align 4
  %cmp1 = icmp slt i32 %1, 6
  br i1 %cmp1, label %for.body, label %for.end15

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [6 x i32 (i32*)*], [6 x i32 (i32*)*]* @cond, i32 0, i32 %2
  %3 = load i32 (i32*)*, i32 (i32*)** %arrayidx, align 4
  %call = call i32 %3(i32* getelementptr inbounds ([5 x i32], [5 x i32]* @solution, i32 0, i32 0))
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then2, label %if.end

if.then2:                                         ; preds = %for.body
  br label %for.inc13

if.end:                                           ; preds = %for.body
  %4 = load i32, i32* @verbose, align 4
  %tobool3 = icmp ne i32 %4, 0
  br i1 %tobool3, label %if.then4, label %if.end12

if.then4:                                         ; preds = %if.end
  store i32 0, i32* %j, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %if.then4
  %5 = load i32, i32* %j, align 4
  %cmp6 = icmp slt i32 %5, 5
  br i1 %cmp6, label %for.body7, label %for.end

for.body7:                                        ; preds = %for.cond5
  %6 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds [5 x i32], [5 x i32]* @solution, i32 0, i32 %6
  %7 = load i32, i32* %arrayidx8, align 4
  %8 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds [5 x i8*], [5 x i8*]* @names, i32 0, i32 %8
  %9 = load i8*, i8** %arrayidx9, align 4
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i32 0, i32 0), i32 %7, i8* %9)
  br label %for.inc

for.inc:                                          ; preds = %for.body7
  %10 = load i32, i32* %j, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond5

for.end:                                          ; preds = %for.cond5
  %11 = load i32, i32* %i, align 4
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6, i32 0, i32 0), i32 %11)
  br label %if.end12

if.end12:                                         ; preds = %for.end, %if.end
  store i32 0, i32* %retval, align 4
  br label %return

for.inc13:                                        ; preds = %if.then2
  %12 = load i32, i32* %i, align 4
  %inc14 = add nsw i32 %12, 1
  store i32 %inc14, i32* %i, align 4
  br label %for.cond

for.end15:                                        ; preds = %for.cond
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.7, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond17

for.cond17:                                       ; preds = %for.inc23, %for.end15
  %13 = load i32, i32* %i, align 4
  %cmp18 = icmp slt i32 %13, 5
  br i1 %cmp18, label %for.body19, label %for.end25

for.body19:                                       ; preds = %for.cond17
  %14 = load i32, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds [5 x i32], [5 x i32]* @solution, i32 0, i32 %14
  %15 = load i32, i32* %arrayidx20, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx21 = getelementptr inbounds [5 x i8*], [5 x i8*]* @names, i32 0, i32 %16
  %17 = load i8*, i8** %arrayidx21, align 4
  %call22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i32 0, i32 0), i32 %15, i8* %17)
  br label %for.inc23

for.inc23:                                        ; preds = %for.body19
  %18 = load i32, i32* %i, align 4
  %inc24 = add nsw i32 %18, 1
  store i32 %inc24, i32* %i, align 4
  br label %for.cond17

for.end25:                                        ; preds = %for.cond17
  store i32 1, i32* %retval, align 4
  br label %return

if.end26:                                         ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond27

for.cond27:                                       ; preds = %for.inc41, %if.end26
  %19 = load i32, i32* %i, align 4
  %cmp28 = icmp slt i32 %19, 5
  br i1 %cmp28, label %for.body29, label %for.end43

for.body29:                                       ; preds = %for.cond27
  %20 = load i32, i32* %i, align 4
  %arrayidx30 = getelementptr inbounds [5 x i32], [5 x i32]* @occupied, i32 0, i32 %20
  %21 = load i32, i32* %arrayidx30, align 4
  %tobool31 = icmp ne i32 %21, 0
  br i1 %tobool31, label %if.then32, label %if.end33

if.then32:                                        ; preds = %for.body29
  br label %for.inc41

if.end33:                                         ; preds = %for.body29
  %22 = load i32, i32* %i, align 4
  %23 = load i32, i32* %person.addr, align 4
  %arrayidx34 = getelementptr inbounds [5 x i32], [5 x i32]* @solution, i32 0, i32 %23
  store i32 %22, i32* %arrayidx34, align 4
  %24 = load i32, i32* %i, align 4
  %arrayidx35 = getelementptr inbounds [5 x i32], [5 x i32]* @occupied, i32 0, i32 %24
  store i32 1, i32* %arrayidx35, align 4
  %25 = load i32, i32* %person.addr, align 4
  %add = add nsw i32 %25, 1
  %call36 = call i32 @solve(i32 %add)
  %tobool37 = icmp ne i32 %call36, 0
  br i1 %tobool37, label %if.then38, label %if.end39

if.then38:                                        ; preds = %if.end33
  store i32 1, i32* %retval, align 4
  br label %return

if.end39:                                         ; preds = %if.end33
  %26 = load i32, i32* %i, align 4
  %arrayidx40 = getelementptr inbounds [5 x i32], [5 x i32]* @occupied, i32 0, i32 %26
  store i32 0, i32* %arrayidx40, align 4
  br label %for.inc41

for.inc41:                                        ; preds = %if.end39, %if.then32
  %27 = load i32, i32* %i, align 4
  %inc42 = add nsw i32 %27, 1
  store i32 %inc42, i32* %i, align 4
  br label %for.cond27

for.end43:                                        ; preds = %for.cond27
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end43, %if.then38, %for.end25, %if.end12
  %28 = load i32, i32* %retval, align 4
  ret i32 %28
}

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 0, i32* @verbose, align 4
  %call = call i32 @solve(i32 0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.8, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ne i32 %1, 4
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv = zext i1 %cmp to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 4:i32, %0
%2:i32 = zext %1
infer %2
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 4:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 4:i32, %0
%2:i32 = zext %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for c0()

; entering Souper's runOnFunction() for c1()

; ModuleID = './Dinesmans_multiple-dwelling_problem.c.bc'
source_filename = "./Dinesmans_multiple-dwelling_problem.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@verbose = hidden global i32 0, align 4
@solution = hidden global [5 x i32] zeroinitializer, align 16
@occupied = hidden global [5 x i32] zeroinitializer, align 16
@.str = private unnamed_addr constant [6 x i8] c"baker\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"cooper\00", align 1
@.str.2 = private unnamed_addr constant [9 x i8] c"fletcher\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"miller\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"smith\00", align 1
@names = hidden global [5 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0)], align 16
@cond = hidden global [6 x i32 (i32*)*] [i32 (i32*)* @c0, i32 (i32*)* @c1, i32 (i32*)* @c2, i32 (i32*)* @c3, i32 (i32*)* @c4, i32 (i32*)* @c5], align 16
@.str.5 = private unnamed_addr constant [7 x i8] c"%d %s\0A\00", align 1
@.str.6 = private unnamed_addr constant [14 x i8] c"cond %d bad\0A\0A\00", align 1
@.str.7 = private unnamed_addr constant [20 x i8] c"Found arrangement:\0A\00", align 1
@.str.8 = private unnamed_addr constant [23 x i8] c"Nobody lives anywhere\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @c0(i32* %s) #0 {
entry:
  %s.addr = alloca i32*, align 4
  store i32* %s, i32** %s.addr, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %0, i32 0
  %1 = load i32, i32* %arrayidx, align 4
  %cmp = icmp ne i32 %1, 4
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @c1(i32* %s) #0 {
entry:
  %s.addr = alloca i32*, align 4
  store i32* %s, i32** %s.addr, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %0, i32 1
  %1 = load i32, i32* %arrayidx, align 4
  %cmp = icmp ne i32 %1, 0
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @c2(i32* %s) #0 {
entry:
  %s.addr = alloca i32*, align 4
  store i32* %s, i32** %s.addr, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %0, i32 2
  %1 = load i32, i32* %arrayidx, align 4
  %cmp = icmp ne i32 %1, 0
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %2 = load i32*, i32** %s.addr, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %2, i32 2
  %3 = load i32, i32* %arrayidx1, align 4
  %cmp2 = icmp ne i32 %3, 4
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ]
  %land.ext = zext i1 %4 to i32
  ret i32 %land.ext
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @c3(i32* %s) #0 {
entry:
  %s.addr = alloca i32*, align 4
  store i32* %s, i32** %s.addr, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %0, i32 3
  %1 = load i32, i32* %arrayidx, align 4
  %2 = load i32*, i32** %s.addr, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %2, i32 1
  %3 = load i32, i32* %arrayidx1, align 4
  %cmp = icmp sgt i32 %1, %3
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @c4(i32* %s) #0 {
entry:
  %s.addr = alloca i32*, align 4
  store i32* %s, i32** %s.addr, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %0, i32 4
  %1 = load i32, i32* %arrayidx, align 4
  %2 = load i32*, i32** %s.addr, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %2, i32 2
  %3 = load i32, i32* %arrayidx1, align 4
  %sub = sub nsw i32 %1, %3
  %call = call i32 @abs(i32 %sub) #3
  %cmp = icmp ne i32 %call, 1
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: nounwind readnone
declare i32 @abs(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @c5(i32* %s) #0 {
entry:
  %s.addr = alloca i32*, align 4
  store i32* %s, i32** %s.addr, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %0, i32 1
  %1 = load i32, i32* %arrayidx, align 4
  %2 = load i32*, i32** %s.addr, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %2, i32 2
  %3 = load i32, i32* %arrayidx1, align 4
  %sub = sub nsw i32 %1, %3
  %call = call i32 @abs(i32 %sub) #3
  %cmp = icmp ne i32 %call, 1
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @solve(i32 %person) #0 {
entry:
  %retval = alloca i32, align 4
  %person.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 %person, i32* %person.addr, align 4
  %0 = load i32, i32* %person.addr, align 4
  %cmp = icmp eq i32 %0, 5
  br i1 %cmp, label %if.then, label %if.end26

if.then:                                          ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc13, %if.then
  %1 = load i32, i32* %i, align 4
  %cmp1 = icmp slt i32 %1, 6
  br i1 %cmp1, label %for.body, label %for.end15

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [6 x i32 (i32*)*], [6 x i32 (i32*)*]* @cond, i32 0, i32 %2
  %3 = load i32 (i32*)*, i32 (i32*)** %arrayidx, align 4
  %call = call i32 %3(i32* getelementptr inbounds ([5 x i32], [5 x i32]* @solution, i32 0, i32 0))
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then2, label %if.end

if.then2:                                         ; preds = %for.body
  br label %for.inc13

if.end:                                           ; preds = %for.body
  %4 = load i32, i32* @verbose, align 4
  %tobool3 = icmp ne i32 %4, 0
  br i1 %tobool3, label %if.then4, label %if.end12

if.then4:                                         ; preds = %if.end
  store i32 0, i32* %j, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %if.then4
  %5 = load i32, i32* %j, align 4
  %cmp6 = icmp slt i32 %5, 5
  br i1 %cmp6, label %for.body7, label %for.end

for.body7:                                        ; preds = %for.cond5
  %6 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds [5 x i32], [5 x i32]* @solution, i32 0, i32 %6
  %7 = load i32, i32* %arrayidx8, align 4
  %8 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds [5 x i8*], [5 x i8*]* @names, i32 0, i32 %8
  %9 = load i8*, i8** %arrayidx9, align 4
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i32 0, i32 0), i32 %7, i8* %9)
  br label %for.inc

for.inc:                                          ; preds = %for.body7
  %10 = load i32, i32* %j, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond5

for.end:                                          ; preds = %for.cond5
  %11 = load i32, i32* %i, align 4
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6, i32 0, i32 0), i32 %11)
  br label %if.end12

if.end12:                                         ; preds = %for.end, %if.end
  store i32 0, i32* %retval, align 4
  br label %return

for.inc13:                                        ; preds = %if.then2
  %12 = load i32, i32* %i, align 4
  %inc14 = add nsw i32 %12, 1
  store i32 %inc14, i32* %i, align 4
  br label %for.cond

for.end15:                                        ; preds = %for.cond
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.7, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond17

for.cond17:                                       ; preds = %for.inc23, %for.end15
  %13 = load i32, i32* %i, align 4
  %cmp18 = icmp slt i32 %13, 5
  br i1 %cmp18, label %for.body19, label %for.end25

for.body19:                                       ; preds = %for.cond17
  %14 = load i32, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds [5 x i32], [5 x i32]* @solution, i32 0, i32 %14
  %15 = load i32, i32* %arrayidx20, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx21 = getelementptr inbounds [5 x i8*], [5 x i8*]* @names, i32 0, i32 %16
  %17 = load i8*, i8** %arrayidx21, align 4
  %call22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i32 0, i32 0), i32 %15, i8* %17)
  br label %for.inc23

for.inc23:                                        ; preds = %for.body19
  %18 = load i32, i32* %i, align 4
  %inc24 = add nsw i32 %18, 1
  store i32 %inc24, i32* %i, align 4
  br label %for.cond17

for.end25:                                        ; preds = %for.cond17
  store i32 1, i32* %retval, align 4
  br label %return

if.end26:                                         ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond27

for.cond27:                                       ; preds = %for.inc41, %if.end26
  %19 = load i32, i32* %i, align 4
  %cmp28 = icmp slt i32 %19, 5
  br i1 %cmp28, label %for.body29, label %for.end43

for.body29:                                       ; preds = %for.cond27
  %20 = load i32, i32* %i, align 4
  %arrayidx30 = getelementptr inbounds [5 x i32], [5 x i32]* @occupied, i32 0, i32 %20
  %21 = load i32, i32* %arrayidx30, align 4
  %tobool31 = icmp ne i32 %21, 0
  br i1 %tobool31, label %if.then32, label %if.end33

if.then32:                                        ; preds = %for.body29
  br label %for.inc41

if.end33:                                         ; preds = %for.body29
  %22 = load i32, i32* %i, align 4
  %23 = load i32, i32* %person.addr, align 4
  %arrayidx34 = getelementptr inbounds [5 x i32], [5 x i32]* @solution, i32 0, i32 %23
  store i32 %22, i32* %arrayidx34, align 4
  %24 = load i32, i32* %i, align 4
  %arrayidx35 = getelementptr inbounds [5 x i32], [5 x i32]* @occupied, i32 0, i32 %24
  store i32 1, i32* %arrayidx35, align 4
  %25 = load i32, i32* %person.addr, align 4
  %add = add nsw i32 %25, 1
  %call36 = call i32 @solve(i32 %add)
  %tobool37 = icmp ne i32 %call36, 0
  br i1 %tobool37, label %if.then38, label %if.end39

if.then38:                                        ; preds = %if.end33
  store i32 1, i32* %retval, align 4
  br label %return

if.end39:                                         ; preds = %if.end33
  %26 = load i32, i32* %i, align 4
  %arrayidx40 = getelementptr inbounds [5 x i32], [5 x i32]* @occupied, i32 0, i32 %26
  store i32 0, i32* %arrayidx40, align 4
  br label %for.inc41

for.inc41:                                        ; preds = %if.end39, %if.then32
  %27 = load i32, i32* %i, align 4
  %inc42 = add nsw i32 %27, 1
  store i32 %inc42, i32* %i, align 4
  br label %for.cond27

for.end43:                                        ; preds = %for.cond27
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end43, %if.then38, %for.end25, %if.end12
  %28 = load i32, i32* %retval, align 4
  ret i32 %28
}

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 0, i32* @verbose, align 4
  %call = call i32 @solve(i32 0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.8, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ne i32 %1, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %conv = zext i1 %cmp to i32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i32 = zext %1
infer %2
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
%2:i32 = zext %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for c1()

; entering Souper's runOnFunction() for c2()

; ModuleID = './Dinesmans_multiple-dwelling_problem.c.bc'
source_filename = "./Dinesmans_multiple-dwelling_problem.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@verbose = hidden global i32 0, align 4
@solution = hidden global [5 x i32] zeroinitializer, align 16
@occupied = hidden global [5 x i32] zeroinitializer, align 16
@.str = private unnamed_addr constant [6 x i8] c"baker\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"cooper\00", align 1
@.str.2 = private unnamed_addr constant [9 x i8] c"fletcher\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"miller\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"smith\00", align 1
@names = hidden global [5 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0)], align 16
@cond = hidden global [6 x i32 (i32*)*] [i32 (i32*)* @c0, i32 (i32*)* @c1, i32 (i32*)* @c2, i32 (i32*)* @c3, i32 (i32*)* @c4, i32 (i32*)* @c5], align 16
@.str.5 = private unnamed_addr constant [7 x i8] c"%d %s\0A\00", align 1
@.str.6 = private unnamed_addr constant [14 x i8] c"cond %d bad\0A\0A\00", align 1
@.str.7 = private unnamed_addr constant [20 x i8] c"Found arrangement:\0A\00", align 1
@.str.8 = private unnamed_addr constant [23 x i8] c"Nobody lives anywhere\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @c0(i32* %s) #0 {
entry:
  %s.addr = alloca i32*, align 4
  store i32* %s, i32** %s.addr, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %0, i32 0
  %1 = load i32, i32* %arrayidx, align 4
  %cmp = icmp ne i32 %1, 4
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @c1(i32* %s) #0 {
entry:
  %s.addr = alloca i32*, align 4
  store i32* %s, i32** %s.addr, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %0, i32 1
  %1 = load i32, i32* %arrayidx, align 4
  %cmp = icmp ne i32 %1, 0
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @c2(i32* %s) #0 {
entry:
  %s.addr = alloca i32*, align 4
  store i32* %s, i32** %s.addr, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %0, i32 2
  %1 = load i32, i32* %arrayidx, align 4
  %cmp = icmp ne i32 %1, 0
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %2 = load i32*, i32** %s.addr, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %2, i32 2
  %3 = load i32, i32* %arrayidx1, align 4
  %cmp2 = icmp ne i32 %3, 4
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ]
  %land.ext = zext i1 %4 to i32
  ret i32 %land.ext
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @c3(i32* %s) #0 {
entry:
  %s.addr = alloca i32*, align 4
  store i32* %s, i32** %s.addr, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %0, i32 3
  %1 = load i32, i32* %arrayidx, align 4
  %2 = load i32*, i32** %s.addr, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %2, i32 1
  %3 = load i32, i32* %arrayidx1, align 4
  %cmp = icmp sgt i32 %1, %3
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @c4(i32* %s) #0 {
entry:
  %s.addr = alloca i32*, align 4
  store i32* %s, i32** %s.addr, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %0, i32 4
  %1 = load i32, i32* %arrayidx, align 4
  %2 = load i32*, i32** %s.addr, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %2, i32 2
  %3 = load i32, i32* %arrayidx1, align 4
  %sub = sub nsw i32 %1, %3
  %call = call i32 @abs(i32 %sub) #3
  %cmp = icmp ne i32 %call, 1
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: nounwind readnone
declare i32 @abs(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @c5(i32* %s) #0 {
entry:
  %s.addr = alloca i32*, align 4
  store i32* %s, i32** %s.addr, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %0, i32 1
  %1 = load i32, i32* %arrayidx, align 4
  %2 = load i32*, i32** %s.addr, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %2, i32 2
  %3 = load i32, i32* %arrayidx1, align 4
  %sub = sub nsw i32 %1, %3
  %call = call i32 @abs(i32 %sub) #3
  %cmp = icmp ne i32 %call, 1
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @solve(i32 %person) #0 {
entry:
  %retval = alloca i32, align 4
  %person.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 %person, i32* %person.addr, align 4
  %0 = load i32, i32* %person.addr, align 4
  %cmp = icmp eq i32 %0, 5
  br i1 %cmp, label %if.then, label %if.end26

if.then:                                          ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc13, %if.then
  %1 = load i32, i32* %i, align 4
  %cmp1 = icmp slt i32 %1, 6
  br i1 %cmp1, label %for.body, label %for.end15

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [6 x i32 (i32*)*], [6 x i32 (i32*)*]* @cond, i32 0, i32 %2
  %3 = load i32 (i32*)*, i32 (i32*)** %arrayidx, align 4
  %call = call i32 %3(i32* getelementptr inbounds ([5 x i32], [5 x i32]* @solution, i32 0, i32 0))
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then2, label %if.end

if.then2:                                         ; preds = %for.body
  br label %for.inc13

if.end:                                           ; preds = %for.body
  %4 = load i32, i32* @verbose, align 4
  %tobool3 = icmp ne i32 %4, 0
  br i1 %tobool3, label %if.then4, label %if.end12

if.then4:                                         ; preds = %if.end
  store i32 0, i32* %j, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %if.then4
  %5 = load i32, i32* %j, align 4
  %cmp6 = icmp slt i32 %5, 5
  br i1 %cmp6, label %for.body7, label %for.end

for.body7:                                        ; preds = %for.cond5
  %6 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds [5 x i32], [5 x i32]* @solution, i32 0, i32 %6
  %7 = load i32, i32* %arrayidx8, align 4
  %8 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds [5 x i8*], [5 x i8*]* @names, i32 0, i32 %8
  %9 = load i8*, i8** %arrayidx9, align 4
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i32 0, i32 0), i32 %7, i8* %9)
  br label %for.inc

for.inc:                                          ; preds = %for.body7
  %10 = load i32, i32* %j, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond5

for.end:                                          ; preds = %for.cond5
  %11 = load i32, i32* %i, align 4
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6, i32 0, i32 0), i32 %11)
  br label %if.end12

if.end12:                                         ; preds = %for.end, %if.end
  store i32 0, i32* %retval, align 4
  br label %return

for.inc13:                                        ; preds = %if.then2
  %12 = load i32, i32* %i, align 4
  %inc14 = add nsw i32 %12, 1
  store i32 %inc14, i32* %i, align 4
  br label %for.cond

for.end15:                                        ; preds = %for.cond
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.7, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond17

for.cond17:                                       ; preds = %for.inc23, %for.end15
  %13 = load i32, i32* %i, align 4
  %cmp18 = icmp slt i32 %13, 5
  br i1 %cmp18, label %for.body19, label %for.end25

for.body19:                                       ; preds = %for.cond17
  %14 = load i32, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds [5 x i32], [5 x i32]* @solution, i32 0, i32 %14
  %15 = load i32, i32* %arrayidx20, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx21 = getelementptr inbounds [5 x i8*], [5 x i8*]* @names, i32 0, i32 %16
  %17 = load i8*, i8** %arrayidx21, align 4
  %call22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i32 0, i32 0), i32 %15, i8* %17)
  br label %for.inc23

for.inc23:                                        ; preds = %for.body19
  %18 = load i32, i32* %i, align 4
  %inc24 = add nsw i32 %18, 1
  store i32 %inc24, i32* %i, align 4
  br label %for.cond17

for.end25:                                        ; preds = %for.cond17
  store i32 1, i32* %retval, align 4
  br label %return

if.end26:                                         ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond27

for.cond27:                                       ; preds = %for.inc41, %if.end26
  %19 = load i32, i32* %i, align 4
  %cmp28 = icmp slt i32 %19, 5
  br i1 %cmp28, label %for.body29, label %for.end43

for.body29:                                       ; preds = %for.cond27
  %20 = load i32, i32* %i, align 4
  %arrayidx30 = getelementptr inbounds [5 x i32], [5 x i32]* @occupied, i32 0, i32 %20
  %21 = load i32, i32* %arrayidx30, align 4
  %tobool31 = icmp ne i32 %21, 0
  br i1 %tobool31, label %if.then32, label %if.end33

if.then32:                                        ; preds = %for.body29
  br label %for.inc41

if.end33:                                         ; preds = %for.body29
  %22 = load i32, i32* %i, align 4
  %23 = load i32, i32* %person.addr, align 4
  %arrayidx34 = getelementptr inbounds [5 x i32], [5 x i32]* @solution, i32 0, i32 %23
  store i32 %22, i32* %arrayidx34, align 4
  %24 = load i32, i32* %i, align 4
  %arrayidx35 = getelementptr inbounds [5 x i32], [5 x i32]* @occupied, i32 0, i32 %24
  store i32 1, i32* %arrayidx35, align 4
  %25 = load i32, i32* %person.addr, align 4
  %add = add nsw i32 %25, 1
  %call36 = call i32 @solve(i32 %add)
  %tobool37 = icmp ne i32 %call36, 0
  br i1 %tobool37, label %if.then38, label %if.end39

if.then38:                                        ; preds = %if.end33
  store i32 1, i32* %retval, align 4
  br label %return

if.end39:                                         ; preds = %if.end33
  %26 = load i32, i32* %i, align 4
  %arrayidx40 = getelementptr inbounds [5 x i32], [5 x i32]* @occupied, i32 0, i32 %26
  store i32 0, i32* %arrayidx40, align 4
  br label %for.inc41

for.inc41:                                        ; preds = %if.end39, %if.then32
  %27 = load i32, i32* %i, align 4
  %inc42 = add nsw i32 %27, 1
  store i32 %inc42, i32* %i, align 4
  br label %for.cond27

for.end43:                                        ; preds = %for.cond27
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end43, %if.then38, %for.end25, %if.end12
  %28 = load i32, i32* %retval, align 4
  ret i32 %28
}

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 0, i32* @verbose, align 4
  %call = call i32 @solve(i32 0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.8, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ne i32 %1, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %arrayidx1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp ne i32 %3, 4
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %4 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i1 = ne 4:i32, %1
%3:i1 = phi %0, 0:i1, %2
infer %3

; *****
; For LLVM instruction:
;  %land.ext = zext i1 %4 to i32
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i1 = ne 4:i32, %1
%3:i1 = phi %0, 0:i1, %2
%4:i32 = zext %3
infer %4
got 3 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i1 = ne 4:i32, %1
%3:i1 = phi %0, 0:i1, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var
%1:i1 = ne 4:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i1 = ne 4:i32, %1
%3:i1 = phi %0, 0:i1, %2
%4:i32 = zext %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for c2()

; entering Souper's runOnFunction() for c3()

; ModuleID = './Dinesmans_multiple-dwelling_problem.c.bc'
source_filename = "./Dinesmans_multiple-dwelling_problem.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@verbose = hidden global i32 0, align 4
@solution = hidden global [5 x i32] zeroinitializer, align 16
@occupied = hidden global [5 x i32] zeroinitializer, align 16
@.str = private unnamed_addr constant [6 x i8] c"baker\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"cooper\00", align 1
@.str.2 = private unnamed_addr constant [9 x i8] c"fletcher\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"miller\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"smith\00", align 1
@names = hidden global [5 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0)], align 16
@cond = hidden global [6 x i32 (i32*)*] [i32 (i32*)* @c0, i32 (i32*)* @c1, i32 (i32*)* @c2, i32 (i32*)* @c3, i32 (i32*)* @c4, i32 (i32*)* @c5], align 16
@.str.5 = private unnamed_addr constant [7 x i8] c"%d %s\0A\00", align 1
@.str.6 = private unnamed_addr constant [14 x i8] c"cond %d bad\0A\0A\00", align 1
@.str.7 = private unnamed_addr constant [20 x i8] c"Found arrangement:\0A\00", align 1
@.str.8 = private unnamed_addr constant [23 x i8] c"Nobody lives anywhere\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @c0(i32* %s) #0 {
entry:
  %s.addr = alloca i32*, align 4
  store i32* %s, i32** %s.addr, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %0, i32 0
  %1 = load i32, i32* %arrayidx, align 4
  %cmp = icmp ne i32 %1, 4
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @c1(i32* %s) #0 {
entry:
  %s.addr = alloca i32*, align 4
  store i32* %s, i32** %s.addr, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %0, i32 1
  %1 = load i32, i32* %arrayidx, align 4
  %cmp = icmp ne i32 %1, 0
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @c2(i32* %s) #0 {
entry:
  %s.addr = alloca i32*, align 4
  store i32* %s, i32** %s.addr, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %0, i32 2
  %1 = load i32, i32* %arrayidx, align 4
  %cmp = icmp ne i32 %1, 0
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %2 = load i32*, i32** %s.addr, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %2, i32 2
  %3 = load i32, i32* %arrayidx1, align 4
  %cmp2 = icmp ne i32 %3, 4
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ]
  %land.ext = zext i1 %4 to i32
  ret i32 %land.ext
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @c3(i32* %s) #0 {
entry:
  %s.addr = alloca i32*, align 4
  store i32* %s, i32** %s.addr, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %0, i32 3
  %1 = load i32, i32* %arrayidx, align 4
  %2 = load i32*, i32** %s.addr, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %2, i32 1
  %3 = load i32, i32* %arrayidx1, align 4
  %cmp = icmp sgt i32 %1, %3
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @c4(i32* %s) #0 {
entry:
  %s.addr = alloca i32*, align 4
  store i32* %s, i32** %s.addr, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %0, i32 4
  %1 = load i32, i32* %arrayidx, align 4
  %2 = load i32*, i32** %s.addr, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %2, i32 2
  %3 = load i32, i32* %arrayidx1, align 4
  %sub = sub nsw i32 %1, %3
  %call = call i32 @abs(i32 %sub) #3
  %cmp = icmp ne i32 %call, 1
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: nounwind readnone
declare i32 @abs(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @c5(i32* %s) #0 {
entry:
  %s.addr = alloca i32*, align 4
  store i32* %s, i32** %s.addr, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %0, i32 1
  %1 = load i32, i32* %arrayidx, align 4
  %2 = load i32*, i32** %s.addr, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %2, i32 2
  %3 = load i32, i32* %arrayidx1, align 4
  %sub = sub nsw i32 %1, %3
  %call = call i32 @abs(i32 %sub) #3
  %cmp = icmp ne i32 %call, 1
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @solve(i32 %person) #0 {
entry:
  %retval = alloca i32, align 4
  %person.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 %person, i32* %person.addr, align 4
  %0 = load i32, i32* %person.addr, align 4
  %cmp = icmp eq i32 %0, 5
  br i1 %cmp, label %if.then, label %if.end26

if.then:                                          ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc13, %if.then
  %1 = load i32, i32* %i, align 4
  %cmp1 = icmp slt i32 %1, 6
  br i1 %cmp1, label %for.body, label %for.end15

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [6 x i32 (i32*)*], [6 x i32 (i32*)*]* @cond, i32 0, i32 %2
  %3 = load i32 (i32*)*, i32 (i32*)** %arrayidx, align 4
  %call = call i32 %3(i32* getelementptr inbounds ([5 x i32], [5 x i32]* @solution, i32 0, i32 0))
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then2, label %if.end

if.then2:                                         ; preds = %for.body
  br label %for.inc13

if.end:                                           ; preds = %for.body
  %4 = load i32, i32* @verbose, align 4
  %tobool3 = icmp ne i32 %4, 0
  br i1 %tobool3, label %if.then4, label %if.end12

if.then4:                                         ; preds = %if.end
  store i32 0, i32* %j, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %if.then4
  %5 = load i32, i32* %j, align 4
  %cmp6 = icmp slt i32 %5, 5
  br i1 %cmp6, label %for.body7, label %for.end

for.body7:                                        ; preds = %for.cond5
  %6 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds [5 x i32], [5 x i32]* @solution, i32 0, i32 %6
  %7 = load i32, i32* %arrayidx8, align 4
  %8 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds [5 x i8*], [5 x i8*]* @names, i32 0, i32 %8
  %9 = load i8*, i8** %arrayidx9, align 4
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i32 0, i32 0), i32 %7, i8* %9)
  br label %for.inc

for.inc:                                          ; preds = %for.body7
  %10 = load i32, i32* %j, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond5

for.end:                                          ; preds = %for.cond5
  %11 = load i32, i32* %i, align 4
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6, i32 0, i32 0), i32 %11)
  br label %if.end12

if.end12:                                         ; preds = %for.end, %if.end
  store i32 0, i32* %retval, align 4
  br label %return

for.inc13:                                        ; preds = %if.then2
  %12 = load i32, i32* %i, align 4
  %inc14 = add nsw i32 %12, 1
  store i32 %inc14, i32* %i, align 4
  br label %for.cond

for.end15:                                        ; preds = %for.cond
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.7, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond17

for.cond17:                                       ; preds = %for.inc23, %for.end15
  %13 = load i32, i32* %i, align 4
  %cmp18 = icmp slt i32 %13, 5
  br i1 %cmp18, label %for.body19, label %for.end25

for.body19:                                       ; preds = %for.cond17
  %14 = load i32, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds [5 x i32], [5 x i32]* @solution, i32 0, i32 %14
  %15 = load i32, i32* %arrayidx20, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx21 = getelementptr inbounds [5 x i8*], [5 x i8*]* @names, i32 0, i32 %16
  %17 = load i8*, i8** %arrayidx21, align 4
  %call22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i32 0, i32 0), i32 %15, i8* %17)
  br label %for.inc23

for.inc23:                                        ; preds = %for.body19
  %18 = load i32, i32* %i, align 4
  %inc24 = add nsw i32 %18, 1
  store i32 %inc24, i32* %i, align 4
  br label %for.cond17

for.end25:                                        ; preds = %for.cond17
  store i32 1, i32* %retval, align 4
  br label %return

if.end26:                                         ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond27

for.cond27:                                       ; preds = %for.inc41, %if.end26
  %19 = load i32, i32* %i, align 4
  %cmp28 = icmp slt i32 %19, 5
  br i1 %cmp28, label %for.body29, label %for.end43

for.body29:                                       ; preds = %for.cond27
  %20 = load i32, i32* %i, align 4
  %arrayidx30 = getelementptr inbounds [5 x i32], [5 x i32]* @occupied, i32 0, i32 %20
  %21 = load i32, i32* %arrayidx30, align 4
  %tobool31 = icmp ne i32 %21, 0
  br i1 %tobool31, label %if.then32, label %if.end33

if.then32:                                        ; preds = %for.body29
  br label %for.inc41

if.end33:                                         ; preds = %for.body29
  %22 = load i32, i32* %i, align 4
  %23 = load i32, i32* %person.addr, align 4
  %arrayidx34 = getelementptr inbounds [5 x i32], [5 x i32]* @solution, i32 0, i32 %23
  store i32 %22, i32* %arrayidx34, align 4
  %24 = load i32, i32* %i, align 4
  %arrayidx35 = getelementptr inbounds [5 x i32], [5 x i32]* @occupied, i32 0, i32 %24
  store i32 1, i32* %arrayidx35, align 4
  %25 = load i32, i32* %person.addr, align 4
  %add = add nsw i32 %25, 1
  %call36 = call i32 @solve(i32 %add)
  %tobool37 = icmp ne i32 %call36, 0
  br i1 %tobool37, label %if.then38, label %if.end39

if.then38:                                        ; preds = %if.end33
  store i32 1, i32* %retval, align 4
  br label %return

if.end39:                                         ; preds = %if.end33
  %26 = load i32, i32* %i, align 4
  %arrayidx40 = getelementptr inbounds [5 x i32], [5 x i32]* @occupied, i32 0, i32 %26
  store i32 0, i32* %arrayidx40, align 4
  br label %for.inc41

for.inc41:                                        ; preds = %if.end39, %if.then32
  %27 = load i32, i32* %i, align 4
  %inc42 = add nsw i32 %27, 1
  store i32 %inc42, i32* %i, align 4
  br label %for.cond27

for.end43:                                        ; preds = %for.cond27
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end43, %if.then38, %for.end25, %if.end12
  %28 = load i32, i32* %retval, align 4
  ret i32 %28
}

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 0, i32* @verbose, align 4
  %call = call i32 @solve(i32 0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.8, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %arrayidx1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sgt i32 %1, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %conv = zext i1 %cmp to i32
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
%3:i32 = zext %2
infer %3
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
%3:i32 = zext %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for c3()

; entering Souper's runOnFunction() for c4()

; ModuleID = './Dinesmans_multiple-dwelling_problem.c.bc'
source_filename = "./Dinesmans_multiple-dwelling_problem.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@verbose = hidden global i32 0, align 4
@solution = hidden global [5 x i32] zeroinitializer, align 16
@occupied = hidden global [5 x i32] zeroinitializer, align 16
@.str = private unnamed_addr constant [6 x i8] c"baker\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"cooper\00", align 1
@.str.2 = private unnamed_addr constant [9 x i8] c"fletcher\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"miller\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"smith\00", align 1
@names = hidden global [5 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0)], align 16
@cond = hidden global [6 x i32 (i32*)*] [i32 (i32*)* @c0, i32 (i32*)* @c1, i32 (i32*)* @c2, i32 (i32*)* @c3, i32 (i32*)* @c4, i32 (i32*)* @c5], align 16
@.str.5 = private unnamed_addr constant [7 x i8] c"%d %s\0A\00", align 1
@.str.6 = private unnamed_addr constant [14 x i8] c"cond %d bad\0A\0A\00", align 1
@.str.7 = private unnamed_addr constant [20 x i8] c"Found arrangement:\0A\00", align 1
@.str.8 = private unnamed_addr constant [23 x i8] c"Nobody lives anywhere\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @c0(i32* %s) #0 {
entry:
  %s.addr = alloca i32*, align 4
  store i32* %s, i32** %s.addr, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %0, i32 0
  %1 = load i32, i32* %arrayidx, align 4
  %cmp = icmp ne i32 %1, 4
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @c1(i32* %s) #0 {
entry:
  %s.addr = alloca i32*, align 4
  store i32* %s, i32** %s.addr, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %0, i32 1
  %1 = load i32, i32* %arrayidx, align 4
  %cmp = icmp ne i32 %1, 0
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @c2(i32* %s) #0 {
entry:
  %s.addr = alloca i32*, align 4
  store i32* %s, i32** %s.addr, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %0, i32 2
  %1 = load i32, i32* %arrayidx, align 4
  %cmp = icmp ne i32 %1, 0
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %2 = load i32*, i32** %s.addr, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %2, i32 2
  %3 = load i32, i32* %arrayidx1, align 4
  %cmp2 = icmp ne i32 %3, 4
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ]
  %land.ext = zext i1 %4 to i32
  ret i32 %land.ext
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @c3(i32* %s) #0 {
entry:
  %s.addr = alloca i32*, align 4
  store i32* %s, i32** %s.addr, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %0, i32 3
  %1 = load i32, i32* %arrayidx, align 4
  %2 = load i32*, i32** %s.addr, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %2, i32 1
  %3 = load i32, i32* %arrayidx1, align 4
  %cmp = icmp sgt i32 %1, %3
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @c4(i32* %s) #0 {
entry:
  %s.addr = alloca i32*, align 4
  store i32* %s, i32** %s.addr, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %0, i32 4
  %1 = load i32, i32* %arrayidx, align 4
  %2 = load i32*, i32** %s.addr, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %2, i32 2
  %3 = load i32, i32* %arrayidx1, align 4
  %sub = sub nsw i32 %1, %3
  %call = call i32 @abs(i32 %sub) #3
  %cmp = icmp ne i32 %call, 1
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: nounwind readnone
declare i32 @abs(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @c5(i32* %s) #0 {
entry:
  %s.addr = alloca i32*, align 4
  store i32* %s, i32** %s.addr, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %0, i32 1
  %1 = load i32, i32* %arrayidx, align 4
  %2 = load i32*, i32** %s.addr, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %2, i32 2
  %3 = load i32, i32* %arrayidx1, align 4
  %sub = sub nsw i32 %1, %3
  %call = call i32 @abs(i32 %sub) #3
  %cmp = icmp ne i32 %call, 1
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @solve(i32 %person) #0 {
entry:
  %retval = alloca i32, align 4
  %person.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 %person, i32* %person.addr, align 4
  %0 = load i32, i32* %person.addr, align 4
  %cmp = icmp eq i32 %0, 5
  br i1 %cmp, label %if.then, label %if.end26

if.then:                                          ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc13, %if.then
  %1 = load i32, i32* %i, align 4
  %cmp1 = icmp slt i32 %1, 6
  br i1 %cmp1, label %for.body, label %for.end15

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [6 x i32 (i32*)*], [6 x i32 (i32*)*]* @cond, i32 0, i32 %2
  %3 = load i32 (i32*)*, i32 (i32*)** %arrayidx, align 4
  %call = call i32 %3(i32* getelementptr inbounds ([5 x i32], [5 x i32]* @solution, i32 0, i32 0))
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then2, label %if.end

if.then2:                                         ; preds = %for.body
  br label %for.inc13

if.end:                                           ; preds = %for.body
  %4 = load i32, i32* @verbose, align 4
  %tobool3 = icmp ne i32 %4, 0
  br i1 %tobool3, label %if.then4, label %if.end12

if.then4:                                         ; preds = %if.end
  store i32 0, i32* %j, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %if.then4
  %5 = load i32, i32* %j, align 4
  %cmp6 = icmp slt i32 %5, 5
  br i1 %cmp6, label %for.body7, label %for.end

for.body7:                                        ; preds = %for.cond5
  %6 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds [5 x i32], [5 x i32]* @solution, i32 0, i32 %6
  %7 = load i32, i32* %arrayidx8, align 4
  %8 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds [5 x i8*], [5 x i8*]* @names, i32 0, i32 %8
  %9 = load i8*, i8** %arrayidx9, align 4
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i32 0, i32 0), i32 %7, i8* %9)
  br label %for.inc

for.inc:                                          ; preds = %for.body7
  %10 = load i32, i32* %j, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond5

for.end:                                          ; preds = %for.cond5
  %11 = load i32, i32* %i, align 4
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6, i32 0, i32 0), i32 %11)
  br label %if.end12

if.end12:                                         ; preds = %for.end, %if.end
  store i32 0, i32* %retval, align 4
  br label %return

for.inc13:                                        ; preds = %if.then2
  %12 = load i32, i32* %i, align 4
  %inc14 = add nsw i32 %12, 1
  store i32 %inc14, i32* %i, align 4
  br label %for.cond

for.end15:                                        ; preds = %for.cond
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.7, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond17

for.cond17:                                       ; preds = %for.inc23, %for.end15
  %13 = load i32, i32* %i, align 4
  %cmp18 = icmp slt i32 %13, 5
  br i1 %cmp18, label %for.body19, label %for.end25

for.body19:                                       ; preds = %for.cond17
  %14 = load i32, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds [5 x i32], [5 x i32]* @solution, i32 0, i32 %14
  %15 = load i32, i32* %arrayidx20, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx21 = getelementptr inbounds [5 x i8*], [5 x i8*]* @names, i32 0, i32 %16
  %17 = load i8*, i8** %arrayidx21, align 4
  %call22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i32 0, i32 0), i32 %15, i8* %17)
  br label %for.inc23

for.inc23:                                        ; preds = %for.body19
  %18 = load i32, i32* %i, align 4
  %inc24 = add nsw i32 %18, 1
  store i32 %inc24, i32* %i, align 4
  br label %for.cond17

for.end25:                                        ; preds = %for.cond17
  store i32 1, i32* %retval, align 4
  br label %return

if.end26:                                         ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond27

for.cond27:                                       ; preds = %for.inc41, %if.end26
  %19 = load i32, i32* %i, align 4
  %cmp28 = icmp slt i32 %19, 5
  br i1 %cmp28, label %for.body29, label %for.end43

for.body29:                                       ; preds = %for.cond27
  %20 = load i32, i32* %i, align 4
  %arrayidx30 = getelementptr inbounds [5 x i32], [5 x i32]* @occupied, i32 0, i32 %20
  %21 = load i32, i32* %arrayidx30, align 4
  %tobool31 = icmp ne i32 %21, 0
  br i1 %tobool31, label %if.then32, label %if.end33

if.then32:                                        ; preds = %for.body29
  br label %for.inc41

if.end33:                                         ; preds = %for.body29
  %22 = load i32, i32* %i, align 4
  %23 = load i32, i32* %person.addr, align 4
  %arrayidx34 = getelementptr inbounds [5 x i32], [5 x i32]* @solution, i32 0, i32 %23
  store i32 %22, i32* %arrayidx34, align 4
  %24 = load i32, i32* %i, align 4
  %arrayidx35 = getelementptr inbounds [5 x i32], [5 x i32]* @occupied, i32 0, i32 %24
  store i32 1, i32* %arrayidx35, align 4
  %25 = load i32, i32* %person.addr, align 4
  %add = add nsw i32 %25, 1
  %call36 = call i32 @solve(i32 %add)
  %tobool37 = icmp ne i32 %call36, 0
  br i1 %tobool37, label %if.then38, label %if.end39

if.then38:                                        ; preds = %if.end33
  store i32 1, i32* %retval, align 4
  br label %return

if.end39:                                         ; preds = %if.end33
  %26 = load i32, i32* %i, align 4
  %arrayidx40 = getelementptr inbounds [5 x i32], [5 x i32]* @occupied, i32 0, i32 %26
  store i32 0, i32* %arrayidx40, align 4
  br label %for.inc41

for.inc41:                                        ; preds = %if.end39, %if.then32
  %27 = load i32, i32* %i, align 4
  %inc42 = add nsw i32 %27, 1
  store i32 %inc42, i32* %i, align 4
  br label %for.cond27

for.end43:                                        ; preds = %for.cond27
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end43, %if.then38, %for.end25, %if.end12
  %28 = load i32, i32* %retval, align 4
  ret i32 %28
}

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 0, i32* @verbose, align 4
  %call = call i32 @solve(i32 0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.8, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %arrayidx1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %1, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %call = call i32 @abs(i32 %sub) #3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1 (hasExternalUses)
%3:i1 = slt 0:i32, %2
%4:i32 = subnsw 0:i32, %2
%5:i32 = select %3, %2, %4
infer %5

; *****
; For LLVM instruction:
;  %cmp = icmp ne i32 %call, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1 (hasExternalUses)
%3:i1 = slt 0:i32, %2
%4:i32 = subnsw 0:i32, %2
%5:i32 = select %3, %2, %4
%6:i1 = ne 1:i32, %5
infer %6

; *****
; For LLVM instruction:
;  %conv = zext i1 %cmp to i32
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1 (hasExternalUses)
%3:i1 = slt 0:i32, %2
%4:i32 = subnsw 0:i32, %2
%5:i32 = select %3, %2, %4
%6:i1 = ne 1:i32, %5
%7:i32 = zext %6
infer %7
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147418112
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1 (hasExternalUses)
%3:i1 = slt 0:i32, %2
%4:i32 = subnsw 0:i32, %2
%5:i32 = select %3, %2, %4
infer %5


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2097152
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1 (hasExternalUses)
%3:i1 = slt 0:i32, %2
%4:i32 = subnsw 0:i32, %2
%5:i32 = select %3, %2, %4
%6:i1 = ne 1:i32, %5
infer %6


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1 (hasExternalUses)
%3:i1 = slt 0:i32, %2
%4:i32 = subnsw 0:i32, %2
%5:i32 = select %3, %2, %4
%6:i1 = ne 1:i32, %5
%7:i32 = zext %6
infer %7


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1 (hasExternalUses)
%3:i1 = slt 0:i32, %2
%4:i32 = subnsw 0:i32, %2
%5:i32 = select %3, %2, %4

Cost = 5
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for c4()

; entering Souper's runOnFunction() for c5()

; ModuleID = './Dinesmans_multiple-dwelling_problem.c.bc'
source_filename = "./Dinesmans_multiple-dwelling_problem.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@verbose = hidden global i32 0, align 4
@solution = hidden global [5 x i32] zeroinitializer, align 16
@occupied = hidden global [5 x i32] zeroinitializer, align 16
@.str = private unnamed_addr constant [6 x i8] c"baker\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"cooper\00", align 1
@.str.2 = private unnamed_addr constant [9 x i8] c"fletcher\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"miller\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"smith\00", align 1
@names = hidden global [5 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0)], align 16
@cond = hidden global [6 x i32 (i32*)*] [i32 (i32*)* @c0, i32 (i32*)* @c1, i32 (i32*)* @c2, i32 (i32*)* @c3, i32 (i32*)* @c4, i32 (i32*)* @c5], align 16
@.str.5 = private unnamed_addr constant [7 x i8] c"%d %s\0A\00", align 1
@.str.6 = private unnamed_addr constant [14 x i8] c"cond %d bad\0A\0A\00", align 1
@.str.7 = private unnamed_addr constant [20 x i8] c"Found arrangement:\0A\00", align 1
@.str.8 = private unnamed_addr constant [23 x i8] c"Nobody lives anywhere\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @c0(i32* %s) #0 {
entry:
  %s.addr = alloca i32*, align 4
  store i32* %s, i32** %s.addr, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %0, i32 0
  %1 = load i32, i32* %arrayidx, align 4
  %cmp = icmp ne i32 %1, 4
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @c1(i32* %s) #0 {
entry:
  %s.addr = alloca i32*, align 4
  store i32* %s, i32** %s.addr, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %0, i32 1
  %1 = load i32, i32* %arrayidx, align 4
  %cmp = icmp ne i32 %1, 0
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @c2(i32* %s) #0 {
entry:
  %s.addr = alloca i32*, align 4
  store i32* %s, i32** %s.addr, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %0, i32 2
  %1 = load i32, i32* %arrayidx, align 4
  %cmp = icmp ne i32 %1, 0
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %2 = load i32*, i32** %s.addr, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %2, i32 2
  %3 = load i32, i32* %arrayidx1, align 4
  %cmp2 = icmp ne i32 %3, 4
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ]
  %land.ext = zext i1 %4 to i32
  ret i32 %land.ext
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @c3(i32* %s) #0 {
entry:
  %s.addr = alloca i32*, align 4
  store i32* %s, i32** %s.addr, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %0, i32 3
  %1 = load i32, i32* %arrayidx, align 4
  %2 = load i32*, i32** %s.addr, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %2, i32 1
  %3 = load i32, i32* %arrayidx1, align 4
  %cmp = icmp sgt i32 %1, %3
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @c4(i32* %s) #0 {
entry:
  %s.addr = alloca i32*, align 4
  store i32* %s, i32** %s.addr, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %0, i32 4
  %1 = load i32, i32* %arrayidx, align 4
  %2 = load i32*, i32** %s.addr, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %2, i32 2
  %3 = load i32, i32* %arrayidx1, align 4
  %sub = sub nsw i32 %1, %3
  %call = call i32 @abs(i32 %sub) #3
  %cmp = icmp ne i32 %call, 1
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: nounwind readnone
declare i32 @abs(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @c5(i32* %s) #0 {
entry:
  %s.addr = alloca i32*, align 4
  store i32* %s, i32** %s.addr, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %0, i32 1
  %1 = load i32, i32* %arrayidx, align 4
  %2 = load i32*, i32** %s.addr, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %2, i32 2
  %3 = load i32, i32* %arrayidx1, align 4
  %sub = sub nsw i32 %1, %3
  %call = call i32 @abs(i32 %sub) #3
  %cmp = icmp ne i32 %call, 1
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @solve(i32 %person) #0 {
entry:
  %retval = alloca i32, align 4
  %person.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 %person, i32* %person.addr, align 4
  %0 = load i32, i32* %person.addr, align 4
  %cmp = icmp eq i32 %0, 5
  br i1 %cmp, label %if.then, label %if.end26

if.then:                                          ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc13, %if.then
  %1 = load i32, i32* %i, align 4
  %cmp1 = icmp slt i32 %1, 6
  br i1 %cmp1, label %for.body, label %for.end15

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [6 x i32 (i32*)*], [6 x i32 (i32*)*]* @cond, i32 0, i32 %2
  %3 = load i32 (i32*)*, i32 (i32*)** %arrayidx, align 4
  %call = call i32 %3(i32* getelementptr inbounds ([5 x i32], [5 x i32]* @solution, i32 0, i32 0))
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then2, label %if.end

if.then2:                                         ; preds = %for.body
  br label %for.inc13

if.end:                                           ; preds = %for.body
  %4 = load i32, i32* @verbose, align 4
  %tobool3 = icmp ne i32 %4, 0
  br i1 %tobool3, label %if.then4, label %if.end12

if.then4:                                         ; preds = %if.end
  store i32 0, i32* %j, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %if.then4
  %5 = load i32, i32* %j, align 4
  %cmp6 = icmp slt i32 %5, 5
  br i1 %cmp6, label %for.body7, label %for.end

for.body7:                                        ; preds = %for.cond5
  %6 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds [5 x i32], [5 x i32]* @solution, i32 0, i32 %6
  %7 = load i32, i32* %arrayidx8, align 4
  %8 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds [5 x i8*], [5 x i8*]* @names, i32 0, i32 %8
  %9 = load i8*, i8** %arrayidx9, align 4
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i32 0, i32 0), i32 %7, i8* %9)
  br label %for.inc

for.inc:                                          ; preds = %for.body7
  %10 = load i32, i32* %j, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond5

for.end:                                          ; preds = %for.cond5
  %11 = load i32, i32* %i, align 4
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6, i32 0, i32 0), i32 %11)
  br label %if.end12

if.end12:                                         ; preds = %for.end, %if.end
  store i32 0, i32* %retval, align 4
  br label %return

for.inc13:                                        ; preds = %if.then2
  %12 = load i32, i32* %i, align 4
  %inc14 = add nsw i32 %12, 1
  store i32 %inc14, i32* %i, align 4
  br label %for.cond

for.end15:                                        ; preds = %for.cond
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.7, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond17

for.cond17:                                       ; preds = %for.inc23, %for.end15
  %13 = load i32, i32* %i, align 4
  %cmp18 = icmp slt i32 %13, 5
  br i1 %cmp18, label %for.body19, label %for.end25

for.body19:                                       ; preds = %for.cond17
  %14 = load i32, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds [5 x i32], [5 x i32]* @solution, i32 0, i32 %14
  %15 = load i32, i32* %arrayidx20, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx21 = getelementptr inbounds [5 x i8*], [5 x i8*]* @names, i32 0, i32 %16
  %17 = load i8*, i8** %arrayidx21, align 4
  %call22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i32 0, i32 0), i32 %15, i8* %17)
  br label %for.inc23

for.inc23:                                        ; preds = %for.body19
  %18 = load i32, i32* %i, align 4
  %inc24 = add nsw i32 %18, 1
  store i32 %inc24, i32* %i, align 4
  br label %for.cond17

for.end25:                                        ; preds = %for.cond17
  store i32 1, i32* %retval, align 4
  br label %return

if.end26:                                         ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond27

for.cond27:                                       ; preds = %for.inc41, %if.end26
  %19 = load i32, i32* %i, align 4
  %cmp28 = icmp slt i32 %19, 5
  br i1 %cmp28, label %for.body29, label %for.end43

for.body29:                                       ; preds = %for.cond27
  %20 = load i32, i32* %i, align 4
  %arrayidx30 = getelementptr inbounds [5 x i32], [5 x i32]* @occupied, i32 0, i32 %20
  %21 = load i32, i32* %arrayidx30, align 4
  %tobool31 = icmp ne i32 %21, 0
  br i1 %tobool31, label %if.then32, label %if.end33

if.then32:                                        ; preds = %for.body29
  br label %for.inc41

if.end33:                                         ; preds = %for.body29
  %22 = load i32, i32* %i, align 4
  %23 = load i32, i32* %person.addr, align 4
  %arrayidx34 = getelementptr inbounds [5 x i32], [5 x i32]* @solution, i32 0, i32 %23
  store i32 %22, i32* %arrayidx34, align 4
  %24 = load i32, i32* %i, align 4
  %arrayidx35 = getelementptr inbounds [5 x i32], [5 x i32]* @occupied, i32 0, i32 %24
  store i32 1, i32* %arrayidx35, align 4
  %25 = load i32, i32* %person.addr, align 4
  %add = add nsw i32 %25, 1
  %call36 = call i32 @solve(i32 %add)
  %tobool37 = icmp ne i32 %call36, 0
  br i1 %tobool37, label %if.then38, label %if.end39

if.then38:                                        ; preds = %if.end33
  store i32 1, i32* %retval, align 4
  br label %return

if.end39:                                         ; preds = %if.end33
  %26 = load i32, i32* %i, align 4
  %arrayidx40 = getelementptr inbounds [5 x i32], [5 x i32]* @occupied, i32 0, i32 %26
  store i32 0, i32* %arrayidx40, align 4
  br label %for.inc41

for.inc41:                                        ; preds = %if.end39, %if.then32
  %27 = load i32, i32* %i, align 4
  %inc42 = add nsw i32 %27, 1
  store i32 %inc42, i32* %i, align 4
  br label %for.cond27

for.end43:                                        ; preds = %for.cond27
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end43, %if.then38, %for.end25, %if.end12
  %28 = load i32, i32* %retval, align 4
  ret i32 %28
}

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 0, i32* @verbose, align 4
  %call = call i32 @solve(i32 0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.8, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %arrayidx1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %1, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %call = call i32 @abs(i32 %sub) #3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1 (hasExternalUses)
%3:i1 = slt 0:i32, %2
%4:i32 = subnsw 0:i32, %2
%5:i32 = select %3, %2, %4
infer %5

; *****
; For LLVM instruction:
;  %cmp = icmp ne i32 %call, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1 (hasExternalUses)
%3:i1 = slt 0:i32, %2
%4:i32 = subnsw 0:i32, %2
%5:i32 = select %3, %2, %4
%6:i1 = ne 1:i32, %5
infer %6

; *****
; For LLVM instruction:
;  %conv = zext i1 %cmp to i32
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1 (hasExternalUses)
%3:i1 = slt 0:i32, %2
%4:i32 = subnsw 0:i32, %2
%5:i32 = select %3, %2, %4
%6:i1 = ne 1:i32, %5
%7:i32 = zext %6
infer %7
#########################################################
; exiting Souper's runOnFunction() for c5()

; entering Souper's runOnFunction() for solve()

; ModuleID = './Dinesmans_multiple-dwelling_problem.c.bc'
source_filename = "./Dinesmans_multiple-dwelling_problem.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@verbose = hidden global i32 0, align 4
@solution = hidden global [5 x i32] zeroinitializer, align 16
@occupied = hidden global [5 x i32] zeroinitializer, align 16
@.str = private unnamed_addr constant [6 x i8] c"baker\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"cooper\00", align 1
@.str.2 = private unnamed_addr constant [9 x i8] c"fletcher\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"miller\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"smith\00", align 1
@names = hidden global [5 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0)], align 16
@cond = hidden global [6 x i32 (i32*)*] [i32 (i32*)* @c0, i32 (i32*)* @c1, i32 (i32*)* @c2, i32 (i32*)* @c3, i32 (i32*)* @c4, i32 (i32*)* @c5], align 16
@.str.5 = private unnamed_addr constant [7 x i8] c"%d %s\0A\00", align 1
@.str.6 = private unnamed_addr constant [14 x i8] c"cond %d bad\0A\0A\00", align 1
@.str.7 = private unnamed_addr constant [20 x i8] c"Found arrangement:\0A\00", align 1
@.str.8 = private unnamed_addr constant [23 x i8] c"Nobody lives anywhere\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @c0(i32* %s) #0 {
entry:
  %s.addr = alloca i32*, align 4
  store i32* %s, i32** %s.addr, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %0, i32 0
  %1 = load i32, i32* %arrayidx, align 4
  %cmp = icmp ne i32 %1, 4
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @c1(i32* %s) #0 {
entry:
  %s.addr = alloca i32*, align 4
  store i32* %s, i32** %s.addr, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %0, i32 1
  %1 = load i32, i32* %arrayidx, align 4
  %cmp = icmp ne i32 %1, 0
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @c2(i32* %s) #0 {
entry:
  %s.addr = alloca i32*, align 4
  store i32* %s, i32** %s.addr, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %0, i32 2
  %1 = load i32, i32* %arrayidx, align 4
  %cmp = icmp ne i32 %1, 0
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %2 = load i32*, i32** %s.addr, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %2, i32 2
  %3 = load i32, i32* %arrayidx1, align 4
  %cmp2 = icmp ne i32 %3, 4
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ]
  %land.ext = zext i1 %4 to i32
  ret i32 %land.ext
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @c3(i32* %s) #0 {
entry:
  %s.addr = alloca i32*, align 4
  store i32* %s, i32** %s.addr, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %0, i32 3
  %1 = load i32, i32* %arrayidx, align 4
  %2 = load i32*, i32** %s.addr, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %2, i32 1
  %3 = load i32, i32* %arrayidx1, align 4
  %cmp = icmp sgt i32 %1, %3
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @c4(i32* %s) #0 {
entry:
  %s.addr = alloca i32*, align 4
  store i32* %s, i32** %s.addr, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %0, i32 4
  %1 = load i32, i32* %arrayidx, align 4
  %2 = load i32*, i32** %s.addr, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %2, i32 2
  %3 = load i32, i32* %arrayidx1, align 4
  %sub = sub nsw i32 %1, %3
  %call = call i32 @abs(i32 %sub) #3
  %cmp = icmp ne i32 %call, 1
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: nounwind readnone
declare i32 @abs(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @c5(i32* %s) #0 {
entry:
  %s.addr = alloca i32*, align 4
  store i32* %s, i32** %s.addr, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %0, i32 1
  %1 = load i32, i32* %arrayidx, align 4
  %2 = load i32*, i32** %s.addr, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %2, i32 2
  %3 = load i32, i32* %arrayidx1, align 4
  %sub = sub nsw i32 %1, %3
  %call = call i32 @abs(i32 %sub) #3
  %cmp = icmp ne i32 %call, 1
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @solve(i32 %person) #0 {
entry:
  %retval = alloca i32, align 4
  %person.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 %person, i32* %person.addr, align 4
  %0 = load i32, i32* %person.addr, align 4
  %cmp = icmp eq i32 %0, 5
  br i1 %cmp, label %if.then, label %if.end26

if.then:                                          ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc13, %if.then
  %1 = load i32, i32* %i, align 4
  %cmp1 = icmp slt i32 %1, 6
  br i1 %cmp1, label %for.body, label %for.end15

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [6 x i32 (i32*)*], [6 x i32 (i32*)*]* @cond, i32 0, i32 %2
  %3 = load i32 (i32*)*, i32 (i32*)** %arrayidx, align 4
  %call = call i32 %3(i32* getelementptr inbounds ([5 x i32], [5 x i32]* @solution, i32 0, i32 0))
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then2, label %if.end

if.then2:                                         ; preds = %for.body
  br label %for.inc13

if.end:                                           ; preds = %for.body
  %4 = load i32, i32* @verbose, align 4
  %tobool3 = icmp ne i32 %4, 0
  br i1 %tobool3, label %if.then4, label %if.end12

if.then4:                                         ; preds = %if.end
  store i32 0, i32* %j, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %if.then4
  %5 = load i32, i32* %j, align 4
  %cmp6 = icmp slt i32 %5, 5
  br i1 %cmp6, label %for.body7, label %for.end

for.body7:                                        ; preds = %for.cond5
  %6 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds [5 x i32], [5 x i32]* @solution, i32 0, i32 %6
  %7 = load i32, i32* %arrayidx8, align 4
  %8 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds [5 x i8*], [5 x i8*]* @names, i32 0, i32 %8
  %9 = load i8*, i8** %arrayidx9, align 4
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i32 0, i32 0), i32 %7, i8* %9)
  br label %for.inc

for.inc:                                          ; preds = %for.body7
  %10 = load i32, i32* %j, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond5

for.end:                                          ; preds = %for.cond5
  %11 = load i32, i32* %i, align 4
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6, i32 0, i32 0), i32 %11)
  br label %if.end12

if.end12:                                         ; preds = %for.end, %if.end
  store i32 0, i32* %retval, align 4
  br label %return

for.inc13:                                        ; preds = %if.then2
  %12 = load i32, i32* %i, align 4
  %inc14 = add nsw i32 %12, 1
  store i32 %inc14, i32* %i, align 4
  br label %for.cond

for.end15:                                        ; preds = %for.cond
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.7, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond17

for.cond17:                                       ; preds = %for.inc23, %for.end15
  %13 = load i32, i32* %i, align 4
  %cmp18 = icmp slt i32 %13, 5
  br i1 %cmp18, label %for.body19, label %for.end25

for.body19:                                       ; preds = %for.cond17
  %14 = load i32, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds [5 x i32], [5 x i32]* @solution, i32 0, i32 %14
  %15 = load i32, i32* %arrayidx20, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx21 = getelementptr inbounds [5 x i8*], [5 x i8*]* @names, i32 0, i32 %16
  %17 = load i8*, i8** %arrayidx21, align 4
  %call22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i32 0, i32 0), i32 %15, i8* %17)
  br label %for.inc23

for.inc23:                                        ; preds = %for.body19
  %18 = load i32, i32* %i, align 4
  %inc24 = add nsw i32 %18, 1
  store i32 %inc24, i32* %i, align 4
  br label %for.cond17

for.end25:                                        ; preds = %for.cond17
  store i32 1, i32* %retval, align 4
  br label %return

if.end26:                                         ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond27

for.cond27:                                       ; preds = %for.inc41, %if.end26
  %19 = load i32, i32* %i, align 4
  %cmp28 = icmp slt i32 %19, 5
  br i1 %cmp28, label %for.body29, label %for.end43

for.body29:                                       ; preds = %for.cond27
  %20 = load i32, i32* %i, align 4
  %arrayidx30 = getelementptr inbounds [5 x i32], [5 x i32]* @occupied, i32 0, i32 %20
  %21 = load i32, i32* %arrayidx30, align 4
  %tobool31 = icmp ne i32 %21, 0
  br i1 %tobool31, label %if.then32, label %if.end33

if.then32:                                        ; preds = %for.body29
  br label %for.inc41

if.end33:                                         ; preds = %for.body29
  %22 = load i32, i32* %i, align 4
  %23 = load i32, i32* %person.addr, align 4
  %arrayidx34 = getelementptr inbounds [5 x i32], [5 x i32]* @solution, i32 0, i32 %23
  store i32 %22, i32* %arrayidx34, align 4
  %24 = load i32, i32* %i, align 4
  %arrayidx35 = getelementptr inbounds [5 x i32], [5 x i32]* @occupied, i32 0, i32 %24
  store i32 1, i32* %arrayidx35, align 4
  %25 = load i32, i32* %person.addr, align 4
  %add = add nsw i32 %25, 1
  %call36 = call i32 @solve(i32 %add)
  %tobool37 = icmp ne i32 %call36, 0
  br i1 %tobool37, label %if.then38, label %if.end39

if.then38:                                        ; preds = %if.end33
  store i32 1, i32* %retval, align 4
  br label %return

if.end39:                                         ; preds = %if.end33
  %26 = load i32, i32* %i, align 4
  %arrayidx40 = getelementptr inbounds [5 x i32], [5 x i32]* @occupied, i32 0, i32 %26
  store i32 0, i32* %arrayidx40, align 4
  br label %for.inc41

for.inc41:                                        ; preds = %if.end39, %if.then32
  %27 = load i32, i32* %i, align 4
  %inc42 = add nsw i32 %27, 1
  store i32 %inc42, i32* %i, align 4
  br label %for.cond27

for.end43:                                        ; preds = %for.cond27
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end43, %if.then38, %for.end25, %if.end12
  %28 = load i32, i32* %retval, align 4
  ret i32 %28
}

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 0, i32* @verbose, align 4
  %call = call i32 @solve(i32 0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.8, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %person.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %0, 5
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 5:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = icmp slt i32 %1, 6
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 6:i32
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 %3(i32* getelementptr inbounds ([5 x i32], [5 x i32]* @solution, i32 0, i32 0))
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %call, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* @verbose, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool3 = icmp ne i32 %4, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp6 = icmp slt i32 %5, 5
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 5:i32
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %arrayidx8, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %10, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc14 = add nsw i32 %12, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp18 = icmp slt i32 %13, 5
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 5:i32
infer %1

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %arrayidx20, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc24 = add nsw i32 %18, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp28 = icmp slt i32 %19, 5
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 5:i32
infer %1

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %arrayidx30, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool31 = icmp ne i32 %21, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %person.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %person.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %25, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call36 = call i32 @solve(i32 %add)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool37 = icmp ne i32 %call36, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc42 = add nsw i32 %27, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 5:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 6:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 5:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for solve()

; entering Souper's runOnFunction() for main()

; ModuleID = './Dinesmans_multiple-dwelling_problem.c.bc'
source_filename = "./Dinesmans_multiple-dwelling_problem.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@verbose = hidden global i32 0, align 4
@solution = hidden global [5 x i32] zeroinitializer, align 16
@occupied = hidden global [5 x i32] zeroinitializer, align 16
@.str = private unnamed_addr constant [6 x i8] c"baker\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"cooper\00", align 1
@.str.2 = private unnamed_addr constant [9 x i8] c"fletcher\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"miller\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"smith\00", align 1
@names = hidden global [5 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0)], align 16
@cond = hidden global [6 x i32 (i32*)*] [i32 (i32*)* @c0, i32 (i32*)* @c1, i32 (i32*)* @c2, i32 (i32*)* @c3, i32 (i32*)* @c4, i32 (i32*)* @c5], align 16
@.str.5 = private unnamed_addr constant [7 x i8] c"%d %s\0A\00", align 1
@.str.6 = private unnamed_addr constant [14 x i8] c"cond %d bad\0A\0A\00", align 1
@.str.7 = private unnamed_addr constant [20 x i8] c"Found arrangement:\0A\00", align 1
@.str.8 = private unnamed_addr constant [23 x i8] c"Nobody lives anywhere\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @c0(i32* %s) #0 {
entry:
  %s.addr = alloca i32*, align 4
  store i32* %s, i32** %s.addr, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %0, i32 0
  %1 = load i32, i32* %arrayidx, align 4
  %cmp = icmp ne i32 %1, 4
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @c1(i32* %s) #0 {
entry:
  %s.addr = alloca i32*, align 4
  store i32* %s, i32** %s.addr, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %0, i32 1
  %1 = load i32, i32* %arrayidx, align 4
  %cmp = icmp ne i32 %1, 0
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @c2(i32* %s) #0 {
entry:
  %s.addr = alloca i32*, align 4
  store i32* %s, i32** %s.addr, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %0, i32 2
  %1 = load i32, i32* %arrayidx, align 4
  %cmp = icmp ne i32 %1, 0
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %2 = load i32*, i32** %s.addr, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %2, i32 2
  %3 = load i32, i32* %arrayidx1, align 4
  %cmp2 = icmp ne i32 %3, 4
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ]
  %land.ext = zext i1 %4 to i32
  ret i32 %land.ext
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @c3(i32* %s) #0 {
entry:
  %s.addr = alloca i32*, align 4
  store i32* %s, i32** %s.addr, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %0, i32 3
  %1 = load i32, i32* %arrayidx, align 4
  %2 = load i32*, i32** %s.addr, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %2, i32 1
  %3 = load i32, i32* %arrayidx1, align 4
  %cmp = icmp sgt i32 %1, %3
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @c4(i32* %s) #0 {
entry:
  %s.addr = alloca i32*, align 4
  store i32* %s, i32** %s.addr, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %0, i32 4
  %1 = load i32, i32* %arrayidx, align 4
  %2 = load i32*, i32** %s.addr, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %2, i32 2
  %3 = load i32, i32* %arrayidx1, align 4
  %sub = sub nsw i32 %1, %3
  %call = call i32 @abs(i32 %sub) #3
  %cmp = icmp ne i32 %call, 1
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: nounwind readnone
declare i32 @abs(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @c5(i32* %s) #0 {
entry:
  %s.addr = alloca i32*, align 4
  store i32* %s, i32** %s.addr, align 4
  %0 = load i32*, i32** %s.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %0, i32 1
  %1 = load i32, i32* %arrayidx, align 4
  %2 = load i32*, i32** %s.addr, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %2, i32 2
  %3 = load i32, i32* %arrayidx1, align 4
  %sub = sub nsw i32 %1, %3
  %call = call i32 @abs(i32 %sub) #3
  %cmp = icmp ne i32 %call, 1
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @solve(i32 %person) #0 {
entry:
  %retval = alloca i32, align 4
  %person.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 %person, i32* %person.addr, align 4
  %0 = load i32, i32* %person.addr, align 4
  %cmp = icmp eq i32 %0, 5
  br i1 %cmp, label %if.then, label %if.end26

if.then:                                          ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc13, %if.then
  %1 = load i32, i32* %i, align 4
  %cmp1 = icmp slt i32 %1, 6
  br i1 %cmp1, label %for.body, label %for.end15

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [6 x i32 (i32*)*], [6 x i32 (i32*)*]* @cond, i32 0, i32 %2
  %3 = load i32 (i32*)*, i32 (i32*)** %arrayidx, align 4
  %call = call i32 %3(i32* getelementptr inbounds ([5 x i32], [5 x i32]* @solution, i32 0, i32 0))
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then2, label %if.end

if.then2:                                         ; preds = %for.body
  br label %for.inc13

if.end:                                           ; preds = %for.body
  %4 = load i32, i32* @verbose, align 4
  %tobool3 = icmp ne i32 %4, 0
  br i1 %tobool3, label %if.then4, label %if.end12

if.then4:                                         ; preds = %if.end
  store i32 0, i32* %j, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %if.then4
  %5 = load i32, i32* %j, align 4
  %cmp6 = icmp slt i32 %5, 5
  br i1 %cmp6, label %for.body7, label %for.end

for.body7:                                        ; preds = %for.cond5
  %6 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds [5 x i32], [5 x i32]* @solution, i32 0, i32 %6
  %7 = load i32, i32* %arrayidx8, align 4
  %8 = load i32, i32* %j, align 4
  %arrayidx9 = getelementptr inbounds [5 x i8*], [5 x i8*]* @names, i32 0, i32 %8
  %9 = load i8*, i8** %arrayidx9, align 4
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i32 0, i32 0), i32 %7, i8* %9)
  br label %for.inc

for.inc:                                          ; preds = %for.body7
  %10 = load i32, i32* %j, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond5

for.end:                                          ; preds = %for.cond5
  %11 = load i32, i32* %i, align 4
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6, i32 0, i32 0), i32 %11)
  br label %if.end12

if.end12:                                         ; preds = %for.end, %if.end
  store i32 0, i32* %retval, align 4
  br label %return

for.inc13:                                        ; preds = %if.then2
  %12 = load i32, i32* %i, align 4
  %inc14 = add nsw i32 %12, 1
  store i32 %inc14, i32* %i, align 4
  br label %for.cond

for.end15:                                        ; preds = %for.cond
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.7, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond17

for.cond17:                                       ; preds = %for.inc23, %for.end15
  %13 = load i32, i32* %i, align 4
  %cmp18 = icmp slt i32 %13, 5
  br i1 %cmp18, label %for.body19, label %for.end25

for.body19:                                       ; preds = %for.cond17
  %14 = load i32, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds [5 x i32], [5 x i32]* @solution, i32 0, i32 %14
  %15 = load i32, i32* %arrayidx20, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx21 = getelementptr inbounds [5 x i8*], [5 x i8*]* @names, i32 0, i32 %16
  %17 = load i8*, i8** %arrayidx21, align 4
  %call22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i32 0, i32 0), i32 %15, i8* %17)
  br label %for.inc23

for.inc23:                                        ; preds = %for.body19
  %18 = load i32, i32* %i, align 4
  %inc24 = add nsw i32 %18, 1
  store i32 %inc24, i32* %i, align 4
  br label %for.cond17

for.end25:                                        ; preds = %for.cond17
  store i32 1, i32* %retval, align 4
  br label %return

if.end26:                                         ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond27

for.cond27:                                       ; preds = %for.inc41, %if.end26
  %19 = load i32, i32* %i, align 4
  %cmp28 = icmp slt i32 %19, 5
  br i1 %cmp28, label %for.body29, label %for.end43

for.body29:                                       ; preds = %for.cond27
  %20 = load i32, i32* %i, align 4
  %arrayidx30 = getelementptr inbounds [5 x i32], [5 x i32]* @occupied, i32 0, i32 %20
  %21 = load i32, i32* %arrayidx30, align 4
  %tobool31 = icmp ne i32 %21, 0
  br i1 %tobool31, label %if.then32, label %if.end33

if.then32:                                        ; preds = %for.body29
  br label %for.inc41

if.end33:                                         ; preds = %for.body29
  %22 = load i32, i32* %i, align 4
  %23 = load i32, i32* %person.addr, align 4
  %arrayidx34 = getelementptr inbounds [5 x i32], [5 x i32]* @solution, i32 0, i32 %23
  store i32 %22, i32* %arrayidx34, align 4
  %24 = load i32, i32* %i, align 4
  %arrayidx35 = getelementptr inbounds [5 x i32], [5 x i32]* @occupied, i32 0, i32 %24
  store i32 1, i32* %arrayidx35, align 4
  %25 = load i32, i32* %person.addr, align 4
  %add = add nsw i32 %25, 1
  %call36 = call i32 @solve(i32 %add)
  %tobool37 = icmp ne i32 %call36, 0
  br i1 %tobool37, label %if.then38, label %if.end39

if.then38:                                        ; preds = %if.end33
  store i32 1, i32* %retval, align 4
  br label %return

if.end39:                                         ; preds = %if.end33
  %26 = load i32, i32* %i, align 4
  %arrayidx40 = getelementptr inbounds [5 x i32], [5 x i32]* @occupied, i32 0, i32 %26
  store i32 0, i32* %arrayidx40, align 4
  br label %for.inc41

for.inc41:                                        ; preds = %if.end39, %if.then32
  %27 = load i32, i32* %i, align 4
  %inc42 = add nsw i32 %27, 1
  store i32 %inc42, i32* %i, align 4
  br label %for.cond27

for.end43:                                        ; preds = %for.cond27
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end43, %if.then38, %for.end25, %if.end12
  %28 = load i32, i32* %retval, align 4
  ret i32 %28
}

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 0, i32* @verbose, align 4
  %call = call i32 @solve(i32 0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.8, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 @solve(i32 0)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %call, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
