
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for pcmp()

; ModuleID = './Top_rank_per_group.c.bc'
source_filename = "./Top_rank_per_group.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.person = type { i8*, i8*, i8*, i32 }

@.str = private unnamed_addr constant [14 x i8] c"Tyler Bennett\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"E10297\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"D101\00", align 1
@.str.3 = private unnamed_addr constant [11 x i8] c"John Rappl\00", align 1
@.str.4 = private unnamed_addr constant [7 x i8] c"E21437\00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"D050\00", align 1
@.str.6 = private unnamed_addr constant [15 x i8] c"George Woltman\00", align 1
@.str.7 = private unnamed_addr constant [7 x i8] c"E00127\00", align 1
@.str.8 = private unnamed_addr constant [11 x i8] c"Adam Smith\00", align 1
@.str.9 = private unnamed_addr constant [7 x i8] c"E63535\00", align 1
@.str.10 = private unnamed_addr constant [5 x i8] c"D202\00", align 1
@.str.11 = private unnamed_addr constant [15 x i8] c"Claire Buckman\00", align 1
@.str.12 = private unnamed_addr constant [7 x i8] c"E39876\00", align 1
@.str.13 = private unnamed_addr constant [16 x i8] c"David McClellan\00", align 1
@.str.14 = private unnamed_addr constant [7 x i8] c"E04242\00", align 1
@.str.15 = private unnamed_addr constant [13 x i8] c"Rich Holcomb\00", align 1
@.str.16 = private unnamed_addr constant [7 x i8] c"E01234\00", align 1
@.str.17 = private unnamed_addr constant [13 x i8] c"Nathan Adams\00", align 1
@.str.18 = private unnamed_addr constant [7 x i8] c"E41298\00", align 1
@.str.19 = private unnamed_addr constant [15 x i8] c"Richard Potter\00", align 1
@.str.20 = private unnamed_addr constant [7 x i8] c"E43128\00", align 1
@.str.21 = private unnamed_addr constant [16 x i8] c"David Motsinger\00", align 1
@.str.22 = private unnamed_addr constant [7 x i8] c"E27002\00", align 1
@.str.23 = private unnamed_addr constant [12 x i8] c"Tim Sampair\00", align 1
@.str.24 = private unnamed_addr constant [7 x i8] c"E03033\00", align 1
@.str.25 = private unnamed_addr constant [11 x i8] c"Kim Arlich\00", align 1
@.str.26 = private unnamed_addr constant [7 x i8] c"E10001\00", align 1
@.str.27 = private unnamed_addr constant [5 x i8] c"D190\00", align 1
@.str.28 = private unnamed_addr constant [14 x i8] c"Timothy Grove\00", align 1
@.str.29 = private unnamed_addr constant [7 x i8] c"E16398\00", align 1
@ppl = hidden global [13 x %struct.person] [%struct.person { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0), i32 32000 }, %struct.person { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i32 47000 }, %struct.person { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0), i32 53500 }, %struct.person { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10, i32 0, i32 0), i32 18000 }, %struct.person { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10, i32 0, i32 0), i32 27800 }, %struct.person { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0), i32 41500 }, %struct.person { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10, i32 0, i32 0), i32 49500 }, %struct.person { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i32 21900 }, %struct.person { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0), i32 15900 }, %struct.person { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10, i32 0, i32 0), i32 19250 }, %struct.person { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.24, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0), i32 27000 }, %struct.person { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.26, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.27, i32 0, i32 0), i32 57000 }, %struct.person { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.29, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.27, i32 0, i32 0), i32 29900 }], align 16
@.str.30 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.31 = private unnamed_addr constant [11 x i8] c"%s %d: %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @pcmp(i8* %a, i8* %b) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %aa = alloca %struct.person*, align 4
  %bb = alloca %struct.person*, align 4
  %x = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.person*
  store %struct.person* %1, %struct.person** %aa, align 4
  %2 = load i8*, i8** %b.addr, align 4
  %3 = bitcast i8* %2 to %struct.person*
  store %struct.person* %3, %struct.person** %bb, align 4
  %4 = load %struct.person*, %struct.person** %aa, align 4
  %dept = getelementptr inbounds %struct.person, %struct.person* %4, i32 0, i32 2
  %5 = load i8*, i8** %dept, align 4
  %6 = load %struct.person*, %struct.person** %bb, align 4
  %dept1 = getelementptr inbounds %struct.person, %struct.person* %6, i32 0, i32 2
  %7 = load i8*, i8** %dept1, align 4
  %call = call i32 @strcmp(i8* %5, i8* %7) #3
  store i32 %call, i32* %x, align 4
  %8 = load i32, i32* %x, align 4
  %tobool = icmp ne i32 %8, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %9 = load i32, i32* %x, align 4
  store i32 %9, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %10 = load %struct.person*, %struct.person** %aa, align 4
  %sal = getelementptr inbounds %struct.person, %struct.person* %10, i32 0, i32 3
  %11 = load i32, i32* %sal, align 4
  %12 = load %struct.person*, %struct.person** %bb, align 4
  %sal2 = getelementptr inbounds %struct.person, %struct.person* %12, i32 0, i32 3
  %13 = load i32, i32* %sal2, align 4
  %cmp = icmp sgt i32 %11, %13
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %14 = load %struct.person*, %struct.person** %aa, align 4
  %sal3 = getelementptr inbounds %struct.person, %struct.person* %14, i32 0, i32 3
  %15 = load i32, i32* %sal3, align 4
  %16 = load %struct.person*, %struct.person** %bb, align 4
  %sal4 = getelementptr inbounds %struct.person, %struct.person* %16, i32 0, i32 3
  %17 = load i32, i32* %sal4, align 4
  %cmp5 = icmp slt i32 %15, %17
  %conv = zext i1 %cmp5 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ -1, %cond.true ], [ %conv, %cond.false ]
  store i32 %cond, i32* %retval, align 4
  br label %return

return:                                           ; preds = %cond.end, %if.then
  %18 = load i32, i32* %retval, align 4
  ret i32 %18
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @top(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %rank = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @qsort(i8* bitcast ([13 x %struct.person]* @ppl to i8*), i32 13, i32 16, i32 (i8*, i8*)* @pcmp)
  store i32 0, i32* %rank, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %0, 13
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [13 x %struct.person], [13 x %struct.person]* @ppl, i32 0, i32 %2
  %dept = getelementptr inbounds %struct.person, %struct.person* %arrayidx, i32 0, i32 2
  %3 = load i8*, i8** %dept, align 8
  %4 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %4, 1
  %arrayidx1 = getelementptr inbounds [13 x %struct.person], [13 x %struct.person]* @ppl, i32 0, i32 %sub
  %dept2 = getelementptr inbounds %struct.person, %struct.person* %arrayidx1, i32 0, i32 2
  %5 = load i8*, i8** %dept2, align 8
  %call = call i32 @strcmp(i8* %3, i8* %5) #3
  %tobool3 = icmp ne i32 %call, 0
  br i1 %tobool3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  store i32 0, i32* %rank, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body
  %6 = load i32, i32* %rank, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %rank, align 4
  %7 = load i32, i32* %n.addr, align 4
  %cmp5 = icmp slt i32 %6, %7
  br i1 %cmp5, label %if.then6, label %if.end12

if.then6:                                         ; preds = %if.end
  %8 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [13 x %struct.person], [13 x %struct.person]* @ppl, i32 0, i32 %8
  %dept8 = getelementptr inbounds %struct.person, %struct.person* %arrayidx7, i32 0, i32 2
  %9 = load i8*, i8** %dept8, align 8
  %10 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds [13 x %struct.person], [13 x %struct.person]* @ppl, i32 0, i32 %10
  %sal = getelementptr inbounds %struct.person, %struct.person* %arrayidx9, i32 0, i32 3
  %11 = load i32, i32* %sal, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds [13 x %struct.person], [13 x %struct.person]* @ppl, i32 0, i32 %12
  %name = getelementptr inbounds %struct.person, %struct.person* %arrayidx10, i32 0, i32 0
  %13 = load i8*, i8** %name, align 16
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.31, i32 0, i32 0), i8* %9, i32 %11, i8* %13)
  br label %if.end12

if.end12:                                         ; preds = %if.then6, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end12
  %14 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %14, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #2

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @top(i32 2)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 @strcmp(i8* %5, i8* %7) #3
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %x, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %8, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %x, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %sal, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %sal2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sgt i32 %11, %13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %sal3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %sal4, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp5 = icmp slt i32 %15, %17
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %conv = zext i1 %cmp5 to i32
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
%3:i32 = zext %2
infer %3

; *****
; For LLVM instruction:
;  %cond = phi i32 [ -1, %cond.true ], [ %conv, %cond.false ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i1 = slt %1, %2
%4:i32 = zext %3
%5:i32 = phi %0, 4294967295:i32, %4
infer %5

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
%3:i32 = zext %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i1 = slt %1, %2
%4:i32 = zext %3
%5:i32 = phi %0, 4294967295:i32, %4
infer %5


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
2 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
%3:i32 = zext %2

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for pcmp()

; entering Souper's runOnFunction() for top()

; ModuleID = './Top_rank_per_group.c.bc'
source_filename = "./Top_rank_per_group.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.person = type { i8*, i8*, i8*, i32 }

@.str = private unnamed_addr constant [14 x i8] c"Tyler Bennett\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"E10297\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"D101\00", align 1
@.str.3 = private unnamed_addr constant [11 x i8] c"John Rappl\00", align 1
@.str.4 = private unnamed_addr constant [7 x i8] c"E21437\00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"D050\00", align 1
@.str.6 = private unnamed_addr constant [15 x i8] c"George Woltman\00", align 1
@.str.7 = private unnamed_addr constant [7 x i8] c"E00127\00", align 1
@.str.8 = private unnamed_addr constant [11 x i8] c"Adam Smith\00", align 1
@.str.9 = private unnamed_addr constant [7 x i8] c"E63535\00", align 1
@.str.10 = private unnamed_addr constant [5 x i8] c"D202\00", align 1
@.str.11 = private unnamed_addr constant [15 x i8] c"Claire Buckman\00", align 1
@.str.12 = private unnamed_addr constant [7 x i8] c"E39876\00", align 1
@.str.13 = private unnamed_addr constant [16 x i8] c"David McClellan\00", align 1
@.str.14 = private unnamed_addr constant [7 x i8] c"E04242\00", align 1
@.str.15 = private unnamed_addr constant [13 x i8] c"Rich Holcomb\00", align 1
@.str.16 = private unnamed_addr constant [7 x i8] c"E01234\00", align 1
@.str.17 = private unnamed_addr constant [13 x i8] c"Nathan Adams\00", align 1
@.str.18 = private unnamed_addr constant [7 x i8] c"E41298\00", align 1
@.str.19 = private unnamed_addr constant [15 x i8] c"Richard Potter\00", align 1
@.str.20 = private unnamed_addr constant [7 x i8] c"E43128\00", align 1
@.str.21 = private unnamed_addr constant [16 x i8] c"David Motsinger\00", align 1
@.str.22 = private unnamed_addr constant [7 x i8] c"E27002\00", align 1
@.str.23 = private unnamed_addr constant [12 x i8] c"Tim Sampair\00", align 1
@.str.24 = private unnamed_addr constant [7 x i8] c"E03033\00", align 1
@.str.25 = private unnamed_addr constant [11 x i8] c"Kim Arlich\00", align 1
@.str.26 = private unnamed_addr constant [7 x i8] c"E10001\00", align 1
@.str.27 = private unnamed_addr constant [5 x i8] c"D190\00", align 1
@.str.28 = private unnamed_addr constant [14 x i8] c"Timothy Grove\00", align 1
@.str.29 = private unnamed_addr constant [7 x i8] c"E16398\00", align 1
@ppl = hidden global [13 x %struct.person] [%struct.person { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0), i32 32000 }, %struct.person { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i32 47000 }, %struct.person { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0), i32 53500 }, %struct.person { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10, i32 0, i32 0), i32 18000 }, %struct.person { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10, i32 0, i32 0), i32 27800 }, %struct.person { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0), i32 41500 }, %struct.person { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10, i32 0, i32 0), i32 49500 }, %struct.person { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i32 21900 }, %struct.person { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0), i32 15900 }, %struct.person { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10, i32 0, i32 0), i32 19250 }, %struct.person { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.24, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0), i32 27000 }, %struct.person { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.26, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.27, i32 0, i32 0), i32 57000 }, %struct.person { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.29, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.27, i32 0, i32 0), i32 29900 }], align 16
@.str.30 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.31 = private unnamed_addr constant [11 x i8] c"%s %d: %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @pcmp(i8* %a, i8* %b) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %aa = alloca %struct.person*, align 4
  %bb = alloca %struct.person*, align 4
  %x = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.person*
  store %struct.person* %1, %struct.person** %aa, align 4
  %2 = load i8*, i8** %b.addr, align 4
  %3 = bitcast i8* %2 to %struct.person*
  store %struct.person* %3, %struct.person** %bb, align 4
  %4 = load %struct.person*, %struct.person** %aa, align 4
  %dept = getelementptr inbounds %struct.person, %struct.person* %4, i32 0, i32 2
  %5 = load i8*, i8** %dept, align 4
  %6 = load %struct.person*, %struct.person** %bb, align 4
  %dept1 = getelementptr inbounds %struct.person, %struct.person* %6, i32 0, i32 2
  %7 = load i8*, i8** %dept1, align 4
  %call = call i32 @strcmp(i8* %5, i8* %7) #3
  store i32 %call, i32* %x, align 4
  %8 = load i32, i32* %x, align 4
  %tobool = icmp ne i32 %8, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %9 = load i32, i32* %x, align 4
  store i32 %9, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %10 = load %struct.person*, %struct.person** %aa, align 4
  %sal = getelementptr inbounds %struct.person, %struct.person* %10, i32 0, i32 3
  %11 = load i32, i32* %sal, align 4
  %12 = load %struct.person*, %struct.person** %bb, align 4
  %sal2 = getelementptr inbounds %struct.person, %struct.person* %12, i32 0, i32 3
  %13 = load i32, i32* %sal2, align 4
  %cmp = icmp sgt i32 %11, %13
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %14 = load %struct.person*, %struct.person** %aa, align 4
  %sal3 = getelementptr inbounds %struct.person, %struct.person* %14, i32 0, i32 3
  %15 = load i32, i32* %sal3, align 4
  %16 = load %struct.person*, %struct.person** %bb, align 4
  %sal4 = getelementptr inbounds %struct.person, %struct.person* %16, i32 0, i32 3
  %17 = load i32, i32* %sal4, align 4
  %cmp5 = icmp slt i32 %15, %17
  %conv = zext i1 %cmp5 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ -1, %cond.true ], [ %conv, %cond.false ]
  store i32 %cond, i32* %retval, align 4
  br label %return

return:                                           ; preds = %cond.end, %if.then
  %18 = load i32, i32* %retval, align 4
  ret i32 %18
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @top(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %rank = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @qsort(i8* bitcast ([13 x %struct.person]* @ppl to i8*), i32 13, i32 16, i32 (i8*, i8*)* @pcmp)
  store i32 0, i32* %rank, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %0, 13
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [13 x %struct.person], [13 x %struct.person]* @ppl, i32 0, i32 %2
  %dept = getelementptr inbounds %struct.person, %struct.person* %arrayidx, i32 0, i32 2
  %3 = load i8*, i8** %dept, align 8
  %4 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %4, 1
  %arrayidx1 = getelementptr inbounds [13 x %struct.person], [13 x %struct.person]* @ppl, i32 0, i32 %sub
  %dept2 = getelementptr inbounds %struct.person, %struct.person* %arrayidx1, i32 0, i32 2
  %5 = load i8*, i8** %dept2, align 8
  %call = call i32 @strcmp(i8* %3, i8* %5) #3
  %tobool3 = icmp ne i32 %call, 0
  br i1 %tobool3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  store i32 0, i32* %rank, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body
  %6 = load i32, i32* %rank, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %rank, align 4
  %7 = load i32, i32* %n.addr, align 4
  %cmp5 = icmp slt i32 %6, %7
  br i1 %cmp5, label %if.then6, label %if.end12

if.then6:                                         ; preds = %if.end
  %8 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [13 x %struct.person], [13 x %struct.person]* @ppl, i32 0, i32 %8
  %dept8 = getelementptr inbounds %struct.person, %struct.person* %arrayidx7, i32 0, i32 2
  %9 = load i8*, i8** %dept8, align 8
  %10 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds [13 x %struct.person], [13 x %struct.person]* @ppl, i32 0, i32 %10
  %sal = getelementptr inbounds %struct.person, %struct.person* %arrayidx9, i32 0, i32 3
  %11 = load i32, i32* %sal, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds [13 x %struct.person], [13 x %struct.person]* @ppl, i32 0, i32 %12
  %name = getelementptr inbounds %struct.person, %struct.person* %arrayidx10, i32 0, i32 0
  %13 = load i8*, i8** %name, align 16
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.31, i32 0, i32 0), i8* %9, i32 %11, i8* %13)
  br label %if.end12

if.end12:                                         ; preds = %if.then6, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end12
  %14 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %14, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #2

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @top(i32 2)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ult i32 %0, 13
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ult %0, 13:i32
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %1, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %4, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %call = call i32 @strcmp(i8* %3, i8* %5) #3
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool3 = icmp ne i32 %call, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %rank, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %6, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp5 = icmp slt i32 %6, %7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %sal, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc13 = add nsw i32 %14, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ult %0, 13:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for top()

; entering Souper's runOnFunction() for main()

; ModuleID = './Top_rank_per_group.c.bc'
source_filename = "./Top_rank_per_group.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.person = type { i8*, i8*, i8*, i32 }

@.str = private unnamed_addr constant [14 x i8] c"Tyler Bennett\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"E10297\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"D101\00", align 1
@.str.3 = private unnamed_addr constant [11 x i8] c"John Rappl\00", align 1
@.str.4 = private unnamed_addr constant [7 x i8] c"E21437\00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"D050\00", align 1
@.str.6 = private unnamed_addr constant [15 x i8] c"George Woltman\00", align 1
@.str.7 = private unnamed_addr constant [7 x i8] c"E00127\00", align 1
@.str.8 = private unnamed_addr constant [11 x i8] c"Adam Smith\00", align 1
@.str.9 = private unnamed_addr constant [7 x i8] c"E63535\00", align 1
@.str.10 = private unnamed_addr constant [5 x i8] c"D202\00", align 1
@.str.11 = private unnamed_addr constant [15 x i8] c"Claire Buckman\00", align 1
@.str.12 = private unnamed_addr constant [7 x i8] c"E39876\00", align 1
@.str.13 = private unnamed_addr constant [16 x i8] c"David McClellan\00", align 1
@.str.14 = private unnamed_addr constant [7 x i8] c"E04242\00", align 1
@.str.15 = private unnamed_addr constant [13 x i8] c"Rich Holcomb\00", align 1
@.str.16 = private unnamed_addr constant [7 x i8] c"E01234\00", align 1
@.str.17 = private unnamed_addr constant [13 x i8] c"Nathan Adams\00", align 1
@.str.18 = private unnamed_addr constant [7 x i8] c"E41298\00", align 1
@.str.19 = private unnamed_addr constant [15 x i8] c"Richard Potter\00", align 1
@.str.20 = private unnamed_addr constant [7 x i8] c"E43128\00", align 1
@.str.21 = private unnamed_addr constant [16 x i8] c"David Motsinger\00", align 1
@.str.22 = private unnamed_addr constant [7 x i8] c"E27002\00", align 1
@.str.23 = private unnamed_addr constant [12 x i8] c"Tim Sampair\00", align 1
@.str.24 = private unnamed_addr constant [7 x i8] c"E03033\00", align 1
@.str.25 = private unnamed_addr constant [11 x i8] c"Kim Arlich\00", align 1
@.str.26 = private unnamed_addr constant [7 x i8] c"E10001\00", align 1
@.str.27 = private unnamed_addr constant [5 x i8] c"D190\00", align 1
@.str.28 = private unnamed_addr constant [14 x i8] c"Timothy Grove\00", align 1
@.str.29 = private unnamed_addr constant [7 x i8] c"E16398\00", align 1
@ppl = hidden global [13 x %struct.person] [%struct.person { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0), i32 32000 }, %struct.person { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i32 47000 }, %struct.person { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0), i32 53500 }, %struct.person { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10, i32 0, i32 0), i32 18000 }, %struct.person { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10, i32 0, i32 0), i32 27800 }, %struct.person { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0), i32 41500 }, %struct.person { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10, i32 0, i32 0), i32 49500 }, %struct.person { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i32 21900 }, %struct.person { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0), i32 15900 }, %struct.person { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10, i32 0, i32 0), i32 19250 }, %struct.person { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.24, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0), i32 27000 }, %struct.person { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.26, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.27, i32 0, i32 0), i32 57000 }, %struct.person { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.29, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.27, i32 0, i32 0), i32 29900 }], align 16
@.str.30 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.31 = private unnamed_addr constant [11 x i8] c"%s %d: %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @pcmp(i8* %a, i8* %b) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %aa = alloca %struct.person*, align 4
  %bb = alloca %struct.person*, align 4
  %x = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to %struct.person*
  store %struct.person* %1, %struct.person** %aa, align 4
  %2 = load i8*, i8** %b.addr, align 4
  %3 = bitcast i8* %2 to %struct.person*
  store %struct.person* %3, %struct.person** %bb, align 4
  %4 = load %struct.person*, %struct.person** %aa, align 4
  %dept = getelementptr inbounds %struct.person, %struct.person* %4, i32 0, i32 2
  %5 = load i8*, i8** %dept, align 4
  %6 = load %struct.person*, %struct.person** %bb, align 4
  %dept1 = getelementptr inbounds %struct.person, %struct.person* %6, i32 0, i32 2
  %7 = load i8*, i8** %dept1, align 4
  %call = call i32 @strcmp(i8* %5, i8* %7) #3
  store i32 %call, i32* %x, align 4
  %8 = load i32, i32* %x, align 4
  %tobool = icmp ne i32 %8, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %9 = load i32, i32* %x, align 4
  store i32 %9, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %10 = load %struct.person*, %struct.person** %aa, align 4
  %sal = getelementptr inbounds %struct.person, %struct.person* %10, i32 0, i32 3
  %11 = load i32, i32* %sal, align 4
  %12 = load %struct.person*, %struct.person** %bb, align 4
  %sal2 = getelementptr inbounds %struct.person, %struct.person* %12, i32 0, i32 3
  %13 = load i32, i32* %sal2, align 4
  %cmp = icmp sgt i32 %11, %13
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %14 = load %struct.person*, %struct.person** %aa, align 4
  %sal3 = getelementptr inbounds %struct.person, %struct.person* %14, i32 0, i32 3
  %15 = load i32, i32* %sal3, align 4
  %16 = load %struct.person*, %struct.person** %bb, align 4
  %sal4 = getelementptr inbounds %struct.person, %struct.person* %16, i32 0, i32 3
  %17 = load i32, i32* %sal4, align 4
  %cmp5 = icmp slt i32 %15, %17
  %conv = zext i1 %cmp5 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ -1, %cond.true ], [ %conv, %cond.false ]
  store i32 %cond, i32* %retval, align 4
  br label %return

return:                                           ; preds = %cond.end, %if.then
  %18 = load i32, i32* %retval, align 4
  ret i32 %18
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @top(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %rank = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @qsort(i8* bitcast ([13 x %struct.person]* @ppl to i8*), i32 13, i32 16, i32 (i8*, i8*)* @pcmp)
  store i32 0, i32* %rank, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %0, 13
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [13 x %struct.person], [13 x %struct.person]* @ppl, i32 0, i32 %2
  %dept = getelementptr inbounds %struct.person, %struct.person* %arrayidx, i32 0, i32 2
  %3 = load i8*, i8** %dept, align 8
  %4 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %4, 1
  %arrayidx1 = getelementptr inbounds [13 x %struct.person], [13 x %struct.person]* @ppl, i32 0, i32 %sub
  %dept2 = getelementptr inbounds %struct.person, %struct.person* %arrayidx1, i32 0, i32 2
  %5 = load i8*, i8** %dept2, align 8
  %call = call i32 @strcmp(i8* %3, i8* %5) #3
  %tobool3 = icmp ne i32 %call, 0
  br i1 %tobool3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  store i32 0, i32* %rank, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body
  %6 = load i32, i32* %rank, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %rank, align 4
  %7 = load i32, i32* %n.addr, align 4
  %cmp5 = icmp slt i32 %6, %7
  br i1 %cmp5, label %if.then6, label %if.end12

if.then6:                                         ; preds = %if.end
  %8 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [13 x %struct.person], [13 x %struct.person]* @ppl, i32 0, i32 %8
  %dept8 = getelementptr inbounds %struct.person, %struct.person* %arrayidx7, i32 0, i32 2
  %9 = load i8*, i8** %dept8, align 8
  %10 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds [13 x %struct.person], [13 x %struct.person]* @ppl, i32 0, i32 %10
  %sal = getelementptr inbounds %struct.person, %struct.person* %arrayidx9, i32 0, i32 3
  %11 = load i32, i32* %sal, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds [13 x %struct.person], [13 x %struct.person]* @ppl, i32 0, i32 %12
  %name = getelementptr inbounds %struct.person, %struct.person* %arrayidx10, i32 0, i32 0
  %13 = load i8*, i8** %name, align 16
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.31, i32 0, i32 0), i8* %9, i32 %11, i8* %13)
  br label %if.end12

if.end12:                                         ; preds = %if.then6, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end12
  %14 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %14, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #2

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @top(i32 2)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
