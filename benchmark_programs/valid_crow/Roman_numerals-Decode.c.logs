
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for decode()

; ModuleID = './Roman_numerals-Decode.c.bc'
source_filename = "./Roman_numerals-Decode.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@digits = hidden global [26 x i32] [i32 0, i32 0, i32 100, i32 500, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 50, i32 1000, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 5, i32 5, i32 0, i32 10, i32 0, i32 0], align 16
@.str = private unnamed_addr constant [6 x i8] c"MCmxC\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"MMVIII\00", align 1
@.str.2 = private unnamed_addr constant [8 x i8] c"MDClXVI\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"MCXLUJ\00", align 1
@__const.main.romans = private unnamed_addr constant [4 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0)], align 16
@.str.4 = private unnamed_addr constant [7 x i8] c"%s\09%d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @decode(i8* %roman) #0 {
entry:
  %roman.addr = alloca i8*, align 4
  %bigger = alloca i8*, align 4
  %current = alloca i32, align 4
  %arabic = alloca i32, align 4
  store i8* %roman, i8** %roman.addr, align 4
  store i32 0, i32* %arabic, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %0 = load i8*, i8** %roman.addr, align 4
  %1 = load i8, i8* %0, align 1
  %conv = sext i8 %1 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %while.body, label %while.end34

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %roman.addr, align 4
  %3 = load i8, i8* %2, align 1
  %conv2 = sext i8 %3 to i32
  %and = and i32 -33, %conv2
  %sub = sub nsw i32 %and, 65
  %arrayidx = getelementptr inbounds [26 x i32], [26 x i32]* @digits, i32 0, i32 %sub
  %4 = load i32, i32* %arrayidx, align 4
  store i32 %4, i32* %current, align 4
  %5 = load i8*, i8** %roman.addr, align 4
  store i8* %5, i8** %bigger, align 4
  br label %while.cond3

while.cond3:                                      ; preds = %while.body13, %while.body
  %6 = load i8*, i8** %bigger, align 4
  %7 = load i8, i8* %6, align 1
  %conv4 = sext i8 %7 to i32
  %and5 = and i32 -33, %conv4
  %sub6 = sub nsw i32 %and5, 65
  %arrayidx7 = getelementptr inbounds [26 x i32], [26 x i32]* @digits, i32 0, i32 %sub6
  %8 = load i32, i32* %arrayidx7, align 4
  %9 = load i32, i32* %current, align 4
  %cmp8 = icmp sle i32 %8, %9
  br i1 %cmp8, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond3
  %10 = load i8*, i8** %bigger, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %10, i32 1
  store i8* %incdec.ptr, i8** %bigger, align 4
  %11 = load i8, i8* %incdec.ptr, align 1
  %conv10 = sext i8 %11 to i32
  %cmp11 = icmp ne i32 %conv10, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond3
  %12 = phi i1 [ false, %while.cond3 ], [ %cmp11, %land.rhs ]
  br i1 %12, label %while.body13, label %while.end

while.body13:                                     ; preds = %land.end
  br label %while.cond3

while.end:                                        ; preds = %land.end
  %13 = load i8*, i8** %bigger, align 4
  %14 = load i8, i8* %13, align 1
  %conv14 = sext i8 %14 to i32
  %cmp15 = icmp eq i32 %conv14, 0
  br i1 %cmp15, label %if.then, label %if.else

if.then:                                          ; preds = %while.end
  %15 = load i32, i32* %current, align 4
  %16 = load i32, i32* %arabic, align 4
  %add = add nsw i32 %16, %15
  store i32 %add, i32* %arabic, align 4
  br label %if.end

if.else:                                          ; preds = %while.end
  %17 = load i8*, i8** %bigger, align 4
  %18 = load i8, i8* %17, align 1
  %conv17 = sext i8 %18 to i32
  %and18 = and i32 -33, %conv17
  %sub19 = sub nsw i32 %and18, 65
  %arrayidx20 = getelementptr inbounds [26 x i32], [26 x i32]* @digits, i32 0, i32 %sub19
  %19 = load i32, i32* %arrayidx20, align 4
  %20 = load i32, i32* %arabic, align 4
  %add21 = add nsw i32 %20, %19
  store i32 %add21, i32* %arabic, align 4
  br label %while.cond22

while.cond22:                                     ; preds = %while.body25, %if.else
  %21 = load i8*, i8** %roman.addr, align 4
  %22 = load i8*, i8** %bigger, align 4
  %cmp23 = icmp ult i8* %21, %22
  br i1 %cmp23, label %while.body25, label %while.end32

while.body25:                                     ; preds = %while.cond22
  %23 = load i8*, i8** %roman.addr, align 4
  %incdec.ptr26 = getelementptr inbounds i8, i8* %23, i32 1
  store i8* %incdec.ptr26, i8** %roman.addr, align 4
  %24 = load i8, i8* %23, align 1
  %conv27 = sext i8 %24 to i32
  %and28 = and i32 -33, %conv27
  %sub29 = sub nsw i32 %and28, 65
  %arrayidx30 = getelementptr inbounds [26 x i32], [26 x i32]* @digits, i32 0, i32 %sub29
  %25 = load i32, i32* %arrayidx30, align 4
  %26 = load i32, i32* %arabic, align 4
  %sub31 = sub nsw i32 %26, %25
  store i32 %sub31, i32* %arabic, align 4
  br label %while.cond22

while.end32:                                      ; preds = %while.cond22
  br label %if.end

if.end:                                           ; preds = %while.end32, %if.then
  %27 = load i8*, i8** %roman.addr, align 4
  %incdec.ptr33 = getelementptr inbounds i8, i8* %27, i32 1
  store i8* %incdec.ptr33, i8** %roman.addr, align 4
  br label %while.cond

while.end34:                                      ; preds = %while.cond
  %28 = load i32, i32* %arabic, align 4
  ret i32 %28
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %romans = alloca [4 x i8*], align 16
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [4 x i8*]* %romans to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([4 x i8*]* @__const.main.romans to i8*), i32 16, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %1, 4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [4 x i8*], [4 x i8*]* %romans, i32 0, i32 %2
  %3 = load i8*, i8** %arrayidx, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [4 x i8*], [4 x i8*]* %romans, i32 0, i32 %4
  %5 = load i8*, i8** %arrayidx1, align 4
  %call = call i32 @decode(i8* %5)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i32 0, i32 0), i8* %3, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i8, i8* %0, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %1 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp = icmp ne i32 %conv, 0
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i8, i8* %2, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0 (demandedBits=11011111)

; *****
; For LLVM instruction:
;  %conv2 = sext i8 %3 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1 (demandedBits=11111111111111111111111111011111)

; *****
; For LLVM instruction:
;  %and = and i32 -33, %conv2
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = and 4294967263:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %and, 65
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = and 4294967263:i32, %1
%3:i32 = subnsw %2, 65:i32
infer %3

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i8, i8* %6, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0 (demandedBits=11011111)

; *****
; For LLVM instruction:
;  %conv4 = sext i8 %7 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1 (demandedBits=11111111111111111111111111011111)

; *****
; For LLVM instruction:
;  %and5 = and i32 -33, %conv4
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = and 4294967263:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %sub6 = sub nsw i32 %and5, 65
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = and 4294967263:i32, %1
%3:i32 = subnsw %2, 65:i32
infer %3

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %arrayidx7, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %current, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp8 = icmp sle i32 %8, %9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %11 = load i8, i8* %incdec.ptr, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv10 = sext i8 %11 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp11 = icmp ne i32 %conv10, 0
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %12 = phi i1 [ false, %while.cond3 ], [ %cmp11, %land.rhs ]
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i8, i8* %13, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv14 = sext i8 %14 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp15 = icmp eq i32 %conv14, 0
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %current, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %arabic, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %16, %15
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %18 = load i8, i8* %17, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0 (demandedBits=11011111)

; *****
; For LLVM instruction:
;  %conv17 = sext i8 %18 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1 (demandedBits=11111111111111111111111111011111)

; *****
; For LLVM instruction:
;  %and18 = and i32 -33, %conv17
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = and 4294967263:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %sub19 = sub nsw i32 %and18, 65
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = and 4294967263:i32, %1
%3:i32 = subnsw %2, 65:i32
infer %3

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %arrayidx20, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %arabic, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add21 = add nsw i32 %20, %19
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %cmp23 = icmp ult i8* %21, %22
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %24 = load i8, i8* %23, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0 (demandedBits=11011111)

; *****
; For LLVM instruction:
;  %conv27 = sext i8 %24 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1 (demandedBits=11111111111111111111111111011111)

; *****
; For LLVM instruction:
;  %and28 = and i32 -33, %conv27
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = and 4294967263:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %sub29 = sub nsw i32 %and28, 65
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i32 = and 4294967263:i32, %1
%3:i32 = subnsw %2, 65:i32
infer %3

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %arrayidx30, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %arabic, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub31 = sub nsw i32 %26, %25
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %arabic, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 0:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0 (demandedBits=11011111)


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -37
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
infer %1 (demandedBits=11111111111111111111111111011111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -37
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i32 = and 4294967263:i32, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -37
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i32 = and 4294967263:i32, %1
%3:i32 = subnsw %2, 65:i32
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -65
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var
%1:i32 = sext %0
%2:i32 = and 4294967263:i32, %1

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 0:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for decode()

; entering Souper's runOnFunction() for main()

; ModuleID = './Roman_numerals-Decode.c.bc'
source_filename = "./Roman_numerals-Decode.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@digits = hidden global [26 x i32] [i32 0, i32 0, i32 100, i32 500, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 50, i32 1000, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 5, i32 5, i32 0, i32 10, i32 0, i32 0], align 16
@.str = private unnamed_addr constant [6 x i8] c"MCmxC\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"MMVIII\00", align 1
@.str.2 = private unnamed_addr constant [8 x i8] c"MDClXVI\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"MCXLUJ\00", align 1
@__const.main.romans = private unnamed_addr constant [4 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0)], align 16
@.str.4 = private unnamed_addr constant [7 x i8] c"%s\09%d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @decode(i8* %roman) #0 {
entry:
  %roman.addr = alloca i8*, align 4
  %bigger = alloca i8*, align 4
  %current = alloca i32, align 4
  %arabic = alloca i32, align 4
  store i8* %roman, i8** %roman.addr, align 4
  store i32 0, i32* %arabic, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %0 = load i8*, i8** %roman.addr, align 4
  %1 = load i8, i8* %0, align 1
  %conv = sext i8 %1 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %while.body, label %while.end34

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %roman.addr, align 4
  %3 = load i8, i8* %2, align 1
  %conv2 = sext i8 %3 to i32
  %and = and i32 -33, %conv2
  %sub = sub nsw i32 %and, 65
  %arrayidx = getelementptr inbounds [26 x i32], [26 x i32]* @digits, i32 0, i32 %sub
  %4 = load i32, i32* %arrayidx, align 4
  store i32 %4, i32* %current, align 4
  %5 = load i8*, i8** %roman.addr, align 4
  store i8* %5, i8** %bigger, align 4
  br label %while.cond3

while.cond3:                                      ; preds = %while.body13, %while.body
  %6 = load i8*, i8** %bigger, align 4
  %7 = load i8, i8* %6, align 1
  %conv4 = sext i8 %7 to i32
  %and5 = and i32 -33, %conv4
  %sub6 = sub nsw i32 %and5, 65
  %arrayidx7 = getelementptr inbounds [26 x i32], [26 x i32]* @digits, i32 0, i32 %sub6
  %8 = load i32, i32* %arrayidx7, align 4
  %9 = load i32, i32* %current, align 4
  %cmp8 = icmp sle i32 %8, %9
  br i1 %cmp8, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond3
  %10 = load i8*, i8** %bigger, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %10, i32 1
  store i8* %incdec.ptr, i8** %bigger, align 4
  %11 = load i8, i8* %incdec.ptr, align 1
  %conv10 = sext i8 %11 to i32
  %cmp11 = icmp ne i32 %conv10, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond3
  %12 = phi i1 [ false, %while.cond3 ], [ %cmp11, %land.rhs ]
  br i1 %12, label %while.body13, label %while.end

while.body13:                                     ; preds = %land.end
  br label %while.cond3

while.end:                                        ; preds = %land.end
  %13 = load i8*, i8** %bigger, align 4
  %14 = load i8, i8* %13, align 1
  %conv14 = sext i8 %14 to i32
  %cmp15 = icmp eq i32 %conv14, 0
  br i1 %cmp15, label %if.then, label %if.else

if.then:                                          ; preds = %while.end
  %15 = load i32, i32* %current, align 4
  %16 = load i32, i32* %arabic, align 4
  %add = add nsw i32 %16, %15
  store i32 %add, i32* %arabic, align 4
  br label %if.end

if.else:                                          ; preds = %while.end
  %17 = load i8*, i8** %bigger, align 4
  %18 = load i8, i8* %17, align 1
  %conv17 = sext i8 %18 to i32
  %and18 = and i32 -33, %conv17
  %sub19 = sub nsw i32 %and18, 65
  %arrayidx20 = getelementptr inbounds [26 x i32], [26 x i32]* @digits, i32 0, i32 %sub19
  %19 = load i32, i32* %arrayidx20, align 4
  %20 = load i32, i32* %arabic, align 4
  %add21 = add nsw i32 %20, %19
  store i32 %add21, i32* %arabic, align 4
  br label %while.cond22

while.cond22:                                     ; preds = %while.body25, %if.else
  %21 = load i8*, i8** %roman.addr, align 4
  %22 = load i8*, i8** %bigger, align 4
  %cmp23 = icmp ult i8* %21, %22
  br i1 %cmp23, label %while.body25, label %while.end32

while.body25:                                     ; preds = %while.cond22
  %23 = load i8*, i8** %roman.addr, align 4
  %incdec.ptr26 = getelementptr inbounds i8, i8* %23, i32 1
  store i8* %incdec.ptr26, i8** %roman.addr, align 4
  %24 = load i8, i8* %23, align 1
  %conv27 = sext i8 %24 to i32
  %and28 = and i32 -33, %conv27
  %sub29 = sub nsw i32 %and28, 65
  %arrayidx30 = getelementptr inbounds [26 x i32], [26 x i32]* @digits, i32 0, i32 %sub29
  %25 = load i32, i32* %arrayidx30, align 4
  %26 = load i32, i32* %arabic, align 4
  %sub31 = sub nsw i32 %26, %25
  store i32 %sub31, i32* %arabic, align 4
  br label %while.cond22

while.end32:                                      ; preds = %while.cond22
  br label %if.end

if.end:                                           ; preds = %while.end32, %if.then
  %27 = load i8*, i8** %roman.addr, align 4
  %incdec.ptr33 = getelementptr inbounds i8, i8* %27, i32 1
  store i8* %incdec.ptr33, i8** %roman.addr, align 4
  br label %while.cond

while.end34:                                      ; preds = %while.cond
  %28 = load i32, i32* %arabic, align 4
  ret i32 %28
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %romans = alloca [4 x i8*], align 16
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [4 x i8*]* %romans to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([4 x i8*]* @__const.main.romans to i8*), i32 16, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %1, 4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [4 x i8*], [4 x i8*]* %romans, i32 0, i32 %2
  %3 = load i8*, i8** %arrayidx, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [4 x i8*], [4 x i8*]* %romans, i32 0, i32 %4
  %5 = load i8*, i8** %arrayidx1, align 4
  %call = call i32 @decode(i8* %5)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i32 0, i32 0), i8* %3, i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #1

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %1, 4
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 4:i32
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 @decode(i8* %5)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %6, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 4:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
