
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for __main_argc_argv()

; ModuleID = './Sparkline_in_unicode.c.bc'
source_filename = "./Sparkline_in_unicode.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [55 x i8] c"Usage : %s <data points separated by spaces or commas>\00", align 1
@.str.1 = private unnamed_addr constant [35 x i8] c"\0A%Max : %lf,Min : %lf,Range : %lf\0A\00", align 1
@.str.2 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"%lc\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argC, i8** %argV) #0 {
entry:
  %retval = alloca i32, align 4
  %argC.addr = alloca i32, align 4
  %argV.addr = alloca i8**, align 4
  %arr = alloca double*, align 4
  %min = alloca double, align 8
  %max = alloca double, align 8
  %str = alloca i8*, align 4
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argC, i32* %argC.addr, align 4
  store i8** %argV, i8*** %argV.addr, align 4
  %0 = load i32, i32* %argC.addr, align 4
  %cmp = icmp eq i32 %0, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i8**, i8*** %argV.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 0
  %2 = load i8*, i8** %arrayidx, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i32 0, i32 0), i8* %2)
  br label %if.end66

if.else:                                          ; preds = %entry
  %3 = load i32, i32* %argC.addr, align 4
  %sub = sub nsw i32 %3, 1
  %mul = mul i32 %sub, 8
  %call1 = call noalias i8* @malloc(i32 %mul)
  %4 = bitcast i8* %call1 to double*
  store double* %4, double** %arr, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %argC.addr, align 4
  %cmp2 = icmp slt i32 %5, %6
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i8**, i8*** %argV.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i8*, i8** %7, i32 %8
  %9 = load i8*, i8** %arrayidx3, align 4
  %call4 = call i32 @strlen(i8* %9) #4
  store i32 %call4, i32* %len, align 4
  %10 = load i8**, i8*** %argV.addr, align 4
  %11 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds i8*, i8** %10, i32 %11
  %12 = load i8*, i8** %arrayidx5, align 4
  %13 = load i32, i32* %len, align 4
  %sub6 = sub nsw i32 %13, 1
  %arrayidx7 = getelementptr inbounds i8, i8* %12, i32 %sub6
  %14 = load i8, i8* %arrayidx7, align 1
  %conv = sext i8 %14 to i32
  %cmp8 = icmp eq i32 %conv, 44
  br i1 %cmp8, label %if.then10, label %if.else19

if.then10:                                        ; preds = %for.body
  %15 = load i32, i32* %len, align 4
  %mul11 = mul i32 %15, 1
  %call12 = call noalias i8* @malloc(i32 %mul11)
  store i8* %call12, i8** %str, align 4
  %16 = load i8*, i8** %str, align 4
  %17 = load i8**, i8*** %argV.addr, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds i8*, i8** %17, i32 %18
  %19 = load i8*, i8** %arrayidx13, align 4
  %20 = load i32, i32* %len, align 4
  %sub14 = sub nsw i32 %20, 1
  %call15 = call i8* @strncpy(i8* %16, i8* %19, i32 %sub14)
  %21 = load i8*, i8** %str, align 4
  %call16 = call double @atof(i8* %21)
  %22 = load double*, double** %arr, align 4
  %23 = load i32, i32* %i, align 4
  %sub17 = sub nsw i32 %23, 1
  %arrayidx18 = getelementptr inbounds double, double* %22, i32 %sub17
  store double %call16, double* %arrayidx18, align 8
  %24 = load i8*, i8** %str, align 4
  call void @free(i8* %24)
  br label %if.end

if.else19:                                        ; preds = %for.body
  %25 = load i8**, i8*** %argV.addr, align 4
  %26 = load i32, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds i8*, i8** %25, i32 %26
  %27 = load i8*, i8** %arrayidx20, align 4
  %call21 = call double @atof(i8* %27)
  %28 = load double*, double** %arr, align 4
  %29 = load i32, i32* %i, align 4
  %sub22 = sub nsw i32 %29, 1
  %arrayidx23 = getelementptr inbounds double, double* %28, i32 %sub22
  store double %call21, double* %arrayidx23, align 8
  br label %if.end

if.end:                                           ; preds = %if.else19, %if.then10
  %30 = load i32, i32* %i, align 4
  %cmp24 = icmp eq i32 %30, 1
  br i1 %cmp24, label %if.then26, label %if.else31

if.then26:                                        ; preds = %if.end
  %31 = load double*, double** %arr, align 4
  %32 = load i32, i32* %i, align 4
  %sub27 = sub nsw i32 %32, 1
  %arrayidx28 = getelementptr inbounds double, double* %31, i32 %sub27
  %33 = load double, double* %arrayidx28, align 8
  store double %33, double* %min, align 8
  %34 = load double*, double** %arr, align 4
  %35 = load i32, i32* %i, align 4
  %sub29 = sub nsw i32 %35, 1
  %arrayidx30 = getelementptr inbounds double, double* %34, i32 %sub29
  %36 = load double, double* %arrayidx30, align 8
  store double %36, double* %max, align 8
  br label %if.end48

if.else31:                                        ; preds = %if.end
  %37 = load double, double* %min, align 8
  %38 = load double*, double** %arr, align 4
  %39 = load i32, i32* %i, align 4
  %sub32 = sub nsw i32 %39, 1
  %arrayidx33 = getelementptr inbounds double, double* %38, i32 %sub32
  %40 = load double, double* %arrayidx33, align 8
  %cmp34 = fcmp olt double %37, %40
  br i1 %cmp34, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else31
  %41 = load double, double* %min, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.else31
  %42 = load double*, double** %arr, align 4
  %43 = load i32, i32* %i, align 4
  %sub36 = sub nsw i32 %43, 1
  %arrayidx37 = getelementptr inbounds double, double* %42, i32 %sub36
  %44 = load double, double* %arrayidx37, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ %41, %cond.true ], [ %44, %cond.false ]
  store double %cond, double* %min, align 8
  %45 = load double, double* %max, align 8
  %46 = load double*, double** %arr, align 4
  %47 = load i32, i32* %i, align 4
  %sub38 = sub nsw i32 %47, 1
  %arrayidx39 = getelementptr inbounds double, double* %46, i32 %sub38
  %48 = load double, double* %arrayidx39, align 8
  %cmp40 = fcmp ogt double %45, %48
  br i1 %cmp40, label %cond.true42, label %cond.false43

cond.true42:                                      ; preds = %cond.end
  %49 = load double, double* %max, align 8
  br label %cond.end46

cond.false43:                                     ; preds = %cond.end
  %50 = load double*, double** %arr, align 4
  %51 = load i32, i32* %i, align 4
  %sub44 = sub nsw i32 %51, 1
  %arrayidx45 = getelementptr inbounds double, double* %50, i32 %sub44
  %52 = load double, double* %arrayidx45, align 8
  br label %cond.end46

cond.end46:                                       ; preds = %cond.false43, %cond.true42
  %cond47 = phi double [ %49, %cond.true42 ], [ %52, %cond.false43 ]
  store double %cond47, double* %max, align 8
  br label %if.end48

if.end48:                                         ; preds = %cond.end46, %if.then26
  br label %for.inc

for.inc:                                          ; preds = %if.end48
  %53 = load i32, i32* %i, align 4
  %inc = add nsw i32 %53, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %54 = load double, double* %max, align 8
  %55 = load double, double* %min, align 8
  %56 = load double, double* %max, align 8
  %57 = load double, double* %min, align 8
  %sub49 = fsub double %56, %57
  %call50 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), double %54, double %55, double %sub49)
  %call51 = call i8* @setlocale(i32 6, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2, i32 0, i32 0))
  store i32 1, i32* %i, align 4
  br label %for.cond52

for.cond52:                                       ; preds = %for.inc63, %for.end
  %58 = load i32, i32* %i, align 4
  %59 = load i32, i32* %argC.addr, align 4
  %cmp53 = icmp slt i32 %58, %59
  br i1 %cmp53, label %for.body55, label %for.end65

for.body55:                                       ; preds = %for.cond52
  %60 = load double*, double** %arr, align 4
  %61 = load i32, i32* %i, align 4
  %sub56 = sub nsw i32 %61, 1
  %arrayidx57 = getelementptr inbounds double, double* %60, i32 %sub56
  %62 = load double, double* %arrayidx57, align 8
  %63 = load double, double* %min, align 8
  %sub58 = fsub double %62, %63
  %64 = load double, double* %max, align 8
  %65 = load double, double* %min, align 8
  %sub59 = fsub double %64, %65
  %div = fdiv double %sub58, %sub59
  %mul60 = fmul double %div, 7.000000e+00
  %66 = call double @llvm.ceil.f64(double %mul60)
  %conv61 = fptosi double %66 to i32
  %add = add nsw i32 9601, %conv61
  %call62 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i32 0, i32 0), i32 %add)
  br label %for.inc63

for.inc63:                                        ; preds = %for.body55
  %67 = load i32, i32* %i, align 4
  %inc64 = add nsw i32 %67, 1
  store i32 %inc64, i32* %i, align 4
  br label %for.cond52

for.end65:                                        ; preds = %for.cond52
  br label %if.end66

if.end66:                                         ; preds = %for.end65, %if.then
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

declare i8* @strncpy(i8* %0, i8* %1, i32 %2) #1

declare double @atof(i8* %0) #1

declare void @free(i8* %0) #1

declare i8* @setlocale(i32 %0, i8* %1) #1

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.ceil.f64(double %0) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable willreturn }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %argC.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %0, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %argC.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %3, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %mul = mul i32 %sub, 8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
%2:i32 = mul 8:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %argC.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp slt i32 %5, %6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call4 = call i32 @strlen(i8* %9) #4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub6 = sub nsw i32 %13, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %14 = load i8, i8* %arrayidx7, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %14 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp8 = icmp eq i32 %conv, 44
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 44:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul11 = mul i32 %15, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub14 = sub nsw i32 %20, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub17 = sub nsw i32 %23, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub22 = sub nsw i32 %29, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp24 = icmp eq i32 %30, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub27 = sub nsw i32 %32, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub29 = sub nsw i32 %35, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub32 = sub nsw i32 %39, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp34 = fcmp olt double %37, %40
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %43 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub36 = sub nsw i32 %43, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %47 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub38 = sub nsw i32 %47, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp40 = fcmp ogt double %45, %48
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %51 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub44 = sub nsw i32 %51, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %53 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %53, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %58 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %59 = load i32, i32* %argC.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp53 = icmp slt i32 %58, %59
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %61 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub56 = sub nsw i32 %61, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %conv61 = fptosi double %66 to i32
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 9601, %conv61
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 9601:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %67 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc64 = add nsw i32 %67, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
%2:i32 = mul 8:i32, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -8
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147483640
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = subnsw %0, 1:i32

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 44:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mul 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is UNSAT
Dataflow Pruned 0/0
There are 2 Guesses
There are 1 RHSs before deduplication
There are 1 RHSs after deduplication
"
; No valid RHS in the list
#########################################################

Module before replacement:
; ModuleID = './Sparkline_in_unicode.c.bc'
source_filename = "./Sparkline_in_unicode.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [55 x i8] c"Usage : %s <data points separated by spaces or commas>\00", align 1
@.str.1 = private unnamed_addr constant [35 x i8] c"\0A%Max : %lf,Min : %lf,Range : %lf\0A\00", align 1
@.str.2 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"%lc\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argC, i8** %argV) #0 {
entry:
  %retval = alloca i32, align 4
  %argC.addr = alloca i32, align 4
  %argV.addr = alloca i8**, align 4
  %arr = alloca double*, align 4
  %min = alloca double, align 8
  %max = alloca double, align 8
  %str = alloca i8*, align 4
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argC, i32* %argC.addr, align 4
  store i8** %argV, i8*** %argV.addr, align 4
  %0 = load i32, i32* %argC.addr, align 4
  %cmp = icmp eq i32 %0, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i8**, i8*** %argV.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 0
  %2 = load i8*, i8** %arrayidx, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i32 0, i32 0), i8* %2)
  br label %if.end66

if.else:                                          ; preds = %entry
  %3 = load i32, i32* %argC.addr, align 4
  %sub = sub nsw i32 %3, 1
  %mul = mul i32 %sub, 8
  %call1 = call noalias i8* @malloc(i32 %mul)
  %4 = bitcast i8* %call1 to double*
  store double* %4, double** %arr, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %argC.addr, align 4
  %cmp2 = icmp slt i32 %5, %6
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i8**, i8*** %argV.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i8*, i8** %7, i32 %8
  %9 = load i8*, i8** %arrayidx3, align 4
  %call4 = call i32 @strlen(i8* %9) #4
  store i32 %call4, i32* %len, align 4
  %10 = load i8**, i8*** %argV.addr, align 4
  %11 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds i8*, i8** %10, i32 %11
  %12 = load i8*, i8** %arrayidx5, align 4
  %13 = load i32, i32* %len, align 4
  %sub6 = sub nsw i32 %13, 1
  %arrayidx7 = getelementptr inbounds i8, i8* %12, i32 %sub6
  %14 = load i8, i8* %arrayidx7, align 1
  %conv = sext i8 %14 to i32
  %cmp8 = icmp eq i32 %conv, 44
  br i1 %cmp8, label %if.then10, label %if.else19

if.then10:                                        ; preds = %for.body
  %15 = load i32, i32* %len, align 4
  %mul11 = mul i32 %15, 1
  %call12 = call noalias i8* @malloc(i32 %mul11)
  store i8* %call12, i8** %str, align 4
  %16 = load i8*, i8** %str, align 4
  %17 = load i8**, i8*** %argV.addr, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds i8*, i8** %17, i32 %18
  %19 = load i8*, i8** %arrayidx13, align 4
  %20 = load i32, i32* %len, align 4
  %sub14 = sub nsw i32 %20, 1
  %call15 = call i8* @strncpy(i8* %16, i8* %19, i32 %sub14)
  %21 = load i8*, i8** %str, align 4
  %call16 = call double @atof(i8* %21)
  %22 = load double*, double** %arr, align 4
  %23 = load i32, i32* %i, align 4
  %sub17 = sub nsw i32 %23, 1
  %arrayidx18 = getelementptr inbounds double, double* %22, i32 %sub17
  store double %call16, double* %arrayidx18, align 8
  %24 = load i8*, i8** %str, align 4
  call void @free(i8* %24)
  br label %if.end

if.else19:                                        ; preds = %for.body
  %25 = load i8**, i8*** %argV.addr, align 4
  %26 = load i32, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds i8*, i8** %25, i32 %26
  %27 = load i8*, i8** %arrayidx20, align 4
  %call21 = call double @atof(i8* %27)
  %28 = load double*, double** %arr, align 4
  %29 = load i32, i32* %i, align 4
  %sub22 = sub nsw i32 %29, 1
  %arrayidx23 = getelementptr inbounds double, double* %28, i32 %sub22
  store double %call21, double* %arrayidx23, align 8
  br label %if.end

if.end:                                           ; preds = %if.else19, %if.then10
  %30 = load i32, i32* %i, align 4
  %cmp24 = icmp eq i32 %30, 1
  br i1 %cmp24, label %if.then26, label %if.else31

if.then26:                                        ; preds = %if.end
  %31 = load double*, double** %arr, align 4
  %32 = load i32, i32* %i, align 4
  %sub27 = sub nsw i32 %32, 1
  %arrayidx28 = getelementptr inbounds double, double* %31, i32 %sub27
  %33 = load double, double* %arrayidx28, align 8
  store double %33, double* %min, align 8
  %34 = load double*, double** %arr, align 4
  %35 = load i32, i32* %i, align 4
  %sub29 = sub nsw i32 %35, 1
  %arrayidx30 = getelementptr inbounds double, double* %34, i32 %sub29
  %36 = load double, double* %arrayidx30, align 8
  store double %36, double* %max, align 8
  br label %if.end48

if.else31:                                        ; preds = %if.end
  %37 = load double, double* %min, align 8
  %38 = load double*, double** %arr, align 4
  %39 = load i32, i32* %i, align 4
  %sub32 = sub nsw i32 %39, 1
  %arrayidx33 = getelementptr inbounds double, double* %38, i32 %sub32
  %40 = load double, double* %arrayidx33, align 8
  %cmp34 = fcmp olt double %37, %40
  br i1 %cmp34, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else31
  %41 = load double, double* %min, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.else31
  %42 = load double*, double** %arr, align 4
  %43 = load i32, i32* %i, align 4
  %sub36 = sub nsw i32 %43, 1
  %arrayidx37 = getelementptr inbounds double, double* %42, i32 %sub36
  %44 = load double, double* %arrayidx37, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ %41, %cond.true ], [ %44, %cond.false ]
  store double %cond, double* %min, align 8
  %45 = load double, double* %max, align 8
  %46 = load double*, double** %arr, align 4
  %47 = load i32, i32* %i, align 4
  %sub38 = sub nsw i32 %47, 1
  %arrayidx39 = getelementptr inbounds double, double* %46, i32 %sub38
  %48 = load double, double* %arrayidx39, align 8
  %cmp40 = fcmp ogt double %45, %48
  br i1 %cmp40, label %cond.true42, label %cond.false43

cond.true42:                                      ; preds = %cond.end
  %49 = load double, double* %max, align 8
  br label %cond.end46

cond.false43:                                     ; preds = %cond.end
  %50 = load double*, double** %arr, align 4
  %51 = load i32, i32* %i, align 4
  %sub44 = sub nsw i32 %51, 1
  %arrayidx45 = getelementptr inbounds double, double* %50, i32 %sub44
  %52 = load double, double* %arrayidx45, align 8
  br label %cond.end46

cond.end46:                                       ; preds = %cond.false43, %cond.true42
  %cond47 = phi double [ %49, %cond.true42 ], [ %52, %cond.false43 ]
  store double %cond47, double* %max, align 8
  br label %if.end48

if.end48:                                         ; preds = %cond.end46, %if.then26
  br label %for.inc

for.inc:                                          ; preds = %if.end48
  %53 = load i32, i32* %i, align 4
  %inc = add nsw i32 %53, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %54 = load double, double* %max, align 8
  %55 = load double, double* %min, align 8
  %56 = load double, double* %max, align 8
  %57 = load double, double* %min, align 8
  %sub49 = fsub double %56, %57
  %call50 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), double %54, double %55, double %sub49)
  %call51 = call i8* @setlocale(i32 6, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2, i32 0, i32 0))
  store i32 1, i32* %i, align 4
  br label %for.cond52

for.cond52:                                       ; preds = %for.inc63, %for.end
  %58 = load i32, i32* %i, align 4
  %59 = load i32, i32* %argC.addr, align 4
  %cmp53 = icmp slt i32 %58, %59
  br i1 %cmp53, label %for.body55, label %for.end65

for.body55:                                       ; preds = %for.cond52
  %60 = load double*, double** %arr, align 4
  %61 = load i32, i32* %i, align 4
  %sub56 = sub nsw i32 %61, 1
  %arrayidx57 = getelementptr inbounds double, double* %60, i32 %sub56
  %62 = load double, double* %arrayidx57, align 8
  %63 = load double, double* %min, align 8
  %sub58 = fsub double %62, %63
  %64 = load double, double* %max, align 8
  %65 = load double, double* %min, align 8
  %sub59 = fsub double %64, %65
  %div = fdiv double %sub58, %sub59
  %mul60 = fmul double %div, 7.000000e+00
  %66 = call double @llvm.ceil.f64(double %mul60)
  %conv61 = fptosi double %66 to i32
  %add = add nsw i32 9601, %conv61
  %call62 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i32 0, i32 0), i32 %add)
  br label %for.inc63

for.inc63:                                        ; preds = %for.body55
  %67 = load i32, i32* %i, align 4
  %inc64 = add nsw i32 %67, 1
  store i32 %inc64, i32* %i, align 4
  br label %for.cond52

for.end65:                                        ; preds = %for.cond52
  br label %if.end66

if.end66:                                         ; preds = %for.end65, %if.then
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

declare i8* @strncpy(i8* %0, i8* %1, i32 %2) #1

declare double @atof(i8* %0) #1

declare void @free(i8* %0) #1

declare i8* @setlocale(i32 %0, i8* %1) #1

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.ceil.f64(double %0) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable willreturn }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; Replacing "  %mul11 = mul i32 %15, 1"
; from ""
; with "  %15 = load i32, i32* %len, align 4" in:
"%0:i32 = var
%1:i32 = mul 1:i32, %0
cand %1 %0
"
; with "  %15 = load i32, i32* %len, align 4"

Module after replacement:
; ModuleID = './Sparkline_in_unicode.c.bc'
source_filename = "./Sparkline_in_unicode.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [55 x i8] c"Usage : %s <data points separated by spaces or commas>\00", align 1
@.str.1 = private unnamed_addr constant [35 x i8] c"\0A%Max : %lf,Min : %lf,Range : %lf\0A\00", align 1
@.str.2 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"%lc\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argC, i8** %argV) #0 {
entry:
  %retval = alloca i32, align 4
  %argC.addr = alloca i32, align 4
  %argV.addr = alloca i8**, align 4
  %arr = alloca double*, align 4
  %min = alloca double, align 8
  %max = alloca double, align 8
  %str = alloca i8*, align 4
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argC, i32* %argC.addr, align 4
  store i8** %argV, i8*** %argV.addr, align 4
  %0 = load i32, i32* %argC.addr, align 4
  %cmp = icmp eq i32 %0, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i8**, i8*** %argV.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 0
  %2 = load i8*, i8** %arrayidx, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i32 0, i32 0), i8* %2)
  br label %if.end66

if.else:                                          ; preds = %entry
  %3 = load i32, i32* %argC.addr, align 4
  %sub = sub nsw i32 %3, 1
  %mul = mul i32 %sub, 8
  %call1 = call noalias i8* @malloc(i32 %mul)
  %4 = bitcast i8* %call1 to double*
  store double* %4, double** %arr, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %argC.addr, align 4
  %cmp2 = icmp slt i32 %5, %6
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i8**, i8*** %argV.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i8*, i8** %7, i32 %8
  %9 = load i8*, i8** %arrayidx3, align 4
  %call4 = call i32 @strlen(i8* %9) #4
  store i32 %call4, i32* %len, align 4
  %10 = load i8**, i8*** %argV.addr, align 4
  %11 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds i8*, i8** %10, i32 %11
  %12 = load i8*, i8** %arrayidx5, align 4
  %13 = load i32, i32* %len, align 4
  %sub6 = sub nsw i32 %13, 1
  %arrayidx7 = getelementptr inbounds i8, i8* %12, i32 %sub6
  %14 = load i8, i8* %arrayidx7, align 1
  %conv = sext i8 %14 to i32
  %cmp8 = icmp eq i32 %conv, 44
  br i1 %cmp8, label %if.then10, label %if.else19

if.then10:                                        ; preds = %for.body
  %15 = load i32, i32* %len, align 4
  %call12 = call noalias i8* @malloc(i32 %15)
  store i8* %call12, i8** %str, align 4
  %16 = load i8*, i8** %str, align 4
  %17 = load i8**, i8*** %argV.addr, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds i8*, i8** %17, i32 %18
  %19 = load i8*, i8** %arrayidx13, align 4
  %20 = load i32, i32* %len, align 4
  %sub14 = sub nsw i32 %20, 1
  %call15 = call i8* @strncpy(i8* %16, i8* %19, i32 %sub14)
  %21 = load i8*, i8** %str, align 4
  %call16 = call double @atof(i8* %21)
  %22 = load double*, double** %arr, align 4
  %23 = load i32, i32* %i, align 4
  %sub17 = sub nsw i32 %23, 1
  %arrayidx18 = getelementptr inbounds double, double* %22, i32 %sub17
  store double %call16, double* %arrayidx18, align 8
  %24 = load i8*, i8** %str, align 4
  call void @free(i8* %24)
  br label %if.end

if.else19:                                        ; preds = %for.body
  %25 = load i8**, i8*** %argV.addr, align 4
  %26 = load i32, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds i8*, i8** %25, i32 %26
  %27 = load i8*, i8** %arrayidx20, align 4
  %call21 = call double @atof(i8* %27)
  %28 = load double*, double** %arr, align 4
  %29 = load i32, i32* %i, align 4
  %sub22 = sub nsw i32 %29, 1
  %arrayidx23 = getelementptr inbounds double, double* %28, i32 %sub22
  store double %call21, double* %arrayidx23, align 8
  br label %if.end

if.end:                                           ; preds = %if.else19, %if.then10
  %30 = load i32, i32* %i, align 4
  %cmp24 = icmp eq i32 %30, 1
  br i1 %cmp24, label %if.then26, label %if.else31

if.then26:                                        ; preds = %if.end
  %31 = load double*, double** %arr, align 4
  %32 = load i32, i32* %i, align 4
  %sub27 = sub nsw i32 %32, 1
  %arrayidx28 = getelementptr inbounds double, double* %31, i32 %sub27
  %33 = load double, double* %arrayidx28, align 8
  store double %33, double* %min, align 8
  %34 = load double*, double** %arr, align 4
  %35 = load i32, i32* %i, align 4
  %sub29 = sub nsw i32 %35, 1
  %arrayidx30 = getelementptr inbounds double, double* %34, i32 %sub29
  %36 = load double, double* %arrayidx30, align 8
  store double %36, double* %max, align 8
  br label %if.end48

if.else31:                                        ; preds = %if.end
  %37 = load double, double* %min, align 8
  %38 = load double*, double** %arr, align 4
  %39 = load i32, i32* %i, align 4
  %sub32 = sub nsw i32 %39, 1
  %arrayidx33 = getelementptr inbounds double, double* %38, i32 %sub32
  %40 = load double, double* %arrayidx33, align 8
  %cmp34 = fcmp olt double %37, %40
  br i1 %cmp34, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else31
  %41 = load double, double* %min, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.else31
  %42 = load double*, double** %arr, align 4
  %43 = load i32, i32* %i, align 4
  %sub36 = sub nsw i32 %43, 1
  %arrayidx37 = getelementptr inbounds double, double* %42, i32 %sub36
  %44 = load double, double* %arrayidx37, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ %41, %cond.true ], [ %44, %cond.false ]
  store double %cond, double* %min, align 8
  %45 = load double, double* %max, align 8
  %46 = load double*, double** %arr, align 4
  %47 = load i32, i32* %i, align 4
  %sub38 = sub nsw i32 %47, 1
  %arrayidx39 = getelementptr inbounds double, double* %46, i32 %sub38
  %48 = load double, double* %arrayidx39, align 8
  %cmp40 = fcmp ogt double %45, %48
  br i1 %cmp40, label %cond.true42, label %cond.false43

cond.true42:                                      ; preds = %cond.end
  %49 = load double, double* %max, align 8
  br label %cond.end46

cond.false43:                                     ; preds = %cond.end
  %50 = load double*, double** %arr, align 4
  %51 = load i32, i32* %i, align 4
  %sub44 = sub nsw i32 %51, 1
  %arrayidx45 = getelementptr inbounds double, double* %50, i32 %sub44
  %52 = load double, double* %arrayidx45, align 8
  br label %cond.end46

cond.end46:                                       ; preds = %cond.false43, %cond.true42
  %cond47 = phi double [ %49, %cond.true42 ], [ %52, %cond.false43 ]
  store double %cond47, double* %max, align 8
  br label %if.end48

if.end48:                                         ; preds = %cond.end46, %if.then26
  br label %for.inc

for.inc:                                          ; preds = %if.end48
  %53 = load i32, i32* %i, align 4
  %inc = add nsw i32 %53, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %54 = load double, double* %max, align 8
  %55 = load double, double* %min, align 8
  %56 = load double, double* %max, align 8
  %57 = load double, double* %min, align 8
  %sub49 = fsub double %56, %57
  %call50 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), double %54, double %55, double %sub49)
  %call51 = call i8* @setlocale(i32 6, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2, i32 0, i32 0))
  store i32 1, i32* %i, align 4
  br label %for.cond52

for.cond52:                                       ; preds = %for.inc63, %for.end
  %58 = load i32, i32* %i, align 4
  %59 = load i32, i32* %argC.addr, align 4
  %cmp53 = icmp slt i32 %58, %59
  br i1 %cmp53, label %for.body55, label %for.end65

for.body55:                                       ; preds = %for.cond52
  %60 = load double*, double** %arr, align 4
  %61 = load i32, i32* %i, align 4
  %sub56 = sub nsw i32 %61, 1
  %arrayidx57 = getelementptr inbounds double, double* %60, i32 %sub56
  %62 = load double, double* %arrayidx57, align 8
  %63 = load double, double* %min, align 8
  %sub58 = fsub double %62, %63
  %64 = load double, double* %max, align 8
  %65 = load double, double* %min, align 8
  %sub59 = fsub double %64, %65
  %div = fdiv double %sub58, %sub59
  %mul60 = fmul double %div, 7.000000e+00
  %66 = call double @llvm.ceil.f64(double %mul60)
  %conv61 = fptosi double %66 to i32
  %add = add nsw i32 9601, %conv61
  %call62 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i32 0, i32 0), i32 %add)
  br label %for.inc63

for.inc63:                                        ; preds = %for.body55
  %67 = load i32, i32* %i, align 4
  %inc64 = add nsw i32 %67, 1
  store i32 %inc64, i32* %i, align 4
  br label %for.cond52

for.end65:                                        ; preds = %for.cond52
  br label %if.end66

if.end66:                                         ; preds = %for.end65, %if.then
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

declare i8* @strncpy(i8* %0, i8* %1, i32 %2) #1

declare double @atof(i8* %0) #1

declare void @free(i8* %0) #1

declare i8* @setlocale(i32 %0, i8* %1) #1

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.ceil.f64(double %0) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable willreturn }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

#########################################################
; exiting Souper's runOnFunction() for __main_argc_argv()
rescanning function after transformation was applied

; entering Souper's runOnFunction() for __main_argc_argv()

; ModuleID = './Sparkline_in_unicode.c.bc'
source_filename = "./Sparkline_in_unicode.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [55 x i8] c"Usage : %s <data points separated by spaces or commas>\00", align 1
@.str.1 = private unnamed_addr constant [35 x i8] c"\0A%Max : %lf,Min : %lf,Range : %lf\0A\00", align 1
@.str.2 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"%lc\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argC, i8** %argV) #0 {
entry:
  %retval = alloca i32, align 4
  %argC.addr = alloca i32, align 4
  %argV.addr = alloca i8**, align 4
  %arr = alloca double*, align 4
  %min = alloca double, align 8
  %max = alloca double, align 8
  %str = alloca i8*, align 4
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argC, i32* %argC.addr, align 4
  store i8** %argV, i8*** %argV.addr, align 4
  %0 = load i32, i32* %argC.addr, align 4
  %cmp = icmp eq i32 %0, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i8**, i8*** %argV.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 0
  %2 = load i8*, i8** %arrayidx, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i32 0, i32 0), i8* %2)
  br label %if.end66

if.else:                                          ; preds = %entry
  %3 = load i32, i32* %argC.addr, align 4
  %sub = sub nsw i32 %3, 1
  %mul = mul i32 %sub, 8
  %call1 = call noalias i8* @malloc(i32 %mul)
  %4 = bitcast i8* %call1 to double*
  store double* %4, double** %arr, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %argC.addr, align 4
  %cmp2 = icmp slt i32 %5, %6
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i8**, i8*** %argV.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i8*, i8** %7, i32 %8
  %9 = load i8*, i8** %arrayidx3, align 4
  %call4 = call i32 @strlen(i8* %9) #4
  store i32 %call4, i32* %len, align 4
  %10 = load i8**, i8*** %argV.addr, align 4
  %11 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds i8*, i8** %10, i32 %11
  %12 = load i8*, i8** %arrayidx5, align 4
  %13 = load i32, i32* %len, align 4
  %sub6 = sub nsw i32 %13, 1
  %arrayidx7 = getelementptr inbounds i8, i8* %12, i32 %sub6
  %14 = load i8, i8* %arrayidx7, align 1
  %conv = sext i8 %14 to i32
  %cmp8 = icmp eq i32 %conv, 44
  br i1 %cmp8, label %if.then10, label %if.else19

if.then10:                                        ; preds = %for.body
  %15 = load i32, i32* %len, align 4
  %call12 = call noalias i8* @malloc(i32 %15)
  store i8* %call12, i8** %str, align 4
  %16 = load i8*, i8** %str, align 4
  %17 = load i8**, i8*** %argV.addr, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds i8*, i8** %17, i32 %18
  %19 = load i8*, i8** %arrayidx13, align 4
  %20 = load i32, i32* %len, align 4
  %sub14 = sub nsw i32 %20, 1
  %call15 = call i8* @strncpy(i8* %16, i8* %19, i32 %sub14)
  %21 = load i8*, i8** %str, align 4
  %call16 = call double @atof(i8* %21)
  %22 = load double*, double** %arr, align 4
  %23 = load i32, i32* %i, align 4
  %sub17 = sub nsw i32 %23, 1
  %arrayidx18 = getelementptr inbounds double, double* %22, i32 %sub17
  store double %call16, double* %arrayidx18, align 8
  %24 = load i8*, i8** %str, align 4
  call void @free(i8* %24)
  br label %if.end

if.else19:                                        ; preds = %for.body
  %25 = load i8**, i8*** %argV.addr, align 4
  %26 = load i32, i32* %i, align 4
  %arrayidx20 = getelementptr inbounds i8*, i8** %25, i32 %26
  %27 = load i8*, i8** %arrayidx20, align 4
  %call21 = call double @atof(i8* %27)
  %28 = load double*, double** %arr, align 4
  %29 = load i32, i32* %i, align 4
  %sub22 = sub nsw i32 %29, 1
  %arrayidx23 = getelementptr inbounds double, double* %28, i32 %sub22
  store double %call21, double* %arrayidx23, align 8
  br label %if.end

if.end:                                           ; preds = %if.else19, %if.then10
  %30 = load i32, i32* %i, align 4
  %cmp24 = icmp eq i32 %30, 1
  br i1 %cmp24, label %if.then26, label %if.else31

if.then26:                                        ; preds = %if.end
  %31 = load double*, double** %arr, align 4
  %32 = load i32, i32* %i, align 4
  %sub27 = sub nsw i32 %32, 1
  %arrayidx28 = getelementptr inbounds double, double* %31, i32 %sub27
  %33 = load double, double* %arrayidx28, align 8
  store double %33, double* %min, align 8
  %34 = load double*, double** %arr, align 4
  %35 = load i32, i32* %i, align 4
  %sub29 = sub nsw i32 %35, 1
  %arrayidx30 = getelementptr inbounds double, double* %34, i32 %sub29
  %36 = load double, double* %arrayidx30, align 8
  store double %36, double* %max, align 8
  br label %if.end48

if.else31:                                        ; preds = %if.end
  %37 = load double, double* %min, align 8
  %38 = load double*, double** %arr, align 4
  %39 = load i32, i32* %i, align 4
  %sub32 = sub nsw i32 %39, 1
  %arrayidx33 = getelementptr inbounds double, double* %38, i32 %sub32
  %40 = load double, double* %arrayidx33, align 8
  %cmp34 = fcmp olt double %37, %40
  br i1 %cmp34, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else31
  %41 = load double, double* %min, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.else31
  %42 = load double*, double** %arr, align 4
  %43 = load i32, i32* %i, align 4
  %sub36 = sub nsw i32 %43, 1
  %arrayidx37 = getelementptr inbounds double, double* %42, i32 %sub36
  %44 = load double, double* %arrayidx37, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ %41, %cond.true ], [ %44, %cond.false ]
  store double %cond, double* %min, align 8
  %45 = load double, double* %max, align 8
  %46 = load double*, double** %arr, align 4
  %47 = load i32, i32* %i, align 4
  %sub38 = sub nsw i32 %47, 1
  %arrayidx39 = getelementptr inbounds double, double* %46, i32 %sub38
  %48 = load double, double* %arrayidx39, align 8
  %cmp40 = fcmp ogt double %45, %48
  br i1 %cmp40, label %cond.true42, label %cond.false43

cond.true42:                                      ; preds = %cond.end
  %49 = load double, double* %max, align 8
  br label %cond.end46

cond.false43:                                     ; preds = %cond.end
  %50 = load double*, double** %arr, align 4
  %51 = load i32, i32* %i, align 4
  %sub44 = sub nsw i32 %51, 1
  %arrayidx45 = getelementptr inbounds double, double* %50, i32 %sub44
  %52 = load double, double* %arrayidx45, align 8
  br label %cond.end46

cond.end46:                                       ; preds = %cond.false43, %cond.true42
  %cond47 = phi double [ %49, %cond.true42 ], [ %52, %cond.false43 ]
  store double %cond47, double* %max, align 8
  br label %if.end48

if.end48:                                         ; preds = %cond.end46, %if.then26
  br label %for.inc

for.inc:                                          ; preds = %if.end48
  %53 = load i32, i32* %i, align 4
  %inc = add nsw i32 %53, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %54 = load double, double* %max, align 8
  %55 = load double, double* %min, align 8
  %56 = load double, double* %max, align 8
  %57 = load double, double* %min, align 8
  %sub49 = fsub double %56, %57
  %call50 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i32 0, i32 0), double %54, double %55, double %sub49)
  %call51 = call i8* @setlocale(i32 6, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2, i32 0, i32 0))
  store i32 1, i32* %i, align 4
  br label %for.cond52

for.cond52:                                       ; preds = %for.inc63, %for.end
  %58 = load i32, i32* %i, align 4
  %59 = load i32, i32* %argC.addr, align 4
  %cmp53 = icmp slt i32 %58, %59
  br i1 %cmp53, label %for.body55, label %for.end65

for.body55:                                       ; preds = %for.cond52
  %60 = load double*, double** %arr, align 4
  %61 = load i32, i32* %i, align 4
  %sub56 = sub nsw i32 %61, 1
  %arrayidx57 = getelementptr inbounds double, double* %60, i32 %sub56
  %62 = load double, double* %arrayidx57, align 8
  %63 = load double, double* %min, align 8
  %sub58 = fsub double %62, %63
  %64 = load double, double* %max, align 8
  %65 = load double, double* %min, align 8
  %sub59 = fsub double %64, %65
  %div = fdiv double %sub58, %sub59
  %mul60 = fmul double %div, 7.000000e+00
  %66 = call double @llvm.ceil.f64(double %mul60)
  %conv61 = fptosi double %66 to i32
  %add = add nsw i32 9601, %conv61
  %call62 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i32 0, i32 0), i32 %add)
  br label %for.inc63

for.inc63:                                        ; preds = %for.body55
  %67 = load i32, i32* %i, align 4
  %inc64 = add nsw i32 %67, 1
  store i32 %inc64, i32* %i, align 4
  br label %for.cond52

for.end65:                                        ; preds = %for.cond52
  br label %if.end66

if.end66:                                         ; preds = %for.end65, %if.then
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: nounwind readonly
declare i32 @strlen(i8* %0) #2

declare i8* @strncpy(i8* %0, i8* %1, i32 %2) #1

declare double @atof(i8* %0) #1

declare void @free(i8* %0) #1

declare i8* @setlocale(i32 %0, i8* %1) #1

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.ceil.f64(double %0) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable willreturn }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %argC.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %0, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %argC.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %3, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %mul = mul i32 %sub, 8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
%2:i32 = mul 8:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %argC.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp slt i32 %5, %6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call4 = call i32 @strlen(i8* %9) #4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub6 = sub nsw i32 %13, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %14 = load i8, i8* %arrayidx7, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %14 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp8 = icmp eq i32 %conv, 44
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 44:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub14 = sub nsw i32 %20, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub17 = sub nsw i32 %23, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub22 = sub nsw i32 %29, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp24 = icmp eq i32 %30, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub27 = sub nsw i32 %32, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub29 = sub nsw i32 %35, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub32 = sub nsw i32 %39, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp34 = fcmp olt double %37, %40
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %43 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub36 = sub nsw i32 %43, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %47 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub38 = sub nsw i32 %47, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp40 = fcmp ogt double %45, %48
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %51 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub44 = sub nsw i32 %51, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %53 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %53, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %58 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %59 = load i32, i32* %argC.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp53 = icmp slt i32 %58, %59
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %61 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub56 = sub nsw i32 %61, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %conv61 = fptosi double %66 to i32
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 9601, %conv61
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 9601:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %67 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc64 = add nsw i32 %67, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 9601:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 9601
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536880513
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for __main_argc_argv()
Total of 1 replacements done on this module
Total of 1 replacements candidates on this module
