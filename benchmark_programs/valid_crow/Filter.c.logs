
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for even_sel()

; ModuleID = './Filter.c.bc'
source_filename = "./Filter.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@__const.main.in = private unnamed_addr constant [10 x i32] [i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10], align 16
@.str = private unnamed_addr constant [15 x i8] c"Filtered even:\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c" %d\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.3 = private unnamed_addr constant [37 x i8] c"In-place filtered not multiple of 3:\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @even_sel(i32 %x) #0 {
entry:
  %x.addr = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  %0 = load i32, i32* %x.addr, align 4
  %and = and i32 %0, 1
  %tobool = icmp ne i32 %and, 0
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  ret i32 %lnot.ext
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @tri_sel(i32 %x) #0 {
entry:
  %x.addr = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  %0 = load i32, i32* %x.addr, align 4
  %rem = srem i32 %0, 3
  ret i32 %rem
}

; Function Attrs: noinline nounwind optnone
define hidden i32* @grep(i32* %in, i32 %len, i32* %outlen, i32 (i32)* %sel, i32 %inplace) #0 {
entry:
  %in.addr = alloca i32*, align 4
  %len.addr = alloca i32, align 4
  %outlen.addr = alloca i32*, align 4
  %sel.addr = alloca i32 (i32)*, align 4
  %inplace.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %out = alloca i32*, align 4
  store i32* %in, i32** %in.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32* %outlen, i32** %outlen.addr, align 4
  store i32 (i32)* %sel, i32 (i32)** %sel.addr, align 4
  store i32 %inplace, i32* %inplace.addr, align 4
  %0 = load i32, i32* %inplace.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i32*, i32** %in.addr, align 4
  store i32* %1, i32** %out, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %2 = load i32, i32* %len.addr, align 4
  %mul = mul i32 4, %2
  %call = call noalias i8* @malloc(i32 %mul)
  %3 = bitcast i8* %call to i32*
  store i32* %3, i32** %out, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32 (i32)*, i32 (i32)** %sel.addr, align 4
  %7 = load i32*, i32** %in.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %7, i32 %8
  %9 = load i32, i32* %arrayidx, align 4
  %call1 = call i32 %6(i32 %9)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.then3, label %if.end6

if.then3:                                         ; preds = %for.body
  %10 = load i32*, i32** %in.addr, align 4
  %11 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %10, i32 %11
  %12 = load i32, i32* %arrayidx4, align 4
  %13 = load i32*, i32** %out, align 4
  %14 = load i32, i32* %j, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %13, i32 %14
  store i32 %12, i32* %arrayidx5, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.then3, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end6
  %15 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %15, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %16 = load i32, i32* %inplace.addr, align 4
  %tobool8 = icmp ne i32 %16, 0
  br i1 %tobool8, label %if.end13, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.end
  %17 = load i32, i32* %j, align 4
  %18 = load i32, i32* %len.addr, align 4
  %cmp9 = icmp slt i32 %17, %18
  br i1 %cmp9, label %if.then10, label %if.end13

if.then10:                                        ; preds = %land.lhs.true
  %19 = load i32*, i32** %out, align 4
  %20 = bitcast i32* %19 to i8*
  %21 = load i32, i32* %j, align 4
  %mul11 = mul i32 4, %21
  %call12 = call i8* @realloc(i8* %20, i32 %mul11)
  %22 = bitcast i8* %call12 to i32*
  store i32* %22, i32** %out, align 4
  br label %if.end13

if.end13:                                         ; preds = %if.then10, %land.lhs.true, %for.end
  %23 = load i32, i32* %j, align 4
  %24 = load i32*, i32** %outlen.addr, align 4
  store i32 %23, i32* %24, align 4
  %25 = load i32*, i32** %out, align 4
  ret i32* %25
}

declare noalias i8* @malloc(i32 %0) #1

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %in = alloca [10 x i32], align 16
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  %even = alloca i32*, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [10 x i32]* %in to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([10 x i32]* @__const.main.in to i8*), i32 40, i1 false)
  %arraydecay = getelementptr inbounds [10 x i32], [10 x i32]* %in, i32 0, i32 0
  %call = call i32* @grep(i32* %arraydecay, i32 10, i32* %len, i32 (i32)* @even_sel, i32 0)
  store i32* %call, i32** %even, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %len, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32*, i32** %even, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %3, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %5)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %arraydecay4 = getelementptr inbounds [10 x i32], [10 x i32]* %in, i32 0, i32 0
  %call5 = call i32* @grep(i32* %arraydecay4, i32 8, i32* %len, i32 (i32)* @tri_sel, i32 1)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.3, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc12, %for.end
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %len, align 4
  %cmp8 = icmp slt i32 %7, %8
  br i1 %cmp8, label %for.body9, label %for.end14

for.body9:                                        ; preds = %for.cond7
  %9 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds [10 x i32], [10 x i32]* %in, i32 0, i32 %9
  %10 = load i32, i32* %arrayidx10, align 4
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %10)
  br label %for.inc12

for.inc12:                                        ; preds = %for.body9
  %11 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %11, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond7

for.end14:                                        ; preds = %for.cond7
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %x.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00000000000000000000000000000001)

; *****
; For LLVM instruction:
;  %and = and i32 %0, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %and, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 1:i32, %0
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %lnot = xor i1 %tobool, true
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 1:i32, %0
%2:i1 = ne 0:i32, %1
%3:i1 = xor 1:i1, %2
infer %3

; *****
; For LLVM instruction:
;  %lnot.ext = zext i1 %lnot to i32
; Looking for a replacement for:
%0:i32 = var
%1:i32 = and 1:i32, %0
%2:i1 = ne 0:i32, %1
%3:i1 = xor 1:i1, %2
%4:i32 = zext %3
infer %4
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0 (demandedBits=00000000000000000000000000000001)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = and 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = and 1:i32, %0
%2:i1 = ne 0:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = and 1:i32, %0
%2:i1 = ne 0:i32, %1
%3:i1 = xor 1:i1, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var
%1:i32 = and 1:i32, %0
%2:i1 = ne 0:i32, %1

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = and 1:i32, %0
%2:i1 = ne 0:i32, %1
%3:i1 = xor 1:i1, %2
%4:i32 = zext %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = and 1:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for even_sel()

; entering Souper's runOnFunction() for tri_sel()

; ModuleID = './Filter.c.bc'
source_filename = "./Filter.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@__const.main.in = private unnamed_addr constant [10 x i32] [i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10], align 16
@.str = private unnamed_addr constant [15 x i8] c"Filtered even:\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c" %d\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.3 = private unnamed_addr constant [37 x i8] c"In-place filtered not multiple of 3:\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @even_sel(i32 %x) #0 {
entry:
  %x.addr = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  %0 = load i32, i32* %x.addr, align 4
  %and = and i32 %0, 1
  %tobool = icmp ne i32 %and, 0
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  ret i32 %lnot.ext
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @tri_sel(i32 %x) #0 {
entry:
  %x.addr = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  %0 = load i32, i32* %x.addr, align 4
  %rem = srem i32 %0, 3
  ret i32 %rem
}

; Function Attrs: noinline nounwind optnone
define hidden i32* @grep(i32* %in, i32 %len, i32* %outlen, i32 (i32)* %sel, i32 %inplace) #0 {
entry:
  %in.addr = alloca i32*, align 4
  %len.addr = alloca i32, align 4
  %outlen.addr = alloca i32*, align 4
  %sel.addr = alloca i32 (i32)*, align 4
  %inplace.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %out = alloca i32*, align 4
  store i32* %in, i32** %in.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32* %outlen, i32** %outlen.addr, align 4
  store i32 (i32)* %sel, i32 (i32)** %sel.addr, align 4
  store i32 %inplace, i32* %inplace.addr, align 4
  %0 = load i32, i32* %inplace.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i32*, i32** %in.addr, align 4
  store i32* %1, i32** %out, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %2 = load i32, i32* %len.addr, align 4
  %mul = mul i32 4, %2
  %call = call noalias i8* @malloc(i32 %mul)
  %3 = bitcast i8* %call to i32*
  store i32* %3, i32** %out, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32 (i32)*, i32 (i32)** %sel.addr, align 4
  %7 = load i32*, i32** %in.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %7, i32 %8
  %9 = load i32, i32* %arrayidx, align 4
  %call1 = call i32 %6(i32 %9)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.then3, label %if.end6

if.then3:                                         ; preds = %for.body
  %10 = load i32*, i32** %in.addr, align 4
  %11 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %10, i32 %11
  %12 = load i32, i32* %arrayidx4, align 4
  %13 = load i32*, i32** %out, align 4
  %14 = load i32, i32* %j, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %13, i32 %14
  store i32 %12, i32* %arrayidx5, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.then3, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end6
  %15 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %15, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %16 = load i32, i32* %inplace.addr, align 4
  %tobool8 = icmp ne i32 %16, 0
  br i1 %tobool8, label %if.end13, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.end
  %17 = load i32, i32* %j, align 4
  %18 = load i32, i32* %len.addr, align 4
  %cmp9 = icmp slt i32 %17, %18
  br i1 %cmp9, label %if.then10, label %if.end13

if.then10:                                        ; preds = %land.lhs.true
  %19 = load i32*, i32** %out, align 4
  %20 = bitcast i32* %19 to i8*
  %21 = load i32, i32* %j, align 4
  %mul11 = mul i32 4, %21
  %call12 = call i8* @realloc(i8* %20, i32 %mul11)
  %22 = bitcast i8* %call12 to i32*
  store i32* %22, i32** %out, align 4
  br label %if.end13

if.end13:                                         ; preds = %if.then10, %land.lhs.true, %for.end
  %23 = load i32, i32* %j, align 4
  %24 = load i32*, i32** %outlen.addr, align 4
  store i32 %23, i32* %24, align 4
  %25 = load i32*, i32** %out, align 4
  ret i32* %25
}

declare noalias i8* @malloc(i32 %0) #1

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %in = alloca [10 x i32], align 16
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  %even = alloca i32*, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [10 x i32]* %in to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([10 x i32]* @__const.main.in to i8*), i32 40, i1 false)
  %arraydecay = getelementptr inbounds [10 x i32], [10 x i32]* %in, i32 0, i32 0
  %call = call i32* @grep(i32* %arraydecay, i32 10, i32* %len, i32 (i32)* @even_sel, i32 0)
  store i32* %call, i32** %even, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %len, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32*, i32** %even, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %3, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %5)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %arraydecay4 = getelementptr inbounds [10 x i32], [10 x i32]* %in, i32 0, i32 0
  %call5 = call i32* @grep(i32* %arraydecay4, i32 8, i32* %len, i32 (i32)* @tri_sel, i32 1)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.3, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc12, %for.end
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %len, align 4
  %cmp8 = icmp slt i32 %7, %8
  br i1 %cmp8, label %for.body9, label %for.end14

for.body9:                                        ; preds = %for.cond7
  %9 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds [10 x i32], [10 x i32]* %in, i32 0, i32 %9
  %10 = load i32, i32* %arrayidx10, align 4
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %10)
  br label %for.inc12

for.inc12:                                        ; preds = %for.body9
  %11 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %11, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond7

for.end14:                                        ; preds = %for.cond7
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %x.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem = srem i32 %0, 3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 3:i32
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem %0, 3:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for tri_sel()

; entering Souper's runOnFunction() for grep()

; ModuleID = './Filter.c.bc'
source_filename = "./Filter.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@__const.main.in = private unnamed_addr constant [10 x i32] [i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10], align 16
@.str = private unnamed_addr constant [15 x i8] c"Filtered even:\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c" %d\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.3 = private unnamed_addr constant [37 x i8] c"In-place filtered not multiple of 3:\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @even_sel(i32 %x) #0 {
entry:
  %x.addr = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  %0 = load i32, i32* %x.addr, align 4
  %and = and i32 %0, 1
  %tobool = icmp ne i32 %and, 0
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  ret i32 %lnot.ext
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @tri_sel(i32 %x) #0 {
entry:
  %x.addr = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  %0 = load i32, i32* %x.addr, align 4
  %rem = srem i32 %0, 3
  ret i32 %rem
}

; Function Attrs: noinline nounwind optnone
define hidden i32* @grep(i32* %in, i32 %len, i32* %outlen, i32 (i32)* %sel, i32 %inplace) #0 {
entry:
  %in.addr = alloca i32*, align 4
  %len.addr = alloca i32, align 4
  %outlen.addr = alloca i32*, align 4
  %sel.addr = alloca i32 (i32)*, align 4
  %inplace.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %out = alloca i32*, align 4
  store i32* %in, i32** %in.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32* %outlen, i32** %outlen.addr, align 4
  store i32 (i32)* %sel, i32 (i32)** %sel.addr, align 4
  store i32 %inplace, i32* %inplace.addr, align 4
  %0 = load i32, i32* %inplace.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i32*, i32** %in.addr, align 4
  store i32* %1, i32** %out, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %2 = load i32, i32* %len.addr, align 4
  %mul = mul i32 4, %2
  %call = call noalias i8* @malloc(i32 %mul)
  %3 = bitcast i8* %call to i32*
  store i32* %3, i32** %out, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32 (i32)*, i32 (i32)** %sel.addr, align 4
  %7 = load i32*, i32** %in.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %7, i32 %8
  %9 = load i32, i32* %arrayidx, align 4
  %call1 = call i32 %6(i32 %9)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.then3, label %if.end6

if.then3:                                         ; preds = %for.body
  %10 = load i32*, i32** %in.addr, align 4
  %11 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %10, i32 %11
  %12 = load i32, i32* %arrayidx4, align 4
  %13 = load i32*, i32** %out, align 4
  %14 = load i32, i32* %j, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %13, i32 %14
  store i32 %12, i32* %arrayidx5, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.then3, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end6
  %15 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %15, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %16 = load i32, i32* %inplace.addr, align 4
  %tobool8 = icmp ne i32 %16, 0
  br i1 %tobool8, label %if.end13, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.end
  %17 = load i32, i32* %j, align 4
  %18 = load i32, i32* %len.addr, align 4
  %cmp9 = icmp slt i32 %17, %18
  br i1 %cmp9, label %if.then10, label %if.end13

if.then10:                                        ; preds = %land.lhs.true
  %19 = load i32*, i32** %out, align 4
  %20 = bitcast i32* %19 to i8*
  %21 = load i32, i32* %j, align 4
  %mul11 = mul i32 4, %21
  %call12 = call i8* @realloc(i8* %20, i32 %mul11)
  %22 = bitcast i8* %call12 to i32*
  store i32* %22, i32** %out, align 4
  br label %if.end13

if.end13:                                         ; preds = %if.then10, %land.lhs.true, %for.end
  %23 = load i32, i32* %j, align 4
  %24 = load i32*, i32** %outlen.addr, align 4
  store i32 %23, i32* %24, align 4
  %25 = load i32*, i32** %out, align 4
  ret i32* %25
}

declare noalias i8* @malloc(i32 %0) #1

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %in = alloca [10 x i32], align 16
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  %even = alloca i32*, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [10 x i32]* %in to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([10 x i32]* @__const.main.in to i8*), i32 40, i1 false)
  %arraydecay = getelementptr inbounds [10 x i32], [10 x i32]* %in, i32 0, i32 0
  %call = call i32* @grep(i32* %arraydecay, i32 10, i32* %len, i32 (i32)* @even_sel, i32 0)
  store i32* %call, i32** %even, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %len, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32*, i32** %even, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %3, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %5)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %arraydecay4 = getelementptr inbounds [10 x i32], [10 x i32]* %in, i32 0, i32 0
  %call5 = call i32* @grep(i32* %arraydecay4, i32 8, i32* %len, i32 (i32)* @tri_sel, i32 1)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.3, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc12, %for.end
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %len, align 4
  %cmp8 = icmp slt i32 %7, %8
  br i1 %cmp8, label %for.body9, label %for.end14

for.body9:                                        ; preds = %for.cond7
  %9 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds [10 x i32], [10 x i32]* %in, i32 0, i32 %9
  %10 = load i32, i32* %arrayidx10, align 4
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %10)
  br label %for.inc12

for.inc12:                                        ; preds = %for.body9
  %11 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %11, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond7

for.end14:                                        ; preds = %for.cond7
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %inplace.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %0, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul i32 4, %2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %4, %5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call1 = call i32 %6(i32 %9)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool2 = icmp ne i32 %call1, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %arrayidx4, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %14, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc7 = add nsw i32 %15, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %inplace.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool8 = icmp ne i32 %16, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp9 = icmp slt i32 %17, %18
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul11 = mul i32 4, %21
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for grep()

; entering Souper's runOnFunction() for main()

; ModuleID = './Filter.c.bc'
source_filename = "./Filter.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@__const.main.in = private unnamed_addr constant [10 x i32] [i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10], align 16
@.str = private unnamed_addr constant [15 x i8] c"Filtered even:\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c" %d\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.3 = private unnamed_addr constant [37 x i8] c"In-place filtered not multiple of 3:\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @even_sel(i32 %x) #0 {
entry:
  %x.addr = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  %0 = load i32, i32* %x.addr, align 4
  %and = and i32 %0, 1
  %tobool = icmp ne i32 %and, 0
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  ret i32 %lnot.ext
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @tri_sel(i32 %x) #0 {
entry:
  %x.addr = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  %0 = load i32, i32* %x.addr, align 4
  %rem = srem i32 %0, 3
  ret i32 %rem
}

; Function Attrs: noinline nounwind optnone
define hidden i32* @grep(i32* %in, i32 %len, i32* %outlen, i32 (i32)* %sel, i32 %inplace) #0 {
entry:
  %in.addr = alloca i32*, align 4
  %len.addr = alloca i32, align 4
  %outlen.addr = alloca i32*, align 4
  %sel.addr = alloca i32 (i32)*, align 4
  %inplace.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %out = alloca i32*, align 4
  store i32* %in, i32** %in.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32* %outlen, i32** %outlen.addr, align 4
  store i32 (i32)* %sel, i32 (i32)** %sel.addr, align 4
  store i32 %inplace, i32* %inplace.addr, align 4
  %0 = load i32, i32* %inplace.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i32*, i32** %in.addr, align 4
  store i32* %1, i32** %out, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %2 = load i32, i32* %len.addr, align 4
  %mul = mul i32 4, %2
  %call = call noalias i8* @malloc(i32 %mul)
  %3 = bitcast i8* %call to i32*
  store i32* %3, i32** %out, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32 (i32)*, i32 (i32)** %sel.addr, align 4
  %7 = load i32*, i32** %in.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %7, i32 %8
  %9 = load i32, i32* %arrayidx, align 4
  %call1 = call i32 %6(i32 %9)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.then3, label %if.end6

if.then3:                                         ; preds = %for.body
  %10 = load i32*, i32** %in.addr, align 4
  %11 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %10, i32 %11
  %12 = load i32, i32* %arrayidx4, align 4
  %13 = load i32*, i32** %out, align 4
  %14 = load i32, i32* %j, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %j, align 4
  %arrayidx5 = getelementptr inbounds i32, i32* %13, i32 %14
  store i32 %12, i32* %arrayidx5, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.then3, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end6
  %15 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %15, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %16 = load i32, i32* %inplace.addr, align 4
  %tobool8 = icmp ne i32 %16, 0
  br i1 %tobool8, label %if.end13, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.end
  %17 = load i32, i32* %j, align 4
  %18 = load i32, i32* %len.addr, align 4
  %cmp9 = icmp slt i32 %17, %18
  br i1 %cmp9, label %if.then10, label %if.end13

if.then10:                                        ; preds = %land.lhs.true
  %19 = load i32*, i32** %out, align 4
  %20 = bitcast i32* %19 to i8*
  %21 = load i32, i32* %j, align 4
  %mul11 = mul i32 4, %21
  %call12 = call i8* @realloc(i8* %20, i32 %mul11)
  %22 = bitcast i8* %call12 to i32*
  store i32* %22, i32** %out, align 4
  br label %if.end13

if.end13:                                         ; preds = %if.then10, %land.lhs.true, %for.end
  %23 = load i32, i32* %j, align 4
  %24 = load i32*, i32** %outlen.addr, align 4
  store i32 %23, i32* %24, align 4
  %25 = load i32*, i32** %out, align 4
  ret i32* %25
}

declare noalias i8* @malloc(i32 %0) #1

declare i8* @realloc(i8* %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %in = alloca [10 x i32], align 16
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  %even = alloca i32*, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [10 x i32]* %in to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([10 x i32]* @__const.main.in to i8*), i32 40, i1 false)
  %arraydecay = getelementptr inbounds [10 x i32], [10 x i32]* %in, i32 0, i32 0
  %call = call i32* @grep(i32* %arraydecay, i32 10, i32* %len, i32 (i32)* @even_sel, i32 0)
  store i32* %call, i32** %even, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %len, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32*, i32** %even, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %3, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %5)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  %arraydecay4 = getelementptr inbounds [10 x i32], [10 x i32]* %in, i32 0, i32 0
  %call5 = call i32* @grep(i32* %arraydecay4, i32 8, i32* %len, i32 (i32)* @tri_sel, i32 1)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.3, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc12, %for.end
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %len, align 4
  %cmp8 = icmp slt i32 %7, %8
  br i1 %cmp8, label %for.body9, label %for.end14

for.body9:                                        ; preds = %for.cond7
  %9 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds [10 x i32], [10 x i32]* %in, i32 0, i32 %9
  %10 = load i32, i32* %arrayidx10, align 4
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %10)
  br label %for.inc12

for.inc12:                                        ; preds = %for.body9
  %11 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %11, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond7

for.end14:                                        ; preds = %for.cond7
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %1, %2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %6, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp8 = icmp slt i32 %7, %8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %arrayidx10, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc13 = add nsw i32 %11, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
