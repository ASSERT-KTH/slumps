
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for uniq()

; ModuleID = './Symmetric_difference.c.bc'
source_filename = "./Symmetric_difference.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [5 x i8] c"John\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"Serena\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"Bob\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"Mary\00", align 1
@A = hidden global [5 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0)], align 16
@.str.4 = private unnamed_addr constant [4 x i8] c"Jim\00", align 1
@B = hidden global [5 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0)], align 16
@.str.5 = private unnamed_addr constant [6 x i8] c"  %s\0A\00", align 1
@.str.6 = private unnamed_addr constant [8 x i8] c"A \\ B:\0A\00", align 1
@.str.7 = private unnamed_addr constant [9 x i8] c"\0AB \\ A:\0A\00", align 1
@.str.8 = private unnamed_addr constant [9 x i8] c"\0AA ^ B:\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @uniq(i8** %x, i32 %len) #0 {
entry:
  %x.addr = alloca i8**, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i8** %x, i8*** %x.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc11, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end13

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %add = add nsw i32 %2, 1
  store i32 %add, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load i32, i32* %len.addr, align 4
  %cmp2 = icmp slt i32 %3, %4
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %5 = load i8**, i8*** %x.addr, align 4
  %6 = load i32, i32* %j, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %5, i32 %6
  %7 = load i8*, i8** %arrayidx, align 4
  %tobool = icmp ne i8* %7, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body3
  %8 = load i8**, i8*** %x.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds i8*, i8** %8, i32 %9
  %10 = load i8*, i8** %arrayidx4, align 4
  %tobool5 = icmp ne i8* %10, null
  br i1 %tobool5, label %land.lhs.true6, label %if.end

land.lhs.true6:                                   ; preds = %land.lhs.true
  %11 = load i8**, i8*** %x.addr, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds i8*, i8** %11, i32 %12
  %13 = load i8*, i8** %arrayidx7, align 4
  %14 = load i8**, i8*** %x.addr, align 4
  %15 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds i8*, i8** %14, i32 %15
  %16 = load i8*, i8** %arrayidx8, align 4
  %call = call i32 @strcmp(i8* %13, i8* %16) #3
  %tobool9 = icmp ne i32 %call, 0
  br i1 %tobool9, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true6
  %17 = load i8**, i8*** %x.addr, align 4
  %18 = load i32, i32* %j, align 4
  %arrayidx10 = getelementptr inbounds i8*, i8** %17, i32 %18
  store i8* null, i8** %arrayidx10, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true6, %land.lhs.true, %for.body3
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %19 = load i32, i32* %j, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc11

for.inc11:                                        ; preds = %for.end
  %20 = load i32, i32* %i, align 4
  %inc12 = add nsw i32 %20, 1
  store i32 %inc12, i32* %i, align 4
  br label %for.cond

for.end13:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @in_set(i8** %x, i32 %len, i8* %match) #0 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca i8**, align 4
  %len.addr = alloca i32, align 4
  %match.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  store i8** %x, i8*** %x.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i8* %match, i8** %match.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8**, i8*** %x.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %2, i32 %3
  %4 = load i8*, i8** %arrayidx, align 4
  %tobool = icmp ne i8* %4, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %5 = load i8**, i8*** %x.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds i8*, i8** %5, i32 %6
  %7 = load i8*, i8** %arrayidx1, align 4
  %8 = load i8*, i8** %match.addr, align 4
  %call = call i32 @strcmp(i8* %7, i8* %8) #3
  %tobool2 = icmp ne i32 %call, 0
  br i1 %tobool2, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  %10 = load i32, i32* %retval, align 4
  ret i32 %10
}

; Function Attrs: noinline nounwind optnone
define hidden void @show_diff(i8** %x, i32 %lenx, i8** %y, i32 %leny) #0 {
entry:
  %x.addr = alloca i8**, align 4
  %lenx.addr = alloca i32, align 4
  %y.addr = alloca i8**, align 4
  %leny.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i8** %x, i8*** %x.addr, align 4
  store i32 %lenx, i32* %lenx.addr, align 4
  store i8** %y, i8*** %y.addr, align 4
  store i32 %leny, i32* %leny.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %lenx.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8**, i8*** %x.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %2, i32 %3
  %4 = load i8*, i8** %arrayidx, align 4
  %tobool = icmp ne i8* %4, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %5 = load i8**, i8*** %y.addr, align 4
  %6 = load i32, i32* %leny.addr, align 4
  %7 = load i8**, i8*** %x.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds i8*, i8** %7, i32 %8
  %9 = load i8*, i8** %arrayidx1, align 4
  %call = call i32 @in_set(i8** %5, i32 %6, i8* %9)
  %tobool2 = icmp ne i32 %call, 0
  br i1 %tobool2, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %10 = load i8**, i8*** %x.addr, align 4
  %11 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i8*, i8** %10, i32 %11
  %12 = load i8*, i8** %arrayidx3, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i32 0, i32 0), i8* %12)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %13 = load i32, i32* %i, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden void @show_sym_diff(i8** %x, i32 %lenx, i8** %y, i32 %leny) #0 {
entry:
  %x.addr = alloca i8**, align 4
  %lenx.addr = alloca i32, align 4
  %y.addr = alloca i8**, align 4
  %leny.addr = alloca i32, align 4
  store i8** %x, i8*** %x.addr, align 4
  store i32 %lenx, i32* %lenx.addr, align 4
  store i8** %y, i8*** %y.addr, align 4
  store i32 %leny, i32* %leny.addr, align 4
  %0 = load i8**, i8*** %x.addr, align 4
  %1 = load i32, i32* %lenx.addr, align 4
  %2 = load i8**, i8*** %y.addr, align 4
  %3 = load i32, i32* %leny.addr, align 4
  call void @show_diff(i8** %0, i32 %1, i8** %2, i32 %3)
  %4 = load i8**, i8*** %y.addr, align 4
  %5 = load i32, i32* %leny.addr, align 4
  %6 = load i8**, i8*** %x.addr, align 4
  %7 = load i32, i32* %lenx.addr, align 4
  call void @show_diff(i8** %4, i32 %5, i8** %6, i32 %7)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @uniq(i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @A, i32 0, i32 0), i32 5)
  call void @uniq(i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @B, i32 0, i32 0), i32 5)
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i32 0, i32 0))
  call void @show_diff(i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @A, i32 0, i32 0), i32 5, i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @B, i32 0, i32 0), i32 5)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i32 0, i32 0))
  call void @show_diff(i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @B, i32 0, i32 0), i32 5, i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @A, i32 0, i32 0), i32 5)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.8, i32 0, i32 0))
  call void @show_sym_diff(i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @A, i32 0, i32 0), i32 5, i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @B, i32 0, i32 0), i32 5)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %2, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp slt i32 %3, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i8* %7, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool5 = icmp ne i8* %10, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 @strcmp(i8* %13, i8* %16) #3
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool9 = icmp ne i32 %call, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %19, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc12 = add nsw i32 %20, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for uniq()

; entering Souper's runOnFunction() for in_set()

; ModuleID = './Symmetric_difference.c.bc'
source_filename = "./Symmetric_difference.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [5 x i8] c"John\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"Serena\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"Bob\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"Mary\00", align 1
@A = hidden global [5 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0)], align 16
@.str.4 = private unnamed_addr constant [4 x i8] c"Jim\00", align 1
@B = hidden global [5 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0)], align 16
@.str.5 = private unnamed_addr constant [6 x i8] c"  %s\0A\00", align 1
@.str.6 = private unnamed_addr constant [8 x i8] c"A \\ B:\0A\00", align 1
@.str.7 = private unnamed_addr constant [9 x i8] c"\0AB \\ A:\0A\00", align 1
@.str.8 = private unnamed_addr constant [9 x i8] c"\0AA ^ B:\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @uniq(i8** %x, i32 %len) #0 {
entry:
  %x.addr = alloca i8**, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i8** %x, i8*** %x.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc11, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end13

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %add = add nsw i32 %2, 1
  store i32 %add, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load i32, i32* %len.addr, align 4
  %cmp2 = icmp slt i32 %3, %4
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %5 = load i8**, i8*** %x.addr, align 4
  %6 = load i32, i32* %j, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %5, i32 %6
  %7 = load i8*, i8** %arrayidx, align 4
  %tobool = icmp ne i8* %7, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body3
  %8 = load i8**, i8*** %x.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds i8*, i8** %8, i32 %9
  %10 = load i8*, i8** %arrayidx4, align 4
  %tobool5 = icmp ne i8* %10, null
  br i1 %tobool5, label %land.lhs.true6, label %if.end

land.lhs.true6:                                   ; preds = %land.lhs.true
  %11 = load i8**, i8*** %x.addr, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds i8*, i8** %11, i32 %12
  %13 = load i8*, i8** %arrayidx7, align 4
  %14 = load i8**, i8*** %x.addr, align 4
  %15 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds i8*, i8** %14, i32 %15
  %16 = load i8*, i8** %arrayidx8, align 4
  %call = call i32 @strcmp(i8* %13, i8* %16) #3
  %tobool9 = icmp ne i32 %call, 0
  br i1 %tobool9, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true6
  %17 = load i8**, i8*** %x.addr, align 4
  %18 = load i32, i32* %j, align 4
  %arrayidx10 = getelementptr inbounds i8*, i8** %17, i32 %18
  store i8* null, i8** %arrayidx10, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true6, %land.lhs.true, %for.body3
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %19 = load i32, i32* %j, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc11

for.inc11:                                        ; preds = %for.end
  %20 = load i32, i32* %i, align 4
  %inc12 = add nsw i32 %20, 1
  store i32 %inc12, i32* %i, align 4
  br label %for.cond

for.end13:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @in_set(i8** %x, i32 %len, i8* %match) #0 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca i8**, align 4
  %len.addr = alloca i32, align 4
  %match.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  store i8** %x, i8*** %x.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i8* %match, i8** %match.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8**, i8*** %x.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %2, i32 %3
  %4 = load i8*, i8** %arrayidx, align 4
  %tobool = icmp ne i8* %4, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %5 = load i8**, i8*** %x.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds i8*, i8** %5, i32 %6
  %7 = load i8*, i8** %arrayidx1, align 4
  %8 = load i8*, i8** %match.addr, align 4
  %call = call i32 @strcmp(i8* %7, i8* %8) #3
  %tobool2 = icmp ne i32 %call, 0
  br i1 %tobool2, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  %10 = load i32, i32* %retval, align 4
  ret i32 %10
}

; Function Attrs: noinline nounwind optnone
define hidden void @show_diff(i8** %x, i32 %lenx, i8** %y, i32 %leny) #0 {
entry:
  %x.addr = alloca i8**, align 4
  %lenx.addr = alloca i32, align 4
  %y.addr = alloca i8**, align 4
  %leny.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i8** %x, i8*** %x.addr, align 4
  store i32 %lenx, i32* %lenx.addr, align 4
  store i8** %y, i8*** %y.addr, align 4
  store i32 %leny, i32* %leny.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %lenx.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8**, i8*** %x.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %2, i32 %3
  %4 = load i8*, i8** %arrayidx, align 4
  %tobool = icmp ne i8* %4, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %5 = load i8**, i8*** %y.addr, align 4
  %6 = load i32, i32* %leny.addr, align 4
  %7 = load i8**, i8*** %x.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds i8*, i8** %7, i32 %8
  %9 = load i8*, i8** %arrayidx1, align 4
  %call = call i32 @in_set(i8** %5, i32 %6, i8* %9)
  %tobool2 = icmp ne i32 %call, 0
  br i1 %tobool2, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %10 = load i8**, i8*** %x.addr, align 4
  %11 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i8*, i8** %10, i32 %11
  %12 = load i8*, i8** %arrayidx3, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i32 0, i32 0), i8* %12)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %13 = load i32, i32* %i, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden void @show_sym_diff(i8** %x, i32 %lenx, i8** %y, i32 %leny) #0 {
entry:
  %x.addr = alloca i8**, align 4
  %lenx.addr = alloca i32, align 4
  %y.addr = alloca i8**, align 4
  %leny.addr = alloca i32, align 4
  store i8** %x, i8*** %x.addr, align 4
  store i32 %lenx, i32* %lenx.addr, align 4
  store i8** %y, i8*** %y.addr, align 4
  store i32 %leny, i32* %leny.addr, align 4
  %0 = load i8**, i8*** %x.addr, align 4
  %1 = load i32, i32* %lenx.addr, align 4
  %2 = load i8**, i8*** %y.addr, align 4
  %3 = load i32, i32* %leny.addr, align 4
  call void @show_diff(i8** %0, i32 %1, i8** %2, i32 %3)
  %4 = load i8**, i8*** %y.addr, align 4
  %5 = load i32, i32* %leny.addr, align 4
  %6 = load i8**, i8*** %x.addr, align 4
  %7 = load i32, i32* %lenx.addr, align 4
  call void @show_diff(i8** %4, i32 %5, i8** %6, i32 %7)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @uniq(i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @A, i32 0, i32 0), i32 5)
  call void @uniq(i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @B, i32 0, i32 0), i32 5)
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i32 0, i32 0))
  call void @show_diff(i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @A, i32 0, i32 0), i32 5, i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @B, i32 0, i32 0), i32 5)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i32 0, i32 0))
  call void @show_diff(i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @B, i32 0, i32 0), i32 5, i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @A, i32 0, i32 0), i32 5)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.8, i32 0, i32 0))
  call void @show_sym_diff(i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @A, i32 0, i32 0), i32 5, i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @B, i32 0, i32 0), i32 5)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i8* %4, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 @strcmp(i8* %7, i8* %8) #3
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool2 = icmp ne i32 %call, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %9, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for in_set()

; entering Souper's runOnFunction() for show_diff()

; ModuleID = './Symmetric_difference.c.bc'
source_filename = "./Symmetric_difference.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [5 x i8] c"John\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"Serena\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"Bob\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"Mary\00", align 1
@A = hidden global [5 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0)], align 16
@.str.4 = private unnamed_addr constant [4 x i8] c"Jim\00", align 1
@B = hidden global [5 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0)], align 16
@.str.5 = private unnamed_addr constant [6 x i8] c"  %s\0A\00", align 1
@.str.6 = private unnamed_addr constant [8 x i8] c"A \\ B:\0A\00", align 1
@.str.7 = private unnamed_addr constant [9 x i8] c"\0AB \\ A:\0A\00", align 1
@.str.8 = private unnamed_addr constant [9 x i8] c"\0AA ^ B:\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @uniq(i8** %x, i32 %len) #0 {
entry:
  %x.addr = alloca i8**, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i8** %x, i8*** %x.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc11, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end13

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %add = add nsw i32 %2, 1
  store i32 %add, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load i32, i32* %len.addr, align 4
  %cmp2 = icmp slt i32 %3, %4
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %5 = load i8**, i8*** %x.addr, align 4
  %6 = load i32, i32* %j, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %5, i32 %6
  %7 = load i8*, i8** %arrayidx, align 4
  %tobool = icmp ne i8* %7, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body3
  %8 = load i8**, i8*** %x.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds i8*, i8** %8, i32 %9
  %10 = load i8*, i8** %arrayidx4, align 4
  %tobool5 = icmp ne i8* %10, null
  br i1 %tobool5, label %land.lhs.true6, label %if.end

land.lhs.true6:                                   ; preds = %land.lhs.true
  %11 = load i8**, i8*** %x.addr, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds i8*, i8** %11, i32 %12
  %13 = load i8*, i8** %arrayidx7, align 4
  %14 = load i8**, i8*** %x.addr, align 4
  %15 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds i8*, i8** %14, i32 %15
  %16 = load i8*, i8** %arrayidx8, align 4
  %call = call i32 @strcmp(i8* %13, i8* %16) #3
  %tobool9 = icmp ne i32 %call, 0
  br i1 %tobool9, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true6
  %17 = load i8**, i8*** %x.addr, align 4
  %18 = load i32, i32* %j, align 4
  %arrayidx10 = getelementptr inbounds i8*, i8** %17, i32 %18
  store i8* null, i8** %arrayidx10, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true6, %land.lhs.true, %for.body3
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %19 = load i32, i32* %j, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc11

for.inc11:                                        ; preds = %for.end
  %20 = load i32, i32* %i, align 4
  %inc12 = add nsw i32 %20, 1
  store i32 %inc12, i32* %i, align 4
  br label %for.cond

for.end13:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @in_set(i8** %x, i32 %len, i8* %match) #0 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca i8**, align 4
  %len.addr = alloca i32, align 4
  %match.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  store i8** %x, i8*** %x.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i8* %match, i8** %match.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8**, i8*** %x.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %2, i32 %3
  %4 = load i8*, i8** %arrayidx, align 4
  %tobool = icmp ne i8* %4, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %5 = load i8**, i8*** %x.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds i8*, i8** %5, i32 %6
  %7 = load i8*, i8** %arrayidx1, align 4
  %8 = load i8*, i8** %match.addr, align 4
  %call = call i32 @strcmp(i8* %7, i8* %8) #3
  %tobool2 = icmp ne i32 %call, 0
  br i1 %tobool2, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  %10 = load i32, i32* %retval, align 4
  ret i32 %10
}

; Function Attrs: noinline nounwind optnone
define hidden void @show_diff(i8** %x, i32 %lenx, i8** %y, i32 %leny) #0 {
entry:
  %x.addr = alloca i8**, align 4
  %lenx.addr = alloca i32, align 4
  %y.addr = alloca i8**, align 4
  %leny.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i8** %x, i8*** %x.addr, align 4
  store i32 %lenx, i32* %lenx.addr, align 4
  store i8** %y, i8*** %y.addr, align 4
  store i32 %leny, i32* %leny.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %lenx.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8**, i8*** %x.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %2, i32 %3
  %4 = load i8*, i8** %arrayidx, align 4
  %tobool = icmp ne i8* %4, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %5 = load i8**, i8*** %y.addr, align 4
  %6 = load i32, i32* %leny.addr, align 4
  %7 = load i8**, i8*** %x.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds i8*, i8** %7, i32 %8
  %9 = load i8*, i8** %arrayidx1, align 4
  %call = call i32 @in_set(i8** %5, i32 %6, i8* %9)
  %tobool2 = icmp ne i32 %call, 0
  br i1 %tobool2, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %10 = load i8**, i8*** %x.addr, align 4
  %11 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i8*, i8** %10, i32 %11
  %12 = load i8*, i8** %arrayidx3, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i32 0, i32 0), i8* %12)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %13 = load i32, i32* %i, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden void @show_sym_diff(i8** %x, i32 %lenx, i8** %y, i32 %leny) #0 {
entry:
  %x.addr = alloca i8**, align 4
  %lenx.addr = alloca i32, align 4
  %y.addr = alloca i8**, align 4
  %leny.addr = alloca i32, align 4
  store i8** %x, i8*** %x.addr, align 4
  store i32 %lenx, i32* %lenx.addr, align 4
  store i8** %y, i8*** %y.addr, align 4
  store i32 %leny, i32* %leny.addr, align 4
  %0 = load i8**, i8*** %x.addr, align 4
  %1 = load i32, i32* %lenx.addr, align 4
  %2 = load i8**, i8*** %y.addr, align 4
  %3 = load i32, i32* %leny.addr, align 4
  call void @show_diff(i8** %0, i32 %1, i8** %2, i32 %3)
  %4 = load i8**, i8*** %y.addr, align 4
  %5 = load i32, i32* %leny.addr, align 4
  %6 = load i8**, i8*** %x.addr, align 4
  %7 = load i32, i32* %lenx.addr, align 4
  call void @show_diff(i8** %4, i32 %5, i8** %6, i32 %7)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @uniq(i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @A, i32 0, i32 0), i32 5)
  call void @uniq(i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @B, i32 0, i32 0), i32 5)
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i32 0, i32 0))
  call void @show_diff(i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @A, i32 0, i32 0), i32 5, i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @B, i32 0, i32 0), i32 5)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i32 0, i32 0))
  call void @show_diff(i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @B, i32 0, i32 0), i32 5, i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @A, i32 0, i32 0), i32 5)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.8, i32 0, i32 0))
  call void @show_sym_diff(i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @A, i32 0, i32 0), i32 5, i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @B, i32 0, i32 0), i32 5)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %lenx.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i8* %4, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %leny.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 @in_set(i8** %5, i32 %6, i8* %9)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool2 = icmp ne i32 %call, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %13, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for show_diff()

; entering Souper's runOnFunction() for show_sym_diff()

; ModuleID = './Symmetric_difference.c.bc'
source_filename = "./Symmetric_difference.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [5 x i8] c"John\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"Serena\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"Bob\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"Mary\00", align 1
@A = hidden global [5 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0)], align 16
@.str.4 = private unnamed_addr constant [4 x i8] c"Jim\00", align 1
@B = hidden global [5 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0)], align 16
@.str.5 = private unnamed_addr constant [6 x i8] c"  %s\0A\00", align 1
@.str.6 = private unnamed_addr constant [8 x i8] c"A \\ B:\0A\00", align 1
@.str.7 = private unnamed_addr constant [9 x i8] c"\0AB \\ A:\0A\00", align 1
@.str.8 = private unnamed_addr constant [9 x i8] c"\0AA ^ B:\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @uniq(i8** %x, i32 %len) #0 {
entry:
  %x.addr = alloca i8**, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i8** %x, i8*** %x.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc11, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end13

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %add = add nsw i32 %2, 1
  store i32 %add, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load i32, i32* %len.addr, align 4
  %cmp2 = icmp slt i32 %3, %4
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %5 = load i8**, i8*** %x.addr, align 4
  %6 = load i32, i32* %j, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %5, i32 %6
  %7 = load i8*, i8** %arrayidx, align 4
  %tobool = icmp ne i8* %7, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body3
  %8 = load i8**, i8*** %x.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds i8*, i8** %8, i32 %9
  %10 = load i8*, i8** %arrayidx4, align 4
  %tobool5 = icmp ne i8* %10, null
  br i1 %tobool5, label %land.lhs.true6, label %if.end

land.lhs.true6:                                   ; preds = %land.lhs.true
  %11 = load i8**, i8*** %x.addr, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds i8*, i8** %11, i32 %12
  %13 = load i8*, i8** %arrayidx7, align 4
  %14 = load i8**, i8*** %x.addr, align 4
  %15 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds i8*, i8** %14, i32 %15
  %16 = load i8*, i8** %arrayidx8, align 4
  %call = call i32 @strcmp(i8* %13, i8* %16) #3
  %tobool9 = icmp ne i32 %call, 0
  br i1 %tobool9, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true6
  %17 = load i8**, i8*** %x.addr, align 4
  %18 = load i32, i32* %j, align 4
  %arrayidx10 = getelementptr inbounds i8*, i8** %17, i32 %18
  store i8* null, i8** %arrayidx10, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true6, %land.lhs.true, %for.body3
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %19 = load i32, i32* %j, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc11

for.inc11:                                        ; preds = %for.end
  %20 = load i32, i32* %i, align 4
  %inc12 = add nsw i32 %20, 1
  store i32 %inc12, i32* %i, align 4
  br label %for.cond

for.end13:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @in_set(i8** %x, i32 %len, i8* %match) #0 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca i8**, align 4
  %len.addr = alloca i32, align 4
  %match.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  store i8** %x, i8*** %x.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i8* %match, i8** %match.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8**, i8*** %x.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %2, i32 %3
  %4 = load i8*, i8** %arrayidx, align 4
  %tobool = icmp ne i8* %4, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %5 = load i8**, i8*** %x.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds i8*, i8** %5, i32 %6
  %7 = load i8*, i8** %arrayidx1, align 4
  %8 = load i8*, i8** %match.addr, align 4
  %call = call i32 @strcmp(i8* %7, i8* %8) #3
  %tobool2 = icmp ne i32 %call, 0
  br i1 %tobool2, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  %10 = load i32, i32* %retval, align 4
  ret i32 %10
}

; Function Attrs: noinline nounwind optnone
define hidden void @show_diff(i8** %x, i32 %lenx, i8** %y, i32 %leny) #0 {
entry:
  %x.addr = alloca i8**, align 4
  %lenx.addr = alloca i32, align 4
  %y.addr = alloca i8**, align 4
  %leny.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i8** %x, i8*** %x.addr, align 4
  store i32 %lenx, i32* %lenx.addr, align 4
  store i8** %y, i8*** %y.addr, align 4
  store i32 %leny, i32* %leny.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %lenx.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8**, i8*** %x.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %2, i32 %3
  %4 = load i8*, i8** %arrayidx, align 4
  %tobool = icmp ne i8* %4, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %5 = load i8**, i8*** %y.addr, align 4
  %6 = load i32, i32* %leny.addr, align 4
  %7 = load i8**, i8*** %x.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds i8*, i8** %7, i32 %8
  %9 = load i8*, i8** %arrayidx1, align 4
  %call = call i32 @in_set(i8** %5, i32 %6, i8* %9)
  %tobool2 = icmp ne i32 %call, 0
  br i1 %tobool2, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %10 = load i8**, i8*** %x.addr, align 4
  %11 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i8*, i8** %10, i32 %11
  %12 = load i8*, i8** %arrayidx3, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i32 0, i32 0), i8* %12)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %13 = load i32, i32* %i, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden void @show_sym_diff(i8** %x, i32 %lenx, i8** %y, i32 %leny) #0 {
entry:
  %x.addr = alloca i8**, align 4
  %lenx.addr = alloca i32, align 4
  %y.addr = alloca i8**, align 4
  %leny.addr = alloca i32, align 4
  store i8** %x, i8*** %x.addr, align 4
  store i32 %lenx, i32* %lenx.addr, align 4
  store i8** %y, i8*** %y.addr, align 4
  store i32 %leny, i32* %leny.addr, align 4
  %0 = load i8**, i8*** %x.addr, align 4
  %1 = load i32, i32* %lenx.addr, align 4
  %2 = load i8**, i8*** %y.addr, align 4
  %3 = load i32, i32* %leny.addr, align 4
  call void @show_diff(i8** %0, i32 %1, i8** %2, i32 %3)
  %4 = load i8**, i8*** %y.addr, align 4
  %5 = load i32, i32* %leny.addr, align 4
  %6 = load i8**, i8*** %x.addr, align 4
  %7 = load i32, i32* %lenx.addr, align 4
  call void @show_diff(i8** %4, i32 %5, i8** %6, i32 %7)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @uniq(i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @A, i32 0, i32 0), i32 5)
  call void @uniq(i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @B, i32 0, i32 0), i32 5)
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i32 0, i32 0))
  call void @show_diff(i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @A, i32 0, i32 0), i32 5, i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @B, i32 0, i32 0), i32 5)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i32 0, i32 0))
  call void @show_diff(i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @B, i32 0, i32 0), i32 5, i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @A, i32 0, i32 0), i32 5)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.8, i32 0, i32 0))
  call void @show_sym_diff(i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @A, i32 0, i32 0), i32 5, i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @B, i32 0, i32 0), i32 5)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %lenx.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %leny.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %leny.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %lenx.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for show_sym_diff()

; entering Souper's runOnFunction() for main()

; ModuleID = './Symmetric_difference.c.bc'
source_filename = "./Symmetric_difference.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [5 x i8] c"John\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"Serena\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"Bob\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"Mary\00", align 1
@A = hidden global [5 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0)], align 16
@.str.4 = private unnamed_addr constant [4 x i8] c"Jim\00", align 1
@B = hidden global [5 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0)], align 16
@.str.5 = private unnamed_addr constant [6 x i8] c"  %s\0A\00", align 1
@.str.6 = private unnamed_addr constant [8 x i8] c"A \\ B:\0A\00", align 1
@.str.7 = private unnamed_addr constant [9 x i8] c"\0AB \\ A:\0A\00", align 1
@.str.8 = private unnamed_addr constant [9 x i8] c"\0AA ^ B:\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @uniq(i8** %x, i32 %len) #0 {
entry:
  %x.addr = alloca i8**, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i8** %x, i8*** %x.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc11, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end13

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %add = add nsw i32 %2, 1
  store i32 %add, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load i32, i32* %len.addr, align 4
  %cmp2 = icmp slt i32 %3, %4
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %5 = load i8**, i8*** %x.addr, align 4
  %6 = load i32, i32* %j, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %5, i32 %6
  %7 = load i8*, i8** %arrayidx, align 4
  %tobool = icmp ne i8* %7, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body3
  %8 = load i8**, i8*** %x.addr, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds i8*, i8** %8, i32 %9
  %10 = load i8*, i8** %arrayidx4, align 4
  %tobool5 = icmp ne i8* %10, null
  br i1 %tobool5, label %land.lhs.true6, label %if.end

land.lhs.true6:                                   ; preds = %land.lhs.true
  %11 = load i8**, i8*** %x.addr, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds i8*, i8** %11, i32 %12
  %13 = load i8*, i8** %arrayidx7, align 4
  %14 = load i8**, i8*** %x.addr, align 4
  %15 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds i8*, i8** %14, i32 %15
  %16 = load i8*, i8** %arrayidx8, align 4
  %call = call i32 @strcmp(i8* %13, i8* %16) #3
  %tobool9 = icmp ne i32 %call, 0
  br i1 %tobool9, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true6
  %17 = load i8**, i8*** %x.addr, align 4
  %18 = load i32, i32* %j, align 4
  %arrayidx10 = getelementptr inbounds i8*, i8** %17, i32 %18
  store i8* null, i8** %arrayidx10, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true6, %land.lhs.true, %for.body3
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %19 = load i32, i32* %j, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc11

for.inc11:                                        ; preds = %for.end
  %20 = load i32, i32* %i, align 4
  %inc12 = add nsw i32 %20, 1
  store i32 %inc12, i32* %i, align 4
  br label %for.cond

for.end13:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* %0, i8* %1) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @in_set(i8** %x, i32 %len, i8* %match) #0 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca i8**, align 4
  %len.addr = alloca i32, align 4
  %match.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  store i8** %x, i8*** %x.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store i8* %match, i8** %match.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8**, i8*** %x.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %2, i32 %3
  %4 = load i8*, i8** %arrayidx, align 4
  %tobool = icmp ne i8* %4, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %5 = load i8**, i8*** %x.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds i8*, i8** %5, i32 %6
  %7 = load i8*, i8** %arrayidx1, align 4
  %8 = load i8*, i8** %match.addr, align 4
  %call = call i32 @strcmp(i8* %7, i8* %8) #3
  %tobool2 = icmp ne i32 %call, 0
  br i1 %tobool2, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  %10 = load i32, i32* %retval, align 4
  ret i32 %10
}

; Function Attrs: noinline nounwind optnone
define hidden void @show_diff(i8** %x, i32 %lenx, i8** %y, i32 %leny) #0 {
entry:
  %x.addr = alloca i8**, align 4
  %lenx.addr = alloca i32, align 4
  %y.addr = alloca i8**, align 4
  %leny.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i8** %x, i8*** %x.addr, align 4
  store i32 %lenx, i32* %lenx.addr, align 4
  store i8** %y, i8*** %y.addr, align 4
  store i32 %leny, i32* %leny.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %lenx.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8**, i8*** %x.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %2, i32 %3
  %4 = load i8*, i8** %arrayidx, align 4
  %tobool = icmp ne i8* %4, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %5 = load i8**, i8*** %y.addr, align 4
  %6 = load i32, i32* %leny.addr, align 4
  %7 = load i8**, i8*** %x.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds i8*, i8** %7, i32 %8
  %9 = load i8*, i8** %arrayidx1, align 4
  %call = call i32 @in_set(i8** %5, i32 %6, i8* %9)
  %tobool2 = icmp ne i32 %call, 0
  br i1 %tobool2, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %10 = load i8**, i8*** %x.addr, align 4
  %11 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i8*, i8** %10, i32 %11
  %12 = load i8*, i8** %arrayidx3, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i32 0, i32 0), i8* %12)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %13 = load i32, i32* %i, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare i32 @printf(i8* %0, ...) #2

; Function Attrs: noinline nounwind optnone
define hidden void @show_sym_diff(i8** %x, i32 %lenx, i8** %y, i32 %leny) #0 {
entry:
  %x.addr = alloca i8**, align 4
  %lenx.addr = alloca i32, align 4
  %y.addr = alloca i8**, align 4
  %leny.addr = alloca i32, align 4
  store i8** %x, i8*** %x.addr, align 4
  store i32 %lenx, i32* %lenx.addr, align 4
  store i8** %y, i8*** %y.addr, align 4
  store i32 %leny, i32* %leny.addr, align 4
  %0 = load i8**, i8*** %x.addr, align 4
  %1 = load i32, i32* %lenx.addr, align 4
  %2 = load i8**, i8*** %y.addr, align 4
  %3 = load i32, i32* %leny.addr, align 4
  call void @show_diff(i8** %0, i32 %1, i8** %2, i32 %3)
  %4 = load i8**, i8*** %y.addr, align 4
  %5 = load i32, i32* %leny.addr, align 4
  %6 = load i8**, i8*** %x.addr, align 4
  %7 = load i32, i32* %lenx.addr, align 4
  call void @show_diff(i8** %4, i32 %5, i8** %6, i32 %7)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @uniq(i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @A, i32 0, i32 0), i32 5)
  call void @uniq(i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @B, i32 0, i32 0), i32 5)
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i32 0, i32 0))
  call void @show_diff(i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @A, i32 0, i32 0), i32 5, i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @B, i32 0, i32 0), i32 5)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i32 0, i32 0))
  call void @show_diff(i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @B, i32 0, i32 0), i32 5, i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @A, i32 0, i32 0), i32 5)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.8, i32 0, i32 0))
  call void @show_sym_diff(i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @A, i32 0, i32 0), i32 5, i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @B, i32 0, i32 0), i32 5)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
