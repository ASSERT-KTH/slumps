
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for compareExpressionBySum()

; ModuleID = './Sum_to_100.c.bc'
source_filename = "./Sum_to_100.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.Expression = type { i32, i32 }
%struct.CountSum = type { i32, i32 }

@expressionsLength = hidden global i32 0, align 4
@countSumsLength = hidden global i32 0, align 4
@print.s = internal global [19 x i8] zeroinitializer, align 16
@.str = private unnamed_addr constant [10 x i8] c"%9d = %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"\0A\0A%s\0A\0A\00", align 1
@expressions = hidden global [13122 x %struct.Expression] zeroinitializer, align 16
@countSums = hidden global [13122 x %struct.CountSum] zeroinitializer, align 16
@.str.2 = private unnamed_addr constant [35 x i8] c"Show all solutions that sum to 100\00", align 1
@__const.main.ex = private unnamed_addr constant %struct.Expression { i32 100, i32 0 }, align 4
@.str.3 = private unnamed_addr constant [62 x i8] c"Show the positve sum that has the maximum number of solutions\00", align 1
@.str.4 = private unnamed_addr constant [21 x i8] c"%d has %d solutions\0A\00", align 1
@.str.5 = private unnamed_addr constant [56 x i8] c"Show the lowest positive number that can't be expressed\00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@.str.7 = private unnamed_addr constant [51 x i8] c"Show the ten highest numbers that can be expressed\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @compareExpressionBySum(%struct.Expression* %a, %struct.Expression* %b) #0 {
entry:
  %a.addr = alloca %struct.Expression*, align 4
  %b.addr = alloca %struct.Expression*, align 4
  store %struct.Expression* %a, %struct.Expression** %a.addr, align 4
  store %struct.Expression* %b, %struct.Expression** %b.addr, align 4
  %0 = load %struct.Expression*, %struct.Expression** %a.addr, align 4
  %sum = getelementptr inbounds %struct.Expression, %struct.Expression* %0, i32 0, i32 0
  %1 = load i32, i32* %sum, align 4
  %2 = load %struct.Expression*, %struct.Expression** %b.addr, align 4
  %sum1 = getelementptr inbounds %struct.Expression, %struct.Expression* %2, i32 0, i32 0
  %3 = load i32, i32* %sum1, align 4
  %sub = sub nsw i32 %1, %3
  ret i32 %sub
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @compareCountSumsByCount(%struct.CountSum* %a, %struct.CountSum* %b) #0 {
entry:
  %a.addr = alloca %struct.CountSum*, align 4
  %b.addr = alloca %struct.CountSum*, align 4
  store %struct.CountSum* %a, %struct.CountSum** %a.addr, align 4
  store %struct.CountSum* %b, %struct.CountSum** %b.addr, align 4
  %0 = load %struct.CountSum*, %struct.CountSum** %a.addr, align 4
  %counts = getelementptr inbounds %struct.CountSum, %struct.CountSum* %0, i32 0, i32 0
  %1 = load i32, i32* %counts, align 4
  %2 = load %struct.CountSum*, %struct.CountSum** %b.addr, align 4
  %counts1 = getelementptr inbounds %struct.CountSum, %struct.CountSum* %2, i32 0, i32 0
  %3 = load i32, i32* %counts1, align 4
  %sub = sub nsw i32 %1, %3
  ret i32 %sub
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @evaluate(i32 %code) #0 {
entry:
  %code.addr = alloca i32, align 4
  %value = alloca i32, align 4
  %number = alloca i32, align 4
  %power = alloca i32, align 4
  %k = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  store i32 0, i32* %value, align 4
  store i32 0, i32* %number, align 4
  store i32 1, i32* %power, align 4
  store i32 9, i32* %k, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %k, align 4
  %cmp = icmp sge i32 %0, 1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %power, align 4
  %2 = load i32, i32* %k, align 4
  %mul = mul nsw i32 %1, %2
  %3 = load i32, i32* %number, align 4
  %add = add nsw i32 %mul, %3
  store i32 %add, i32* %number, align 4
  %4 = load i32, i32* %code.addr, align 4
  %rem = srem i32 %4, 3
  switch i32 %rem, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb2
    i32 2, label %sw.bb3
  ]

sw.bb:                                            ; preds = %for.body
  %5 = load i32, i32* %value, align 4
  %6 = load i32, i32* %number, align 4
  %add1 = add nsw i32 %5, %6
  store i32 %add1, i32* %value, align 4
  store i32 0, i32* %number, align 4
  store i32 1, i32* %power, align 4
  br label %sw.epilog

sw.bb2:                                           ; preds = %for.body
  %7 = load i32, i32* %value, align 4
  %8 = load i32, i32* %number, align 4
  %sub = sub nsw i32 %7, %8
  store i32 %sub, i32* %value, align 4
  store i32 0, i32* %number, align 4
  store i32 1, i32* %power, align 4
  br label %sw.epilog

sw.bb3:                                           ; preds = %for.body
  %9 = load i32, i32* %power, align 4
  %mul4 = mul nsw i32 %9, 10
  store i32 %mul4, i32* %power, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %for.body, %sw.bb3, %sw.bb2, %sw.bb
  %10 = load i32, i32* %code.addr, align 4
  %div = sdiv i32 %10, 3
  store i32 %div, i32* %code.addr, align 4
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %11 = load i32, i32* %k, align 4
  %dec = add nsw i32 %11, -1
  store i32 %dec, i32* %k, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load i32, i32* %value, align 4
  ret i32 %12
}

; Function Attrs: noinline nounwind optnone
define hidden void @print(i32 %code) #0 {
entry:
  %code.addr = alloca i32, align 4
  %p = alloca i8*, align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %k = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @print.s, i32 0, i32 0), i8** %p, align 4
  store i32 19683, i32* %a, align 4
  store i32 6561, i32* %b, align 4
  store i32 1, i32* %k, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %k, align 4
  %cmp = icmp sle i32 %0, 9
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %code.addr, align 4
  %2 = load i32, i32* %a, align 4
  %rem = srem i32 %1, %2
  %3 = load i32, i32* %b, align 4
  %div = sdiv i32 %rem, %3
  switch i32 %div, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb2
  ]

sw.bb:                                            ; preds = %for.body
  %4 = load i32, i32* %k, align 4
  %cmp1 = icmp sgt i32 %4, 1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %sw.bb
  %5 = load i8*, i8** %p, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %5, i32 1
  store i8* %incdec.ptr, i8** %p, align 4
  store i8 43, i8* %5, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %sw.bb
  br label %sw.epilog

sw.bb2:                                           ; preds = %for.body
  %6 = load i8*, i8** %p, align 4
  %incdec.ptr3 = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr3, i8** %p, align 4
  store i8 45, i8* %6, align 1
  br label %sw.epilog

sw.epilog:                                        ; preds = %for.body, %sw.bb2, %if.end
  %7 = load i32, i32* %b, align 4
  store i32 %7, i32* %a, align 4
  %8 = load i32, i32* %b, align 4
  %div4 = sdiv i32 %8, 3
  store i32 %div4, i32* %b, align 4
  %9 = load i32, i32* %k, align 4
  %add = add nsw i32 48, %9
  %conv = trunc i32 %add to i8
  %10 = load i8*, i8** %p, align 4
  %incdec.ptr5 = getelementptr inbounds i8, i8* %10, i32 1
  store i8* %incdec.ptr5, i8** %p, align 4
  store i8 %conv, i8* %10, align 1
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %11 = load i32, i32* %k, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load i8*, i8** %p, align 4
  store i8 0, i8* %12, align 1
  %13 = load i32, i32* %code.addr, align 4
  %call = call i32 @evaluate(i32 %13)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i32 0, i32 0), i32 %call, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @print.s, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @comment(i8* %string) #0 {
entry:
  %string.addr = alloca i8*, align 4
  store i8* %string, i8** %string.addr, align 4
  %0 = load i8*, i8** %string.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* %0)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @init() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %i2 = alloca i32, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 13122
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %call = call i32 @evaluate(i32 %1)
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [13122 x %struct.Expression], [13122 x %struct.Expression]* @expressions, i32 0, i32 %2
  %sum = getelementptr inbounds %struct.Expression, %struct.Expression* %arrayidx, i32 0, i32 0
  store i32 %call, i32* %sum, align 8
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [13122 x %struct.Expression], [13122 x %struct.Expression]* @expressions, i32 0, i32 %4
  %code = getelementptr inbounds %struct.Expression, %struct.Expression* %arrayidx1, i32 0, i32 1
  store i32 %3, i32* %code, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 13122, i32* @expressionsLength, align 4
  %6 = load i32, i32* @expressionsLength, align 4
  call void @qsort(i8* bitcast ([13122 x %struct.Expression]* @expressions to i8*), i32 %6, i32 8, i32 (i8*, i8*)* bitcast (i32 (%struct.Expression*, %struct.Expression*)* @compareExpressionBySum to i32 (i8*, i8*)*))
  store i32 0, i32* %j, align 4
  store i32 1, i32* getelementptr inbounds ([13122 x %struct.CountSum], [13122 x %struct.CountSum]* @countSums, i32 0, i32 0, i32 0), align 16
  %7 = load i32, i32* getelementptr inbounds ([13122 x %struct.Expression], [13122 x %struct.Expression]* @expressions, i32 0, i32 0, i32 0), align 16
  store i32 %7, i32* getelementptr inbounds ([13122 x %struct.CountSum], [13122 x %struct.CountSum]* @countSums, i32 0, i32 0, i32 1), align 4
  store i32 0, i32* %i2, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc20, %for.end
  %8 = load i32, i32* %i2, align 4
  %9 = load i32, i32* @expressionsLength, align 4
  %cmp4 = icmp slt i32 %8, %9
  br i1 %cmp4, label %for.body5, label %for.end22

for.body5:                                        ; preds = %for.cond3
  %10 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds [13122 x %struct.CountSum], [13122 x %struct.CountSum]* @countSums, i32 0, i32 %10
  %sum7 = getelementptr inbounds %struct.CountSum, %struct.CountSum* %arrayidx6, i32 0, i32 1
  %11 = load i32, i32* %sum7, align 4
  %12 = load i32, i32* %i2, align 4
  %arrayidx8 = getelementptr inbounds [13122 x %struct.Expression], [13122 x %struct.Expression]* @expressions, i32 0, i32 %12
  %sum9 = getelementptr inbounds %struct.Expression, %struct.Expression* %arrayidx8, i32 0, i32 0
  %13 = load i32, i32* %sum9, align 8
  %cmp10 = icmp ne i32 %11, %13
  br i1 %cmp10, label %if.then, label %if.else

if.then:                                          ; preds = %for.body5
  %14 = load i32, i32* %j, align 4
  %inc11 = add nsw i32 %14, 1
  store i32 %inc11, i32* %j, align 4
  %15 = load i32, i32* %j, align 4
  %arrayidx12 = getelementptr inbounds [13122 x %struct.CountSum], [13122 x %struct.CountSum]* @countSums, i32 0, i32 %15
  %counts = getelementptr inbounds %struct.CountSum, %struct.CountSum* %arrayidx12, i32 0, i32 0
  store i32 1, i32* %counts, align 8
  %16 = load i32, i32* %i2, align 4
  %arrayidx13 = getelementptr inbounds [13122 x %struct.Expression], [13122 x %struct.Expression]* @expressions, i32 0, i32 %16
  %sum14 = getelementptr inbounds %struct.Expression, %struct.Expression* %arrayidx13, i32 0, i32 0
  %17 = load i32, i32* %sum14, align 8
  %18 = load i32, i32* %j, align 4
  %arrayidx15 = getelementptr inbounds [13122 x %struct.CountSum], [13122 x %struct.CountSum]* @countSums, i32 0, i32 %18
  %sum16 = getelementptr inbounds %struct.CountSum, %struct.CountSum* %arrayidx15, i32 0, i32 1
  store i32 %17, i32* %sum16, align 4
  br label %if.end

if.else:                                          ; preds = %for.body5
  %19 = load i32, i32* %j, align 4
  %arrayidx17 = getelementptr inbounds [13122 x %struct.CountSum], [13122 x %struct.CountSum]* @countSums, i32 0, i32 %19
  %counts18 = getelementptr inbounds %struct.CountSum, %struct.CountSum* %arrayidx17, i32 0, i32 0
  %20 = load i32, i32* %counts18, align 8
  %inc19 = add nsw i32 %20, 1
  store i32 %inc19, i32* %counts18, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc20

for.inc20:                                        ; preds = %if.end
  %21 = load i32, i32* %i2, align 4
  %inc21 = add nsw i32 %21, 1
  store i32 %inc21, i32* %i2, align 4
  br label %for.cond3

for.end22:                                        ; preds = %for.cond3
  %22 = load i32, i32* %j, align 4
  %add = add nsw i32 %22, 1
  store i32 %add, i32* @countSumsLength, align 4
  %23 = load i32, i32* @countSumsLength, align 4
  call void @qsort(i8* bitcast ([13122 x %struct.CountSum]* @countSums to i8*), i32 %23, i32 8, i32 (i8*, i8*)* bitcast (i32 (%struct.CountSum*, %struct.CountSum*)* @compareCountSumsByCount to i32 (i8*, i8*)*))
  ret void
}

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %givenSum = alloca i32, align 4
  %ex = alloca %struct.Expression, align 4
  %found = alloca %struct.Expression*, align 4
  %maxSumIndex = alloca i32, align 4
  %value = alloca i32, align 4
  %ex21 = alloca %struct.Expression, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @init()
  call void @comment(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2, i32 0, i32 0))
  store i32 100, i32* %givenSum, align 4
  %0 = bitcast %struct.Expression* %ex to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 bitcast (%struct.Expression* @__const.main.ex to i8*), i32 8, i1 false)
  %1 = bitcast %struct.Expression* %ex to i8*
  %2 = load i32, i32* @expressionsLength, align 4
  %call = call i8* @bsearch(i8* %1, i8* bitcast ([13122 x %struct.Expression]* @expressions to i8*), i32 %2, i32 8, i32 (i8*, i8*)* bitcast (i32 (%struct.Expression*, %struct.Expression*)* @compareExpressionBySum to i32 (i8*, i8*)*))
  %3 = bitcast i8* %call to %struct.Expression*
  store %struct.Expression* %3, %struct.Expression** %found, align 4
  %tobool = icmp ne %struct.Expression* %3, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %4 = load %struct.Expression*, %struct.Expression** %found, align 4
  %cmp = icmp ne %struct.Expression* %4, getelementptr inbounds ([13122 x %struct.Expression], [13122 x %struct.Expression]* @expressions, i32 0, i32 0)
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %5 = load %struct.Expression*, %struct.Expression** %found, align 4
  %add.ptr = getelementptr inbounds %struct.Expression, %struct.Expression* %5, i32 -1
  %sum = getelementptr inbounds %struct.Expression, %struct.Expression* %add.ptr, i32 0, i32 0
  %6 = load i32, i32* %sum, align 4
  %cmp1 = icmp eq i32 %6, 100
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %7 = phi i1 [ false, %while.cond ], [ %cmp1, %land.rhs ]
  br i1 %7, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %8 = load %struct.Expression*, %struct.Expression** %found, align 4
  %incdec.ptr = getelementptr inbounds %struct.Expression, %struct.Expression* %8, i32 -1
  store %struct.Expression* %incdec.ptr, %struct.Expression** %found, align 4
  br label %while.cond

while.end:                                        ; preds = %land.end
  br label %while.cond2

while.cond2:                                      ; preds = %while.body8, %while.end
  %9 = load %struct.Expression*, %struct.Expression** %found, align 4
  %10 = load i32, i32* @expressionsLength, align 4
  %arrayidx = getelementptr inbounds [13122 x %struct.Expression], [13122 x %struct.Expression]* @expressions, i32 0, i32 %10
  %cmp3 = icmp ne %struct.Expression* %9, %arrayidx
  br i1 %cmp3, label %land.rhs4, label %land.end7

land.rhs4:                                        ; preds = %while.cond2
  %11 = load %struct.Expression*, %struct.Expression** %found, align 4
  %sum5 = getelementptr inbounds %struct.Expression, %struct.Expression* %11, i32 0, i32 0
  %12 = load i32, i32* %sum5, align 4
  %cmp6 = icmp eq i32 %12, 100
  br label %land.end7

land.end7:                                        ; preds = %land.rhs4, %while.cond2
  %13 = phi i1 [ false, %while.cond2 ], [ %cmp6, %land.rhs4 ]
  br i1 %13, label %while.body8, label %while.end10

while.body8:                                      ; preds = %land.end7
  %14 = load %struct.Expression*, %struct.Expression** %found, align 4
  %incdec.ptr9 = getelementptr inbounds %struct.Expression, %struct.Expression* %14, i32 1
  store %struct.Expression* %incdec.ptr9, %struct.Expression** %found, align 4
  %code = getelementptr inbounds %struct.Expression, %struct.Expression* %14, i32 0, i32 1
  %15 = load i32, i32* %code, align 4
  call void @print(i32 %15)
  br label %while.cond2

while.end10:                                      ; preds = %land.end7
  br label %if.end

if.end:                                           ; preds = %while.end10, %entry
  call void @comment(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.3, i32 0, i32 0))
  %16 = load i32, i32* @countSumsLength, align 4
  %sub = sub nsw i32 %16, 1
  store i32 %sub, i32* %maxSumIndex, align 4
  br label %while.cond11

while.cond11:                                     ; preds = %while.body15, %if.end
  %17 = load i32, i32* %maxSumIndex, align 4
  %arrayidx12 = getelementptr inbounds [13122 x %struct.CountSum], [13122 x %struct.CountSum]* @countSums, i32 0, i32 %17
  %sum13 = getelementptr inbounds %struct.CountSum, %struct.CountSum* %arrayidx12, i32 0, i32 1
  %18 = load i32, i32* %sum13, align 4
  %cmp14 = icmp slt i32 %18, 0
  br i1 %cmp14, label %while.body15, label %while.end16

while.body15:                                     ; preds = %while.cond11
  %19 = load i32, i32* %maxSumIndex, align 4
  %dec = add nsw i32 %19, -1
  store i32 %dec, i32* %maxSumIndex, align 4
  br label %while.cond11

while.end16:                                      ; preds = %while.cond11
  %20 = load i32, i32* %maxSumIndex, align 4
  %arrayidx17 = getelementptr inbounds [13122 x %struct.CountSum], [13122 x %struct.CountSum]* @countSums, i32 0, i32 %20
  %sum18 = getelementptr inbounds %struct.CountSum, %struct.CountSum* %arrayidx17, i32 0, i32 1
  %21 = load i32, i32* %sum18, align 4
  %22 = load i32, i32* %maxSumIndex, align 4
  %arrayidx19 = getelementptr inbounds [13122 x %struct.CountSum], [13122 x %struct.CountSum]* @countSums, i32 0, i32 %22
  %counts = getelementptr inbounds %struct.CountSum, %struct.CountSum* %arrayidx19, i32 0, i32 0
  %23 = load i32, i32* %counts, align 8
  %call20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i32 0, i32 0), i32 %21, i32 %23)
  call void @comment(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.5, i32 0, i32 0))
  store i32 0, i32* %value, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.end16
  %sum22 = getelementptr inbounds %struct.Expression, %struct.Expression* %ex21, i32 0, i32 0
  %24 = load i32, i32* %value, align 4
  store i32 %24, i32* %sum22, align 4
  %code23 = getelementptr inbounds %struct.Expression, %struct.Expression* %ex21, i32 0, i32 1
  store i32 0, i32* %code23, align 4
  %25 = bitcast %struct.Expression* %ex21 to i8*
  %26 = load i32, i32* @expressionsLength, align 4
  %call24 = call i8* @bsearch(i8* %25, i8* bitcast ([13122 x %struct.Expression]* @expressions to i8*), i32 %26, i32 8, i32 (i8*, i8*)* bitcast (i32 (%struct.Expression*, %struct.Expression*)* @compareExpressionBySum to i32 (i8*, i8*)*))
  %tobool25 = icmp ne i8* %call24, null
  br i1 %tobool25, label %if.end28, label %if.then26

if.then26:                                        ; preds = %for.cond
  %27 = load i32, i32* %value, align 4
  %call27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0), i32 %27)
  br label %for.end

if.end28:                                         ; preds = %for.cond
  br label %for.inc

for.inc:                                          ; preds = %if.end28
  %28 = load i32, i32* %value, align 4
  %inc = add nsw i32 %28, 1
  store i32 %inc, i32* %value, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then26
  call void @comment(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.7, i32 0, i32 0))
  %29 = load i32, i32* @expressionsLength, align 4
  %sub29 = sub nsw i32 %29, 1
  store i32 %sub29, i32* %i, align 4
  br label %for.cond30

for.cond30:                                       ; preds = %for.inc35, %for.end
  %30 = load i32, i32* %i, align 4
  %31 = load i32, i32* @expressionsLength, align 4
  %sub31 = sub nsw i32 %31, 10
  %cmp32 = icmp sge i32 %30, %sub31
  br i1 %cmp32, label %for.body, label %for.end37

for.body:                                         ; preds = %for.cond30
  %32 = load i32, i32* %i, align 4
  %arrayidx33 = getelementptr inbounds [13122 x %struct.Expression], [13122 x %struct.Expression]* @expressions, i32 0, i32 %32
  %code34 = getelementptr inbounds %struct.Expression, %struct.Expression* %arrayidx33, i32 0, i32 1
  %33 = load i32, i32* %code34, align 4
  call void @print(i32 %33)
  br label %for.inc35

for.inc35:                                        ; preds = %for.body
  %34 = load i32, i32* %i, align 4
  %dec36 = add nsw i32 %34, -1
  store i32 %dec36, i32* %i, align 4
  br label %for.cond30

for.end37:                                        ; preds = %for.cond30
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare i8* @bsearch(i8* %0, i8* %1, i32 %2, i32 %3, i32 (i8*, i8*)* %4) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %sum, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %sum1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %1, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147418112
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for compareExpressionBySum()

; entering Souper's runOnFunction() for compareCountSumsByCount()

; ModuleID = './Sum_to_100.c.bc'
source_filename = "./Sum_to_100.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.Expression = type { i32, i32 }
%struct.CountSum = type { i32, i32 }

@expressionsLength = hidden global i32 0, align 4
@countSumsLength = hidden global i32 0, align 4
@print.s = internal global [19 x i8] zeroinitializer, align 16
@.str = private unnamed_addr constant [10 x i8] c"%9d = %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"\0A\0A%s\0A\0A\00", align 1
@expressions = hidden global [13122 x %struct.Expression] zeroinitializer, align 16
@countSums = hidden global [13122 x %struct.CountSum] zeroinitializer, align 16
@.str.2 = private unnamed_addr constant [35 x i8] c"Show all solutions that sum to 100\00", align 1
@__const.main.ex = private unnamed_addr constant %struct.Expression { i32 100, i32 0 }, align 4
@.str.3 = private unnamed_addr constant [62 x i8] c"Show the positve sum that has the maximum number of solutions\00", align 1
@.str.4 = private unnamed_addr constant [21 x i8] c"%d has %d solutions\0A\00", align 1
@.str.5 = private unnamed_addr constant [56 x i8] c"Show the lowest positive number that can't be expressed\00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@.str.7 = private unnamed_addr constant [51 x i8] c"Show the ten highest numbers that can be expressed\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @compareExpressionBySum(%struct.Expression* %a, %struct.Expression* %b) #0 {
entry:
  %a.addr = alloca %struct.Expression*, align 4
  %b.addr = alloca %struct.Expression*, align 4
  store %struct.Expression* %a, %struct.Expression** %a.addr, align 4
  store %struct.Expression* %b, %struct.Expression** %b.addr, align 4
  %0 = load %struct.Expression*, %struct.Expression** %a.addr, align 4
  %sum = getelementptr inbounds %struct.Expression, %struct.Expression* %0, i32 0, i32 0
  %1 = load i32, i32* %sum, align 4
  %2 = load %struct.Expression*, %struct.Expression** %b.addr, align 4
  %sum1 = getelementptr inbounds %struct.Expression, %struct.Expression* %2, i32 0, i32 0
  %3 = load i32, i32* %sum1, align 4
  %sub = sub nsw i32 %1, %3
  ret i32 %sub
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @compareCountSumsByCount(%struct.CountSum* %a, %struct.CountSum* %b) #0 {
entry:
  %a.addr = alloca %struct.CountSum*, align 4
  %b.addr = alloca %struct.CountSum*, align 4
  store %struct.CountSum* %a, %struct.CountSum** %a.addr, align 4
  store %struct.CountSum* %b, %struct.CountSum** %b.addr, align 4
  %0 = load %struct.CountSum*, %struct.CountSum** %a.addr, align 4
  %counts = getelementptr inbounds %struct.CountSum, %struct.CountSum* %0, i32 0, i32 0
  %1 = load i32, i32* %counts, align 4
  %2 = load %struct.CountSum*, %struct.CountSum** %b.addr, align 4
  %counts1 = getelementptr inbounds %struct.CountSum, %struct.CountSum* %2, i32 0, i32 0
  %3 = load i32, i32* %counts1, align 4
  %sub = sub nsw i32 %1, %3
  ret i32 %sub
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @evaluate(i32 %code) #0 {
entry:
  %code.addr = alloca i32, align 4
  %value = alloca i32, align 4
  %number = alloca i32, align 4
  %power = alloca i32, align 4
  %k = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  store i32 0, i32* %value, align 4
  store i32 0, i32* %number, align 4
  store i32 1, i32* %power, align 4
  store i32 9, i32* %k, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %k, align 4
  %cmp = icmp sge i32 %0, 1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %power, align 4
  %2 = load i32, i32* %k, align 4
  %mul = mul nsw i32 %1, %2
  %3 = load i32, i32* %number, align 4
  %add = add nsw i32 %mul, %3
  store i32 %add, i32* %number, align 4
  %4 = load i32, i32* %code.addr, align 4
  %rem = srem i32 %4, 3
  switch i32 %rem, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb2
    i32 2, label %sw.bb3
  ]

sw.bb:                                            ; preds = %for.body
  %5 = load i32, i32* %value, align 4
  %6 = load i32, i32* %number, align 4
  %add1 = add nsw i32 %5, %6
  store i32 %add1, i32* %value, align 4
  store i32 0, i32* %number, align 4
  store i32 1, i32* %power, align 4
  br label %sw.epilog

sw.bb2:                                           ; preds = %for.body
  %7 = load i32, i32* %value, align 4
  %8 = load i32, i32* %number, align 4
  %sub = sub nsw i32 %7, %8
  store i32 %sub, i32* %value, align 4
  store i32 0, i32* %number, align 4
  store i32 1, i32* %power, align 4
  br label %sw.epilog

sw.bb3:                                           ; preds = %for.body
  %9 = load i32, i32* %power, align 4
  %mul4 = mul nsw i32 %9, 10
  store i32 %mul4, i32* %power, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %for.body, %sw.bb3, %sw.bb2, %sw.bb
  %10 = load i32, i32* %code.addr, align 4
  %div = sdiv i32 %10, 3
  store i32 %div, i32* %code.addr, align 4
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %11 = load i32, i32* %k, align 4
  %dec = add nsw i32 %11, -1
  store i32 %dec, i32* %k, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load i32, i32* %value, align 4
  ret i32 %12
}

; Function Attrs: noinline nounwind optnone
define hidden void @print(i32 %code) #0 {
entry:
  %code.addr = alloca i32, align 4
  %p = alloca i8*, align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %k = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @print.s, i32 0, i32 0), i8** %p, align 4
  store i32 19683, i32* %a, align 4
  store i32 6561, i32* %b, align 4
  store i32 1, i32* %k, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %k, align 4
  %cmp = icmp sle i32 %0, 9
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %code.addr, align 4
  %2 = load i32, i32* %a, align 4
  %rem = srem i32 %1, %2
  %3 = load i32, i32* %b, align 4
  %div = sdiv i32 %rem, %3
  switch i32 %div, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb2
  ]

sw.bb:                                            ; preds = %for.body
  %4 = load i32, i32* %k, align 4
  %cmp1 = icmp sgt i32 %4, 1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %sw.bb
  %5 = load i8*, i8** %p, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %5, i32 1
  store i8* %incdec.ptr, i8** %p, align 4
  store i8 43, i8* %5, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %sw.bb
  br label %sw.epilog

sw.bb2:                                           ; preds = %for.body
  %6 = load i8*, i8** %p, align 4
  %incdec.ptr3 = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr3, i8** %p, align 4
  store i8 45, i8* %6, align 1
  br label %sw.epilog

sw.epilog:                                        ; preds = %for.body, %sw.bb2, %if.end
  %7 = load i32, i32* %b, align 4
  store i32 %7, i32* %a, align 4
  %8 = load i32, i32* %b, align 4
  %div4 = sdiv i32 %8, 3
  store i32 %div4, i32* %b, align 4
  %9 = load i32, i32* %k, align 4
  %add = add nsw i32 48, %9
  %conv = trunc i32 %add to i8
  %10 = load i8*, i8** %p, align 4
  %incdec.ptr5 = getelementptr inbounds i8, i8* %10, i32 1
  store i8* %incdec.ptr5, i8** %p, align 4
  store i8 %conv, i8* %10, align 1
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %11 = load i32, i32* %k, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load i8*, i8** %p, align 4
  store i8 0, i8* %12, align 1
  %13 = load i32, i32* %code.addr, align 4
  %call = call i32 @evaluate(i32 %13)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i32 0, i32 0), i32 %call, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @print.s, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @comment(i8* %string) #0 {
entry:
  %string.addr = alloca i8*, align 4
  store i8* %string, i8** %string.addr, align 4
  %0 = load i8*, i8** %string.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* %0)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @init() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %i2 = alloca i32, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 13122
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %call = call i32 @evaluate(i32 %1)
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [13122 x %struct.Expression], [13122 x %struct.Expression]* @expressions, i32 0, i32 %2
  %sum = getelementptr inbounds %struct.Expression, %struct.Expression* %arrayidx, i32 0, i32 0
  store i32 %call, i32* %sum, align 8
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [13122 x %struct.Expression], [13122 x %struct.Expression]* @expressions, i32 0, i32 %4
  %code = getelementptr inbounds %struct.Expression, %struct.Expression* %arrayidx1, i32 0, i32 1
  store i32 %3, i32* %code, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 13122, i32* @expressionsLength, align 4
  %6 = load i32, i32* @expressionsLength, align 4
  call void @qsort(i8* bitcast ([13122 x %struct.Expression]* @expressions to i8*), i32 %6, i32 8, i32 (i8*, i8*)* bitcast (i32 (%struct.Expression*, %struct.Expression*)* @compareExpressionBySum to i32 (i8*, i8*)*))
  store i32 0, i32* %j, align 4
  store i32 1, i32* getelementptr inbounds ([13122 x %struct.CountSum], [13122 x %struct.CountSum]* @countSums, i32 0, i32 0, i32 0), align 16
  %7 = load i32, i32* getelementptr inbounds ([13122 x %struct.Expression], [13122 x %struct.Expression]* @expressions, i32 0, i32 0, i32 0), align 16
  store i32 %7, i32* getelementptr inbounds ([13122 x %struct.CountSum], [13122 x %struct.CountSum]* @countSums, i32 0, i32 0, i32 1), align 4
  store i32 0, i32* %i2, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc20, %for.end
  %8 = load i32, i32* %i2, align 4
  %9 = load i32, i32* @expressionsLength, align 4
  %cmp4 = icmp slt i32 %8, %9
  br i1 %cmp4, label %for.body5, label %for.end22

for.body5:                                        ; preds = %for.cond3
  %10 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds [13122 x %struct.CountSum], [13122 x %struct.CountSum]* @countSums, i32 0, i32 %10
  %sum7 = getelementptr inbounds %struct.CountSum, %struct.CountSum* %arrayidx6, i32 0, i32 1
  %11 = load i32, i32* %sum7, align 4
  %12 = load i32, i32* %i2, align 4
  %arrayidx8 = getelementptr inbounds [13122 x %struct.Expression], [13122 x %struct.Expression]* @expressions, i32 0, i32 %12
  %sum9 = getelementptr inbounds %struct.Expression, %struct.Expression* %arrayidx8, i32 0, i32 0
  %13 = load i32, i32* %sum9, align 8
  %cmp10 = icmp ne i32 %11, %13
  br i1 %cmp10, label %if.then, label %if.else

if.then:                                          ; preds = %for.body5
  %14 = load i32, i32* %j, align 4
  %inc11 = add nsw i32 %14, 1
  store i32 %inc11, i32* %j, align 4
  %15 = load i32, i32* %j, align 4
  %arrayidx12 = getelementptr inbounds [13122 x %struct.CountSum], [13122 x %struct.CountSum]* @countSums, i32 0, i32 %15
  %counts = getelementptr inbounds %struct.CountSum, %struct.CountSum* %arrayidx12, i32 0, i32 0
  store i32 1, i32* %counts, align 8
  %16 = load i32, i32* %i2, align 4
  %arrayidx13 = getelementptr inbounds [13122 x %struct.Expression], [13122 x %struct.Expression]* @expressions, i32 0, i32 %16
  %sum14 = getelementptr inbounds %struct.Expression, %struct.Expression* %arrayidx13, i32 0, i32 0
  %17 = load i32, i32* %sum14, align 8
  %18 = load i32, i32* %j, align 4
  %arrayidx15 = getelementptr inbounds [13122 x %struct.CountSum], [13122 x %struct.CountSum]* @countSums, i32 0, i32 %18
  %sum16 = getelementptr inbounds %struct.CountSum, %struct.CountSum* %arrayidx15, i32 0, i32 1
  store i32 %17, i32* %sum16, align 4
  br label %if.end

if.else:                                          ; preds = %for.body5
  %19 = load i32, i32* %j, align 4
  %arrayidx17 = getelementptr inbounds [13122 x %struct.CountSum], [13122 x %struct.CountSum]* @countSums, i32 0, i32 %19
  %counts18 = getelementptr inbounds %struct.CountSum, %struct.CountSum* %arrayidx17, i32 0, i32 0
  %20 = load i32, i32* %counts18, align 8
  %inc19 = add nsw i32 %20, 1
  store i32 %inc19, i32* %counts18, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc20

for.inc20:                                        ; preds = %if.end
  %21 = load i32, i32* %i2, align 4
  %inc21 = add nsw i32 %21, 1
  store i32 %inc21, i32* %i2, align 4
  br label %for.cond3

for.end22:                                        ; preds = %for.cond3
  %22 = load i32, i32* %j, align 4
  %add = add nsw i32 %22, 1
  store i32 %add, i32* @countSumsLength, align 4
  %23 = load i32, i32* @countSumsLength, align 4
  call void @qsort(i8* bitcast ([13122 x %struct.CountSum]* @countSums to i8*), i32 %23, i32 8, i32 (i8*, i8*)* bitcast (i32 (%struct.CountSum*, %struct.CountSum*)* @compareCountSumsByCount to i32 (i8*, i8*)*))
  ret void
}

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %givenSum = alloca i32, align 4
  %ex = alloca %struct.Expression, align 4
  %found = alloca %struct.Expression*, align 4
  %maxSumIndex = alloca i32, align 4
  %value = alloca i32, align 4
  %ex21 = alloca %struct.Expression, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @init()
  call void @comment(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2, i32 0, i32 0))
  store i32 100, i32* %givenSum, align 4
  %0 = bitcast %struct.Expression* %ex to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 bitcast (%struct.Expression* @__const.main.ex to i8*), i32 8, i1 false)
  %1 = bitcast %struct.Expression* %ex to i8*
  %2 = load i32, i32* @expressionsLength, align 4
  %call = call i8* @bsearch(i8* %1, i8* bitcast ([13122 x %struct.Expression]* @expressions to i8*), i32 %2, i32 8, i32 (i8*, i8*)* bitcast (i32 (%struct.Expression*, %struct.Expression*)* @compareExpressionBySum to i32 (i8*, i8*)*))
  %3 = bitcast i8* %call to %struct.Expression*
  store %struct.Expression* %3, %struct.Expression** %found, align 4
  %tobool = icmp ne %struct.Expression* %3, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %4 = load %struct.Expression*, %struct.Expression** %found, align 4
  %cmp = icmp ne %struct.Expression* %4, getelementptr inbounds ([13122 x %struct.Expression], [13122 x %struct.Expression]* @expressions, i32 0, i32 0)
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %5 = load %struct.Expression*, %struct.Expression** %found, align 4
  %add.ptr = getelementptr inbounds %struct.Expression, %struct.Expression* %5, i32 -1
  %sum = getelementptr inbounds %struct.Expression, %struct.Expression* %add.ptr, i32 0, i32 0
  %6 = load i32, i32* %sum, align 4
  %cmp1 = icmp eq i32 %6, 100
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %7 = phi i1 [ false, %while.cond ], [ %cmp1, %land.rhs ]
  br i1 %7, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %8 = load %struct.Expression*, %struct.Expression** %found, align 4
  %incdec.ptr = getelementptr inbounds %struct.Expression, %struct.Expression* %8, i32 -1
  store %struct.Expression* %incdec.ptr, %struct.Expression** %found, align 4
  br label %while.cond

while.end:                                        ; preds = %land.end
  br label %while.cond2

while.cond2:                                      ; preds = %while.body8, %while.end
  %9 = load %struct.Expression*, %struct.Expression** %found, align 4
  %10 = load i32, i32* @expressionsLength, align 4
  %arrayidx = getelementptr inbounds [13122 x %struct.Expression], [13122 x %struct.Expression]* @expressions, i32 0, i32 %10
  %cmp3 = icmp ne %struct.Expression* %9, %arrayidx
  br i1 %cmp3, label %land.rhs4, label %land.end7

land.rhs4:                                        ; preds = %while.cond2
  %11 = load %struct.Expression*, %struct.Expression** %found, align 4
  %sum5 = getelementptr inbounds %struct.Expression, %struct.Expression* %11, i32 0, i32 0
  %12 = load i32, i32* %sum5, align 4
  %cmp6 = icmp eq i32 %12, 100
  br label %land.end7

land.end7:                                        ; preds = %land.rhs4, %while.cond2
  %13 = phi i1 [ false, %while.cond2 ], [ %cmp6, %land.rhs4 ]
  br i1 %13, label %while.body8, label %while.end10

while.body8:                                      ; preds = %land.end7
  %14 = load %struct.Expression*, %struct.Expression** %found, align 4
  %incdec.ptr9 = getelementptr inbounds %struct.Expression, %struct.Expression* %14, i32 1
  store %struct.Expression* %incdec.ptr9, %struct.Expression** %found, align 4
  %code = getelementptr inbounds %struct.Expression, %struct.Expression* %14, i32 0, i32 1
  %15 = load i32, i32* %code, align 4
  call void @print(i32 %15)
  br label %while.cond2

while.end10:                                      ; preds = %land.end7
  br label %if.end

if.end:                                           ; preds = %while.end10, %entry
  call void @comment(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.3, i32 0, i32 0))
  %16 = load i32, i32* @countSumsLength, align 4
  %sub = sub nsw i32 %16, 1
  store i32 %sub, i32* %maxSumIndex, align 4
  br label %while.cond11

while.cond11:                                     ; preds = %while.body15, %if.end
  %17 = load i32, i32* %maxSumIndex, align 4
  %arrayidx12 = getelementptr inbounds [13122 x %struct.CountSum], [13122 x %struct.CountSum]* @countSums, i32 0, i32 %17
  %sum13 = getelementptr inbounds %struct.CountSum, %struct.CountSum* %arrayidx12, i32 0, i32 1
  %18 = load i32, i32* %sum13, align 4
  %cmp14 = icmp slt i32 %18, 0
  br i1 %cmp14, label %while.body15, label %while.end16

while.body15:                                     ; preds = %while.cond11
  %19 = load i32, i32* %maxSumIndex, align 4
  %dec = add nsw i32 %19, -1
  store i32 %dec, i32* %maxSumIndex, align 4
  br label %while.cond11

while.end16:                                      ; preds = %while.cond11
  %20 = load i32, i32* %maxSumIndex, align 4
  %arrayidx17 = getelementptr inbounds [13122 x %struct.CountSum], [13122 x %struct.CountSum]* @countSums, i32 0, i32 %20
  %sum18 = getelementptr inbounds %struct.CountSum, %struct.CountSum* %arrayidx17, i32 0, i32 1
  %21 = load i32, i32* %sum18, align 4
  %22 = load i32, i32* %maxSumIndex, align 4
  %arrayidx19 = getelementptr inbounds [13122 x %struct.CountSum], [13122 x %struct.CountSum]* @countSums, i32 0, i32 %22
  %counts = getelementptr inbounds %struct.CountSum, %struct.CountSum* %arrayidx19, i32 0, i32 0
  %23 = load i32, i32* %counts, align 8
  %call20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i32 0, i32 0), i32 %21, i32 %23)
  call void @comment(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.5, i32 0, i32 0))
  store i32 0, i32* %value, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.end16
  %sum22 = getelementptr inbounds %struct.Expression, %struct.Expression* %ex21, i32 0, i32 0
  %24 = load i32, i32* %value, align 4
  store i32 %24, i32* %sum22, align 4
  %code23 = getelementptr inbounds %struct.Expression, %struct.Expression* %ex21, i32 0, i32 1
  store i32 0, i32* %code23, align 4
  %25 = bitcast %struct.Expression* %ex21 to i8*
  %26 = load i32, i32* @expressionsLength, align 4
  %call24 = call i8* @bsearch(i8* %25, i8* bitcast ([13122 x %struct.Expression]* @expressions to i8*), i32 %26, i32 8, i32 (i8*, i8*)* bitcast (i32 (%struct.Expression*, %struct.Expression*)* @compareExpressionBySum to i32 (i8*, i8*)*))
  %tobool25 = icmp ne i8* %call24, null
  br i1 %tobool25, label %if.end28, label %if.then26

if.then26:                                        ; preds = %for.cond
  %27 = load i32, i32* %value, align 4
  %call27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0), i32 %27)
  br label %for.end

if.end28:                                         ; preds = %for.cond
  br label %for.inc

for.inc:                                          ; preds = %if.end28
  %28 = load i32, i32* %value, align 4
  %inc = add nsw i32 %28, 1
  store i32 %inc, i32* %value, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then26
  call void @comment(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.7, i32 0, i32 0))
  %29 = load i32, i32* @expressionsLength, align 4
  %sub29 = sub nsw i32 %29, 1
  store i32 %sub29, i32* %i, align 4
  br label %for.cond30

for.cond30:                                       ; preds = %for.inc35, %for.end
  %30 = load i32, i32* %i, align 4
  %31 = load i32, i32* @expressionsLength, align 4
  %sub31 = sub nsw i32 %31, 10
  %cmp32 = icmp sge i32 %30, %sub31
  br i1 %cmp32, label %for.body, label %for.end37

for.body:                                         ; preds = %for.cond30
  %32 = load i32, i32* %i, align 4
  %arrayidx33 = getelementptr inbounds [13122 x %struct.Expression], [13122 x %struct.Expression]* @expressions, i32 0, i32 %32
  %code34 = getelementptr inbounds %struct.Expression, %struct.Expression* %arrayidx33, i32 0, i32 1
  %33 = load i32, i32* %code34, align 4
  call void @print(i32 %33)
  br label %for.inc35

for.inc35:                                        ; preds = %for.body
  %34 = load i32, i32* %i, align 4
  %dec36 = add nsw i32 %34, -1
  store i32 %dec36, i32* %i, align 4
  br label %for.cond30

for.end37:                                        ; preds = %for.cond30
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare i8* @bsearch(i8* %0, i8* %1, i32 %2, i32 %3, i32 (i8*, i8*)* %4) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %counts, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %counts1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %1, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2
#########################################################
; exiting Souper's runOnFunction() for compareCountSumsByCount()

; entering Souper's runOnFunction() for evaluate()

; ModuleID = './Sum_to_100.c.bc'
source_filename = "./Sum_to_100.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.Expression = type { i32, i32 }
%struct.CountSum = type { i32, i32 }

@expressionsLength = hidden global i32 0, align 4
@countSumsLength = hidden global i32 0, align 4
@print.s = internal global [19 x i8] zeroinitializer, align 16
@.str = private unnamed_addr constant [10 x i8] c"%9d = %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"\0A\0A%s\0A\0A\00", align 1
@expressions = hidden global [13122 x %struct.Expression] zeroinitializer, align 16
@countSums = hidden global [13122 x %struct.CountSum] zeroinitializer, align 16
@.str.2 = private unnamed_addr constant [35 x i8] c"Show all solutions that sum to 100\00", align 1
@__const.main.ex = private unnamed_addr constant %struct.Expression { i32 100, i32 0 }, align 4
@.str.3 = private unnamed_addr constant [62 x i8] c"Show the positve sum that has the maximum number of solutions\00", align 1
@.str.4 = private unnamed_addr constant [21 x i8] c"%d has %d solutions\0A\00", align 1
@.str.5 = private unnamed_addr constant [56 x i8] c"Show the lowest positive number that can't be expressed\00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@.str.7 = private unnamed_addr constant [51 x i8] c"Show the ten highest numbers that can be expressed\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @compareExpressionBySum(%struct.Expression* %a, %struct.Expression* %b) #0 {
entry:
  %a.addr = alloca %struct.Expression*, align 4
  %b.addr = alloca %struct.Expression*, align 4
  store %struct.Expression* %a, %struct.Expression** %a.addr, align 4
  store %struct.Expression* %b, %struct.Expression** %b.addr, align 4
  %0 = load %struct.Expression*, %struct.Expression** %a.addr, align 4
  %sum = getelementptr inbounds %struct.Expression, %struct.Expression* %0, i32 0, i32 0
  %1 = load i32, i32* %sum, align 4
  %2 = load %struct.Expression*, %struct.Expression** %b.addr, align 4
  %sum1 = getelementptr inbounds %struct.Expression, %struct.Expression* %2, i32 0, i32 0
  %3 = load i32, i32* %sum1, align 4
  %sub = sub nsw i32 %1, %3
  ret i32 %sub
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @compareCountSumsByCount(%struct.CountSum* %a, %struct.CountSum* %b) #0 {
entry:
  %a.addr = alloca %struct.CountSum*, align 4
  %b.addr = alloca %struct.CountSum*, align 4
  store %struct.CountSum* %a, %struct.CountSum** %a.addr, align 4
  store %struct.CountSum* %b, %struct.CountSum** %b.addr, align 4
  %0 = load %struct.CountSum*, %struct.CountSum** %a.addr, align 4
  %counts = getelementptr inbounds %struct.CountSum, %struct.CountSum* %0, i32 0, i32 0
  %1 = load i32, i32* %counts, align 4
  %2 = load %struct.CountSum*, %struct.CountSum** %b.addr, align 4
  %counts1 = getelementptr inbounds %struct.CountSum, %struct.CountSum* %2, i32 0, i32 0
  %3 = load i32, i32* %counts1, align 4
  %sub = sub nsw i32 %1, %3
  ret i32 %sub
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @evaluate(i32 %code) #0 {
entry:
  %code.addr = alloca i32, align 4
  %value = alloca i32, align 4
  %number = alloca i32, align 4
  %power = alloca i32, align 4
  %k = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  store i32 0, i32* %value, align 4
  store i32 0, i32* %number, align 4
  store i32 1, i32* %power, align 4
  store i32 9, i32* %k, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %k, align 4
  %cmp = icmp sge i32 %0, 1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %power, align 4
  %2 = load i32, i32* %k, align 4
  %mul = mul nsw i32 %1, %2
  %3 = load i32, i32* %number, align 4
  %add = add nsw i32 %mul, %3
  store i32 %add, i32* %number, align 4
  %4 = load i32, i32* %code.addr, align 4
  %rem = srem i32 %4, 3
  switch i32 %rem, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb2
    i32 2, label %sw.bb3
  ]

sw.bb:                                            ; preds = %for.body
  %5 = load i32, i32* %value, align 4
  %6 = load i32, i32* %number, align 4
  %add1 = add nsw i32 %5, %6
  store i32 %add1, i32* %value, align 4
  store i32 0, i32* %number, align 4
  store i32 1, i32* %power, align 4
  br label %sw.epilog

sw.bb2:                                           ; preds = %for.body
  %7 = load i32, i32* %value, align 4
  %8 = load i32, i32* %number, align 4
  %sub = sub nsw i32 %7, %8
  store i32 %sub, i32* %value, align 4
  store i32 0, i32* %number, align 4
  store i32 1, i32* %power, align 4
  br label %sw.epilog

sw.bb3:                                           ; preds = %for.body
  %9 = load i32, i32* %power, align 4
  %mul4 = mul nsw i32 %9, 10
  store i32 %mul4, i32* %power, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %for.body, %sw.bb3, %sw.bb2, %sw.bb
  %10 = load i32, i32* %code.addr, align 4
  %div = sdiv i32 %10, 3
  store i32 %div, i32* %code.addr, align 4
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %11 = load i32, i32* %k, align 4
  %dec = add nsw i32 %11, -1
  store i32 %dec, i32* %k, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load i32, i32* %value, align 4
  ret i32 %12
}

; Function Attrs: noinline nounwind optnone
define hidden void @print(i32 %code) #0 {
entry:
  %code.addr = alloca i32, align 4
  %p = alloca i8*, align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %k = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @print.s, i32 0, i32 0), i8** %p, align 4
  store i32 19683, i32* %a, align 4
  store i32 6561, i32* %b, align 4
  store i32 1, i32* %k, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %k, align 4
  %cmp = icmp sle i32 %0, 9
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %code.addr, align 4
  %2 = load i32, i32* %a, align 4
  %rem = srem i32 %1, %2
  %3 = load i32, i32* %b, align 4
  %div = sdiv i32 %rem, %3
  switch i32 %div, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb2
  ]

sw.bb:                                            ; preds = %for.body
  %4 = load i32, i32* %k, align 4
  %cmp1 = icmp sgt i32 %4, 1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %sw.bb
  %5 = load i8*, i8** %p, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %5, i32 1
  store i8* %incdec.ptr, i8** %p, align 4
  store i8 43, i8* %5, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %sw.bb
  br label %sw.epilog

sw.bb2:                                           ; preds = %for.body
  %6 = load i8*, i8** %p, align 4
  %incdec.ptr3 = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr3, i8** %p, align 4
  store i8 45, i8* %6, align 1
  br label %sw.epilog

sw.epilog:                                        ; preds = %for.body, %sw.bb2, %if.end
  %7 = load i32, i32* %b, align 4
  store i32 %7, i32* %a, align 4
  %8 = load i32, i32* %b, align 4
  %div4 = sdiv i32 %8, 3
  store i32 %div4, i32* %b, align 4
  %9 = load i32, i32* %k, align 4
  %add = add nsw i32 48, %9
  %conv = trunc i32 %add to i8
  %10 = load i8*, i8** %p, align 4
  %incdec.ptr5 = getelementptr inbounds i8, i8* %10, i32 1
  store i8* %incdec.ptr5, i8** %p, align 4
  store i8 %conv, i8* %10, align 1
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %11 = load i32, i32* %k, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load i8*, i8** %p, align 4
  store i8 0, i8* %12, align 1
  %13 = load i32, i32* %code.addr, align 4
  %call = call i32 @evaluate(i32 %13)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i32 0, i32 0), i32 %call, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @print.s, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @comment(i8* %string) #0 {
entry:
  %string.addr = alloca i8*, align 4
  store i8* %string, i8** %string.addr, align 4
  %0 = load i8*, i8** %string.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* %0)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @init() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %i2 = alloca i32, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 13122
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %call = call i32 @evaluate(i32 %1)
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [13122 x %struct.Expression], [13122 x %struct.Expression]* @expressions, i32 0, i32 %2
  %sum = getelementptr inbounds %struct.Expression, %struct.Expression* %arrayidx, i32 0, i32 0
  store i32 %call, i32* %sum, align 8
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [13122 x %struct.Expression], [13122 x %struct.Expression]* @expressions, i32 0, i32 %4
  %code = getelementptr inbounds %struct.Expression, %struct.Expression* %arrayidx1, i32 0, i32 1
  store i32 %3, i32* %code, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 13122, i32* @expressionsLength, align 4
  %6 = load i32, i32* @expressionsLength, align 4
  call void @qsort(i8* bitcast ([13122 x %struct.Expression]* @expressions to i8*), i32 %6, i32 8, i32 (i8*, i8*)* bitcast (i32 (%struct.Expression*, %struct.Expression*)* @compareExpressionBySum to i32 (i8*, i8*)*))
  store i32 0, i32* %j, align 4
  store i32 1, i32* getelementptr inbounds ([13122 x %struct.CountSum], [13122 x %struct.CountSum]* @countSums, i32 0, i32 0, i32 0), align 16
  %7 = load i32, i32* getelementptr inbounds ([13122 x %struct.Expression], [13122 x %struct.Expression]* @expressions, i32 0, i32 0, i32 0), align 16
  store i32 %7, i32* getelementptr inbounds ([13122 x %struct.CountSum], [13122 x %struct.CountSum]* @countSums, i32 0, i32 0, i32 1), align 4
  store i32 0, i32* %i2, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc20, %for.end
  %8 = load i32, i32* %i2, align 4
  %9 = load i32, i32* @expressionsLength, align 4
  %cmp4 = icmp slt i32 %8, %9
  br i1 %cmp4, label %for.body5, label %for.end22

for.body5:                                        ; preds = %for.cond3
  %10 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds [13122 x %struct.CountSum], [13122 x %struct.CountSum]* @countSums, i32 0, i32 %10
  %sum7 = getelementptr inbounds %struct.CountSum, %struct.CountSum* %arrayidx6, i32 0, i32 1
  %11 = load i32, i32* %sum7, align 4
  %12 = load i32, i32* %i2, align 4
  %arrayidx8 = getelementptr inbounds [13122 x %struct.Expression], [13122 x %struct.Expression]* @expressions, i32 0, i32 %12
  %sum9 = getelementptr inbounds %struct.Expression, %struct.Expression* %arrayidx8, i32 0, i32 0
  %13 = load i32, i32* %sum9, align 8
  %cmp10 = icmp ne i32 %11, %13
  br i1 %cmp10, label %if.then, label %if.else

if.then:                                          ; preds = %for.body5
  %14 = load i32, i32* %j, align 4
  %inc11 = add nsw i32 %14, 1
  store i32 %inc11, i32* %j, align 4
  %15 = load i32, i32* %j, align 4
  %arrayidx12 = getelementptr inbounds [13122 x %struct.CountSum], [13122 x %struct.CountSum]* @countSums, i32 0, i32 %15
  %counts = getelementptr inbounds %struct.CountSum, %struct.CountSum* %arrayidx12, i32 0, i32 0
  store i32 1, i32* %counts, align 8
  %16 = load i32, i32* %i2, align 4
  %arrayidx13 = getelementptr inbounds [13122 x %struct.Expression], [13122 x %struct.Expression]* @expressions, i32 0, i32 %16
  %sum14 = getelementptr inbounds %struct.Expression, %struct.Expression* %arrayidx13, i32 0, i32 0
  %17 = load i32, i32* %sum14, align 8
  %18 = load i32, i32* %j, align 4
  %arrayidx15 = getelementptr inbounds [13122 x %struct.CountSum], [13122 x %struct.CountSum]* @countSums, i32 0, i32 %18
  %sum16 = getelementptr inbounds %struct.CountSum, %struct.CountSum* %arrayidx15, i32 0, i32 1
  store i32 %17, i32* %sum16, align 4
  br label %if.end

if.else:                                          ; preds = %for.body5
  %19 = load i32, i32* %j, align 4
  %arrayidx17 = getelementptr inbounds [13122 x %struct.CountSum], [13122 x %struct.CountSum]* @countSums, i32 0, i32 %19
  %counts18 = getelementptr inbounds %struct.CountSum, %struct.CountSum* %arrayidx17, i32 0, i32 0
  %20 = load i32, i32* %counts18, align 8
  %inc19 = add nsw i32 %20, 1
  store i32 %inc19, i32* %counts18, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc20

for.inc20:                                        ; preds = %if.end
  %21 = load i32, i32* %i2, align 4
  %inc21 = add nsw i32 %21, 1
  store i32 %inc21, i32* %i2, align 4
  br label %for.cond3

for.end22:                                        ; preds = %for.cond3
  %22 = load i32, i32* %j, align 4
  %add = add nsw i32 %22, 1
  store i32 %add, i32* @countSumsLength, align 4
  %23 = load i32, i32* @countSumsLength, align 4
  call void @qsort(i8* bitcast ([13122 x %struct.CountSum]* @countSums to i8*), i32 %23, i32 8, i32 (i8*, i8*)* bitcast (i32 (%struct.CountSum*, %struct.CountSum*)* @compareCountSumsByCount to i32 (i8*, i8*)*))
  ret void
}

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %givenSum = alloca i32, align 4
  %ex = alloca %struct.Expression, align 4
  %found = alloca %struct.Expression*, align 4
  %maxSumIndex = alloca i32, align 4
  %value = alloca i32, align 4
  %ex21 = alloca %struct.Expression, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @init()
  call void @comment(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2, i32 0, i32 0))
  store i32 100, i32* %givenSum, align 4
  %0 = bitcast %struct.Expression* %ex to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 bitcast (%struct.Expression* @__const.main.ex to i8*), i32 8, i1 false)
  %1 = bitcast %struct.Expression* %ex to i8*
  %2 = load i32, i32* @expressionsLength, align 4
  %call = call i8* @bsearch(i8* %1, i8* bitcast ([13122 x %struct.Expression]* @expressions to i8*), i32 %2, i32 8, i32 (i8*, i8*)* bitcast (i32 (%struct.Expression*, %struct.Expression*)* @compareExpressionBySum to i32 (i8*, i8*)*))
  %3 = bitcast i8* %call to %struct.Expression*
  store %struct.Expression* %3, %struct.Expression** %found, align 4
  %tobool = icmp ne %struct.Expression* %3, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %4 = load %struct.Expression*, %struct.Expression** %found, align 4
  %cmp = icmp ne %struct.Expression* %4, getelementptr inbounds ([13122 x %struct.Expression], [13122 x %struct.Expression]* @expressions, i32 0, i32 0)
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %5 = load %struct.Expression*, %struct.Expression** %found, align 4
  %add.ptr = getelementptr inbounds %struct.Expression, %struct.Expression* %5, i32 -1
  %sum = getelementptr inbounds %struct.Expression, %struct.Expression* %add.ptr, i32 0, i32 0
  %6 = load i32, i32* %sum, align 4
  %cmp1 = icmp eq i32 %6, 100
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %7 = phi i1 [ false, %while.cond ], [ %cmp1, %land.rhs ]
  br i1 %7, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %8 = load %struct.Expression*, %struct.Expression** %found, align 4
  %incdec.ptr = getelementptr inbounds %struct.Expression, %struct.Expression* %8, i32 -1
  store %struct.Expression* %incdec.ptr, %struct.Expression** %found, align 4
  br label %while.cond

while.end:                                        ; preds = %land.end
  br label %while.cond2

while.cond2:                                      ; preds = %while.body8, %while.end
  %9 = load %struct.Expression*, %struct.Expression** %found, align 4
  %10 = load i32, i32* @expressionsLength, align 4
  %arrayidx = getelementptr inbounds [13122 x %struct.Expression], [13122 x %struct.Expression]* @expressions, i32 0, i32 %10
  %cmp3 = icmp ne %struct.Expression* %9, %arrayidx
  br i1 %cmp3, label %land.rhs4, label %land.end7

land.rhs4:                                        ; preds = %while.cond2
  %11 = load %struct.Expression*, %struct.Expression** %found, align 4
  %sum5 = getelementptr inbounds %struct.Expression, %struct.Expression* %11, i32 0, i32 0
  %12 = load i32, i32* %sum5, align 4
  %cmp6 = icmp eq i32 %12, 100
  br label %land.end7

land.end7:                                        ; preds = %land.rhs4, %while.cond2
  %13 = phi i1 [ false, %while.cond2 ], [ %cmp6, %land.rhs4 ]
  br i1 %13, label %while.body8, label %while.end10

while.body8:                                      ; preds = %land.end7
  %14 = load %struct.Expression*, %struct.Expression** %found, align 4
  %incdec.ptr9 = getelementptr inbounds %struct.Expression, %struct.Expression* %14, i32 1
  store %struct.Expression* %incdec.ptr9, %struct.Expression** %found, align 4
  %code = getelementptr inbounds %struct.Expression, %struct.Expression* %14, i32 0, i32 1
  %15 = load i32, i32* %code, align 4
  call void @print(i32 %15)
  br label %while.cond2

while.end10:                                      ; preds = %land.end7
  br label %if.end

if.end:                                           ; preds = %while.end10, %entry
  call void @comment(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.3, i32 0, i32 0))
  %16 = load i32, i32* @countSumsLength, align 4
  %sub = sub nsw i32 %16, 1
  store i32 %sub, i32* %maxSumIndex, align 4
  br label %while.cond11

while.cond11:                                     ; preds = %while.body15, %if.end
  %17 = load i32, i32* %maxSumIndex, align 4
  %arrayidx12 = getelementptr inbounds [13122 x %struct.CountSum], [13122 x %struct.CountSum]* @countSums, i32 0, i32 %17
  %sum13 = getelementptr inbounds %struct.CountSum, %struct.CountSum* %arrayidx12, i32 0, i32 1
  %18 = load i32, i32* %sum13, align 4
  %cmp14 = icmp slt i32 %18, 0
  br i1 %cmp14, label %while.body15, label %while.end16

while.body15:                                     ; preds = %while.cond11
  %19 = load i32, i32* %maxSumIndex, align 4
  %dec = add nsw i32 %19, -1
  store i32 %dec, i32* %maxSumIndex, align 4
  br label %while.cond11

while.end16:                                      ; preds = %while.cond11
  %20 = load i32, i32* %maxSumIndex, align 4
  %arrayidx17 = getelementptr inbounds [13122 x %struct.CountSum], [13122 x %struct.CountSum]* @countSums, i32 0, i32 %20
  %sum18 = getelementptr inbounds %struct.CountSum, %struct.CountSum* %arrayidx17, i32 0, i32 1
  %21 = load i32, i32* %sum18, align 4
  %22 = load i32, i32* %maxSumIndex, align 4
  %arrayidx19 = getelementptr inbounds [13122 x %struct.CountSum], [13122 x %struct.CountSum]* @countSums, i32 0, i32 %22
  %counts = getelementptr inbounds %struct.CountSum, %struct.CountSum* %arrayidx19, i32 0, i32 0
  %23 = load i32, i32* %counts, align 8
  %call20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i32 0, i32 0), i32 %21, i32 %23)
  call void @comment(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.5, i32 0, i32 0))
  store i32 0, i32* %value, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.end16
  %sum22 = getelementptr inbounds %struct.Expression, %struct.Expression* %ex21, i32 0, i32 0
  %24 = load i32, i32* %value, align 4
  store i32 %24, i32* %sum22, align 4
  %code23 = getelementptr inbounds %struct.Expression, %struct.Expression* %ex21, i32 0, i32 1
  store i32 0, i32* %code23, align 4
  %25 = bitcast %struct.Expression* %ex21 to i8*
  %26 = load i32, i32* @expressionsLength, align 4
  %call24 = call i8* @bsearch(i8* %25, i8* bitcast ([13122 x %struct.Expression]* @expressions to i8*), i32 %26, i32 8, i32 (i8*, i8*)* bitcast (i32 (%struct.Expression*, %struct.Expression*)* @compareExpressionBySum to i32 (i8*, i8*)*))
  %tobool25 = icmp ne i8* %call24, null
  br i1 %tobool25, label %if.end28, label %if.then26

if.then26:                                        ; preds = %for.cond
  %27 = load i32, i32* %value, align 4
  %call27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0), i32 %27)
  br label %for.end

if.end28:                                         ; preds = %for.cond
  br label %for.inc

for.inc:                                          ; preds = %if.end28
  %28 = load i32, i32* %value, align 4
  %inc = add nsw i32 %28, 1
  store i32 %inc, i32* %value, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then26
  call void @comment(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.7, i32 0, i32 0))
  %29 = load i32, i32* @expressionsLength, align 4
  %sub29 = sub nsw i32 %29, 1
  store i32 %sub29, i32* %i, align 4
  br label %for.cond30

for.cond30:                                       ; preds = %for.inc35, %for.end
  %30 = load i32, i32* %i, align 4
  %31 = load i32, i32* @expressionsLength, align 4
  %sub31 = sub nsw i32 %31, 10
  %cmp32 = icmp sge i32 %30, %sub31
  br i1 %cmp32, label %for.body, label %for.end37

for.body:                                         ; preds = %for.cond30
  %32 = load i32, i32* %i, align 4
  %arrayidx33 = getelementptr inbounds [13122 x %struct.Expression], [13122 x %struct.Expression]* @expressions, i32 0, i32 %32
  %code34 = getelementptr inbounds %struct.Expression, %struct.Expression* %arrayidx33, i32 0, i32 1
  %33 = load i32, i32* %code34, align 4
  call void @print(i32 %33)
  br label %for.inc35

for.inc35:                                        ; preds = %for.body
  %34 = load i32, i32* %i, align 4
  %dec36 = add nsw i32 %34, -1
  store i32 %dec36, i32* %i, align 4
  br label %for.cond30

for.end37:                                        ; preds = %for.cond30
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare i8* @bsearch(i8* %0, i8* %1, i32 %2, i32 %3, i32 (i8*, i8*)* %4) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sge i32 %0, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %power, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %1, %2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %number, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %mul, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = addnsw %0, %3
infer %4

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %code.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem = srem i32 %4, 3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 3:i32
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %value, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %number, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add1 = add nsw i32 %5, %6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %value, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %number, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %7, %8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %power, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul4 = mul nsw i32 %9, 10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 10:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %code.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div = sdiv i32 %10, 3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sdiv %0, 3:i32
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec = add nsw i32 %11, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %value, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i32 = addnsw %0, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem %0, 3:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mulnsw 10:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1614807090
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sdiv %0, 3:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 432013312
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for evaluate()

; entering Souper's runOnFunction() for print()

; ModuleID = './Sum_to_100.c.bc'
source_filename = "./Sum_to_100.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.Expression = type { i32, i32 }
%struct.CountSum = type { i32, i32 }

@expressionsLength = hidden global i32 0, align 4
@countSumsLength = hidden global i32 0, align 4
@print.s = internal global [19 x i8] zeroinitializer, align 16
@.str = private unnamed_addr constant [10 x i8] c"%9d = %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"\0A\0A%s\0A\0A\00", align 1
@expressions = hidden global [13122 x %struct.Expression] zeroinitializer, align 16
@countSums = hidden global [13122 x %struct.CountSum] zeroinitializer, align 16
@.str.2 = private unnamed_addr constant [35 x i8] c"Show all solutions that sum to 100\00", align 1
@__const.main.ex = private unnamed_addr constant %struct.Expression { i32 100, i32 0 }, align 4
@.str.3 = private unnamed_addr constant [62 x i8] c"Show the positve sum that has the maximum number of solutions\00", align 1
@.str.4 = private unnamed_addr constant [21 x i8] c"%d has %d solutions\0A\00", align 1
@.str.5 = private unnamed_addr constant [56 x i8] c"Show the lowest positive number that can't be expressed\00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@.str.7 = private unnamed_addr constant [51 x i8] c"Show the ten highest numbers that can be expressed\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @compareExpressionBySum(%struct.Expression* %a, %struct.Expression* %b) #0 {
entry:
  %a.addr = alloca %struct.Expression*, align 4
  %b.addr = alloca %struct.Expression*, align 4
  store %struct.Expression* %a, %struct.Expression** %a.addr, align 4
  store %struct.Expression* %b, %struct.Expression** %b.addr, align 4
  %0 = load %struct.Expression*, %struct.Expression** %a.addr, align 4
  %sum = getelementptr inbounds %struct.Expression, %struct.Expression* %0, i32 0, i32 0
  %1 = load i32, i32* %sum, align 4
  %2 = load %struct.Expression*, %struct.Expression** %b.addr, align 4
  %sum1 = getelementptr inbounds %struct.Expression, %struct.Expression* %2, i32 0, i32 0
  %3 = load i32, i32* %sum1, align 4
  %sub = sub nsw i32 %1, %3
  ret i32 %sub
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @compareCountSumsByCount(%struct.CountSum* %a, %struct.CountSum* %b) #0 {
entry:
  %a.addr = alloca %struct.CountSum*, align 4
  %b.addr = alloca %struct.CountSum*, align 4
  store %struct.CountSum* %a, %struct.CountSum** %a.addr, align 4
  store %struct.CountSum* %b, %struct.CountSum** %b.addr, align 4
  %0 = load %struct.CountSum*, %struct.CountSum** %a.addr, align 4
  %counts = getelementptr inbounds %struct.CountSum, %struct.CountSum* %0, i32 0, i32 0
  %1 = load i32, i32* %counts, align 4
  %2 = load %struct.CountSum*, %struct.CountSum** %b.addr, align 4
  %counts1 = getelementptr inbounds %struct.CountSum, %struct.CountSum* %2, i32 0, i32 0
  %3 = load i32, i32* %counts1, align 4
  %sub = sub nsw i32 %1, %3
  ret i32 %sub
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @evaluate(i32 %code) #0 {
entry:
  %code.addr = alloca i32, align 4
  %value = alloca i32, align 4
  %number = alloca i32, align 4
  %power = alloca i32, align 4
  %k = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  store i32 0, i32* %value, align 4
  store i32 0, i32* %number, align 4
  store i32 1, i32* %power, align 4
  store i32 9, i32* %k, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %k, align 4
  %cmp = icmp sge i32 %0, 1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %power, align 4
  %2 = load i32, i32* %k, align 4
  %mul = mul nsw i32 %1, %2
  %3 = load i32, i32* %number, align 4
  %add = add nsw i32 %mul, %3
  store i32 %add, i32* %number, align 4
  %4 = load i32, i32* %code.addr, align 4
  %rem = srem i32 %4, 3
  switch i32 %rem, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb2
    i32 2, label %sw.bb3
  ]

sw.bb:                                            ; preds = %for.body
  %5 = load i32, i32* %value, align 4
  %6 = load i32, i32* %number, align 4
  %add1 = add nsw i32 %5, %6
  store i32 %add1, i32* %value, align 4
  store i32 0, i32* %number, align 4
  store i32 1, i32* %power, align 4
  br label %sw.epilog

sw.bb2:                                           ; preds = %for.body
  %7 = load i32, i32* %value, align 4
  %8 = load i32, i32* %number, align 4
  %sub = sub nsw i32 %7, %8
  store i32 %sub, i32* %value, align 4
  store i32 0, i32* %number, align 4
  store i32 1, i32* %power, align 4
  br label %sw.epilog

sw.bb3:                                           ; preds = %for.body
  %9 = load i32, i32* %power, align 4
  %mul4 = mul nsw i32 %9, 10
  store i32 %mul4, i32* %power, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %for.body, %sw.bb3, %sw.bb2, %sw.bb
  %10 = load i32, i32* %code.addr, align 4
  %div = sdiv i32 %10, 3
  store i32 %div, i32* %code.addr, align 4
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %11 = load i32, i32* %k, align 4
  %dec = add nsw i32 %11, -1
  store i32 %dec, i32* %k, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load i32, i32* %value, align 4
  ret i32 %12
}

; Function Attrs: noinline nounwind optnone
define hidden void @print(i32 %code) #0 {
entry:
  %code.addr = alloca i32, align 4
  %p = alloca i8*, align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %k = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @print.s, i32 0, i32 0), i8** %p, align 4
  store i32 19683, i32* %a, align 4
  store i32 6561, i32* %b, align 4
  store i32 1, i32* %k, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %k, align 4
  %cmp = icmp sle i32 %0, 9
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %code.addr, align 4
  %2 = load i32, i32* %a, align 4
  %rem = srem i32 %1, %2
  %3 = load i32, i32* %b, align 4
  %div = sdiv i32 %rem, %3
  switch i32 %div, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb2
  ]

sw.bb:                                            ; preds = %for.body
  %4 = load i32, i32* %k, align 4
  %cmp1 = icmp sgt i32 %4, 1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %sw.bb
  %5 = load i8*, i8** %p, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %5, i32 1
  store i8* %incdec.ptr, i8** %p, align 4
  store i8 43, i8* %5, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %sw.bb
  br label %sw.epilog

sw.bb2:                                           ; preds = %for.body
  %6 = load i8*, i8** %p, align 4
  %incdec.ptr3 = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr3, i8** %p, align 4
  store i8 45, i8* %6, align 1
  br label %sw.epilog

sw.epilog:                                        ; preds = %for.body, %sw.bb2, %if.end
  %7 = load i32, i32* %b, align 4
  store i32 %7, i32* %a, align 4
  %8 = load i32, i32* %b, align 4
  %div4 = sdiv i32 %8, 3
  store i32 %div4, i32* %b, align 4
  %9 = load i32, i32* %k, align 4
  %add = add nsw i32 48, %9
  %conv = trunc i32 %add to i8
  %10 = load i8*, i8** %p, align 4
  %incdec.ptr5 = getelementptr inbounds i8, i8* %10, i32 1
  store i8* %incdec.ptr5, i8** %p, align 4
  store i8 %conv, i8* %10, align 1
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %11 = load i32, i32* %k, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load i8*, i8** %p, align 4
  store i8 0, i8* %12, align 1
  %13 = load i32, i32* %code.addr, align 4
  %call = call i32 @evaluate(i32 %13)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i32 0, i32 0), i32 %call, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @print.s, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @comment(i8* %string) #0 {
entry:
  %string.addr = alloca i8*, align 4
  store i8* %string, i8** %string.addr, align 4
  %0 = load i8*, i8** %string.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* %0)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @init() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %i2 = alloca i32, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 13122
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %call = call i32 @evaluate(i32 %1)
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [13122 x %struct.Expression], [13122 x %struct.Expression]* @expressions, i32 0, i32 %2
  %sum = getelementptr inbounds %struct.Expression, %struct.Expression* %arrayidx, i32 0, i32 0
  store i32 %call, i32* %sum, align 8
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [13122 x %struct.Expression], [13122 x %struct.Expression]* @expressions, i32 0, i32 %4
  %code = getelementptr inbounds %struct.Expression, %struct.Expression* %arrayidx1, i32 0, i32 1
  store i32 %3, i32* %code, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 13122, i32* @expressionsLength, align 4
  %6 = load i32, i32* @expressionsLength, align 4
  call void @qsort(i8* bitcast ([13122 x %struct.Expression]* @expressions to i8*), i32 %6, i32 8, i32 (i8*, i8*)* bitcast (i32 (%struct.Expression*, %struct.Expression*)* @compareExpressionBySum to i32 (i8*, i8*)*))
  store i32 0, i32* %j, align 4
  store i32 1, i32* getelementptr inbounds ([13122 x %struct.CountSum], [13122 x %struct.CountSum]* @countSums, i32 0, i32 0, i32 0), align 16
  %7 = load i32, i32* getelementptr inbounds ([13122 x %struct.Expression], [13122 x %struct.Expression]* @expressions, i32 0, i32 0, i32 0), align 16
  store i32 %7, i32* getelementptr inbounds ([13122 x %struct.CountSum], [13122 x %struct.CountSum]* @countSums, i32 0, i32 0, i32 1), align 4
  store i32 0, i32* %i2, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc20, %for.end
  %8 = load i32, i32* %i2, align 4
  %9 = load i32, i32* @expressionsLength, align 4
  %cmp4 = icmp slt i32 %8, %9
  br i1 %cmp4, label %for.body5, label %for.end22

for.body5:                                        ; preds = %for.cond3
  %10 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds [13122 x %struct.CountSum], [13122 x %struct.CountSum]* @countSums, i32 0, i32 %10
  %sum7 = getelementptr inbounds %struct.CountSum, %struct.CountSum* %arrayidx6, i32 0, i32 1
  %11 = load i32, i32* %sum7, align 4
  %12 = load i32, i32* %i2, align 4
  %arrayidx8 = getelementptr inbounds [13122 x %struct.Expression], [13122 x %struct.Expression]* @expressions, i32 0, i32 %12
  %sum9 = getelementptr inbounds %struct.Expression, %struct.Expression* %arrayidx8, i32 0, i32 0
  %13 = load i32, i32* %sum9, align 8
  %cmp10 = icmp ne i32 %11, %13
  br i1 %cmp10, label %if.then, label %if.else

if.then:                                          ; preds = %for.body5
  %14 = load i32, i32* %j, align 4
  %inc11 = add nsw i32 %14, 1
  store i32 %inc11, i32* %j, align 4
  %15 = load i32, i32* %j, align 4
  %arrayidx12 = getelementptr inbounds [13122 x %struct.CountSum], [13122 x %struct.CountSum]* @countSums, i32 0, i32 %15
  %counts = getelementptr inbounds %struct.CountSum, %struct.CountSum* %arrayidx12, i32 0, i32 0
  store i32 1, i32* %counts, align 8
  %16 = load i32, i32* %i2, align 4
  %arrayidx13 = getelementptr inbounds [13122 x %struct.Expression], [13122 x %struct.Expression]* @expressions, i32 0, i32 %16
  %sum14 = getelementptr inbounds %struct.Expression, %struct.Expression* %arrayidx13, i32 0, i32 0
  %17 = load i32, i32* %sum14, align 8
  %18 = load i32, i32* %j, align 4
  %arrayidx15 = getelementptr inbounds [13122 x %struct.CountSum], [13122 x %struct.CountSum]* @countSums, i32 0, i32 %18
  %sum16 = getelementptr inbounds %struct.CountSum, %struct.CountSum* %arrayidx15, i32 0, i32 1
  store i32 %17, i32* %sum16, align 4
  br label %if.end

if.else:                                          ; preds = %for.body5
  %19 = load i32, i32* %j, align 4
  %arrayidx17 = getelementptr inbounds [13122 x %struct.CountSum], [13122 x %struct.CountSum]* @countSums, i32 0, i32 %19
  %counts18 = getelementptr inbounds %struct.CountSum, %struct.CountSum* %arrayidx17, i32 0, i32 0
  %20 = load i32, i32* %counts18, align 8
  %inc19 = add nsw i32 %20, 1
  store i32 %inc19, i32* %counts18, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc20

for.inc20:                                        ; preds = %if.end
  %21 = load i32, i32* %i2, align 4
  %inc21 = add nsw i32 %21, 1
  store i32 %inc21, i32* %i2, align 4
  br label %for.cond3

for.end22:                                        ; preds = %for.cond3
  %22 = load i32, i32* %j, align 4
  %add = add nsw i32 %22, 1
  store i32 %add, i32* @countSumsLength, align 4
  %23 = load i32, i32* @countSumsLength, align 4
  call void @qsort(i8* bitcast ([13122 x %struct.CountSum]* @countSums to i8*), i32 %23, i32 8, i32 (i8*, i8*)* bitcast (i32 (%struct.CountSum*, %struct.CountSum*)* @compareCountSumsByCount to i32 (i8*, i8*)*))
  ret void
}

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %givenSum = alloca i32, align 4
  %ex = alloca %struct.Expression, align 4
  %found = alloca %struct.Expression*, align 4
  %maxSumIndex = alloca i32, align 4
  %value = alloca i32, align 4
  %ex21 = alloca %struct.Expression, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @init()
  call void @comment(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2, i32 0, i32 0))
  store i32 100, i32* %givenSum, align 4
  %0 = bitcast %struct.Expression* %ex to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 bitcast (%struct.Expression* @__const.main.ex to i8*), i32 8, i1 false)
  %1 = bitcast %struct.Expression* %ex to i8*
  %2 = load i32, i32* @expressionsLength, align 4
  %call = call i8* @bsearch(i8* %1, i8* bitcast ([13122 x %struct.Expression]* @expressions to i8*), i32 %2, i32 8, i32 (i8*, i8*)* bitcast (i32 (%struct.Expression*, %struct.Expression*)* @compareExpressionBySum to i32 (i8*, i8*)*))
  %3 = bitcast i8* %call to %struct.Expression*
  store %struct.Expression* %3, %struct.Expression** %found, align 4
  %tobool = icmp ne %struct.Expression* %3, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %4 = load %struct.Expression*, %struct.Expression** %found, align 4
  %cmp = icmp ne %struct.Expression* %4, getelementptr inbounds ([13122 x %struct.Expression], [13122 x %struct.Expression]* @expressions, i32 0, i32 0)
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %5 = load %struct.Expression*, %struct.Expression** %found, align 4
  %add.ptr = getelementptr inbounds %struct.Expression, %struct.Expression* %5, i32 -1
  %sum = getelementptr inbounds %struct.Expression, %struct.Expression* %add.ptr, i32 0, i32 0
  %6 = load i32, i32* %sum, align 4
  %cmp1 = icmp eq i32 %6, 100
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %7 = phi i1 [ false, %while.cond ], [ %cmp1, %land.rhs ]
  br i1 %7, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %8 = load %struct.Expression*, %struct.Expression** %found, align 4
  %incdec.ptr = getelementptr inbounds %struct.Expression, %struct.Expression* %8, i32 -1
  store %struct.Expression* %incdec.ptr, %struct.Expression** %found, align 4
  br label %while.cond

while.end:                                        ; preds = %land.end
  br label %while.cond2

while.cond2:                                      ; preds = %while.body8, %while.end
  %9 = load %struct.Expression*, %struct.Expression** %found, align 4
  %10 = load i32, i32* @expressionsLength, align 4
  %arrayidx = getelementptr inbounds [13122 x %struct.Expression], [13122 x %struct.Expression]* @expressions, i32 0, i32 %10
  %cmp3 = icmp ne %struct.Expression* %9, %arrayidx
  br i1 %cmp3, label %land.rhs4, label %land.end7

land.rhs4:                                        ; preds = %while.cond2
  %11 = load %struct.Expression*, %struct.Expression** %found, align 4
  %sum5 = getelementptr inbounds %struct.Expression, %struct.Expression* %11, i32 0, i32 0
  %12 = load i32, i32* %sum5, align 4
  %cmp6 = icmp eq i32 %12, 100
  br label %land.end7

land.end7:                                        ; preds = %land.rhs4, %while.cond2
  %13 = phi i1 [ false, %while.cond2 ], [ %cmp6, %land.rhs4 ]
  br i1 %13, label %while.body8, label %while.end10

while.body8:                                      ; preds = %land.end7
  %14 = load %struct.Expression*, %struct.Expression** %found, align 4
  %incdec.ptr9 = getelementptr inbounds %struct.Expression, %struct.Expression* %14, i32 1
  store %struct.Expression* %incdec.ptr9, %struct.Expression** %found, align 4
  %code = getelementptr inbounds %struct.Expression, %struct.Expression* %14, i32 0, i32 1
  %15 = load i32, i32* %code, align 4
  call void @print(i32 %15)
  br label %while.cond2

while.end10:                                      ; preds = %land.end7
  br label %if.end

if.end:                                           ; preds = %while.end10, %entry
  call void @comment(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.3, i32 0, i32 0))
  %16 = load i32, i32* @countSumsLength, align 4
  %sub = sub nsw i32 %16, 1
  store i32 %sub, i32* %maxSumIndex, align 4
  br label %while.cond11

while.cond11:                                     ; preds = %while.body15, %if.end
  %17 = load i32, i32* %maxSumIndex, align 4
  %arrayidx12 = getelementptr inbounds [13122 x %struct.CountSum], [13122 x %struct.CountSum]* @countSums, i32 0, i32 %17
  %sum13 = getelementptr inbounds %struct.CountSum, %struct.CountSum* %arrayidx12, i32 0, i32 1
  %18 = load i32, i32* %sum13, align 4
  %cmp14 = icmp slt i32 %18, 0
  br i1 %cmp14, label %while.body15, label %while.end16

while.body15:                                     ; preds = %while.cond11
  %19 = load i32, i32* %maxSumIndex, align 4
  %dec = add nsw i32 %19, -1
  store i32 %dec, i32* %maxSumIndex, align 4
  br label %while.cond11

while.end16:                                      ; preds = %while.cond11
  %20 = load i32, i32* %maxSumIndex, align 4
  %arrayidx17 = getelementptr inbounds [13122 x %struct.CountSum], [13122 x %struct.CountSum]* @countSums, i32 0, i32 %20
  %sum18 = getelementptr inbounds %struct.CountSum, %struct.CountSum* %arrayidx17, i32 0, i32 1
  %21 = load i32, i32* %sum18, align 4
  %22 = load i32, i32* %maxSumIndex, align 4
  %arrayidx19 = getelementptr inbounds [13122 x %struct.CountSum], [13122 x %struct.CountSum]* @countSums, i32 0, i32 %22
  %counts = getelementptr inbounds %struct.CountSum, %struct.CountSum* %arrayidx19, i32 0, i32 0
  %23 = load i32, i32* %counts, align 8
  %call20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i32 0, i32 0), i32 %21, i32 %23)
  call void @comment(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.5, i32 0, i32 0))
  store i32 0, i32* %value, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.end16
  %sum22 = getelementptr inbounds %struct.Expression, %struct.Expression* %ex21, i32 0, i32 0
  %24 = load i32, i32* %value, align 4
  store i32 %24, i32* %sum22, align 4
  %code23 = getelementptr inbounds %struct.Expression, %struct.Expression* %ex21, i32 0, i32 1
  store i32 0, i32* %code23, align 4
  %25 = bitcast %struct.Expression* %ex21 to i8*
  %26 = load i32, i32* @expressionsLength, align 4
  %call24 = call i8* @bsearch(i8* %25, i8* bitcast ([13122 x %struct.Expression]* @expressions to i8*), i32 %26, i32 8, i32 (i8*, i8*)* bitcast (i32 (%struct.Expression*, %struct.Expression*)* @compareExpressionBySum to i32 (i8*, i8*)*))
  %tobool25 = icmp ne i8* %call24, null
  br i1 %tobool25, label %if.end28, label %if.then26

if.then26:                                        ; preds = %for.cond
  %27 = load i32, i32* %value, align 4
  %call27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0), i32 %27)
  br label %for.end

if.end28:                                         ; preds = %for.cond
  br label %for.inc

for.inc:                                          ; preds = %if.end28
  %28 = load i32, i32* %value, align 4
  %inc = add nsw i32 %28, 1
  store i32 %inc, i32* %value, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then26
  call void @comment(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.7, i32 0, i32 0))
  %29 = load i32, i32* @expressionsLength, align 4
  %sub29 = sub nsw i32 %29, 1
  store i32 %sub29, i32* %i, align 4
  br label %for.cond30

for.cond30:                                       ; preds = %for.inc35, %for.end
  %30 = load i32, i32* %i, align 4
  %31 = load i32, i32* @expressionsLength, align 4
  %sub31 = sub nsw i32 %31, 10
  %cmp32 = icmp sge i32 %30, %sub31
  br i1 %cmp32, label %for.body, label %for.end37

for.body:                                         ; preds = %for.cond30
  %32 = load i32, i32* %i, align 4
  %arrayidx33 = getelementptr inbounds [13122 x %struct.Expression], [13122 x %struct.Expression]* @expressions, i32 0, i32 %32
  %code34 = getelementptr inbounds %struct.Expression, %struct.Expression* %arrayidx33, i32 0, i32 1
  %33 = load i32, i32* %code34, align 4
  call void @print(i32 %33)
  br label %for.inc35

for.inc35:                                        ; preds = %for.body
  %34 = load i32, i32* %i, align 4
  %dec36 = add nsw i32 %34, -1
  store i32 %dec36, i32* %i, align 4
  br label %for.cond30

for.end37:                                        ; preds = %for.cond30
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare i8* @bsearch(i8* %0, i8* %1, i32 %2, i32 %3, i32 (i8*, i8*)* %4) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sle i32 %0, 9
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle %0, 9:i32
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %code.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem = srem i32 %1, %2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = srem %0, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div = sdiv i32 %rem, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = srem %0, %1
%3:i32 = var
%4:i32 = sdiv %2, %3
infer %4

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = icmp sgt i32 %4, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div4 = sdiv i32 %8, 3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sdiv %0, 3:i32
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %add = add nsw i32 48, %9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 48:i32, %0
infer %1 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %conv = trunc i32 %add to i8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 48:i32, %0
%2:i8 = trunc %1
infer %2

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %k, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %11, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %code.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 @evaluate(i32 %13)
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle %0, 9:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = srem %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -120454654
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = srem %0, %1
%3:i32 = var
%4:i32 = sdiv %2, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -37025580
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = var
%2:i32 = srem %0, %1

Cost = 5
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 255
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 48:i32, %0
infer %1 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 48
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 48:i32, %0
%2:i8 = trunc %1
infer %2


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 48
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 52
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for print()

; entering Souper's runOnFunction() for comment()

; ModuleID = './Sum_to_100.c.bc'
source_filename = "./Sum_to_100.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.Expression = type { i32, i32 }
%struct.CountSum = type { i32, i32 }

@expressionsLength = hidden global i32 0, align 4
@countSumsLength = hidden global i32 0, align 4
@print.s = internal global [19 x i8] zeroinitializer, align 16
@.str = private unnamed_addr constant [10 x i8] c"%9d = %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"\0A\0A%s\0A\0A\00", align 1
@expressions = hidden global [13122 x %struct.Expression] zeroinitializer, align 16
@countSums = hidden global [13122 x %struct.CountSum] zeroinitializer, align 16
@.str.2 = private unnamed_addr constant [35 x i8] c"Show all solutions that sum to 100\00", align 1
@__const.main.ex = private unnamed_addr constant %struct.Expression { i32 100, i32 0 }, align 4
@.str.3 = private unnamed_addr constant [62 x i8] c"Show the positve sum that has the maximum number of solutions\00", align 1
@.str.4 = private unnamed_addr constant [21 x i8] c"%d has %d solutions\0A\00", align 1
@.str.5 = private unnamed_addr constant [56 x i8] c"Show the lowest positive number that can't be expressed\00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@.str.7 = private unnamed_addr constant [51 x i8] c"Show the ten highest numbers that can be expressed\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @compareExpressionBySum(%struct.Expression* %a, %struct.Expression* %b) #0 {
entry:
  %a.addr = alloca %struct.Expression*, align 4
  %b.addr = alloca %struct.Expression*, align 4
  store %struct.Expression* %a, %struct.Expression** %a.addr, align 4
  store %struct.Expression* %b, %struct.Expression** %b.addr, align 4
  %0 = load %struct.Expression*, %struct.Expression** %a.addr, align 4
  %sum = getelementptr inbounds %struct.Expression, %struct.Expression* %0, i32 0, i32 0
  %1 = load i32, i32* %sum, align 4
  %2 = load %struct.Expression*, %struct.Expression** %b.addr, align 4
  %sum1 = getelementptr inbounds %struct.Expression, %struct.Expression* %2, i32 0, i32 0
  %3 = load i32, i32* %sum1, align 4
  %sub = sub nsw i32 %1, %3
  ret i32 %sub
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @compareCountSumsByCount(%struct.CountSum* %a, %struct.CountSum* %b) #0 {
entry:
  %a.addr = alloca %struct.CountSum*, align 4
  %b.addr = alloca %struct.CountSum*, align 4
  store %struct.CountSum* %a, %struct.CountSum** %a.addr, align 4
  store %struct.CountSum* %b, %struct.CountSum** %b.addr, align 4
  %0 = load %struct.CountSum*, %struct.CountSum** %a.addr, align 4
  %counts = getelementptr inbounds %struct.CountSum, %struct.CountSum* %0, i32 0, i32 0
  %1 = load i32, i32* %counts, align 4
  %2 = load %struct.CountSum*, %struct.CountSum** %b.addr, align 4
  %counts1 = getelementptr inbounds %struct.CountSum, %struct.CountSum* %2, i32 0, i32 0
  %3 = load i32, i32* %counts1, align 4
  %sub = sub nsw i32 %1, %3
  ret i32 %sub
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @evaluate(i32 %code) #0 {
entry:
  %code.addr = alloca i32, align 4
  %value = alloca i32, align 4
  %number = alloca i32, align 4
  %power = alloca i32, align 4
  %k = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  store i32 0, i32* %value, align 4
  store i32 0, i32* %number, align 4
  store i32 1, i32* %power, align 4
  store i32 9, i32* %k, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %k, align 4
  %cmp = icmp sge i32 %0, 1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %power, align 4
  %2 = load i32, i32* %k, align 4
  %mul = mul nsw i32 %1, %2
  %3 = load i32, i32* %number, align 4
  %add = add nsw i32 %mul, %3
  store i32 %add, i32* %number, align 4
  %4 = load i32, i32* %code.addr, align 4
  %rem = srem i32 %4, 3
  switch i32 %rem, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb2
    i32 2, label %sw.bb3
  ]

sw.bb:                                            ; preds = %for.body
  %5 = load i32, i32* %value, align 4
  %6 = load i32, i32* %number, align 4
  %add1 = add nsw i32 %5, %6
  store i32 %add1, i32* %value, align 4
  store i32 0, i32* %number, align 4
  store i32 1, i32* %power, align 4
  br label %sw.epilog

sw.bb2:                                           ; preds = %for.body
  %7 = load i32, i32* %value, align 4
  %8 = load i32, i32* %number, align 4
  %sub = sub nsw i32 %7, %8
  store i32 %sub, i32* %value, align 4
  store i32 0, i32* %number, align 4
  store i32 1, i32* %power, align 4
  br label %sw.epilog

sw.bb3:                                           ; preds = %for.body
  %9 = load i32, i32* %power, align 4
  %mul4 = mul nsw i32 %9, 10
  store i32 %mul4, i32* %power, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %for.body, %sw.bb3, %sw.bb2, %sw.bb
  %10 = load i32, i32* %code.addr, align 4
  %div = sdiv i32 %10, 3
  store i32 %div, i32* %code.addr, align 4
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %11 = load i32, i32* %k, align 4
  %dec = add nsw i32 %11, -1
  store i32 %dec, i32* %k, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load i32, i32* %value, align 4
  ret i32 %12
}

; Function Attrs: noinline nounwind optnone
define hidden void @print(i32 %code) #0 {
entry:
  %code.addr = alloca i32, align 4
  %p = alloca i8*, align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %k = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @print.s, i32 0, i32 0), i8** %p, align 4
  store i32 19683, i32* %a, align 4
  store i32 6561, i32* %b, align 4
  store i32 1, i32* %k, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %k, align 4
  %cmp = icmp sle i32 %0, 9
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %code.addr, align 4
  %2 = load i32, i32* %a, align 4
  %rem = srem i32 %1, %2
  %3 = load i32, i32* %b, align 4
  %div = sdiv i32 %rem, %3
  switch i32 %div, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb2
  ]

sw.bb:                                            ; preds = %for.body
  %4 = load i32, i32* %k, align 4
  %cmp1 = icmp sgt i32 %4, 1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %sw.bb
  %5 = load i8*, i8** %p, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %5, i32 1
  store i8* %incdec.ptr, i8** %p, align 4
  store i8 43, i8* %5, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %sw.bb
  br label %sw.epilog

sw.bb2:                                           ; preds = %for.body
  %6 = load i8*, i8** %p, align 4
  %incdec.ptr3 = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr3, i8** %p, align 4
  store i8 45, i8* %6, align 1
  br label %sw.epilog

sw.epilog:                                        ; preds = %for.body, %sw.bb2, %if.end
  %7 = load i32, i32* %b, align 4
  store i32 %7, i32* %a, align 4
  %8 = load i32, i32* %b, align 4
  %div4 = sdiv i32 %8, 3
  store i32 %div4, i32* %b, align 4
  %9 = load i32, i32* %k, align 4
  %add = add nsw i32 48, %9
  %conv = trunc i32 %add to i8
  %10 = load i8*, i8** %p, align 4
  %incdec.ptr5 = getelementptr inbounds i8, i8* %10, i32 1
  store i8* %incdec.ptr5, i8** %p, align 4
  store i8 %conv, i8* %10, align 1
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %11 = load i32, i32* %k, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load i8*, i8** %p, align 4
  store i8 0, i8* %12, align 1
  %13 = load i32, i32* %code.addr, align 4
  %call = call i32 @evaluate(i32 %13)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i32 0, i32 0), i32 %call, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @print.s, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @comment(i8* %string) #0 {
entry:
  %string.addr = alloca i8*, align 4
  store i8* %string, i8** %string.addr, align 4
  %0 = load i8*, i8** %string.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* %0)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @init() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %i2 = alloca i32, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 13122
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %call = call i32 @evaluate(i32 %1)
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [13122 x %struct.Expression], [13122 x %struct.Expression]* @expressions, i32 0, i32 %2
  %sum = getelementptr inbounds %struct.Expression, %struct.Expression* %arrayidx, i32 0, i32 0
  store i32 %call, i32* %sum, align 8
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [13122 x %struct.Expression], [13122 x %struct.Expression]* @expressions, i32 0, i32 %4
  %code = getelementptr inbounds %struct.Expression, %struct.Expression* %arrayidx1, i32 0, i32 1
  store i32 %3, i32* %code, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 13122, i32* @expressionsLength, align 4
  %6 = load i32, i32* @expressionsLength, align 4
  call void @qsort(i8* bitcast ([13122 x %struct.Expression]* @expressions to i8*), i32 %6, i32 8, i32 (i8*, i8*)* bitcast (i32 (%struct.Expression*, %struct.Expression*)* @compareExpressionBySum to i32 (i8*, i8*)*))
  store i32 0, i32* %j, align 4
  store i32 1, i32* getelementptr inbounds ([13122 x %struct.CountSum], [13122 x %struct.CountSum]* @countSums, i32 0, i32 0, i32 0), align 16
  %7 = load i32, i32* getelementptr inbounds ([13122 x %struct.Expression], [13122 x %struct.Expression]* @expressions, i32 0, i32 0, i32 0), align 16
  store i32 %7, i32* getelementptr inbounds ([13122 x %struct.CountSum], [13122 x %struct.CountSum]* @countSums, i32 0, i32 0, i32 1), align 4
  store i32 0, i32* %i2, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc20, %for.end
  %8 = load i32, i32* %i2, align 4
  %9 = load i32, i32* @expressionsLength, align 4
  %cmp4 = icmp slt i32 %8, %9
  br i1 %cmp4, label %for.body5, label %for.end22

for.body5:                                        ; preds = %for.cond3
  %10 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds [13122 x %struct.CountSum], [13122 x %struct.CountSum]* @countSums, i32 0, i32 %10
  %sum7 = getelementptr inbounds %struct.CountSum, %struct.CountSum* %arrayidx6, i32 0, i32 1
  %11 = load i32, i32* %sum7, align 4
  %12 = load i32, i32* %i2, align 4
  %arrayidx8 = getelementptr inbounds [13122 x %struct.Expression], [13122 x %struct.Expression]* @expressions, i32 0, i32 %12
  %sum9 = getelementptr inbounds %struct.Expression, %struct.Expression* %arrayidx8, i32 0, i32 0
  %13 = load i32, i32* %sum9, align 8
  %cmp10 = icmp ne i32 %11, %13
  br i1 %cmp10, label %if.then, label %if.else

if.then:                                          ; preds = %for.body5
  %14 = load i32, i32* %j, align 4
  %inc11 = add nsw i32 %14, 1
  store i32 %inc11, i32* %j, align 4
  %15 = load i32, i32* %j, align 4
  %arrayidx12 = getelementptr inbounds [13122 x %struct.CountSum], [13122 x %struct.CountSum]* @countSums, i32 0, i32 %15
  %counts = getelementptr inbounds %struct.CountSum, %struct.CountSum* %arrayidx12, i32 0, i32 0
  store i32 1, i32* %counts, align 8
  %16 = load i32, i32* %i2, align 4
  %arrayidx13 = getelementptr inbounds [13122 x %struct.Expression], [13122 x %struct.Expression]* @expressions, i32 0, i32 %16
  %sum14 = getelementptr inbounds %struct.Expression, %struct.Expression* %arrayidx13, i32 0, i32 0
  %17 = load i32, i32* %sum14, align 8
  %18 = load i32, i32* %j, align 4
  %arrayidx15 = getelementptr inbounds [13122 x %struct.CountSum], [13122 x %struct.CountSum]* @countSums, i32 0, i32 %18
  %sum16 = getelementptr inbounds %struct.CountSum, %struct.CountSum* %arrayidx15, i32 0, i32 1
  store i32 %17, i32* %sum16, align 4
  br label %if.end

if.else:                                          ; preds = %for.body5
  %19 = load i32, i32* %j, align 4
  %arrayidx17 = getelementptr inbounds [13122 x %struct.CountSum], [13122 x %struct.CountSum]* @countSums, i32 0, i32 %19
  %counts18 = getelementptr inbounds %struct.CountSum, %struct.CountSum* %arrayidx17, i32 0, i32 0
  %20 = load i32, i32* %counts18, align 8
  %inc19 = add nsw i32 %20, 1
  store i32 %inc19, i32* %counts18, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc20

for.inc20:                                        ; preds = %if.end
  %21 = load i32, i32* %i2, align 4
  %inc21 = add nsw i32 %21, 1
  store i32 %inc21, i32* %i2, align 4
  br label %for.cond3

for.end22:                                        ; preds = %for.cond3
  %22 = load i32, i32* %j, align 4
  %add = add nsw i32 %22, 1
  store i32 %add, i32* @countSumsLength, align 4
  %23 = load i32, i32* @countSumsLength, align 4
  call void @qsort(i8* bitcast ([13122 x %struct.CountSum]* @countSums to i8*), i32 %23, i32 8, i32 (i8*, i8*)* bitcast (i32 (%struct.CountSum*, %struct.CountSum*)* @compareCountSumsByCount to i32 (i8*, i8*)*))
  ret void
}

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %givenSum = alloca i32, align 4
  %ex = alloca %struct.Expression, align 4
  %found = alloca %struct.Expression*, align 4
  %maxSumIndex = alloca i32, align 4
  %value = alloca i32, align 4
  %ex21 = alloca %struct.Expression, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @init()
  call void @comment(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2, i32 0, i32 0))
  store i32 100, i32* %givenSum, align 4
  %0 = bitcast %struct.Expression* %ex to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 bitcast (%struct.Expression* @__const.main.ex to i8*), i32 8, i1 false)
  %1 = bitcast %struct.Expression* %ex to i8*
  %2 = load i32, i32* @expressionsLength, align 4
  %call = call i8* @bsearch(i8* %1, i8* bitcast ([13122 x %struct.Expression]* @expressions to i8*), i32 %2, i32 8, i32 (i8*, i8*)* bitcast (i32 (%struct.Expression*, %struct.Expression*)* @compareExpressionBySum to i32 (i8*, i8*)*))
  %3 = bitcast i8* %call to %struct.Expression*
  store %struct.Expression* %3, %struct.Expression** %found, align 4
  %tobool = icmp ne %struct.Expression* %3, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %4 = load %struct.Expression*, %struct.Expression** %found, align 4
  %cmp = icmp ne %struct.Expression* %4, getelementptr inbounds ([13122 x %struct.Expression], [13122 x %struct.Expression]* @expressions, i32 0, i32 0)
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %5 = load %struct.Expression*, %struct.Expression** %found, align 4
  %add.ptr = getelementptr inbounds %struct.Expression, %struct.Expression* %5, i32 -1
  %sum = getelementptr inbounds %struct.Expression, %struct.Expression* %add.ptr, i32 0, i32 0
  %6 = load i32, i32* %sum, align 4
  %cmp1 = icmp eq i32 %6, 100
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %7 = phi i1 [ false, %while.cond ], [ %cmp1, %land.rhs ]
  br i1 %7, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %8 = load %struct.Expression*, %struct.Expression** %found, align 4
  %incdec.ptr = getelementptr inbounds %struct.Expression, %struct.Expression* %8, i32 -1
  store %struct.Expression* %incdec.ptr, %struct.Expression** %found, align 4
  br label %while.cond

while.end:                                        ; preds = %land.end
  br label %while.cond2

while.cond2:                                      ; preds = %while.body8, %while.end
  %9 = load %struct.Expression*, %struct.Expression** %found, align 4
  %10 = load i32, i32* @expressionsLength, align 4
  %arrayidx = getelementptr inbounds [13122 x %struct.Expression], [13122 x %struct.Expression]* @expressions, i32 0, i32 %10
  %cmp3 = icmp ne %struct.Expression* %9, %arrayidx
  br i1 %cmp3, label %land.rhs4, label %land.end7

land.rhs4:                                        ; preds = %while.cond2
  %11 = load %struct.Expression*, %struct.Expression** %found, align 4
  %sum5 = getelementptr inbounds %struct.Expression, %struct.Expression* %11, i32 0, i32 0
  %12 = load i32, i32* %sum5, align 4
  %cmp6 = icmp eq i32 %12, 100
  br label %land.end7

land.end7:                                        ; preds = %land.rhs4, %while.cond2
  %13 = phi i1 [ false, %while.cond2 ], [ %cmp6, %land.rhs4 ]
  br i1 %13, label %while.body8, label %while.end10

while.body8:                                      ; preds = %land.end7
  %14 = load %struct.Expression*, %struct.Expression** %found, align 4
  %incdec.ptr9 = getelementptr inbounds %struct.Expression, %struct.Expression* %14, i32 1
  store %struct.Expression* %incdec.ptr9, %struct.Expression** %found, align 4
  %code = getelementptr inbounds %struct.Expression, %struct.Expression* %14, i32 0, i32 1
  %15 = load i32, i32* %code, align 4
  call void @print(i32 %15)
  br label %while.cond2

while.end10:                                      ; preds = %land.end7
  br label %if.end

if.end:                                           ; preds = %while.end10, %entry
  call void @comment(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.3, i32 0, i32 0))
  %16 = load i32, i32* @countSumsLength, align 4
  %sub = sub nsw i32 %16, 1
  store i32 %sub, i32* %maxSumIndex, align 4
  br label %while.cond11

while.cond11:                                     ; preds = %while.body15, %if.end
  %17 = load i32, i32* %maxSumIndex, align 4
  %arrayidx12 = getelementptr inbounds [13122 x %struct.CountSum], [13122 x %struct.CountSum]* @countSums, i32 0, i32 %17
  %sum13 = getelementptr inbounds %struct.CountSum, %struct.CountSum* %arrayidx12, i32 0, i32 1
  %18 = load i32, i32* %sum13, align 4
  %cmp14 = icmp slt i32 %18, 0
  br i1 %cmp14, label %while.body15, label %while.end16

while.body15:                                     ; preds = %while.cond11
  %19 = load i32, i32* %maxSumIndex, align 4
  %dec = add nsw i32 %19, -1
  store i32 %dec, i32* %maxSumIndex, align 4
  br label %while.cond11

while.end16:                                      ; preds = %while.cond11
  %20 = load i32, i32* %maxSumIndex, align 4
  %arrayidx17 = getelementptr inbounds [13122 x %struct.CountSum], [13122 x %struct.CountSum]* @countSums, i32 0, i32 %20
  %sum18 = getelementptr inbounds %struct.CountSum, %struct.CountSum* %arrayidx17, i32 0, i32 1
  %21 = load i32, i32* %sum18, align 4
  %22 = load i32, i32* %maxSumIndex, align 4
  %arrayidx19 = getelementptr inbounds [13122 x %struct.CountSum], [13122 x %struct.CountSum]* @countSums, i32 0, i32 %22
  %counts = getelementptr inbounds %struct.CountSum, %struct.CountSum* %arrayidx19, i32 0, i32 0
  %23 = load i32, i32* %counts, align 8
  %call20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i32 0, i32 0), i32 %21, i32 %23)
  call void @comment(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.5, i32 0, i32 0))
  store i32 0, i32* %value, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.end16
  %sum22 = getelementptr inbounds %struct.Expression, %struct.Expression* %ex21, i32 0, i32 0
  %24 = load i32, i32* %value, align 4
  store i32 %24, i32* %sum22, align 4
  %code23 = getelementptr inbounds %struct.Expression, %struct.Expression* %ex21, i32 0, i32 1
  store i32 0, i32* %code23, align 4
  %25 = bitcast %struct.Expression* %ex21 to i8*
  %26 = load i32, i32* @expressionsLength, align 4
  %call24 = call i8* @bsearch(i8* %25, i8* bitcast ([13122 x %struct.Expression]* @expressions to i8*), i32 %26, i32 8, i32 (i8*, i8*)* bitcast (i32 (%struct.Expression*, %struct.Expression*)* @compareExpressionBySum to i32 (i8*, i8*)*))
  %tobool25 = icmp ne i8* %call24, null
  br i1 %tobool25, label %if.end28, label %if.then26

if.then26:                                        ; preds = %for.cond
  %27 = load i32, i32* %value, align 4
  %call27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0), i32 %27)
  br label %for.end

if.end28:                                         ; preds = %for.cond
  br label %for.inc

for.inc:                                          ; preds = %if.end28
  %28 = load i32, i32* %value, align 4
  %inc = add nsw i32 %28, 1
  store i32 %inc, i32* %value, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then26
  call void @comment(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.7, i32 0, i32 0))
  %29 = load i32, i32* @expressionsLength, align 4
  %sub29 = sub nsw i32 %29, 1
  store i32 %sub29, i32* %i, align 4
  br label %for.cond30

for.cond30:                                       ; preds = %for.inc35, %for.end
  %30 = load i32, i32* %i, align 4
  %31 = load i32, i32* @expressionsLength, align 4
  %sub31 = sub nsw i32 %31, 10
  %cmp32 = icmp sge i32 %30, %sub31
  br i1 %cmp32, label %for.body, label %for.end37

for.body:                                         ; preds = %for.cond30
  %32 = load i32, i32* %i, align 4
  %arrayidx33 = getelementptr inbounds [13122 x %struct.Expression], [13122 x %struct.Expression]* @expressions, i32 0, i32 %32
  %code34 = getelementptr inbounds %struct.Expression, %struct.Expression* %arrayidx33, i32 0, i32 1
  %33 = load i32, i32* %code34, align 4
  call void @print(i32 %33)
  br label %for.inc35

for.inc35:                                        ; preds = %for.body
  %34 = load i32, i32* %i, align 4
  %dec36 = add nsw i32 %34, -1
  store i32 %dec36, i32* %i, align 4
  br label %for.cond30

for.end37:                                        ; preds = %for.cond30
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare i8* @bsearch(i8* %0, i8* %1, i32 %2, i32 %3, i32 (i8*, i8*)* %4) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for comment()

; entering Souper's runOnFunction() for init()

; ModuleID = './Sum_to_100.c.bc'
source_filename = "./Sum_to_100.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.Expression = type { i32, i32 }
%struct.CountSum = type { i32, i32 }

@expressionsLength = hidden global i32 0, align 4
@countSumsLength = hidden global i32 0, align 4
@print.s = internal global [19 x i8] zeroinitializer, align 16
@.str = private unnamed_addr constant [10 x i8] c"%9d = %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"\0A\0A%s\0A\0A\00", align 1
@expressions = hidden global [13122 x %struct.Expression] zeroinitializer, align 16
@countSums = hidden global [13122 x %struct.CountSum] zeroinitializer, align 16
@.str.2 = private unnamed_addr constant [35 x i8] c"Show all solutions that sum to 100\00", align 1
@__const.main.ex = private unnamed_addr constant %struct.Expression { i32 100, i32 0 }, align 4
@.str.3 = private unnamed_addr constant [62 x i8] c"Show the positve sum that has the maximum number of solutions\00", align 1
@.str.4 = private unnamed_addr constant [21 x i8] c"%d has %d solutions\0A\00", align 1
@.str.5 = private unnamed_addr constant [56 x i8] c"Show the lowest positive number that can't be expressed\00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@.str.7 = private unnamed_addr constant [51 x i8] c"Show the ten highest numbers that can be expressed\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @compareExpressionBySum(%struct.Expression* %a, %struct.Expression* %b) #0 {
entry:
  %a.addr = alloca %struct.Expression*, align 4
  %b.addr = alloca %struct.Expression*, align 4
  store %struct.Expression* %a, %struct.Expression** %a.addr, align 4
  store %struct.Expression* %b, %struct.Expression** %b.addr, align 4
  %0 = load %struct.Expression*, %struct.Expression** %a.addr, align 4
  %sum = getelementptr inbounds %struct.Expression, %struct.Expression* %0, i32 0, i32 0
  %1 = load i32, i32* %sum, align 4
  %2 = load %struct.Expression*, %struct.Expression** %b.addr, align 4
  %sum1 = getelementptr inbounds %struct.Expression, %struct.Expression* %2, i32 0, i32 0
  %3 = load i32, i32* %sum1, align 4
  %sub = sub nsw i32 %1, %3
  ret i32 %sub
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @compareCountSumsByCount(%struct.CountSum* %a, %struct.CountSum* %b) #0 {
entry:
  %a.addr = alloca %struct.CountSum*, align 4
  %b.addr = alloca %struct.CountSum*, align 4
  store %struct.CountSum* %a, %struct.CountSum** %a.addr, align 4
  store %struct.CountSum* %b, %struct.CountSum** %b.addr, align 4
  %0 = load %struct.CountSum*, %struct.CountSum** %a.addr, align 4
  %counts = getelementptr inbounds %struct.CountSum, %struct.CountSum* %0, i32 0, i32 0
  %1 = load i32, i32* %counts, align 4
  %2 = load %struct.CountSum*, %struct.CountSum** %b.addr, align 4
  %counts1 = getelementptr inbounds %struct.CountSum, %struct.CountSum* %2, i32 0, i32 0
  %3 = load i32, i32* %counts1, align 4
  %sub = sub nsw i32 %1, %3
  ret i32 %sub
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @evaluate(i32 %code) #0 {
entry:
  %code.addr = alloca i32, align 4
  %value = alloca i32, align 4
  %number = alloca i32, align 4
  %power = alloca i32, align 4
  %k = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  store i32 0, i32* %value, align 4
  store i32 0, i32* %number, align 4
  store i32 1, i32* %power, align 4
  store i32 9, i32* %k, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %k, align 4
  %cmp = icmp sge i32 %0, 1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %power, align 4
  %2 = load i32, i32* %k, align 4
  %mul = mul nsw i32 %1, %2
  %3 = load i32, i32* %number, align 4
  %add = add nsw i32 %mul, %3
  store i32 %add, i32* %number, align 4
  %4 = load i32, i32* %code.addr, align 4
  %rem = srem i32 %4, 3
  switch i32 %rem, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb2
    i32 2, label %sw.bb3
  ]

sw.bb:                                            ; preds = %for.body
  %5 = load i32, i32* %value, align 4
  %6 = load i32, i32* %number, align 4
  %add1 = add nsw i32 %5, %6
  store i32 %add1, i32* %value, align 4
  store i32 0, i32* %number, align 4
  store i32 1, i32* %power, align 4
  br label %sw.epilog

sw.bb2:                                           ; preds = %for.body
  %7 = load i32, i32* %value, align 4
  %8 = load i32, i32* %number, align 4
  %sub = sub nsw i32 %7, %8
  store i32 %sub, i32* %value, align 4
  store i32 0, i32* %number, align 4
  store i32 1, i32* %power, align 4
  br label %sw.epilog

sw.bb3:                                           ; preds = %for.body
  %9 = load i32, i32* %power, align 4
  %mul4 = mul nsw i32 %9, 10
  store i32 %mul4, i32* %power, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %for.body, %sw.bb3, %sw.bb2, %sw.bb
  %10 = load i32, i32* %code.addr, align 4
  %div = sdiv i32 %10, 3
  store i32 %div, i32* %code.addr, align 4
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %11 = load i32, i32* %k, align 4
  %dec = add nsw i32 %11, -1
  store i32 %dec, i32* %k, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load i32, i32* %value, align 4
  ret i32 %12
}

; Function Attrs: noinline nounwind optnone
define hidden void @print(i32 %code) #0 {
entry:
  %code.addr = alloca i32, align 4
  %p = alloca i8*, align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %k = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @print.s, i32 0, i32 0), i8** %p, align 4
  store i32 19683, i32* %a, align 4
  store i32 6561, i32* %b, align 4
  store i32 1, i32* %k, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %k, align 4
  %cmp = icmp sle i32 %0, 9
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %code.addr, align 4
  %2 = load i32, i32* %a, align 4
  %rem = srem i32 %1, %2
  %3 = load i32, i32* %b, align 4
  %div = sdiv i32 %rem, %3
  switch i32 %div, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb2
  ]

sw.bb:                                            ; preds = %for.body
  %4 = load i32, i32* %k, align 4
  %cmp1 = icmp sgt i32 %4, 1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %sw.bb
  %5 = load i8*, i8** %p, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %5, i32 1
  store i8* %incdec.ptr, i8** %p, align 4
  store i8 43, i8* %5, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %sw.bb
  br label %sw.epilog

sw.bb2:                                           ; preds = %for.body
  %6 = load i8*, i8** %p, align 4
  %incdec.ptr3 = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr3, i8** %p, align 4
  store i8 45, i8* %6, align 1
  br label %sw.epilog

sw.epilog:                                        ; preds = %for.body, %sw.bb2, %if.end
  %7 = load i32, i32* %b, align 4
  store i32 %7, i32* %a, align 4
  %8 = load i32, i32* %b, align 4
  %div4 = sdiv i32 %8, 3
  store i32 %div4, i32* %b, align 4
  %9 = load i32, i32* %k, align 4
  %add = add nsw i32 48, %9
  %conv = trunc i32 %add to i8
  %10 = load i8*, i8** %p, align 4
  %incdec.ptr5 = getelementptr inbounds i8, i8* %10, i32 1
  store i8* %incdec.ptr5, i8** %p, align 4
  store i8 %conv, i8* %10, align 1
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %11 = load i32, i32* %k, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load i8*, i8** %p, align 4
  store i8 0, i8* %12, align 1
  %13 = load i32, i32* %code.addr, align 4
  %call = call i32 @evaluate(i32 %13)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i32 0, i32 0), i32 %call, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @print.s, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @comment(i8* %string) #0 {
entry:
  %string.addr = alloca i8*, align 4
  store i8* %string, i8** %string.addr, align 4
  %0 = load i8*, i8** %string.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* %0)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @init() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %i2 = alloca i32, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 13122
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %call = call i32 @evaluate(i32 %1)
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [13122 x %struct.Expression], [13122 x %struct.Expression]* @expressions, i32 0, i32 %2
  %sum = getelementptr inbounds %struct.Expression, %struct.Expression* %arrayidx, i32 0, i32 0
  store i32 %call, i32* %sum, align 8
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [13122 x %struct.Expression], [13122 x %struct.Expression]* @expressions, i32 0, i32 %4
  %code = getelementptr inbounds %struct.Expression, %struct.Expression* %arrayidx1, i32 0, i32 1
  store i32 %3, i32* %code, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 13122, i32* @expressionsLength, align 4
  %6 = load i32, i32* @expressionsLength, align 4
  call void @qsort(i8* bitcast ([13122 x %struct.Expression]* @expressions to i8*), i32 %6, i32 8, i32 (i8*, i8*)* bitcast (i32 (%struct.Expression*, %struct.Expression*)* @compareExpressionBySum to i32 (i8*, i8*)*))
  store i32 0, i32* %j, align 4
  store i32 1, i32* getelementptr inbounds ([13122 x %struct.CountSum], [13122 x %struct.CountSum]* @countSums, i32 0, i32 0, i32 0), align 16
  %7 = load i32, i32* getelementptr inbounds ([13122 x %struct.Expression], [13122 x %struct.Expression]* @expressions, i32 0, i32 0, i32 0), align 16
  store i32 %7, i32* getelementptr inbounds ([13122 x %struct.CountSum], [13122 x %struct.CountSum]* @countSums, i32 0, i32 0, i32 1), align 4
  store i32 0, i32* %i2, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc20, %for.end
  %8 = load i32, i32* %i2, align 4
  %9 = load i32, i32* @expressionsLength, align 4
  %cmp4 = icmp slt i32 %8, %9
  br i1 %cmp4, label %for.body5, label %for.end22

for.body5:                                        ; preds = %for.cond3
  %10 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds [13122 x %struct.CountSum], [13122 x %struct.CountSum]* @countSums, i32 0, i32 %10
  %sum7 = getelementptr inbounds %struct.CountSum, %struct.CountSum* %arrayidx6, i32 0, i32 1
  %11 = load i32, i32* %sum7, align 4
  %12 = load i32, i32* %i2, align 4
  %arrayidx8 = getelementptr inbounds [13122 x %struct.Expression], [13122 x %struct.Expression]* @expressions, i32 0, i32 %12
  %sum9 = getelementptr inbounds %struct.Expression, %struct.Expression* %arrayidx8, i32 0, i32 0
  %13 = load i32, i32* %sum9, align 8
  %cmp10 = icmp ne i32 %11, %13
  br i1 %cmp10, label %if.then, label %if.else

if.then:                                          ; preds = %for.body5
  %14 = load i32, i32* %j, align 4
  %inc11 = add nsw i32 %14, 1
  store i32 %inc11, i32* %j, align 4
  %15 = load i32, i32* %j, align 4
  %arrayidx12 = getelementptr inbounds [13122 x %struct.CountSum], [13122 x %struct.CountSum]* @countSums, i32 0, i32 %15
  %counts = getelementptr inbounds %struct.CountSum, %struct.CountSum* %arrayidx12, i32 0, i32 0
  store i32 1, i32* %counts, align 8
  %16 = load i32, i32* %i2, align 4
  %arrayidx13 = getelementptr inbounds [13122 x %struct.Expression], [13122 x %struct.Expression]* @expressions, i32 0, i32 %16
  %sum14 = getelementptr inbounds %struct.Expression, %struct.Expression* %arrayidx13, i32 0, i32 0
  %17 = load i32, i32* %sum14, align 8
  %18 = load i32, i32* %j, align 4
  %arrayidx15 = getelementptr inbounds [13122 x %struct.CountSum], [13122 x %struct.CountSum]* @countSums, i32 0, i32 %18
  %sum16 = getelementptr inbounds %struct.CountSum, %struct.CountSum* %arrayidx15, i32 0, i32 1
  store i32 %17, i32* %sum16, align 4
  br label %if.end

if.else:                                          ; preds = %for.body5
  %19 = load i32, i32* %j, align 4
  %arrayidx17 = getelementptr inbounds [13122 x %struct.CountSum], [13122 x %struct.CountSum]* @countSums, i32 0, i32 %19
  %counts18 = getelementptr inbounds %struct.CountSum, %struct.CountSum* %arrayidx17, i32 0, i32 0
  %20 = load i32, i32* %counts18, align 8
  %inc19 = add nsw i32 %20, 1
  store i32 %inc19, i32* %counts18, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc20

for.inc20:                                        ; preds = %if.end
  %21 = load i32, i32* %i2, align 4
  %inc21 = add nsw i32 %21, 1
  store i32 %inc21, i32* %i2, align 4
  br label %for.cond3

for.end22:                                        ; preds = %for.cond3
  %22 = load i32, i32* %j, align 4
  %add = add nsw i32 %22, 1
  store i32 %add, i32* @countSumsLength, align 4
  %23 = load i32, i32* @countSumsLength, align 4
  call void @qsort(i8* bitcast ([13122 x %struct.CountSum]* @countSums to i8*), i32 %23, i32 8, i32 (i8*, i8*)* bitcast (i32 (%struct.CountSum*, %struct.CountSum*)* @compareCountSumsByCount to i32 (i8*, i8*)*))
  ret void
}

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %givenSum = alloca i32, align 4
  %ex = alloca %struct.Expression, align 4
  %found = alloca %struct.Expression*, align 4
  %maxSumIndex = alloca i32, align 4
  %value = alloca i32, align 4
  %ex21 = alloca %struct.Expression, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @init()
  call void @comment(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2, i32 0, i32 0))
  store i32 100, i32* %givenSum, align 4
  %0 = bitcast %struct.Expression* %ex to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 bitcast (%struct.Expression* @__const.main.ex to i8*), i32 8, i1 false)
  %1 = bitcast %struct.Expression* %ex to i8*
  %2 = load i32, i32* @expressionsLength, align 4
  %call = call i8* @bsearch(i8* %1, i8* bitcast ([13122 x %struct.Expression]* @expressions to i8*), i32 %2, i32 8, i32 (i8*, i8*)* bitcast (i32 (%struct.Expression*, %struct.Expression*)* @compareExpressionBySum to i32 (i8*, i8*)*))
  %3 = bitcast i8* %call to %struct.Expression*
  store %struct.Expression* %3, %struct.Expression** %found, align 4
  %tobool = icmp ne %struct.Expression* %3, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %4 = load %struct.Expression*, %struct.Expression** %found, align 4
  %cmp = icmp ne %struct.Expression* %4, getelementptr inbounds ([13122 x %struct.Expression], [13122 x %struct.Expression]* @expressions, i32 0, i32 0)
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %5 = load %struct.Expression*, %struct.Expression** %found, align 4
  %add.ptr = getelementptr inbounds %struct.Expression, %struct.Expression* %5, i32 -1
  %sum = getelementptr inbounds %struct.Expression, %struct.Expression* %add.ptr, i32 0, i32 0
  %6 = load i32, i32* %sum, align 4
  %cmp1 = icmp eq i32 %6, 100
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %7 = phi i1 [ false, %while.cond ], [ %cmp1, %land.rhs ]
  br i1 %7, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %8 = load %struct.Expression*, %struct.Expression** %found, align 4
  %incdec.ptr = getelementptr inbounds %struct.Expression, %struct.Expression* %8, i32 -1
  store %struct.Expression* %incdec.ptr, %struct.Expression** %found, align 4
  br label %while.cond

while.end:                                        ; preds = %land.end
  br label %while.cond2

while.cond2:                                      ; preds = %while.body8, %while.end
  %9 = load %struct.Expression*, %struct.Expression** %found, align 4
  %10 = load i32, i32* @expressionsLength, align 4
  %arrayidx = getelementptr inbounds [13122 x %struct.Expression], [13122 x %struct.Expression]* @expressions, i32 0, i32 %10
  %cmp3 = icmp ne %struct.Expression* %9, %arrayidx
  br i1 %cmp3, label %land.rhs4, label %land.end7

land.rhs4:                                        ; preds = %while.cond2
  %11 = load %struct.Expression*, %struct.Expression** %found, align 4
  %sum5 = getelementptr inbounds %struct.Expression, %struct.Expression* %11, i32 0, i32 0
  %12 = load i32, i32* %sum5, align 4
  %cmp6 = icmp eq i32 %12, 100
  br label %land.end7

land.end7:                                        ; preds = %land.rhs4, %while.cond2
  %13 = phi i1 [ false, %while.cond2 ], [ %cmp6, %land.rhs4 ]
  br i1 %13, label %while.body8, label %while.end10

while.body8:                                      ; preds = %land.end7
  %14 = load %struct.Expression*, %struct.Expression** %found, align 4
  %incdec.ptr9 = getelementptr inbounds %struct.Expression, %struct.Expression* %14, i32 1
  store %struct.Expression* %incdec.ptr9, %struct.Expression** %found, align 4
  %code = getelementptr inbounds %struct.Expression, %struct.Expression* %14, i32 0, i32 1
  %15 = load i32, i32* %code, align 4
  call void @print(i32 %15)
  br label %while.cond2

while.end10:                                      ; preds = %land.end7
  br label %if.end

if.end:                                           ; preds = %while.end10, %entry
  call void @comment(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.3, i32 0, i32 0))
  %16 = load i32, i32* @countSumsLength, align 4
  %sub = sub nsw i32 %16, 1
  store i32 %sub, i32* %maxSumIndex, align 4
  br label %while.cond11

while.cond11:                                     ; preds = %while.body15, %if.end
  %17 = load i32, i32* %maxSumIndex, align 4
  %arrayidx12 = getelementptr inbounds [13122 x %struct.CountSum], [13122 x %struct.CountSum]* @countSums, i32 0, i32 %17
  %sum13 = getelementptr inbounds %struct.CountSum, %struct.CountSum* %arrayidx12, i32 0, i32 1
  %18 = load i32, i32* %sum13, align 4
  %cmp14 = icmp slt i32 %18, 0
  br i1 %cmp14, label %while.body15, label %while.end16

while.body15:                                     ; preds = %while.cond11
  %19 = load i32, i32* %maxSumIndex, align 4
  %dec = add nsw i32 %19, -1
  store i32 %dec, i32* %maxSumIndex, align 4
  br label %while.cond11

while.end16:                                      ; preds = %while.cond11
  %20 = load i32, i32* %maxSumIndex, align 4
  %arrayidx17 = getelementptr inbounds [13122 x %struct.CountSum], [13122 x %struct.CountSum]* @countSums, i32 0, i32 %20
  %sum18 = getelementptr inbounds %struct.CountSum, %struct.CountSum* %arrayidx17, i32 0, i32 1
  %21 = load i32, i32* %sum18, align 4
  %22 = load i32, i32* %maxSumIndex, align 4
  %arrayidx19 = getelementptr inbounds [13122 x %struct.CountSum], [13122 x %struct.CountSum]* @countSums, i32 0, i32 %22
  %counts = getelementptr inbounds %struct.CountSum, %struct.CountSum* %arrayidx19, i32 0, i32 0
  %23 = load i32, i32* %counts, align 8
  %call20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i32 0, i32 0), i32 %21, i32 %23)
  call void @comment(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.5, i32 0, i32 0))
  store i32 0, i32* %value, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.end16
  %sum22 = getelementptr inbounds %struct.Expression, %struct.Expression* %ex21, i32 0, i32 0
  %24 = load i32, i32* %value, align 4
  store i32 %24, i32* %sum22, align 4
  %code23 = getelementptr inbounds %struct.Expression, %struct.Expression* %ex21, i32 0, i32 1
  store i32 0, i32* %code23, align 4
  %25 = bitcast %struct.Expression* %ex21 to i8*
  %26 = load i32, i32* @expressionsLength, align 4
  %call24 = call i8* @bsearch(i8* %25, i8* bitcast ([13122 x %struct.Expression]* @expressions to i8*), i32 %26, i32 8, i32 (i8*, i8*)* bitcast (i32 (%struct.Expression*, %struct.Expression*)* @compareExpressionBySum to i32 (i8*, i8*)*))
  %tobool25 = icmp ne i8* %call24, null
  br i1 %tobool25, label %if.end28, label %if.then26

if.then26:                                        ; preds = %for.cond
  %27 = load i32, i32* %value, align 4
  %call27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0), i32 %27)
  br label %for.end

if.end28:                                         ; preds = %for.cond
  br label %for.inc

for.inc:                                          ; preds = %if.end28
  %28 = load i32, i32* %value, align 4
  %inc = add nsw i32 %28, 1
  store i32 %inc, i32* %value, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then26
  call void @comment(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.7, i32 0, i32 0))
  %29 = load i32, i32* @expressionsLength, align 4
  %sub29 = sub nsw i32 %29, 1
  store i32 %sub29, i32* %i, align 4
  br label %for.cond30

for.cond30:                                       ; preds = %for.inc35, %for.end
  %30 = load i32, i32* %i, align 4
  %31 = load i32, i32* @expressionsLength, align 4
  %sub31 = sub nsw i32 %31, 10
  %cmp32 = icmp sge i32 %30, %sub31
  br i1 %cmp32, label %for.body, label %for.end37

for.body:                                         ; preds = %for.cond30
  %32 = load i32, i32* %i, align 4
  %arrayidx33 = getelementptr inbounds [13122 x %struct.Expression], [13122 x %struct.Expression]* @expressions, i32 0, i32 %32
  %code34 = getelementptr inbounds %struct.Expression, %struct.Expression* %arrayidx33, i32 0, i32 1
  %33 = load i32, i32* %code34, align 4
  call void @print(i32 %33)
  br label %for.inc35

for.inc35:                                        ; preds = %for.body
  %34 = load i32, i32* %i, align 4
  %dec36 = add nsw i32 %34, -1
  store i32 %dec36, i32* %i, align 4
  br label %for.cond30

for.end37:                                        ; preds = %for.cond30
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare i8* @bsearch(i8* %0, i8* %1, i32 %2, i32 %3, i32 (i8*, i8*)* %4) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, 13122
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 13122:i32
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 @evaluate(i32 %1)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %5, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* @expressionsLength, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* getelementptr inbounds ([13122 x %struct.Expression], [13122 x %struct.Expression]* @expressions, i32 0, i32 0, i32 0), align 16
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* @expressionsLength, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp4 = icmp slt i32 %8, %9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %sum7, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %i2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %sum9, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp10 = icmp ne i32 %11, %13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc11 = add nsw i32 %14, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %i2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %sum14, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %counts18, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc19 = add nsw i32 %20, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %i2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc21 = add nsw i32 %21, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %22, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %23 = load i32, i32* @countSumsLength, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 13122:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for init()

; entering Souper's runOnFunction() for main()

; ModuleID = './Sum_to_100.c.bc'
source_filename = "./Sum_to_100.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.Expression = type { i32, i32 }
%struct.CountSum = type { i32, i32 }

@expressionsLength = hidden global i32 0, align 4
@countSumsLength = hidden global i32 0, align 4
@print.s = internal global [19 x i8] zeroinitializer, align 16
@.str = private unnamed_addr constant [10 x i8] c"%9d = %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"\0A\0A%s\0A\0A\00", align 1
@expressions = hidden global [13122 x %struct.Expression] zeroinitializer, align 16
@countSums = hidden global [13122 x %struct.CountSum] zeroinitializer, align 16
@.str.2 = private unnamed_addr constant [35 x i8] c"Show all solutions that sum to 100\00", align 1
@__const.main.ex = private unnamed_addr constant %struct.Expression { i32 100, i32 0 }, align 4
@.str.3 = private unnamed_addr constant [62 x i8] c"Show the positve sum that has the maximum number of solutions\00", align 1
@.str.4 = private unnamed_addr constant [21 x i8] c"%d has %d solutions\0A\00", align 1
@.str.5 = private unnamed_addr constant [56 x i8] c"Show the lowest positive number that can't be expressed\00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@.str.7 = private unnamed_addr constant [51 x i8] c"Show the ten highest numbers that can be expressed\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @compareExpressionBySum(%struct.Expression* %a, %struct.Expression* %b) #0 {
entry:
  %a.addr = alloca %struct.Expression*, align 4
  %b.addr = alloca %struct.Expression*, align 4
  store %struct.Expression* %a, %struct.Expression** %a.addr, align 4
  store %struct.Expression* %b, %struct.Expression** %b.addr, align 4
  %0 = load %struct.Expression*, %struct.Expression** %a.addr, align 4
  %sum = getelementptr inbounds %struct.Expression, %struct.Expression* %0, i32 0, i32 0
  %1 = load i32, i32* %sum, align 4
  %2 = load %struct.Expression*, %struct.Expression** %b.addr, align 4
  %sum1 = getelementptr inbounds %struct.Expression, %struct.Expression* %2, i32 0, i32 0
  %3 = load i32, i32* %sum1, align 4
  %sub = sub nsw i32 %1, %3
  ret i32 %sub
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @compareCountSumsByCount(%struct.CountSum* %a, %struct.CountSum* %b) #0 {
entry:
  %a.addr = alloca %struct.CountSum*, align 4
  %b.addr = alloca %struct.CountSum*, align 4
  store %struct.CountSum* %a, %struct.CountSum** %a.addr, align 4
  store %struct.CountSum* %b, %struct.CountSum** %b.addr, align 4
  %0 = load %struct.CountSum*, %struct.CountSum** %a.addr, align 4
  %counts = getelementptr inbounds %struct.CountSum, %struct.CountSum* %0, i32 0, i32 0
  %1 = load i32, i32* %counts, align 4
  %2 = load %struct.CountSum*, %struct.CountSum** %b.addr, align 4
  %counts1 = getelementptr inbounds %struct.CountSum, %struct.CountSum* %2, i32 0, i32 0
  %3 = load i32, i32* %counts1, align 4
  %sub = sub nsw i32 %1, %3
  ret i32 %sub
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @evaluate(i32 %code) #0 {
entry:
  %code.addr = alloca i32, align 4
  %value = alloca i32, align 4
  %number = alloca i32, align 4
  %power = alloca i32, align 4
  %k = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  store i32 0, i32* %value, align 4
  store i32 0, i32* %number, align 4
  store i32 1, i32* %power, align 4
  store i32 9, i32* %k, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %k, align 4
  %cmp = icmp sge i32 %0, 1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %power, align 4
  %2 = load i32, i32* %k, align 4
  %mul = mul nsw i32 %1, %2
  %3 = load i32, i32* %number, align 4
  %add = add nsw i32 %mul, %3
  store i32 %add, i32* %number, align 4
  %4 = load i32, i32* %code.addr, align 4
  %rem = srem i32 %4, 3
  switch i32 %rem, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb2
    i32 2, label %sw.bb3
  ]

sw.bb:                                            ; preds = %for.body
  %5 = load i32, i32* %value, align 4
  %6 = load i32, i32* %number, align 4
  %add1 = add nsw i32 %5, %6
  store i32 %add1, i32* %value, align 4
  store i32 0, i32* %number, align 4
  store i32 1, i32* %power, align 4
  br label %sw.epilog

sw.bb2:                                           ; preds = %for.body
  %7 = load i32, i32* %value, align 4
  %8 = load i32, i32* %number, align 4
  %sub = sub nsw i32 %7, %8
  store i32 %sub, i32* %value, align 4
  store i32 0, i32* %number, align 4
  store i32 1, i32* %power, align 4
  br label %sw.epilog

sw.bb3:                                           ; preds = %for.body
  %9 = load i32, i32* %power, align 4
  %mul4 = mul nsw i32 %9, 10
  store i32 %mul4, i32* %power, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %for.body, %sw.bb3, %sw.bb2, %sw.bb
  %10 = load i32, i32* %code.addr, align 4
  %div = sdiv i32 %10, 3
  store i32 %div, i32* %code.addr, align 4
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %11 = load i32, i32* %k, align 4
  %dec = add nsw i32 %11, -1
  store i32 %dec, i32* %k, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load i32, i32* %value, align 4
  ret i32 %12
}

; Function Attrs: noinline nounwind optnone
define hidden void @print(i32 %code) #0 {
entry:
  %code.addr = alloca i32, align 4
  %p = alloca i8*, align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %k = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @print.s, i32 0, i32 0), i8** %p, align 4
  store i32 19683, i32* %a, align 4
  store i32 6561, i32* %b, align 4
  store i32 1, i32* %k, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %k, align 4
  %cmp = icmp sle i32 %0, 9
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %code.addr, align 4
  %2 = load i32, i32* %a, align 4
  %rem = srem i32 %1, %2
  %3 = load i32, i32* %b, align 4
  %div = sdiv i32 %rem, %3
  switch i32 %div, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb2
  ]

sw.bb:                                            ; preds = %for.body
  %4 = load i32, i32* %k, align 4
  %cmp1 = icmp sgt i32 %4, 1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %sw.bb
  %5 = load i8*, i8** %p, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %5, i32 1
  store i8* %incdec.ptr, i8** %p, align 4
  store i8 43, i8* %5, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %sw.bb
  br label %sw.epilog

sw.bb2:                                           ; preds = %for.body
  %6 = load i8*, i8** %p, align 4
  %incdec.ptr3 = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr3, i8** %p, align 4
  store i8 45, i8* %6, align 1
  br label %sw.epilog

sw.epilog:                                        ; preds = %for.body, %sw.bb2, %if.end
  %7 = load i32, i32* %b, align 4
  store i32 %7, i32* %a, align 4
  %8 = load i32, i32* %b, align 4
  %div4 = sdiv i32 %8, 3
  store i32 %div4, i32* %b, align 4
  %9 = load i32, i32* %k, align 4
  %add = add nsw i32 48, %9
  %conv = trunc i32 %add to i8
  %10 = load i8*, i8** %p, align 4
  %incdec.ptr5 = getelementptr inbounds i8, i8* %10, i32 1
  store i8* %incdec.ptr5, i8** %p, align 4
  store i8 %conv, i8* %10, align 1
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %11 = load i32, i32* %k, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load i8*, i8** %p, align 4
  store i8 0, i8* %12, align 1
  %13 = load i32, i32* %code.addr, align 4
  %call = call i32 @evaluate(i32 %13)
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i32 0, i32 0), i32 %call, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @print.s, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @comment(i8* %string) #0 {
entry:
  %string.addr = alloca i8*, align 4
  store i8* %string, i8** %string.addr, align 4
  %0 = load i8*, i8** %string.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8* %0)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @init() #0 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %i2 = alloca i32, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 13122
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %call = call i32 @evaluate(i32 %1)
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [13122 x %struct.Expression], [13122 x %struct.Expression]* @expressions, i32 0, i32 %2
  %sum = getelementptr inbounds %struct.Expression, %struct.Expression* %arrayidx, i32 0, i32 0
  store i32 %call, i32* %sum, align 8
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [13122 x %struct.Expression], [13122 x %struct.Expression]* @expressions, i32 0, i32 %4
  %code = getelementptr inbounds %struct.Expression, %struct.Expression* %arrayidx1, i32 0, i32 1
  store i32 %3, i32* %code, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 13122, i32* @expressionsLength, align 4
  %6 = load i32, i32* @expressionsLength, align 4
  call void @qsort(i8* bitcast ([13122 x %struct.Expression]* @expressions to i8*), i32 %6, i32 8, i32 (i8*, i8*)* bitcast (i32 (%struct.Expression*, %struct.Expression*)* @compareExpressionBySum to i32 (i8*, i8*)*))
  store i32 0, i32* %j, align 4
  store i32 1, i32* getelementptr inbounds ([13122 x %struct.CountSum], [13122 x %struct.CountSum]* @countSums, i32 0, i32 0, i32 0), align 16
  %7 = load i32, i32* getelementptr inbounds ([13122 x %struct.Expression], [13122 x %struct.Expression]* @expressions, i32 0, i32 0, i32 0), align 16
  store i32 %7, i32* getelementptr inbounds ([13122 x %struct.CountSum], [13122 x %struct.CountSum]* @countSums, i32 0, i32 0, i32 1), align 4
  store i32 0, i32* %i2, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc20, %for.end
  %8 = load i32, i32* %i2, align 4
  %9 = load i32, i32* @expressionsLength, align 4
  %cmp4 = icmp slt i32 %8, %9
  br i1 %cmp4, label %for.body5, label %for.end22

for.body5:                                        ; preds = %for.cond3
  %10 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds [13122 x %struct.CountSum], [13122 x %struct.CountSum]* @countSums, i32 0, i32 %10
  %sum7 = getelementptr inbounds %struct.CountSum, %struct.CountSum* %arrayidx6, i32 0, i32 1
  %11 = load i32, i32* %sum7, align 4
  %12 = load i32, i32* %i2, align 4
  %arrayidx8 = getelementptr inbounds [13122 x %struct.Expression], [13122 x %struct.Expression]* @expressions, i32 0, i32 %12
  %sum9 = getelementptr inbounds %struct.Expression, %struct.Expression* %arrayidx8, i32 0, i32 0
  %13 = load i32, i32* %sum9, align 8
  %cmp10 = icmp ne i32 %11, %13
  br i1 %cmp10, label %if.then, label %if.else

if.then:                                          ; preds = %for.body5
  %14 = load i32, i32* %j, align 4
  %inc11 = add nsw i32 %14, 1
  store i32 %inc11, i32* %j, align 4
  %15 = load i32, i32* %j, align 4
  %arrayidx12 = getelementptr inbounds [13122 x %struct.CountSum], [13122 x %struct.CountSum]* @countSums, i32 0, i32 %15
  %counts = getelementptr inbounds %struct.CountSum, %struct.CountSum* %arrayidx12, i32 0, i32 0
  store i32 1, i32* %counts, align 8
  %16 = load i32, i32* %i2, align 4
  %arrayidx13 = getelementptr inbounds [13122 x %struct.Expression], [13122 x %struct.Expression]* @expressions, i32 0, i32 %16
  %sum14 = getelementptr inbounds %struct.Expression, %struct.Expression* %arrayidx13, i32 0, i32 0
  %17 = load i32, i32* %sum14, align 8
  %18 = load i32, i32* %j, align 4
  %arrayidx15 = getelementptr inbounds [13122 x %struct.CountSum], [13122 x %struct.CountSum]* @countSums, i32 0, i32 %18
  %sum16 = getelementptr inbounds %struct.CountSum, %struct.CountSum* %arrayidx15, i32 0, i32 1
  store i32 %17, i32* %sum16, align 4
  br label %if.end

if.else:                                          ; preds = %for.body5
  %19 = load i32, i32* %j, align 4
  %arrayidx17 = getelementptr inbounds [13122 x %struct.CountSum], [13122 x %struct.CountSum]* @countSums, i32 0, i32 %19
  %counts18 = getelementptr inbounds %struct.CountSum, %struct.CountSum* %arrayidx17, i32 0, i32 0
  %20 = load i32, i32* %counts18, align 8
  %inc19 = add nsw i32 %20, 1
  store i32 %inc19, i32* %counts18, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc20

for.inc20:                                        ; preds = %if.end
  %21 = load i32, i32* %i2, align 4
  %inc21 = add nsw i32 %21, 1
  store i32 %inc21, i32* %i2, align 4
  br label %for.cond3

for.end22:                                        ; preds = %for.cond3
  %22 = load i32, i32* %j, align 4
  %add = add nsw i32 %22, 1
  store i32 %add, i32* @countSumsLength, align 4
  %23 = load i32, i32* @countSumsLength, align 4
  call void @qsort(i8* bitcast ([13122 x %struct.CountSum]* @countSums to i8*), i32 %23, i32 8, i32 (i8*, i8*)* bitcast (i32 (%struct.CountSum*, %struct.CountSum*)* @compareCountSumsByCount to i32 (i8*, i8*)*))
  ret void
}

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %givenSum = alloca i32, align 4
  %ex = alloca %struct.Expression, align 4
  %found = alloca %struct.Expression*, align 4
  %maxSumIndex = alloca i32, align 4
  %value = alloca i32, align 4
  %ex21 = alloca %struct.Expression, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @init()
  call void @comment(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2, i32 0, i32 0))
  store i32 100, i32* %givenSum, align 4
  %0 = bitcast %struct.Expression* %ex to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %0, i8* align 4 bitcast (%struct.Expression* @__const.main.ex to i8*), i32 8, i1 false)
  %1 = bitcast %struct.Expression* %ex to i8*
  %2 = load i32, i32* @expressionsLength, align 4
  %call = call i8* @bsearch(i8* %1, i8* bitcast ([13122 x %struct.Expression]* @expressions to i8*), i32 %2, i32 8, i32 (i8*, i8*)* bitcast (i32 (%struct.Expression*, %struct.Expression*)* @compareExpressionBySum to i32 (i8*, i8*)*))
  %3 = bitcast i8* %call to %struct.Expression*
  store %struct.Expression* %3, %struct.Expression** %found, align 4
  %tobool = icmp ne %struct.Expression* %3, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %4 = load %struct.Expression*, %struct.Expression** %found, align 4
  %cmp = icmp ne %struct.Expression* %4, getelementptr inbounds ([13122 x %struct.Expression], [13122 x %struct.Expression]* @expressions, i32 0, i32 0)
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %5 = load %struct.Expression*, %struct.Expression** %found, align 4
  %add.ptr = getelementptr inbounds %struct.Expression, %struct.Expression* %5, i32 -1
  %sum = getelementptr inbounds %struct.Expression, %struct.Expression* %add.ptr, i32 0, i32 0
  %6 = load i32, i32* %sum, align 4
  %cmp1 = icmp eq i32 %6, 100
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %7 = phi i1 [ false, %while.cond ], [ %cmp1, %land.rhs ]
  br i1 %7, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %8 = load %struct.Expression*, %struct.Expression** %found, align 4
  %incdec.ptr = getelementptr inbounds %struct.Expression, %struct.Expression* %8, i32 -1
  store %struct.Expression* %incdec.ptr, %struct.Expression** %found, align 4
  br label %while.cond

while.end:                                        ; preds = %land.end
  br label %while.cond2

while.cond2:                                      ; preds = %while.body8, %while.end
  %9 = load %struct.Expression*, %struct.Expression** %found, align 4
  %10 = load i32, i32* @expressionsLength, align 4
  %arrayidx = getelementptr inbounds [13122 x %struct.Expression], [13122 x %struct.Expression]* @expressions, i32 0, i32 %10
  %cmp3 = icmp ne %struct.Expression* %9, %arrayidx
  br i1 %cmp3, label %land.rhs4, label %land.end7

land.rhs4:                                        ; preds = %while.cond2
  %11 = load %struct.Expression*, %struct.Expression** %found, align 4
  %sum5 = getelementptr inbounds %struct.Expression, %struct.Expression* %11, i32 0, i32 0
  %12 = load i32, i32* %sum5, align 4
  %cmp6 = icmp eq i32 %12, 100
  br label %land.end7

land.end7:                                        ; preds = %land.rhs4, %while.cond2
  %13 = phi i1 [ false, %while.cond2 ], [ %cmp6, %land.rhs4 ]
  br i1 %13, label %while.body8, label %while.end10

while.body8:                                      ; preds = %land.end7
  %14 = load %struct.Expression*, %struct.Expression** %found, align 4
  %incdec.ptr9 = getelementptr inbounds %struct.Expression, %struct.Expression* %14, i32 1
  store %struct.Expression* %incdec.ptr9, %struct.Expression** %found, align 4
  %code = getelementptr inbounds %struct.Expression, %struct.Expression* %14, i32 0, i32 1
  %15 = load i32, i32* %code, align 4
  call void @print(i32 %15)
  br label %while.cond2

while.end10:                                      ; preds = %land.end7
  br label %if.end

if.end:                                           ; preds = %while.end10, %entry
  call void @comment(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.3, i32 0, i32 0))
  %16 = load i32, i32* @countSumsLength, align 4
  %sub = sub nsw i32 %16, 1
  store i32 %sub, i32* %maxSumIndex, align 4
  br label %while.cond11

while.cond11:                                     ; preds = %while.body15, %if.end
  %17 = load i32, i32* %maxSumIndex, align 4
  %arrayidx12 = getelementptr inbounds [13122 x %struct.CountSum], [13122 x %struct.CountSum]* @countSums, i32 0, i32 %17
  %sum13 = getelementptr inbounds %struct.CountSum, %struct.CountSum* %arrayidx12, i32 0, i32 1
  %18 = load i32, i32* %sum13, align 4
  %cmp14 = icmp slt i32 %18, 0
  br i1 %cmp14, label %while.body15, label %while.end16

while.body15:                                     ; preds = %while.cond11
  %19 = load i32, i32* %maxSumIndex, align 4
  %dec = add nsw i32 %19, -1
  store i32 %dec, i32* %maxSumIndex, align 4
  br label %while.cond11

while.end16:                                      ; preds = %while.cond11
  %20 = load i32, i32* %maxSumIndex, align 4
  %arrayidx17 = getelementptr inbounds [13122 x %struct.CountSum], [13122 x %struct.CountSum]* @countSums, i32 0, i32 %20
  %sum18 = getelementptr inbounds %struct.CountSum, %struct.CountSum* %arrayidx17, i32 0, i32 1
  %21 = load i32, i32* %sum18, align 4
  %22 = load i32, i32* %maxSumIndex, align 4
  %arrayidx19 = getelementptr inbounds [13122 x %struct.CountSum], [13122 x %struct.CountSum]* @countSums, i32 0, i32 %22
  %counts = getelementptr inbounds %struct.CountSum, %struct.CountSum* %arrayidx19, i32 0, i32 0
  %23 = load i32, i32* %counts, align 8
  %call20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i32 0, i32 0), i32 %21, i32 %23)
  call void @comment(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.5, i32 0, i32 0))
  store i32 0, i32* %value, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.end16
  %sum22 = getelementptr inbounds %struct.Expression, %struct.Expression* %ex21, i32 0, i32 0
  %24 = load i32, i32* %value, align 4
  store i32 %24, i32* %sum22, align 4
  %code23 = getelementptr inbounds %struct.Expression, %struct.Expression* %ex21, i32 0, i32 1
  store i32 0, i32* %code23, align 4
  %25 = bitcast %struct.Expression* %ex21 to i8*
  %26 = load i32, i32* @expressionsLength, align 4
  %call24 = call i8* @bsearch(i8* %25, i8* bitcast ([13122 x %struct.Expression]* @expressions to i8*), i32 %26, i32 8, i32 (i8*, i8*)* bitcast (i32 (%struct.Expression*, %struct.Expression*)* @compareExpressionBySum to i32 (i8*, i8*)*))
  %tobool25 = icmp ne i8* %call24, null
  br i1 %tobool25, label %if.end28, label %if.then26

if.then26:                                        ; preds = %for.cond
  %27 = load i32, i32* %value, align 4
  %call27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0), i32 %27)
  br label %for.end

if.end28:                                         ; preds = %for.cond
  br label %for.inc

for.inc:                                          ; preds = %if.end28
  %28 = load i32, i32* %value, align 4
  %inc = add nsw i32 %28, 1
  store i32 %inc, i32* %value, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then26
  call void @comment(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.7, i32 0, i32 0))
  %29 = load i32, i32* @expressionsLength, align 4
  %sub29 = sub nsw i32 %29, 1
  store i32 %sub29, i32* %i, align 4
  br label %for.cond30

for.cond30:                                       ; preds = %for.inc35, %for.end
  %30 = load i32, i32* %i, align 4
  %31 = load i32, i32* @expressionsLength, align 4
  %sub31 = sub nsw i32 %31, 10
  %cmp32 = icmp sge i32 %30, %sub31
  br i1 %cmp32, label %for.body, label %for.end37

for.body:                                         ; preds = %for.cond30
  %32 = load i32, i32* %i, align 4
  %arrayidx33 = getelementptr inbounds [13122 x %struct.Expression], [13122 x %struct.Expression]* @expressions, i32 0, i32 %32
  %code34 = getelementptr inbounds %struct.Expression, %struct.Expression* %arrayidx33, i32 0, i32 1
  %33 = load i32, i32* %code34, align 4
  call void @print(i32 %33)
  br label %for.inc35

for.inc35:                                        ; preds = %for.body
  %34 = load i32, i32* %i, align 4
  %dec36 = add nsw i32 %34, -1
  store i32 %dec36, i32* %i, align 4
  br label %for.cond30

for.end37:                                        ; preds = %for.cond30
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare i8* @bsearch(i8* %0, i8* %1, i32 %2, i32 %3, i32 (i8*, i8*)* %4) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %2 = load i32, i32* @expressionsLength, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne %struct.Expression* %3, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp = icmp ne %struct.Expression* %4, getelementptr inbounds ([13122 x %struct.Expression], [13122 x %struct.Expression]* @expressions, i32 0, i32 0)
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=xxxxxxxxxxxxxxxxxxxxxxxxxxxx0000)
%2:i1 = ne %0, %1
infer %2

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %sum, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = icmp eq i32 %6, 100
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 100:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = phi i1 [ false, %while.cond ], [ %cmp1, %land.rhs ]
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* @expressionsLength, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp3 = icmp ne %struct.Expression* %9, %arrayidx
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var (knownBits=xxxxxxxxxxxxxxxxxxxxxxxxxxxxx000) (nonZero)
%2:i1 = ne %0, %1
infer %2

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %sum5, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp6 = icmp eq i32 %12, 100
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 100:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %13 = phi i1 [ false, %while.cond2 ], [ %cmp6, %land.rhs4 ]
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %code, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* @countSumsLength, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %16, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %maxSumIndex, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %sum13, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp14 = icmp slt i32 %18, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 0:i32
infer %1

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %maxSumIndex, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec = add nsw i32 %19, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %maxSumIndex, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %sum18, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %maxSumIndex, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %counts, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %value, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = load i32, i32* @expressionsLength, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool25 = icmp ne i8* %call24, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %value, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %value, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %28, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %29 = load i32, i32* @expressionsLength, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub29 = sub nsw i32 %29, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %31 = load i32, i32* @expressionsLength, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub31 = sub nsw i32 %31, 10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 10:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp32 = icmp sge i32 %30, %sub31
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 10:i32
%2:i32 = var
%3:i1 = sle %1, %2
infer %3

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %code34, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec36 = add nsw i32 %34, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var (knownBits=xxxxxxxxxxxxxxxxxxxxxxxxxxxx0000)
%2:i1 = ne %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 100:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var (knownBits=xxxxxxxxxxxxxxxxxxxxxxxxxxxxx000) (nonZero)
%2:i1 = ne %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 0:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 10:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -10
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 10:i32
%2:i32 = var
%3:i1 = sle %1, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
