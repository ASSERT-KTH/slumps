
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for to_base()

; ModuleID = './Non-decimal_radices-Convert.c.bc'
source_filename = "./Non-decimal_radices-Convert.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque

@.str = private unnamed_addr constant [37 x i8] c"0123456789abcdefghijklmnopqrstuvwxyz\00", align 1
@stderr = external constant %struct._IO_FILE*, align 4
@.str.1 = private unnamed_addr constant [19 x i8] c"base %d too large\0A\00", align 1
@.str.2 = private unnamed_addr constant [20 x i8] c"%lld in base 2: %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [21 x i8] c"%lld in base 16: %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i8* @to_base(i64 %num, i32 %base) #0 {
entry:
  %retval = alloca i8*, align 4
  %num.addr = alloca i64, align 8
  %base.addr = alloca i32, align 4
  %tbl = alloca i8*, align 4
  %buf = alloca [66 x i8], align 16
  %out = alloca i8*, align 4
  %n = alloca i64, align 8
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  %neg = alloca i32, align 4
  store i64 %num, i64* %num.addr, align 8
  store i32 %base, i32* %base.addr, align 4
  store i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i32 0, i32 0), i8** %tbl, align 4
  %0 = bitcast [66 x i8]* %buf to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 66, i1 false)
  store i32 0, i32* %len, align 4
  store i32 0, i32* %neg, align 4
  %1 = load i32, i32* %base.addr, align 4
  %cmp = icmp sgt i32 %1, 36
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %3 = load i32, i32* %base.addr, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i32 0, i32 0), i32 %3)
  store i8* null, i8** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %4 = load i64, i64* %num.addr, align 8
  %cmp1 = icmp slt i64 %4, 0
  %conv = zext i1 %cmp1 to i32
  store i32 %conv, i32* %neg, align 4
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %5 = load i64, i64* %num.addr, align 8
  %neg2 = xor i64 %5, -1
  %add = add nsw i64 %neg2, 1
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %6 = load i64, i64* %num.addr, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %add, %cond.true ], [ %6, %cond.false ]
  store i64 %cond, i64* %n, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %cond.end
  %7 = load i8*, i8** %tbl, align 4
  %8 = load i64, i64* %n, align 8
  %9 = load i32, i32* %base.addr, align 4
  %conv3 = sext i32 %9 to i64
  %rem = urem i64 %8, %conv3
  %idxprom = trunc i64 %rem to i32
  %arrayidx = getelementptr inbounds i8, i8* %7, i32 %idxprom
  %10 = load i8, i8* %arrayidx, align 1
  %11 = load i32, i32* %len, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %len, align 4
  %arrayidx4 = getelementptr inbounds [66 x i8], [66 x i8]* %buf, i32 0, i32 %11
  store i8 %10, i8* %arrayidx4, align 1
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %12 = load i32, i32* %base.addr, align 4
  %conv5 = sext i32 %12 to i64
  %13 = load i64, i64* %n, align 8
  %div = udiv i64 %13, %conv5
  store i64 %div, i64* %n, align 8
  %tobool = icmp ne i64 %div, 0
  br i1 %tobool, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %14 = load i32, i32* %len, align 4
  %15 = load i32, i32* %neg, align 4
  %add6 = add nsw i32 %14, %15
  %add7 = add nsw i32 %add6, 1
  %call8 = call noalias i8* @malloc(i32 %add7)
  store i8* %call8, i8** %out, align 4
  %16 = load i32, i32* %neg, align 4
  store i32 %16, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %do.end
  %17 = load i32, i32* %len, align 4
  %cmp9 = icmp sgt i32 %17, 0
  br i1 %cmp9, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %18 = load i32, i32* %len, align 4
  %dec = add nsw i32 %18, -1
  store i32 %dec, i32* %len, align 4
  %arrayidx11 = getelementptr inbounds [66 x i8], [66 x i8]* %buf, i32 0, i32 %dec
  %19 = load i8, i8* %arrayidx11, align 1
  %20 = load i8*, i8** %out, align 4
  %21 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds i8, i8* %20, i32 %21
  store i8 %19, i8* %arrayidx12, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %22 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %22, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %23 = load i32, i32* %neg, align 4
  %tobool14 = icmp ne i32 %23, 0
  br i1 %tobool14, label %if.then15, label %if.end17

if.then15:                                        ; preds = %for.end
  %24 = load i8*, i8** %out, align 4
  %arrayidx16 = getelementptr inbounds i8, i8* %24, i32 0
  store i8 45, i8* %arrayidx16, align 1
  br label %if.end17

if.end17:                                         ; preds = %if.then15, %for.end
  %25 = load i8*, i8** %out, align 4
  store i8* %25, i8** %retval, align 4
  br label %return

return:                                           ; preds = %if.end17, %if.then
  %26 = load i8*, i8** %retval, align 4
  ret i8* %26
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #2

declare noalias i8* @malloc(i32 %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @from_base(i8* %num_str, i32 %base) #0 {
entry:
  %num_str.addr = alloca i8*, align 4
  %base.addr = alloca i32, align 4
  %endptr = alloca i8*, align 4
  %result = alloca i32, align 4
  store i8* %num_str, i8** %num_str.addr, align 4
  store i32 %base, i32* %base.addr, align 4
  %0 = load i8*, i8** %num_str.addr, align 4
  %1 = load i32, i32* %base.addr, align 4
  %call = call i32 @strtol(i8* %0, i8** %endptr, i32 %1)
  store i32 %call, i32* %result, align 4
  %2 = load i32, i32* %result, align 4
  ret i32 %2
}

declare i32 @strtol(i8* %0, i8** %1, i32 %2) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %x = alloca i64, align 8
  store i32 0, i32* %retval, align 4
  store i64 -9223372036854775808, i64* %x, align 8
  %0 = load i64, i64* %x, align 8
  %1 = load i64, i64* %x, align 8
  %call = call i8* @to_base(i64 %1, i32 2)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.2, i32 0, i32 0), i64 %0, i8* %call)
  store i64 383, i64* %x, align 8
  %2 = load i64, i64* %x, align 8
  %3 = load i64, i64* %x, align 8
  %call2 = call i8* @to_base(i64 %3, i32 16)
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i32 0, i32 0), i64 %2, i8* %call2)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %base.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sgt i32 %1, 36
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 36:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %base.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i64, i64* %num.addr, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = icmp slt i64 %4, 0
; Looking for a replacement for:
%0:i64 = var
%1:i1 = slt %0, 0:i64
infer %1

; *****
; For LLVM instruction:
;  %conv = zext i1 %cmp1 to i32
; Looking for a replacement for:
%0:i64 = var
%1:i1 = slt %0, 0:i64 (hasExternalUses)
%2:i32 = zext %1
infer %2

; *****
; For LLVM instruction:
;  %5 = load i64, i64* %num.addr, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %neg2 = xor i64 %5, -1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = xor 18446744073709551615:i64, %0
infer %1

; *****
; For LLVM instruction:
;  %add = add nsw i64 %neg2, 1
; Looking for a replacement for:
%0:i64 = var
%1:i64 = xor 18446744073709551615:i64, %0
%2:i64 = addnsw 1:i64, %1
infer %2

; *****
; For LLVM instruction:
;  %6 = load i64, i64* %num.addr, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %cond = phi i64 [ %add, %cond.true ], [ %6, %cond.false ]
; Looking for a replacement for:
%0 = block 2
%1:i64 = var
%2:i64 = xor 18446744073709551615:i64, %1
%3:i64 = addnsw 1:i64, %2
%4:i64 = var
%5:i64 = phi %0, %3, %4
infer %5

; *****
; For LLVM instruction:
;  %8 = load i64, i64* %n, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %base.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %conv3 = sext i32 %9 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %rem = urem i64 %8, %conv3
; Looking for a replacement for:
%0:i64 = var
%1:i32 = var
%2:i64 = sext %1
%3:i64 = urem %0, %2
infer %3 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)

; *****
; For LLVM instruction:
;  %idxprom = trunc i64 %rem to i32
; Looking for a replacement for:
%0:i64 = var
%1:i32 = var
%2:i64 = sext %1
%3:i64 = urem %0, %2
%4:i32 = trunc %3
infer %4

; *****
; For LLVM instruction:
;  %10 = load i8, i8* %arrayidx, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %11, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %base.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %conv5 = sext i32 %12 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %13 = load i64, i64* %n, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %div = udiv i64 %13, %conv5
; Looking for a replacement for:
%0:i64 = var
%1:i32 = var
%2:i64 = sext %1
%3:i64 = udiv %0, %2
infer %3

; *****
; For LLVM instruction:
;  %tobool = icmp ne i64 %div, 0
; Looking for a replacement for:
%0:i64 = var
%1:i32 = var
%2:i64 = sext %1
%3:i64 = udiv %0, %2 (hasExternalUses)
%4:i1 = ne 0:i64, %3
infer %4

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %neg, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add6 = add nsw i32 %14, %15
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %add7 = add nsw i32 %add6, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
%3:i32 = addnsw 1:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %neg, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp9 = icmp sgt i32 %17, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec = add nsw i32 %18, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %19 = load i8, i8* %arrayidx11, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc13 = add nsw i32 %22, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %neg, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool14 = icmp ne i32 %23, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt 36:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i64 = var
infer %0


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i1 = slt %0, 0:i64
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i1 = slt %0, 0:i64 (hasExternalUses)
%2:i32 = zext %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = xor 18446744073709551615:i64, %0
infer %1


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = xor 18446744073709551615:i64, %0
%2:i64 = addnsw 1:i64, %1
infer %2


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var
%1:i64 = xor 18446744073709551615:i64, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i64 = var
%2:i64 = xor 18446744073709551615:i64, %1
%3:i64 = addnsw 1:i64, %2
%4:i64 = var
%5:i64 = phi %0, %3, %4
infer %5


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i64 = var
%1:i64 = xor 18446744073709551615:i64, %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i64 = var
%1:i64 = xor 18446744073709551615:i64, %0
%2:i64 = addnsw 1:i64, %1

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = sext %0
infer %1


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i32 = var
%2:i64 = sext %1
%3:i64 = urem %0, %2
infer %3 (demandedBits=0000000000000000000000000000000011111111111111111111111111111111)


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 782260638
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i64 = sext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i32 = var
%2:i64 = sext %1
%3:i64 = urem %0, %2
%4:i32 = trunc %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 782260638
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i32 = var
%2:i64 = sext %1
%3:i64 = udiv %0, %2
infer %3


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 5547518937339527166
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i64 = sext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i32 = var
%2:i64 = sext %1
%3:i64 = udiv %0, %2 (hasExternalUses)
%4:i1 = ne 0:i64, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
%3:i32 = addnsw 1:i32, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -16
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for to_base()

; entering Souper's runOnFunction() for from_base()

; ModuleID = './Non-decimal_radices-Convert.c.bc'
source_filename = "./Non-decimal_radices-Convert.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque

@.str = private unnamed_addr constant [37 x i8] c"0123456789abcdefghijklmnopqrstuvwxyz\00", align 1
@stderr = external constant %struct._IO_FILE*, align 4
@.str.1 = private unnamed_addr constant [19 x i8] c"base %d too large\0A\00", align 1
@.str.2 = private unnamed_addr constant [20 x i8] c"%lld in base 2: %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [21 x i8] c"%lld in base 16: %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i8* @to_base(i64 %num, i32 %base) #0 {
entry:
  %retval = alloca i8*, align 4
  %num.addr = alloca i64, align 8
  %base.addr = alloca i32, align 4
  %tbl = alloca i8*, align 4
  %buf = alloca [66 x i8], align 16
  %out = alloca i8*, align 4
  %n = alloca i64, align 8
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  %neg = alloca i32, align 4
  store i64 %num, i64* %num.addr, align 8
  store i32 %base, i32* %base.addr, align 4
  store i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i32 0, i32 0), i8** %tbl, align 4
  %0 = bitcast [66 x i8]* %buf to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 66, i1 false)
  store i32 0, i32* %len, align 4
  store i32 0, i32* %neg, align 4
  %1 = load i32, i32* %base.addr, align 4
  %cmp = icmp sgt i32 %1, 36
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %3 = load i32, i32* %base.addr, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i32 0, i32 0), i32 %3)
  store i8* null, i8** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %4 = load i64, i64* %num.addr, align 8
  %cmp1 = icmp slt i64 %4, 0
  %conv = zext i1 %cmp1 to i32
  store i32 %conv, i32* %neg, align 4
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %5 = load i64, i64* %num.addr, align 8
  %neg2 = xor i64 %5, -1
  %add = add nsw i64 %neg2, 1
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %6 = load i64, i64* %num.addr, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %add, %cond.true ], [ %6, %cond.false ]
  store i64 %cond, i64* %n, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %cond.end
  %7 = load i8*, i8** %tbl, align 4
  %8 = load i64, i64* %n, align 8
  %9 = load i32, i32* %base.addr, align 4
  %conv3 = sext i32 %9 to i64
  %rem = urem i64 %8, %conv3
  %idxprom = trunc i64 %rem to i32
  %arrayidx = getelementptr inbounds i8, i8* %7, i32 %idxprom
  %10 = load i8, i8* %arrayidx, align 1
  %11 = load i32, i32* %len, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %len, align 4
  %arrayidx4 = getelementptr inbounds [66 x i8], [66 x i8]* %buf, i32 0, i32 %11
  store i8 %10, i8* %arrayidx4, align 1
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %12 = load i32, i32* %base.addr, align 4
  %conv5 = sext i32 %12 to i64
  %13 = load i64, i64* %n, align 8
  %div = udiv i64 %13, %conv5
  store i64 %div, i64* %n, align 8
  %tobool = icmp ne i64 %div, 0
  br i1 %tobool, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %14 = load i32, i32* %len, align 4
  %15 = load i32, i32* %neg, align 4
  %add6 = add nsw i32 %14, %15
  %add7 = add nsw i32 %add6, 1
  %call8 = call noalias i8* @malloc(i32 %add7)
  store i8* %call8, i8** %out, align 4
  %16 = load i32, i32* %neg, align 4
  store i32 %16, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %do.end
  %17 = load i32, i32* %len, align 4
  %cmp9 = icmp sgt i32 %17, 0
  br i1 %cmp9, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %18 = load i32, i32* %len, align 4
  %dec = add nsw i32 %18, -1
  store i32 %dec, i32* %len, align 4
  %arrayidx11 = getelementptr inbounds [66 x i8], [66 x i8]* %buf, i32 0, i32 %dec
  %19 = load i8, i8* %arrayidx11, align 1
  %20 = load i8*, i8** %out, align 4
  %21 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds i8, i8* %20, i32 %21
  store i8 %19, i8* %arrayidx12, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %22 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %22, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %23 = load i32, i32* %neg, align 4
  %tobool14 = icmp ne i32 %23, 0
  br i1 %tobool14, label %if.then15, label %if.end17

if.then15:                                        ; preds = %for.end
  %24 = load i8*, i8** %out, align 4
  %arrayidx16 = getelementptr inbounds i8, i8* %24, i32 0
  store i8 45, i8* %arrayidx16, align 1
  br label %if.end17

if.end17:                                         ; preds = %if.then15, %for.end
  %25 = load i8*, i8** %out, align 4
  store i8* %25, i8** %retval, align 4
  br label %return

return:                                           ; preds = %if.end17, %if.then
  %26 = load i8*, i8** %retval, align 4
  ret i8* %26
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #2

declare noalias i8* @malloc(i32 %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @from_base(i8* %num_str, i32 %base) #0 {
entry:
  %num_str.addr = alloca i8*, align 4
  %base.addr = alloca i32, align 4
  %endptr = alloca i8*, align 4
  %result = alloca i32, align 4
  store i8* %num_str, i8** %num_str.addr, align 4
  store i32 %base, i32* %base.addr, align 4
  %0 = load i8*, i8** %num_str.addr, align 4
  %1 = load i32, i32* %base.addr, align 4
  %call = call i32 @strtol(i8* %0, i8** %endptr, i32 %1)
  store i32 %call, i32* %result, align 4
  %2 = load i32, i32* %result, align 4
  ret i32 %2
}

declare i32 @strtol(i8* %0, i8** %1, i32 %2) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %x = alloca i64, align 8
  store i32 0, i32* %retval, align 4
  store i64 -9223372036854775808, i64* %x, align 8
  %0 = load i64, i64* %x, align 8
  %1 = load i64, i64* %x, align 8
  %call = call i8* @to_base(i64 %1, i32 2)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.2, i32 0, i32 0), i64 %0, i8* %call)
  store i64 383, i64* %x, align 8
  %2 = load i64, i64* %x, align 8
  %3 = load i64, i64* %x, align 8
  %call2 = call i8* @to_base(i64 %3, i32 16)
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i32 0, i32 0), i64 %2, i8* %call2)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %base.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 @strtol(i8* %0, i8** %endptr, i32 %1)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %result, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for from_base()

; entering Souper's runOnFunction() for main()

; ModuleID = './Non-decimal_radices-Convert.c.bc'
source_filename = "./Non-decimal_radices-Convert.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct._IO_FILE = type opaque

@.str = private unnamed_addr constant [37 x i8] c"0123456789abcdefghijklmnopqrstuvwxyz\00", align 1
@stderr = external constant %struct._IO_FILE*, align 4
@.str.1 = private unnamed_addr constant [19 x i8] c"base %d too large\0A\00", align 1
@.str.2 = private unnamed_addr constant [20 x i8] c"%lld in base 2: %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [21 x i8] c"%lld in base 16: %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i8* @to_base(i64 %num, i32 %base) #0 {
entry:
  %retval = alloca i8*, align 4
  %num.addr = alloca i64, align 8
  %base.addr = alloca i32, align 4
  %tbl = alloca i8*, align 4
  %buf = alloca [66 x i8], align 16
  %out = alloca i8*, align 4
  %n = alloca i64, align 8
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  %neg = alloca i32, align 4
  store i64 %num, i64* %num.addr, align 8
  store i32 %base, i32* %base.addr, align 4
  store i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i32 0, i32 0), i8** %tbl, align 4
  %0 = bitcast [66 x i8]* %buf to i8*
  call void @llvm.memset.p0i8.i32(i8* align 16 %0, i8 0, i32 66, i1 false)
  store i32 0, i32* %len, align 4
  store i32 0, i32* %neg, align 4
  %1 = load i32, i32* %base.addr, align 4
  %cmp = icmp sgt i32 %1, 36
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %3 = load i32, i32* %base.addr, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i32 0, i32 0), i32 %3)
  store i8* null, i8** %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %4 = load i64, i64* %num.addr, align 8
  %cmp1 = icmp slt i64 %4, 0
  %conv = zext i1 %cmp1 to i32
  store i32 %conv, i32* %neg, align 4
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %5 = load i64, i64* %num.addr, align 8
  %neg2 = xor i64 %5, -1
  %add = add nsw i64 %neg2, 1
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %6 = load i64, i64* %num.addr, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %add, %cond.true ], [ %6, %cond.false ]
  store i64 %cond, i64* %n, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %cond.end
  %7 = load i8*, i8** %tbl, align 4
  %8 = load i64, i64* %n, align 8
  %9 = load i32, i32* %base.addr, align 4
  %conv3 = sext i32 %9 to i64
  %rem = urem i64 %8, %conv3
  %idxprom = trunc i64 %rem to i32
  %arrayidx = getelementptr inbounds i8, i8* %7, i32 %idxprom
  %10 = load i8, i8* %arrayidx, align 1
  %11 = load i32, i32* %len, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %len, align 4
  %arrayidx4 = getelementptr inbounds [66 x i8], [66 x i8]* %buf, i32 0, i32 %11
  store i8 %10, i8* %arrayidx4, align 1
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %12 = load i32, i32* %base.addr, align 4
  %conv5 = sext i32 %12 to i64
  %13 = load i64, i64* %n, align 8
  %div = udiv i64 %13, %conv5
  store i64 %div, i64* %n, align 8
  %tobool = icmp ne i64 %div, 0
  br i1 %tobool, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %14 = load i32, i32* %len, align 4
  %15 = load i32, i32* %neg, align 4
  %add6 = add nsw i32 %14, %15
  %add7 = add nsw i32 %add6, 1
  %call8 = call noalias i8* @malloc(i32 %add7)
  store i8* %call8, i8** %out, align 4
  %16 = load i32, i32* %neg, align 4
  store i32 %16, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %do.end
  %17 = load i32, i32* %len, align 4
  %cmp9 = icmp sgt i32 %17, 0
  br i1 %cmp9, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %18 = load i32, i32* %len, align 4
  %dec = add nsw i32 %18, -1
  store i32 %dec, i32* %len, align 4
  %arrayidx11 = getelementptr inbounds [66 x i8], [66 x i8]* %buf, i32 0, i32 %dec
  %19 = load i8, i8* %arrayidx11, align 1
  %20 = load i8*, i8** %out, align 4
  %21 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds i8, i8* %20, i32 %21
  store i8 %19, i8* %arrayidx12, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %22 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %22, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %23 = load i32, i32* %neg, align 4
  %tobool14 = icmp ne i32 %23, 0
  br i1 %tobool14, label %if.then15, label %if.end17

if.then15:                                        ; preds = %for.end
  %24 = load i8*, i8** %out, align 4
  %arrayidx16 = getelementptr inbounds i8, i8* %24, i32 0
  store i8 45, i8* %arrayidx16, align 1
  br label %if.end17

if.end17:                                         ; preds = %if.then15, %for.end
  %25 = load i8*, i8** %out, align 4
  store i8* %25, i8** %retval, align 4
  br label %return

return:                                           ; preds = %if.end17, %if.then
  %26 = load i8*, i8** %retval, align 4
  ret i8* %26
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #1

declare i32 @fprintf(%struct._IO_FILE* %0, i8* %1, ...) #2

declare noalias i8* @malloc(i32 %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @from_base(i8* %num_str, i32 %base) #0 {
entry:
  %num_str.addr = alloca i8*, align 4
  %base.addr = alloca i32, align 4
  %endptr = alloca i8*, align 4
  %result = alloca i32, align 4
  store i8* %num_str, i8** %num_str.addr, align 4
  store i32 %base, i32* %base.addr, align 4
  %0 = load i8*, i8** %num_str.addr, align 4
  %1 = load i32, i32* %base.addr, align 4
  %call = call i32 @strtol(i8* %0, i8** %endptr, i32 %1)
  store i32 %call, i32* %result, align 4
  %2 = load i32, i32* %result, align 4
  ret i32 %2
}

declare i32 @strtol(i8* %0, i8** %1, i32 %2) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %x = alloca i64, align 8
  store i32 0, i32* %retval, align 4
  store i64 -9223372036854775808, i64* %x, align 8
  %0 = load i64, i64* %x, align 8
  %1 = load i64, i64* %x, align 8
  %call = call i8* @to_base(i64 %1, i32 2)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.2, i32 0, i32 0), i64 %0, i8* %call)
  store i64 383, i64* %x, align 8
  %2 = load i64, i64* %x, align 8
  %3 = load i64, i64* %x, align 8
  %call2 = call i8* @to_base(i64 %3, i32 16)
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i32 0, i32 0), i64 %2, i8* %call2)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i64, i64* %x, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i64, i64* %x, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i64, i64* %x, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i64, i64* %x, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
