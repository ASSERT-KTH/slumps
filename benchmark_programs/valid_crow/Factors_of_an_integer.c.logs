
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for xferFactors()

; ModuleID = './Factors_of_an_integer.c.bc'
source_filename = "./Factors_of_an_integer.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.Factors = type { i32*, i16 }

@__const.__main_argc_argv.nums2factor = private unnamed_addr constant [4 x i32] [i32 2059, i32 223092870, i32 3135, i32 45], align 16
@.str = private unnamed_addr constant [23 x i8] c"\0Afactors of %d are:\0A  \00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"%c %d\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @xferFactors(%struct.Factors* %fctrs, i32* %flist, i32 %flix) #0 {
entry:
  %fctrs.addr = alloca %struct.Factors*, align 4
  %flist.addr = alloca i32*, align 4
  %flix.addr = alloca i32, align 4
  %ix = alloca i32, align 4
  %ij = alloca i32, align 4
  %newSize = alloca i32, align 4
  store %struct.Factors* %fctrs, %struct.Factors** %fctrs.addr, align 4
  store i32* %flist, i32** %flist.addr, align 4
  store i32 %flix, i32* %flix.addr, align 4
  %0 = load %struct.Factors*, %struct.Factors** %fctrs.addr, align 4
  %count = getelementptr inbounds %struct.Factors, %struct.Factors* %0, i32 0, i32 1
  %1 = load i16, i16* %count, align 4
  %conv = sext i16 %1 to i32
  %2 = load i32, i32* %flix.addr, align 4
  %add = add nsw i32 %conv, %2
  store i32 %add, i32* %newSize, align 4
  %3 = load i32, i32* %newSize, align 4
  %4 = load i32, i32* %flix.addr, align 4
  %cmp = icmp sgt i32 %3, %4
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %5 = load %struct.Factors*, %struct.Factors** %fctrs.addr, align 4
  %list = getelementptr inbounds %struct.Factors, %struct.Factors* %5, i32 0, i32 0
  %6 = load i32*, i32** %list, align 4
  %7 = bitcast i32* %6 to i8*
  %8 = load i32, i32* %newSize, align 4
  %mul = mul i32 %8, 4
  %call = call i8* @realloc(i8* %7, i32 %mul)
  %9 = bitcast i8* %call to i32*
  %10 = load %struct.Factors*, %struct.Factors** %fctrs.addr, align 4
  %list2 = getelementptr inbounds %struct.Factors, %struct.Factors* %10, i32 0, i32 0
  store i32* %9, i32** %list2, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %11 = load i32, i32* %newSize, align 4
  %mul3 = mul i32 %11, 4
  %call4 = call noalias i8* @malloc(i32 %mul3)
  %12 = bitcast i8* %call4 to i32*
  %13 = load %struct.Factors*, %struct.Factors** %fctrs.addr, align 4
  %list5 = getelementptr inbounds %struct.Factors, %struct.Factors* %13, i32 0, i32 0
  store i32* %12, i32** %list5, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  store i32 0, i32* %ij, align 4
  %14 = load %struct.Factors*, %struct.Factors** %fctrs.addr, align 4
  %count6 = getelementptr inbounds %struct.Factors, %struct.Factors* %14, i32 0, i32 1
  %15 = load i16, i16* %count6, align 4
  %conv7 = sext i16 %15 to i32
  store i32 %conv7, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %16 = load i32, i32* %ix, align 4
  %17 = load i32, i32* %newSize, align 4
  %cmp8 = icmp slt i32 %16, %17
  br i1 %cmp8, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %18 = load i32*, i32** %flist.addr, align 4
  %19 = load i32, i32* %ij, align 4
  %arrayidx = getelementptr inbounds i32, i32* %18, i32 %19
  %20 = load i32, i32* %arrayidx, align 4
  %21 = load %struct.Factors*, %struct.Factors** %fctrs.addr, align 4
  %list10 = getelementptr inbounds %struct.Factors, %struct.Factors* %21, i32 0, i32 0
  %22 = load i32*, i32** %list10, align 4
  %23 = load i32, i32* %ix, align 4
  %arrayidx11 = getelementptr inbounds i32, i32* %22, i32 %23
  store i32 %20, i32* %arrayidx11, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %24 = load i32, i32* %ij, align 4
  %inc = add nsw i32 %24, 1
  store i32 %inc, i32* %ij, align 4
  %25 = load i32, i32* %ix, align 4
  %inc12 = add nsw i32 %25, 1
  store i32 %inc12, i32* %ix, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %26 = load i32, i32* %newSize, align 4
  %conv13 = trunc i32 %26 to i16
  %27 = load %struct.Factors*, %struct.Factors** %fctrs.addr, align 4
  %count14 = getelementptr inbounds %struct.Factors, %struct.Factors* %27, i32 0, i32 1
  store i16 %conv13, i16* %count14, align 4
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.Factors* @factor(i32 %num, %struct.Factors* %fctrs) #0 {
entry:
  %num.addr = alloca i32, align 4
  %fctrs.addr = alloca %struct.Factors*, align 4
  %flist = alloca [301 x i32], align 16
  %flix = alloca i32, align 4
  %dvsr = alloca i32, align 4
  store i32 %num, i32* %num.addr, align 4
  store %struct.Factors* %fctrs, %struct.Factors** %fctrs.addr, align 4
  store i32 0, i32* %flix, align 4
  %0 = load %struct.Factors*, %struct.Factors** %fctrs.addr, align 4
  %count = getelementptr inbounds %struct.Factors, %struct.Factors* %0, i32 0, i32 1
  store i16 0, i16* %count, align 4
  %1 = load %struct.Factors*, %struct.Factors** %fctrs.addr, align 4
  %list = getelementptr inbounds %struct.Factors, %struct.Factors* %1, i32 0, i32 0
  %2 = load i32*, i32** %list, align 4
  %3 = bitcast i32* %2 to i8*
  call void @free(i8* %3)
  %4 = load %struct.Factors*, %struct.Factors** %fctrs.addr, align 4
  %list1 = getelementptr inbounds %struct.Factors, %struct.Factors* %4, i32 0, i32 0
  store i32* null, i32** %list1, align 4
  store i32 1, i32* %dvsr, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load i32, i32* %dvsr, align 4
  %6 = load i32, i32* %dvsr, align 4
  %mul = mul nsw i32 %5, %6
  %7 = load i32, i32* %num.addr, align 4
  %cmp = icmp slt i32 %mul, %7
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load i32, i32* %num.addr, align 4
  %9 = load i32, i32* %dvsr, align 4
  %rem = srem i32 %8, %9
  %cmp2 = icmp ne i32 %rem, 0
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.inc

if.end:                                           ; preds = %for.body
  %10 = load i32, i32* %flix, align 4
  %cmp3 = icmp eq i32 %10, 300
  br i1 %cmp3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  %11 = load %struct.Factors*, %struct.Factors** %fctrs.addr, align 4
  %arraydecay = getelementptr inbounds [301 x i32], [301 x i32]* %flist, i32 0, i32 0
  %12 = load i32, i32* %flix, align 4
  call void @xferFactors(%struct.Factors* %11, i32* %arraydecay, i32 %12)
  store i32 0, i32* %flix, align 4
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %if.end
  %13 = load i32, i32* %dvsr, align 4
  %14 = load i32, i32* %flix, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %flix, align 4
  %arrayidx = getelementptr inbounds [301 x i32], [301 x i32]* %flist, i32 0, i32 %14
  store i32 %13, i32* %arrayidx, align 4
  %15 = load i32, i32* %num.addr, align 4
  %16 = load i32, i32* %dvsr, align 4
  %div = sdiv i32 %15, %16
  %17 = load i32, i32* %flix, align 4
  %inc6 = add nsw i32 %17, 1
  store i32 %inc6, i32* %flix, align 4
  %arrayidx7 = getelementptr inbounds [301 x i32], [301 x i32]* %flist, i32 0, i32 %17
  store i32 %div, i32* %arrayidx7, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end5, %if.then
  %18 = load i32, i32* %dvsr, align 4
  %inc8 = add nsw i32 %18, 1
  store i32 %inc8, i32* %dvsr, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %19 = load i32, i32* %dvsr, align 4
  %20 = load i32, i32* %dvsr, align 4
  %mul9 = mul nsw i32 %19, %20
  %21 = load i32, i32* %num.addr, align 4
  %cmp10 = icmp eq i32 %mul9, %21
  br i1 %cmp10, label %if.then11, label %if.end14

if.then11:                                        ; preds = %for.end
  %22 = load i32, i32* %dvsr, align 4
  %23 = load i32, i32* %flix, align 4
  %inc12 = add nsw i32 %23, 1
  store i32 %inc12, i32* %flix, align 4
  %arrayidx13 = getelementptr inbounds [301 x i32], [301 x i32]* %flist, i32 0, i32 %23
  store i32 %22, i32* %arrayidx13, align 4
  br label %if.end14

if.end14:                                         ; preds = %if.then11, %for.end
  %24 = load i32, i32* %flix, align 4
  %cmp15 = icmp sgt i32 %24, 0
  br i1 %cmp15, label %if.then16, label %if.end18

if.then16:                                        ; preds = %if.end14
  %25 = load %struct.Factors*, %struct.Factors** %fctrs.addr, align 4
  %arraydecay17 = getelementptr inbounds [301 x i32], [301 x i32]* %flist, i32 0, i32 0
  %26 = load i32, i32* %flix, align 4
  call void @xferFactors(%struct.Factors* %25, i32* %arraydecay17, i32 %26)
  br label %if.end18

if.end18:                                         ; preds = %if.then16, %if.end14
  %27 = load %struct.Factors*, %struct.Factors** %fctrs.addr, align 4
  ret %struct.Factors* %27
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %nums2factor = alloca [4 x i32], align 16
  %ftors = alloca %struct.Factors, align 4
  %sep = alloca i8, align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  %0 = bitcast [4 x i32]* %nums2factor to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([4 x i32]* @__const.__main_argc_argv.nums2factor to i8*), i32 16, i1 false)
  %1 = bitcast %struct.Factors* %ftors to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %1, i8 0, i32 8, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc11, %entry
  %2 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, 4
  br i1 %cmp, label %for.body, label %for.end13

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* %nums2factor, i32 0, i32 %3
  %4 = load i32, i32* %arrayidx, align 4
  %call = call %struct.Factors* @factor(i32 %4, %struct.Factors* %ftors)
  %5 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [4 x i32], [4 x i32]* %nums2factor, i32 0, i32 %5
  %6 = load i32, i32* %arrayidx1, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i32 0, i32 0), i32 %6)
  store i8 32, i8* %sep, align 1
  store i32 0, i32* %j, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc, %for.body
  %7 = load i32, i32* %j, align 4
  %count = getelementptr inbounds %struct.Factors, %struct.Factors* %ftors, i32 0, i32 1
  %8 = load i16, i16* %count, align 4
  %conv = sext i16 %8 to i32
  %cmp4 = icmp slt i32 %7, %conv
  br i1 %cmp4, label %for.body6, label %for.end

for.body6:                                        ; preds = %for.cond3
  %9 = load i8, i8* %sep, align 1
  %conv7 = sext i8 %9 to i32
  %list = getelementptr inbounds %struct.Factors, %struct.Factors* %ftors, i32 0, i32 0
  %10 = load i32*, i32** %list, align 4
  %11 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %10, i32 %11
  %12 = load i32, i32* %arrayidx8, align 4
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i32 %conv7, i32 %12)
  store i8 44, i8* %sep, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body6
  %13 = load i32, i32* %j, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond3

for.end:                                          ; preds = %for.cond3
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  br label %for.inc11

for.inc11:                                        ; preds = %for.end
  %14 = load i32, i32* %i, align 4
  %inc12 = add nsw i32 %14, 1
  store i32 %inc12, i32* %i, align 4
  br label %for.cond

for.end13:                                        ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #3

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { argmemonly nounwind willreturn writeonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i16, i16* %count, align 4
; Looking for a replacement for:
%0:i16 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i16 %1 to i32
; Looking for a replacement for:
%0:i16 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %flix.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %conv, %2
; Looking for a replacement for:
%0:i32 = var
%1:i16 = var
%2:i32 = sext %1
%3:i32 = addnsw %0, %2
infer %3

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %newSize, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %flix.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sgt i32 %3, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %newSize, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul i32 %8, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %newSize, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul3 = mul i32 %11, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %15 = load i16, i16* %count6, align 4
; Looking for a replacement for:
%0:i16 = var
infer %0

; *****
; For LLVM instruction:
;  %conv7 = sext i16 %15 to i32
; Looking for a replacement for:
%0:i16 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %ix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %newSize, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp8 = icmp slt i32 %16, %17
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %ij, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %ix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %ij, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %24, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %ix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc12 = add nsw i32 %25, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %newSize, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00000000000000001111111111111111)

; *****
; For LLVM instruction:
;  %conv13 = trunc i32 %26 to i16
; Looking for a replacement for:
%0:i32 = var
%1:i16 = trunc %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i16 = var
infer %0


--------------------------------
guess 0

%0:i16 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i16 = var
%1:i32 = sext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i16 = var
%2:i32 = sext %1
%3:i32 = addnsw %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i16 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0 (demandedBits=00000000000000001111111111111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 65535
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i16 = trunc %0
infer %1


--------------------------------
guess 0

%0:i16 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for xferFactors()

; entering Souper's runOnFunction() for factor()

; ModuleID = './Factors_of_an_integer.c.bc'
source_filename = "./Factors_of_an_integer.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.Factors = type { i32*, i16 }

@__const.__main_argc_argv.nums2factor = private unnamed_addr constant [4 x i32] [i32 2059, i32 223092870, i32 3135, i32 45], align 16
@.str = private unnamed_addr constant [23 x i8] c"\0Afactors of %d are:\0A  \00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"%c %d\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @xferFactors(%struct.Factors* %fctrs, i32* %flist, i32 %flix) #0 {
entry:
  %fctrs.addr = alloca %struct.Factors*, align 4
  %flist.addr = alloca i32*, align 4
  %flix.addr = alloca i32, align 4
  %ix = alloca i32, align 4
  %ij = alloca i32, align 4
  %newSize = alloca i32, align 4
  store %struct.Factors* %fctrs, %struct.Factors** %fctrs.addr, align 4
  store i32* %flist, i32** %flist.addr, align 4
  store i32 %flix, i32* %flix.addr, align 4
  %0 = load %struct.Factors*, %struct.Factors** %fctrs.addr, align 4
  %count = getelementptr inbounds %struct.Factors, %struct.Factors* %0, i32 0, i32 1
  %1 = load i16, i16* %count, align 4
  %conv = sext i16 %1 to i32
  %2 = load i32, i32* %flix.addr, align 4
  %add = add nsw i32 %conv, %2
  store i32 %add, i32* %newSize, align 4
  %3 = load i32, i32* %newSize, align 4
  %4 = load i32, i32* %flix.addr, align 4
  %cmp = icmp sgt i32 %3, %4
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %5 = load %struct.Factors*, %struct.Factors** %fctrs.addr, align 4
  %list = getelementptr inbounds %struct.Factors, %struct.Factors* %5, i32 0, i32 0
  %6 = load i32*, i32** %list, align 4
  %7 = bitcast i32* %6 to i8*
  %8 = load i32, i32* %newSize, align 4
  %mul = mul i32 %8, 4
  %call = call i8* @realloc(i8* %7, i32 %mul)
  %9 = bitcast i8* %call to i32*
  %10 = load %struct.Factors*, %struct.Factors** %fctrs.addr, align 4
  %list2 = getelementptr inbounds %struct.Factors, %struct.Factors* %10, i32 0, i32 0
  store i32* %9, i32** %list2, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %11 = load i32, i32* %newSize, align 4
  %mul3 = mul i32 %11, 4
  %call4 = call noalias i8* @malloc(i32 %mul3)
  %12 = bitcast i8* %call4 to i32*
  %13 = load %struct.Factors*, %struct.Factors** %fctrs.addr, align 4
  %list5 = getelementptr inbounds %struct.Factors, %struct.Factors* %13, i32 0, i32 0
  store i32* %12, i32** %list5, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  store i32 0, i32* %ij, align 4
  %14 = load %struct.Factors*, %struct.Factors** %fctrs.addr, align 4
  %count6 = getelementptr inbounds %struct.Factors, %struct.Factors* %14, i32 0, i32 1
  %15 = load i16, i16* %count6, align 4
  %conv7 = sext i16 %15 to i32
  store i32 %conv7, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %16 = load i32, i32* %ix, align 4
  %17 = load i32, i32* %newSize, align 4
  %cmp8 = icmp slt i32 %16, %17
  br i1 %cmp8, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %18 = load i32*, i32** %flist.addr, align 4
  %19 = load i32, i32* %ij, align 4
  %arrayidx = getelementptr inbounds i32, i32* %18, i32 %19
  %20 = load i32, i32* %arrayidx, align 4
  %21 = load %struct.Factors*, %struct.Factors** %fctrs.addr, align 4
  %list10 = getelementptr inbounds %struct.Factors, %struct.Factors* %21, i32 0, i32 0
  %22 = load i32*, i32** %list10, align 4
  %23 = load i32, i32* %ix, align 4
  %arrayidx11 = getelementptr inbounds i32, i32* %22, i32 %23
  store i32 %20, i32* %arrayidx11, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %24 = load i32, i32* %ij, align 4
  %inc = add nsw i32 %24, 1
  store i32 %inc, i32* %ij, align 4
  %25 = load i32, i32* %ix, align 4
  %inc12 = add nsw i32 %25, 1
  store i32 %inc12, i32* %ix, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %26 = load i32, i32* %newSize, align 4
  %conv13 = trunc i32 %26 to i16
  %27 = load %struct.Factors*, %struct.Factors** %fctrs.addr, align 4
  %count14 = getelementptr inbounds %struct.Factors, %struct.Factors* %27, i32 0, i32 1
  store i16 %conv13, i16* %count14, align 4
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.Factors* @factor(i32 %num, %struct.Factors* %fctrs) #0 {
entry:
  %num.addr = alloca i32, align 4
  %fctrs.addr = alloca %struct.Factors*, align 4
  %flist = alloca [301 x i32], align 16
  %flix = alloca i32, align 4
  %dvsr = alloca i32, align 4
  store i32 %num, i32* %num.addr, align 4
  store %struct.Factors* %fctrs, %struct.Factors** %fctrs.addr, align 4
  store i32 0, i32* %flix, align 4
  %0 = load %struct.Factors*, %struct.Factors** %fctrs.addr, align 4
  %count = getelementptr inbounds %struct.Factors, %struct.Factors* %0, i32 0, i32 1
  store i16 0, i16* %count, align 4
  %1 = load %struct.Factors*, %struct.Factors** %fctrs.addr, align 4
  %list = getelementptr inbounds %struct.Factors, %struct.Factors* %1, i32 0, i32 0
  %2 = load i32*, i32** %list, align 4
  %3 = bitcast i32* %2 to i8*
  call void @free(i8* %3)
  %4 = load %struct.Factors*, %struct.Factors** %fctrs.addr, align 4
  %list1 = getelementptr inbounds %struct.Factors, %struct.Factors* %4, i32 0, i32 0
  store i32* null, i32** %list1, align 4
  store i32 1, i32* %dvsr, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load i32, i32* %dvsr, align 4
  %6 = load i32, i32* %dvsr, align 4
  %mul = mul nsw i32 %5, %6
  %7 = load i32, i32* %num.addr, align 4
  %cmp = icmp slt i32 %mul, %7
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load i32, i32* %num.addr, align 4
  %9 = load i32, i32* %dvsr, align 4
  %rem = srem i32 %8, %9
  %cmp2 = icmp ne i32 %rem, 0
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.inc

if.end:                                           ; preds = %for.body
  %10 = load i32, i32* %flix, align 4
  %cmp3 = icmp eq i32 %10, 300
  br i1 %cmp3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  %11 = load %struct.Factors*, %struct.Factors** %fctrs.addr, align 4
  %arraydecay = getelementptr inbounds [301 x i32], [301 x i32]* %flist, i32 0, i32 0
  %12 = load i32, i32* %flix, align 4
  call void @xferFactors(%struct.Factors* %11, i32* %arraydecay, i32 %12)
  store i32 0, i32* %flix, align 4
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %if.end
  %13 = load i32, i32* %dvsr, align 4
  %14 = load i32, i32* %flix, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %flix, align 4
  %arrayidx = getelementptr inbounds [301 x i32], [301 x i32]* %flist, i32 0, i32 %14
  store i32 %13, i32* %arrayidx, align 4
  %15 = load i32, i32* %num.addr, align 4
  %16 = load i32, i32* %dvsr, align 4
  %div = sdiv i32 %15, %16
  %17 = load i32, i32* %flix, align 4
  %inc6 = add nsw i32 %17, 1
  store i32 %inc6, i32* %flix, align 4
  %arrayidx7 = getelementptr inbounds [301 x i32], [301 x i32]* %flist, i32 0, i32 %17
  store i32 %div, i32* %arrayidx7, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end5, %if.then
  %18 = load i32, i32* %dvsr, align 4
  %inc8 = add nsw i32 %18, 1
  store i32 %inc8, i32* %dvsr, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %19 = load i32, i32* %dvsr, align 4
  %20 = load i32, i32* %dvsr, align 4
  %mul9 = mul nsw i32 %19, %20
  %21 = load i32, i32* %num.addr, align 4
  %cmp10 = icmp eq i32 %mul9, %21
  br i1 %cmp10, label %if.then11, label %if.end14

if.then11:                                        ; preds = %for.end
  %22 = load i32, i32* %dvsr, align 4
  %23 = load i32, i32* %flix, align 4
  %inc12 = add nsw i32 %23, 1
  store i32 %inc12, i32* %flix, align 4
  %arrayidx13 = getelementptr inbounds [301 x i32], [301 x i32]* %flist, i32 0, i32 %23
  store i32 %22, i32* %arrayidx13, align 4
  br label %if.end14

if.end14:                                         ; preds = %if.then11, %for.end
  %24 = load i32, i32* %flix, align 4
  %cmp15 = icmp sgt i32 %24, 0
  br i1 %cmp15, label %if.then16, label %if.end18

if.then16:                                        ; preds = %if.end14
  %25 = load %struct.Factors*, %struct.Factors** %fctrs.addr, align 4
  %arraydecay17 = getelementptr inbounds [301 x i32], [301 x i32]* %flist, i32 0, i32 0
  %26 = load i32, i32* %flix, align 4
  call void @xferFactors(%struct.Factors* %25, i32* %arraydecay17, i32 %26)
  br label %if.end18

if.end18:                                         ; preds = %if.then16, %if.end14
  %27 = load %struct.Factors*, %struct.Factors** %fctrs.addr, align 4
  ret %struct.Factors* %27
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %nums2factor = alloca [4 x i32], align 16
  %ftors = alloca %struct.Factors, align 4
  %sep = alloca i8, align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  %0 = bitcast [4 x i32]* %nums2factor to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([4 x i32]* @__const.__main_argc_argv.nums2factor to i8*), i32 16, i1 false)
  %1 = bitcast %struct.Factors* %ftors to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %1, i8 0, i32 8, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc11, %entry
  %2 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, 4
  br i1 %cmp, label %for.body, label %for.end13

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* %nums2factor, i32 0, i32 %3
  %4 = load i32, i32* %arrayidx, align 4
  %call = call %struct.Factors* @factor(i32 %4, %struct.Factors* %ftors)
  %5 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [4 x i32], [4 x i32]* %nums2factor, i32 0, i32 %5
  %6 = load i32, i32* %arrayidx1, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i32 0, i32 0), i32 %6)
  store i8 32, i8* %sep, align 1
  store i32 0, i32* %j, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc, %for.body
  %7 = load i32, i32* %j, align 4
  %count = getelementptr inbounds %struct.Factors, %struct.Factors* %ftors, i32 0, i32 1
  %8 = load i16, i16* %count, align 4
  %conv = sext i16 %8 to i32
  %cmp4 = icmp slt i32 %7, %conv
  br i1 %cmp4, label %for.body6, label %for.end

for.body6:                                        ; preds = %for.cond3
  %9 = load i8, i8* %sep, align 1
  %conv7 = sext i8 %9 to i32
  %list = getelementptr inbounds %struct.Factors, %struct.Factors* %ftors, i32 0, i32 0
  %10 = load i32*, i32** %list, align 4
  %11 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %10, i32 %11
  %12 = load i32, i32* %arrayidx8, align 4
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i32 %conv7, i32 %12)
  store i8 44, i8* %sep, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body6
  %13 = load i32, i32* %j, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond3

for.end:                                          ; preds = %for.cond3
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  br label %for.inc11

for.inc11:                                        ; preds = %for.end
  %14 = load i32, i32* %i, align 4
  %inc12 = add nsw i32 %14, 1
  store i32 %inc12, i32* %i, align 4
  br label %for.cond

for.end13:                                        ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #3

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { argmemonly nounwind willreturn writeonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %dvsr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %dvsr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %5, %6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %num.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %mul, %7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
%3:i32 = var
%4:i1 = slt %2, %3
infer %4

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %num.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %dvsr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem = srem i32 %8, %9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = srem %0, %1
infer %2

; *****
; For LLVM instruction:
;  %cmp2 = icmp ne i32 %rem, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = srem %0, %1
%3:i1 = ne 0:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %flix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp3 = icmp eq i32 %10, 300
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 300:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %flix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %dvsr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %flix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %14, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %num.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %dvsr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div = sdiv i32 %15, %16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sdiv %0, %1
infer %2

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %flix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc6 = add nsw i32 %17, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %dvsr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc8 = add nsw i32 %18, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %dvsr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %dvsr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul9 = mul nsw i32 %19, %20
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %num.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp10 = icmp eq i32 %mul9, %21
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i1 = eq %0, %3
infer %4

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %dvsr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %flix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc12 = add nsw i32 %23, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %flix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp15 = icmp sgt i32 %24, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %flix, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
%3:i32 = var
%4:i1 = slt %2, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = srem %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -120454654
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = srem %0, %1
%3:i1 = ne 0:i32, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 300:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = sdiv %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = mulnsw %1, %2
%4:i1 = eq %0, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
ConstantSynthesis: solver returns error on second query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for factor()

; entering Souper's runOnFunction() for __main_argc_argv()

; ModuleID = './Factors_of_an_integer.c.bc'
source_filename = "./Factors_of_an_integer.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.Factors = type { i32*, i16 }

@__const.__main_argc_argv.nums2factor = private unnamed_addr constant [4 x i32] [i32 2059, i32 223092870, i32 3135, i32 45], align 16
@.str = private unnamed_addr constant [23 x i8] c"\0Afactors of %d are:\0A  \00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"%c %d\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @xferFactors(%struct.Factors* %fctrs, i32* %flist, i32 %flix) #0 {
entry:
  %fctrs.addr = alloca %struct.Factors*, align 4
  %flist.addr = alloca i32*, align 4
  %flix.addr = alloca i32, align 4
  %ix = alloca i32, align 4
  %ij = alloca i32, align 4
  %newSize = alloca i32, align 4
  store %struct.Factors* %fctrs, %struct.Factors** %fctrs.addr, align 4
  store i32* %flist, i32** %flist.addr, align 4
  store i32 %flix, i32* %flix.addr, align 4
  %0 = load %struct.Factors*, %struct.Factors** %fctrs.addr, align 4
  %count = getelementptr inbounds %struct.Factors, %struct.Factors* %0, i32 0, i32 1
  %1 = load i16, i16* %count, align 4
  %conv = sext i16 %1 to i32
  %2 = load i32, i32* %flix.addr, align 4
  %add = add nsw i32 %conv, %2
  store i32 %add, i32* %newSize, align 4
  %3 = load i32, i32* %newSize, align 4
  %4 = load i32, i32* %flix.addr, align 4
  %cmp = icmp sgt i32 %3, %4
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %5 = load %struct.Factors*, %struct.Factors** %fctrs.addr, align 4
  %list = getelementptr inbounds %struct.Factors, %struct.Factors* %5, i32 0, i32 0
  %6 = load i32*, i32** %list, align 4
  %7 = bitcast i32* %6 to i8*
  %8 = load i32, i32* %newSize, align 4
  %mul = mul i32 %8, 4
  %call = call i8* @realloc(i8* %7, i32 %mul)
  %9 = bitcast i8* %call to i32*
  %10 = load %struct.Factors*, %struct.Factors** %fctrs.addr, align 4
  %list2 = getelementptr inbounds %struct.Factors, %struct.Factors* %10, i32 0, i32 0
  store i32* %9, i32** %list2, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %11 = load i32, i32* %newSize, align 4
  %mul3 = mul i32 %11, 4
  %call4 = call noalias i8* @malloc(i32 %mul3)
  %12 = bitcast i8* %call4 to i32*
  %13 = load %struct.Factors*, %struct.Factors** %fctrs.addr, align 4
  %list5 = getelementptr inbounds %struct.Factors, %struct.Factors* %13, i32 0, i32 0
  store i32* %12, i32** %list5, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  store i32 0, i32* %ij, align 4
  %14 = load %struct.Factors*, %struct.Factors** %fctrs.addr, align 4
  %count6 = getelementptr inbounds %struct.Factors, %struct.Factors* %14, i32 0, i32 1
  %15 = load i16, i16* %count6, align 4
  %conv7 = sext i16 %15 to i32
  store i32 %conv7, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %16 = load i32, i32* %ix, align 4
  %17 = load i32, i32* %newSize, align 4
  %cmp8 = icmp slt i32 %16, %17
  br i1 %cmp8, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %18 = load i32*, i32** %flist.addr, align 4
  %19 = load i32, i32* %ij, align 4
  %arrayidx = getelementptr inbounds i32, i32* %18, i32 %19
  %20 = load i32, i32* %arrayidx, align 4
  %21 = load %struct.Factors*, %struct.Factors** %fctrs.addr, align 4
  %list10 = getelementptr inbounds %struct.Factors, %struct.Factors* %21, i32 0, i32 0
  %22 = load i32*, i32** %list10, align 4
  %23 = load i32, i32* %ix, align 4
  %arrayidx11 = getelementptr inbounds i32, i32* %22, i32 %23
  store i32 %20, i32* %arrayidx11, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %24 = load i32, i32* %ij, align 4
  %inc = add nsw i32 %24, 1
  store i32 %inc, i32* %ij, align 4
  %25 = load i32, i32* %ix, align 4
  %inc12 = add nsw i32 %25, 1
  store i32 %inc12, i32* %ix, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %26 = load i32, i32* %newSize, align 4
  %conv13 = trunc i32 %26 to i16
  %27 = load %struct.Factors*, %struct.Factors** %fctrs.addr, align 4
  %count14 = getelementptr inbounds %struct.Factors, %struct.Factors* %27, i32 0, i32 1
  store i16 %conv13, i16* %count14, align 4
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.Factors* @factor(i32 %num, %struct.Factors* %fctrs) #0 {
entry:
  %num.addr = alloca i32, align 4
  %fctrs.addr = alloca %struct.Factors*, align 4
  %flist = alloca [301 x i32], align 16
  %flix = alloca i32, align 4
  %dvsr = alloca i32, align 4
  store i32 %num, i32* %num.addr, align 4
  store %struct.Factors* %fctrs, %struct.Factors** %fctrs.addr, align 4
  store i32 0, i32* %flix, align 4
  %0 = load %struct.Factors*, %struct.Factors** %fctrs.addr, align 4
  %count = getelementptr inbounds %struct.Factors, %struct.Factors* %0, i32 0, i32 1
  store i16 0, i16* %count, align 4
  %1 = load %struct.Factors*, %struct.Factors** %fctrs.addr, align 4
  %list = getelementptr inbounds %struct.Factors, %struct.Factors* %1, i32 0, i32 0
  %2 = load i32*, i32** %list, align 4
  %3 = bitcast i32* %2 to i8*
  call void @free(i8* %3)
  %4 = load %struct.Factors*, %struct.Factors** %fctrs.addr, align 4
  %list1 = getelementptr inbounds %struct.Factors, %struct.Factors* %4, i32 0, i32 0
  store i32* null, i32** %list1, align 4
  store i32 1, i32* %dvsr, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load i32, i32* %dvsr, align 4
  %6 = load i32, i32* %dvsr, align 4
  %mul = mul nsw i32 %5, %6
  %7 = load i32, i32* %num.addr, align 4
  %cmp = icmp slt i32 %mul, %7
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load i32, i32* %num.addr, align 4
  %9 = load i32, i32* %dvsr, align 4
  %rem = srem i32 %8, %9
  %cmp2 = icmp ne i32 %rem, 0
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.inc

if.end:                                           ; preds = %for.body
  %10 = load i32, i32* %flix, align 4
  %cmp3 = icmp eq i32 %10, 300
  br i1 %cmp3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  %11 = load %struct.Factors*, %struct.Factors** %fctrs.addr, align 4
  %arraydecay = getelementptr inbounds [301 x i32], [301 x i32]* %flist, i32 0, i32 0
  %12 = load i32, i32* %flix, align 4
  call void @xferFactors(%struct.Factors* %11, i32* %arraydecay, i32 %12)
  store i32 0, i32* %flix, align 4
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %if.end
  %13 = load i32, i32* %dvsr, align 4
  %14 = load i32, i32* %flix, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %flix, align 4
  %arrayidx = getelementptr inbounds [301 x i32], [301 x i32]* %flist, i32 0, i32 %14
  store i32 %13, i32* %arrayidx, align 4
  %15 = load i32, i32* %num.addr, align 4
  %16 = load i32, i32* %dvsr, align 4
  %div = sdiv i32 %15, %16
  %17 = load i32, i32* %flix, align 4
  %inc6 = add nsw i32 %17, 1
  store i32 %inc6, i32* %flix, align 4
  %arrayidx7 = getelementptr inbounds [301 x i32], [301 x i32]* %flist, i32 0, i32 %17
  store i32 %div, i32* %arrayidx7, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end5, %if.then
  %18 = load i32, i32* %dvsr, align 4
  %inc8 = add nsw i32 %18, 1
  store i32 %inc8, i32* %dvsr, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %19 = load i32, i32* %dvsr, align 4
  %20 = load i32, i32* %dvsr, align 4
  %mul9 = mul nsw i32 %19, %20
  %21 = load i32, i32* %num.addr, align 4
  %cmp10 = icmp eq i32 %mul9, %21
  br i1 %cmp10, label %if.then11, label %if.end14

if.then11:                                        ; preds = %for.end
  %22 = load i32, i32* %dvsr, align 4
  %23 = load i32, i32* %flix, align 4
  %inc12 = add nsw i32 %23, 1
  store i32 %inc12, i32* %flix, align 4
  %arrayidx13 = getelementptr inbounds [301 x i32], [301 x i32]* %flist, i32 0, i32 %23
  store i32 %22, i32* %arrayidx13, align 4
  br label %if.end14

if.end14:                                         ; preds = %if.then11, %for.end
  %24 = load i32, i32* %flix, align 4
  %cmp15 = icmp sgt i32 %24, 0
  br i1 %cmp15, label %if.then16, label %if.end18

if.then16:                                        ; preds = %if.end14
  %25 = load %struct.Factors*, %struct.Factors** %fctrs.addr, align 4
  %arraydecay17 = getelementptr inbounds [301 x i32], [301 x i32]* %flist, i32 0, i32 0
  %26 = load i32, i32* %flix, align 4
  call void @xferFactors(%struct.Factors* %25, i32* %arraydecay17, i32 %26)
  br label %if.end18

if.end18:                                         ; preds = %if.then16, %if.end14
  %27 = load %struct.Factors*, %struct.Factors** %fctrs.addr, align 4
  ret %struct.Factors* %27
}

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %nums2factor = alloca [4 x i32], align 16
  %ftors = alloca %struct.Factors, align 4
  %sep = alloca i8, align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  %0 = bitcast [4 x i32]* %nums2factor to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([4 x i32]* @__const.__main_argc_argv.nums2factor to i8*), i32 16, i1 false)
  %1 = bitcast %struct.Factors* %ftors to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %1, i8 0, i32 8, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc11, %entry
  %2 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, 4
  br i1 %cmp, label %for.body, label %for.end13

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* %nums2factor, i32 0, i32 %3
  %4 = load i32, i32* %arrayidx, align 4
  %call = call %struct.Factors* @factor(i32 %4, %struct.Factors* %ftors)
  %5 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [4 x i32], [4 x i32]* %nums2factor, i32 0, i32 %5
  %6 = load i32, i32* %arrayidx1, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i32 0, i32 0), i32 %6)
  store i8 32, i8* %sep, align 1
  store i32 0, i32* %j, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc, %for.body
  %7 = load i32, i32* %j, align 4
  %count = getelementptr inbounds %struct.Factors, %struct.Factors* %ftors, i32 0, i32 1
  %8 = load i16, i16* %count, align 4
  %conv = sext i16 %8 to i32
  %cmp4 = icmp slt i32 %7, %conv
  br i1 %cmp4, label %for.body6, label %for.end

for.body6:                                        ; preds = %for.cond3
  %9 = load i8, i8* %sep, align 1
  %conv7 = sext i8 %9 to i32
  %list = getelementptr inbounds %struct.Factors, %struct.Factors* %ftors, i32 0, i32 0
  %10 = load i32*, i32** %list, align 4
  %11 = load i32, i32* %j, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %10, i32 %11
  %12 = load i32, i32* %arrayidx8, align 4
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i32 %conv7, i32 %12)
  store i8 44, i8* %sep, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body6
  %13 = load i32, i32* %j, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond3

for.end:                                          ; preds = %for.cond3
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  br label %for.inc11

for.inc11:                                        ; preds = %for.end
  %14 = load i32, i32* %i, align 4
  %inc12 = add nsw i32 %14, 1
  store i32 %inc12, i32* %i, align 4
  br label %for.cond

for.end13:                                        ; preds = %for.cond
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly %0, i8 %1, i32 %2, i1 immarg %3) #3

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { argmemonly nounwind willreturn writeonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %2, 4
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 4:i32
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %arrayidx1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i16, i16* %count, align 4
; Looking for a replacement for:
%0:i16 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i16 %8 to i32
; Looking for a replacement for:
%0:i16 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp4 = icmp slt i32 %7, %conv
; Looking for a replacement for:
%0:i32 = var
%1:i16 = var
%2:i32 = sext %1
%3:i1 = slt %0, %2
infer %3

; *****
; For LLVM instruction:
;  %9 = load i8, i8* %sep, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv7 = sext i8 %9 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %arrayidx8, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %13, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc12 = add nsw i32 %14, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 4:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i16 = var
%2:i32 = sext %1
%3:i1 = slt %0, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for __main_argc_argv()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
