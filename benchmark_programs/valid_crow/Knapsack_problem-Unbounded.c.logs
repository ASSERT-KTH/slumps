
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for knapsack()

; ModuleID = './Knapsack_problem-Unbounded.c.bc'
source_filename = "./Knapsack_problem-Unbounded.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.item_t = type { i8*, double, double, double }

@.str = private unnamed_addr constant [8 x i8] c"panacea\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"ichor\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"gold\00", align 1
@items = hidden global [3 x %struct.item_t] [%struct.item_t { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), double 3.000000e+03, double 3.000000e-01, double 2.500000e-02 }, %struct.item_t { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), double 1.800000e+03, double 2.000000e-01, double 1.500000e-02 }, %struct.item_t { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0), double 2.500000e+03, double 2.000000e+00, double 2.000000e-03 }], align 16
@n = hidden global i32 3, align 4
@best_value = hidden global double 0.000000e+00, align 8
@count = hidden global i32* null, align 4
@best = hidden global i32* null, align 4
@.str.3 = private unnamed_addr constant [7 x i8] c"%d %s\0A\00", align 1
@.str.4 = private unnamed_addr constant [18 x i8] c"best value: %.0f\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @knapsack(i32 %i, double %value, double %weight, double %volume) #0 {
entry:
  %i.addr = alloca i32, align 4
  %value.addr = alloca double, align 8
  %weight.addr = alloca double, align 8
  %volume.addr = alloca double, align 8
  %j = alloca i32, align 4
  %m1 = alloca i32, align 4
  %m2 = alloca i32, align 4
  %m = alloca i32, align 4
  store i32 %i, i32* %i.addr, align 4
  store double %value, double* %value.addr, align 8
  store double %weight, double* %weight.addr, align 8
  store double %volume, double* %volume.addr, align 8
  %0 = load i32, i32* %i.addr, align 4
  %1 = load i32, i32* @n, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end5

if.then:                                          ; preds = %entry
  %2 = load double, double* %value.addr, align 8
  %3 = load double, double* @best_value, align 8
  %cmp1 = fcmp ogt double %2, %3
  br i1 %cmp1, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  %4 = load double, double* %value.addr, align 8
  store double %4, double* @best_value, align 8
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then2
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* @n, align 4
  %cmp3 = icmp slt i32 %5, %6
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i32*, i32** @count, align 4
  %8 = load i32, i32* %j, align 4
  %arrayidx = getelementptr inbounds i32, i32* %7, i32 %8
  %9 = load i32, i32* %arrayidx, align 4
  %10 = load i32*, i32** @best, align 4
  %11 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %10, i32 %11
  store i32 %9, i32* %arrayidx4, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %j, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %if.then
  br label %for.end38

if.end5:                                          ; preds = %entry
  %13 = load double, double* %weight.addr, align 8
  %14 = load i32, i32* %i.addr, align 4
  %arrayidx6 = getelementptr inbounds [3 x %struct.item_t], [3 x %struct.item_t]* @items, i32 0, i32 %14
  %weight7 = getelementptr inbounds %struct.item_t, %struct.item_t* %arrayidx6, i32 0, i32 2
  %15 = load double, double* %weight7, align 16
  %div = fdiv double %13, %15
  %conv = fptosi double %div to i32
  store i32 %conv, i32* %m1, align 4
  %16 = load double, double* %volume.addr, align 8
  %17 = load i32, i32* %i.addr, align 4
  %arrayidx8 = getelementptr inbounds [3 x %struct.item_t], [3 x %struct.item_t]* @items, i32 0, i32 %17
  %volume9 = getelementptr inbounds %struct.item_t, %struct.item_t* %arrayidx8, i32 0, i32 3
  %18 = load double, double* %volume9, align 8
  %div10 = fdiv double %16, %18
  %conv11 = fptosi double %div10 to i32
  store i32 %conv11, i32* %m2, align 4
  %19 = load i32, i32* %m1, align 4
  %20 = load i32, i32* %m2, align 4
  %cmp12 = icmp slt i32 %19, %20
  br i1 %cmp12, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end5
  %21 = load i32, i32* %m1, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.end5
  %22 = load i32, i32* %m2, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %21, %cond.true ], [ %22, %cond.false ]
  store i32 %cond, i32* %m, align 4
  %23 = load i32, i32* %m, align 4
  %24 = load i32*, i32** @count, align 4
  %25 = load i32, i32* %i.addr, align 4
  %arrayidx14 = getelementptr inbounds i32, i32* %24, i32 %25
  store i32 %23, i32* %arrayidx14, align 4
  br label %for.cond15

for.cond15:                                       ; preds = %for.inc36, %cond.end
  %26 = load i32*, i32** @count, align 4
  %27 = load i32, i32* %i.addr, align 4
  %arrayidx16 = getelementptr inbounds i32, i32* %26, i32 %27
  %28 = load i32, i32* %arrayidx16, align 4
  %cmp17 = icmp sge i32 %28, 0
  br i1 %cmp17, label %for.body19, label %for.end38

for.body19:                                       ; preds = %for.cond15
  %29 = load i32, i32* %i.addr, align 4
  %add = add nsw i32 %29, 1
  %30 = load double, double* %value.addr, align 8
  %31 = load i32*, i32** @count, align 4
  %32 = load i32, i32* %i.addr, align 4
  %arrayidx20 = getelementptr inbounds i32, i32* %31, i32 %32
  %33 = load i32, i32* %arrayidx20, align 4
  %conv21 = sitofp i32 %33 to double
  %34 = load i32, i32* %i.addr, align 4
  %arrayidx22 = getelementptr inbounds [3 x %struct.item_t], [3 x %struct.item_t]* @items, i32 0, i32 %34
  %value23 = getelementptr inbounds %struct.item_t, %struct.item_t* %arrayidx22, i32 0, i32 1
  %35 = load double, double* %value23, align 8
  %mul = fmul double %conv21, %35
  %add24 = fadd double %30, %mul
  %36 = load double, double* %weight.addr, align 8
  %37 = load i32*, i32** @count, align 4
  %38 = load i32, i32* %i.addr, align 4
  %arrayidx25 = getelementptr inbounds i32, i32* %37, i32 %38
  %39 = load i32, i32* %arrayidx25, align 4
  %conv26 = sitofp i32 %39 to double
  %40 = load i32, i32* %i.addr, align 4
  %arrayidx27 = getelementptr inbounds [3 x %struct.item_t], [3 x %struct.item_t]* @items, i32 0, i32 %40
  %weight28 = getelementptr inbounds %struct.item_t, %struct.item_t* %arrayidx27, i32 0, i32 2
  %41 = load double, double* %weight28, align 16
  %mul29 = fmul double %conv26, %41
  %sub = fsub double %36, %mul29
  %42 = load double, double* %volume.addr, align 8
  %43 = load i32*, i32** @count, align 4
  %44 = load i32, i32* %i.addr, align 4
  %arrayidx30 = getelementptr inbounds i32, i32* %43, i32 %44
  %45 = load i32, i32* %arrayidx30, align 4
  %conv31 = sitofp i32 %45 to double
  %46 = load i32, i32* %i.addr, align 4
  %arrayidx32 = getelementptr inbounds [3 x %struct.item_t], [3 x %struct.item_t]* @items, i32 0, i32 %46
  %volume33 = getelementptr inbounds %struct.item_t, %struct.item_t* %arrayidx32, i32 0, i32 3
  %47 = load double, double* %volume33, align 8
  %mul34 = fmul double %conv31, %47
  %sub35 = fsub double %42, %mul34
  call void @knapsack(i32 %add, double %add24, double %sub, double %sub35)
  br label %for.inc36

for.inc36:                                        ; preds = %for.body19
  %48 = load i32*, i32** @count, align 4
  %49 = load i32, i32* %i.addr, align 4
  %arrayidx37 = getelementptr inbounds i32, i32* %48, i32 %49
  %50 = load i32, i32* %arrayidx37, align 4
  %dec = add nsw i32 %50, -1
  store i32 %dec, i32* %arrayidx37, align 4
  br label %for.cond15

for.end38:                                        ; preds = %if.end, %for.cond15
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = load i32, i32* @n, align 4
  %mul = mul i32 %0, 4
  %call = call noalias i8* @malloc(i32 %mul)
  %1 = bitcast i8* %call to i32*
  store i32* %1, i32** @count, align 4
  %2 = load i32, i32* @n, align 4
  %mul1 = mul i32 %2, 4
  %call2 = call noalias i8* @malloc(i32 %mul1)
  %3 = bitcast i8* %call2 to i32*
  store i32* %3, i32** @best, align 4
  store double 0.000000e+00, double* @best_value, align 8
  call void @knapsack(i32 0, double 0.000000e+00, double 2.500000e+01, double 2.500000e-01)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* @n, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32*, i32** @best, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %6, i32 %7
  %8 = load i32, i32* %arrayidx, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds [3 x %struct.item_t], [3 x %struct.item_t]* @items, i32 0, i32 %9
  %name = getelementptr inbounds %struct.item_t, %struct.item_t* %arrayidx3, i32 0, i32 0
  %10 = load i8*, i8** %name, align 16
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0), i32 %8, i8* %10)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load double, double* @best_value, align 8
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.4, i32 0, i32 0), double %12)
  %13 = load i32*, i32** @count, align 4
  %14 = bitcast i32* %13 to i8*
  call void @free(i8* %14)
  %15 = load i32*, i32** @best, align 4
  %16 = bitcast i32* %15 to i8*
  call void @free(i8* %16)
  ret i32 0
}

declare noalias i8* @malloc(i32 %0) #1

declare i32 @printf(i8* %0, ...) #1

declare void @free(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* @n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %cmp1 = fcmp ogt double %2, %3
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* @n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp3 = icmp slt i32 %5, %6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %12, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %i.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = fptosi double %div to i32
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %i.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %conv11 = fptosi double %div10 to i32
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %m1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %m2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp12 = icmp slt i32 %19, %20
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %m1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %m2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cond = phi i32 [ %21, %cond.true ], [ %22, %cond.false ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = phi %0, %1, %2
infer %3

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %m, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %i.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %i.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %arrayidx16, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp17 = icmp sge i32 %28, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %i.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %29, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %i.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %arrayidx20, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %i.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %38 = load i32, i32* %i.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %arrayidx25, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %40 = load i32, i32* %i.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %44 = load i32, i32* %i.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %45 = load i32, i32* %arrayidx30, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %46 = load i32, i32* %i.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %49 = load i32, i32* %i.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %50 = load i32, i32* %arrayidx37, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec = add nsw i32 %50, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = phi %0, %1, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for knapsack()

; entering Souper's runOnFunction() for main()

; ModuleID = './Knapsack_problem-Unbounded.c.bc'
source_filename = "./Knapsack_problem-Unbounded.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.item_t = type { i8*, double, double, double }

@.str = private unnamed_addr constant [8 x i8] c"panacea\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"ichor\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"gold\00", align 1
@items = hidden global [3 x %struct.item_t] [%struct.item_t { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), double 3.000000e+03, double 3.000000e-01, double 2.500000e-02 }, %struct.item_t { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), double 1.800000e+03, double 2.000000e-01, double 1.500000e-02 }, %struct.item_t { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0), double 2.500000e+03, double 2.000000e+00, double 2.000000e-03 }], align 16
@n = hidden global i32 3, align 4
@best_value = hidden global double 0.000000e+00, align 8
@count = hidden global i32* null, align 4
@best = hidden global i32* null, align 4
@.str.3 = private unnamed_addr constant [7 x i8] c"%d %s\0A\00", align 1
@.str.4 = private unnamed_addr constant [18 x i8] c"best value: %.0f\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @knapsack(i32 %i, double %value, double %weight, double %volume) #0 {
entry:
  %i.addr = alloca i32, align 4
  %value.addr = alloca double, align 8
  %weight.addr = alloca double, align 8
  %volume.addr = alloca double, align 8
  %j = alloca i32, align 4
  %m1 = alloca i32, align 4
  %m2 = alloca i32, align 4
  %m = alloca i32, align 4
  store i32 %i, i32* %i.addr, align 4
  store double %value, double* %value.addr, align 8
  store double %weight, double* %weight.addr, align 8
  store double %volume, double* %volume.addr, align 8
  %0 = load i32, i32* %i.addr, align 4
  %1 = load i32, i32* @n, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end5

if.then:                                          ; preds = %entry
  %2 = load double, double* %value.addr, align 8
  %3 = load double, double* @best_value, align 8
  %cmp1 = fcmp ogt double %2, %3
  br i1 %cmp1, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  %4 = load double, double* %value.addr, align 8
  store double %4, double* @best_value, align 8
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then2
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* @n, align 4
  %cmp3 = icmp slt i32 %5, %6
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i32*, i32** @count, align 4
  %8 = load i32, i32* %j, align 4
  %arrayidx = getelementptr inbounds i32, i32* %7, i32 %8
  %9 = load i32, i32* %arrayidx, align 4
  %10 = load i32*, i32** @best, align 4
  %11 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %10, i32 %11
  store i32 %9, i32* %arrayidx4, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %j, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %if.then
  br label %for.end38

if.end5:                                          ; preds = %entry
  %13 = load double, double* %weight.addr, align 8
  %14 = load i32, i32* %i.addr, align 4
  %arrayidx6 = getelementptr inbounds [3 x %struct.item_t], [3 x %struct.item_t]* @items, i32 0, i32 %14
  %weight7 = getelementptr inbounds %struct.item_t, %struct.item_t* %arrayidx6, i32 0, i32 2
  %15 = load double, double* %weight7, align 16
  %div = fdiv double %13, %15
  %conv = fptosi double %div to i32
  store i32 %conv, i32* %m1, align 4
  %16 = load double, double* %volume.addr, align 8
  %17 = load i32, i32* %i.addr, align 4
  %arrayidx8 = getelementptr inbounds [3 x %struct.item_t], [3 x %struct.item_t]* @items, i32 0, i32 %17
  %volume9 = getelementptr inbounds %struct.item_t, %struct.item_t* %arrayidx8, i32 0, i32 3
  %18 = load double, double* %volume9, align 8
  %div10 = fdiv double %16, %18
  %conv11 = fptosi double %div10 to i32
  store i32 %conv11, i32* %m2, align 4
  %19 = load i32, i32* %m1, align 4
  %20 = load i32, i32* %m2, align 4
  %cmp12 = icmp slt i32 %19, %20
  br i1 %cmp12, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end5
  %21 = load i32, i32* %m1, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.end5
  %22 = load i32, i32* %m2, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %21, %cond.true ], [ %22, %cond.false ]
  store i32 %cond, i32* %m, align 4
  %23 = load i32, i32* %m, align 4
  %24 = load i32*, i32** @count, align 4
  %25 = load i32, i32* %i.addr, align 4
  %arrayidx14 = getelementptr inbounds i32, i32* %24, i32 %25
  store i32 %23, i32* %arrayidx14, align 4
  br label %for.cond15

for.cond15:                                       ; preds = %for.inc36, %cond.end
  %26 = load i32*, i32** @count, align 4
  %27 = load i32, i32* %i.addr, align 4
  %arrayidx16 = getelementptr inbounds i32, i32* %26, i32 %27
  %28 = load i32, i32* %arrayidx16, align 4
  %cmp17 = icmp sge i32 %28, 0
  br i1 %cmp17, label %for.body19, label %for.end38

for.body19:                                       ; preds = %for.cond15
  %29 = load i32, i32* %i.addr, align 4
  %add = add nsw i32 %29, 1
  %30 = load double, double* %value.addr, align 8
  %31 = load i32*, i32** @count, align 4
  %32 = load i32, i32* %i.addr, align 4
  %arrayidx20 = getelementptr inbounds i32, i32* %31, i32 %32
  %33 = load i32, i32* %arrayidx20, align 4
  %conv21 = sitofp i32 %33 to double
  %34 = load i32, i32* %i.addr, align 4
  %arrayidx22 = getelementptr inbounds [3 x %struct.item_t], [3 x %struct.item_t]* @items, i32 0, i32 %34
  %value23 = getelementptr inbounds %struct.item_t, %struct.item_t* %arrayidx22, i32 0, i32 1
  %35 = load double, double* %value23, align 8
  %mul = fmul double %conv21, %35
  %add24 = fadd double %30, %mul
  %36 = load double, double* %weight.addr, align 8
  %37 = load i32*, i32** @count, align 4
  %38 = load i32, i32* %i.addr, align 4
  %arrayidx25 = getelementptr inbounds i32, i32* %37, i32 %38
  %39 = load i32, i32* %arrayidx25, align 4
  %conv26 = sitofp i32 %39 to double
  %40 = load i32, i32* %i.addr, align 4
  %arrayidx27 = getelementptr inbounds [3 x %struct.item_t], [3 x %struct.item_t]* @items, i32 0, i32 %40
  %weight28 = getelementptr inbounds %struct.item_t, %struct.item_t* %arrayidx27, i32 0, i32 2
  %41 = load double, double* %weight28, align 16
  %mul29 = fmul double %conv26, %41
  %sub = fsub double %36, %mul29
  %42 = load double, double* %volume.addr, align 8
  %43 = load i32*, i32** @count, align 4
  %44 = load i32, i32* %i.addr, align 4
  %arrayidx30 = getelementptr inbounds i32, i32* %43, i32 %44
  %45 = load i32, i32* %arrayidx30, align 4
  %conv31 = sitofp i32 %45 to double
  %46 = load i32, i32* %i.addr, align 4
  %arrayidx32 = getelementptr inbounds [3 x %struct.item_t], [3 x %struct.item_t]* @items, i32 0, i32 %46
  %volume33 = getelementptr inbounds %struct.item_t, %struct.item_t* %arrayidx32, i32 0, i32 3
  %47 = load double, double* %volume33, align 8
  %mul34 = fmul double %conv31, %47
  %sub35 = fsub double %42, %mul34
  call void @knapsack(i32 %add, double %add24, double %sub, double %sub35)
  br label %for.inc36

for.inc36:                                        ; preds = %for.body19
  %48 = load i32*, i32** @count, align 4
  %49 = load i32, i32* %i.addr, align 4
  %arrayidx37 = getelementptr inbounds i32, i32* %48, i32 %49
  %50 = load i32, i32* %arrayidx37, align 4
  %dec = add nsw i32 %50, -1
  store i32 %dec, i32* %arrayidx37, align 4
  br label %for.cond15

for.end38:                                        ; preds = %if.end, %for.cond15
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = load i32, i32* @n, align 4
  %mul = mul i32 %0, 4
  %call = call noalias i8* @malloc(i32 %mul)
  %1 = bitcast i8* %call to i32*
  store i32* %1, i32** @count, align 4
  %2 = load i32, i32* @n, align 4
  %mul1 = mul i32 %2, 4
  %call2 = call noalias i8* @malloc(i32 %mul1)
  %3 = bitcast i8* %call2 to i32*
  store i32* %3, i32** @best, align 4
  store double 0.000000e+00, double* @best_value, align 8
  call void @knapsack(i32 0, double 0.000000e+00, double 2.500000e+01, double 2.500000e-01)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* @n, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32*, i32** @best, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %6, i32 %7
  %8 = load i32, i32* %arrayidx, align 4
  %9 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds [3 x %struct.item_t], [3 x %struct.item_t]* @items, i32 0, i32 %9
  %name = getelementptr inbounds %struct.item_t, %struct.item_t* %arrayidx3, i32 0, i32 0
  %10 = load i8*, i8** %name, align 16
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0), i32 %8, i8* %10)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load double, double* @best_value, align 8
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.4, i32 0, i32 0), double %12)
  %13 = load i32*, i32** @count, align 4
  %14 = bitcast i32* %13 to i8*
  call void @free(i8* %14)
  %15 = load i32*, i32** @best, align 4
  %16 = bitcast i32* %15 to i8*
  call void @free(i8* %16)
  ret i32 0
}

declare noalias i8* @malloc(i32 %0) #1

declare i32 @printf(i8* %0, ...) #1

declare void @free(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* @n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul i32 %0, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* @n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul1 = mul i32 %2, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* @n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %4, %5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %11, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
