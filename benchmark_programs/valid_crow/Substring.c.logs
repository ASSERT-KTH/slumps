
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for put()

; ModuleID = './Substring.c.bc'
source_filename = "./Substring.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@__const.main.string = private unnamed_addr constant [52 x i32] [i32 80, i32 114, i32 111, i32 103, i32 114, i32 97, i32 109, i32 115, i32 32, i32 102, i32 111, i32 114, i32 32, i32 111, i32 116, i32 104, i32 101, i32 114, i32 32, i32 101, i32 110, i32 99, i32 111, i32 100, i32 105, i32 110, i32 103, i32 115, i32 32, i32 40, i32 115, i32 117, i32 99, i32 104, i32 32, i32 97, i32 115, i32 32, i32 56, i32 45, i32 98, i32 105, i32 116, i32 32, i32 65, i32 83, i32 67, i32 73, i32 73, i32 41, i32 46, i32 0], align 16
@__const.main.knownSubstring = private unnamed_addr constant [10 x i32] [i32 101, i32 110, i32 99, i32 111, i32 100, i32 105, i32 110, i32 103, i32 115, i32 0], align 16
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @put(i32* %string) #0 {
entry:
  %string.addr = alloca i32*, align 4
  store i32* %string, i32** %string.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32*, i32** %string.addr, align 4
  %1 = load i32, i32* %0, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i32*, i32** %string.addr, align 4
  %incdec.ptr = getelementptr inbounds i32, i32* %2, i32 1
  store i32* %incdec.ptr, i32** %string.addr, align 4
  %3 = load i32, i32* %2, align 4
  %call = call i32 bitcast (i32 (...)* @putwchar to i32 (i32)*)(i32 %3)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %call1 = call i32 bitcast (i32 (...)* @putwchar to i32 (i32)*)(i32 10)
  ret void
}

declare i32 @putwchar(...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @putm(i32* %string, i32 %m) #0 {
entry:
  %string.addr = alloca i32*, align 4
  %m.addr = alloca i32, align 4
  store i32* %string, i32** %string.addr, align 4
  store i32 %m, i32* %m.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32*, i32** %string.addr, align 4
  %1 = load i32, i32* %0, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %2 = load i32, i32* %m.addr, align 4
  %dec = add i32 %2, -1
  store i32 %dec, i32* %m.addr, align 4
  %tobool1 = icmp ne i32 %2, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %3 = phi i1 [ false, %while.cond ], [ %tobool1, %land.rhs ]
  br i1 %3, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %4 = load i32*, i32** %string.addr, align 4
  %incdec.ptr = getelementptr inbounds i32, i32* %4, i32 1
  store i32* %incdec.ptr, i32** %string.addr, align 4
  %5 = load i32, i32* %4, align 4
  %call = call i32 bitcast (i32 (...)* @putwchar to i32 (i32)*)(i32 %5)
  br label %while.cond

while.end:                                        ; preds = %land.end
  %call2 = call i32 bitcast (i32 (...)* @putwchar to i32 (i32)*)(i32 10)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %string = alloca [52 x i32], align 16
  %n = alloca i32, align 4
  %m = alloca i32, align 4
  %knownCharacter = alloca i32, align 4
  %knownSubstring = alloca [10 x i32], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [52 x i32]* %string to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([52 x i32]* @__const.main.string to i8*), i32 208, i1 false)
  store i32 3, i32* %n, align 4
  store i32 4, i32* %m, align 4
  store i32 40, i32* %knownCharacter, align 4
  %1 = bitcast [10 x i32]* %knownSubstring to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %1, i8* align 16 bitcast ([10 x i32]* @__const.main.knownSubstring to i8*), i32 40, i1 false)
  %arraydecay = getelementptr inbounds [52 x i32], [52 x i32]* %string, i32 0, i32 0
  %2 = load i32, i32* %n, align 4
  %add.ptr = getelementptr inbounds i32, i32* %arraydecay, i32 %2
  %add.ptr1 = getelementptr inbounds i32, i32* %add.ptr, i32 -1
  %3 = load i32, i32* %m, align 4
  call void @putm(i32* %add.ptr1, i32 %3)
  %arraydecay2 = getelementptr inbounds [52 x i32], [52 x i32]* %string, i32 0, i32 0
  %4 = load i32, i32* %n, align 4
  %add.ptr3 = getelementptr inbounds i32, i32* %arraydecay2, i32 %4
  %add.ptr4 = getelementptr inbounds i32, i32* %add.ptr3, i32 1
  call void @put(i32* %add.ptr4)
  %arraydecay5 = getelementptr inbounds [52 x i32], [52 x i32]* %string, i32 0, i32 0
  %arraydecay6 = getelementptr inbounds [52 x i32], [52 x i32]* %string, i32 0, i32 0
  %call = call i32 @wcslen(i32* %arraydecay6)
  %sub = sub i32 %call, 1
  call void @putm(i32* %arraydecay5, i32 %sub)
  %arraydecay7 = getelementptr inbounds [52 x i32], [52 x i32]* %string, i32 0, i32 0
  %5 = load i32, i32* %knownCharacter, align 4
  %call8 = call i32* @wcschr(i32* %arraydecay7, i32 %5)
  %6 = load i32, i32* %m, align 4
  call void @putm(i32* %call8, i32 %6)
  %arraydecay9 = getelementptr inbounds [52 x i32], [52 x i32]* %string, i32 0, i32 0
  %arraydecay10 = getelementptr inbounds [10 x i32], [10 x i32]* %knownSubstring, i32 0, i32 0
  %call11 = call i32 bitcast (i32 (...)* @wcsstr to i32 (i32*, i32*)*)(i32* %arraydecay9, i32* %arraydecay10)
  %7 = inttoptr i32 %call11 to i32*
  %8 = load i32, i32* %m, align 4
  call void @putm(i32* %7, i32 %8)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare i32 @wcslen(i32* %0) #3

declare i32* @wcschr(i32* %0, i32 %1) #3

declare i32 @wcsstr(...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-prototype" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %0, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %1, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for put()

; entering Souper's runOnFunction() for putm()

; ModuleID = './Substring.c.bc'
source_filename = "./Substring.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@__const.main.string = private unnamed_addr constant [52 x i32] [i32 80, i32 114, i32 111, i32 103, i32 114, i32 97, i32 109, i32 115, i32 32, i32 102, i32 111, i32 114, i32 32, i32 111, i32 116, i32 104, i32 101, i32 114, i32 32, i32 101, i32 110, i32 99, i32 111, i32 100, i32 105, i32 110, i32 103, i32 115, i32 32, i32 40, i32 115, i32 117, i32 99, i32 104, i32 32, i32 97, i32 115, i32 32, i32 56, i32 45, i32 98, i32 105, i32 116, i32 32, i32 65, i32 83, i32 67, i32 73, i32 73, i32 41, i32 46, i32 0], align 16
@__const.main.knownSubstring = private unnamed_addr constant [10 x i32] [i32 101, i32 110, i32 99, i32 111, i32 100, i32 105, i32 110, i32 103, i32 115, i32 0], align 16
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @put(i32* %string) #0 {
entry:
  %string.addr = alloca i32*, align 4
  store i32* %string, i32** %string.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32*, i32** %string.addr, align 4
  %1 = load i32, i32* %0, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i32*, i32** %string.addr, align 4
  %incdec.ptr = getelementptr inbounds i32, i32* %2, i32 1
  store i32* %incdec.ptr, i32** %string.addr, align 4
  %3 = load i32, i32* %2, align 4
  %call = call i32 bitcast (i32 (...)* @putwchar to i32 (i32)*)(i32 %3)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %call1 = call i32 bitcast (i32 (...)* @putwchar to i32 (i32)*)(i32 10)
  ret void
}

declare i32 @putwchar(...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @putm(i32* %string, i32 %m) #0 {
entry:
  %string.addr = alloca i32*, align 4
  %m.addr = alloca i32, align 4
  store i32* %string, i32** %string.addr, align 4
  store i32 %m, i32* %m.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32*, i32** %string.addr, align 4
  %1 = load i32, i32* %0, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %2 = load i32, i32* %m.addr, align 4
  %dec = add i32 %2, -1
  store i32 %dec, i32* %m.addr, align 4
  %tobool1 = icmp ne i32 %2, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %3 = phi i1 [ false, %while.cond ], [ %tobool1, %land.rhs ]
  br i1 %3, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %4 = load i32*, i32** %string.addr, align 4
  %incdec.ptr = getelementptr inbounds i32, i32* %4, i32 1
  store i32* %incdec.ptr, i32** %string.addr, align 4
  %5 = load i32, i32* %4, align 4
  %call = call i32 bitcast (i32 (...)* @putwchar to i32 (i32)*)(i32 %5)
  br label %while.cond

while.end:                                        ; preds = %land.end
  %call2 = call i32 bitcast (i32 (...)* @putwchar to i32 (i32)*)(i32 10)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %string = alloca [52 x i32], align 16
  %n = alloca i32, align 4
  %m = alloca i32, align 4
  %knownCharacter = alloca i32, align 4
  %knownSubstring = alloca [10 x i32], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [52 x i32]* %string to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([52 x i32]* @__const.main.string to i8*), i32 208, i1 false)
  store i32 3, i32* %n, align 4
  store i32 4, i32* %m, align 4
  store i32 40, i32* %knownCharacter, align 4
  %1 = bitcast [10 x i32]* %knownSubstring to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %1, i8* align 16 bitcast ([10 x i32]* @__const.main.knownSubstring to i8*), i32 40, i1 false)
  %arraydecay = getelementptr inbounds [52 x i32], [52 x i32]* %string, i32 0, i32 0
  %2 = load i32, i32* %n, align 4
  %add.ptr = getelementptr inbounds i32, i32* %arraydecay, i32 %2
  %add.ptr1 = getelementptr inbounds i32, i32* %add.ptr, i32 -1
  %3 = load i32, i32* %m, align 4
  call void @putm(i32* %add.ptr1, i32 %3)
  %arraydecay2 = getelementptr inbounds [52 x i32], [52 x i32]* %string, i32 0, i32 0
  %4 = load i32, i32* %n, align 4
  %add.ptr3 = getelementptr inbounds i32, i32* %arraydecay2, i32 %4
  %add.ptr4 = getelementptr inbounds i32, i32* %add.ptr3, i32 1
  call void @put(i32* %add.ptr4)
  %arraydecay5 = getelementptr inbounds [52 x i32], [52 x i32]* %string, i32 0, i32 0
  %arraydecay6 = getelementptr inbounds [52 x i32], [52 x i32]* %string, i32 0, i32 0
  %call = call i32 @wcslen(i32* %arraydecay6)
  %sub = sub i32 %call, 1
  call void @putm(i32* %arraydecay5, i32 %sub)
  %arraydecay7 = getelementptr inbounds [52 x i32], [52 x i32]* %string, i32 0, i32 0
  %5 = load i32, i32* %knownCharacter, align 4
  %call8 = call i32* @wcschr(i32* %arraydecay7, i32 %5)
  %6 = load i32, i32* %m, align 4
  call void @putm(i32* %call8, i32 %6)
  %arraydecay9 = getelementptr inbounds [52 x i32], [52 x i32]* %string, i32 0, i32 0
  %arraydecay10 = getelementptr inbounds [10 x i32], [10 x i32]* %knownSubstring, i32 0, i32 0
  %call11 = call i32 bitcast (i32 (...)* @wcsstr to i32 (i32*, i32*)*)(i32* %arraydecay9, i32* %arraydecay10)
  %7 = inttoptr i32 %call11 to i32*
  %8 = load i32, i32* %m, align 4
  call void @putm(i32* %7, i32 %8)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare i32 @wcslen(i32* %0) #3

declare i32* @wcschr(i32* %0, i32 %1) #3

declare i32 @wcsstr(...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-prototype" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %0, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %1, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %m.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec = add i32 %2, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool1 = icmp ne i32 %2, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = phi i1 [ false, %while.cond ], [ %tobool1, %land.rhs ]
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %4, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = add 4294967295:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for putm()

; entering Souper's runOnFunction() for main()

; ModuleID = './Substring.c.bc'
source_filename = "./Substring.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@__const.main.string = private unnamed_addr constant [52 x i32] [i32 80, i32 114, i32 111, i32 103, i32 114, i32 97, i32 109, i32 115, i32 32, i32 102, i32 111, i32 114, i32 32, i32 111, i32 116, i32 104, i32 101, i32 114, i32 32, i32 101, i32 110, i32 99, i32 111, i32 100, i32 105, i32 110, i32 103, i32 115, i32 32, i32 40, i32 115, i32 117, i32 99, i32 104, i32 32, i32 97, i32 115, i32 32, i32 56, i32 45, i32 98, i32 105, i32 116, i32 32, i32 65, i32 83, i32 67, i32 73, i32 73, i32 41, i32 46, i32 0], align 16
@__const.main.knownSubstring = private unnamed_addr constant [10 x i32] [i32 101, i32 110, i32 99, i32 111, i32 100, i32 105, i32 110, i32 103, i32 115, i32 0], align 16
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @put(i32* %string) #0 {
entry:
  %string.addr = alloca i32*, align 4
  store i32* %string, i32** %string.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32*, i32** %string.addr, align 4
  %1 = load i32, i32* %0, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i32*, i32** %string.addr, align 4
  %incdec.ptr = getelementptr inbounds i32, i32* %2, i32 1
  store i32* %incdec.ptr, i32** %string.addr, align 4
  %3 = load i32, i32* %2, align 4
  %call = call i32 bitcast (i32 (...)* @putwchar to i32 (i32)*)(i32 %3)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %call1 = call i32 bitcast (i32 (...)* @putwchar to i32 (i32)*)(i32 10)
  ret void
}

declare i32 @putwchar(...) #1

; Function Attrs: noinline nounwind optnone
define hidden void @putm(i32* %string, i32 %m) #0 {
entry:
  %string.addr = alloca i32*, align 4
  %m.addr = alloca i32, align 4
  store i32* %string, i32** %string.addr, align 4
  store i32 %m, i32* %m.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32*, i32** %string.addr, align 4
  %1 = load i32, i32* %0, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %2 = load i32, i32* %m.addr, align 4
  %dec = add i32 %2, -1
  store i32 %dec, i32* %m.addr, align 4
  %tobool1 = icmp ne i32 %2, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %3 = phi i1 [ false, %while.cond ], [ %tobool1, %land.rhs ]
  br i1 %3, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %4 = load i32*, i32** %string.addr, align 4
  %incdec.ptr = getelementptr inbounds i32, i32* %4, i32 1
  store i32* %incdec.ptr, i32** %string.addr, align 4
  %5 = load i32, i32* %4, align 4
  %call = call i32 bitcast (i32 (...)* @putwchar to i32 (i32)*)(i32 %5)
  br label %while.cond

while.end:                                        ; preds = %land.end
  %call2 = call i32 bitcast (i32 (...)* @putwchar to i32 (i32)*)(i32 10)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %string = alloca [52 x i32], align 16
  %n = alloca i32, align 4
  %m = alloca i32, align 4
  %knownCharacter = alloca i32, align 4
  %knownSubstring = alloca [10 x i32], align 16
  store i32 0, i32* %retval, align 4
  %0 = bitcast [52 x i32]* %string to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([52 x i32]* @__const.main.string to i8*), i32 208, i1 false)
  store i32 3, i32* %n, align 4
  store i32 4, i32* %m, align 4
  store i32 40, i32* %knownCharacter, align 4
  %1 = bitcast [10 x i32]* %knownSubstring to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %1, i8* align 16 bitcast ([10 x i32]* @__const.main.knownSubstring to i8*), i32 40, i1 false)
  %arraydecay = getelementptr inbounds [52 x i32], [52 x i32]* %string, i32 0, i32 0
  %2 = load i32, i32* %n, align 4
  %add.ptr = getelementptr inbounds i32, i32* %arraydecay, i32 %2
  %add.ptr1 = getelementptr inbounds i32, i32* %add.ptr, i32 -1
  %3 = load i32, i32* %m, align 4
  call void @putm(i32* %add.ptr1, i32 %3)
  %arraydecay2 = getelementptr inbounds [52 x i32], [52 x i32]* %string, i32 0, i32 0
  %4 = load i32, i32* %n, align 4
  %add.ptr3 = getelementptr inbounds i32, i32* %arraydecay2, i32 %4
  %add.ptr4 = getelementptr inbounds i32, i32* %add.ptr3, i32 1
  call void @put(i32* %add.ptr4)
  %arraydecay5 = getelementptr inbounds [52 x i32], [52 x i32]* %string, i32 0, i32 0
  %arraydecay6 = getelementptr inbounds [52 x i32], [52 x i32]* %string, i32 0, i32 0
  %call = call i32 @wcslen(i32* %arraydecay6)
  %sub = sub i32 %call, 1
  call void @putm(i32* %arraydecay5, i32 %sub)
  %arraydecay7 = getelementptr inbounds [52 x i32], [52 x i32]* %string, i32 0, i32 0
  %5 = load i32, i32* %knownCharacter, align 4
  %call8 = call i32* @wcschr(i32* %arraydecay7, i32 %5)
  %6 = load i32, i32* %m, align 4
  call void @putm(i32* %call8, i32 %6)
  %arraydecay9 = getelementptr inbounds [52 x i32], [52 x i32]* %string, i32 0, i32 0
  %arraydecay10 = getelementptr inbounds [10 x i32], [10 x i32]* %knownSubstring, i32 0, i32 0
  %call11 = call i32 bitcast (i32 (...)* @wcsstr to i32 (i32*, i32*)*)(i32* %arraydecay9, i32* %arraydecay10)
  %7 = inttoptr i32 %call11 to i32*
  %8 = load i32, i32* %m, align 4
  call void @putm(i32* %7, i32 %8)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare i32 @wcslen(i32* %0) #3

declare i32* @wcschr(i32* %0, i32 %1) #3

declare i32 @wcsstr(...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-prototype" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %m, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 @wcslen(i32* %arraydecay6)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub i32 %call, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %knownCharacter, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %m, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call11 = call i32 bitcast (i32 (...)* @wcsstr to i32 (i32*, i32*)*)(i32* %arraydecay9, i32* %arraydecay10)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %m, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sub %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
