
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for powerset()

; ModuleID = './Power_set.c.bc'
source_filename = "./Power_set.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.node = type { i8*, %struct.node* }

@.str = private unnamed_addr constant [4 x i8] c" %s\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c" ]\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @powerset(i8** %v, i32 %n, %struct.node* %up) #0 {
entry:
  %v.addr = alloca i8**, align 4
  %n.addr = alloca i32, align 4
  %up.addr = alloca %struct.node*, align 4
  %me = alloca %struct.node, align 4
  store i8** %v, i8*** %v.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store %struct.node* %up, %struct.node** %up.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %call = call i32 @putchar(i32 91)
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %1 = load %struct.node*, %struct.node** %up.addr, align 4
  %tobool1 = icmp ne %struct.node* %1, null
  br i1 %tobool1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load %struct.node*, %struct.node** %up.addr, align 4
  %s = getelementptr inbounds %struct.node, %struct.node* %2, i32 0, i32 0
  %3 = load i8*, i8** %s, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* %3)
  %4 = load %struct.node*, %struct.node** %up.addr, align 4
  %prev = getelementptr inbounds %struct.node, %struct.node* %4, i32 0, i32 1
  %5 = load %struct.node*, %struct.node** %prev, align 4
  store %struct.node* %5, %struct.node** %up.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %call3 = call i32 @puts(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %entry
  %6 = load i8**, i8*** %v.addr, align 4
  %7 = load i8*, i8** %6, align 4
  %s4 = getelementptr inbounds %struct.node, %struct.node* %me, i32 0, i32 0
  store i8* %7, i8** %s4, align 4
  %8 = load %struct.node*, %struct.node** %up.addr, align 4
  %prev5 = getelementptr inbounds %struct.node, %struct.node* %me, i32 0, i32 1
  store %struct.node* %8, %struct.node** %prev5, align 4
  %9 = load i8**, i8*** %v.addr, align 4
  %add.ptr = getelementptr inbounds i8*, i8** %9, i32 1
  %10 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %10, 1
  %11 = load %struct.node*, %struct.node** %up.addr, align 4
  call void @powerset(i8** %add.ptr, i32 %sub, %struct.node* %11)
  %12 = load i8**, i8*** %v.addr, align 4
  %add.ptr6 = getelementptr inbounds i8*, i8** %12, i32 1
  %13 = load i32, i32* %n.addr, align 4
  %sub7 = sub nsw i32 %13, 1
  call void @powerset(i8** %add.ptr6, i32 %sub7, %struct.node* %me)
  br label %if.end

if.end:                                           ; preds = %if.else, %while.end
  ret void
}

declare i32 @putchar(i32 %0) #1

declare i32 @printf(i8* %0, ...) #1

declare i32 @puts(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  %0 = load i8**, i8*** %argv.addr, align 4
  %add.ptr = getelementptr inbounds i8*, i8** %0, i32 1
  %1 = load i32, i32* %argc.addr, align 4
  %sub = sub nsw i32 %1, 1
  call void @powerset(i8** %add.ptr, i32 %sub, %struct.node* null)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %0, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool1 = icmp ne %struct.node* %1, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %10, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub7 = sub nsw i32 %13, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for powerset()

; entering Souper's runOnFunction() for __main_argc_argv()

; ModuleID = './Power_set.c.bc'
source_filename = "./Power_set.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.node = type { i8*, %struct.node* }

@.str = private unnamed_addr constant [4 x i8] c" %s\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c" ]\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @powerset(i8** %v, i32 %n, %struct.node* %up) #0 {
entry:
  %v.addr = alloca i8**, align 4
  %n.addr = alloca i32, align 4
  %up.addr = alloca %struct.node*, align 4
  %me = alloca %struct.node, align 4
  store i8** %v, i8*** %v.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store %struct.node* %up, %struct.node** %up.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %call = call i32 @putchar(i32 91)
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %1 = load %struct.node*, %struct.node** %up.addr, align 4
  %tobool1 = icmp ne %struct.node* %1, null
  br i1 %tobool1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load %struct.node*, %struct.node** %up.addr, align 4
  %s = getelementptr inbounds %struct.node, %struct.node* %2, i32 0, i32 0
  %3 = load i8*, i8** %s, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* %3)
  %4 = load %struct.node*, %struct.node** %up.addr, align 4
  %prev = getelementptr inbounds %struct.node, %struct.node* %4, i32 0, i32 1
  %5 = load %struct.node*, %struct.node** %prev, align 4
  store %struct.node* %5, %struct.node** %up.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %call3 = call i32 @puts(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %entry
  %6 = load i8**, i8*** %v.addr, align 4
  %7 = load i8*, i8** %6, align 4
  %s4 = getelementptr inbounds %struct.node, %struct.node* %me, i32 0, i32 0
  store i8* %7, i8** %s4, align 4
  %8 = load %struct.node*, %struct.node** %up.addr, align 4
  %prev5 = getelementptr inbounds %struct.node, %struct.node* %me, i32 0, i32 1
  store %struct.node* %8, %struct.node** %prev5, align 4
  %9 = load i8**, i8*** %v.addr, align 4
  %add.ptr = getelementptr inbounds i8*, i8** %9, i32 1
  %10 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %10, 1
  %11 = load %struct.node*, %struct.node** %up.addr, align 4
  call void @powerset(i8** %add.ptr, i32 %sub, %struct.node* %11)
  %12 = load i8**, i8*** %v.addr, align 4
  %add.ptr6 = getelementptr inbounds i8*, i8** %12, i32 1
  %13 = load i32, i32* %n.addr, align 4
  %sub7 = sub nsw i32 %13, 1
  call void @powerset(i8** %add.ptr6, i32 %sub7, %struct.node* %me)
  br label %if.end

if.end:                                           ; preds = %if.else, %while.end
  ret void
}

declare i32 @putchar(i32 %0) #1

declare i32 @printf(i8* %0, ...) #1

declare i32 @puts(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  %0 = load i8**, i8*** %argv.addr, align 4
  %add.ptr = getelementptr inbounds i8*, i8** %0, i32 1
  %1 = load i32, i32* %argc.addr, align 4
  %sub = sub nsw i32 %1, 1
  call void @powerset(i8** %add.ptr, i32 %sub, %struct.node* null)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %argc.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %1, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1
#########################################################
; exiting Souper's runOnFunction() for __main_argc_argv()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
