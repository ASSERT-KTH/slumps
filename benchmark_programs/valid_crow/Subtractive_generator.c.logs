
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for subrand_seed()

; ModuleID = './Subtractive_generator.c.bc'
source_filename = "./Subtractive_generator.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@si = hidden global i32 0, align 4
@sj = hidden global i32 0, align 4
@state = hidden global [55 x i32] zeroinitializer, align 16
@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @subrand_seed(i32 %p1) #0 {
entry:
  %p1.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %p2 = alloca i32, align 4
  store i32 %p1, i32* %p1.addr, align 4
  store i32 1, i32* %p2, align 4
  %0 = load i32, i32* %p1.addr, align 4
  %rem = srem i32 %0, 1000000000
  store i32 %rem, i32* getelementptr inbounds ([55 x i32], [55 x i32]* @state, i32 0, i32 0), align 16
  store i32 1, i32* %i, align 4
  store i32 21, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %1, 55
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %j, align 4
  %cmp1 = icmp sge i32 %2, 55
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %3 = load i32, i32* %j, align 4
  %sub = sub nsw i32 %3, 55
  store i32 %sub, i32* %j, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %4 = load i32, i32* %p2, align 4
  %5 = load i32, i32* %j, align 4
  %arrayidx = getelementptr inbounds [55 x i32], [55 x i32]* @state, i32 0, i32 %5
  store i32 %4, i32* %arrayidx, align 4
  %6 = load i32, i32* %p1.addr, align 4
  %7 = load i32, i32* %p2, align 4
  %sub2 = sub nsw i32 %6, %7
  store i32 %sub2, i32* %p2, align 4
  %cmp3 = icmp slt i32 %sub2, 0
  br i1 %cmp3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  %8 = load i32, i32* %p2, align 4
  %add = add nsw i32 %8, 1000000000
  store i32 %add, i32* %p2, align 4
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %if.end
  %9 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds [55 x i32], [55 x i32]* @state, i32 0, i32 %9
  %10 = load i32, i32* %arrayidx6, align 4
  store i32 %10, i32* %p1.addr, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end5
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  %12 = load i32, i32* %j, align 4
  %add7 = add nsw i32 %12, 21
  store i32 %add7, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* @si, align 4
  store i32 24, i32* @sj, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc11, %for.end
  %13 = load i32, i32* %i, align 4
  %cmp9 = icmp slt i32 %13, 165
  br i1 %cmp9, label %for.body10, label %for.end13

for.body10:                                       ; preds = %for.cond8
  %call = call i32 @subrand()
  br label %for.inc11

for.inc11:                                        ; preds = %for.body10
  %14 = load i32, i32* %i, align 4
  %inc12 = add nsw i32 %14, 1
  store i32 %inc12, i32* %i, align 4
  br label %for.cond8

for.end13:                                        ; preds = %for.cond8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @subrand() #0 {
entry:
  %x = alloca i32, align 4
  %0 = load i32, i32* @si, align 4
  %1 = load i32, i32* @sj, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @subrand_seed(i32 0)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i32, i32* @si, align 4
  %dec = add nsw i32 %2, -1
  store i32 %dec, i32* @si, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %if.end2, label %if.then1

if.then1:                                         ; preds = %if.end
  store i32 54, i32* @si, align 4
  br label %if.end2

if.end2:                                          ; preds = %if.then1, %if.end
  %3 = load i32, i32* @sj, align 4
  %dec3 = add nsw i32 %3, -1
  store i32 %dec3, i32* @sj, align 4
  %tobool4 = icmp ne i32 %3, 0
  br i1 %tobool4, label %if.end6, label %if.then5

if.then5:                                         ; preds = %if.end2
  store i32 54, i32* @sj, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.then5, %if.end2
  %4 = load i32, i32* @si, align 4
  %arrayidx = getelementptr inbounds [55 x i32], [55 x i32]* @state, i32 0, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  %6 = load i32, i32* @sj, align 4
  %arrayidx7 = getelementptr inbounds [55 x i32], [55 x i32]* @state, i32 0, i32 %6
  %7 = load i32, i32* %arrayidx7, align 4
  %sub = sub nsw i32 %5, %7
  store i32 %sub, i32* %x, align 4
  %cmp8 = icmp slt i32 %sub, 0
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end6
  %8 = load i32, i32* %x, align 4
  %add = add nsw i32 %8, 1000000000
  store i32 %add, i32* %x, align 4
  br label %if.end10

if.end10:                                         ; preds = %if.then9, %if.end6
  %9 = load i32, i32* %x, align 4
  %10 = load i32, i32* @si, align 4
  %arrayidx11 = getelementptr inbounds [55 x i32], [55 x i32]* @state, i32 0, i32 %10
  store i32 %9, i32* %arrayidx11, align 4
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @subrand_seed(i32 292929)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call = call i32 @subrand()
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %1 = load i32, i32* %i, align 4
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %p1.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem = srem i32 %0, 1000000000
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 1000000000:i32
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %1, 55
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 55:i32
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = icmp sge i32 %2, 55
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle 55:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %3, 55
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 55:i32
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %p2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %p1.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %p2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub2 = sub nsw i32 %6, %7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %cmp3 = icmp slt i32 %sub2, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1 (hasExternalUses)
%3:i1 = slt %2, 0:i32
infer %3

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %p2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %8, 1000000000
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1000000000:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %arrayidx6, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %11, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add7 = add nsw i32 %12, 21
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 21:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp9 = icmp slt i32 %13, 165
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 165:i32
infer %1

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc12 = add nsw i32 %14, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem %0, 1000000000:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -134217728
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 55:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle 55:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 55:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -55
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147418112
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1 (hasExternalUses)
%3:i1 = slt %2, 0:i32
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1000000000:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1000000000
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1000000128
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 21:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 21
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870933
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 165:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for subrand_seed()

; entering Souper's runOnFunction() for subrand()

; ModuleID = './Subtractive_generator.c.bc'
source_filename = "./Subtractive_generator.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@si = hidden global i32 0, align 4
@sj = hidden global i32 0, align 4
@state = hidden global [55 x i32] zeroinitializer, align 16
@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @subrand_seed(i32 %p1) #0 {
entry:
  %p1.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %p2 = alloca i32, align 4
  store i32 %p1, i32* %p1.addr, align 4
  store i32 1, i32* %p2, align 4
  %0 = load i32, i32* %p1.addr, align 4
  %rem = srem i32 %0, 1000000000
  store i32 %rem, i32* getelementptr inbounds ([55 x i32], [55 x i32]* @state, i32 0, i32 0), align 16
  store i32 1, i32* %i, align 4
  store i32 21, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %1, 55
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %j, align 4
  %cmp1 = icmp sge i32 %2, 55
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %3 = load i32, i32* %j, align 4
  %sub = sub nsw i32 %3, 55
  store i32 %sub, i32* %j, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %4 = load i32, i32* %p2, align 4
  %5 = load i32, i32* %j, align 4
  %arrayidx = getelementptr inbounds [55 x i32], [55 x i32]* @state, i32 0, i32 %5
  store i32 %4, i32* %arrayidx, align 4
  %6 = load i32, i32* %p1.addr, align 4
  %7 = load i32, i32* %p2, align 4
  %sub2 = sub nsw i32 %6, %7
  store i32 %sub2, i32* %p2, align 4
  %cmp3 = icmp slt i32 %sub2, 0
  br i1 %cmp3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  %8 = load i32, i32* %p2, align 4
  %add = add nsw i32 %8, 1000000000
  store i32 %add, i32* %p2, align 4
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %if.end
  %9 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds [55 x i32], [55 x i32]* @state, i32 0, i32 %9
  %10 = load i32, i32* %arrayidx6, align 4
  store i32 %10, i32* %p1.addr, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end5
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  %12 = load i32, i32* %j, align 4
  %add7 = add nsw i32 %12, 21
  store i32 %add7, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* @si, align 4
  store i32 24, i32* @sj, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc11, %for.end
  %13 = load i32, i32* %i, align 4
  %cmp9 = icmp slt i32 %13, 165
  br i1 %cmp9, label %for.body10, label %for.end13

for.body10:                                       ; preds = %for.cond8
  %call = call i32 @subrand()
  br label %for.inc11

for.inc11:                                        ; preds = %for.body10
  %14 = load i32, i32* %i, align 4
  %inc12 = add nsw i32 %14, 1
  store i32 %inc12, i32* %i, align 4
  br label %for.cond8

for.end13:                                        ; preds = %for.cond8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @subrand() #0 {
entry:
  %x = alloca i32, align 4
  %0 = load i32, i32* @si, align 4
  %1 = load i32, i32* @sj, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @subrand_seed(i32 0)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i32, i32* @si, align 4
  %dec = add nsw i32 %2, -1
  store i32 %dec, i32* @si, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %if.end2, label %if.then1

if.then1:                                         ; preds = %if.end
  store i32 54, i32* @si, align 4
  br label %if.end2

if.end2:                                          ; preds = %if.then1, %if.end
  %3 = load i32, i32* @sj, align 4
  %dec3 = add nsw i32 %3, -1
  store i32 %dec3, i32* @sj, align 4
  %tobool4 = icmp ne i32 %3, 0
  br i1 %tobool4, label %if.end6, label %if.then5

if.then5:                                         ; preds = %if.end2
  store i32 54, i32* @sj, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.then5, %if.end2
  %4 = load i32, i32* @si, align 4
  %arrayidx = getelementptr inbounds [55 x i32], [55 x i32]* @state, i32 0, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  %6 = load i32, i32* @sj, align 4
  %arrayidx7 = getelementptr inbounds [55 x i32], [55 x i32]* @state, i32 0, i32 %6
  %7 = load i32, i32* %arrayidx7, align 4
  %sub = sub nsw i32 %5, %7
  store i32 %sub, i32* %x, align 4
  %cmp8 = icmp slt i32 %sub, 0
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end6
  %8 = load i32, i32* %x, align 4
  %add = add nsw i32 %8, 1000000000
  store i32 %add, i32* %x, align 4
  br label %if.end10

if.end10:                                         ; preds = %if.then9, %if.end6
  %9 = load i32, i32* %x, align 4
  %10 = load i32, i32* @si, align 4
  %arrayidx11 = getelementptr inbounds [55 x i32], [55 x i32]* @state, i32 0, i32 %10
  store i32 %9, i32* %arrayidx11, align 4
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @subrand_seed(i32 292929)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call = call i32 @subrand()
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %1 = load i32, i32* %i, align 4
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* @si, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* @sj, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %2 = load i32, i32* @si, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec = add nsw i32 %2, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %2, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* @sj, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec3 = add nsw i32 %3, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool4 = icmp ne i32 %3, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* @si, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* @sj, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %arrayidx7, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %5, %7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %cmp8 = icmp slt i32 %sub, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1 (hasExternalUses)
%3:i1 = slt %2, 0:i32
infer %3

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %x, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %8, 1000000000
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1000000000:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %x, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* @si, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for subrand()

; entering Souper's runOnFunction() for main()

; ModuleID = './Subtractive_generator.c.bc'
source_filename = "./Subtractive_generator.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@si = hidden global i32 0, align 4
@sj = hidden global i32 0, align 4
@state = hidden global [55 x i32] zeroinitializer, align 16
@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @subrand_seed(i32 %p1) #0 {
entry:
  %p1.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %p2 = alloca i32, align 4
  store i32 %p1, i32* %p1.addr, align 4
  store i32 1, i32* %p2, align 4
  %0 = load i32, i32* %p1.addr, align 4
  %rem = srem i32 %0, 1000000000
  store i32 %rem, i32* getelementptr inbounds ([55 x i32], [55 x i32]* @state, i32 0, i32 0), align 16
  store i32 1, i32* %i, align 4
  store i32 21, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %1, 55
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %j, align 4
  %cmp1 = icmp sge i32 %2, 55
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %3 = load i32, i32* %j, align 4
  %sub = sub nsw i32 %3, 55
  store i32 %sub, i32* %j, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %4 = load i32, i32* %p2, align 4
  %5 = load i32, i32* %j, align 4
  %arrayidx = getelementptr inbounds [55 x i32], [55 x i32]* @state, i32 0, i32 %5
  store i32 %4, i32* %arrayidx, align 4
  %6 = load i32, i32* %p1.addr, align 4
  %7 = load i32, i32* %p2, align 4
  %sub2 = sub nsw i32 %6, %7
  store i32 %sub2, i32* %p2, align 4
  %cmp3 = icmp slt i32 %sub2, 0
  br i1 %cmp3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  %8 = load i32, i32* %p2, align 4
  %add = add nsw i32 %8, 1000000000
  store i32 %add, i32* %p2, align 4
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %if.end
  %9 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds [55 x i32], [55 x i32]* @state, i32 0, i32 %9
  %10 = load i32, i32* %arrayidx6, align 4
  store i32 %10, i32* %p1.addr, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end5
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  %12 = load i32, i32* %j, align 4
  %add7 = add nsw i32 %12, 21
  store i32 %add7, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* @si, align 4
  store i32 24, i32* @sj, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc11, %for.end
  %13 = load i32, i32* %i, align 4
  %cmp9 = icmp slt i32 %13, 165
  br i1 %cmp9, label %for.body10, label %for.end13

for.body10:                                       ; preds = %for.cond8
  %call = call i32 @subrand()
  br label %for.inc11

for.inc11:                                        ; preds = %for.body10
  %14 = load i32, i32* %i, align 4
  %inc12 = add nsw i32 %14, 1
  store i32 %inc12, i32* %i, align 4
  br label %for.cond8

for.end13:                                        ; preds = %for.cond8
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @subrand() #0 {
entry:
  %x = alloca i32, align 4
  %0 = load i32, i32* @si, align 4
  %1 = load i32, i32* @sj, align 4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @subrand_seed(i32 0)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i32, i32* @si, align 4
  %dec = add nsw i32 %2, -1
  store i32 %dec, i32* @si, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %if.end2, label %if.then1

if.then1:                                         ; preds = %if.end
  store i32 54, i32* @si, align 4
  br label %if.end2

if.end2:                                          ; preds = %if.then1, %if.end
  %3 = load i32, i32* @sj, align 4
  %dec3 = add nsw i32 %3, -1
  store i32 %dec3, i32* @sj, align 4
  %tobool4 = icmp ne i32 %3, 0
  br i1 %tobool4, label %if.end6, label %if.then5

if.then5:                                         ; preds = %if.end2
  store i32 54, i32* @sj, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.then5, %if.end2
  %4 = load i32, i32* @si, align 4
  %arrayidx = getelementptr inbounds [55 x i32], [55 x i32]* @state, i32 0, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  %6 = load i32, i32* @sj, align 4
  %arrayidx7 = getelementptr inbounds [55 x i32], [55 x i32]* @state, i32 0, i32 %6
  %7 = load i32, i32* %arrayidx7, align 4
  %sub = sub nsw i32 %5, %7
  store i32 %sub, i32* %x, align 4
  %cmp8 = icmp slt i32 %sub, 0
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end6
  %8 = load i32, i32* %x, align 4
  %add = add nsw i32 %8, 1000000000
  store i32 %add, i32* %x, align 4
  br label %if.end10

if.end10:                                         ; preds = %if.then9, %if.end6
  %9 = load i32, i32* %x, align 4
  %10 = load i32, i32* @si, align 4
  %arrayidx11 = getelementptr inbounds [55 x i32], [55 x i32]* @state, i32 0, i32 %10
  store i32 %9, i32* %arrayidx11, align 4
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @subrand_seed(i32 292929)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call = call i32 @subrand()
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i32 %call)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %1 = load i32, i32* %i, align 4
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, 10
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 10:i32
infer %1

; *****
; For LLVM instruction:
;  %call = call i32 @subrand()
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %1, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 10:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
