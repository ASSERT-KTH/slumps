
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for heapPermute()

; ModuleID = './Permutations_by_swapping.c.bc'
source_filename = "./Permutations_by_swapping.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@flag = hidden global i32 1, align 4
@.str = private unnamed_addr constant [3 x i8] c"\0A[\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%d,\00", align 1
@.str.2 = private unnamed_addr constant [13 x i8] c"\08] Sign : %d\00", align 1
@.str.3 = private unnamed_addr constant [46 x i8] c"Usage : %s <comma separated list of integers>\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c",\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @heapPermute(i32 %n, i32* %arr, i32 %arrLen) #0 {
entry:
  %n.addr = alloca i32, align 4
  %arr.addr = alloca i32*, align 4
  %arrLen.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32* %arr, i32** %arr.addr, align 4
  store i32 %arrLen, i32* %arrLen.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp eq i32 %0, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %arrLen.addr, align 4
  %cmp1 = icmp slt i32 %1, %2
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32*, i32** %arr.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %3, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %5)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %7 = load i32, i32* @flag, align 4
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i32 0, i32 0), i32 %7)
  %8 = load i32, i32* @flag, align 4
  %mul = mul nsw i32 %8, -1
  store i32 %mul, i32* @flag, align 4
  br label %if.end27

if.else:                                          ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc23, %if.else
  %9 = load i32, i32* %i, align 4
  %10 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %10, 1
  %cmp5 = icmp slt i32 %9, %sub
  br i1 %cmp5, label %for.body6, label %for.end25

for.body6:                                        ; preds = %for.cond4
  %11 = load i32, i32* %n.addr, align 4
  %sub7 = sub nsw i32 %11, 1
  %12 = load i32*, i32** %arr.addr, align 4
  %13 = load i32, i32* %arrLen.addr, align 4
  call void @heapPermute(i32 %sub7, i32* %12, i32 %13)
  %14 = load i32, i32* %n.addr, align 4
  %rem = srem i32 %14, 2
  %cmp8 = icmp eq i32 %rem, 0
  br i1 %cmp8, label %if.then9, label %if.else16

if.then9:                                         ; preds = %for.body6
  %15 = load i32*, i32** %arr.addr, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %15, i32 %16
  %17 = load i32, i32* %arrayidx10, align 4
  store i32 %17, i32* %temp, align 4
  %18 = load i32*, i32** %arr.addr, align 4
  %19 = load i32, i32* %n.addr, align 4
  %sub11 = sub nsw i32 %19, 1
  %arrayidx12 = getelementptr inbounds i32, i32* %18, i32 %sub11
  %20 = load i32, i32* %arrayidx12, align 4
  %21 = load i32*, i32** %arr.addr, align 4
  %22 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds i32, i32* %21, i32 %22
  store i32 %20, i32* %arrayidx13, align 4
  %23 = load i32, i32* %temp, align 4
  %24 = load i32*, i32** %arr.addr, align 4
  %25 = load i32, i32* %n.addr, align 4
  %sub14 = sub nsw i32 %25, 1
  %arrayidx15 = getelementptr inbounds i32, i32* %24, i32 %sub14
  store i32 %23, i32* %arrayidx15, align 4
  br label %if.end

if.else16:                                        ; preds = %for.body6
  %26 = load i32*, i32** %arr.addr, align 4
  %arrayidx17 = getelementptr inbounds i32, i32* %26, i32 0
  %27 = load i32, i32* %arrayidx17, align 4
  store i32 %27, i32* %temp, align 4
  %28 = load i32*, i32** %arr.addr, align 4
  %29 = load i32, i32* %n.addr, align 4
  %sub18 = sub nsw i32 %29, 1
  %arrayidx19 = getelementptr inbounds i32, i32* %28, i32 %sub18
  %30 = load i32, i32* %arrayidx19, align 4
  %31 = load i32*, i32** %arr.addr, align 4
  %arrayidx20 = getelementptr inbounds i32, i32* %31, i32 0
  store i32 %30, i32* %arrayidx20, align 4
  %32 = load i32, i32* %temp, align 4
  %33 = load i32*, i32** %arr.addr, align 4
  %34 = load i32, i32* %n.addr, align 4
  %sub21 = sub nsw i32 %34, 1
  %arrayidx22 = getelementptr inbounds i32, i32* %33, i32 %sub21
  store i32 %32, i32* %arrayidx22, align 4
  br label %if.end

if.end:                                           ; preds = %if.else16, %if.then9
  br label %for.inc23

for.inc23:                                        ; preds = %if.end
  %35 = load i32, i32* %i, align 4
  %inc24 = add nsw i32 %35, 1
  store i32 %inc24, i32* %i, align 4
  br label %for.cond4

for.end25:                                        ; preds = %for.cond4
  %36 = load i32, i32* %n.addr, align 4
  %sub26 = sub nsw i32 %36, 1
  %37 = load i32*, i32** %arr.addr, align 4
  %38 = load i32, i32* %arrLen.addr, align 4
  call void @heapPermute(i32 %sub26, i32* %37, i32 %38)
  br label %if.end27

if.end27:                                         ; preds = %for.end25, %for.end
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argC, i8** %argV) #0 {
entry:
  %retval = alloca i32, align 4
  %argC.addr = alloca i32, align 4
  %argV.addr = alloca i8**, align 4
  %arr = alloca i32*, align 4
  %i = alloca i32, align 4
  %count = alloca i32, align 4
  %token = alloca i8*, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argC, i32* %argC.addr, align 4
  store i8** %argV, i8*** %argV.addr, align 4
  store i32 0, i32* %i, align 4
  store i32 1, i32* %count, align 4
  %0 = load i32, i32* %argC.addr, align 4
  %cmp = icmp eq i32 %0, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i8**, i8*** %argV.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 0
  %2 = load i8*, i8** %arrayidx, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.3, i32 0, i32 0), i8* %2)
  br label %if.end24

if.else:                                          ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %if.end, %if.else
  %3 = load i8**, i8*** %argV.addr, align 4
  %arrayidx1 = getelementptr inbounds i8*, i8** %3, i32 1
  %4 = load i8*, i8** %arrayidx1, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i8, i8* %4, i32 %5
  %6 = load i8, i8* %arrayidx2, align 1
  %conv = sext i8 %6 to i32
  %cmp3 = icmp ne i32 %conv, 0
  br i1 %cmp3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %7 = load i8**, i8*** %argV.addr, align 4
  %arrayidx5 = getelementptr inbounds i8*, i8** %7, i32 1
  %8 = load i8*, i8** %arrayidx5, align 4
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds i8, i8* %8, i32 %9
  %10 = load i8, i8* %arrayidx6, align 1
  %conv7 = sext i8 %10 to i32
  %cmp8 = icmp eq i32 %conv7, 44
  br i1 %cmp8, label %if.then10, label %if.end

if.then10:                                        ; preds = %while.body
  %11 = load i32, i32* %count, align 4
  %inc11 = add nsw i32 %11, 1
  store i32 %inc11, i32* %count, align 4
  br label %if.end

if.end:                                           ; preds = %if.then10, %while.body
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %12 = load i32, i32* %count, align 4
  %mul = mul i32 %12, 4
  %call12 = call noalias i8* @malloc(i32 %mul)
  %13 = bitcast i8* %call12 to i32*
  store i32* %13, i32** %arr, align 4
  store i32 0, i32* %i, align 4
  %14 = load i8**, i8*** %argV.addr, align 4
  %arrayidx13 = getelementptr inbounds i8*, i8** %14, i32 1
  %15 = load i8*, i8** %arrayidx13, align 4
  %call14 = call i8* @strtok(i8* %15, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0))
  store i8* %call14, i8** %token, align 4
  br label %while.cond15

while.cond15:                                     ; preds = %while.body18, %while.end
  %16 = load i8*, i8** %token, align 4
  %cmp16 = icmp ne i8* %16, null
  br i1 %cmp16, label %while.body18, label %while.end23

while.body18:                                     ; preds = %while.cond15
  %17 = load i8*, i8** %token, align 4
  %call19 = call i32 @atoi(i8* %17)
  %18 = load i32*, i32** %arr, align 4
  %19 = load i32, i32* %i, align 4
  %inc20 = add nsw i32 %19, 1
  store i32 %inc20, i32* %i, align 4
  %arrayidx21 = getelementptr inbounds i32, i32* %18, i32 %19
  store i32 %call19, i32* %arrayidx21, align 4
  %call22 = call i8* @strtok(i8* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0))
  store i8* %call22, i8** %token, align 4
  br label %while.cond15

while.end23:                                      ; preds = %while.cond15
  %20 = load i32, i32* %i, align 4
  %21 = load i32*, i32** %arr, align 4
  %22 = load i32, i32* %count, align 4
  call void @heapPermute(i32 %20, i32* %21, i32 %22)
  br label %if.end24

if.end24:                                         ; preds = %while.end23, %if.then
  ret i32 0
}

declare noalias i8* @malloc(i32 %0) #1

declare i8* @strtok(i8* %0, i8* %1) #1

declare i32 @atoi(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %0, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %arrLen.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = icmp slt i32 %1, %2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %6, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* @flag, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* @flag, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %8, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %10, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp5 = icmp slt i32 %9, %sub
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = slt %0, %2
infer %3

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub7 = sub nsw i32 %11, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %arrLen.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem = srem i32 %14, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp8 = icmp eq i32 %rem, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 2:i32
%2:i1 = eq 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %arrayidx10, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub11 = sub nsw i32 %19, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %arrayidx12, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %temp, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub14 = sub nsw i32 %25, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %arrayidx17, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub18 = sub nsw i32 %29, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %arrayidx19, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %temp, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub21 = sub nsw i32 %34, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc24 = add nsw i32 %35, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub26 = sub nsw i32 %36, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %38 = load i32, i32* %arrLen.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mulnsw 4294967295:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = slt %0, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem %0, 2:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem %0, 2:i32
%2:i1 = eq 0:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for heapPermute()

; entering Souper's runOnFunction() for __main_argc_argv()

; ModuleID = './Permutations_by_swapping.c.bc'
source_filename = "./Permutations_by_swapping.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@flag = hidden global i32 1, align 4
@.str = private unnamed_addr constant [3 x i8] c"\0A[\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%d,\00", align 1
@.str.2 = private unnamed_addr constant [13 x i8] c"\08] Sign : %d\00", align 1
@.str.3 = private unnamed_addr constant [46 x i8] c"Usage : %s <comma separated list of integers>\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c",\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden void @heapPermute(i32 %n, i32* %arr, i32 %arrLen) #0 {
entry:
  %n.addr = alloca i32, align 4
  %arr.addr = alloca i32*, align 4
  %arrLen.addr = alloca i32, align 4
  %temp = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32* %arr, i32** %arr.addr, align 4
  store i32 %arrLen, i32* %arrLen.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp eq i32 %0, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %arrLen.addr, align 4
  %cmp1 = icmp slt i32 %1, %2
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32*, i32** %arr.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %3, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %5)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %7 = load i32, i32* @flag, align 4
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i32 0, i32 0), i32 %7)
  %8 = load i32, i32* @flag, align 4
  %mul = mul nsw i32 %8, -1
  store i32 %mul, i32* @flag, align 4
  br label %if.end27

if.else:                                          ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc23, %if.else
  %9 = load i32, i32* %i, align 4
  %10 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %10, 1
  %cmp5 = icmp slt i32 %9, %sub
  br i1 %cmp5, label %for.body6, label %for.end25

for.body6:                                        ; preds = %for.cond4
  %11 = load i32, i32* %n.addr, align 4
  %sub7 = sub nsw i32 %11, 1
  %12 = load i32*, i32** %arr.addr, align 4
  %13 = load i32, i32* %arrLen.addr, align 4
  call void @heapPermute(i32 %sub7, i32* %12, i32 %13)
  %14 = load i32, i32* %n.addr, align 4
  %rem = srem i32 %14, 2
  %cmp8 = icmp eq i32 %rem, 0
  br i1 %cmp8, label %if.then9, label %if.else16

if.then9:                                         ; preds = %for.body6
  %15 = load i32*, i32** %arr.addr, align 4
  %16 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %15, i32 %16
  %17 = load i32, i32* %arrayidx10, align 4
  store i32 %17, i32* %temp, align 4
  %18 = load i32*, i32** %arr.addr, align 4
  %19 = load i32, i32* %n.addr, align 4
  %sub11 = sub nsw i32 %19, 1
  %arrayidx12 = getelementptr inbounds i32, i32* %18, i32 %sub11
  %20 = load i32, i32* %arrayidx12, align 4
  %21 = load i32*, i32** %arr.addr, align 4
  %22 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds i32, i32* %21, i32 %22
  store i32 %20, i32* %arrayidx13, align 4
  %23 = load i32, i32* %temp, align 4
  %24 = load i32*, i32** %arr.addr, align 4
  %25 = load i32, i32* %n.addr, align 4
  %sub14 = sub nsw i32 %25, 1
  %arrayidx15 = getelementptr inbounds i32, i32* %24, i32 %sub14
  store i32 %23, i32* %arrayidx15, align 4
  br label %if.end

if.else16:                                        ; preds = %for.body6
  %26 = load i32*, i32** %arr.addr, align 4
  %arrayidx17 = getelementptr inbounds i32, i32* %26, i32 0
  %27 = load i32, i32* %arrayidx17, align 4
  store i32 %27, i32* %temp, align 4
  %28 = load i32*, i32** %arr.addr, align 4
  %29 = load i32, i32* %n.addr, align 4
  %sub18 = sub nsw i32 %29, 1
  %arrayidx19 = getelementptr inbounds i32, i32* %28, i32 %sub18
  %30 = load i32, i32* %arrayidx19, align 4
  %31 = load i32*, i32** %arr.addr, align 4
  %arrayidx20 = getelementptr inbounds i32, i32* %31, i32 0
  store i32 %30, i32* %arrayidx20, align 4
  %32 = load i32, i32* %temp, align 4
  %33 = load i32*, i32** %arr.addr, align 4
  %34 = load i32, i32* %n.addr, align 4
  %sub21 = sub nsw i32 %34, 1
  %arrayidx22 = getelementptr inbounds i32, i32* %33, i32 %sub21
  store i32 %32, i32* %arrayidx22, align 4
  br label %if.end

if.end:                                           ; preds = %if.else16, %if.then9
  br label %for.inc23

for.inc23:                                        ; preds = %if.end
  %35 = load i32, i32* %i, align 4
  %inc24 = add nsw i32 %35, 1
  store i32 %inc24, i32* %i, align 4
  br label %for.cond4

for.end25:                                        ; preds = %for.cond4
  %36 = load i32, i32* %n.addr, align 4
  %sub26 = sub nsw i32 %36, 1
  %37 = load i32*, i32** %arr.addr, align 4
  %38 = load i32, i32* %arrLen.addr, align 4
  call void @heapPermute(i32 %sub26, i32* %37, i32 %38)
  br label %if.end27

if.end27:                                         ; preds = %for.end25, %for.end
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argC, i8** %argV) #0 {
entry:
  %retval = alloca i32, align 4
  %argC.addr = alloca i32, align 4
  %argV.addr = alloca i8**, align 4
  %arr = alloca i32*, align 4
  %i = alloca i32, align 4
  %count = alloca i32, align 4
  %token = alloca i8*, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argC, i32* %argC.addr, align 4
  store i8** %argV, i8*** %argV.addr, align 4
  store i32 0, i32* %i, align 4
  store i32 1, i32* %count, align 4
  %0 = load i32, i32* %argC.addr, align 4
  %cmp = icmp eq i32 %0, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i8**, i8*** %argV.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 0
  %2 = load i8*, i8** %arrayidx, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.3, i32 0, i32 0), i8* %2)
  br label %if.end24

if.else:                                          ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %if.end, %if.else
  %3 = load i8**, i8*** %argV.addr, align 4
  %arrayidx1 = getelementptr inbounds i8*, i8** %3, i32 1
  %4 = load i8*, i8** %arrayidx1, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i8, i8* %4, i32 %5
  %6 = load i8, i8* %arrayidx2, align 1
  %conv = sext i8 %6 to i32
  %cmp3 = icmp ne i32 %conv, 0
  br i1 %cmp3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %7 = load i8**, i8*** %argV.addr, align 4
  %arrayidx5 = getelementptr inbounds i8*, i8** %7, i32 1
  %8 = load i8*, i8** %arrayidx5, align 4
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds i8, i8* %8, i32 %9
  %10 = load i8, i8* %arrayidx6, align 1
  %conv7 = sext i8 %10 to i32
  %cmp8 = icmp eq i32 %conv7, 44
  br i1 %cmp8, label %if.then10, label %if.end

if.then10:                                        ; preds = %while.body
  %11 = load i32, i32* %count, align 4
  %inc11 = add nsw i32 %11, 1
  store i32 %inc11, i32* %count, align 4
  br label %if.end

if.end:                                           ; preds = %if.then10, %while.body
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %12 = load i32, i32* %count, align 4
  %mul = mul i32 %12, 4
  %call12 = call noalias i8* @malloc(i32 %mul)
  %13 = bitcast i8* %call12 to i32*
  store i32* %13, i32** %arr, align 4
  store i32 0, i32* %i, align 4
  %14 = load i8**, i8*** %argV.addr, align 4
  %arrayidx13 = getelementptr inbounds i8*, i8** %14, i32 1
  %15 = load i8*, i8** %arrayidx13, align 4
  %call14 = call i8* @strtok(i8* %15, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0))
  store i8* %call14, i8** %token, align 4
  br label %while.cond15

while.cond15:                                     ; preds = %while.body18, %while.end
  %16 = load i8*, i8** %token, align 4
  %cmp16 = icmp ne i8* %16, null
  br i1 %cmp16, label %while.body18, label %while.end23

while.body18:                                     ; preds = %while.cond15
  %17 = load i8*, i8** %token, align 4
  %call19 = call i32 @atoi(i8* %17)
  %18 = load i32*, i32** %arr, align 4
  %19 = load i32, i32* %i, align 4
  %inc20 = add nsw i32 %19, 1
  store i32 %inc20, i32* %i, align 4
  %arrayidx21 = getelementptr inbounds i32, i32* %18, i32 %19
  store i32 %call19, i32* %arrayidx21, align 4
  %call22 = call i8* @strtok(i8* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0))
  store i8* %call22, i8** %token, align 4
  br label %while.cond15

while.end23:                                      ; preds = %while.cond15
  %20 = load i32, i32* %i, align 4
  %21 = load i32*, i32** %arr, align 4
  %22 = load i32, i32* %count, align 4
  call void @heapPermute(i32 %20, i32* %21, i32 %22)
  br label %if.end24

if.end24:                                         ; preds = %while.end23, %if.then
  ret i32 0
}

declare noalias i8* @malloc(i32 %0) #1

declare i8* @strtok(i8* %0, i8* %1) #1

declare i32 @atoi(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %argC.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %0, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i8, i8* %arrayidx2, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %6 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp3 = icmp ne i32 %conv, 0
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %9, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %10 = load i8, i8* %arrayidx6, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv7 = sext i8 %10 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp8 = icmp eq i32 %conv7, 44
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 44:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %count, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc11 = add nsw i32 %11, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %count, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul i32 %12, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp16 = icmp ne i8* %16, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call19 = call i32 @atoi(i8* %17)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc20 = add nsw i32 %19, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %count, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 0:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 44:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for __main_argc_argv()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
