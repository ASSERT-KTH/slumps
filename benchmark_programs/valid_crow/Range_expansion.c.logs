
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for get_list()

; ModuleID = './Range_expansion.c.bc'
source_filename = "./Range_expansion.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [21 x i8] c"\0ASyntax error at %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@.str.2 = private unnamed_addr constant [30 x i8] c"-6,-3--1,3-5,7-11,14,15,17-20\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"Ok\00", align 1
@.str.4 = private unnamed_addr constant [30 x i8] c"-6 -3--1,3-5,7-11,14,15,17-20\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @get_list(i8* %s, i8** %e) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca i8*, align 4
  %e.addr = alloca i8**, align 4
  %x = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8** %e, i8*** %e.addr, align 4
  br label %while.body

while.body:                                       ; preds = %entry, %if.then23
  br label %while.cond1

while.cond1:                                      ; preds = %while.body2, %while.body
  %0 = load i8*, i8** %s.addr, align 4
  %1 = load i8, i8* %0, align 1
  %conv = sext i8 %1 to i32
  %call = call i32 @__isspace(i32 %conv)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %while.body2, label %while.end

while.body2:                                      ; preds = %while.cond1
  %2 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %2, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  br label %while.cond1

while.end:                                        ; preds = %while.cond1
  %3 = load i8*, i8** %s.addr, align 4
  %4 = load i8**, i8*** %e.addr, align 4
  %call3 = call i32 @get_rnge(i8* %3, i8** %4)
  %tobool4 = icmp ne i32 %call3, 0
  br i1 %tobool4, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %while.end
  %5 = load i8*, i8** %s.addr, align 4
  %6 = load i8**, i8*** %e.addr, align 4
  %call5 = call i32 @strtol(i8* %5, i8** %6, i32 10)
  store i32 %call5, i32* %x, align 4
  %7 = load i8**, i8*** %e.addr, align 4
  %8 = load i8*, i8** %7, align 4
  %9 = load i8*, i8** %s.addr, align 4
  %cmp = icmp ne i8* %8, %9
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  br label %while.end26

if.end:                                           ; preds = %land.lhs.true, %while.end
  %10 = load i8**, i8*** %e.addr, align 4
  %11 = load i8*, i8** %10, align 4
  store i8* %11, i8** %s.addr, align 4
  br label %while.cond7

while.cond7:                                      ; preds = %while.body11, %if.end
  %12 = load i8*, i8** %s.addr, align 4
  %13 = load i8, i8* %12, align 1
  %conv8 = sext i8 %13 to i32
  %call9 = call i32 @__isspace(i32 %conv8)
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %while.body11, label %while.end13

while.body11:                                     ; preds = %while.cond7
  %14 = load i8*, i8** %s.addr, align 4
  %incdec.ptr12 = getelementptr inbounds i8, i8* %14, i32 1
  store i8* %incdec.ptr12, i8** %s.addr, align 4
  br label %while.cond7

while.end13:                                      ; preds = %while.cond7
  %15 = load i8*, i8** %s.addr, align 4
  %16 = load i8, i8* %15, align 1
  %conv14 = sext i8 %16 to i32
  %cmp15 = icmp eq i32 %conv14, 0
  br i1 %cmp15, label %if.then17, label %if.end19

if.then17:                                        ; preds = %while.end13
  %call18 = call i32 @putchar(i32 10)
  store i32 1, i32* %retval, align 4
  br label %return

if.end19:                                         ; preds = %while.end13
  %17 = load i8*, i8** %s.addr, align 4
  %18 = load i8, i8* %17, align 1
  %conv20 = sext i8 %18 to i32
  %cmp21 = icmp eq i32 %conv20, 44
  br i1 %cmp21, label %if.then23, label %if.end25

if.then23:                                        ; preds = %if.end19
  %19 = load i8*, i8** %s.addr, align 4
  %incdec.ptr24 = getelementptr inbounds i8, i8* %19, i32 1
  store i8* %incdec.ptr24, i8** %s.addr, align 4
  br label %while.body

if.end25:                                         ; preds = %if.end19
  br label %while.end26

while.end26:                                      ; preds = %if.end25, %if.then
  %20 = load i8*, i8** %s.addr, align 4
  %21 = load i8**, i8*** %e.addr, align 4
  store i8* %20, i8** %21, align 4
  %22 = load i8*, i8** %s.addr, align 4
  %call27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i32 0, i32 0), i8* %22)
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %while.end26, %if.then17
  %23 = load i32, i32* %retval, align 4
  ret i32 %23
}

; Function Attrs: noinline nounwind optnone
define internal i32 @__isspace(i32 %_c) #0 {
entry:
  %_c.addr = alloca i32, align 4
  store i32 %_c, i32* %_c.addr, align 4
  %0 = load i32, i32* %_c.addr, align 4
  %cmp = icmp eq i32 %0, 32
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %1 = load i32, i32* %_c.addr, align 4
  %sub = sub i32 %1, 9
  %cmp1 = icmp ult i32 %sub, 5
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %2 = phi i1 [ true, %entry ], [ %cmp1, %lor.rhs ]
  %lor.ext = zext i1 %2 to i32
  ret i32 %lor.ext
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @get_rnge(i8* %s, i8** %e) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca i8*, align 4
  %e.addr = alloca i8**, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %ee = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8** %e, i8*** %e.addr, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %call = call i32 @strtol(i8* %0, i8** %ee, i32 10)
  store i32 %call, i32* %x, align 4
  %1 = load i8*, i8** %ee, align 4
  %2 = load i8*, i8** %s.addr, align 4
  %cmp = icmp ne i8* %1, %2
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i8*, i8** %ee, align 4
  store i8* %3, i8** %s.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %4 = load i8*, i8** %s.addr, align 4
  %5 = load i8, i8* %4, align 1
  %conv = sext i8 %5 to i32
  %call1 = call i32 @__isspace(i32 %conv)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %7 = load i8*, i8** %s.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv2 = sext i8 %8 to i32
  %cmp3 = icmp ne i32 %conv2, 45
  br i1 %cmp3, label %if.then5, label %if.end6

if.then5:                                         ; preds = %while.end
  %9 = load i8*, i8** %s.addr, align 4
  %10 = load i8**, i8*** %e.addr, align 4
  store i8* %9, i8** %10, align 4
  store i32 0, i32* %retval, align 4
  br label %return

if.end6:                                          ; preds = %while.end
  %11 = load i8*, i8** %s.addr, align 4
  %incdec.ptr7 = getelementptr inbounds i8, i8* %11, i32 1
  store i8* %incdec.ptr7, i8** %s.addr, align 4
  %12 = load i8*, i8** %s.addr, align 4
  %13 = load i8**, i8*** %e.addr, align 4
  %call8 = call i32 @strtol(i8* %12, i8** %13, i32 10)
  store i32 %call8, i32* %y, align 4
  %14 = load i8**, i8*** %e.addr, align 4
  %15 = load i8*, i8** %14, align 4
  %16 = load i8*, i8** %s.addr, align 4
  %cmp9 = icmp ne i8* %15, %16
  br i1 %cmp9, label %if.end12, label %if.then11

if.then11:                                        ; preds = %if.end6
  store i32 0, i32* %retval, align 4
  br label %return

if.end12:                                         ; preds = %if.end6
  %17 = load i32, i32* %x, align 4
  %18 = load i32, i32* %y, align 4
  %call13 = call i32 @add_range(i32 %17, i32 %18)
  store i32 %call13, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end12, %if.then11, %if.then5, %if.then
  %19 = load i32, i32* %retval, align 4
  ret i32 %19
}

declare i32 @strtol(i8* %0, i8** %1, i32 %2) #1

declare i32 @putchar(i32 %0) #1

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @add_range(i32 %x, i32 %y) #0 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  %0 = load i32, i32* %y.addr, align 4
  %1 = load i32, i32* %x.addr, align 4
  %cmp = icmp sle i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %2 = load i32, i32* %x.addr, align 4
  %3 = load i32, i32* %y.addr, align 4
  %cmp1 = icmp sle i32 %2, %3
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i32, i32* %x.addr, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %x.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %4)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then
  %5 = load i32, i32* %retval, align 4
  ret i32 %5
}

; Function Attrs: noinline nounwind optnone
define hidden void @add_number(i32 %x) #0 {
entry:
  %x.addr = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  %0 = load i32, i32* %x.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %0)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %end = alloca i8*, align 4
  store i32 0, i32* %retval, align 4
  %call = call i32 @get_list(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.2, i32 0, i32 0), i8** %end)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call1 = call i32 @puts(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %call2 = call i32 @get_list(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.4, i32 0, i32 0), i8** %end)
  ret i32 0
}

declare i32 @puts(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i8, i8* %0, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %1 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %call = call i32 @__isspace(i32 %conv)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %call, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call3 = call i32 @get_rnge(i8* %3, i8** %4)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool4 = icmp ne i32 %call3, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call5 = call i32 @strtol(i8* %5, i8** %6, i32 10)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ne i8* %8, %9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2

; *****
; For LLVM instruction:
;  %13 = load i8, i8* %12, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv8 = sext i8 %13 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %call9 = call i32 @__isspace(i32 %conv8)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool10 = icmp ne i32 %call9, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %16 = load i8, i8* %15, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv14 = sext i8 %16 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp15 = icmp eq i32 %conv14, 0
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 0:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %18 = load i8, i8* %17, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv20 = sext i8 %18 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp21 = icmp eq i32 %conv20, 44
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 44:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 0:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = eq 44:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for get_list()

; entering Souper's runOnFunction() for ./Range_expansion.c.bc:__isspace()

; ModuleID = './Range_expansion.c.bc'
source_filename = "./Range_expansion.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [21 x i8] c"\0ASyntax error at %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@.str.2 = private unnamed_addr constant [30 x i8] c"-6,-3--1,3-5,7-11,14,15,17-20\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"Ok\00", align 1
@.str.4 = private unnamed_addr constant [30 x i8] c"-6 -3--1,3-5,7-11,14,15,17-20\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @get_list(i8* %s, i8** %e) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca i8*, align 4
  %e.addr = alloca i8**, align 4
  %x = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8** %e, i8*** %e.addr, align 4
  br label %while.body

while.body:                                       ; preds = %entry, %if.then23
  br label %while.cond1

while.cond1:                                      ; preds = %while.body2, %while.body
  %0 = load i8*, i8** %s.addr, align 4
  %1 = load i8, i8* %0, align 1
  %conv = sext i8 %1 to i32
  %call = call i32 @__isspace(i32 %conv)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %while.body2, label %while.end

while.body2:                                      ; preds = %while.cond1
  %2 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %2, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  br label %while.cond1

while.end:                                        ; preds = %while.cond1
  %3 = load i8*, i8** %s.addr, align 4
  %4 = load i8**, i8*** %e.addr, align 4
  %call3 = call i32 @get_rnge(i8* %3, i8** %4)
  %tobool4 = icmp ne i32 %call3, 0
  br i1 %tobool4, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %while.end
  %5 = load i8*, i8** %s.addr, align 4
  %6 = load i8**, i8*** %e.addr, align 4
  %call5 = call i32 @strtol(i8* %5, i8** %6, i32 10)
  store i32 %call5, i32* %x, align 4
  %7 = load i8**, i8*** %e.addr, align 4
  %8 = load i8*, i8** %7, align 4
  %9 = load i8*, i8** %s.addr, align 4
  %cmp = icmp ne i8* %8, %9
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  br label %while.end26

if.end:                                           ; preds = %land.lhs.true, %while.end
  %10 = load i8**, i8*** %e.addr, align 4
  %11 = load i8*, i8** %10, align 4
  store i8* %11, i8** %s.addr, align 4
  br label %while.cond7

while.cond7:                                      ; preds = %while.body11, %if.end
  %12 = load i8*, i8** %s.addr, align 4
  %13 = load i8, i8* %12, align 1
  %conv8 = sext i8 %13 to i32
  %call9 = call i32 @__isspace(i32 %conv8)
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %while.body11, label %while.end13

while.body11:                                     ; preds = %while.cond7
  %14 = load i8*, i8** %s.addr, align 4
  %incdec.ptr12 = getelementptr inbounds i8, i8* %14, i32 1
  store i8* %incdec.ptr12, i8** %s.addr, align 4
  br label %while.cond7

while.end13:                                      ; preds = %while.cond7
  %15 = load i8*, i8** %s.addr, align 4
  %16 = load i8, i8* %15, align 1
  %conv14 = sext i8 %16 to i32
  %cmp15 = icmp eq i32 %conv14, 0
  br i1 %cmp15, label %if.then17, label %if.end19

if.then17:                                        ; preds = %while.end13
  %call18 = call i32 @putchar(i32 10)
  store i32 1, i32* %retval, align 4
  br label %return

if.end19:                                         ; preds = %while.end13
  %17 = load i8*, i8** %s.addr, align 4
  %18 = load i8, i8* %17, align 1
  %conv20 = sext i8 %18 to i32
  %cmp21 = icmp eq i32 %conv20, 44
  br i1 %cmp21, label %if.then23, label %if.end25

if.then23:                                        ; preds = %if.end19
  %19 = load i8*, i8** %s.addr, align 4
  %incdec.ptr24 = getelementptr inbounds i8, i8* %19, i32 1
  store i8* %incdec.ptr24, i8** %s.addr, align 4
  br label %while.body

if.end25:                                         ; preds = %if.end19
  br label %while.end26

while.end26:                                      ; preds = %if.end25, %if.then
  %20 = load i8*, i8** %s.addr, align 4
  %21 = load i8**, i8*** %e.addr, align 4
  store i8* %20, i8** %21, align 4
  %22 = load i8*, i8** %s.addr, align 4
  %call27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i32 0, i32 0), i8* %22)
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %while.end26, %if.then17
  %23 = load i32, i32* %retval, align 4
  ret i32 %23
}

; Function Attrs: noinline nounwind optnone
define internal i32 @__isspace(i32 %_c) #0 {
entry:
  %_c.addr = alloca i32, align 4
  store i32 %_c, i32* %_c.addr, align 4
  %0 = load i32, i32* %_c.addr, align 4
  %cmp = icmp eq i32 %0, 32
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %1 = load i32, i32* %_c.addr, align 4
  %sub = sub i32 %1, 9
  %cmp1 = icmp ult i32 %sub, 5
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %2 = phi i1 [ true, %entry ], [ %cmp1, %lor.rhs ]
  %lor.ext = zext i1 %2 to i32
  ret i32 %lor.ext
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @get_rnge(i8* %s, i8** %e) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca i8*, align 4
  %e.addr = alloca i8**, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %ee = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8** %e, i8*** %e.addr, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %call = call i32 @strtol(i8* %0, i8** %ee, i32 10)
  store i32 %call, i32* %x, align 4
  %1 = load i8*, i8** %ee, align 4
  %2 = load i8*, i8** %s.addr, align 4
  %cmp = icmp ne i8* %1, %2
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i8*, i8** %ee, align 4
  store i8* %3, i8** %s.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %4 = load i8*, i8** %s.addr, align 4
  %5 = load i8, i8* %4, align 1
  %conv = sext i8 %5 to i32
  %call1 = call i32 @__isspace(i32 %conv)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %7 = load i8*, i8** %s.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv2 = sext i8 %8 to i32
  %cmp3 = icmp ne i32 %conv2, 45
  br i1 %cmp3, label %if.then5, label %if.end6

if.then5:                                         ; preds = %while.end
  %9 = load i8*, i8** %s.addr, align 4
  %10 = load i8**, i8*** %e.addr, align 4
  store i8* %9, i8** %10, align 4
  store i32 0, i32* %retval, align 4
  br label %return

if.end6:                                          ; preds = %while.end
  %11 = load i8*, i8** %s.addr, align 4
  %incdec.ptr7 = getelementptr inbounds i8, i8* %11, i32 1
  store i8* %incdec.ptr7, i8** %s.addr, align 4
  %12 = load i8*, i8** %s.addr, align 4
  %13 = load i8**, i8*** %e.addr, align 4
  %call8 = call i32 @strtol(i8* %12, i8** %13, i32 10)
  store i32 %call8, i32* %y, align 4
  %14 = load i8**, i8*** %e.addr, align 4
  %15 = load i8*, i8** %14, align 4
  %16 = load i8*, i8** %s.addr, align 4
  %cmp9 = icmp ne i8* %15, %16
  br i1 %cmp9, label %if.end12, label %if.then11

if.then11:                                        ; preds = %if.end6
  store i32 0, i32* %retval, align 4
  br label %return

if.end12:                                         ; preds = %if.end6
  %17 = load i32, i32* %x, align 4
  %18 = load i32, i32* %y, align 4
  %call13 = call i32 @add_range(i32 %17, i32 %18)
  store i32 %call13, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end12, %if.then11, %if.then5, %if.then
  %19 = load i32, i32* %retval, align 4
  ret i32 %19
}

declare i32 @strtol(i8* %0, i8** %1, i32 %2) #1

declare i32 @putchar(i32 %0) #1

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @add_range(i32 %x, i32 %y) #0 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  %0 = load i32, i32* %y.addr, align 4
  %1 = load i32, i32* %x.addr, align 4
  %cmp = icmp sle i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %2 = load i32, i32* %x.addr, align 4
  %3 = load i32, i32* %y.addr, align 4
  %cmp1 = icmp sle i32 %2, %3
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i32, i32* %x.addr, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %x.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %4)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then
  %5 = load i32, i32* %retval, align 4
  ret i32 %5
}

; Function Attrs: noinline nounwind optnone
define hidden void @add_number(i32 %x) #0 {
entry:
  %x.addr = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  %0 = load i32, i32* %x.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %0)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %end = alloca i8*, align 4
  store i32 0, i32* %retval, align 4
  %call = call i32 @get_list(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.2, i32 0, i32 0), i8** %end)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call1 = call i32 @puts(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %call2 = call i32 @get_list(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.4, i32 0, i32 0), i8** %end)
  ret i32 0
}

declare i32 @puts(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %_c.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %0, 32
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 32:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %_c.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub i32 %1, 9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub %0, 9:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp1 = icmp ult i32 %sub, 5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub %0, 9:i32
%2:i1 = ult %1, 5:i32
infer %2

; *****
; For LLVM instruction:
;  %2 = phi i1 [ true, %entry ], [ %cmp1, %lor.rhs ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = sub %1, 9:i32
%3:i1 = ult %2, 5:i32
%4:i1 = phi %0, 1:i1, %3
infer %4

; *****
; For LLVM instruction:
;  %lor.ext = zext i1 %2 to i32
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = sub %1, 9:i32
%3:i1 = ult %2, 5:i32
%4:i1 = phi %0, 1:i1, %3
%5:i32 = zext %4
infer %5
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 32:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sub %0, 9:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -9
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -10
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sub %0, 9:i32
%2:i1 = ult %1, 5:i32
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = sub %1, 9:i32
%3:i1 = ult %2, 5:i32
%4:i1 = phi %0, 1:i1, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var
%1:i32 = sub %0, 9:i32
%2:i1 = ult %1, 5:i32

Cost = 2
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = sub %1, 9:i32
%3:i1 = ult %2, 5:i32
%4:i1 = phi %0, 1:i1, %3
%5:i32 = zext %4
infer %5


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = sub %0, 9:i32

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for ./Range_expansion.c.bc:__isspace()

; entering Souper's runOnFunction() for get_rnge()

; ModuleID = './Range_expansion.c.bc'
source_filename = "./Range_expansion.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [21 x i8] c"\0ASyntax error at %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@.str.2 = private unnamed_addr constant [30 x i8] c"-6,-3--1,3-5,7-11,14,15,17-20\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"Ok\00", align 1
@.str.4 = private unnamed_addr constant [30 x i8] c"-6 -3--1,3-5,7-11,14,15,17-20\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @get_list(i8* %s, i8** %e) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca i8*, align 4
  %e.addr = alloca i8**, align 4
  %x = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8** %e, i8*** %e.addr, align 4
  br label %while.body

while.body:                                       ; preds = %entry, %if.then23
  br label %while.cond1

while.cond1:                                      ; preds = %while.body2, %while.body
  %0 = load i8*, i8** %s.addr, align 4
  %1 = load i8, i8* %0, align 1
  %conv = sext i8 %1 to i32
  %call = call i32 @__isspace(i32 %conv)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %while.body2, label %while.end

while.body2:                                      ; preds = %while.cond1
  %2 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %2, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  br label %while.cond1

while.end:                                        ; preds = %while.cond1
  %3 = load i8*, i8** %s.addr, align 4
  %4 = load i8**, i8*** %e.addr, align 4
  %call3 = call i32 @get_rnge(i8* %3, i8** %4)
  %tobool4 = icmp ne i32 %call3, 0
  br i1 %tobool4, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %while.end
  %5 = load i8*, i8** %s.addr, align 4
  %6 = load i8**, i8*** %e.addr, align 4
  %call5 = call i32 @strtol(i8* %5, i8** %6, i32 10)
  store i32 %call5, i32* %x, align 4
  %7 = load i8**, i8*** %e.addr, align 4
  %8 = load i8*, i8** %7, align 4
  %9 = load i8*, i8** %s.addr, align 4
  %cmp = icmp ne i8* %8, %9
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  br label %while.end26

if.end:                                           ; preds = %land.lhs.true, %while.end
  %10 = load i8**, i8*** %e.addr, align 4
  %11 = load i8*, i8** %10, align 4
  store i8* %11, i8** %s.addr, align 4
  br label %while.cond7

while.cond7:                                      ; preds = %while.body11, %if.end
  %12 = load i8*, i8** %s.addr, align 4
  %13 = load i8, i8* %12, align 1
  %conv8 = sext i8 %13 to i32
  %call9 = call i32 @__isspace(i32 %conv8)
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %while.body11, label %while.end13

while.body11:                                     ; preds = %while.cond7
  %14 = load i8*, i8** %s.addr, align 4
  %incdec.ptr12 = getelementptr inbounds i8, i8* %14, i32 1
  store i8* %incdec.ptr12, i8** %s.addr, align 4
  br label %while.cond7

while.end13:                                      ; preds = %while.cond7
  %15 = load i8*, i8** %s.addr, align 4
  %16 = load i8, i8* %15, align 1
  %conv14 = sext i8 %16 to i32
  %cmp15 = icmp eq i32 %conv14, 0
  br i1 %cmp15, label %if.then17, label %if.end19

if.then17:                                        ; preds = %while.end13
  %call18 = call i32 @putchar(i32 10)
  store i32 1, i32* %retval, align 4
  br label %return

if.end19:                                         ; preds = %while.end13
  %17 = load i8*, i8** %s.addr, align 4
  %18 = load i8, i8* %17, align 1
  %conv20 = sext i8 %18 to i32
  %cmp21 = icmp eq i32 %conv20, 44
  br i1 %cmp21, label %if.then23, label %if.end25

if.then23:                                        ; preds = %if.end19
  %19 = load i8*, i8** %s.addr, align 4
  %incdec.ptr24 = getelementptr inbounds i8, i8* %19, i32 1
  store i8* %incdec.ptr24, i8** %s.addr, align 4
  br label %while.body

if.end25:                                         ; preds = %if.end19
  br label %while.end26

while.end26:                                      ; preds = %if.end25, %if.then
  %20 = load i8*, i8** %s.addr, align 4
  %21 = load i8**, i8*** %e.addr, align 4
  store i8* %20, i8** %21, align 4
  %22 = load i8*, i8** %s.addr, align 4
  %call27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i32 0, i32 0), i8* %22)
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %while.end26, %if.then17
  %23 = load i32, i32* %retval, align 4
  ret i32 %23
}

; Function Attrs: noinline nounwind optnone
define internal i32 @__isspace(i32 %_c) #0 {
entry:
  %_c.addr = alloca i32, align 4
  store i32 %_c, i32* %_c.addr, align 4
  %0 = load i32, i32* %_c.addr, align 4
  %cmp = icmp eq i32 %0, 32
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %1 = load i32, i32* %_c.addr, align 4
  %sub = sub i32 %1, 9
  %cmp1 = icmp ult i32 %sub, 5
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %2 = phi i1 [ true, %entry ], [ %cmp1, %lor.rhs ]
  %lor.ext = zext i1 %2 to i32
  ret i32 %lor.ext
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @get_rnge(i8* %s, i8** %e) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca i8*, align 4
  %e.addr = alloca i8**, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %ee = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8** %e, i8*** %e.addr, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %call = call i32 @strtol(i8* %0, i8** %ee, i32 10)
  store i32 %call, i32* %x, align 4
  %1 = load i8*, i8** %ee, align 4
  %2 = load i8*, i8** %s.addr, align 4
  %cmp = icmp ne i8* %1, %2
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i8*, i8** %ee, align 4
  store i8* %3, i8** %s.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %4 = load i8*, i8** %s.addr, align 4
  %5 = load i8, i8* %4, align 1
  %conv = sext i8 %5 to i32
  %call1 = call i32 @__isspace(i32 %conv)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %7 = load i8*, i8** %s.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv2 = sext i8 %8 to i32
  %cmp3 = icmp ne i32 %conv2, 45
  br i1 %cmp3, label %if.then5, label %if.end6

if.then5:                                         ; preds = %while.end
  %9 = load i8*, i8** %s.addr, align 4
  %10 = load i8**, i8*** %e.addr, align 4
  store i8* %9, i8** %10, align 4
  store i32 0, i32* %retval, align 4
  br label %return

if.end6:                                          ; preds = %while.end
  %11 = load i8*, i8** %s.addr, align 4
  %incdec.ptr7 = getelementptr inbounds i8, i8* %11, i32 1
  store i8* %incdec.ptr7, i8** %s.addr, align 4
  %12 = load i8*, i8** %s.addr, align 4
  %13 = load i8**, i8*** %e.addr, align 4
  %call8 = call i32 @strtol(i8* %12, i8** %13, i32 10)
  store i32 %call8, i32* %y, align 4
  %14 = load i8**, i8*** %e.addr, align 4
  %15 = load i8*, i8** %14, align 4
  %16 = load i8*, i8** %s.addr, align 4
  %cmp9 = icmp ne i8* %15, %16
  br i1 %cmp9, label %if.end12, label %if.then11

if.then11:                                        ; preds = %if.end6
  store i32 0, i32* %retval, align 4
  br label %return

if.end12:                                         ; preds = %if.end6
  %17 = load i32, i32* %x, align 4
  %18 = load i32, i32* %y, align 4
  %call13 = call i32 @add_range(i32 %17, i32 %18)
  store i32 %call13, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end12, %if.then11, %if.then5, %if.then
  %19 = load i32, i32* %retval, align 4
  ret i32 %19
}

declare i32 @strtol(i8* %0, i8** %1, i32 %2) #1

declare i32 @putchar(i32 %0) #1

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @add_range(i32 %x, i32 %y) #0 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  %0 = load i32, i32* %y.addr, align 4
  %1 = load i32, i32* %x.addr, align 4
  %cmp = icmp sle i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %2 = load i32, i32* %x.addr, align 4
  %3 = load i32, i32* %y.addr, align 4
  %cmp1 = icmp sle i32 %2, %3
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i32, i32* %x.addr, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %x.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %4)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then
  %5 = load i32, i32* %retval, align 4
  ret i32 %5
}

; Function Attrs: noinline nounwind optnone
define hidden void @add_number(i32 %x) #0 {
entry:
  %x.addr = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  %0 = load i32, i32* %x.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %0)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %end = alloca i8*, align 4
  store i32 0, i32* %retval, align 4
  %call = call i32 @get_list(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.2, i32 0, i32 0), i8** %end)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call1 = call i32 @puts(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %call2 = call i32 @get_list(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.4, i32 0, i32 0), i8** %end)
  ret i32 0
}

declare i32 @puts(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 @strtol(i8* %0, i8** %ee, i32 10)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ne i8* %1, %2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2

; *****
; For LLVM instruction:
;  %5 = load i8, i8* %4, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %5 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %call1 = call i32 @__isspace(i32 %conv)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %call1, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %8 = load i8, i8* %7, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv2 = sext i8 %8 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp3 = icmp ne i32 %conv2, 45
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 45:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %call8 = call i32 @strtol(i8* %12, i8** %13, i32 10)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp9 = icmp ne i8* %15, %16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %x, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %y, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call13 = call i32 @add_range(i32 %17, i32 %18)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 3 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i1 = ne 45:i32, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for get_rnge()

; entering Souper's runOnFunction() for add_range()

; ModuleID = './Range_expansion.c.bc'
source_filename = "./Range_expansion.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [21 x i8] c"\0ASyntax error at %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@.str.2 = private unnamed_addr constant [30 x i8] c"-6,-3--1,3-5,7-11,14,15,17-20\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"Ok\00", align 1
@.str.4 = private unnamed_addr constant [30 x i8] c"-6 -3--1,3-5,7-11,14,15,17-20\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @get_list(i8* %s, i8** %e) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca i8*, align 4
  %e.addr = alloca i8**, align 4
  %x = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8** %e, i8*** %e.addr, align 4
  br label %while.body

while.body:                                       ; preds = %entry, %if.then23
  br label %while.cond1

while.cond1:                                      ; preds = %while.body2, %while.body
  %0 = load i8*, i8** %s.addr, align 4
  %1 = load i8, i8* %0, align 1
  %conv = sext i8 %1 to i32
  %call = call i32 @__isspace(i32 %conv)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %while.body2, label %while.end

while.body2:                                      ; preds = %while.cond1
  %2 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %2, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  br label %while.cond1

while.end:                                        ; preds = %while.cond1
  %3 = load i8*, i8** %s.addr, align 4
  %4 = load i8**, i8*** %e.addr, align 4
  %call3 = call i32 @get_rnge(i8* %3, i8** %4)
  %tobool4 = icmp ne i32 %call3, 0
  br i1 %tobool4, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %while.end
  %5 = load i8*, i8** %s.addr, align 4
  %6 = load i8**, i8*** %e.addr, align 4
  %call5 = call i32 @strtol(i8* %5, i8** %6, i32 10)
  store i32 %call5, i32* %x, align 4
  %7 = load i8**, i8*** %e.addr, align 4
  %8 = load i8*, i8** %7, align 4
  %9 = load i8*, i8** %s.addr, align 4
  %cmp = icmp ne i8* %8, %9
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  br label %while.end26

if.end:                                           ; preds = %land.lhs.true, %while.end
  %10 = load i8**, i8*** %e.addr, align 4
  %11 = load i8*, i8** %10, align 4
  store i8* %11, i8** %s.addr, align 4
  br label %while.cond7

while.cond7:                                      ; preds = %while.body11, %if.end
  %12 = load i8*, i8** %s.addr, align 4
  %13 = load i8, i8* %12, align 1
  %conv8 = sext i8 %13 to i32
  %call9 = call i32 @__isspace(i32 %conv8)
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %while.body11, label %while.end13

while.body11:                                     ; preds = %while.cond7
  %14 = load i8*, i8** %s.addr, align 4
  %incdec.ptr12 = getelementptr inbounds i8, i8* %14, i32 1
  store i8* %incdec.ptr12, i8** %s.addr, align 4
  br label %while.cond7

while.end13:                                      ; preds = %while.cond7
  %15 = load i8*, i8** %s.addr, align 4
  %16 = load i8, i8* %15, align 1
  %conv14 = sext i8 %16 to i32
  %cmp15 = icmp eq i32 %conv14, 0
  br i1 %cmp15, label %if.then17, label %if.end19

if.then17:                                        ; preds = %while.end13
  %call18 = call i32 @putchar(i32 10)
  store i32 1, i32* %retval, align 4
  br label %return

if.end19:                                         ; preds = %while.end13
  %17 = load i8*, i8** %s.addr, align 4
  %18 = load i8, i8* %17, align 1
  %conv20 = sext i8 %18 to i32
  %cmp21 = icmp eq i32 %conv20, 44
  br i1 %cmp21, label %if.then23, label %if.end25

if.then23:                                        ; preds = %if.end19
  %19 = load i8*, i8** %s.addr, align 4
  %incdec.ptr24 = getelementptr inbounds i8, i8* %19, i32 1
  store i8* %incdec.ptr24, i8** %s.addr, align 4
  br label %while.body

if.end25:                                         ; preds = %if.end19
  br label %while.end26

while.end26:                                      ; preds = %if.end25, %if.then
  %20 = load i8*, i8** %s.addr, align 4
  %21 = load i8**, i8*** %e.addr, align 4
  store i8* %20, i8** %21, align 4
  %22 = load i8*, i8** %s.addr, align 4
  %call27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i32 0, i32 0), i8* %22)
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %while.end26, %if.then17
  %23 = load i32, i32* %retval, align 4
  ret i32 %23
}

; Function Attrs: noinline nounwind optnone
define internal i32 @__isspace(i32 %_c) #0 {
entry:
  %_c.addr = alloca i32, align 4
  store i32 %_c, i32* %_c.addr, align 4
  %0 = load i32, i32* %_c.addr, align 4
  %cmp = icmp eq i32 %0, 32
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %1 = load i32, i32* %_c.addr, align 4
  %sub = sub i32 %1, 9
  %cmp1 = icmp ult i32 %sub, 5
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %2 = phi i1 [ true, %entry ], [ %cmp1, %lor.rhs ]
  %lor.ext = zext i1 %2 to i32
  ret i32 %lor.ext
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @get_rnge(i8* %s, i8** %e) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca i8*, align 4
  %e.addr = alloca i8**, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %ee = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8** %e, i8*** %e.addr, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %call = call i32 @strtol(i8* %0, i8** %ee, i32 10)
  store i32 %call, i32* %x, align 4
  %1 = load i8*, i8** %ee, align 4
  %2 = load i8*, i8** %s.addr, align 4
  %cmp = icmp ne i8* %1, %2
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i8*, i8** %ee, align 4
  store i8* %3, i8** %s.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %4 = load i8*, i8** %s.addr, align 4
  %5 = load i8, i8* %4, align 1
  %conv = sext i8 %5 to i32
  %call1 = call i32 @__isspace(i32 %conv)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %7 = load i8*, i8** %s.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv2 = sext i8 %8 to i32
  %cmp3 = icmp ne i32 %conv2, 45
  br i1 %cmp3, label %if.then5, label %if.end6

if.then5:                                         ; preds = %while.end
  %9 = load i8*, i8** %s.addr, align 4
  %10 = load i8**, i8*** %e.addr, align 4
  store i8* %9, i8** %10, align 4
  store i32 0, i32* %retval, align 4
  br label %return

if.end6:                                          ; preds = %while.end
  %11 = load i8*, i8** %s.addr, align 4
  %incdec.ptr7 = getelementptr inbounds i8, i8* %11, i32 1
  store i8* %incdec.ptr7, i8** %s.addr, align 4
  %12 = load i8*, i8** %s.addr, align 4
  %13 = load i8**, i8*** %e.addr, align 4
  %call8 = call i32 @strtol(i8* %12, i8** %13, i32 10)
  store i32 %call8, i32* %y, align 4
  %14 = load i8**, i8*** %e.addr, align 4
  %15 = load i8*, i8** %14, align 4
  %16 = load i8*, i8** %s.addr, align 4
  %cmp9 = icmp ne i8* %15, %16
  br i1 %cmp9, label %if.end12, label %if.then11

if.then11:                                        ; preds = %if.end6
  store i32 0, i32* %retval, align 4
  br label %return

if.end12:                                         ; preds = %if.end6
  %17 = load i32, i32* %x, align 4
  %18 = load i32, i32* %y, align 4
  %call13 = call i32 @add_range(i32 %17, i32 %18)
  store i32 %call13, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end12, %if.then11, %if.then5, %if.then
  %19 = load i32, i32* %retval, align 4
  ret i32 %19
}

declare i32 @strtol(i8* %0, i8** %1, i32 %2) #1

declare i32 @putchar(i32 %0) #1

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @add_range(i32 %x, i32 %y) #0 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  %0 = load i32, i32* %y.addr, align 4
  %1 = load i32, i32* %x.addr, align 4
  %cmp = icmp sle i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %2 = load i32, i32* %x.addr, align 4
  %3 = load i32, i32* %y.addr, align 4
  %cmp1 = icmp sle i32 %2, %3
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i32, i32* %x.addr, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %x.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %4)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then
  %5 = load i32, i32* %retval, align 4
  ret i32 %5
}

; Function Attrs: noinline nounwind optnone
define hidden void @add_number(i32 %x) #0 {
entry:
  %x.addr = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  %0 = load i32, i32* %x.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %0)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %end = alloca i8*, align 4
  store i32 0, i32* %retval, align 4
  %call = call i32 @get_list(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.2, i32 0, i32 0), i8** %end)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call1 = call i32 @puts(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %call2 = call i32 @get_list(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.4, i32 0, i32 0), i8** %end)
  ret i32 0
}

declare i32 @puts(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %y.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %x.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sle i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %x.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %y.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = icmp sle i32 %2, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %x.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %4, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for add_range()

; entering Souper's runOnFunction() for add_number()

; ModuleID = './Range_expansion.c.bc'
source_filename = "./Range_expansion.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [21 x i8] c"\0ASyntax error at %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@.str.2 = private unnamed_addr constant [30 x i8] c"-6,-3--1,3-5,7-11,14,15,17-20\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"Ok\00", align 1
@.str.4 = private unnamed_addr constant [30 x i8] c"-6 -3--1,3-5,7-11,14,15,17-20\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @get_list(i8* %s, i8** %e) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca i8*, align 4
  %e.addr = alloca i8**, align 4
  %x = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8** %e, i8*** %e.addr, align 4
  br label %while.body

while.body:                                       ; preds = %entry, %if.then23
  br label %while.cond1

while.cond1:                                      ; preds = %while.body2, %while.body
  %0 = load i8*, i8** %s.addr, align 4
  %1 = load i8, i8* %0, align 1
  %conv = sext i8 %1 to i32
  %call = call i32 @__isspace(i32 %conv)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %while.body2, label %while.end

while.body2:                                      ; preds = %while.cond1
  %2 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %2, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  br label %while.cond1

while.end:                                        ; preds = %while.cond1
  %3 = load i8*, i8** %s.addr, align 4
  %4 = load i8**, i8*** %e.addr, align 4
  %call3 = call i32 @get_rnge(i8* %3, i8** %4)
  %tobool4 = icmp ne i32 %call3, 0
  br i1 %tobool4, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %while.end
  %5 = load i8*, i8** %s.addr, align 4
  %6 = load i8**, i8*** %e.addr, align 4
  %call5 = call i32 @strtol(i8* %5, i8** %6, i32 10)
  store i32 %call5, i32* %x, align 4
  %7 = load i8**, i8*** %e.addr, align 4
  %8 = load i8*, i8** %7, align 4
  %9 = load i8*, i8** %s.addr, align 4
  %cmp = icmp ne i8* %8, %9
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  br label %while.end26

if.end:                                           ; preds = %land.lhs.true, %while.end
  %10 = load i8**, i8*** %e.addr, align 4
  %11 = load i8*, i8** %10, align 4
  store i8* %11, i8** %s.addr, align 4
  br label %while.cond7

while.cond7:                                      ; preds = %while.body11, %if.end
  %12 = load i8*, i8** %s.addr, align 4
  %13 = load i8, i8* %12, align 1
  %conv8 = sext i8 %13 to i32
  %call9 = call i32 @__isspace(i32 %conv8)
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %while.body11, label %while.end13

while.body11:                                     ; preds = %while.cond7
  %14 = load i8*, i8** %s.addr, align 4
  %incdec.ptr12 = getelementptr inbounds i8, i8* %14, i32 1
  store i8* %incdec.ptr12, i8** %s.addr, align 4
  br label %while.cond7

while.end13:                                      ; preds = %while.cond7
  %15 = load i8*, i8** %s.addr, align 4
  %16 = load i8, i8* %15, align 1
  %conv14 = sext i8 %16 to i32
  %cmp15 = icmp eq i32 %conv14, 0
  br i1 %cmp15, label %if.then17, label %if.end19

if.then17:                                        ; preds = %while.end13
  %call18 = call i32 @putchar(i32 10)
  store i32 1, i32* %retval, align 4
  br label %return

if.end19:                                         ; preds = %while.end13
  %17 = load i8*, i8** %s.addr, align 4
  %18 = load i8, i8* %17, align 1
  %conv20 = sext i8 %18 to i32
  %cmp21 = icmp eq i32 %conv20, 44
  br i1 %cmp21, label %if.then23, label %if.end25

if.then23:                                        ; preds = %if.end19
  %19 = load i8*, i8** %s.addr, align 4
  %incdec.ptr24 = getelementptr inbounds i8, i8* %19, i32 1
  store i8* %incdec.ptr24, i8** %s.addr, align 4
  br label %while.body

if.end25:                                         ; preds = %if.end19
  br label %while.end26

while.end26:                                      ; preds = %if.end25, %if.then
  %20 = load i8*, i8** %s.addr, align 4
  %21 = load i8**, i8*** %e.addr, align 4
  store i8* %20, i8** %21, align 4
  %22 = load i8*, i8** %s.addr, align 4
  %call27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i32 0, i32 0), i8* %22)
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %while.end26, %if.then17
  %23 = load i32, i32* %retval, align 4
  ret i32 %23
}

; Function Attrs: noinline nounwind optnone
define internal i32 @__isspace(i32 %_c) #0 {
entry:
  %_c.addr = alloca i32, align 4
  store i32 %_c, i32* %_c.addr, align 4
  %0 = load i32, i32* %_c.addr, align 4
  %cmp = icmp eq i32 %0, 32
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %1 = load i32, i32* %_c.addr, align 4
  %sub = sub i32 %1, 9
  %cmp1 = icmp ult i32 %sub, 5
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %2 = phi i1 [ true, %entry ], [ %cmp1, %lor.rhs ]
  %lor.ext = zext i1 %2 to i32
  ret i32 %lor.ext
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @get_rnge(i8* %s, i8** %e) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca i8*, align 4
  %e.addr = alloca i8**, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %ee = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8** %e, i8*** %e.addr, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %call = call i32 @strtol(i8* %0, i8** %ee, i32 10)
  store i32 %call, i32* %x, align 4
  %1 = load i8*, i8** %ee, align 4
  %2 = load i8*, i8** %s.addr, align 4
  %cmp = icmp ne i8* %1, %2
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i8*, i8** %ee, align 4
  store i8* %3, i8** %s.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %4 = load i8*, i8** %s.addr, align 4
  %5 = load i8, i8* %4, align 1
  %conv = sext i8 %5 to i32
  %call1 = call i32 @__isspace(i32 %conv)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %7 = load i8*, i8** %s.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv2 = sext i8 %8 to i32
  %cmp3 = icmp ne i32 %conv2, 45
  br i1 %cmp3, label %if.then5, label %if.end6

if.then5:                                         ; preds = %while.end
  %9 = load i8*, i8** %s.addr, align 4
  %10 = load i8**, i8*** %e.addr, align 4
  store i8* %9, i8** %10, align 4
  store i32 0, i32* %retval, align 4
  br label %return

if.end6:                                          ; preds = %while.end
  %11 = load i8*, i8** %s.addr, align 4
  %incdec.ptr7 = getelementptr inbounds i8, i8* %11, i32 1
  store i8* %incdec.ptr7, i8** %s.addr, align 4
  %12 = load i8*, i8** %s.addr, align 4
  %13 = load i8**, i8*** %e.addr, align 4
  %call8 = call i32 @strtol(i8* %12, i8** %13, i32 10)
  store i32 %call8, i32* %y, align 4
  %14 = load i8**, i8*** %e.addr, align 4
  %15 = load i8*, i8** %14, align 4
  %16 = load i8*, i8** %s.addr, align 4
  %cmp9 = icmp ne i8* %15, %16
  br i1 %cmp9, label %if.end12, label %if.then11

if.then11:                                        ; preds = %if.end6
  store i32 0, i32* %retval, align 4
  br label %return

if.end12:                                         ; preds = %if.end6
  %17 = load i32, i32* %x, align 4
  %18 = load i32, i32* %y, align 4
  %call13 = call i32 @add_range(i32 %17, i32 %18)
  store i32 %call13, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end12, %if.then11, %if.then5, %if.then
  %19 = load i32, i32* %retval, align 4
  ret i32 %19
}

declare i32 @strtol(i8* %0, i8** %1, i32 %2) #1

declare i32 @putchar(i32 %0) #1

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @add_range(i32 %x, i32 %y) #0 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  %0 = load i32, i32* %y.addr, align 4
  %1 = load i32, i32* %x.addr, align 4
  %cmp = icmp sle i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %2 = load i32, i32* %x.addr, align 4
  %3 = load i32, i32* %y.addr, align 4
  %cmp1 = icmp sle i32 %2, %3
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i32, i32* %x.addr, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %x.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %4)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then
  %5 = load i32, i32* %retval, align 4
  ret i32 %5
}

; Function Attrs: noinline nounwind optnone
define hidden void @add_number(i32 %x) #0 {
entry:
  %x.addr = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  %0 = load i32, i32* %x.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %0)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %end = alloca i8*, align 4
  store i32 0, i32* %retval, align 4
  %call = call i32 @get_list(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.2, i32 0, i32 0), i8** %end)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call1 = call i32 @puts(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %call2 = call i32 @get_list(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.4, i32 0, i32 0), i8** %end)
  ret i32 0
}

declare i32 @puts(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %x.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for add_number()

; entering Souper's runOnFunction() for main()

; ModuleID = './Range_expansion.c.bc'
source_filename = "./Range_expansion.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [21 x i8] c"\0ASyntax error at %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@.str.2 = private unnamed_addr constant [30 x i8] c"-6,-3--1,3-5,7-11,14,15,17-20\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"Ok\00", align 1
@.str.4 = private unnamed_addr constant [30 x i8] c"-6 -3--1,3-5,7-11,14,15,17-20\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @get_list(i8* %s, i8** %e) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca i8*, align 4
  %e.addr = alloca i8**, align 4
  %x = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8** %e, i8*** %e.addr, align 4
  br label %while.body

while.body:                                       ; preds = %entry, %if.then23
  br label %while.cond1

while.cond1:                                      ; preds = %while.body2, %while.body
  %0 = load i8*, i8** %s.addr, align 4
  %1 = load i8, i8* %0, align 1
  %conv = sext i8 %1 to i32
  %call = call i32 @__isspace(i32 %conv)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %while.body2, label %while.end

while.body2:                                      ; preds = %while.cond1
  %2 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %2, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  br label %while.cond1

while.end:                                        ; preds = %while.cond1
  %3 = load i8*, i8** %s.addr, align 4
  %4 = load i8**, i8*** %e.addr, align 4
  %call3 = call i32 @get_rnge(i8* %3, i8** %4)
  %tobool4 = icmp ne i32 %call3, 0
  br i1 %tobool4, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %while.end
  %5 = load i8*, i8** %s.addr, align 4
  %6 = load i8**, i8*** %e.addr, align 4
  %call5 = call i32 @strtol(i8* %5, i8** %6, i32 10)
  store i32 %call5, i32* %x, align 4
  %7 = load i8**, i8*** %e.addr, align 4
  %8 = load i8*, i8** %7, align 4
  %9 = load i8*, i8** %s.addr, align 4
  %cmp = icmp ne i8* %8, %9
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  br label %while.end26

if.end:                                           ; preds = %land.lhs.true, %while.end
  %10 = load i8**, i8*** %e.addr, align 4
  %11 = load i8*, i8** %10, align 4
  store i8* %11, i8** %s.addr, align 4
  br label %while.cond7

while.cond7:                                      ; preds = %while.body11, %if.end
  %12 = load i8*, i8** %s.addr, align 4
  %13 = load i8, i8* %12, align 1
  %conv8 = sext i8 %13 to i32
  %call9 = call i32 @__isspace(i32 %conv8)
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %while.body11, label %while.end13

while.body11:                                     ; preds = %while.cond7
  %14 = load i8*, i8** %s.addr, align 4
  %incdec.ptr12 = getelementptr inbounds i8, i8* %14, i32 1
  store i8* %incdec.ptr12, i8** %s.addr, align 4
  br label %while.cond7

while.end13:                                      ; preds = %while.cond7
  %15 = load i8*, i8** %s.addr, align 4
  %16 = load i8, i8* %15, align 1
  %conv14 = sext i8 %16 to i32
  %cmp15 = icmp eq i32 %conv14, 0
  br i1 %cmp15, label %if.then17, label %if.end19

if.then17:                                        ; preds = %while.end13
  %call18 = call i32 @putchar(i32 10)
  store i32 1, i32* %retval, align 4
  br label %return

if.end19:                                         ; preds = %while.end13
  %17 = load i8*, i8** %s.addr, align 4
  %18 = load i8, i8* %17, align 1
  %conv20 = sext i8 %18 to i32
  %cmp21 = icmp eq i32 %conv20, 44
  br i1 %cmp21, label %if.then23, label %if.end25

if.then23:                                        ; preds = %if.end19
  %19 = load i8*, i8** %s.addr, align 4
  %incdec.ptr24 = getelementptr inbounds i8, i8* %19, i32 1
  store i8* %incdec.ptr24, i8** %s.addr, align 4
  br label %while.body

if.end25:                                         ; preds = %if.end19
  br label %while.end26

while.end26:                                      ; preds = %if.end25, %if.then
  %20 = load i8*, i8** %s.addr, align 4
  %21 = load i8**, i8*** %e.addr, align 4
  store i8* %20, i8** %21, align 4
  %22 = load i8*, i8** %s.addr, align 4
  %call27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i32 0, i32 0), i8* %22)
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %while.end26, %if.then17
  %23 = load i32, i32* %retval, align 4
  ret i32 %23
}

; Function Attrs: noinline nounwind optnone
define internal i32 @__isspace(i32 %_c) #0 {
entry:
  %_c.addr = alloca i32, align 4
  store i32 %_c, i32* %_c.addr, align 4
  %0 = load i32, i32* %_c.addr, align 4
  %cmp = icmp eq i32 %0, 32
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %1 = load i32, i32* %_c.addr, align 4
  %sub = sub i32 %1, 9
  %cmp1 = icmp ult i32 %sub, 5
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %2 = phi i1 [ true, %entry ], [ %cmp1, %lor.rhs ]
  %lor.ext = zext i1 %2 to i32
  ret i32 %lor.ext
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @get_rnge(i8* %s, i8** %e) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca i8*, align 4
  %e.addr = alloca i8**, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %ee = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  store i8** %e, i8*** %e.addr, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %call = call i32 @strtol(i8* %0, i8** %ee, i32 10)
  store i32 %call, i32* %x, align 4
  %1 = load i8*, i8** %ee, align 4
  %2 = load i8*, i8** %s.addr, align 4
  %cmp = icmp ne i8* %1, %2
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i8*, i8** %ee, align 4
  store i8* %3, i8** %s.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %4 = load i8*, i8** %s.addr, align 4
  %5 = load i8, i8* %4, align 1
  %conv = sext i8 %5 to i32
  %call1 = call i32 @__isspace(i32 %conv)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load i8*, i8** %s.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %7 = load i8*, i8** %s.addr, align 4
  %8 = load i8, i8* %7, align 1
  %conv2 = sext i8 %8 to i32
  %cmp3 = icmp ne i32 %conv2, 45
  br i1 %cmp3, label %if.then5, label %if.end6

if.then5:                                         ; preds = %while.end
  %9 = load i8*, i8** %s.addr, align 4
  %10 = load i8**, i8*** %e.addr, align 4
  store i8* %9, i8** %10, align 4
  store i32 0, i32* %retval, align 4
  br label %return

if.end6:                                          ; preds = %while.end
  %11 = load i8*, i8** %s.addr, align 4
  %incdec.ptr7 = getelementptr inbounds i8, i8* %11, i32 1
  store i8* %incdec.ptr7, i8** %s.addr, align 4
  %12 = load i8*, i8** %s.addr, align 4
  %13 = load i8**, i8*** %e.addr, align 4
  %call8 = call i32 @strtol(i8* %12, i8** %13, i32 10)
  store i32 %call8, i32* %y, align 4
  %14 = load i8**, i8*** %e.addr, align 4
  %15 = load i8*, i8** %14, align 4
  %16 = load i8*, i8** %s.addr, align 4
  %cmp9 = icmp ne i8* %15, %16
  br i1 %cmp9, label %if.end12, label %if.then11

if.then11:                                        ; preds = %if.end6
  store i32 0, i32* %retval, align 4
  br label %return

if.end12:                                         ; preds = %if.end6
  %17 = load i32, i32* %x, align 4
  %18 = load i32, i32* %y, align 4
  %call13 = call i32 @add_range(i32 %17, i32 %18)
  store i32 %call13, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end12, %if.then11, %if.then5, %if.then
  %19 = load i32, i32* %retval, align 4
  ret i32 %19
}

declare i32 @strtol(i8* %0, i8** %1, i32 %2) #1

declare i32 @putchar(i32 %0) #1

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @add_range(i32 %x, i32 %y) #0 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  %0 = load i32, i32* %y.addr, align 4
  %1 = load i32, i32* %x.addr, align 4
  %cmp = icmp sle i32 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %2 = load i32, i32* %x.addr, align 4
  %3 = load i32, i32* %y.addr, align 4
  %cmp1 = icmp sle i32 %2, %3
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i32, i32* %x.addr, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %x.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %4)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then
  %5 = load i32, i32* %retval, align 4
  ret i32 %5
}

; Function Attrs: noinline nounwind optnone
define hidden void @add_number(i32 %x) #0 {
entry:
  %x.addr = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  %0 = load i32, i32* %x.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %0)
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %end = alloca i8*, align 4
  store i32 0, i32* %retval, align 4
  %call = call i32 @get_list(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.2, i32 0, i32 0), i8** %end)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call1 = call i32 @puts(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %call2 = call i32 @get_list(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.4, i32 0, i32 0), i8** %end)
  ret i32 0
}

declare i32 @puts(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 @get_list(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.2, i32 0, i32 0), i8** %end)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %call, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
