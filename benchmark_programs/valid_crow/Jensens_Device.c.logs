
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for sum()

; ModuleID = './Jensens_Device.c.bc'
source_filename = "./Jensens_Device.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@i = hidden global i32 0, align 4
@.str = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden double @sum(i32* %i, i32 %lo, i32 %hi, double (...)* %term) #0 {
entry:
  %i.addr = alloca i32*, align 4
  %lo.addr = alloca i32, align 4
  %hi.addr = alloca i32, align 4
  %term.addr = alloca double (...)*, align 4
  %temp = alloca double, align 8
  store i32* %i, i32** %i.addr, align 4
  store i32 %lo, i32* %lo.addr, align 4
  store i32 %hi, i32* %hi.addr, align 4
  store double (...)* %term, double (...)** %term.addr, align 4
  store double 0.000000e+00, double* %temp, align 8
  %0 = load i32, i32* %lo.addr, align 4
  %1 = load i32*, i32** %i.addr, align 4
  store i32 %0, i32* %1, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32*, i32** %i.addr, align 4
  %3 = load i32, i32* %2, align 4
  %4 = load i32, i32* %hi.addr, align 4
  %cmp = icmp sle i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load double (...)*, double (...)** %term.addr, align 4
  %callee.knr.cast = bitcast double (...)* %5 to double ()*
  %call = call double %callee.knr.cast()
  %6 = load double, double* %temp, align 8
  %add = fadd double %6, %call
  store double %add, double* %temp, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32*, i32** %i.addr, align 4
  %8 = load i32, i32* %7, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %7, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %9 = load double, double* %temp, align 8
  ret double %9
}

; Function Attrs: noinline nounwind optnone
define hidden double @term_func() #0 {
entry:
  %0 = load i32, i32* @i, align 4
  %conv = sitofp i32 %0 to double
  %div = fdiv double 1.000000e+00, %conv
  ret double %div
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call double @sum(i32* @i, i32 1, i32 100, double (...)* bitcast (double ()* @term_func to double (...)*))
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), double %call)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %lo.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %hi.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sle i32 %3, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %7, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %8, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for sum()

; entering Souper's runOnFunction() for term_func()

; ModuleID = './Jensens_Device.c.bc'
source_filename = "./Jensens_Device.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@i = hidden global i32 0, align 4
@.str = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden double @sum(i32* %i, i32 %lo, i32 %hi, double (...)* %term) #0 {
entry:
  %i.addr = alloca i32*, align 4
  %lo.addr = alloca i32, align 4
  %hi.addr = alloca i32, align 4
  %term.addr = alloca double (...)*, align 4
  %temp = alloca double, align 8
  store i32* %i, i32** %i.addr, align 4
  store i32 %lo, i32* %lo.addr, align 4
  store i32 %hi, i32* %hi.addr, align 4
  store double (...)* %term, double (...)** %term.addr, align 4
  store double 0.000000e+00, double* %temp, align 8
  %0 = load i32, i32* %lo.addr, align 4
  %1 = load i32*, i32** %i.addr, align 4
  store i32 %0, i32* %1, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32*, i32** %i.addr, align 4
  %3 = load i32, i32* %2, align 4
  %4 = load i32, i32* %hi.addr, align 4
  %cmp = icmp sle i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load double (...)*, double (...)** %term.addr, align 4
  %callee.knr.cast = bitcast double (...)* %5 to double ()*
  %call = call double %callee.knr.cast()
  %6 = load double, double* %temp, align 8
  %add = fadd double %6, %call
  store double %add, double* %temp, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32*, i32** %i.addr, align 4
  %8 = load i32, i32* %7, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %7, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %9 = load double, double* %temp, align 8
  ret double %9
}

; Function Attrs: noinline nounwind optnone
define hidden double @term_func() #0 {
entry:
  %0 = load i32, i32* @i, align 4
  %conv = sitofp i32 %0 to double
  %div = fdiv double 1.000000e+00, %conv
  ret double %div
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call double @sum(i32* @i, i32 1, i32 100, double (...)* bitcast (double ()* @term_func to double (...)*))
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), double %call)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* @i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for term_func()

; entering Souper's runOnFunction() for main()

; ModuleID = './Jensens_Device.c.bc'
source_filename = "./Jensens_Device.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@i = hidden global i32 0, align 4
@.str = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden double @sum(i32* %i, i32 %lo, i32 %hi, double (...)* %term) #0 {
entry:
  %i.addr = alloca i32*, align 4
  %lo.addr = alloca i32, align 4
  %hi.addr = alloca i32, align 4
  %term.addr = alloca double (...)*, align 4
  %temp = alloca double, align 8
  store i32* %i, i32** %i.addr, align 4
  store i32 %lo, i32* %lo.addr, align 4
  store i32 %hi, i32* %hi.addr, align 4
  store double (...)* %term, double (...)** %term.addr, align 4
  store double 0.000000e+00, double* %temp, align 8
  %0 = load i32, i32* %lo.addr, align 4
  %1 = load i32*, i32** %i.addr, align 4
  store i32 %0, i32* %1, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32*, i32** %i.addr, align 4
  %3 = load i32, i32* %2, align 4
  %4 = load i32, i32* %hi.addr, align 4
  %cmp = icmp sle i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load double (...)*, double (...)** %term.addr, align 4
  %callee.knr.cast = bitcast double (...)* %5 to double ()*
  %call = call double %callee.knr.cast()
  %6 = load double, double* %temp, align 8
  %add = fadd double %6, %call
  store double %add, double* %temp, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32*, i32** %i.addr, align 4
  %8 = load i32, i32* %7, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %7, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %9 = load double, double* %temp, align 8
  ret double %9
}

; Function Attrs: noinline nounwind optnone
define hidden double @term_func() #0 {
entry:
  %0 = load i32, i32* @i, align 4
  %conv = sitofp i32 %0 to double
  %div = fdiv double 1.000000e+00, %conv
  ret double %div
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call double @sum(i32* @i, i32 1, i32 100, double (...)* bitcast (double ()* @term_func to double (...)*))
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), double %call)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
