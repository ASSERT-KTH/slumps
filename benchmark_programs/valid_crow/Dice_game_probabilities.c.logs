
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for ipow()

; ModuleID = './Dice_game_probabilities.c.bc'
source_filename = "./Dice_game_probabilities.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [8 x i8] c"%1.16f\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i64 @ipow(i32 %x, i32 %y) #0 {
entry:
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %result = alloca i64, align 8
  %i = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i64 1, i64* %result, align 8
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %y.addr, align 4
  %cmp = icmp ule i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %x.addr, align 4
  %conv = zext i32 %2 to i64
  %3 = load i64, i64* %result, align 8
  %mul = mul i64 %3, %conv
  store i64 %mul, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4
  %inc = add i32 %4, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %5 = load i64, i64* %result, align 8
  ret i64 %5
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @min(i32 %x, i32 %y) #0 {
entry:
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  %0 = load i32, i32* %x.addr, align 4
  %1 = load i32, i32* %y.addr, align 4
  %cmp = icmp ult i32 %0, %1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load i32, i32* %x.addr, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  %3 = load i32, i32* %y.addr, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ %3, %cond.false ]
  ret i32 %cond
}

; Function Attrs: noinline nounwind optnone
define hidden void @throw_die(i32 %n_sides, i32 %n_dice, i32 %s, i32* %counts) #0 {
entry:
  %n_sides.addr = alloca i32, align 4
  %n_dice.addr = alloca i32, align 4
  %s.addr = alloca i32, align 4
  %counts.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  store i32 %n_sides, i32* %n_sides.addr, align 4
  store i32 %n_dice, i32* %n_dice.addr, align 4
  store i32 %s, i32* %s.addr, align 4
  store i32* %counts, i32** %counts.addr, align 4
  %0 = load i32, i32* %n_dice.addr, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32*, i32** %counts.addr, align 4
  %2 = load i32, i32* %s.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 %2
  %3 = load i32, i32* %arrayidx, align 4
  %inc = add i32 %3, 1
  store i32 %inc, i32* %arrayidx, align 4
  br label %for.end

if.end:                                           ; preds = %entry
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %n_sides.addr, align 4
  %add = add i32 %5, 1
  %cmp1 = icmp ult i32 %4, %add
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %n_sides.addr, align 4
  %7 = load i32, i32* %n_dice.addr, align 4
  %sub = sub i32 %7, 1
  %8 = load i32, i32* %s.addr, align 4
  %9 = load i32, i32* %i, align 4
  %add2 = add i32 %8, %9
  %10 = load i32*, i32** %counts.addr, align 4
  call void @throw_die(i32 %6, i32 %sub, i32 %add2, i32* %10)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc3 = add i32 %11, 1
  store i32 %inc3, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double @beating_probability(i32 %n_sides1, i32 %n_dice1, i32 %n_sides2, i32 %n_dice2) #0 {
entry:
  %n_sides1.addr = alloca i32, align 4
  %n_dice1.addr = alloca i32, align 4
  %n_sides2.addr = alloca i32, align 4
  %n_dice2.addr = alloca i32, align 4
  %len1 = alloca i32, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %i = alloca i32, align 4
  %len2 = alloca i32, align 4
  %__vla_expr1 = alloca i32, align 4
  %j = alloca i32, align 4
  %p12 = alloca double, align 8
  %tot = alloca double, align 8
  %i13 = alloca i32, align 4
  %j18 = alloca i32, align 4
  store i32 %n_sides1, i32* %n_sides1.addr, align 4
  store i32 %n_dice1, i32* %n_dice1.addr, align 4
  store i32 %n_sides2, i32* %n_sides2.addr, align 4
  store i32 %n_dice2, i32* %n_dice2.addr, align 4
  %0 = load i32, i32* %n_sides1.addr, align 4
  %add = add i32 %0, 1
  %1 = load i32, i32* %n_dice1.addr, align 4
  %mul = mul i32 %add, %1
  store i32 %mul, i32* %len1, align 4
  %2 = load i32, i32* %len1, align 4
  %3 = call i8* @llvm.stacksave()
  store i8* %3, i8** %saved_stack, align 4
  %vla = alloca i32, i32 %2, align 16
  store i32 %2, i32* %__vla_expr0, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %len1, align 4
  %cmp = icmp ult i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %vla, i32 %6
  store i32 0, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %8 = load i32, i32* %n_sides1.addr, align 4
  %9 = load i32, i32* %n_dice1.addr, align 4
  call void @throw_die(i32 %8, i32 %9, i32 0, i32* %vla)
  %10 = load i32, i32* %n_sides2.addr, align 4
  %add1 = add i32 %10, 1
  %11 = load i32, i32* %n_dice2.addr, align 4
  %mul2 = mul i32 %add1, %11
  store i32 %mul2, i32* %len2, align 4
  %12 = load i32, i32* %len2, align 4
  %vla3 = alloca i32, i32 %12, align 16
  store i32 %12, i32* %__vla_expr1, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc8, %for.end
  %13 = load i32, i32* %j, align 4
  %14 = load i32, i32* %len2, align 4
  %cmp5 = icmp ult i32 %13, %14
  br i1 %cmp5, label %for.body6, label %for.end10

for.body6:                                        ; preds = %for.cond4
  %15 = load i32, i32* %j, align 4
  %arrayidx7 = getelementptr inbounds i32, i32* %vla3, i32 %15
  store i32 0, i32* %arrayidx7, align 4
  br label %for.inc8

for.inc8:                                         ; preds = %for.body6
  %16 = load i32, i32* %j, align 4
  %inc9 = add i32 %16, 1
  store i32 %inc9, i32* %j, align 4
  br label %for.cond4

for.end10:                                        ; preds = %for.cond4
  %17 = load i32, i32* %n_sides2.addr, align 4
  %18 = load i32, i32* %n_dice2.addr, align 4
  call void @throw_die(i32 %17, i32 %18, i32 0, i32* %vla3)
  %19 = load i32, i32* %n_sides1.addr, align 4
  %20 = load i32, i32* %n_dice1.addr, align 4
  %call = call i64 @ipow(i32 %19, i32 %20)
  %21 = load i32, i32* %n_sides2.addr, align 4
  %22 = load i32, i32* %n_dice2.addr, align 4
  %call11 = call i64 @ipow(i32 %21, i32 %22)
  %mul12 = mul i64 %call, %call11
  %conv = uitofp i64 %mul12 to double
  store double %conv, double* %p12, align 8
  store double 0.000000e+00, double* %tot, align 8
  store i32 0, i32* %i13, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc33, %for.end10
  %23 = load i32, i32* %i13, align 4
  %24 = load i32, i32* %len1, align 4
  %cmp15 = icmp ult i32 %23, %24
  br i1 %cmp15, label %for.body17, label %for.end35

for.body17:                                       ; preds = %for.cond14
  store i32 0, i32* %j18, align 4
  br label %for.cond19

for.cond19:                                       ; preds = %for.inc30, %for.body17
  %25 = load i32, i32* %j18, align 4
  %26 = load i32, i32* %i13, align 4
  %27 = load i32, i32* %len2, align 4
  %call20 = call i32 @min(i32 %26, i32 %27)
  %cmp21 = icmp ult i32 %25, %call20
  br i1 %cmp21, label %for.body23, label %for.end32

for.body23:                                       ; preds = %for.cond19
  %28 = load i32, i32* %i13, align 4
  %arrayidx24 = getelementptr inbounds i32, i32* %vla, i32 %28
  %29 = load i32, i32* %arrayidx24, align 4
  %conv25 = uitofp i32 %29 to double
  %30 = load i32, i32* %j18, align 4
  %arrayidx26 = getelementptr inbounds i32, i32* %vla3, i32 %30
  %31 = load i32, i32* %arrayidx26, align 4
  %conv27 = uitofp i32 %31 to double
  %mul28 = fmul double %conv25, %conv27
  %32 = load double, double* %p12, align 8
  %div = fdiv double %mul28, %32
  %33 = load double, double* %tot, align 8
  %add29 = fadd double %33, %div
  store double %add29, double* %tot, align 8
  br label %for.inc30

for.inc30:                                        ; preds = %for.body23
  %34 = load i32, i32* %j18, align 4
  %inc31 = add i32 %34, 1
  store i32 %inc31, i32* %j18, align 4
  br label %for.cond19

for.end32:                                        ; preds = %for.cond19
  br label %for.inc33

for.inc33:                                        ; preds = %for.end32
  %35 = load i32, i32* %i13, align 4
  %inc34 = add i32 %35, 1
  store i32 %inc34, i32* %i13, align 4
  br label %for.cond14

for.end35:                                        ; preds = %for.cond14
  %36 = load double, double* %tot, align 8
  %37 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %37)
  ret double %36
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call double @beating_probability(i32 4, i32 9, i32 6, i32 6)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), double %call)
  %call2 = call double @beating_probability(i32 10, i32 5, i32 7, i32 6)
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), double %call2)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %y.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ule i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ule %0, %1
infer %2

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %x.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = zext i32 %2 to i64
; Looking for a replacement for:
%0:i32 = var
%1:i64 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i64, i64* %result, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul i64 %3, %conv
; Looking for a replacement for:
%0:i64 = var
%1:i32 = var
%2:i64 = zext %1
%3:i64 = mul %0, %2
infer %3

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add i32 %4, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i64, i64* %result, align 8
; Looking for a replacement for:
%0:i64 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = ule %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i64 = zext %0
infer %1


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 4294967295
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i64 = var
infer %0


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i32 = var
%2:i64 = zext %1
%3:i64 = mul %0, %2
infer %3


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -4180293723952063232
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i64 = zext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for ipow()

; entering Souper's runOnFunction() for min()

; ModuleID = './Dice_game_probabilities.c.bc'
source_filename = "./Dice_game_probabilities.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [8 x i8] c"%1.16f\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i64 @ipow(i32 %x, i32 %y) #0 {
entry:
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %result = alloca i64, align 8
  %i = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i64 1, i64* %result, align 8
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %y.addr, align 4
  %cmp = icmp ule i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %x.addr, align 4
  %conv = zext i32 %2 to i64
  %3 = load i64, i64* %result, align 8
  %mul = mul i64 %3, %conv
  store i64 %mul, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4
  %inc = add i32 %4, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %5 = load i64, i64* %result, align 8
  ret i64 %5
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @min(i32 %x, i32 %y) #0 {
entry:
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  %0 = load i32, i32* %x.addr, align 4
  %1 = load i32, i32* %y.addr, align 4
  %cmp = icmp ult i32 %0, %1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load i32, i32* %x.addr, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  %3 = load i32, i32* %y.addr, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ %3, %cond.false ]
  ret i32 %cond
}

; Function Attrs: noinline nounwind optnone
define hidden void @throw_die(i32 %n_sides, i32 %n_dice, i32 %s, i32* %counts) #0 {
entry:
  %n_sides.addr = alloca i32, align 4
  %n_dice.addr = alloca i32, align 4
  %s.addr = alloca i32, align 4
  %counts.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  store i32 %n_sides, i32* %n_sides.addr, align 4
  store i32 %n_dice, i32* %n_dice.addr, align 4
  store i32 %s, i32* %s.addr, align 4
  store i32* %counts, i32** %counts.addr, align 4
  %0 = load i32, i32* %n_dice.addr, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32*, i32** %counts.addr, align 4
  %2 = load i32, i32* %s.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 %2
  %3 = load i32, i32* %arrayidx, align 4
  %inc = add i32 %3, 1
  store i32 %inc, i32* %arrayidx, align 4
  br label %for.end

if.end:                                           ; preds = %entry
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %n_sides.addr, align 4
  %add = add i32 %5, 1
  %cmp1 = icmp ult i32 %4, %add
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %n_sides.addr, align 4
  %7 = load i32, i32* %n_dice.addr, align 4
  %sub = sub i32 %7, 1
  %8 = load i32, i32* %s.addr, align 4
  %9 = load i32, i32* %i, align 4
  %add2 = add i32 %8, %9
  %10 = load i32*, i32** %counts.addr, align 4
  call void @throw_die(i32 %6, i32 %sub, i32 %add2, i32* %10)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc3 = add i32 %11, 1
  store i32 %inc3, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double @beating_probability(i32 %n_sides1, i32 %n_dice1, i32 %n_sides2, i32 %n_dice2) #0 {
entry:
  %n_sides1.addr = alloca i32, align 4
  %n_dice1.addr = alloca i32, align 4
  %n_sides2.addr = alloca i32, align 4
  %n_dice2.addr = alloca i32, align 4
  %len1 = alloca i32, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %i = alloca i32, align 4
  %len2 = alloca i32, align 4
  %__vla_expr1 = alloca i32, align 4
  %j = alloca i32, align 4
  %p12 = alloca double, align 8
  %tot = alloca double, align 8
  %i13 = alloca i32, align 4
  %j18 = alloca i32, align 4
  store i32 %n_sides1, i32* %n_sides1.addr, align 4
  store i32 %n_dice1, i32* %n_dice1.addr, align 4
  store i32 %n_sides2, i32* %n_sides2.addr, align 4
  store i32 %n_dice2, i32* %n_dice2.addr, align 4
  %0 = load i32, i32* %n_sides1.addr, align 4
  %add = add i32 %0, 1
  %1 = load i32, i32* %n_dice1.addr, align 4
  %mul = mul i32 %add, %1
  store i32 %mul, i32* %len1, align 4
  %2 = load i32, i32* %len1, align 4
  %3 = call i8* @llvm.stacksave()
  store i8* %3, i8** %saved_stack, align 4
  %vla = alloca i32, i32 %2, align 16
  store i32 %2, i32* %__vla_expr0, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %len1, align 4
  %cmp = icmp ult i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %vla, i32 %6
  store i32 0, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %8 = load i32, i32* %n_sides1.addr, align 4
  %9 = load i32, i32* %n_dice1.addr, align 4
  call void @throw_die(i32 %8, i32 %9, i32 0, i32* %vla)
  %10 = load i32, i32* %n_sides2.addr, align 4
  %add1 = add i32 %10, 1
  %11 = load i32, i32* %n_dice2.addr, align 4
  %mul2 = mul i32 %add1, %11
  store i32 %mul2, i32* %len2, align 4
  %12 = load i32, i32* %len2, align 4
  %vla3 = alloca i32, i32 %12, align 16
  store i32 %12, i32* %__vla_expr1, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc8, %for.end
  %13 = load i32, i32* %j, align 4
  %14 = load i32, i32* %len2, align 4
  %cmp5 = icmp ult i32 %13, %14
  br i1 %cmp5, label %for.body6, label %for.end10

for.body6:                                        ; preds = %for.cond4
  %15 = load i32, i32* %j, align 4
  %arrayidx7 = getelementptr inbounds i32, i32* %vla3, i32 %15
  store i32 0, i32* %arrayidx7, align 4
  br label %for.inc8

for.inc8:                                         ; preds = %for.body6
  %16 = load i32, i32* %j, align 4
  %inc9 = add i32 %16, 1
  store i32 %inc9, i32* %j, align 4
  br label %for.cond4

for.end10:                                        ; preds = %for.cond4
  %17 = load i32, i32* %n_sides2.addr, align 4
  %18 = load i32, i32* %n_dice2.addr, align 4
  call void @throw_die(i32 %17, i32 %18, i32 0, i32* %vla3)
  %19 = load i32, i32* %n_sides1.addr, align 4
  %20 = load i32, i32* %n_dice1.addr, align 4
  %call = call i64 @ipow(i32 %19, i32 %20)
  %21 = load i32, i32* %n_sides2.addr, align 4
  %22 = load i32, i32* %n_dice2.addr, align 4
  %call11 = call i64 @ipow(i32 %21, i32 %22)
  %mul12 = mul i64 %call, %call11
  %conv = uitofp i64 %mul12 to double
  store double %conv, double* %p12, align 8
  store double 0.000000e+00, double* %tot, align 8
  store i32 0, i32* %i13, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc33, %for.end10
  %23 = load i32, i32* %i13, align 4
  %24 = load i32, i32* %len1, align 4
  %cmp15 = icmp ult i32 %23, %24
  br i1 %cmp15, label %for.body17, label %for.end35

for.body17:                                       ; preds = %for.cond14
  store i32 0, i32* %j18, align 4
  br label %for.cond19

for.cond19:                                       ; preds = %for.inc30, %for.body17
  %25 = load i32, i32* %j18, align 4
  %26 = load i32, i32* %i13, align 4
  %27 = load i32, i32* %len2, align 4
  %call20 = call i32 @min(i32 %26, i32 %27)
  %cmp21 = icmp ult i32 %25, %call20
  br i1 %cmp21, label %for.body23, label %for.end32

for.body23:                                       ; preds = %for.cond19
  %28 = load i32, i32* %i13, align 4
  %arrayidx24 = getelementptr inbounds i32, i32* %vla, i32 %28
  %29 = load i32, i32* %arrayidx24, align 4
  %conv25 = uitofp i32 %29 to double
  %30 = load i32, i32* %j18, align 4
  %arrayidx26 = getelementptr inbounds i32, i32* %vla3, i32 %30
  %31 = load i32, i32* %arrayidx26, align 4
  %conv27 = uitofp i32 %31 to double
  %mul28 = fmul double %conv25, %conv27
  %32 = load double, double* %p12, align 8
  %div = fdiv double %mul28, %32
  %33 = load double, double* %tot, align 8
  %add29 = fadd double %33, %div
  store double %add29, double* %tot, align 8
  br label %for.inc30

for.inc30:                                        ; preds = %for.body23
  %34 = load i32, i32* %j18, align 4
  %inc31 = add i32 %34, 1
  store i32 %inc31, i32* %j18, align 4
  br label %for.cond19

for.end32:                                        ; preds = %for.cond19
  br label %for.inc33

for.inc33:                                        ; preds = %for.end32
  %35 = load i32, i32* %i13, align 4
  %inc34 = add i32 %35, 1
  store i32 %inc34, i32* %i13, align 4
  br label %for.cond14

for.end35:                                        ; preds = %for.cond14
  %36 = load double, double* %tot, align 8
  %37 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %37)
  ret double %36
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call double @beating_probability(i32 4, i32 9, i32 6, i32 6)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), double %call)
  %call2 = call double @beating_probability(i32 10, i32 5, i32 7, i32 6)
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), double %call2)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %x.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %y.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ult i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %x.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %y.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cond = phi i32 [ %2, %cond.true ], [ %3, %cond.false ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = phi %0, %1, %2
infer %3
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = var
%3:i32 = phi %0, %1, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for min()

; entering Souper's runOnFunction() for throw_die()

; ModuleID = './Dice_game_probabilities.c.bc'
source_filename = "./Dice_game_probabilities.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [8 x i8] c"%1.16f\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i64 @ipow(i32 %x, i32 %y) #0 {
entry:
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %result = alloca i64, align 8
  %i = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i64 1, i64* %result, align 8
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %y.addr, align 4
  %cmp = icmp ule i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %x.addr, align 4
  %conv = zext i32 %2 to i64
  %3 = load i64, i64* %result, align 8
  %mul = mul i64 %3, %conv
  store i64 %mul, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4
  %inc = add i32 %4, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %5 = load i64, i64* %result, align 8
  ret i64 %5
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @min(i32 %x, i32 %y) #0 {
entry:
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  %0 = load i32, i32* %x.addr, align 4
  %1 = load i32, i32* %y.addr, align 4
  %cmp = icmp ult i32 %0, %1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load i32, i32* %x.addr, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  %3 = load i32, i32* %y.addr, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ %3, %cond.false ]
  ret i32 %cond
}

; Function Attrs: noinline nounwind optnone
define hidden void @throw_die(i32 %n_sides, i32 %n_dice, i32 %s, i32* %counts) #0 {
entry:
  %n_sides.addr = alloca i32, align 4
  %n_dice.addr = alloca i32, align 4
  %s.addr = alloca i32, align 4
  %counts.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  store i32 %n_sides, i32* %n_sides.addr, align 4
  store i32 %n_dice, i32* %n_dice.addr, align 4
  store i32 %s, i32* %s.addr, align 4
  store i32* %counts, i32** %counts.addr, align 4
  %0 = load i32, i32* %n_dice.addr, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32*, i32** %counts.addr, align 4
  %2 = load i32, i32* %s.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 %2
  %3 = load i32, i32* %arrayidx, align 4
  %inc = add i32 %3, 1
  store i32 %inc, i32* %arrayidx, align 4
  br label %for.end

if.end:                                           ; preds = %entry
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %n_sides.addr, align 4
  %add = add i32 %5, 1
  %cmp1 = icmp ult i32 %4, %add
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %n_sides.addr, align 4
  %7 = load i32, i32* %n_dice.addr, align 4
  %sub = sub i32 %7, 1
  %8 = load i32, i32* %s.addr, align 4
  %9 = load i32, i32* %i, align 4
  %add2 = add i32 %8, %9
  %10 = load i32*, i32** %counts.addr, align 4
  call void @throw_die(i32 %6, i32 %sub, i32 %add2, i32* %10)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc3 = add i32 %11, 1
  store i32 %inc3, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double @beating_probability(i32 %n_sides1, i32 %n_dice1, i32 %n_sides2, i32 %n_dice2) #0 {
entry:
  %n_sides1.addr = alloca i32, align 4
  %n_dice1.addr = alloca i32, align 4
  %n_sides2.addr = alloca i32, align 4
  %n_dice2.addr = alloca i32, align 4
  %len1 = alloca i32, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %i = alloca i32, align 4
  %len2 = alloca i32, align 4
  %__vla_expr1 = alloca i32, align 4
  %j = alloca i32, align 4
  %p12 = alloca double, align 8
  %tot = alloca double, align 8
  %i13 = alloca i32, align 4
  %j18 = alloca i32, align 4
  store i32 %n_sides1, i32* %n_sides1.addr, align 4
  store i32 %n_dice1, i32* %n_dice1.addr, align 4
  store i32 %n_sides2, i32* %n_sides2.addr, align 4
  store i32 %n_dice2, i32* %n_dice2.addr, align 4
  %0 = load i32, i32* %n_sides1.addr, align 4
  %add = add i32 %0, 1
  %1 = load i32, i32* %n_dice1.addr, align 4
  %mul = mul i32 %add, %1
  store i32 %mul, i32* %len1, align 4
  %2 = load i32, i32* %len1, align 4
  %3 = call i8* @llvm.stacksave()
  store i8* %3, i8** %saved_stack, align 4
  %vla = alloca i32, i32 %2, align 16
  store i32 %2, i32* %__vla_expr0, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %len1, align 4
  %cmp = icmp ult i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %vla, i32 %6
  store i32 0, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %8 = load i32, i32* %n_sides1.addr, align 4
  %9 = load i32, i32* %n_dice1.addr, align 4
  call void @throw_die(i32 %8, i32 %9, i32 0, i32* %vla)
  %10 = load i32, i32* %n_sides2.addr, align 4
  %add1 = add i32 %10, 1
  %11 = load i32, i32* %n_dice2.addr, align 4
  %mul2 = mul i32 %add1, %11
  store i32 %mul2, i32* %len2, align 4
  %12 = load i32, i32* %len2, align 4
  %vla3 = alloca i32, i32 %12, align 16
  store i32 %12, i32* %__vla_expr1, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc8, %for.end
  %13 = load i32, i32* %j, align 4
  %14 = load i32, i32* %len2, align 4
  %cmp5 = icmp ult i32 %13, %14
  br i1 %cmp5, label %for.body6, label %for.end10

for.body6:                                        ; preds = %for.cond4
  %15 = load i32, i32* %j, align 4
  %arrayidx7 = getelementptr inbounds i32, i32* %vla3, i32 %15
  store i32 0, i32* %arrayidx7, align 4
  br label %for.inc8

for.inc8:                                         ; preds = %for.body6
  %16 = load i32, i32* %j, align 4
  %inc9 = add i32 %16, 1
  store i32 %inc9, i32* %j, align 4
  br label %for.cond4

for.end10:                                        ; preds = %for.cond4
  %17 = load i32, i32* %n_sides2.addr, align 4
  %18 = load i32, i32* %n_dice2.addr, align 4
  call void @throw_die(i32 %17, i32 %18, i32 0, i32* %vla3)
  %19 = load i32, i32* %n_sides1.addr, align 4
  %20 = load i32, i32* %n_dice1.addr, align 4
  %call = call i64 @ipow(i32 %19, i32 %20)
  %21 = load i32, i32* %n_sides2.addr, align 4
  %22 = load i32, i32* %n_dice2.addr, align 4
  %call11 = call i64 @ipow(i32 %21, i32 %22)
  %mul12 = mul i64 %call, %call11
  %conv = uitofp i64 %mul12 to double
  store double %conv, double* %p12, align 8
  store double 0.000000e+00, double* %tot, align 8
  store i32 0, i32* %i13, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc33, %for.end10
  %23 = load i32, i32* %i13, align 4
  %24 = load i32, i32* %len1, align 4
  %cmp15 = icmp ult i32 %23, %24
  br i1 %cmp15, label %for.body17, label %for.end35

for.body17:                                       ; preds = %for.cond14
  store i32 0, i32* %j18, align 4
  br label %for.cond19

for.cond19:                                       ; preds = %for.inc30, %for.body17
  %25 = load i32, i32* %j18, align 4
  %26 = load i32, i32* %i13, align 4
  %27 = load i32, i32* %len2, align 4
  %call20 = call i32 @min(i32 %26, i32 %27)
  %cmp21 = icmp ult i32 %25, %call20
  br i1 %cmp21, label %for.body23, label %for.end32

for.body23:                                       ; preds = %for.cond19
  %28 = load i32, i32* %i13, align 4
  %arrayidx24 = getelementptr inbounds i32, i32* %vla, i32 %28
  %29 = load i32, i32* %arrayidx24, align 4
  %conv25 = uitofp i32 %29 to double
  %30 = load i32, i32* %j18, align 4
  %arrayidx26 = getelementptr inbounds i32, i32* %vla3, i32 %30
  %31 = load i32, i32* %arrayidx26, align 4
  %conv27 = uitofp i32 %31 to double
  %mul28 = fmul double %conv25, %conv27
  %32 = load double, double* %p12, align 8
  %div = fdiv double %mul28, %32
  %33 = load double, double* %tot, align 8
  %add29 = fadd double %33, %div
  store double %add29, double* %tot, align 8
  br label %for.inc30

for.inc30:                                        ; preds = %for.body23
  %34 = load i32, i32* %j18, align 4
  %inc31 = add i32 %34, 1
  store i32 %inc31, i32* %j18, align 4
  br label %for.cond19

for.end32:                                        ; preds = %for.cond19
  br label %for.inc33

for.inc33:                                        ; preds = %for.end32
  %35 = load i32, i32* %i13, align 4
  %inc34 = add i32 %35, 1
  store i32 %inc34, i32* %i13, align 4
  br label %for.cond14

for.end35:                                        ; preds = %for.cond14
  %36 = load double, double* %tot, align 8
  %37 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %37)
  ret double %36
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call double @beating_probability(i32 4, i32 9, i32 6, i32 6)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), double %call)
  %call2 = call double @beating_probability(i32 10, i32 5, i32 7, i32 6)
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), double %call2)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %n_dice.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %0, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %s.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add i32 %3, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %n_sides.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add i32 %5, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp1 = icmp ult i32 %4, %add
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add 1:i32, %1
%3:i1 = ult %0, %2
infer %3

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %n_sides.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %n_dice.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub i32 %7, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sub %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %s.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add2 = add i32 %8, %9
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc3 = add i32 %11, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add 1:i32, %1
%3:i1 = ult %0, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sub %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for throw_die()

; entering Souper's runOnFunction() for beating_probability()

; ModuleID = './Dice_game_probabilities.c.bc'
source_filename = "./Dice_game_probabilities.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [8 x i8] c"%1.16f\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i64 @ipow(i32 %x, i32 %y) #0 {
entry:
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %result = alloca i64, align 8
  %i = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i64 1, i64* %result, align 8
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %y.addr, align 4
  %cmp = icmp ule i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %x.addr, align 4
  %conv = zext i32 %2 to i64
  %3 = load i64, i64* %result, align 8
  %mul = mul i64 %3, %conv
  store i64 %mul, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4
  %inc = add i32 %4, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %5 = load i64, i64* %result, align 8
  ret i64 %5
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @min(i32 %x, i32 %y) #0 {
entry:
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  %0 = load i32, i32* %x.addr, align 4
  %1 = load i32, i32* %y.addr, align 4
  %cmp = icmp ult i32 %0, %1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load i32, i32* %x.addr, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  %3 = load i32, i32* %y.addr, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ %3, %cond.false ]
  ret i32 %cond
}

; Function Attrs: noinline nounwind optnone
define hidden void @throw_die(i32 %n_sides, i32 %n_dice, i32 %s, i32* %counts) #0 {
entry:
  %n_sides.addr = alloca i32, align 4
  %n_dice.addr = alloca i32, align 4
  %s.addr = alloca i32, align 4
  %counts.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  store i32 %n_sides, i32* %n_sides.addr, align 4
  store i32 %n_dice, i32* %n_dice.addr, align 4
  store i32 %s, i32* %s.addr, align 4
  store i32* %counts, i32** %counts.addr, align 4
  %0 = load i32, i32* %n_dice.addr, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32*, i32** %counts.addr, align 4
  %2 = load i32, i32* %s.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 %2
  %3 = load i32, i32* %arrayidx, align 4
  %inc = add i32 %3, 1
  store i32 %inc, i32* %arrayidx, align 4
  br label %for.end

if.end:                                           ; preds = %entry
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %n_sides.addr, align 4
  %add = add i32 %5, 1
  %cmp1 = icmp ult i32 %4, %add
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %n_sides.addr, align 4
  %7 = load i32, i32* %n_dice.addr, align 4
  %sub = sub i32 %7, 1
  %8 = load i32, i32* %s.addr, align 4
  %9 = load i32, i32* %i, align 4
  %add2 = add i32 %8, %9
  %10 = load i32*, i32** %counts.addr, align 4
  call void @throw_die(i32 %6, i32 %sub, i32 %add2, i32* %10)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc3 = add i32 %11, 1
  store i32 %inc3, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double @beating_probability(i32 %n_sides1, i32 %n_dice1, i32 %n_sides2, i32 %n_dice2) #0 {
entry:
  %n_sides1.addr = alloca i32, align 4
  %n_dice1.addr = alloca i32, align 4
  %n_sides2.addr = alloca i32, align 4
  %n_dice2.addr = alloca i32, align 4
  %len1 = alloca i32, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %i = alloca i32, align 4
  %len2 = alloca i32, align 4
  %__vla_expr1 = alloca i32, align 4
  %j = alloca i32, align 4
  %p12 = alloca double, align 8
  %tot = alloca double, align 8
  %i13 = alloca i32, align 4
  %j18 = alloca i32, align 4
  store i32 %n_sides1, i32* %n_sides1.addr, align 4
  store i32 %n_dice1, i32* %n_dice1.addr, align 4
  store i32 %n_sides2, i32* %n_sides2.addr, align 4
  store i32 %n_dice2, i32* %n_dice2.addr, align 4
  %0 = load i32, i32* %n_sides1.addr, align 4
  %add = add i32 %0, 1
  %1 = load i32, i32* %n_dice1.addr, align 4
  %mul = mul i32 %add, %1
  store i32 %mul, i32* %len1, align 4
  %2 = load i32, i32* %len1, align 4
  %3 = call i8* @llvm.stacksave()
  store i8* %3, i8** %saved_stack, align 4
  %vla = alloca i32, i32 %2, align 16
  store i32 %2, i32* %__vla_expr0, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %len1, align 4
  %cmp = icmp ult i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %vla, i32 %6
  store i32 0, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %8 = load i32, i32* %n_sides1.addr, align 4
  %9 = load i32, i32* %n_dice1.addr, align 4
  call void @throw_die(i32 %8, i32 %9, i32 0, i32* %vla)
  %10 = load i32, i32* %n_sides2.addr, align 4
  %add1 = add i32 %10, 1
  %11 = load i32, i32* %n_dice2.addr, align 4
  %mul2 = mul i32 %add1, %11
  store i32 %mul2, i32* %len2, align 4
  %12 = load i32, i32* %len2, align 4
  %vla3 = alloca i32, i32 %12, align 16
  store i32 %12, i32* %__vla_expr1, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc8, %for.end
  %13 = load i32, i32* %j, align 4
  %14 = load i32, i32* %len2, align 4
  %cmp5 = icmp ult i32 %13, %14
  br i1 %cmp5, label %for.body6, label %for.end10

for.body6:                                        ; preds = %for.cond4
  %15 = load i32, i32* %j, align 4
  %arrayidx7 = getelementptr inbounds i32, i32* %vla3, i32 %15
  store i32 0, i32* %arrayidx7, align 4
  br label %for.inc8

for.inc8:                                         ; preds = %for.body6
  %16 = load i32, i32* %j, align 4
  %inc9 = add i32 %16, 1
  store i32 %inc9, i32* %j, align 4
  br label %for.cond4

for.end10:                                        ; preds = %for.cond4
  %17 = load i32, i32* %n_sides2.addr, align 4
  %18 = load i32, i32* %n_dice2.addr, align 4
  call void @throw_die(i32 %17, i32 %18, i32 0, i32* %vla3)
  %19 = load i32, i32* %n_sides1.addr, align 4
  %20 = load i32, i32* %n_dice1.addr, align 4
  %call = call i64 @ipow(i32 %19, i32 %20)
  %21 = load i32, i32* %n_sides2.addr, align 4
  %22 = load i32, i32* %n_dice2.addr, align 4
  %call11 = call i64 @ipow(i32 %21, i32 %22)
  %mul12 = mul i64 %call, %call11
  %conv = uitofp i64 %mul12 to double
  store double %conv, double* %p12, align 8
  store double 0.000000e+00, double* %tot, align 8
  store i32 0, i32* %i13, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc33, %for.end10
  %23 = load i32, i32* %i13, align 4
  %24 = load i32, i32* %len1, align 4
  %cmp15 = icmp ult i32 %23, %24
  br i1 %cmp15, label %for.body17, label %for.end35

for.body17:                                       ; preds = %for.cond14
  store i32 0, i32* %j18, align 4
  br label %for.cond19

for.cond19:                                       ; preds = %for.inc30, %for.body17
  %25 = load i32, i32* %j18, align 4
  %26 = load i32, i32* %i13, align 4
  %27 = load i32, i32* %len2, align 4
  %call20 = call i32 @min(i32 %26, i32 %27)
  %cmp21 = icmp ult i32 %25, %call20
  br i1 %cmp21, label %for.body23, label %for.end32

for.body23:                                       ; preds = %for.cond19
  %28 = load i32, i32* %i13, align 4
  %arrayidx24 = getelementptr inbounds i32, i32* %vla, i32 %28
  %29 = load i32, i32* %arrayidx24, align 4
  %conv25 = uitofp i32 %29 to double
  %30 = load i32, i32* %j18, align 4
  %arrayidx26 = getelementptr inbounds i32, i32* %vla3, i32 %30
  %31 = load i32, i32* %arrayidx26, align 4
  %conv27 = uitofp i32 %31 to double
  %mul28 = fmul double %conv25, %conv27
  %32 = load double, double* %p12, align 8
  %div = fdiv double %mul28, %32
  %33 = load double, double* %tot, align 8
  %add29 = fadd double %33, %div
  store double %add29, double* %tot, align 8
  br label %for.inc30

for.inc30:                                        ; preds = %for.body23
  %34 = load i32, i32* %j18, align 4
  %inc31 = add i32 %34, 1
  store i32 %inc31, i32* %j18, align 4
  br label %for.cond19

for.end32:                                        ; preds = %for.cond19
  br label %for.inc33

for.inc33:                                        ; preds = %for.end32
  %35 = load i32, i32* %i13, align 4
  %inc34 = add i32 %35, 1
  store i32 %inc34, i32* %i13, align 4
  br label %for.cond14

for.end35:                                        ; preds = %for.cond14
  %36 = load double, double* %tot, align 8
  %37 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %37)
  ret double %36
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call double @beating_probability(i32 4, i32 9, i32 6, i32 6)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), double %call)
  %call2 = call double @beating_probability(i32 10, i32 5, i32 7, i32 6)
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), double %call2)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %n_sides1.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add i32 %0, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %n_dice1.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul i32 %add, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add 1:i32, %1
%3:i32 = mul %0, %2
infer %3

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %len1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %len1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ult i32 %4, %5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add i32 %7, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %n_sides1.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %n_dice1.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %n_sides2.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add1 = add i32 %10, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %n_dice2.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul2 = mul i32 %add1, %11
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add 1:i32, %1
%3:i32 = mul %0, %2
infer %3

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %len2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %len2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp5 = icmp ult i32 %13, %14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc9 = add i32 %16, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %n_sides2.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %n_dice2.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %n_sides1.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %n_dice1.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i64 @ipow(i32 %19, i32 %20)
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %n_sides2.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %n_dice2.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call11 = call i64 @ipow(i32 %21, i32 %22)
; Looking for a replacement for:
%0:i64 = var
infer %0

; *****
; For LLVM instruction:
;  %mul12 = mul i64 %call, %call11
; Looking for a replacement for:
%0:i64 = var
%1:i64 = var
%2:i64 = mul %0, %1
infer %2

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %i13, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %len1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp15 = icmp ult i32 %23, %24
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %j18, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %i13, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %len2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call20 = call i32 @min(i32 %26, i32 %27)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp21 = icmp ult i32 %25, %call20
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %i13, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %arrayidx24, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %j18, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %arrayidx26, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %j18, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc31 = add i32 %34, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %i13, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc34 = add i32 %35, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add 1:i32, %1
%3:i32 = mul %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = add 1:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i64 = var
%1:i64 = var
%2:i64 = mul %0, %1
infer %2


--------------------------------
guess 0

%0:i64 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i64 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for beating_probability()

; entering Souper's runOnFunction() for main()

; ModuleID = './Dice_game_probabilities.c.bc'
source_filename = "./Dice_game_probabilities.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [8 x i8] c"%1.16f\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i64 @ipow(i32 %x, i32 %y) #0 {
entry:
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %result = alloca i64, align 8
  %i = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i64 1, i64* %result, align 8
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %y.addr, align 4
  %cmp = icmp ule i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %x.addr, align 4
  %conv = zext i32 %2 to i64
  %3 = load i64, i64* %result, align 8
  %mul = mul i64 %3, %conv
  store i64 %mul, i64* %result, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4
  %inc = add i32 %4, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %5 = load i64, i64* %result, align 8
  ret i64 %5
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @min(i32 %x, i32 %y) #0 {
entry:
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  %0 = load i32, i32* %x.addr, align 4
  %1 = load i32, i32* %y.addr, align 4
  %cmp = icmp ult i32 %0, %1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load i32, i32* %x.addr, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  %3 = load i32, i32* %y.addr, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ %3, %cond.false ]
  ret i32 %cond
}

; Function Attrs: noinline nounwind optnone
define hidden void @throw_die(i32 %n_sides, i32 %n_dice, i32 %s, i32* %counts) #0 {
entry:
  %n_sides.addr = alloca i32, align 4
  %n_dice.addr = alloca i32, align 4
  %s.addr = alloca i32, align 4
  %counts.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  store i32 %n_sides, i32* %n_sides.addr, align 4
  store i32 %n_dice, i32* %n_dice.addr, align 4
  store i32 %s, i32* %s.addr, align 4
  store i32* %counts, i32** %counts.addr, align 4
  %0 = load i32, i32* %n_dice.addr, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32*, i32** %counts.addr, align 4
  %2 = load i32, i32* %s.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 %2
  %3 = load i32, i32* %arrayidx, align 4
  %inc = add i32 %3, 1
  store i32 %inc, i32* %arrayidx, align 4
  br label %for.end

if.end:                                           ; preds = %entry
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %n_sides.addr, align 4
  %add = add i32 %5, 1
  %cmp1 = icmp ult i32 %4, %add
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %n_sides.addr, align 4
  %7 = load i32, i32* %n_dice.addr, align 4
  %sub = sub i32 %7, 1
  %8 = load i32, i32* %s.addr, align 4
  %9 = load i32, i32* %i, align 4
  %add2 = add i32 %8, %9
  %10 = load i32*, i32** %counts.addr, align 4
  call void @throw_die(i32 %6, i32 %sub, i32 %add2, i32* %10)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc3 = add i32 %11, 1
  store i32 %inc3, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden double @beating_probability(i32 %n_sides1, i32 %n_dice1, i32 %n_sides2, i32 %n_dice2) #0 {
entry:
  %n_sides1.addr = alloca i32, align 4
  %n_dice1.addr = alloca i32, align 4
  %n_sides2.addr = alloca i32, align 4
  %n_dice2.addr = alloca i32, align 4
  %len1 = alloca i32, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %i = alloca i32, align 4
  %len2 = alloca i32, align 4
  %__vla_expr1 = alloca i32, align 4
  %j = alloca i32, align 4
  %p12 = alloca double, align 8
  %tot = alloca double, align 8
  %i13 = alloca i32, align 4
  %j18 = alloca i32, align 4
  store i32 %n_sides1, i32* %n_sides1.addr, align 4
  store i32 %n_dice1, i32* %n_dice1.addr, align 4
  store i32 %n_sides2, i32* %n_sides2.addr, align 4
  store i32 %n_dice2, i32* %n_dice2.addr, align 4
  %0 = load i32, i32* %n_sides1.addr, align 4
  %add = add i32 %0, 1
  %1 = load i32, i32* %n_dice1.addr, align 4
  %mul = mul i32 %add, %1
  store i32 %mul, i32* %len1, align 4
  %2 = load i32, i32* %len1, align 4
  %3 = call i8* @llvm.stacksave()
  store i8* %3, i8** %saved_stack, align 4
  %vla = alloca i32, i32 %2, align 16
  store i32 %2, i32* %__vla_expr0, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %len1, align 4
  %cmp = icmp ult i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %vla, i32 %6
  store i32 0, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %8 = load i32, i32* %n_sides1.addr, align 4
  %9 = load i32, i32* %n_dice1.addr, align 4
  call void @throw_die(i32 %8, i32 %9, i32 0, i32* %vla)
  %10 = load i32, i32* %n_sides2.addr, align 4
  %add1 = add i32 %10, 1
  %11 = load i32, i32* %n_dice2.addr, align 4
  %mul2 = mul i32 %add1, %11
  store i32 %mul2, i32* %len2, align 4
  %12 = load i32, i32* %len2, align 4
  %vla3 = alloca i32, i32 %12, align 16
  store i32 %12, i32* %__vla_expr1, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc8, %for.end
  %13 = load i32, i32* %j, align 4
  %14 = load i32, i32* %len2, align 4
  %cmp5 = icmp ult i32 %13, %14
  br i1 %cmp5, label %for.body6, label %for.end10

for.body6:                                        ; preds = %for.cond4
  %15 = load i32, i32* %j, align 4
  %arrayidx7 = getelementptr inbounds i32, i32* %vla3, i32 %15
  store i32 0, i32* %arrayidx7, align 4
  br label %for.inc8

for.inc8:                                         ; preds = %for.body6
  %16 = load i32, i32* %j, align 4
  %inc9 = add i32 %16, 1
  store i32 %inc9, i32* %j, align 4
  br label %for.cond4

for.end10:                                        ; preds = %for.cond4
  %17 = load i32, i32* %n_sides2.addr, align 4
  %18 = load i32, i32* %n_dice2.addr, align 4
  call void @throw_die(i32 %17, i32 %18, i32 0, i32* %vla3)
  %19 = load i32, i32* %n_sides1.addr, align 4
  %20 = load i32, i32* %n_dice1.addr, align 4
  %call = call i64 @ipow(i32 %19, i32 %20)
  %21 = load i32, i32* %n_sides2.addr, align 4
  %22 = load i32, i32* %n_dice2.addr, align 4
  %call11 = call i64 @ipow(i32 %21, i32 %22)
  %mul12 = mul i64 %call, %call11
  %conv = uitofp i64 %mul12 to double
  store double %conv, double* %p12, align 8
  store double 0.000000e+00, double* %tot, align 8
  store i32 0, i32* %i13, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc33, %for.end10
  %23 = load i32, i32* %i13, align 4
  %24 = load i32, i32* %len1, align 4
  %cmp15 = icmp ult i32 %23, %24
  br i1 %cmp15, label %for.body17, label %for.end35

for.body17:                                       ; preds = %for.cond14
  store i32 0, i32* %j18, align 4
  br label %for.cond19

for.cond19:                                       ; preds = %for.inc30, %for.body17
  %25 = load i32, i32* %j18, align 4
  %26 = load i32, i32* %i13, align 4
  %27 = load i32, i32* %len2, align 4
  %call20 = call i32 @min(i32 %26, i32 %27)
  %cmp21 = icmp ult i32 %25, %call20
  br i1 %cmp21, label %for.body23, label %for.end32

for.body23:                                       ; preds = %for.cond19
  %28 = load i32, i32* %i13, align 4
  %arrayidx24 = getelementptr inbounds i32, i32* %vla, i32 %28
  %29 = load i32, i32* %arrayidx24, align 4
  %conv25 = uitofp i32 %29 to double
  %30 = load i32, i32* %j18, align 4
  %arrayidx26 = getelementptr inbounds i32, i32* %vla3, i32 %30
  %31 = load i32, i32* %arrayidx26, align 4
  %conv27 = uitofp i32 %31 to double
  %mul28 = fmul double %conv25, %conv27
  %32 = load double, double* %p12, align 8
  %div = fdiv double %mul28, %32
  %33 = load double, double* %tot, align 8
  %add29 = fadd double %33, %div
  store double %add29, double* %tot, align 8
  br label %for.inc30

for.inc30:                                        ; preds = %for.body23
  %34 = load i32, i32* %j18, align 4
  %inc31 = add i32 %34, 1
  store i32 %inc31, i32* %j18, align 4
  br label %for.cond19

for.end32:                                        ; preds = %for.cond19
  br label %for.inc33

for.inc33:                                        ; preds = %for.end32
  %35 = load i32, i32* %i13, align 4
  %inc34 = add i32 %35, 1
  store i32 %inc34, i32* %i13, align 4
  br label %for.cond14

for.end35:                                        ; preds = %for.cond14
  %36 = load double, double* %tot, align 8
  %37 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %37)
  ret double %36
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call double @beating_probability(i32 4, i32 9, i32 6, i32 6)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), double %call)
  %call2 = call double @beating_probability(i32 10, i32 5, i32 7, i32 6)
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), double %call2)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
