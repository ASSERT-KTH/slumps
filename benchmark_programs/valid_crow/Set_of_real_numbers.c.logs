
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for length()

; ModuleID = './Set_of_real_numbers.c.bc'
source_filename = "./Set_of_real_numbers.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.RealSet = type { i1 (%struct.RealSet*, %struct.RealSet*, double)*, %struct.RealSet*, %struct.RealSet*, double, double }

@.str = private unnamed_addr constant [43 x i8] c"(0, 1]   union   [0, 2) contains %d is %d\0A\00", align 1
@.str.1 = private unnamed_addr constant [43 x i8] c"[0, 2) intersect (1, 2] contains %d is %d\0A\00", align 1
@.str.2 = private unnamed_addr constant [43 x i8] c"[0, 3)     -     (0, 1) contains %d is %d\0A\00", align 1
@.str.3 = private unnamed_addr constant [43 x i8] c"[0, 3)     -     [0, 1] contains %d is %d\0A\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.5 = private unnamed_addr constant [20 x i8] c"[0, 0] is empty %d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden double @length(%struct.RealSet* %self) #0 {
entry:
  %retval = alloca double, align 8
  %self.addr = alloca %struct.RealSet*, align 4
  %interval = alloca double, align 8
  %p = alloca double, align 8
  %count = alloca i32, align 4
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store double 1.000000e-05, double* %interval, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  store double %1, double* %p, align 8
  store i32 0, i32* %count, align 4
  %2 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %2, i32 0, i32 3
  %3 = load double, double* %low1, align 8
  %4 = call double @llvm.fabs.f64(double %3) #3
  %cmpinf = fcmp oeq double %4, 0x7FF0000000000000
  br i1 %cmpinf, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %5 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 4
  %6 = load double, double* %high, align 8
  %7 = call double @llvm.fabs.f64(double %6) #3
  %cmpinf2 = fcmp oeq double %7, 0x7FF0000000000000
  br i1 %cmpinf2, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store double -1.000000e+00, double* %retval, align 8
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %8 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %8, i32 0, i32 4
  %9 = load double, double* %high3, align 8
  %10 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %10, i32 0, i32 3
  %11 = load double, double* %low4, align 8
  %cmp = fcmp ole double %9, %11
  br i1 %cmp, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  store double 0.000000e+00, double* %retval, align 8
  br label %return

if.end6:                                          ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end6
  %12 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %12, i32 0, i32 0
  %13 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %14 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %15 = load double, double* %p, align 8
  %call = call zeroext i1 %13(%struct.RealSet* %14, %struct.RealSet* null, double %15)
  br i1 %call, label %if.then7, label %if.end8

if.then7:                                         ; preds = %do.body
  %16 = load i32, i32* %count, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %count, align 4
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %do.body
  %17 = load double, double* %p, align 8
  %add = fadd double %17, 1.000000e-05
  store double %add, double* %p, align 8
  br label %do.cond

do.cond:                                          ; preds = %if.end8
  %18 = load double, double* %p, align 8
  %19 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high9 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %19, i32 0, i32 4
  %20 = load double, double* %high9, align 8
  %cmp10 = fcmp olt double %18, %20
  br i1 %cmp10, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %21 = load i32, i32* %count, align 4
  %conv = sitofp i32 %21 to double
  %mul = fmul double %conv, 1.000000e-05
  store double %mul, double* %retval, align 8
  br label %return

return:                                           ; preds = %do.end, %if.then5, %if.then
  %22 = load double, double* %retval, align 8
  ret double %22
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @empty(%struct.RealSet* %self) #0 {
entry:
  %retval = alloca i1, align 1
  %self.addr = alloca %struct.RealSet*, align 4
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %2, i32 0, i32 4
  %3 = load double, double* %high, align 8
  %cmp = fcmp oeq double %1, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 0
  %5 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %7 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 3
  %8 = load double, double* %low1, align 8
  %call = call zeroext i1 %5(%struct.RealSet* %6, %struct.RealSet* null, double %8)
  %lnot = xor i1 %call, true
  store i1 %lnot, i1* %retval, align 1
  br label %return

if.end:                                           ; preds = %entry
  %9 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %call2 = call double @length(%struct.RealSet* %9)
  %cmp3 = fcmp oeq double %call2, 0.000000e+00
  store i1 %cmp3, i1* %retval, align 1
  br label %return

return:                                           ; preds = %if.end, %if.then
  %10 = load i1, i1* %retval, align 1
  ret i1 %10
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.RealSet* @makeSet(double %low, double %high, i32 %type) #0 {
entry:
  %retval = alloca %struct.RealSet*, align 4
  %low.addr = alloca double, align 8
  %high.addr = alloca double, align 8
  %type.addr = alloca i32, align 4
  %contains = alloca i1 (%struct.RealSet*, %struct.RealSet*, double)*, align 4
  %rs = alloca %struct.RealSet*, align 4
  store double %low, double* %low.addr, align 8
  store double %high, double* %high.addr, align 8
  store i32 %type, i32* %type.addr, align 4
  %0 = load i32, i32* %type.addr, align 4
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
    i32 2, label %sw.bb2
    i32 3, label %sw.bb3
  ]

sw.bb:                                            ; preds = %entry
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_closed, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  br label %sw.epilog

sw.bb1:                                           ; preds = %entry
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_left_open, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  br label %sw.epilog

sw.bb2:                                           ; preds = %entry
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_right_open, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  br label %sw.epilog

sw.bb3:                                           ; preds = %entry
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_both_open, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  store %struct.RealSet* null, %struct.RealSet** %retval, align 4
  br label %return

sw.epilog:                                        ; preds = %sw.bb3, %sw.bb2, %sw.bb1, %sw.bb
  %call = call noalias i8* @malloc(i32 32)
  %1 = bitcast i8* %call to %struct.RealSet*
  store %struct.RealSet* %1, %struct.RealSet** %rs, align 4
  %2 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  %3 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %contains4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 0
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* %2, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains4, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %left = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 1
  store %struct.RealSet* null, %struct.RealSet** %left, align 4
  %5 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %right = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 2
  store %struct.RealSet* null, %struct.RealSet** %right, align 8
  %6 = load double, double* %low.addr, align 8
  %7 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %low5 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 3
  store double %6, double* %low5, align 8
  %8 = load double, double* %high.addr, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %high6 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 4
  store double %8, double* %high6, align 8
  %10 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  store %struct.RealSet* %10, %struct.RealSet** %retval, align 4
  br label %return

return:                                           ; preds = %sw.epilog, %sw.default
  %11 = load %struct.RealSet*, %struct.RealSet** %retval, align 4
  ret %struct.RealSet* %11
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_closed(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load double, double* %d.addr, align 8
  %cmp = fcmp ole double %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %3 = load double, double* %d.addr, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 4
  %5 = load double, double* %high, align 8
  %cmp1 = fcmp ole double %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  ret i1 %6
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_left_open(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load double, double* %d.addr, align 8
  %cmp = fcmp olt double %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %3 = load double, double* %d.addr, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 4
  %5 = load double, double* %high, align 8
  %cmp1 = fcmp ole double %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  ret i1 %6
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_right_open(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load double, double* %d.addr, align 8
  %cmp = fcmp ole double %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %3 = load double, double* %d.addr, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 4
  %5 = load double, double* %high, align 8
  %cmp1 = fcmp olt double %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  ret i1 %6
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_both_open(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load double, double* %d.addr, align 8
  %cmp = fcmp olt double %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %3 = load double, double* %d.addr, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 4
  %5 = load double, double* %high, align 8
  %cmp1 = fcmp olt double %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  ret i1 %6
}

declare noalias i8* @malloc(i32 %0) #2

; Function Attrs: noinline nounwind optnone
define hidden %struct.RealSet* @makeIntersect(%struct.RealSet* %left, %struct.RealSet* %right) #0 {
entry:
  %left.addr = alloca %struct.RealSet*, align 4
  %right.addr = alloca %struct.RealSet*, align 4
  %rs = alloca %struct.RealSet*, align 4
  store %struct.RealSet* %left, %struct.RealSet** %left.addr, align 4
  store %struct.RealSet* %right, %struct.RealSet** %right.addr, align 4
  %call = call noalias i8* @malloc(i32 32)
  %0 = bitcast i8* %call to %struct.RealSet*
  store %struct.RealSet* %0, %struct.RealSet** %rs, align 4
  %1 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_intersect, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %2 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %3 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  store %struct.RealSet* %2, %struct.RealSet** %left1, align 4
  %4 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %5 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %right2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 2
  store %struct.RealSet* %4, %struct.RealSet** %right2, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 3
  %7 = load double, double* %low, align 8
  %8 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %low3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %8, i32 0, i32 3
  %9 = load double, double* %low3, align 8
  %10 = call double @llvm.minnum.f64(double %7, double %9)
  %11 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %low4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %11, i32 0, i32 3
  store double %10, double* %low4, align 8
  %12 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %12, i32 0, i32 4
  %13 = load double, double* %high, align 8
  %14 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %high5 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %14, i32 0, i32 4
  %15 = load double, double* %high5, align 8
  %16 = call double @llvm.minnum.f64(double %13, double %15)
  %17 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %high6 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %17, i32 0, i32 4
  store double %16, double* %high6, align 8
  %18 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  ret %struct.RealSet* %18
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_intersect(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 1
  %1 = load %struct.RealSet*, %struct.RealSet** %left, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  %2 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %3 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  %4 = load %struct.RealSet*, %struct.RealSet** %left1, align 4
  %5 = load double, double* %d.addr, align 8
  %call = call zeroext i1 %2(%struct.RealSet* %4, %struct.RealSet* null, double %5)
  br i1 %call, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %6 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 2
  %7 = load %struct.RealSet*, %struct.RealSet** %right, align 8
  %contains2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 0
  %8 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains2, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 2
  %10 = load %struct.RealSet*, %struct.RealSet** %right3, align 8
  %11 = load double, double* %d.addr, align 8
  %call4 = call zeroext i1 %8(%struct.RealSet* %10, %struct.RealSet* null, double %11)
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %12 = phi i1 [ false, %entry ], [ %call4, %land.rhs ]
  ret i1 %12
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.minnum.f64(double %0, double %1) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.RealSet* @makeUnion(%struct.RealSet* %left, %struct.RealSet* %right) #0 {
entry:
  %left.addr = alloca %struct.RealSet*, align 4
  %right.addr = alloca %struct.RealSet*, align 4
  %rs = alloca %struct.RealSet*, align 4
  store %struct.RealSet* %left, %struct.RealSet** %left.addr, align 4
  store %struct.RealSet* %right, %struct.RealSet** %right.addr, align 4
  %call = call noalias i8* @malloc(i32 32)
  %0 = bitcast i8* %call to %struct.RealSet*
  store %struct.RealSet* %0, %struct.RealSet** %rs, align 4
  %1 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_union, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %2 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %3 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  store %struct.RealSet* %2, %struct.RealSet** %left1, align 4
  %4 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %5 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %right2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 2
  store %struct.RealSet* %4, %struct.RealSet** %right2, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 3
  %7 = load double, double* %low, align 8
  %8 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %low3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %8, i32 0, i32 3
  %9 = load double, double* %low3, align 8
  %10 = call double @llvm.minnum.f64(double %7, double %9)
  %11 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %low4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %11, i32 0, i32 3
  store double %10, double* %low4, align 8
  %12 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %12, i32 0, i32 4
  %13 = load double, double* %high, align 8
  %14 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %high5 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %14, i32 0, i32 4
  %15 = load double, double* %high5, align 8
  %16 = call double @llvm.minnum.f64(double %13, double %15)
  %17 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %high6 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %17, i32 0, i32 4
  store double %16, double* %high6, align 8
  %18 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  ret %struct.RealSet* %18
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_union(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 1
  %1 = load %struct.RealSet*, %struct.RealSet** %left, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  %2 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %3 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  %4 = load %struct.RealSet*, %struct.RealSet** %left1, align 4
  %5 = load double, double* %d.addr, align 8
  %call = call zeroext i1 %2(%struct.RealSet* %4, %struct.RealSet* null, double %5)
  br i1 %call, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %6 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 2
  %7 = load %struct.RealSet*, %struct.RealSet** %right, align 8
  %contains2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 0
  %8 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains2, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 2
  %10 = load %struct.RealSet*, %struct.RealSet** %right3, align 8
  %11 = load double, double* %d.addr, align 8
  %call4 = call zeroext i1 %8(%struct.RealSet* %10, %struct.RealSet* null, double %11)
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %12 = phi i1 [ true, %entry ], [ %call4, %lor.rhs ]
  ret i1 %12
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.RealSet* @makeSubtract(%struct.RealSet* %left, %struct.RealSet* %right) #0 {
entry:
  %left.addr = alloca %struct.RealSet*, align 4
  %right.addr = alloca %struct.RealSet*, align 4
  %rs = alloca %struct.RealSet*, align 4
  store %struct.RealSet* %left, %struct.RealSet** %left.addr, align 4
  store %struct.RealSet* %right, %struct.RealSet** %right.addr, align 4
  %call = call noalias i8* @malloc(i32 32)
  %0 = bitcast i8* %call to %struct.RealSet*
  store %struct.RealSet* %0, %struct.RealSet** %rs, align 4
  %1 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_subtract, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %2 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %3 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  store %struct.RealSet* %2, %struct.RealSet** %left1, align 4
  %4 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %5 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %right2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 2
  store %struct.RealSet* %4, %struct.RealSet** %right2, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 3
  %7 = load double, double* %low, align 8
  %8 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %low3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %8, i32 0, i32 3
  store double %7, double* %low3, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 4
  %10 = load double, double* %high, align 8
  %11 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %high4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %11, i32 0, i32 4
  store double %10, double* %high4, align 8
  %12 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  ret %struct.RealSet* %12
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_subtract(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 1
  %1 = load %struct.RealSet*, %struct.RealSet** %left, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  %2 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %3 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  %4 = load %struct.RealSet*, %struct.RealSet** %left1, align 4
  %5 = load double, double* %d.addr, align 8
  %call = call zeroext i1 %2(%struct.RealSet* %4, %struct.RealSet* null, double %5)
  br i1 %call, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %6 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 2
  %7 = load %struct.RealSet*, %struct.RealSet** %right, align 8
  %contains2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 0
  %8 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains2, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 2
  %10 = load %struct.RealSet*, %struct.RealSet** %right3, align 8
  %11 = load double, double* %d.addr, align 8
  %call4 = call zeroext i1 %8(%struct.RealSet* %10, %struct.RealSet* null, double %11)
  %lnot = xor i1 %call4, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %12 = phi i1 [ false, %entry ], [ %lnot, %land.rhs ]
  ret i1 %12
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %a = alloca %struct.RealSet*, align 4
  %b = alloca %struct.RealSet*, align 4
  %c = alloca %struct.RealSet*, align 4
  %d = alloca %struct.RealSet*, align 4
  %e = alloca %struct.RealSet*, align 4
  %f = alloca %struct.RealSet*, align 4
  %g = alloca %struct.RealSet*, align 4
  %i = alloca i32, align 4
  %t = alloca %struct.RealSet*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.RealSet* @makeSet(double 0.000000e+00, double 1.000000e+00, i32 1)
  store %struct.RealSet* %call, %struct.RealSet** %a, align 4
  %call1 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 2.000000e+00, i32 2)
  store %struct.RealSet* %call1, %struct.RealSet** %b, align 4
  %call2 = call %struct.RealSet* @makeSet(double 1.000000e+00, double 2.000000e+00, i32 1)
  store %struct.RealSet* %call2, %struct.RealSet** %c, align 4
  %call3 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 3.000000e+00, i32 2)
  store %struct.RealSet* %call3, %struct.RealSet** %d, align 4
  %call4 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 1.000000e+00, i32 3)
  store %struct.RealSet* %call4, %struct.RealSet** %e, align 4
  %call5 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 1.000000e+00, i32 0)
  store %struct.RealSet* %call5, %struct.RealSet** %f, align 4
  %call6 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 0.000000e+00, i32 0)
  store %struct.RealSet* %call6, %struct.RealSet** %g, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load %struct.RealSet*, %struct.RealSet** %a, align 4
  %2 = load %struct.RealSet*, %struct.RealSet** %b, align 4
  %call7 = call %struct.RealSet* @makeUnion(%struct.RealSet* %1, %struct.RealSet* %2)
  store %struct.RealSet* %call7, %struct.RealSet** %t, align 4
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 0
  %5 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %7 = load i32, i32* %i, align 4
  %conv = sitofp i32 %7 to double
  %call8 = call zeroext i1 %5(%struct.RealSet* %6, %struct.RealSet* null, double %conv)
  %conv9 = zext i1 %call8 to i32
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str, i32 0, i32 0), i32 %3, i32 %conv9)
  %8 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %9 = bitcast %struct.RealSet* %8 to i8*
  call void @free(i8* %9)
  %10 = load %struct.RealSet*, %struct.RealSet** %b, align 4
  %11 = load %struct.RealSet*, %struct.RealSet** %c, align 4
  %call11 = call %struct.RealSet* @makeIntersect(%struct.RealSet* %10, %struct.RealSet* %11)
  store %struct.RealSet* %call11, %struct.RealSet** %t, align 4
  %12 = load i32, i32* %i, align 4
  %13 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %contains12 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %13, i32 0, i32 0
  %14 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains12, align 8
  %15 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %16 = load i32, i32* %i, align 4
  %conv13 = sitofp i32 %16 to double
  %call14 = call zeroext i1 %14(%struct.RealSet* %15, %struct.RealSet* null, double %conv13)
  %conv15 = zext i1 %call14 to i32
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.1, i32 0, i32 0), i32 %12, i32 %conv15)
  %17 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %18 = bitcast %struct.RealSet* %17 to i8*
  call void @free(i8* %18)
  %19 = load %struct.RealSet*, %struct.RealSet** %d, align 4
  %20 = load %struct.RealSet*, %struct.RealSet** %e, align 4
  %call17 = call %struct.RealSet* @makeSubtract(%struct.RealSet* %19, %struct.RealSet* %20)
  store %struct.RealSet* %call17, %struct.RealSet** %t, align 4
  %21 = load i32, i32* %i, align 4
  %22 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %contains18 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %22, i32 0, i32 0
  %23 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains18, align 8
  %24 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %25 = load i32, i32* %i, align 4
  %conv19 = sitofp i32 %25 to double
  %call20 = call zeroext i1 %23(%struct.RealSet* %24, %struct.RealSet* null, double %conv19)
  %conv21 = zext i1 %call20 to i32
  %call22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.2, i32 0, i32 0), i32 %21, i32 %conv21)
  %26 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %27 = bitcast %struct.RealSet* %26 to i8*
  call void @free(i8* %27)
  %28 = load %struct.RealSet*, %struct.RealSet** %d, align 4
  %29 = load %struct.RealSet*, %struct.RealSet** %f, align 4
  %call23 = call %struct.RealSet* @makeSubtract(%struct.RealSet* %28, %struct.RealSet* %29)
  store %struct.RealSet* %call23, %struct.RealSet** %t, align 4
  %30 = load i32, i32* %i, align 4
  %31 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %contains24 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %31, i32 0, i32 0
  %32 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains24, align 8
  %33 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %34 = load i32, i32* %i, align 4
  %conv25 = sitofp i32 %34 to double
  %call26 = call zeroext i1 %32(%struct.RealSet* %33, %struct.RealSet* null, double %conv25)
  %conv27 = zext i1 %call26 to i32
  %call28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.3, i32 0, i32 0), i32 %30, i32 %conv27)
  %35 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %36 = bitcast %struct.RealSet* %35 to i8*
  call void @free(i8* %36)
  %call29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0))
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %37 = load i32, i32* %i, align 4
  %inc = add nsw i32 %37, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %38 = load %struct.RealSet*, %struct.RealSet** %g, align 4
  %call30 = call zeroext i1 @empty(%struct.RealSet* %38)
  %conv31 = zext i1 %call30 to i32
  %call32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.5, i32 0, i32 0), i32 %conv31)
  %39 = load %struct.RealSet*, %struct.RealSet** %a, align 4
  %40 = bitcast %struct.RealSet* %39 to i8*
  call void @free(i8* %40)
  %41 = load %struct.RealSet*, %struct.RealSet** %b, align 4
  %42 = bitcast %struct.RealSet* %41 to i8*
  call void @free(i8* %42)
  %43 = load %struct.RealSet*, %struct.RealSet** %c, align 4
  %44 = bitcast %struct.RealSet* %43 to i8*
  call void @free(i8* %44)
  %45 = load %struct.RealSet*, %struct.RealSet** %d, align 4
  %46 = bitcast %struct.RealSet* %45 to i8*
  call void @free(i8* %46)
  %47 = load %struct.RealSet*, %struct.RealSet** %e, align 4
  %48 = bitcast %struct.RealSet* %47 to i8*
  call void @free(i8* %48)
  %49 = load %struct.RealSet*, %struct.RealSet** %f, align 4
  %50 = bitcast %struct.RealSet* %49 to i8*
  call void @free(i8* %50)
  %51 = load %struct.RealSet*, %struct.RealSet** %g, align 4
  %52 = bitcast %struct.RealSet* %51 to i8*
  call void @free(i8* %52)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #2

declare void @free(i8* %0) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %cmpinf = fcmp oeq double %4, 0x7FF0000000000000
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %cmpinf2 = fcmp oeq double %7, 0x7FF0000000000000
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = fcmp ole double %9, %11
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call zeroext i1 %13(%struct.RealSet* %14, %struct.RealSet* null, double %15)
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %count, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %16, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp10 = fcmp olt double %18, %20
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %count, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for length()

; entering Souper's runOnFunction() for empty()

; ModuleID = './Set_of_real_numbers.c.bc'
source_filename = "./Set_of_real_numbers.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.RealSet = type { i1 (%struct.RealSet*, %struct.RealSet*, double)*, %struct.RealSet*, %struct.RealSet*, double, double }

@.str = private unnamed_addr constant [43 x i8] c"(0, 1]   union   [0, 2) contains %d is %d\0A\00", align 1
@.str.1 = private unnamed_addr constant [43 x i8] c"[0, 2) intersect (1, 2] contains %d is %d\0A\00", align 1
@.str.2 = private unnamed_addr constant [43 x i8] c"[0, 3)     -     (0, 1) contains %d is %d\0A\00", align 1
@.str.3 = private unnamed_addr constant [43 x i8] c"[0, 3)     -     [0, 1] contains %d is %d\0A\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.5 = private unnamed_addr constant [20 x i8] c"[0, 0] is empty %d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden double @length(%struct.RealSet* %self) #0 {
entry:
  %retval = alloca double, align 8
  %self.addr = alloca %struct.RealSet*, align 4
  %interval = alloca double, align 8
  %p = alloca double, align 8
  %count = alloca i32, align 4
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store double 1.000000e-05, double* %interval, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  store double %1, double* %p, align 8
  store i32 0, i32* %count, align 4
  %2 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %2, i32 0, i32 3
  %3 = load double, double* %low1, align 8
  %4 = call double @llvm.fabs.f64(double %3) #3
  %cmpinf = fcmp oeq double %4, 0x7FF0000000000000
  br i1 %cmpinf, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %5 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 4
  %6 = load double, double* %high, align 8
  %7 = call double @llvm.fabs.f64(double %6) #3
  %cmpinf2 = fcmp oeq double %7, 0x7FF0000000000000
  br i1 %cmpinf2, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store double -1.000000e+00, double* %retval, align 8
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %8 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %8, i32 0, i32 4
  %9 = load double, double* %high3, align 8
  %10 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %10, i32 0, i32 3
  %11 = load double, double* %low4, align 8
  %cmp = fcmp ole double %9, %11
  br i1 %cmp, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  store double 0.000000e+00, double* %retval, align 8
  br label %return

if.end6:                                          ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end6
  %12 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %12, i32 0, i32 0
  %13 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %14 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %15 = load double, double* %p, align 8
  %call = call zeroext i1 %13(%struct.RealSet* %14, %struct.RealSet* null, double %15)
  br i1 %call, label %if.then7, label %if.end8

if.then7:                                         ; preds = %do.body
  %16 = load i32, i32* %count, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %count, align 4
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %do.body
  %17 = load double, double* %p, align 8
  %add = fadd double %17, 1.000000e-05
  store double %add, double* %p, align 8
  br label %do.cond

do.cond:                                          ; preds = %if.end8
  %18 = load double, double* %p, align 8
  %19 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high9 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %19, i32 0, i32 4
  %20 = load double, double* %high9, align 8
  %cmp10 = fcmp olt double %18, %20
  br i1 %cmp10, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %21 = load i32, i32* %count, align 4
  %conv = sitofp i32 %21 to double
  %mul = fmul double %conv, 1.000000e-05
  store double %mul, double* %retval, align 8
  br label %return

return:                                           ; preds = %do.end, %if.then5, %if.then
  %22 = load double, double* %retval, align 8
  ret double %22
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @empty(%struct.RealSet* %self) #0 {
entry:
  %retval = alloca i1, align 1
  %self.addr = alloca %struct.RealSet*, align 4
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %2, i32 0, i32 4
  %3 = load double, double* %high, align 8
  %cmp = fcmp oeq double %1, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 0
  %5 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %7 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 3
  %8 = load double, double* %low1, align 8
  %call = call zeroext i1 %5(%struct.RealSet* %6, %struct.RealSet* null, double %8)
  %lnot = xor i1 %call, true
  store i1 %lnot, i1* %retval, align 1
  br label %return

if.end:                                           ; preds = %entry
  %9 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %call2 = call double @length(%struct.RealSet* %9)
  %cmp3 = fcmp oeq double %call2, 0.000000e+00
  store i1 %cmp3, i1* %retval, align 1
  br label %return

return:                                           ; preds = %if.end, %if.then
  %10 = load i1, i1* %retval, align 1
  ret i1 %10
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.RealSet* @makeSet(double %low, double %high, i32 %type) #0 {
entry:
  %retval = alloca %struct.RealSet*, align 4
  %low.addr = alloca double, align 8
  %high.addr = alloca double, align 8
  %type.addr = alloca i32, align 4
  %contains = alloca i1 (%struct.RealSet*, %struct.RealSet*, double)*, align 4
  %rs = alloca %struct.RealSet*, align 4
  store double %low, double* %low.addr, align 8
  store double %high, double* %high.addr, align 8
  store i32 %type, i32* %type.addr, align 4
  %0 = load i32, i32* %type.addr, align 4
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
    i32 2, label %sw.bb2
    i32 3, label %sw.bb3
  ]

sw.bb:                                            ; preds = %entry
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_closed, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  br label %sw.epilog

sw.bb1:                                           ; preds = %entry
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_left_open, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  br label %sw.epilog

sw.bb2:                                           ; preds = %entry
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_right_open, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  br label %sw.epilog

sw.bb3:                                           ; preds = %entry
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_both_open, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  store %struct.RealSet* null, %struct.RealSet** %retval, align 4
  br label %return

sw.epilog:                                        ; preds = %sw.bb3, %sw.bb2, %sw.bb1, %sw.bb
  %call = call noalias i8* @malloc(i32 32)
  %1 = bitcast i8* %call to %struct.RealSet*
  store %struct.RealSet* %1, %struct.RealSet** %rs, align 4
  %2 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  %3 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %contains4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 0
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* %2, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains4, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %left = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 1
  store %struct.RealSet* null, %struct.RealSet** %left, align 4
  %5 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %right = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 2
  store %struct.RealSet* null, %struct.RealSet** %right, align 8
  %6 = load double, double* %low.addr, align 8
  %7 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %low5 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 3
  store double %6, double* %low5, align 8
  %8 = load double, double* %high.addr, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %high6 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 4
  store double %8, double* %high6, align 8
  %10 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  store %struct.RealSet* %10, %struct.RealSet** %retval, align 4
  br label %return

return:                                           ; preds = %sw.epilog, %sw.default
  %11 = load %struct.RealSet*, %struct.RealSet** %retval, align 4
  ret %struct.RealSet* %11
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_closed(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load double, double* %d.addr, align 8
  %cmp = fcmp ole double %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %3 = load double, double* %d.addr, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 4
  %5 = load double, double* %high, align 8
  %cmp1 = fcmp ole double %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  ret i1 %6
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_left_open(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load double, double* %d.addr, align 8
  %cmp = fcmp olt double %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %3 = load double, double* %d.addr, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 4
  %5 = load double, double* %high, align 8
  %cmp1 = fcmp ole double %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  ret i1 %6
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_right_open(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load double, double* %d.addr, align 8
  %cmp = fcmp ole double %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %3 = load double, double* %d.addr, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 4
  %5 = load double, double* %high, align 8
  %cmp1 = fcmp olt double %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  ret i1 %6
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_both_open(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load double, double* %d.addr, align 8
  %cmp = fcmp olt double %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %3 = load double, double* %d.addr, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 4
  %5 = load double, double* %high, align 8
  %cmp1 = fcmp olt double %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  ret i1 %6
}

declare noalias i8* @malloc(i32 %0) #2

; Function Attrs: noinline nounwind optnone
define hidden %struct.RealSet* @makeIntersect(%struct.RealSet* %left, %struct.RealSet* %right) #0 {
entry:
  %left.addr = alloca %struct.RealSet*, align 4
  %right.addr = alloca %struct.RealSet*, align 4
  %rs = alloca %struct.RealSet*, align 4
  store %struct.RealSet* %left, %struct.RealSet** %left.addr, align 4
  store %struct.RealSet* %right, %struct.RealSet** %right.addr, align 4
  %call = call noalias i8* @malloc(i32 32)
  %0 = bitcast i8* %call to %struct.RealSet*
  store %struct.RealSet* %0, %struct.RealSet** %rs, align 4
  %1 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_intersect, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %2 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %3 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  store %struct.RealSet* %2, %struct.RealSet** %left1, align 4
  %4 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %5 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %right2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 2
  store %struct.RealSet* %4, %struct.RealSet** %right2, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 3
  %7 = load double, double* %low, align 8
  %8 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %low3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %8, i32 0, i32 3
  %9 = load double, double* %low3, align 8
  %10 = call double @llvm.minnum.f64(double %7, double %9)
  %11 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %low4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %11, i32 0, i32 3
  store double %10, double* %low4, align 8
  %12 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %12, i32 0, i32 4
  %13 = load double, double* %high, align 8
  %14 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %high5 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %14, i32 0, i32 4
  %15 = load double, double* %high5, align 8
  %16 = call double @llvm.minnum.f64(double %13, double %15)
  %17 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %high6 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %17, i32 0, i32 4
  store double %16, double* %high6, align 8
  %18 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  ret %struct.RealSet* %18
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_intersect(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 1
  %1 = load %struct.RealSet*, %struct.RealSet** %left, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  %2 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %3 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  %4 = load %struct.RealSet*, %struct.RealSet** %left1, align 4
  %5 = load double, double* %d.addr, align 8
  %call = call zeroext i1 %2(%struct.RealSet* %4, %struct.RealSet* null, double %5)
  br i1 %call, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %6 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 2
  %7 = load %struct.RealSet*, %struct.RealSet** %right, align 8
  %contains2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 0
  %8 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains2, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 2
  %10 = load %struct.RealSet*, %struct.RealSet** %right3, align 8
  %11 = load double, double* %d.addr, align 8
  %call4 = call zeroext i1 %8(%struct.RealSet* %10, %struct.RealSet* null, double %11)
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %12 = phi i1 [ false, %entry ], [ %call4, %land.rhs ]
  ret i1 %12
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.minnum.f64(double %0, double %1) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.RealSet* @makeUnion(%struct.RealSet* %left, %struct.RealSet* %right) #0 {
entry:
  %left.addr = alloca %struct.RealSet*, align 4
  %right.addr = alloca %struct.RealSet*, align 4
  %rs = alloca %struct.RealSet*, align 4
  store %struct.RealSet* %left, %struct.RealSet** %left.addr, align 4
  store %struct.RealSet* %right, %struct.RealSet** %right.addr, align 4
  %call = call noalias i8* @malloc(i32 32)
  %0 = bitcast i8* %call to %struct.RealSet*
  store %struct.RealSet* %0, %struct.RealSet** %rs, align 4
  %1 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_union, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %2 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %3 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  store %struct.RealSet* %2, %struct.RealSet** %left1, align 4
  %4 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %5 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %right2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 2
  store %struct.RealSet* %4, %struct.RealSet** %right2, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 3
  %7 = load double, double* %low, align 8
  %8 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %low3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %8, i32 0, i32 3
  %9 = load double, double* %low3, align 8
  %10 = call double @llvm.minnum.f64(double %7, double %9)
  %11 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %low4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %11, i32 0, i32 3
  store double %10, double* %low4, align 8
  %12 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %12, i32 0, i32 4
  %13 = load double, double* %high, align 8
  %14 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %high5 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %14, i32 0, i32 4
  %15 = load double, double* %high5, align 8
  %16 = call double @llvm.minnum.f64(double %13, double %15)
  %17 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %high6 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %17, i32 0, i32 4
  store double %16, double* %high6, align 8
  %18 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  ret %struct.RealSet* %18
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_union(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 1
  %1 = load %struct.RealSet*, %struct.RealSet** %left, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  %2 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %3 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  %4 = load %struct.RealSet*, %struct.RealSet** %left1, align 4
  %5 = load double, double* %d.addr, align 8
  %call = call zeroext i1 %2(%struct.RealSet* %4, %struct.RealSet* null, double %5)
  br i1 %call, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %6 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 2
  %7 = load %struct.RealSet*, %struct.RealSet** %right, align 8
  %contains2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 0
  %8 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains2, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 2
  %10 = load %struct.RealSet*, %struct.RealSet** %right3, align 8
  %11 = load double, double* %d.addr, align 8
  %call4 = call zeroext i1 %8(%struct.RealSet* %10, %struct.RealSet* null, double %11)
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %12 = phi i1 [ true, %entry ], [ %call4, %lor.rhs ]
  ret i1 %12
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.RealSet* @makeSubtract(%struct.RealSet* %left, %struct.RealSet* %right) #0 {
entry:
  %left.addr = alloca %struct.RealSet*, align 4
  %right.addr = alloca %struct.RealSet*, align 4
  %rs = alloca %struct.RealSet*, align 4
  store %struct.RealSet* %left, %struct.RealSet** %left.addr, align 4
  store %struct.RealSet* %right, %struct.RealSet** %right.addr, align 4
  %call = call noalias i8* @malloc(i32 32)
  %0 = bitcast i8* %call to %struct.RealSet*
  store %struct.RealSet* %0, %struct.RealSet** %rs, align 4
  %1 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_subtract, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %2 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %3 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  store %struct.RealSet* %2, %struct.RealSet** %left1, align 4
  %4 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %5 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %right2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 2
  store %struct.RealSet* %4, %struct.RealSet** %right2, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 3
  %7 = load double, double* %low, align 8
  %8 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %low3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %8, i32 0, i32 3
  store double %7, double* %low3, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 4
  %10 = load double, double* %high, align 8
  %11 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %high4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %11, i32 0, i32 4
  store double %10, double* %high4, align 8
  %12 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  ret %struct.RealSet* %12
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_subtract(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 1
  %1 = load %struct.RealSet*, %struct.RealSet** %left, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  %2 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %3 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  %4 = load %struct.RealSet*, %struct.RealSet** %left1, align 4
  %5 = load double, double* %d.addr, align 8
  %call = call zeroext i1 %2(%struct.RealSet* %4, %struct.RealSet* null, double %5)
  br i1 %call, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %6 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 2
  %7 = load %struct.RealSet*, %struct.RealSet** %right, align 8
  %contains2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 0
  %8 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains2, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 2
  %10 = load %struct.RealSet*, %struct.RealSet** %right3, align 8
  %11 = load double, double* %d.addr, align 8
  %call4 = call zeroext i1 %8(%struct.RealSet* %10, %struct.RealSet* null, double %11)
  %lnot = xor i1 %call4, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %12 = phi i1 [ false, %entry ], [ %lnot, %land.rhs ]
  ret i1 %12
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %a = alloca %struct.RealSet*, align 4
  %b = alloca %struct.RealSet*, align 4
  %c = alloca %struct.RealSet*, align 4
  %d = alloca %struct.RealSet*, align 4
  %e = alloca %struct.RealSet*, align 4
  %f = alloca %struct.RealSet*, align 4
  %g = alloca %struct.RealSet*, align 4
  %i = alloca i32, align 4
  %t = alloca %struct.RealSet*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.RealSet* @makeSet(double 0.000000e+00, double 1.000000e+00, i32 1)
  store %struct.RealSet* %call, %struct.RealSet** %a, align 4
  %call1 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 2.000000e+00, i32 2)
  store %struct.RealSet* %call1, %struct.RealSet** %b, align 4
  %call2 = call %struct.RealSet* @makeSet(double 1.000000e+00, double 2.000000e+00, i32 1)
  store %struct.RealSet* %call2, %struct.RealSet** %c, align 4
  %call3 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 3.000000e+00, i32 2)
  store %struct.RealSet* %call3, %struct.RealSet** %d, align 4
  %call4 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 1.000000e+00, i32 3)
  store %struct.RealSet* %call4, %struct.RealSet** %e, align 4
  %call5 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 1.000000e+00, i32 0)
  store %struct.RealSet* %call5, %struct.RealSet** %f, align 4
  %call6 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 0.000000e+00, i32 0)
  store %struct.RealSet* %call6, %struct.RealSet** %g, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load %struct.RealSet*, %struct.RealSet** %a, align 4
  %2 = load %struct.RealSet*, %struct.RealSet** %b, align 4
  %call7 = call %struct.RealSet* @makeUnion(%struct.RealSet* %1, %struct.RealSet* %2)
  store %struct.RealSet* %call7, %struct.RealSet** %t, align 4
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 0
  %5 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %7 = load i32, i32* %i, align 4
  %conv = sitofp i32 %7 to double
  %call8 = call zeroext i1 %5(%struct.RealSet* %6, %struct.RealSet* null, double %conv)
  %conv9 = zext i1 %call8 to i32
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str, i32 0, i32 0), i32 %3, i32 %conv9)
  %8 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %9 = bitcast %struct.RealSet* %8 to i8*
  call void @free(i8* %9)
  %10 = load %struct.RealSet*, %struct.RealSet** %b, align 4
  %11 = load %struct.RealSet*, %struct.RealSet** %c, align 4
  %call11 = call %struct.RealSet* @makeIntersect(%struct.RealSet* %10, %struct.RealSet* %11)
  store %struct.RealSet* %call11, %struct.RealSet** %t, align 4
  %12 = load i32, i32* %i, align 4
  %13 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %contains12 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %13, i32 0, i32 0
  %14 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains12, align 8
  %15 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %16 = load i32, i32* %i, align 4
  %conv13 = sitofp i32 %16 to double
  %call14 = call zeroext i1 %14(%struct.RealSet* %15, %struct.RealSet* null, double %conv13)
  %conv15 = zext i1 %call14 to i32
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.1, i32 0, i32 0), i32 %12, i32 %conv15)
  %17 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %18 = bitcast %struct.RealSet* %17 to i8*
  call void @free(i8* %18)
  %19 = load %struct.RealSet*, %struct.RealSet** %d, align 4
  %20 = load %struct.RealSet*, %struct.RealSet** %e, align 4
  %call17 = call %struct.RealSet* @makeSubtract(%struct.RealSet* %19, %struct.RealSet* %20)
  store %struct.RealSet* %call17, %struct.RealSet** %t, align 4
  %21 = load i32, i32* %i, align 4
  %22 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %contains18 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %22, i32 0, i32 0
  %23 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains18, align 8
  %24 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %25 = load i32, i32* %i, align 4
  %conv19 = sitofp i32 %25 to double
  %call20 = call zeroext i1 %23(%struct.RealSet* %24, %struct.RealSet* null, double %conv19)
  %conv21 = zext i1 %call20 to i32
  %call22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.2, i32 0, i32 0), i32 %21, i32 %conv21)
  %26 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %27 = bitcast %struct.RealSet* %26 to i8*
  call void @free(i8* %27)
  %28 = load %struct.RealSet*, %struct.RealSet** %d, align 4
  %29 = load %struct.RealSet*, %struct.RealSet** %f, align 4
  %call23 = call %struct.RealSet* @makeSubtract(%struct.RealSet* %28, %struct.RealSet* %29)
  store %struct.RealSet* %call23, %struct.RealSet** %t, align 4
  %30 = load i32, i32* %i, align 4
  %31 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %contains24 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %31, i32 0, i32 0
  %32 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains24, align 8
  %33 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %34 = load i32, i32* %i, align 4
  %conv25 = sitofp i32 %34 to double
  %call26 = call zeroext i1 %32(%struct.RealSet* %33, %struct.RealSet* null, double %conv25)
  %conv27 = zext i1 %call26 to i32
  %call28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.3, i32 0, i32 0), i32 %30, i32 %conv27)
  %35 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %36 = bitcast %struct.RealSet* %35 to i8*
  call void @free(i8* %36)
  %call29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0))
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %37 = load i32, i32* %i, align 4
  %inc = add nsw i32 %37, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %38 = load %struct.RealSet*, %struct.RealSet** %g, align 4
  %call30 = call zeroext i1 @empty(%struct.RealSet* %38)
  %conv31 = zext i1 %call30 to i32
  %call32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.5, i32 0, i32 0), i32 %conv31)
  %39 = load %struct.RealSet*, %struct.RealSet** %a, align 4
  %40 = bitcast %struct.RealSet* %39 to i8*
  call void @free(i8* %40)
  %41 = load %struct.RealSet*, %struct.RealSet** %b, align 4
  %42 = bitcast %struct.RealSet* %41 to i8*
  call void @free(i8* %42)
  %43 = load %struct.RealSet*, %struct.RealSet** %c, align 4
  %44 = bitcast %struct.RealSet* %43 to i8*
  call void @free(i8* %44)
  %45 = load %struct.RealSet*, %struct.RealSet** %d, align 4
  %46 = bitcast %struct.RealSet* %45 to i8*
  call void @free(i8* %46)
  %47 = load %struct.RealSet*, %struct.RealSet** %e, align 4
  %48 = bitcast %struct.RealSet* %47 to i8*
  call void @free(i8* %48)
  %49 = load %struct.RealSet*, %struct.RealSet** %f, align 4
  %50 = bitcast %struct.RealSet* %49 to i8*
  call void @free(i8* %50)
  %51 = load %struct.RealSet*, %struct.RealSet** %g, align 4
  %52 = bitcast %struct.RealSet* %51 to i8*
  call void @free(i8* %52)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #2

declare void @free(i8* %0) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %cmp = fcmp oeq double %1, %3
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call zeroext i1 %5(%struct.RealSet* %6, %struct.RealSet* null, double %8)
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %lnot = xor i1 %call, true
; Looking for a replacement for:
%0:i1 = var
%1:i1 = xor 1:i1, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp3 = fcmp oeq double %call2, 0.000000e+00
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i1, i1* %retval, align 1
; Looking for a replacement for:
%0:i1 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i1 = var
%1:i1 = xor 1:i1, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i1 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for empty()

; entering Souper's runOnFunction() for makeSet()

; ModuleID = './Set_of_real_numbers.c.bc'
source_filename = "./Set_of_real_numbers.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.RealSet = type { i1 (%struct.RealSet*, %struct.RealSet*, double)*, %struct.RealSet*, %struct.RealSet*, double, double }

@.str = private unnamed_addr constant [43 x i8] c"(0, 1]   union   [0, 2) contains %d is %d\0A\00", align 1
@.str.1 = private unnamed_addr constant [43 x i8] c"[0, 2) intersect (1, 2] contains %d is %d\0A\00", align 1
@.str.2 = private unnamed_addr constant [43 x i8] c"[0, 3)     -     (0, 1) contains %d is %d\0A\00", align 1
@.str.3 = private unnamed_addr constant [43 x i8] c"[0, 3)     -     [0, 1] contains %d is %d\0A\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.5 = private unnamed_addr constant [20 x i8] c"[0, 0] is empty %d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden double @length(%struct.RealSet* %self) #0 {
entry:
  %retval = alloca double, align 8
  %self.addr = alloca %struct.RealSet*, align 4
  %interval = alloca double, align 8
  %p = alloca double, align 8
  %count = alloca i32, align 4
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store double 1.000000e-05, double* %interval, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  store double %1, double* %p, align 8
  store i32 0, i32* %count, align 4
  %2 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %2, i32 0, i32 3
  %3 = load double, double* %low1, align 8
  %4 = call double @llvm.fabs.f64(double %3) #3
  %cmpinf = fcmp oeq double %4, 0x7FF0000000000000
  br i1 %cmpinf, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %5 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 4
  %6 = load double, double* %high, align 8
  %7 = call double @llvm.fabs.f64(double %6) #3
  %cmpinf2 = fcmp oeq double %7, 0x7FF0000000000000
  br i1 %cmpinf2, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store double -1.000000e+00, double* %retval, align 8
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %8 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %8, i32 0, i32 4
  %9 = load double, double* %high3, align 8
  %10 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %10, i32 0, i32 3
  %11 = load double, double* %low4, align 8
  %cmp = fcmp ole double %9, %11
  br i1 %cmp, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  store double 0.000000e+00, double* %retval, align 8
  br label %return

if.end6:                                          ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end6
  %12 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %12, i32 0, i32 0
  %13 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %14 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %15 = load double, double* %p, align 8
  %call = call zeroext i1 %13(%struct.RealSet* %14, %struct.RealSet* null, double %15)
  br i1 %call, label %if.then7, label %if.end8

if.then7:                                         ; preds = %do.body
  %16 = load i32, i32* %count, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %count, align 4
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %do.body
  %17 = load double, double* %p, align 8
  %add = fadd double %17, 1.000000e-05
  store double %add, double* %p, align 8
  br label %do.cond

do.cond:                                          ; preds = %if.end8
  %18 = load double, double* %p, align 8
  %19 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high9 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %19, i32 0, i32 4
  %20 = load double, double* %high9, align 8
  %cmp10 = fcmp olt double %18, %20
  br i1 %cmp10, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %21 = load i32, i32* %count, align 4
  %conv = sitofp i32 %21 to double
  %mul = fmul double %conv, 1.000000e-05
  store double %mul, double* %retval, align 8
  br label %return

return:                                           ; preds = %do.end, %if.then5, %if.then
  %22 = load double, double* %retval, align 8
  ret double %22
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @empty(%struct.RealSet* %self) #0 {
entry:
  %retval = alloca i1, align 1
  %self.addr = alloca %struct.RealSet*, align 4
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %2, i32 0, i32 4
  %3 = load double, double* %high, align 8
  %cmp = fcmp oeq double %1, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 0
  %5 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %7 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 3
  %8 = load double, double* %low1, align 8
  %call = call zeroext i1 %5(%struct.RealSet* %6, %struct.RealSet* null, double %8)
  %lnot = xor i1 %call, true
  store i1 %lnot, i1* %retval, align 1
  br label %return

if.end:                                           ; preds = %entry
  %9 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %call2 = call double @length(%struct.RealSet* %9)
  %cmp3 = fcmp oeq double %call2, 0.000000e+00
  store i1 %cmp3, i1* %retval, align 1
  br label %return

return:                                           ; preds = %if.end, %if.then
  %10 = load i1, i1* %retval, align 1
  ret i1 %10
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.RealSet* @makeSet(double %low, double %high, i32 %type) #0 {
entry:
  %retval = alloca %struct.RealSet*, align 4
  %low.addr = alloca double, align 8
  %high.addr = alloca double, align 8
  %type.addr = alloca i32, align 4
  %contains = alloca i1 (%struct.RealSet*, %struct.RealSet*, double)*, align 4
  %rs = alloca %struct.RealSet*, align 4
  store double %low, double* %low.addr, align 8
  store double %high, double* %high.addr, align 8
  store i32 %type, i32* %type.addr, align 4
  %0 = load i32, i32* %type.addr, align 4
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
    i32 2, label %sw.bb2
    i32 3, label %sw.bb3
  ]

sw.bb:                                            ; preds = %entry
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_closed, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  br label %sw.epilog

sw.bb1:                                           ; preds = %entry
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_left_open, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  br label %sw.epilog

sw.bb2:                                           ; preds = %entry
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_right_open, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  br label %sw.epilog

sw.bb3:                                           ; preds = %entry
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_both_open, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  store %struct.RealSet* null, %struct.RealSet** %retval, align 4
  br label %return

sw.epilog:                                        ; preds = %sw.bb3, %sw.bb2, %sw.bb1, %sw.bb
  %call = call noalias i8* @malloc(i32 32)
  %1 = bitcast i8* %call to %struct.RealSet*
  store %struct.RealSet* %1, %struct.RealSet** %rs, align 4
  %2 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  %3 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %contains4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 0
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* %2, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains4, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %left = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 1
  store %struct.RealSet* null, %struct.RealSet** %left, align 4
  %5 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %right = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 2
  store %struct.RealSet* null, %struct.RealSet** %right, align 8
  %6 = load double, double* %low.addr, align 8
  %7 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %low5 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 3
  store double %6, double* %low5, align 8
  %8 = load double, double* %high.addr, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %high6 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 4
  store double %8, double* %high6, align 8
  %10 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  store %struct.RealSet* %10, %struct.RealSet** %retval, align 4
  br label %return

return:                                           ; preds = %sw.epilog, %sw.default
  %11 = load %struct.RealSet*, %struct.RealSet** %retval, align 4
  ret %struct.RealSet* %11
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_closed(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load double, double* %d.addr, align 8
  %cmp = fcmp ole double %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %3 = load double, double* %d.addr, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 4
  %5 = load double, double* %high, align 8
  %cmp1 = fcmp ole double %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  ret i1 %6
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_left_open(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load double, double* %d.addr, align 8
  %cmp = fcmp olt double %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %3 = load double, double* %d.addr, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 4
  %5 = load double, double* %high, align 8
  %cmp1 = fcmp ole double %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  ret i1 %6
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_right_open(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load double, double* %d.addr, align 8
  %cmp = fcmp ole double %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %3 = load double, double* %d.addr, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 4
  %5 = load double, double* %high, align 8
  %cmp1 = fcmp olt double %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  ret i1 %6
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_both_open(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load double, double* %d.addr, align 8
  %cmp = fcmp olt double %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %3 = load double, double* %d.addr, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 4
  %5 = load double, double* %high, align 8
  %cmp1 = fcmp olt double %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  ret i1 %6
}

declare noalias i8* @malloc(i32 %0) #2

; Function Attrs: noinline nounwind optnone
define hidden %struct.RealSet* @makeIntersect(%struct.RealSet* %left, %struct.RealSet* %right) #0 {
entry:
  %left.addr = alloca %struct.RealSet*, align 4
  %right.addr = alloca %struct.RealSet*, align 4
  %rs = alloca %struct.RealSet*, align 4
  store %struct.RealSet* %left, %struct.RealSet** %left.addr, align 4
  store %struct.RealSet* %right, %struct.RealSet** %right.addr, align 4
  %call = call noalias i8* @malloc(i32 32)
  %0 = bitcast i8* %call to %struct.RealSet*
  store %struct.RealSet* %0, %struct.RealSet** %rs, align 4
  %1 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_intersect, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %2 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %3 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  store %struct.RealSet* %2, %struct.RealSet** %left1, align 4
  %4 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %5 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %right2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 2
  store %struct.RealSet* %4, %struct.RealSet** %right2, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 3
  %7 = load double, double* %low, align 8
  %8 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %low3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %8, i32 0, i32 3
  %9 = load double, double* %low3, align 8
  %10 = call double @llvm.minnum.f64(double %7, double %9)
  %11 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %low4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %11, i32 0, i32 3
  store double %10, double* %low4, align 8
  %12 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %12, i32 0, i32 4
  %13 = load double, double* %high, align 8
  %14 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %high5 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %14, i32 0, i32 4
  %15 = load double, double* %high5, align 8
  %16 = call double @llvm.minnum.f64(double %13, double %15)
  %17 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %high6 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %17, i32 0, i32 4
  store double %16, double* %high6, align 8
  %18 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  ret %struct.RealSet* %18
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_intersect(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 1
  %1 = load %struct.RealSet*, %struct.RealSet** %left, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  %2 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %3 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  %4 = load %struct.RealSet*, %struct.RealSet** %left1, align 4
  %5 = load double, double* %d.addr, align 8
  %call = call zeroext i1 %2(%struct.RealSet* %4, %struct.RealSet* null, double %5)
  br i1 %call, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %6 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 2
  %7 = load %struct.RealSet*, %struct.RealSet** %right, align 8
  %contains2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 0
  %8 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains2, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 2
  %10 = load %struct.RealSet*, %struct.RealSet** %right3, align 8
  %11 = load double, double* %d.addr, align 8
  %call4 = call zeroext i1 %8(%struct.RealSet* %10, %struct.RealSet* null, double %11)
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %12 = phi i1 [ false, %entry ], [ %call4, %land.rhs ]
  ret i1 %12
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.minnum.f64(double %0, double %1) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.RealSet* @makeUnion(%struct.RealSet* %left, %struct.RealSet* %right) #0 {
entry:
  %left.addr = alloca %struct.RealSet*, align 4
  %right.addr = alloca %struct.RealSet*, align 4
  %rs = alloca %struct.RealSet*, align 4
  store %struct.RealSet* %left, %struct.RealSet** %left.addr, align 4
  store %struct.RealSet* %right, %struct.RealSet** %right.addr, align 4
  %call = call noalias i8* @malloc(i32 32)
  %0 = bitcast i8* %call to %struct.RealSet*
  store %struct.RealSet* %0, %struct.RealSet** %rs, align 4
  %1 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_union, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %2 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %3 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  store %struct.RealSet* %2, %struct.RealSet** %left1, align 4
  %4 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %5 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %right2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 2
  store %struct.RealSet* %4, %struct.RealSet** %right2, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 3
  %7 = load double, double* %low, align 8
  %8 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %low3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %8, i32 0, i32 3
  %9 = load double, double* %low3, align 8
  %10 = call double @llvm.minnum.f64(double %7, double %9)
  %11 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %low4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %11, i32 0, i32 3
  store double %10, double* %low4, align 8
  %12 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %12, i32 0, i32 4
  %13 = load double, double* %high, align 8
  %14 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %high5 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %14, i32 0, i32 4
  %15 = load double, double* %high5, align 8
  %16 = call double @llvm.minnum.f64(double %13, double %15)
  %17 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %high6 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %17, i32 0, i32 4
  store double %16, double* %high6, align 8
  %18 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  ret %struct.RealSet* %18
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_union(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 1
  %1 = load %struct.RealSet*, %struct.RealSet** %left, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  %2 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %3 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  %4 = load %struct.RealSet*, %struct.RealSet** %left1, align 4
  %5 = load double, double* %d.addr, align 8
  %call = call zeroext i1 %2(%struct.RealSet* %4, %struct.RealSet* null, double %5)
  br i1 %call, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %6 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 2
  %7 = load %struct.RealSet*, %struct.RealSet** %right, align 8
  %contains2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 0
  %8 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains2, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 2
  %10 = load %struct.RealSet*, %struct.RealSet** %right3, align 8
  %11 = load double, double* %d.addr, align 8
  %call4 = call zeroext i1 %8(%struct.RealSet* %10, %struct.RealSet* null, double %11)
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %12 = phi i1 [ true, %entry ], [ %call4, %lor.rhs ]
  ret i1 %12
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.RealSet* @makeSubtract(%struct.RealSet* %left, %struct.RealSet* %right) #0 {
entry:
  %left.addr = alloca %struct.RealSet*, align 4
  %right.addr = alloca %struct.RealSet*, align 4
  %rs = alloca %struct.RealSet*, align 4
  store %struct.RealSet* %left, %struct.RealSet** %left.addr, align 4
  store %struct.RealSet* %right, %struct.RealSet** %right.addr, align 4
  %call = call noalias i8* @malloc(i32 32)
  %0 = bitcast i8* %call to %struct.RealSet*
  store %struct.RealSet* %0, %struct.RealSet** %rs, align 4
  %1 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_subtract, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %2 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %3 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  store %struct.RealSet* %2, %struct.RealSet** %left1, align 4
  %4 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %5 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %right2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 2
  store %struct.RealSet* %4, %struct.RealSet** %right2, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 3
  %7 = load double, double* %low, align 8
  %8 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %low3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %8, i32 0, i32 3
  store double %7, double* %low3, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 4
  %10 = load double, double* %high, align 8
  %11 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %high4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %11, i32 0, i32 4
  store double %10, double* %high4, align 8
  %12 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  ret %struct.RealSet* %12
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_subtract(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 1
  %1 = load %struct.RealSet*, %struct.RealSet** %left, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  %2 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %3 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  %4 = load %struct.RealSet*, %struct.RealSet** %left1, align 4
  %5 = load double, double* %d.addr, align 8
  %call = call zeroext i1 %2(%struct.RealSet* %4, %struct.RealSet* null, double %5)
  br i1 %call, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %6 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 2
  %7 = load %struct.RealSet*, %struct.RealSet** %right, align 8
  %contains2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 0
  %8 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains2, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 2
  %10 = load %struct.RealSet*, %struct.RealSet** %right3, align 8
  %11 = load double, double* %d.addr, align 8
  %call4 = call zeroext i1 %8(%struct.RealSet* %10, %struct.RealSet* null, double %11)
  %lnot = xor i1 %call4, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %12 = phi i1 [ false, %entry ], [ %lnot, %land.rhs ]
  ret i1 %12
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %a = alloca %struct.RealSet*, align 4
  %b = alloca %struct.RealSet*, align 4
  %c = alloca %struct.RealSet*, align 4
  %d = alloca %struct.RealSet*, align 4
  %e = alloca %struct.RealSet*, align 4
  %f = alloca %struct.RealSet*, align 4
  %g = alloca %struct.RealSet*, align 4
  %i = alloca i32, align 4
  %t = alloca %struct.RealSet*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.RealSet* @makeSet(double 0.000000e+00, double 1.000000e+00, i32 1)
  store %struct.RealSet* %call, %struct.RealSet** %a, align 4
  %call1 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 2.000000e+00, i32 2)
  store %struct.RealSet* %call1, %struct.RealSet** %b, align 4
  %call2 = call %struct.RealSet* @makeSet(double 1.000000e+00, double 2.000000e+00, i32 1)
  store %struct.RealSet* %call2, %struct.RealSet** %c, align 4
  %call3 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 3.000000e+00, i32 2)
  store %struct.RealSet* %call3, %struct.RealSet** %d, align 4
  %call4 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 1.000000e+00, i32 3)
  store %struct.RealSet* %call4, %struct.RealSet** %e, align 4
  %call5 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 1.000000e+00, i32 0)
  store %struct.RealSet* %call5, %struct.RealSet** %f, align 4
  %call6 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 0.000000e+00, i32 0)
  store %struct.RealSet* %call6, %struct.RealSet** %g, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load %struct.RealSet*, %struct.RealSet** %a, align 4
  %2 = load %struct.RealSet*, %struct.RealSet** %b, align 4
  %call7 = call %struct.RealSet* @makeUnion(%struct.RealSet* %1, %struct.RealSet* %2)
  store %struct.RealSet* %call7, %struct.RealSet** %t, align 4
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 0
  %5 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %7 = load i32, i32* %i, align 4
  %conv = sitofp i32 %7 to double
  %call8 = call zeroext i1 %5(%struct.RealSet* %6, %struct.RealSet* null, double %conv)
  %conv9 = zext i1 %call8 to i32
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str, i32 0, i32 0), i32 %3, i32 %conv9)
  %8 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %9 = bitcast %struct.RealSet* %8 to i8*
  call void @free(i8* %9)
  %10 = load %struct.RealSet*, %struct.RealSet** %b, align 4
  %11 = load %struct.RealSet*, %struct.RealSet** %c, align 4
  %call11 = call %struct.RealSet* @makeIntersect(%struct.RealSet* %10, %struct.RealSet* %11)
  store %struct.RealSet* %call11, %struct.RealSet** %t, align 4
  %12 = load i32, i32* %i, align 4
  %13 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %contains12 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %13, i32 0, i32 0
  %14 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains12, align 8
  %15 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %16 = load i32, i32* %i, align 4
  %conv13 = sitofp i32 %16 to double
  %call14 = call zeroext i1 %14(%struct.RealSet* %15, %struct.RealSet* null, double %conv13)
  %conv15 = zext i1 %call14 to i32
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.1, i32 0, i32 0), i32 %12, i32 %conv15)
  %17 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %18 = bitcast %struct.RealSet* %17 to i8*
  call void @free(i8* %18)
  %19 = load %struct.RealSet*, %struct.RealSet** %d, align 4
  %20 = load %struct.RealSet*, %struct.RealSet** %e, align 4
  %call17 = call %struct.RealSet* @makeSubtract(%struct.RealSet* %19, %struct.RealSet* %20)
  store %struct.RealSet* %call17, %struct.RealSet** %t, align 4
  %21 = load i32, i32* %i, align 4
  %22 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %contains18 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %22, i32 0, i32 0
  %23 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains18, align 8
  %24 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %25 = load i32, i32* %i, align 4
  %conv19 = sitofp i32 %25 to double
  %call20 = call zeroext i1 %23(%struct.RealSet* %24, %struct.RealSet* null, double %conv19)
  %conv21 = zext i1 %call20 to i32
  %call22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.2, i32 0, i32 0), i32 %21, i32 %conv21)
  %26 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %27 = bitcast %struct.RealSet* %26 to i8*
  call void @free(i8* %27)
  %28 = load %struct.RealSet*, %struct.RealSet** %d, align 4
  %29 = load %struct.RealSet*, %struct.RealSet** %f, align 4
  %call23 = call %struct.RealSet* @makeSubtract(%struct.RealSet* %28, %struct.RealSet* %29)
  store %struct.RealSet* %call23, %struct.RealSet** %t, align 4
  %30 = load i32, i32* %i, align 4
  %31 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %contains24 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %31, i32 0, i32 0
  %32 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains24, align 8
  %33 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %34 = load i32, i32* %i, align 4
  %conv25 = sitofp i32 %34 to double
  %call26 = call zeroext i1 %32(%struct.RealSet* %33, %struct.RealSet* null, double %conv25)
  %conv27 = zext i1 %call26 to i32
  %call28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.3, i32 0, i32 0), i32 %30, i32 %conv27)
  %35 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %36 = bitcast %struct.RealSet* %35 to i8*
  call void @free(i8* %36)
  %call29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0))
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %37 = load i32, i32* %i, align 4
  %inc = add nsw i32 %37, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %38 = load %struct.RealSet*, %struct.RealSet** %g, align 4
  %call30 = call zeroext i1 @empty(%struct.RealSet* %38)
  %conv31 = zext i1 %call30 to i32
  %call32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.5, i32 0, i32 0), i32 %conv31)
  %39 = load %struct.RealSet*, %struct.RealSet** %a, align 4
  %40 = bitcast %struct.RealSet* %39 to i8*
  call void @free(i8* %40)
  %41 = load %struct.RealSet*, %struct.RealSet** %b, align 4
  %42 = bitcast %struct.RealSet* %41 to i8*
  call void @free(i8* %42)
  %43 = load %struct.RealSet*, %struct.RealSet** %c, align 4
  %44 = bitcast %struct.RealSet* %43 to i8*
  call void @free(i8* %44)
  %45 = load %struct.RealSet*, %struct.RealSet** %d, align 4
  %46 = bitcast %struct.RealSet* %45 to i8*
  call void @free(i8* %46)
  %47 = load %struct.RealSet*, %struct.RealSet** %e, align 4
  %48 = bitcast %struct.RealSet* %47 to i8*
  call void @free(i8* %48)
  %49 = load %struct.RealSet*, %struct.RealSet** %f, align 4
  %50 = bitcast %struct.RealSet* %49 to i8*
  call void @free(i8* %50)
  %51 = load %struct.RealSet*, %struct.RealSet** %g, align 4
  %52 = bitcast %struct.RealSet* %51 to i8*
  call void @free(i8* %52)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #2

declare void @free(i8* %0) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %type.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for makeSet()

; entering Souper's runOnFunction() for ./Set_of_real_numbers.c.bc:contains_closed()

; ModuleID = './Set_of_real_numbers.c.bc'
source_filename = "./Set_of_real_numbers.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.RealSet = type { i1 (%struct.RealSet*, %struct.RealSet*, double)*, %struct.RealSet*, %struct.RealSet*, double, double }

@.str = private unnamed_addr constant [43 x i8] c"(0, 1]   union   [0, 2) contains %d is %d\0A\00", align 1
@.str.1 = private unnamed_addr constant [43 x i8] c"[0, 2) intersect (1, 2] contains %d is %d\0A\00", align 1
@.str.2 = private unnamed_addr constant [43 x i8] c"[0, 3)     -     (0, 1) contains %d is %d\0A\00", align 1
@.str.3 = private unnamed_addr constant [43 x i8] c"[0, 3)     -     [0, 1] contains %d is %d\0A\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.5 = private unnamed_addr constant [20 x i8] c"[0, 0] is empty %d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden double @length(%struct.RealSet* %self) #0 {
entry:
  %retval = alloca double, align 8
  %self.addr = alloca %struct.RealSet*, align 4
  %interval = alloca double, align 8
  %p = alloca double, align 8
  %count = alloca i32, align 4
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store double 1.000000e-05, double* %interval, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  store double %1, double* %p, align 8
  store i32 0, i32* %count, align 4
  %2 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %2, i32 0, i32 3
  %3 = load double, double* %low1, align 8
  %4 = call double @llvm.fabs.f64(double %3) #3
  %cmpinf = fcmp oeq double %4, 0x7FF0000000000000
  br i1 %cmpinf, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %5 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 4
  %6 = load double, double* %high, align 8
  %7 = call double @llvm.fabs.f64(double %6) #3
  %cmpinf2 = fcmp oeq double %7, 0x7FF0000000000000
  br i1 %cmpinf2, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store double -1.000000e+00, double* %retval, align 8
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %8 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %8, i32 0, i32 4
  %9 = load double, double* %high3, align 8
  %10 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %10, i32 0, i32 3
  %11 = load double, double* %low4, align 8
  %cmp = fcmp ole double %9, %11
  br i1 %cmp, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  store double 0.000000e+00, double* %retval, align 8
  br label %return

if.end6:                                          ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end6
  %12 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %12, i32 0, i32 0
  %13 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %14 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %15 = load double, double* %p, align 8
  %call = call zeroext i1 %13(%struct.RealSet* %14, %struct.RealSet* null, double %15)
  br i1 %call, label %if.then7, label %if.end8

if.then7:                                         ; preds = %do.body
  %16 = load i32, i32* %count, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %count, align 4
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %do.body
  %17 = load double, double* %p, align 8
  %add = fadd double %17, 1.000000e-05
  store double %add, double* %p, align 8
  br label %do.cond

do.cond:                                          ; preds = %if.end8
  %18 = load double, double* %p, align 8
  %19 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high9 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %19, i32 0, i32 4
  %20 = load double, double* %high9, align 8
  %cmp10 = fcmp olt double %18, %20
  br i1 %cmp10, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %21 = load i32, i32* %count, align 4
  %conv = sitofp i32 %21 to double
  %mul = fmul double %conv, 1.000000e-05
  store double %mul, double* %retval, align 8
  br label %return

return:                                           ; preds = %do.end, %if.then5, %if.then
  %22 = load double, double* %retval, align 8
  ret double %22
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @empty(%struct.RealSet* %self) #0 {
entry:
  %retval = alloca i1, align 1
  %self.addr = alloca %struct.RealSet*, align 4
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %2, i32 0, i32 4
  %3 = load double, double* %high, align 8
  %cmp = fcmp oeq double %1, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 0
  %5 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %7 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 3
  %8 = load double, double* %low1, align 8
  %call = call zeroext i1 %5(%struct.RealSet* %6, %struct.RealSet* null, double %8)
  %lnot = xor i1 %call, true
  store i1 %lnot, i1* %retval, align 1
  br label %return

if.end:                                           ; preds = %entry
  %9 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %call2 = call double @length(%struct.RealSet* %9)
  %cmp3 = fcmp oeq double %call2, 0.000000e+00
  store i1 %cmp3, i1* %retval, align 1
  br label %return

return:                                           ; preds = %if.end, %if.then
  %10 = load i1, i1* %retval, align 1
  ret i1 %10
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.RealSet* @makeSet(double %low, double %high, i32 %type) #0 {
entry:
  %retval = alloca %struct.RealSet*, align 4
  %low.addr = alloca double, align 8
  %high.addr = alloca double, align 8
  %type.addr = alloca i32, align 4
  %contains = alloca i1 (%struct.RealSet*, %struct.RealSet*, double)*, align 4
  %rs = alloca %struct.RealSet*, align 4
  store double %low, double* %low.addr, align 8
  store double %high, double* %high.addr, align 8
  store i32 %type, i32* %type.addr, align 4
  %0 = load i32, i32* %type.addr, align 4
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
    i32 2, label %sw.bb2
    i32 3, label %sw.bb3
  ]

sw.bb:                                            ; preds = %entry
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_closed, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  br label %sw.epilog

sw.bb1:                                           ; preds = %entry
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_left_open, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  br label %sw.epilog

sw.bb2:                                           ; preds = %entry
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_right_open, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  br label %sw.epilog

sw.bb3:                                           ; preds = %entry
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_both_open, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  store %struct.RealSet* null, %struct.RealSet** %retval, align 4
  br label %return

sw.epilog:                                        ; preds = %sw.bb3, %sw.bb2, %sw.bb1, %sw.bb
  %call = call noalias i8* @malloc(i32 32)
  %1 = bitcast i8* %call to %struct.RealSet*
  store %struct.RealSet* %1, %struct.RealSet** %rs, align 4
  %2 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  %3 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %contains4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 0
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* %2, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains4, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %left = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 1
  store %struct.RealSet* null, %struct.RealSet** %left, align 4
  %5 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %right = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 2
  store %struct.RealSet* null, %struct.RealSet** %right, align 8
  %6 = load double, double* %low.addr, align 8
  %7 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %low5 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 3
  store double %6, double* %low5, align 8
  %8 = load double, double* %high.addr, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %high6 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 4
  store double %8, double* %high6, align 8
  %10 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  store %struct.RealSet* %10, %struct.RealSet** %retval, align 4
  br label %return

return:                                           ; preds = %sw.epilog, %sw.default
  %11 = load %struct.RealSet*, %struct.RealSet** %retval, align 4
  ret %struct.RealSet* %11
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_closed(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load double, double* %d.addr, align 8
  %cmp = fcmp ole double %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %3 = load double, double* %d.addr, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 4
  %5 = load double, double* %high, align 8
  %cmp1 = fcmp ole double %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  ret i1 %6
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_left_open(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load double, double* %d.addr, align 8
  %cmp = fcmp olt double %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %3 = load double, double* %d.addr, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 4
  %5 = load double, double* %high, align 8
  %cmp1 = fcmp ole double %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  ret i1 %6
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_right_open(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load double, double* %d.addr, align 8
  %cmp = fcmp ole double %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %3 = load double, double* %d.addr, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 4
  %5 = load double, double* %high, align 8
  %cmp1 = fcmp olt double %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  ret i1 %6
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_both_open(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load double, double* %d.addr, align 8
  %cmp = fcmp olt double %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %3 = load double, double* %d.addr, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 4
  %5 = load double, double* %high, align 8
  %cmp1 = fcmp olt double %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  ret i1 %6
}

declare noalias i8* @malloc(i32 %0) #2

; Function Attrs: noinline nounwind optnone
define hidden %struct.RealSet* @makeIntersect(%struct.RealSet* %left, %struct.RealSet* %right) #0 {
entry:
  %left.addr = alloca %struct.RealSet*, align 4
  %right.addr = alloca %struct.RealSet*, align 4
  %rs = alloca %struct.RealSet*, align 4
  store %struct.RealSet* %left, %struct.RealSet** %left.addr, align 4
  store %struct.RealSet* %right, %struct.RealSet** %right.addr, align 4
  %call = call noalias i8* @malloc(i32 32)
  %0 = bitcast i8* %call to %struct.RealSet*
  store %struct.RealSet* %0, %struct.RealSet** %rs, align 4
  %1 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_intersect, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %2 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %3 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  store %struct.RealSet* %2, %struct.RealSet** %left1, align 4
  %4 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %5 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %right2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 2
  store %struct.RealSet* %4, %struct.RealSet** %right2, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 3
  %7 = load double, double* %low, align 8
  %8 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %low3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %8, i32 0, i32 3
  %9 = load double, double* %low3, align 8
  %10 = call double @llvm.minnum.f64(double %7, double %9)
  %11 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %low4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %11, i32 0, i32 3
  store double %10, double* %low4, align 8
  %12 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %12, i32 0, i32 4
  %13 = load double, double* %high, align 8
  %14 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %high5 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %14, i32 0, i32 4
  %15 = load double, double* %high5, align 8
  %16 = call double @llvm.minnum.f64(double %13, double %15)
  %17 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %high6 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %17, i32 0, i32 4
  store double %16, double* %high6, align 8
  %18 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  ret %struct.RealSet* %18
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_intersect(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 1
  %1 = load %struct.RealSet*, %struct.RealSet** %left, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  %2 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %3 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  %4 = load %struct.RealSet*, %struct.RealSet** %left1, align 4
  %5 = load double, double* %d.addr, align 8
  %call = call zeroext i1 %2(%struct.RealSet* %4, %struct.RealSet* null, double %5)
  br i1 %call, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %6 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 2
  %7 = load %struct.RealSet*, %struct.RealSet** %right, align 8
  %contains2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 0
  %8 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains2, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 2
  %10 = load %struct.RealSet*, %struct.RealSet** %right3, align 8
  %11 = load double, double* %d.addr, align 8
  %call4 = call zeroext i1 %8(%struct.RealSet* %10, %struct.RealSet* null, double %11)
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %12 = phi i1 [ false, %entry ], [ %call4, %land.rhs ]
  ret i1 %12
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.minnum.f64(double %0, double %1) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.RealSet* @makeUnion(%struct.RealSet* %left, %struct.RealSet* %right) #0 {
entry:
  %left.addr = alloca %struct.RealSet*, align 4
  %right.addr = alloca %struct.RealSet*, align 4
  %rs = alloca %struct.RealSet*, align 4
  store %struct.RealSet* %left, %struct.RealSet** %left.addr, align 4
  store %struct.RealSet* %right, %struct.RealSet** %right.addr, align 4
  %call = call noalias i8* @malloc(i32 32)
  %0 = bitcast i8* %call to %struct.RealSet*
  store %struct.RealSet* %0, %struct.RealSet** %rs, align 4
  %1 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_union, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %2 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %3 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  store %struct.RealSet* %2, %struct.RealSet** %left1, align 4
  %4 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %5 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %right2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 2
  store %struct.RealSet* %4, %struct.RealSet** %right2, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 3
  %7 = load double, double* %low, align 8
  %8 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %low3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %8, i32 0, i32 3
  %9 = load double, double* %low3, align 8
  %10 = call double @llvm.minnum.f64(double %7, double %9)
  %11 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %low4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %11, i32 0, i32 3
  store double %10, double* %low4, align 8
  %12 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %12, i32 0, i32 4
  %13 = load double, double* %high, align 8
  %14 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %high5 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %14, i32 0, i32 4
  %15 = load double, double* %high5, align 8
  %16 = call double @llvm.minnum.f64(double %13, double %15)
  %17 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %high6 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %17, i32 0, i32 4
  store double %16, double* %high6, align 8
  %18 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  ret %struct.RealSet* %18
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_union(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 1
  %1 = load %struct.RealSet*, %struct.RealSet** %left, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  %2 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %3 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  %4 = load %struct.RealSet*, %struct.RealSet** %left1, align 4
  %5 = load double, double* %d.addr, align 8
  %call = call zeroext i1 %2(%struct.RealSet* %4, %struct.RealSet* null, double %5)
  br i1 %call, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %6 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 2
  %7 = load %struct.RealSet*, %struct.RealSet** %right, align 8
  %contains2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 0
  %8 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains2, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 2
  %10 = load %struct.RealSet*, %struct.RealSet** %right3, align 8
  %11 = load double, double* %d.addr, align 8
  %call4 = call zeroext i1 %8(%struct.RealSet* %10, %struct.RealSet* null, double %11)
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %12 = phi i1 [ true, %entry ], [ %call4, %lor.rhs ]
  ret i1 %12
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.RealSet* @makeSubtract(%struct.RealSet* %left, %struct.RealSet* %right) #0 {
entry:
  %left.addr = alloca %struct.RealSet*, align 4
  %right.addr = alloca %struct.RealSet*, align 4
  %rs = alloca %struct.RealSet*, align 4
  store %struct.RealSet* %left, %struct.RealSet** %left.addr, align 4
  store %struct.RealSet* %right, %struct.RealSet** %right.addr, align 4
  %call = call noalias i8* @malloc(i32 32)
  %0 = bitcast i8* %call to %struct.RealSet*
  store %struct.RealSet* %0, %struct.RealSet** %rs, align 4
  %1 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_subtract, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %2 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %3 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  store %struct.RealSet* %2, %struct.RealSet** %left1, align 4
  %4 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %5 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %right2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 2
  store %struct.RealSet* %4, %struct.RealSet** %right2, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 3
  %7 = load double, double* %low, align 8
  %8 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %low3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %8, i32 0, i32 3
  store double %7, double* %low3, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 4
  %10 = load double, double* %high, align 8
  %11 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %high4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %11, i32 0, i32 4
  store double %10, double* %high4, align 8
  %12 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  ret %struct.RealSet* %12
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_subtract(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 1
  %1 = load %struct.RealSet*, %struct.RealSet** %left, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  %2 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %3 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  %4 = load %struct.RealSet*, %struct.RealSet** %left1, align 4
  %5 = load double, double* %d.addr, align 8
  %call = call zeroext i1 %2(%struct.RealSet* %4, %struct.RealSet* null, double %5)
  br i1 %call, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %6 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 2
  %7 = load %struct.RealSet*, %struct.RealSet** %right, align 8
  %contains2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 0
  %8 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains2, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 2
  %10 = load %struct.RealSet*, %struct.RealSet** %right3, align 8
  %11 = load double, double* %d.addr, align 8
  %call4 = call zeroext i1 %8(%struct.RealSet* %10, %struct.RealSet* null, double %11)
  %lnot = xor i1 %call4, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %12 = phi i1 [ false, %entry ], [ %lnot, %land.rhs ]
  ret i1 %12
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %a = alloca %struct.RealSet*, align 4
  %b = alloca %struct.RealSet*, align 4
  %c = alloca %struct.RealSet*, align 4
  %d = alloca %struct.RealSet*, align 4
  %e = alloca %struct.RealSet*, align 4
  %f = alloca %struct.RealSet*, align 4
  %g = alloca %struct.RealSet*, align 4
  %i = alloca i32, align 4
  %t = alloca %struct.RealSet*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.RealSet* @makeSet(double 0.000000e+00, double 1.000000e+00, i32 1)
  store %struct.RealSet* %call, %struct.RealSet** %a, align 4
  %call1 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 2.000000e+00, i32 2)
  store %struct.RealSet* %call1, %struct.RealSet** %b, align 4
  %call2 = call %struct.RealSet* @makeSet(double 1.000000e+00, double 2.000000e+00, i32 1)
  store %struct.RealSet* %call2, %struct.RealSet** %c, align 4
  %call3 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 3.000000e+00, i32 2)
  store %struct.RealSet* %call3, %struct.RealSet** %d, align 4
  %call4 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 1.000000e+00, i32 3)
  store %struct.RealSet* %call4, %struct.RealSet** %e, align 4
  %call5 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 1.000000e+00, i32 0)
  store %struct.RealSet* %call5, %struct.RealSet** %f, align 4
  %call6 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 0.000000e+00, i32 0)
  store %struct.RealSet* %call6, %struct.RealSet** %g, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load %struct.RealSet*, %struct.RealSet** %a, align 4
  %2 = load %struct.RealSet*, %struct.RealSet** %b, align 4
  %call7 = call %struct.RealSet* @makeUnion(%struct.RealSet* %1, %struct.RealSet* %2)
  store %struct.RealSet* %call7, %struct.RealSet** %t, align 4
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 0
  %5 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %7 = load i32, i32* %i, align 4
  %conv = sitofp i32 %7 to double
  %call8 = call zeroext i1 %5(%struct.RealSet* %6, %struct.RealSet* null, double %conv)
  %conv9 = zext i1 %call8 to i32
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str, i32 0, i32 0), i32 %3, i32 %conv9)
  %8 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %9 = bitcast %struct.RealSet* %8 to i8*
  call void @free(i8* %9)
  %10 = load %struct.RealSet*, %struct.RealSet** %b, align 4
  %11 = load %struct.RealSet*, %struct.RealSet** %c, align 4
  %call11 = call %struct.RealSet* @makeIntersect(%struct.RealSet* %10, %struct.RealSet* %11)
  store %struct.RealSet* %call11, %struct.RealSet** %t, align 4
  %12 = load i32, i32* %i, align 4
  %13 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %contains12 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %13, i32 0, i32 0
  %14 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains12, align 8
  %15 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %16 = load i32, i32* %i, align 4
  %conv13 = sitofp i32 %16 to double
  %call14 = call zeroext i1 %14(%struct.RealSet* %15, %struct.RealSet* null, double %conv13)
  %conv15 = zext i1 %call14 to i32
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.1, i32 0, i32 0), i32 %12, i32 %conv15)
  %17 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %18 = bitcast %struct.RealSet* %17 to i8*
  call void @free(i8* %18)
  %19 = load %struct.RealSet*, %struct.RealSet** %d, align 4
  %20 = load %struct.RealSet*, %struct.RealSet** %e, align 4
  %call17 = call %struct.RealSet* @makeSubtract(%struct.RealSet* %19, %struct.RealSet* %20)
  store %struct.RealSet* %call17, %struct.RealSet** %t, align 4
  %21 = load i32, i32* %i, align 4
  %22 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %contains18 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %22, i32 0, i32 0
  %23 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains18, align 8
  %24 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %25 = load i32, i32* %i, align 4
  %conv19 = sitofp i32 %25 to double
  %call20 = call zeroext i1 %23(%struct.RealSet* %24, %struct.RealSet* null, double %conv19)
  %conv21 = zext i1 %call20 to i32
  %call22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.2, i32 0, i32 0), i32 %21, i32 %conv21)
  %26 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %27 = bitcast %struct.RealSet* %26 to i8*
  call void @free(i8* %27)
  %28 = load %struct.RealSet*, %struct.RealSet** %d, align 4
  %29 = load %struct.RealSet*, %struct.RealSet** %f, align 4
  %call23 = call %struct.RealSet* @makeSubtract(%struct.RealSet* %28, %struct.RealSet* %29)
  store %struct.RealSet* %call23, %struct.RealSet** %t, align 4
  %30 = load i32, i32* %i, align 4
  %31 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %contains24 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %31, i32 0, i32 0
  %32 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains24, align 8
  %33 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %34 = load i32, i32* %i, align 4
  %conv25 = sitofp i32 %34 to double
  %call26 = call zeroext i1 %32(%struct.RealSet* %33, %struct.RealSet* null, double %conv25)
  %conv27 = zext i1 %call26 to i32
  %call28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.3, i32 0, i32 0), i32 %30, i32 %conv27)
  %35 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %36 = bitcast %struct.RealSet* %35 to i8*
  call void @free(i8* %36)
  %call29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0))
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %37 = load i32, i32* %i, align 4
  %inc = add nsw i32 %37, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %38 = load %struct.RealSet*, %struct.RealSet** %g, align 4
  %call30 = call zeroext i1 @empty(%struct.RealSet* %38)
  %conv31 = zext i1 %call30 to i32
  %call32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.5, i32 0, i32 0), i32 %conv31)
  %39 = load %struct.RealSet*, %struct.RealSet** %a, align 4
  %40 = bitcast %struct.RealSet* %39 to i8*
  call void @free(i8* %40)
  %41 = load %struct.RealSet*, %struct.RealSet** %b, align 4
  %42 = bitcast %struct.RealSet* %41 to i8*
  call void @free(i8* %42)
  %43 = load %struct.RealSet*, %struct.RealSet** %c, align 4
  %44 = bitcast %struct.RealSet* %43 to i8*
  call void @free(i8* %44)
  %45 = load %struct.RealSet*, %struct.RealSet** %d, align 4
  %46 = bitcast %struct.RealSet* %45 to i8*
  call void @free(i8* %46)
  %47 = load %struct.RealSet*, %struct.RealSet** %e, align 4
  %48 = bitcast %struct.RealSet* %47 to i8*
  call void @free(i8* %48)
  %49 = load %struct.RealSet*, %struct.RealSet** %f, align 4
  %50 = bitcast %struct.RealSet* %49 to i8*
  call void @free(i8* %50)
  %51 = load %struct.RealSet*, %struct.RealSet** %g, align 4
  %52 = bitcast %struct.RealSet* %51 to i8*
  call void @free(i8* %52)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #2

declare void @free(i8* %0) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %cmp = fcmp ole double %1, %2
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = fcmp ole double %3, %5
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
; Looking for a replacement for:
%0 = block 2
%1:i1 = var
%2:i1 = phi %0, 0:i1, %1
infer %2
got 2 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i1 = var
%2:i1 = phi %0, 0:i1, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i1 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for ./Set_of_real_numbers.c.bc:contains_closed()

; entering Souper's runOnFunction() for ./Set_of_real_numbers.c.bc:contains_left_open()

; ModuleID = './Set_of_real_numbers.c.bc'
source_filename = "./Set_of_real_numbers.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.RealSet = type { i1 (%struct.RealSet*, %struct.RealSet*, double)*, %struct.RealSet*, %struct.RealSet*, double, double }

@.str = private unnamed_addr constant [43 x i8] c"(0, 1]   union   [0, 2) contains %d is %d\0A\00", align 1
@.str.1 = private unnamed_addr constant [43 x i8] c"[0, 2) intersect (1, 2] contains %d is %d\0A\00", align 1
@.str.2 = private unnamed_addr constant [43 x i8] c"[0, 3)     -     (0, 1) contains %d is %d\0A\00", align 1
@.str.3 = private unnamed_addr constant [43 x i8] c"[0, 3)     -     [0, 1] contains %d is %d\0A\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.5 = private unnamed_addr constant [20 x i8] c"[0, 0] is empty %d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden double @length(%struct.RealSet* %self) #0 {
entry:
  %retval = alloca double, align 8
  %self.addr = alloca %struct.RealSet*, align 4
  %interval = alloca double, align 8
  %p = alloca double, align 8
  %count = alloca i32, align 4
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store double 1.000000e-05, double* %interval, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  store double %1, double* %p, align 8
  store i32 0, i32* %count, align 4
  %2 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %2, i32 0, i32 3
  %3 = load double, double* %low1, align 8
  %4 = call double @llvm.fabs.f64(double %3) #3
  %cmpinf = fcmp oeq double %4, 0x7FF0000000000000
  br i1 %cmpinf, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %5 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 4
  %6 = load double, double* %high, align 8
  %7 = call double @llvm.fabs.f64(double %6) #3
  %cmpinf2 = fcmp oeq double %7, 0x7FF0000000000000
  br i1 %cmpinf2, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store double -1.000000e+00, double* %retval, align 8
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %8 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %8, i32 0, i32 4
  %9 = load double, double* %high3, align 8
  %10 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %10, i32 0, i32 3
  %11 = load double, double* %low4, align 8
  %cmp = fcmp ole double %9, %11
  br i1 %cmp, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  store double 0.000000e+00, double* %retval, align 8
  br label %return

if.end6:                                          ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end6
  %12 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %12, i32 0, i32 0
  %13 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %14 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %15 = load double, double* %p, align 8
  %call = call zeroext i1 %13(%struct.RealSet* %14, %struct.RealSet* null, double %15)
  br i1 %call, label %if.then7, label %if.end8

if.then7:                                         ; preds = %do.body
  %16 = load i32, i32* %count, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %count, align 4
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %do.body
  %17 = load double, double* %p, align 8
  %add = fadd double %17, 1.000000e-05
  store double %add, double* %p, align 8
  br label %do.cond

do.cond:                                          ; preds = %if.end8
  %18 = load double, double* %p, align 8
  %19 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high9 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %19, i32 0, i32 4
  %20 = load double, double* %high9, align 8
  %cmp10 = fcmp olt double %18, %20
  br i1 %cmp10, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %21 = load i32, i32* %count, align 4
  %conv = sitofp i32 %21 to double
  %mul = fmul double %conv, 1.000000e-05
  store double %mul, double* %retval, align 8
  br label %return

return:                                           ; preds = %do.end, %if.then5, %if.then
  %22 = load double, double* %retval, align 8
  ret double %22
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @empty(%struct.RealSet* %self) #0 {
entry:
  %retval = alloca i1, align 1
  %self.addr = alloca %struct.RealSet*, align 4
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %2, i32 0, i32 4
  %3 = load double, double* %high, align 8
  %cmp = fcmp oeq double %1, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 0
  %5 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %7 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 3
  %8 = load double, double* %low1, align 8
  %call = call zeroext i1 %5(%struct.RealSet* %6, %struct.RealSet* null, double %8)
  %lnot = xor i1 %call, true
  store i1 %lnot, i1* %retval, align 1
  br label %return

if.end:                                           ; preds = %entry
  %9 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %call2 = call double @length(%struct.RealSet* %9)
  %cmp3 = fcmp oeq double %call2, 0.000000e+00
  store i1 %cmp3, i1* %retval, align 1
  br label %return

return:                                           ; preds = %if.end, %if.then
  %10 = load i1, i1* %retval, align 1
  ret i1 %10
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.RealSet* @makeSet(double %low, double %high, i32 %type) #0 {
entry:
  %retval = alloca %struct.RealSet*, align 4
  %low.addr = alloca double, align 8
  %high.addr = alloca double, align 8
  %type.addr = alloca i32, align 4
  %contains = alloca i1 (%struct.RealSet*, %struct.RealSet*, double)*, align 4
  %rs = alloca %struct.RealSet*, align 4
  store double %low, double* %low.addr, align 8
  store double %high, double* %high.addr, align 8
  store i32 %type, i32* %type.addr, align 4
  %0 = load i32, i32* %type.addr, align 4
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
    i32 2, label %sw.bb2
    i32 3, label %sw.bb3
  ]

sw.bb:                                            ; preds = %entry
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_closed, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  br label %sw.epilog

sw.bb1:                                           ; preds = %entry
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_left_open, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  br label %sw.epilog

sw.bb2:                                           ; preds = %entry
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_right_open, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  br label %sw.epilog

sw.bb3:                                           ; preds = %entry
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_both_open, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  store %struct.RealSet* null, %struct.RealSet** %retval, align 4
  br label %return

sw.epilog:                                        ; preds = %sw.bb3, %sw.bb2, %sw.bb1, %sw.bb
  %call = call noalias i8* @malloc(i32 32)
  %1 = bitcast i8* %call to %struct.RealSet*
  store %struct.RealSet* %1, %struct.RealSet** %rs, align 4
  %2 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  %3 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %contains4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 0
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* %2, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains4, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %left = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 1
  store %struct.RealSet* null, %struct.RealSet** %left, align 4
  %5 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %right = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 2
  store %struct.RealSet* null, %struct.RealSet** %right, align 8
  %6 = load double, double* %low.addr, align 8
  %7 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %low5 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 3
  store double %6, double* %low5, align 8
  %8 = load double, double* %high.addr, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %high6 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 4
  store double %8, double* %high6, align 8
  %10 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  store %struct.RealSet* %10, %struct.RealSet** %retval, align 4
  br label %return

return:                                           ; preds = %sw.epilog, %sw.default
  %11 = load %struct.RealSet*, %struct.RealSet** %retval, align 4
  ret %struct.RealSet* %11
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_closed(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load double, double* %d.addr, align 8
  %cmp = fcmp ole double %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %3 = load double, double* %d.addr, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 4
  %5 = load double, double* %high, align 8
  %cmp1 = fcmp ole double %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  ret i1 %6
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_left_open(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load double, double* %d.addr, align 8
  %cmp = fcmp olt double %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %3 = load double, double* %d.addr, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 4
  %5 = load double, double* %high, align 8
  %cmp1 = fcmp ole double %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  ret i1 %6
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_right_open(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load double, double* %d.addr, align 8
  %cmp = fcmp ole double %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %3 = load double, double* %d.addr, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 4
  %5 = load double, double* %high, align 8
  %cmp1 = fcmp olt double %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  ret i1 %6
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_both_open(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load double, double* %d.addr, align 8
  %cmp = fcmp olt double %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %3 = load double, double* %d.addr, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 4
  %5 = load double, double* %high, align 8
  %cmp1 = fcmp olt double %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  ret i1 %6
}

declare noalias i8* @malloc(i32 %0) #2

; Function Attrs: noinline nounwind optnone
define hidden %struct.RealSet* @makeIntersect(%struct.RealSet* %left, %struct.RealSet* %right) #0 {
entry:
  %left.addr = alloca %struct.RealSet*, align 4
  %right.addr = alloca %struct.RealSet*, align 4
  %rs = alloca %struct.RealSet*, align 4
  store %struct.RealSet* %left, %struct.RealSet** %left.addr, align 4
  store %struct.RealSet* %right, %struct.RealSet** %right.addr, align 4
  %call = call noalias i8* @malloc(i32 32)
  %0 = bitcast i8* %call to %struct.RealSet*
  store %struct.RealSet* %0, %struct.RealSet** %rs, align 4
  %1 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_intersect, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %2 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %3 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  store %struct.RealSet* %2, %struct.RealSet** %left1, align 4
  %4 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %5 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %right2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 2
  store %struct.RealSet* %4, %struct.RealSet** %right2, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 3
  %7 = load double, double* %low, align 8
  %8 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %low3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %8, i32 0, i32 3
  %9 = load double, double* %low3, align 8
  %10 = call double @llvm.minnum.f64(double %7, double %9)
  %11 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %low4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %11, i32 0, i32 3
  store double %10, double* %low4, align 8
  %12 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %12, i32 0, i32 4
  %13 = load double, double* %high, align 8
  %14 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %high5 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %14, i32 0, i32 4
  %15 = load double, double* %high5, align 8
  %16 = call double @llvm.minnum.f64(double %13, double %15)
  %17 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %high6 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %17, i32 0, i32 4
  store double %16, double* %high6, align 8
  %18 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  ret %struct.RealSet* %18
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_intersect(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 1
  %1 = load %struct.RealSet*, %struct.RealSet** %left, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  %2 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %3 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  %4 = load %struct.RealSet*, %struct.RealSet** %left1, align 4
  %5 = load double, double* %d.addr, align 8
  %call = call zeroext i1 %2(%struct.RealSet* %4, %struct.RealSet* null, double %5)
  br i1 %call, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %6 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 2
  %7 = load %struct.RealSet*, %struct.RealSet** %right, align 8
  %contains2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 0
  %8 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains2, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 2
  %10 = load %struct.RealSet*, %struct.RealSet** %right3, align 8
  %11 = load double, double* %d.addr, align 8
  %call4 = call zeroext i1 %8(%struct.RealSet* %10, %struct.RealSet* null, double %11)
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %12 = phi i1 [ false, %entry ], [ %call4, %land.rhs ]
  ret i1 %12
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.minnum.f64(double %0, double %1) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.RealSet* @makeUnion(%struct.RealSet* %left, %struct.RealSet* %right) #0 {
entry:
  %left.addr = alloca %struct.RealSet*, align 4
  %right.addr = alloca %struct.RealSet*, align 4
  %rs = alloca %struct.RealSet*, align 4
  store %struct.RealSet* %left, %struct.RealSet** %left.addr, align 4
  store %struct.RealSet* %right, %struct.RealSet** %right.addr, align 4
  %call = call noalias i8* @malloc(i32 32)
  %0 = bitcast i8* %call to %struct.RealSet*
  store %struct.RealSet* %0, %struct.RealSet** %rs, align 4
  %1 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_union, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %2 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %3 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  store %struct.RealSet* %2, %struct.RealSet** %left1, align 4
  %4 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %5 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %right2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 2
  store %struct.RealSet* %4, %struct.RealSet** %right2, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 3
  %7 = load double, double* %low, align 8
  %8 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %low3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %8, i32 0, i32 3
  %9 = load double, double* %low3, align 8
  %10 = call double @llvm.minnum.f64(double %7, double %9)
  %11 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %low4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %11, i32 0, i32 3
  store double %10, double* %low4, align 8
  %12 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %12, i32 0, i32 4
  %13 = load double, double* %high, align 8
  %14 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %high5 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %14, i32 0, i32 4
  %15 = load double, double* %high5, align 8
  %16 = call double @llvm.minnum.f64(double %13, double %15)
  %17 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %high6 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %17, i32 0, i32 4
  store double %16, double* %high6, align 8
  %18 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  ret %struct.RealSet* %18
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_union(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 1
  %1 = load %struct.RealSet*, %struct.RealSet** %left, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  %2 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %3 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  %4 = load %struct.RealSet*, %struct.RealSet** %left1, align 4
  %5 = load double, double* %d.addr, align 8
  %call = call zeroext i1 %2(%struct.RealSet* %4, %struct.RealSet* null, double %5)
  br i1 %call, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %6 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 2
  %7 = load %struct.RealSet*, %struct.RealSet** %right, align 8
  %contains2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 0
  %8 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains2, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 2
  %10 = load %struct.RealSet*, %struct.RealSet** %right3, align 8
  %11 = load double, double* %d.addr, align 8
  %call4 = call zeroext i1 %8(%struct.RealSet* %10, %struct.RealSet* null, double %11)
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %12 = phi i1 [ true, %entry ], [ %call4, %lor.rhs ]
  ret i1 %12
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.RealSet* @makeSubtract(%struct.RealSet* %left, %struct.RealSet* %right) #0 {
entry:
  %left.addr = alloca %struct.RealSet*, align 4
  %right.addr = alloca %struct.RealSet*, align 4
  %rs = alloca %struct.RealSet*, align 4
  store %struct.RealSet* %left, %struct.RealSet** %left.addr, align 4
  store %struct.RealSet* %right, %struct.RealSet** %right.addr, align 4
  %call = call noalias i8* @malloc(i32 32)
  %0 = bitcast i8* %call to %struct.RealSet*
  store %struct.RealSet* %0, %struct.RealSet** %rs, align 4
  %1 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_subtract, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %2 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %3 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  store %struct.RealSet* %2, %struct.RealSet** %left1, align 4
  %4 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %5 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %right2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 2
  store %struct.RealSet* %4, %struct.RealSet** %right2, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 3
  %7 = load double, double* %low, align 8
  %8 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %low3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %8, i32 0, i32 3
  store double %7, double* %low3, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 4
  %10 = load double, double* %high, align 8
  %11 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %high4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %11, i32 0, i32 4
  store double %10, double* %high4, align 8
  %12 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  ret %struct.RealSet* %12
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_subtract(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 1
  %1 = load %struct.RealSet*, %struct.RealSet** %left, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  %2 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %3 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  %4 = load %struct.RealSet*, %struct.RealSet** %left1, align 4
  %5 = load double, double* %d.addr, align 8
  %call = call zeroext i1 %2(%struct.RealSet* %4, %struct.RealSet* null, double %5)
  br i1 %call, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %6 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 2
  %7 = load %struct.RealSet*, %struct.RealSet** %right, align 8
  %contains2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 0
  %8 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains2, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 2
  %10 = load %struct.RealSet*, %struct.RealSet** %right3, align 8
  %11 = load double, double* %d.addr, align 8
  %call4 = call zeroext i1 %8(%struct.RealSet* %10, %struct.RealSet* null, double %11)
  %lnot = xor i1 %call4, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %12 = phi i1 [ false, %entry ], [ %lnot, %land.rhs ]
  ret i1 %12
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %a = alloca %struct.RealSet*, align 4
  %b = alloca %struct.RealSet*, align 4
  %c = alloca %struct.RealSet*, align 4
  %d = alloca %struct.RealSet*, align 4
  %e = alloca %struct.RealSet*, align 4
  %f = alloca %struct.RealSet*, align 4
  %g = alloca %struct.RealSet*, align 4
  %i = alloca i32, align 4
  %t = alloca %struct.RealSet*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.RealSet* @makeSet(double 0.000000e+00, double 1.000000e+00, i32 1)
  store %struct.RealSet* %call, %struct.RealSet** %a, align 4
  %call1 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 2.000000e+00, i32 2)
  store %struct.RealSet* %call1, %struct.RealSet** %b, align 4
  %call2 = call %struct.RealSet* @makeSet(double 1.000000e+00, double 2.000000e+00, i32 1)
  store %struct.RealSet* %call2, %struct.RealSet** %c, align 4
  %call3 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 3.000000e+00, i32 2)
  store %struct.RealSet* %call3, %struct.RealSet** %d, align 4
  %call4 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 1.000000e+00, i32 3)
  store %struct.RealSet* %call4, %struct.RealSet** %e, align 4
  %call5 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 1.000000e+00, i32 0)
  store %struct.RealSet* %call5, %struct.RealSet** %f, align 4
  %call6 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 0.000000e+00, i32 0)
  store %struct.RealSet* %call6, %struct.RealSet** %g, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load %struct.RealSet*, %struct.RealSet** %a, align 4
  %2 = load %struct.RealSet*, %struct.RealSet** %b, align 4
  %call7 = call %struct.RealSet* @makeUnion(%struct.RealSet* %1, %struct.RealSet* %2)
  store %struct.RealSet* %call7, %struct.RealSet** %t, align 4
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 0
  %5 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %7 = load i32, i32* %i, align 4
  %conv = sitofp i32 %7 to double
  %call8 = call zeroext i1 %5(%struct.RealSet* %6, %struct.RealSet* null, double %conv)
  %conv9 = zext i1 %call8 to i32
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str, i32 0, i32 0), i32 %3, i32 %conv9)
  %8 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %9 = bitcast %struct.RealSet* %8 to i8*
  call void @free(i8* %9)
  %10 = load %struct.RealSet*, %struct.RealSet** %b, align 4
  %11 = load %struct.RealSet*, %struct.RealSet** %c, align 4
  %call11 = call %struct.RealSet* @makeIntersect(%struct.RealSet* %10, %struct.RealSet* %11)
  store %struct.RealSet* %call11, %struct.RealSet** %t, align 4
  %12 = load i32, i32* %i, align 4
  %13 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %contains12 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %13, i32 0, i32 0
  %14 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains12, align 8
  %15 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %16 = load i32, i32* %i, align 4
  %conv13 = sitofp i32 %16 to double
  %call14 = call zeroext i1 %14(%struct.RealSet* %15, %struct.RealSet* null, double %conv13)
  %conv15 = zext i1 %call14 to i32
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.1, i32 0, i32 0), i32 %12, i32 %conv15)
  %17 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %18 = bitcast %struct.RealSet* %17 to i8*
  call void @free(i8* %18)
  %19 = load %struct.RealSet*, %struct.RealSet** %d, align 4
  %20 = load %struct.RealSet*, %struct.RealSet** %e, align 4
  %call17 = call %struct.RealSet* @makeSubtract(%struct.RealSet* %19, %struct.RealSet* %20)
  store %struct.RealSet* %call17, %struct.RealSet** %t, align 4
  %21 = load i32, i32* %i, align 4
  %22 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %contains18 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %22, i32 0, i32 0
  %23 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains18, align 8
  %24 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %25 = load i32, i32* %i, align 4
  %conv19 = sitofp i32 %25 to double
  %call20 = call zeroext i1 %23(%struct.RealSet* %24, %struct.RealSet* null, double %conv19)
  %conv21 = zext i1 %call20 to i32
  %call22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.2, i32 0, i32 0), i32 %21, i32 %conv21)
  %26 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %27 = bitcast %struct.RealSet* %26 to i8*
  call void @free(i8* %27)
  %28 = load %struct.RealSet*, %struct.RealSet** %d, align 4
  %29 = load %struct.RealSet*, %struct.RealSet** %f, align 4
  %call23 = call %struct.RealSet* @makeSubtract(%struct.RealSet* %28, %struct.RealSet* %29)
  store %struct.RealSet* %call23, %struct.RealSet** %t, align 4
  %30 = load i32, i32* %i, align 4
  %31 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %contains24 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %31, i32 0, i32 0
  %32 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains24, align 8
  %33 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %34 = load i32, i32* %i, align 4
  %conv25 = sitofp i32 %34 to double
  %call26 = call zeroext i1 %32(%struct.RealSet* %33, %struct.RealSet* null, double %conv25)
  %conv27 = zext i1 %call26 to i32
  %call28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.3, i32 0, i32 0), i32 %30, i32 %conv27)
  %35 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %36 = bitcast %struct.RealSet* %35 to i8*
  call void @free(i8* %36)
  %call29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0))
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %37 = load i32, i32* %i, align 4
  %inc = add nsw i32 %37, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %38 = load %struct.RealSet*, %struct.RealSet** %g, align 4
  %call30 = call zeroext i1 @empty(%struct.RealSet* %38)
  %conv31 = zext i1 %call30 to i32
  %call32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.5, i32 0, i32 0), i32 %conv31)
  %39 = load %struct.RealSet*, %struct.RealSet** %a, align 4
  %40 = bitcast %struct.RealSet* %39 to i8*
  call void @free(i8* %40)
  %41 = load %struct.RealSet*, %struct.RealSet** %b, align 4
  %42 = bitcast %struct.RealSet* %41 to i8*
  call void @free(i8* %42)
  %43 = load %struct.RealSet*, %struct.RealSet** %c, align 4
  %44 = bitcast %struct.RealSet* %43 to i8*
  call void @free(i8* %44)
  %45 = load %struct.RealSet*, %struct.RealSet** %d, align 4
  %46 = bitcast %struct.RealSet* %45 to i8*
  call void @free(i8* %46)
  %47 = load %struct.RealSet*, %struct.RealSet** %e, align 4
  %48 = bitcast %struct.RealSet* %47 to i8*
  call void @free(i8* %48)
  %49 = load %struct.RealSet*, %struct.RealSet** %f, align 4
  %50 = bitcast %struct.RealSet* %49 to i8*
  call void @free(i8* %50)
  %51 = load %struct.RealSet*, %struct.RealSet** %g, align 4
  %52 = bitcast %struct.RealSet* %51 to i8*
  call void @free(i8* %52)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #2

declare void @free(i8* %0) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %cmp = fcmp olt double %1, %2
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = fcmp ole double %3, %5
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
; Looking for a replacement for:
%0 = block 2
%1:i1 = var
%2:i1 = phi %0, 0:i1, %1
infer %2
#########################################################
; exiting Souper's runOnFunction() for ./Set_of_real_numbers.c.bc:contains_left_open()

; entering Souper's runOnFunction() for ./Set_of_real_numbers.c.bc:contains_right_open()

; ModuleID = './Set_of_real_numbers.c.bc'
source_filename = "./Set_of_real_numbers.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.RealSet = type { i1 (%struct.RealSet*, %struct.RealSet*, double)*, %struct.RealSet*, %struct.RealSet*, double, double }

@.str = private unnamed_addr constant [43 x i8] c"(0, 1]   union   [0, 2) contains %d is %d\0A\00", align 1
@.str.1 = private unnamed_addr constant [43 x i8] c"[0, 2) intersect (1, 2] contains %d is %d\0A\00", align 1
@.str.2 = private unnamed_addr constant [43 x i8] c"[0, 3)     -     (0, 1) contains %d is %d\0A\00", align 1
@.str.3 = private unnamed_addr constant [43 x i8] c"[0, 3)     -     [0, 1] contains %d is %d\0A\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.5 = private unnamed_addr constant [20 x i8] c"[0, 0] is empty %d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden double @length(%struct.RealSet* %self) #0 {
entry:
  %retval = alloca double, align 8
  %self.addr = alloca %struct.RealSet*, align 4
  %interval = alloca double, align 8
  %p = alloca double, align 8
  %count = alloca i32, align 4
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store double 1.000000e-05, double* %interval, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  store double %1, double* %p, align 8
  store i32 0, i32* %count, align 4
  %2 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %2, i32 0, i32 3
  %3 = load double, double* %low1, align 8
  %4 = call double @llvm.fabs.f64(double %3) #3
  %cmpinf = fcmp oeq double %4, 0x7FF0000000000000
  br i1 %cmpinf, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %5 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 4
  %6 = load double, double* %high, align 8
  %7 = call double @llvm.fabs.f64(double %6) #3
  %cmpinf2 = fcmp oeq double %7, 0x7FF0000000000000
  br i1 %cmpinf2, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store double -1.000000e+00, double* %retval, align 8
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %8 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %8, i32 0, i32 4
  %9 = load double, double* %high3, align 8
  %10 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %10, i32 0, i32 3
  %11 = load double, double* %low4, align 8
  %cmp = fcmp ole double %9, %11
  br i1 %cmp, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  store double 0.000000e+00, double* %retval, align 8
  br label %return

if.end6:                                          ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end6
  %12 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %12, i32 0, i32 0
  %13 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %14 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %15 = load double, double* %p, align 8
  %call = call zeroext i1 %13(%struct.RealSet* %14, %struct.RealSet* null, double %15)
  br i1 %call, label %if.then7, label %if.end8

if.then7:                                         ; preds = %do.body
  %16 = load i32, i32* %count, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %count, align 4
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %do.body
  %17 = load double, double* %p, align 8
  %add = fadd double %17, 1.000000e-05
  store double %add, double* %p, align 8
  br label %do.cond

do.cond:                                          ; preds = %if.end8
  %18 = load double, double* %p, align 8
  %19 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high9 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %19, i32 0, i32 4
  %20 = load double, double* %high9, align 8
  %cmp10 = fcmp olt double %18, %20
  br i1 %cmp10, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %21 = load i32, i32* %count, align 4
  %conv = sitofp i32 %21 to double
  %mul = fmul double %conv, 1.000000e-05
  store double %mul, double* %retval, align 8
  br label %return

return:                                           ; preds = %do.end, %if.then5, %if.then
  %22 = load double, double* %retval, align 8
  ret double %22
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @empty(%struct.RealSet* %self) #0 {
entry:
  %retval = alloca i1, align 1
  %self.addr = alloca %struct.RealSet*, align 4
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %2, i32 0, i32 4
  %3 = load double, double* %high, align 8
  %cmp = fcmp oeq double %1, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 0
  %5 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %7 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 3
  %8 = load double, double* %low1, align 8
  %call = call zeroext i1 %5(%struct.RealSet* %6, %struct.RealSet* null, double %8)
  %lnot = xor i1 %call, true
  store i1 %lnot, i1* %retval, align 1
  br label %return

if.end:                                           ; preds = %entry
  %9 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %call2 = call double @length(%struct.RealSet* %9)
  %cmp3 = fcmp oeq double %call2, 0.000000e+00
  store i1 %cmp3, i1* %retval, align 1
  br label %return

return:                                           ; preds = %if.end, %if.then
  %10 = load i1, i1* %retval, align 1
  ret i1 %10
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.RealSet* @makeSet(double %low, double %high, i32 %type) #0 {
entry:
  %retval = alloca %struct.RealSet*, align 4
  %low.addr = alloca double, align 8
  %high.addr = alloca double, align 8
  %type.addr = alloca i32, align 4
  %contains = alloca i1 (%struct.RealSet*, %struct.RealSet*, double)*, align 4
  %rs = alloca %struct.RealSet*, align 4
  store double %low, double* %low.addr, align 8
  store double %high, double* %high.addr, align 8
  store i32 %type, i32* %type.addr, align 4
  %0 = load i32, i32* %type.addr, align 4
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
    i32 2, label %sw.bb2
    i32 3, label %sw.bb3
  ]

sw.bb:                                            ; preds = %entry
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_closed, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  br label %sw.epilog

sw.bb1:                                           ; preds = %entry
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_left_open, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  br label %sw.epilog

sw.bb2:                                           ; preds = %entry
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_right_open, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  br label %sw.epilog

sw.bb3:                                           ; preds = %entry
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_both_open, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  store %struct.RealSet* null, %struct.RealSet** %retval, align 4
  br label %return

sw.epilog:                                        ; preds = %sw.bb3, %sw.bb2, %sw.bb1, %sw.bb
  %call = call noalias i8* @malloc(i32 32)
  %1 = bitcast i8* %call to %struct.RealSet*
  store %struct.RealSet* %1, %struct.RealSet** %rs, align 4
  %2 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  %3 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %contains4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 0
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* %2, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains4, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %left = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 1
  store %struct.RealSet* null, %struct.RealSet** %left, align 4
  %5 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %right = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 2
  store %struct.RealSet* null, %struct.RealSet** %right, align 8
  %6 = load double, double* %low.addr, align 8
  %7 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %low5 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 3
  store double %6, double* %low5, align 8
  %8 = load double, double* %high.addr, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %high6 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 4
  store double %8, double* %high6, align 8
  %10 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  store %struct.RealSet* %10, %struct.RealSet** %retval, align 4
  br label %return

return:                                           ; preds = %sw.epilog, %sw.default
  %11 = load %struct.RealSet*, %struct.RealSet** %retval, align 4
  ret %struct.RealSet* %11
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_closed(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load double, double* %d.addr, align 8
  %cmp = fcmp ole double %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %3 = load double, double* %d.addr, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 4
  %5 = load double, double* %high, align 8
  %cmp1 = fcmp ole double %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  ret i1 %6
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_left_open(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load double, double* %d.addr, align 8
  %cmp = fcmp olt double %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %3 = load double, double* %d.addr, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 4
  %5 = load double, double* %high, align 8
  %cmp1 = fcmp ole double %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  ret i1 %6
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_right_open(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load double, double* %d.addr, align 8
  %cmp = fcmp ole double %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %3 = load double, double* %d.addr, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 4
  %5 = load double, double* %high, align 8
  %cmp1 = fcmp olt double %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  ret i1 %6
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_both_open(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load double, double* %d.addr, align 8
  %cmp = fcmp olt double %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %3 = load double, double* %d.addr, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 4
  %5 = load double, double* %high, align 8
  %cmp1 = fcmp olt double %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  ret i1 %6
}

declare noalias i8* @malloc(i32 %0) #2

; Function Attrs: noinline nounwind optnone
define hidden %struct.RealSet* @makeIntersect(%struct.RealSet* %left, %struct.RealSet* %right) #0 {
entry:
  %left.addr = alloca %struct.RealSet*, align 4
  %right.addr = alloca %struct.RealSet*, align 4
  %rs = alloca %struct.RealSet*, align 4
  store %struct.RealSet* %left, %struct.RealSet** %left.addr, align 4
  store %struct.RealSet* %right, %struct.RealSet** %right.addr, align 4
  %call = call noalias i8* @malloc(i32 32)
  %0 = bitcast i8* %call to %struct.RealSet*
  store %struct.RealSet* %0, %struct.RealSet** %rs, align 4
  %1 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_intersect, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %2 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %3 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  store %struct.RealSet* %2, %struct.RealSet** %left1, align 4
  %4 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %5 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %right2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 2
  store %struct.RealSet* %4, %struct.RealSet** %right2, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 3
  %7 = load double, double* %low, align 8
  %8 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %low3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %8, i32 0, i32 3
  %9 = load double, double* %low3, align 8
  %10 = call double @llvm.minnum.f64(double %7, double %9)
  %11 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %low4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %11, i32 0, i32 3
  store double %10, double* %low4, align 8
  %12 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %12, i32 0, i32 4
  %13 = load double, double* %high, align 8
  %14 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %high5 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %14, i32 0, i32 4
  %15 = load double, double* %high5, align 8
  %16 = call double @llvm.minnum.f64(double %13, double %15)
  %17 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %high6 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %17, i32 0, i32 4
  store double %16, double* %high6, align 8
  %18 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  ret %struct.RealSet* %18
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_intersect(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 1
  %1 = load %struct.RealSet*, %struct.RealSet** %left, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  %2 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %3 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  %4 = load %struct.RealSet*, %struct.RealSet** %left1, align 4
  %5 = load double, double* %d.addr, align 8
  %call = call zeroext i1 %2(%struct.RealSet* %4, %struct.RealSet* null, double %5)
  br i1 %call, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %6 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 2
  %7 = load %struct.RealSet*, %struct.RealSet** %right, align 8
  %contains2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 0
  %8 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains2, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 2
  %10 = load %struct.RealSet*, %struct.RealSet** %right3, align 8
  %11 = load double, double* %d.addr, align 8
  %call4 = call zeroext i1 %8(%struct.RealSet* %10, %struct.RealSet* null, double %11)
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %12 = phi i1 [ false, %entry ], [ %call4, %land.rhs ]
  ret i1 %12
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.minnum.f64(double %0, double %1) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.RealSet* @makeUnion(%struct.RealSet* %left, %struct.RealSet* %right) #0 {
entry:
  %left.addr = alloca %struct.RealSet*, align 4
  %right.addr = alloca %struct.RealSet*, align 4
  %rs = alloca %struct.RealSet*, align 4
  store %struct.RealSet* %left, %struct.RealSet** %left.addr, align 4
  store %struct.RealSet* %right, %struct.RealSet** %right.addr, align 4
  %call = call noalias i8* @malloc(i32 32)
  %0 = bitcast i8* %call to %struct.RealSet*
  store %struct.RealSet* %0, %struct.RealSet** %rs, align 4
  %1 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_union, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %2 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %3 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  store %struct.RealSet* %2, %struct.RealSet** %left1, align 4
  %4 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %5 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %right2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 2
  store %struct.RealSet* %4, %struct.RealSet** %right2, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 3
  %7 = load double, double* %low, align 8
  %8 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %low3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %8, i32 0, i32 3
  %9 = load double, double* %low3, align 8
  %10 = call double @llvm.minnum.f64(double %7, double %9)
  %11 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %low4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %11, i32 0, i32 3
  store double %10, double* %low4, align 8
  %12 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %12, i32 0, i32 4
  %13 = load double, double* %high, align 8
  %14 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %high5 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %14, i32 0, i32 4
  %15 = load double, double* %high5, align 8
  %16 = call double @llvm.minnum.f64(double %13, double %15)
  %17 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %high6 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %17, i32 0, i32 4
  store double %16, double* %high6, align 8
  %18 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  ret %struct.RealSet* %18
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_union(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 1
  %1 = load %struct.RealSet*, %struct.RealSet** %left, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  %2 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %3 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  %4 = load %struct.RealSet*, %struct.RealSet** %left1, align 4
  %5 = load double, double* %d.addr, align 8
  %call = call zeroext i1 %2(%struct.RealSet* %4, %struct.RealSet* null, double %5)
  br i1 %call, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %6 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 2
  %7 = load %struct.RealSet*, %struct.RealSet** %right, align 8
  %contains2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 0
  %8 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains2, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 2
  %10 = load %struct.RealSet*, %struct.RealSet** %right3, align 8
  %11 = load double, double* %d.addr, align 8
  %call4 = call zeroext i1 %8(%struct.RealSet* %10, %struct.RealSet* null, double %11)
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %12 = phi i1 [ true, %entry ], [ %call4, %lor.rhs ]
  ret i1 %12
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.RealSet* @makeSubtract(%struct.RealSet* %left, %struct.RealSet* %right) #0 {
entry:
  %left.addr = alloca %struct.RealSet*, align 4
  %right.addr = alloca %struct.RealSet*, align 4
  %rs = alloca %struct.RealSet*, align 4
  store %struct.RealSet* %left, %struct.RealSet** %left.addr, align 4
  store %struct.RealSet* %right, %struct.RealSet** %right.addr, align 4
  %call = call noalias i8* @malloc(i32 32)
  %0 = bitcast i8* %call to %struct.RealSet*
  store %struct.RealSet* %0, %struct.RealSet** %rs, align 4
  %1 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_subtract, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %2 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %3 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  store %struct.RealSet* %2, %struct.RealSet** %left1, align 4
  %4 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %5 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %right2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 2
  store %struct.RealSet* %4, %struct.RealSet** %right2, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 3
  %7 = load double, double* %low, align 8
  %8 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %low3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %8, i32 0, i32 3
  store double %7, double* %low3, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 4
  %10 = load double, double* %high, align 8
  %11 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %high4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %11, i32 0, i32 4
  store double %10, double* %high4, align 8
  %12 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  ret %struct.RealSet* %12
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_subtract(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 1
  %1 = load %struct.RealSet*, %struct.RealSet** %left, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  %2 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %3 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  %4 = load %struct.RealSet*, %struct.RealSet** %left1, align 4
  %5 = load double, double* %d.addr, align 8
  %call = call zeroext i1 %2(%struct.RealSet* %4, %struct.RealSet* null, double %5)
  br i1 %call, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %6 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 2
  %7 = load %struct.RealSet*, %struct.RealSet** %right, align 8
  %contains2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 0
  %8 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains2, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 2
  %10 = load %struct.RealSet*, %struct.RealSet** %right3, align 8
  %11 = load double, double* %d.addr, align 8
  %call4 = call zeroext i1 %8(%struct.RealSet* %10, %struct.RealSet* null, double %11)
  %lnot = xor i1 %call4, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %12 = phi i1 [ false, %entry ], [ %lnot, %land.rhs ]
  ret i1 %12
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %a = alloca %struct.RealSet*, align 4
  %b = alloca %struct.RealSet*, align 4
  %c = alloca %struct.RealSet*, align 4
  %d = alloca %struct.RealSet*, align 4
  %e = alloca %struct.RealSet*, align 4
  %f = alloca %struct.RealSet*, align 4
  %g = alloca %struct.RealSet*, align 4
  %i = alloca i32, align 4
  %t = alloca %struct.RealSet*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.RealSet* @makeSet(double 0.000000e+00, double 1.000000e+00, i32 1)
  store %struct.RealSet* %call, %struct.RealSet** %a, align 4
  %call1 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 2.000000e+00, i32 2)
  store %struct.RealSet* %call1, %struct.RealSet** %b, align 4
  %call2 = call %struct.RealSet* @makeSet(double 1.000000e+00, double 2.000000e+00, i32 1)
  store %struct.RealSet* %call2, %struct.RealSet** %c, align 4
  %call3 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 3.000000e+00, i32 2)
  store %struct.RealSet* %call3, %struct.RealSet** %d, align 4
  %call4 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 1.000000e+00, i32 3)
  store %struct.RealSet* %call4, %struct.RealSet** %e, align 4
  %call5 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 1.000000e+00, i32 0)
  store %struct.RealSet* %call5, %struct.RealSet** %f, align 4
  %call6 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 0.000000e+00, i32 0)
  store %struct.RealSet* %call6, %struct.RealSet** %g, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load %struct.RealSet*, %struct.RealSet** %a, align 4
  %2 = load %struct.RealSet*, %struct.RealSet** %b, align 4
  %call7 = call %struct.RealSet* @makeUnion(%struct.RealSet* %1, %struct.RealSet* %2)
  store %struct.RealSet* %call7, %struct.RealSet** %t, align 4
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 0
  %5 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %7 = load i32, i32* %i, align 4
  %conv = sitofp i32 %7 to double
  %call8 = call zeroext i1 %5(%struct.RealSet* %6, %struct.RealSet* null, double %conv)
  %conv9 = zext i1 %call8 to i32
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str, i32 0, i32 0), i32 %3, i32 %conv9)
  %8 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %9 = bitcast %struct.RealSet* %8 to i8*
  call void @free(i8* %9)
  %10 = load %struct.RealSet*, %struct.RealSet** %b, align 4
  %11 = load %struct.RealSet*, %struct.RealSet** %c, align 4
  %call11 = call %struct.RealSet* @makeIntersect(%struct.RealSet* %10, %struct.RealSet* %11)
  store %struct.RealSet* %call11, %struct.RealSet** %t, align 4
  %12 = load i32, i32* %i, align 4
  %13 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %contains12 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %13, i32 0, i32 0
  %14 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains12, align 8
  %15 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %16 = load i32, i32* %i, align 4
  %conv13 = sitofp i32 %16 to double
  %call14 = call zeroext i1 %14(%struct.RealSet* %15, %struct.RealSet* null, double %conv13)
  %conv15 = zext i1 %call14 to i32
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.1, i32 0, i32 0), i32 %12, i32 %conv15)
  %17 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %18 = bitcast %struct.RealSet* %17 to i8*
  call void @free(i8* %18)
  %19 = load %struct.RealSet*, %struct.RealSet** %d, align 4
  %20 = load %struct.RealSet*, %struct.RealSet** %e, align 4
  %call17 = call %struct.RealSet* @makeSubtract(%struct.RealSet* %19, %struct.RealSet* %20)
  store %struct.RealSet* %call17, %struct.RealSet** %t, align 4
  %21 = load i32, i32* %i, align 4
  %22 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %contains18 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %22, i32 0, i32 0
  %23 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains18, align 8
  %24 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %25 = load i32, i32* %i, align 4
  %conv19 = sitofp i32 %25 to double
  %call20 = call zeroext i1 %23(%struct.RealSet* %24, %struct.RealSet* null, double %conv19)
  %conv21 = zext i1 %call20 to i32
  %call22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.2, i32 0, i32 0), i32 %21, i32 %conv21)
  %26 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %27 = bitcast %struct.RealSet* %26 to i8*
  call void @free(i8* %27)
  %28 = load %struct.RealSet*, %struct.RealSet** %d, align 4
  %29 = load %struct.RealSet*, %struct.RealSet** %f, align 4
  %call23 = call %struct.RealSet* @makeSubtract(%struct.RealSet* %28, %struct.RealSet* %29)
  store %struct.RealSet* %call23, %struct.RealSet** %t, align 4
  %30 = load i32, i32* %i, align 4
  %31 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %contains24 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %31, i32 0, i32 0
  %32 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains24, align 8
  %33 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %34 = load i32, i32* %i, align 4
  %conv25 = sitofp i32 %34 to double
  %call26 = call zeroext i1 %32(%struct.RealSet* %33, %struct.RealSet* null, double %conv25)
  %conv27 = zext i1 %call26 to i32
  %call28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.3, i32 0, i32 0), i32 %30, i32 %conv27)
  %35 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %36 = bitcast %struct.RealSet* %35 to i8*
  call void @free(i8* %36)
  %call29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0))
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %37 = load i32, i32* %i, align 4
  %inc = add nsw i32 %37, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %38 = load %struct.RealSet*, %struct.RealSet** %g, align 4
  %call30 = call zeroext i1 @empty(%struct.RealSet* %38)
  %conv31 = zext i1 %call30 to i32
  %call32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.5, i32 0, i32 0), i32 %conv31)
  %39 = load %struct.RealSet*, %struct.RealSet** %a, align 4
  %40 = bitcast %struct.RealSet* %39 to i8*
  call void @free(i8* %40)
  %41 = load %struct.RealSet*, %struct.RealSet** %b, align 4
  %42 = bitcast %struct.RealSet* %41 to i8*
  call void @free(i8* %42)
  %43 = load %struct.RealSet*, %struct.RealSet** %c, align 4
  %44 = bitcast %struct.RealSet* %43 to i8*
  call void @free(i8* %44)
  %45 = load %struct.RealSet*, %struct.RealSet** %d, align 4
  %46 = bitcast %struct.RealSet* %45 to i8*
  call void @free(i8* %46)
  %47 = load %struct.RealSet*, %struct.RealSet** %e, align 4
  %48 = bitcast %struct.RealSet* %47 to i8*
  call void @free(i8* %48)
  %49 = load %struct.RealSet*, %struct.RealSet** %f, align 4
  %50 = bitcast %struct.RealSet* %49 to i8*
  call void @free(i8* %50)
  %51 = load %struct.RealSet*, %struct.RealSet** %g, align 4
  %52 = bitcast %struct.RealSet* %51 to i8*
  call void @free(i8* %52)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #2

declare void @free(i8* %0) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %cmp = fcmp ole double %1, %2
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = fcmp olt double %3, %5
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
; Looking for a replacement for:
%0 = block 2
%1:i1 = var
%2:i1 = phi %0, 0:i1, %1
infer %2
#########################################################
; exiting Souper's runOnFunction() for ./Set_of_real_numbers.c.bc:contains_right_open()

; entering Souper's runOnFunction() for ./Set_of_real_numbers.c.bc:contains_both_open()

; ModuleID = './Set_of_real_numbers.c.bc'
source_filename = "./Set_of_real_numbers.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.RealSet = type { i1 (%struct.RealSet*, %struct.RealSet*, double)*, %struct.RealSet*, %struct.RealSet*, double, double }

@.str = private unnamed_addr constant [43 x i8] c"(0, 1]   union   [0, 2) contains %d is %d\0A\00", align 1
@.str.1 = private unnamed_addr constant [43 x i8] c"[0, 2) intersect (1, 2] contains %d is %d\0A\00", align 1
@.str.2 = private unnamed_addr constant [43 x i8] c"[0, 3)     -     (0, 1) contains %d is %d\0A\00", align 1
@.str.3 = private unnamed_addr constant [43 x i8] c"[0, 3)     -     [0, 1] contains %d is %d\0A\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.5 = private unnamed_addr constant [20 x i8] c"[0, 0] is empty %d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden double @length(%struct.RealSet* %self) #0 {
entry:
  %retval = alloca double, align 8
  %self.addr = alloca %struct.RealSet*, align 4
  %interval = alloca double, align 8
  %p = alloca double, align 8
  %count = alloca i32, align 4
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store double 1.000000e-05, double* %interval, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  store double %1, double* %p, align 8
  store i32 0, i32* %count, align 4
  %2 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %2, i32 0, i32 3
  %3 = load double, double* %low1, align 8
  %4 = call double @llvm.fabs.f64(double %3) #3
  %cmpinf = fcmp oeq double %4, 0x7FF0000000000000
  br i1 %cmpinf, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %5 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 4
  %6 = load double, double* %high, align 8
  %7 = call double @llvm.fabs.f64(double %6) #3
  %cmpinf2 = fcmp oeq double %7, 0x7FF0000000000000
  br i1 %cmpinf2, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store double -1.000000e+00, double* %retval, align 8
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %8 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %8, i32 0, i32 4
  %9 = load double, double* %high3, align 8
  %10 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %10, i32 0, i32 3
  %11 = load double, double* %low4, align 8
  %cmp = fcmp ole double %9, %11
  br i1 %cmp, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  store double 0.000000e+00, double* %retval, align 8
  br label %return

if.end6:                                          ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end6
  %12 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %12, i32 0, i32 0
  %13 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %14 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %15 = load double, double* %p, align 8
  %call = call zeroext i1 %13(%struct.RealSet* %14, %struct.RealSet* null, double %15)
  br i1 %call, label %if.then7, label %if.end8

if.then7:                                         ; preds = %do.body
  %16 = load i32, i32* %count, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %count, align 4
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %do.body
  %17 = load double, double* %p, align 8
  %add = fadd double %17, 1.000000e-05
  store double %add, double* %p, align 8
  br label %do.cond

do.cond:                                          ; preds = %if.end8
  %18 = load double, double* %p, align 8
  %19 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high9 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %19, i32 0, i32 4
  %20 = load double, double* %high9, align 8
  %cmp10 = fcmp olt double %18, %20
  br i1 %cmp10, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %21 = load i32, i32* %count, align 4
  %conv = sitofp i32 %21 to double
  %mul = fmul double %conv, 1.000000e-05
  store double %mul, double* %retval, align 8
  br label %return

return:                                           ; preds = %do.end, %if.then5, %if.then
  %22 = load double, double* %retval, align 8
  ret double %22
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @empty(%struct.RealSet* %self) #0 {
entry:
  %retval = alloca i1, align 1
  %self.addr = alloca %struct.RealSet*, align 4
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %2, i32 0, i32 4
  %3 = load double, double* %high, align 8
  %cmp = fcmp oeq double %1, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 0
  %5 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %7 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 3
  %8 = load double, double* %low1, align 8
  %call = call zeroext i1 %5(%struct.RealSet* %6, %struct.RealSet* null, double %8)
  %lnot = xor i1 %call, true
  store i1 %lnot, i1* %retval, align 1
  br label %return

if.end:                                           ; preds = %entry
  %9 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %call2 = call double @length(%struct.RealSet* %9)
  %cmp3 = fcmp oeq double %call2, 0.000000e+00
  store i1 %cmp3, i1* %retval, align 1
  br label %return

return:                                           ; preds = %if.end, %if.then
  %10 = load i1, i1* %retval, align 1
  ret i1 %10
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.RealSet* @makeSet(double %low, double %high, i32 %type) #0 {
entry:
  %retval = alloca %struct.RealSet*, align 4
  %low.addr = alloca double, align 8
  %high.addr = alloca double, align 8
  %type.addr = alloca i32, align 4
  %contains = alloca i1 (%struct.RealSet*, %struct.RealSet*, double)*, align 4
  %rs = alloca %struct.RealSet*, align 4
  store double %low, double* %low.addr, align 8
  store double %high, double* %high.addr, align 8
  store i32 %type, i32* %type.addr, align 4
  %0 = load i32, i32* %type.addr, align 4
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
    i32 2, label %sw.bb2
    i32 3, label %sw.bb3
  ]

sw.bb:                                            ; preds = %entry
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_closed, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  br label %sw.epilog

sw.bb1:                                           ; preds = %entry
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_left_open, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  br label %sw.epilog

sw.bb2:                                           ; preds = %entry
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_right_open, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  br label %sw.epilog

sw.bb3:                                           ; preds = %entry
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_both_open, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  store %struct.RealSet* null, %struct.RealSet** %retval, align 4
  br label %return

sw.epilog:                                        ; preds = %sw.bb3, %sw.bb2, %sw.bb1, %sw.bb
  %call = call noalias i8* @malloc(i32 32)
  %1 = bitcast i8* %call to %struct.RealSet*
  store %struct.RealSet* %1, %struct.RealSet** %rs, align 4
  %2 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  %3 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %contains4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 0
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* %2, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains4, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %left = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 1
  store %struct.RealSet* null, %struct.RealSet** %left, align 4
  %5 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %right = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 2
  store %struct.RealSet* null, %struct.RealSet** %right, align 8
  %6 = load double, double* %low.addr, align 8
  %7 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %low5 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 3
  store double %6, double* %low5, align 8
  %8 = load double, double* %high.addr, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %high6 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 4
  store double %8, double* %high6, align 8
  %10 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  store %struct.RealSet* %10, %struct.RealSet** %retval, align 4
  br label %return

return:                                           ; preds = %sw.epilog, %sw.default
  %11 = load %struct.RealSet*, %struct.RealSet** %retval, align 4
  ret %struct.RealSet* %11
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_closed(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load double, double* %d.addr, align 8
  %cmp = fcmp ole double %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %3 = load double, double* %d.addr, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 4
  %5 = load double, double* %high, align 8
  %cmp1 = fcmp ole double %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  ret i1 %6
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_left_open(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load double, double* %d.addr, align 8
  %cmp = fcmp olt double %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %3 = load double, double* %d.addr, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 4
  %5 = load double, double* %high, align 8
  %cmp1 = fcmp ole double %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  ret i1 %6
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_right_open(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load double, double* %d.addr, align 8
  %cmp = fcmp ole double %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %3 = load double, double* %d.addr, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 4
  %5 = load double, double* %high, align 8
  %cmp1 = fcmp olt double %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  ret i1 %6
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_both_open(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load double, double* %d.addr, align 8
  %cmp = fcmp olt double %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %3 = load double, double* %d.addr, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 4
  %5 = load double, double* %high, align 8
  %cmp1 = fcmp olt double %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  ret i1 %6
}

declare noalias i8* @malloc(i32 %0) #2

; Function Attrs: noinline nounwind optnone
define hidden %struct.RealSet* @makeIntersect(%struct.RealSet* %left, %struct.RealSet* %right) #0 {
entry:
  %left.addr = alloca %struct.RealSet*, align 4
  %right.addr = alloca %struct.RealSet*, align 4
  %rs = alloca %struct.RealSet*, align 4
  store %struct.RealSet* %left, %struct.RealSet** %left.addr, align 4
  store %struct.RealSet* %right, %struct.RealSet** %right.addr, align 4
  %call = call noalias i8* @malloc(i32 32)
  %0 = bitcast i8* %call to %struct.RealSet*
  store %struct.RealSet* %0, %struct.RealSet** %rs, align 4
  %1 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_intersect, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %2 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %3 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  store %struct.RealSet* %2, %struct.RealSet** %left1, align 4
  %4 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %5 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %right2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 2
  store %struct.RealSet* %4, %struct.RealSet** %right2, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 3
  %7 = load double, double* %low, align 8
  %8 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %low3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %8, i32 0, i32 3
  %9 = load double, double* %low3, align 8
  %10 = call double @llvm.minnum.f64(double %7, double %9)
  %11 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %low4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %11, i32 0, i32 3
  store double %10, double* %low4, align 8
  %12 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %12, i32 0, i32 4
  %13 = load double, double* %high, align 8
  %14 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %high5 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %14, i32 0, i32 4
  %15 = load double, double* %high5, align 8
  %16 = call double @llvm.minnum.f64(double %13, double %15)
  %17 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %high6 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %17, i32 0, i32 4
  store double %16, double* %high6, align 8
  %18 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  ret %struct.RealSet* %18
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_intersect(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 1
  %1 = load %struct.RealSet*, %struct.RealSet** %left, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  %2 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %3 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  %4 = load %struct.RealSet*, %struct.RealSet** %left1, align 4
  %5 = load double, double* %d.addr, align 8
  %call = call zeroext i1 %2(%struct.RealSet* %4, %struct.RealSet* null, double %5)
  br i1 %call, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %6 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 2
  %7 = load %struct.RealSet*, %struct.RealSet** %right, align 8
  %contains2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 0
  %8 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains2, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 2
  %10 = load %struct.RealSet*, %struct.RealSet** %right3, align 8
  %11 = load double, double* %d.addr, align 8
  %call4 = call zeroext i1 %8(%struct.RealSet* %10, %struct.RealSet* null, double %11)
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %12 = phi i1 [ false, %entry ], [ %call4, %land.rhs ]
  ret i1 %12
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.minnum.f64(double %0, double %1) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.RealSet* @makeUnion(%struct.RealSet* %left, %struct.RealSet* %right) #0 {
entry:
  %left.addr = alloca %struct.RealSet*, align 4
  %right.addr = alloca %struct.RealSet*, align 4
  %rs = alloca %struct.RealSet*, align 4
  store %struct.RealSet* %left, %struct.RealSet** %left.addr, align 4
  store %struct.RealSet* %right, %struct.RealSet** %right.addr, align 4
  %call = call noalias i8* @malloc(i32 32)
  %0 = bitcast i8* %call to %struct.RealSet*
  store %struct.RealSet* %0, %struct.RealSet** %rs, align 4
  %1 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_union, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %2 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %3 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  store %struct.RealSet* %2, %struct.RealSet** %left1, align 4
  %4 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %5 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %right2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 2
  store %struct.RealSet* %4, %struct.RealSet** %right2, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 3
  %7 = load double, double* %low, align 8
  %8 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %low3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %8, i32 0, i32 3
  %9 = load double, double* %low3, align 8
  %10 = call double @llvm.minnum.f64(double %7, double %9)
  %11 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %low4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %11, i32 0, i32 3
  store double %10, double* %low4, align 8
  %12 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %12, i32 0, i32 4
  %13 = load double, double* %high, align 8
  %14 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %high5 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %14, i32 0, i32 4
  %15 = load double, double* %high5, align 8
  %16 = call double @llvm.minnum.f64(double %13, double %15)
  %17 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %high6 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %17, i32 0, i32 4
  store double %16, double* %high6, align 8
  %18 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  ret %struct.RealSet* %18
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_union(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 1
  %1 = load %struct.RealSet*, %struct.RealSet** %left, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  %2 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %3 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  %4 = load %struct.RealSet*, %struct.RealSet** %left1, align 4
  %5 = load double, double* %d.addr, align 8
  %call = call zeroext i1 %2(%struct.RealSet* %4, %struct.RealSet* null, double %5)
  br i1 %call, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %6 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 2
  %7 = load %struct.RealSet*, %struct.RealSet** %right, align 8
  %contains2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 0
  %8 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains2, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 2
  %10 = load %struct.RealSet*, %struct.RealSet** %right3, align 8
  %11 = load double, double* %d.addr, align 8
  %call4 = call zeroext i1 %8(%struct.RealSet* %10, %struct.RealSet* null, double %11)
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %12 = phi i1 [ true, %entry ], [ %call4, %lor.rhs ]
  ret i1 %12
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.RealSet* @makeSubtract(%struct.RealSet* %left, %struct.RealSet* %right) #0 {
entry:
  %left.addr = alloca %struct.RealSet*, align 4
  %right.addr = alloca %struct.RealSet*, align 4
  %rs = alloca %struct.RealSet*, align 4
  store %struct.RealSet* %left, %struct.RealSet** %left.addr, align 4
  store %struct.RealSet* %right, %struct.RealSet** %right.addr, align 4
  %call = call noalias i8* @malloc(i32 32)
  %0 = bitcast i8* %call to %struct.RealSet*
  store %struct.RealSet* %0, %struct.RealSet** %rs, align 4
  %1 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_subtract, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %2 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %3 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  store %struct.RealSet* %2, %struct.RealSet** %left1, align 4
  %4 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %5 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %right2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 2
  store %struct.RealSet* %4, %struct.RealSet** %right2, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 3
  %7 = load double, double* %low, align 8
  %8 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %low3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %8, i32 0, i32 3
  store double %7, double* %low3, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 4
  %10 = load double, double* %high, align 8
  %11 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %high4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %11, i32 0, i32 4
  store double %10, double* %high4, align 8
  %12 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  ret %struct.RealSet* %12
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_subtract(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 1
  %1 = load %struct.RealSet*, %struct.RealSet** %left, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  %2 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %3 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  %4 = load %struct.RealSet*, %struct.RealSet** %left1, align 4
  %5 = load double, double* %d.addr, align 8
  %call = call zeroext i1 %2(%struct.RealSet* %4, %struct.RealSet* null, double %5)
  br i1 %call, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %6 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 2
  %7 = load %struct.RealSet*, %struct.RealSet** %right, align 8
  %contains2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 0
  %8 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains2, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 2
  %10 = load %struct.RealSet*, %struct.RealSet** %right3, align 8
  %11 = load double, double* %d.addr, align 8
  %call4 = call zeroext i1 %8(%struct.RealSet* %10, %struct.RealSet* null, double %11)
  %lnot = xor i1 %call4, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %12 = phi i1 [ false, %entry ], [ %lnot, %land.rhs ]
  ret i1 %12
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %a = alloca %struct.RealSet*, align 4
  %b = alloca %struct.RealSet*, align 4
  %c = alloca %struct.RealSet*, align 4
  %d = alloca %struct.RealSet*, align 4
  %e = alloca %struct.RealSet*, align 4
  %f = alloca %struct.RealSet*, align 4
  %g = alloca %struct.RealSet*, align 4
  %i = alloca i32, align 4
  %t = alloca %struct.RealSet*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.RealSet* @makeSet(double 0.000000e+00, double 1.000000e+00, i32 1)
  store %struct.RealSet* %call, %struct.RealSet** %a, align 4
  %call1 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 2.000000e+00, i32 2)
  store %struct.RealSet* %call1, %struct.RealSet** %b, align 4
  %call2 = call %struct.RealSet* @makeSet(double 1.000000e+00, double 2.000000e+00, i32 1)
  store %struct.RealSet* %call2, %struct.RealSet** %c, align 4
  %call3 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 3.000000e+00, i32 2)
  store %struct.RealSet* %call3, %struct.RealSet** %d, align 4
  %call4 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 1.000000e+00, i32 3)
  store %struct.RealSet* %call4, %struct.RealSet** %e, align 4
  %call5 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 1.000000e+00, i32 0)
  store %struct.RealSet* %call5, %struct.RealSet** %f, align 4
  %call6 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 0.000000e+00, i32 0)
  store %struct.RealSet* %call6, %struct.RealSet** %g, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load %struct.RealSet*, %struct.RealSet** %a, align 4
  %2 = load %struct.RealSet*, %struct.RealSet** %b, align 4
  %call7 = call %struct.RealSet* @makeUnion(%struct.RealSet* %1, %struct.RealSet* %2)
  store %struct.RealSet* %call7, %struct.RealSet** %t, align 4
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 0
  %5 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %7 = load i32, i32* %i, align 4
  %conv = sitofp i32 %7 to double
  %call8 = call zeroext i1 %5(%struct.RealSet* %6, %struct.RealSet* null, double %conv)
  %conv9 = zext i1 %call8 to i32
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str, i32 0, i32 0), i32 %3, i32 %conv9)
  %8 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %9 = bitcast %struct.RealSet* %8 to i8*
  call void @free(i8* %9)
  %10 = load %struct.RealSet*, %struct.RealSet** %b, align 4
  %11 = load %struct.RealSet*, %struct.RealSet** %c, align 4
  %call11 = call %struct.RealSet* @makeIntersect(%struct.RealSet* %10, %struct.RealSet* %11)
  store %struct.RealSet* %call11, %struct.RealSet** %t, align 4
  %12 = load i32, i32* %i, align 4
  %13 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %contains12 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %13, i32 0, i32 0
  %14 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains12, align 8
  %15 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %16 = load i32, i32* %i, align 4
  %conv13 = sitofp i32 %16 to double
  %call14 = call zeroext i1 %14(%struct.RealSet* %15, %struct.RealSet* null, double %conv13)
  %conv15 = zext i1 %call14 to i32
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.1, i32 0, i32 0), i32 %12, i32 %conv15)
  %17 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %18 = bitcast %struct.RealSet* %17 to i8*
  call void @free(i8* %18)
  %19 = load %struct.RealSet*, %struct.RealSet** %d, align 4
  %20 = load %struct.RealSet*, %struct.RealSet** %e, align 4
  %call17 = call %struct.RealSet* @makeSubtract(%struct.RealSet* %19, %struct.RealSet* %20)
  store %struct.RealSet* %call17, %struct.RealSet** %t, align 4
  %21 = load i32, i32* %i, align 4
  %22 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %contains18 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %22, i32 0, i32 0
  %23 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains18, align 8
  %24 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %25 = load i32, i32* %i, align 4
  %conv19 = sitofp i32 %25 to double
  %call20 = call zeroext i1 %23(%struct.RealSet* %24, %struct.RealSet* null, double %conv19)
  %conv21 = zext i1 %call20 to i32
  %call22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.2, i32 0, i32 0), i32 %21, i32 %conv21)
  %26 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %27 = bitcast %struct.RealSet* %26 to i8*
  call void @free(i8* %27)
  %28 = load %struct.RealSet*, %struct.RealSet** %d, align 4
  %29 = load %struct.RealSet*, %struct.RealSet** %f, align 4
  %call23 = call %struct.RealSet* @makeSubtract(%struct.RealSet* %28, %struct.RealSet* %29)
  store %struct.RealSet* %call23, %struct.RealSet** %t, align 4
  %30 = load i32, i32* %i, align 4
  %31 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %contains24 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %31, i32 0, i32 0
  %32 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains24, align 8
  %33 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %34 = load i32, i32* %i, align 4
  %conv25 = sitofp i32 %34 to double
  %call26 = call zeroext i1 %32(%struct.RealSet* %33, %struct.RealSet* null, double %conv25)
  %conv27 = zext i1 %call26 to i32
  %call28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.3, i32 0, i32 0), i32 %30, i32 %conv27)
  %35 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %36 = bitcast %struct.RealSet* %35 to i8*
  call void @free(i8* %36)
  %call29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0))
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %37 = load i32, i32* %i, align 4
  %inc = add nsw i32 %37, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %38 = load %struct.RealSet*, %struct.RealSet** %g, align 4
  %call30 = call zeroext i1 @empty(%struct.RealSet* %38)
  %conv31 = zext i1 %call30 to i32
  %call32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.5, i32 0, i32 0), i32 %conv31)
  %39 = load %struct.RealSet*, %struct.RealSet** %a, align 4
  %40 = bitcast %struct.RealSet* %39 to i8*
  call void @free(i8* %40)
  %41 = load %struct.RealSet*, %struct.RealSet** %b, align 4
  %42 = bitcast %struct.RealSet* %41 to i8*
  call void @free(i8* %42)
  %43 = load %struct.RealSet*, %struct.RealSet** %c, align 4
  %44 = bitcast %struct.RealSet* %43 to i8*
  call void @free(i8* %44)
  %45 = load %struct.RealSet*, %struct.RealSet** %d, align 4
  %46 = bitcast %struct.RealSet* %45 to i8*
  call void @free(i8* %46)
  %47 = load %struct.RealSet*, %struct.RealSet** %e, align 4
  %48 = bitcast %struct.RealSet* %47 to i8*
  call void @free(i8* %48)
  %49 = load %struct.RealSet*, %struct.RealSet** %f, align 4
  %50 = bitcast %struct.RealSet* %49 to i8*
  call void @free(i8* %50)
  %51 = load %struct.RealSet*, %struct.RealSet** %g, align 4
  %52 = bitcast %struct.RealSet* %51 to i8*
  call void @free(i8* %52)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #2

declare void @free(i8* %0) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %cmp = fcmp olt double %1, %2
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = fcmp olt double %3, %5
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
; Looking for a replacement for:
%0 = block 2
%1:i1 = var
%2:i1 = phi %0, 0:i1, %1
infer %2
#########################################################
; exiting Souper's runOnFunction() for ./Set_of_real_numbers.c.bc:contains_both_open()

; entering Souper's runOnFunction() for makeIntersect()

; ModuleID = './Set_of_real_numbers.c.bc'
source_filename = "./Set_of_real_numbers.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.RealSet = type { i1 (%struct.RealSet*, %struct.RealSet*, double)*, %struct.RealSet*, %struct.RealSet*, double, double }

@.str = private unnamed_addr constant [43 x i8] c"(0, 1]   union   [0, 2) contains %d is %d\0A\00", align 1
@.str.1 = private unnamed_addr constant [43 x i8] c"[0, 2) intersect (1, 2] contains %d is %d\0A\00", align 1
@.str.2 = private unnamed_addr constant [43 x i8] c"[0, 3)     -     (0, 1) contains %d is %d\0A\00", align 1
@.str.3 = private unnamed_addr constant [43 x i8] c"[0, 3)     -     [0, 1] contains %d is %d\0A\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.5 = private unnamed_addr constant [20 x i8] c"[0, 0] is empty %d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden double @length(%struct.RealSet* %self) #0 {
entry:
  %retval = alloca double, align 8
  %self.addr = alloca %struct.RealSet*, align 4
  %interval = alloca double, align 8
  %p = alloca double, align 8
  %count = alloca i32, align 4
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store double 1.000000e-05, double* %interval, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  store double %1, double* %p, align 8
  store i32 0, i32* %count, align 4
  %2 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %2, i32 0, i32 3
  %3 = load double, double* %low1, align 8
  %4 = call double @llvm.fabs.f64(double %3) #3
  %cmpinf = fcmp oeq double %4, 0x7FF0000000000000
  br i1 %cmpinf, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %5 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 4
  %6 = load double, double* %high, align 8
  %7 = call double @llvm.fabs.f64(double %6) #3
  %cmpinf2 = fcmp oeq double %7, 0x7FF0000000000000
  br i1 %cmpinf2, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store double -1.000000e+00, double* %retval, align 8
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %8 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %8, i32 0, i32 4
  %9 = load double, double* %high3, align 8
  %10 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %10, i32 0, i32 3
  %11 = load double, double* %low4, align 8
  %cmp = fcmp ole double %9, %11
  br i1 %cmp, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  store double 0.000000e+00, double* %retval, align 8
  br label %return

if.end6:                                          ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end6
  %12 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %12, i32 0, i32 0
  %13 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %14 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %15 = load double, double* %p, align 8
  %call = call zeroext i1 %13(%struct.RealSet* %14, %struct.RealSet* null, double %15)
  br i1 %call, label %if.then7, label %if.end8

if.then7:                                         ; preds = %do.body
  %16 = load i32, i32* %count, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %count, align 4
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %do.body
  %17 = load double, double* %p, align 8
  %add = fadd double %17, 1.000000e-05
  store double %add, double* %p, align 8
  br label %do.cond

do.cond:                                          ; preds = %if.end8
  %18 = load double, double* %p, align 8
  %19 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high9 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %19, i32 0, i32 4
  %20 = load double, double* %high9, align 8
  %cmp10 = fcmp olt double %18, %20
  br i1 %cmp10, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %21 = load i32, i32* %count, align 4
  %conv = sitofp i32 %21 to double
  %mul = fmul double %conv, 1.000000e-05
  store double %mul, double* %retval, align 8
  br label %return

return:                                           ; preds = %do.end, %if.then5, %if.then
  %22 = load double, double* %retval, align 8
  ret double %22
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @empty(%struct.RealSet* %self) #0 {
entry:
  %retval = alloca i1, align 1
  %self.addr = alloca %struct.RealSet*, align 4
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %2, i32 0, i32 4
  %3 = load double, double* %high, align 8
  %cmp = fcmp oeq double %1, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 0
  %5 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %7 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 3
  %8 = load double, double* %low1, align 8
  %call = call zeroext i1 %5(%struct.RealSet* %6, %struct.RealSet* null, double %8)
  %lnot = xor i1 %call, true
  store i1 %lnot, i1* %retval, align 1
  br label %return

if.end:                                           ; preds = %entry
  %9 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %call2 = call double @length(%struct.RealSet* %9)
  %cmp3 = fcmp oeq double %call2, 0.000000e+00
  store i1 %cmp3, i1* %retval, align 1
  br label %return

return:                                           ; preds = %if.end, %if.then
  %10 = load i1, i1* %retval, align 1
  ret i1 %10
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.RealSet* @makeSet(double %low, double %high, i32 %type) #0 {
entry:
  %retval = alloca %struct.RealSet*, align 4
  %low.addr = alloca double, align 8
  %high.addr = alloca double, align 8
  %type.addr = alloca i32, align 4
  %contains = alloca i1 (%struct.RealSet*, %struct.RealSet*, double)*, align 4
  %rs = alloca %struct.RealSet*, align 4
  store double %low, double* %low.addr, align 8
  store double %high, double* %high.addr, align 8
  store i32 %type, i32* %type.addr, align 4
  %0 = load i32, i32* %type.addr, align 4
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
    i32 2, label %sw.bb2
    i32 3, label %sw.bb3
  ]

sw.bb:                                            ; preds = %entry
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_closed, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  br label %sw.epilog

sw.bb1:                                           ; preds = %entry
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_left_open, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  br label %sw.epilog

sw.bb2:                                           ; preds = %entry
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_right_open, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  br label %sw.epilog

sw.bb3:                                           ; preds = %entry
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_both_open, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  store %struct.RealSet* null, %struct.RealSet** %retval, align 4
  br label %return

sw.epilog:                                        ; preds = %sw.bb3, %sw.bb2, %sw.bb1, %sw.bb
  %call = call noalias i8* @malloc(i32 32)
  %1 = bitcast i8* %call to %struct.RealSet*
  store %struct.RealSet* %1, %struct.RealSet** %rs, align 4
  %2 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  %3 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %contains4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 0
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* %2, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains4, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %left = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 1
  store %struct.RealSet* null, %struct.RealSet** %left, align 4
  %5 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %right = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 2
  store %struct.RealSet* null, %struct.RealSet** %right, align 8
  %6 = load double, double* %low.addr, align 8
  %7 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %low5 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 3
  store double %6, double* %low5, align 8
  %8 = load double, double* %high.addr, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %high6 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 4
  store double %8, double* %high6, align 8
  %10 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  store %struct.RealSet* %10, %struct.RealSet** %retval, align 4
  br label %return

return:                                           ; preds = %sw.epilog, %sw.default
  %11 = load %struct.RealSet*, %struct.RealSet** %retval, align 4
  ret %struct.RealSet* %11
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_closed(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load double, double* %d.addr, align 8
  %cmp = fcmp ole double %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %3 = load double, double* %d.addr, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 4
  %5 = load double, double* %high, align 8
  %cmp1 = fcmp ole double %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  ret i1 %6
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_left_open(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load double, double* %d.addr, align 8
  %cmp = fcmp olt double %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %3 = load double, double* %d.addr, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 4
  %5 = load double, double* %high, align 8
  %cmp1 = fcmp ole double %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  ret i1 %6
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_right_open(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load double, double* %d.addr, align 8
  %cmp = fcmp ole double %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %3 = load double, double* %d.addr, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 4
  %5 = load double, double* %high, align 8
  %cmp1 = fcmp olt double %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  ret i1 %6
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_both_open(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load double, double* %d.addr, align 8
  %cmp = fcmp olt double %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %3 = load double, double* %d.addr, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 4
  %5 = load double, double* %high, align 8
  %cmp1 = fcmp olt double %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  ret i1 %6
}

declare noalias i8* @malloc(i32 %0) #2

; Function Attrs: noinline nounwind optnone
define hidden %struct.RealSet* @makeIntersect(%struct.RealSet* %left, %struct.RealSet* %right) #0 {
entry:
  %left.addr = alloca %struct.RealSet*, align 4
  %right.addr = alloca %struct.RealSet*, align 4
  %rs = alloca %struct.RealSet*, align 4
  store %struct.RealSet* %left, %struct.RealSet** %left.addr, align 4
  store %struct.RealSet* %right, %struct.RealSet** %right.addr, align 4
  %call = call noalias i8* @malloc(i32 32)
  %0 = bitcast i8* %call to %struct.RealSet*
  store %struct.RealSet* %0, %struct.RealSet** %rs, align 4
  %1 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_intersect, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %2 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %3 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  store %struct.RealSet* %2, %struct.RealSet** %left1, align 4
  %4 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %5 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %right2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 2
  store %struct.RealSet* %4, %struct.RealSet** %right2, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 3
  %7 = load double, double* %low, align 8
  %8 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %low3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %8, i32 0, i32 3
  %9 = load double, double* %low3, align 8
  %10 = call double @llvm.minnum.f64(double %7, double %9)
  %11 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %low4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %11, i32 0, i32 3
  store double %10, double* %low4, align 8
  %12 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %12, i32 0, i32 4
  %13 = load double, double* %high, align 8
  %14 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %high5 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %14, i32 0, i32 4
  %15 = load double, double* %high5, align 8
  %16 = call double @llvm.minnum.f64(double %13, double %15)
  %17 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %high6 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %17, i32 0, i32 4
  store double %16, double* %high6, align 8
  %18 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  ret %struct.RealSet* %18
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_intersect(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 1
  %1 = load %struct.RealSet*, %struct.RealSet** %left, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  %2 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %3 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  %4 = load %struct.RealSet*, %struct.RealSet** %left1, align 4
  %5 = load double, double* %d.addr, align 8
  %call = call zeroext i1 %2(%struct.RealSet* %4, %struct.RealSet* null, double %5)
  br i1 %call, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %6 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 2
  %7 = load %struct.RealSet*, %struct.RealSet** %right, align 8
  %contains2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 0
  %8 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains2, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 2
  %10 = load %struct.RealSet*, %struct.RealSet** %right3, align 8
  %11 = load double, double* %d.addr, align 8
  %call4 = call zeroext i1 %8(%struct.RealSet* %10, %struct.RealSet* null, double %11)
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %12 = phi i1 [ false, %entry ], [ %call4, %land.rhs ]
  ret i1 %12
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.minnum.f64(double %0, double %1) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.RealSet* @makeUnion(%struct.RealSet* %left, %struct.RealSet* %right) #0 {
entry:
  %left.addr = alloca %struct.RealSet*, align 4
  %right.addr = alloca %struct.RealSet*, align 4
  %rs = alloca %struct.RealSet*, align 4
  store %struct.RealSet* %left, %struct.RealSet** %left.addr, align 4
  store %struct.RealSet* %right, %struct.RealSet** %right.addr, align 4
  %call = call noalias i8* @malloc(i32 32)
  %0 = bitcast i8* %call to %struct.RealSet*
  store %struct.RealSet* %0, %struct.RealSet** %rs, align 4
  %1 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_union, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %2 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %3 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  store %struct.RealSet* %2, %struct.RealSet** %left1, align 4
  %4 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %5 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %right2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 2
  store %struct.RealSet* %4, %struct.RealSet** %right2, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 3
  %7 = load double, double* %low, align 8
  %8 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %low3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %8, i32 0, i32 3
  %9 = load double, double* %low3, align 8
  %10 = call double @llvm.minnum.f64(double %7, double %9)
  %11 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %low4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %11, i32 0, i32 3
  store double %10, double* %low4, align 8
  %12 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %12, i32 0, i32 4
  %13 = load double, double* %high, align 8
  %14 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %high5 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %14, i32 0, i32 4
  %15 = load double, double* %high5, align 8
  %16 = call double @llvm.minnum.f64(double %13, double %15)
  %17 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %high6 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %17, i32 0, i32 4
  store double %16, double* %high6, align 8
  %18 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  ret %struct.RealSet* %18
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_union(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 1
  %1 = load %struct.RealSet*, %struct.RealSet** %left, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  %2 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %3 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  %4 = load %struct.RealSet*, %struct.RealSet** %left1, align 4
  %5 = load double, double* %d.addr, align 8
  %call = call zeroext i1 %2(%struct.RealSet* %4, %struct.RealSet* null, double %5)
  br i1 %call, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %6 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 2
  %7 = load %struct.RealSet*, %struct.RealSet** %right, align 8
  %contains2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 0
  %8 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains2, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 2
  %10 = load %struct.RealSet*, %struct.RealSet** %right3, align 8
  %11 = load double, double* %d.addr, align 8
  %call4 = call zeroext i1 %8(%struct.RealSet* %10, %struct.RealSet* null, double %11)
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %12 = phi i1 [ true, %entry ], [ %call4, %lor.rhs ]
  ret i1 %12
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.RealSet* @makeSubtract(%struct.RealSet* %left, %struct.RealSet* %right) #0 {
entry:
  %left.addr = alloca %struct.RealSet*, align 4
  %right.addr = alloca %struct.RealSet*, align 4
  %rs = alloca %struct.RealSet*, align 4
  store %struct.RealSet* %left, %struct.RealSet** %left.addr, align 4
  store %struct.RealSet* %right, %struct.RealSet** %right.addr, align 4
  %call = call noalias i8* @malloc(i32 32)
  %0 = bitcast i8* %call to %struct.RealSet*
  store %struct.RealSet* %0, %struct.RealSet** %rs, align 4
  %1 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_subtract, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %2 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %3 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  store %struct.RealSet* %2, %struct.RealSet** %left1, align 4
  %4 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %5 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %right2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 2
  store %struct.RealSet* %4, %struct.RealSet** %right2, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 3
  %7 = load double, double* %low, align 8
  %8 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %low3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %8, i32 0, i32 3
  store double %7, double* %low3, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 4
  %10 = load double, double* %high, align 8
  %11 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %high4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %11, i32 0, i32 4
  store double %10, double* %high4, align 8
  %12 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  ret %struct.RealSet* %12
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_subtract(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 1
  %1 = load %struct.RealSet*, %struct.RealSet** %left, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  %2 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %3 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  %4 = load %struct.RealSet*, %struct.RealSet** %left1, align 4
  %5 = load double, double* %d.addr, align 8
  %call = call zeroext i1 %2(%struct.RealSet* %4, %struct.RealSet* null, double %5)
  br i1 %call, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %6 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 2
  %7 = load %struct.RealSet*, %struct.RealSet** %right, align 8
  %contains2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 0
  %8 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains2, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 2
  %10 = load %struct.RealSet*, %struct.RealSet** %right3, align 8
  %11 = load double, double* %d.addr, align 8
  %call4 = call zeroext i1 %8(%struct.RealSet* %10, %struct.RealSet* null, double %11)
  %lnot = xor i1 %call4, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %12 = phi i1 [ false, %entry ], [ %lnot, %land.rhs ]
  ret i1 %12
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %a = alloca %struct.RealSet*, align 4
  %b = alloca %struct.RealSet*, align 4
  %c = alloca %struct.RealSet*, align 4
  %d = alloca %struct.RealSet*, align 4
  %e = alloca %struct.RealSet*, align 4
  %f = alloca %struct.RealSet*, align 4
  %g = alloca %struct.RealSet*, align 4
  %i = alloca i32, align 4
  %t = alloca %struct.RealSet*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.RealSet* @makeSet(double 0.000000e+00, double 1.000000e+00, i32 1)
  store %struct.RealSet* %call, %struct.RealSet** %a, align 4
  %call1 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 2.000000e+00, i32 2)
  store %struct.RealSet* %call1, %struct.RealSet** %b, align 4
  %call2 = call %struct.RealSet* @makeSet(double 1.000000e+00, double 2.000000e+00, i32 1)
  store %struct.RealSet* %call2, %struct.RealSet** %c, align 4
  %call3 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 3.000000e+00, i32 2)
  store %struct.RealSet* %call3, %struct.RealSet** %d, align 4
  %call4 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 1.000000e+00, i32 3)
  store %struct.RealSet* %call4, %struct.RealSet** %e, align 4
  %call5 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 1.000000e+00, i32 0)
  store %struct.RealSet* %call5, %struct.RealSet** %f, align 4
  %call6 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 0.000000e+00, i32 0)
  store %struct.RealSet* %call6, %struct.RealSet** %g, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load %struct.RealSet*, %struct.RealSet** %a, align 4
  %2 = load %struct.RealSet*, %struct.RealSet** %b, align 4
  %call7 = call %struct.RealSet* @makeUnion(%struct.RealSet* %1, %struct.RealSet* %2)
  store %struct.RealSet* %call7, %struct.RealSet** %t, align 4
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 0
  %5 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %7 = load i32, i32* %i, align 4
  %conv = sitofp i32 %7 to double
  %call8 = call zeroext i1 %5(%struct.RealSet* %6, %struct.RealSet* null, double %conv)
  %conv9 = zext i1 %call8 to i32
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str, i32 0, i32 0), i32 %3, i32 %conv9)
  %8 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %9 = bitcast %struct.RealSet* %8 to i8*
  call void @free(i8* %9)
  %10 = load %struct.RealSet*, %struct.RealSet** %b, align 4
  %11 = load %struct.RealSet*, %struct.RealSet** %c, align 4
  %call11 = call %struct.RealSet* @makeIntersect(%struct.RealSet* %10, %struct.RealSet* %11)
  store %struct.RealSet* %call11, %struct.RealSet** %t, align 4
  %12 = load i32, i32* %i, align 4
  %13 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %contains12 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %13, i32 0, i32 0
  %14 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains12, align 8
  %15 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %16 = load i32, i32* %i, align 4
  %conv13 = sitofp i32 %16 to double
  %call14 = call zeroext i1 %14(%struct.RealSet* %15, %struct.RealSet* null, double %conv13)
  %conv15 = zext i1 %call14 to i32
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.1, i32 0, i32 0), i32 %12, i32 %conv15)
  %17 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %18 = bitcast %struct.RealSet* %17 to i8*
  call void @free(i8* %18)
  %19 = load %struct.RealSet*, %struct.RealSet** %d, align 4
  %20 = load %struct.RealSet*, %struct.RealSet** %e, align 4
  %call17 = call %struct.RealSet* @makeSubtract(%struct.RealSet* %19, %struct.RealSet* %20)
  store %struct.RealSet* %call17, %struct.RealSet** %t, align 4
  %21 = load i32, i32* %i, align 4
  %22 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %contains18 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %22, i32 0, i32 0
  %23 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains18, align 8
  %24 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %25 = load i32, i32* %i, align 4
  %conv19 = sitofp i32 %25 to double
  %call20 = call zeroext i1 %23(%struct.RealSet* %24, %struct.RealSet* null, double %conv19)
  %conv21 = zext i1 %call20 to i32
  %call22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.2, i32 0, i32 0), i32 %21, i32 %conv21)
  %26 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %27 = bitcast %struct.RealSet* %26 to i8*
  call void @free(i8* %27)
  %28 = load %struct.RealSet*, %struct.RealSet** %d, align 4
  %29 = load %struct.RealSet*, %struct.RealSet** %f, align 4
  %call23 = call %struct.RealSet* @makeSubtract(%struct.RealSet* %28, %struct.RealSet* %29)
  store %struct.RealSet* %call23, %struct.RealSet** %t, align 4
  %30 = load i32, i32* %i, align 4
  %31 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %contains24 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %31, i32 0, i32 0
  %32 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains24, align 8
  %33 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %34 = load i32, i32* %i, align 4
  %conv25 = sitofp i32 %34 to double
  %call26 = call zeroext i1 %32(%struct.RealSet* %33, %struct.RealSet* null, double %conv25)
  %conv27 = zext i1 %call26 to i32
  %call28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.3, i32 0, i32 0), i32 %30, i32 %conv27)
  %35 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %36 = bitcast %struct.RealSet* %35 to i8*
  call void @free(i8* %36)
  %call29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0))
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %37 = load i32, i32* %i, align 4
  %inc = add nsw i32 %37, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %38 = load %struct.RealSet*, %struct.RealSet** %g, align 4
  %call30 = call zeroext i1 @empty(%struct.RealSet* %38)
  %conv31 = zext i1 %call30 to i32
  %call32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.5, i32 0, i32 0), i32 %conv31)
  %39 = load %struct.RealSet*, %struct.RealSet** %a, align 4
  %40 = bitcast %struct.RealSet* %39 to i8*
  call void @free(i8* %40)
  %41 = load %struct.RealSet*, %struct.RealSet** %b, align 4
  %42 = bitcast %struct.RealSet* %41 to i8*
  call void @free(i8* %42)
  %43 = load %struct.RealSet*, %struct.RealSet** %c, align 4
  %44 = bitcast %struct.RealSet* %43 to i8*
  call void @free(i8* %44)
  %45 = load %struct.RealSet*, %struct.RealSet** %d, align 4
  %46 = bitcast %struct.RealSet* %45 to i8*
  call void @free(i8* %46)
  %47 = load %struct.RealSet*, %struct.RealSet** %e, align 4
  %48 = bitcast %struct.RealSet* %47 to i8*
  call void @free(i8* %48)
  %49 = load %struct.RealSet*, %struct.RealSet** %f, align 4
  %50 = bitcast %struct.RealSet* %49 to i8*
  call void @free(i8* %50)
  %51 = load %struct.RealSet*, %struct.RealSet** %g, align 4
  %52 = bitcast %struct.RealSet* %51 to i8*
  call void @free(i8* %52)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #2

declare void @free(i8* %0) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for makeIntersect()

; entering Souper's runOnFunction() for ./Set_of_real_numbers.c.bc:contains_intersect()

; ModuleID = './Set_of_real_numbers.c.bc'
source_filename = "./Set_of_real_numbers.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.RealSet = type { i1 (%struct.RealSet*, %struct.RealSet*, double)*, %struct.RealSet*, %struct.RealSet*, double, double }

@.str = private unnamed_addr constant [43 x i8] c"(0, 1]   union   [0, 2) contains %d is %d\0A\00", align 1
@.str.1 = private unnamed_addr constant [43 x i8] c"[0, 2) intersect (1, 2] contains %d is %d\0A\00", align 1
@.str.2 = private unnamed_addr constant [43 x i8] c"[0, 3)     -     (0, 1) contains %d is %d\0A\00", align 1
@.str.3 = private unnamed_addr constant [43 x i8] c"[0, 3)     -     [0, 1] contains %d is %d\0A\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.5 = private unnamed_addr constant [20 x i8] c"[0, 0] is empty %d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden double @length(%struct.RealSet* %self) #0 {
entry:
  %retval = alloca double, align 8
  %self.addr = alloca %struct.RealSet*, align 4
  %interval = alloca double, align 8
  %p = alloca double, align 8
  %count = alloca i32, align 4
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store double 1.000000e-05, double* %interval, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  store double %1, double* %p, align 8
  store i32 0, i32* %count, align 4
  %2 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %2, i32 0, i32 3
  %3 = load double, double* %low1, align 8
  %4 = call double @llvm.fabs.f64(double %3) #3
  %cmpinf = fcmp oeq double %4, 0x7FF0000000000000
  br i1 %cmpinf, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %5 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 4
  %6 = load double, double* %high, align 8
  %7 = call double @llvm.fabs.f64(double %6) #3
  %cmpinf2 = fcmp oeq double %7, 0x7FF0000000000000
  br i1 %cmpinf2, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store double -1.000000e+00, double* %retval, align 8
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %8 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %8, i32 0, i32 4
  %9 = load double, double* %high3, align 8
  %10 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %10, i32 0, i32 3
  %11 = load double, double* %low4, align 8
  %cmp = fcmp ole double %9, %11
  br i1 %cmp, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  store double 0.000000e+00, double* %retval, align 8
  br label %return

if.end6:                                          ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end6
  %12 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %12, i32 0, i32 0
  %13 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %14 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %15 = load double, double* %p, align 8
  %call = call zeroext i1 %13(%struct.RealSet* %14, %struct.RealSet* null, double %15)
  br i1 %call, label %if.then7, label %if.end8

if.then7:                                         ; preds = %do.body
  %16 = load i32, i32* %count, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %count, align 4
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %do.body
  %17 = load double, double* %p, align 8
  %add = fadd double %17, 1.000000e-05
  store double %add, double* %p, align 8
  br label %do.cond

do.cond:                                          ; preds = %if.end8
  %18 = load double, double* %p, align 8
  %19 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high9 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %19, i32 0, i32 4
  %20 = load double, double* %high9, align 8
  %cmp10 = fcmp olt double %18, %20
  br i1 %cmp10, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %21 = load i32, i32* %count, align 4
  %conv = sitofp i32 %21 to double
  %mul = fmul double %conv, 1.000000e-05
  store double %mul, double* %retval, align 8
  br label %return

return:                                           ; preds = %do.end, %if.then5, %if.then
  %22 = load double, double* %retval, align 8
  ret double %22
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @empty(%struct.RealSet* %self) #0 {
entry:
  %retval = alloca i1, align 1
  %self.addr = alloca %struct.RealSet*, align 4
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %2, i32 0, i32 4
  %3 = load double, double* %high, align 8
  %cmp = fcmp oeq double %1, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 0
  %5 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %7 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 3
  %8 = load double, double* %low1, align 8
  %call = call zeroext i1 %5(%struct.RealSet* %6, %struct.RealSet* null, double %8)
  %lnot = xor i1 %call, true
  store i1 %lnot, i1* %retval, align 1
  br label %return

if.end:                                           ; preds = %entry
  %9 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %call2 = call double @length(%struct.RealSet* %9)
  %cmp3 = fcmp oeq double %call2, 0.000000e+00
  store i1 %cmp3, i1* %retval, align 1
  br label %return

return:                                           ; preds = %if.end, %if.then
  %10 = load i1, i1* %retval, align 1
  ret i1 %10
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.RealSet* @makeSet(double %low, double %high, i32 %type) #0 {
entry:
  %retval = alloca %struct.RealSet*, align 4
  %low.addr = alloca double, align 8
  %high.addr = alloca double, align 8
  %type.addr = alloca i32, align 4
  %contains = alloca i1 (%struct.RealSet*, %struct.RealSet*, double)*, align 4
  %rs = alloca %struct.RealSet*, align 4
  store double %low, double* %low.addr, align 8
  store double %high, double* %high.addr, align 8
  store i32 %type, i32* %type.addr, align 4
  %0 = load i32, i32* %type.addr, align 4
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
    i32 2, label %sw.bb2
    i32 3, label %sw.bb3
  ]

sw.bb:                                            ; preds = %entry
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_closed, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  br label %sw.epilog

sw.bb1:                                           ; preds = %entry
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_left_open, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  br label %sw.epilog

sw.bb2:                                           ; preds = %entry
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_right_open, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  br label %sw.epilog

sw.bb3:                                           ; preds = %entry
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_both_open, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  store %struct.RealSet* null, %struct.RealSet** %retval, align 4
  br label %return

sw.epilog:                                        ; preds = %sw.bb3, %sw.bb2, %sw.bb1, %sw.bb
  %call = call noalias i8* @malloc(i32 32)
  %1 = bitcast i8* %call to %struct.RealSet*
  store %struct.RealSet* %1, %struct.RealSet** %rs, align 4
  %2 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  %3 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %contains4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 0
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* %2, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains4, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %left = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 1
  store %struct.RealSet* null, %struct.RealSet** %left, align 4
  %5 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %right = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 2
  store %struct.RealSet* null, %struct.RealSet** %right, align 8
  %6 = load double, double* %low.addr, align 8
  %7 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %low5 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 3
  store double %6, double* %low5, align 8
  %8 = load double, double* %high.addr, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %high6 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 4
  store double %8, double* %high6, align 8
  %10 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  store %struct.RealSet* %10, %struct.RealSet** %retval, align 4
  br label %return

return:                                           ; preds = %sw.epilog, %sw.default
  %11 = load %struct.RealSet*, %struct.RealSet** %retval, align 4
  ret %struct.RealSet* %11
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_closed(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load double, double* %d.addr, align 8
  %cmp = fcmp ole double %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %3 = load double, double* %d.addr, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 4
  %5 = load double, double* %high, align 8
  %cmp1 = fcmp ole double %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  ret i1 %6
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_left_open(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load double, double* %d.addr, align 8
  %cmp = fcmp olt double %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %3 = load double, double* %d.addr, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 4
  %5 = load double, double* %high, align 8
  %cmp1 = fcmp ole double %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  ret i1 %6
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_right_open(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load double, double* %d.addr, align 8
  %cmp = fcmp ole double %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %3 = load double, double* %d.addr, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 4
  %5 = load double, double* %high, align 8
  %cmp1 = fcmp olt double %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  ret i1 %6
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_both_open(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load double, double* %d.addr, align 8
  %cmp = fcmp olt double %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %3 = load double, double* %d.addr, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 4
  %5 = load double, double* %high, align 8
  %cmp1 = fcmp olt double %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  ret i1 %6
}

declare noalias i8* @malloc(i32 %0) #2

; Function Attrs: noinline nounwind optnone
define hidden %struct.RealSet* @makeIntersect(%struct.RealSet* %left, %struct.RealSet* %right) #0 {
entry:
  %left.addr = alloca %struct.RealSet*, align 4
  %right.addr = alloca %struct.RealSet*, align 4
  %rs = alloca %struct.RealSet*, align 4
  store %struct.RealSet* %left, %struct.RealSet** %left.addr, align 4
  store %struct.RealSet* %right, %struct.RealSet** %right.addr, align 4
  %call = call noalias i8* @malloc(i32 32)
  %0 = bitcast i8* %call to %struct.RealSet*
  store %struct.RealSet* %0, %struct.RealSet** %rs, align 4
  %1 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_intersect, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %2 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %3 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  store %struct.RealSet* %2, %struct.RealSet** %left1, align 4
  %4 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %5 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %right2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 2
  store %struct.RealSet* %4, %struct.RealSet** %right2, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 3
  %7 = load double, double* %low, align 8
  %8 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %low3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %8, i32 0, i32 3
  %9 = load double, double* %low3, align 8
  %10 = call double @llvm.minnum.f64(double %7, double %9)
  %11 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %low4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %11, i32 0, i32 3
  store double %10, double* %low4, align 8
  %12 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %12, i32 0, i32 4
  %13 = load double, double* %high, align 8
  %14 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %high5 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %14, i32 0, i32 4
  %15 = load double, double* %high5, align 8
  %16 = call double @llvm.minnum.f64(double %13, double %15)
  %17 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %high6 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %17, i32 0, i32 4
  store double %16, double* %high6, align 8
  %18 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  ret %struct.RealSet* %18
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_intersect(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 1
  %1 = load %struct.RealSet*, %struct.RealSet** %left, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  %2 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %3 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  %4 = load %struct.RealSet*, %struct.RealSet** %left1, align 4
  %5 = load double, double* %d.addr, align 8
  %call = call zeroext i1 %2(%struct.RealSet* %4, %struct.RealSet* null, double %5)
  br i1 %call, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %6 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 2
  %7 = load %struct.RealSet*, %struct.RealSet** %right, align 8
  %contains2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 0
  %8 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains2, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 2
  %10 = load %struct.RealSet*, %struct.RealSet** %right3, align 8
  %11 = load double, double* %d.addr, align 8
  %call4 = call zeroext i1 %8(%struct.RealSet* %10, %struct.RealSet* null, double %11)
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %12 = phi i1 [ false, %entry ], [ %call4, %land.rhs ]
  ret i1 %12
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.minnum.f64(double %0, double %1) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.RealSet* @makeUnion(%struct.RealSet* %left, %struct.RealSet* %right) #0 {
entry:
  %left.addr = alloca %struct.RealSet*, align 4
  %right.addr = alloca %struct.RealSet*, align 4
  %rs = alloca %struct.RealSet*, align 4
  store %struct.RealSet* %left, %struct.RealSet** %left.addr, align 4
  store %struct.RealSet* %right, %struct.RealSet** %right.addr, align 4
  %call = call noalias i8* @malloc(i32 32)
  %0 = bitcast i8* %call to %struct.RealSet*
  store %struct.RealSet* %0, %struct.RealSet** %rs, align 4
  %1 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_union, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %2 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %3 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  store %struct.RealSet* %2, %struct.RealSet** %left1, align 4
  %4 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %5 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %right2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 2
  store %struct.RealSet* %4, %struct.RealSet** %right2, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 3
  %7 = load double, double* %low, align 8
  %8 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %low3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %8, i32 0, i32 3
  %9 = load double, double* %low3, align 8
  %10 = call double @llvm.minnum.f64(double %7, double %9)
  %11 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %low4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %11, i32 0, i32 3
  store double %10, double* %low4, align 8
  %12 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %12, i32 0, i32 4
  %13 = load double, double* %high, align 8
  %14 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %high5 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %14, i32 0, i32 4
  %15 = load double, double* %high5, align 8
  %16 = call double @llvm.minnum.f64(double %13, double %15)
  %17 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %high6 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %17, i32 0, i32 4
  store double %16, double* %high6, align 8
  %18 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  ret %struct.RealSet* %18
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_union(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 1
  %1 = load %struct.RealSet*, %struct.RealSet** %left, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  %2 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %3 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  %4 = load %struct.RealSet*, %struct.RealSet** %left1, align 4
  %5 = load double, double* %d.addr, align 8
  %call = call zeroext i1 %2(%struct.RealSet* %4, %struct.RealSet* null, double %5)
  br i1 %call, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %6 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 2
  %7 = load %struct.RealSet*, %struct.RealSet** %right, align 8
  %contains2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 0
  %8 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains2, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 2
  %10 = load %struct.RealSet*, %struct.RealSet** %right3, align 8
  %11 = load double, double* %d.addr, align 8
  %call4 = call zeroext i1 %8(%struct.RealSet* %10, %struct.RealSet* null, double %11)
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %12 = phi i1 [ true, %entry ], [ %call4, %lor.rhs ]
  ret i1 %12
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.RealSet* @makeSubtract(%struct.RealSet* %left, %struct.RealSet* %right) #0 {
entry:
  %left.addr = alloca %struct.RealSet*, align 4
  %right.addr = alloca %struct.RealSet*, align 4
  %rs = alloca %struct.RealSet*, align 4
  store %struct.RealSet* %left, %struct.RealSet** %left.addr, align 4
  store %struct.RealSet* %right, %struct.RealSet** %right.addr, align 4
  %call = call noalias i8* @malloc(i32 32)
  %0 = bitcast i8* %call to %struct.RealSet*
  store %struct.RealSet* %0, %struct.RealSet** %rs, align 4
  %1 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_subtract, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %2 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %3 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  store %struct.RealSet* %2, %struct.RealSet** %left1, align 4
  %4 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %5 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %right2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 2
  store %struct.RealSet* %4, %struct.RealSet** %right2, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 3
  %7 = load double, double* %low, align 8
  %8 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %low3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %8, i32 0, i32 3
  store double %7, double* %low3, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 4
  %10 = load double, double* %high, align 8
  %11 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %high4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %11, i32 0, i32 4
  store double %10, double* %high4, align 8
  %12 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  ret %struct.RealSet* %12
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_subtract(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 1
  %1 = load %struct.RealSet*, %struct.RealSet** %left, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  %2 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %3 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  %4 = load %struct.RealSet*, %struct.RealSet** %left1, align 4
  %5 = load double, double* %d.addr, align 8
  %call = call zeroext i1 %2(%struct.RealSet* %4, %struct.RealSet* null, double %5)
  br i1 %call, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %6 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 2
  %7 = load %struct.RealSet*, %struct.RealSet** %right, align 8
  %contains2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 0
  %8 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains2, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 2
  %10 = load %struct.RealSet*, %struct.RealSet** %right3, align 8
  %11 = load double, double* %d.addr, align 8
  %call4 = call zeroext i1 %8(%struct.RealSet* %10, %struct.RealSet* null, double %11)
  %lnot = xor i1 %call4, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %12 = phi i1 [ false, %entry ], [ %lnot, %land.rhs ]
  ret i1 %12
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %a = alloca %struct.RealSet*, align 4
  %b = alloca %struct.RealSet*, align 4
  %c = alloca %struct.RealSet*, align 4
  %d = alloca %struct.RealSet*, align 4
  %e = alloca %struct.RealSet*, align 4
  %f = alloca %struct.RealSet*, align 4
  %g = alloca %struct.RealSet*, align 4
  %i = alloca i32, align 4
  %t = alloca %struct.RealSet*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.RealSet* @makeSet(double 0.000000e+00, double 1.000000e+00, i32 1)
  store %struct.RealSet* %call, %struct.RealSet** %a, align 4
  %call1 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 2.000000e+00, i32 2)
  store %struct.RealSet* %call1, %struct.RealSet** %b, align 4
  %call2 = call %struct.RealSet* @makeSet(double 1.000000e+00, double 2.000000e+00, i32 1)
  store %struct.RealSet* %call2, %struct.RealSet** %c, align 4
  %call3 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 3.000000e+00, i32 2)
  store %struct.RealSet* %call3, %struct.RealSet** %d, align 4
  %call4 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 1.000000e+00, i32 3)
  store %struct.RealSet* %call4, %struct.RealSet** %e, align 4
  %call5 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 1.000000e+00, i32 0)
  store %struct.RealSet* %call5, %struct.RealSet** %f, align 4
  %call6 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 0.000000e+00, i32 0)
  store %struct.RealSet* %call6, %struct.RealSet** %g, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load %struct.RealSet*, %struct.RealSet** %a, align 4
  %2 = load %struct.RealSet*, %struct.RealSet** %b, align 4
  %call7 = call %struct.RealSet* @makeUnion(%struct.RealSet* %1, %struct.RealSet* %2)
  store %struct.RealSet* %call7, %struct.RealSet** %t, align 4
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 0
  %5 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %7 = load i32, i32* %i, align 4
  %conv = sitofp i32 %7 to double
  %call8 = call zeroext i1 %5(%struct.RealSet* %6, %struct.RealSet* null, double %conv)
  %conv9 = zext i1 %call8 to i32
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str, i32 0, i32 0), i32 %3, i32 %conv9)
  %8 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %9 = bitcast %struct.RealSet* %8 to i8*
  call void @free(i8* %9)
  %10 = load %struct.RealSet*, %struct.RealSet** %b, align 4
  %11 = load %struct.RealSet*, %struct.RealSet** %c, align 4
  %call11 = call %struct.RealSet* @makeIntersect(%struct.RealSet* %10, %struct.RealSet* %11)
  store %struct.RealSet* %call11, %struct.RealSet** %t, align 4
  %12 = load i32, i32* %i, align 4
  %13 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %contains12 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %13, i32 0, i32 0
  %14 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains12, align 8
  %15 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %16 = load i32, i32* %i, align 4
  %conv13 = sitofp i32 %16 to double
  %call14 = call zeroext i1 %14(%struct.RealSet* %15, %struct.RealSet* null, double %conv13)
  %conv15 = zext i1 %call14 to i32
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.1, i32 0, i32 0), i32 %12, i32 %conv15)
  %17 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %18 = bitcast %struct.RealSet* %17 to i8*
  call void @free(i8* %18)
  %19 = load %struct.RealSet*, %struct.RealSet** %d, align 4
  %20 = load %struct.RealSet*, %struct.RealSet** %e, align 4
  %call17 = call %struct.RealSet* @makeSubtract(%struct.RealSet* %19, %struct.RealSet* %20)
  store %struct.RealSet* %call17, %struct.RealSet** %t, align 4
  %21 = load i32, i32* %i, align 4
  %22 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %contains18 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %22, i32 0, i32 0
  %23 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains18, align 8
  %24 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %25 = load i32, i32* %i, align 4
  %conv19 = sitofp i32 %25 to double
  %call20 = call zeroext i1 %23(%struct.RealSet* %24, %struct.RealSet* null, double %conv19)
  %conv21 = zext i1 %call20 to i32
  %call22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.2, i32 0, i32 0), i32 %21, i32 %conv21)
  %26 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %27 = bitcast %struct.RealSet* %26 to i8*
  call void @free(i8* %27)
  %28 = load %struct.RealSet*, %struct.RealSet** %d, align 4
  %29 = load %struct.RealSet*, %struct.RealSet** %f, align 4
  %call23 = call %struct.RealSet* @makeSubtract(%struct.RealSet* %28, %struct.RealSet* %29)
  store %struct.RealSet* %call23, %struct.RealSet** %t, align 4
  %30 = load i32, i32* %i, align 4
  %31 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %contains24 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %31, i32 0, i32 0
  %32 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains24, align 8
  %33 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %34 = load i32, i32* %i, align 4
  %conv25 = sitofp i32 %34 to double
  %call26 = call zeroext i1 %32(%struct.RealSet* %33, %struct.RealSet* null, double %conv25)
  %conv27 = zext i1 %call26 to i32
  %call28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.3, i32 0, i32 0), i32 %30, i32 %conv27)
  %35 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %36 = bitcast %struct.RealSet* %35 to i8*
  call void @free(i8* %36)
  %call29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0))
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %37 = load i32, i32* %i, align 4
  %inc = add nsw i32 %37, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %38 = load %struct.RealSet*, %struct.RealSet** %g, align 4
  %call30 = call zeroext i1 @empty(%struct.RealSet* %38)
  %conv31 = zext i1 %call30 to i32
  %call32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.5, i32 0, i32 0), i32 %conv31)
  %39 = load %struct.RealSet*, %struct.RealSet** %a, align 4
  %40 = bitcast %struct.RealSet* %39 to i8*
  call void @free(i8* %40)
  %41 = load %struct.RealSet*, %struct.RealSet** %b, align 4
  %42 = bitcast %struct.RealSet* %41 to i8*
  call void @free(i8* %42)
  %43 = load %struct.RealSet*, %struct.RealSet** %c, align 4
  %44 = bitcast %struct.RealSet* %43 to i8*
  call void @free(i8* %44)
  %45 = load %struct.RealSet*, %struct.RealSet** %d, align 4
  %46 = bitcast %struct.RealSet* %45 to i8*
  call void @free(i8* %46)
  %47 = load %struct.RealSet*, %struct.RealSet** %e, align 4
  %48 = bitcast %struct.RealSet* %47 to i8*
  call void @free(i8* %48)
  %49 = load %struct.RealSet*, %struct.RealSet** %f, align 4
  %50 = bitcast %struct.RealSet* %49 to i8*
  call void @free(i8* %50)
  %51 = load %struct.RealSet*, %struct.RealSet** %g, align 4
  %52 = bitcast %struct.RealSet* %51 to i8*
  call void @free(i8* %52)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #2

declare void @free(i8* %0) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call zeroext i1 %2(%struct.RealSet* %4, %struct.RealSet* null, double %5)
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %call4 = call zeroext i1 %8(%struct.RealSet* %10, %struct.RealSet* null, double %11)
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = phi i1 [ false, %entry ], [ %call4, %land.rhs ]
; Looking for a replacement for:
%0 = block 2
%1:i1 = var
%2:i1 = phi %0, 0:i1, %1
infer %2
#########################################################
; exiting Souper's runOnFunction() for ./Set_of_real_numbers.c.bc:contains_intersect()

; entering Souper's runOnFunction() for makeUnion()

; ModuleID = './Set_of_real_numbers.c.bc'
source_filename = "./Set_of_real_numbers.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.RealSet = type { i1 (%struct.RealSet*, %struct.RealSet*, double)*, %struct.RealSet*, %struct.RealSet*, double, double }

@.str = private unnamed_addr constant [43 x i8] c"(0, 1]   union   [0, 2) contains %d is %d\0A\00", align 1
@.str.1 = private unnamed_addr constant [43 x i8] c"[0, 2) intersect (1, 2] contains %d is %d\0A\00", align 1
@.str.2 = private unnamed_addr constant [43 x i8] c"[0, 3)     -     (0, 1) contains %d is %d\0A\00", align 1
@.str.3 = private unnamed_addr constant [43 x i8] c"[0, 3)     -     [0, 1] contains %d is %d\0A\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.5 = private unnamed_addr constant [20 x i8] c"[0, 0] is empty %d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden double @length(%struct.RealSet* %self) #0 {
entry:
  %retval = alloca double, align 8
  %self.addr = alloca %struct.RealSet*, align 4
  %interval = alloca double, align 8
  %p = alloca double, align 8
  %count = alloca i32, align 4
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store double 1.000000e-05, double* %interval, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  store double %1, double* %p, align 8
  store i32 0, i32* %count, align 4
  %2 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %2, i32 0, i32 3
  %3 = load double, double* %low1, align 8
  %4 = call double @llvm.fabs.f64(double %3) #3
  %cmpinf = fcmp oeq double %4, 0x7FF0000000000000
  br i1 %cmpinf, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %5 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 4
  %6 = load double, double* %high, align 8
  %7 = call double @llvm.fabs.f64(double %6) #3
  %cmpinf2 = fcmp oeq double %7, 0x7FF0000000000000
  br i1 %cmpinf2, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store double -1.000000e+00, double* %retval, align 8
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %8 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %8, i32 0, i32 4
  %9 = load double, double* %high3, align 8
  %10 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %10, i32 0, i32 3
  %11 = load double, double* %low4, align 8
  %cmp = fcmp ole double %9, %11
  br i1 %cmp, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  store double 0.000000e+00, double* %retval, align 8
  br label %return

if.end6:                                          ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end6
  %12 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %12, i32 0, i32 0
  %13 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %14 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %15 = load double, double* %p, align 8
  %call = call zeroext i1 %13(%struct.RealSet* %14, %struct.RealSet* null, double %15)
  br i1 %call, label %if.then7, label %if.end8

if.then7:                                         ; preds = %do.body
  %16 = load i32, i32* %count, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %count, align 4
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %do.body
  %17 = load double, double* %p, align 8
  %add = fadd double %17, 1.000000e-05
  store double %add, double* %p, align 8
  br label %do.cond

do.cond:                                          ; preds = %if.end8
  %18 = load double, double* %p, align 8
  %19 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high9 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %19, i32 0, i32 4
  %20 = load double, double* %high9, align 8
  %cmp10 = fcmp olt double %18, %20
  br i1 %cmp10, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %21 = load i32, i32* %count, align 4
  %conv = sitofp i32 %21 to double
  %mul = fmul double %conv, 1.000000e-05
  store double %mul, double* %retval, align 8
  br label %return

return:                                           ; preds = %do.end, %if.then5, %if.then
  %22 = load double, double* %retval, align 8
  ret double %22
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @empty(%struct.RealSet* %self) #0 {
entry:
  %retval = alloca i1, align 1
  %self.addr = alloca %struct.RealSet*, align 4
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %2, i32 0, i32 4
  %3 = load double, double* %high, align 8
  %cmp = fcmp oeq double %1, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 0
  %5 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %7 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 3
  %8 = load double, double* %low1, align 8
  %call = call zeroext i1 %5(%struct.RealSet* %6, %struct.RealSet* null, double %8)
  %lnot = xor i1 %call, true
  store i1 %lnot, i1* %retval, align 1
  br label %return

if.end:                                           ; preds = %entry
  %9 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %call2 = call double @length(%struct.RealSet* %9)
  %cmp3 = fcmp oeq double %call2, 0.000000e+00
  store i1 %cmp3, i1* %retval, align 1
  br label %return

return:                                           ; preds = %if.end, %if.then
  %10 = load i1, i1* %retval, align 1
  ret i1 %10
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.RealSet* @makeSet(double %low, double %high, i32 %type) #0 {
entry:
  %retval = alloca %struct.RealSet*, align 4
  %low.addr = alloca double, align 8
  %high.addr = alloca double, align 8
  %type.addr = alloca i32, align 4
  %contains = alloca i1 (%struct.RealSet*, %struct.RealSet*, double)*, align 4
  %rs = alloca %struct.RealSet*, align 4
  store double %low, double* %low.addr, align 8
  store double %high, double* %high.addr, align 8
  store i32 %type, i32* %type.addr, align 4
  %0 = load i32, i32* %type.addr, align 4
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
    i32 2, label %sw.bb2
    i32 3, label %sw.bb3
  ]

sw.bb:                                            ; preds = %entry
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_closed, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  br label %sw.epilog

sw.bb1:                                           ; preds = %entry
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_left_open, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  br label %sw.epilog

sw.bb2:                                           ; preds = %entry
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_right_open, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  br label %sw.epilog

sw.bb3:                                           ; preds = %entry
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_both_open, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  store %struct.RealSet* null, %struct.RealSet** %retval, align 4
  br label %return

sw.epilog:                                        ; preds = %sw.bb3, %sw.bb2, %sw.bb1, %sw.bb
  %call = call noalias i8* @malloc(i32 32)
  %1 = bitcast i8* %call to %struct.RealSet*
  store %struct.RealSet* %1, %struct.RealSet** %rs, align 4
  %2 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  %3 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %contains4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 0
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* %2, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains4, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %left = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 1
  store %struct.RealSet* null, %struct.RealSet** %left, align 4
  %5 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %right = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 2
  store %struct.RealSet* null, %struct.RealSet** %right, align 8
  %6 = load double, double* %low.addr, align 8
  %7 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %low5 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 3
  store double %6, double* %low5, align 8
  %8 = load double, double* %high.addr, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %high6 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 4
  store double %8, double* %high6, align 8
  %10 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  store %struct.RealSet* %10, %struct.RealSet** %retval, align 4
  br label %return

return:                                           ; preds = %sw.epilog, %sw.default
  %11 = load %struct.RealSet*, %struct.RealSet** %retval, align 4
  ret %struct.RealSet* %11
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_closed(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load double, double* %d.addr, align 8
  %cmp = fcmp ole double %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %3 = load double, double* %d.addr, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 4
  %5 = load double, double* %high, align 8
  %cmp1 = fcmp ole double %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  ret i1 %6
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_left_open(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load double, double* %d.addr, align 8
  %cmp = fcmp olt double %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %3 = load double, double* %d.addr, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 4
  %5 = load double, double* %high, align 8
  %cmp1 = fcmp ole double %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  ret i1 %6
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_right_open(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load double, double* %d.addr, align 8
  %cmp = fcmp ole double %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %3 = load double, double* %d.addr, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 4
  %5 = load double, double* %high, align 8
  %cmp1 = fcmp olt double %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  ret i1 %6
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_both_open(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load double, double* %d.addr, align 8
  %cmp = fcmp olt double %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %3 = load double, double* %d.addr, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 4
  %5 = load double, double* %high, align 8
  %cmp1 = fcmp olt double %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  ret i1 %6
}

declare noalias i8* @malloc(i32 %0) #2

; Function Attrs: noinline nounwind optnone
define hidden %struct.RealSet* @makeIntersect(%struct.RealSet* %left, %struct.RealSet* %right) #0 {
entry:
  %left.addr = alloca %struct.RealSet*, align 4
  %right.addr = alloca %struct.RealSet*, align 4
  %rs = alloca %struct.RealSet*, align 4
  store %struct.RealSet* %left, %struct.RealSet** %left.addr, align 4
  store %struct.RealSet* %right, %struct.RealSet** %right.addr, align 4
  %call = call noalias i8* @malloc(i32 32)
  %0 = bitcast i8* %call to %struct.RealSet*
  store %struct.RealSet* %0, %struct.RealSet** %rs, align 4
  %1 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_intersect, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %2 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %3 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  store %struct.RealSet* %2, %struct.RealSet** %left1, align 4
  %4 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %5 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %right2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 2
  store %struct.RealSet* %4, %struct.RealSet** %right2, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 3
  %7 = load double, double* %low, align 8
  %8 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %low3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %8, i32 0, i32 3
  %9 = load double, double* %low3, align 8
  %10 = call double @llvm.minnum.f64(double %7, double %9)
  %11 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %low4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %11, i32 0, i32 3
  store double %10, double* %low4, align 8
  %12 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %12, i32 0, i32 4
  %13 = load double, double* %high, align 8
  %14 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %high5 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %14, i32 0, i32 4
  %15 = load double, double* %high5, align 8
  %16 = call double @llvm.minnum.f64(double %13, double %15)
  %17 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %high6 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %17, i32 0, i32 4
  store double %16, double* %high6, align 8
  %18 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  ret %struct.RealSet* %18
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_intersect(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 1
  %1 = load %struct.RealSet*, %struct.RealSet** %left, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  %2 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %3 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  %4 = load %struct.RealSet*, %struct.RealSet** %left1, align 4
  %5 = load double, double* %d.addr, align 8
  %call = call zeroext i1 %2(%struct.RealSet* %4, %struct.RealSet* null, double %5)
  br i1 %call, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %6 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 2
  %7 = load %struct.RealSet*, %struct.RealSet** %right, align 8
  %contains2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 0
  %8 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains2, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 2
  %10 = load %struct.RealSet*, %struct.RealSet** %right3, align 8
  %11 = load double, double* %d.addr, align 8
  %call4 = call zeroext i1 %8(%struct.RealSet* %10, %struct.RealSet* null, double %11)
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %12 = phi i1 [ false, %entry ], [ %call4, %land.rhs ]
  ret i1 %12
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.minnum.f64(double %0, double %1) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.RealSet* @makeUnion(%struct.RealSet* %left, %struct.RealSet* %right) #0 {
entry:
  %left.addr = alloca %struct.RealSet*, align 4
  %right.addr = alloca %struct.RealSet*, align 4
  %rs = alloca %struct.RealSet*, align 4
  store %struct.RealSet* %left, %struct.RealSet** %left.addr, align 4
  store %struct.RealSet* %right, %struct.RealSet** %right.addr, align 4
  %call = call noalias i8* @malloc(i32 32)
  %0 = bitcast i8* %call to %struct.RealSet*
  store %struct.RealSet* %0, %struct.RealSet** %rs, align 4
  %1 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_union, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %2 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %3 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  store %struct.RealSet* %2, %struct.RealSet** %left1, align 4
  %4 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %5 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %right2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 2
  store %struct.RealSet* %4, %struct.RealSet** %right2, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 3
  %7 = load double, double* %low, align 8
  %8 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %low3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %8, i32 0, i32 3
  %9 = load double, double* %low3, align 8
  %10 = call double @llvm.minnum.f64(double %7, double %9)
  %11 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %low4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %11, i32 0, i32 3
  store double %10, double* %low4, align 8
  %12 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %12, i32 0, i32 4
  %13 = load double, double* %high, align 8
  %14 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %high5 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %14, i32 0, i32 4
  %15 = load double, double* %high5, align 8
  %16 = call double @llvm.minnum.f64(double %13, double %15)
  %17 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %high6 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %17, i32 0, i32 4
  store double %16, double* %high6, align 8
  %18 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  ret %struct.RealSet* %18
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_union(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 1
  %1 = load %struct.RealSet*, %struct.RealSet** %left, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  %2 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %3 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  %4 = load %struct.RealSet*, %struct.RealSet** %left1, align 4
  %5 = load double, double* %d.addr, align 8
  %call = call zeroext i1 %2(%struct.RealSet* %4, %struct.RealSet* null, double %5)
  br i1 %call, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %6 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 2
  %7 = load %struct.RealSet*, %struct.RealSet** %right, align 8
  %contains2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 0
  %8 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains2, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 2
  %10 = load %struct.RealSet*, %struct.RealSet** %right3, align 8
  %11 = load double, double* %d.addr, align 8
  %call4 = call zeroext i1 %8(%struct.RealSet* %10, %struct.RealSet* null, double %11)
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %12 = phi i1 [ true, %entry ], [ %call4, %lor.rhs ]
  ret i1 %12
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.RealSet* @makeSubtract(%struct.RealSet* %left, %struct.RealSet* %right) #0 {
entry:
  %left.addr = alloca %struct.RealSet*, align 4
  %right.addr = alloca %struct.RealSet*, align 4
  %rs = alloca %struct.RealSet*, align 4
  store %struct.RealSet* %left, %struct.RealSet** %left.addr, align 4
  store %struct.RealSet* %right, %struct.RealSet** %right.addr, align 4
  %call = call noalias i8* @malloc(i32 32)
  %0 = bitcast i8* %call to %struct.RealSet*
  store %struct.RealSet* %0, %struct.RealSet** %rs, align 4
  %1 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_subtract, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %2 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %3 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  store %struct.RealSet* %2, %struct.RealSet** %left1, align 4
  %4 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %5 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %right2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 2
  store %struct.RealSet* %4, %struct.RealSet** %right2, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 3
  %7 = load double, double* %low, align 8
  %8 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %low3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %8, i32 0, i32 3
  store double %7, double* %low3, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 4
  %10 = load double, double* %high, align 8
  %11 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %high4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %11, i32 0, i32 4
  store double %10, double* %high4, align 8
  %12 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  ret %struct.RealSet* %12
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_subtract(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 1
  %1 = load %struct.RealSet*, %struct.RealSet** %left, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  %2 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %3 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  %4 = load %struct.RealSet*, %struct.RealSet** %left1, align 4
  %5 = load double, double* %d.addr, align 8
  %call = call zeroext i1 %2(%struct.RealSet* %4, %struct.RealSet* null, double %5)
  br i1 %call, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %6 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 2
  %7 = load %struct.RealSet*, %struct.RealSet** %right, align 8
  %contains2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 0
  %8 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains2, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 2
  %10 = load %struct.RealSet*, %struct.RealSet** %right3, align 8
  %11 = load double, double* %d.addr, align 8
  %call4 = call zeroext i1 %8(%struct.RealSet* %10, %struct.RealSet* null, double %11)
  %lnot = xor i1 %call4, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %12 = phi i1 [ false, %entry ], [ %lnot, %land.rhs ]
  ret i1 %12
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %a = alloca %struct.RealSet*, align 4
  %b = alloca %struct.RealSet*, align 4
  %c = alloca %struct.RealSet*, align 4
  %d = alloca %struct.RealSet*, align 4
  %e = alloca %struct.RealSet*, align 4
  %f = alloca %struct.RealSet*, align 4
  %g = alloca %struct.RealSet*, align 4
  %i = alloca i32, align 4
  %t = alloca %struct.RealSet*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.RealSet* @makeSet(double 0.000000e+00, double 1.000000e+00, i32 1)
  store %struct.RealSet* %call, %struct.RealSet** %a, align 4
  %call1 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 2.000000e+00, i32 2)
  store %struct.RealSet* %call1, %struct.RealSet** %b, align 4
  %call2 = call %struct.RealSet* @makeSet(double 1.000000e+00, double 2.000000e+00, i32 1)
  store %struct.RealSet* %call2, %struct.RealSet** %c, align 4
  %call3 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 3.000000e+00, i32 2)
  store %struct.RealSet* %call3, %struct.RealSet** %d, align 4
  %call4 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 1.000000e+00, i32 3)
  store %struct.RealSet* %call4, %struct.RealSet** %e, align 4
  %call5 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 1.000000e+00, i32 0)
  store %struct.RealSet* %call5, %struct.RealSet** %f, align 4
  %call6 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 0.000000e+00, i32 0)
  store %struct.RealSet* %call6, %struct.RealSet** %g, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load %struct.RealSet*, %struct.RealSet** %a, align 4
  %2 = load %struct.RealSet*, %struct.RealSet** %b, align 4
  %call7 = call %struct.RealSet* @makeUnion(%struct.RealSet* %1, %struct.RealSet* %2)
  store %struct.RealSet* %call7, %struct.RealSet** %t, align 4
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 0
  %5 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %7 = load i32, i32* %i, align 4
  %conv = sitofp i32 %7 to double
  %call8 = call zeroext i1 %5(%struct.RealSet* %6, %struct.RealSet* null, double %conv)
  %conv9 = zext i1 %call8 to i32
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str, i32 0, i32 0), i32 %3, i32 %conv9)
  %8 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %9 = bitcast %struct.RealSet* %8 to i8*
  call void @free(i8* %9)
  %10 = load %struct.RealSet*, %struct.RealSet** %b, align 4
  %11 = load %struct.RealSet*, %struct.RealSet** %c, align 4
  %call11 = call %struct.RealSet* @makeIntersect(%struct.RealSet* %10, %struct.RealSet* %11)
  store %struct.RealSet* %call11, %struct.RealSet** %t, align 4
  %12 = load i32, i32* %i, align 4
  %13 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %contains12 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %13, i32 0, i32 0
  %14 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains12, align 8
  %15 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %16 = load i32, i32* %i, align 4
  %conv13 = sitofp i32 %16 to double
  %call14 = call zeroext i1 %14(%struct.RealSet* %15, %struct.RealSet* null, double %conv13)
  %conv15 = zext i1 %call14 to i32
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.1, i32 0, i32 0), i32 %12, i32 %conv15)
  %17 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %18 = bitcast %struct.RealSet* %17 to i8*
  call void @free(i8* %18)
  %19 = load %struct.RealSet*, %struct.RealSet** %d, align 4
  %20 = load %struct.RealSet*, %struct.RealSet** %e, align 4
  %call17 = call %struct.RealSet* @makeSubtract(%struct.RealSet* %19, %struct.RealSet* %20)
  store %struct.RealSet* %call17, %struct.RealSet** %t, align 4
  %21 = load i32, i32* %i, align 4
  %22 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %contains18 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %22, i32 0, i32 0
  %23 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains18, align 8
  %24 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %25 = load i32, i32* %i, align 4
  %conv19 = sitofp i32 %25 to double
  %call20 = call zeroext i1 %23(%struct.RealSet* %24, %struct.RealSet* null, double %conv19)
  %conv21 = zext i1 %call20 to i32
  %call22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.2, i32 0, i32 0), i32 %21, i32 %conv21)
  %26 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %27 = bitcast %struct.RealSet* %26 to i8*
  call void @free(i8* %27)
  %28 = load %struct.RealSet*, %struct.RealSet** %d, align 4
  %29 = load %struct.RealSet*, %struct.RealSet** %f, align 4
  %call23 = call %struct.RealSet* @makeSubtract(%struct.RealSet* %28, %struct.RealSet* %29)
  store %struct.RealSet* %call23, %struct.RealSet** %t, align 4
  %30 = load i32, i32* %i, align 4
  %31 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %contains24 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %31, i32 0, i32 0
  %32 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains24, align 8
  %33 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %34 = load i32, i32* %i, align 4
  %conv25 = sitofp i32 %34 to double
  %call26 = call zeroext i1 %32(%struct.RealSet* %33, %struct.RealSet* null, double %conv25)
  %conv27 = zext i1 %call26 to i32
  %call28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.3, i32 0, i32 0), i32 %30, i32 %conv27)
  %35 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %36 = bitcast %struct.RealSet* %35 to i8*
  call void @free(i8* %36)
  %call29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0))
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %37 = load i32, i32* %i, align 4
  %inc = add nsw i32 %37, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %38 = load %struct.RealSet*, %struct.RealSet** %g, align 4
  %call30 = call zeroext i1 @empty(%struct.RealSet* %38)
  %conv31 = zext i1 %call30 to i32
  %call32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.5, i32 0, i32 0), i32 %conv31)
  %39 = load %struct.RealSet*, %struct.RealSet** %a, align 4
  %40 = bitcast %struct.RealSet* %39 to i8*
  call void @free(i8* %40)
  %41 = load %struct.RealSet*, %struct.RealSet** %b, align 4
  %42 = bitcast %struct.RealSet* %41 to i8*
  call void @free(i8* %42)
  %43 = load %struct.RealSet*, %struct.RealSet** %c, align 4
  %44 = bitcast %struct.RealSet* %43 to i8*
  call void @free(i8* %44)
  %45 = load %struct.RealSet*, %struct.RealSet** %d, align 4
  %46 = bitcast %struct.RealSet* %45 to i8*
  call void @free(i8* %46)
  %47 = load %struct.RealSet*, %struct.RealSet** %e, align 4
  %48 = bitcast %struct.RealSet* %47 to i8*
  call void @free(i8* %48)
  %49 = load %struct.RealSet*, %struct.RealSet** %f, align 4
  %50 = bitcast %struct.RealSet* %49 to i8*
  call void @free(i8* %50)
  %51 = load %struct.RealSet*, %struct.RealSet** %g, align 4
  %52 = bitcast %struct.RealSet* %51 to i8*
  call void @free(i8* %52)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #2

declare void @free(i8* %0) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for makeUnion()

; entering Souper's runOnFunction() for ./Set_of_real_numbers.c.bc:contains_union()

; ModuleID = './Set_of_real_numbers.c.bc'
source_filename = "./Set_of_real_numbers.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.RealSet = type { i1 (%struct.RealSet*, %struct.RealSet*, double)*, %struct.RealSet*, %struct.RealSet*, double, double }

@.str = private unnamed_addr constant [43 x i8] c"(0, 1]   union   [0, 2) contains %d is %d\0A\00", align 1
@.str.1 = private unnamed_addr constant [43 x i8] c"[0, 2) intersect (1, 2] contains %d is %d\0A\00", align 1
@.str.2 = private unnamed_addr constant [43 x i8] c"[0, 3)     -     (0, 1) contains %d is %d\0A\00", align 1
@.str.3 = private unnamed_addr constant [43 x i8] c"[0, 3)     -     [0, 1] contains %d is %d\0A\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.5 = private unnamed_addr constant [20 x i8] c"[0, 0] is empty %d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden double @length(%struct.RealSet* %self) #0 {
entry:
  %retval = alloca double, align 8
  %self.addr = alloca %struct.RealSet*, align 4
  %interval = alloca double, align 8
  %p = alloca double, align 8
  %count = alloca i32, align 4
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store double 1.000000e-05, double* %interval, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  store double %1, double* %p, align 8
  store i32 0, i32* %count, align 4
  %2 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %2, i32 0, i32 3
  %3 = load double, double* %low1, align 8
  %4 = call double @llvm.fabs.f64(double %3) #3
  %cmpinf = fcmp oeq double %4, 0x7FF0000000000000
  br i1 %cmpinf, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %5 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 4
  %6 = load double, double* %high, align 8
  %7 = call double @llvm.fabs.f64(double %6) #3
  %cmpinf2 = fcmp oeq double %7, 0x7FF0000000000000
  br i1 %cmpinf2, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store double -1.000000e+00, double* %retval, align 8
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %8 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %8, i32 0, i32 4
  %9 = load double, double* %high3, align 8
  %10 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %10, i32 0, i32 3
  %11 = load double, double* %low4, align 8
  %cmp = fcmp ole double %9, %11
  br i1 %cmp, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  store double 0.000000e+00, double* %retval, align 8
  br label %return

if.end6:                                          ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end6
  %12 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %12, i32 0, i32 0
  %13 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %14 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %15 = load double, double* %p, align 8
  %call = call zeroext i1 %13(%struct.RealSet* %14, %struct.RealSet* null, double %15)
  br i1 %call, label %if.then7, label %if.end8

if.then7:                                         ; preds = %do.body
  %16 = load i32, i32* %count, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %count, align 4
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %do.body
  %17 = load double, double* %p, align 8
  %add = fadd double %17, 1.000000e-05
  store double %add, double* %p, align 8
  br label %do.cond

do.cond:                                          ; preds = %if.end8
  %18 = load double, double* %p, align 8
  %19 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high9 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %19, i32 0, i32 4
  %20 = load double, double* %high9, align 8
  %cmp10 = fcmp olt double %18, %20
  br i1 %cmp10, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %21 = load i32, i32* %count, align 4
  %conv = sitofp i32 %21 to double
  %mul = fmul double %conv, 1.000000e-05
  store double %mul, double* %retval, align 8
  br label %return

return:                                           ; preds = %do.end, %if.then5, %if.then
  %22 = load double, double* %retval, align 8
  ret double %22
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @empty(%struct.RealSet* %self) #0 {
entry:
  %retval = alloca i1, align 1
  %self.addr = alloca %struct.RealSet*, align 4
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %2, i32 0, i32 4
  %3 = load double, double* %high, align 8
  %cmp = fcmp oeq double %1, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 0
  %5 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %7 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 3
  %8 = load double, double* %low1, align 8
  %call = call zeroext i1 %5(%struct.RealSet* %6, %struct.RealSet* null, double %8)
  %lnot = xor i1 %call, true
  store i1 %lnot, i1* %retval, align 1
  br label %return

if.end:                                           ; preds = %entry
  %9 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %call2 = call double @length(%struct.RealSet* %9)
  %cmp3 = fcmp oeq double %call2, 0.000000e+00
  store i1 %cmp3, i1* %retval, align 1
  br label %return

return:                                           ; preds = %if.end, %if.then
  %10 = load i1, i1* %retval, align 1
  ret i1 %10
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.RealSet* @makeSet(double %low, double %high, i32 %type) #0 {
entry:
  %retval = alloca %struct.RealSet*, align 4
  %low.addr = alloca double, align 8
  %high.addr = alloca double, align 8
  %type.addr = alloca i32, align 4
  %contains = alloca i1 (%struct.RealSet*, %struct.RealSet*, double)*, align 4
  %rs = alloca %struct.RealSet*, align 4
  store double %low, double* %low.addr, align 8
  store double %high, double* %high.addr, align 8
  store i32 %type, i32* %type.addr, align 4
  %0 = load i32, i32* %type.addr, align 4
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
    i32 2, label %sw.bb2
    i32 3, label %sw.bb3
  ]

sw.bb:                                            ; preds = %entry
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_closed, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  br label %sw.epilog

sw.bb1:                                           ; preds = %entry
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_left_open, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  br label %sw.epilog

sw.bb2:                                           ; preds = %entry
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_right_open, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  br label %sw.epilog

sw.bb3:                                           ; preds = %entry
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_both_open, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  store %struct.RealSet* null, %struct.RealSet** %retval, align 4
  br label %return

sw.epilog:                                        ; preds = %sw.bb3, %sw.bb2, %sw.bb1, %sw.bb
  %call = call noalias i8* @malloc(i32 32)
  %1 = bitcast i8* %call to %struct.RealSet*
  store %struct.RealSet* %1, %struct.RealSet** %rs, align 4
  %2 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  %3 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %contains4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 0
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* %2, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains4, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %left = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 1
  store %struct.RealSet* null, %struct.RealSet** %left, align 4
  %5 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %right = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 2
  store %struct.RealSet* null, %struct.RealSet** %right, align 8
  %6 = load double, double* %low.addr, align 8
  %7 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %low5 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 3
  store double %6, double* %low5, align 8
  %8 = load double, double* %high.addr, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %high6 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 4
  store double %8, double* %high6, align 8
  %10 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  store %struct.RealSet* %10, %struct.RealSet** %retval, align 4
  br label %return

return:                                           ; preds = %sw.epilog, %sw.default
  %11 = load %struct.RealSet*, %struct.RealSet** %retval, align 4
  ret %struct.RealSet* %11
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_closed(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load double, double* %d.addr, align 8
  %cmp = fcmp ole double %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %3 = load double, double* %d.addr, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 4
  %5 = load double, double* %high, align 8
  %cmp1 = fcmp ole double %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  ret i1 %6
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_left_open(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load double, double* %d.addr, align 8
  %cmp = fcmp olt double %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %3 = load double, double* %d.addr, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 4
  %5 = load double, double* %high, align 8
  %cmp1 = fcmp ole double %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  ret i1 %6
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_right_open(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load double, double* %d.addr, align 8
  %cmp = fcmp ole double %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %3 = load double, double* %d.addr, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 4
  %5 = load double, double* %high, align 8
  %cmp1 = fcmp olt double %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  ret i1 %6
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_both_open(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load double, double* %d.addr, align 8
  %cmp = fcmp olt double %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %3 = load double, double* %d.addr, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 4
  %5 = load double, double* %high, align 8
  %cmp1 = fcmp olt double %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  ret i1 %6
}

declare noalias i8* @malloc(i32 %0) #2

; Function Attrs: noinline nounwind optnone
define hidden %struct.RealSet* @makeIntersect(%struct.RealSet* %left, %struct.RealSet* %right) #0 {
entry:
  %left.addr = alloca %struct.RealSet*, align 4
  %right.addr = alloca %struct.RealSet*, align 4
  %rs = alloca %struct.RealSet*, align 4
  store %struct.RealSet* %left, %struct.RealSet** %left.addr, align 4
  store %struct.RealSet* %right, %struct.RealSet** %right.addr, align 4
  %call = call noalias i8* @malloc(i32 32)
  %0 = bitcast i8* %call to %struct.RealSet*
  store %struct.RealSet* %0, %struct.RealSet** %rs, align 4
  %1 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_intersect, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %2 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %3 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  store %struct.RealSet* %2, %struct.RealSet** %left1, align 4
  %4 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %5 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %right2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 2
  store %struct.RealSet* %4, %struct.RealSet** %right2, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 3
  %7 = load double, double* %low, align 8
  %8 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %low3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %8, i32 0, i32 3
  %9 = load double, double* %low3, align 8
  %10 = call double @llvm.minnum.f64(double %7, double %9)
  %11 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %low4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %11, i32 0, i32 3
  store double %10, double* %low4, align 8
  %12 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %12, i32 0, i32 4
  %13 = load double, double* %high, align 8
  %14 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %high5 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %14, i32 0, i32 4
  %15 = load double, double* %high5, align 8
  %16 = call double @llvm.minnum.f64(double %13, double %15)
  %17 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %high6 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %17, i32 0, i32 4
  store double %16, double* %high6, align 8
  %18 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  ret %struct.RealSet* %18
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_intersect(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 1
  %1 = load %struct.RealSet*, %struct.RealSet** %left, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  %2 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %3 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  %4 = load %struct.RealSet*, %struct.RealSet** %left1, align 4
  %5 = load double, double* %d.addr, align 8
  %call = call zeroext i1 %2(%struct.RealSet* %4, %struct.RealSet* null, double %5)
  br i1 %call, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %6 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 2
  %7 = load %struct.RealSet*, %struct.RealSet** %right, align 8
  %contains2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 0
  %8 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains2, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 2
  %10 = load %struct.RealSet*, %struct.RealSet** %right3, align 8
  %11 = load double, double* %d.addr, align 8
  %call4 = call zeroext i1 %8(%struct.RealSet* %10, %struct.RealSet* null, double %11)
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %12 = phi i1 [ false, %entry ], [ %call4, %land.rhs ]
  ret i1 %12
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.minnum.f64(double %0, double %1) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.RealSet* @makeUnion(%struct.RealSet* %left, %struct.RealSet* %right) #0 {
entry:
  %left.addr = alloca %struct.RealSet*, align 4
  %right.addr = alloca %struct.RealSet*, align 4
  %rs = alloca %struct.RealSet*, align 4
  store %struct.RealSet* %left, %struct.RealSet** %left.addr, align 4
  store %struct.RealSet* %right, %struct.RealSet** %right.addr, align 4
  %call = call noalias i8* @malloc(i32 32)
  %0 = bitcast i8* %call to %struct.RealSet*
  store %struct.RealSet* %0, %struct.RealSet** %rs, align 4
  %1 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_union, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %2 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %3 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  store %struct.RealSet* %2, %struct.RealSet** %left1, align 4
  %4 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %5 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %right2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 2
  store %struct.RealSet* %4, %struct.RealSet** %right2, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 3
  %7 = load double, double* %low, align 8
  %8 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %low3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %8, i32 0, i32 3
  %9 = load double, double* %low3, align 8
  %10 = call double @llvm.minnum.f64(double %7, double %9)
  %11 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %low4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %11, i32 0, i32 3
  store double %10, double* %low4, align 8
  %12 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %12, i32 0, i32 4
  %13 = load double, double* %high, align 8
  %14 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %high5 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %14, i32 0, i32 4
  %15 = load double, double* %high5, align 8
  %16 = call double @llvm.minnum.f64(double %13, double %15)
  %17 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %high6 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %17, i32 0, i32 4
  store double %16, double* %high6, align 8
  %18 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  ret %struct.RealSet* %18
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_union(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 1
  %1 = load %struct.RealSet*, %struct.RealSet** %left, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  %2 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %3 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  %4 = load %struct.RealSet*, %struct.RealSet** %left1, align 4
  %5 = load double, double* %d.addr, align 8
  %call = call zeroext i1 %2(%struct.RealSet* %4, %struct.RealSet* null, double %5)
  br i1 %call, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %6 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 2
  %7 = load %struct.RealSet*, %struct.RealSet** %right, align 8
  %contains2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 0
  %8 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains2, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 2
  %10 = load %struct.RealSet*, %struct.RealSet** %right3, align 8
  %11 = load double, double* %d.addr, align 8
  %call4 = call zeroext i1 %8(%struct.RealSet* %10, %struct.RealSet* null, double %11)
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %12 = phi i1 [ true, %entry ], [ %call4, %lor.rhs ]
  ret i1 %12
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.RealSet* @makeSubtract(%struct.RealSet* %left, %struct.RealSet* %right) #0 {
entry:
  %left.addr = alloca %struct.RealSet*, align 4
  %right.addr = alloca %struct.RealSet*, align 4
  %rs = alloca %struct.RealSet*, align 4
  store %struct.RealSet* %left, %struct.RealSet** %left.addr, align 4
  store %struct.RealSet* %right, %struct.RealSet** %right.addr, align 4
  %call = call noalias i8* @malloc(i32 32)
  %0 = bitcast i8* %call to %struct.RealSet*
  store %struct.RealSet* %0, %struct.RealSet** %rs, align 4
  %1 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_subtract, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %2 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %3 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  store %struct.RealSet* %2, %struct.RealSet** %left1, align 4
  %4 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %5 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %right2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 2
  store %struct.RealSet* %4, %struct.RealSet** %right2, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 3
  %7 = load double, double* %low, align 8
  %8 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %low3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %8, i32 0, i32 3
  store double %7, double* %low3, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 4
  %10 = load double, double* %high, align 8
  %11 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %high4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %11, i32 0, i32 4
  store double %10, double* %high4, align 8
  %12 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  ret %struct.RealSet* %12
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_subtract(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 1
  %1 = load %struct.RealSet*, %struct.RealSet** %left, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  %2 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %3 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  %4 = load %struct.RealSet*, %struct.RealSet** %left1, align 4
  %5 = load double, double* %d.addr, align 8
  %call = call zeroext i1 %2(%struct.RealSet* %4, %struct.RealSet* null, double %5)
  br i1 %call, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %6 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 2
  %7 = load %struct.RealSet*, %struct.RealSet** %right, align 8
  %contains2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 0
  %8 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains2, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 2
  %10 = load %struct.RealSet*, %struct.RealSet** %right3, align 8
  %11 = load double, double* %d.addr, align 8
  %call4 = call zeroext i1 %8(%struct.RealSet* %10, %struct.RealSet* null, double %11)
  %lnot = xor i1 %call4, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %12 = phi i1 [ false, %entry ], [ %lnot, %land.rhs ]
  ret i1 %12
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %a = alloca %struct.RealSet*, align 4
  %b = alloca %struct.RealSet*, align 4
  %c = alloca %struct.RealSet*, align 4
  %d = alloca %struct.RealSet*, align 4
  %e = alloca %struct.RealSet*, align 4
  %f = alloca %struct.RealSet*, align 4
  %g = alloca %struct.RealSet*, align 4
  %i = alloca i32, align 4
  %t = alloca %struct.RealSet*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.RealSet* @makeSet(double 0.000000e+00, double 1.000000e+00, i32 1)
  store %struct.RealSet* %call, %struct.RealSet** %a, align 4
  %call1 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 2.000000e+00, i32 2)
  store %struct.RealSet* %call1, %struct.RealSet** %b, align 4
  %call2 = call %struct.RealSet* @makeSet(double 1.000000e+00, double 2.000000e+00, i32 1)
  store %struct.RealSet* %call2, %struct.RealSet** %c, align 4
  %call3 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 3.000000e+00, i32 2)
  store %struct.RealSet* %call3, %struct.RealSet** %d, align 4
  %call4 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 1.000000e+00, i32 3)
  store %struct.RealSet* %call4, %struct.RealSet** %e, align 4
  %call5 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 1.000000e+00, i32 0)
  store %struct.RealSet* %call5, %struct.RealSet** %f, align 4
  %call6 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 0.000000e+00, i32 0)
  store %struct.RealSet* %call6, %struct.RealSet** %g, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load %struct.RealSet*, %struct.RealSet** %a, align 4
  %2 = load %struct.RealSet*, %struct.RealSet** %b, align 4
  %call7 = call %struct.RealSet* @makeUnion(%struct.RealSet* %1, %struct.RealSet* %2)
  store %struct.RealSet* %call7, %struct.RealSet** %t, align 4
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 0
  %5 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %7 = load i32, i32* %i, align 4
  %conv = sitofp i32 %7 to double
  %call8 = call zeroext i1 %5(%struct.RealSet* %6, %struct.RealSet* null, double %conv)
  %conv9 = zext i1 %call8 to i32
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str, i32 0, i32 0), i32 %3, i32 %conv9)
  %8 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %9 = bitcast %struct.RealSet* %8 to i8*
  call void @free(i8* %9)
  %10 = load %struct.RealSet*, %struct.RealSet** %b, align 4
  %11 = load %struct.RealSet*, %struct.RealSet** %c, align 4
  %call11 = call %struct.RealSet* @makeIntersect(%struct.RealSet* %10, %struct.RealSet* %11)
  store %struct.RealSet* %call11, %struct.RealSet** %t, align 4
  %12 = load i32, i32* %i, align 4
  %13 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %contains12 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %13, i32 0, i32 0
  %14 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains12, align 8
  %15 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %16 = load i32, i32* %i, align 4
  %conv13 = sitofp i32 %16 to double
  %call14 = call zeroext i1 %14(%struct.RealSet* %15, %struct.RealSet* null, double %conv13)
  %conv15 = zext i1 %call14 to i32
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.1, i32 0, i32 0), i32 %12, i32 %conv15)
  %17 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %18 = bitcast %struct.RealSet* %17 to i8*
  call void @free(i8* %18)
  %19 = load %struct.RealSet*, %struct.RealSet** %d, align 4
  %20 = load %struct.RealSet*, %struct.RealSet** %e, align 4
  %call17 = call %struct.RealSet* @makeSubtract(%struct.RealSet* %19, %struct.RealSet* %20)
  store %struct.RealSet* %call17, %struct.RealSet** %t, align 4
  %21 = load i32, i32* %i, align 4
  %22 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %contains18 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %22, i32 0, i32 0
  %23 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains18, align 8
  %24 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %25 = load i32, i32* %i, align 4
  %conv19 = sitofp i32 %25 to double
  %call20 = call zeroext i1 %23(%struct.RealSet* %24, %struct.RealSet* null, double %conv19)
  %conv21 = zext i1 %call20 to i32
  %call22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.2, i32 0, i32 0), i32 %21, i32 %conv21)
  %26 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %27 = bitcast %struct.RealSet* %26 to i8*
  call void @free(i8* %27)
  %28 = load %struct.RealSet*, %struct.RealSet** %d, align 4
  %29 = load %struct.RealSet*, %struct.RealSet** %f, align 4
  %call23 = call %struct.RealSet* @makeSubtract(%struct.RealSet* %28, %struct.RealSet* %29)
  store %struct.RealSet* %call23, %struct.RealSet** %t, align 4
  %30 = load i32, i32* %i, align 4
  %31 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %contains24 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %31, i32 0, i32 0
  %32 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains24, align 8
  %33 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %34 = load i32, i32* %i, align 4
  %conv25 = sitofp i32 %34 to double
  %call26 = call zeroext i1 %32(%struct.RealSet* %33, %struct.RealSet* null, double %conv25)
  %conv27 = zext i1 %call26 to i32
  %call28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.3, i32 0, i32 0), i32 %30, i32 %conv27)
  %35 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %36 = bitcast %struct.RealSet* %35 to i8*
  call void @free(i8* %36)
  %call29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0))
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %37 = load i32, i32* %i, align 4
  %inc = add nsw i32 %37, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %38 = load %struct.RealSet*, %struct.RealSet** %g, align 4
  %call30 = call zeroext i1 @empty(%struct.RealSet* %38)
  %conv31 = zext i1 %call30 to i32
  %call32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.5, i32 0, i32 0), i32 %conv31)
  %39 = load %struct.RealSet*, %struct.RealSet** %a, align 4
  %40 = bitcast %struct.RealSet* %39 to i8*
  call void @free(i8* %40)
  %41 = load %struct.RealSet*, %struct.RealSet** %b, align 4
  %42 = bitcast %struct.RealSet* %41 to i8*
  call void @free(i8* %42)
  %43 = load %struct.RealSet*, %struct.RealSet** %c, align 4
  %44 = bitcast %struct.RealSet* %43 to i8*
  call void @free(i8* %44)
  %45 = load %struct.RealSet*, %struct.RealSet** %d, align 4
  %46 = bitcast %struct.RealSet* %45 to i8*
  call void @free(i8* %46)
  %47 = load %struct.RealSet*, %struct.RealSet** %e, align 4
  %48 = bitcast %struct.RealSet* %47 to i8*
  call void @free(i8* %48)
  %49 = load %struct.RealSet*, %struct.RealSet** %f, align 4
  %50 = bitcast %struct.RealSet* %49 to i8*
  call void @free(i8* %50)
  %51 = load %struct.RealSet*, %struct.RealSet** %g, align 4
  %52 = bitcast %struct.RealSet* %51 to i8*
  call void @free(i8* %52)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #2

declare void @free(i8* %0) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call zeroext i1 %2(%struct.RealSet* %4, %struct.RealSet* null, double %5)
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %call4 = call zeroext i1 %8(%struct.RealSet* %10, %struct.RealSet* null, double %11)
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = phi i1 [ true, %entry ], [ %call4, %lor.rhs ]
; Looking for a replacement for:
%0 = block 2
%1:i1 = var
%2:i1 = phi %0, 1:i1, %1
infer %2
got 2 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i1 = var
%2:i1 = phi %0, 1:i1, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i1 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for ./Set_of_real_numbers.c.bc:contains_union()

; entering Souper's runOnFunction() for makeSubtract()

; ModuleID = './Set_of_real_numbers.c.bc'
source_filename = "./Set_of_real_numbers.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.RealSet = type { i1 (%struct.RealSet*, %struct.RealSet*, double)*, %struct.RealSet*, %struct.RealSet*, double, double }

@.str = private unnamed_addr constant [43 x i8] c"(0, 1]   union   [0, 2) contains %d is %d\0A\00", align 1
@.str.1 = private unnamed_addr constant [43 x i8] c"[0, 2) intersect (1, 2] contains %d is %d\0A\00", align 1
@.str.2 = private unnamed_addr constant [43 x i8] c"[0, 3)     -     (0, 1) contains %d is %d\0A\00", align 1
@.str.3 = private unnamed_addr constant [43 x i8] c"[0, 3)     -     [0, 1] contains %d is %d\0A\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.5 = private unnamed_addr constant [20 x i8] c"[0, 0] is empty %d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden double @length(%struct.RealSet* %self) #0 {
entry:
  %retval = alloca double, align 8
  %self.addr = alloca %struct.RealSet*, align 4
  %interval = alloca double, align 8
  %p = alloca double, align 8
  %count = alloca i32, align 4
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store double 1.000000e-05, double* %interval, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  store double %1, double* %p, align 8
  store i32 0, i32* %count, align 4
  %2 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %2, i32 0, i32 3
  %3 = load double, double* %low1, align 8
  %4 = call double @llvm.fabs.f64(double %3) #3
  %cmpinf = fcmp oeq double %4, 0x7FF0000000000000
  br i1 %cmpinf, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %5 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 4
  %6 = load double, double* %high, align 8
  %7 = call double @llvm.fabs.f64(double %6) #3
  %cmpinf2 = fcmp oeq double %7, 0x7FF0000000000000
  br i1 %cmpinf2, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store double -1.000000e+00, double* %retval, align 8
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %8 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %8, i32 0, i32 4
  %9 = load double, double* %high3, align 8
  %10 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %10, i32 0, i32 3
  %11 = load double, double* %low4, align 8
  %cmp = fcmp ole double %9, %11
  br i1 %cmp, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  store double 0.000000e+00, double* %retval, align 8
  br label %return

if.end6:                                          ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end6
  %12 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %12, i32 0, i32 0
  %13 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %14 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %15 = load double, double* %p, align 8
  %call = call zeroext i1 %13(%struct.RealSet* %14, %struct.RealSet* null, double %15)
  br i1 %call, label %if.then7, label %if.end8

if.then7:                                         ; preds = %do.body
  %16 = load i32, i32* %count, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %count, align 4
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %do.body
  %17 = load double, double* %p, align 8
  %add = fadd double %17, 1.000000e-05
  store double %add, double* %p, align 8
  br label %do.cond

do.cond:                                          ; preds = %if.end8
  %18 = load double, double* %p, align 8
  %19 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high9 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %19, i32 0, i32 4
  %20 = load double, double* %high9, align 8
  %cmp10 = fcmp olt double %18, %20
  br i1 %cmp10, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %21 = load i32, i32* %count, align 4
  %conv = sitofp i32 %21 to double
  %mul = fmul double %conv, 1.000000e-05
  store double %mul, double* %retval, align 8
  br label %return

return:                                           ; preds = %do.end, %if.then5, %if.then
  %22 = load double, double* %retval, align 8
  ret double %22
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @empty(%struct.RealSet* %self) #0 {
entry:
  %retval = alloca i1, align 1
  %self.addr = alloca %struct.RealSet*, align 4
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %2, i32 0, i32 4
  %3 = load double, double* %high, align 8
  %cmp = fcmp oeq double %1, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 0
  %5 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %7 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 3
  %8 = load double, double* %low1, align 8
  %call = call zeroext i1 %5(%struct.RealSet* %6, %struct.RealSet* null, double %8)
  %lnot = xor i1 %call, true
  store i1 %lnot, i1* %retval, align 1
  br label %return

if.end:                                           ; preds = %entry
  %9 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %call2 = call double @length(%struct.RealSet* %9)
  %cmp3 = fcmp oeq double %call2, 0.000000e+00
  store i1 %cmp3, i1* %retval, align 1
  br label %return

return:                                           ; preds = %if.end, %if.then
  %10 = load i1, i1* %retval, align 1
  ret i1 %10
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.RealSet* @makeSet(double %low, double %high, i32 %type) #0 {
entry:
  %retval = alloca %struct.RealSet*, align 4
  %low.addr = alloca double, align 8
  %high.addr = alloca double, align 8
  %type.addr = alloca i32, align 4
  %contains = alloca i1 (%struct.RealSet*, %struct.RealSet*, double)*, align 4
  %rs = alloca %struct.RealSet*, align 4
  store double %low, double* %low.addr, align 8
  store double %high, double* %high.addr, align 8
  store i32 %type, i32* %type.addr, align 4
  %0 = load i32, i32* %type.addr, align 4
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
    i32 2, label %sw.bb2
    i32 3, label %sw.bb3
  ]

sw.bb:                                            ; preds = %entry
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_closed, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  br label %sw.epilog

sw.bb1:                                           ; preds = %entry
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_left_open, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  br label %sw.epilog

sw.bb2:                                           ; preds = %entry
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_right_open, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  br label %sw.epilog

sw.bb3:                                           ; preds = %entry
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_both_open, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  store %struct.RealSet* null, %struct.RealSet** %retval, align 4
  br label %return

sw.epilog:                                        ; preds = %sw.bb3, %sw.bb2, %sw.bb1, %sw.bb
  %call = call noalias i8* @malloc(i32 32)
  %1 = bitcast i8* %call to %struct.RealSet*
  store %struct.RealSet* %1, %struct.RealSet** %rs, align 4
  %2 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  %3 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %contains4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 0
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* %2, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains4, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %left = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 1
  store %struct.RealSet* null, %struct.RealSet** %left, align 4
  %5 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %right = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 2
  store %struct.RealSet* null, %struct.RealSet** %right, align 8
  %6 = load double, double* %low.addr, align 8
  %7 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %low5 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 3
  store double %6, double* %low5, align 8
  %8 = load double, double* %high.addr, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %high6 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 4
  store double %8, double* %high6, align 8
  %10 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  store %struct.RealSet* %10, %struct.RealSet** %retval, align 4
  br label %return

return:                                           ; preds = %sw.epilog, %sw.default
  %11 = load %struct.RealSet*, %struct.RealSet** %retval, align 4
  ret %struct.RealSet* %11
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_closed(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load double, double* %d.addr, align 8
  %cmp = fcmp ole double %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %3 = load double, double* %d.addr, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 4
  %5 = load double, double* %high, align 8
  %cmp1 = fcmp ole double %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  ret i1 %6
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_left_open(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load double, double* %d.addr, align 8
  %cmp = fcmp olt double %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %3 = load double, double* %d.addr, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 4
  %5 = load double, double* %high, align 8
  %cmp1 = fcmp ole double %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  ret i1 %6
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_right_open(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load double, double* %d.addr, align 8
  %cmp = fcmp ole double %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %3 = load double, double* %d.addr, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 4
  %5 = load double, double* %high, align 8
  %cmp1 = fcmp olt double %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  ret i1 %6
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_both_open(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load double, double* %d.addr, align 8
  %cmp = fcmp olt double %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %3 = load double, double* %d.addr, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 4
  %5 = load double, double* %high, align 8
  %cmp1 = fcmp olt double %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  ret i1 %6
}

declare noalias i8* @malloc(i32 %0) #2

; Function Attrs: noinline nounwind optnone
define hidden %struct.RealSet* @makeIntersect(%struct.RealSet* %left, %struct.RealSet* %right) #0 {
entry:
  %left.addr = alloca %struct.RealSet*, align 4
  %right.addr = alloca %struct.RealSet*, align 4
  %rs = alloca %struct.RealSet*, align 4
  store %struct.RealSet* %left, %struct.RealSet** %left.addr, align 4
  store %struct.RealSet* %right, %struct.RealSet** %right.addr, align 4
  %call = call noalias i8* @malloc(i32 32)
  %0 = bitcast i8* %call to %struct.RealSet*
  store %struct.RealSet* %0, %struct.RealSet** %rs, align 4
  %1 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_intersect, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %2 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %3 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  store %struct.RealSet* %2, %struct.RealSet** %left1, align 4
  %4 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %5 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %right2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 2
  store %struct.RealSet* %4, %struct.RealSet** %right2, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 3
  %7 = load double, double* %low, align 8
  %8 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %low3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %8, i32 0, i32 3
  %9 = load double, double* %low3, align 8
  %10 = call double @llvm.minnum.f64(double %7, double %9)
  %11 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %low4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %11, i32 0, i32 3
  store double %10, double* %low4, align 8
  %12 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %12, i32 0, i32 4
  %13 = load double, double* %high, align 8
  %14 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %high5 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %14, i32 0, i32 4
  %15 = load double, double* %high5, align 8
  %16 = call double @llvm.minnum.f64(double %13, double %15)
  %17 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %high6 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %17, i32 0, i32 4
  store double %16, double* %high6, align 8
  %18 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  ret %struct.RealSet* %18
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_intersect(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 1
  %1 = load %struct.RealSet*, %struct.RealSet** %left, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  %2 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %3 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  %4 = load %struct.RealSet*, %struct.RealSet** %left1, align 4
  %5 = load double, double* %d.addr, align 8
  %call = call zeroext i1 %2(%struct.RealSet* %4, %struct.RealSet* null, double %5)
  br i1 %call, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %6 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 2
  %7 = load %struct.RealSet*, %struct.RealSet** %right, align 8
  %contains2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 0
  %8 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains2, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 2
  %10 = load %struct.RealSet*, %struct.RealSet** %right3, align 8
  %11 = load double, double* %d.addr, align 8
  %call4 = call zeroext i1 %8(%struct.RealSet* %10, %struct.RealSet* null, double %11)
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %12 = phi i1 [ false, %entry ], [ %call4, %land.rhs ]
  ret i1 %12
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.minnum.f64(double %0, double %1) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.RealSet* @makeUnion(%struct.RealSet* %left, %struct.RealSet* %right) #0 {
entry:
  %left.addr = alloca %struct.RealSet*, align 4
  %right.addr = alloca %struct.RealSet*, align 4
  %rs = alloca %struct.RealSet*, align 4
  store %struct.RealSet* %left, %struct.RealSet** %left.addr, align 4
  store %struct.RealSet* %right, %struct.RealSet** %right.addr, align 4
  %call = call noalias i8* @malloc(i32 32)
  %0 = bitcast i8* %call to %struct.RealSet*
  store %struct.RealSet* %0, %struct.RealSet** %rs, align 4
  %1 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_union, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %2 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %3 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  store %struct.RealSet* %2, %struct.RealSet** %left1, align 4
  %4 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %5 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %right2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 2
  store %struct.RealSet* %4, %struct.RealSet** %right2, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 3
  %7 = load double, double* %low, align 8
  %8 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %low3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %8, i32 0, i32 3
  %9 = load double, double* %low3, align 8
  %10 = call double @llvm.minnum.f64(double %7, double %9)
  %11 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %low4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %11, i32 0, i32 3
  store double %10, double* %low4, align 8
  %12 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %12, i32 0, i32 4
  %13 = load double, double* %high, align 8
  %14 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %high5 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %14, i32 0, i32 4
  %15 = load double, double* %high5, align 8
  %16 = call double @llvm.minnum.f64(double %13, double %15)
  %17 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %high6 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %17, i32 0, i32 4
  store double %16, double* %high6, align 8
  %18 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  ret %struct.RealSet* %18
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_union(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 1
  %1 = load %struct.RealSet*, %struct.RealSet** %left, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  %2 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %3 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  %4 = load %struct.RealSet*, %struct.RealSet** %left1, align 4
  %5 = load double, double* %d.addr, align 8
  %call = call zeroext i1 %2(%struct.RealSet* %4, %struct.RealSet* null, double %5)
  br i1 %call, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %6 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 2
  %7 = load %struct.RealSet*, %struct.RealSet** %right, align 8
  %contains2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 0
  %8 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains2, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 2
  %10 = load %struct.RealSet*, %struct.RealSet** %right3, align 8
  %11 = load double, double* %d.addr, align 8
  %call4 = call zeroext i1 %8(%struct.RealSet* %10, %struct.RealSet* null, double %11)
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %12 = phi i1 [ true, %entry ], [ %call4, %lor.rhs ]
  ret i1 %12
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.RealSet* @makeSubtract(%struct.RealSet* %left, %struct.RealSet* %right) #0 {
entry:
  %left.addr = alloca %struct.RealSet*, align 4
  %right.addr = alloca %struct.RealSet*, align 4
  %rs = alloca %struct.RealSet*, align 4
  store %struct.RealSet* %left, %struct.RealSet** %left.addr, align 4
  store %struct.RealSet* %right, %struct.RealSet** %right.addr, align 4
  %call = call noalias i8* @malloc(i32 32)
  %0 = bitcast i8* %call to %struct.RealSet*
  store %struct.RealSet* %0, %struct.RealSet** %rs, align 4
  %1 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_subtract, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %2 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %3 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  store %struct.RealSet* %2, %struct.RealSet** %left1, align 4
  %4 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %5 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %right2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 2
  store %struct.RealSet* %4, %struct.RealSet** %right2, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 3
  %7 = load double, double* %low, align 8
  %8 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %low3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %8, i32 0, i32 3
  store double %7, double* %low3, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 4
  %10 = load double, double* %high, align 8
  %11 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %high4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %11, i32 0, i32 4
  store double %10, double* %high4, align 8
  %12 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  ret %struct.RealSet* %12
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_subtract(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 1
  %1 = load %struct.RealSet*, %struct.RealSet** %left, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  %2 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %3 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  %4 = load %struct.RealSet*, %struct.RealSet** %left1, align 4
  %5 = load double, double* %d.addr, align 8
  %call = call zeroext i1 %2(%struct.RealSet* %4, %struct.RealSet* null, double %5)
  br i1 %call, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %6 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 2
  %7 = load %struct.RealSet*, %struct.RealSet** %right, align 8
  %contains2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 0
  %8 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains2, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 2
  %10 = load %struct.RealSet*, %struct.RealSet** %right3, align 8
  %11 = load double, double* %d.addr, align 8
  %call4 = call zeroext i1 %8(%struct.RealSet* %10, %struct.RealSet* null, double %11)
  %lnot = xor i1 %call4, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %12 = phi i1 [ false, %entry ], [ %lnot, %land.rhs ]
  ret i1 %12
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %a = alloca %struct.RealSet*, align 4
  %b = alloca %struct.RealSet*, align 4
  %c = alloca %struct.RealSet*, align 4
  %d = alloca %struct.RealSet*, align 4
  %e = alloca %struct.RealSet*, align 4
  %f = alloca %struct.RealSet*, align 4
  %g = alloca %struct.RealSet*, align 4
  %i = alloca i32, align 4
  %t = alloca %struct.RealSet*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.RealSet* @makeSet(double 0.000000e+00, double 1.000000e+00, i32 1)
  store %struct.RealSet* %call, %struct.RealSet** %a, align 4
  %call1 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 2.000000e+00, i32 2)
  store %struct.RealSet* %call1, %struct.RealSet** %b, align 4
  %call2 = call %struct.RealSet* @makeSet(double 1.000000e+00, double 2.000000e+00, i32 1)
  store %struct.RealSet* %call2, %struct.RealSet** %c, align 4
  %call3 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 3.000000e+00, i32 2)
  store %struct.RealSet* %call3, %struct.RealSet** %d, align 4
  %call4 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 1.000000e+00, i32 3)
  store %struct.RealSet* %call4, %struct.RealSet** %e, align 4
  %call5 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 1.000000e+00, i32 0)
  store %struct.RealSet* %call5, %struct.RealSet** %f, align 4
  %call6 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 0.000000e+00, i32 0)
  store %struct.RealSet* %call6, %struct.RealSet** %g, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load %struct.RealSet*, %struct.RealSet** %a, align 4
  %2 = load %struct.RealSet*, %struct.RealSet** %b, align 4
  %call7 = call %struct.RealSet* @makeUnion(%struct.RealSet* %1, %struct.RealSet* %2)
  store %struct.RealSet* %call7, %struct.RealSet** %t, align 4
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 0
  %5 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %7 = load i32, i32* %i, align 4
  %conv = sitofp i32 %7 to double
  %call8 = call zeroext i1 %5(%struct.RealSet* %6, %struct.RealSet* null, double %conv)
  %conv9 = zext i1 %call8 to i32
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str, i32 0, i32 0), i32 %3, i32 %conv9)
  %8 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %9 = bitcast %struct.RealSet* %8 to i8*
  call void @free(i8* %9)
  %10 = load %struct.RealSet*, %struct.RealSet** %b, align 4
  %11 = load %struct.RealSet*, %struct.RealSet** %c, align 4
  %call11 = call %struct.RealSet* @makeIntersect(%struct.RealSet* %10, %struct.RealSet* %11)
  store %struct.RealSet* %call11, %struct.RealSet** %t, align 4
  %12 = load i32, i32* %i, align 4
  %13 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %contains12 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %13, i32 0, i32 0
  %14 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains12, align 8
  %15 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %16 = load i32, i32* %i, align 4
  %conv13 = sitofp i32 %16 to double
  %call14 = call zeroext i1 %14(%struct.RealSet* %15, %struct.RealSet* null, double %conv13)
  %conv15 = zext i1 %call14 to i32
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.1, i32 0, i32 0), i32 %12, i32 %conv15)
  %17 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %18 = bitcast %struct.RealSet* %17 to i8*
  call void @free(i8* %18)
  %19 = load %struct.RealSet*, %struct.RealSet** %d, align 4
  %20 = load %struct.RealSet*, %struct.RealSet** %e, align 4
  %call17 = call %struct.RealSet* @makeSubtract(%struct.RealSet* %19, %struct.RealSet* %20)
  store %struct.RealSet* %call17, %struct.RealSet** %t, align 4
  %21 = load i32, i32* %i, align 4
  %22 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %contains18 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %22, i32 0, i32 0
  %23 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains18, align 8
  %24 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %25 = load i32, i32* %i, align 4
  %conv19 = sitofp i32 %25 to double
  %call20 = call zeroext i1 %23(%struct.RealSet* %24, %struct.RealSet* null, double %conv19)
  %conv21 = zext i1 %call20 to i32
  %call22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.2, i32 0, i32 0), i32 %21, i32 %conv21)
  %26 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %27 = bitcast %struct.RealSet* %26 to i8*
  call void @free(i8* %27)
  %28 = load %struct.RealSet*, %struct.RealSet** %d, align 4
  %29 = load %struct.RealSet*, %struct.RealSet** %f, align 4
  %call23 = call %struct.RealSet* @makeSubtract(%struct.RealSet* %28, %struct.RealSet* %29)
  store %struct.RealSet* %call23, %struct.RealSet** %t, align 4
  %30 = load i32, i32* %i, align 4
  %31 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %contains24 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %31, i32 0, i32 0
  %32 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains24, align 8
  %33 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %34 = load i32, i32* %i, align 4
  %conv25 = sitofp i32 %34 to double
  %call26 = call zeroext i1 %32(%struct.RealSet* %33, %struct.RealSet* null, double %conv25)
  %conv27 = zext i1 %call26 to i32
  %call28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.3, i32 0, i32 0), i32 %30, i32 %conv27)
  %35 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %36 = bitcast %struct.RealSet* %35 to i8*
  call void @free(i8* %36)
  %call29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0))
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %37 = load i32, i32* %i, align 4
  %inc = add nsw i32 %37, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %38 = load %struct.RealSet*, %struct.RealSet** %g, align 4
  %call30 = call zeroext i1 @empty(%struct.RealSet* %38)
  %conv31 = zext i1 %call30 to i32
  %call32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.5, i32 0, i32 0), i32 %conv31)
  %39 = load %struct.RealSet*, %struct.RealSet** %a, align 4
  %40 = bitcast %struct.RealSet* %39 to i8*
  call void @free(i8* %40)
  %41 = load %struct.RealSet*, %struct.RealSet** %b, align 4
  %42 = bitcast %struct.RealSet* %41 to i8*
  call void @free(i8* %42)
  %43 = load %struct.RealSet*, %struct.RealSet** %c, align 4
  %44 = bitcast %struct.RealSet* %43 to i8*
  call void @free(i8* %44)
  %45 = load %struct.RealSet*, %struct.RealSet** %d, align 4
  %46 = bitcast %struct.RealSet* %45 to i8*
  call void @free(i8* %46)
  %47 = load %struct.RealSet*, %struct.RealSet** %e, align 4
  %48 = bitcast %struct.RealSet* %47 to i8*
  call void @free(i8* %48)
  %49 = load %struct.RealSet*, %struct.RealSet** %f, align 4
  %50 = bitcast %struct.RealSet* %49 to i8*
  call void @free(i8* %50)
  %51 = load %struct.RealSet*, %struct.RealSet** %g, align 4
  %52 = bitcast %struct.RealSet* %51 to i8*
  call void @free(i8* %52)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #2

declare void @free(i8* %0) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for makeSubtract()

; entering Souper's runOnFunction() for ./Set_of_real_numbers.c.bc:contains_subtract()

; ModuleID = './Set_of_real_numbers.c.bc'
source_filename = "./Set_of_real_numbers.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.RealSet = type { i1 (%struct.RealSet*, %struct.RealSet*, double)*, %struct.RealSet*, %struct.RealSet*, double, double }

@.str = private unnamed_addr constant [43 x i8] c"(0, 1]   union   [0, 2) contains %d is %d\0A\00", align 1
@.str.1 = private unnamed_addr constant [43 x i8] c"[0, 2) intersect (1, 2] contains %d is %d\0A\00", align 1
@.str.2 = private unnamed_addr constant [43 x i8] c"[0, 3)     -     (0, 1) contains %d is %d\0A\00", align 1
@.str.3 = private unnamed_addr constant [43 x i8] c"[0, 3)     -     [0, 1] contains %d is %d\0A\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.5 = private unnamed_addr constant [20 x i8] c"[0, 0] is empty %d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden double @length(%struct.RealSet* %self) #0 {
entry:
  %retval = alloca double, align 8
  %self.addr = alloca %struct.RealSet*, align 4
  %interval = alloca double, align 8
  %p = alloca double, align 8
  %count = alloca i32, align 4
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store double 1.000000e-05, double* %interval, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  store double %1, double* %p, align 8
  store i32 0, i32* %count, align 4
  %2 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %2, i32 0, i32 3
  %3 = load double, double* %low1, align 8
  %4 = call double @llvm.fabs.f64(double %3) #3
  %cmpinf = fcmp oeq double %4, 0x7FF0000000000000
  br i1 %cmpinf, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %5 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 4
  %6 = load double, double* %high, align 8
  %7 = call double @llvm.fabs.f64(double %6) #3
  %cmpinf2 = fcmp oeq double %7, 0x7FF0000000000000
  br i1 %cmpinf2, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store double -1.000000e+00, double* %retval, align 8
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %8 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %8, i32 0, i32 4
  %9 = load double, double* %high3, align 8
  %10 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %10, i32 0, i32 3
  %11 = load double, double* %low4, align 8
  %cmp = fcmp ole double %9, %11
  br i1 %cmp, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  store double 0.000000e+00, double* %retval, align 8
  br label %return

if.end6:                                          ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end6
  %12 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %12, i32 0, i32 0
  %13 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %14 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %15 = load double, double* %p, align 8
  %call = call zeroext i1 %13(%struct.RealSet* %14, %struct.RealSet* null, double %15)
  br i1 %call, label %if.then7, label %if.end8

if.then7:                                         ; preds = %do.body
  %16 = load i32, i32* %count, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %count, align 4
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %do.body
  %17 = load double, double* %p, align 8
  %add = fadd double %17, 1.000000e-05
  store double %add, double* %p, align 8
  br label %do.cond

do.cond:                                          ; preds = %if.end8
  %18 = load double, double* %p, align 8
  %19 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high9 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %19, i32 0, i32 4
  %20 = load double, double* %high9, align 8
  %cmp10 = fcmp olt double %18, %20
  br i1 %cmp10, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %21 = load i32, i32* %count, align 4
  %conv = sitofp i32 %21 to double
  %mul = fmul double %conv, 1.000000e-05
  store double %mul, double* %retval, align 8
  br label %return

return:                                           ; preds = %do.end, %if.then5, %if.then
  %22 = load double, double* %retval, align 8
  ret double %22
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @empty(%struct.RealSet* %self) #0 {
entry:
  %retval = alloca i1, align 1
  %self.addr = alloca %struct.RealSet*, align 4
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %2, i32 0, i32 4
  %3 = load double, double* %high, align 8
  %cmp = fcmp oeq double %1, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 0
  %5 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %7 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 3
  %8 = load double, double* %low1, align 8
  %call = call zeroext i1 %5(%struct.RealSet* %6, %struct.RealSet* null, double %8)
  %lnot = xor i1 %call, true
  store i1 %lnot, i1* %retval, align 1
  br label %return

if.end:                                           ; preds = %entry
  %9 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %call2 = call double @length(%struct.RealSet* %9)
  %cmp3 = fcmp oeq double %call2, 0.000000e+00
  store i1 %cmp3, i1* %retval, align 1
  br label %return

return:                                           ; preds = %if.end, %if.then
  %10 = load i1, i1* %retval, align 1
  ret i1 %10
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.RealSet* @makeSet(double %low, double %high, i32 %type) #0 {
entry:
  %retval = alloca %struct.RealSet*, align 4
  %low.addr = alloca double, align 8
  %high.addr = alloca double, align 8
  %type.addr = alloca i32, align 4
  %contains = alloca i1 (%struct.RealSet*, %struct.RealSet*, double)*, align 4
  %rs = alloca %struct.RealSet*, align 4
  store double %low, double* %low.addr, align 8
  store double %high, double* %high.addr, align 8
  store i32 %type, i32* %type.addr, align 4
  %0 = load i32, i32* %type.addr, align 4
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
    i32 2, label %sw.bb2
    i32 3, label %sw.bb3
  ]

sw.bb:                                            ; preds = %entry
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_closed, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  br label %sw.epilog

sw.bb1:                                           ; preds = %entry
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_left_open, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  br label %sw.epilog

sw.bb2:                                           ; preds = %entry
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_right_open, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  br label %sw.epilog

sw.bb3:                                           ; preds = %entry
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_both_open, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  store %struct.RealSet* null, %struct.RealSet** %retval, align 4
  br label %return

sw.epilog:                                        ; preds = %sw.bb3, %sw.bb2, %sw.bb1, %sw.bb
  %call = call noalias i8* @malloc(i32 32)
  %1 = bitcast i8* %call to %struct.RealSet*
  store %struct.RealSet* %1, %struct.RealSet** %rs, align 4
  %2 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  %3 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %contains4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 0
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* %2, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains4, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %left = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 1
  store %struct.RealSet* null, %struct.RealSet** %left, align 4
  %5 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %right = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 2
  store %struct.RealSet* null, %struct.RealSet** %right, align 8
  %6 = load double, double* %low.addr, align 8
  %7 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %low5 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 3
  store double %6, double* %low5, align 8
  %8 = load double, double* %high.addr, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %high6 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 4
  store double %8, double* %high6, align 8
  %10 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  store %struct.RealSet* %10, %struct.RealSet** %retval, align 4
  br label %return

return:                                           ; preds = %sw.epilog, %sw.default
  %11 = load %struct.RealSet*, %struct.RealSet** %retval, align 4
  ret %struct.RealSet* %11
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_closed(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load double, double* %d.addr, align 8
  %cmp = fcmp ole double %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %3 = load double, double* %d.addr, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 4
  %5 = load double, double* %high, align 8
  %cmp1 = fcmp ole double %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  ret i1 %6
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_left_open(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load double, double* %d.addr, align 8
  %cmp = fcmp olt double %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %3 = load double, double* %d.addr, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 4
  %5 = load double, double* %high, align 8
  %cmp1 = fcmp ole double %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  ret i1 %6
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_right_open(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load double, double* %d.addr, align 8
  %cmp = fcmp ole double %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %3 = load double, double* %d.addr, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 4
  %5 = load double, double* %high, align 8
  %cmp1 = fcmp olt double %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  ret i1 %6
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_both_open(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load double, double* %d.addr, align 8
  %cmp = fcmp olt double %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %3 = load double, double* %d.addr, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 4
  %5 = load double, double* %high, align 8
  %cmp1 = fcmp olt double %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  ret i1 %6
}

declare noalias i8* @malloc(i32 %0) #2

; Function Attrs: noinline nounwind optnone
define hidden %struct.RealSet* @makeIntersect(%struct.RealSet* %left, %struct.RealSet* %right) #0 {
entry:
  %left.addr = alloca %struct.RealSet*, align 4
  %right.addr = alloca %struct.RealSet*, align 4
  %rs = alloca %struct.RealSet*, align 4
  store %struct.RealSet* %left, %struct.RealSet** %left.addr, align 4
  store %struct.RealSet* %right, %struct.RealSet** %right.addr, align 4
  %call = call noalias i8* @malloc(i32 32)
  %0 = bitcast i8* %call to %struct.RealSet*
  store %struct.RealSet* %0, %struct.RealSet** %rs, align 4
  %1 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_intersect, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %2 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %3 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  store %struct.RealSet* %2, %struct.RealSet** %left1, align 4
  %4 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %5 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %right2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 2
  store %struct.RealSet* %4, %struct.RealSet** %right2, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 3
  %7 = load double, double* %low, align 8
  %8 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %low3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %8, i32 0, i32 3
  %9 = load double, double* %low3, align 8
  %10 = call double @llvm.minnum.f64(double %7, double %9)
  %11 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %low4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %11, i32 0, i32 3
  store double %10, double* %low4, align 8
  %12 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %12, i32 0, i32 4
  %13 = load double, double* %high, align 8
  %14 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %high5 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %14, i32 0, i32 4
  %15 = load double, double* %high5, align 8
  %16 = call double @llvm.minnum.f64(double %13, double %15)
  %17 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %high6 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %17, i32 0, i32 4
  store double %16, double* %high6, align 8
  %18 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  ret %struct.RealSet* %18
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_intersect(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 1
  %1 = load %struct.RealSet*, %struct.RealSet** %left, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  %2 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %3 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  %4 = load %struct.RealSet*, %struct.RealSet** %left1, align 4
  %5 = load double, double* %d.addr, align 8
  %call = call zeroext i1 %2(%struct.RealSet* %4, %struct.RealSet* null, double %5)
  br i1 %call, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %6 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 2
  %7 = load %struct.RealSet*, %struct.RealSet** %right, align 8
  %contains2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 0
  %8 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains2, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 2
  %10 = load %struct.RealSet*, %struct.RealSet** %right3, align 8
  %11 = load double, double* %d.addr, align 8
  %call4 = call zeroext i1 %8(%struct.RealSet* %10, %struct.RealSet* null, double %11)
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %12 = phi i1 [ false, %entry ], [ %call4, %land.rhs ]
  ret i1 %12
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.minnum.f64(double %0, double %1) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.RealSet* @makeUnion(%struct.RealSet* %left, %struct.RealSet* %right) #0 {
entry:
  %left.addr = alloca %struct.RealSet*, align 4
  %right.addr = alloca %struct.RealSet*, align 4
  %rs = alloca %struct.RealSet*, align 4
  store %struct.RealSet* %left, %struct.RealSet** %left.addr, align 4
  store %struct.RealSet* %right, %struct.RealSet** %right.addr, align 4
  %call = call noalias i8* @malloc(i32 32)
  %0 = bitcast i8* %call to %struct.RealSet*
  store %struct.RealSet* %0, %struct.RealSet** %rs, align 4
  %1 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_union, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %2 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %3 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  store %struct.RealSet* %2, %struct.RealSet** %left1, align 4
  %4 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %5 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %right2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 2
  store %struct.RealSet* %4, %struct.RealSet** %right2, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 3
  %7 = load double, double* %low, align 8
  %8 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %low3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %8, i32 0, i32 3
  %9 = load double, double* %low3, align 8
  %10 = call double @llvm.minnum.f64(double %7, double %9)
  %11 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %low4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %11, i32 0, i32 3
  store double %10, double* %low4, align 8
  %12 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %12, i32 0, i32 4
  %13 = load double, double* %high, align 8
  %14 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %high5 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %14, i32 0, i32 4
  %15 = load double, double* %high5, align 8
  %16 = call double @llvm.minnum.f64(double %13, double %15)
  %17 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %high6 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %17, i32 0, i32 4
  store double %16, double* %high6, align 8
  %18 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  ret %struct.RealSet* %18
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_union(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 1
  %1 = load %struct.RealSet*, %struct.RealSet** %left, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  %2 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %3 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  %4 = load %struct.RealSet*, %struct.RealSet** %left1, align 4
  %5 = load double, double* %d.addr, align 8
  %call = call zeroext i1 %2(%struct.RealSet* %4, %struct.RealSet* null, double %5)
  br i1 %call, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %6 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 2
  %7 = load %struct.RealSet*, %struct.RealSet** %right, align 8
  %contains2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 0
  %8 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains2, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 2
  %10 = load %struct.RealSet*, %struct.RealSet** %right3, align 8
  %11 = load double, double* %d.addr, align 8
  %call4 = call zeroext i1 %8(%struct.RealSet* %10, %struct.RealSet* null, double %11)
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %12 = phi i1 [ true, %entry ], [ %call4, %lor.rhs ]
  ret i1 %12
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.RealSet* @makeSubtract(%struct.RealSet* %left, %struct.RealSet* %right) #0 {
entry:
  %left.addr = alloca %struct.RealSet*, align 4
  %right.addr = alloca %struct.RealSet*, align 4
  %rs = alloca %struct.RealSet*, align 4
  store %struct.RealSet* %left, %struct.RealSet** %left.addr, align 4
  store %struct.RealSet* %right, %struct.RealSet** %right.addr, align 4
  %call = call noalias i8* @malloc(i32 32)
  %0 = bitcast i8* %call to %struct.RealSet*
  store %struct.RealSet* %0, %struct.RealSet** %rs, align 4
  %1 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_subtract, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %2 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %3 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  store %struct.RealSet* %2, %struct.RealSet** %left1, align 4
  %4 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %5 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %right2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 2
  store %struct.RealSet* %4, %struct.RealSet** %right2, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 3
  %7 = load double, double* %low, align 8
  %8 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %low3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %8, i32 0, i32 3
  store double %7, double* %low3, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 4
  %10 = load double, double* %high, align 8
  %11 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %high4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %11, i32 0, i32 4
  store double %10, double* %high4, align 8
  %12 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  ret %struct.RealSet* %12
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_subtract(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 1
  %1 = load %struct.RealSet*, %struct.RealSet** %left, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  %2 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %3 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  %4 = load %struct.RealSet*, %struct.RealSet** %left1, align 4
  %5 = load double, double* %d.addr, align 8
  %call = call zeroext i1 %2(%struct.RealSet* %4, %struct.RealSet* null, double %5)
  br i1 %call, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %6 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 2
  %7 = load %struct.RealSet*, %struct.RealSet** %right, align 8
  %contains2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 0
  %8 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains2, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 2
  %10 = load %struct.RealSet*, %struct.RealSet** %right3, align 8
  %11 = load double, double* %d.addr, align 8
  %call4 = call zeroext i1 %8(%struct.RealSet* %10, %struct.RealSet* null, double %11)
  %lnot = xor i1 %call4, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %12 = phi i1 [ false, %entry ], [ %lnot, %land.rhs ]
  ret i1 %12
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %a = alloca %struct.RealSet*, align 4
  %b = alloca %struct.RealSet*, align 4
  %c = alloca %struct.RealSet*, align 4
  %d = alloca %struct.RealSet*, align 4
  %e = alloca %struct.RealSet*, align 4
  %f = alloca %struct.RealSet*, align 4
  %g = alloca %struct.RealSet*, align 4
  %i = alloca i32, align 4
  %t = alloca %struct.RealSet*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.RealSet* @makeSet(double 0.000000e+00, double 1.000000e+00, i32 1)
  store %struct.RealSet* %call, %struct.RealSet** %a, align 4
  %call1 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 2.000000e+00, i32 2)
  store %struct.RealSet* %call1, %struct.RealSet** %b, align 4
  %call2 = call %struct.RealSet* @makeSet(double 1.000000e+00, double 2.000000e+00, i32 1)
  store %struct.RealSet* %call2, %struct.RealSet** %c, align 4
  %call3 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 3.000000e+00, i32 2)
  store %struct.RealSet* %call3, %struct.RealSet** %d, align 4
  %call4 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 1.000000e+00, i32 3)
  store %struct.RealSet* %call4, %struct.RealSet** %e, align 4
  %call5 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 1.000000e+00, i32 0)
  store %struct.RealSet* %call5, %struct.RealSet** %f, align 4
  %call6 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 0.000000e+00, i32 0)
  store %struct.RealSet* %call6, %struct.RealSet** %g, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load %struct.RealSet*, %struct.RealSet** %a, align 4
  %2 = load %struct.RealSet*, %struct.RealSet** %b, align 4
  %call7 = call %struct.RealSet* @makeUnion(%struct.RealSet* %1, %struct.RealSet* %2)
  store %struct.RealSet* %call7, %struct.RealSet** %t, align 4
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 0
  %5 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %7 = load i32, i32* %i, align 4
  %conv = sitofp i32 %7 to double
  %call8 = call zeroext i1 %5(%struct.RealSet* %6, %struct.RealSet* null, double %conv)
  %conv9 = zext i1 %call8 to i32
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str, i32 0, i32 0), i32 %3, i32 %conv9)
  %8 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %9 = bitcast %struct.RealSet* %8 to i8*
  call void @free(i8* %9)
  %10 = load %struct.RealSet*, %struct.RealSet** %b, align 4
  %11 = load %struct.RealSet*, %struct.RealSet** %c, align 4
  %call11 = call %struct.RealSet* @makeIntersect(%struct.RealSet* %10, %struct.RealSet* %11)
  store %struct.RealSet* %call11, %struct.RealSet** %t, align 4
  %12 = load i32, i32* %i, align 4
  %13 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %contains12 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %13, i32 0, i32 0
  %14 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains12, align 8
  %15 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %16 = load i32, i32* %i, align 4
  %conv13 = sitofp i32 %16 to double
  %call14 = call zeroext i1 %14(%struct.RealSet* %15, %struct.RealSet* null, double %conv13)
  %conv15 = zext i1 %call14 to i32
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.1, i32 0, i32 0), i32 %12, i32 %conv15)
  %17 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %18 = bitcast %struct.RealSet* %17 to i8*
  call void @free(i8* %18)
  %19 = load %struct.RealSet*, %struct.RealSet** %d, align 4
  %20 = load %struct.RealSet*, %struct.RealSet** %e, align 4
  %call17 = call %struct.RealSet* @makeSubtract(%struct.RealSet* %19, %struct.RealSet* %20)
  store %struct.RealSet* %call17, %struct.RealSet** %t, align 4
  %21 = load i32, i32* %i, align 4
  %22 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %contains18 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %22, i32 0, i32 0
  %23 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains18, align 8
  %24 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %25 = load i32, i32* %i, align 4
  %conv19 = sitofp i32 %25 to double
  %call20 = call zeroext i1 %23(%struct.RealSet* %24, %struct.RealSet* null, double %conv19)
  %conv21 = zext i1 %call20 to i32
  %call22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.2, i32 0, i32 0), i32 %21, i32 %conv21)
  %26 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %27 = bitcast %struct.RealSet* %26 to i8*
  call void @free(i8* %27)
  %28 = load %struct.RealSet*, %struct.RealSet** %d, align 4
  %29 = load %struct.RealSet*, %struct.RealSet** %f, align 4
  %call23 = call %struct.RealSet* @makeSubtract(%struct.RealSet* %28, %struct.RealSet* %29)
  store %struct.RealSet* %call23, %struct.RealSet** %t, align 4
  %30 = load i32, i32* %i, align 4
  %31 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %contains24 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %31, i32 0, i32 0
  %32 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains24, align 8
  %33 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %34 = load i32, i32* %i, align 4
  %conv25 = sitofp i32 %34 to double
  %call26 = call zeroext i1 %32(%struct.RealSet* %33, %struct.RealSet* null, double %conv25)
  %conv27 = zext i1 %call26 to i32
  %call28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.3, i32 0, i32 0), i32 %30, i32 %conv27)
  %35 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %36 = bitcast %struct.RealSet* %35 to i8*
  call void @free(i8* %36)
  %call29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0))
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %37 = load i32, i32* %i, align 4
  %inc = add nsw i32 %37, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %38 = load %struct.RealSet*, %struct.RealSet** %g, align 4
  %call30 = call zeroext i1 @empty(%struct.RealSet* %38)
  %conv31 = zext i1 %call30 to i32
  %call32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.5, i32 0, i32 0), i32 %conv31)
  %39 = load %struct.RealSet*, %struct.RealSet** %a, align 4
  %40 = bitcast %struct.RealSet* %39 to i8*
  call void @free(i8* %40)
  %41 = load %struct.RealSet*, %struct.RealSet** %b, align 4
  %42 = bitcast %struct.RealSet* %41 to i8*
  call void @free(i8* %42)
  %43 = load %struct.RealSet*, %struct.RealSet** %c, align 4
  %44 = bitcast %struct.RealSet* %43 to i8*
  call void @free(i8* %44)
  %45 = load %struct.RealSet*, %struct.RealSet** %d, align 4
  %46 = bitcast %struct.RealSet* %45 to i8*
  call void @free(i8* %46)
  %47 = load %struct.RealSet*, %struct.RealSet** %e, align 4
  %48 = bitcast %struct.RealSet* %47 to i8*
  call void @free(i8* %48)
  %49 = load %struct.RealSet*, %struct.RealSet** %f, align 4
  %50 = bitcast %struct.RealSet* %49 to i8*
  call void @free(i8* %50)
  %51 = load %struct.RealSet*, %struct.RealSet** %g, align 4
  %52 = bitcast %struct.RealSet* %51 to i8*
  call void @free(i8* %52)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #2

declare void @free(i8* %0) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call zeroext i1 %2(%struct.RealSet* %4, %struct.RealSet* null, double %5)
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %call4 = call zeroext i1 %8(%struct.RealSet* %10, %struct.RealSet* null, double %11)
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %lnot = xor i1 %call4, true
; Looking for a replacement for:
%0:i1 = var
%1:i1 = xor 1:i1, %0
infer %1

; *****
; For LLVM instruction:
;  %12 = phi i1 [ false, %entry ], [ %lnot, %land.rhs ]
; Looking for a replacement for:
%0 = block 2
%1:i1 = var
%2:i1 = xor 1:i1, %1
%3:i1 = phi %0, 0:i1, %2
infer %3
got 3 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i1 = var
%2:i1 = xor 1:i1, %1
%3:i1 = phi %0, 0:i1, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i1 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i1 = var
%1:i1 = xor 1:i1, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for ./Set_of_real_numbers.c.bc:contains_subtract()

; entering Souper's runOnFunction() for main()

; ModuleID = './Set_of_real_numbers.c.bc'
source_filename = "./Set_of_real_numbers.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.RealSet = type { i1 (%struct.RealSet*, %struct.RealSet*, double)*, %struct.RealSet*, %struct.RealSet*, double, double }

@.str = private unnamed_addr constant [43 x i8] c"(0, 1]   union   [0, 2) contains %d is %d\0A\00", align 1
@.str.1 = private unnamed_addr constant [43 x i8] c"[0, 2) intersect (1, 2] contains %d is %d\0A\00", align 1
@.str.2 = private unnamed_addr constant [43 x i8] c"[0, 3)     -     (0, 1) contains %d is %d\0A\00", align 1
@.str.3 = private unnamed_addr constant [43 x i8] c"[0, 3)     -     [0, 1] contains %d is %d\0A\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.5 = private unnamed_addr constant [20 x i8] c"[0, 0] is empty %d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden double @length(%struct.RealSet* %self) #0 {
entry:
  %retval = alloca double, align 8
  %self.addr = alloca %struct.RealSet*, align 4
  %interval = alloca double, align 8
  %p = alloca double, align 8
  %count = alloca i32, align 4
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store double 1.000000e-05, double* %interval, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  store double %1, double* %p, align 8
  store i32 0, i32* %count, align 4
  %2 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %2, i32 0, i32 3
  %3 = load double, double* %low1, align 8
  %4 = call double @llvm.fabs.f64(double %3) #3
  %cmpinf = fcmp oeq double %4, 0x7FF0000000000000
  br i1 %cmpinf, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %5 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 4
  %6 = load double, double* %high, align 8
  %7 = call double @llvm.fabs.f64(double %6) #3
  %cmpinf2 = fcmp oeq double %7, 0x7FF0000000000000
  br i1 %cmpinf2, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store double -1.000000e+00, double* %retval, align 8
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %8 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %8, i32 0, i32 4
  %9 = load double, double* %high3, align 8
  %10 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %10, i32 0, i32 3
  %11 = load double, double* %low4, align 8
  %cmp = fcmp ole double %9, %11
  br i1 %cmp, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  store double 0.000000e+00, double* %retval, align 8
  br label %return

if.end6:                                          ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end6
  %12 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %12, i32 0, i32 0
  %13 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %14 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %15 = load double, double* %p, align 8
  %call = call zeroext i1 %13(%struct.RealSet* %14, %struct.RealSet* null, double %15)
  br i1 %call, label %if.then7, label %if.end8

if.then7:                                         ; preds = %do.body
  %16 = load i32, i32* %count, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %count, align 4
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %do.body
  %17 = load double, double* %p, align 8
  %add = fadd double %17, 1.000000e-05
  store double %add, double* %p, align 8
  br label %do.cond

do.cond:                                          ; preds = %if.end8
  %18 = load double, double* %p, align 8
  %19 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high9 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %19, i32 0, i32 4
  %20 = load double, double* %high9, align 8
  %cmp10 = fcmp olt double %18, %20
  br i1 %cmp10, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %21 = load i32, i32* %count, align 4
  %conv = sitofp i32 %21 to double
  %mul = fmul double %conv, 1.000000e-05
  store double %mul, double* %retval, align 8
  br label %return

return:                                           ; preds = %do.end, %if.then5, %if.then
  %22 = load double, double* %retval, align 8
  ret double %22
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double %0) #1

; Function Attrs: noinline nounwind optnone
define hidden zeroext i1 @empty(%struct.RealSet* %self) #0 {
entry:
  %retval = alloca i1, align 1
  %self.addr = alloca %struct.RealSet*, align 4
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %2, i32 0, i32 4
  %3 = load double, double* %high, align 8
  %cmp = fcmp oeq double %1, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 0
  %5 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %7 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 3
  %8 = load double, double* %low1, align 8
  %call = call zeroext i1 %5(%struct.RealSet* %6, %struct.RealSet* null, double %8)
  %lnot = xor i1 %call, true
  store i1 %lnot, i1* %retval, align 1
  br label %return

if.end:                                           ; preds = %entry
  %9 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %call2 = call double @length(%struct.RealSet* %9)
  %cmp3 = fcmp oeq double %call2, 0.000000e+00
  store i1 %cmp3, i1* %retval, align 1
  br label %return

return:                                           ; preds = %if.end, %if.then
  %10 = load i1, i1* %retval, align 1
  ret i1 %10
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.RealSet* @makeSet(double %low, double %high, i32 %type) #0 {
entry:
  %retval = alloca %struct.RealSet*, align 4
  %low.addr = alloca double, align 8
  %high.addr = alloca double, align 8
  %type.addr = alloca i32, align 4
  %contains = alloca i1 (%struct.RealSet*, %struct.RealSet*, double)*, align 4
  %rs = alloca %struct.RealSet*, align 4
  store double %low, double* %low.addr, align 8
  store double %high, double* %high.addr, align 8
  store i32 %type, i32* %type.addr, align 4
  %0 = load i32, i32* %type.addr, align 4
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
    i32 2, label %sw.bb2
    i32 3, label %sw.bb3
  ]

sw.bb:                                            ; preds = %entry
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_closed, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  br label %sw.epilog

sw.bb1:                                           ; preds = %entry
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_left_open, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  br label %sw.epilog

sw.bb2:                                           ; preds = %entry
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_right_open, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  br label %sw.epilog

sw.bb3:                                           ; preds = %entry
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_both_open, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  store %struct.RealSet* null, %struct.RealSet** %retval, align 4
  br label %return

sw.epilog:                                        ; preds = %sw.bb3, %sw.bb2, %sw.bb1, %sw.bb
  %call = call noalias i8* @malloc(i32 32)
  %1 = bitcast i8* %call to %struct.RealSet*
  store %struct.RealSet* %1, %struct.RealSet** %rs, align 4
  %2 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 4
  %3 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %contains4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 0
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* %2, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains4, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %left = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 1
  store %struct.RealSet* null, %struct.RealSet** %left, align 4
  %5 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %right = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 2
  store %struct.RealSet* null, %struct.RealSet** %right, align 8
  %6 = load double, double* %low.addr, align 8
  %7 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %low5 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 3
  store double %6, double* %low5, align 8
  %8 = load double, double* %high.addr, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %high6 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 4
  store double %8, double* %high6, align 8
  %10 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  store %struct.RealSet* %10, %struct.RealSet** %retval, align 4
  br label %return

return:                                           ; preds = %sw.epilog, %sw.default
  %11 = load %struct.RealSet*, %struct.RealSet** %retval, align 4
  ret %struct.RealSet* %11
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_closed(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load double, double* %d.addr, align 8
  %cmp = fcmp ole double %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %3 = load double, double* %d.addr, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 4
  %5 = load double, double* %high, align 8
  %cmp1 = fcmp ole double %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  ret i1 %6
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_left_open(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load double, double* %d.addr, align 8
  %cmp = fcmp olt double %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %3 = load double, double* %d.addr, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 4
  %5 = load double, double* %high, align 8
  %cmp1 = fcmp ole double %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  ret i1 %6
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_right_open(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load double, double* %d.addr, align 8
  %cmp = fcmp ole double %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %3 = load double, double* %d.addr, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 4
  %5 = load double, double* %high, align 8
  %cmp1 = fcmp olt double %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  ret i1 %6
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_both_open(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 3
  %1 = load double, double* %low, align 8
  %2 = load double, double* %d.addr, align 8
  %cmp = fcmp olt double %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %3 = load double, double* %d.addr, align 8
  %4 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 4
  %5 = load double, double* %high, align 8
  %cmp1 = fcmp olt double %3, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  ret i1 %6
}

declare noalias i8* @malloc(i32 %0) #2

; Function Attrs: noinline nounwind optnone
define hidden %struct.RealSet* @makeIntersect(%struct.RealSet* %left, %struct.RealSet* %right) #0 {
entry:
  %left.addr = alloca %struct.RealSet*, align 4
  %right.addr = alloca %struct.RealSet*, align 4
  %rs = alloca %struct.RealSet*, align 4
  store %struct.RealSet* %left, %struct.RealSet** %left.addr, align 4
  store %struct.RealSet* %right, %struct.RealSet** %right.addr, align 4
  %call = call noalias i8* @malloc(i32 32)
  %0 = bitcast i8* %call to %struct.RealSet*
  store %struct.RealSet* %0, %struct.RealSet** %rs, align 4
  %1 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_intersect, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %2 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %3 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  store %struct.RealSet* %2, %struct.RealSet** %left1, align 4
  %4 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %5 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %right2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 2
  store %struct.RealSet* %4, %struct.RealSet** %right2, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 3
  %7 = load double, double* %low, align 8
  %8 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %low3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %8, i32 0, i32 3
  %9 = load double, double* %low3, align 8
  %10 = call double @llvm.minnum.f64(double %7, double %9)
  %11 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %low4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %11, i32 0, i32 3
  store double %10, double* %low4, align 8
  %12 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %12, i32 0, i32 4
  %13 = load double, double* %high, align 8
  %14 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %high5 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %14, i32 0, i32 4
  %15 = load double, double* %high5, align 8
  %16 = call double @llvm.minnum.f64(double %13, double %15)
  %17 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %high6 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %17, i32 0, i32 4
  store double %16, double* %high6, align 8
  %18 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  ret %struct.RealSet* %18
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_intersect(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 1
  %1 = load %struct.RealSet*, %struct.RealSet** %left, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  %2 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %3 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  %4 = load %struct.RealSet*, %struct.RealSet** %left1, align 4
  %5 = load double, double* %d.addr, align 8
  %call = call zeroext i1 %2(%struct.RealSet* %4, %struct.RealSet* null, double %5)
  br i1 %call, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %6 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 2
  %7 = load %struct.RealSet*, %struct.RealSet** %right, align 8
  %contains2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 0
  %8 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains2, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 2
  %10 = load %struct.RealSet*, %struct.RealSet** %right3, align 8
  %11 = load double, double* %d.addr, align 8
  %call4 = call zeroext i1 %8(%struct.RealSet* %10, %struct.RealSet* null, double %11)
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %12 = phi i1 [ false, %entry ], [ %call4, %land.rhs ]
  ret i1 %12
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.minnum.f64(double %0, double %1) #1

; Function Attrs: noinline nounwind optnone
define hidden %struct.RealSet* @makeUnion(%struct.RealSet* %left, %struct.RealSet* %right) #0 {
entry:
  %left.addr = alloca %struct.RealSet*, align 4
  %right.addr = alloca %struct.RealSet*, align 4
  %rs = alloca %struct.RealSet*, align 4
  store %struct.RealSet* %left, %struct.RealSet** %left.addr, align 4
  store %struct.RealSet* %right, %struct.RealSet** %right.addr, align 4
  %call = call noalias i8* @malloc(i32 32)
  %0 = bitcast i8* %call to %struct.RealSet*
  store %struct.RealSet* %0, %struct.RealSet** %rs, align 4
  %1 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_union, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %2 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %3 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  store %struct.RealSet* %2, %struct.RealSet** %left1, align 4
  %4 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %5 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %right2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 2
  store %struct.RealSet* %4, %struct.RealSet** %right2, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 3
  %7 = load double, double* %low, align 8
  %8 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %low3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %8, i32 0, i32 3
  %9 = load double, double* %low3, align 8
  %10 = call double @llvm.minnum.f64(double %7, double %9)
  %11 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %low4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %11, i32 0, i32 3
  store double %10, double* %low4, align 8
  %12 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %12, i32 0, i32 4
  %13 = load double, double* %high, align 8
  %14 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %high5 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %14, i32 0, i32 4
  %15 = load double, double* %high5, align 8
  %16 = call double @llvm.minnum.f64(double %13, double %15)
  %17 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %high6 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %17, i32 0, i32 4
  store double %16, double* %high6, align 8
  %18 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  ret %struct.RealSet* %18
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_union(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 1
  %1 = load %struct.RealSet*, %struct.RealSet** %left, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  %2 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %3 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  %4 = load %struct.RealSet*, %struct.RealSet** %left1, align 4
  %5 = load double, double* %d.addr, align 8
  %call = call zeroext i1 %2(%struct.RealSet* %4, %struct.RealSet* null, double %5)
  br i1 %call, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %6 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 2
  %7 = load %struct.RealSet*, %struct.RealSet** %right, align 8
  %contains2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 0
  %8 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains2, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 2
  %10 = load %struct.RealSet*, %struct.RealSet** %right3, align 8
  %11 = load double, double* %d.addr, align 8
  %call4 = call zeroext i1 %8(%struct.RealSet* %10, %struct.RealSet* null, double %11)
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %12 = phi i1 [ true, %entry ], [ %call4, %lor.rhs ]
  ret i1 %12
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.RealSet* @makeSubtract(%struct.RealSet* %left, %struct.RealSet* %right) #0 {
entry:
  %left.addr = alloca %struct.RealSet*, align 4
  %right.addr = alloca %struct.RealSet*, align 4
  %rs = alloca %struct.RealSet*, align 4
  store %struct.RealSet* %left, %struct.RealSet** %left.addr, align 4
  store %struct.RealSet* %right, %struct.RealSet** %right.addr, align 4
  %call = call noalias i8* @malloc(i32 32)
  %0 = bitcast i8* %call to %struct.RealSet*
  store %struct.RealSet* %0, %struct.RealSet** %rs, align 4
  %1 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  store i1 (%struct.RealSet*, %struct.RealSet*, double)* @contains_subtract, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %2 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %3 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  store %struct.RealSet* %2, %struct.RealSet** %left1, align 4
  %4 = load %struct.RealSet*, %struct.RealSet** %right.addr, align 4
  %5 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %right2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %5, i32 0, i32 2
  store %struct.RealSet* %4, %struct.RealSet** %right2, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %low = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 3
  %7 = load double, double* %low, align 8
  %8 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %low3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %8, i32 0, i32 3
  store double %7, double* %low3, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %left.addr, align 4
  %high = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 4
  %10 = load double, double* %high, align 8
  %11 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  %high4 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %11, i32 0, i32 4
  store double %10, double* %high4, align 8
  %12 = load %struct.RealSet*, %struct.RealSet** %rs, align 4
  ret %struct.RealSet* %12
}

; Function Attrs: noinline nounwind optnone
define internal zeroext i1 @contains_subtract(%struct.RealSet* %self, %struct.RealSet* %_, double %d) #0 {
entry:
  %self.addr = alloca %struct.RealSet*, align 4
  %_.addr = alloca %struct.RealSet*, align 4
  %d.addr = alloca double, align 8
  store %struct.RealSet* %self, %struct.RealSet** %self.addr, align 4
  store %struct.RealSet* %_, %struct.RealSet** %_.addr, align 4
  store double %d, double* %d.addr, align 8
  %0 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left = getelementptr inbounds %struct.RealSet, %struct.RealSet* %0, i32 0, i32 1
  %1 = load %struct.RealSet*, %struct.RealSet** %left, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %1, i32 0, i32 0
  %2 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %3 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %left1 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %3, i32 0, i32 1
  %4 = load %struct.RealSet*, %struct.RealSet** %left1, align 4
  %5 = load double, double* %d.addr, align 8
  %call = call zeroext i1 %2(%struct.RealSet* %4, %struct.RealSet* null, double %5)
  br i1 %call, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %6 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right = getelementptr inbounds %struct.RealSet, %struct.RealSet* %6, i32 0, i32 2
  %7 = load %struct.RealSet*, %struct.RealSet** %right, align 8
  %contains2 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %7, i32 0, i32 0
  %8 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains2, align 8
  %9 = load %struct.RealSet*, %struct.RealSet** %self.addr, align 4
  %right3 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %9, i32 0, i32 2
  %10 = load %struct.RealSet*, %struct.RealSet** %right3, align 8
  %11 = load double, double* %d.addr, align 8
  %call4 = call zeroext i1 %8(%struct.RealSet* %10, %struct.RealSet* null, double %11)
  %lnot = xor i1 %call4, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %12 = phi i1 [ false, %entry ], [ %lnot, %land.rhs ]
  ret i1 %12
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %a = alloca %struct.RealSet*, align 4
  %b = alloca %struct.RealSet*, align 4
  %c = alloca %struct.RealSet*, align 4
  %d = alloca %struct.RealSet*, align 4
  %e = alloca %struct.RealSet*, align 4
  %f = alloca %struct.RealSet*, align 4
  %g = alloca %struct.RealSet*, align 4
  %i = alloca i32, align 4
  %t = alloca %struct.RealSet*, align 4
  store i32 0, i32* %retval, align 4
  %call = call %struct.RealSet* @makeSet(double 0.000000e+00, double 1.000000e+00, i32 1)
  store %struct.RealSet* %call, %struct.RealSet** %a, align 4
  %call1 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 2.000000e+00, i32 2)
  store %struct.RealSet* %call1, %struct.RealSet** %b, align 4
  %call2 = call %struct.RealSet* @makeSet(double 1.000000e+00, double 2.000000e+00, i32 1)
  store %struct.RealSet* %call2, %struct.RealSet** %c, align 4
  %call3 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 3.000000e+00, i32 2)
  store %struct.RealSet* %call3, %struct.RealSet** %d, align 4
  %call4 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 1.000000e+00, i32 3)
  store %struct.RealSet* %call4, %struct.RealSet** %e, align 4
  %call5 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 1.000000e+00, i32 0)
  store %struct.RealSet* %call5, %struct.RealSet** %f, align 4
  %call6 = call %struct.RealSet* @makeSet(double 0.000000e+00, double 0.000000e+00, i32 0)
  store %struct.RealSet* %call6, %struct.RealSet** %g, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load %struct.RealSet*, %struct.RealSet** %a, align 4
  %2 = load %struct.RealSet*, %struct.RealSet** %b, align 4
  %call7 = call %struct.RealSet* @makeUnion(%struct.RealSet* %1, %struct.RealSet* %2)
  store %struct.RealSet* %call7, %struct.RealSet** %t, align 4
  %3 = load i32, i32* %i, align 4
  %4 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %contains = getelementptr inbounds %struct.RealSet, %struct.RealSet* %4, i32 0, i32 0
  %5 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains, align 8
  %6 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %7 = load i32, i32* %i, align 4
  %conv = sitofp i32 %7 to double
  %call8 = call zeroext i1 %5(%struct.RealSet* %6, %struct.RealSet* null, double %conv)
  %conv9 = zext i1 %call8 to i32
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str, i32 0, i32 0), i32 %3, i32 %conv9)
  %8 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %9 = bitcast %struct.RealSet* %8 to i8*
  call void @free(i8* %9)
  %10 = load %struct.RealSet*, %struct.RealSet** %b, align 4
  %11 = load %struct.RealSet*, %struct.RealSet** %c, align 4
  %call11 = call %struct.RealSet* @makeIntersect(%struct.RealSet* %10, %struct.RealSet* %11)
  store %struct.RealSet* %call11, %struct.RealSet** %t, align 4
  %12 = load i32, i32* %i, align 4
  %13 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %contains12 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %13, i32 0, i32 0
  %14 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains12, align 8
  %15 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %16 = load i32, i32* %i, align 4
  %conv13 = sitofp i32 %16 to double
  %call14 = call zeroext i1 %14(%struct.RealSet* %15, %struct.RealSet* null, double %conv13)
  %conv15 = zext i1 %call14 to i32
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.1, i32 0, i32 0), i32 %12, i32 %conv15)
  %17 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %18 = bitcast %struct.RealSet* %17 to i8*
  call void @free(i8* %18)
  %19 = load %struct.RealSet*, %struct.RealSet** %d, align 4
  %20 = load %struct.RealSet*, %struct.RealSet** %e, align 4
  %call17 = call %struct.RealSet* @makeSubtract(%struct.RealSet* %19, %struct.RealSet* %20)
  store %struct.RealSet* %call17, %struct.RealSet** %t, align 4
  %21 = load i32, i32* %i, align 4
  %22 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %contains18 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %22, i32 0, i32 0
  %23 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains18, align 8
  %24 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %25 = load i32, i32* %i, align 4
  %conv19 = sitofp i32 %25 to double
  %call20 = call zeroext i1 %23(%struct.RealSet* %24, %struct.RealSet* null, double %conv19)
  %conv21 = zext i1 %call20 to i32
  %call22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.2, i32 0, i32 0), i32 %21, i32 %conv21)
  %26 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %27 = bitcast %struct.RealSet* %26 to i8*
  call void @free(i8* %27)
  %28 = load %struct.RealSet*, %struct.RealSet** %d, align 4
  %29 = load %struct.RealSet*, %struct.RealSet** %f, align 4
  %call23 = call %struct.RealSet* @makeSubtract(%struct.RealSet* %28, %struct.RealSet* %29)
  store %struct.RealSet* %call23, %struct.RealSet** %t, align 4
  %30 = load i32, i32* %i, align 4
  %31 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %contains24 = getelementptr inbounds %struct.RealSet, %struct.RealSet* %31, i32 0, i32 0
  %32 = load i1 (%struct.RealSet*, %struct.RealSet*, double)*, i1 (%struct.RealSet*, %struct.RealSet*, double)** %contains24, align 8
  %33 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %34 = load i32, i32* %i, align 4
  %conv25 = sitofp i32 %34 to double
  %call26 = call zeroext i1 %32(%struct.RealSet* %33, %struct.RealSet* null, double %conv25)
  %conv27 = zext i1 %call26 to i32
  %call28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.3, i32 0, i32 0), i32 %30, i32 %conv27)
  %35 = load %struct.RealSet*, %struct.RealSet** %t, align 4
  %36 = bitcast %struct.RealSet* %35 to i8*
  call void @free(i8* %36)
  %call29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0))
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %37 = load i32, i32* %i, align 4
  %inc = add nsw i32 %37, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %38 = load %struct.RealSet*, %struct.RealSet** %g, align 4
  %call30 = call zeroext i1 @empty(%struct.RealSet* %38)
  %conv31 = zext i1 %call30 to i32
  %call32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.5, i32 0, i32 0), i32 %conv31)
  %39 = load %struct.RealSet*, %struct.RealSet** %a, align 4
  %40 = bitcast %struct.RealSet* %39 to i8*
  call void @free(i8* %40)
  %41 = load %struct.RealSet*, %struct.RealSet** %b, align 4
  %42 = bitcast %struct.RealSet* %41 to i8*
  call void @free(i8* %42)
  %43 = load %struct.RealSet*, %struct.RealSet** %c, align 4
  %44 = bitcast %struct.RealSet* %43 to i8*
  call void @free(i8* %44)
  %45 = load %struct.RealSet*, %struct.RealSet** %d, align 4
  %46 = bitcast %struct.RealSet* %45 to i8*
  call void @free(i8* %46)
  %47 = load %struct.RealSet*, %struct.RealSet** %e, align 4
  %48 = bitcast %struct.RealSet* %47 to i8*
  call void @free(i8* %48)
  %49 = load %struct.RealSet*, %struct.RealSet** %f, align 4
  %50 = bitcast %struct.RealSet* %49 to i8*
  call void @free(i8* %50)
  %51 = load %struct.RealSet*, %struct.RealSet** %g, align 4
  %52 = bitcast %struct.RealSet* %51 to i8*
  call void @free(i8* %52)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #2

declare void @free(i8* %0) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, 3
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 3:i32
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call8 = call zeroext i1 %5(%struct.RealSet* %6, %struct.RealSet* null, double %conv)
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %conv9 = zext i1 %call8 to i32
; Looking for a replacement for:
%0:i1 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call14 = call zeroext i1 %14(%struct.RealSet* %15, %struct.RealSet* null, double %conv13)
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %conv15 = zext i1 %call14 to i32
; Looking for a replacement for:
%0:i1 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call20 = call zeroext i1 %23(%struct.RealSet* %24, %struct.RealSet* null, double %conv19)
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %conv21 = zext i1 %call20 to i32
; Looking for a replacement for:
%0:i1 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call26 = call zeroext i1 %32(%struct.RealSet* %33, %struct.RealSet* null, double %conv25)
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %conv27 = zext i1 %call26 to i32
; Looking for a replacement for:
%0:i1 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %37, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call30 = call zeroext i1 @empty(%struct.RealSet* %38)
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %conv31 = zext i1 %call30 to i32
; Looking for a replacement for:
%0:i1 = var
%1:i32 = zext %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 3:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i1 = var
%1:i32 = zext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
