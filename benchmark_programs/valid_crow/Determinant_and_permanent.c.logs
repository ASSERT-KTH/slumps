
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for showmat()

; ModuleID = './Determinant_and_permanent.c.bc'
source_filename = "./Determinant_and_permanent.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [5 x i8] c"%s:\0A\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"%12.4f\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"Matrix\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"Upper triangle\00", align 1
@.str.4 = private unnamed_addr constant [11 x i8] c"det: %19f\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @showmat(i8* %s, double** %m, i32 %n) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %m.addr = alloca double**, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store double** %m, double*** %m.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i8* %0)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %3, %4
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %5 = load double**, double*** %m.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %5, i32 %6
  %7 = load double*, double** %arrayidx, align 4
  %8 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds double, double* %7, i32 %8
  %9 = load double, double* %arrayidx4, align 8
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), double %9)
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %10 = load i32, i32* %j, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %call6 = call i32 @putchar(i32 10)
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %11 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %11, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  ret void
}

declare i32 @printf(i8* %0, ...) #1

declare i32 @putchar(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @trianglize(double** %m, i32 %n) #0 {
entry:
  %__x.addr.i48 = alloca double, align 8
  %__x.addr.i = alloca double, align 8
  %retval = alloca i32, align 4
  %m.addr = alloca double**, align 4
  %n.addr = alloca i32, align 4
  %sign = alloca i32, align 4
  %i = alloca i32, align 4
  %max = alloca i32, align 4
  %row = alloca i32, align 4
  %tmp = alloca double*, align 4
  %row20 = alloca i32, align 4
  %r = alloca double, align 8
  %col = alloca i32, align 4
  store double** %m, double*** %m.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 1, i32* %sign, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc45, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end47

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %max, align 4
  %2 = load i32, i32* %i, align 4
  store i32 %2, i32* %row, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %row, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %3, %4
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %5 = load double**, double*** %m.addr, align 4
  %6 = load i32, i32* %row, align 4
  %arrayidx = getelementptr inbounds double*, double** %5, i32 %6
  %7 = load double*, double** %arrayidx, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds double, double* %7, i32 %8
  %9 = load double, double* %arrayidx4, align 8
  store double %9, double* %__x.addr.i, align 8
  %10 = load double, double* %__x.addr.i, align 8
  %11 = call double @llvm.fabs.f64(double %10) #2
  %12 = load double**, double*** %m.addr, align 4
  %13 = load i32, i32* %max, align 4
  %arrayidx5 = getelementptr inbounds double*, double** %12, i32 %13
  %14 = load double*, double** %arrayidx5, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds double, double* %14, i32 %15
  %16 = load double, double* %arrayidx6, align 8
  store double %16, double* %__x.addr.i48, align 8
  %17 = load double, double* %__x.addr.i48, align 8
  %18 = call double @llvm.fabs.f64(double %17) #2
  %cmp8 = fcmp ogt double %11, %18
  br i1 %cmp8, label %if.then, label %if.end

if.then:                                          ; preds = %for.body3
  %19 = load i32, i32* %row, align 4
  store i32 %19, i32* %max, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body3
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %20 = load i32, i32* %row, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %row, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %21 = load i32, i32* %max, align 4
  %tobool = icmp ne i32 %21, 0
  br i1 %tobool, label %if.then9, label %if.end14

if.then9:                                         ; preds = %for.end
  %22 = load i32, i32* %sign, align 4
  %sub = sub nsw i32 0, %22
  store i32 %sub, i32* %sign, align 4
  %23 = load double**, double*** %m.addr, align 4
  %24 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds double*, double** %23, i32 %24
  %25 = load double*, double** %arrayidx10, align 4
  store double* %25, double** %tmp, align 4
  %26 = load double**, double*** %m.addr, align 4
  %27 = load i32, i32* %max, align 4
  %arrayidx11 = getelementptr inbounds double*, double** %26, i32 %27
  %28 = load double*, double** %arrayidx11, align 4
  %29 = load double**, double*** %m.addr, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds double*, double** %29, i32 %30
  store double* %28, double** %arrayidx12, align 4
  %31 = load double*, double** %tmp, align 4
  %32 = load double**, double*** %m.addr, align 4
  %33 = load i32, i32* %max, align 4
  %arrayidx13 = getelementptr inbounds double*, double** %32, i32 %33
  store double* %31, double** %arrayidx13, align 4
  br label %if.end14

if.end14:                                         ; preds = %if.then9, %for.end
  %34 = load double**, double*** %m.addr, align 4
  %35 = load i32, i32* %i, align 4
  %arrayidx15 = getelementptr inbounds double*, double** %34, i32 %35
  %36 = load double*, double** %arrayidx15, align 4
  %37 = load i32, i32* %i, align 4
  %arrayidx16 = getelementptr inbounds double, double* %36, i32 %37
  %38 = load double, double* %arrayidx16, align 8
  %tobool17 = fcmp une double %38, 0.000000e+00
  br i1 %tobool17, label %if.end19, label %if.then18

if.then18:                                        ; preds = %if.end14
  store i32 0, i32* %retval, align 4
  br label %return

if.end19:                                         ; preds = %if.end14
  %39 = load i32, i32* %i, align 4
  %add = add nsw i32 %39, 1
  store i32 %add, i32* %row20, align 4
  br label %for.cond21

for.cond21:                                       ; preds = %for.inc42, %if.end19
  %40 = load i32, i32* %row20, align 4
  %41 = load i32, i32* %n.addr, align 4
  %cmp22 = icmp slt i32 %40, %41
  br i1 %cmp22, label %for.body23, label %for.end44

for.body23:                                       ; preds = %for.cond21
  %42 = load double**, double*** %m.addr, align 4
  %43 = load i32, i32* %row20, align 4
  %arrayidx24 = getelementptr inbounds double*, double** %42, i32 %43
  %44 = load double*, double** %arrayidx24, align 4
  %45 = load i32, i32* %i, align 4
  %arrayidx25 = getelementptr inbounds double, double* %44, i32 %45
  %46 = load double, double* %arrayidx25, align 8
  %47 = load double**, double*** %m.addr, align 4
  %48 = load i32, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds double*, double** %47, i32 %48
  %49 = load double*, double** %arrayidx26, align 4
  %50 = load i32, i32* %i, align 4
  %arrayidx27 = getelementptr inbounds double, double* %49, i32 %50
  %51 = load double, double* %arrayidx27, align 8
  %div = fdiv double %46, %51
  store double %div, double* %r, align 8
  %52 = load double, double* %r, align 8
  %tobool28 = fcmp une double %52, 0.000000e+00
  br i1 %tobool28, label %if.end30, label %if.then29

if.then29:                                        ; preds = %for.body23
  br label %for.inc42

if.end30:                                         ; preds = %for.body23
  %53 = load i32, i32* %i, align 4
  store i32 %53, i32* %col, align 4
  br label %for.cond31

for.cond31:                                       ; preds = %for.inc39, %if.end30
  %54 = load i32, i32* %col, align 4
  %55 = load i32, i32* %n.addr, align 4
  %cmp32 = icmp slt i32 %54, %55
  br i1 %cmp32, label %for.body33, label %for.end41

for.body33:                                       ; preds = %for.cond31
  %56 = load double**, double*** %m.addr, align 4
  %57 = load i32, i32* %i, align 4
  %arrayidx34 = getelementptr inbounds double*, double** %56, i32 %57
  %58 = load double*, double** %arrayidx34, align 4
  %59 = load i32, i32* %col, align 4
  %arrayidx35 = getelementptr inbounds double, double* %58, i32 %59
  %60 = load double, double* %arrayidx35, align 8
  %61 = load double, double* %r, align 8
  %mul = fmul double %60, %61
  %62 = load double**, double*** %m.addr, align 4
  %63 = load i32, i32* %row20, align 4
  %arrayidx36 = getelementptr inbounds double*, double** %62, i32 %63
  %64 = load double*, double** %arrayidx36, align 4
  %65 = load i32, i32* %col, align 4
  %arrayidx37 = getelementptr inbounds double, double* %64, i32 %65
  %66 = load double, double* %arrayidx37, align 8
  %sub38 = fsub double %66, %mul
  store double %sub38, double* %arrayidx37, align 8
  br label %for.inc39

for.inc39:                                        ; preds = %for.body33
  %67 = load i32, i32* %col, align 4
  %inc40 = add nsw i32 %67, 1
  store i32 %inc40, i32* %col, align 4
  br label %for.cond31

for.end41:                                        ; preds = %for.cond31
  br label %for.inc42

for.inc42:                                        ; preds = %for.end41, %if.then29
  %68 = load i32, i32* %row20, align 4
  %inc43 = add nsw i32 %68, 1
  store i32 %inc43, i32* %row20, align 4
  br label %for.cond21

for.end44:                                        ; preds = %for.cond21
  br label %for.inc45

for.inc45:                                        ; preds = %for.end44
  %69 = load i32, i32* %i, align 4
  %inc46 = add nsw i32 %69, 1
  store i32 %inc46, i32* %i, align 4
  br label %for.cond

for.end47:                                        ; preds = %for.cond
  %70 = load i32, i32* %sign, align 4
  store i32 %70, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end47, %if.then18
  %71 = load i32, i32* %retval, align 4
  ret i32 %71
}

; Function Attrs: noinline nounwind optnone
define hidden double @det(double* %in, i32 %n) #0 {
entry:
  %retval = alloca double, align 8
  %in.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %i = alloca i32, align 4
  %sign = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  %p = alloca double, align 8
  %i3 = alloca i32, align 4
  store double* %in, double** %in.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = call i8* @llvm.stacksave()
  store i8* %1, i8** %saved_stack, align 4
  %vla = alloca double*, i32 %0, align 16
  store i32 %0, i32* %__vla_expr0, align 4
  %2 = load double*, double** %in.addr, align 4
  %arrayidx = getelementptr inbounds double*, double** %vla, i32 0
  store double* %2, double** %arrayidx, align 16
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %5, 1
  %arrayidx1 = getelementptr inbounds double*, double** %vla, i32 %sub
  %6 = load double*, double** %arrayidx1, align 4
  %7 = load i32, i32* %n.addr, align 4
  %add.ptr = getelementptr inbounds double, double* %6, i32 %7
  %8 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds double*, double** %vla, i32 %8
  store double* %add.ptr, double** %arrayidx2, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load i32, i32* %n.addr, align 4
  call void @showmat(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), double** %vla, i32 %10)
  %11 = load i32, i32* %n.addr, align 4
  %call = call i32 @trianglize(double** %vla, i32 %11)
  store i32 %call, i32* %sign, align 4
  %12 = load i32, i32* %sign, align 4
  %tobool = icmp ne i32 %12, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.end
  store double 0.000000e+00, double* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %for.end
  %13 = load i32, i32* %n.addr, align 4
  call void @showmat(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0), double** %vla, i32 %13)
  store double 1.000000e+00, double* %p, align 8
  store i32 0, i32* %i3, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc9, %if.end
  %14 = load i32, i32* %i3, align 4
  %15 = load i32, i32* %n.addr, align 4
  %cmp5 = icmp slt i32 %14, %15
  br i1 %cmp5, label %for.body6, label %for.end11

for.body6:                                        ; preds = %for.cond4
  %16 = load i32, i32* %i3, align 4
  %arrayidx7 = getelementptr inbounds double*, double** %vla, i32 %16
  %17 = load double*, double** %arrayidx7, align 4
  %18 = load i32, i32* %i3, align 4
  %arrayidx8 = getelementptr inbounds double, double* %17, i32 %18
  %19 = load double, double* %arrayidx8, align 8
  %20 = load double, double* %p, align 8
  %mul = fmul double %20, %19
  store double %mul, double* %p, align 8
  br label %for.inc9

for.inc9:                                         ; preds = %for.body6
  %21 = load i32, i32* %i3, align 4
  %inc10 = add nsw i32 %21, 1
  store i32 %inc10, i32* %i3, align 4
  br label %for.cond4

for.end11:                                        ; preds = %for.cond4
  %22 = load double, double* %p, align 8
  %23 = load i32, i32* %sign, align 4
  %conv = sitofp i32 %23 to double
  %mul12 = fmul double %22, %conv
  store double %mul12, double* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %for.end11, %if.then
  %24 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %24)
  %25 = load double, double* %retval, align 8
  ret double %25
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %x = alloca [324 x double], align 16
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @srand(i32 0)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 324
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call = call i32 @rand()
  %rem = srem i32 %call, 18
  %conv = sitofp i32 %rem to double
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [324 x double], [324 x double]* %x, i32 0, i32 %1
  store double %conv, double* %arrayidx, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %i, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %arraydecay = getelementptr inbounds [324 x double], [324 x double]* %x, i32 0, i32 0
  %call1 = call double @det(double* %arraydecay, i32 18)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i32 0, i32 0), double %call1)
  ret i32 0
}

declare void @srand(i32 %0) #1

declare i32 @rand() #1

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double %0) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }
attributes #3 = { nounwind readnone speculatable willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %1, %2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp slt i32 %3, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %10, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc8 = add nsw i32 %11, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for showmat()

; entering Souper's runOnFunction() for trianglize()

; ModuleID = './Determinant_and_permanent.c.bc'
source_filename = "./Determinant_and_permanent.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [5 x i8] c"%s:\0A\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"%12.4f\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"Matrix\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"Upper triangle\00", align 1
@.str.4 = private unnamed_addr constant [11 x i8] c"det: %19f\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @showmat(i8* %s, double** %m, i32 %n) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %m.addr = alloca double**, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store double** %m, double*** %m.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i8* %0)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %3, %4
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %5 = load double**, double*** %m.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %5, i32 %6
  %7 = load double*, double** %arrayidx, align 4
  %8 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds double, double* %7, i32 %8
  %9 = load double, double* %arrayidx4, align 8
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), double %9)
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %10 = load i32, i32* %j, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %call6 = call i32 @putchar(i32 10)
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %11 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %11, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  ret void
}

declare i32 @printf(i8* %0, ...) #1

declare i32 @putchar(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @trianglize(double** %m, i32 %n) #0 {
entry:
  %__x.addr.i48 = alloca double, align 8
  %__x.addr.i = alloca double, align 8
  %retval = alloca i32, align 4
  %m.addr = alloca double**, align 4
  %n.addr = alloca i32, align 4
  %sign = alloca i32, align 4
  %i = alloca i32, align 4
  %max = alloca i32, align 4
  %row = alloca i32, align 4
  %tmp = alloca double*, align 4
  %row20 = alloca i32, align 4
  %r = alloca double, align 8
  %col = alloca i32, align 4
  store double** %m, double*** %m.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 1, i32* %sign, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc45, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end47

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %max, align 4
  %2 = load i32, i32* %i, align 4
  store i32 %2, i32* %row, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %row, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %3, %4
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %5 = load double**, double*** %m.addr, align 4
  %6 = load i32, i32* %row, align 4
  %arrayidx = getelementptr inbounds double*, double** %5, i32 %6
  %7 = load double*, double** %arrayidx, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds double, double* %7, i32 %8
  %9 = load double, double* %arrayidx4, align 8
  store double %9, double* %__x.addr.i, align 8
  %10 = load double, double* %__x.addr.i, align 8
  %11 = call double @llvm.fabs.f64(double %10) #2
  %12 = load double**, double*** %m.addr, align 4
  %13 = load i32, i32* %max, align 4
  %arrayidx5 = getelementptr inbounds double*, double** %12, i32 %13
  %14 = load double*, double** %arrayidx5, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds double, double* %14, i32 %15
  %16 = load double, double* %arrayidx6, align 8
  store double %16, double* %__x.addr.i48, align 8
  %17 = load double, double* %__x.addr.i48, align 8
  %18 = call double @llvm.fabs.f64(double %17) #2
  %cmp8 = fcmp ogt double %11, %18
  br i1 %cmp8, label %if.then, label %if.end

if.then:                                          ; preds = %for.body3
  %19 = load i32, i32* %row, align 4
  store i32 %19, i32* %max, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body3
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %20 = load i32, i32* %row, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %row, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %21 = load i32, i32* %max, align 4
  %tobool = icmp ne i32 %21, 0
  br i1 %tobool, label %if.then9, label %if.end14

if.then9:                                         ; preds = %for.end
  %22 = load i32, i32* %sign, align 4
  %sub = sub nsw i32 0, %22
  store i32 %sub, i32* %sign, align 4
  %23 = load double**, double*** %m.addr, align 4
  %24 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds double*, double** %23, i32 %24
  %25 = load double*, double** %arrayidx10, align 4
  store double* %25, double** %tmp, align 4
  %26 = load double**, double*** %m.addr, align 4
  %27 = load i32, i32* %max, align 4
  %arrayidx11 = getelementptr inbounds double*, double** %26, i32 %27
  %28 = load double*, double** %arrayidx11, align 4
  %29 = load double**, double*** %m.addr, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds double*, double** %29, i32 %30
  store double* %28, double** %arrayidx12, align 4
  %31 = load double*, double** %tmp, align 4
  %32 = load double**, double*** %m.addr, align 4
  %33 = load i32, i32* %max, align 4
  %arrayidx13 = getelementptr inbounds double*, double** %32, i32 %33
  store double* %31, double** %arrayidx13, align 4
  br label %if.end14

if.end14:                                         ; preds = %if.then9, %for.end
  %34 = load double**, double*** %m.addr, align 4
  %35 = load i32, i32* %i, align 4
  %arrayidx15 = getelementptr inbounds double*, double** %34, i32 %35
  %36 = load double*, double** %arrayidx15, align 4
  %37 = load i32, i32* %i, align 4
  %arrayidx16 = getelementptr inbounds double, double* %36, i32 %37
  %38 = load double, double* %arrayidx16, align 8
  %tobool17 = fcmp une double %38, 0.000000e+00
  br i1 %tobool17, label %if.end19, label %if.then18

if.then18:                                        ; preds = %if.end14
  store i32 0, i32* %retval, align 4
  br label %return

if.end19:                                         ; preds = %if.end14
  %39 = load i32, i32* %i, align 4
  %add = add nsw i32 %39, 1
  store i32 %add, i32* %row20, align 4
  br label %for.cond21

for.cond21:                                       ; preds = %for.inc42, %if.end19
  %40 = load i32, i32* %row20, align 4
  %41 = load i32, i32* %n.addr, align 4
  %cmp22 = icmp slt i32 %40, %41
  br i1 %cmp22, label %for.body23, label %for.end44

for.body23:                                       ; preds = %for.cond21
  %42 = load double**, double*** %m.addr, align 4
  %43 = load i32, i32* %row20, align 4
  %arrayidx24 = getelementptr inbounds double*, double** %42, i32 %43
  %44 = load double*, double** %arrayidx24, align 4
  %45 = load i32, i32* %i, align 4
  %arrayidx25 = getelementptr inbounds double, double* %44, i32 %45
  %46 = load double, double* %arrayidx25, align 8
  %47 = load double**, double*** %m.addr, align 4
  %48 = load i32, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds double*, double** %47, i32 %48
  %49 = load double*, double** %arrayidx26, align 4
  %50 = load i32, i32* %i, align 4
  %arrayidx27 = getelementptr inbounds double, double* %49, i32 %50
  %51 = load double, double* %arrayidx27, align 8
  %div = fdiv double %46, %51
  store double %div, double* %r, align 8
  %52 = load double, double* %r, align 8
  %tobool28 = fcmp une double %52, 0.000000e+00
  br i1 %tobool28, label %if.end30, label %if.then29

if.then29:                                        ; preds = %for.body23
  br label %for.inc42

if.end30:                                         ; preds = %for.body23
  %53 = load i32, i32* %i, align 4
  store i32 %53, i32* %col, align 4
  br label %for.cond31

for.cond31:                                       ; preds = %for.inc39, %if.end30
  %54 = load i32, i32* %col, align 4
  %55 = load i32, i32* %n.addr, align 4
  %cmp32 = icmp slt i32 %54, %55
  br i1 %cmp32, label %for.body33, label %for.end41

for.body33:                                       ; preds = %for.cond31
  %56 = load double**, double*** %m.addr, align 4
  %57 = load i32, i32* %i, align 4
  %arrayidx34 = getelementptr inbounds double*, double** %56, i32 %57
  %58 = load double*, double** %arrayidx34, align 4
  %59 = load i32, i32* %col, align 4
  %arrayidx35 = getelementptr inbounds double, double* %58, i32 %59
  %60 = load double, double* %arrayidx35, align 8
  %61 = load double, double* %r, align 8
  %mul = fmul double %60, %61
  %62 = load double**, double*** %m.addr, align 4
  %63 = load i32, i32* %row20, align 4
  %arrayidx36 = getelementptr inbounds double*, double** %62, i32 %63
  %64 = load double*, double** %arrayidx36, align 4
  %65 = load i32, i32* %col, align 4
  %arrayidx37 = getelementptr inbounds double, double* %64, i32 %65
  %66 = load double, double* %arrayidx37, align 8
  %sub38 = fsub double %66, %mul
  store double %sub38, double* %arrayidx37, align 8
  br label %for.inc39

for.inc39:                                        ; preds = %for.body33
  %67 = load i32, i32* %col, align 4
  %inc40 = add nsw i32 %67, 1
  store i32 %inc40, i32* %col, align 4
  br label %for.cond31

for.end41:                                        ; preds = %for.cond31
  br label %for.inc42

for.inc42:                                        ; preds = %for.end41, %if.then29
  %68 = load i32, i32* %row20, align 4
  %inc43 = add nsw i32 %68, 1
  store i32 %inc43, i32* %row20, align 4
  br label %for.cond21

for.end44:                                        ; preds = %for.cond21
  br label %for.inc45

for.inc45:                                        ; preds = %for.end44
  %69 = load i32, i32* %i, align 4
  %inc46 = add nsw i32 %69, 1
  store i32 %inc46, i32* %i, align 4
  br label %for.cond

for.end47:                                        ; preds = %for.cond
  %70 = load i32, i32* %sign, align 4
  store i32 %70, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end47, %if.then18
  %71 = load i32, i32* %retval, align 4
  ret i32 %71
}

; Function Attrs: noinline nounwind optnone
define hidden double @det(double* %in, i32 %n) #0 {
entry:
  %retval = alloca double, align 8
  %in.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %i = alloca i32, align 4
  %sign = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  %p = alloca double, align 8
  %i3 = alloca i32, align 4
  store double* %in, double** %in.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = call i8* @llvm.stacksave()
  store i8* %1, i8** %saved_stack, align 4
  %vla = alloca double*, i32 %0, align 16
  store i32 %0, i32* %__vla_expr0, align 4
  %2 = load double*, double** %in.addr, align 4
  %arrayidx = getelementptr inbounds double*, double** %vla, i32 0
  store double* %2, double** %arrayidx, align 16
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %5, 1
  %arrayidx1 = getelementptr inbounds double*, double** %vla, i32 %sub
  %6 = load double*, double** %arrayidx1, align 4
  %7 = load i32, i32* %n.addr, align 4
  %add.ptr = getelementptr inbounds double, double* %6, i32 %7
  %8 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds double*, double** %vla, i32 %8
  store double* %add.ptr, double** %arrayidx2, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load i32, i32* %n.addr, align 4
  call void @showmat(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), double** %vla, i32 %10)
  %11 = load i32, i32* %n.addr, align 4
  %call = call i32 @trianglize(double** %vla, i32 %11)
  store i32 %call, i32* %sign, align 4
  %12 = load i32, i32* %sign, align 4
  %tobool = icmp ne i32 %12, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.end
  store double 0.000000e+00, double* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %for.end
  %13 = load i32, i32* %n.addr, align 4
  call void @showmat(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0), double** %vla, i32 %13)
  store double 1.000000e+00, double* %p, align 8
  store i32 0, i32* %i3, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc9, %if.end
  %14 = load i32, i32* %i3, align 4
  %15 = load i32, i32* %n.addr, align 4
  %cmp5 = icmp slt i32 %14, %15
  br i1 %cmp5, label %for.body6, label %for.end11

for.body6:                                        ; preds = %for.cond4
  %16 = load i32, i32* %i3, align 4
  %arrayidx7 = getelementptr inbounds double*, double** %vla, i32 %16
  %17 = load double*, double** %arrayidx7, align 4
  %18 = load i32, i32* %i3, align 4
  %arrayidx8 = getelementptr inbounds double, double* %17, i32 %18
  %19 = load double, double* %arrayidx8, align 8
  %20 = load double, double* %p, align 8
  %mul = fmul double %20, %19
  store double %mul, double* %p, align 8
  br label %for.inc9

for.inc9:                                         ; preds = %for.body6
  %21 = load i32, i32* %i3, align 4
  %inc10 = add nsw i32 %21, 1
  store i32 %inc10, i32* %i3, align 4
  br label %for.cond4

for.end11:                                        ; preds = %for.cond4
  %22 = load double, double* %p, align 8
  %23 = load i32, i32* %sign, align 4
  %conv = sitofp i32 %23 to double
  %mul12 = fmul double %22, %conv
  store double %mul12, double* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %for.end11, %if.then
  %24 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %24)
  %25 = load double, double* %retval, align 8
  ret double %25
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %x = alloca [324 x double], align 16
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @srand(i32 0)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 324
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call = call i32 @rand()
  %rem = srem i32 %call, 18
  %conv = sitofp i32 %rem to double
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [324 x double], [324 x double]* %x, i32 0, i32 %1
  store double %conv, double* %arrayidx, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %i, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %arraydecay = getelementptr inbounds [324 x double], [324 x double]* %x, i32 0, i32 0
  %call1 = call double @det(double* %arraydecay, i32 18)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i32 0, i32 0), double %call1)
  ret i32 0
}

declare void @srand(i32 %0) #1

declare i32 @rand() #1

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double %0) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }
attributes #3 = { nounwind readnone speculatable willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %row, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp slt i32 %3, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %row, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %max, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp8 = fcmp ogt double %11, %18
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %row, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %row, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %20, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %max, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %21, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %sign, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 0, %22
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %max, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %max, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool17 = fcmp une double %38, 0.000000e+00
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %39, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %40 = load i32, i32* %row20, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %41 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp22 = icmp slt i32 %40, %41
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %43 = load i32, i32* %row20, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %45 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %48 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %50 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool28 = fcmp une double %52, 0.000000e+00
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %53 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %54 = load i32, i32* %col, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %55 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp32 = icmp slt i32 %54, %55
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %57 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %59 = load i32, i32* %col, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %63 = load i32, i32* %row20, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %65 = load i32, i32* %col, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %67 = load i32, i32* %col, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc40 = add nsw i32 %67, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %68 = load i32, i32* %row20, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc43 = add nsw i32 %68, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %69 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc46 = add nsw i32 %69, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %70 = load i32, i32* %sign, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %71 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -536870912
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for trianglize()

; entering Souper's runOnFunction() for det()

; ModuleID = './Determinant_and_permanent.c.bc'
source_filename = "./Determinant_and_permanent.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [5 x i8] c"%s:\0A\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"%12.4f\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"Matrix\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"Upper triangle\00", align 1
@.str.4 = private unnamed_addr constant [11 x i8] c"det: %19f\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @showmat(i8* %s, double** %m, i32 %n) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %m.addr = alloca double**, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store double** %m, double*** %m.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i8* %0)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %3, %4
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %5 = load double**, double*** %m.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %5, i32 %6
  %7 = load double*, double** %arrayidx, align 4
  %8 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds double, double* %7, i32 %8
  %9 = load double, double* %arrayidx4, align 8
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), double %9)
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %10 = load i32, i32* %j, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %call6 = call i32 @putchar(i32 10)
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %11 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %11, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  ret void
}

declare i32 @printf(i8* %0, ...) #1

declare i32 @putchar(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @trianglize(double** %m, i32 %n) #0 {
entry:
  %__x.addr.i48 = alloca double, align 8
  %__x.addr.i = alloca double, align 8
  %retval = alloca i32, align 4
  %m.addr = alloca double**, align 4
  %n.addr = alloca i32, align 4
  %sign = alloca i32, align 4
  %i = alloca i32, align 4
  %max = alloca i32, align 4
  %row = alloca i32, align 4
  %tmp = alloca double*, align 4
  %row20 = alloca i32, align 4
  %r = alloca double, align 8
  %col = alloca i32, align 4
  store double** %m, double*** %m.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 1, i32* %sign, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc45, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end47

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %max, align 4
  %2 = load i32, i32* %i, align 4
  store i32 %2, i32* %row, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %row, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %3, %4
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %5 = load double**, double*** %m.addr, align 4
  %6 = load i32, i32* %row, align 4
  %arrayidx = getelementptr inbounds double*, double** %5, i32 %6
  %7 = load double*, double** %arrayidx, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds double, double* %7, i32 %8
  %9 = load double, double* %arrayidx4, align 8
  store double %9, double* %__x.addr.i, align 8
  %10 = load double, double* %__x.addr.i, align 8
  %11 = call double @llvm.fabs.f64(double %10) #2
  %12 = load double**, double*** %m.addr, align 4
  %13 = load i32, i32* %max, align 4
  %arrayidx5 = getelementptr inbounds double*, double** %12, i32 %13
  %14 = load double*, double** %arrayidx5, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds double, double* %14, i32 %15
  %16 = load double, double* %arrayidx6, align 8
  store double %16, double* %__x.addr.i48, align 8
  %17 = load double, double* %__x.addr.i48, align 8
  %18 = call double @llvm.fabs.f64(double %17) #2
  %cmp8 = fcmp ogt double %11, %18
  br i1 %cmp8, label %if.then, label %if.end

if.then:                                          ; preds = %for.body3
  %19 = load i32, i32* %row, align 4
  store i32 %19, i32* %max, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body3
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %20 = load i32, i32* %row, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %row, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %21 = load i32, i32* %max, align 4
  %tobool = icmp ne i32 %21, 0
  br i1 %tobool, label %if.then9, label %if.end14

if.then9:                                         ; preds = %for.end
  %22 = load i32, i32* %sign, align 4
  %sub = sub nsw i32 0, %22
  store i32 %sub, i32* %sign, align 4
  %23 = load double**, double*** %m.addr, align 4
  %24 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds double*, double** %23, i32 %24
  %25 = load double*, double** %arrayidx10, align 4
  store double* %25, double** %tmp, align 4
  %26 = load double**, double*** %m.addr, align 4
  %27 = load i32, i32* %max, align 4
  %arrayidx11 = getelementptr inbounds double*, double** %26, i32 %27
  %28 = load double*, double** %arrayidx11, align 4
  %29 = load double**, double*** %m.addr, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds double*, double** %29, i32 %30
  store double* %28, double** %arrayidx12, align 4
  %31 = load double*, double** %tmp, align 4
  %32 = load double**, double*** %m.addr, align 4
  %33 = load i32, i32* %max, align 4
  %arrayidx13 = getelementptr inbounds double*, double** %32, i32 %33
  store double* %31, double** %arrayidx13, align 4
  br label %if.end14

if.end14:                                         ; preds = %if.then9, %for.end
  %34 = load double**, double*** %m.addr, align 4
  %35 = load i32, i32* %i, align 4
  %arrayidx15 = getelementptr inbounds double*, double** %34, i32 %35
  %36 = load double*, double** %arrayidx15, align 4
  %37 = load i32, i32* %i, align 4
  %arrayidx16 = getelementptr inbounds double, double* %36, i32 %37
  %38 = load double, double* %arrayidx16, align 8
  %tobool17 = fcmp une double %38, 0.000000e+00
  br i1 %tobool17, label %if.end19, label %if.then18

if.then18:                                        ; preds = %if.end14
  store i32 0, i32* %retval, align 4
  br label %return

if.end19:                                         ; preds = %if.end14
  %39 = load i32, i32* %i, align 4
  %add = add nsw i32 %39, 1
  store i32 %add, i32* %row20, align 4
  br label %for.cond21

for.cond21:                                       ; preds = %for.inc42, %if.end19
  %40 = load i32, i32* %row20, align 4
  %41 = load i32, i32* %n.addr, align 4
  %cmp22 = icmp slt i32 %40, %41
  br i1 %cmp22, label %for.body23, label %for.end44

for.body23:                                       ; preds = %for.cond21
  %42 = load double**, double*** %m.addr, align 4
  %43 = load i32, i32* %row20, align 4
  %arrayidx24 = getelementptr inbounds double*, double** %42, i32 %43
  %44 = load double*, double** %arrayidx24, align 4
  %45 = load i32, i32* %i, align 4
  %arrayidx25 = getelementptr inbounds double, double* %44, i32 %45
  %46 = load double, double* %arrayidx25, align 8
  %47 = load double**, double*** %m.addr, align 4
  %48 = load i32, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds double*, double** %47, i32 %48
  %49 = load double*, double** %arrayidx26, align 4
  %50 = load i32, i32* %i, align 4
  %arrayidx27 = getelementptr inbounds double, double* %49, i32 %50
  %51 = load double, double* %arrayidx27, align 8
  %div = fdiv double %46, %51
  store double %div, double* %r, align 8
  %52 = load double, double* %r, align 8
  %tobool28 = fcmp une double %52, 0.000000e+00
  br i1 %tobool28, label %if.end30, label %if.then29

if.then29:                                        ; preds = %for.body23
  br label %for.inc42

if.end30:                                         ; preds = %for.body23
  %53 = load i32, i32* %i, align 4
  store i32 %53, i32* %col, align 4
  br label %for.cond31

for.cond31:                                       ; preds = %for.inc39, %if.end30
  %54 = load i32, i32* %col, align 4
  %55 = load i32, i32* %n.addr, align 4
  %cmp32 = icmp slt i32 %54, %55
  br i1 %cmp32, label %for.body33, label %for.end41

for.body33:                                       ; preds = %for.cond31
  %56 = load double**, double*** %m.addr, align 4
  %57 = load i32, i32* %i, align 4
  %arrayidx34 = getelementptr inbounds double*, double** %56, i32 %57
  %58 = load double*, double** %arrayidx34, align 4
  %59 = load i32, i32* %col, align 4
  %arrayidx35 = getelementptr inbounds double, double* %58, i32 %59
  %60 = load double, double* %arrayidx35, align 8
  %61 = load double, double* %r, align 8
  %mul = fmul double %60, %61
  %62 = load double**, double*** %m.addr, align 4
  %63 = load i32, i32* %row20, align 4
  %arrayidx36 = getelementptr inbounds double*, double** %62, i32 %63
  %64 = load double*, double** %arrayidx36, align 4
  %65 = load i32, i32* %col, align 4
  %arrayidx37 = getelementptr inbounds double, double* %64, i32 %65
  %66 = load double, double* %arrayidx37, align 8
  %sub38 = fsub double %66, %mul
  store double %sub38, double* %arrayidx37, align 8
  br label %for.inc39

for.inc39:                                        ; preds = %for.body33
  %67 = load i32, i32* %col, align 4
  %inc40 = add nsw i32 %67, 1
  store i32 %inc40, i32* %col, align 4
  br label %for.cond31

for.end41:                                        ; preds = %for.cond31
  br label %for.inc42

for.inc42:                                        ; preds = %for.end41, %if.then29
  %68 = load i32, i32* %row20, align 4
  %inc43 = add nsw i32 %68, 1
  store i32 %inc43, i32* %row20, align 4
  br label %for.cond21

for.end44:                                        ; preds = %for.cond21
  br label %for.inc45

for.inc45:                                        ; preds = %for.end44
  %69 = load i32, i32* %i, align 4
  %inc46 = add nsw i32 %69, 1
  store i32 %inc46, i32* %i, align 4
  br label %for.cond

for.end47:                                        ; preds = %for.cond
  %70 = load i32, i32* %sign, align 4
  store i32 %70, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end47, %if.then18
  %71 = load i32, i32* %retval, align 4
  ret i32 %71
}

; Function Attrs: noinline nounwind optnone
define hidden double @det(double* %in, i32 %n) #0 {
entry:
  %retval = alloca double, align 8
  %in.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %i = alloca i32, align 4
  %sign = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  %p = alloca double, align 8
  %i3 = alloca i32, align 4
  store double* %in, double** %in.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = call i8* @llvm.stacksave()
  store i8* %1, i8** %saved_stack, align 4
  %vla = alloca double*, i32 %0, align 16
  store i32 %0, i32* %__vla_expr0, align 4
  %2 = load double*, double** %in.addr, align 4
  %arrayidx = getelementptr inbounds double*, double** %vla, i32 0
  store double* %2, double** %arrayidx, align 16
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %5, 1
  %arrayidx1 = getelementptr inbounds double*, double** %vla, i32 %sub
  %6 = load double*, double** %arrayidx1, align 4
  %7 = load i32, i32* %n.addr, align 4
  %add.ptr = getelementptr inbounds double, double* %6, i32 %7
  %8 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds double*, double** %vla, i32 %8
  store double* %add.ptr, double** %arrayidx2, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load i32, i32* %n.addr, align 4
  call void @showmat(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), double** %vla, i32 %10)
  %11 = load i32, i32* %n.addr, align 4
  %call = call i32 @trianglize(double** %vla, i32 %11)
  store i32 %call, i32* %sign, align 4
  %12 = load i32, i32* %sign, align 4
  %tobool = icmp ne i32 %12, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.end
  store double 0.000000e+00, double* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %for.end
  %13 = load i32, i32* %n.addr, align 4
  call void @showmat(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0), double** %vla, i32 %13)
  store double 1.000000e+00, double* %p, align 8
  store i32 0, i32* %i3, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc9, %if.end
  %14 = load i32, i32* %i3, align 4
  %15 = load i32, i32* %n.addr, align 4
  %cmp5 = icmp slt i32 %14, %15
  br i1 %cmp5, label %for.body6, label %for.end11

for.body6:                                        ; preds = %for.cond4
  %16 = load i32, i32* %i3, align 4
  %arrayidx7 = getelementptr inbounds double*, double** %vla, i32 %16
  %17 = load double*, double** %arrayidx7, align 4
  %18 = load i32, i32* %i3, align 4
  %arrayidx8 = getelementptr inbounds double, double* %17, i32 %18
  %19 = load double, double* %arrayidx8, align 8
  %20 = load double, double* %p, align 8
  %mul = fmul double %20, %19
  store double %mul, double* %p, align 8
  br label %for.inc9

for.inc9:                                         ; preds = %for.body6
  %21 = load i32, i32* %i3, align 4
  %inc10 = add nsw i32 %21, 1
  store i32 %inc10, i32* %i3, align 4
  br label %for.cond4

for.end11:                                        ; preds = %for.cond4
  %22 = load double, double* %p, align 8
  %23 = load i32, i32* %sign, align 4
  %conv = sitofp i32 %23 to double
  %mul12 = fmul double %22, %conv
  store double %mul12, double* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %for.end11, %if.then
  %24 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %24)
  %25 = load double, double* %retval, align 8
  ret double %25
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %x = alloca [324 x double], align 16
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @srand(i32 0)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 324
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call = call i32 @rand()
  %rem = srem i32 %call, 18
  %conv = sitofp i32 %rem to double
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [324 x double], [324 x double]* %x, i32 0, i32 %1
  store double %conv, double* %arrayidx, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %i, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %arraydecay = getelementptr inbounds [324 x double], [324 x double]* %x, i32 0, i32 0
  %call1 = call double @det(double* %arraydecay, i32 18)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i32 0, i32 0), double %call1)
  ret i32 0
}

declare void @srand(i32 %0) #1

declare i32 @rand() #1

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double %0) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }
attributes #3 = { nounwind readnone speculatable willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %3, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %5, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %9, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 @trianglize(double** %vla, i32 %11)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %sign, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %12, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %i3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp5 = icmp slt i32 %14, %15
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %i3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %i3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %i3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc10 = add nsw i32 %21, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %sign, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for det()

; entering Souper's runOnFunction() for main()

; ModuleID = './Determinant_and_permanent.c.bc'
source_filename = "./Determinant_and_permanent.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [5 x i8] c"%s:\0A\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"%12.4f\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"Matrix\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"Upper triangle\00", align 1
@.str.4 = private unnamed_addr constant [11 x i8] c"det: %19f\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @showmat(i8* %s, double** %m, i32 %n) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %m.addr = alloca double**, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 4
  store double** %m, double*** %m.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i8* %0)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc7, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end9

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %3, %4
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %5 = load double**, double*** %m.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double*, double** %5, i32 %6
  %7 = load double*, double** %arrayidx, align 4
  %8 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds double, double* %7, i32 %8
  %9 = load double, double* %arrayidx4, align 8
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), double %9)
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %10 = load i32, i32* %j, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %call6 = call i32 @putchar(i32 10)
  br label %for.inc7

for.inc7:                                         ; preds = %for.end
  %11 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %11, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end9:                                         ; preds = %for.cond
  ret void
}

declare i32 @printf(i8* %0, ...) #1

declare i32 @putchar(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @trianglize(double** %m, i32 %n) #0 {
entry:
  %__x.addr.i48 = alloca double, align 8
  %__x.addr.i = alloca double, align 8
  %retval = alloca i32, align 4
  %m.addr = alloca double**, align 4
  %n.addr = alloca i32, align 4
  %sign = alloca i32, align 4
  %i = alloca i32, align 4
  %max = alloca i32, align 4
  %row = alloca i32, align 4
  %tmp = alloca double*, align 4
  %row20 = alloca i32, align 4
  %r = alloca double, align 8
  %col = alloca i32, align 4
  store double** %m, double*** %m.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 1, i32* %sign, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc45, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end47

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %max, align 4
  %2 = load i32, i32* %i, align 4
  store i32 %2, i32* %row, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %row, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp2 = icmp slt i32 %3, %4
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %5 = load double**, double*** %m.addr, align 4
  %6 = load i32, i32* %row, align 4
  %arrayidx = getelementptr inbounds double*, double** %5, i32 %6
  %7 = load double*, double** %arrayidx, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds double, double* %7, i32 %8
  %9 = load double, double* %arrayidx4, align 8
  store double %9, double* %__x.addr.i, align 8
  %10 = load double, double* %__x.addr.i, align 8
  %11 = call double @llvm.fabs.f64(double %10) #2
  %12 = load double**, double*** %m.addr, align 4
  %13 = load i32, i32* %max, align 4
  %arrayidx5 = getelementptr inbounds double*, double** %12, i32 %13
  %14 = load double*, double** %arrayidx5, align 4
  %15 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds double, double* %14, i32 %15
  %16 = load double, double* %arrayidx6, align 8
  store double %16, double* %__x.addr.i48, align 8
  %17 = load double, double* %__x.addr.i48, align 8
  %18 = call double @llvm.fabs.f64(double %17) #2
  %cmp8 = fcmp ogt double %11, %18
  br i1 %cmp8, label %if.then, label %if.end

if.then:                                          ; preds = %for.body3
  %19 = load i32, i32* %row, align 4
  store i32 %19, i32* %max, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body3
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %20 = load i32, i32* %row, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %row, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %21 = load i32, i32* %max, align 4
  %tobool = icmp ne i32 %21, 0
  br i1 %tobool, label %if.then9, label %if.end14

if.then9:                                         ; preds = %for.end
  %22 = load i32, i32* %sign, align 4
  %sub = sub nsw i32 0, %22
  store i32 %sub, i32* %sign, align 4
  %23 = load double**, double*** %m.addr, align 4
  %24 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds double*, double** %23, i32 %24
  %25 = load double*, double** %arrayidx10, align 4
  store double* %25, double** %tmp, align 4
  %26 = load double**, double*** %m.addr, align 4
  %27 = load i32, i32* %max, align 4
  %arrayidx11 = getelementptr inbounds double*, double** %26, i32 %27
  %28 = load double*, double** %arrayidx11, align 4
  %29 = load double**, double*** %m.addr, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds double*, double** %29, i32 %30
  store double* %28, double** %arrayidx12, align 4
  %31 = load double*, double** %tmp, align 4
  %32 = load double**, double*** %m.addr, align 4
  %33 = load i32, i32* %max, align 4
  %arrayidx13 = getelementptr inbounds double*, double** %32, i32 %33
  store double* %31, double** %arrayidx13, align 4
  br label %if.end14

if.end14:                                         ; preds = %if.then9, %for.end
  %34 = load double**, double*** %m.addr, align 4
  %35 = load i32, i32* %i, align 4
  %arrayidx15 = getelementptr inbounds double*, double** %34, i32 %35
  %36 = load double*, double** %arrayidx15, align 4
  %37 = load i32, i32* %i, align 4
  %arrayidx16 = getelementptr inbounds double, double* %36, i32 %37
  %38 = load double, double* %arrayidx16, align 8
  %tobool17 = fcmp une double %38, 0.000000e+00
  br i1 %tobool17, label %if.end19, label %if.then18

if.then18:                                        ; preds = %if.end14
  store i32 0, i32* %retval, align 4
  br label %return

if.end19:                                         ; preds = %if.end14
  %39 = load i32, i32* %i, align 4
  %add = add nsw i32 %39, 1
  store i32 %add, i32* %row20, align 4
  br label %for.cond21

for.cond21:                                       ; preds = %for.inc42, %if.end19
  %40 = load i32, i32* %row20, align 4
  %41 = load i32, i32* %n.addr, align 4
  %cmp22 = icmp slt i32 %40, %41
  br i1 %cmp22, label %for.body23, label %for.end44

for.body23:                                       ; preds = %for.cond21
  %42 = load double**, double*** %m.addr, align 4
  %43 = load i32, i32* %row20, align 4
  %arrayidx24 = getelementptr inbounds double*, double** %42, i32 %43
  %44 = load double*, double** %arrayidx24, align 4
  %45 = load i32, i32* %i, align 4
  %arrayidx25 = getelementptr inbounds double, double* %44, i32 %45
  %46 = load double, double* %arrayidx25, align 8
  %47 = load double**, double*** %m.addr, align 4
  %48 = load i32, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds double*, double** %47, i32 %48
  %49 = load double*, double** %arrayidx26, align 4
  %50 = load i32, i32* %i, align 4
  %arrayidx27 = getelementptr inbounds double, double* %49, i32 %50
  %51 = load double, double* %arrayidx27, align 8
  %div = fdiv double %46, %51
  store double %div, double* %r, align 8
  %52 = load double, double* %r, align 8
  %tobool28 = fcmp une double %52, 0.000000e+00
  br i1 %tobool28, label %if.end30, label %if.then29

if.then29:                                        ; preds = %for.body23
  br label %for.inc42

if.end30:                                         ; preds = %for.body23
  %53 = load i32, i32* %i, align 4
  store i32 %53, i32* %col, align 4
  br label %for.cond31

for.cond31:                                       ; preds = %for.inc39, %if.end30
  %54 = load i32, i32* %col, align 4
  %55 = load i32, i32* %n.addr, align 4
  %cmp32 = icmp slt i32 %54, %55
  br i1 %cmp32, label %for.body33, label %for.end41

for.body33:                                       ; preds = %for.cond31
  %56 = load double**, double*** %m.addr, align 4
  %57 = load i32, i32* %i, align 4
  %arrayidx34 = getelementptr inbounds double*, double** %56, i32 %57
  %58 = load double*, double** %arrayidx34, align 4
  %59 = load i32, i32* %col, align 4
  %arrayidx35 = getelementptr inbounds double, double* %58, i32 %59
  %60 = load double, double* %arrayidx35, align 8
  %61 = load double, double* %r, align 8
  %mul = fmul double %60, %61
  %62 = load double**, double*** %m.addr, align 4
  %63 = load i32, i32* %row20, align 4
  %arrayidx36 = getelementptr inbounds double*, double** %62, i32 %63
  %64 = load double*, double** %arrayidx36, align 4
  %65 = load i32, i32* %col, align 4
  %arrayidx37 = getelementptr inbounds double, double* %64, i32 %65
  %66 = load double, double* %arrayidx37, align 8
  %sub38 = fsub double %66, %mul
  store double %sub38, double* %arrayidx37, align 8
  br label %for.inc39

for.inc39:                                        ; preds = %for.body33
  %67 = load i32, i32* %col, align 4
  %inc40 = add nsw i32 %67, 1
  store i32 %inc40, i32* %col, align 4
  br label %for.cond31

for.end41:                                        ; preds = %for.cond31
  br label %for.inc42

for.inc42:                                        ; preds = %for.end41, %if.then29
  %68 = load i32, i32* %row20, align 4
  %inc43 = add nsw i32 %68, 1
  store i32 %inc43, i32* %row20, align 4
  br label %for.cond21

for.end44:                                        ; preds = %for.cond21
  br label %for.inc45

for.inc45:                                        ; preds = %for.end44
  %69 = load i32, i32* %i, align 4
  %inc46 = add nsw i32 %69, 1
  store i32 %inc46, i32* %i, align 4
  br label %for.cond

for.end47:                                        ; preds = %for.cond
  %70 = load i32, i32* %sign, align 4
  store i32 %70, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end47, %if.then18
  %71 = load i32, i32* %retval, align 4
  ret i32 %71
}

; Function Attrs: noinline nounwind optnone
define hidden double @det(double* %in, i32 %n) #0 {
entry:
  %retval = alloca double, align 8
  %in.addr = alloca double*, align 4
  %n.addr = alloca i32, align 4
  %saved_stack = alloca i8*, align 4
  %__vla_expr0 = alloca i32, align 4
  %i = alloca i32, align 4
  %sign = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  %p = alloca double, align 8
  %i3 = alloca i32, align 4
  store double* %in, double** %in.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %1 = call i8* @llvm.stacksave()
  store i8* %1, i8** %saved_stack, align 4
  %vla = alloca double*, i32 %0, align 16
  store i32 %0, i32* %__vla_expr0, align 4
  %2 = load double*, double** %in.addr, align 4
  %arrayidx = getelementptr inbounds double*, double** %vla, i32 0
  store double* %2, double** %arrayidx, align 16
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %5, 1
  %arrayidx1 = getelementptr inbounds double*, double** %vla, i32 %sub
  %6 = load double*, double** %arrayidx1, align 4
  %7 = load i32, i32* %n.addr, align 4
  %add.ptr = getelementptr inbounds double, double* %6, i32 %7
  %8 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds double*, double** %vla, i32 %8
  store double* %add.ptr, double** %arrayidx2, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load i32, i32* %n.addr, align 4
  call void @showmat(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), double** %vla, i32 %10)
  %11 = load i32, i32* %n.addr, align 4
  %call = call i32 @trianglize(double** %vla, i32 %11)
  store i32 %call, i32* %sign, align 4
  %12 = load i32, i32* %sign, align 4
  %tobool = icmp ne i32 %12, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.end
  store double 0.000000e+00, double* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %for.end
  %13 = load i32, i32* %n.addr, align 4
  call void @showmat(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0), double** %vla, i32 %13)
  store double 1.000000e+00, double* %p, align 8
  store i32 0, i32* %i3, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc9, %if.end
  %14 = load i32, i32* %i3, align 4
  %15 = load i32, i32* %n.addr, align 4
  %cmp5 = icmp slt i32 %14, %15
  br i1 %cmp5, label %for.body6, label %for.end11

for.body6:                                        ; preds = %for.cond4
  %16 = load i32, i32* %i3, align 4
  %arrayidx7 = getelementptr inbounds double*, double** %vla, i32 %16
  %17 = load double*, double** %arrayidx7, align 4
  %18 = load i32, i32* %i3, align 4
  %arrayidx8 = getelementptr inbounds double, double* %17, i32 %18
  %19 = load double, double* %arrayidx8, align 8
  %20 = load double, double* %p, align 8
  %mul = fmul double %20, %19
  store double %mul, double* %p, align 8
  br label %for.inc9

for.inc9:                                         ; preds = %for.body6
  %21 = load i32, i32* %i3, align 4
  %inc10 = add nsw i32 %21, 1
  store i32 %inc10, i32* %i3, align 4
  br label %for.cond4

for.end11:                                        ; preds = %for.cond4
  %22 = load double, double* %p, align 8
  %23 = load i32, i32* %sign, align 4
  %conv = sitofp i32 %23 to double
  %mul12 = fmul double %22, %conv
  store double %mul12, double* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %for.end11, %if.then
  %24 = load i8*, i8** %saved_stack, align 4
  call void @llvm.stackrestore(i8* %24)
  %25 = load double, double* %retval, align 8
  ret double %25
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8* %0) #2

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %x = alloca [324 x double], align 16
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @srand(i32 0)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 324
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call = call i32 @rand()
  %rem = srem i32 %call, 18
  %conv = sitofp i32 %rem to double
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [324 x double], [324 x double]* %x, i32 0, i32 %1
  store double %conv, double* %arrayidx, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %i, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %arraydecay = getelementptr inbounds [324 x double], [324 x double]* %x, i32 0, i32 0
  %call1 = call double @det(double* %arraydecay, i32 18)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i32 0, i32 0), double %call1)
  ret i32 0
}

declare void @srand(i32 %0) #1

declare i32 @rand() #1

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double %0) #3

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }
attributes #3 = { nounwind readnone speculatable willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, 324
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 324:i32
infer %1

; *****
; For LLVM instruction:
;  %call = call i32 @rand()
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem = srem i32 %call, 18
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem %0, 18:i32
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %2, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 324:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem %0, 18:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 13
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
