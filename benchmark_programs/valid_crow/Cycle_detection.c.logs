
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for brent()

; ModuleID = './Cycle_detection.c.bc'
source_filename = "./Cycle_detection.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.Pair = type { i32, i32 }

@.str = private unnamed_addr constant [3 x i8] c"[3\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c", %d\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"]\0A\00", align 1
@.str.3 = private unnamed_addr constant [45 x i8] c"Cycle length = %d\0AStart index = %d\0ACycle = [\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @brent(%struct.Pair* noalias sret align 4 %agg.result, i32 (i32)* %f, i32 %x0) #0 {
entry:
  %f.addr = alloca i32 (i32)*, align 4
  %x0.addr = alloca i32, align 4
  %power = alloca i32, align 4
  %lam = alloca i32, align 4
  %tortoise = alloca i32, align 4
  %hare = alloca i32, align 4
  %mu = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 (i32)* %f, i32 (i32)** %f.addr, align 4
  store i32 %x0, i32* %x0.addr, align 4
  store i32 1, i32* %power, align 4
  store i32 1, i32* %lam, align 4
  %0 = load i32, i32* %x0.addr, align 4
  store i32 %0, i32* %tortoise, align 4
  %1 = load i32 (i32)*, i32 (i32)** %f.addr, align 4
  %2 = load i32, i32* %x0.addr, align 4
  %call = call i32 %1(i32 %2)
  store i32 %call, i32* %hare, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %3 = load i32, i32* %tortoise, align 4
  %4 = load i32, i32* %hare, align 4
  %cmp = icmp ne i32 %3, %4
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i32, i32* %power, align 4
  %6 = load i32, i32* %lam, align 4
  %cmp1 = icmp eq i32 %5, %6
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %7 = load i32, i32* %hare, align 4
  store i32 %7, i32* %tortoise, align 4
  %8 = load i32, i32* %power, align 4
  %mul = mul nsw i32 %8, 2
  store i32 %mul, i32* %power, align 4
  store i32 0, i32* %lam, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %9 = load i32 (i32)*, i32 (i32)** %f.addr, align 4
  %10 = load i32, i32* %hare, align 4
  %call2 = call i32 %9(i32 %10)
  store i32 %call2, i32* %hare, align 4
  %11 = load i32, i32* %lam, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %lam, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %12 = load i32, i32* %x0.addr, align 4
  store i32 %12, i32* %hare, align 4
  store i32 0, i32* %i, align 4
  br label %while.cond3

while.cond3:                                      ; preds = %while.body5, %while.end
  %13 = load i32, i32* %i, align 4
  %14 = load i32, i32* %lam, align 4
  %cmp4 = icmp slt i32 %13, %14
  br i1 %cmp4, label %while.body5, label %while.end8

while.body5:                                      ; preds = %while.cond3
  %15 = load i32 (i32)*, i32 (i32)** %f.addr, align 4
  %16 = load i32, i32* %hare, align 4
  %call6 = call i32 %15(i32 %16)
  store i32 %call6, i32* %hare, align 4
  %17 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %17, 1
  store i32 %inc7, i32* %i, align 4
  br label %while.cond3

while.end8:                                       ; preds = %while.cond3
  %18 = load i32, i32* %x0.addr, align 4
  store i32 %18, i32* %tortoise, align 4
  store i32 0, i32* %mu, align 4
  br label %while.cond9

while.cond9:                                      ; preds = %while.body11, %while.end8
  %19 = load i32, i32* %tortoise, align 4
  %20 = load i32, i32* %hare, align 4
  %cmp10 = icmp ne i32 %19, %20
  br i1 %cmp10, label %while.body11, label %while.end15

while.body11:                                     ; preds = %while.cond9
  %21 = load i32 (i32)*, i32 (i32)** %f.addr, align 4
  %22 = load i32, i32* %tortoise, align 4
  %call12 = call i32 %21(i32 %22)
  store i32 %call12, i32* %tortoise, align 4
  %23 = load i32 (i32)*, i32 (i32)** %f.addr, align 4
  %24 = load i32, i32* %hare, align 4
  %call13 = call i32 %23(i32 %24)
  store i32 %call13, i32* %hare, align 4
  %25 = load i32, i32* %mu, align 4
  %inc14 = add nsw i32 %25, 1
  store i32 %inc14, i32* %mu, align 4
  br label %while.cond9

while.end15:                                      ; preds = %while.cond9
  %26 = load i32, i32* %lam, align 4
  %a = getelementptr inbounds %struct.Pair, %struct.Pair* %agg.result, i32 0, i32 0
  store i32 %26, i32* %a, align 4
  %27 = load i32, i32* %mu, align 4
  %b = getelementptr inbounds %struct.Pair, %struct.Pair* %agg.result, i32 0, i32 1
  store i32 %27, i32* %b, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @lambda(i32 %x) #0 {
entry:
  %x.addr = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  %0 = load i32, i32* %x.addr, align 4
  %1 = load i32, i32* %x.addr, align 4
  %mul = mul nsw i32 %0, %1
  %add = add nsw i32 %mul, 1
  %rem = srem i32 %add, 255
  ret i32 %rem
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %x0 = alloca i32, align 4
  %x = alloca i32, align 4
  %i = alloca i32, align 4
  %result = alloca %struct.Pair, align 4
  %tmp = alloca %struct.Pair, align 4
  store i32 0, i32* %retval, align 4
  store i32 3, i32* %x0, align 4
  store i32 3, i32* %x, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0))
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp sle i32 %0, 40
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %x, align 4
  %call1 = call i32 @lambda(i32 %1)
  store i32 %call1, i32* %x, align 4
  %2 = load i32, i32* %x, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0), i32 %2)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %3 = load i32, i32* %i, align 4
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0))
  %4 = load i32, i32* %x0, align 4
  call void @brent(%struct.Pair* sret align 4 %tmp, i32 (i32)* @lambda, i32 %4)
  %5 = bitcast %struct.Pair* %result to i8*
  %6 = bitcast %struct.Pair* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %5, i8* align 4 %6, i32 8, i1 false)
  %a = getelementptr inbounds %struct.Pair, %struct.Pair* %result, i32 0, i32 0
  %7 = load i32, i32* %a, align 4
  %b = getelementptr inbounds %struct.Pair, %struct.Pair* %result, i32 0, i32 1
  %8 = load i32, i32* %b, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.3, i32 0, i32 0), i32 %7, i32 %8)
  store i32 3, i32* %x0, align 4
  %9 = load i32, i32* %x0, align 4
  store i32 %9, i32* %x, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc10, %for.end
  %10 = load i32, i32* %i, align 4
  %b6 = getelementptr inbounds %struct.Pair, %struct.Pair* %result, i32 0, i32 1
  %11 = load i32, i32* %b6, align 4
  %cmp7 = icmp sle i32 %10, %11
  br i1 %cmp7, label %for.body8, label %for.end12

for.body8:                                        ; preds = %for.cond5
  %12 = load i32, i32* %x, align 4
  %call9 = call i32 @lambda(i32 %12)
  store i32 %call9, i32* %x, align 4
  br label %for.inc10

for.inc10:                                        ; preds = %for.body8
  %13 = load i32, i32* %i, align 4
  %inc11 = add nsw i32 %13, 1
  store i32 %inc11, i32* %i, align 4
  br label %for.cond5

for.end12:                                        ; preds = %for.cond5
  store i32 1, i32* %i, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc21, %for.end12
  %14 = load i32, i32* %i, align 4
  %a14 = getelementptr inbounds %struct.Pair, %struct.Pair* %result, i32 0, i32 0
  %15 = load i32, i32* %a14, align 4
  %cmp15 = icmp sle i32 %14, %15
  br i1 %cmp15, label %for.body16, label %for.end23

for.body16:                                       ; preds = %for.cond13
  %16 = load i32, i32* %i, align 4
  %cmp17 = icmp sgt i32 %16, 1
  br i1 %cmp17, label %if.then, label %if.end

if.then:                                          ; preds = %for.body16
  %call18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body16
  %17 = load i32, i32* %x, align 4
  %call19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0), i32 %17)
  %18 = load i32, i32* %x, align 4
  %call20 = call i32 @lambda(i32 %18)
  store i32 %call20, i32* %x, align 4
  br label %for.inc21

for.inc21:                                        ; preds = %if.end
  %19 = load i32, i32* %i, align 4
  %inc22 = add nsw i32 %19, 1
  store i32 %inc22, i32* %i, align 4
  br label %for.cond13

for.end23:                                        ; preds = %for.cond13
  %call24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0))
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %x0.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %x0.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 %1(i32 %2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %tortoise, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %hare, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ne i32 %3, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %power, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %lam, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = icmp eq i32 %5, %6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %hare, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %power, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %8, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %hare, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call2 = call i32 %9(i32 %10)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %lam, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %11, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %x0.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %lam, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp4 = icmp slt i32 %13, %14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %hare, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call6 = call i32 %15(i32 %16)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc7 = add nsw i32 %17, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %x0.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %tortoise, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %hare, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp10 = icmp ne i32 %19, %20
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %tortoise, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call12 = call i32 %21(i32 %22)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %hare, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call13 = call i32 %23(i32 %24)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %mu, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc14 = add nsw i32 %25, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %lam, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %mu, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = ne %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mulnsw 2:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for brent()

; entering Souper's runOnFunction() for lambda()

; ModuleID = './Cycle_detection.c.bc'
source_filename = "./Cycle_detection.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.Pair = type { i32, i32 }

@.str = private unnamed_addr constant [3 x i8] c"[3\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c", %d\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"]\0A\00", align 1
@.str.3 = private unnamed_addr constant [45 x i8] c"Cycle length = %d\0AStart index = %d\0ACycle = [\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @brent(%struct.Pair* noalias sret align 4 %agg.result, i32 (i32)* %f, i32 %x0) #0 {
entry:
  %f.addr = alloca i32 (i32)*, align 4
  %x0.addr = alloca i32, align 4
  %power = alloca i32, align 4
  %lam = alloca i32, align 4
  %tortoise = alloca i32, align 4
  %hare = alloca i32, align 4
  %mu = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 (i32)* %f, i32 (i32)** %f.addr, align 4
  store i32 %x0, i32* %x0.addr, align 4
  store i32 1, i32* %power, align 4
  store i32 1, i32* %lam, align 4
  %0 = load i32, i32* %x0.addr, align 4
  store i32 %0, i32* %tortoise, align 4
  %1 = load i32 (i32)*, i32 (i32)** %f.addr, align 4
  %2 = load i32, i32* %x0.addr, align 4
  %call = call i32 %1(i32 %2)
  store i32 %call, i32* %hare, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %3 = load i32, i32* %tortoise, align 4
  %4 = load i32, i32* %hare, align 4
  %cmp = icmp ne i32 %3, %4
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i32, i32* %power, align 4
  %6 = load i32, i32* %lam, align 4
  %cmp1 = icmp eq i32 %5, %6
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %7 = load i32, i32* %hare, align 4
  store i32 %7, i32* %tortoise, align 4
  %8 = load i32, i32* %power, align 4
  %mul = mul nsw i32 %8, 2
  store i32 %mul, i32* %power, align 4
  store i32 0, i32* %lam, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %9 = load i32 (i32)*, i32 (i32)** %f.addr, align 4
  %10 = load i32, i32* %hare, align 4
  %call2 = call i32 %9(i32 %10)
  store i32 %call2, i32* %hare, align 4
  %11 = load i32, i32* %lam, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %lam, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %12 = load i32, i32* %x0.addr, align 4
  store i32 %12, i32* %hare, align 4
  store i32 0, i32* %i, align 4
  br label %while.cond3

while.cond3:                                      ; preds = %while.body5, %while.end
  %13 = load i32, i32* %i, align 4
  %14 = load i32, i32* %lam, align 4
  %cmp4 = icmp slt i32 %13, %14
  br i1 %cmp4, label %while.body5, label %while.end8

while.body5:                                      ; preds = %while.cond3
  %15 = load i32 (i32)*, i32 (i32)** %f.addr, align 4
  %16 = load i32, i32* %hare, align 4
  %call6 = call i32 %15(i32 %16)
  store i32 %call6, i32* %hare, align 4
  %17 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %17, 1
  store i32 %inc7, i32* %i, align 4
  br label %while.cond3

while.end8:                                       ; preds = %while.cond3
  %18 = load i32, i32* %x0.addr, align 4
  store i32 %18, i32* %tortoise, align 4
  store i32 0, i32* %mu, align 4
  br label %while.cond9

while.cond9:                                      ; preds = %while.body11, %while.end8
  %19 = load i32, i32* %tortoise, align 4
  %20 = load i32, i32* %hare, align 4
  %cmp10 = icmp ne i32 %19, %20
  br i1 %cmp10, label %while.body11, label %while.end15

while.body11:                                     ; preds = %while.cond9
  %21 = load i32 (i32)*, i32 (i32)** %f.addr, align 4
  %22 = load i32, i32* %tortoise, align 4
  %call12 = call i32 %21(i32 %22)
  store i32 %call12, i32* %tortoise, align 4
  %23 = load i32 (i32)*, i32 (i32)** %f.addr, align 4
  %24 = load i32, i32* %hare, align 4
  %call13 = call i32 %23(i32 %24)
  store i32 %call13, i32* %hare, align 4
  %25 = load i32, i32* %mu, align 4
  %inc14 = add nsw i32 %25, 1
  store i32 %inc14, i32* %mu, align 4
  br label %while.cond9

while.end15:                                      ; preds = %while.cond9
  %26 = load i32, i32* %lam, align 4
  %a = getelementptr inbounds %struct.Pair, %struct.Pair* %agg.result, i32 0, i32 0
  store i32 %26, i32* %a, align 4
  %27 = load i32, i32* %mu, align 4
  %b = getelementptr inbounds %struct.Pair, %struct.Pair* %agg.result, i32 0, i32 1
  store i32 %27, i32* %b, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @lambda(i32 %x) #0 {
entry:
  %x.addr = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  %0 = load i32, i32* %x.addr, align 4
  %1 = load i32, i32* %x.addr, align 4
  %mul = mul nsw i32 %0, %1
  %add = add nsw i32 %mul, 1
  %rem = srem i32 %add, 255
  ret i32 %rem
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %x0 = alloca i32, align 4
  %x = alloca i32, align 4
  %i = alloca i32, align 4
  %result = alloca %struct.Pair, align 4
  %tmp = alloca %struct.Pair, align 4
  store i32 0, i32* %retval, align 4
  store i32 3, i32* %x0, align 4
  store i32 3, i32* %x, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0))
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp sle i32 %0, 40
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %x, align 4
  %call1 = call i32 @lambda(i32 %1)
  store i32 %call1, i32* %x, align 4
  %2 = load i32, i32* %x, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0), i32 %2)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %3 = load i32, i32* %i, align 4
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0))
  %4 = load i32, i32* %x0, align 4
  call void @brent(%struct.Pair* sret align 4 %tmp, i32 (i32)* @lambda, i32 %4)
  %5 = bitcast %struct.Pair* %result to i8*
  %6 = bitcast %struct.Pair* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %5, i8* align 4 %6, i32 8, i1 false)
  %a = getelementptr inbounds %struct.Pair, %struct.Pair* %result, i32 0, i32 0
  %7 = load i32, i32* %a, align 4
  %b = getelementptr inbounds %struct.Pair, %struct.Pair* %result, i32 0, i32 1
  %8 = load i32, i32* %b, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.3, i32 0, i32 0), i32 %7, i32 %8)
  store i32 3, i32* %x0, align 4
  %9 = load i32, i32* %x0, align 4
  store i32 %9, i32* %x, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc10, %for.end
  %10 = load i32, i32* %i, align 4
  %b6 = getelementptr inbounds %struct.Pair, %struct.Pair* %result, i32 0, i32 1
  %11 = load i32, i32* %b6, align 4
  %cmp7 = icmp sle i32 %10, %11
  br i1 %cmp7, label %for.body8, label %for.end12

for.body8:                                        ; preds = %for.cond5
  %12 = load i32, i32* %x, align 4
  %call9 = call i32 @lambda(i32 %12)
  store i32 %call9, i32* %x, align 4
  br label %for.inc10

for.inc10:                                        ; preds = %for.body8
  %13 = load i32, i32* %i, align 4
  %inc11 = add nsw i32 %13, 1
  store i32 %inc11, i32* %i, align 4
  br label %for.cond5

for.end12:                                        ; preds = %for.cond5
  store i32 1, i32* %i, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc21, %for.end12
  %14 = load i32, i32* %i, align 4
  %a14 = getelementptr inbounds %struct.Pair, %struct.Pair* %result, i32 0, i32 0
  %15 = load i32, i32* %a14, align 4
  %cmp15 = icmp sle i32 %14, %15
  br i1 %cmp15, label %for.body16, label %for.end23

for.body16:                                       ; preds = %for.cond13
  %16 = load i32, i32* %i, align 4
  %cmp17 = icmp sgt i32 %16, 1
  br i1 %cmp17, label %if.then, label %if.end

if.then:                                          ; preds = %for.body16
  %call18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body16
  %17 = load i32, i32* %x, align 4
  %call19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0), i32 %17)
  %18 = load i32, i32* %x, align 4
  %call20 = call i32 @lambda(i32 %18)
  store i32 %call20, i32* %x, align 4
  br label %for.inc21

for.inc21:                                        ; preds = %if.end
  %19 = load i32, i32* %i, align 4
  %inc22 = add nsw i32 %19, 1
  store i32 %inc22, i32* %i, align 4
  br label %for.cond13

for.end23:                                        ; preds = %for.cond13
  %call24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0))
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %x.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %x.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %add = add nsw i32 %mul, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
%3:i32 = addnsw 1:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %rem = srem i32 %add, 255
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
%3:i32 = addnsw 1:i32, %2
%4:i32 = srem %3, 255:i32
infer %4
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
%3:i32 = addnsw 1:i32, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw %0, %1
%3:i32 = addnsw 1:i32, %2
%4:i32 = srem %3, 255:i32
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
ConstantSynthesis: solver returns error on second query

--------------------------------
guess 1

%0:i32 = var

Cost = 0
verification query failed!
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for lambda()

; entering Souper's runOnFunction() for main()

; ModuleID = './Cycle_detection.c.bc'
source_filename = "./Cycle_detection.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.Pair = type { i32, i32 }

@.str = private unnamed_addr constant [3 x i8] c"[3\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c", %d\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"]\0A\00", align 1
@.str.3 = private unnamed_addr constant [45 x i8] c"Cycle length = %d\0AStart index = %d\0ACycle = [\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @brent(%struct.Pair* noalias sret align 4 %agg.result, i32 (i32)* %f, i32 %x0) #0 {
entry:
  %f.addr = alloca i32 (i32)*, align 4
  %x0.addr = alloca i32, align 4
  %power = alloca i32, align 4
  %lam = alloca i32, align 4
  %tortoise = alloca i32, align 4
  %hare = alloca i32, align 4
  %mu = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 (i32)* %f, i32 (i32)** %f.addr, align 4
  store i32 %x0, i32* %x0.addr, align 4
  store i32 1, i32* %power, align 4
  store i32 1, i32* %lam, align 4
  %0 = load i32, i32* %x0.addr, align 4
  store i32 %0, i32* %tortoise, align 4
  %1 = load i32 (i32)*, i32 (i32)** %f.addr, align 4
  %2 = load i32, i32* %x0.addr, align 4
  %call = call i32 %1(i32 %2)
  store i32 %call, i32* %hare, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %3 = load i32, i32* %tortoise, align 4
  %4 = load i32, i32* %hare, align 4
  %cmp = icmp ne i32 %3, %4
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i32, i32* %power, align 4
  %6 = load i32, i32* %lam, align 4
  %cmp1 = icmp eq i32 %5, %6
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %7 = load i32, i32* %hare, align 4
  store i32 %7, i32* %tortoise, align 4
  %8 = load i32, i32* %power, align 4
  %mul = mul nsw i32 %8, 2
  store i32 %mul, i32* %power, align 4
  store i32 0, i32* %lam, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %9 = load i32 (i32)*, i32 (i32)** %f.addr, align 4
  %10 = load i32, i32* %hare, align 4
  %call2 = call i32 %9(i32 %10)
  store i32 %call2, i32* %hare, align 4
  %11 = load i32, i32* %lam, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %lam, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %12 = load i32, i32* %x0.addr, align 4
  store i32 %12, i32* %hare, align 4
  store i32 0, i32* %i, align 4
  br label %while.cond3

while.cond3:                                      ; preds = %while.body5, %while.end
  %13 = load i32, i32* %i, align 4
  %14 = load i32, i32* %lam, align 4
  %cmp4 = icmp slt i32 %13, %14
  br i1 %cmp4, label %while.body5, label %while.end8

while.body5:                                      ; preds = %while.cond3
  %15 = load i32 (i32)*, i32 (i32)** %f.addr, align 4
  %16 = load i32, i32* %hare, align 4
  %call6 = call i32 %15(i32 %16)
  store i32 %call6, i32* %hare, align 4
  %17 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %17, 1
  store i32 %inc7, i32* %i, align 4
  br label %while.cond3

while.end8:                                       ; preds = %while.cond3
  %18 = load i32, i32* %x0.addr, align 4
  store i32 %18, i32* %tortoise, align 4
  store i32 0, i32* %mu, align 4
  br label %while.cond9

while.cond9:                                      ; preds = %while.body11, %while.end8
  %19 = load i32, i32* %tortoise, align 4
  %20 = load i32, i32* %hare, align 4
  %cmp10 = icmp ne i32 %19, %20
  br i1 %cmp10, label %while.body11, label %while.end15

while.body11:                                     ; preds = %while.cond9
  %21 = load i32 (i32)*, i32 (i32)** %f.addr, align 4
  %22 = load i32, i32* %tortoise, align 4
  %call12 = call i32 %21(i32 %22)
  store i32 %call12, i32* %tortoise, align 4
  %23 = load i32 (i32)*, i32 (i32)** %f.addr, align 4
  %24 = load i32, i32* %hare, align 4
  %call13 = call i32 %23(i32 %24)
  store i32 %call13, i32* %hare, align 4
  %25 = load i32, i32* %mu, align 4
  %inc14 = add nsw i32 %25, 1
  store i32 %inc14, i32* %mu, align 4
  br label %while.cond9

while.end15:                                      ; preds = %while.cond9
  %26 = load i32, i32* %lam, align 4
  %a = getelementptr inbounds %struct.Pair, %struct.Pair* %agg.result, i32 0, i32 0
  store i32 %26, i32* %a, align 4
  %27 = load i32, i32* %mu, align 4
  %b = getelementptr inbounds %struct.Pair, %struct.Pair* %agg.result, i32 0, i32 1
  store i32 %27, i32* %b, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @lambda(i32 %x) #0 {
entry:
  %x.addr = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  %0 = load i32, i32* %x.addr, align 4
  %1 = load i32, i32* %x.addr, align 4
  %mul = mul nsw i32 %0, %1
  %add = add nsw i32 %mul, 1
  %rem = srem i32 %add, 255
  ret i32 %rem
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %x0 = alloca i32, align 4
  %x = alloca i32, align 4
  %i = alloca i32, align 4
  %result = alloca %struct.Pair, align 4
  %tmp = alloca %struct.Pair, align 4
  store i32 0, i32* %retval, align 4
  store i32 3, i32* %x0, align 4
  store i32 3, i32* %x, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0))
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp sle i32 %0, 40
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %x, align 4
  %call1 = call i32 @lambda(i32 %1)
  store i32 %call1, i32* %x, align 4
  %2 = load i32, i32* %x, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0), i32 %2)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %3 = load i32, i32* %i, align 4
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0))
  %4 = load i32, i32* %x0, align 4
  call void @brent(%struct.Pair* sret align 4 %tmp, i32 (i32)* @lambda, i32 %4)
  %5 = bitcast %struct.Pair* %result to i8*
  %6 = bitcast %struct.Pair* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %5, i8* align 4 %6, i32 8, i1 false)
  %a = getelementptr inbounds %struct.Pair, %struct.Pair* %result, i32 0, i32 0
  %7 = load i32, i32* %a, align 4
  %b = getelementptr inbounds %struct.Pair, %struct.Pair* %result, i32 0, i32 1
  %8 = load i32, i32* %b, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.3, i32 0, i32 0), i32 %7, i32 %8)
  store i32 3, i32* %x0, align 4
  %9 = load i32, i32* %x0, align 4
  store i32 %9, i32* %x, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc10, %for.end
  %10 = load i32, i32* %i, align 4
  %b6 = getelementptr inbounds %struct.Pair, %struct.Pair* %result, i32 0, i32 1
  %11 = load i32, i32* %b6, align 4
  %cmp7 = icmp sle i32 %10, %11
  br i1 %cmp7, label %for.body8, label %for.end12

for.body8:                                        ; preds = %for.cond5
  %12 = load i32, i32* %x, align 4
  %call9 = call i32 @lambda(i32 %12)
  store i32 %call9, i32* %x, align 4
  br label %for.inc10

for.inc10:                                        ; preds = %for.body8
  %13 = load i32, i32* %i, align 4
  %inc11 = add nsw i32 %13, 1
  store i32 %inc11, i32* %i, align 4
  br label %for.cond5

for.end12:                                        ; preds = %for.cond5
  store i32 1, i32* %i, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc21, %for.end12
  %14 = load i32, i32* %i, align 4
  %a14 = getelementptr inbounds %struct.Pair, %struct.Pair* %result, i32 0, i32 0
  %15 = load i32, i32* %a14, align 4
  %cmp15 = icmp sle i32 %14, %15
  br i1 %cmp15, label %for.body16, label %for.end23

for.body16:                                       ; preds = %for.cond13
  %16 = load i32, i32* %i, align 4
  %cmp17 = icmp sgt i32 %16, 1
  br i1 %cmp17, label %if.then, label %if.end

if.then:                                          ; preds = %for.body16
  %call18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body16
  %17 = load i32, i32* %x, align 4
  %call19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0), i32 %17)
  %18 = load i32, i32* %x, align 4
  %call20 = call i32 @lambda(i32 %18)
  store i32 %call20, i32* %x, align 4
  br label %for.inc21

for.inc21:                                        ; preds = %if.end
  %19 = load i32, i32* %i, align 4
  %inc22 = add nsw i32 %19, 1
  store i32 %inc22, i32* %i, align 4
  br label %for.cond13

for.end23:                                        ; preds = %for.cond13
  %call24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0))
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sle i32 %0, 40
; Looking for a replacement for:
%0:i32 = var
%1:i1 = sle %0, 40:i32
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %x, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call1 = call i32 @lambda(i32 %1)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %x, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %3, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %x0, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %b, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %x0, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %b6, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp7 = icmp sle i32 %10, %11
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %x, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call9 = call i32 @lambda(i32 %12)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc11 = add nsw i32 %13, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %a14, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp15 = icmp sle i32 %14, %15
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp17 = icmp sgt i32 %16, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %x, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %x, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call20 = call i32 @lambda(i32 %18)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc22 = add nsw i32 %19, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = sle %0, 40:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
