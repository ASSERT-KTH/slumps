
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for irand()

; ModuleID = './Evolutionary_algorithm.c.bc'
source_filename = "./Evolutionary_algorithm.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@target = hidden constant [29 x i8] c"METHINKS IT IS LIKE A WEASEL\00", align 16
@tbl = hidden constant [28 x i8] c"ABCDEFGHIJKLMNOPQRSTUVWXYZ \00", align 16
@.str = private unnamed_addr constant [23 x i8] c"iter %d, score %d: %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @irand(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %r = alloca i32, align 4
  %rand_max = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %rem = srem i32 2147483647, %0
  %sub = sub nsw i32 2147483647, %rem
  store i32 %sub, i32* %rand_max, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %call = call i32 @rand()
  store i32 %call, i32* %r, align 4
  %1 = load i32, i32* %rand_max, align 4
  %cmp = icmp sge i32 %call, %1
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %2 = load i32, i32* %r, align 4
  %3 = load i32, i32* %rand_max, align 4
  %4 = load i32, i32* %n.addr, align 4
  %div = sdiv i32 %3, %4
  %div1 = sdiv i32 %2, %div
  ret i32 %div1
}

declare i32 @rand() #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @unfitness(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %sum = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  store i32 0, i32* %sum, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i8*, i8** %a.addr, align 4
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %0, i32 %1
  %2 = load i8, i8* %arrayidx, align 1
  %tobool = icmp ne i8 %2, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %a.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds i8, i8* %3, i32 %4
  %5 = load i8, i8* %arrayidx1, align 1
  %conv = sext i8 %5 to i32
  %6 = load i8*, i8** %b.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i8, i8* %6, i32 %7
  %8 = load i8, i8* %arrayidx2, align 1
  %conv3 = sext i8 %8 to i32
  %cmp = icmp ne i32 %conv, %conv3
  %conv4 = zext i1 %cmp to i32
  %9 = load i32, i32* %sum, align 4
  %add = add nsw i32 %9, %conv4
  store i32 %add, i32* %sum, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load i32, i32* %i, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %11 = load i32, i32* %sum, align 4
  ret i32 %11
}

; Function Attrs: noinline nounwind optnone
define hidden void @mutate(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i8*, i8** %a.addr, align 4
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %0, i32 %1
  %2 = load i8, i8* %arrayidx, align 1
  %tobool = icmp ne i8 %2, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call = call i32 @irand(i32 15)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %3 = load i8*, i8** %a.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i8, i8* %3, i32 %4
  %5 = load i8, i8* %arrayidx2, align 1
  %conv = sext i8 %5 to i32
  br label %cond.end

cond.false:                                       ; preds = %for.body
  %call3 = call i32 @irand(i32 27)
  %arrayidx4 = getelementptr inbounds [28 x i8], [28 x i8]* @tbl, i32 0, i32 %call3
  %6 = load i8, i8* %arrayidx4, align 1
  %conv5 = sext i8 %6 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv, %cond.true ], [ %conv5, %cond.false ]
  %conv6 = trunc i32 %cond to i8
  %7 = load i8*, i8** %b.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds i8, i8* %7, i32 %8
  store i8 %conv6, i8* %arrayidx7, align 1
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load i8*, i8** %b.addr, align 4
  %11 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds i8, i8* %10, i32 %11
  store i8 0, i8* %arrayidx8, align 1
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %best_i = alloca i32, align 4
  %unfit = alloca i32, align 4
  %best = alloca i32, align 4
  %iters = alloca i32, align 4
  %specimen = alloca [30 x [29 x i8]], align 16
  store i32 0, i32* %retval, align 4
  store i32 0, i32* %iters, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [29 x i8], [29 x i8]* @target, i32 0, i32 %0
  %1 = load i8, i8* %arrayidx, align 1
  %tobool = icmp ne i8 %1, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call = call i32 @irand(i32 27)
  %arrayidx1 = getelementptr inbounds [28 x i8], [28 x i8]* @tbl, i32 0, i32 %call
  %2 = load i8, i8* %arrayidx1, align 1
  %arrayidx2 = getelementptr inbounds [30 x [29 x i8]], [30 x [29 x i8]]* %specimen, i32 0, i32 0
  %3 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds [29 x i8], [29 x i8]* %arrayidx2, i32 0, i32 %3
  store i8 %2, i8* %arrayidx3, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %arrayidx4 = getelementptr inbounds [30 x [29 x i8]], [30 x [29 x i8]]* %specimen, i32 0, i32 0
  %5 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds [29 x i8], [29 x i8]* %arrayidx4, i32 0, i32 %5
  store i8 0, i8* %arrayidx5, align 1
  br label %do.body

do.body:                                          ; preds = %do.cond, %for.end
  store i32 1, i32* %i, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc11, %do.body
  %6 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %6, 30
  br i1 %cmp, label %for.body7, label %for.end13

for.body7:                                        ; preds = %for.cond6
  %arrayidx8 = getelementptr inbounds [30 x [29 x i8]], [30 x [29 x i8]]* %specimen, i32 0, i32 0
  %arraydecay = getelementptr inbounds [29 x i8], [29 x i8]* %arrayidx8, i32 0, i32 0
  %7 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds [30 x [29 x i8]], [30 x [29 x i8]]* %specimen, i32 0, i32 %7
  %arraydecay10 = getelementptr inbounds [29 x i8], [29 x i8]* %arrayidx9, i32 0, i32 0
  call void @mutate(i8* %arraydecay, i8* %arraydecay10)
  br label %for.inc11

for.inc11:                                        ; preds = %for.body7
  %8 = load i32, i32* %i, align 4
  %inc12 = add nsw i32 %8, 1
  store i32 %inc12, i32* %i, align 4
  br label %for.cond6

for.end13:                                        ; preds = %for.cond6
  store i32 0, i32* %i, align 4
  store i32 0, i32* %best_i, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc22, %for.end13
  %9 = load i32, i32* %i, align 4
  %cmp15 = icmp slt i32 %9, 30
  br i1 %cmp15, label %for.body16, label %for.end24

for.body16:                                       ; preds = %for.cond14
  %10 = load i32, i32* %i, align 4
  %arrayidx17 = getelementptr inbounds [30 x [29 x i8]], [30 x [29 x i8]]* %specimen, i32 0, i32 %10
  %arraydecay18 = getelementptr inbounds [29 x i8], [29 x i8]* %arrayidx17, i32 0, i32 0
  %call19 = call i32 @unfitness(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @target, i32 0, i32 0), i8* %arraydecay18)
  store i32 %call19, i32* %unfit, align 4
  %11 = load i32, i32* %unfit, align 4
  %12 = load i32, i32* %best, align 4
  %cmp20 = icmp slt i32 %11, %12
  br i1 %cmp20, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body16
  %13 = load i32, i32* %i, align 4
  %tobool21 = icmp ne i32 %13, 0
  br i1 %tobool21, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %for.body16
  %14 = load i32, i32* %unfit, align 4
  store i32 %14, i32* %best, align 4
  %15 = load i32, i32* %i, align 4
  store i32 %15, i32* %best_i, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  br label %for.inc22

for.inc22:                                        ; preds = %if.end
  %16 = load i32, i32* %i, align 4
  %inc23 = add nsw i32 %16, 1
  store i32 %inc23, i32* %i, align 4
  br label %for.cond14

for.end24:                                        ; preds = %for.cond14
  %17 = load i32, i32* %best_i, align 4
  %tobool25 = icmp ne i32 %17, 0
  br i1 %tobool25, label %if.then26, label %if.end32

if.then26:                                        ; preds = %for.end24
  %arrayidx27 = getelementptr inbounds [30 x [29 x i8]], [30 x [29 x i8]]* %specimen, i32 0, i32 0
  %arraydecay28 = getelementptr inbounds [29 x i8], [29 x i8]* %arrayidx27, i32 0, i32 0
  %18 = load i32, i32* %best_i, align 4
  %arrayidx29 = getelementptr inbounds [30 x [29 x i8]], [30 x [29 x i8]]* %specimen, i32 0, i32 %18
  %arraydecay30 = getelementptr inbounds [29 x i8], [29 x i8]* %arrayidx29, i32 0, i32 0
  %call31 = call i8* @strcpy(i8* %arraydecay28, i8* %arraydecay30)
  br label %if.end32

if.end32:                                         ; preds = %if.then26, %for.end24
  %19 = load i32, i32* %iters, align 4
  %inc33 = add nsw i32 %19, 1
  store i32 %inc33, i32* %iters, align 4
  %20 = load i32, i32* %best, align 4
  %arrayidx34 = getelementptr inbounds [30 x [29 x i8]], [30 x [29 x i8]]* %specimen, i32 0, i32 0
  %arraydecay35 = getelementptr inbounds [29 x i8], [29 x i8]* %arrayidx34, i32 0, i32 0
  %call36 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i32 0, i32 0), i32 %19, i32 %20, i8* %arraydecay35)
  br label %do.cond

do.cond:                                          ; preds = %if.end32
  %21 = load i32, i32* %best, align 4
  %tobool37 = icmp ne i32 %21, 0
  br i1 %tobool37, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  ret i32 0
}

declare i8* @strcpy(i8* %0, i8* %1) #1

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem = srem i32 2147483647, %0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem 2147483647:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 2147483647, %rem
; Looking for a replacement for:
%0:i32 = var
%1:i32 = srem 2147483647:i32, %0
%2:i32 = subnsw 2147483647:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %call = call i32 @rand()
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %rand_max, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sge i32 %call, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %r, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %rand_max, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div = sdiv i32 %3, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sdiv %0, %1
infer %2

; *****
; For LLVM instruction:
;  %div1 = sdiv i32 %2, %div
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = sdiv %1, %2
%4:i32 = sdiv %0, %3
infer %4
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem 2147483647:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 2147483647
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 972836
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = srem 2147483647:i32, %0
%2:i32 = subnsw 2147483647:i32, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147461015
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = srem 2147483647:i32, %0

Cost = 5
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = sdiv %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = var
%3:i32 = sdiv %1, %2
%4:i32 = sdiv %0, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 340852736
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = var
%2:i32 = sdiv %0, %1

Cost = 5
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for irand()

; entering Souper's runOnFunction() for unfitness()

; ModuleID = './Evolutionary_algorithm.c.bc'
source_filename = "./Evolutionary_algorithm.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@target = hidden constant [29 x i8] c"METHINKS IT IS LIKE A WEASEL\00", align 16
@tbl = hidden constant [28 x i8] c"ABCDEFGHIJKLMNOPQRSTUVWXYZ \00", align 16
@.str = private unnamed_addr constant [23 x i8] c"iter %d, score %d: %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @irand(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %r = alloca i32, align 4
  %rand_max = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %rem = srem i32 2147483647, %0
  %sub = sub nsw i32 2147483647, %rem
  store i32 %sub, i32* %rand_max, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %call = call i32 @rand()
  store i32 %call, i32* %r, align 4
  %1 = load i32, i32* %rand_max, align 4
  %cmp = icmp sge i32 %call, %1
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %2 = load i32, i32* %r, align 4
  %3 = load i32, i32* %rand_max, align 4
  %4 = load i32, i32* %n.addr, align 4
  %div = sdiv i32 %3, %4
  %div1 = sdiv i32 %2, %div
  ret i32 %div1
}

declare i32 @rand() #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @unfitness(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %sum = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  store i32 0, i32* %sum, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i8*, i8** %a.addr, align 4
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %0, i32 %1
  %2 = load i8, i8* %arrayidx, align 1
  %tobool = icmp ne i8 %2, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %a.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds i8, i8* %3, i32 %4
  %5 = load i8, i8* %arrayidx1, align 1
  %conv = sext i8 %5 to i32
  %6 = load i8*, i8** %b.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i8, i8* %6, i32 %7
  %8 = load i8, i8* %arrayidx2, align 1
  %conv3 = sext i8 %8 to i32
  %cmp = icmp ne i32 %conv, %conv3
  %conv4 = zext i1 %cmp to i32
  %9 = load i32, i32* %sum, align 4
  %add = add nsw i32 %9, %conv4
  store i32 %add, i32* %sum, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load i32, i32* %i, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %11 = load i32, i32* %sum, align 4
  ret i32 %11
}

; Function Attrs: noinline nounwind optnone
define hidden void @mutate(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i8*, i8** %a.addr, align 4
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %0, i32 %1
  %2 = load i8, i8* %arrayidx, align 1
  %tobool = icmp ne i8 %2, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call = call i32 @irand(i32 15)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %3 = load i8*, i8** %a.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i8, i8* %3, i32 %4
  %5 = load i8, i8* %arrayidx2, align 1
  %conv = sext i8 %5 to i32
  br label %cond.end

cond.false:                                       ; preds = %for.body
  %call3 = call i32 @irand(i32 27)
  %arrayidx4 = getelementptr inbounds [28 x i8], [28 x i8]* @tbl, i32 0, i32 %call3
  %6 = load i8, i8* %arrayidx4, align 1
  %conv5 = sext i8 %6 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv, %cond.true ], [ %conv5, %cond.false ]
  %conv6 = trunc i32 %cond to i8
  %7 = load i8*, i8** %b.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds i8, i8* %7, i32 %8
  store i8 %conv6, i8* %arrayidx7, align 1
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load i8*, i8** %b.addr, align 4
  %11 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds i8, i8* %10, i32 %11
  store i8 0, i8* %arrayidx8, align 1
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %best_i = alloca i32, align 4
  %unfit = alloca i32, align 4
  %best = alloca i32, align 4
  %iters = alloca i32, align 4
  %specimen = alloca [30 x [29 x i8]], align 16
  store i32 0, i32* %retval, align 4
  store i32 0, i32* %iters, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [29 x i8], [29 x i8]* @target, i32 0, i32 %0
  %1 = load i8, i8* %arrayidx, align 1
  %tobool = icmp ne i8 %1, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call = call i32 @irand(i32 27)
  %arrayidx1 = getelementptr inbounds [28 x i8], [28 x i8]* @tbl, i32 0, i32 %call
  %2 = load i8, i8* %arrayidx1, align 1
  %arrayidx2 = getelementptr inbounds [30 x [29 x i8]], [30 x [29 x i8]]* %specimen, i32 0, i32 0
  %3 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds [29 x i8], [29 x i8]* %arrayidx2, i32 0, i32 %3
  store i8 %2, i8* %arrayidx3, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %arrayidx4 = getelementptr inbounds [30 x [29 x i8]], [30 x [29 x i8]]* %specimen, i32 0, i32 0
  %5 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds [29 x i8], [29 x i8]* %arrayidx4, i32 0, i32 %5
  store i8 0, i8* %arrayidx5, align 1
  br label %do.body

do.body:                                          ; preds = %do.cond, %for.end
  store i32 1, i32* %i, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc11, %do.body
  %6 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %6, 30
  br i1 %cmp, label %for.body7, label %for.end13

for.body7:                                        ; preds = %for.cond6
  %arrayidx8 = getelementptr inbounds [30 x [29 x i8]], [30 x [29 x i8]]* %specimen, i32 0, i32 0
  %arraydecay = getelementptr inbounds [29 x i8], [29 x i8]* %arrayidx8, i32 0, i32 0
  %7 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds [30 x [29 x i8]], [30 x [29 x i8]]* %specimen, i32 0, i32 %7
  %arraydecay10 = getelementptr inbounds [29 x i8], [29 x i8]* %arrayidx9, i32 0, i32 0
  call void @mutate(i8* %arraydecay, i8* %arraydecay10)
  br label %for.inc11

for.inc11:                                        ; preds = %for.body7
  %8 = load i32, i32* %i, align 4
  %inc12 = add nsw i32 %8, 1
  store i32 %inc12, i32* %i, align 4
  br label %for.cond6

for.end13:                                        ; preds = %for.cond6
  store i32 0, i32* %i, align 4
  store i32 0, i32* %best_i, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc22, %for.end13
  %9 = load i32, i32* %i, align 4
  %cmp15 = icmp slt i32 %9, 30
  br i1 %cmp15, label %for.body16, label %for.end24

for.body16:                                       ; preds = %for.cond14
  %10 = load i32, i32* %i, align 4
  %arrayidx17 = getelementptr inbounds [30 x [29 x i8]], [30 x [29 x i8]]* %specimen, i32 0, i32 %10
  %arraydecay18 = getelementptr inbounds [29 x i8], [29 x i8]* %arrayidx17, i32 0, i32 0
  %call19 = call i32 @unfitness(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @target, i32 0, i32 0), i8* %arraydecay18)
  store i32 %call19, i32* %unfit, align 4
  %11 = load i32, i32* %unfit, align 4
  %12 = load i32, i32* %best, align 4
  %cmp20 = icmp slt i32 %11, %12
  br i1 %cmp20, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body16
  %13 = load i32, i32* %i, align 4
  %tobool21 = icmp ne i32 %13, 0
  br i1 %tobool21, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %for.body16
  %14 = load i32, i32* %unfit, align 4
  store i32 %14, i32* %best, align 4
  %15 = load i32, i32* %i, align 4
  store i32 %15, i32* %best_i, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  br label %for.inc22

for.inc22:                                        ; preds = %if.end
  %16 = load i32, i32* %i, align 4
  %inc23 = add nsw i32 %16, 1
  store i32 %inc23, i32* %i, align 4
  br label %for.cond14

for.end24:                                        ; preds = %for.cond14
  %17 = load i32, i32* %best_i, align 4
  %tobool25 = icmp ne i32 %17, 0
  br i1 %tobool25, label %if.then26, label %if.end32

if.then26:                                        ; preds = %for.end24
  %arrayidx27 = getelementptr inbounds [30 x [29 x i8]], [30 x [29 x i8]]* %specimen, i32 0, i32 0
  %arraydecay28 = getelementptr inbounds [29 x i8], [29 x i8]* %arrayidx27, i32 0, i32 0
  %18 = load i32, i32* %best_i, align 4
  %arrayidx29 = getelementptr inbounds [30 x [29 x i8]], [30 x [29 x i8]]* %specimen, i32 0, i32 %18
  %arraydecay30 = getelementptr inbounds [29 x i8], [29 x i8]* %arrayidx29, i32 0, i32 0
  %call31 = call i8* @strcpy(i8* %arraydecay28, i8* %arraydecay30)
  br label %if.end32

if.end32:                                         ; preds = %if.then26, %for.end24
  %19 = load i32, i32* %iters, align 4
  %inc33 = add nsw i32 %19, 1
  store i32 %inc33, i32* %iters, align 4
  %20 = load i32, i32* %best, align 4
  %arrayidx34 = getelementptr inbounds [30 x [29 x i8]], [30 x [29 x i8]]* %specimen, i32 0, i32 0
  %arraydecay35 = getelementptr inbounds [29 x i8], [29 x i8]* %arrayidx34, i32 0, i32 0
  %call36 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i32 0, i32 0), i32 %19, i32 %20, i8* %arraydecay35)
  br label %do.cond

do.cond:                                          ; preds = %if.end32
  %21 = load i32, i32* %best, align 4
  %tobool37 = icmp ne i32 %21, 0
  br i1 %tobool37, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  ret i32 0
}

declare i8* @strcpy(i8* %0, i8* %1) #1

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i8, i8* %arrayidx, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i8 %2, 0
; Looking for a replacement for:
%0:i8 = var
%1:i1 = ne 0:i8, %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i8, i8* %arrayidx1, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %5 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i8, i8* %arrayidx2, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv3 = sext i8 %8 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %cmp = icmp ne i32 %conv, %conv3
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i1 = ne %1, %3
infer %4

; *****
; For LLVM instruction:
;  %conv4 = zext i1 %cmp to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i1 = ne %1, %3
%5:i32 = zext %4
infer %5

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %sum, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %9, %conv4
; Looking for a replacement for:
%0:i32 = var
%1:i8 = var
%2:i32 = sext %1
%3:i8 = var
%4:i32 = sext %3
%5:i1 = ne %2, %4
%6:i32 = zext %5
%7:i32 = addnsw %0, %6
infer %7

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %10, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %sum, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i1 = ne 0:i8, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i1 = ne %1, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 6 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i1 = ne %1, %3
%5:i32 = zext %4
infer %5


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 8 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i8 = var
%2:i32 = sext %1
%3:i8 = var
%4:i32 = sext %3
%5:i1 = ne %2, %4
%6:i32 = zext %5
%7:i32 = addnsw %0, %6
infer %7


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i8 = var
%1:i32 = sext %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i8 = var
%1:i32 = sext %0
%2:i8 = var
%3:i32 = sext %2
%4:i1 = ne %1, %3
%5:i32 = zext %4

Cost = 4
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for unfitness()

; entering Souper's runOnFunction() for mutate()

; ModuleID = './Evolutionary_algorithm.c.bc'
source_filename = "./Evolutionary_algorithm.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@target = hidden constant [29 x i8] c"METHINKS IT IS LIKE A WEASEL\00", align 16
@tbl = hidden constant [28 x i8] c"ABCDEFGHIJKLMNOPQRSTUVWXYZ \00", align 16
@.str = private unnamed_addr constant [23 x i8] c"iter %d, score %d: %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @irand(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %r = alloca i32, align 4
  %rand_max = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %rem = srem i32 2147483647, %0
  %sub = sub nsw i32 2147483647, %rem
  store i32 %sub, i32* %rand_max, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %call = call i32 @rand()
  store i32 %call, i32* %r, align 4
  %1 = load i32, i32* %rand_max, align 4
  %cmp = icmp sge i32 %call, %1
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %2 = load i32, i32* %r, align 4
  %3 = load i32, i32* %rand_max, align 4
  %4 = load i32, i32* %n.addr, align 4
  %div = sdiv i32 %3, %4
  %div1 = sdiv i32 %2, %div
  ret i32 %div1
}

declare i32 @rand() #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @unfitness(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %sum = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  store i32 0, i32* %sum, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i8*, i8** %a.addr, align 4
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %0, i32 %1
  %2 = load i8, i8* %arrayidx, align 1
  %tobool = icmp ne i8 %2, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %a.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds i8, i8* %3, i32 %4
  %5 = load i8, i8* %arrayidx1, align 1
  %conv = sext i8 %5 to i32
  %6 = load i8*, i8** %b.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i8, i8* %6, i32 %7
  %8 = load i8, i8* %arrayidx2, align 1
  %conv3 = sext i8 %8 to i32
  %cmp = icmp ne i32 %conv, %conv3
  %conv4 = zext i1 %cmp to i32
  %9 = load i32, i32* %sum, align 4
  %add = add nsw i32 %9, %conv4
  store i32 %add, i32* %sum, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load i32, i32* %i, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %11 = load i32, i32* %sum, align 4
  ret i32 %11
}

; Function Attrs: noinline nounwind optnone
define hidden void @mutate(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i8*, i8** %a.addr, align 4
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %0, i32 %1
  %2 = load i8, i8* %arrayidx, align 1
  %tobool = icmp ne i8 %2, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call = call i32 @irand(i32 15)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %3 = load i8*, i8** %a.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i8, i8* %3, i32 %4
  %5 = load i8, i8* %arrayidx2, align 1
  %conv = sext i8 %5 to i32
  br label %cond.end

cond.false:                                       ; preds = %for.body
  %call3 = call i32 @irand(i32 27)
  %arrayidx4 = getelementptr inbounds [28 x i8], [28 x i8]* @tbl, i32 0, i32 %call3
  %6 = load i8, i8* %arrayidx4, align 1
  %conv5 = sext i8 %6 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv, %cond.true ], [ %conv5, %cond.false ]
  %conv6 = trunc i32 %cond to i8
  %7 = load i8*, i8** %b.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds i8, i8* %7, i32 %8
  store i8 %conv6, i8* %arrayidx7, align 1
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load i8*, i8** %b.addr, align 4
  %11 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds i8, i8* %10, i32 %11
  store i8 0, i8* %arrayidx8, align 1
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %best_i = alloca i32, align 4
  %unfit = alloca i32, align 4
  %best = alloca i32, align 4
  %iters = alloca i32, align 4
  %specimen = alloca [30 x [29 x i8]], align 16
  store i32 0, i32* %retval, align 4
  store i32 0, i32* %iters, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [29 x i8], [29 x i8]* @target, i32 0, i32 %0
  %1 = load i8, i8* %arrayidx, align 1
  %tobool = icmp ne i8 %1, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call = call i32 @irand(i32 27)
  %arrayidx1 = getelementptr inbounds [28 x i8], [28 x i8]* @tbl, i32 0, i32 %call
  %2 = load i8, i8* %arrayidx1, align 1
  %arrayidx2 = getelementptr inbounds [30 x [29 x i8]], [30 x [29 x i8]]* %specimen, i32 0, i32 0
  %3 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds [29 x i8], [29 x i8]* %arrayidx2, i32 0, i32 %3
  store i8 %2, i8* %arrayidx3, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %arrayidx4 = getelementptr inbounds [30 x [29 x i8]], [30 x [29 x i8]]* %specimen, i32 0, i32 0
  %5 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds [29 x i8], [29 x i8]* %arrayidx4, i32 0, i32 %5
  store i8 0, i8* %arrayidx5, align 1
  br label %do.body

do.body:                                          ; preds = %do.cond, %for.end
  store i32 1, i32* %i, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc11, %do.body
  %6 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %6, 30
  br i1 %cmp, label %for.body7, label %for.end13

for.body7:                                        ; preds = %for.cond6
  %arrayidx8 = getelementptr inbounds [30 x [29 x i8]], [30 x [29 x i8]]* %specimen, i32 0, i32 0
  %arraydecay = getelementptr inbounds [29 x i8], [29 x i8]* %arrayidx8, i32 0, i32 0
  %7 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds [30 x [29 x i8]], [30 x [29 x i8]]* %specimen, i32 0, i32 %7
  %arraydecay10 = getelementptr inbounds [29 x i8], [29 x i8]* %arrayidx9, i32 0, i32 0
  call void @mutate(i8* %arraydecay, i8* %arraydecay10)
  br label %for.inc11

for.inc11:                                        ; preds = %for.body7
  %8 = load i32, i32* %i, align 4
  %inc12 = add nsw i32 %8, 1
  store i32 %inc12, i32* %i, align 4
  br label %for.cond6

for.end13:                                        ; preds = %for.cond6
  store i32 0, i32* %i, align 4
  store i32 0, i32* %best_i, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc22, %for.end13
  %9 = load i32, i32* %i, align 4
  %cmp15 = icmp slt i32 %9, 30
  br i1 %cmp15, label %for.body16, label %for.end24

for.body16:                                       ; preds = %for.cond14
  %10 = load i32, i32* %i, align 4
  %arrayidx17 = getelementptr inbounds [30 x [29 x i8]], [30 x [29 x i8]]* %specimen, i32 0, i32 %10
  %arraydecay18 = getelementptr inbounds [29 x i8], [29 x i8]* %arrayidx17, i32 0, i32 0
  %call19 = call i32 @unfitness(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @target, i32 0, i32 0), i8* %arraydecay18)
  store i32 %call19, i32* %unfit, align 4
  %11 = load i32, i32* %unfit, align 4
  %12 = load i32, i32* %best, align 4
  %cmp20 = icmp slt i32 %11, %12
  br i1 %cmp20, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body16
  %13 = load i32, i32* %i, align 4
  %tobool21 = icmp ne i32 %13, 0
  br i1 %tobool21, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %for.body16
  %14 = load i32, i32* %unfit, align 4
  store i32 %14, i32* %best, align 4
  %15 = load i32, i32* %i, align 4
  store i32 %15, i32* %best_i, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  br label %for.inc22

for.inc22:                                        ; preds = %if.end
  %16 = load i32, i32* %i, align 4
  %inc23 = add nsw i32 %16, 1
  store i32 %inc23, i32* %i, align 4
  br label %for.cond14

for.end24:                                        ; preds = %for.cond14
  %17 = load i32, i32* %best_i, align 4
  %tobool25 = icmp ne i32 %17, 0
  br i1 %tobool25, label %if.then26, label %if.end32

if.then26:                                        ; preds = %for.end24
  %arrayidx27 = getelementptr inbounds [30 x [29 x i8]], [30 x [29 x i8]]* %specimen, i32 0, i32 0
  %arraydecay28 = getelementptr inbounds [29 x i8], [29 x i8]* %arrayidx27, i32 0, i32 0
  %18 = load i32, i32* %best_i, align 4
  %arrayidx29 = getelementptr inbounds [30 x [29 x i8]], [30 x [29 x i8]]* %specimen, i32 0, i32 %18
  %arraydecay30 = getelementptr inbounds [29 x i8], [29 x i8]* %arrayidx29, i32 0, i32 0
  %call31 = call i8* @strcpy(i8* %arraydecay28, i8* %arraydecay30)
  br label %if.end32

if.end32:                                         ; preds = %if.then26, %for.end24
  %19 = load i32, i32* %iters, align 4
  %inc33 = add nsw i32 %19, 1
  store i32 %inc33, i32* %iters, align 4
  %20 = load i32, i32* %best, align 4
  %arrayidx34 = getelementptr inbounds [30 x [29 x i8]], [30 x [29 x i8]]* %specimen, i32 0, i32 0
  %arraydecay35 = getelementptr inbounds [29 x i8], [29 x i8]* %arrayidx34, i32 0, i32 0
  %call36 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i32 0, i32 0), i32 %19, i32 %20, i8* %arraydecay35)
  br label %do.cond

do.cond:                                          ; preds = %if.end32
  %21 = load i32, i32* %best, align 4
  %tobool37 = icmp ne i32 %21, 0
  br i1 %tobool37, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  ret i32 0
}

declare i8* @strcpy(i8* %0, i8* %1) #1

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i8, i8* %arrayidx, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i8 %2, 0
; Looking for a replacement for:
%0:i8 = var
%1:i1 = ne 0:i8, %0
infer %1

; *****
; For LLVM instruction:
;  %call = call i32 @irand(i32 15)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool1 = icmp ne i32 %call, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i8, i8* %arrayidx2, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %5 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %call3 = call i32 @irand(i32 27)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i8, i8* %arrayidx4, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv5 = sext i8 %6 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %cond = phi i32 [ %conv, %cond.true ], [ %conv5, %cond.false ]
; Looking for a replacement for:
%0:i32 = var (signBits=25) (range=[-128,128))
infer %0 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %conv6 = trunc i32 %cond to i8
; Looking for a replacement for:
%0:i32 = var (signBits=25) (range=[-128,128))
%1:i8 = trunc %0
infer %1

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %9, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
infer %1 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var (signBits=25) (range=[-128,128))
infer %0 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 16
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var (signBits=25) (range=[-128,128))
%1:i8 = trunc %0
infer %1


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 16
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for mutate()

; entering Souper's runOnFunction() for main()

; ModuleID = './Evolutionary_algorithm.c.bc'
source_filename = "./Evolutionary_algorithm.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@target = hidden constant [29 x i8] c"METHINKS IT IS LIKE A WEASEL\00", align 16
@tbl = hidden constant [28 x i8] c"ABCDEFGHIJKLMNOPQRSTUVWXYZ \00", align 16
@.str = private unnamed_addr constant [23 x i8] c"iter %d, score %d: %s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @irand(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %r = alloca i32, align 4
  %rand_max = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %rem = srem i32 2147483647, %0
  %sub = sub nsw i32 2147483647, %rem
  store i32 %sub, i32* %rand_max, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %call = call i32 @rand()
  store i32 %call, i32* %r, align 4
  %1 = load i32, i32* %rand_max, align 4
  %cmp = icmp sge i32 %call, %1
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %2 = load i32, i32* %r, align 4
  %3 = load i32, i32* %rand_max, align 4
  %4 = load i32, i32* %n.addr, align 4
  %div = sdiv i32 %3, %4
  %div1 = sdiv i32 %2, %div
  ret i32 %div1
}

declare i32 @rand() #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @unfitness(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %sum = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  store i32 0, i32* %sum, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i8*, i8** %a.addr, align 4
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %0, i32 %1
  %2 = load i8, i8* %arrayidx, align 1
  %tobool = icmp ne i8 %2, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %a.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds i8, i8* %3, i32 %4
  %5 = load i8, i8* %arrayidx1, align 1
  %conv = sext i8 %5 to i32
  %6 = load i8*, i8** %b.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i8, i8* %6, i32 %7
  %8 = load i8, i8* %arrayidx2, align 1
  %conv3 = sext i8 %8 to i32
  %cmp = icmp ne i32 %conv, %conv3
  %conv4 = zext i1 %cmp to i32
  %9 = load i32, i32* %sum, align 4
  %add = add nsw i32 %9, %conv4
  store i32 %add, i32* %sum, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load i32, i32* %i, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %11 = load i32, i32* %sum, align 4
  ret i32 %11
}

; Function Attrs: noinline nounwind optnone
define hidden void @mutate(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i8*, i8** %a.addr, align 4
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %0, i32 %1
  %2 = load i8, i8* %arrayidx, align 1
  %tobool = icmp ne i8 %2, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call = call i32 @irand(i32 15)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %3 = load i8*, i8** %a.addr, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i8, i8* %3, i32 %4
  %5 = load i8, i8* %arrayidx2, align 1
  %conv = sext i8 %5 to i32
  br label %cond.end

cond.false:                                       ; preds = %for.body
  %call3 = call i32 @irand(i32 27)
  %arrayidx4 = getelementptr inbounds [28 x i8], [28 x i8]* @tbl, i32 0, i32 %call3
  %6 = load i8, i8* %arrayidx4, align 1
  %conv5 = sext i8 %6 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv, %cond.true ], [ %conv5, %cond.false ]
  %conv6 = trunc i32 %cond to i8
  %7 = load i8*, i8** %b.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds i8, i8* %7, i32 %8
  store i8 %conv6, i8* %arrayidx7, align 1
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load i8*, i8** %b.addr, align 4
  %11 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds i8, i8* %10, i32 %11
  store i8 0, i8* %arrayidx8, align 1
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %best_i = alloca i32, align 4
  %unfit = alloca i32, align 4
  %best = alloca i32, align 4
  %iters = alloca i32, align 4
  %specimen = alloca [30 x [29 x i8]], align 16
  store i32 0, i32* %retval, align 4
  store i32 0, i32* %iters, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [29 x i8], [29 x i8]* @target, i32 0, i32 %0
  %1 = load i8, i8* %arrayidx, align 1
  %tobool = icmp ne i8 %1, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call = call i32 @irand(i32 27)
  %arrayidx1 = getelementptr inbounds [28 x i8], [28 x i8]* @tbl, i32 0, i32 %call
  %2 = load i8, i8* %arrayidx1, align 1
  %arrayidx2 = getelementptr inbounds [30 x [29 x i8]], [30 x [29 x i8]]* %specimen, i32 0, i32 0
  %3 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds [29 x i8], [29 x i8]* %arrayidx2, i32 0, i32 %3
  store i8 %2, i8* %arrayidx3, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %arrayidx4 = getelementptr inbounds [30 x [29 x i8]], [30 x [29 x i8]]* %specimen, i32 0, i32 0
  %5 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds [29 x i8], [29 x i8]* %arrayidx4, i32 0, i32 %5
  store i8 0, i8* %arrayidx5, align 1
  br label %do.body

do.body:                                          ; preds = %do.cond, %for.end
  store i32 1, i32* %i, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc11, %do.body
  %6 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %6, 30
  br i1 %cmp, label %for.body7, label %for.end13

for.body7:                                        ; preds = %for.cond6
  %arrayidx8 = getelementptr inbounds [30 x [29 x i8]], [30 x [29 x i8]]* %specimen, i32 0, i32 0
  %arraydecay = getelementptr inbounds [29 x i8], [29 x i8]* %arrayidx8, i32 0, i32 0
  %7 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds [30 x [29 x i8]], [30 x [29 x i8]]* %specimen, i32 0, i32 %7
  %arraydecay10 = getelementptr inbounds [29 x i8], [29 x i8]* %arrayidx9, i32 0, i32 0
  call void @mutate(i8* %arraydecay, i8* %arraydecay10)
  br label %for.inc11

for.inc11:                                        ; preds = %for.body7
  %8 = load i32, i32* %i, align 4
  %inc12 = add nsw i32 %8, 1
  store i32 %inc12, i32* %i, align 4
  br label %for.cond6

for.end13:                                        ; preds = %for.cond6
  store i32 0, i32* %i, align 4
  store i32 0, i32* %best_i, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc22, %for.end13
  %9 = load i32, i32* %i, align 4
  %cmp15 = icmp slt i32 %9, 30
  br i1 %cmp15, label %for.body16, label %for.end24

for.body16:                                       ; preds = %for.cond14
  %10 = load i32, i32* %i, align 4
  %arrayidx17 = getelementptr inbounds [30 x [29 x i8]], [30 x [29 x i8]]* %specimen, i32 0, i32 %10
  %arraydecay18 = getelementptr inbounds [29 x i8], [29 x i8]* %arrayidx17, i32 0, i32 0
  %call19 = call i32 @unfitness(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @target, i32 0, i32 0), i8* %arraydecay18)
  store i32 %call19, i32* %unfit, align 4
  %11 = load i32, i32* %unfit, align 4
  %12 = load i32, i32* %best, align 4
  %cmp20 = icmp slt i32 %11, %12
  br i1 %cmp20, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body16
  %13 = load i32, i32* %i, align 4
  %tobool21 = icmp ne i32 %13, 0
  br i1 %tobool21, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %for.body16
  %14 = load i32, i32* %unfit, align 4
  store i32 %14, i32* %best, align 4
  %15 = load i32, i32* %i, align 4
  store i32 %15, i32* %best_i, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  br label %for.inc22

for.inc22:                                        ; preds = %if.end
  %16 = load i32, i32* %i, align 4
  %inc23 = add nsw i32 %16, 1
  store i32 %inc23, i32* %i, align 4
  br label %for.cond14

for.end24:                                        ; preds = %for.cond14
  %17 = load i32, i32* %best_i, align 4
  %tobool25 = icmp ne i32 %17, 0
  br i1 %tobool25, label %if.then26, label %if.end32

if.then26:                                        ; preds = %for.end24
  %arrayidx27 = getelementptr inbounds [30 x [29 x i8]], [30 x [29 x i8]]* %specimen, i32 0, i32 0
  %arraydecay28 = getelementptr inbounds [29 x i8], [29 x i8]* %arrayidx27, i32 0, i32 0
  %18 = load i32, i32* %best_i, align 4
  %arrayidx29 = getelementptr inbounds [30 x [29 x i8]], [30 x [29 x i8]]* %specimen, i32 0, i32 %18
  %arraydecay30 = getelementptr inbounds [29 x i8], [29 x i8]* %arrayidx29, i32 0, i32 0
  %call31 = call i8* @strcpy(i8* %arraydecay28, i8* %arraydecay30)
  br label %if.end32

if.end32:                                         ; preds = %if.then26, %for.end24
  %19 = load i32, i32* %iters, align 4
  %inc33 = add nsw i32 %19, 1
  store i32 %inc33, i32* %iters, align 4
  %20 = load i32, i32* %best, align 4
  %arrayidx34 = getelementptr inbounds [30 x [29 x i8]], [30 x [29 x i8]]* %specimen, i32 0, i32 0
  %arraydecay35 = getelementptr inbounds [29 x i8], [29 x i8]* %arrayidx34, i32 0, i32 0
  %call36 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i32 0, i32 0), i32 %19, i32 %20, i8* %arraydecay35)
  br label %do.cond

do.cond:                                          ; preds = %if.end32
  %21 = load i32, i32* %best, align 4
  %tobool37 = icmp ne i32 %21, 0
  br i1 %tobool37, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  ret i32 0
}

declare i8* @strcpy(i8* %0, i8* %1) #1

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i8, i8* %arrayidx, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i8 %1, 0
; Looking for a replacement for:
%0:i8 = var
%1:i1 = ne 0:i8, %0
infer %1

; *****
; For LLVM instruction:
;  %call = call i32 @irand(i32 27)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i8, i8* %arrayidx1, align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %4, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %6, 30
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 30:i32
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc12 = add nsw i32 %8, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp15 = icmp slt i32 %9, 30
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 30:i32
infer %1

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call19 = call i32 @unfitness(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @target, i32 0, i32 0), i8* %arraydecay18)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %unfit, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %best, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp20 = icmp slt i32 %11, %12
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool21 = icmp ne i32 %13, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %unfit, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc23 = add nsw i32 %16, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %best_i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool25 = icmp ne i32 %17, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %best_i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %iters, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc33 = add nsw i32 %19, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %best, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %best, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool37 = icmp ne i32 %21, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 30:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
ConstantSynthesis: solver returns error on first query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
ConstantSynthesis: solver returns error on first query
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
