
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for cmp_dbl()

; ModuleID = './Averages-Mode.c.bc'
source_filename = "./Averages-Mode.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.vcount = type { double, i32 }

@__const.main.values = private unnamed_addr constant [13 x double] [double 1.000000e+00, double 3.000000e+00, double 6.000000e+00, double 6.000000e+00, double 6.000000e+00, double 6.000000e+00, double 7.000000e+00, double 7.000000e+00, double 1.200000e+01, double 1.200000e+01, double 1.200000e+01, double 1.200000e+01, double 1.700000e+01], align 16
@.str = private unnamed_addr constant [15 x i8] c"got %d modes:\0A\00", align 1
@.str.1 = private unnamed_addr constant [25 x i8] c"\09value = %g, count = %d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @cmp_dbl(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %x = alloca double, align 8
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to double*
  %2 = load double, double* %1, align 8
  %3 = load i8*, i8** %b.addr, align 4
  %4 = bitcast i8* %3 to double*
  %5 = load double, double* %4, align 8
  %sub = fsub double %2, %5
  store double %sub, double* %x, align 8
  %6 = load double, double* %x, align 8
  %cmp = fcmp olt double %6, 0.000000e+00
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %7 = load double, double* %x, align 8
  %cmp1 = fcmp ogt double %7, 0.000000e+00
  %conv = zext i1 %cmp1 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ -1, %cond.true ], [ %conv, %cond.false ]
  ret i32 %cond
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @vc_cmp(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %b.addr, align 4
  %1 = bitcast i8* %0 to %struct.vcount*
  %c = getelementptr inbounds %struct.vcount, %struct.vcount* %1, i32 0, i32 1
  %2 = load i32, i32* %c, align 8
  %3 = load i8*, i8** %a.addr, align 4
  %4 = bitcast i8* %3 to %struct.vcount*
  %c1 = getelementptr inbounds %struct.vcount, %struct.vcount* %4, i32 0, i32 1
  %5 = load i32, i32* %c1, align 8
  %sub = sub nsw i32 %2, %5
  ret i32 %sub
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @get_mode(double* %x, i32 %len, %struct.vcount** %list) #0 {
entry:
  %x.addr = alloca double*, align 4
  %len.addr = alloca i32, align 4
  %list.addr = alloca %struct.vcount**, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %vc = alloca %struct.vcount*, align 4
  store double* %x, double** %x.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store %struct.vcount** %list, %struct.vcount*** %list.addr, align 4
  %0 = load double*, double** %x.addr, align 4
  %1 = bitcast double* %0 to i8*
  %2 = load i32, i32* %len.addr, align 4
  call void @qsort(i8* %1, i32 %2, i32 8, i32 (i8*, i8*)* @cmp_dbl)
  store i32 0, i32* %i, align 4
  store i32 1, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %len.addr, align 4
  %sub = sub nsw i32 %4, 1
  %cmp = icmp slt i32 %3, %sub
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  %6 = load double*, double** %x.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %6, i32 %7
  %8 = load double, double* %arrayidx, align 8
  %9 = load double*, double** %x.addr, align 4
  %10 = load i32, i32* %i, align 4
  %add = add nsw i32 %10, 1
  %arrayidx1 = getelementptr inbounds double, double* %9, i32 %add
  %11 = load double, double* %arrayidx1, align 8
  %cmp2 = fcmp une double %8, %11
  %conv = zext i1 %cmp2 to i32
  %12 = load i32, i32* %j, align 4
  %add3 = add nsw i32 %12, %conv
  store i32 %add3, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %13 = load i32, i32* %j, align 4
  %mul = mul i32 16, %13
  %call = call noalias i8* @malloc(i32 %mul)
  %14 = bitcast i8* %call to %struct.vcount*
  store %struct.vcount* %14, %struct.vcount** %vc, align 4
  %15 = load %struct.vcount**, %struct.vcount*** %list.addr, align 4
  store %struct.vcount* %14, %struct.vcount** %15, align 4
  %16 = load double*, double** %x.addr, align 4
  %arrayidx4 = getelementptr inbounds double, double* %16, i32 0
  %17 = load double, double* %arrayidx4, align 8
  %18 = load %struct.vcount*, %struct.vcount** %vc, align 4
  %arrayidx5 = getelementptr inbounds %struct.vcount, %struct.vcount* %18, i32 0
  %v = getelementptr inbounds %struct.vcount, %struct.vcount* %arrayidx5, i32 0, i32 0
  store double %17, double* %v, align 8
  %19 = load %struct.vcount*, %struct.vcount** %vc, align 4
  %arrayidx6 = getelementptr inbounds %struct.vcount, %struct.vcount* %19, i32 0
  %c = getelementptr inbounds %struct.vcount, %struct.vcount* %arrayidx6, i32 0, i32 1
  store i32 1, i32* %c, align 8
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc22, %for.end
  %20 = load i32, i32* %i, align 4
  %21 = load i32, i32* %len.addr, align 4
  %sub8 = sub nsw i32 %21, 1
  %cmp9 = icmp slt i32 %20, %sub8
  br i1 %cmp9, label %for.body11, label %for.end27

for.body11:                                       ; preds = %for.cond7
  %22 = load double*, double** %x.addr, align 4
  %23 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds double, double* %22, i32 %23
  %24 = load double, double* %arrayidx12, align 8
  %25 = load double*, double** %x.addr, align 4
  %26 = load i32, i32* %i, align 4
  %add13 = add nsw i32 %26, 1
  %arrayidx14 = getelementptr inbounds double, double* %25, i32 %add13
  %27 = load double, double* %arrayidx14, align 8
  %cmp15 = fcmp une double %24, %27
  br i1 %cmp15, label %if.then, label %if.end

if.then:                                          ; preds = %for.body11
  %28 = load double*, double** %x.addr, align 4
  %29 = load i32, i32* %i, align 4
  %add17 = add nsw i32 %29, 1
  %arrayidx18 = getelementptr inbounds double, double* %28, i32 %add17
  %30 = load double, double* %arrayidx18, align 8
  %31 = load %struct.vcount*, %struct.vcount** %vc, align 4
  %32 = load i32, i32* %j, align 4
  %inc19 = add nsw i32 %32, 1
  store i32 %inc19, i32* %j, align 4
  %arrayidx20 = getelementptr inbounds %struct.vcount, %struct.vcount* %31, i32 %inc19
  %v21 = getelementptr inbounds %struct.vcount, %struct.vcount* %arrayidx20, i32 0, i32 0
  store double %30, double* %v21, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body11
  br label %for.inc22

for.inc22:                                        ; preds = %if.end
  %33 = load i32, i32* %i, align 4
  %inc23 = add nsw i32 %33, 1
  store i32 %inc23, i32* %i, align 4
  %34 = load %struct.vcount*, %struct.vcount** %vc, align 4
  %35 = load i32, i32* %j, align 4
  %arrayidx24 = getelementptr inbounds %struct.vcount, %struct.vcount* %34, i32 %35
  %c25 = getelementptr inbounds %struct.vcount, %struct.vcount* %arrayidx24, i32 0, i32 1
  %36 = load i32, i32* %c25, align 8
  %inc26 = add nsw i32 %36, 1
  store i32 %inc26, i32* %c25, align 8
  br label %for.cond7

for.end27:                                        ; preds = %for.cond7
  %37 = load %struct.vcount*, %struct.vcount** %vc, align 4
  %38 = bitcast %struct.vcount* %37 to i8*
  %39 = load i32, i32* %j, align 4
  %add28 = add nsw i32 %39, 1
  call void @qsort(i8* %38, i32 %add28, i32 16, i32 (i8*, i8*)* @vc_cmp)
  store i32 0, i32* %i, align 4
  br label %for.cond29

for.cond29:                                       ; preds = %for.inc39, %for.end27
  %40 = load i32, i32* %i, align 4
  %41 = load i32, i32* %j, align 4
  %cmp30 = icmp sle i32 %40, %41
  br i1 %cmp30, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond29
  %42 = load %struct.vcount*, %struct.vcount** %vc, align 4
  %43 = load i32, i32* %i, align 4
  %arrayidx32 = getelementptr inbounds %struct.vcount, %struct.vcount* %42, i32 %43
  %c33 = getelementptr inbounds %struct.vcount, %struct.vcount* %arrayidx32, i32 0, i32 1
  %44 = load i32, i32* %c33, align 8
  %45 = load %struct.vcount*, %struct.vcount** %vc, align 4
  %arrayidx34 = getelementptr inbounds %struct.vcount, %struct.vcount* %45, i32 0
  %c35 = getelementptr inbounds %struct.vcount, %struct.vcount* %arrayidx34, i32 0, i32 1
  %46 = load i32, i32* %c35, align 8
  %cmp36 = icmp eq i32 %44, %46
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond29
  %47 = phi i1 [ false, %for.cond29 ], [ %cmp36, %land.rhs ]
  br i1 %47, label %for.body38, label %for.end41

for.body38:                                       ; preds = %land.end
  br label %for.inc39

for.inc39:                                        ; preds = %for.body38
  %48 = load i32, i32* %i, align 4
  %inc40 = add nsw i32 %48, 1
  store i32 %inc40, i32* %i, align 4
  br label %for.cond29

for.end41:                                        ; preds = %land.end
  %49 = load i32, i32* %i, align 4
  ret i32 %49
}

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #1

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %values = alloca [13 x double], align 16
  %vc = alloca %struct.vcount*, align 4
  %i = alloca i32, align 4
  %n_modes = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [13 x double]* %values to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([13 x double]* @__const.main.values to i8*), i32 104, i1 false)
  %arraydecay = getelementptr inbounds [13 x double], [13 x double]* %values, i32 0, i32 0
  %call = call i32 @get_mode(double* %arraydecay, i32 13, %struct.vcount** %vc)
  store i32 %call, i32* %n_modes, align 4
  %1 = load i32, i32* %n_modes, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i32 0, i32 0), i32 %1)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %n_modes, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load %struct.vcount*, %struct.vcount** %vc, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.vcount, %struct.vcount* %4, i32 %5
  %v = getelementptr inbounds %struct.vcount, %struct.vcount* %arrayidx, i32 0, i32 0
  %6 = load double, double* %v, align 8
  %7 = load %struct.vcount*, %struct.vcount** %vc, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds %struct.vcount, %struct.vcount* %7, i32 %8
  %c = getelementptr inbounds %struct.vcount, %struct.vcount* %arrayidx2, i32 0, i32 1
  %9 = load i32, i32* %c, align 8
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.1, i32 0, i32 0), double %6, i32 %9)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load i32, i32* %i, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %11 = load %struct.vcount*, %struct.vcount** %vc, align 4
  %12 = bitcast %struct.vcount* %11 to i8*
  call void @free(i8* %12)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare i32 @printf(i8* %0, ...) #1

declare void @free(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %cmp = fcmp olt double %6, 0.000000e+00
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp1 = fcmp ogt double %7, 0.000000e+00
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = zext i1 %cmp1 to i32
; Looking for a replacement for:
%0:i1 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %cond = phi i32 [ -1, %cond.true ], [ %conv, %cond.false ]
; Looking for a replacement for:
%0 = block 2
%1:i1 = var
%2:i32 = zext %1
%3:i32 = phi %0, 4294967295:i32, %2
infer %3
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i1 = var
%1:i32 = zext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i1 = var
%2:i32 = zext %1
%3:i32 = phi %0, 4294967295:i32, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
2 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i1 = var
%1:i32 = zext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for cmp_dbl()

; entering Souper's runOnFunction() for vc_cmp()

; ModuleID = './Averages-Mode.c.bc'
source_filename = "./Averages-Mode.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.vcount = type { double, i32 }

@__const.main.values = private unnamed_addr constant [13 x double] [double 1.000000e+00, double 3.000000e+00, double 6.000000e+00, double 6.000000e+00, double 6.000000e+00, double 6.000000e+00, double 7.000000e+00, double 7.000000e+00, double 1.200000e+01, double 1.200000e+01, double 1.200000e+01, double 1.200000e+01, double 1.700000e+01], align 16
@.str = private unnamed_addr constant [15 x i8] c"got %d modes:\0A\00", align 1
@.str.1 = private unnamed_addr constant [25 x i8] c"\09value = %g, count = %d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @cmp_dbl(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %x = alloca double, align 8
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to double*
  %2 = load double, double* %1, align 8
  %3 = load i8*, i8** %b.addr, align 4
  %4 = bitcast i8* %3 to double*
  %5 = load double, double* %4, align 8
  %sub = fsub double %2, %5
  store double %sub, double* %x, align 8
  %6 = load double, double* %x, align 8
  %cmp = fcmp olt double %6, 0.000000e+00
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %7 = load double, double* %x, align 8
  %cmp1 = fcmp ogt double %7, 0.000000e+00
  %conv = zext i1 %cmp1 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ -1, %cond.true ], [ %conv, %cond.false ]
  ret i32 %cond
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @vc_cmp(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %b.addr, align 4
  %1 = bitcast i8* %0 to %struct.vcount*
  %c = getelementptr inbounds %struct.vcount, %struct.vcount* %1, i32 0, i32 1
  %2 = load i32, i32* %c, align 8
  %3 = load i8*, i8** %a.addr, align 4
  %4 = bitcast i8* %3 to %struct.vcount*
  %c1 = getelementptr inbounds %struct.vcount, %struct.vcount* %4, i32 0, i32 1
  %5 = load i32, i32* %c1, align 8
  %sub = sub nsw i32 %2, %5
  ret i32 %sub
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @get_mode(double* %x, i32 %len, %struct.vcount** %list) #0 {
entry:
  %x.addr = alloca double*, align 4
  %len.addr = alloca i32, align 4
  %list.addr = alloca %struct.vcount**, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %vc = alloca %struct.vcount*, align 4
  store double* %x, double** %x.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store %struct.vcount** %list, %struct.vcount*** %list.addr, align 4
  %0 = load double*, double** %x.addr, align 4
  %1 = bitcast double* %0 to i8*
  %2 = load i32, i32* %len.addr, align 4
  call void @qsort(i8* %1, i32 %2, i32 8, i32 (i8*, i8*)* @cmp_dbl)
  store i32 0, i32* %i, align 4
  store i32 1, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %len.addr, align 4
  %sub = sub nsw i32 %4, 1
  %cmp = icmp slt i32 %3, %sub
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  %6 = load double*, double** %x.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %6, i32 %7
  %8 = load double, double* %arrayidx, align 8
  %9 = load double*, double** %x.addr, align 4
  %10 = load i32, i32* %i, align 4
  %add = add nsw i32 %10, 1
  %arrayidx1 = getelementptr inbounds double, double* %9, i32 %add
  %11 = load double, double* %arrayidx1, align 8
  %cmp2 = fcmp une double %8, %11
  %conv = zext i1 %cmp2 to i32
  %12 = load i32, i32* %j, align 4
  %add3 = add nsw i32 %12, %conv
  store i32 %add3, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %13 = load i32, i32* %j, align 4
  %mul = mul i32 16, %13
  %call = call noalias i8* @malloc(i32 %mul)
  %14 = bitcast i8* %call to %struct.vcount*
  store %struct.vcount* %14, %struct.vcount** %vc, align 4
  %15 = load %struct.vcount**, %struct.vcount*** %list.addr, align 4
  store %struct.vcount* %14, %struct.vcount** %15, align 4
  %16 = load double*, double** %x.addr, align 4
  %arrayidx4 = getelementptr inbounds double, double* %16, i32 0
  %17 = load double, double* %arrayidx4, align 8
  %18 = load %struct.vcount*, %struct.vcount** %vc, align 4
  %arrayidx5 = getelementptr inbounds %struct.vcount, %struct.vcount* %18, i32 0
  %v = getelementptr inbounds %struct.vcount, %struct.vcount* %arrayidx5, i32 0, i32 0
  store double %17, double* %v, align 8
  %19 = load %struct.vcount*, %struct.vcount** %vc, align 4
  %arrayidx6 = getelementptr inbounds %struct.vcount, %struct.vcount* %19, i32 0
  %c = getelementptr inbounds %struct.vcount, %struct.vcount* %arrayidx6, i32 0, i32 1
  store i32 1, i32* %c, align 8
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc22, %for.end
  %20 = load i32, i32* %i, align 4
  %21 = load i32, i32* %len.addr, align 4
  %sub8 = sub nsw i32 %21, 1
  %cmp9 = icmp slt i32 %20, %sub8
  br i1 %cmp9, label %for.body11, label %for.end27

for.body11:                                       ; preds = %for.cond7
  %22 = load double*, double** %x.addr, align 4
  %23 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds double, double* %22, i32 %23
  %24 = load double, double* %arrayidx12, align 8
  %25 = load double*, double** %x.addr, align 4
  %26 = load i32, i32* %i, align 4
  %add13 = add nsw i32 %26, 1
  %arrayidx14 = getelementptr inbounds double, double* %25, i32 %add13
  %27 = load double, double* %arrayidx14, align 8
  %cmp15 = fcmp une double %24, %27
  br i1 %cmp15, label %if.then, label %if.end

if.then:                                          ; preds = %for.body11
  %28 = load double*, double** %x.addr, align 4
  %29 = load i32, i32* %i, align 4
  %add17 = add nsw i32 %29, 1
  %arrayidx18 = getelementptr inbounds double, double* %28, i32 %add17
  %30 = load double, double* %arrayidx18, align 8
  %31 = load %struct.vcount*, %struct.vcount** %vc, align 4
  %32 = load i32, i32* %j, align 4
  %inc19 = add nsw i32 %32, 1
  store i32 %inc19, i32* %j, align 4
  %arrayidx20 = getelementptr inbounds %struct.vcount, %struct.vcount* %31, i32 %inc19
  %v21 = getelementptr inbounds %struct.vcount, %struct.vcount* %arrayidx20, i32 0, i32 0
  store double %30, double* %v21, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body11
  br label %for.inc22

for.inc22:                                        ; preds = %if.end
  %33 = load i32, i32* %i, align 4
  %inc23 = add nsw i32 %33, 1
  store i32 %inc23, i32* %i, align 4
  %34 = load %struct.vcount*, %struct.vcount** %vc, align 4
  %35 = load i32, i32* %j, align 4
  %arrayidx24 = getelementptr inbounds %struct.vcount, %struct.vcount* %34, i32 %35
  %c25 = getelementptr inbounds %struct.vcount, %struct.vcount* %arrayidx24, i32 0, i32 1
  %36 = load i32, i32* %c25, align 8
  %inc26 = add nsw i32 %36, 1
  store i32 %inc26, i32* %c25, align 8
  br label %for.cond7

for.end27:                                        ; preds = %for.cond7
  %37 = load %struct.vcount*, %struct.vcount** %vc, align 4
  %38 = bitcast %struct.vcount* %37 to i8*
  %39 = load i32, i32* %j, align 4
  %add28 = add nsw i32 %39, 1
  call void @qsort(i8* %38, i32 %add28, i32 16, i32 (i8*, i8*)* @vc_cmp)
  store i32 0, i32* %i, align 4
  br label %for.cond29

for.cond29:                                       ; preds = %for.inc39, %for.end27
  %40 = load i32, i32* %i, align 4
  %41 = load i32, i32* %j, align 4
  %cmp30 = icmp sle i32 %40, %41
  br i1 %cmp30, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond29
  %42 = load %struct.vcount*, %struct.vcount** %vc, align 4
  %43 = load i32, i32* %i, align 4
  %arrayidx32 = getelementptr inbounds %struct.vcount, %struct.vcount* %42, i32 %43
  %c33 = getelementptr inbounds %struct.vcount, %struct.vcount* %arrayidx32, i32 0, i32 1
  %44 = load i32, i32* %c33, align 8
  %45 = load %struct.vcount*, %struct.vcount** %vc, align 4
  %arrayidx34 = getelementptr inbounds %struct.vcount, %struct.vcount* %45, i32 0
  %c35 = getelementptr inbounds %struct.vcount, %struct.vcount* %arrayidx34, i32 0, i32 1
  %46 = load i32, i32* %c35, align 8
  %cmp36 = icmp eq i32 %44, %46
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond29
  %47 = phi i1 [ false, %for.cond29 ], [ %cmp36, %land.rhs ]
  br i1 %47, label %for.body38, label %for.end41

for.body38:                                       ; preds = %land.end
  br label %for.inc39

for.inc39:                                        ; preds = %for.body38
  %48 = load i32, i32* %i, align 4
  %inc40 = add nsw i32 %48, 1
  store i32 %inc40, i32* %i, align 4
  br label %for.cond29

for.end41:                                        ; preds = %land.end
  %49 = load i32, i32* %i, align 4
  ret i32 %49
}

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #1

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %values = alloca [13 x double], align 16
  %vc = alloca %struct.vcount*, align 4
  %i = alloca i32, align 4
  %n_modes = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [13 x double]* %values to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([13 x double]* @__const.main.values to i8*), i32 104, i1 false)
  %arraydecay = getelementptr inbounds [13 x double], [13 x double]* %values, i32 0, i32 0
  %call = call i32 @get_mode(double* %arraydecay, i32 13, %struct.vcount** %vc)
  store i32 %call, i32* %n_modes, align 4
  %1 = load i32, i32* %n_modes, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i32 0, i32 0), i32 %1)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %n_modes, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load %struct.vcount*, %struct.vcount** %vc, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.vcount, %struct.vcount* %4, i32 %5
  %v = getelementptr inbounds %struct.vcount, %struct.vcount* %arrayidx, i32 0, i32 0
  %6 = load double, double* %v, align 8
  %7 = load %struct.vcount*, %struct.vcount** %vc, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds %struct.vcount, %struct.vcount* %7, i32 %8
  %c = getelementptr inbounds %struct.vcount, %struct.vcount* %arrayidx2, i32 0, i32 1
  %9 = load i32, i32* %c, align 8
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.1, i32 0, i32 0), double %6, i32 %9)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load i32, i32* %i, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %11 = load %struct.vcount*, %struct.vcount** %vc, align 4
  %12 = bitcast %struct.vcount* %11 to i8*
  call void @free(i8* %12)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare i32 @printf(i8* %0, ...) #1

declare void @free(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %c, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %c1, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %2, %5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147418112
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for vc_cmp()

; entering Souper's runOnFunction() for get_mode()

; ModuleID = './Averages-Mode.c.bc'
source_filename = "./Averages-Mode.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.vcount = type { double, i32 }

@__const.main.values = private unnamed_addr constant [13 x double] [double 1.000000e+00, double 3.000000e+00, double 6.000000e+00, double 6.000000e+00, double 6.000000e+00, double 6.000000e+00, double 7.000000e+00, double 7.000000e+00, double 1.200000e+01, double 1.200000e+01, double 1.200000e+01, double 1.200000e+01, double 1.700000e+01], align 16
@.str = private unnamed_addr constant [15 x i8] c"got %d modes:\0A\00", align 1
@.str.1 = private unnamed_addr constant [25 x i8] c"\09value = %g, count = %d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @cmp_dbl(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %x = alloca double, align 8
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to double*
  %2 = load double, double* %1, align 8
  %3 = load i8*, i8** %b.addr, align 4
  %4 = bitcast i8* %3 to double*
  %5 = load double, double* %4, align 8
  %sub = fsub double %2, %5
  store double %sub, double* %x, align 8
  %6 = load double, double* %x, align 8
  %cmp = fcmp olt double %6, 0.000000e+00
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %7 = load double, double* %x, align 8
  %cmp1 = fcmp ogt double %7, 0.000000e+00
  %conv = zext i1 %cmp1 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ -1, %cond.true ], [ %conv, %cond.false ]
  ret i32 %cond
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @vc_cmp(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %b.addr, align 4
  %1 = bitcast i8* %0 to %struct.vcount*
  %c = getelementptr inbounds %struct.vcount, %struct.vcount* %1, i32 0, i32 1
  %2 = load i32, i32* %c, align 8
  %3 = load i8*, i8** %a.addr, align 4
  %4 = bitcast i8* %3 to %struct.vcount*
  %c1 = getelementptr inbounds %struct.vcount, %struct.vcount* %4, i32 0, i32 1
  %5 = load i32, i32* %c1, align 8
  %sub = sub nsw i32 %2, %5
  ret i32 %sub
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @get_mode(double* %x, i32 %len, %struct.vcount** %list) #0 {
entry:
  %x.addr = alloca double*, align 4
  %len.addr = alloca i32, align 4
  %list.addr = alloca %struct.vcount**, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %vc = alloca %struct.vcount*, align 4
  store double* %x, double** %x.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store %struct.vcount** %list, %struct.vcount*** %list.addr, align 4
  %0 = load double*, double** %x.addr, align 4
  %1 = bitcast double* %0 to i8*
  %2 = load i32, i32* %len.addr, align 4
  call void @qsort(i8* %1, i32 %2, i32 8, i32 (i8*, i8*)* @cmp_dbl)
  store i32 0, i32* %i, align 4
  store i32 1, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %len.addr, align 4
  %sub = sub nsw i32 %4, 1
  %cmp = icmp slt i32 %3, %sub
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  %6 = load double*, double** %x.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %6, i32 %7
  %8 = load double, double* %arrayidx, align 8
  %9 = load double*, double** %x.addr, align 4
  %10 = load i32, i32* %i, align 4
  %add = add nsw i32 %10, 1
  %arrayidx1 = getelementptr inbounds double, double* %9, i32 %add
  %11 = load double, double* %arrayidx1, align 8
  %cmp2 = fcmp une double %8, %11
  %conv = zext i1 %cmp2 to i32
  %12 = load i32, i32* %j, align 4
  %add3 = add nsw i32 %12, %conv
  store i32 %add3, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %13 = load i32, i32* %j, align 4
  %mul = mul i32 16, %13
  %call = call noalias i8* @malloc(i32 %mul)
  %14 = bitcast i8* %call to %struct.vcount*
  store %struct.vcount* %14, %struct.vcount** %vc, align 4
  %15 = load %struct.vcount**, %struct.vcount*** %list.addr, align 4
  store %struct.vcount* %14, %struct.vcount** %15, align 4
  %16 = load double*, double** %x.addr, align 4
  %arrayidx4 = getelementptr inbounds double, double* %16, i32 0
  %17 = load double, double* %arrayidx4, align 8
  %18 = load %struct.vcount*, %struct.vcount** %vc, align 4
  %arrayidx5 = getelementptr inbounds %struct.vcount, %struct.vcount* %18, i32 0
  %v = getelementptr inbounds %struct.vcount, %struct.vcount* %arrayidx5, i32 0, i32 0
  store double %17, double* %v, align 8
  %19 = load %struct.vcount*, %struct.vcount** %vc, align 4
  %arrayidx6 = getelementptr inbounds %struct.vcount, %struct.vcount* %19, i32 0
  %c = getelementptr inbounds %struct.vcount, %struct.vcount* %arrayidx6, i32 0, i32 1
  store i32 1, i32* %c, align 8
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc22, %for.end
  %20 = load i32, i32* %i, align 4
  %21 = load i32, i32* %len.addr, align 4
  %sub8 = sub nsw i32 %21, 1
  %cmp9 = icmp slt i32 %20, %sub8
  br i1 %cmp9, label %for.body11, label %for.end27

for.body11:                                       ; preds = %for.cond7
  %22 = load double*, double** %x.addr, align 4
  %23 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds double, double* %22, i32 %23
  %24 = load double, double* %arrayidx12, align 8
  %25 = load double*, double** %x.addr, align 4
  %26 = load i32, i32* %i, align 4
  %add13 = add nsw i32 %26, 1
  %arrayidx14 = getelementptr inbounds double, double* %25, i32 %add13
  %27 = load double, double* %arrayidx14, align 8
  %cmp15 = fcmp une double %24, %27
  br i1 %cmp15, label %if.then, label %if.end

if.then:                                          ; preds = %for.body11
  %28 = load double*, double** %x.addr, align 4
  %29 = load i32, i32* %i, align 4
  %add17 = add nsw i32 %29, 1
  %arrayidx18 = getelementptr inbounds double, double* %28, i32 %add17
  %30 = load double, double* %arrayidx18, align 8
  %31 = load %struct.vcount*, %struct.vcount** %vc, align 4
  %32 = load i32, i32* %j, align 4
  %inc19 = add nsw i32 %32, 1
  store i32 %inc19, i32* %j, align 4
  %arrayidx20 = getelementptr inbounds %struct.vcount, %struct.vcount* %31, i32 %inc19
  %v21 = getelementptr inbounds %struct.vcount, %struct.vcount* %arrayidx20, i32 0, i32 0
  store double %30, double* %v21, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body11
  br label %for.inc22

for.inc22:                                        ; preds = %if.end
  %33 = load i32, i32* %i, align 4
  %inc23 = add nsw i32 %33, 1
  store i32 %inc23, i32* %i, align 4
  %34 = load %struct.vcount*, %struct.vcount** %vc, align 4
  %35 = load i32, i32* %j, align 4
  %arrayidx24 = getelementptr inbounds %struct.vcount, %struct.vcount* %34, i32 %35
  %c25 = getelementptr inbounds %struct.vcount, %struct.vcount* %arrayidx24, i32 0, i32 1
  %36 = load i32, i32* %c25, align 8
  %inc26 = add nsw i32 %36, 1
  store i32 %inc26, i32* %c25, align 8
  br label %for.cond7

for.end27:                                        ; preds = %for.cond7
  %37 = load %struct.vcount*, %struct.vcount** %vc, align 4
  %38 = bitcast %struct.vcount* %37 to i8*
  %39 = load i32, i32* %j, align 4
  %add28 = add nsw i32 %39, 1
  call void @qsort(i8* %38, i32 %add28, i32 16, i32 (i8*, i8*)* @vc_cmp)
  store i32 0, i32* %i, align 4
  br label %for.cond29

for.cond29:                                       ; preds = %for.inc39, %for.end27
  %40 = load i32, i32* %i, align 4
  %41 = load i32, i32* %j, align 4
  %cmp30 = icmp sle i32 %40, %41
  br i1 %cmp30, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond29
  %42 = load %struct.vcount*, %struct.vcount** %vc, align 4
  %43 = load i32, i32* %i, align 4
  %arrayidx32 = getelementptr inbounds %struct.vcount, %struct.vcount* %42, i32 %43
  %c33 = getelementptr inbounds %struct.vcount, %struct.vcount* %arrayidx32, i32 0, i32 1
  %44 = load i32, i32* %c33, align 8
  %45 = load %struct.vcount*, %struct.vcount** %vc, align 4
  %arrayidx34 = getelementptr inbounds %struct.vcount, %struct.vcount* %45, i32 0
  %c35 = getelementptr inbounds %struct.vcount, %struct.vcount* %arrayidx34, i32 0, i32 1
  %46 = load i32, i32* %c35, align 8
  %cmp36 = icmp eq i32 %44, %46
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond29
  %47 = phi i1 [ false, %for.cond29 ], [ %cmp36, %land.rhs ]
  br i1 %47, label %for.body38, label %for.end41

for.body38:                                       ; preds = %land.end
  br label %for.inc39

for.inc39:                                        ; preds = %for.body38
  %48 = load i32, i32* %i, align 4
  %inc40 = add nsw i32 %48, 1
  store i32 %inc40, i32* %i, align 4
  br label %for.cond29

for.end41:                                        ; preds = %land.end
  %49 = load i32, i32* %i, align 4
  ret i32 %49
}

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #1

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %values = alloca [13 x double], align 16
  %vc = alloca %struct.vcount*, align 4
  %i = alloca i32, align 4
  %n_modes = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [13 x double]* %values to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([13 x double]* @__const.main.values to i8*), i32 104, i1 false)
  %arraydecay = getelementptr inbounds [13 x double], [13 x double]* %values, i32 0, i32 0
  %call = call i32 @get_mode(double* %arraydecay, i32 13, %struct.vcount** %vc)
  store i32 %call, i32* %n_modes, align 4
  %1 = load i32, i32* %n_modes, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i32 0, i32 0), i32 %1)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %n_modes, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load %struct.vcount*, %struct.vcount** %vc, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.vcount, %struct.vcount* %4, i32 %5
  %v = getelementptr inbounds %struct.vcount, %struct.vcount* %arrayidx, i32 0, i32 0
  %6 = load double, double* %v, align 8
  %7 = load %struct.vcount*, %struct.vcount** %vc, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds %struct.vcount, %struct.vcount* %7, i32 %8
  %c = getelementptr inbounds %struct.vcount, %struct.vcount* %arrayidx2, i32 0, i32 1
  %9 = load i32, i32* %c, align 8
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.1, i32 0, i32 0), double %6, i32 %9)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load i32, i32* %i, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %11 = load %struct.vcount*, %struct.vcount** %vc, align 4
  %12 = bitcast %struct.vcount* %11 to i8*
  call void @free(i8* %12)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare i32 @printf(i8* %0, ...) #1

declare void @free(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %4, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %3, %sub
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = slt %0, %2
infer %3

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %5, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %10, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp2 = fcmp une double %8, %11
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = zext i1 %cmp2 to i32
; Looking for a replacement for:
%0:i1 = var
%1:i32 = zext %0
infer %1

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add3 = add nsw i32 %12, %conv
; Looking for a replacement for:
%0:i32 = var
%1:i1 = var
%2:i32 = zext %1
%3:i32 = addnsw %0, %2
infer %3

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul i32 16, %13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 16:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub8 = sub nsw i32 %21, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp9 = icmp slt i32 %20, %sub8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = slt %0, %2
infer %3

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add13 = add nsw i32 %26, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp15 = fcmp une double %24, %27
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add17 = add nsw i32 %29, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc19 = add nsw i32 %32, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc23 = add nsw i32 %33, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %c25, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc26 = add nsw i32 %36, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add28 = add nsw i32 %39, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %40 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %41 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp30 = icmp sle i32 %40, %41
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %43 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %44 = load i32, i32* %c33, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %46 = load i32, i32* %c35, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp36 = icmp eq i32 %44, %46
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %47 = phi i1 [ false, %for.cond29 ], [ %cmp36, %land.rhs ]
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %48 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc40 = add nsw i32 %48, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %49 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = slt %0, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = var
%2:i32 = zext %1
%3:i32 = addnsw %0, %2
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2147483648
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i1 = var
%1:i32 = zext %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mul 16:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for get_mode()

; entering Souper's runOnFunction() for main()

; ModuleID = './Averages-Mode.c.bc'
source_filename = "./Averages-Mode.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.vcount = type { double, i32 }

@__const.main.values = private unnamed_addr constant [13 x double] [double 1.000000e+00, double 3.000000e+00, double 6.000000e+00, double 6.000000e+00, double 6.000000e+00, double 6.000000e+00, double 7.000000e+00, double 7.000000e+00, double 1.200000e+01, double 1.200000e+01, double 1.200000e+01, double 1.200000e+01, double 1.700000e+01], align 16
@.str = private unnamed_addr constant [15 x i8] c"got %d modes:\0A\00", align 1
@.str.1 = private unnamed_addr constant [25 x i8] c"\09value = %g, count = %d\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @cmp_dbl(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  %x = alloca double, align 8
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %a.addr, align 4
  %1 = bitcast i8* %0 to double*
  %2 = load double, double* %1, align 8
  %3 = load i8*, i8** %b.addr, align 4
  %4 = bitcast i8* %3 to double*
  %5 = load double, double* %4, align 8
  %sub = fsub double %2, %5
  store double %sub, double* %x, align 8
  %6 = load double, double* %x, align 8
  %cmp = fcmp olt double %6, 0.000000e+00
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %7 = load double, double* %x, align 8
  %cmp1 = fcmp ogt double %7, 0.000000e+00
  %conv = zext i1 %cmp1 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ -1, %cond.true ], [ %conv, %cond.false ]
  ret i32 %cond
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @vc_cmp(i8* %a, i8* %b) #0 {
entry:
  %a.addr = alloca i8*, align 4
  %b.addr = alloca i8*, align 4
  store i8* %a, i8** %a.addr, align 4
  store i8* %b, i8** %b.addr, align 4
  %0 = load i8*, i8** %b.addr, align 4
  %1 = bitcast i8* %0 to %struct.vcount*
  %c = getelementptr inbounds %struct.vcount, %struct.vcount* %1, i32 0, i32 1
  %2 = load i32, i32* %c, align 8
  %3 = load i8*, i8** %a.addr, align 4
  %4 = bitcast i8* %3 to %struct.vcount*
  %c1 = getelementptr inbounds %struct.vcount, %struct.vcount* %4, i32 0, i32 1
  %5 = load i32, i32* %c1, align 8
  %sub = sub nsw i32 %2, %5
  ret i32 %sub
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @get_mode(double* %x, i32 %len, %struct.vcount** %list) #0 {
entry:
  %x.addr = alloca double*, align 4
  %len.addr = alloca i32, align 4
  %list.addr = alloca %struct.vcount**, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %vc = alloca %struct.vcount*, align 4
  store double* %x, double** %x.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store %struct.vcount** %list, %struct.vcount*** %list.addr, align 4
  %0 = load double*, double** %x.addr, align 4
  %1 = bitcast double* %0 to i8*
  %2 = load i32, i32* %len.addr, align 4
  call void @qsort(i8* %1, i32 %2, i32 8, i32 (i8*, i8*)* @cmp_dbl)
  store i32 0, i32* %i, align 4
  store i32 1, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %len.addr, align 4
  %sub = sub nsw i32 %4, 1
  %cmp = icmp slt i32 %3, %sub
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  %6 = load double*, double** %x.addr, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds double, double* %6, i32 %7
  %8 = load double, double* %arrayidx, align 8
  %9 = load double*, double** %x.addr, align 4
  %10 = load i32, i32* %i, align 4
  %add = add nsw i32 %10, 1
  %arrayidx1 = getelementptr inbounds double, double* %9, i32 %add
  %11 = load double, double* %arrayidx1, align 8
  %cmp2 = fcmp une double %8, %11
  %conv = zext i1 %cmp2 to i32
  %12 = load i32, i32* %j, align 4
  %add3 = add nsw i32 %12, %conv
  store i32 %add3, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %13 = load i32, i32* %j, align 4
  %mul = mul i32 16, %13
  %call = call noalias i8* @malloc(i32 %mul)
  %14 = bitcast i8* %call to %struct.vcount*
  store %struct.vcount* %14, %struct.vcount** %vc, align 4
  %15 = load %struct.vcount**, %struct.vcount*** %list.addr, align 4
  store %struct.vcount* %14, %struct.vcount** %15, align 4
  %16 = load double*, double** %x.addr, align 4
  %arrayidx4 = getelementptr inbounds double, double* %16, i32 0
  %17 = load double, double* %arrayidx4, align 8
  %18 = load %struct.vcount*, %struct.vcount** %vc, align 4
  %arrayidx5 = getelementptr inbounds %struct.vcount, %struct.vcount* %18, i32 0
  %v = getelementptr inbounds %struct.vcount, %struct.vcount* %arrayidx5, i32 0, i32 0
  store double %17, double* %v, align 8
  %19 = load %struct.vcount*, %struct.vcount** %vc, align 4
  %arrayidx6 = getelementptr inbounds %struct.vcount, %struct.vcount* %19, i32 0
  %c = getelementptr inbounds %struct.vcount, %struct.vcount* %arrayidx6, i32 0, i32 1
  store i32 1, i32* %c, align 8
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc22, %for.end
  %20 = load i32, i32* %i, align 4
  %21 = load i32, i32* %len.addr, align 4
  %sub8 = sub nsw i32 %21, 1
  %cmp9 = icmp slt i32 %20, %sub8
  br i1 %cmp9, label %for.body11, label %for.end27

for.body11:                                       ; preds = %for.cond7
  %22 = load double*, double** %x.addr, align 4
  %23 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds double, double* %22, i32 %23
  %24 = load double, double* %arrayidx12, align 8
  %25 = load double*, double** %x.addr, align 4
  %26 = load i32, i32* %i, align 4
  %add13 = add nsw i32 %26, 1
  %arrayidx14 = getelementptr inbounds double, double* %25, i32 %add13
  %27 = load double, double* %arrayidx14, align 8
  %cmp15 = fcmp une double %24, %27
  br i1 %cmp15, label %if.then, label %if.end

if.then:                                          ; preds = %for.body11
  %28 = load double*, double** %x.addr, align 4
  %29 = load i32, i32* %i, align 4
  %add17 = add nsw i32 %29, 1
  %arrayidx18 = getelementptr inbounds double, double* %28, i32 %add17
  %30 = load double, double* %arrayidx18, align 8
  %31 = load %struct.vcount*, %struct.vcount** %vc, align 4
  %32 = load i32, i32* %j, align 4
  %inc19 = add nsw i32 %32, 1
  store i32 %inc19, i32* %j, align 4
  %arrayidx20 = getelementptr inbounds %struct.vcount, %struct.vcount* %31, i32 %inc19
  %v21 = getelementptr inbounds %struct.vcount, %struct.vcount* %arrayidx20, i32 0, i32 0
  store double %30, double* %v21, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body11
  br label %for.inc22

for.inc22:                                        ; preds = %if.end
  %33 = load i32, i32* %i, align 4
  %inc23 = add nsw i32 %33, 1
  store i32 %inc23, i32* %i, align 4
  %34 = load %struct.vcount*, %struct.vcount** %vc, align 4
  %35 = load i32, i32* %j, align 4
  %arrayidx24 = getelementptr inbounds %struct.vcount, %struct.vcount* %34, i32 %35
  %c25 = getelementptr inbounds %struct.vcount, %struct.vcount* %arrayidx24, i32 0, i32 1
  %36 = load i32, i32* %c25, align 8
  %inc26 = add nsw i32 %36, 1
  store i32 %inc26, i32* %c25, align 8
  br label %for.cond7

for.end27:                                        ; preds = %for.cond7
  %37 = load %struct.vcount*, %struct.vcount** %vc, align 4
  %38 = bitcast %struct.vcount* %37 to i8*
  %39 = load i32, i32* %j, align 4
  %add28 = add nsw i32 %39, 1
  call void @qsort(i8* %38, i32 %add28, i32 16, i32 (i8*, i8*)* @vc_cmp)
  store i32 0, i32* %i, align 4
  br label %for.cond29

for.cond29:                                       ; preds = %for.inc39, %for.end27
  %40 = load i32, i32* %i, align 4
  %41 = load i32, i32* %j, align 4
  %cmp30 = icmp sle i32 %40, %41
  br i1 %cmp30, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond29
  %42 = load %struct.vcount*, %struct.vcount** %vc, align 4
  %43 = load i32, i32* %i, align 4
  %arrayidx32 = getelementptr inbounds %struct.vcount, %struct.vcount* %42, i32 %43
  %c33 = getelementptr inbounds %struct.vcount, %struct.vcount* %arrayidx32, i32 0, i32 1
  %44 = load i32, i32* %c33, align 8
  %45 = load %struct.vcount*, %struct.vcount** %vc, align 4
  %arrayidx34 = getelementptr inbounds %struct.vcount, %struct.vcount* %45, i32 0
  %c35 = getelementptr inbounds %struct.vcount, %struct.vcount* %arrayidx34, i32 0, i32 1
  %46 = load i32, i32* %c35, align 8
  %cmp36 = icmp eq i32 %44, %46
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond29
  %47 = phi i1 [ false, %for.cond29 ], [ %cmp36, %land.rhs ]
  br i1 %47, label %for.body38, label %for.end41

for.body38:                                       ; preds = %land.end
  br label %for.inc39

for.inc39:                                        ; preds = %for.body38
  %48 = load i32, i32* %i, align 4
  %inc40 = add nsw i32 %48, 1
  store i32 %inc40, i32* %i, align 4
  br label %for.cond29

for.end41:                                        ; preds = %land.end
  %49 = load i32, i32* %i, align 4
  ret i32 %49
}

declare void @qsort(i8* %0, i32 %1, i32 %2, i32 (i8*, i8*)* %3) #1

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %values = alloca [13 x double], align 16
  %vc = alloca %struct.vcount*, align 4
  %i = alloca i32, align 4
  %n_modes = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [13 x double]* %values to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([13 x double]* @__const.main.values to i8*), i32 104, i1 false)
  %arraydecay = getelementptr inbounds [13 x double], [13 x double]* %values, i32 0, i32 0
  %call = call i32 @get_mode(double* %arraydecay, i32 13, %struct.vcount** %vc)
  store i32 %call, i32* %n_modes, align 4
  %1 = load i32, i32* %n_modes, align 4
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i32 0, i32 0), i32 %1)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %n_modes, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load %struct.vcount*, %struct.vcount** %vc, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.vcount, %struct.vcount* %4, i32 %5
  %v = getelementptr inbounds %struct.vcount, %struct.vcount* %arrayidx, i32 0, i32 0
  %6 = load double, double* %v, align 8
  %7 = load %struct.vcount*, %struct.vcount** %vc, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds %struct.vcount, %struct.vcount* %7, i32 %8
  %c = getelementptr inbounds %struct.vcount, %struct.vcount* %arrayidx2, i32 0, i32 1
  %9 = load i32, i32* %c, align 8
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.1, i32 0, i32 0), double %6, i32 %9)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load i32, i32* %i, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %11 = load %struct.vcount*, %struct.vcount** %vc, align 4
  %12 = bitcast %struct.vcount* %11 to i8*
  call void @free(i8* %12)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare i32 @printf(i8* %0, ...) #1

declare void @free(i8* %0) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 @get_mode(double* %arraydecay, i32 13, %struct.vcount** %vc)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %n_modes, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %n_modes, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %2, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %c, align 8
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %10, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
