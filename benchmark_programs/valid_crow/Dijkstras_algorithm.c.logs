
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for add_vertex()

; ModuleID = './Dijkstras_algorithm.c.bc'
source_filename = "./Dijkstras_algorithm.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.graph_t = type { %struct.vertex_t**, i32, i32 }
%struct.vertex_t = type { %struct.edge_t**, i32, i32, i32, i32, i32 }
%struct.edge_t = type { i32, i32 }
%struct.heap_t = type { i32*, i32*, i32*, i32, i32 }

@.str = private unnamed_addr constant [9 x i8] c"no path\0A\00", align 1
@.str.1 = private unnamed_addr constant [9 x i8] c"%d %.*s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @add_vertex(%struct.graph_t* %g, i32 %i) #0 {
entry:
  %g.addr = alloca %struct.graph_t*, align 4
  %i.addr = alloca i32, align 4
  %size = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.graph_t* %g, %struct.graph_t** %g.addr, align 4
  store i32 %i, i32* %i.addr, align 4
  %0 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_size = getelementptr inbounds %struct.graph_t, %struct.graph_t* %0, i32 0, i32 2
  %1 = load i32, i32* %vertices_size, align 4
  %2 = load i32, i32* %i.addr, align 4
  %add = add nsw i32 %2, 1
  %cmp = icmp slt i32 %1, %add
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_size1 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %3, i32 0, i32 2
  %4 = load i32, i32* %vertices_size1, align 4
  %mul = mul nsw i32 %4, 2
  %5 = load i32, i32* %i.addr, align 4
  %cmp2 = icmp sgt i32 %mul, %5
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %6 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_size3 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %6, i32 0, i32 2
  %7 = load i32, i32* %vertices_size3, align 4
  %mul4 = mul nsw i32 %7, 2
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %8 = load i32, i32* %i.addr, align 4
  %add5 = add nsw i32 %8, 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %mul4, %cond.true ], [ %add5, %cond.false ]
  store i32 %cond, i32* %size, align 4
  %9 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices = getelementptr inbounds %struct.graph_t, %struct.graph_t* %9, i32 0, i32 0
  %10 = load %struct.vertex_t**, %struct.vertex_t*** %vertices, align 4
  %11 = bitcast %struct.vertex_t** %10 to i8*
  %12 = load i32, i32* %size, align 4
  %mul6 = mul i32 %12, 4
  %call = call i8* @realloc(i8* %11, i32 %mul6)
  %13 = bitcast i8* %call to %struct.vertex_t**
  %14 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices7 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %14, i32 0, i32 0
  store %struct.vertex_t** %13, %struct.vertex_t*** %vertices7, align 4
  %15 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_size8 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %15, i32 0, i32 2
  %16 = load i32, i32* %vertices_size8, align 4
  store i32 %16, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %cond.end
  %17 = load i32, i32* %j, align 4
  %18 = load i32, i32* %size, align 4
  %cmp9 = icmp slt i32 %17, %18
  br i1 %cmp9, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %19 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices10 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %19, i32 0, i32 0
  %20 = load %struct.vertex_t**, %struct.vertex_t*** %vertices10, align 4
  %21 = load i32, i32* %j, align 4
  %arrayidx = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %20, i32 %21
  store %struct.vertex_t* null, %struct.vertex_t** %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %22 = load i32, i32* %j, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %23 = load i32, i32* %size, align 4
  %24 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_size11 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %24, i32 0, i32 2
  store i32 %23, i32* %vertices_size11, align 4
  br label %if.end

if.end:                                           ; preds = %for.end, %entry
  %25 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices12 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %25, i32 0, i32 0
  %26 = load %struct.vertex_t**, %struct.vertex_t*** %vertices12, align 4
  %27 = load i32, i32* %i.addr, align 4
  %arrayidx13 = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %26, i32 %27
  %28 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx13, align 4
  %tobool = icmp ne %struct.vertex_t* %28, null
  br i1 %tobool, label %if.end19, label %if.then14

if.then14:                                        ; preds = %if.end
  %call15 = call noalias i8* @calloc(i32 1, i32 24)
  %29 = bitcast i8* %call15 to %struct.vertex_t*
  %30 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices16 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %30, i32 0, i32 0
  %31 = load %struct.vertex_t**, %struct.vertex_t*** %vertices16, align 4
  %32 = load i32, i32* %i.addr, align 4
  %arrayidx17 = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %31, i32 %32
  store %struct.vertex_t* %29, %struct.vertex_t** %arrayidx17, align 4
  %33 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_len = getelementptr inbounds %struct.graph_t, %struct.graph_t* %33, i32 0, i32 1
  %34 = load i32, i32* %vertices_len, align 4
  %inc18 = add nsw i32 %34, 1
  store i32 %inc18, i32* %vertices_len, align 4
  br label %if.end19

if.end19:                                         ; preds = %if.then14, %if.end
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

declare noalias i8* @calloc(i32 %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @add_edge(%struct.graph_t* %g, i32 %a, i32 %b, i32 %w) #0 {
entry:
  %g.addr = alloca %struct.graph_t*, align 4
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %w.addr = alloca i32, align 4
  %v = alloca %struct.vertex_t*, align 4
  %e = alloca %struct.edge_t*, align 4
  store %struct.graph_t* %g, %struct.graph_t** %g.addr, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  store i32 %w, i32* %w.addr, align 4
  %0 = load i32, i32* %a.addr, align 4
  %sub = sub nsw i32 %0, 97
  store i32 %sub, i32* %a.addr, align 4
  %1 = load i32, i32* %b.addr, align 4
  %sub1 = sub nsw i32 %1, 97
  store i32 %sub1, i32* %b.addr, align 4
  %2 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %3 = load i32, i32* %a.addr, align 4
  call void @add_vertex(%struct.graph_t* %2, i32 %3)
  %4 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %5 = load i32, i32* %b.addr, align 4
  call void @add_vertex(%struct.graph_t* %4, i32 %5)
  %6 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices = getelementptr inbounds %struct.graph_t, %struct.graph_t* %6, i32 0, i32 0
  %7 = load %struct.vertex_t**, %struct.vertex_t*** %vertices, align 4
  %8 = load i32, i32* %a.addr, align 4
  %arrayidx = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %7, i32 %8
  %9 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx, align 4
  store %struct.vertex_t* %9, %struct.vertex_t** %v, align 4
  %10 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges_len = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %10, i32 0, i32 1
  %11 = load i32, i32* %edges_len, align 4
  %12 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges_size = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %12, i32 0, i32 2
  %13 = load i32, i32* %edges_size, align 4
  %cmp = icmp sge i32 %11, %13
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %14 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges_size2 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %14, i32 0, i32 2
  %15 = load i32, i32* %edges_size2, align 4
  %tobool = icmp ne i32 %15, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %16 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges_size3 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %16, i32 0, i32 2
  %17 = load i32, i32* %edges_size3, align 4
  %mul = mul nsw i32 %17, 2
  br label %cond.end

cond.false:                                       ; preds = %if.then
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %mul, %cond.true ], [ 4, %cond.false ]
  %18 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges_size4 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %18, i32 0, i32 2
  store i32 %cond, i32* %edges_size4, align 4
  %19 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %19, i32 0, i32 0
  %20 = load %struct.edge_t**, %struct.edge_t*** %edges, align 4
  %21 = bitcast %struct.edge_t** %20 to i8*
  %22 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges_size5 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %22, i32 0, i32 2
  %23 = load i32, i32* %edges_size5, align 4
  %mul6 = mul i32 %23, 4
  %call = call i8* @realloc(i8* %21, i32 %mul6)
  %24 = bitcast i8* %call to %struct.edge_t**
  %25 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges7 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %25, i32 0, i32 0
  store %struct.edge_t** %24, %struct.edge_t*** %edges7, align 4
  br label %if.end

if.end:                                           ; preds = %cond.end, %entry
  %call8 = call noalias i8* @calloc(i32 1, i32 8)
  %26 = bitcast i8* %call8 to %struct.edge_t*
  store %struct.edge_t* %26, %struct.edge_t** %e, align 4
  %27 = load i32, i32* %b.addr, align 4
  %28 = load %struct.edge_t*, %struct.edge_t** %e, align 4
  %vertex = getelementptr inbounds %struct.edge_t, %struct.edge_t* %28, i32 0, i32 0
  store i32 %27, i32* %vertex, align 4
  %29 = load i32, i32* %w.addr, align 4
  %30 = load %struct.edge_t*, %struct.edge_t** %e, align 4
  %weight = getelementptr inbounds %struct.edge_t, %struct.edge_t* %30, i32 0, i32 1
  store i32 %29, i32* %weight, align 4
  %31 = load %struct.edge_t*, %struct.edge_t** %e, align 4
  %32 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges9 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %32, i32 0, i32 0
  %33 = load %struct.edge_t**, %struct.edge_t*** %edges9, align 4
  %34 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges_len10 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %34, i32 0, i32 1
  %35 = load i32, i32* %edges_len10, align 4
  %inc = add nsw i32 %35, 1
  store i32 %inc, i32* %edges_len10, align 4
  %arrayidx11 = getelementptr inbounds %struct.edge_t*, %struct.edge_t** %33, i32 %35
  store %struct.edge_t* %31, %struct.edge_t** %arrayidx11, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.heap_t* @create_heap(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %h = alloca %struct.heap_t*, align 4
  store i32 %n, i32* %n.addr, align 4
  %call = call noalias i8* @calloc(i32 1, i32 20)
  %0 = bitcast i8* %call to %struct.heap_t*
  store %struct.heap_t* %0, %struct.heap_t** %h, align 4
  %1 = load i32, i32* %n.addr, align 4
  %add = add nsw i32 %1, 1
  %call1 = call noalias i8* @calloc(i32 %add, i32 4)
  %2 = bitcast i8* %call1 to i32*
  %3 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  %data = getelementptr inbounds %struct.heap_t, %struct.heap_t* %3, i32 0, i32 0
  store i32* %2, i32** %data, align 4
  %4 = load i32, i32* %n.addr, align 4
  %add2 = add nsw i32 %4, 1
  %call3 = call noalias i8* @calloc(i32 %add2, i32 4)
  %5 = bitcast i8* %call3 to i32*
  %6 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  %prio = getelementptr inbounds %struct.heap_t, %struct.heap_t* %6, i32 0, i32 1
  store i32* %5, i32** %prio, align 4
  %7 = load i32, i32* %n.addr, align 4
  %call4 = call noalias i8* @calloc(i32 %7, i32 4)
  %8 = bitcast i8* %call4 to i32*
  %9 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  %index = getelementptr inbounds %struct.heap_t, %struct.heap_t* %9, i32 0, i32 2
  store i32* %8, i32** %index, align 4
  %10 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  ret %struct.heap_t* %10
}

; Function Attrs: noinline nounwind optnone
define hidden void @push_heap(%struct.heap_t* %h, i32 %v, i32 %p) #0 {
entry:
  %h.addr = alloca %struct.heap_t*, align 4
  %v.addr = alloca i32, align 4
  %p.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.heap_t* %h, %struct.heap_t** %h.addr, align 4
  store i32 %v, i32* %v.addr, align 4
  store i32 %p, i32* %p.addr, align 4
  %0 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %index = getelementptr inbounds %struct.heap_t, %struct.heap_t* %0, i32 0, i32 2
  %1 = load i32*, i32** %index, align 4
  %2 = load i32, i32* %v.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 %2
  %3 = load i32, i32* %arrayidx, align 4
  %cmp = icmp eq i32 %3, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %4 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len = getelementptr inbounds %struct.heap_t, %struct.heap_t* %4, i32 0, i32 3
  %5 = load i32, i32* %len, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %len, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  %6 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %index1 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %6, i32 0, i32 2
  %7 = load i32*, i32** %index1, align 4
  %8 = load i32, i32* %v.addr, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %7, i32 %8
  %9 = load i32, i32* %arrayidx2, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %inc, %cond.true ], [ %9, %cond.false ]
  store i32 %cond, i32* %i, align 4
  %10 = load i32, i32* %i, align 4
  %div = sdiv i32 %10, 2
  store i32 %div, i32* %j, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %cond.end
  %11 = load i32, i32* %i, align 4
  %cmp3 = icmp sgt i32 %11, 1
  br i1 %cmp3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %12 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio = getelementptr inbounds %struct.heap_t, %struct.heap_t* %12, i32 0, i32 1
  %13 = load i32*, i32** %prio, align 4
  %14 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %13, i32 %14
  %15 = load i32, i32* %arrayidx4, align 4
  %16 = load i32, i32* %p.addr, align 4
  %cmp5 = icmp slt i32 %15, %16
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  br label %while.end

if.end:                                           ; preds = %while.body
  %17 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data = getelementptr inbounds %struct.heap_t, %struct.heap_t* %17, i32 0, i32 0
  %18 = load i32*, i32** %data, align 4
  %19 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds i32, i32* %18, i32 %19
  %20 = load i32, i32* %arrayidx6, align 4
  %21 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data7 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %21, i32 0, i32 0
  %22 = load i32*, i32** %data7, align 4
  %23 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %22, i32 %23
  store i32 %20, i32* %arrayidx8, align 4
  %24 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio9 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %24, i32 0, i32 1
  %25 = load i32*, i32** %prio9, align 4
  %26 = load i32, i32* %j, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %25, i32 %26
  %27 = load i32, i32* %arrayidx10, align 4
  %28 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio11 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %28, i32 0, i32 1
  %29 = load i32*, i32** %prio11, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds i32, i32* %29, i32 %30
  store i32 %27, i32* %arrayidx12, align 4
  %31 = load i32, i32* %i, align 4
  %32 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %index13 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %32, i32 0, i32 2
  %33 = load i32*, i32** %index13, align 4
  %34 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data14 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %34, i32 0, i32 0
  %35 = load i32*, i32** %data14, align 4
  %36 = load i32, i32* %i, align 4
  %arrayidx15 = getelementptr inbounds i32, i32* %35, i32 %36
  %37 = load i32, i32* %arrayidx15, align 4
  %arrayidx16 = getelementptr inbounds i32, i32* %33, i32 %37
  store i32 %31, i32* %arrayidx16, align 4
  %38 = load i32, i32* %j, align 4
  store i32 %38, i32* %i, align 4
  %39 = load i32, i32* %j, align 4
  %div17 = sdiv i32 %39, 2
  store i32 %div17, i32* %j, align 4
  br label %while.cond

while.end:                                        ; preds = %if.then, %while.cond
  %40 = load i32, i32* %v.addr, align 4
  %41 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data18 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %41, i32 0, i32 0
  %42 = load i32*, i32** %data18, align 4
  %43 = load i32, i32* %i, align 4
  %arrayidx19 = getelementptr inbounds i32, i32* %42, i32 %43
  store i32 %40, i32* %arrayidx19, align 4
  %44 = load i32, i32* %p.addr, align 4
  %45 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio20 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %45, i32 0, i32 1
  %46 = load i32*, i32** %prio20, align 4
  %47 = load i32, i32* %i, align 4
  %arrayidx21 = getelementptr inbounds i32, i32* %46, i32 %47
  store i32 %44, i32* %arrayidx21, align 4
  %48 = load i32, i32* %i, align 4
  %49 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %index22 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %49, i32 0, i32 2
  %50 = load i32*, i32** %index22, align 4
  %51 = load i32, i32* %v.addr, align 4
  %arrayidx23 = getelementptr inbounds i32, i32* %50, i32 %51
  store i32 %48, i32* %arrayidx23, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @min(%struct.heap_t* %h, i32 %i, i32 %j, i32 %k) #0 {
entry:
  %h.addr = alloca %struct.heap_t*, align 4
  %i.addr = alloca i32, align 4
  %j.addr = alloca i32, align 4
  %k.addr = alloca i32, align 4
  %m = alloca i32, align 4
  store %struct.heap_t* %h, %struct.heap_t** %h.addr, align 4
  store i32 %i, i32* %i.addr, align 4
  store i32 %j, i32* %j.addr, align 4
  store i32 %k, i32* %k.addr, align 4
  %0 = load i32, i32* %i.addr, align 4
  store i32 %0, i32* %m, align 4
  %1 = load i32, i32* %j.addr, align 4
  %2 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len = getelementptr inbounds %struct.heap_t, %struct.heap_t* %2, i32 0, i32 3
  %3 = load i32, i32* %len, align 4
  %cmp = icmp sle i32 %1, %3
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio = getelementptr inbounds %struct.heap_t, %struct.heap_t* %4, i32 0, i32 1
  %5 = load i32*, i32** %prio, align 4
  %6 = load i32, i32* %j.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %5, i32 %6
  %7 = load i32, i32* %arrayidx, align 4
  %8 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio1 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %8, i32 0, i32 1
  %9 = load i32*, i32** %prio1, align 4
  %10 = load i32, i32* %m, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %9, i32 %10
  %11 = load i32, i32* %arrayidx2, align 4
  %cmp3 = icmp slt i32 %7, %11
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %12 = load i32, i32* %j.addr, align 4
  store i32 %12, i32* %m, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %13 = load i32, i32* %k.addr, align 4
  %14 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len4 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %14, i32 0, i32 3
  %15 = load i32, i32* %len4, align 4
  %cmp5 = icmp sle i32 %13, %15
  br i1 %cmp5, label %land.lhs.true6, label %if.end13

land.lhs.true6:                                   ; preds = %if.end
  %16 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio7 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %16, i32 0, i32 1
  %17 = load i32*, i32** %prio7, align 4
  %18 = load i32, i32* %k.addr, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %17, i32 %18
  %19 = load i32, i32* %arrayidx8, align 4
  %20 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio9 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %20, i32 0, i32 1
  %21 = load i32*, i32** %prio9, align 4
  %22 = load i32, i32* %m, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %21, i32 %22
  %23 = load i32, i32* %arrayidx10, align 4
  %cmp11 = icmp slt i32 %19, %23
  br i1 %cmp11, label %if.then12, label %if.end13

if.then12:                                        ; preds = %land.lhs.true6
  %24 = load i32, i32* %k.addr, align 4
  store i32 %24, i32* %m, align 4
  br label %if.end13

if.end13:                                         ; preds = %if.then12, %land.lhs.true6, %if.end
  %25 = load i32, i32* %m, align 4
  ret i32 %25
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @pop_heap(%struct.heap_t* %h) #0 {
entry:
  %h.addr = alloca %struct.heap_t*, align 4
  %v = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.heap_t* %h, %struct.heap_t** %h.addr, align 4
  %0 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data = getelementptr inbounds %struct.heap_t, %struct.heap_t* %0, i32 0, i32 0
  %1 = load i32*, i32** %data, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 1
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %v, align 4
  store i32 1, i32* %i, align 4
  br label %while.body

while.body:                                       ; preds = %entry, %if.end
  %3 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %4 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len = getelementptr inbounds %struct.heap_t, %struct.heap_t* %4, i32 0, i32 3
  %5 = load i32, i32* %len, align 4
  %6 = load i32, i32* %i, align 4
  %mul = mul nsw i32 2, %6
  %7 = load i32, i32* %i, align 4
  %mul1 = mul nsw i32 2, %7
  %add = add nsw i32 %mul1, 1
  %call = call i32 @min(%struct.heap_t* %3, i32 %5, i32 %mul, i32 %add)
  store i32 %call, i32* %j, align 4
  %8 = load i32, i32* %j, align 4
  %9 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len2 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %9, i32 0, i32 3
  %10 = load i32, i32* %len2, align 4
  %cmp = icmp eq i32 %8, %10
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  br label %while.end

if.end:                                           ; preds = %while.body
  %11 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data3 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %11, i32 0, i32 0
  %12 = load i32*, i32** %data3, align 4
  %13 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %12, i32 %13
  %14 = load i32, i32* %arrayidx4, align 4
  %15 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data5 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %15, i32 0, i32 0
  %16 = load i32*, i32** %data5, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds i32, i32* %16, i32 %17
  store i32 %14, i32* %arrayidx6, align 4
  %18 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio = getelementptr inbounds %struct.heap_t, %struct.heap_t* %18, i32 0, i32 1
  %19 = load i32*, i32** %prio, align 4
  %20 = load i32, i32* %j, align 4
  %arrayidx7 = getelementptr inbounds i32, i32* %19, i32 %20
  %21 = load i32, i32* %arrayidx7, align 4
  %22 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio8 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %22, i32 0, i32 1
  %23 = load i32*, i32** %prio8, align 4
  %24 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds i32, i32* %23, i32 %24
  store i32 %21, i32* %arrayidx9, align 4
  %25 = load i32, i32* %i, align 4
  %26 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %index = getelementptr inbounds %struct.heap_t, %struct.heap_t* %26, i32 0, i32 2
  %27 = load i32*, i32** %index, align 4
  %28 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data10 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %28, i32 0, i32 0
  %29 = load i32*, i32** %data10, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds i32, i32* %29, i32 %30
  %31 = load i32, i32* %arrayidx11, align 4
  %arrayidx12 = getelementptr inbounds i32, i32* %27, i32 %31
  store i32 %25, i32* %arrayidx12, align 4
  %32 = load i32, i32* %j, align 4
  store i32 %32, i32* %i, align 4
  br label %while.body

while.end:                                        ; preds = %if.then
  %33 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data13 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %33, i32 0, i32 0
  %34 = load i32*, i32** %data13, align 4
  %35 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len14 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %35, i32 0, i32 3
  %36 = load i32, i32* %len14, align 4
  %arrayidx15 = getelementptr inbounds i32, i32* %34, i32 %36
  %37 = load i32, i32* %arrayidx15, align 4
  %38 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data16 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %38, i32 0, i32 0
  %39 = load i32*, i32** %data16, align 4
  %40 = load i32, i32* %i, align 4
  %arrayidx17 = getelementptr inbounds i32, i32* %39, i32 %40
  store i32 %37, i32* %arrayidx17, align 4
  %41 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio18 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %41, i32 0, i32 1
  %42 = load i32*, i32** %prio18, align 4
  %43 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len19 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %43, i32 0, i32 3
  %44 = load i32, i32* %len19, align 4
  %arrayidx20 = getelementptr inbounds i32, i32* %42, i32 %44
  %45 = load i32, i32* %arrayidx20, align 4
  %46 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio21 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %46, i32 0, i32 1
  %47 = load i32*, i32** %prio21, align 4
  %48 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds i32, i32* %47, i32 %48
  store i32 %45, i32* %arrayidx22, align 4
  %49 = load i32, i32* %i, align 4
  %50 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %index23 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %50, i32 0, i32 2
  %51 = load i32*, i32** %index23, align 4
  %52 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data24 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %52, i32 0, i32 0
  %53 = load i32*, i32** %data24, align 4
  %54 = load i32, i32* %i, align 4
  %arrayidx25 = getelementptr inbounds i32, i32* %53, i32 %54
  %55 = load i32, i32* %arrayidx25, align 4
  %arrayidx26 = getelementptr inbounds i32, i32* %51, i32 %55
  store i32 %49, i32* %arrayidx26, align 4
  %56 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len27 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %56, i32 0, i32 3
  %57 = load i32, i32* %len27, align 4
  %dec = add nsw i32 %57, -1
  store i32 %dec, i32* %len27, align 4
  %58 = load i32, i32* %v, align 4
  ret i32 %58
}

; Function Attrs: noinline nounwind optnone
define hidden void @dijkstra(%struct.graph_t* %g, i32 %a, i32 %b) #0 {
entry:
  %g.addr = alloca %struct.graph_t*, align 4
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %v = alloca %struct.vertex_t*, align 4
  %v2 = alloca %struct.vertex_t*, align 4
  %h = alloca %struct.heap_t*, align 4
  %e = alloca %struct.edge_t*, align 4
  %u = alloca %struct.vertex_t*, align 4
  store %struct.graph_t* %g, %struct.graph_t** %g.addr, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  %0 = load i32, i32* %a.addr, align 4
  %sub = sub nsw i32 %0, 97
  store i32 %sub, i32* %a.addr, align 4
  %1 = load i32, i32* %b.addr, align 4
  %sub1 = sub nsw i32 %1, 97
  store i32 %sub1, i32* %b.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_len = getelementptr inbounds %struct.graph_t, %struct.graph_t* %3, i32 0, i32 1
  %4 = load i32, i32* %vertices_len, align 4
  %cmp = icmp slt i32 %2, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices = getelementptr inbounds %struct.graph_t, %struct.graph_t* %5, i32 0, i32 0
  %6 = load %struct.vertex_t**, %struct.vertex_t*** %vertices, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %6, i32 %7
  %8 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx, align 4
  store %struct.vertex_t* %8, %struct.vertex_t** %v, align 4
  %9 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %dist = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %9, i32 0, i32 3
  store i32 2147483647, i32* %dist, align 4
  %10 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %prev = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %10, i32 0, i32 4
  store i32 0, i32* %prev, align 4
  %11 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %visited = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %11, i32 0, i32 5
  store i32 0, i32* %visited, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %i, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %13 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices3 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %13, i32 0, i32 0
  %14 = load %struct.vertex_t**, %struct.vertex_t*** %vertices3, align 4
  %15 = load i32, i32* %a.addr, align 4
  %arrayidx4 = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %14, i32 %15
  %16 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx4, align 4
  store %struct.vertex_t* %16, %struct.vertex_t** %v2, align 4
  %17 = load %struct.vertex_t*, %struct.vertex_t** %v2, align 4
  %dist5 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %17, i32 0, i32 3
  store i32 0, i32* %dist5, align 4
  %18 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_len6 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %18, i32 0, i32 1
  %19 = load i32, i32* %vertices_len6, align 4
  %call = call %struct.heap_t* @create_heap(i32 %19)
  store %struct.heap_t* %call, %struct.heap_t** %h, align 4
  %20 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  %21 = load i32, i32* %a.addr, align 4
  %22 = load %struct.vertex_t*, %struct.vertex_t** %v2, align 4
  %dist7 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %22, i32 0, i32 3
  %23 = load i32, i32* %dist7, align 4
  call void @push_heap(%struct.heap_t* %20, i32 %21, i32 %23)
  br label %while.cond

while.cond:                                       ; preds = %for.end35, %for.end
  %24 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  %len = getelementptr inbounds %struct.heap_t, %struct.heap_t* %24, i32 0, i32 3
  %25 = load i32, i32* %len, align 4
  %tobool = icmp ne i32 %25, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %26 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  %call8 = call i32 @pop_heap(%struct.heap_t* %26)
  store i32 %call8, i32* %i, align 4
  %27 = load i32, i32* %i, align 4
  %28 = load i32, i32* %b.addr, align 4
  %cmp9 = icmp eq i32 %27, %28
  br i1 %cmp9, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  br label %while.end

if.end:                                           ; preds = %while.body
  %29 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices10 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %29, i32 0, i32 0
  %30 = load %struct.vertex_t**, %struct.vertex_t*** %vertices10, align 4
  %31 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %30, i32 %31
  %32 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx11, align 4
  store %struct.vertex_t* %32, %struct.vertex_t** %v2, align 4
  %33 = load %struct.vertex_t*, %struct.vertex_t** %v2, align 4
  %visited12 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %33, i32 0, i32 5
  store i32 1, i32* %visited12, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc33, %if.end
  %34 = load i32, i32* %j, align 4
  %35 = load %struct.vertex_t*, %struct.vertex_t** %v2, align 4
  %edges_len = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %35, i32 0, i32 1
  %36 = load i32, i32* %edges_len, align 4
  %cmp14 = icmp slt i32 %34, %36
  br i1 %cmp14, label %for.body15, label %for.end35

for.body15:                                       ; preds = %for.cond13
  %37 = load %struct.vertex_t*, %struct.vertex_t** %v2, align 4
  %edges = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %37, i32 0, i32 0
  %38 = load %struct.edge_t**, %struct.edge_t*** %edges, align 4
  %39 = load i32, i32* %j, align 4
  %arrayidx16 = getelementptr inbounds %struct.edge_t*, %struct.edge_t** %38, i32 %39
  %40 = load %struct.edge_t*, %struct.edge_t** %arrayidx16, align 4
  store %struct.edge_t* %40, %struct.edge_t** %e, align 4
  %41 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices17 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %41, i32 0, i32 0
  %42 = load %struct.vertex_t**, %struct.vertex_t*** %vertices17, align 4
  %43 = load %struct.edge_t*, %struct.edge_t** %e, align 4
  %vertex = getelementptr inbounds %struct.edge_t, %struct.edge_t* %43, i32 0, i32 0
  %44 = load i32, i32* %vertex, align 4
  %arrayidx18 = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %42, i32 %44
  %45 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx18, align 4
  store %struct.vertex_t* %45, %struct.vertex_t** %u, align 4
  %46 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %visited19 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %46, i32 0, i32 5
  %47 = load i32, i32* %visited19, align 4
  %tobool20 = icmp ne i32 %47, 0
  br i1 %tobool20, label %if.end32, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.body15
  %48 = load %struct.vertex_t*, %struct.vertex_t** %v2, align 4
  %dist21 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %48, i32 0, i32 3
  %49 = load i32, i32* %dist21, align 4
  %50 = load %struct.edge_t*, %struct.edge_t** %e, align 4
  %weight = getelementptr inbounds %struct.edge_t, %struct.edge_t* %50, i32 0, i32 1
  %51 = load i32, i32* %weight, align 4
  %add = add nsw i32 %49, %51
  %52 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %dist22 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %52, i32 0, i32 3
  %53 = load i32, i32* %dist22, align 4
  %cmp23 = icmp sle i32 %add, %53
  br i1 %cmp23, label %if.then24, label %if.end32

if.then24:                                        ; preds = %land.lhs.true
  %54 = load i32, i32* %i, align 4
  %55 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %prev25 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %55, i32 0, i32 4
  store i32 %54, i32* %prev25, align 4
  %56 = load %struct.vertex_t*, %struct.vertex_t** %v2, align 4
  %dist26 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %56, i32 0, i32 3
  %57 = load i32, i32* %dist26, align 4
  %58 = load %struct.edge_t*, %struct.edge_t** %e, align 4
  %weight27 = getelementptr inbounds %struct.edge_t, %struct.edge_t* %58, i32 0, i32 1
  %59 = load i32, i32* %weight27, align 4
  %add28 = add nsw i32 %57, %59
  %60 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %dist29 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %60, i32 0, i32 3
  store i32 %add28, i32* %dist29, align 4
  %61 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  %62 = load %struct.edge_t*, %struct.edge_t** %e, align 4
  %vertex30 = getelementptr inbounds %struct.edge_t, %struct.edge_t* %62, i32 0, i32 0
  %63 = load i32, i32* %vertex30, align 4
  %64 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %dist31 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %64, i32 0, i32 3
  %65 = load i32, i32* %dist31, align 4
  call void @push_heap(%struct.heap_t* %61, i32 %63, i32 %65)
  br label %if.end32

if.end32:                                         ; preds = %if.then24, %land.lhs.true, %for.body15
  br label %for.inc33

for.inc33:                                        ; preds = %if.end32
  %66 = load i32, i32* %j, align 4
  %inc34 = add nsw i32 %66, 1
  store i32 %inc34, i32* %j, align 4
  br label %for.cond13

for.end35:                                        ; preds = %for.cond13
  br label %while.cond

while.end:                                        ; preds = %if.then, %while.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @print_path(%struct.graph_t* %g, i32 %i) #0 {
entry:
  %g.addr = alloca %struct.graph_t*, align 4
  %i.addr = alloca i32, align 4
  %n = alloca i32, align 4
  %j = alloca i32, align 4
  %v = alloca %struct.vertex_t*, align 4
  %u = alloca %struct.vertex_t*, align 4
  %path = alloca i8*, align 4
  store %struct.graph_t* %g, %struct.graph_t** %g.addr, align 4
  store i32 %i, i32* %i.addr, align 4
  %0 = load i32, i32* %i.addr, align 4
  %sub = sub nsw i32 %0, 97
  store i32 %sub, i32* %i.addr, align 4
  %1 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices = getelementptr inbounds %struct.graph_t, %struct.graph_t* %1, i32 0, i32 0
  %2 = load %struct.vertex_t**, %struct.vertex_t*** %vertices, align 4
  %3 = load i32, i32* %i.addr, align 4
  %arrayidx = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %2, i32 %3
  %4 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx, align 4
  store %struct.vertex_t* %4, %struct.vertex_t** %v, align 4
  %5 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %dist = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %5, i32 0, i32 3
  %6 = load i32, i32* %dist, align 4
  %cmp = icmp eq i32 %6, 2147483647
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0))
  br label %return

if.end:                                           ; preds = %entry
  store i32 1, i32* %n, align 4
  %7 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  store %struct.vertex_t* %7, %struct.vertex_t** %u, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %8 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %dist1 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %8, i32 0, i32 3
  %9 = load i32, i32* %dist1, align 4
  %tobool = icmp ne i32 %9, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices2 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %10, i32 0, i32 0
  %11 = load %struct.vertex_t**, %struct.vertex_t*** %vertices2, align 4
  %12 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %prev = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %12, i32 0, i32 4
  %13 = load i32, i32* %prev, align 4
  %arrayidx3 = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %11, i32 %13
  %14 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx3, align 4
  store %struct.vertex_t* %14, %struct.vertex_t** %u, align 4
  %15 = load i32, i32* %n, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %16 = load i32, i32* %n, align 4
  %call4 = call noalias i8* @malloc(i32 %16)
  store i8* %call4, i8** %path, align 4
  %17 = load i32, i32* %i.addr, align 4
  %add = add nsw i32 97, %17
  %conv = trunc i32 %add to i8
  %18 = load i8*, i8** %path, align 4
  %19 = load i32, i32* %n, align 4
  %sub5 = sub nsw i32 %19, 1
  %arrayidx6 = getelementptr inbounds i8, i8* %18, i32 %sub5
  store i8 %conv, i8* %arrayidx6, align 1
  store i32 0, i32* %j, align 4
  %20 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  store %struct.vertex_t* %20, %struct.vertex_t** %u, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc17, %for.end
  %21 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %dist8 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %21, i32 0, i32 3
  %22 = load i32, i32* %dist8, align 4
  %tobool9 = icmp ne i32 %22, 0
  br i1 %tobool9, label %for.body10, label %for.end22

for.body10:                                       ; preds = %for.cond7
  %23 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %prev11 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %23, i32 0, i32 4
  %24 = load i32, i32* %prev11, align 4
  %add12 = add nsw i32 97, %24
  %conv13 = trunc i32 %add12 to i8
  %25 = load i8*, i8** %path, align 4
  %26 = load i32, i32* %n, align 4
  %27 = load i32, i32* %j, align 4
  %sub14 = sub nsw i32 %26, %27
  %sub15 = sub nsw i32 %sub14, 2
  %arrayidx16 = getelementptr inbounds i8, i8* %25, i32 %sub15
  store i8 %conv13, i8* %arrayidx16, align 1
  br label %for.inc17

for.inc17:                                        ; preds = %for.body10
  %28 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices18 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %28, i32 0, i32 0
  %29 = load %struct.vertex_t**, %struct.vertex_t*** %vertices18, align 4
  %30 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %prev19 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %30, i32 0, i32 4
  %31 = load i32, i32* %prev19, align 4
  %arrayidx20 = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %29, i32 %31
  %32 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx20, align 4
  store %struct.vertex_t* %32, %struct.vertex_t** %u, align 4
  %33 = load i32, i32* %j, align 4
  %inc21 = add nsw i32 %33, 1
  store i32 %inc21, i32* %j, align 4
  br label %for.cond7

for.end22:                                        ; preds = %for.cond7
  %34 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %dist23 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %34, i32 0, i32 3
  %35 = load i32, i32* %dist23, align 4
  %36 = load i32, i32* %n, align 4
  %37 = load i8*, i8** %path, align 4
  %call24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i32 0, i32 0), i32 %35, i32 %36, i8* %37)
  br label %return

return:                                           ; preds = %for.end22, %if.then
  ret void
}

declare i32 @printf(i8* %0, ...) #1

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %g = alloca %struct.graph_t*, align 4
  store i32 0, i32* %retval, align 4
  %call = call noalias i8* @calloc(i32 1, i32 12)
  %0 = bitcast i8* %call to %struct.graph_t*
  store %struct.graph_t* %0, %struct.graph_t** %g, align 4
  %1 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %1, i32 97, i32 98, i32 7)
  %2 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %2, i32 97, i32 99, i32 9)
  %3 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %3, i32 97, i32 102, i32 14)
  %4 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %4, i32 98, i32 99, i32 10)
  %5 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %5, i32 98, i32 100, i32 15)
  %6 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %6, i32 99, i32 100, i32 11)
  %7 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %7, i32 99, i32 102, i32 2)
  %8 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %8, i32 100, i32 101, i32 6)
  %9 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %9, i32 101, i32 102, i32 9)
  %10 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @dijkstra(%struct.graph_t* %10, i32 97, i32 101)
  %11 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @print_path(%struct.graph_t* %11, i32 101)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %vertices_size, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %2, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %1, %add
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1
%3:i1 = slt %0, %2
infer %3

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %vertices_size1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %4, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %i.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp sgt i32 %mul, %5
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw 2:i32, %1
%3:i1 = slt %0, %2
infer %3

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %vertices_size3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul4 = mul nsw i32 %7, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %i.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add5 = add nsw i32 %8, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cond = phi i32 [ %mul4, %cond.true ], [ %add5, %cond.false ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = mulnsw 2:i32, %1
%3:i32 = var
%4:i32 = addnsw 4:i32, %3
%5:i32 = phi %0, %2, %4
infer %5

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %size, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul6 = mul i32 %12, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %vertices_size8, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %size, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp9 = icmp slt i32 %17, %18
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %22, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %size, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %i.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne %struct.vertex_t* %28, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %i.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %vertices_len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc18 = add nsw i32 %34, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1
%3:i1 = slt %0, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mulnsw 2:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = mulnsw 2:i32, %1
%3:i1 = slt %0, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 4:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 4
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 5
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = mulnsw 2:i32, %1
%3:i32 = var
%4:i32 = addnsw 4:i32, %3
%5:i32 = phi %0, %2, %4
infer %5


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 4
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = mulnsw 2:i32, %0

Cost = 1
second query is SAT-- constant doesn't work

--------------------------------
guess 4

%0:i32 = var
%1:i32 = addnsw 4:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 5 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for add_vertex()

; entering Souper's runOnFunction() for add_edge()

; ModuleID = './Dijkstras_algorithm.c.bc'
source_filename = "./Dijkstras_algorithm.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.graph_t = type { %struct.vertex_t**, i32, i32 }
%struct.vertex_t = type { %struct.edge_t**, i32, i32, i32, i32, i32 }
%struct.edge_t = type { i32, i32 }
%struct.heap_t = type { i32*, i32*, i32*, i32, i32 }

@.str = private unnamed_addr constant [9 x i8] c"no path\0A\00", align 1
@.str.1 = private unnamed_addr constant [9 x i8] c"%d %.*s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @add_vertex(%struct.graph_t* %g, i32 %i) #0 {
entry:
  %g.addr = alloca %struct.graph_t*, align 4
  %i.addr = alloca i32, align 4
  %size = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.graph_t* %g, %struct.graph_t** %g.addr, align 4
  store i32 %i, i32* %i.addr, align 4
  %0 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_size = getelementptr inbounds %struct.graph_t, %struct.graph_t* %0, i32 0, i32 2
  %1 = load i32, i32* %vertices_size, align 4
  %2 = load i32, i32* %i.addr, align 4
  %add = add nsw i32 %2, 1
  %cmp = icmp slt i32 %1, %add
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_size1 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %3, i32 0, i32 2
  %4 = load i32, i32* %vertices_size1, align 4
  %mul = mul nsw i32 %4, 2
  %5 = load i32, i32* %i.addr, align 4
  %cmp2 = icmp sgt i32 %mul, %5
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %6 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_size3 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %6, i32 0, i32 2
  %7 = load i32, i32* %vertices_size3, align 4
  %mul4 = mul nsw i32 %7, 2
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %8 = load i32, i32* %i.addr, align 4
  %add5 = add nsw i32 %8, 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %mul4, %cond.true ], [ %add5, %cond.false ]
  store i32 %cond, i32* %size, align 4
  %9 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices = getelementptr inbounds %struct.graph_t, %struct.graph_t* %9, i32 0, i32 0
  %10 = load %struct.vertex_t**, %struct.vertex_t*** %vertices, align 4
  %11 = bitcast %struct.vertex_t** %10 to i8*
  %12 = load i32, i32* %size, align 4
  %mul6 = mul i32 %12, 4
  %call = call i8* @realloc(i8* %11, i32 %mul6)
  %13 = bitcast i8* %call to %struct.vertex_t**
  %14 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices7 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %14, i32 0, i32 0
  store %struct.vertex_t** %13, %struct.vertex_t*** %vertices7, align 4
  %15 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_size8 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %15, i32 0, i32 2
  %16 = load i32, i32* %vertices_size8, align 4
  store i32 %16, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %cond.end
  %17 = load i32, i32* %j, align 4
  %18 = load i32, i32* %size, align 4
  %cmp9 = icmp slt i32 %17, %18
  br i1 %cmp9, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %19 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices10 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %19, i32 0, i32 0
  %20 = load %struct.vertex_t**, %struct.vertex_t*** %vertices10, align 4
  %21 = load i32, i32* %j, align 4
  %arrayidx = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %20, i32 %21
  store %struct.vertex_t* null, %struct.vertex_t** %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %22 = load i32, i32* %j, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %23 = load i32, i32* %size, align 4
  %24 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_size11 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %24, i32 0, i32 2
  store i32 %23, i32* %vertices_size11, align 4
  br label %if.end

if.end:                                           ; preds = %for.end, %entry
  %25 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices12 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %25, i32 0, i32 0
  %26 = load %struct.vertex_t**, %struct.vertex_t*** %vertices12, align 4
  %27 = load i32, i32* %i.addr, align 4
  %arrayidx13 = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %26, i32 %27
  %28 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx13, align 4
  %tobool = icmp ne %struct.vertex_t* %28, null
  br i1 %tobool, label %if.end19, label %if.then14

if.then14:                                        ; preds = %if.end
  %call15 = call noalias i8* @calloc(i32 1, i32 24)
  %29 = bitcast i8* %call15 to %struct.vertex_t*
  %30 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices16 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %30, i32 0, i32 0
  %31 = load %struct.vertex_t**, %struct.vertex_t*** %vertices16, align 4
  %32 = load i32, i32* %i.addr, align 4
  %arrayidx17 = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %31, i32 %32
  store %struct.vertex_t* %29, %struct.vertex_t** %arrayidx17, align 4
  %33 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_len = getelementptr inbounds %struct.graph_t, %struct.graph_t* %33, i32 0, i32 1
  %34 = load i32, i32* %vertices_len, align 4
  %inc18 = add nsw i32 %34, 1
  store i32 %inc18, i32* %vertices_len, align 4
  br label %if.end19

if.end19:                                         ; preds = %if.then14, %if.end
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

declare noalias i8* @calloc(i32 %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @add_edge(%struct.graph_t* %g, i32 %a, i32 %b, i32 %w) #0 {
entry:
  %g.addr = alloca %struct.graph_t*, align 4
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %w.addr = alloca i32, align 4
  %v = alloca %struct.vertex_t*, align 4
  %e = alloca %struct.edge_t*, align 4
  store %struct.graph_t* %g, %struct.graph_t** %g.addr, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  store i32 %w, i32* %w.addr, align 4
  %0 = load i32, i32* %a.addr, align 4
  %sub = sub nsw i32 %0, 97
  store i32 %sub, i32* %a.addr, align 4
  %1 = load i32, i32* %b.addr, align 4
  %sub1 = sub nsw i32 %1, 97
  store i32 %sub1, i32* %b.addr, align 4
  %2 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %3 = load i32, i32* %a.addr, align 4
  call void @add_vertex(%struct.graph_t* %2, i32 %3)
  %4 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %5 = load i32, i32* %b.addr, align 4
  call void @add_vertex(%struct.graph_t* %4, i32 %5)
  %6 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices = getelementptr inbounds %struct.graph_t, %struct.graph_t* %6, i32 0, i32 0
  %7 = load %struct.vertex_t**, %struct.vertex_t*** %vertices, align 4
  %8 = load i32, i32* %a.addr, align 4
  %arrayidx = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %7, i32 %8
  %9 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx, align 4
  store %struct.vertex_t* %9, %struct.vertex_t** %v, align 4
  %10 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges_len = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %10, i32 0, i32 1
  %11 = load i32, i32* %edges_len, align 4
  %12 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges_size = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %12, i32 0, i32 2
  %13 = load i32, i32* %edges_size, align 4
  %cmp = icmp sge i32 %11, %13
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %14 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges_size2 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %14, i32 0, i32 2
  %15 = load i32, i32* %edges_size2, align 4
  %tobool = icmp ne i32 %15, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %16 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges_size3 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %16, i32 0, i32 2
  %17 = load i32, i32* %edges_size3, align 4
  %mul = mul nsw i32 %17, 2
  br label %cond.end

cond.false:                                       ; preds = %if.then
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %mul, %cond.true ], [ 4, %cond.false ]
  %18 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges_size4 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %18, i32 0, i32 2
  store i32 %cond, i32* %edges_size4, align 4
  %19 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %19, i32 0, i32 0
  %20 = load %struct.edge_t**, %struct.edge_t*** %edges, align 4
  %21 = bitcast %struct.edge_t** %20 to i8*
  %22 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges_size5 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %22, i32 0, i32 2
  %23 = load i32, i32* %edges_size5, align 4
  %mul6 = mul i32 %23, 4
  %call = call i8* @realloc(i8* %21, i32 %mul6)
  %24 = bitcast i8* %call to %struct.edge_t**
  %25 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges7 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %25, i32 0, i32 0
  store %struct.edge_t** %24, %struct.edge_t*** %edges7, align 4
  br label %if.end

if.end:                                           ; preds = %cond.end, %entry
  %call8 = call noalias i8* @calloc(i32 1, i32 8)
  %26 = bitcast i8* %call8 to %struct.edge_t*
  store %struct.edge_t* %26, %struct.edge_t** %e, align 4
  %27 = load i32, i32* %b.addr, align 4
  %28 = load %struct.edge_t*, %struct.edge_t** %e, align 4
  %vertex = getelementptr inbounds %struct.edge_t, %struct.edge_t* %28, i32 0, i32 0
  store i32 %27, i32* %vertex, align 4
  %29 = load i32, i32* %w.addr, align 4
  %30 = load %struct.edge_t*, %struct.edge_t** %e, align 4
  %weight = getelementptr inbounds %struct.edge_t, %struct.edge_t* %30, i32 0, i32 1
  store i32 %29, i32* %weight, align 4
  %31 = load %struct.edge_t*, %struct.edge_t** %e, align 4
  %32 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges9 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %32, i32 0, i32 0
  %33 = load %struct.edge_t**, %struct.edge_t*** %edges9, align 4
  %34 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges_len10 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %34, i32 0, i32 1
  %35 = load i32, i32* %edges_len10, align 4
  %inc = add nsw i32 %35, 1
  store i32 %inc, i32* %edges_len10, align 4
  %arrayidx11 = getelementptr inbounds %struct.edge_t*, %struct.edge_t** %33, i32 %35
  store %struct.edge_t* %31, %struct.edge_t** %arrayidx11, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.heap_t* @create_heap(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %h = alloca %struct.heap_t*, align 4
  store i32 %n, i32* %n.addr, align 4
  %call = call noalias i8* @calloc(i32 1, i32 20)
  %0 = bitcast i8* %call to %struct.heap_t*
  store %struct.heap_t* %0, %struct.heap_t** %h, align 4
  %1 = load i32, i32* %n.addr, align 4
  %add = add nsw i32 %1, 1
  %call1 = call noalias i8* @calloc(i32 %add, i32 4)
  %2 = bitcast i8* %call1 to i32*
  %3 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  %data = getelementptr inbounds %struct.heap_t, %struct.heap_t* %3, i32 0, i32 0
  store i32* %2, i32** %data, align 4
  %4 = load i32, i32* %n.addr, align 4
  %add2 = add nsw i32 %4, 1
  %call3 = call noalias i8* @calloc(i32 %add2, i32 4)
  %5 = bitcast i8* %call3 to i32*
  %6 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  %prio = getelementptr inbounds %struct.heap_t, %struct.heap_t* %6, i32 0, i32 1
  store i32* %5, i32** %prio, align 4
  %7 = load i32, i32* %n.addr, align 4
  %call4 = call noalias i8* @calloc(i32 %7, i32 4)
  %8 = bitcast i8* %call4 to i32*
  %9 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  %index = getelementptr inbounds %struct.heap_t, %struct.heap_t* %9, i32 0, i32 2
  store i32* %8, i32** %index, align 4
  %10 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  ret %struct.heap_t* %10
}

; Function Attrs: noinline nounwind optnone
define hidden void @push_heap(%struct.heap_t* %h, i32 %v, i32 %p) #0 {
entry:
  %h.addr = alloca %struct.heap_t*, align 4
  %v.addr = alloca i32, align 4
  %p.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.heap_t* %h, %struct.heap_t** %h.addr, align 4
  store i32 %v, i32* %v.addr, align 4
  store i32 %p, i32* %p.addr, align 4
  %0 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %index = getelementptr inbounds %struct.heap_t, %struct.heap_t* %0, i32 0, i32 2
  %1 = load i32*, i32** %index, align 4
  %2 = load i32, i32* %v.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 %2
  %3 = load i32, i32* %arrayidx, align 4
  %cmp = icmp eq i32 %3, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %4 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len = getelementptr inbounds %struct.heap_t, %struct.heap_t* %4, i32 0, i32 3
  %5 = load i32, i32* %len, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %len, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  %6 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %index1 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %6, i32 0, i32 2
  %7 = load i32*, i32** %index1, align 4
  %8 = load i32, i32* %v.addr, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %7, i32 %8
  %9 = load i32, i32* %arrayidx2, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %inc, %cond.true ], [ %9, %cond.false ]
  store i32 %cond, i32* %i, align 4
  %10 = load i32, i32* %i, align 4
  %div = sdiv i32 %10, 2
  store i32 %div, i32* %j, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %cond.end
  %11 = load i32, i32* %i, align 4
  %cmp3 = icmp sgt i32 %11, 1
  br i1 %cmp3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %12 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio = getelementptr inbounds %struct.heap_t, %struct.heap_t* %12, i32 0, i32 1
  %13 = load i32*, i32** %prio, align 4
  %14 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %13, i32 %14
  %15 = load i32, i32* %arrayidx4, align 4
  %16 = load i32, i32* %p.addr, align 4
  %cmp5 = icmp slt i32 %15, %16
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  br label %while.end

if.end:                                           ; preds = %while.body
  %17 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data = getelementptr inbounds %struct.heap_t, %struct.heap_t* %17, i32 0, i32 0
  %18 = load i32*, i32** %data, align 4
  %19 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds i32, i32* %18, i32 %19
  %20 = load i32, i32* %arrayidx6, align 4
  %21 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data7 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %21, i32 0, i32 0
  %22 = load i32*, i32** %data7, align 4
  %23 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %22, i32 %23
  store i32 %20, i32* %arrayidx8, align 4
  %24 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio9 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %24, i32 0, i32 1
  %25 = load i32*, i32** %prio9, align 4
  %26 = load i32, i32* %j, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %25, i32 %26
  %27 = load i32, i32* %arrayidx10, align 4
  %28 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio11 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %28, i32 0, i32 1
  %29 = load i32*, i32** %prio11, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds i32, i32* %29, i32 %30
  store i32 %27, i32* %arrayidx12, align 4
  %31 = load i32, i32* %i, align 4
  %32 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %index13 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %32, i32 0, i32 2
  %33 = load i32*, i32** %index13, align 4
  %34 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data14 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %34, i32 0, i32 0
  %35 = load i32*, i32** %data14, align 4
  %36 = load i32, i32* %i, align 4
  %arrayidx15 = getelementptr inbounds i32, i32* %35, i32 %36
  %37 = load i32, i32* %arrayidx15, align 4
  %arrayidx16 = getelementptr inbounds i32, i32* %33, i32 %37
  store i32 %31, i32* %arrayidx16, align 4
  %38 = load i32, i32* %j, align 4
  store i32 %38, i32* %i, align 4
  %39 = load i32, i32* %j, align 4
  %div17 = sdiv i32 %39, 2
  store i32 %div17, i32* %j, align 4
  br label %while.cond

while.end:                                        ; preds = %if.then, %while.cond
  %40 = load i32, i32* %v.addr, align 4
  %41 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data18 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %41, i32 0, i32 0
  %42 = load i32*, i32** %data18, align 4
  %43 = load i32, i32* %i, align 4
  %arrayidx19 = getelementptr inbounds i32, i32* %42, i32 %43
  store i32 %40, i32* %arrayidx19, align 4
  %44 = load i32, i32* %p.addr, align 4
  %45 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio20 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %45, i32 0, i32 1
  %46 = load i32*, i32** %prio20, align 4
  %47 = load i32, i32* %i, align 4
  %arrayidx21 = getelementptr inbounds i32, i32* %46, i32 %47
  store i32 %44, i32* %arrayidx21, align 4
  %48 = load i32, i32* %i, align 4
  %49 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %index22 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %49, i32 0, i32 2
  %50 = load i32*, i32** %index22, align 4
  %51 = load i32, i32* %v.addr, align 4
  %arrayidx23 = getelementptr inbounds i32, i32* %50, i32 %51
  store i32 %48, i32* %arrayidx23, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @min(%struct.heap_t* %h, i32 %i, i32 %j, i32 %k) #0 {
entry:
  %h.addr = alloca %struct.heap_t*, align 4
  %i.addr = alloca i32, align 4
  %j.addr = alloca i32, align 4
  %k.addr = alloca i32, align 4
  %m = alloca i32, align 4
  store %struct.heap_t* %h, %struct.heap_t** %h.addr, align 4
  store i32 %i, i32* %i.addr, align 4
  store i32 %j, i32* %j.addr, align 4
  store i32 %k, i32* %k.addr, align 4
  %0 = load i32, i32* %i.addr, align 4
  store i32 %0, i32* %m, align 4
  %1 = load i32, i32* %j.addr, align 4
  %2 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len = getelementptr inbounds %struct.heap_t, %struct.heap_t* %2, i32 0, i32 3
  %3 = load i32, i32* %len, align 4
  %cmp = icmp sle i32 %1, %3
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio = getelementptr inbounds %struct.heap_t, %struct.heap_t* %4, i32 0, i32 1
  %5 = load i32*, i32** %prio, align 4
  %6 = load i32, i32* %j.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %5, i32 %6
  %7 = load i32, i32* %arrayidx, align 4
  %8 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio1 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %8, i32 0, i32 1
  %9 = load i32*, i32** %prio1, align 4
  %10 = load i32, i32* %m, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %9, i32 %10
  %11 = load i32, i32* %arrayidx2, align 4
  %cmp3 = icmp slt i32 %7, %11
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %12 = load i32, i32* %j.addr, align 4
  store i32 %12, i32* %m, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %13 = load i32, i32* %k.addr, align 4
  %14 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len4 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %14, i32 0, i32 3
  %15 = load i32, i32* %len4, align 4
  %cmp5 = icmp sle i32 %13, %15
  br i1 %cmp5, label %land.lhs.true6, label %if.end13

land.lhs.true6:                                   ; preds = %if.end
  %16 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio7 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %16, i32 0, i32 1
  %17 = load i32*, i32** %prio7, align 4
  %18 = load i32, i32* %k.addr, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %17, i32 %18
  %19 = load i32, i32* %arrayidx8, align 4
  %20 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio9 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %20, i32 0, i32 1
  %21 = load i32*, i32** %prio9, align 4
  %22 = load i32, i32* %m, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %21, i32 %22
  %23 = load i32, i32* %arrayidx10, align 4
  %cmp11 = icmp slt i32 %19, %23
  br i1 %cmp11, label %if.then12, label %if.end13

if.then12:                                        ; preds = %land.lhs.true6
  %24 = load i32, i32* %k.addr, align 4
  store i32 %24, i32* %m, align 4
  br label %if.end13

if.end13:                                         ; preds = %if.then12, %land.lhs.true6, %if.end
  %25 = load i32, i32* %m, align 4
  ret i32 %25
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @pop_heap(%struct.heap_t* %h) #0 {
entry:
  %h.addr = alloca %struct.heap_t*, align 4
  %v = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.heap_t* %h, %struct.heap_t** %h.addr, align 4
  %0 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data = getelementptr inbounds %struct.heap_t, %struct.heap_t* %0, i32 0, i32 0
  %1 = load i32*, i32** %data, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 1
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %v, align 4
  store i32 1, i32* %i, align 4
  br label %while.body

while.body:                                       ; preds = %entry, %if.end
  %3 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %4 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len = getelementptr inbounds %struct.heap_t, %struct.heap_t* %4, i32 0, i32 3
  %5 = load i32, i32* %len, align 4
  %6 = load i32, i32* %i, align 4
  %mul = mul nsw i32 2, %6
  %7 = load i32, i32* %i, align 4
  %mul1 = mul nsw i32 2, %7
  %add = add nsw i32 %mul1, 1
  %call = call i32 @min(%struct.heap_t* %3, i32 %5, i32 %mul, i32 %add)
  store i32 %call, i32* %j, align 4
  %8 = load i32, i32* %j, align 4
  %9 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len2 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %9, i32 0, i32 3
  %10 = load i32, i32* %len2, align 4
  %cmp = icmp eq i32 %8, %10
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  br label %while.end

if.end:                                           ; preds = %while.body
  %11 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data3 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %11, i32 0, i32 0
  %12 = load i32*, i32** %data3, align 4
  %13 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %12, i32 %13
  %14 = load i32, i32* %arrayidx4, align 4
  %15 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data5 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %15, i32 0, i32 0
  %16 = load i32*, i32** %data5, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds i32, i32* %16, i32 %17
  store i32 %14, i32* %arrayidx6, align 4
  %18 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio = getelementptr inbounds %struct.heap_t, %struct.heap_t* %18, i32 0, i32 1
  %19 = load i32*, i32** %prio, align 4
  %20 = load i32, i32* %j, align 4
  %arrayidx7 = getelementptr inbounds i32, i32* %19, i32 %20
  %21 = load i32, i32* %arrayidx7, align 4
  %22 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio8 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %22, i32 0, i32 1
  %23 = load i32*, i32** %prio8, align 4
  %24 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds i32, i32* %23, i32 %24
  store i32 %21, i32* %arrayidx9, align 4
  %25 = load i32, i32* %i, align 4
  %26 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %index = getelementptr inbounds %struct.heap_t, %struct.heap_t* %26, i32 0, i32 2
  %27 = load i32*, i32** %index, align 4
  %28 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data10 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %28, i32 0, i32 0
  %29 = load i32*, i32** %data10, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds i32, i32* %29, i32 %30
  %31 = load i32, i32* %arrayidx11, align 4
  %arrayidx12 = getelementptr inbounds i32, i32* %27, i32 %31
  store i32 %25, i32* %arrayidx12, align 4
  %32 = load i32, i32* %j, align 4
  store i32 %32, i32* %i, align 4
  br label %while.body

while.end:                                        ; preds = %if.then
  %33 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data13 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %33, i32 0, i32 0
  %34 = load i32*, i32** %data13, align 4
  %35 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len14 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %35, i32 0, i32 3
  %36 = load i32, i32* %len14, align 4
  %arrayidx15 = getelementptr inbounds i32, i32* %34, i32 %36
  %37 = load i32, i32* %arrayidx15, align 4
  %38 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data16 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %38, i32 0, i32 0
  %39 = load i32*, i32** %data16, align 4
  %40 = load i32, i32* %i, align 4
  %arrayidx17 = getelementptr inbounds i32, i32* %39, i32 %40
  store i32 %37, i32* %arrayidx17, align 4
  %41 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio18 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %41, i32 0, i32 1
  %42 = load i32*, i32** %prio18, align 4
  %43 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len19 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %43, i32 0, i32 3
  %44 = load i32, i32* %len19, align 4
  %arrayidx20 = getelementptr inbounds i32, i32* %42, i32 %44
  %45 = load i32, i32* %arrayidx20, align 4
  %46 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio21 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %46, i32 0, i32 1
  %47 = load i32*, i32** %prio21, align 4
  %48 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds i32, i32* %47, i32 %48
  store i32 %45, i32* %arrayidx22, align 4
  %49 = load i32, i32* %i, align 4
  %50 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %index23 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %50, i32 0, i32 2
  %51 = load i32*, i32** %index23, align 4
  %52 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data24 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %52, i32 0, i32 0
  %53 = load i32*, i32** %data24, align 4
  %54 = load i32, i32* %i, align 4
  %arrayidx25 = getelementptr inbounds i32, i32* %53, i32 %54
  %55 = load i32, i32* %arrayidx25, align 4
  %arrayidx26 = getelementptr inbounds i32, i32* %51, i32 %55
  store i32 %49, i32* %arrayidx26, align 4
  %56 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len27 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %56, i32 0, i32 3
  %57 = load i32, i32* %len27, align 4
  %dec = add nsw i32 %57, -1
  store i32 %dec, i32* %len27, align 4
  %58 = load i32, i32* %v, align 4
  ret i32 %58
}

; Function Attrs: noinline nounwind optnone
define hidden void @dijkstra(%struct.graph_t* %g, i32 %a, i32 %b) #0 {
entry:
  %g.addr = alloca %struct.graph_t*, align 4
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %v = alloca %struct.vertex_t*, align 4
  %v2 = alloca %struct.vertex_t*, align 4
  %h = alloca %struct.heap_t*, align 4
  %e = alloca %struct.edge_t*, align 4
  %u = alloca %struct.vertex_t*, align 4
  store %struct.graph_t* %g, %struct.graph_t** %g.addr, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  %0 = load i32, i32* %a.addr, align 4
  %sub = sub nsw i32 %0, 97
  store i32 %sub, i32* %a.addr, align 4
  %1 = load i32, i32* %b.addr, align 4
  %sub1 = sub nsw i32 %1, 97
  store i32 %sub1, i32* %b.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_len = getelementptr inbounds %struct.graph_t, %struct.graph_t* %3, i32 0, i32 1
  %4 = load i32, i32* %vertices_len, align 4
  %cmp = icmp slt i32 %2, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices = getelementptr inbounds %struct.graph_t, %struct.graph_t* %5, i32 0, i32 0
  %6 = load %struct.vertex_t**, %struct.vertex_t*** %vertices, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %6, i32 %7
  %8 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx, align 4
  store %struct.vertex_t* %8, %struct.vertex_t** %v, align 4
  %9 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %dist = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %9, i32 0, i32 3
  store i32 2147483647, i32* %dist, align 4
  %10 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %prev = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %10, i32 0, i32 4
  store i32 0, i32* %prev, align 4
  %11 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %visited = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %11, i32 0, i32 5
  store i32 0, i32* %visited, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %i, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %13 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices3 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %13, i32 0, i32 0
  %14 = load %struct.vertex_t**, %struct.vertex_t*** %vertices3, align 4
  %15 = load i32, i32* %a.addr, align 4
  %arrayidx4 = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %14, i32 %15
  %16 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx4, align 4
  store %struct.vertex_t* %16, %struct.vertex_t** %v2, align 4
  %17 = load %struct.vertex_t*, %struct.vertex_t** %v2, align 4
  %dist5 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %17, i32 0, i32 3
  store i32 0, i32* %dist5, align 4
  %18 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_len6 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %18, i32 0, i32 1
  %19 = load i32, i32* %vertices_len6, align 4
  %call = call %struct.heap_t* @create_heap(i32 %19)
  store %struct.heap_t* %call, %struct.heap_t** %h, align 4
  %20 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  %21 = load i32, i32* %a.addr, align 4
  %22 = load %struct.vertex_t*, %struct.vertex_t** %v2, align 4
  %dist7 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %22, i32 0, i32 3
  %23 = load i32, i32* %dist7, align 4
  call void @push_heap(%struct.heap_t* %20, i32 %21, i32 %23)
  br label %while.cond

while.cond:                                       ; preds = %for.end35, %for.end
  %24 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  %len = getelementptr inbounds %struct.heap_t, %struct.heap_t* %24, i32 0, i32 3
  %25 = load i32, i32* %len, align 4
  %tobool = icmp ne i32 %25, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %26 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  %call8 = call i32 @pop_heap(%struct.heap_t* %26)
  store i32 %call8, i32* %i, align 4
  %27 = load i32, i32* %i, align 4
  %28 = load i32, i32* %b.addr, align 4
  %cmp9 = icmp eq i32 %27, %28
  br i1 %cmp9, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  br label %while.end

if.end:                                           ; preds = %while.body
  %29 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices10 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %29, i32 0, i32 0
  %30 = load %struct.vertex_t**, %struct.vertex_t*** %vertices10, align 4
  %31 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %30, i32 %31
  %32 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx11, align 4
  store %struct.vertex_t* %32, %struct.vertex_t** %v2, align 4
  %33 = load %struct.vertex_t*, %struct.vertex_t** %v2, align 4
  %visited12 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %33, i32 0, i32 5
  store i32 1, i32* %visited12, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc33, %if.end
  %34 = load i32, i32* %j, align 4
  %35 = load %struct.vertex_t*, %struct.vertex_t** %v2, align 4
  %edges_len = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %35, i32 0, i32 1
  %36 = load i32, i32* %edges_len, align 4
  %cmp14 = icmp slt i32 %34, %36
  br i1 %cmp14, label %for.body15, label %for.end35

for.body15:                                       ; preds = %for.cond13
  %37 = load %struct.vertex_t*, %struct.vertex_t** %v2, align 4
  %edges = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %37, i32 0, i32 0
  %38 = load %struct.edge_t**, %struct.edge_t*** %edges, align 4
  %39 = load i32, i32* %j, align 4
  %arrayidx16 = getelementptr inbounds %struct.edge_t*, %struct.edge_t** %38, i32 %39
  %40 = load %struct.edge_t*, %struct.edge_t** %arrayidx16, align 4
  store %struct.edge_t* %40, %struct.edge_t** %e, align 4
  %41 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices17 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %41, i32 0, i32 0
  %42 = load %struct.vertex_t**, %struct.vertex_t*** %vertices17, align 4
  %43 = load %struct.edge_t*, %struct.edge_t** %e, align 4
  %vertex = getelementptr inbounds %struct.edge_t, %struct.edge_t* %43, i32 0, i32 0
  %44 = load i32, i32* %vertex, align 4
  %arrayidx18 = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %42, i32 %44
  %45 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx18, align 4
  store %struct.vertex_t* %45, %struct.vertex_t** %u, align 4
  %46 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %visited19 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %46, i32 0, i32 5
  %47 = load i32, i32* %visited19, align 4
  %tobool20 = icmp ne i32 %47, 0
  br i1 %tobool20, label %if.end32, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.body15
  %48 = load %struct.vertex_t*, %struct.vertex_t** %v2, align 4
  %dist21 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %48, i32 0, i32 3
  %49 = load i32, i32* %dist21, align 4
  %50 = load %struct.edge_t*, %struct.edge_t** %e, align 4
  %weight = getelementptr inbounds %struct.edge_t, %struct.edge_t* %50, i32 0, i32 1
  %51 = load i32, i32* %weight, align 4
  %add = add nsw i32 %49, %51
  %52 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %dist22 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %52, i32 0, i32 3
  %53 = load i32, i32* %dist22, align 4
  %cmp23 = icmp sle i32 %add, %53
  br i1 %cmp23, label %if.then24, label %if.end32

if.then24:                                        ; preds = %land.lhs.true
  %54 = load i32, i32* %i, align 4
  %55 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %prev25 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %55, i32 0, i32 4
  store i32 %54, i32* %prev25, align 4
  %56 = load %struct.vertex_t*, %struct.vertex_t** %v2, align 4
  %dist26 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %56, i32 0, i32 3
  %57 = load i32, i32* %dist26, align 4
  %58 = load %struct.edge_t*, %struct.edge_t** %e, align 4
  %weight27 = getelementptr inbounds %struct.edge_t, %struct.edge_t* %58, i32 0, i32 1
  %59 = load i32, i32* %weight27, align 4
  %add28 = add nsw i32 %57, %59
  %60 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %dist29 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %60, i32 0, i32 3
  store i32 %add28, i32* %dist29, align 4
  %61 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  %62 = load %struct.edge_t*, %struct.edge_t** %e, align 4
  %vertex30 = getelementptr inbounds %struct.edge_t, %struct.edge_t* %62, i32 0, i32 0
  %63 = load i32, i32* %vertex30, align 4
  %64 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %dist31 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %64, i32 0, i32 3
  %65 = load i32, i32* %dist31, align 4
  call void @push_heap(%struct.heap_t* %61, i32 %63, i32 %65)
  br label %if.end32

if.end32:                                         ; preds = %if.then24, %land.lhs.true, %for.body15
  br label %for.inc33

for.inc33:                                        ; preds = %if.end32
  %66 = load i32, i32* %j, align 4
  %inc34 = add nsw i32 %66, 1
  store i32 %inc34, i32* %j, align 4
  br label %for.cond13

for.end35:                                        ; preds = %for.cond13
  br label %while.cond

while.end:                                        ; preds = %if.then, %while.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @print_path(%struct.graph_t* %g, i32 %i) #0 {
entry:
  %g.addr = alloca %struct.graph_t*, align 4
  %i.addr = alloca i32, align 4
  %n = alloca i32, align 4
  %j = alloca i32, align 4
  %v = alloca %struct.vertex_t*, align 4
  %u = alloca %struct.vertex_t*, align 4
  %path = alloca i8*, align 4
  store %struct.graph_t* %g, %struct.graph_t** %g.addr, align 4
  store i32 %i, i32* %i.addr, align 4
  %0 = load i32, i32* %i.addr, align 4
  %sub = sub nsw i32 %0, 97
  store i32 %sub, i32* %i.addr, align 4
  %1 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices = getelementptr inbounds %struct.graph_t, %struct.graph_t* %1, i32 0, i32 0
  %2 = load %struct.vertex_t**, %struct.vertex_t*** %vertices, align 4
  %3 = load i32, i32* %i.addr, align 4
  %arrayidx = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %2, i32 %3
  %4 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx, align 4
  store %struct.vertex_t* %4, %struct.vertex_t** %v, align 4
  %5 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %dist = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %5, i32 0, i32 3
  %6 = load i32, i32* %dist, align 4
  %cmp = icmp eq i32 %6, 2147483647
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0))
  br label %return

if.end:                                           ; preds = %entry
  store i32 1, i32* %n, align 4
  %7 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  store %struct.vertex_t* %7, %struct.vertex_t** %u, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %8 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %dist1 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %8, i32 0, i32 3
  %9 = load i32, i32* %dist1, align 4
  %tobool = icmp ne i32 %9, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices2 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %10, i32 0, i32 0
  %11 = load %struct.vertex_t**, %struct.vertex_t*** %vertices2, align 4
  %12 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %prev = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %12, i32 0, i32 4
  %13 = load i32, i32* %prev, align 4
  %arrayidx3 = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %11, i32 %13
  %14 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx3, align 4
  store %struct.vertex_t* %14, %struct.vertex_t** %u, align 4
  %15 = load i32, i32* %n, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %16 = load i32, i32* %n, align 4
  %call4 = call noalias i8* @malloc(i32 %16)
  store i8* %call4, i8** %path, align 4
  %17 = load i32, i32* %i.addr, align 4
  %add = add nsw i32 97, %17
  %conv = trunc i32 %add to i8
  %18 = load i8*, i8** %path, align 4
  %19 = load i32, i32* %n, align 4
  %sub5 = sub nsw i32 %19, 1
  %arrayidx6 = getelementptr inbounds i8, i8* %18, i32 %sub5
  store i8 %conv, i8* %arrayidx6, align 1
  store i32 0, i32* %j, align 4
  %20 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  store %struct.vertex_t* %20, %struct.vertex_t** %u, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc17, %for.end
  %21 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %dist8 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %21, i32 0, i32 3
  %22 = load i32, i32* %dist8, align 4
  %tobool9 = icmp ne i32 %22, 0
  br i1 %tobool9, label %for.body10, label %for.end22

for.body10:                                       ; preds = %for.cond7
  %23 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %prev11 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %23, i32 0, i32 4
  %24 = load i32, i32* %prev11, align 4
  %add12 = add nsw i32 97, %24
  %conv13 = trunc i32 %add12 to i8
  %25 = load i8*, i8** %path, align 4
  %26 = load i32, i32* %n, align 4
  %27 = load i32, i32* %j, align 4
  %sub14 = sub nsw i32 %26, %27
  %sub15 = sub nsw i32 %sub14, 2
  %arrayidx16 = getelementptr inbounds i8, i8* %25, i32 %sub15
  store i8 %conv13, i8* %arrayidx16, align 1
  br label %for.inc17

for.inc17:                                        ; preds = %for.body10
  %28 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices18 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %28, i32 0, i32 0
  %29 = load %struct.vertex_t**, %struct.vertex_t*** %vertices18, align 4
  %30 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %prev19 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %30, i32 0, i32 4
  %31 = load i32, i32* %prev19, align 4
  %arrayidx20 = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %29, i32 %31
  %32 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx20, align 4
  store %struct.vertex_t* %32, %struct.vertex_t** %u, align 4
  %33 = load i32, i32* %j, align 4
  %inc21 = add nsw i32 %33, 1
  store i32 %inc21, i32* %j, align 4
  br label %for.cond7

for.end22:                                        ; preds = %for.cond7
  %34 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %dist23 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %34, i32 0, i32 3
  %35 = load i32, i32* %dist23, align 4
  %36 = load i32, i32* %n, align 4
  %37 = load i8*, i8** %path, align 4
  %call24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i32 0, i32 0), i32 %35, i32 %36, i8* %37)
  br label %return

return:                                           ; preds = %for.end22, %if.then
  ret void
}

declare i32 @printf(i8* %0, ...) #1

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %g = alloca %struct.graph_t*, align 4
  store i32 0, i32* %retval, align 4
  %call = call noalias i8* @calloc(i32 1, i32 12)
  %0 = bitcast i8* %call to %struct.graph_t*
  store %struct.graph_t* %0, %struct.graph_t** %g, align 4
  %1 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %1, i32 97, i32 98, i32 7)
  %2 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %2, i32 97, i32 99, i32 9)
  %3 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %3, i32 97, i32 102, i32 14)
  %4 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %4, i32 98, i32 99, i32 10)
  %5 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %5, i32 98, i32 100, i32 15)
  %6 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %6, i32 99, i32 100, i32 11)
  %7 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %7, i32 99, i32 102, i32 2)
  %8 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %8, i32 100, i32 101, i32 6)
  %9 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %9, i32 101, i32 102, i32 9)
  %10 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @dijkstra(%struct.graph_t* %10, i32 97, i32 101)
  %11 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @print_path(%struct.graph_t* %11, i32 101)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %a.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %0, 97
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 97:i32
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %b.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub1 = sub nsw i32 %1, 97
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 97:i32
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %a.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %b.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %a.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %edges_len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %edges_size, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sge i32 %11, %13
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %edges_size2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %15, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %edges_size3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 %17, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cond = phi i32 [ %mul, %cond.true ], [ 4, %cond.false ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = mulnsw 2:i32, %1
%3:i32 = phi %0, %2, 4:i32
infer %3

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %edges_size5, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul6 = mul i32 %23, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %b.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %29 = load i32, i32* %w.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %edges_len10, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %35, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 97:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -97
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 7
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = mulnsw 2:i32, %1
%3:i32 = phi %0, %2, 4:i32
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 4
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = mulnsw 2:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for add_edge()

; entering Souper's runOnFunction() for create_heap()

; ModuleID = './Dijkstras_algorithm.c.bc'
source_filename = "./Dijkstras_algorithm.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.graph_t = type { %struct.vertex_t**, i32, i32 }
%struct.vertex_t = type { %struct.edge_t**, i32, i32, i32, i32, i32 }
%struct.edge_t = type { i32, i32 }
%struct.heap_t = type { i32*, i32*, i32*, i32, i32 }

@.str = private unnamed_addr constant [9 x i8] c"no path\0A\00", align 1
@.str.1 = private unnamed_addr constant [9 x i8] c"%d %.*s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @add_vertex(%struct.graph_t* %g, i32 %i) #0 {
entry:
  %g.addr = alloca %struct.graph_t*, align 4
  %i.addr = alloca i32, align 4
  %size = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.graph_t* %g, %struct.graph_t** %g.addr, align 4
  store i32 %i, i32* %i.addr, align 4
  %0 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_size = getelementptr inbounds %struct.graph_t, %struct.graph_t* %0, i32 0, i32 2
  %1 = load i32, i32* %vertices_size, align 4
  %2 = load i32, i32* %i.addr, align 4
  %add = add nsw i32 %2, 1
  %cmp = icmp slt i32 %1, %add
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_size1 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %3, i32 0, i32 2
  %4 = load i32, i32* %vertices_size1, align 4
  %mul = mul nsw i32 %4, 2
  %5 = load i32, i32* %i.addr, align 4
  %cmp2 = icmp sgt i32 %mul, %5
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %6 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_size3 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %6, i32 0, i32 2
  %7 = load i32, i32* %vertices_size3, align 4
  %mul4 = mul nsw i32 %7, 2
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %8 = load i32, i32* %i.addr, align 4
  %add5 = add nsw i32 %8, 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %mul4, %cond.true ], [ %add5, %cond.false ]
  store i32 %cond, i32* %size, align 4
  %9 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices = getelementptr inbounds %struct.graph_t, %struct.graph_t* %9, i32 0, i32 0
  %10 = load %struct.vertex_t**, %struct.vertex_t*** %vertices, align 4
  %11 = bitcast %struct.vertex_t** %10 to i8*
  %12 = load i32, i32* %size, align 4
  %mul6 = mul i32 %12, 4
  %call = call i8* @realloc(i8* %11, i32 %mul6)
  %13 = bitcast i8* %call to %struct.vertex_t**
  %14 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices7 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %14, i32 0, i32 0
  store %struct.vertex_t** %13, %struct.vertex_t*** %vertices7, align 4
  %15 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_size8 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %15, i32 0, i32 2
  %16 = load i32, i32* %vertices_size8, align 4
  store i32 %16, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %cond.end
  %17 = load i32, i32* %j, align 4
  %18 = load i32, i32* %size, align 4
  %cmp9 = icmp slt i32 %17, %18
  br i1 %cmp9, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %19 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices10 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %19, i32 0, i32 0
  %20 = load %struct.vertex_t**, %struct.vertex_t*** %vertices10, align 4
  %21 = load i32, i32* %j, align 4
  %arrayidx = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %20, i32 %21
  store %struct.vertex_t* null, %struct.vertex_t** %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %22 = load i32, i32* %j, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %23 = load i32, i32* %size, align 4
  %24 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_size11 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %24, i32 0, i32 2
  store i32 %23, i32* %vertices_size11, align 4
  br label %if.end

if.end:                                           ; preds = %for.end, %entry
  %25 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices12 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %25, i32 0, i32 0
  %26 = load %struct.vertex_t**, %struct.vertex_t*** %vertices12, align 4
  %27 = load i32, i32* %i.addr, align 4
  %arrayidx13 = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %26, i32 %27
  %28 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx13, align 4
  %tobool = icmp ne %struct.vertex_t* %28, null
  br i1 %tobool, label %if.end19, label %if.then14

if.then14:                                        ; preds = %if.end
  %call15 = call noalias i8* @calloc(i32 1, i32 24)
  %29 = bitcast i8* %call15 to %struct.vertex_t*
  %30 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices16 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %30, i32 0, i32 0
  %31 = load %struct.vertex_t**, %struct.vertex_t*** %vertices16, align 4
  %32 = load i32, i32* %i.addr, align 4
  %arrayidx17 = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %31, i32 %32
  store %struct.vertex_t* %29, %struct.vertex_t** %arrayidx17, align 4
  %33 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_len = getelementptr inbounds %struct.graph_t, %struct.graph_t* %33, i32 0, i32 1
  %34 = load i32, i32* %vertices_len, align 4
  %inc18 = add nsw i32 %34, 1
  store i32 %inc18, i32* %vertices_len, align 4
  br label %if.end19

if.end19:                                         ; preds = %if.then14, %if.end
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

declare noalias i8* @calloc(i32 %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @add_edge(%struct.graph_t* %g, i32 %a, i32 %b, i32 %w) #0 {
entry:
  %g.addr = alloca %struct.graph_t*, align 4
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %w.addr = alloca i32, align 4
  %v = alloca %struct.vertex_t*, align 4
  %e = alloca %struct.edge_t*, align 4
  store %struct.graph_t* %g, %struct.graph_t** %g.addr, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  store i32 %w, i32* %w.addr, align 4
  %0 = load i32, i32* %a.addr, align 4
  %sub = sub nsw i32 %0, 97
  store i32 %sub, i32* %a.addr, align 4
  %1 = load i32, i32* %b.addr, align 4
  %sub1 = sub nsw i32 %1, 97
  store i32 %sub1, i32* %b.addr, align 4
  %2 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %3 = load i32, i32* %a.addr, align 4
  call void @add_vertex(%struct.graph_t* %2, i32 %3)
  %4 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %5 = load i32, i32* %b.addr, align 4
  call void @add_vertex(%struct.graph_t* %4, i32 %5)
  %6 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices = getelementptr inbounds %struct.graph_t, %struct.graph_t* %6, i32 0, i32 0
  %7 = load %struct.vertex_t**, %struct.vertex_t*** %vertices, align 4
  %8 = load i32, i32* %a.addr, align 4
  %arrayidx = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %7, i32 %8
  %9 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx, align 4
  store %struct.vertex_t* %9, %struct.vertex_t** %v, align 4
  %10 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges_len = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %10, i32 0, i32 1
  %11 = load i32, i32* %edges_len, align 4
  %12 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges_size = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %12, i32 0, i32 2
  %13 = load i32, i32* %edges_size, align 4
  %cmp = icmp sge i32 %11, %13
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %14 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges_size2 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %14, i32 0, i32 2
  %15 = load i32, i32* %edges_size2, align 4
  %tobool = icmp ne i32 %15, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %16 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges_size3 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %16, i32 0, i32 2
  %17 = load i32, i32* %edges_size3, align 4
  %mul = mul nsw i32 %17, 2
  br label %cond.end

cond.false:                                       ; preds = %if.then
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %mul, %cond.true ], [ 4, %cond.false ]
  %18 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges_size4 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %18, i32 0, i32 2
  store i32 %cond, i32* %edges_size4, align 4
  %19 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %19, i32 0, i32 0
  %20 = load %struct.edge_t**, %struct.edge_t*** %edges, align 4
  %21 = bitcast %struct.edge_t** %20 to i8*
  %22 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges_size5 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %22, i32 0, i32 2
  %23 = load i32, i32* %edges_size5, align 4
  %mul6 = mul i32 %23, 4
  %call = call i8* @realloc(i8* %21, i32 %mul6)
  %24 = bitcast i8* %call to %struct.edge_t**
  %25 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges7 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %25, i32 0, i32 0
  store %struct.edge_t** %24, %struct.edge_t*** %edges7, align 4
  br label %if.end

if.end:                                           ; preds = %cond.end, %entry
  %call8 = call noalias i8* @calloc(i32 1, i32 8)
  %26 = bitcast i8* %call8 to %struct.edge_t*
  store %struct.edge_t* %26, %struct.edge_t** %e, align 4
  %27 = load i32, i32* %b.addr, align 4
  %28 = load %struct.edge_t*, %struct.edge_t** %e, align 4
  %vertex = getelementptr inbounds %struct.edge_t, %struct.edge_t* %28, i32 0, i32 0
  store i32 %27, i32* %vertex, align 4
  %29 = load i32, i32* %w.addr, align 4
  %30 = load %struct.edge_t*, %struct.edge_t** %e, align 4
  %weight = getelementptr inbounds %struct.edge_t, %struct.edge_t* %30, i32 0, i32 1
  store i32 %29, i32* %weight, align 4
  %31 = load %struct.edge_t*, %struct.edge_t** %e, align 4
  %32 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges9 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %32, i32 0, i32 0
  %33 = load %struct.edge_t**, %struct.edge_t*** %edges9, align 4
  %34 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges_len10 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %34, i32 0, i32 1
  %35 = load i32, i32* %edges_len10, align 4
  %inc = add nsw i32 %35, 1
  store i32 %inc, i32* %edges_len10, align 4
  %arrayidx11 = getelementptr inbounds %struct.edge_t*, %struct.edge_t** %33, i32 %35
  store %struct.edge_t* %31, %struct.edge_t** %arrayidx11, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.heap_t* @create_heap(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %h = alloca %struct.heap_t*, align 4
  store i32 %n, i32* %n.addr, align 4
  %call = call noalias i8* @calloc(i32 1, i32 20)
  %0 = bitcast i8* %call to %struct.heap_t*
  store %struct.heap_t* %0, %struct.heap_t** %h, align 4
  %1 = load i32, i32* %n.addr, align 4
  %add = add nsw i32 %1, 1
  %call1 = call noalias i8* @calloc(i32 %add, i32 4)
  %2 = bitcast i8* %call1 to i32*
  %3 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  %data = getelementptr inbounds %struct.heap_t, %struct.heap_t* %3, i32 0, i32 0
  store i32* %2, i32** %data, align 4
  %4 = load i32, i32* %n.addr, align 4
  %add2 = add nsw i32 %4, 1
  %call3 = call noalias i8* @calloc(i32 %add2, i32 4)
  %5 = bitcast i8* %call3 to i32*
  %6 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  %prio = getelementptr inbounds %struct.heap_t, %struct.heap_t* %6, i32 0, i32 1
  store i32* %5, i32** %prio, align 4
  %7 = load i32, i32* %n.addr, align 4
  %call4 = call noalias i8* @calloc(i32 %7, i32 4)
  %8 = bitcast i8* %call4 to i32*
  %9 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  %index = getelementptr inbounds %struct.heap_t, %struct.heap_t* %9, i32 0, i32 2
  store i32* %8, i32** %index, align 4
  %10 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  ret %struct.heap_t* %10
}

; Function Attrs: noinline nounwind optnone
define hidden void @push_heap(%struct.heap_t* %h, i32 %v, i32 %p) #0 {
entry:
  %h.addr = alloca %struct.heap_t*, align 4
  %v.addr = alloca i32, align 4
  %p.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.heap_t* %h, %struct.heap_t** %h.addr, align 4
  store i32 %v, i32* %v.addr, align 4
  store i32 %p, i32* %p.addr, align 4
  %0 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %index = getelementptr inbounds %struct.heap_t, %struct.heap_t* %0, i32 0, i32 2
  %1 = load i32*, i32** %index, align 4
  %2 = load i32, i32* %v.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 %2
  %3 = load i32, i32* %arrayidx, align 4
  %cmp = icmp eq i32 %3, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %4 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len = getelementptr inbounds %struct.heap_t, %struct.heap_t* %4, i32 0, i32 3
  %5 = load i32, i32* %len, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %len, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  %6 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %index1 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %6, i32 0, i32 2
  %7 = load i32*, i32** %index1, align 4
  %8 = load i32, i32* %v.addr, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %7, i32 %8
  %9 = load i32, i32* %arrayidx2, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %inc, %cond.true ], [ %9, %cond.false ]
  store i32 %cond, i32* %i, align 4
  %10 = load i32, i32* %i, align 4
  %div = sdiv i32 %10, 2
  store i32 %div, i32* %j, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %cond.end
  %11 = load i32, i32* %i, align 4
  %cmp3 = icmp sgt i32 %11, 1
  br i1 %cmp3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %12 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio = getelementptr inbounds %struct.heap_t, %struct.heap_t* %12, i32 0, i32 1
  %13 = load i32*, i32** %prio, align 4
  %14 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %13, i32 %14
  %15 = load i32, i32* %arrayidx4, align 4
  %16 = load i32, i32* %p.addr, align 4
  %cmp5 = icmp slt i32 %15, %16
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  br label %while.end

if.end:                                           ; preds = %while.body
  %17 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data = getelementptr inbounds %struct.heap_t, %struct.heap_t* %17, i32 0, i32 0
  %18 = load i32*, i32** %data, align 4
  %19 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds i32, i32* %18, i32 %19
  %20 = load i32, i32* %arrayidx6, align 4
  %21 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data7 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %21, i32 0, i32 0
  %22 = load i32*, i32** %data7, align 4
  %23 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %22, i32 %23
  store i32 %20, i32* %arrayidx8, align 4
  %24 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio9 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %24, i32 0, i32 1
  %25 = load i32*, i32** %prio9, align 4
  %26 = load i32, i32* %j, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %25, i32 %26
  %27 = load i32, i32* %arrayidx10, align 4
  %28 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio11 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %28, i32 0, i32 1
  %29 = load i32*, i32** %prio11, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds i32, i32* %29, i32 %30
  store i32 %27, i32* %arrayidx12, align 4
  %31 = load i32, i32* %i, align 4
  %32 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %index13 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %32, i32 0, i32 2
  %33 = load i32*, i32** %index13, align 4
  %34 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data14 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %34, i32 0, i32 0
  %35 = load i32*, i32** %data14, align 4
  %36 = load i32, i32* %i, align 4
  %arrayidx15 = getelementptr inbounds i32, i32* %35, i32 %36
  %37 = load i32, i32* %arrayidx15, align 4
  %arrayidx16 = getelementptr inbounds i32, i32* %33, i32 %37
  store i32 %31, i32* %arrayidx16, align 4
  %38 = load i32, i32* %j, align 4
  store i32 %38, i32* %i, align 4
  %39 = load i32, i32* %j, align 4
  %div17 = sdiv i32 %39, 2
  store i32 %div17, i32* %j, align 4
  br label %while.cond

while.end:                                        ; preds = %if.then, %while.cond
  %40 = load i32, i32* %v.addr, align 4
  %41 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data18 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %41, i32 0, i32 0
  %42 = load i32*, i32** %data18, align 4
  %43 = load i32, i32* %i, align 4
  %arrayidx19 = getelementptr inbounds i32, i32* %42, i32 %43
  store i32 %40, i32* %arrayidx19, align 4
  %44 = load i32, i32* %p.addr, align 4
  %45 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio20 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %45, i32 0, i32 1
  %46 = load i32*, i32** %prio20, align 4
  %47 = load i32, i32* %i, align 4
  %arrayidx21 = getelementptr inbounds i32, i32* %46, i32 %47
  store i32 %44, i32* %arrayidx21, align 4
  %48 = load i32, i32* %i, align 4
  %49 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %index22 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %49, i32 0, i32 2
  %50 = load i32*, i32** %index22, align 4
  %51 = load i32, i32* %v.addr, align 4
  %arrayidx23 = getelementptr inbounds i32, i32* %50, i32 %51
  store i32 %48, i32* %arrayidx23, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @min(%struct.heap_t* %h, i32 %i, i32 %j, i32 %k) #0 {
entry:
  %h.addr = alloca %struct.heap_t*, align 4
  %i.addr = alloca i32, align 4
  %j.addr = alloca i32, align 4
  %k.addr = alloca i32, align 4
  %m = alloca i32, align 4
  store %struct.heap_t* %h, %struct.heap_t** %h.addr, align 4
  store i32 %i, i32* %i.addr, align 4
  store i32 %j, i32* %j.addr, align 4
  store i32 %k, i32* %k.addr, align 4
  %0 = load i32, i32* %i.addr, align 4
  store i32 %0, i32* %m, align 4
  %1 = load i32, i32* %j.addr, align 4
  %2 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len = getelementptr inbounds %struct.heap_t, %struct.heap_t* %2, i32 0, i32 3
  %3 = load i32, i32* %len, align 4
  %cmp = icmp sle i32 %1, %3
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio = getelementptr inbounds %struct.heap_t, %struct.heap_t* %4, i32 0, i32 1
  %5 = load i32*, i32** %prio, align 4
  %6 = load i32, i32* %j.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %5, i32 %6
  %7 = load i32, i32* %arrayidx, align 4
  %8 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio1 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %8, i32 0, i32 1
  %9 = load i32*, i32** %prio1, align 4
  %10 = load i32, i32* %m, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %9, i32 %10
  %11 = load i32, i32* %arrayidx2, align 4
  %cmp3 = icmp slt i32 %7, %11
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %12 = load i32, i32* %j.addr, align 4
  store i32 %12, i32* %m, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %13 = load i32, i32* %k.addr, align 4
  %14 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len4 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %14, i32 0, i32 3
  %15 = load i32, i32* %len4, align 4
  %cmp5 = icmp sle i32 %13, %15
  br i1 %cmp5, label %land.lhs.true6, label %if.end13

land.lhs.true6:                                   ; preds = %if.end
  %16 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio7 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %16, i32 0, i32 1
  %17 = load i32*, i32** %prio7, align 4
  %18 = load i32, i32* %k.addr, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %17, i32 %18
  %19 = load i32, i32* %arrayidx8, align 4
  %20 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio9 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %20, i32 0, i32 1
  %21 = load i32*, i32** %prio9, align 4
  %22 = load i32, i32* %m, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %21, i32 %22
  %23 = load i32, i32* %arrayidx10, align 4
  %cmp11 = icmp slt i32 %19, %23
  br i1 %cmp11, label %if.then12, label %if.end13

if.then12:                                        ; preds = %land.lhs.true6
  %24 = load i32, i32* %k.addr, align 4
  store i32 %24, i32* %m, align 4
  br label %if.end13

if.end13:                                         ; preds = %if.then12, %land.lhs.true6, %if.end
  %25 = load i32, i32* %m, align 4
  ret i32 %25
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @pop_heap(%struct.heap_t* %h) #0 {
entry:
  %h.addr = alloca %struct.heap_t*, align 4
  %v = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.heap_t* %h, %struct.heap_t** %h.addr, align 4
  %0 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data = getelementptr inbounds %struct.heap_t, %struct.heap_t* %0, i32 0, i32 0
  %1 = load i32*, i32** %data, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 1
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %v, align 4
  store i32 1, i32* %i, align 4
  br label %while.body

while.body:                                       ; preds = %entry, %if.end
  %3 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %4 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len = getelementptr inbounds %struct.heap_t, %struct.heap_t* %4, i32 0, i32 3
  %5 = load i32, i32* %len, align 4
  %6 = load i32, i32* %i, align 4
  %mul = mul nsw i32 2, %6
  %7 = load i32, i32* %i, align 4
  %mul1 = mul nsw i32 2, %7
  %add = add nsw i32 %mul1, 1
  %call = call i32 @min(%struct.heap_t* %3, i32 %5, i32 %mul, i32 %add)
  store i32 %call, i32* %j, align 4
  %8 = load i32, i32* %j, align 4
  %9 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len2 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %9, i32 0, i32 3
  %10 = load i32, i32* %len2, align 4
  %cmp = icmp eq i32 %8, %10
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  br label %while.end

if.end:                                           ; preds = %while.body
  %11 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data3 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %11, i32 0, i32 0
  %12 = load i32*, i32** %data3, align 4
  %13 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %12, i32 %13
  %14 = load i32, i32* %arrayidx4, align 4
  %15 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data5 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %15, i32 0, i32 0
  %16 = load i32*, i32** %data5, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds i32, i32* %16, i32 %17
  store i32 %14, i32* %arrayidx6, align 4
  %18 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio = getelementptr inbounds %struct.heap_t, %struct.heap_t* %18, i32 0, i32 1
  %19 = load i32*, i32** %prio, align 4
  %20 = load i32, i32* %j, align 4
  %arrayidx7 = getelementptr inbounds i32, i32* %19, i32 %20
  %21 = load i32, i32* %arrayidx7, align 4
  %22 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio8 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %22, i32 0, i32 1
  %23 = load i32*, i32** %prio8, align 4
  %24 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds i32, i32* %23, i32 %24
  store i32 %21, i32* %arrayidx9, align 4
  %25 = load i32, i32* %i, align 4
  %26 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %index = getelementptr inbounds %struct.heap_t, %struct.heap_t* %26, i32 0, i32 2
  %27 = load i32*, i32** %index, align 4
  %28 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data10 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %28, i32 0, i32 0
  %29 = load i32*, i32** %data10, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds i32, i32* %29, i32 %30
  %31 = load i32, i32* %arrayidx11, align 4
  %arrayidx12 = getelementptr inbounds i32, i32* %27, i32 %31
  store i32 %25, i32* %arrayidx12, align 4
  %32 = load i32, i32* %j, align 4
  store i32 %32, i32* %i, align 4
  br label %while.body

while.end:                                        ; preds = %if.then
  %33 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data13 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %33, i32 0, i32 0
  %34 = load i32*, i32** %data13, align 4
  %35 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len14 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %35, i32 0, i32 3
  %36 = load i32, i32* %len14, align 4
  %arrayidx15 = getelementptr inbounds i32, i32* %34, i32 %36
  %37 = load i32, i32* %arrayidx15, align 4
  %38 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data16 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %38, i32 0, i32 0
  %39 = load i32*, i32** %data16, align 4
  %40 = load i32, i32* %i, align 4
  %arrayidx17 = getelementptr inbounds i32, i32* %39, i32 %40
  store i32 %37, i32* %arrayidx17, align 4
  %41 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio18 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %41, i32 0, i32 1
  %42 = load i32*, i32** %prio18, align 4
  %43 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len19 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %43, i32 0, i32 3
  %44 = load i32, i32* %len19, align 4
  %arrayidx20 = getelementptr inbounds i32, i32* %42, i32 %44
  %45 = load i32, i32* %arrayidx20, align 4
  %46 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio21 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %46, i32 0, i32 1
  %47 = load i32*, i32** %prio21, align 4
  %48 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds i32, i32* %47, i32 %48
  store i32 %45, i32* %arrayidx22, align 4
  %49 = load i32, i32* %i, align 4
  %50 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %index23 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %50, i32 0, i32 2
  %51 = load i32*, i32** %index23, align 4
  %52 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data24 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %52, i32 0, i32 0
  %53 = load i32*, i32** %data24, align 4
  %54 = load i32, i32* %i, align 4
  %arrayidx25 = getelementptr inbounds i32, i32* %53, i32 %54
  %55 = load i32, i32* %arrayidx25, align 4
  %arrayidx26 = getelementptr inbounds i32, i32* %51, i32 %55
  store i32 %49, i32* %arrayidx26, align 4
  %56 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len27 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %56, i32 0, i32 3
  %57 = load i32, i32* %len27, align 4
  %dec = add nsw i32 %57, -1
  store i32 %dec, i32* %len27, align 4
  %58 = load i32, i32* %v, align 4
  ret i32 %58
}

; Function Attrs: noinline nounwind optnone
define hidden void @dijkstra(%struct.graph_t* %g, i32 %a, i32 %b) #0 {
entry:
  %g.addr = alloca %struct.graph_t*, align 4
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %v = alloca %struct.vertex_t*, align 4
  %v2 = alloca %struct.vertex_t*, align 4
  %h = alloca %struct.heap_t*, align 4
  %e = alloca %struct.edge_t*, align 4
  %u = alloca %struct.vertex_t*, align 4
  store %struct.graph_t* %g, %struct.graph_t** %g.addr, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  %0 = load i32, i32* %a.addr, align 4
  %sub = sub nsw i32 %0, 97
  store i32 %sub, i32* %a.addr, align 4
  %1 = load i32, i32* %b.addr, align 4
  %sub1 = sub nsw i32 %1, 97
  store i32 %sub1, i32* %b.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_len = getelementptr inbounds %struct.graph_t, %struct.graph_t* %3, i32 0, i32 1
  %4 = load i32, i32* %vertices_len, align 4
  %cmp = icmp slt i32 %2, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices = getelementptr inbounds %struct.graph_t, %struct.graph_t* %5, i32 0, i32 0
  %6 = load %struct.vertex_t**, %struct.vertex_t*** %vertices, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %6, i32 %7
  %8 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx, align 4
  store %struct.vertex_t* %8, %struct.vertex_t** %v, align 4
  %9 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %dist = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %9, i32 0, i32 3
  store i32 2147483647, i32* %dist, align 4
  %10 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %prev = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %10, i32 0, i32 4
  store i32 0, i32* %prev, align 4
  %11 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %visited = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %11, i32 0, i32 5
  store i32 0, i32* %visited, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %i, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %13 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices3 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %13, i32 0, i32 0
  %14 = load %struct.vertex_t**, %struct.vertex_t*** %vertices3, align 4
  %15 = load i32, i32* %a.addr, align 4
  %arrayidx4 = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %14, i32 %15
  %16 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx4, align 4
  store %struct.vertex_t* %16, %struct.vertex_t** %v2, align 4
  %17 = load %struct.vertex_t*, %struct.vertex_t** %v2, align 4
  %dist5 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %17, i32 0, i32 3
  store i32 0, i32* %dist5, align 4
  %18 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_len6 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %18, i32 0, i32 1
  %19 = load i32, i32* %vertices_len6, align 4
  %call = call %struct.heap_t* @create_heap(i32 %19)
  store %struct.heap_t* %call, %struct.heap_t** %h, align 4
  %20 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  %21 = load i32, i32* %a.addr, align 4
  %22 = load %struct.vertex_t*, %struct.vertex_t** %v2, align 4
  %dist7 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %22, i32 0, i32 3
  %23 = load i32, i32* %dist7, align 4
  call void @push_heap(%struct.heap_t* %20, i32 %21, i32 %23)
  br label %while.cond

while.cond:                                       ; preds = %for.end35, %for.end
  %24 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  %len = getelementptr inbounds %struct.heap_t, %struct.heap_t* %24, i32 0, i32 3
  %25 = load i32, i32* %len, align 4
  %tobool = icmp ne i32 %25, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %26 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  %call8 = call i32 @pop_heap(%struct.heap_t* %26)
  store i32 %call8, i32* %i, align 4
  %27 = load i32, i32* %i, align 4
  %28 = load i32, i32* %b.addr, align 4
  %cmp9 = icmp eq i32 %27, %28
  br i1 %cmp9, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  br label %while.end

if.end:                                           ; preds = %while.body
  %29 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices10 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %29, i32 0, i32 0
  %30 = load %struct.vertex_t**, %struct.vertex_t*** %vertices10, align 4
  %31 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %30, i32 %31
  %32 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx11, align 4
  store %struct.vertex_t* %32, %struct.vertex_t** %v2, align 4
  %33 = load %struct.vertex_t*, %struct.vertex_t** %v2, align 4
  %visited12 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %33, i32 0, i32 5
  store i32 1, i32* %visited12, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc33, %if.end
  %34 = load i32, i32* %j, align 4
  %35 = load %struct.vertex_t*, %struct.vertex_t** %v2, align 4
  %edges_len = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %35, i32 0, i32 1
  %36 = load i32, i32* %edges_len, align 4
  %cmp14 = icmp slt i32 %34, %36
  br i1 %cmp14, label %for.body15, label %for.end35

for.body15:                                       ; preds = %for.cond13
  %37 = load %struct.vertex_t*, %struct.vertex_t** %v2, align 4
  %edges = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %37, i32 0, i32 0
  %38 = load %struct.edge_t**, %struct.edge_t*** %edges, align 4
  %39 = load i32, i32* %j, align 4
  %arrayidx16 = getelementptr inbounds %struct.edge_t*, %struct.edge_t** %38, i32 %39
  %40 = load %struct.edge_t*, %struct.edge_t** %arrayidx16, align 4
  store %struct.edge_t* %40, %struct.edge_t** %e, align 4
  %41 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices17 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %41, i32 0, i32 0
  %42 = load %struct.vertex_t**, %struct.vertex_t*** %vertices17, align 4
  %43 = load %struct.edge_t*, %struct.edge_t** %e, align 4
  %vertex = getelementptr inbounds %struct.edge_t, %struct.edge_t* %43, i32 0, i32 0
  %44 = load i32, i32* %vertex, align 4
  %arrayidx18 = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %42, i32 %44
  %45 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx18, align 4
  store %struct.vertex_t* %45, %struct.vertex_t** %u, align 4
  %46 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %visited19 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %46, i32 0, i32 5
  %47 = load i32, i32* %visited19, align 4
  %tobool20 = icmp ne i32 %47, 0
  br i1 %tobool20, label %if.end32, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.body15
  %48 = load %struct.vertex_t*, %struct.vertex_t** %v2, align 4
  %dist21 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %48, i32 0, i32 3
  %49 = load i32, i32* %dist21, align 4
  %50 = load %struct.edge_t*, %struct.edge_t** %e, align 4
  %weight = getelementptr inbounds %struct.edge_t, %struct.edge_t* %50, i32 0, i32 1
  %51 = load i32, i32* %weight, align 4
  %add = add nsw i32 %49, %51
  %52 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %dist22 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %52, i32 0, i32 3
  %53 = load i32, i32* %dist22, align 4
  %cmp23 = icmp sle i32 %add, %53
  br i1 %cmp23, label %if.then24, label %if.end32

if.then24:                                        ; preds = %land.lhs.true
  %54 = load i32, i32* %i, align 4
  %55 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %prev25 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %55, i32 0, i32 4
  store i32 %54, i32* %prev25, align 4
  %56 = load %struct.vertex_t*, %struct.vertex_t** %v2, align 4
  %dist26 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %56, i32 0, i32 3
  %57 = load i32, i32* %dist26, align 4
  %58 = load %struct.edge_t*, %struct.edge_t** %e, align 4
  %weight27 = getelementptr inbounds %struct.edge_t, %struct.edge_t* %58, i32 0, i32 1
  %59 = load i32, i32* %weight27, align 4
  %add28 = add nsw i32 %57, %59
  %60 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %dist29 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %60, i32 0, i32 3
  store i32 %add28, i32* %dist29, align 4
  %61 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  %62 = load %struct.edge_t*, %struct.edge_t** %e, align 4
  %vertex30 = getelementptr inbounds %struct.edge_t, %struct.edge_t* %62, i32 0, i32 0
  %63 = load i32, i32* %vertex30, align 4
  %64 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %dist31 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %64, i32 0, i32 3
  %65 = load i32, i32* %dist31, align 4
  call void @push_heap(%struct.heap_t* %61, i32 %63, i32 %65)
  br label %if.end32

if.end32:                                         ; preds = %if.then24, %land.lhs.true, %for.body15
  br label %for.inc33

for.inc33:                                        ; preds = %if.end32
  %66 = load i32, i32* %j, align 4
  %inc34 = add nsw i32 %66, 1
  store i32 %inc34, i32* %j, align 4
  br label %for.cond13

for.end35:                                        ; preds = %for.cond13
  br label %while.cond

while.end:                                        ; preds = %if.then, %while.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @print_path(%struct.graph_t* %g, i32 %i) #0 {
entry:
  %g.addr = alloca %struct.graph_t*, align 4
  %i.addr = alloca i32, align 4
  %n = alloca i32, align 4
  %j = alloca i32, align 4
  %v = alloca %struct.vertex_t*, align 4
  %u = alloca %struct.vertex_t*, align 4
  %path = alloca i8*, align 4
  store %struct.graph_t* %g, %struct.graph_t** %g.addr, align 4
  store i32 %i, i32* %i.addr, align 4
  %0 = load i32, i32* %i.addr, align 4
  %sub = sub nsw i32 %0, 97
  store i32 %sub, i32* %i.addr, align 4
  %1 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices = getelementptr inbounds %struct.graph_t, %struct.graph_t* %1, i32 0, i32 0
  %2 = load %struct.vertex_t**, %struct.vertex_t*** %vertices, align 4
  %3 = load i32, i32* %i.addr, align 4
  %arrayidx = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %2, i32 %3
  %4 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx, align 4
  store %struct.vertex_t* %4, %struct.vertex_t** %v, align 4
  %5 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %dist = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %5, i32 0, i32 3
  %6 = load i32, i32* %dist, align 4
  %cmp = icmp eq i32 %6, 2147483647
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0))
  br label %return

if.end:                                           ; preds = %entry
  store i32 1, i32* %n, align 4
  %7 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  store %struct.vertex_t* %7, %struct.vertex_t** %u, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %8 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %dist1 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %8, i32 0, i32 3
  %9 = load i32, i32* %dist1, align 4
  %tobool = icmp ne i32 %9, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices2 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %10, i32 0, i32 0
  %11 = load %struct.vertex_t**, %struct.vertex_t*** %vertices2, align 4
  %12 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %prev = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %12, i32 0, i32 4
  %13 = load i32, i32* %prev, align 4
  %arrayidx3 = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %11, i32 %13
  %14 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx3, align 4
  store %struct.vertex_t* %14, %struct.vertex_t** %u, align 4
  %15 = load i32, i32* %n, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %16 = load i32, i32* %n, align 4
  %call4 = call noalias i8* @malloc(i32 %16)
  store i8* %call4, i8** %path, align 4
  %17 = load i32, i32* %i.addr, align 4
  %add = add nsw i32 97, %17
  %conv = trunc i32 %add to i8
  %18 = load i8*, i8** %path, align 4
  %19 = load i32, i32* %n, align 4
  %sub5 = sub nsw i32 %19, 1
  %arrayidx6 = getelementptr inbounds i8, i8* %18, i32 %sub5
  store i8 %conv, i8* %arrayidx6, align 1
  store i32 0, i32* %j, align 4
  %20 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  store %struct.vertex_t* %20, %struct.vertex_t** %u, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc17, %for.end
  %21 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %dist8 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %21, i32 0, i32 3
  %22 = load i32, i32* %dist8, align 4
  %tobool9 = icmp ne i32 %22, 0
  br i1 %tobool9, label %for.body10, label %for.end22

for.body10:                                       ; preds = %for.cond7
  %23 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %prev11 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %23, i32 0, i32 4
  %24 = load i32, i32* %prev11, align 4
  %add12 = add nsw i32 97, %24
  %conv13 = trunc i32 %add12 to i8
  %25 = load i8*, i8** %path, align 4
  %26 = load i32, i32* %n, align 4
  %27 = load i32, i32* %j, align 4
  %sub14 = sub nsw i32 %26, %27
  %sub15 = sub nsw i32 %sub14, 2
  %arrayidx16 = getelementptr inbounds i8, i8* %25, i32 %sub15
  store i8 %conv13, i8* %arrayidx16, align 1
  br label %for.inc17

for.inc17:                                        ; preds = %for.body10
  %28 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices18 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %28, i32 0, i32 0
  %29 = load %struct.vertex_t**, %struct.vertex_t*** %vertices18, align 4
  %30 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %prev19 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %30, i32 0, i32 4
  %31 = load i32, i32* %prev19, align 4
  %arrayidx20 = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %29, i32 %31
  %32 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx20, align 4
  store %struct.vertex_t* %32, %struct.vertex_t** %u, align 4
  %33 = load i32, i32* %j, align 4
  %inc21 = add nsw i32 %33, 1
  store i32 %inc21, i32* %j, align 4
  br label %for.cond7

for.end22:                                        ; preds = %for.cond7
  %34 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %dist23 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %34, i32 0, i32 3
  %35 = load i32, i32* %dist23, align 4
  %36 = load i32, i32* %n, align 4
  %37 = load i8*, i8** %path, align 4
  %call24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i32 0, i32 0), i32 %35, i32 %36, i8* %37)
  br label %return

return:                                           ; preds = %for.end22, %if.then
  ret void
}

declare i32 @printf(i8* %0, ...) #1

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %g = alloca %struct.graph_t*, align 4
  store i32 0, i32* %retval, align 4
  %call = call noalias i8* @calloc(i32 1, i32 12)
  %0 = bitcast i8* %call to %struct.graph_t*
  store %struct.graph_t* %0, %struct.graph_t** %g, align 4
  %1 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %1, i32 97, i32 98, i32 7)
  %2 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %2, i32 97, i32 99, i32 9)
  %3 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %3, i32 97, i32 102, i32 14)
  %4 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %4, i32 98, i32 99, i32 10)
  %5 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %5, i32 98, i32 100, i32 15)
  %6 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %6, i32 99, i32 100, i32 11)
  %7 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %7, i32 99, i32 102, i32 2)
  %8 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %8, i32 100, i32 101, i32 6)
  %9 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %9, i32 101, i32 102, i32 9)
  %10 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @dijkstra(%struct.graph_t* %10, i32 97, i32 101)
  %11 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @print_path(%struct.graph_t* %11, i32 101)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %1, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add2 = add nsw i32 %4, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %n.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for create_heap()

; entering Souper's runOnFunction() for push_heap()

; ModuleID = './Dijkstras_algorithm.c.bc'
source_filename = "./Dijkstras_algorithm.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.graph_t = type { %struct.vertex_t**, i32, i32 }
%struct.vertex_t = type { %struct.edge_t**, i32, i32, i32, i32, i32 }
%struct.edge_t = type { i32, i32 }
%struct.heap_t = type { i32*, i32*, i32*, i32, i32 }

@.str = private unnamed_addr constant [9 x i8] c"no path\0A\00", align 1
@.str.1 = private unnamed_addr constant [9 x i8] c"%d %.*s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @add_vertex(%struct.graph_t* %g, i32 %i) #0 {
entry:
  %g.addr = alloca %struct.graph_t*, align 4
  %i.addr = alloca i32, align 4
  %size = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.graph_t* %g, %struct.graph_t** %g.addr, align 4
  store i32 %i, i32* %i.addr, align 4
  %0 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_size = getelementptr inbounds %struct.graph_t, %struct.graph_t* %0, i32 0, i32 2
  %1 = load i32, i32* %vertices_size, align 4
  %2 = load i32, i32* %i.addr, align 4
  %add = add nsw i32 %2, 1
  %cmp = icmp slt i32 %1, %add
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_size1 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %3, i32 0, i32 2
  %4 = load i32, i32* %vertices_size1, align 4
  %mul = mul nsw i32 %4, 2
  %5 = load i32, i32* %i.addr, align 4
  %cmp2 = icmp sgt i32 %mul, %5
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %6 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_size3 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %6, i32 0, i32 2
  %7 = load i32, i32* %vertices_size3, align 4
  %mul4 = mul nsw i32 %7, 2
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %8 = load i32, i32* %i.addr, align 4
  %add5 = add nsw i32 %8, 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %mul4, %cond.true ], [ %add5, %cond.false ]
  store i32 %cond, i32* %size, align 4
  %9 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices = getelementptr inbounds %struct.graph_t, %struct.graph_t* %9, i32 0, i32 0
  %10 = load %struct.vertex_t**, %struct.vertex_t*** %vertices, align 4
  %11 = bitcast %struct.vertex_t** %10 to i8*
  %12 = load i32, i32* %size, align 4
  %mul6 = mul i32 %12, 4
  %call = call i8* @realloc(i8* %11, i32 %mul6)
  %13 = bitcast i8* %call to %struct.vertex_t**
  %14 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices7 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %14, i32 0, i32 0
  store %struct.vertex_t** %13, %struct.vertex_t*** %vertices7, align 4
  %15 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_size8 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %15, i32 0, i32 2
  %16 = load i32, i32* %vertices_size8, align 4
  store i32 %16, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %cond.end
  %17 = load i32, i32* %j, align 4
  %18 = load i32, i32* %size, align 4
  %cmp9 = icmp slt i32 %17, %18
  br i1 %cmp9, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %19 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices10 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %19, i32 0, i32 0
  %20 = load %struct.vertex_t**, %struct.vertex_t*** %vertices10, align 4
  %21 = load i32, i32* %j, align 4
  %arrayidx = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %20, i32 %21
  store %struct.vertex_t* null, %struct.vertex_t** %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %22 = load i32, i32* %j, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %23 = load i32, i32* %size, align 4
  %24 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_size11 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %24, i32 0, i32 2
  store i32 %23, i32* %vertices_size11, align 4
  br label %if.end

if.end:                                           ; preds = %for.end, %entry
  %25 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices12 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %25, i32 0, i32 0
  %26 = load %struct.vertex_t**, %struct.vertex_t*** %vertices12, align 4
  %27 = load i32, i32* %i.addr, align 4
  %arrayidx13 = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %26, i32 %27
  %28 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx13, align 4
  %tobool = icmp ne %struct.vertex_t* %28, null
  br i1 %tobool, label %if.end19, label %if.then14

if.then14:                                        ; preds = %if.end
  %call15 = call noalias i8* @calloc(i32 1, i32 24)
  %29 = bitcast i8* %call15 to %struct.vertex_t*
  %30 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices16 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %30, i32 0, i32 0
  %31 = load %struct.vertex_t**, %struct.vertex_t*** %vertices16, align 4
  %32 = load i32, i32* %i.addr, align 4
  %arrayidx17 = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %31, i32 %32
  store %struct.vertex_t* %29, %struct.vertex_t** %arrayidx17, align 4
  %33 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_len = getelementptr inbounds %struct.graph_t, %struct.graph_t* %33, i32 0, i32 1
  %34 = load i32, i32* %vertices_len, align 4
  %inc18 = add nsw i32 %34, 1
  store i32 %inc18, i32* %vertices_len, align 4
  br label %if.end19

if.end19:                                         ; preds = %if.then14, %if.end
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

declare noalias i8* @calloc(i32 %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @add_edge(%struct.graph_t* %g, i32 %a, i32 %b, i32 %w) #0 {
entry:
  %g.addr = alloca %struct.graph_t*, align 4
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %w.addr = alloca i32, align 4
  %v = alloca %struct.vertex_t*, align 4
  %e = alloca %struct.edge_t*, align 4
  store %struct.graph_t* %g, %struct.graph_t** %g.addr, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  store i32 %w, i32* %w.addr, align 4
  %0 = load i32, i32* %a.addr, align 4
  %sub = sub nsw i32 %0, 97
  store i32 %sub, i32* %a.addr, align 4
  %1 = load i32, i32* %b.addr, align 4
  %sub1 = sub nsw i32 %1, 97
  store i32 %sub1, i32* %b.addr, align 4
  %2 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %3 = load i32, i32* %a.addr, align 4
  call void @add_vertex(%struct.graph_t* %2, i32 %3)
  %4 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %5 = load i32, i32* %b.addr, align 4
  call void @add_vertex(%struct.graph_t* %4, i32 %5)
  %6 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices = getelementptr inbounds %struct.graph_t, %struct.graph_t* %6, i32 0, i32 0
  %7 = load %struct.vertex_t**, %struct.vertex_t*** %vertices, align 4
  %8 = load i32, i32* %a.addr, align 4
  %arrayidx = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %7, i32 %8
  %9 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx, align 4
  store %struct.vertex_t* %9, %struct.vertex_t** %v, align 4
  %10 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges_len = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %10, i32 0, i32 1
  %11 = load i32, i32* %edges_len, align 4
  %12 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges_size = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %12, i32 0, i32 2
  %13 = load i32, i32* %edges_size, align 4
  %cmp = icmp sge i32 %11, %13
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %14 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges_size2 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %14, i32 0, i32 2
  %15 = load i32, i32* %edges_size2, align 4
  %tobool = icmp ne i32 %15, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %16 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges_size3 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %16, i32 0, i32 2
  %17 = load i32, i32* %edges_size3, align 4
  %mul = mul nsw i32 %17, 2
  br label %cond.end

cond.false:                                       ; preds = %if.then
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %mul, %cond.true ], [ 4, %cond.false ]
  %18 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges_size4 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %18, i32 0, i32 2
  store i32 %cond, i32* %edges_size4, align 4
  %19 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %19, i32 0, i32 0
  %20 = load %struct.edge_t**, %struct.edge_t*** %edges, align 4
  %21 = bitcast %struct.edge_t** %20 to i8*
  %22 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges_size5 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %22, i32 0, i32 2
  %23 = load i32, i32* %edges_size5, align 4
  %mul6 = mul i32 %23, 4
  %call = call i8* @realloc(i8* %21, i32 %mul6)
  %24 = bitcast i8* %call to %struct.edge_t**
  %25 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges7 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %25, i32 0, i32 0
  store %struct.edge_t** %24, %struct.edge_t*** %edges7, align 4
  br label %if.end

if.end:                                           ; preds = %cond.end, %entry
  %call8 = call noalias i8* @calloc(i32 1, i32 8)
  %26 = bitcast i8* %call8 to %struct.edge_t*
  store %struct.edge_t* %26, %struct.edge_t** %e, align 4
  %27 = load i32, i32* %b.addr, align 4
  %28 = load %struct.edge_t*, %struct.edge_t** %e, align 4
  %vertex = getelementptr inbounds %struct.edge_t, %struct.edge_t* %28, i32 0, i32 0
  store i32 %27, i32* %vertex, align 4
  %29 = load i32, i32* %w.addr, align 4
  %30 = load %struct.edge_t*, %struct.edge_t** %e, align 4
  %weight = getelementptr inbounds %struct.edge_t, %struct.edge_t* %30, i32 0, i32 1
  store i32 %29, i32* %weight, align 4
  %31 = load %struct.edge_t*, %struct.edge_t** %e, align 4
  %32 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges9 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %32, i32 0, i32 0
  %33 = load %struct.edge_t**, %struct.edge_t*** %edges9, align 4
  %34 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges_len10 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %34, i32 0, i32 1
  %35 = load i32, i32* %edges_len10, align 4
  %inc = add nsw i32 %35, 1
  store i32 %inc, i32* %edges_len10, align 4
  %arrayidx11 = getelementptr inbounds %struct.edge_t*, %struct.edge_t** %33, i32 %35
  store %struct.edge_t* %31, %struct.edge_t** %arrayidx11, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.heap_t* @create_heap(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %h = alloca %struct.heap_t*, align 4
  store i32 %n, i32* %n.addr, align 4
  %call = call noalias i8* @calloc(i32 1, i32 20)
  %0 = bitcast i8* %call to %struct.heap_t*
  store %struct.heap_t* %0, %struct.heap_t** %h, align 4
  %1 = load i32, i32* %n.addr, align 4
  %add = add nsw i32 %1, 1
  %call1 = call noalias i8* @calloc(i32 %add, i32 4)
  %2 = bitcast i8* %call1 to i32*
  %3 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  %data = getelementptr inbounds %struct.heap_t, %struct.heap_t* %3, i32 0, i32 0
  store i32* %2, i32** %data, align 4
  %4 = load i32, i32* %n.addr, align 4
  %add2 = add nsw i32 %4, 1
  %call3 = call noalias i8* @calloc(i32 %add2, i32 4)
  %5 = bitcast i8* %call3 to i32*
  %6 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  %prio = getelementptr inbounds %struct.heap_t, %struct.heap_t* %6, i32 0, i32 1
  store i32* %5, i32** %prio, align 4
  %7 = load i32, i32* %n.addr, align 4
  %call4 = call noalias i8* @calloc(i32 %7, i32 4)
  %8 = bitcast i8* %call4 to i32*
  %9 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  %index = getelementptr inbounds %struct.heap_t, %struct.heap_t* %9, i32 0, i32 2
  store i32* %8, i32** %index, align 4
  %10 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  ret %struct.heap_t* %10
}

; Function Attrs: noinline nounwind optnone
define hidden void @push_heap(%struct.heap_t* %h, i32 %v, i32 %p) #0 {
entry:
  %h.addr = alloca %struct.heap_t*, align 4
  %v.addr = alloca i32, align 4
  %p.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.heap_t* %h, %struct.heap_t** %h.addr, align 4
  store i32 %v, i32* %v.addr, align 4
  store i32 %p, i32* %p.addr, align 4
  %0 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %index = getelementptr inbounds %struct.heap_t, %struct.heap_t* %0, i32 0, i32 2
  %1 = load i32*, i32** %index, align 4
  %2 = load i32, i32* %v.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 %2
  %3 = load i32, i32* %arrayidx, align 4
  %cmp = icmp eq i32 %3, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %4 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len = getelementptr inbounds %struct.heap_t, %struct.heap_t* %4, i32 0, i32 3
  %5 = load i32, i32* %len, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %len, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  %6 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %index1 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %6, i32 0, i32 2
  %7 = load i32*, i32** %index1, align 4
  %8 = load i32, i32* %v.addr, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %7, i32 %8
  %9 = load i32, i32* %arrayidx2, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %inc, %cond.true ], [ %9, %cond.false ]
  store i32 %cond, i32* %i, align 4
  %10 = load i32, i32* %i, align 4
  %div = sdiv i32 %10, 2
  store i32 %div, i32* %j, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %cond.end
  %11 = load i32, i32* %i, align 4
  %cmp3 = icmp sgt i32 %11, 1
  br i1 %cmp3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %12 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio = getelementptr inbounds %struct.heap_t, %struct.heap_t* %12, i32 0, i32 1
  %13 = load i32*, i32** %prio, align 4
  %14 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %13, i32 %14
  %15 = load i32, i32* %arrayidx4, align 4
  %16 = load i32, i32* %p.addr, align 4
  %cmp5 = icmp slt i32 %15, %16
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  br label %while.end

if.end:                                           ; preds = %while.body
  %17 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data = getelementptr inbounds %struct.heap_t, %struct.heap_t* %17, i32 0, i32 0
  %18 = load i32*, i32** %data, align 4
  %19 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds i32, i32* %18, i32 %19
  %20 = load i32, i32* %arrayidx6, align 4
  %21 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data7 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %21, i32 0, i32 0
  %22 = load i32*, i32** %data7, align 4
  %23 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %22, i32 %23
  store i32 %20, i32* %arrayidx8, align 4
  %24 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio9 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %24, i32 0, i32 1
  %25 = load i32*, i32** %prio9, align 4
  %26 = load i32, i32* %j, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %25, i32 %26
  %27 = load i32, i32* %arrayidx10, align 4
  %28 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio11 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %28, i32 0, i32 1
  %29 = load i32*, i32** %prio11, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds i32, i32* %29, i32 %30
  store i32 %27, i32* %arrayidx12, align 4
  %31 = load i32, i32* %i, align 4
  %32 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %index13 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %32, i32 0, i32 2
  %33 = load i32*, i32** %index13, align 4
  %34 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data14 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %34, i32 0, i32 0
  %35 = load i32*, i32** %data14, align 4
  %36 = load i32, i32* %i, align 4
  %arrayidx15 = getelementptr inbounds i32, i32* %35, i32 %36
  %37 = load i32, i32* %arrayidx15, align 4
  %arrayidx16 = getelementptr inbounds i32, i32* %33, i32 %37
  store i32 %31, i32* %arrayidx16, align 4
  %38 = load i32, i32* %j, align 4
  store i32 %38, i32* %i, align 4
  %39 = load i32, i32* %j, align 4
  %div17 = sdiv i32 %39, 2
  store i32 %div17, i32* %j, align 4
  br label %while.cond

while.end:                                        ; preds = %if.then, %while.cond
  %40 = load i32, i32* %v.addr, align 4
  %41 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data18 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %41, i32 0, i32 0
  %42 = load i32*, i32** %data18, align 4
  %43 = load i32, i32* %i, align 4
  %arrayidx19 = getelementptr inbounds i32, i32* %42, i32 %43
  store i32 %40, i32* %arrayidx19, align 4
  %44 = load i32, i32* %p.addr, align 4
  %45 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio20 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %45, i32 0, i32 1
  %46 = load i32*, i32** %prio20, align 4
  %47 = load i32, i32* %i, align 4
  %arrayidx21 = getelementptr inbounds i32, i32* %46, i32 %47
  store i32 %44, i32* %arrayidx21, align 4
  %48 = load i32, i32* %i, align 4
  %49 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %index22 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %49, i32 0, i32 2
  %50 = load i32*, i32** %index22, align 4
  %51 = load i32, i32* %v.addr, align 4
  %arrayidx23 = getelementptr inbounds i32, i32* %50, i32 %51
  store i32 %48, i32* %arrayidx23, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @min(%struct.heap_t* %h, i32 %i, i32 %j, i32 %k) #0 {
entry:
  %h.addr = alloca %struct.heap_t*, align 4
  %i.addr = alloca i32, align 4
  %j.addr = alloca i32, align 4
  %k.addr = alloca i32, align 4
  %m = alloca i32, align 4
  store %struct.heap_t* %h, %struct.heap_t** %h.addr, align 4
  store i32 %i, i32* %i.addr, align 4
  store i32 %j, i32* %j.addr, align 4
  store i32 %k, i32* %k.addr, align 4
  %0 = load i32, i32* %i.addr, align 4
  store i32 %0, i32* %m, align 4
  %1 = load i32, i32* %j.addr, align 4
  %2 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len = getelementptr inbounds %struct.heap_t, %struct.heap_t* %2, i32 0, i32 3
  %3 = load i32, i32* %len, align 4
  %cmp = icmp sle i32 %1, %3
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio = getelementptr inbounds %struct.heap_t, %struct.heap_t* %4, i32 0, i32 1
  %5 = load i32*, i32** %prio, align 4
  %6 = load i32, i32* %j.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %5, i32 %6
  %7 = load i32, i32* %arrayidx, align 4
  %8 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio1 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %8, i32 0, i32 1
  %9 = load i32*, i32** %prio1, align 4
  %10 = load i32, i32* %m, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %9, i32 %10
  %11 = load i32, i32* %arrayidx2, align 4
  %cmp3 = icmp slt i32 %7, %11
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %12 = load i32, i32* %j.addr, align 4
  store i32 %12, i32* %m, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %13 = load i32, i32* %k.addr, align 4
  %14 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len4 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %14, i32 0, i32 3
  %15 = load i32, i32* %len4, align 4
  %cmp5 = icmp sle i32 %13, %15
  br i1 %cmp5, label %land.lhs.true6, label %if.end13

land.lhs.true6:                                   ; preds = %if.end
  %16 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio7 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %16, i32 0, i32 1
  %17 = load i32*, i32** %prio7, align 4
  %18 = load i32, i32* %k.addr, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %17, i32 %18
  %19 = load i32, i32* %arrayidx8, align 4
  %20 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio9 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %20, i32 0, i32 1
  %21 = load i32*, i32** %prio9, align 4
  %22 = load i32, i32* %m, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %21, i32 %22
  %23 = load i32, i32* %arrayidx10, align 4
  %cmp11 = icmp slt i32 %19, %23
  br i1 %cmp11, label %if.then12, label %if.end13

if.then12:                                        ; preds = %land.lhs.true6
  %24 = load i32, i32* %k.addr, align 4
  store i32 %24, i32* %m, align 4
  br label %if.end13

if.end13:                                         ; preds = %if.then12, %land.lhs.true6, %if.end
  %25 = load i32, i32* %m, align 4
  ret i32 %25
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @pop_heap(%struct.heap_t* %h) #0 {
entry:
  %h.addr = alloca %struct.heap_t*, align 4
  %v = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.heap_t* %h, %struct.heap_t** %h.addr, align 4
  %0 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data = getelementptr inbounds %struct.heap_t, %struct.heap_t* %0, i32 0, i32 0
  %1 = load i32*, i32** %data, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 1
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %v, align 4
  store i32 1, i32* %i, align 4
  br label %while.body

while.body:                                       ; preds = %entry, %if.end
  %3 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %4 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len = getelementptr inbounds %struct.heap_t, %struct.heap_t* %4, i32 0, i32 3
  %5 = load i32, i32* %len, align 4
  %6 = load i32, i32* %i, align 4
  %mul = mul nsw i32 2, %6
  %7 = load i32, i32* %i, align 4
  %mul1 = mul nsw i32 2, %7
  %add = add nsw i32 %mul1, 1
  %call = call i32 @min(%struct.heap_t* %3, i32 %5, i32 %mul, i32 %add)
  store i32 %call, i32* %j, align 4
  %8 = load i32, i32* %j, align 4
  %9 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len2 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %9, i32 0, i32 3
  %10 = load i32, i32* %len2, align 4
  %cmp = icmp eq i32 %8, %10
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  br label %while.end

if.end:                                           ; preds = %while.body
  %11 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data3 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %11, i32 0, i32 0
  %12 = load i32*, i32** %data3, align 4
  %13 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %12, i32 %13
  %14 = load i32, i32* %arrayidx4, align 4
  %15 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data5 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %15, i32 0, i32 0
  %16 = load i32*, i32** %data5, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds i32, i32* %16, i32 %17
  store i32 %14, i32* %arrayidx6, align 4
  %18 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio = getelementptr inbounds %struct.heap_t, %struct.heap_t* %18, i32 0, i32 1
  %19 = load i32*, i32** %prio, align 4
  %20 = load i32, i32* %j, align 4
  %arrayidx7 = getelementptr inbounds i32, i32* %19, i32 %20
  %21 = load i32, i32* %arrayidx7, align 4
  %22 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio8 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %22, i32 0, i32 1
  %23 = load i32*, i32** %prio8, align 4
  %24 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds i32, i32* %23, i32 %24
  store i32 %21, i32* %arrayidx9, align 4
  %25 = load i32, i32* %i, align 4
  %26 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %index = getelementptr inbounds %struct.heap_t, %struct.heap_t* %26, i32 0, i32 2
  %27 = load i32*, i32** %index, align 4
  %28 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data10 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %28, i32 0, i32 0
  %29 = load i32*, i32** %data10, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds i32, i32* %29, i32 %30
  %31 = load i32, i32* %arrayidx11, align 4
  %arrayidx12 = getelementptr inbounds i32, i32* %27, i32 %31
  store i32 %25, i32* %arrayidx12, align 4
  %32 = load i32, i32* %j, align 4
  store i32 %32, i32* %i, align 4
  br label %while.body

while.end:                                        ; preds = %if.then
  %33 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data13 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %33, i32 0, i32 0
  %34 = load i32*, i32** %data13, align 4
  %35 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len14 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %35, i32 0, i32 3
  %36 = load i32, i32* %len14, align 4
  %arrayidx15 = getelementptr inbounds i32, i32* %34, i32 %36
  %37 = load i32, i32* %arrayidx15, align 4
  %38 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data16 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %38, i32 0, i32 0
  %39 = load i32*, i32** %data16, align 4
  %40 = load i32, i32* %i, align 4
  %arrayidx17 = getelementptr inbounds i32, i32* %39, i32 %40
  store i32 %37, i32* %arrayidx17, align 4
  %41 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio18 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %41, i32 0, i32 1
  %42 = load i32*, i32** %prio18, align 4
  %43 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len19 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %43, i32 0, i32 3
  %44 = load i32, i32* %len19, align 4
  %arrayidx20 = getelementptr inbounds i32, i32* %42, i32 %44
  %45 = load i32, i32* %arrayidx20, align 4
  %46 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio21 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %46, i32 0, i32 1
  %47 = load i32*, i32** %prio21, align 4
  %48 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds i32, i32* %47, i32 %48
  store i32 %45, i32* %arrayidx22, align 4
  %49 = load i32, i32* %i, align 4
  %50 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %index23 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %50, i32 0, i32 2
  %51 = load i32*, i32** %index23, align 4
  %52 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data24 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %52, i32 0, i32 0
  %53 = load i32*, i32** %data24, align 4
  %54 = load i32, i32* %i, align 4
  %arrayidx25 = getelementptr inbounds i32, i32* %53, i32 %54
  %55 = load i32, i32* %arrayidx25, align 4
  %arrayidx26 = getelementptr inbounds i32, i32* %51, i32 %55
  store i32 %49, i32* %arrayidx26, align 4
  %56 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len27 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %56, i32 0, i32 3
  %57 = load i32, i32* %len27, align 4
  %dec = add nsw i32 %57, -1
  store i32 %dec, i32* %len27, align 4
  %58 = load i32, i32* %v, align 4
  ret i32 %58
}

; Function Attrs: noinline nounwind optnone
define hidden void @dijkstra(%struct.graph_t* %g, i32 %a, i32 %b) #0 {
entry:
  %g.addr = alloca %struct.graph_t*, align 4
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %v = alloca %struct.vertex_t*, align 4
  %v2 = alloca %struct.vertex_t*, align 4
  %h = alloca %struct.heap_t*, align 4
  %e = alloca %struct.edge_t*, align 4
  %u = alloca %struct.vertex_t*, align 4
  store %struct.graph_t* %g, %struct.graph_t** %g.addr, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  %0 = load i32, i32* %a.addr, align 4
  %sub = sub nsw i32 %0, 97
  store i32 %sub, i32* %a.addr, align 4
  %1 = load i32, i32* %b.addr, align 4
  %sub1 = sub nsw i32 %1, 97
  store i32 %sub1, i32* %b.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_len = getelementptr inbounds %struct.graph_t, %struct.graph_t* %3, i32 0, i32 1
  %4 = load i32, i32* %vertices_len, align 4
  %cmp = icmp slt i32 %2, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices = getelementptr inbounds %struct.graph_t, %struct.graph_t* %5, i32 0, i32 0
  %6 = load %struct.vertex_t**, %struct.vertex_t*** %vertices, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %6, i32 %7
  %8 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx, align 4
  store %struct.vertex_t* %8, %struct.vertex_t** %v, align 4
  %9 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %dist = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %9, i32 0, i32 3
  store i32 2147483647, i32* %dist, align 4
  %10 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %prev = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %10, i32 0, i32 4
  store i32 0, i32* %prev, align 4
  %11 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %visited = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %11, i32 0, i32 5
  store i32 0, i32* %visited, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %i, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %13 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices3 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %13, i32 0, i32 0
  %14 = load %struct.vertex_t**, %struct.vertex_t*** %vertices3, align 4
  %15 = load i32, i32* %a.addr, align 4
  %arrayidx4 = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %14, i32 %15
  %16 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx4, align 4
  store %struct.vertex_t* %16, %struct.vertex_t** %v2, align 4
  %17 = load %struct.vertex_t*, %struct.vertex_t** %v2, align 4
  %dist5 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %17, i32 0, i32 3
  store i32 0, i32* %dist5, align 4
  %18 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_len6 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %18, i32 0, i32 1
  %19 = load i32, i32* %vertices_len6, align 4
  %call = call %struct.heap_t* @create_heap(i32 %19)
  store %struct.heap_t* %call, %struct.heap_t** %h, align 4
  %20 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  %21 = load i32, i32* %a.addr, align 4
  %22 = load %struct.vertex_t*, %struct.vertex_t** %v2, align 4
  %dist7 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %22, i32 0, i32 3
  %23 = load i32, i32* %dist7, align 4
  call void @push_heap(%struct.heap_t* %20, i32 %21, i32 %23)
  br label %while.cond

while.cond:                                       ; preds = %for.end35, %for.end
  %24 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  %len = getelementptr inbounds %struct.heap_t, %struct.heap_t* %24, i32 0, i32 3
  %25 = load i32, i32* %len, align 4
  %tobool = icmp ne i32 %25, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %26 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  %call8 = call i32 @pop_heap(%struct.heap_t* %26)
  store i32 %call8, i32* %i, align 4
  %27 = load i32, i32* %i, align 4
  %28 = load i32, i32* %b.addr, align 4
  %cmp9 = icmp eq i32 %27, %28
  br i1 %cmp9, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  br label %while.end

if.end:                                           ; preds = %while.body
  %29 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices10 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %29, i32 0, i32 0
  %30 = load %struct.vertex_t**, %struct.vertex_t*** %vertices10, align 4
  %31 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %30, i32 %31
  %32 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx11, align 4
  store %struct.vertex_t* %32, %struct.vertex_t** %v2, align 4
  %33 = load %struct.vertex_t*, %struct.vertex_t** %v2, align 4
  %visited12 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %33, i32 0, i32 5
  store i32 1, i32* %visited12, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc33, %if.end
  %34 = load i32, i32* %j, align 4
  %35 = load %struct.vertex_t*, %struct.vertex_t** %v2, align 4
  %edges_len = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %35, i32 0, i32 1
  %36 = load i32, i32* %edges_len, align 4
  %cmp14 = icmp slt i32 %34, %36
  br i1 %cmp14, label %for.body15, label %for.end35

for.body15:                                       ; preds = %for.cond13
  %37 = load %struct.vertex_t*, %struct.vertex_t** %v2, align 4
  %edges = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %37, i32 0, i32 0
  %38 = load %struct.edge_t**, %struct.edge_t*** %edges, align 4
  %39 = load i32, i32* %j, align 4
  %arrayidx16 = getelementptr inbounds %struct.edge_t*, %struct.edge_t** %38, i32 %39
  %40 = load %struct.edge_t*, %struct.edge_t** %arrayidx16, align 4
  store %struct.edge_t* %40, %struct.edge_t** %e, align 4
  %41 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices17 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %41, i32 0, i32 0
  %42 = load %struct.vertex_t**, %struct.vertex_t*** %vertices17, align 4
  %43 = load %struct.edge_t*, %struct.edge_t** %e, align 4
  %vertex = getelementptr inbounds %struct.edge_t, %struct.edge_t* %43, i32 0, i32 0
  %44 = load i32, i32* %vertex, align 4
  %arrayidx18 = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %42, i32 %44
  %45 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx18, align 4
  store %struct.vertex_t* %45, %struct.vertex_t** %u, align 4
  %46 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %visited19 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %46, i32 0, i32 5
  %47 = load i32, i32* %visited19, align 4
  %tobool20 = icmp ne i32 %47, 0
  br i1 %tobool20, label %if.end32, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.body15
  %48 = load %struct.vertex_t*, %struct.vertex_t** %v2, align 4
  %dist21 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %48, i32 0, i32 3
  %49 = load i32, i32* %dist21, align 4
  %50 = load %struct.edge_t*, %struct.edge_t** %e, align 4
  %weight = getelementptr inbounds %struct.edge_t, %struct.edge_t* %50, i32 0, i32 1
  %51 = load i32, i32* %weight, align 4
  %add = add nsw i32 %49, %51
  %52 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %dist22 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %52, i32 0, i32 3
  %53 = load i32, i32* %dist22, align 4
  %cmp23 = icmp sle i32 %add, %53
  br i1 %cmp23, label %if.then24, label %if.end32

if.then24:                                        ; preds = %land.lhs.true
  %54 = load i32, i32* %i, align 4
  %55 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %prev25 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %55, i32 0, i32 4
  store i32 %54, i32* %prev25, align 4
  %56 = load %struct.vertex_t*, %struct.vertex_t** %v2, align 4
  %dist26 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %56, i32 0, i32 3
  %57 = load i32, i32* %dist26, align 4
  %58 = load %struct.edge_t*, %struct.edge_t** %e, align 4
  %weight27 = getelementptr inbounds %struct.edge_t, %struct.edge_t* %58, i32 0, i32 1
  %59 = load i32, i32* %weight27, align 4
  %add28 = add nsw i32 %57, %59
  %60 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %dist29 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %60, i32 0, i32 3
  store i32 %add28, i32* %dist29, align 4
  %61 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  %62 = load %struct.edge_t*, %struct.edge_t** %e, align 4
  %vertex30 = getelementptr inbounds %struct.edge_t, %struct.edge_t* %62, i32 0, i32 0
  %63 = load i32, i32* %vertex30, align 4
  %64 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %dist31 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %64, i32 0, i32 3
  %65 = load i32, i32* %dist31, align 4
  call void @push_heap(%struct.heap_t* %61, i32 %63, i32 %65)
  br label %if.end32

if.end32:                                         ; preds = %if.then24, %land.lhs.true, %for.body15
  br label %for.inc33

for.inc33:                                        ; preds = %if.end32
  %66 = load i32, i32* %j, align 4
  %inc34 = add nsw i32 %66, 1
  store i32 %inc34, i32* %j, align 4
  br label %for.cond13

for.end35:                                        ; preds = %for.cond13
  br label %while.cond

while.end:                                        ; preds = %if.then, %while.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @print_path(%struct.graph_t* %g, i32 %i) #0 {
entry:
  %g.addr = alloca %struct.graph_t*, align 4
  %i.addr = alloca i32, align 4
  %n = alloca i32, align 4
  %j = alloca i32, align 4
  %v = alloca %struct.vertex_t*, align 4
  %u = alloca %struct.vertex_t*, align 4
  %path = alloca i8*, align 4
  store %struct.graph_t* %g, %struct.graph_t** %g.addr, align 4
  store i32 %i, i32* %i.addr, align 4
  %0 = load i32, i32* %i.addr, align 4
  %sub = sub nsw i32 %0, 97
  store i32 %sub, i32* %i.addr, align 4
  %1 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices = getelementptr inbounds %struct.graph_t, %struct.graph_t* %1, i32 0, i32 0
  %2 = load %struct.vertex_t**, %struct.vertex_t*** %vertices, align 4
  %3 = load i32, i32* %i.addr, align 4
  %arrayidx = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %2, i32 %3
  %4 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx, align 4
  store %struct.vertex_t* %4, %struct.vertex_t** %v, align 4
  %5 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %dist = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %5, i32 0, i32 3
  %6 = load i32, i32* %dist, align 4
  %cmp = icmp eq i32 %6, 2147483647
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0))
  br label %return

if.end:                                           ; preds = %entry
  store i32 1, i32* %n, align 4
  %7 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  store %struct.vertex_t* %7, %struct.vertex_t** %u, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %8 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %dist1 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %8, i32 0, i32 3
  %9 = load i32, i32* %dist1, align 4
  %tobool = icmp ne i32 %9, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices2 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %10, i32 0, i32 0
  %11 = load %struct.vertex_t**, %struct.vertex_t*** %vertices2, align 4
  %12 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %prev = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %12, i32 0, i32 4
  %13 = load i32, i32* %prev, align 4
  %arrayidx3 = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %11, i32 %13
  %14 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx3, align 4
  store %struct.vertex_t* %14, %struct.vertex_t** %u, align 4
  %15 = load i32, i32* %n, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %16 = load i32, i32* %n, align 4
  %call4 = call noalias i8* @malloc(i32 %16)
  store i8* %call4, i8** %path, align 4
  %17 = load i32, i32* %i.addr, align 4
  %add = add nsw i32 97, %17
  %conv = trunc i32 %add to i8
  %18 = load i8*, i8** %path, align 4
  %19 = load i32, i32* %n, align 4
  %sub5 = sub nsw i32 %19, 1
  %arrayidx6 = getelementptr inbounds i8, i8* %18, i32 %sub5
  store i8 %conv, i8* %arrayidx6, align 1
  store i32 0, i32* %j, align 4
  %20 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  store %struct.vertex_t* %20, %struct.vertex_t** %u, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc17, %for.end
  %21 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %dist8 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %21, i32 0, i32 3
  %22 = load i32, i32* %dist8, align 4
  %tobool9 = icmp ne i32 %22, 0
  br i1 %tobool9, label %for.body10, label %for.end22

for.body10:                                       ; preds = %for.cond7
  %23 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %prev11 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %23, i32 0, i32 4
  %24 = load i32, i32* %prev11, align 4
  %add12 = add nsw i32 97, %24
  %conv13 = trunc i32 %add12 to i8
  %25 = load i8*, i8** %path, align 4
  %26 = load i32, i32* %n, align 4
  %27 = load i32, i32* %j, align 4
  %sub14 = sub nsw i32 %26, %27
  %sub15 = sub nsw i32 %sub14, 2
  %arrayidx16 = getelementptr inbounds i8, i8* %25, i32 %sub15
  store i8 %conv13, i8* %arrayidx16, align 1
  br label %for.inc17

for.inc17:                                        ; preds = %for.body10
  %28 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices18 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %28, i32 0, i32 0
  %29 = load %struct.vertex_t**, %struct.vertex_t*** %vertices18, align 4
  %30 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %prev19 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %30, i32 0, i32 4
  %31 = load i32, i32* %prev19, align 4
  %arrayidx20 = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %29, i32 %31
  %32 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx20, align 4
  store %struct.vertex_t* %32, %struct.vertex_t** %u, align 4
  %33 = load i32, i32* %j, align 4
  %inc21 = add nsw i32 %33, 1
  store i32 %inc21, i32* %j, align 4
  br label %for.cond7

for.end22:                                        ; preds = %for.cond7
  %34 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %dist23 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %34, i32 0, i32 3
  %35 = load i32, i32* %dist23, align 4
  %36 = load i32, i32* %n, align 4
  %37 = load i8*, i8** %path, align 4
  %call24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i32 0, i32 0), i32 %35, i32 %36, i8* %37)
  br label %return

return:                                           ; preds = %for.end22, %if.then
  ret void
}

declare i32 @printf(i8* %0, ...) #1

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %g = alloca %struct.graph_t*, align 4
  store i32 0, i32* %retval, align 4
  %call = call noalias i8* @calloc(i32 1, i32 12)
  %0 = bitcast i8* %call to %struct.graph_t*
  store %struct.graph_t* %0, %struct.graph_t** %g, align 4
  %1 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %1, i32 97, i32 98, i32 7)
  %2 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %2, i32 97, i32 99, i32 9)
  %3 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %3, i32 97, i32 102, i32 14)
  %4 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %4, i32 98, i32 99, i32 10)
  %5 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %5, i32 98, i32 100, i32 15)
  %6 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %6, i32 99, i32 100, i32 11)
  %7 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %7, i32 99, i32 102, i32 2)
  %8 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %8, i32 100, i32 101, i32 6)
  %9 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %9, i32 101, i32 102, i32 9)
  %10 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @dijkstra(%struct.graph_t* %10, i32 97, i32 101)
  %11 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @print_path(%struct.graph_t* %11, i32 101)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %v.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %3, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %5, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %v.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %arrayidx2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cond = phi i32 [ %inc, %cond.true ], [ %9, %cond.false ]
; Looking for a replacement for:
%0 = block 2
%1:i32 = var
%2:i32 = addnsw 1:i32, %1 (hasExternalUses)
%3:i32 = var
%4:i32 = phi %0, %2, %3
infer %4

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div = sdiv i32 %10, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sdiv %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp3 = icmp sgt i32 %11, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %arrayidx4, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %p.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp5 = icmp slt i32 %15, %16
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %arrayidx6, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %arrayidx10, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %arrayidx15, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %38 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div17 = sdiv i32 %39, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = sdiv %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %40 = load i32, i32* %v.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %43 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %44 = load i32, i32* %p.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %47 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %48 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %51 = load i32, i32* %v.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0 = block 2
%1:i32 = var
%2:i32 = addnsw 1:i32, %1 (hasExternalUses)
%3:i32 = var
%4:i32 = phi %0, %2, %3
infer %4


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = sdiv %0, 2:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 631636206
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for push_heap()

; entering Souper's runOnFunction() for min()

; ModuleID = './Dijkstras_algorithm.c.bc'
source_filename = "./Dijkstras_algorithm.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.graph_t = type { %struct.vertex_t**, i32, i32 }
%struct.vertex_t = type { %struct.edge_t**, i32, i32, i32, i32, i32 }
%struct.edge_t = type { i32, i32 }
%struct.heap_t = type { i32*, i32*, i32*, i32, i32 }

@.str = private unnamed_addr constant [9 x i8] c"no path\0A\00", align 1
@.str.1 = private unnamed_addr constant [9 x i8] c"%d %.*s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @add_vertex(%struct.graph_t* %g, i32 %i) #0 {
entry:
  %g.addr = alloca %struct.graph_t*, align 4
  %i.addr = alloca i32, align 4
  %size = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.graph_t* %g, %struct.graph_t** %g.addr, align 4
  store i32 %i, i32* %i.addr, align 4
  %0 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_size = getelementptr inbounds %struct.graph_t, %struct.graph_t* %0, i32 0, i32 2
  %1 = load i32, i32* %vertices_size, align 4
  %2 = load i32, i32* %i.addr, align 4
  %add = add nsw i32 %2, 1
  %cmp = icmp slt i32 %1, %add
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_size1 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %3, i32 0, i32 2
  %4 = load i32, i32* %vertices_size1, align 4
  %mul = mul nsw i32 %4, 2
  %5 = load i32, i32* %i.addr, align 4
  %cmp2 = icmp sgt i32 %mul, %5
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %6 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_size3 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %6, i32 0, i32 2
  %7 = load i32, i32* %vertices_size3, align 4
  %mul4 = mul nsw i32 %7, 2
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %8 = load i32, i32* %i.addr, align 4
  %add5 = add nsw i32 %8, 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %mul4, %cond.true ], [ %add5, %cond.false ]
  store i32 %cond, i32* %size, align 4
  %9 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices = getelementptr inbounds %struct.graph_t, %struct.graph_t* %9, i32 0, i32 0
  %10 = load %struct.vertex_t**, %struct.vertex_t*** %vertices, align 4
  %11 = bitcast %struct.vertex_t** %10 to i8*
  %12 = load i32, i32* %size, align 4
  %mul6 = mul i32 %12, 4
  %call = call i8* @realloc(i8* %11, i32 %mul6)
  %13 = bitcast i8* %call to %struct.vertex_t**
  %14 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices7 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %14, i32 0, i32 0
  store %struct.vertex_t** %13, %struct.vertex_t*** %vertices7, align 4
  %15 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_size8 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %15, i32 0, i32 2
  %16 = load i32, i32* %vertices_size8, align 4
  store i32 %16, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %cond.end
  %17 = load i32, i32* %j, align 4
  %18 = load i32, i32* %size, align 4
  %cmp9 = icmp slt i32 %17, %18
  br i1 %cmp9, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %19 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices10 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %19, i32 0, i32 0
  %20 = load %struct.vertex_t**, %struct.vertex_t*** %vertices10, align 4
  %21 = load i32, i32* %j, align 4
  %arrayidx = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %20, i32 %21
  store %struct.vertex_t* null, %struct.vertex_t** %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %22 = load i32, i32* %j, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %23 = load i32, i32* %size, align 4
  %24 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_size11 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %24, i32 0, i32 2
  store i32 %23, i32* %vertices_size11, align 4
  br label %if.end

if.end:                                           ; preds = %for.end, %entry
  %25 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices12 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %25, i32 0, i32 0
  %26 = load %struct.vertex_t**, %struct.vertex_t*** %vertices12, align 4
  %27 = load i32, i32* %i.addr, align 4
  %arrayidx13 = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %26, i32 %27
  %28 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx13, align 4
  %tobool = icmp ne %struct.vertex_t* %28, null
  br i1 %tobool, label %if.end19, label %if.then14

if.then14:                                        ; preds = %if.end
  %call15 = call noalias i8* @calloc(i32 1, i32 24)
  %29 = bitcast i8* %call15 to %struct.vertex_t*
  %30 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices16 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %30, i32 0, i32 0
  %31 = load %struct.vertex_t**, %struct.vertex_t*** %vertices16, align 4
  %32 = load i32, i32* %i.addr, align 4
  %arrayidx17 = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %31, i32 %32
  store %struct.vertex_t* %29, %struct.vertex_t** %arrayidx17, align 4
  %33 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_len = getelementptr inbounds %struct.graph_t, %struct.graph_t* %33, i32 0, i32 1
  %34 = load i32, i32* %vertices_len, align 4
  %inc18 = add nsw i32 %34, 1
  store i32 %inc18, i32* %vertices_len, align 4
  br label %if.end19

if.end19:                                         ; preds = %if.then14, %if.end
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

declare noalias i8* @calloc(i32 %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @add_edge(%struct.graph_t* %g, i32 %a, i32 %b, i32 %w) #0 {
entry:
  %g.addr = alloca %struct.graph_t*, align 4
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %w.addr = alloca i32, align 4
  %v = alloca %struct.vertex_t*, align 4
  %e = alloca %struct.edge_t*, align 4
  store %struct.graph_t* %g, %struct.graph_t** %g.addr, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  store i32 %w, i32* %w.addr, align 4
  %0 = load i32, i32* %a.addr, align 4
  %sub = sub nsw i32 %0, 97
  store i32 %sub, i32* %a.addr, align 4
  %1 = load i32, i32* %b.addr, align 4
  %sub1 = sub nsw i32 %1, 97
  store i32 %sub1, i32* %b.addr, align 4
  %2 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %3 = load i32, i32* %a.addr, align 4
  call void @add_vertex(%struct.graph_t* %2, i32 %3)
  %4 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %5 = load i32, i32* %b.addr, align 4
  call void @add_vertex(%struct.graph_t* %4, i32 %5)
  %6 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices = getelementptr inbounds %struct.graph_t, %struct.graph_t* %6, i32 0, i32 0
  %7 = load %struct.vertex_t**, %struct.vertex_t*** %vertices, align 4
  %8 = load i32, i32* %a.addr, align 4
  %arrayidx = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %7, i32 %8
  %9 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx, align 4
  store %struct.vertex_t* %9, %struct.vertex_t** %v, align 4
  %10 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges_len = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %10, i32 0, i32 1
  %11 = load i32, i32* %edges_len, align 4
  %12 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges_size = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %12, i32 0, i32 2
  %13 = load i32, i32* %edges_size, align 4
  %cmp = icmp sge i32 %11, %13
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %14 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges_size2 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %14, i32 0, i32 2
  %15 = load i32, i32* %edges_size2, align 4
  %tobool = icmp ne i32 %15, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %16 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges_size3 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %16, i32 0, i32 2
  %17 = load i32, i32* %edges_size3, align 4
  %mul = mul nsw i32 %17, 2
  br label %cond.end

cond.false:                                       ; preds = %if.then
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %mul, %cond.true ], [ 4, %cond.false ]
  %18 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges_size4 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %18, i32 0, i32 2
  store i32 %cond, i32* %edges_size4, align 4
  %19 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %19, i32 0, i32 0
  %20 = load %struct.edge_t**, %struct.edge_t*** %edges, align 4
  %21 = bitcast %struct.edge_t** %20 to i8*
  %22 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges_size5 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %22, i32 0, i32 2
  %23 = load i32, i32* %edges_size5, align 4
  %mul6 = mul i32 %23, 4
  %call = call i8* @realloc(i8* %21, i32 %mul6)
  %24 = bitcast i8* %call to %struct.edge_t**
  %25 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges7 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %25, i32 0, i32 0
  store %struct.edge_t** %24, %struct.edge_t*** %edges7, align 4
  br label %if.end

if.end:                                           ; preds = %cond.end, %entry
  %call8 = call noalias i8* @calloc(i32 1, i32 8)
  %26 = bitcast i8* %call8 to %struct.edge_t*
  store %struct.edge_t* %26, %struct.edge_t** %e, align 4
  %27 = load i32, i32* %b.addr, align 4
  %28 = load %struct.edge_t*, %struct.edge_t** %e, align 4
  %vertex = getelementptr inbounds %struct.edge_t, %struct.edge_t* %28, i32 0, i32 0
  store i32 %27, i32* %vertex, align 4
  %29 = load i32, i32* %w.addr, align 4
  %30 = load %struct.edge_t*, %struct.edge_t** %e, align 4
  %weight = getelementptr inbounds %struct.edge_t, %struct.edge_t* %30, i32 0, i32 1
  store i32 %29, i32* %weight, align 4
  %31 = load %struct.edge_t*, %struct.edge_t** %e, align 4
  %32 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges9 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %32, i32 0, i32 0
  %33 = load %struct.edge_t**, %struct.edge_t*** %edges9, align 4
  %34 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges_len10 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %34, i32 0, i32 1
  %35 = load i32, i32* %edges_len10, align 4
  %inc = add nsw i32 %35, 1
  store i32 %inc, i32* %edges_len10, align 4
  %arrayidx11 = getelementptr inbounds %struct.edge_t*, %struct.edge_t** %33, i32 %35
  store %struct.edge_t* %31, %struct.edge_t** %arrayidx11, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.heap_t* @create_heap(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %h = alloca %struct.heap_t*, align 4
  store i32 %n, i32* %n.addr, align 4
  %call = call noalias i8* @calloc(i32 1, i32 20)
  %0 = bitcast i8* %call to %struct.heap_t*
  store %struct.heap_t* %0, %struct.heap_t** %h, align 4
  %1 = load i32, i32* %n.addr, align 4
  %add = add nsw i32 %1, 1
  %call1 = call noalias i8* @calloc(i32 %add, i32 4)
  %2 = bitcast i8* %call1 to i32*
  %3 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  %data = getelementptr inbounds %struct.heap_t, %struct.heap_t* %3, i32 0, i32 0
  store i32* %2, i32** %data, align 4
  %4 = load i32, i32* %n.addr, align 4
  %add2 = add nsw i32 %4, 1
  %call3 = call noalias i8* @calloc(i32 %add2, i32 4)
  %5 = bitcast i8* %call3 to i32*
  %6 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  %prio = getelementptr inbounds %struct.heap_t, %struct.heap_t* %6, i32 0, i32 1
  store i32* %5, i32** %prio, align 4
  %7 = load i32, i32* %n.addr, align 4
  %call4 = call noalias i8* @calloc(i32 %7, i32 4)
  %8 = bitcast i8* %call4 to i32*
  %9 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  %index = getelementptr inbounds %struct.heap_t, %struct.heap_t* %9, i32 0, i32 2
  store i32* %8, i32** %index, align 4
  %10 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  ret %struct.heap_t* %10
}

; Function Attrs: noinline nounwind optnone
define hidden void @push_heap(%struct.heap_t* %h, i32 %v, i32 %p) #0 {
entry:
  %h.addr = alloca %struct.heap_t*, align 4
  %v.addr = alloca i32, align 4
  %p.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.heap_t* %h, %struct.heap_t** %h.addr, align 4
  store i32 %v, i32* %v.addr, align 4
  store i32 %p, i32* %p.addr, align 4
  %0 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %index = getelementptr inbounds %struct.heap_t, %struct.heap_t* %0, i32 0, i32 2
  %1 = load i32*, i32** %index, align 4
  %2 = load i32, i32* %v.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 %2
  %3 = load i32, i32* %arrayidx, align 4
  %cmp = icmp eq i32 %3, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %4 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len = getelementptr inbounds %struct.heap_t, %struct.heap_t* %4, i32 0, i32 3
  %5 = load i32, i32* %len, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %len, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  %6 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %index1 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %6, i32 0, i32 2
  %7 = load i32*, i32** %index1, align 4
  %8 = load i32, i32* %v.addr, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %7, i32 %8
  %9 = load i32, i32* %arrayidx2, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %inc, %cond.true ], [ %9, %cond.false ]
  store i32 %cond, i32* %i, align 4
  %10 = load i32, i32* %i, align 4
  %div = sdiv i32 %10, 2
  store i32 %div, i32* %j, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %cond.end
  %11 = load i32, i32* %i, align 4
  %cmp3 = icmp sgt i32 %11, 1
  br i1 %cmp3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %12 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio = getelementptr inbounds %struct.heap_t, %struct.heap_t* %12, i32 0, i32 1
  %13 = load i32*, i32** %prio, align 4
  %14 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %13, i32 %14
  %15 = load i32, i32* %arrayidx4, align 4
  %16 = load i32, i32* %p.addr, align 4
  %cmp5 = icmp slt i32 %15, %16
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  br label %while.end

if.end:                                           ; preds = %while.body
  %17 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data = getelementptr inbounds %struct.heap_t, %struct.heap_t* %17, i32 0, i32 0
  %18 = load i32*, i32** %data, align 4
  %19 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds i32, i32* %18, i32 %19
  %20 = load i32, i32* %arrayidx6, align 4
  %21 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data7 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %21, i32 0, i32 0
  %22 = load i32*, i32** %data7, align 4
  %23 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %22, i32 %23
  store i32 %20, i32* %arrayidx8, align 4
  %24 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio9 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %24, i32 0, i32 1
  %25 = load i32*, i32** %prio9, align 4
  %26 = load i32, i32* %j, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %25, i32 %26
  %27 = load i32, i32* %arrayidx10, align 4
  %28 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio11 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %28, i32 0, i32 1
  %29 = load i32*, i32** %prio11, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds i32, i32* %29, i32 %30
  store i32 %27, i32* %arrayidx12, align 4
  %31 = load i32, i32* %i, align 4
  %32 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %index13 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %32, i32 0, i32 2
  %33 = load i32*, i32** %index13, align 4
  %34 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data14 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %34, i32 0, i32 0
  %35 = load i32*, i32** %data14, align 4
  %36 = load i32, i32* %i, align 4
  %arrayidx15 = getelementptr inbounds i32, i32* %35, i32 %36
  %37 = load i32, i32* %arrayidx15, align 4
  %arrayidx16 = getelementptr inbounds i32, i32* %33, i32 %37
  store i32 %31, i32* %arrayidx16, align 4
  %38 = load i32, i32* %j, align 4
  store i32 %38, i32* %i, align 4
  %39 = load i32, i32* %j, align 4
  %div17 = sdiv i32 %39, 2
  store i32 %div17, i32* %j, align 4
  br label %while.cond

while.end:                                        ; preds = %if.then, %while.cond
  %40 = load i32, i32* %v.addr, align 4
  %41 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data18 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %41, i32 0, i32 0
  %42 = load i32*, i32** %data18, align 4
  %43 = load i32, i32* %i, align 4
  %arrayidx19 = getelementptr inbounds i32, i32* %42, i32 %43
  store i32 %40, i32* %arrayidx19, align 4
  %44 = load i32, i32* %p.addr, align 4
  %45 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio20 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %45, i32 0, i32 1
  %46 = load i32*, i32** %prio20, align 4
  %47 = load i32, i32* %i, align 4
  %arrayidx21 = getelementptr inbounds i32, i32* %46, i32 %47
  store i32 %44, i32* %arrayidx21, align 4
  %48 = load i32, i32* %i, align 4
  %49 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %index22 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %49, i32 0, i32 2
  %50 = load i32*, i32** %index22, align 4
  %51 = load i32, i32* %v.addr, align 4
  %arrayidx23 = getelementptr inbounds i32, i32* %50, i32 %51
  store i32 %48, i32* %arrayidx23, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @min(%struct.heap_t* %h, i32 %i, i32 %j, i32 %k) #0 {
entry:
  %h.addr = alloca %struct.heap_t*, align 4
  %i.addr = alloca i32, align 4
  %j.addr = alloca i32, align 4
  %k.addr = alloca i32, align 4
  %m = alloca i32, align 4
  store %struct.heap_t* %h, %struct.heap_t** %h.addr, align 4
  store i32 %i, i32* %i.addr, align 4
  store i32 %j, i32* %j.addr, align 4
  store i32 %k, i32* %k.addr, align 4
  %0 = load i32, i32* %i.addr, align 4
  store i32 %0, i32* %m, align 4
  %1 = load i32, i32* %j.addr, align 4
  %2 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len = getelementptr inbounds %struct.heap_t, %struct.heap_t* %2, i32 0, i32 3
  %3 = load i32, i32* %len, align 4
  %cmp = icmp sle i32 %1, %3
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio = getelementptr inbounds %struct.heap_t, %struct.heap_t* %4, i32 0, i32 1
  %5 = load i32*, i32** %prio, align 4
  %6 = load i32, i32* %j.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %5, i32 %6
  %7 = load i32, i32* %arrayidx, align 4
  %8 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio1 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %8, i32 0, i32 1
  %9 = load i32*, i32** %prio1, align 4
  %10 = load i32, i32* %m, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %9, i32 %10
  %11 = load i32, i32* %arrayidx2, align 4
  %cmp3 = icmp slt i32 %7, %11
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %12 = load i32, i32* %j.addr, align 4
  store i32 %12, i32* %m, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %13 = load i32, i32* %k.addr, align 4
  %14 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len4 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %14, i32 0, i32 3
  %15 = load i32, i32* %len4, align 4
  %cmp5 = icmp sle i32 %13, %15
  br i1 %cmp5, label %land.lhs.true6, label %if.end13

land.lhs.true6:                                   ; preds = %if.end
  %16 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio7 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %16, i32 0, i32 1
  %17 = load i32*, i32** %prio7, align 4
  %18 = load i32, i32* %k.addr, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %17, i32 %18
  %19 = load i32, i32* %arrayidx8, align 4
  %20 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio9 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %20, i32 0, i32 1
  %21 = load i32*, i32** %prio9, align 4
  %22 = load i32, i32* %m, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %21, i32 %22
  %23 = load i32, i32* %arrayidx10, align 4
  %cmp11 = icmp slt i32 %19, %23
  br i1 %cmp11, label %if.then12, label %if.end13

if.then12:                                        ; preds = %land.lhs.true6
  %24 = load i32, i32* %k.addr, align 4
  store i32 %24, i32* %m, align 4
  br label %if.end13

if.end13:                                         ; preds = %if.then12, %land.lhs.true6, %if.end
  %25 = load i32, i32* %m, align 4
  ret i32 %25
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @pop_heap(%struct.heap_t* %h) #0 {
entry:
  %h.addr = alloca %struct.heap_t*, align 4
  %v = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.heap_t* %h, %struct.heap_t** %h.addr, align 4
  %0 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data = getelementptr inbounds %struct.heap_t, %struct.heap_t* %0, i32 0, i32 0
  %1 = load i32*, i32** %data, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 1
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %v, align 4
  store i32 1, i32* %i, align 4
  br label %while.body

while.body:                                       ; preds = %entry, %if.end
  %3 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %4 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len = getelementptr inbounds %struct.heap_t, %struct.heap_t* %4, i32 0, i32 3
  %5 = load i32, i32* %len, align 4
  %6 = load i32, i32* %i, align 4
  %mul = mul nsw i32 2, %6
  %7 = load i32, i32* %i, align 4
  %mul1 = mul nsw i32 2, %7
  %add = add nsw i32 %mul1, 1
  %call = call i32 @min(%struct.heap_t* %3, i32 %5, i32 %mul, i32 %add)
  store i32 %call, i32* %j, align 4
  %8 = load i32, i32* %j, align 4
  %9 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len2 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %9, i32 0, i32 3
  %10 = load i32, i32* %len2, align 4
  %cmp = icmp eq i32 %8, %10
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  br label %while.end

if.end:                                           ; preds = %while.body
  %11 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data3 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %11, i32 0, i32 0
  %12 = load i32*, i32** %data3, align 4
  %13 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %12, i32 %13
  %14 = load i32, i32* %arrayidx4, align 4
  %15 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data5 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %15, i32 0, i32 0
  %16 = load i32*, i32** %data5, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds i32, i32* %16, i32 %17
  store i32 %14, i32* %arrayidx6, align 4
  %18 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio = getelementptr inbounds %struct.heap_t, %struct.heap_t* %18, i32 0, i32 1
  %19 = load i32*, i32** %prio, align 4
  %20 = load i32, i32* %j, align 4
  %arrayidx7 = getelementptr inbounds i32, i32* %19, i32 %20
  %21 = load i32, i32* %arrayidx7, align 4
  %22 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio8 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %22, i32 0, i32 1
  %23 = load i32*, i32** %prio8, align 4
  %24 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds i32, i32* %23, i32 %24
  store i32 %21, i32* %arrayidx9, align 4
  %25 = load i32, i32* %i, align 4
  %26 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %index = getelementptr inbounds %struct.heap_t, %struct.heap_t* %26, i32 0, i32 2
  %27 = load i32*, i32** %index, align 4
  %28 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data10 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %28, i32 0, i32 0
  %29 = load i32*, i32** %data10, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds i32, i32* %29, i32 %30
  %31 = load i32, i32* %arrayidx11, align 4
  %arrayidx12 = getelementptr inbounds i32, i32* %27, i32 %31
  store i32 %25, i32* %arrayidx12, align 4
  %32 = load i32, i32* %j, align 4
  store i32 %32, i32* %i, align 4
  br label %while.body

while.end:                                        ; preds = %if.then
  %33 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data13 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %33, i32 0, i32 0
  %34 = load i32*, i32** %data13, align 4
  %35 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len14 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %35, i32 0, i32 3
  %36 = load i32, i32* %len14, align 4
  %arrayidx15 = getelementptr inbounds i32, i32* %34, i32 %36
  %37 = load i32, i32* %arrayidx15, align 4
  %38 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data16 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %38, i32 0, i32 0
  %39 = load i32*, i32** %data16, align 4
  %40 = load i32, i32* %i, align 4
  %arrayidx17 = getelementptr inbounds i32, i32* %39, i32 %40
  store i32 %37, i32* %arrayidx17, align 4
  %41 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio18 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %41, i32 0, i32 1
  %42 = load i32*, i32** %prio18, align 4
  %43 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len19 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %43, i32 0, i32 3
  %44 = load i32, i32* %len19, align 4
  %arrayidx20 = getelementptr inbounds i32, i32* %42, i32 %44
  %45 = load i32, i32* %arrayidx20, align 4
  %46 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio21 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %46, i32 0, i32 1
  %47 = load i32*, i32** %prio21, align 4
  %48 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds i32, i32* %47, i32 %48
  store i32 %45, i32* %arrayidx22, align 4
  %49 = load i32, i32* %i, align 4
  %50 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %index23 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %50, i32 0, i32 2
  %51 = load i32*, i32** %index23, align 4
  %52 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data24 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %52, i32 0, i32 0
  %53 = load i32*, i32** %data24, align 4
  %54 = load i32, i32* %i, align 4
  %arrayidx25 = getelementptr inbounds i32, i32* %53, i32 %54
  %55 = load i32, i32* %arrayidx25, align 4
  %arrayidx26 = getelementptr inbounds i32, i32* %51, i32 %55
  store i32 %49, i32* %arrayidx26, align 4
  %56 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len27 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %56, i32 0, i32 3
  %57 = load i32, i32* %len27, align 4
  %dec = add nsw i32 %57, -1
  store i32 %dec, i32* %len27, align 4
  %58 = load i32, i32* %v, align 4
  ret i32 %58
}

; Function Attrs: noinline nounwind optnone
define hidden void @dijkstra(%struct.graph_t* %g, i32 %a, i32 %b) #0 {
entry:
  %g.addr = alloca %struct.graph_t*, align 4
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %v = alloca %struct.vertex_t*, align 4
  %v2 = alloca %struct.vertex_t*, align 4
  %h = alloca %struct.heap_t*, align 4
  %e = alloca %struct.edge_t*, align 4
  %u = alloca %struct.vertex_t*, align 4
  store %struct.graph_t* %g, %struct.graph_t** %g.addr, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  %0 = load i32, i32* %a.addr, align 4
  %sub = sub nsw i32 %0, 97
  store i32 %sub, i32* %a.addr, align 4
  %1 = load i32, i32* %b.addr, align 4
  %sub1 = sub nsw i32 %1, 97
  store i32 %sub1, i32* %b.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_len = getelementptr inbounds %struct.graph_t, %struct.graph_t* %3, i32 0, i32 1
  %4 = load i32, i32* %vertices_len, align 4
  %cmp = icmp slt i32 %2, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices = getelementptr inbounds %struct.graph_t, %struct.graph_t* %5, i32 0, i32 0
  %6 = load %struct.vertex_t**, %struct.vertex_t*** %vertices, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %6, i32 %7
  %8 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx, align 4
  store %struct.vertex_t* %8, %struct.vertex_t** %v, align 4
  %9 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %dist = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %9, i32 0, i32 3
  store i32 2147483647, i32* %dist, align 4
  %10 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %prev = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %10, i32 0, i32 4
  store i32 0, i32* %prev, align 4
  %11 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %visited = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %11, i32 0, i32 5
  store i32 0, i32* %visited, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %i, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %13 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices3 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %13, i32 0, i32 0
  %14 = load %struct.vertex_t**, %struct.vertex_t*** %vertices3, align 4
  %15 = load i32, i32* %a.addr, align 4
  %arrayidx4 = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %14, i32 %15
  %16 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx4, align 4
  store %struct.vertex_t* %16, %struct.vertex_t** %v2, align 4
  %17 = load %struct.vertex_t*, %struct.vertex_t** %v2, align 4
  %dist5 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %17, i32 0, i32 3
  store i32 0, i32* %dist5, align 4
  %18 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_len6 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %18, i32 0, i32 1
  %19 = load i32, i32* %vertices_len6, align 4
  %call = call %struct.heap_t* @create_heap(i32 %19)
  store %struct.heap_t* %call, %struct.heap_t** %h, align 4
  %20 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  %21 = load i32, i32* %a.addr, align 4
  %22 = load %struct.vertex_t*, %struct.vertex_t** %v2, align 4
  %dist7 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %22, i32 0, i32 3
  %23 = load i32, i32* %dist7, align 4
  call void @push_heap(%struct.heap_t* %20, i32 %21, i32 %23)
  br label %while.cond

while.cond:                                       ; preds = %for.end35, %for.end
  %24 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  %len = getelementptr inbounds %struct.heap_t, %struct.heap_t* %24, i32 0, i32 3
  %25 = load i32, i32* %len, align 4
  %tobool = icmp ne i32 %25, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %26 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  %call8 = call i32 @pop_heap(%struct.heap_t* %26)
  store i32 %call8, i32* %i, align 4
  %27 = load i32, i32* %i, align 4
  %28 = load i32, i32* %b.addr, align 4
  %cmp9 = icmp eq i32 %27, %28
  br i1 %cmp9, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  br label %while.end

if.end:                                           ; preds = %while.body
  %29 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices10 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %29, i32 0, i32 0
  %30 = load %struct.vertex_t**, %struct.vertex_t*** %vertices10, align 4
  %31 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %30, i32 %31
  %32 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx11, align 4
  store %struct.vertex_t* %32, %struct.vertex_t** %v2, align 4
  %33 = load %struct.vertex_t*, %struct.vertex_t** %v2, align 4
  %visited12 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %33, i32 0, i32 5
  store i32 1, i32* %visited12, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc33, %if.end
  %34 = load i32, i32* %j, align 4
  %35 = load %struct.vertex_t*, %struct.vertex_t** %v2, align 4
  %edges_len = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %35, i32 0, i32 1
  %36 = load i32, i32* %edges_len, align 4
  %cmp14 = icmp slt i32 %34, %36
  br i1 %cmp14, label %for.body15, label %for.end35

for.body15:                                       ; preds = %for.cond13
  %37 = load %struct.vertex_t*, %struct.vertex_t** %v2, align 4
  %edges = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %37, i32 0, i32 0
  %38 = load %struct.edge_t**, %struct.edge_t*** %edges, align 4
  %39 = load i32, i32* %j, align 4
  %arrayidx16 = getelementptr inbounds %struct.edge_t*, %struct.edge_t** %38, i32 %39
  %40 = load %struct.edge_t*, %struct.edge_t** %arrayidx16, align 4
  store %struct.edge_t* %40, %struct.edge_t** %e, align 4
  %41 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices17 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %41, i32 0, i32 0
  %42 = load %struct.vertex_t**, %struct.vertex_t*** %vertices17, align 4
  %43 = load %struct.edge_t*, %struct.edge_t** %e, align 4
  %vertex = getelementptr inbounds %struct.edge_t, %struct.edge_t* %43, i32 0, i32 0
  %44 = load i32, i32* %vertex, align 4
  %arrayidx18 = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %42, i32 %44
  %45 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx18, align 4
  store %struct.vertex_t* %45, %struct.vertex_t** %u, align 4
  %46 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %visited19 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %46, i32 0, i32 5
  %47 = load i32, i32* %visited19, align 4
  %tobool20 = icmp ne i32 %47, 0
  br i1 %tobool20, label %if.end32, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.body15
  %48 = load %struct.vertex_t*, %struct.vertex_t** %v2, align 4
  %dist21 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %48, i32 0, i32 3
  %49 = load i32, i32* %dist21, align 4
  %50 = load %struct.edge_t*, %struct.edge_t** %e, align 4
  %weight = getelementptr inbounds %struct.edge_t, %struct.edge_t* %50, i32 0, i32 1
  %51 = load i32, i32* %weight, align 4
  %add = add nsw i32 %49, %51
  %52 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %dist22 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %52, i32 0, i32 3
  %53 = load i32, i32* %dist22, align 4
  %cmp23 = icmp sle i32 %add, %53
  br i1 %cmp23, label %if.then24, label %if.end32

if.then24:                                        ; preds = %land.lhs.true
  %54 = load i32, i32* %i, align 4
  %55 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %prev25 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %55, i32 0, i32 4
  store i32 %54, i32* %prev25, align 4
  %56 = load %struct.vertex_t*, %struct.vertex_t** %v2, align 4
  %dist26 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %56, i32 0, i32 3
  %57 = load i32, i32* %dist26, align 4
  %58 = load %struct.edge_t*, %struct.edge_t** %e, align 4
  %weight27 = getelementptr inbounds %struct.edge_t, %struct.edge_t* %58, i32 0, i32 1
  %59 = load i32, i32* %weight27, align 4
  %add28 = add nsw i32 %57, %59
  %60 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %dist29 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %60, i32 0, i32 3
  store i32 %add28, i32* %dist29, align 4
  %61 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  %62 = load %struct.edge_t*, %struct.edge_t** %e, align 4
  %vertex30 = getelementptr inbounds %struct.edge_t, %struct.edge_t* %62, i32 0, i32 0
  %63 = load i32, i32* %vertex30, align 4
  %64 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %dist31 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %64, i32 0, i32 3
  %65 = load i32, i32* %dist31, align 4
  call void @push_heap(%struct.heap_t* %61, i32 %63, i32 %65)
  br label %if.end32

if.end32:                                         ; preds = %if.then24, %land.lhs.true, %for.body15
  br label %for.inc33

for.inc33:                                        ; preds = %if.end32
  %66 = load i32, i32* %j, align 4
  %inc34 = add nsw i32 %66, 1
  store i32 %inc34, i32* %j, align 4
  br label %for.cond13

for.end35:                                        ; preds = %for.cond13
  br label %while.cond

while.end:                                        ; preds = %if.then, %while.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @print_path(%struct.graph_t* %g, i32 %i) #0 {
entry:
  %g.addr = alloca %struct.graph_t*, align 4
  %i.addr = alloca i32, align 4
  %n = alloca i32, align 4
  %j = alloca i32, align 4
  %v = alloca %struct.vertex_t*, align 4
  %u = alloca %struct.vertex_t*, align 4
  %path = alloca i8*, align 4
  store %struct.graph_t* %g, %struct.graph_t** %g.addr, align 4
  store i32 %i, i32* %i.addr, align 4
  %0 = load i32, i32* %i.addr, align 4
  %sub = sub nsw i32 %0, 97
  store i32 %sub, i32* %i.addr, align 4
  %1 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices = getelementptr inbounds %struct.graph_t, %struct.graph_t* %1, i32 0, i32 0
  %2 = load %struct.vertex_t**, %struct.vertex_t*** %vertices, align 4
  %3 = load i32, i32* %i.addr, align 4
  %arrayidx = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %2, i32 %3
  %4 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx, align 4
  store %struct.vertex_t* %4, %struct.vertex_t** %v, align 4
  %5 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %dist = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %5, i32 0, i32 3
  %6 = load i32, i32* %dist, align 4
  %cmp = icmp eq i32 %6, 2147483647
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0))
  br label %return

if.end:                                           ; preds = %entry
  store i32 1, i32* %n, align 4
  %7 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  store %struct.vertex_t* %7, %struct.vertex_t** %u, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %8 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %dist1 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %8, i32 0, i32 3
  %9 = load i32, i32* %dist1, align 4
  %tobool = icmp ne i32 %9, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices2 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %10, i32 0, i32 0
  %11 = load %struct.vertex_t**, %struct.vertex_t*** %vertices2, align 4
  %12 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %prev = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %12, i32 0, i32 4
  %13 = load i32, i32* %prev, align 4
  %arrayidx3 = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %11, i32 %13
  %14 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx3, align 4
  store %struct.vertex_t* %14, %struct.vertex_t** %u, align 4
  %15 = load i32, i32* %n, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %16 = load i32, i32* %n, align 4
  %call4 = call noalias i8* @malloc(i32 %16)
  store i8* %call4, i8** %path, align 4
  %17 = load i32, i32* %i.addr, align 4
  %add = add nsw i32 97, %17
  %conv = trunc i32 %add to i8
  %18 = load i8*, i8** %path, align 4
  %19 = load i32, i32* %n, align 4
  %sub5 = sub nsw i32 %19, 1
  %arrayidx6 = getelementptr inbounds i8, i8* %18, i32 %sub5
  store i8 %conv, i8* %arrayidx6, align 1
  store i32 0, i32* %j, align 4
  %20 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  store %struct.vertex_t* %20, %struct.vertex_t** %u, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc17, %for.end
  %21 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %dist8 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %21, i32 0, i32 3
  %22 = load i32, i32* %dist8, align 4
  %tobool9 = icmp ne i32 %22, 0
  br i1 %tobool9, label %for.body10, label %for.end22

for.body10:                                       ; preds = %for.cond7
  %23 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %prev11 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %23, i32 0, i32 4
  %24 = load i32, i32* %prev11, align 4
  %add12 = add nsw i32 97, %24
  %conv13 = trunc i32 %add12 to i8
  %25 = load i8*, i8** %path, align 4
  %26 = load i32, i32* %n, align 4
  %27 = load i32, i32* %j, align 4
  %sub14 = sub nsw i32 %26, %27
  %sub15 = sub nsw i32 %sub14, 2
  %arrayidx16 = getelementptr inbounds i8, i8* %25, i32 %sub15
  store i8 %conv13, i8* %arrayidx16, align 1
  br label %for.inc17

for.inc17:                                        ; preds = %for.body10
  %28 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices18 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %28, i32 0, i32 0
  %29 = load %struct.vertex_t**, %struct.vertex_t*** %vertices18, align 4
  %30 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %prev19 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %30, i32 0, i32 4
  %31 = load i32, i32* %prev19, align 4
  %arrayidx20 = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %29, i32 %31
  %32 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx20, align 4
  store %struct.vertex_t* %32, %struct.vertex_t** %u, align 4
  %33 = load i32, i32* %j, align 4
  %inc21 = add nsw i32 %33, 1
  store i32 %inc21, i32* %j, align 4
  br label %for.cond7

for.end22:                                        ; preds = %for.cond7
  %34 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %dist23 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %34, i32 0, i32 3
  %35 = load i32, i32* %dist23, align 4
  %36 = load i32, i32* %n, align 4
  %37 = load i8*, i8** %path, align 4
  %call24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i32 0, i32 0), i32 %35, i32 %36, i8* %37)
  br label %return

return:                                           ; preds = %for.end22, %if.then
  ret void
}

declare i32 @printf(i8* %0, ...) #1

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %g = alloca %struct.graph_t*, align 4
  store i32 0, i32* %retval, align 4
  %call = call noalias i8* @calloc(i32 1, i32 12)
  %0 = bitcast i8* %call to %struct.graph_t*
  store %struct.graph_t* %0, %struct.graph_t** %g, align 4
  %1 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %1, i32 97, i32 98, i32 7)
  %2 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %2, i32 97, i32 99, i32 9)
  %3 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %3, i32 97, i32 102, i32 14)
  %4 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %4, i32 98, i32 99, i32 10)
  %5 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %5, i32 98, i32 100, i32 15)
  %6 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %6, i32 99, i32 100, i32 11)
  %7 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %7, i32 99, i32 102, i32 2)
  %8 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %8, i32 100, i32 101, i32 6)
  %9 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %9, i32 101, i32 102, i32 9)
  %10 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @dijkstra(%struct.graph_t* %10, i32 97, i32 101)
  %11 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @print_path(%struct.graph_t* %11, i32 101)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %j.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp sle i32 %1, %3
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %j.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %m, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %arrayidx2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp3 = icmp slt i32 %7, %11
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %j.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %k.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %len4, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp5 = icmp sle i32 %13, %15
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %18 = load i32, i32* %k.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %arrayidx8, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %m, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %arrayidx10, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp11 = icmp slt i32 %19, %23
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %k.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %m, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
#########################################################
; exiting Souper's runOnFunction() for min()

; entering Souper's runOnFunction() for pop_heap()

; ModuleID = './Dijkstras_algorithm.c.bc'
source_filename = "./Dijkstras_algorithm.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.graph_t = type { %struct.vertex_t**, i32, i32 }
%struct.vertex_t = type { %struct.edge_t**, i32, i32, i32, i32, i32 }
%struct.edge_t = type { i32, i32 }
%struct.heap_t = type { i32*, i32*, i32*, i32, i32 }

@.str = private unnamed_addr constant [9 x i8] c"no path\0A\00", align 1
@.str.1 = private unnamed_addr constant [9 x i8] c"%d %.*s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @add_vertex(%struct.graph_t* %g, i32 %i) #0 {
entry:
  %g.addr = alloca %struct.graph_t*, align 4
  %i.addr = alloca i32, align 4
  %size = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.graph_t* %g, %struct.graph_t** %g.addr, align 4
  store i32 %i, i32* %i.addr, align 4
  %0 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_size = getelementptr inbounds %struct.graph_t, %struct.graph_t* %0, i32 0, i32 2
  %1 = load i32, i32* %vertices_size, align 4
  %2 = load i32, i32* %i.addr, align 4
  %add = add nsw i32 %2, 1
  %cmp = icmp slt i32 %1, %add
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_size1 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %3, i32 0, i32 2
  %4 = load i32, i32* %vertices_size1, align 4
  %mul = mul nsw i32 %4, 2
  %5 = load i32, i32* %i.addr, align 4
  %cmp2 = icmp sgt i32 %mul, %5
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %6 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_size3 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %6, i32 0, i32 2
  %7 = load i32, i32* %vertices_size3, align 4
  %mul4 = mul nsw i32 %7, 2
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %8 = load i32, i32* %i.addr, align 4
  %add5 = add nsw i32 %8, 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %mul4, %cond.true ], [ %add5, %cond.false ]
  store i32 %cond, i32* %size, align 4
  %9 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices = getelementptr inbounds %struct.graph_t, %struct.graph_t* %9, i32 0, i32 0
  %10 = load %struct.vertex_t**, %struct.vertex_t*** %vertices, align 4
  %11 = bitcast %struct.vertex_t** %10 to i8*
  %12 = load i32, i32* %size, align 4
  %mul6 = mul i32 %12, 4
  %call = call i8* @realloc(i8* %11, i32 %mul6)
  %13 = bitcast i8* %call to %struct.vertex_t**
  %14 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices7 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %14, i32 0, i32 0
  store %struct.vertex_t** %13, %struct.vertex_t*** %vertices7, align 4
  %15 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_size8 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %15, i32 0, i32 2
  %16 = load i32, i32* %vertices_size8, align 4
  store i32 %16, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %cond.end
  %17 = load i32, i32* %j, align 4
  %18 = load i32, i32* %size, align 4
  %cmp9 = icmp slt i32 %17, %18
  br i1 %cmp9, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %19 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices10 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %19, i32 0, i32 0
  %20 = load %struct.vertex_t**, %struct.vertex_t*** %vertices10, align 4
  %21 = load i32, i32* %j, align 4
  %arrayidx = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %20, i32 %21
  store %struct.vertex_t* null, %struct.vertex_t** %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %22 = load i32, i32* %j, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %23 = load i32, i32* %size, align 4
  %24 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_size11 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %24, i32 0, i32 2
  store i32 %23, i32* %vertices_size11, align 4
  br label %if.end

if.end:                                           ; preds = %for.end, %entry
  %25 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices12 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %25, i32 0, i32 0
  %26 = load %struct.vertex_t**, %struct.vertex_t*** %vertices12, align 4
  %27 = load i32, i32* %i.addr, align 4
  %arrayidx13 = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %26, i32 %27
  %28 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx13, align 4
  %tobool = icmp ne %struct.vertex_t* %28, null
  br i1 %tobool, label %if.end19, label %if.then14

if.then14:                                        ; preds = %if.end
  %call15 = call noalias i8* @calloc(i32 1, i32 24)
  %29 = bitcast i8* %call15 to %struct.vertex_t*
  %30 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices16 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %30, i32 0, i32 0
  %31 = load %struct.vertex_t**, %struct.vertex_t*** %vertices16, align 4
  %32 = load i32, i32* %i.addr, align 4
  %arrayidx17 = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %31, i32 %32
  store %struct.vertex_t* %29, %struct.vertex_t** %arrayidx17, align 4
  %33 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_len = getelementptr inbounds %struct.graph_t, %struct.graph_t* %33, i32 0, i32 1
  %34 = load i32, i32* %vertices_len, align 4
  %inc18 = add nsw i32 %34, 1
  store i32 %inc18, i32* %vertices_len, align 4
  br label %if.end19

if.end19:                                         ; preds = %if.then14, %if.end
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

declare noalias i8* @calloc(i32 %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @add_edge(%struct.graph_t* %g, i32 %a, i32 %b, i32 %w) #0 {
entry:
  %g.addr = alloca %struct.graph_t*, align 4
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %w.addr = alloca i32, align 4
  %v = alloca %struct.vertex_t*, align 4
  %e = alloca %struct.edge_t*, align 4
  store %struct.graph_t* %g, %struct.graph_t** %g.addr, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  store i32 %w, i32* %w.addr, align 4
  %0 = load i32, i32* %a.addr, align 4
  %sub = sub nsw i32 %0, 97
  store i32 %sub, i32* %a.addr, align 4
  %1 = load i32, i32* %b.addr, align 4
  %sub1 = sub nsw i32 %1, 97
  store i32 %sub1, i32* %b.addr, align 4
  %2 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %3 = load i32, i32* %a.addr, align 4
  call void @add_vertex(%struct.graph_t* %2, i32 %3)
  %4 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %5 = load i32, i32* %b.addr, align 4
  call void @add_vertex(%struct.graph_t* %4, i32 %5)
  %6 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices = getelementptr inbounds %struct.graph_t, %struct.graph_t* %6, i32 0, i32 0
  %7 = load %struct.vertex_t**, %struct.vertex_t*** %vertices, align 4
  %8 = load i32, i32* %a.addr, align 4
  %arrayidx = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %7, i32 %8
  %9 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx, align 4
  store %struct.vertex_t* %9, %struct.vertex_t** %v, align 4
  %10 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges_len = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %10, i32 0, i32 1
  %11 = load i32, i32* %edges_len, align 4
  %12 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges_size = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %12, i32 0, i32 2
  %13 = load i32, i32* %edges_size, align 4
  %cmp = icmp sge i32 %11, %13
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %14 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges_size2 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %14, i32 0, i32 2
  %15 = load i32, i32* %edges_size2, align 4
  %tobool = icmp ne i32 %15, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %16 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges_size3 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %16, i32 0, i32 2
  %17 = load i32, i32* %edges_size3, align 4
  %mul = mul nsw i32 %17, 2
  br label %cond.end

cond.false:                                       ; preds = %if.then
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %mul, %cond.true ], [ 4, %cond.false ]
  %18 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges_size4 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %18, i32 0, i32 2
  store i32 %cond, i32* %edges_size4, align 4
  %19 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %19, i32 0, i32 0
  %20 = load %struct.edge_t**, %struct.edge_t*** %edges, align 4
  %21 = bitcast %struct.edge_t** %20 to i8*
  %22 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges_size5 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %22, i32 0, i32 2
  %23 = load i32, i32* %edges_size5, align 4
  %mul6 = mul i32 %23, 4
  %call = call i8* @realloc(i8* %21, i32 %mul6)
  %24 = bitcast i8* %call to %struct.edge_t**
  %25 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges7 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %25, i32 0, i32 0
  store %struct.edge_t** %24, %struct.edge_t*** %edges7, align 4
  br label %if.end

if.end:                                           ; preds = %cond.end, %entry
  %call8 = call noalias i8* @calloc(i32 1, i32 8)
  %26 = bitcast i8* %call8 to %struct.edge_t*
  store %struct.edge_t* %26, %struct.edge_t** %e, align 4
  %27 = load i32, i32* %b.addr, align 4
  %28 = load %struct.edge_t*, %struct.edge_t** %e, align 4
  %vertex = getelementptr inbounds %struct.edge_t, %struct.edge_t* %28, i32 0, i32 0
  store i32 %27, i32* %vertex, align 4
  %29 = load i32, i32* %w.addr, align 4
  %30 = load %struct.edge_t*, %struct.edge_t** %e, align 4
  %weight = getelementptr inbounds %struct.edge_t, %struct.edge_t* %30, i32 0, i32 1
  store i32 %29, i32* %weight, align 4
  %31 = load %struct.edge_t*, %struct.edge_t** %e, align 4
  %32 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges9 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %32, i32 0, i32 0
  %33 = load %struct.edge_t**, %struct.edge_t*** %edges9, align 4
  %34 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges_len10 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %34, i32 0, i32 1
  %35 = load i32, i32* %edges_len10, align 4
  %inc = add nsw i32 %35, 1
  store i32 %inc, i32* %edges_len10, align 4
  %arrayidx11 = getelementptr inbounds %struct.edge_t*, %struct.edge_t** %33, i32 %35
  store %struct.edge_t* %31, %struct.edge_t** %arrayidx11, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.heap_t* @create_heap(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %h = alloca %struct.heap_t*, align 4
  store i32 %n, i32* %n.addr, align 4
  %call = call noalias i8* @calloc(i32 1, i32 20)
  %0 = bitcast i8* %call to %struct.heap_t*
  store %struct.heap_t* %0, %struct.heap_t** %h, align 4
  %1 = load i32, i32* %n.addr, align 4
  %add = add nsw i32 %1, 1
  %call1 = call noalias i8* @calloc(i32 %add, i32 4)
  %2 = bitcast i8* %call1 to i32*
  %3 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  %data = getelementptr inbounds %struct.heap_t, %struct.heap_t* %3, i32 0, i32 0
  store i32* %2, i32** %data, align 4
  %4 = load i32, i32* %n.addr, align 4
  %add2 = add nsw i32 %4, 1
  %call3 = call noalias i8* @calloc(i32 %add2, i32 4)
  %5 = bitcast i8* %call3 to i32*
  %6 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  %prio = getelementptr inbounds %struct.heap_t, %struct.heap_t* %6, i32 0, i32 1
  store i32* %5, i32** %prio, align 4
  %7 = load i32, i32* %n.addr, align 4
  %call4 = call noalias i8* @calloc(i32 %7, i32 4)
  %8 = bitcast i8* %call4 to i32*
  %9 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  %index = getelementptr inbounds %struct.heap_t, %struct.heap_t* %9, i32 0, i32 2
  store i32* %8, i32** %index, align 4
  %10 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  ret %struct.heap_t* %10
}

; Function Attrs: noinline nounwind optnone
define hidden void @push_heap(%struct.heap_t* %h, i32 %v, i32 %p) #0 {
entry:
  %h.addr = alloca %struct.heap_t*, align 4
  %v.addr = alloca i32, align 4
  %p.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.heap_t* %h, %struct.heap_t** %h.addr, align 4
  store i32 %v, i32* %v.addr, align 4
  store i32 %p, i32* %p.addr, align 4
  %0 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %index = getelementptr inbounds %struct.heap_t, %struct.heap_t* %0, i32 0, i32 2
  %1 = load i32*, i32** %index, align 4
  %2 = load i32, i32* %v.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 %2
  %3 = load i32, i32* %arrayidx, align 4
  %cmp = icmp eq i32 %3, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %4 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len = getelementptr inbounds %struct.heap_t, %struct.heap_t* %4, i32 0, i32 3
  %5 = load i32, i32* %len, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %len, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  %6 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %index1 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %6, i32 0, i32 2
  %7 = load i32*, i32** %index1, align 4
  %8 = load i32, i32* %v.addr, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %7, i32 %8
  %9 = load i32, i32* %arrayidx2, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %inc, %cond.true ], [ %9, %cond.false ]
  store i32 %cond, i32* %i, align 4
  %10 = load i32, i32* %i, align 4
  %div = sdiv i32 %10, 2
  store i32 %div, i32* %j, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %cond.end
  %11 = load i32, i32* %i, align 4
  %cmp3 = icmp sgt i32 %11, 1
  br i1 %cmp3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %12 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio = getelementptr inbounds %struct.heap_t, %struct.heap_t* %12, i32 0, i32 1
  %13 = load i32*, i32** %prio, align 4
  %14 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %13, i32 %14
  %15 = load i32, i32* %arrayidx4, align 4
  %16 = load i32, i32* %p.addr, align 4
  %cmp5 = icmp slt i32 %15, %16
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  br label %while.end

if.end:                                           ; preds = %while.body
  %17 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data = getelementptr inbounds %struct.heap_t, %struct.heap_t* %17, i32 0, i32 0
  %18 = load i32*, i32** %data, align 4
  %19 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds i32, i32* %18, i32 %19
  %20 = load i32, i32* %arrayidx6, align 4
  %21 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data7 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %21, i32 0, i32 0
  %22 = load i32*, i32** %data7, align 4
  %23 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %22, i32 %23
  store i32 %20, i32* %arrayidx8, align 4
  %24 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio9 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %24, i32 0, i32 1
  %25 = load i32*, i32** %prio9, align 4
  %26 = load i32, i32* %j, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %25, i32 %26
  %27 = load i32, i32* %arrayidx10, align 4
  %28 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio11 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %28, i32 0, i32 1
  %29 = load i32*, i32** %prio11, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds i32, i32* %29, i32 %30
  store i32 %27, i32* %arrayidx12, align 4
  %31 = load i32, i32* %i, align 4
  %32 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %index13 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %32, i32 0, i32 2
  %33 = load i32*, i32** %index13, align 4
  %34 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data14 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %34, i32 0, i32 0
  %35 = load i32*, i32** %data14, align 4
  %36 = load i32, i32* %i, align 4
  %arrayidx15 = getelementptr inbounds i32, i32* %35, i32 %36
  %37 = load i32, i32* %arrayidx15, align 4
  %arrayidx16 = getelementptr inbounds i32, i32* %33, i32 %37
  store i32 %31, i32* %arrayidx16, align 4
  %38 = load i32, i32* %j, align 4
  store i32 %38, i32* %i, align 4
  %39 = load i32, i32* %j, align 4
  %div17 = sdiv i32 %39, 2
  store i32 %div17, i32* %j, align 4
  br label %while.cond

while.end:                                        ; preds = %if.then, %while.cond
  %40 = load i32, i32* %v.addr, align 4
  %41 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data18 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %41, i32 0, i32 0
  %42 = load i32*, i32** %data18, align 4
  %43 = load i32, i32* %i, align 4
  %arrayidx19 = getelementptr inbounds i32, i32* %42, i32 %43
  store i32 %40, i32* %arrayidx19, align 4
  %44 = load i32, i32* %p.addr, align 4
  %45 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio20 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %45, i32 0, i32 1
  %46 = load i32*, i32** %prio20, align 4
  %47 = load i32, i32* %i, align 4
  %arrayidx21 = getelementptr inbounds i32, i32* %46, i32 %47
  store i32 %44, i32* %arrayidx21, align 4
  %48 = load i32, i32* %i, align 4
  %49 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %index22 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %49, i32 0, i32 2
  %50 = load i32*, i32** %index22, align 4
  %51 = load i32, i32* %v.addr, align 4
  %arrayidx23 = getelementptr inbounds i32, i32* %50, i32 %51
  store i32 %48, i32* %arrayidx23, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @min(%struct.heap_t* %h, i32 %i, i32 %j, i32 %k) #0 {
entry:
  %h.addr = alloca %struct.heap_t*, align 4
  %i.addr = alloca i32, align 4
  %j.addr = alloca i32, align 4
  %k.addr = alloca i32, align 4
  %m = alloca i32, align 4
  store %struct.heap_t* %h, %struct.heap_t** %h.addr, align 4
  store i32 %i, i32* %i.addr, align 4
  store i32 %j, i32* %j.addr, align 4
  store i32 %k, i32* %k.addr, align 4
  %0 = load i32, i32* %i.addr, align 4
  store i32 %0, i32* %m, align 4
  %1 = load i32, i32* %j.addr, align 4
  %2 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len = getelementptr inbounds %struct.heap_t, %struct.heap_t* %2, i32 0, i32 3
  %3 = load i32, i32* %len, align 4
  %cmp = icmp sle i32 %1, %3
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio = getelementptr inbounds %struct.heap_t, %struct.heap_t* %4, i32 0, i32 1
  %5 = load i32*, i32** %prio, align 4
  %6 = load i32, i32* %j.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %5, i32 %6
  %7 = load i32, i32* %arrayidx, align 4
  %8 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio1 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %8, i32 0, i32 1
  %9 = load i32*, i32** %prio1, align 4
  %10 = load i32, i32* %m, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %9, i32 %10
  %11 = load i32, i32* %arrayidx2, align 4
  %cmp3 = icmp slt i32 %7, %11
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %12 = load i32, i32* %j.addr, align 4
  store i32 %12, i32* %m, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %13 = load i32, i32* %k.addr, align 4
  %14 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len4 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %14, i32 0, i32 3
  %15 = load i32, i32* %len4, align 4
  %cmp5 = icmp sle i32 %13, %15
  br i1 %cmp5, label %land.lhs.true6, label %if.end13

land.lhs.true6:                                   ; preds = %if.end
  %16 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio7 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %16, i32 0, i32 1
  %17 = load i32*, i32** %prio7, align 4
  %18 = load i32, i32* %k.addr, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %17, i32 %18
  %19 = load i32, i32* %arrayidx8, align 4
  %20 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio9 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %20, i32 0, i32 1
  %21 = load i32*, i32** %prio9, align 4
  %22 = load i32, i32* %m, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %21, i32 %22
  %23 = load i32, i32* %arrayidx10, align 4
  %cmp11 = icmp slt i32 %19, %23
  br i1 %cmp11, label %if.then12, label %if.end13

if.then12:                                        ; preds = %land.lhs.true6
  %24 = load i32, i32* %k.addr, align 4
  store i32 %24, i32* %m, align 4
  br label %if.end13

if.end13:                                         ; preds = %if.then12, %land.lhs.true6, %if.end
  %25 = load i32, i32* %m, align 4
  ret i32 %25
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @pop_heap(%struct.heap_t* %h) #0 {
entry:
  %h.addr = alloca %struct.heap_t*, align 4
  %v = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.heap_t* %h, %struct.heap_t** %h.addr, align 4
  %0 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data = getelementptr inbounds %struct.heap_t, %struct.heap_t* %0, i32 0, i32 0
  %1 = load i32*, i32** %data, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 1
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %v, align 4
  store i32 1, i32* %i, align 4
  br label %while.body

while.body:                                       ; preds = %entry, %if.end
  %3 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %4 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len = getelementptr inbounds %struct.heap_t, %struct.heap_t* %4, i32 0, i32 3
  %5 = load i32, i32* %len, align 4
  %6 = load i32, i32* %i, align 4
  %mul = mul nsw i32 2, %6
  %7 = load i32, i32* %i, align 4
  %mul1 = mul nsw i32 2, %7
  %add = add nsw i32 %mul1, 1
  %call = call i32 @min(%struct.heap_t* %3, i32 %5, i32 %mul, i32 %add)
  store i32 %call, i32* %j, align 4
  %8 = load i32, i32* %j, align 4
  %9 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len2 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %9, i32 0, i32 3
  %10 = load i32, i32* %len2, align 4
  %cmp = icmp eq i32 %8, %10
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  br label %while.end

if.end:                                           ; preds = %while.body
  %11 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data3 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %11, i32 0, i32 0
  %12 = load i32*, i32** %data3, align 4
  %13 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %12, i32 %13
  %14 = load i32, i32* %arrayidx4, align 4
  %15 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data5 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %15, i32 0, i32 0
  %16 = load i32*, i32** %data5, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds i32, i32* %16, i32 %17
  store i32 %14, i32* %arrayidx6, align 4
  %18 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio = getelementptr inbounds %struct.heap_t, %struct.heap_t* %18, i32 0, i32 1
  %19 = load i32*, i32** %prio, align 4
  %20 = load i32, i32* %j, align 4
  %arrayidx7 = getelementptr inbounds i32, i32* %19, i32 %20
  %21 = load i32, i32* %arrayidx7, align 4
  %22 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio8 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %22, i32 0, i32 1
  %23 = load i32*, i32** %prio8, align 4
  %24 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds i32, i32* %23, i32 %24
  store i32 %21, i32* %arrayidx9, align 4
  %25 = load i32, i32* %i, align 4
  %26 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %index = getelementptr inbounds %struct.heap_t, %struct.heap_t* %26, i32 0, i32 2
  %27 = load i32*, i32** %index, align 4
  %28 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data10 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %28, i32 0, i32 0
  %29 = load i32*, i32** %data10, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds i32, i32* %29, i32 %30
  %31 = load i32, i32* %arrayidx11, align 4
  %arrayidx12 = getelementptr inbounds i32, i32* %27, i32 %31
  store i32 %25, i32* %arrayidx12, align 4
  %32 = load i32, i32* %j, align 4
  store i32 %32, i32* %i, align 4
  br label %while.body

while.end:                                        ; preds = %if.then
  %33 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data13 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %33, i32 0, i32 0
  %34 = load i32*, i32** %data13, align 4
  %35 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len14 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %35, i32 0, i32 3
  %36 = load i32, i32* %len14, align 4
  %arrayidx15 = getelementptr inbounds i32, i32* %34, i32 %36
  %37 = load i32, i32* %arrayidx15, align 4
  %38 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data16 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %38, i32 0, i32 0
  %39 = load i32*, i32** %data16, align 4
  %40 = load i32, i32* %i, align 4
  %arrayidx17 = getelementptr inbounds i32, i32* %39, i32 %40
  store i32 %37, i32* %arrayidx17, align 4
  %41 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio18 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %41, i32 0, i32 1
  %42 = load i32*, i32** %prio18, align 4
  %43 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len19 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %43, i32 0, i32 3
  %44 = load i32, i32* %len19, align 4
  %arrayidx20 = getelementptr inbounds i32, i32* %42, i32 %44
  %45 = load i32, i32* %arrayidx20, align 4
  %46 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio21 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %46, i32 0, i32 1
  %47 = load i32*, i32** %prio21, align 4
  %48 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds i32, i32* %47, i32 %48
  store i32 %45, i32* %arrayidx22, align 4
  %49 = load i32, i32* %i, align 4
  %50 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %index23 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %50, i32 0, i32 2
  %51 = load i32*, i32** %index23, align 4
  %52 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data24 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %52, i32 0, i32 0
  %53 = load i32*, i32** %data24, align 4
  %54 = load i32, i32* %i, align 4
  %arrayidx25 = getelementptr inbounds i32, i32* %53, i32 %54
  %55 = load i32, i32* %arrayidx25, align 4
  %arrayidx26 = getelementptr inbounds i32, i32* %51, i32 %55
  store i32 %49, i32* %arrayidx26, align 4
  %56 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len27 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %56, i32 0, i32 3
  %57 = load i32, i32* %len27, align 4
  %dec = add nsw i32 %57, -1
  store i32 %dec, i32* %len27, align 4
  %58 = load i32, i32* %v, align 4
  ret i32 %58
}

; Function Attrs: noinline nounwind optnone
define hidden void @dijkstra(%struct.graph_t* %g, i32 %a, i32 %b) #0 {
entry:
  %g.addr = alloca %struct.graph_t*, align 4
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %v = alloca %struct.vertex_t*, align 4
  %v2 = alloca %struct.vertex_t*, align 4
  %h = alloca %struct.heap_t*, align 4
  %e = alloca %struct.edge_t*, align 4
  %u = alloca %struct.vertex_t*, align 4
  store %struct.graph_t* %g, %struct.graph_t** %g.addr, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  %0 = load i32, i32* %a.addr, align 4
  %sub = sub nsw i32 %0, 97
  store i32 %sub, i32* %a.addr, align 4
  %1 = load i32, i32* %b.addr, align 4
  %sub1 = sub nsw i32 %1, 97
  store i32 %sub1, i32* %b.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_len = getelementptr inbounds %struct.graph_t, %struct.graph_t* %3, i32 0, i32 1
  %4 = load i32, i32* %vertices_len, align 4
  %cmp = icmp slt i32 %2, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices = getelementptr inbounds %struct.graph_t, %struct.graph_t* %5, i32 0, i32 0
  %6 = load %struct.vertex_t**, %struct.vertex_t*** %vertices, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %6, i32 %7
  %8 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx, align 4
  store %struct.vertex_t* %8, %struct.vertex_t** %v, align 4
  %9 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %dist = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %9, i32 0, i32 3
  store i32 2147483647, i32* %dist, align 4
  %10 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %prev = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %10, i32 0, i32 4
  store i32 0, i32* %prev, align 4
  %11 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %visited = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %11, i32 0, i32 5
  store i32 0, i32* %visited, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %i, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %13 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices3 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %13, i32 0, i32 0
  %14 = load %struct.vertex_t**, %struct.vertex_t*** %vertices3, align 4
  %15 = load i32, i32* %a.addr, align 4
  %arrayidx4 = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %14, i32 %15
  %16 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx4, align 4
  store %struct.vertex_t* %16, %struct.vertex_t** %v2, align 4
  %17 = load %struct.vertex_t*, %struct.vertex_t** %v2, align 4
  %dist5 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %17, i32 0, i32 3
  store i32 0, i32* %dist5, align 4
  %18 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_len6 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %18, i32 0, i32 1
  %19 = load i32, i32* %vertices_len6, align 4
  %call = call %struct.heap_t* @create_heap(i32 %19)
  store %struct.heap_t* %call, %struct.heap_t** %h, align 4
  %20 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  %21 = load i32, i32* %a.addr, align 4
  %22 = load %struct.vertex_t*, %struct.vertex_t** %v2, align 4
  %dist7 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %22, i32 0, i32 3
  %23 = load i32, i32* %dist7, align 4
  call void @push_heap(%struct.heap_t* %20, i32 %21, i32 %23)
  br label %while.cond

while.cond:                                       ; preds = %for.end35, %for.end
  %24 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  %len = getelementptr inbounds %struct.heap_t, %struct.heap_t* %24, i32 0, i32 3
  %25 = load i32, i32* %len, align 4
  %tobool = icmp ne i32 %25, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %26 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  %call8 = call i32 @pop_heap(%struct.heap_t* %26)
  store i32 %call8, i32* %i, align 4
  %27 = load i32, i32* %i, align 4
  %28 = load i32, i32* %b.addr, align 4
  %cmp9 = icmp eq i32 %27, %28
  br i1 %cmp9, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  br label %while.end

if.end:                                           ; preds = %while.body
  %29 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices10 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %29, i32 0, i32 0
  %30 = load %struct.vertex_t**, %struct.vertex_t*** %vertices10, align 4
  %31 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %30, i32 %31
  %32 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx11, align 4
  store %struct.vertex_t* %32, %struct.vertex_t** %v2, align 4
  %33 = load %struct.vertex_t*, %struct.vertex_t** %v2, align 4
  %visited12 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %33, i32 0, i32 5
  store i32 1, i32* %visited12, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc33, %if.end
  %34 = load i32, i32* %j, align 4
  %35 = load %struct.vertex_t*, %struct.vertex_t** %v2, align 4
  %edges_len = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %35, i32 0, i32 1
  %36 = load i32, i32* %edges_len, align 4
  %cmp14 = icmp slt i32 %34, %36
  br i1 %cmp14, label %for.body15, label %for.end35

for.body15:                                       ; preds = %for.cond13
  %37 = load %struct.vertex_t*, %struct.vertex_t** %v2, align 4
  %edges = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %37, i32 0, i32 0
  %38 = load %struct.edge_t**, %struct.edge_t*** %edges, align 4
  %39 = load i32, i32* %j, align 4
  %arrayidx16 = getelementptr inbounds %struct.edge_t*, %struct.edge_t** %38, i32 %39
  %40 = load %struct.edge_t*, %struct.edge_t** %arrayidx16, align 4
  store %struct.edge_t* %40, %struct.edge_t** %e, align 4
  %41 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices17 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %41, i32 0, i32 0
  %42 = load %struct.vertex_t**, %struct.vertex_t*** %vertices17, align 4
  %43 = load %struct.edge_t*, %struct.edge_t** %e, align 4
  %vertex = getelementptr inbounds %struct.edge_t, %struct.edge_t* %43, i32 0, i32 0
  %44 = load i32, i32* %vertex, align 4
  %arrayidx18 = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %42, i32 %44
  %45 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx18, align 4
  store %struct.vertex_t* %45, %struct.vertex_t** %u, align 4
  %46 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %visited19 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %46, i32 0, i32 5
  %47 = load i32, i32* %visited19, align 4
  %tobool20 = icmp ne i32 %47, 0
  br i1 %tobool20, label %if.end32, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.body15
  %48 = load %struct.vertex_t*, %struct.vertex_t** %v2, align 4
  %dist21 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %48, i32 0, i32 3
  %49 = load i32, i32* %dist21, align 4
  %50 = load %struct.edge_t*, %struct.edge_t** %e, align 4
  %weight = getelementptr inbounds %struct.edge_t, %struct.edge_t* %50, i32 0, i32 1
  %51 = load i32, i32* %weight, align 4
  %add = add nsw i32 %49, %51
  %52 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %dist22 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %52, i32 0, i32 3
  %53 = load i32, i32* %dist22, align 4
  %cmp23 = icmp sle i32 %add, %53
  br i1 %cmp23, label %if.then24, label %if.end32

if.then24:                                        ; preds = %land.lhs.true
  %54 = load i32, i32* %i, align 4
  %55 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %prev25 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %55, i32 0, i32 4
  store i32 %54, i32* %prev25, align 4
  %56 = load %struct.vertex_t*, %struct.vertex_t** %v2, align 4
  %dist26 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %56, i32 0, i32 3
  %57 = load i32, i32* %dist26, align 4
  %58 = load %struct.edge_t*, %struct.edge_t** %e, align 4
  %weight27 = getelementptr inbounds %struct.edge_t, %struct.edge_t* %58, i32 0, i32 1
  %59 = load i32, i32* %weight27, align 4
  %add28 = add nsw i32 %57, %59
  %60 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %dist29 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %60, i32 0, i32 3
  store i32 %add28, i32* %dist29, align 4
  %61 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  %62 = load %struct.edge_t*, %struct.edge_t** %e, align 4
  %vertex30 = getelementptr inbounds %struct.edge_t, %struct.edge_t* %62, i32 0, i32 0
  %63 = load i32, i32* %vertex30, align 4
  %64 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %dist31 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %64, i32 0, i32 3
  %65 = load i32, i32* %dist31, align 4
  call void @push_heap(%struct.heap_t* %61, i32 %63, i32 %65)
  br label %if.end32

if.end32:                                         ; preds = %if.then24, %land.lhs.true, %for.body15
  br label %for.inc33

for.inc33:                                        ; preds = %if.end32
  %66 = load i32, i32* %j, align 4
  %inc34 = add nsw i32 %66, 1
  store i32 %inc34, i32* %j, align 4
  br label %for.cond13

for.end35:                                        ; preds = %for.cond13
  br label %while.cond

while.end:                                        ; preds = %if.then, %while.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @print_path(%struct.graph_t* %g, i32 %i) #0 {
entry:
  %g.addr = alloca %struct.graph_t*, align 4
  %i.addr = alloca i32, align 4
  %n = alloca i32, align 4
  %j = alloca i32, align 4
  %v = alloca %struct.vertex_t*, align 4
  %u = alloca %struct.vertex_t*, align 4
  %path = alloca i8*, align 4
  store %struct.graph_t* %g, %struct.graph_t** %g.addr, align 4
  store i32 %i, i32* %i.addr, align 4
  %0 = load i32, i32* %i.addr, align 4
  %sub = sub nsw i32 %0, 97
  store i32 %sub, i32* %i.addr, align 4
  %1 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices = getelementptr inbounds %struct.graph_t, %struct.graph_t* %1, i32 0, i32 0
  %2 = load %struct.vertex_t**, %struct.vertex_t*** %vertices, align 4
  %3 = load i32, i32* %i.addr, align 4
  %arrayidx = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %2, i32 %3
  %4 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx, align 4
  store %struct.vertex_t* %4, %struct.vertex_t** %v, align 4
  %5 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %dist = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %5, i32 0, i32 3
  %6 = load i32, i32* %dist, align 4
  %cmp = icmp eq i32 %6, 2147483647
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0))
  br label %return

if.end:                                           ; preds = %entry
  store i32 1, i32* %n, align 4
  %7 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  store %struct.vertex_t* %7, %struct.vertex_t** %u, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %8 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %dist1 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %8, i32 0, i32 3
  %9 = load i32, i32* %dist1, align 4
  %tobool = icmp ne i32 %9, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices2 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %10, i32 0, i32 0
  %11 = load %struct.vertex_t**, %struct.vertex_t*** %vertices2, align 4
  %12 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %prev = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %12, i32 0, i32 4
  %13 = load i32, i32* %prev, align 4
  %arrayidx3 = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %11, i32 %13
  %14 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx3, align 4
  store %struct.vertex_t* %14, %struct.vertex_t** %u, align 4
  %15 = load i32, i32* %n, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %16 = load i32, i32* %n, align 4
  %call4 = call noalias i8* @malloc(i32 %16)
  store i8* %call4, i8** %path, align 4
  %17 = load i32, i32* %i.addr, align 4
  %add = add nsw i32 97, %17
  %conv = trunc i32 %add to i8
  %18 = load i8*, i8** %path, align 4
  %19 = load i32, i32* %n, align 4
  %sub5 = sub nsw i32 %19, 1
  %arrayidx6 = getelementptr inbounds i8, i8* %18, i32 %sub5
  store i8 %conv, i8* %arrayidx6, align 1
  store i32 0, i32* %j, align 4
  %20 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  store %struct.vertex_t* %20, %struct.vertex_t** %u, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc17, %for.end
  %21 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %dist8 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %21, i32 0, i32 3
  %22 = load i32, i32* %dist8, align 4
  %tobool9 = icmp ne i32 %22, 0
  br i1 %tobool9, label %for.body10, label %for.end22

for.body10:                                       ; preds = %for.cond7
  %23 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %prev11 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %23, i32 0, i32 4
  %24 = load i32, i32* %prev11, align 4
  %add12 = add nsw i32 97, %24
  %conv13 = trunc i32 %add12 to i8
  %25 = load i8*, i8** %path, align 4
  %26 = load i32, i32* %n, align 4
  %27 = load i32, i32* %j, align 4
  %sub14 = sub nsw i32 %26, %27
  %sub15 = sub nsw i32 %sub14, 2
  %arrayidx16 = getelementptr inbounds i8, i8* %25, i32 %sub15
  store i8 %conv13, i8* %arrayidx16, align 1
  br label %for.inc17

for.inc17:                                        ; preds = %for.body10
  %28 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices18 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %28, i32 0, i32 0
  %29 = load %struct.vertex_t**, %struct.vertex_t*** %vertices18, align 4
  %30 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %prev19 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %30, i32 0, i32 4
  %31 = load i32, i32* %prev19, align 4
  %arrayidx20 = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %29, i32 %31
  %32 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx20, align 4
  store %struct.vertex_t* %32, %struct.vertex_t** %u, align 4
  %33 = load i32, i32* %j, align 4
  %inc21 = add nsw i32 %33, 1
  store i32 %inc21, i32* %j, align 4
  br label %for.cond7

for.end22:                                        ; preds = %for.cond7
  %34 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %dist23 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %34, i32 0, i32 3
  %35 = load i32, i32* %dist23, align 4
  %36 = load i32, i32* %n, align 4
  %37 = load i8*, i8** %path, align 4
  %call24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i32 0, i32 0), i32 %35, i32 %36, i8* %37)
  br label %return

return:                                           ; preds = %for.end22, %if.then
  ret void
}

declare i32 @printf(i8* %0, ...) #1

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %g = alloca %struct.graph_t*, align 4
  store i32 0, i32* %retval, align 4
  %call = call noalias i8* @calloc(i32 1, i32 12)
  %0 = bitcast i8* %call to %struct.graph_t*
  store %struct.graph_t* %0, %struct.graph_t** %g, align 4
  %1 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %1, i32 97, i32 98, i32 7)
  %2 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %2, i32 97, i32 99, i32 9)
  %3 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %3, i32 97, i32 102, i32 14)
  %4 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %4, i32 98, i32 99, i32 10)
  %5 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %5, i32 98, i32 100, i32 15)
  %6 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %6, i32 99, i32 100, i32 11)
  %7 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %7, i32 99, i32 102, i32 2)
  %8 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %8, i32 100, i32 101, i32 6)
  %9 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %9, i32 101, i32 102, i32 9)
  %10 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @dijkstra(%struct.graph_t* %10, i32 97, i32 101)
  %11 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @print_path(%struct.graph_t* %11, i32 101)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul nsw i32 2, %6
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul1 = mul nsw i32 2, %7
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 2:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %add = add nsw i32 %mul1, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mulnsw 2:i32, %0
%2:i32 = addnsw 1:i32, %1
infer %2

; *****
; For LLVM instruction:
;  %call = call i32 @min(%struct.heap_t* %3, i32 %5, i32 %mul, i32 %add)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %len2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %8, %10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %arrayidx4, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %20 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %arrayidx7, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %arrayidx11, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %32 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %len14, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %37 = load i32, i32* %arrayidx15, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %40 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %44 = load i32, i32* %len19, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %45 = load i32, i32* %arrayidx20, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %48 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %49 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %54 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %55 = load i32, i32* %arrayidx25, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %57 = load i32, i32* %len27, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %dec = add nsw i32 %57, -1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %58 = load i32, i32* %v, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mulnsw 2:i32, %0
%2:i32 = addnsw 1:i32, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741825
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var
%1:i32 = mulnsw 2:i32, %0

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 4294967295:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for pop_heap()

; entering Souper's runOnFunction() for dijkstra()

; ModuleID = './Dijkstras_algorithm.c.bc'
source_filename = "./Dijkstras_algorithm.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.graph_t = type { %struct.vertex_t**, i32, i32 }
%struct.vertex_t = type { %struct.edge_t**, i32, i32, i32, i32, i32 }
%struct.edge_t = type { i32, i32 }
%struct.heap_t = type { i32*, i32*, i32*, i32, i32 }

@.str = private unnamed_addr constant [9 x i8] c"no path\0A\00", align 1
@.str.1 = private unnamed_addr constant [9 x i8] c"%d %.*s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @add_vertex(%struct.graph_t* %g, i32 %i) #0 {
entry:
  %g.addr = alloca %struct.graph_t*, align 4
  %i.addr = alloca i32, align 4
  %size = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.graph_t* %g, %struct.graph_t** %g.addr, align 4
  store i32 %i, i32* %i.addr, align 4
  %0 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_size = getelementptr inbounds %struct.graph_t, %struct.graph_t* %0, i32 0, i32 2
  %1 = load i32, i32* %vertices_size, align 4
  %2 = load i32, i32* %i.addr, align 4
  %add = add nsw i32 %2, 1
  %cmp = icmp slt i32 %1, %add
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_size1 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %3, i32 0, i32 2
  %4 = load i32, i32* %vertices_size1, align 4
  %mul = mul nsw i32 %4, 2
  %5 = load i32, i32* %i.addr, align 4
  %cmp2 = icmp sgt i32 %mul, %5
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %6 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_size3 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %6, i32 0, i32 2
  %7 = load i32, i32* %vertices_size3, align 4
  %mul4 = mul nsw i32 %7, 2
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %8 = load i32, i32* %i.addr, align 4
  %add5 = add nsw i32 %8, 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %mul4, %cond.true ], [ %add5, %cond.false ]
  store i32 %cond, i32* %size, align 4
  %9 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices = getelementptr inbounds %struct.graph_t, %struct.graph_t* %9, i32 0, i32 0
  %10 = load %struct.vertex_t**, %struct.vertex_t*** %vertices, align 4
  %11 = bitcast %struct.vertex_t** %10 to i8*
  %12 = load i32, i32* %size, align 4
  %mul6 = mul i32 %12, 4
  %call = call i8* @realloc(i8* %11, i32 %mul6)
  %13 = bitcast i8* %call to %struct.vertex_t**
  %14 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices7 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %14, i32 0, i32 0
  store %struct.vertex_t** %13, %struct.vertex_t*** %vertices7, align 4
  %15 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_size8 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %15, i32 0, i32 2
  %16 = load i32, i32* %vertices_size8, align 4
  store i32 %16, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %cond.end
  %17 = load i32, i32* %j, align 4
  %18 = load i32, i32* %size, align 4
  %cmp9 = icmp slt i32 %17, %18
  br i1 %cmp9, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %19 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices10 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %19, i32 0, i32 0
  %20 = load %struct.vertex_t**, %struct.vertex_t*** %vertices10, align 4
  %21 = load i32, i32* %j, align 4
  %arrayidx = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %20, i32 %21
  store %struct.vertex_t* null, %struct.vertex_t** %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %22 = load i32, i32* %j, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %23 = load i32, i32* %size, align 4
  %24 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_size11 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %24, i32 0, i32 2
  store i32 %23, i32* %vertices_size11, align 4
  br label %if.end

if.end:                                           ; preds = %for.end, %entry
  %25 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices12 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %25, i32 0, i32 0
  %26 = load %struct.vertex_t**, %struct.vertex_t*** %vertices12, align 4
  %27 = load i32, i32* %i.addr, align 4
  %arrayidx13 = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %26, i32 %27
  %28 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx13, align 4
  %tobool = icmp ne %struct.vertex_t* %28, null
  br i1 %tobool, label %if.end19, label %if.then14

if.then14:                                        ; preds = %if.end
  %call15 = call noalias i8* @calloc(i32 1, i32 24)
  %29 = bitcast i8* %call15 to %struct.vertex_t*
  %30 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices16 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %30, i32 0, i32 0
  %31 = load %struct.vertex_t**, %struct.vertex_t*** %vertices16, align 4
  %32 = load i32, i32* %i.addr, align 4
  %arrayidx17 = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %31, i32 %32
  store %struct.vertex_t* %29, %struct.vertex_t** %arrayidx17, align 4
  %33 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_len = getelementptr inbounds %struct.graph_t, %struct.graph_t* %33, i32 0, i32 1
  %34 = load i32, i32* %vertices_len, align 4
  %inc18 = add nsw i32 %34, 1
  store i32 %inc18, i32* %vertices_len, align 4
  br label %if.end19

if.end19:                                         ; preds = %if.then14, %if.end
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

declare noalias i8* @calloc(i32 %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @add_edge(%struct.graph_t* %g, i32 %a, i32 %b, i32 %w) #0 {
entry:
  %g.addr = alloca %struct.graph_t*, align 4
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %w.addr = alloca i32, align 4
  %v = alloca %struct.vertex_t*, align 4
  %e = alloca %struct.edge_t*, align 4
  store %struct.graph_t* %g, %struct.graph_t** %g.addr, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  store i32 %w, i32* %w.addr, align 4
  %0 = load i32, i32* %a.addr, align 4
  %sub = sub nsw i32 %0, 97
  store i32 %sub, i32* %a.addr, align 4
  %1 = load i32, i32* %b.addr, align 4
  %sub1 = sub nsw i32 %1, 97
  store i32 %sub1, i32* %b.addr, align 4
  %2 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %3 = load i32, i32* %a.addr, align 4
  call void @add_vertex(%struct.graph_t* %2, i32 %3)
  %4 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %5 = load i32, i32* %b.addr, align 4
  call void @add_vertex(%struct.graph_t* %4, i32 %5)
  %6 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices = getelementptr inbounds %struct.graph_t, %struct.graph_t* %6, i32 0, i32 0
  %7 = load %struct.vertex_t**, %struct.vertex_t*** %vertices, align 4
  %8 = load i32, i32* %a.addr, align 4
  %arrayidx = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %7, i32 %8
  %9 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx, align 4
  store %struct.vertex_t* %9, %struct.vertex_t** %v, align 4
  %10 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges_len = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %10, i32 0, i32 1
  %11 = load i32, i32* %edges_len, align 4
  %12 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges_size = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %12, i32 0, i32 2
  %13 = load i32, i32* %edges_size, align 4
  %cmp = icmp sge i32 %11, %13
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %14 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges_size2 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %14, i32 0, i32 2
  %15 = load i32, i32* %edges_size2, align 4
  %tobool = icmp ne i32 %15, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %16 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges_size3 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %16, i32 0, i32 2
  %17 = load i32, i32* %edges_size3, align 4
  %mul = mul nsw i32 %17, 2
  br label %cond.end

cond.false:                                       ; preds = %if.then
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %mul, %cond.true ], [ 4, %cond.false ]
  %18 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges_size4 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %18, i32 0, i32 2
  store i32 %cond, i32* %edges_size4, align 4
  %19 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %19, i32 0, i32 0
  %20 = load %struct.edge_t**, %struct.edge_t*** %edges, align 4
  %21 = bitcast %struct.edge_t** %20 to i8*
  %22 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges_size5 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %22, i32 0, i32 2
  %23 = load i32, i32* %edges_size5, align 4
  %mul6 = mul i32 %23, 4
  %call = call i8* @realloc(i8* %21, i32 %mul6)
  %24 = bitcast i8* %call to %struct.edge_t**
  %25 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges7 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %25, i32 0, i32 0
  store %struct.edge_t** %24, %struct.edge_t*** %edges7, align 4
  br label %if.end

if.end:                                           ; preds = %cond.end, %entry
  %call8 = call noalias i8* @calloc(i32 1, i32 8)
  %26 = bitcast i8* %call8 to %struct.edge_t*
  store %struct.edge_t* %26, %struct.edge_t** %e, align 4
  %27 = load i32, i32* %b.addr, align 4
  %28 = load %struct.edge_t*, %struct.edge_t** %e, align 4
  %vertex = getelementptr inbounds %struct.edge_t, %struct.edge_t* %28, i32 0, i32 0
  store i32 %27, i32* %vertex, align 4
  %29 = load i32, i32* %w.addr, align 4
  %30 = load %struct.edge_t*, %struct.edge_t** %e, align 4
  %weight = getelementptr inbounds %struct.edge_t, %struct.edge_t* %30, i32 0, i32 1
  store i32 %29, i32* %weight, align 4
  %31 = load %struct.edge_t*, %struct.edge_t** %e, align 4
  %32 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges9 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %32, i32 0, i32 0
  %33 = load %struct.edge_t**, %struct.edge_t*** %edges9, align 4
  %34 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges_len10 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %34, i32 0, i32 1
  %35 = load i32, i32* %edges_len10, align 4
  %inc = add nsw i32 %35, 1
  store i32 %inc, i32* %edges_len10, align 4
  %arrayidx11 = getelementptr inbounds %struct.edge_t*, %struct.edge_t** %33, i32 %35
  store %struct.edge_t* %31, %struct.edge_t** %arrayidx11, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.heap_t* @create_heap(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %h = alloca %struct.heap_t*, align 4
  store i32 %n, i32* %n.addr, align 4
  %call = call noalias i8* @calloc(i32 1, i32 20)
  %0 = bitcast i8* %call to %struct.heap_t*
  store %struct.heap_t* %0, %struct.heap_t** %h, align 4
  %1 = load i32, i32* %n.addr, align 4
  %add = add nsw i32 %1, 1
  %call1 = call noalias i8* @calloc(i32 %add, i32 4)
  %2 = bitcast i8* %call1 to i32*
  %3 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  %data = getelementptr inbounds %struct.heap_t, %struct.heap_t* %3, i32 0, i32 0
  store i32* %2, i32** %data, align 4
  %4 = load i32, i32* %n.addr, align 4
  %add2 = add nsw i32 %4, 1
  %call3 = call noalias i8* @calloc(i32 %add2, i32 4)
  %5 = bitcast i8* %call3 to i32*
  %6 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  %prio = getelementptr inbounds %struct.heap_t, %struct.heap_t* %6, i32 0, i32 1
  store i32* %5, i32** %prio, align 4
  %7 = load i32, i32* %n.addr, align 4
  %call4 = call noalias i8* @calloc(i32 %7, i32 4)
  %8 = bitcast i8* %call4 to i32*
  %9 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  %index = getelementptr inbounds %struct.heap_t, %struct.heap_t* %9, i32 0, i32 2
  store i32* %8, i32** %index, align 4
  %10 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  ret %struct.heap_t* %10
}

; Function Attrs: noinline nounwind optnone
define hidden void @push_heap(%struct.heap_t* %h, i32 %v, i32 %p) #0 {
entry:
  %h.addr = alloca %struct.heap_t*, align 4
  %v.addr = alloca i32, align 4
  %p.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.heap_t* %h, %struct.heap_t** %h.addr, align 4
  store i32 %v, i32* %v.addr, align 4
  store i32 %p, i32* %p.addr, align 4
  %0 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %index = getelementptr inbounds %struct.heap_t, %struct.heap_t* %0, i32 0, i32 2
  %1 = load i32*, i32** %index, align 4
  %2 = load i32, i32* %v.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 %2
  %3 = load i32, i32* %arrayidx, align 4
  %cmp = icmp eq i32 %3, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %4 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len = getelementptr inbounds %struct.heap_t, %struct.heap_t* %4, i32 0, i32 3
  %5 = load i32, i32* %len, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %len, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  %6 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %index1 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %6, i32 0, i32 2
  %7 = load i32*, i32** %index1, align 4
  %8 = load i32, i32* %v.addr, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %7, i32 %8
  %9 = load i32, i32* %arrayidx2, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %inc, %cond.true ], [ %9, %cond.false ]
  store i32 %cond, i32* %i, align 4
  %10 = load i32, i32* %i, align 4
  %div = sdiv i32 %10, 2
  store i32 %div, i32* %j, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %cond.end
  %11 = load i32, i32* %i, align 4
  %cmp3 = icmp sgt i32 %11, 1
  br i1 %cmp3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %12 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio = getelementptr inbounds %struct.heap_t, %struct.heap_t* %12, i32 0, i32 1
  %13 = load i32*, i32** %prio, align 4
  %14 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %13, i32 %14
  %15 = load i32, i32* %arrayidx4, align 4
  %16 = load i32, i32* %p.addr, align 4
  %cmp5 = icmp slt i32 %15, %16
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  br label %while.end

if.end:                                           ; preds = %while.body
  %17 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data = getelementptr inbounds %struct.heap_t, %struct.heap_t* %17, i32 0, i32 0
  %18 = load i32*, i32** %data, align 4
  %19 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds i32, i32* %18, i32 %19
  %20 = load i32, i32* %arrayidx6, align 4
  %21 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data7 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %21, i32 0, i32 0
  %22 = load i32*, i32** %data7, align 4
  %23 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %22, i32 %23
  store i32 %20, i32* %arrayidx8, align 4
  %24 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio9 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %24, i32 0, i32 1
  %25 = load i32*, i32** %prio9, align 4
  %26 = load i32, i32* %j, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %25, i32 %26
  %27 = load i32, i32* %arrayidx10, align 4
  %28 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio11 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %28, i32 0, i32 1
  %29 = load i32*, i32** %prio11, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds i32, i32* %29, i32 %30
  store i32 %27, i32* %arrayidx12, align 4
  %31 = load i32, i32* %i, align 4
  %32 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %index13 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %32, i32 0, i32 2
  %33 = load i32*, i32** %index13, align 4
  %34 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data14 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %34, i32 0, i32 0
  %35 = load i32*, i32** %data14, align 4
  %36 = load i32, i32* %i, align 4
  %arrayidx15 = getelementptr inbounds i32, i32* %35, i32 %36
  %37 = load i32, i32* %arrayidx15, align 4
  %arrayidx16 = getelementptr inbounds i32, i32* %33, i32 %37
  store i32 %31, i32* %arrayidx16, align 4
  %38 = load i32, i32* %j, align 4
  store i32 %38, i32* %i, align 4
  %39 = load i32, i32* %j, align 4
  %div17 = sdiv i32 %39, 2
  store i32 %div17, i32* %j, align 4
  br label %while.cond

while.end:                                        ; preds = %if.then, %while.cond
  %40 = load i32, i32* %v.addr, align 4
  %41 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data18 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %41, i32 0, i32 0
  %42 = load i32*, i32** %data18, align 4
  %43 = load i32, i32* %i, align 4
  %arrayidx19 = getelementptr inbounds i32, i32* %42, i32 %43
  store i32 %40, i32* %arrayidx19, align 4
  %44 = load i32, i32* %p.addr, align 4
  %45 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio20 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %45, i32 0, i32 1
  %46 = load i32*, i32** %prio20, align 4
  %47 = load i32, i32* %i, align 4
  %arrayidx21 = getelementptr inbounds i32, i32* %46, i32 %47
  store i32 %44, i32* %arrayidx21, align 4
  %48 = load i32, i32* %i, align 4
  %49 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %index22 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %49, i32 0, i32 2
  %50 = load i32*, i32** %index22, align 4
  %51 = load i32, i32* %v.addr, align 4
  %arrayidx23 = getelementptr inbounds i32, i32* %50, i32 %51
  store i32 %48, i32* %arrayidx23, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @min(%struct.heap_t* %h, i32 %i, i32 %j, i32 %k) #0 {
entry:
  %h.addr = alloca %struct.heap_t*, align 4
  %i.addr = alloca i32, align 4
  %j.addr = alloca i32, align 4
  %k.addr = alloca i32, align 4
  %m = alloca i32, align 4
  store %struct.heap_t* %h, %struct.heap_t** %h.addr, align 4
  store i32 %i, i32* %i.addr, align 4
  store i32 %j, i32* %j.addr, align 4
  store i32 %k, i32* %k.addr, align 4
  %0 = load i32, i32* %i.addr, align 4
  store i32 %0, i32* %m, align 4
  %1 = load i32, i32* %j.addr, align 4
  %2 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len = getelementptr inbounds %struct.heap_t, %struct.heap_t* %2, i32 0, i32 3
  %3 = load i32, i32* %len, align 4
  %cmp = icmp sle i32 %1, %3
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio = getelementptr inbounds %struct.heap_t, %struct.heap_t* %4, i32 0, i32 1
  %5 = load i32*, i32** %prio, align 4
  %6 = load i32, i32* %j.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %5, i32 %6
  %7 = load i32, i32* %arrayidx, align 4
  %8 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio1 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %8, i32 0, i32 1
  %9 = load i32*, i32** %prio1, align 4
  %10 = load i32, i32* %m, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %9, i32 %10
  %11 = load i32, i32* %arrayidx2, align 4
  %cmp3 = icmp slt i32 %7, %11
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %12 = load i32, i32* %j.addr, align 4
  store i32 %12, i32* %m, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %13 = load i32, i32* %k.addr, align 4
  %14 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len4 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %14, i32 0, i32 3
  %15 = load i32, i32* %len4, align 4
  %cmp5 = icmp sle i32 %13, %15
  br i1 %cmp5, label %land.lhs.true6, label %if.end13

land.lhs.true6:                                   ; preds = %if.end
  %16 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio7 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %16, i32 0, i32 1
  %17 = load i32*, i32** %prio7, align 4
  %18 = load i32, i32* %k.addr, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %17, i32 %18
  %19 = load i32, i32* %arrayidx8, align 4
  %20 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio9 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %20, i32 0, i32 1
  %21 = load i32*, i32** %prio9, align 4
  %22 = load i32, i32* %m, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %21, i32 %22
  %23 = load i32, i32* %arrayidx10, align 4
  %cmp11 = icmp slt i32 %19, %23
  br i1 %cmp11, label %if.then12, label %if.end13

if.then12:                                        ; preds = %land.lhs.true6
  %24 = load i32, i32* %k.addr, align 4
  store i32 %24, i32* %m, align 4
  br label %if.end13

if.end13:                                         ; preds = %if.then12, %land.lhs.true6, %if.end
  %25 = load i32, i32* %m, align 4
  ret i32 %25
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @pop_heap(%struct.heap_t* %h) #0 {
entry:
  %h.addr = alloca %struct.heap_t*, align 4
  %v = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.heap_t* %h, %struct.heap_t** %h.addr, align 4
  %0 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data = getelementptr inbounds %struct.heap_t, %struct.heap_t* %0, i32 0, i32 0
  %1 = load i32*, i32** %data, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 1
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %v, align 4
  store i32 1, i32* %i, align 4
  br label %while.body

while.body:                                       ; preds = %entry, %if.end
  %3 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %4 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len = getelementptr inbounds %struct.heap_t, %struct.heap_t* %4, i32 0, i32 3
  %5 = load i32, i32* %len, align 4
  %6 = load i32, i32* %i, align 4
  %mul = mul nsw i32 2, %6
  %7 = load i32, i32* %i, align 4
  %mul1 = mul nsw i32 2, %7
  %add = add nsw i32 %mul1, 1
  %call = call i32 @min(%struct.heap_t* %3, i32 %5, i32 %mul, i32 %add)
  store i32 %call, i32* %j, align 4
  %8 = load i32, i32* %j, align 4
  %9 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len2 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %9, i32 0, i32 3
  %10 = load i32, i32* %len2, align 4
  %cmp = icmp eq i32 %8, %10
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  br label %while.end

if.end:                                           ; preds = %while.body
  %11 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data3 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %11, i32 0, i32 0
  %12 = load i32*, i32** %data3, align 4
  %13 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %12, i32 %13
  %14 = load i32, i32* %arrayidx4, align 4
  %15 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data5 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %15, i32 0, i32 0
  %16 = load i32*, i32** %data5, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds i32, i32* %16, i32 %17
  store i32 %14, i32* %arrayidx6, align 4
  %18 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio = getelementptr inbounds %struct.heap_t, %struct.heap_t* %18, i32 0, i32 1
  %19 = load i32*, i32** %prio, align 4
  %20 = load i32, i32* %j, align 4
  %arrayidx7 = getelementptr inbounds i32, i32* %19, i32 %20
  %21 = load i32, i32* %arrayidx7, align 4
  %22 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio8 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %22, i32 0, i32 1
  %23 = load i32*, i32** %prio8, align 4
  %24 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds i32, i32* %23, i32 %24
  store i32 %21, i32* %arrayidx9, align 4
  %25 = load i32, i32* %i, align 4
  %26 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %index = getelementptr inbounds %struct.heap_t, %struct.heap_t* %26, i32 0, i32 2
  %27 = load i32*, i32** %index, align 4
  %28 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data10 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %28, i32 0, i32 0
  %29 = load i32*, i32** %data10, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds i32, i32* %29, i32 %30
  %31 = load i32, i32* %arrayidx11, align 4
  %arrayidx12 = getelementptr inbounds i32, i32* %27, i32 %31
  store i32 %25, i32* %arrayidx12, align 4
  %32 = load i32, i32* %j, align 4
  store i32 %32, i32* %i, align 4
  br label %while.body

while.end:                                        ; preds = %if.then
  %33 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data13 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %33, i32 0, i32 0
  %34 = load i32*, i32** %data13, align 4
  %35 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len14 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %35, i32 0, i32 3
  %36 = load i32, i32* %len14, align 4
  %arrayidx15 = getelementptr inbounds i32, i32* %34, i32 %36
  %37 = load i32, i32* %arrayidx15, align 4
  %38 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data16 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %38, i32 0, i32 0
  %39 = load i32*, i32** %data16, align 4
  %40 = load i32, i32* %i, align 4
  %arrayidx17 = getelementptr inbounds i32, i32* %39, i32 %40
  store i32 %37, i32* %arrayidx17, align 4
  %41 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio18 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %41, i32 0, i32 1
  %42 = load i32*, i32** %prio18, align 4
  %43 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len19 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %43, i32 0, i32 3
  %44 = load i32, i32* %len19, align 4
  %arrayidx20 = getelementptr inbounds i32, i32* %42, i32 %44
  %45 = load i32, i32* %arrayidx20, align 4
  %46 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio21 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %46, i32 0, i32 1
  %47 = load i32*, i32** %prio21, align 4
  %48 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds i32, i32* %47, i32 %48
  store i32 %45, i32* %arrayidx22, align 4
  %49 = load i32, i32* %i, align 4
  %50 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %index23 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %50, i32 0, i32 2
  %51 = load i32*, i32** %index23, align 4
  %52 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data24 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %52, i32 0, i32 0
  %53 = load i32*, i32** %data24, align 4
  %54 = load i32, i32* %i, align 4
  %arrayidx25 = getelementptr inbounds i32, i32* %53, i32 %54
  %55 = load i32, i32* %arrayidx25, align 4
  %arrayidx26 = getelementptr inbounds i32, i32* %51, i32 %55
  store i32 %49, i32* %arrayidx26, align 4
  %56 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len27 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %56, i32 0, i32 3
  %57 = load i32, i32* %len27, align 4
  %dec = add nsw i32 %57, -1
  store i32 %dec, i32* %len27, align 4
  %58 = load i32, i32* %v, align 4
  ret i32 %58
}

; Function Attrs: noinline nounwind optnone
define hidden void @dijkstra(%struct.graph_t* %g, i32 %a, i32 %b) #0 {
entry:
  %g.addr = alloca %struct.graph_t*, align 4
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %v = alloca %struct.vertex_t*, align 4
  %v2 = alloca %struct.vertex_t*, align 4
  %h = alloca %struct.heap_t*, align 4
  %e = alloca %struct.edge_t*, align 4
  %u = alloca %struct.vertex_t*, align 4
  store %struct.graph_t* %g, %struct.graph_t** %g.addr, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  %0 = load i32, i32* %a.addr, align 4
  %sub = sub nsw i32 %0, 97
  store i32 %sub, i32* %a.addr, align 4
  %1 = load i32, i32* %b.addr, align 4
  %sub1 = sub nsw i32 %1, 97
  store i32 %sub1, i32* %b.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_len = getelementptr inbounds %struct.graph_t, %struct.graph_t* %3, i32 0, i32 1
  %4 = load i32, i32* %vertices_len, align 4
  %cmp = icmp slt i32 %2, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices = getelementptr inbounds %struct.graph_t, %struct.graph_t* %5, i32 0, i32 0
  %6 = load %struct.vertex_t**, %struct.vertex_t*** %vertices, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %6, i32 %7
  %8 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx, align 4
  store %struct.vertex_t* %8, %struct.vertex_t** %v, align 4
  %9 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %dist = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %9, i32 0, i32 3
  store i32 2147483647, i32* %dist, align 4
  %10 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %prev = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %10, i32 0, i32 4
  store i32 0, i32* %prev, align 4
  %11 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %visited = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %11, i32 0, i32 5
  store i32 0, i32* %visited, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %i, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %13 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices3 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %13, i32 0, i32 0
  %14 = load %struct.vertex_t**, %struct.vertex_t*** %vertices3, align 4
  %15 = load i32, i32* %a.addr, align 4
  %arrayidx4 = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %14, i32 %15
  %16 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx4, align 4
  store %struct.vertex_t* %16, %struct.vertex_t** %v2, align 4
  %17 = load %struct.vertex_t*, %struct.vertex_t** %v2, align 4
  %dist5 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %17, i32 0, i32 3
  store i32 0, i32* %dist5, align 4
  %18 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_len6 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %18, i32 0, i32 1
  %19 = load i32, i32* %vertices_len6, align 4
  %call = call %struct.heap_t* @create_heap(i32 %19)
  store %struct.heap_t* %call, %struct.heap_t** %h, align 4
  %20 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  %21 = load i32, i32* %a.addr, align 4
  %22 = load %struct.vertex_t*, %struct.vertex_t** %v2, align 4
  %dist7 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %22, i32 0, i32 3
  %23 = load i32, i32* %dist7, align 4
  call void @push_heap(%struct.heap_t* %20, i32 %21, i32 %23)
  br label %while.cond

while.cond:                                       ; preds = %for.end35, %for.end
  %24 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  %len = getelementptr inbounds %struct.heap_t, %struct.heap_t* %24, i32 0, i32 3
  %25 = load i32, i32* %len, align 4
  %tobool = icmp ne i32 %25, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %26 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  %call8 = call i32 @pop_heap(%struct.heap_t* %26)
  store i32 %call8, i32* %i, align 4
  %27 = load i32, i32* %i, align 4
  %28 = load i32, i32* %b.addr, align 4
  %cmp9 = icmp eq i32 %27, %28
  br i1 %cmp9, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  br label %while.end

if.end:                                           ; preds = %while.body
  %29 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices10 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %29, i32 0, i32 0
  %30 = load %struct.vertex_t**, %struct.vertex_t*** %vertices10, align 4
  %31 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %30, i32 %31
  %32 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx11, align 4
  store %struct.vertex_t* %32, %struct.vertex_t** %v2, align 4
  %33 = load %struct.vertex_t*, %struct.vertex_t** %v2, align 4
  %visited12 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %33, i32 0, i32 5
  store i32 1, i32* %visited12, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc33, %if.end
  %34 = load i32, i32* %j, align 4
  %35 = load %struct.vertex_t*, %struct.vertex_t** %v2, align 4
  %edges_len = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %35, i32 0, i32 1
  %36 = load i32, i32* %edges_len, align 4
  %cmp14 = icmp slt i32 %34, %36
  br i1 %cmp14, label %for.body15, label %for.end35

for.body15:                                       ; preds = %for.cond13
  %37 = load %struct.vertex_t*, %struct.vertex_t** %v2, align 4
  %edges = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %37, i32 0, i32 0
  %38 = load %struct.edge_t**, %struct.edge_t*** %edges, align 4
  %39 = load i32, i32* %j, align 4
  %arrayidx16 = getelementptr inbounds %struct.edge_t*, %struct.edge_t** %38, i32 %39
  %40 = load %struct.edge_t*, %struct.edge_t** %arrayidx16, align 4
  store %struct.edge_t* %40, %struct.edge_t** %e, align 4
  %41 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices17 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %41, i32 0, i32 0
  %42 = load %struct.vertex_t**, %struct.vertex_t*** %vertices17, align 4
  %43 = load %struct.edge_t*, %struct.edge_t** %e, align 4
  %vertex = getelementptr inbounds %struct.edge_t, %struct.edge_t* %43, i32 0, i32 0
  %44 = load i32, i32* %vertex, align 4
  %arrayidx18 = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %42, i32 %44
  %45 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx18, align 4
  store %struct.vertex_t* %45, %struct.vertex_t** %u, align 4
  %46 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %visited19 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %46, i32 0, i32 5
  %47 = load i32, i32* %visited19, align 4
  %tobool20 = icmp ne i32 %47, 0
  br i1 %tobool20, label %if.end32, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.body15
  %48 = load %struct.vertex_t*, %struct.vertex_t** %v2, align 4
  %dist21 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %48, i32 0, i32 3
  %49 = load i32, i32* %dist21, align 4
  %50 = load %struct.edge_t*, %struct.edge_t** %e, align 4
  %weight = getelementptr inbounds %struct.edge_t, %struct.edge_t* %50, i32 0, i32 1
  %51 = load i32, i32* %weight, align 4
  %add = add nsw i32 %49, %51
  %52 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %dist22 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %52, i32 0, i32 3
  %53 = load i32, i32* %dist22, align 4
  %cmp23 = icmp sle i32 %add, %53
  br i1 %cmp23, label %if.then24, label %if.end32

if.then24:                                        ; preds = %land.lhs.true
  %54 = load i32, i32* %i, align 4
  %55 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %prev25 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %55, i32 0, i32 4
  store i32 %54, i32* %prev25, align 4
  %56 = load %struct.vertex_t*, %struct.vertex_t** %v2, align 4
  %dist26 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %56, i32 0, i32 3
  %57 = load i32, i32* %dist26, align 4
  %58 = load %struct.edge_t*, %struct.edge_t** %e, align 4
  %weight27 = getelementptr inbounds %struct.edge_t, %struct.edge_t* %58, i32 0, i32 1
  %59 = load i32, i32* %weight27, align 4
  %add28 = add nsw i32 %57, %59
  %60 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %dist29 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %60, i32 0, i32 3
  store i32 %add28, i32* %dist29, align 4
  %61 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  %62 = load %struct.edge_t*, %struct.edge_t** %e, align 4
  %vertex30 = getelementptr inbounds %struct.edge_t, %struct.edge_t* %62, i32 0, i32 0
  %63 = load i32, i32* %vertex30, align 4
  %64 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %dist31 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %64, i32 0, i32 3
  %65 = load i32, i32* %dist31, align 4
  call void @push_heap(%struct.heap_t* %61, i32 %63, i32 %65)
  br label %if.end32

if.end32:                                         ; preds = %if.then24, %land.lhs.true, %for.body15
  br label %for.inc33

for.inc33:                                        ; preds = %if.end32
  %66 = load i32, i32* %j, align 4
  %inc34 = add nsw i32 %66, 1
  store i32 %inc34, i32* %j, align 4
  br label %for.cond13

for.end35:                                        ; preds = %for.cond13
  br label %while.cond

while.end:                                        ; preds = %if.then, %while.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @print_path(%struct.graph_t* %g, i32 %i) #0 {
entry:
  %g.addr = alloca %struct.graph_t*, align 4
  %i.addr = alloca i32, align 4
  %n = alloca i32, align 4
  %j = alloca i32, align 4
  %v = alloca %struct.vertex_t*, align 4
  %u = alloca %struct.vertex_t*, align 4
  %path = alloca i8*, align 4
  store %struct.graph_t* %g, %struct.graph_t** %g.addr, align 4
  store i32 %i, i32* %i.addr, align 4
  %0 = load i32, i32* %i.addr, align 4
  %sub = sub nsw i32 %0, 97
  store i32 %sub, i32* %i.addr, align 4
  %1 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices = getelementptr inbounds %struct.graph_t, %struct.graph_t* %1, i32 0, i32 0
  %2 = load %struct.vertex_t**, %struct.vertex_t*** %vertices, align 4
  %3 = load i32, i32* %i.addr, align 4
  %arrayidx = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %2, i32 %3
  %4 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx, align 4
  store %struct.vertex_t* %4, %struct.vertex_t** %v, align 4
  %5 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %dist = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %5, i32 0, i32 3
  %6 = load i32, i32* %dist, align 4
  %cmp = icmp eq i32 %6, 2147483647
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0))
  br label %return

if.end:                                           ; preds = %entry
  store i32 1, i32* %n, align 4
  %7 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  store %struct.vertex_t* %7, %struct.vertex_t** %u, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %8 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %dist1 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %8, i32 0, i32 3
  %9 = load i32, i32* %dist1, align 4
  %tobool = icmp ne i32 %9, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices2 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %10, i32 0, i32 0
  %11 = load %struct.vertex_t**, %struct.vertex_t*** %vertices2, align 4
  %12 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %prev = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %12, i32 0, i32 4
  %13 = load i32, i32* %prev, align 4
  %arrayidx3 = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %11, i32 %13
  %14 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx3, align 4
  store %struct.vertex_t* %14, %struct.vertex_t** %u, align 4
  %15 = load i32, i32* %n, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %16 = load i32, i32* %n, align 4
  %call4 = call noalias i8* @malloc(i32 %16)
  store i8* %call4, i8** %path, align 4
  %17 = load i32, i32* %i.addr, align 4
  %add = add nsw i32 97, %17
  %conv = trunc i32 %add to i8
  %18 = load i8*, i8** %path, align 4
  %19 = load i32, i32* %n, align 4
  %sub5 = sub nsw i32 %19, 1
  %arrayidx6 = getelementptr inbounds i8, i8* %18, i32 %sub5
  store i8 %conv, i8* %arrayidx6, align 1
  store i32 0, i32* %j, align 4
  %20 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  store %struct.vertex_t* %20, %struct.vertex_t** %u, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc17, %for.end
  %21 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %dist8 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %21, i32 0, i32 3
  %22 = load i32, i32* %dist8, align 4
  %tobool9 = icmp ne i32 %22, 0
  br i1 %tobool9, label %for.body10, label %for.end22

for.body10:                                       ; preds = %for.cond7
  %23 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %prev11 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %23, i32 0, i32 4
  %24 = load i32, i32* %prev11, align 4
  %add12 = add nsw i32 97, %24
  %conv13 = trunc i32 %add12 to i8
  %25 = load i8*, i8** %path, align 4
  %26 = load i32, i32* %n, align 4
  %27 = load i32, i32* %j, align 4
  %sub14 = sub nsw i32 %26, %27
  %sub15 = sub nsw i32 %sub14, 2
  %arrayidx16 = getelementptr inbounds i8, i8* %25, i32 %sub15
  store i8 %conv13, i8* %arrayidx16, align 1
  br label %for.inc17

for.inc17:                                        ; preds = %for.body10
  %28 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices18 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %28, i32 0, i32 0
  %29 = load %struct.vertex_t**, %struct.vertex_t*** %vertices18, align 4
  %30 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %prev19 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %30, i32 0, i32 4
  %31 = load i32, i32* %prev19, align 4
  %arrayidx20 = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %29, i32 %31
  %32 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx20, align 4
  store %struct.vertex_t* %32, %struct.vertex_t** %u, align 4
  %33 = load i32, i32* %j, align 4
  %inc21 = add nsw i32 %33, 1
  store i32 %inc21, i32* %j, align 4
  br label %for.cond7

for.end22:                                        ; preds = %for.cond7
  %34 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %dist23 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %34, i32 0, i32 3
  %35 = load i32, i32* %dist23, align 4
  %36 = load i32, i32* %n, align 4
  %37 = load i8*, i8** %path, align 4
  %call24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i32 0, i32 0), i32 %35, i32 %36, i8* %37)
  br label %return

return:                                           ; preds = %for.end22, %if.then
  ret void
}

declare i32 @printf(i8* %0, ...) #1

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %g = alloca %struct.graph_t*, align 4
  store i32 0, i32* %retval, align 4
  %call = call noalias i8* @calloc(i32 1, i32 12)
  %0 = bitcast i8* %call to %struct.graph_t*
  store %struct.graph_t* %0, %struct.graph_t** %g, align 4
  %1 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %1, i32 97, i32 98, i32 7)
  %2 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %2, i32 97, i32 99, i32 9)
  %3 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %3, i32 97, i32 102, i32 14)
  %4 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %4, i32 98, i32 99, i32 10)
  %5 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %5, i32 98, i32 100, i32 15)
  %6 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %6, i32 99, i32 100, i32 11)
  %7 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %7, i32 99, i32 102, i32 2)
  %8 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %8, i32 100, i32 101, i32 6)
  %9 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %9, i32 101, i32 102, i32 9)
  %10 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @dijkstra(%struct.graph_t* %10, i32 97, i32 101)
  %11 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @print_path(%struct.graph_t* %11, i32 101)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %a.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %0, 97
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 97:i32
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %b.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub1 = sub nsw i32 %1, 97
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 97:i32
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %vertices_len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %2, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %12, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %a.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %vertices_len6, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %21 = load i32, i32* %a.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %23 = load i32, i32* %dist7, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %25, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %call8 = call i32 @pop_heap(%struct.heap_t* %26)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %b.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp9 = icmp eq i32 %27, %28
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %34 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %edges_len, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp14 = icmp slt i32 %34, %36
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %39 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %44 = load i32, i32* %vertex, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %47 = load i32, i32* %visited19, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool20 = icmp ne i32 %47, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %49 = load i32, i32* %dist21, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %51 = load i32, i32* %weight, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %49, %51
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %53 = load i32, i32* %dist22, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp23 = icmp sle i32 %add, %53
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
%3:i32 = var
%4:i1 = sle %2, %3
infer %4

; *****
; For LLVM instruction:
;  %54 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %57 = load i32, i32* %dist26, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %59 = load i32, i32* %weight27, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add28 = add nsw i32 %57, %59
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %63 = load i32, i32* %vertex30, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %65 = load i32, i32* %dist31, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %66 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc34 = add nsw i32 %66, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -2
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 5 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw %0, %1
%3:i32 = var
%4:i1 = sle %2, %3
infer %4


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for dijkstra()

; entering Souper's runOnFunction() for print_path()

; ModuleID = './Dijkstras_algorithm.c.bc'
source_filename = "./Dijkstras_algorithm.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.graph_t = type { %struct.vertex_t**, i32, i32 }
%struct.vertex_t = type { %struct.edge_t**, i32, i32, i32, i32, i32 }
%struct.edge_t = type { i32, i32 }
%struct.heap_t = type { i32*, i32*, i32*, i32, i32 }

@.str = private unnamed_addr constant [9 x i8] c"no path\0A\00", align 1
@.str.1 = private unnamed_addr constant [9 x i8] c"%d %.*s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @add_vertex(%struct.graph_t* %g, i32 %i) #0 {
entry:
  %g.addr = alloca %struct.graph_t*, align 4
  %i.addr = alloca i32, align 4
  %size = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.graph_t* %g, %struct.graph_t** %g.addr, align 4
  store i32 %i, i32* %i.addr, align 4
  %0 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_size = getelementptr inbounds %struct.graph_t, %struct.graph_t* %0, i32 0, i32 2
  %1 = load i32, i32* %vertices_size, align 4
  %2 = load i32, i32* %i.addr, align 4
  %add = add nsw i32 %2, 1
  %cmp = icmp slt i32 %1, %add
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_size1 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %3, i32 0, i32 2
  %4 = load i32, i32* %vertices_size1, align 4
  %mul = mul nsw i32 %4, 2
  %5 = load i32, i32* %i.addr, align 4
  %cmp2 = icmp sgt i32 %mul, %5
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %6 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_size3 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %6, i32 0, i32 2
  %7 = load i32, i32* %vertices_size3, align 4
  %mul4 = mul nsw i32 %7, 2
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %8 = load i32, i32* %i.addr, align 4
  %add5 = add nsw i32 %8, 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %mul4, %cond.true ], [ %add5, %cond.false ]
  store i32 %cond, i32* %size, align 4
  %9 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices = getelementptr inbounds %struct.graph_t, %struct.graph_t* %9, i32 0, i32 0
  %10 = load %struct.vertex_t**, %struct.vertex_t*** %vertices, align 4
  %11 = bitcast %struct.vertex_t** %10 to i8*
  %12 = load i32, i32* %size, align 4
  %mul6 = mul i32 %12, 4
  %call = call i8* @realloc(i8* %11, i32 %mul6)
  %13 = bitcast i8* %call to %struct.vertex_t**
  %14 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices7 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %14, i32 0, i32 0
  store %struct.vertex_t** %13, %struct.vertex_t*** %vertices7, align 4
  %15 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_size8 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %15, i32 0, i32 2
  %16 = load i32, i32* %vertices_size8, align 4
  store i32 %16, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %cond.end
  %17 = load i32, i32* %j, align 4
  %18 = load i32, i32* %size, align 4
  %cmp9 = icmp slt i32 %17, %18
  br i1 %cmp9, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %19 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices10 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %19, i32 0, i32 0
  %20 = load %struct.vertex_t**, %struct.vertex_t*** %vertices10, align 4
  %21 = load i32, i32* %j, align 4
  %arrayidx = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %20, i32 %21
  store %struct.vertex_t* null, %struct.vertex_t** %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %22 = load i32, i32* %j, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %23 = load i32, i32* %size, align 4
  %24 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_size11 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %24, i32 0, i32 2
  store i32 %23, i32* %vertices_size11, align 4
  br label %if.end

if.end:                                           ; preds = %for.end, %entry
  %25 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices12 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %25, i32 0, i32 0
  %26 = load %struct.vertex_t**, %struct.vertex_t*** %vertices12, align 4
  %27 = load i32, i32* %i.addr, align 4
  %arrayidx13 = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %26, i32 %27
  %28 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx13, align 4
  %tobool = icmp ne %struct.vertex_t* %28, null
  br i1 %tobool, label %if.end19, label %if.then14

if.then14:                                        ; preds = %if.end
  %call15 = call noalias i8* @calloc(i32 1, i32 24)
  %29 = bitcast i8* %call15 to %struct.vertex_t*
  %30 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices16 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %30, i32 0, i32 0
  %31 = load %struct.vertex_t**, %struct.vertex_t*** %vertices16, align 4
  %32 = load i32, i32* %i.addr, align 4
  %arrayidx17 = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %31, i32 %32
  store %struct.vertex_t* %29, %struct.vertex_t** %arrayidx17, align 4
  %33 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_len = getelementptr inbounds %struct.graph_t, %struct.graph_t* %33, i32 0, i32 1
  %34 = load i32, i32* %vertices_len, align 4
  %inc18 = add nsw i32 %34, 1
  store i32 %inc18, i32* %vertices_len, align 4
  br label %if.end19

if.end19:                                         ; preds = %if.then14, %if.end
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

declare noalias i8* @calloc(i32 %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @add_edge(%struct.graph_t* %g, i32 %a, i32 %b, i32 %w) #0 {
entry:
  %g.addr = alloca %struct.graph_t*, align 4
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %w.addr = alloca i32, align 4
  %v = alloca %struct.vertex_t*, align 4
  %e = alloca %struct.edge_t*, align 4
  store %struct.graph_t* %g, %struct.graph_t** %g.addr, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  store i32 %w, i32* %w.addr, align 4
  %0 = load i32, i32* %a.addr, align 4
  %sub = sub nsw i32 %0, 97
  store i32 %sub, i32* %a.addr, align 4
  %1 = load i32, i32* %b.addr, align 4
  %sub1 = sub nsw i32 %1, 97
  store i32 %sub1, i32* %b.addr, align 4
  %2 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %3 = load i32, i32* %a.addr, align 4
  call void @add_vertex(%struct.graph_t* %2, i32 %3)
  %4 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %5 = load i32, i32* %b.addr, align 4
  call void @add_vertex(%struct.graph_t* %4, i32 %5)
  %6 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices = getelementptr inbounds %struct.graph_t, %struct.graph_t* %6, i32 0, i32 0
  %7 = load %struct.vertex_t**, %struct.vertex_t*** %vertices, align 4
  %8 = load i32, i32* %a.addr, align 4
  %arrayidx = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %7, i32 %8
  %9 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx, align 4
  store %struct.vertex_t* %9, %struct.vertex_t** %v, align 4
  %10 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges_len = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %10, i32 0, i32 1
  %11 = load i32, i32* %edges_len, align 4
  %12 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges_size = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %12, i32 0, i32 2
  %13 = load i32, i32* %edges_size, align 4
  %cmp = icmp sge i32 %11, %13
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %14 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges_size2 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %14, i32 0, i32 2
  %15 = load i32, i32* %edges_size2, align 4
  %tobool = icmp ne i32 %15, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %16 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges_size3 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %16, i32 0, i32 2
  %17 = load i32, i32* %edges_size3, align 4
  %mul = mul nsw i32 %17, 2
  br label %cond.end

cond.false:                                       ; preds = %if.then
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %mul, %cond.true ], [ 4, %cond.false ]
  %18 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges_size4 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %18, i32 0, i32 2
  store i32 %cond, i32* %edges_size4, align 4
  %19 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %19, i32 0, i32 0
  %20 = load %struct.edge_t**, %struct.edge_t*** %edges, align 4
  %21 = bitcast %struct.edge_t** %20 to i8*
  %22 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges_size5 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %22, i32 0, i32 2
  %23 = load i32, i32* %edges_size5, align 4
  %mul6 = mul i32 %23, 4
  %call = call i8* @realloc(i8* %21, i32 %mul6)
  %24 = bitcast i8* %call to %struct.edge_t**
  %25 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges7 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %25, i32 0, i32 0
  store %struct.edge_t** %24, %struct.edge_t*** %edges7, align 4
  br label %if.end

if.end:                                           ; preds = %cond.end, %entry
  %call8 = call noalias i8* @calloc(i32 1, i32 8)
  %26 = bitcast i8* %call8 to %struct.edge_t*
  store %struct.edge_t* %26, %struct.edge_t** %e, align 4
  %27 = load i32, i32* %b.addr, align 4
  %28 = load %struct.edge_t*, %struct.edge_t** %e, align 4
  %vertex = getelementptr inbounds %struct.edge_t, %struct.edge_t* %28, i32 0, i32 0
  store i32 %27, i32* %vertex, align 4
  %29 = load i32, i32* %w.addr, align 4
  %30 = load %struct.edge_t*, %struct.edge_t** %e, align 4
  %weight = getelementptr inbounds %struct.edge_t, %struct.edge_t* %30, i32 0, i32 1
  store i32 %29, i32* %weight, align 4
  %31 = load %struct.edge_t*, %struct.edge_t** %e, align 4
  %32 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges9 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %32, i32 0, i32 0
  %33 = load %struct.edge_t**, %struct.edge_t*** %edges9, align 4
  %34 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges_len10 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %34, i32 0, i32 1
  %35 = load i32, i32* %edges_len10, align 4
  %inc = add nsw i32 %35, 1
  store i32 %inc, i32* %edges_len10, align 4
  %arrayidx11 = getelementptr inbounds %struct.edge_t*, %struct.edge_t** %33, i32 %35
  store %struct.edge_t* %31, %struct.edge_t** %arrayidx11, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.heap_t* @create_heap(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %h = alloca %struct.heap_t*, align 4
  store i32 %n, i32* %n.addr, align 4
  %call = call noalias i8* @calloc(i32 1, i32 20)
  %0 = bitcast i8* %call to %struct.heap_t*
  store %struct.heap_t* %0, %struct.heap_t** %h, align 4
  %1 = load i32, i32* %n.addr, align 4
  %add = add nsw i32 %1, 1
  %call1 = call noalias i8* @calloc(i32 %add, i32 4)
  %2 = bitcast i8* %call1 to i32*
  %3 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  %data = getelementptr inbounds %struct.heap_t, %struct.heap_t* %3, i32 0, i32 0
  store i32* %2, i32** %data, align 4
  %4 = load i32, i32* %n.addr, align 4
  %add2 = add nsw i32 %4, 1
  %call3 = call noalias i8* @calloc(i32 %add2, i32 4)
  %5 = bitcast i8* %call3 to i32*
  %6 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  %prio = getelementptr inbounds %struct.heap_t, %struct.heap_t* %6, i32 0, i32 1
  store i32* %5, i32** %prio, align 4
  %7 = load i32, i32* %n.addr, align 4
  %call4 = call noalias i8* @calloc(i32 %7, i32 4)
  %8 = bitcast i8* %call4 to i32*
  %9 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  %index = getelementptr inbounds %struct.heap_t, %struct.heap_t* %9, i32 0, i32 2
  store i32* %8, i32** %index, align 4
  %10 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  ret %struct.heap_t* %10
}

; Function Attrs: noinline nounwind optnone
define hidden void @push_heap(%struct.heap_t* %h, i32 %v, i32 %p) #0 {
entry:
  %h.addr = alloca %struct.heap_t*, align 4
  %v.addr = alloca i32, align 4
  %p.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.heap_t* %h, %struct.heap_t** %h.addr, align 4
  store i32 %v, i32* %v.addr, align 4
  store i32 %p, i32* %p.addr, align 4
  %0 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %index = getelementptr inbounds %struct.heap_t, %struct.heap_t* %0, i32 0, i32 2
  %1 = load i32*, i32** %index, align 4
  %2 = load i32, i32* %v.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 %2
  %3 = load i32, i32* %arrayidx, align 4
  %cmp = icmp eq i32 %3, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %4 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len = getelementptr inbounds %struct.heap_t, %struct.heap_t* %4, i32 0, i32 3
  %5 = load i32, i32* %len, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %len, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  %6 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %index1 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %6, i32 0, i32 2
  %7 = load i32*, i32** %index1, align 4
  %8 = load i32, i32* %v.addr, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %7, i32 %8
  %9 = load i32, i32* %arrayidx2, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %inc, %cond.true ], [ %9, %cond.false ]
  store i32 %cond, i32* %i, align 4
  %10 = load i32, i32* %i, align 4
  %div = sdiv i32 %10, 2
  store i32 %div, i32* %j, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %cond.end
  %11 = load i32, i32* %i, align 4
  %cmp3 = icmp sgt i32 %11, 1
  br i1 %cmp3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %12 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio = getelementptr inbounds %struct.heap_t, %struct.heap_t* %12, i32 0, i32 1
  %13 = load i32*, i32** %prio, align 4
  %14 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %13, i32 %14
  %15 = load i32, i32* %arrayidx4, align 4
  %16 = load i32, i32* %p.addr, align 4
  %cmp5 = icmp slt i32 %15, %16
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  br label %while.end

if.end:                                           ; preds = %while.body
  %17 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data = getelementptr inbounds %struct.heap_t, %struct.heap_t* %17, i32 0, i32 0
  %18 = load i32*, i32** %data, align 4
  %19 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds i32, i32* %18, i32 %19
  %20 = load i32, i32* %arrayidx6, align 4
  %21 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data7 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %21, i32 0, i32 0
  %22 = load i32*, i32** %data7, align 4
  %23 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %22, i32 %23
  store i32 %20, i32* %arrayidx8, align 4
  %24 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio9 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %24, i32 0, i32 1
  %25 = load i32*, i32** %prio9, align 4
  %26 = load i32, i32* %j, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %25, i32 %26
  %27 = load i32, i32* %arrayidx10, align 4
  %28 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio11 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %28, i32 0, i32 1
  %29 = load i32*, i32** %prio11, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds i32, i32* %29, i32 %30
  store i32 %27, i32* %arrayidx12, align 4
  %31 = load i32, i32* %i, align 4
  %32 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %index13 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %32, i32 0, i32 2
  %33 = load i32*, i32** %index13, align 4
  %34 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data14 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %34, i32 0, i32 0
  %35 = load i32*, i32** %data14, align 4
  %36 = load i32, i32* %i, align 4
  %arrayidx15 = getelementptr inbounds i32, i32* %35, i32 %36
  %37 = load i32, i32* %arrayidx15, align 4
  %arrayidx16 = getelementptr inbounds i32, i32* %33, i32 %37
  store i32 %31, i32* %arrayidx16, align 4
  %38 = load i32, i32* %j, align 4
  store i32 %38, i32* %i, align 4
  %39 = load i32, i32* %j, align 4
  %div17 = sdiv i32 %39, 2
  store i32 %div17, i32* %j, align 4
  br label %while.cond

while.end:                                        ; preds = %if.then, %while.cond
  %40 = load i32, i32* %v.addr, align 4
  %41 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data18 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %41, i32 0, i32 0
  %42 = load i32*, i32** %data18, align 4
  %43 = load i32, i32* %i, align 4
  %arrayidx19 = getelementptr inbounds i32, i32* %42, i32 %43
  store i32 %40, i32* %arrayidx19, align 4
  %44 = load i32, i32* %p.addr, align 4
  %45 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio20 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %45, i32 0, i32 1
  %46 = load i32*, i32** %prio20, align 4
  %47 = load i32, i32* %i, align 4
  %arrayidx21 = getelementptr inbounds i32, i32* %46, i32 %47
  store i32 %44, i32* %arrayidx21, align 4
  %48 = load i32, i32* %i, align 4
  %49 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %index22 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %49, i32 0, i32 2
  %50 = load i32*, i32** %index22, align 4
  %51 = load i32, i32* %v.addr, align 4
  %arrayidx23 = getelementptr inbounds i32, i32* %50, i32 %51
  store i32 %48, i32* %arrayidx23, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @min(%struct.heap_t* %h, i32 %i, i32 %j, i32 %k) #0 {
entry:
  %h.addr = alloca %struct.heap_t*, align 4
  %i.addr = alloca i32, align 4
  %j.addr = alloca i32, align 4
  %k.addr = alloca i32, align 4
  %m = alloca i32, align 4
  store %struct.heap_t* %h, %struct.heap_t** %h.addr, align 4
  store i32 %i, i32* %i.addr, align 4
  store i32 %j, i32* %j.addr, align 4
  store i32 %k, i32* %k.addr, align 4
  %0 = load i32, i32* %i.addr, align 4
  store i32 %0, i32* %m, align 4
  %1 = load i32, i32* %j.addr, align 4
  %2 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len = getelementptr inbounds %struct.heap_t, %struct.heap_t* %2, i32 0, i32 3
  %3 = load i32, i32* %len, align 4
  %cmp = icmp sle i32 %1, %3
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio = getelementptr inbounds %struct.heap_t, %struct.heap_t* %4, i32 0, i32 1
  %5 = load i32*, i32** %prio, align 4
  %6 = load i32, i32* %j.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %5, i32 %6
  %7 = load i32, i32* %arrayidx, align 4
  %8 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio1 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %8, i32 0, i32 1
  %9 = load i32*, i32** %prio1, align 4
  %10 = load i32, i32* %m, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %9, i32 %10
  %11 = load i32, i32* %arrayidx2, align 4
  %cmp3 = icmp slt i32 %7, %11
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %12 = load i32, i32* %j.addr, align 4
  store i32 %12, i32* %m, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %13 = load i32, i32* %k.addr, align 4
  %14 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len4 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %14, i32 0, i32 3
  %15 = load i32, i32* %len4, align 4
  %cmp5 = icmp sle i32 %13, %15
  br i1 %cmp5, label %land.lhs.true6, label %if.end13

land.lhs.true6:                                   ; preds = %if.end
  %16 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio7 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %16, i32 0, i32 1
  %17 = load i32*, i32** %prio7, align 4
  %18 = load i32, i32* %k.addr, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %17, i32 %18
  %19 = load i32, i32* %arrayidx8, align 4
  %20 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio9 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %20, i32 0, i32 1
  %21 = load i32*, i32** %prio9, align 4
  %22 = load i32, i32* %m, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %21, i32 %22
  %23 = load i32, i32* %arrayidx10, align 4
  %cmp11 = icmp slt i32 %19, %23
  br i1 %cmp11, label %if.then12, label %if.end13

if.then12:                                        ; preds = %land.lhs.true6
  %24 = load i32, i32* %k.addr, align 4
  store i32 %24, i32* %m, align 4
  br label %if.end13

if.end13:                                         ; preds = %if.then12, %land.lhs.true6, %if.end
  %25 = load i32, i32* %m, align 4
  ret i32 %25
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @pop_heap(%struct.heap_t* %h) #0 {
entry:
  %h.addr = alloca %struct.heap_t*, align 4
  %v = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.heap_t* %h, %struct.heap_t** %h.addr, align 4
  %0 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data = getelementptr inbounds %struct.heap_t, %struct.heap_t* %0, i32 0, i32 0
  %1 = load i32*, i32** %data, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 1
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %v, align 4
  store i32 1, i32* %i, align 4
  br label %while.body

while.body:                                       ; preds = %entry, %if.end
  %3 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %4 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len = getelementptr inbounds %struct.heap_t, %struct.heap_t* %4, i32 0, i32 3
  %5 = load i32, i32* %len, align 4
  %6 = load i32, i32* %i, align 4
  %mul = mul nsw i32 2, %6
  %7 = load i32, i32* %i, align 4
  %mul1 = mul nsw i32 2, %7
  %add = add nsw i32 %mul1, 1
  %call = call i32 @min(%struct.heap_t* %3, i32 %5, i32 %mul, i32 %add)
  store i32 %call, i32* %j, align 4
  %8 = load i32, i32* %j, align 4
  %9 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len2 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %9, i32 0, i32 3
  %10 = load i32, i32* %len2, align 4
  %cmp = icmp eq i32 %8, %10
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  br label %while.end

if.end:                                           ; preds = %while.body
  %11 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data3 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %11, i32 0, i32 0
  %12 = load i32*, i32** %data3, align 4
  %13 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %12, i32 %13
  %14 = load i32, i32* %arrayidx4, align 4
  %15 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data5 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %15, i32 0, i32 0
  %16 = load i32*, i32** %data5, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds i32, i32* %16, i32 %17
  store i32 %14, i32* %arrayidx6, align 4
  %18 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio = getelementptr inbounds %struct.heap_t, %struct.heap_t* %18, i32 0, i32 1
  %19 = load i32*, i32** %prio, align 4
  %20 = load i32, i32* %j, align 4
  %arrayidx7 = getelementptr inbounds i32, i32* %19, i32 %20
  %21 = load i32, i32* %arrayidx7, align 4
  %22 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio8 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %22, i32 0, i32 1
  %23 = load i32*, i32** %prio8, align 4
  %24 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds i32, i32* %23, i32 %24
  store i32 %21, i32* %arrayidx9, align 4
  %25 = load i32, i32* %i, align 4
  %26 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %index = getelementptr inbounds %struct.heap_t, %struct.heap_t* %26, i32 0, i32 2
  %27 = load i32*, i32** %index, align 4
  %28 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data10 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %28, i32 0, i32 0
  %29 = load i32*, i32** %data10, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds i32, i32* %29, i32 %30
  %31 = load i32, i32* %arrayidx11, align 4
  %arrayidx12 = getelementptr inbounds i32, i32* %27, i32 %31
  store i32 %25, i32* %arrayidx12, align 4
  %32 = load i32, i32* %j, align 4
  store i32 %32, i32* %i, align 4
  br label %while.body

while.end:                                        ; preds = %if.then
  %33 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data13 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %33, i32 0, i32 0
  %34 = load i32*, i32** %data13, align 4
  %35 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len14 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %35, i32 0, i32 3
  %36 = load i32, i32* %len14, align 4
  %arrayidx15 = getelementptr inbounds i32, i32* %34, i32 %36
  %37 = load i32, i32* %arrayidx15, align 4
  %38 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data16 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %38, i32 0, i32 0
  %39 = load i32*, i32** %data16, align 4
  %40 = load i32, i32* %i, align 4
  %arrayidx17 = getelementptr inbounds i32, i32* %39, i32 %40
  store i32 %37, i32* %arrayidx17, align 4
  %41 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio18 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %41, i32 0, i32 1
  %42 = load i32*, i32** %prio18, align 4
  %43 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len19 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %43, i32 0, i32 3
  %44 = load i32, i32* %len19, align 4
  %arrayidx20 = getelementptr inbounds i32, i32* %42, i32 %44
  %45 = load i32, i32* %arrayidx20, align 4
  %46 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio21 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %46, i32 0, i32 1
  %47 = load i32*, i32** %prio21, align 4
  %48 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds i32, i32* %47, i32 %48
  store i32 %45, i32* %arrayidx22, align 4
  %49 = load i32, i32* %i, align 4
  %50 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %index23 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %50, i32 0, i32 2
  %51 = load i32*, i32** %index23, align 4
  %52 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data24 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %52, i32 0, i32 0
  %53 = load i32*, i32** %data24, align 4
  %54 = load i32, i32* %i, align 4
  %arrayidx25 = getelementptr inbounds i32, i32* %53, i32 %54
  %55 = load i32, i32* %arrayidx25, align 4
  %arrayidx26 = getelementptr inbounds i32, i32* %51, i32 %55
  store i32 %49, i32* %arrayidx26, align 4
  %56 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len27 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %56, i32 0, i32 3
  %57 = load i32, i32* %len27, align 4
  %dec = add nsw i32 %57, -1
  store i32 %dec, i32* %len27, align 4
  %58 = load i32, i32* %v, align 4
  ret i32 %58
}

; Function Attrs: noinline nounwind optnone
define hidden void @dijkstra(%struct.graph_t* %g, i32 %a, i32 %b) #0 {
entry:
  %g.addr = alloca %struct.graph_t*, align 4
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %v = alloca %struct.vertex_t*, align 4
  %v2 = alloca %struct.vertex_t*, align 4
  %h = alloca %struct.heap_t*, align 4
  %e = alloca %struct.edge_t*, align 4
  %u = alloca %struct.vertex_t*, align 4
  store %struct.graph_t* %g, %struct.graph_t** %g.addr, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  %0 = load i32, i32* %a.addr, align 4
  %sub = sub nsw i32 %0, 97
  store i32 %sub, i32* %a.addr, align 4
  %1 = load i32, i32* %b.addr, align 4
  %sub1 = sub nsw i32 %1, 97
  store i32 %sub1, i32* %b.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_len = getelementptr inbounds %struct.graph_t, %struct.graph_t* %3, i32 0, i32 1
  %4 = load i32, i32* %vertices_len, align 4
  %cmp = icmp slt i32 %2, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices = getelementptr inbounds %struct.graph_t, %struct.graph_t* %5, i32 0, i32 0
  %6 = load %struct.vertex_t**, %struct.vertex_t*** %vertices, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %6, i32 %7
  %8 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx, align 4
  store %struct.vertex_t* %8, %struct.vertex_t** %v, align 4
  %9 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %dist = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %9, i32 0, i32 3
  store i32 2147483647, i32* %dist, align 4
  %10 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %prev = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %10, i32 0, i32 4
  store i32 0, i32* %prev, align 4
  %11 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %visited = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %11, i32 0, i32 5
  store i32 0, i32* %visited, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %i, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %13 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices3 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %13, i32 0, i32 0
  %14 = load %struct.vertex_t**, %struct.vertex_t*** %vertices3, align 4
  %15 = load i32, i32* %a.addr, align 4
  %arrayidx4 = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %14, i32 %15
  %16 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx4, align 4
  store %struct.vertex_t* %16, %struct.vertex_t** %v2, align 4
  %17 = load %struct.vertex_t*, %struct.vertex_t** %v2, align 4
  %dist5 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %17, i32 0, i32 3
  store i32 0, i32* %dist5, align 4
  %18 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_len6 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %18, i32 0, i32 1
  %19 = load i32, i32* %vertices_len6, align 4
  %call = call %struct.heap_t* @create_heap(i32 %19)
  store %struct.heap_t* %call, %struct.heap_t** %h, align 4
  %20 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  %21 = load i32, i32* %a.addr, align 4
  %22 = load %struct.vertex_t*, %struct.vertex_t** %v2, align 4
  %dist7 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %22, i32 0, i32 3
  %23 = load i32, i32* %dist7, align 4
  call void @push_heap(%struct.heap_t* %20, i32 %21, i32 %23)
  br label %while.cond

while.cond:                                       ; preds = %for.end35, %for.end
  %24 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  %len = getelementptr inbounds %struct.heap_t, %struct.heap_t* %24, i32 0, i32 3
  %25 = load i32, i32* %len, align 4
  %tobool = icmp ne i32 %25, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %26 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  %call8 = call i32 @pop_heap(%struct.heap_t* %26)
  store i32 %call8, i32* %i, align 4
  %27 = load i32, i32* %i, align 4
  %28 = load i32, i32* %b.addr, align 4
  %cmp9 = icmp eq i32 %27, %28
  br i1 %cmp9, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  br label %while.end

if.end:                                           ; preds = %while.body
  %29 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices10 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %29, i32 0, i32 0
  %30 = load %struct.vertex_t**, %struct.vertex_t*** %vertices10, align 4
  %31 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %30, i32 %31
  %32 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx11, align 4
  store %struct.vertex_t* %32, %struct.vertex_t** %v2, align 4
  %33 = load %struct.vertex_t*, %struct.vertex_t** %v2, align 4
  %visited12 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %33, i32 0, i32 5
  store i32 1, i32* %visited12, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc33, %if.end
  %34 = load i32, i32* %j, align 4
  %35 = load %struct.vertex_t*, %struct.vertex_t** %v2, align 4
  %edges_len = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %35, i32 0, i32 1
  %36 = load i32, i32* %edges_len, align 4
  %cmp14 = icmp slt i32 %34, %36
  br i1 %cmp14, label %for.body15, label %for.end35

for.body15:                                       ; preds = %for.cond13
  %37 = load %struct.vertex_t*, %struct.vertex_t** %v2, align 4
  %edges = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %37, i32 0, i32 0
  %38 = load %struct.edge_t**, %struct.edge_t*** %edges, align 4
  %39 = load i32, i32* %j, align 4
  %arrayidx16 = getelementptr inbounds %struct.edge_t*, %struct.edge_t** %38, i32 %39
  %40 = load %struct.edge_t*, %struct.edge_t** %arrayidx16, align 4
  store %struct.edge_t* %40, %struct.edge_t** %e, align 4
  %41 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices17 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %41, i32 0, i32 0
  %42 = load %struct.vertex_t**, %struct.vertex_t*** %vertices17, align 4
  %43 = load %struct.edge_t*, %struct.edge_t** %e, align 4
  %vertex = getelementptr inbounds %struct.edge_t, %struct.edge_t* %43, i32 0, i32 0
  %44 = load i32, i32* %vertex, align 4
  %arrayidx18 = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %42, i32 %44
  %45 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx18, align 4
  store %struct.vertex_t* %45, %struct.vertex_t** %u, align 4
  %46 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %visited19 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %46, i32 0, i32 5
  %47 = load i32, i32* %visited19, align 4
  %tobool20 = icmp ne i32 %47, 0
  br i1 %tobool20, label %if.end32, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.body15
  %48 = load %struct.vertex_t*, %struct.vertex_t** %v2, align 4
  %dist21 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %48, i32 0, i32 3
  %49 = load i32, i32* %dist21, align 4
  %50 = load %struct.edge_t*, %struct.edge_t** %e, align 4
  %weight = getelementptr inbounds %struct.edge_t, %struct.edge_t* %50, i32 0, i32 1
  %51 = load i32, i32* %weight, align 4
  %add = add nsw i32 %49, %51
  %52 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %dist22 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %52, i32 0, i32 3
  %53 = load i32, i32* %dist22, align 4
  %cmp23 = icmp sle i32 %add, %53
  br i1 %cmp23, label %if.then24, label %if.end32

if.then24:                                        ; preds = %land.lhs.true
  %54 = load i32, i32* %i, align 4
  %55 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %prev25 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %55, i32 0, i32 4
  store i32 %54, i32* %prev25, align 4
  %56 = load %struct.vertex_t*, %struct.vertex_t** %v2, align 4
  %dist26 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %56, i32 0, i32 3
  %57 = load i32, i32* %dist26, align 4
  %58 = load %struct.edge_t*, %struct.edge_t** %e, align 4
  %weight27 = getelementptr inbounds %struct.edge_t, %struct.edge_t* %58, i32 0, i32 1
  %59 = load i32, i32* %weight27, align 4
  %add28 = add nsw i32 %57, %59
  %60 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %dist29 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %60, i32 0, i32 3
  store i32 %add28, i32* %dist29, align 4
  %61 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  %62 = load %struct.edge_t*, %struct.edge_t** %e, align 4
  %vertex30 = getelementptr inbounds %struct.edge_t, %struct.edge_t* %62, i32 0, i32 0
  %63 = load i32, i32* %vertex30, align 4
  %64 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %dist31 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %64, i32 0, i32 3
  %65 = load i32, i32* %dist31, align 4
  call void @push_heap(%struct.heap_t* %61, i32 %63, i32 %65)
  br label %if.end32

if.end32:                                         ; preds = %if.then24, %land.lhs.true, %for.body15
  br label %for.inc33

for.inc33:                                        ; preds = %if.end32
  %66 = load i32, i32* %j, align 4
  %inc34 = add nsw i32 %66, 1
  store i32 %inc34, i32* %j, align 4
  br label %for.cond13

for.end35:                                        ; preds = %for.cond13
  br label %while.cond

while.end:                                        ; preds = %if.then, %while.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @print_path(%struct.graph_t* %g, i32 %i) #0 {
entry:
  %g.addr = alloca %struct.graph_t*, align 4
  %i.addr = alloca i32, align 4
  %n = alloca i32, align 4
  %j = alloca i32, align 4
  %v = alloca %struct.vertex_t*, align 4
  %u = alloca %struct.vertex_t*, align 4
  %path = alloca i8*, align 4
  store %struct.graph_t* %g, %struct.graph_t** %g.addr, align 4
  store i32 %i, i32* %i.addr, align 4
  %0 = load i32, i32* %i.addr, align 4
  %sub = sub nsw i32 %0, 97
  store i32 %sub, i32* %i.addr, align 4
  %1 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices = getelementptr inbounds %struct.graph_t, %struct.graph_t* %1, i32 0, i32 0
  %2 = load %struct.vertex_t**, %struct.vertex_t*** %vertices, align 4
  %3 = load i32, i32* %i.addr, align 4
  %arrayidx = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %2, i32 %3
  %4 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx, align 4
  store %struct.vertex_t* %4, %struct.vertex_t** %v, align 4
  %5 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %dist = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %5, i32 0, i32 3
  %6 = load i32, i32* %dist, align 4
  %cmp = icmp eq i32 %6, 2147483647
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0))
  br label %return

if.end:                                           ; preds = %entry
  store i32 1, i32* %n, align 4
  %7 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  store %struct.vertex_t* %7, %struct.vertex_t** %u, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %8 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %dist1 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %8, i32 0, i32 3
  %9 = load i32, i32* %dist1, align 4
  %tobool = icmp ne i32 %9, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices2 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %10, i32 0, i32 0
  %11 = load %struct.vertex_t**, %struct.vertex_t*** %vertices2, align 4
  %12 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %prev = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %12, i32 0, i32 4
  %13 = load i32, i32* %prev, align 4
  %arrayidx3 = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %11, i32 %13
  %14 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx3, align 4
  store %struct.vertex_t* %14, %struct.vertex_t** %u, align 4
  %15 = load i32, i32* %n, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %16 = load i32, i32* %n, align 4
  %call4 = call noalias i8* @malloc(i32 %16)
  store i8* %call4, i8** %path, align 4
  %17 = load i32, i32* %i.addr, align 4
  %add = add nsw i32 97, %17
  %conv = trunc i32 %add to i8
  %18 = load i8*, i8** %path, align 4
  %19 = load i32, i32* %n, align 4
  %sub5 = sub nsw i32 %19, 1
  %arrayidx6 = getelementptr inbounds i8, i8* %18, i32 %sub5
  store i8 %conv, i8* %arrayidx6, align 1
  store i32 0, i32* %j, align 4
  %20 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  store %struct.vertex_t* %20, %struct.vertex_t** %u, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc17, %for.end
  %21 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %dist8 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %21, i32 0, i32 3
  %22 = load i32, i32* %dist8, align 4
  %tobool9 = icmp ne i32 %22, 0
  br i1 %tobool9, label %for.body10, label %for.end22

for.body10:                                       ; preds = %for.cond7
  %23 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %prev11 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %23, i32 0, i32 4
  %24 = load i32, i32* %prev11, align 4
  %add12 = add nsw i32 97, %24
  %conv13 = trunc i32 %add12 to i8
  %25 = load i8*, i8** %path, align 4
  %26 = load i32, i32* %n, align 4
  %27 = load i32, i32* %j, align 4
  %sub14 = sub nsw i32 %26, %27
  %sub15 = sub nsw i32 %sub14, 2
  %arrayidx16 = getelementptr inbounds i8, i8* %25, i32 %sub15
  store i8 %conv13, i8* %arrayidx16, align 1
  br label %for.inc17

for.inc17:                                        ; preds = %for.body10
  %28 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices18 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %28, i32 0, i32 0
  %29 = load %struct.vertex_t**, %struct.vertex_t*** %vertices18, align 4
  %30 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %prev19 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %30, i32 0, i32 4
  %31 = load i32, i32* %prev19, align 4
  %arrayidx20 = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %29, i32 %31
  %32 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx20, align 4
  store %struct.vertex_t* %32, %struct.vertex_t** %u, align 4
  %33 = load i32, i32* %j, align 4
  %inc21 = add nsw i32 %33, 1
  store i32 %inc21, i32* %j, align 4
  br label %for.cond7

for.end22:                                        ; preds = %for.cond7
  %34 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %dist23 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %34, i32 0, i32 3
  %35 = load i32, i32* %dist23, align 4
  %36 = load i32, i32* %n, align 4
  %37 = load i8*, i8** %path, align 4
  %call24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i32 0, i32 0), i32 %35, i32 %36, i8* %37)
  br label %return

return:                                           ; preds = %for.end22, %if.then
  ret void
}

declare i32 @printf(i8* %0, ...) #1

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %g = alloca %struct.graph_t*, align 4
  store i32 0, i32* %retval, align 4
  %call = call noalias i8* @calloc(i32 1, i32 12)
  %0 = bitcast i8* %call to %struct.graph_t*
  store %struct.graph_t* %0, %struct.graph_t** %g, align 4
  %1 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %1, i32 97, i32 98, i32 7)
  %2 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %2, i32 97, i32 99, i32 9)
  %3 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %3, i32 97, i32 102, i32 14)
  %4 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %4, i32 98, i32 99, i32 10)
  %5 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %5, i32 98, i32 100, i32 15)
  %6 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %6, i32 99, i32 100, i32 11)
  %7 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %7, i32 99, i32 102, i32 2)
  %8 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %8, i32 100, i32 101, i32 6)
  %9 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %9, i32 101, i32 102, i32 9)
  %10 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @dijkstra(%struct.graph_t* %10, i32 97, i32 101)
  %11 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @print_path(%struct.graph_t* %11, i32 101)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %i.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %0, 97
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 97:i32
infer %1

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %i.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %dist, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %6, 2147483647
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 2147483647:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %dist1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %9, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %prev, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %15 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %15, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %16 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %17 = load i32, i32* %i.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %add = add nsw i32 97, %17
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 97:i32, %0
infer %1 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %conv = trunc i32 %add to i8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 97:i32, %0
%2:i8 = trunc %1
infer %2

; *****
; For LLVM instruction:
;  %19 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub5 = sub nsw i32 %19, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %22 = load i32, i32* %dist8, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool9 = icmp ne i32 %22, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %prev11, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %add12 = add nsw i32 97, %24
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 97:i32, %0
infer %1 (demandedBits=00000000000000000000000011111111)

; *****
; For LLVM instruction:
;  %conv13 = trunc i32 %add12 to i8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 97:i32, %0
%2:i8 = trunc %1
infer %2

; *****
; For LLVM instruction:
;  %26 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub14 = sub nsw i32 %26, %27
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2

; *****
; For LLVM instruction:
;  %sub15 = sub nsw i32 %sub14, 2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
%3:i32 = subnsw %2, 2:i32
infer %3

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %prev19, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %33 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc21 = add nsw i32 %33, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %35 = load i32, i32* %dist23, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %36 = load i32, i32* %n, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 2147483647:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 255
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 97:i32, %0
infer %1 (demandedBits=00000000000000000000000011111111)


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 97
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 97:i32, %0
%2:i8 = trunc %1
infer %2


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 97
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 113
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2147418112
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1
%3:i32 = subnsw %2, 2:i32
infer %3


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -2
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 2122055678
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 3

%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %0, %1

Cost = 1
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 4 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for print_path()

; entering Souper's runOnFunction() for main()

; ModuleID = './Dijkstras_algorithm.c.bc'
source_filename = "./Dijkstras_algorithm.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

%struct.graph_t = type { %struct.vertex_t**, i32, i32 }
%struct.vertex_t = type { %struct.edge_t**, i32, i32, i32, i32, i32 }
%struct.edge_t = type { i32, i32 }
%struct.heap_t = type { i32*, i32*, i32*, i32, i32 }

@.str = private unnamed_addr constant [9 x i8] c"no path\0A\00", align 1
@.str.1 = private unnamed_addr constant [9 x i8] c"%d %.*s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @add_vertex(%struct.graph_t* %g, i32 %i) #0 {
entry:
  %g.addr = alloca %struct.graph_t*, align 4
  %i.addr = alloca i32, align 4
  %size = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.graph_t* %g, %struct.graph_t** %g.addr, align 4
  store i32 %i, i32* %i.addr, align 4
  %0 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_size = getelementptr inbounds %struct.graph_t, %struct.graph_t* %0, i32 0, i32 2
  %1 = load i32, i32* %vertices_size, align 4
  %2 = load i32, i32* %i.addr, align 4
  %add = add nsw i32 %2, 1
  %cmp = icmp slt i32 %1, %add
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_size1 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %3, i32 0, i32 2
  %4 = load i32, i32* %vertices_size1, align 4
  %mul = mul nsw i32 %4, 2
  %5 = load i32, i32* %i.addr, align 4
  %cmp2 = icmp sgt i32 %mul, %5
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %6 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_size3 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %6, i32 0, i32 2
  %7 = load i32, i32* %vertices_size3, align 4
  %mul4 = mul nsw i32 %7, 2
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %8 = load i32, i32* %i.addr, align 4
  %add5 = add nsw i32 %8, 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %mul4, %cond.true ], [ %add5, %cond.false ]
  store i32 %cond, i32* %size, align 4
  %9 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices = getelementptr inbounds %struct.graph_t, %struct.graph_t* %9, i32 0, i32 0
  %10 = load %struct.vertex_t**, %struct.vertex_t*** %vertices, align 4
  %11 = bitcast %struct.vertex_t** %10 to i8*
  %12 = load i32, i32* %size, align 4
  %mul6 = mul i32 %12, 4
  %call = call i8* @realloc(i8* %11, i32 %mul6)
  %13 = bitcast i8* %call to %struct.vertex_t**
  %14 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices7 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %14, i32 0, i32 0
  store %struct.vertex_t** %13, %struct.vertex_t*** %vertices7, align 4
  %15 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_size8 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %15, i32 0, i32 2
  %16 = load i32, i32* %vertices_size8, align 4
  store i32 %16, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %cond.end
  %17 = load i32, i32* %j, align 4
  %18 = load i32, i32* %size, align 4
  %cmp9 = icmp slt i32 %17, %18
  br i1 %cmp9, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %19 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices10 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %19, i32 0, i32 0
  %20 = load %struct.vertex_t**, %struct.vertex_t*** %vertices10, align 4
  %21 = load i32, i32* %j, align 4
  %arrayidx = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %20, i32 %21
  store %struct.vertex_t* null, %struct.vertex_t** %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %22 = load i32, i32* %j, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %23 = load i32, i32* %size, align 4
  %24 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_size11 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %24, i32 0, i32 2
  store i32 %23, i32* %vertices_size11, align 4
  br label %if.end

if.end:                                           ; preds = %for.end, %entry
  %25 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices12 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %25, i32 0, i32 0
  %26 = load %struct.vertex_t**, %struct.vertex_t*** %vertices12, align 4
  %27 = load i32, i32* %i.addr, align 4
  %arrayidx13 = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %26, i32 %27
  %28 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx13, align 4
  %tobool = icmp ne %struct.vertex_t* %28, null
  br i1 %tobool, label %if.end19, label %if.then14

if.then14:                                        ; preds = %if.end
  %call15 = call noalias i8* @calloc(i32 1, i32 24)
  %29 = bitcast i8* %call15 to %struct.vertex_t*
  %30 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices16 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %30, i32 0, i32 0
  %31 = load %struct.vertex_t**, %struct.vertex_t*** %vertices16, align 4
  %32 = load i32, i32* %i.addr, align 4
  %arrayidx17 = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %31, i32 %32
  store %struct.vertex_t* %29, %struct.vertex_t** %arrayidx17, align 4
  %33 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_len = getelementptr inbounds %struct.graph_t, %struct.graph_t* %33, i32 0, i32 1
  %34 = load i32, i32* %vertices_len, align 4
  %inc18 = add nsw i32 %34, 1
  store i32 %inc18, i32* %vertices_len, align 4
  br label %if.end19

if.end19:                                         ; preds = %if.then14, %if.end
  ret void
}

declare i8* @realloc(i8* %0, i32 %1) #1

declare noalias i8* @calloc(i32 %0, i32 %1) #1

; Function Attrs: noinline nounwind optnone
define hidden void @add_edge(%struct.graph_t* %g, i32 %a, i32 %b, i32 %w) #0 {
entry:
  %g.addr = alloca %struct.graph_t*, align 4
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %w.addr = alloca i32, align 4
  %v = alloca %struct.vertex_t*, align 4
  %e = alloca %struct.edge_t*, align 4
  store %struct.graph_t* %g, %struct.graph_t** %g.addr, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  store i32 %w, i32* %w.addr, align 4
  %0 = load i32, i32* %a.addr, align 4
  %sub = sub nsw i32 %0, 97
  store i32 %sub, i32* %a.addr, align 4
  %1 = load i32, i32* %b.addr, align 4
  %sub1 = sub nsw i32 %1, 97
  store i32 %sub1, i32* %b.addr, align 4
  %2 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %3 = load i32, i32* %a.addr, align 4
  call void @add_vertex(%struct.graph_t* %2, i32 %3)
  %4 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %5 = load i32, i32* %b.addr, align 4
  call void @add_vertex(%struct.graph_t* %4, i32 %5)
  %6 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices = getelementptr inbounds %struct.graph_t, %struct.graph_t* %6, i32 0, i32 0
  %7 = load %struct.vertex_t**, %struct.vertex_t*** %vertices, align 4
  %8 = load i32, i32* %a.addr, align 4
  %arrayidx = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %7, i32 %8
  %9 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx, align 4
  store %struct.vertex_t* %9, %struct.vertex_t** %v, align 4
  %10 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges_len = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %10, i32 0, i32 1
  %11 = load i32, i32* %edges_len, align 4
  %12 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges_size = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %12, i32 0, i32 2
  %13 = load i32, i32* %edges_size, align 4
  %cmp = icmp sge i32 %11, %13
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %14 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges_size2 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %14, i32 0, i32 2
  %15 = load i32, i32* %edges_size2, align 4
  %tobool = icmp ne i32 %15, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %16 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges_size3 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %16, i32 0, i32 2
  %17 = load i32, i32* %edges_size3, align 4
  %mul = mul nsw i32 %17, 2
  br label %cond.end

cond.false:                                       ; preds = %if.then
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %mul, %cond.true ], [ 4, %cond.false ]
  %18 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges_size4 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %18, i32 0, i32 2
  store i32 %cond, i32* %edges_size4, align 4
  %19 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %19, i32 0, i32 0
  %20 = load %struct.edge_t**, %struct.edge_t*** %edges, align 4
  %21 = bitcast %struct.edge_t** %20 to i8*
  %22 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges_size5 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %22, i32 0, i32 2
  %23 = load i32, i32* %edges_size5, align 4
  %mul6 = mul i32 %23, 4
  %call = call i8* @realloc(i8* %21, i32 %mul6)
  %24 = bitcast i8* %call to %struct.edge_t**
  %25 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges7 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %25, i32 0, i32 0
  store %struct.edge_t** %24, %struct.edge_t*** %edges7, align 4
  br label %if.end

if.end:                                           ; preds = %cond.end, %entry
  %call8 = call noalias i8* @calloc(i32 1, i32 8)
  %26 = bitcast i8* %call8 to %struct.edge_t*
  store %struct.edge_t* %26, %struct.edge_t** %e, align 4
  %27 = load i32, i32* %b.addr, align 4
  %28 = load %struct.edge_t*, %struct.edge_t** %e, align 4
  %vertex = getelementptr inbounds %struct.edge_t, %struct.edge_t* %28, i32 0, i32 0
  store i32 %27, i32* %vertex, align 4
  %29 = load i32, i32* %w.addr, align 4
  %30 = load %struct.edge_t*, %struct.edge_t** %e, align 4
  %weight = getelementptr inbounds %struct.edge_t, %struct.edge_t* %30, i32 0, i32 1
  store i32 %29, i32* %weight, align 4
  %31 = load %struct.edge_t*, %struct.edge_t** %e, align 4
  %32 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges9 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %32, i32 0, i32 0
  %33 = load %struct.edge_t**, %struct.edge_t*** %edges9, align 4
  %34 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %edges_len10 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %34, i32 0, i32 1
  %35 = load i32, i32* %edges_len10, align 4
  %inc = add nsw i32 %35, 1
  store i32 %inc, i32* %edges_len10, align 4
  %arrayidx11 = getelementptr inbounds %struct.edge_t*, %struct.edge_t** %33, i32 %35
  store %struct.edge_t* %31, %struct.edge_t** %arrayidx11, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden %struct.heap_t* @create_heap(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %h = alloca %struct.heap_t*, align 4
  store i32 %n, i32* %n.addr, align 4
  %call = call noalias i8* @calloc(i32 1, i32 20)
  %0 = bitcast i8* %call to %struct.heap_t*
  store %struct.heap_t* %0, %struct.heap_t** %h, align 4
  %1 = load i32, i32* %n.addr, align 4
  %add = add nsw i32 %1, 1
  %call1 = call noalias i8* @calloc(i32 %add, i32 4)
  %2 = bitcast i8* %call1 to i32*
  %3 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  %data = getelementptr inbounds %struct.heap_t, %struct.heap_t* %3, i32 0, i32 0
  store i32* %2, i32** %data, align 4
  %4 = load i32, i32* %n.addr, align 4
  %add2 = add nsw i32 %4, 1
  %call3 = call noalias i8* @calloc(i32 %add2, i32 4)
  %5 = bitcast i8* %call3 to i32*
  %6 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  %prio = getelementptr inbounds %struct.heap_t, %struct.heap_t* %6, i32 0, i32 1
  store i32* %5, i32** %prio, align 4
  %7 = load i32, i32* %n.addr, align 4
  %call4 = call noalias i8* @calloc(i32 %7, i32 4)
  %8 = bitcast i8* %call4 to i32*
  %9 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  %index = getelementptr inbounds %struct.heap_t, %struct.heap_t* %9, i32 0, i32 2
  store i32* %8, i32** %index, align 4
  %10 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  ret %struct.heap_t* %10
}

; Function Attrs: noinline nounwind optnone
define hidden void @push_heap(%struct.heap_t* %h, i32 %v, i32 %p) #0 {
entry:
  %h.addr = alloca %struct.heap_t*, align 4
  %v.addr = alloca i32, align 4
  %p.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.heap_t* %h, %struct.heap_t** %h.addr, align 4
  store i32 %v, i32* %v.addr, align 4
  store i32 %p, i32* %p.addr, align 4
  %0 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %index = getelementptr inbounds %struct.heap_t, %struct.heap_t* %0, i32 0, i32 2
  %1 = load i32*, i32** %index, align 4
  %2 = load i32, i32* %v.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 %2
  %3 = load i32, i32* %arrayidx, align 4
  %cmp = icmp eq i32 %3, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %4 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len = getelementptr inbounds %struct.heap_t, %struct.heap_t* %4, i32 0, i32 3
  %5 = load i32, i32* %len, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %len, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  %6 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %index1 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %6, i32 0, i32 2
  %7 = load i32*, i32** %index1, align 4
  %8 = load i32, i32* %v.addr, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %7, i32 %8
  %9 = load i32, i32* %arrayidx2, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %inc, %cond.true ], [ %9, %cond.false ]
  store i32 %cond, i32* %i, align 4
  %10 = load i32, i32* %i, align 4
  %div = sdiv i32 %10, 2
  store i32 %div, i32* %j, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %cond.end
  %11 = load i32, i32* %i, align 4
  %cmp3 = icmp sgt i32 %11, 1
  br i1 %cmp3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %12 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio = getelementptr inbounds %struct.heap_t, %struct.heap_t* %12, i32 0, i32 1
  %13 = load i32*, i32** %prio, align 4
  %14 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %13, i32 %14
  %15 = load i32, i32* %arrayidx4, align 4
  %16 = load i32, i32* %p.addr, align 4
  %cmp5 = icmp slt i32 %15, %16
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  br label %while.end

if.end:                                           ; preds = %while.body
  %17 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data = getelementptr inbounds %struct.heap_t, %struct.heap_t* %17, i32 0, i32 0
  %18 = load i32*, i32** %data, align 4
  %19 = load i32, i32* %j, align 4
  %arrayidx6 = getelementptr inbounds i32, i32* %18, i32 %19
  %20 = load i32, i32* %arrayidx6, align 4
  %21 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data7 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %21, i32 0, i32 0
  %22 = load i32*, i32** %data7, align 4
  %23 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %22, i32 %23
  store i32 %20, i32* %arrayidx8, align 4
  %24 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio9 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %24, i32 0, i32 1
  %25 = load i32*, i32** %prio9, align 4
  %26 = load i32, i32* %j, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %25, i32 %26
  %27 = load i32, i32* %arrayidx10, align 4
  %28 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio11 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %28, i32 0, i32 1
  %29 = load i32*, i32** %prio11, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds i32, i32* %29, i32 %30
  store i32 %27, i32* %arrayidx12, align 4
  %31 = load i32, i32* %i, align 4
  %32 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %index13 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %32, i32 0, i32 2
  %33 = load i32*, i32** %index13, align 4
  %34 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data14 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %34, i32 0, i32 0
  %35 = load i32*, i32** %data14, align 4
  %36 = load i32, i32* %i, align 4
  %arrayidx15 = getelementptr inbounds i32, i32* %35, i32 %36
  %37 = load i32, i32* %arrayidx15, align 4
  %arrayidx16 = getelementptr inbounds i32, i32* %33, i32 %37
  store i32 %31, i32* %arrayidx16, align 4
  %38 = load i32, i32* %j, align 4
  store i32 %38, i32* %i, align 4
  %39 = load i32, i32* %j, align 4
  %div17 = sdiv i32 %39, 2
  store i32 %div17, i32* %j, align 4
  br label %while.cond

while.end:                                        ; preds = %if.then, %while.cond
  %40 = load i32, i32* %v.addr, align 4
  %41 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data18 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %41, i32 0, i32 0
  %42 = load i32*, i32** %data18, align 4
  %43 = load i32, i32* %i, align 4
  %arrayidx19 = getelementptr inbounds i32, i32* %42, i32 %43
  store i32 %40, i32* %arrayidx19, align 4
  %44 = load i32, i32* %p.addr, align 4
  %45 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio20 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %45, i32 0, i32 1
  %46 = load i32*, i32** %prio20, align 4
  %47 = load i32, i32* %i, align 4
  %arrayidx21 = getelementptr inbounds i32, i32* %46, i32 %47
  store i32 %44, i32* %arrayidx21, align 4
  %48 = load i32, i32* %i, align 4
  %49 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %index22 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %49, i32 0, i32 2
  %50 = load i32*, i32** %index22, align 4
  %51 = load i32, i32* %v.addr, align 4
  %arrayidx23 = getelementptr inbounds i32, i32* %50, i32 %51
  store i32 %48, i32* %arrayidx23, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @min(%struct.heap_t* %h, i32 %i, i32 %j, i32 %k) #0 {
entry:
  %h.addr = alloca %struct.heap_t*, align 4
  %i.addr = alloca i32, align 4
  %j.addr = alloca i32, align 4
  %k.addr = alloca i32, align 4
  %m = alloca i32, align 4
  store %struct.heap_t* %h, %struct.heap_t** %h.addr, align 4
  store i32 %i, i32* %i.addr, align 4
  store i32 %j, i32* %j.addr, align 4
  store i32 %k, i32* %k.addr, align 4
  %0 = load i32, i32* %i.addr, align 4
  store i32 %0, i32* %m, align 4
  %1 = load i32, i32* %j.addr, align 4
  %2 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len = getelementptr inbounds %struct.heap_t, %struct.heap_t* %2, i32 0, i32 3
  %3 = load i32, i32* %len, align 4
  %cmp = icmp sle i32 %1, %3
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio = getelementptr inbounds %struct.heap_t, %struct.heap_t* %4, i32 0, i32 1
  %5 = load i32*, i32** %prio, align 4
  %6 = load i32, i32* %j.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %5, i32 %6
  %7 = load i32, i32* %arrayidx, align 4
  %8 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio1 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %8, i32 0, i32 1
  %9 = load i32*, i32** %prio1, align 4
  %10 = load i32, i32* %m, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %9, i32 %10
  %11 = load i32, i32* %arrayidx2, align 4
  %cmp3 = icmp slt i32 %7, %11
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %12 = load i32, i32* %j.addr, align 4
  store i32 %12, i32* %m, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %13 = load i32, i32* %k.addr, align 4
  %14 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len4 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %14, i32 0, i32 3
  %15 = load i32, i32* %len4, align 4
  %cmp5 = icmp sle i32 %13, %15
  br i1 %cmp5, label %land.lhs.true6, label %if.end13

land.lhs.true6:                                   ; preds = %if.end
  %16 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio7 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %16, i32 0, i32 1
  %17 = load i32*, i32** %prio7, align 4
  %18 = load i32, i32* %k.addr, align 4
  %arrayidx8 = getelementptr inbounds i32, i32* %17, i32 %18
  %19 = load i32, i32* %arrayidx8, align 4
  %20 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio9 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %20, i32 0, i32 1
  %21 = load i32*, i32** %prio9, align 4
  %22 = load i32, i32* %m, align 4
  %arrayidx10 = getelementptr inbounds i32, i32* %21, i32 %22
  %23 = load i32, i32* %arrayidx10, align 4
  %cmp11 = icmp slt i32 %19, %23
  br i1 %cmp11, label %if.then12, label %if.end13

if.then12:                                        ; preds = %land.lhs.true6
  %24 = load i32, i32* %k.addr, align 4
  store i32 %24, i32* %m, align 4
  br label %if.end13

if.end13:                                         ; preds = %if.then12, %land.lhs.true6, %if.end
  %25 = load i32, i32* %m, align 4
  ret i32 %25
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @pop_heap(%struct.heap_t* %h) #0 {
entry:
  %h.addr = alloca %struct.heap_t*, align 4
  %v = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.heap_t* %h, %struct.heap_t** %h.addr, align 4
  %0 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data = getelementptr inbounds %struct.heap_t, %struct.heap_t* %0, i32 0, i32 0
  %1 = load i32*, i32** %data, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 1
  %2 = load i32, i32* %arrayidx, align 4
  store i32 %2, i32* %v, align 4
  store i32 1, i32* %i, align 4
  br label %while.body

while.body:                                       ; preds = %entry, %if.end
  %3 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %4 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len = getelementptr inbounds %struct.heap_t, %struct.heap_t* %4, i32 0, i32 3
  %5 = load i32, i32* %len, align 4
  %6 = load i32, i32* %i, align 4
  %mul = mul nsw i32 2, %6
  %7 = load i32, i32* %i, align 4
  %mul1 = mul nsw i32 2, %7
  %add = add nsw i32 %mul1, 1
  %call = call i32 @min(%struct.heap_t* %3, i32 %5, i32 %mul, i32 %add)
  store i32 %call, i32* %j, align 4
  %8 = load i32, i32* %j, align 4
  %9 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len2 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %9, i32 0, i32 3
  %10 = load i32, i32* %len2, align 4
  %cmp = icmp eq i32 %8, %10
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  br label %while.end

if.end:                                           ; preds = %while.body
  %11 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data3 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %11, i32 0, i32 0
  %12 = load i32*, i32** %data3, align 4
  %13 = load i32, i32* %j, align 4
  %arrayidx4 = getelementptr inbounds i32, i32* %12, i32 %13
  %14 = load i32, i32* %arrayidx4, align 4
  %15 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data5 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %15, i32 0, i32 0
  %16 = load i32*, i32** %data5, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds i32, i32* %16, i32 %17
  store i32 %14, i32* %arrayidx6, align 4
  %18 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio = getelementptr inbounds %struct.heap_t, %struct.heap_t* %18, i32 0, i32 1
  %19 = load i32*, i32** %prio, align 4
  %20 = load i32, i32* %j, align 4
  %arrayidx7 = getelementptr inbounds i32, i32* %19, i32 %20
  %21 = load i32, i32* %arrayidx7, align 4
  %22 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio8 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %22, i32 0, i32 1
  %23 = load i32*, i32** %prio8, align 4
  %24 = load i32, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds i32, i32* %23, i32 %24
  store i32 %21, i32* %arrayidx9, align 4
  %25 = load i32, i32* %i, align 4
  %26 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %index = getelementptr inbounds %struct.heap_t, %struct.heap_t* %26, i32 0, i32 2
  %27 = load i32*, i32** %index, align 4
  %28 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data10 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %28, i32 0, i32 0
  %29 = load i32*, i32** %data10, align 4
  %30 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds i32, i32* %29, i32 %30
  %31 = load i32, i32* %arrayidx11, align 4
  %arrayidx12 = getelementptr inbounds i32, i32* %27, i32 %31
  store i32 %25, i32* %arrayidx12, align 4
  %32 = load i32, i32* %j, align 4
  store i32 %32, i32* %i, align 4
  br label %while.body

while.end:                                        ; preds = %if.then
  %33 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data13 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %33, i32 0, i32 0
  %34 = load i32*, i32** %data13, align 4
  %35 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len14 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %35, i32 0, i32 3
  %36 = load i32, i32* %len14, align 4
  %arrayidx15 = getelementptr inbounds i32, i32* %34, i32 %36
  %37 = load i32, i32* %arrayidx15, align 4
  %38 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data16 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %38, i32 0, i32 0
  %39 = load i32*, i32** %data16, align 4
  %40 = load i32, i32* %i, align 4
  %arrayidx17 = getelementptr inbounds i32, i32* %39, i32 %40
  store i32 %37, i32* %arrayidx17, align 4
  %41 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio18 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %41, i32 0, i32 1
  %42 = load i32*, i32** %prio18, align 4
  %43 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len19 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %43, i32 0, i32 3
  %44 = load i32, i32* %len19, align 4
  %arrayidx20 = getelementptr inbounds i32, i32* %42, i32 %44
  %45 = load i32, i32* %arrayidx20, align 4
  %46 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %prio21 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %46, i32 0, i32 1
  %47 = load i32*, i32** %prio21, align 4
  %48 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds i32, i32* %47, i32 %48
  store i32 %45, i32* %arrayidx22, align 4
  %49 = load i32, i32* %i, align 4
  %50 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %index23 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %50, i32 0, i32 2
  %51 = load i32*, i32** %index23, align 4
  %52 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %data24 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %52, i32 0, i32 0
  %53 = load i32*, i32** %data24, align 4
  %54 = load i32, i32* %i, align 4
  %arrayidx25 = getelementptr inbounds i32, i32* %53, i32 %54
  %55 = load i32, i32* %arrayidx25, align 4
  %arrayidx26 = getelementptr inbounds i32, i32* %51, i32 %55
  store i32 %49, i32* %arrayidx26, align 4
  %56 = load %struct.heap_t*, %struct.heap_t** %h.addr, align 4
  %len27 = getelementptr inbounds %struct.heap_t, %struct.heap_t* %56, i32 0, i32 3
  %57 = load i32, i32* %len27, align 4
  %dec = add nsw i32 %57, -1
  store i32 %dec, i32* %len27, align 4
  %58 = load i32, i32* %v, align 4
  ret i32 %58
}

; Function Attrs: noinline nounwind optnone
define hidden void @dijkstra(%struct.graph_t* %g, i32 %a, i32 %b) #0 {
entry:
  %g.addr = alloca %struct.graph_t*, align 4
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %v = alloca %struct.vertex_t*, align 4
  %v2 = alloca %struct.vertex_t*, align 4
  %h = alloca %struct.heap_t*, align 4
  %e = alloca %struct.edge_t*, align 4
  %u = alloca %struct.vertex_t*, align 4
  store %struct.graph_t* %g, %struct.graph_t** %g.addr, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  %0 = load i32, i32* %a.addr, align 4
  %sub = sub nsw i32 %0, 97
  store i32 %sub, i32* %a.addr, align 4
  %1 = load i32, i32* %b.addr, align 4
  %sub1 = sub nsw i32 %1, 97
  store i32 %sub1, i32* %b.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_len = getelementptr inbounds %struct.graph_t, %struct.graph_t* %3, i32 0, i32 1
  %4 = load i32, i32* %vertices_len, align 4
  %cmp = icmp slt i32 %2, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices = getelementptr inbounds %struct.graph_t, %struct.graph_t* %5, i32 0, i32 0
  %6 = load %struct.vertex_t**, %struct.vertex_t*** %vertices, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %6, i32 %7
  %8 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx, align 4
  store %struct.vertex_t* %8, %struct.vertex_t** %v, align 4
  %9 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %dist = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %9, i32 0, i32 3
  store i32 2147483647, i32* %dist, align 4
  %10 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %prev = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %10, i32 0, i32 4
  store i32 0, i32* %prev, align 4
  %11 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %visited = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %11, i32 0, i32 5
  store i32 0, i32* %visited, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %i, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %13 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices3 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %13, i32 0, i32 0
  %14 = load %struct.vertex_t**, %struct.vertex_t*** %vertices3, align 4
  %15 = load i32, i32* %a.addr, align 4
  %arrayidx4 = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %14, i32 %15
  %16 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx4, align 4
  store %struct.vertex_t* %16, %struct.vertex_t** %v2, align 4
  %17 = load %struct.vertex_t*, %struct.vertex_t** %v2, align 4
  %dist5 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %17, i32 0, i32 3
  store i32 0, i32* %dist5, align 4
  %18 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices_len6 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %18, i32 0, i32 1
  %19 = load i32, i32* %vertices_len6, align 4
  %call = call %struct.heap_t* @create_heap(i32 %19)
  store %struct.heap_t* %call, %struct.heap_t** %h, align 4
  %20 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  %21 = load i32, i32* %a.addr, align 4
  %22 = load %struct.vertex_t*, %struct.vertex_t** %v2, align 4
  %dist7 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %22, i32 0, i32 3
  %23 = load i32, i32* %dist7, align 4
  call void @push_heap(%struct.heap_t* %20, i32 %21, i32 %23)
  br label %while.cond

while.cond:                                       ; preds = %for.end35, %for.end
  %24 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  %len = getelementptr inbounds %struct.heap_t, %struct.heap_t* %24, i32 0, i32 3
  %25 = load i32, i32* %len, align 4
  %tobool = icmp ne i32 %25, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %26 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  %call8 = call i32 @pop_heap(%struct.heap_t* %26)
  store i32 %call8, i32* %i, align 4
  %27 = load i32, i32* %i, align 4
  %28 = load i32, i32* %b.addr, align 4
  %cmp9 = icmp eq i32 %27, %28
  br i1 %cmp9, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  br label %while.end

if.end:                                           ; preds = %while.body
  %29 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices10 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %29, i32 0, i32 0
  %30 = load %struct.vertex_t**, %struct.vertex_t*** %vertices10, align 4
  %31 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %30, i32 %31
  %32 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx11, align 4
  store %struct.vertex_t* %32, %struct.vertex_t** %v2, align 4
  %33 = load %struct.vertex_t*, %struct.vertex_t** %v2, align 4
  %visited12 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %33, i32 0, i32 5
  store i32 1, i32* %visited12, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc33, %if.end
  %34 = load i32, i32* %j, align 4
  %35 = load %struct.vertex_t*, %struct.vertex_t** %v2, align 4
  %edges_len = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %35, i32 0, i32 1
  %36 = load i32, i32* %edges_len, align 4
  %cmp14 = icmp slt i32 %34, %36
  br i1 %cmp14, label %for.body15, label %for.end35

for.body15:                                       ; preds = %for.cond13
  %37 = load %struct.vertex_t*, %struct.vertex_t** %v2, align 4
  %edges = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %37, i32 0, i32 0
  %38 = load %struct.edge_t**, %struct.edge_t*** %edges, align 4
  %39 = load i32, i32* %j, align 4
  %arrayidx16 = getelementptr inbounds %struct.edge_t*, %struct.edge_t** %38, i32 %39
  %40 = load %struct.edge_t*, %struct.edge_t** %arrayidx16, align 4
  store %struct.edge_t* %40, %struct.edge_t** %e, align 4
  %41 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices17 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %41, i32 0, i32 0
  %42 = load %struct.vertex_t**, %struct.vertex_t*** %vertices17, align 4
  %43 = load %struct.edge_t*, %struct.edge_t** %e, align 4
  %vertex = getelementptr inbounds %struct.edge_t, %struct.edge_t* %43, i32 0, i32 0
  %44 = load i32, i32* %vertex, align 4
  %arrayidx18 = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %42, i32 %44
  %45 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx18, align 4
  store %struct.vertex_t* %45, %struct.vertex_t** %u, align 4
  %46 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %visited19 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %46, i32 0, i32 5
  %47 = load i32, i32* %visited19, align 4
  %tobool20 = icmp ne i32 %47, 0
  br i1 %tobool20, label %if.end32, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.body15
  %48 = load %struct.vertex_t*, %struct.vertex_t** %v2, align 4
  %dist21 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %48, i32 0, i32 3
  %49 = load i32, i32* %dist21, align 4
  %50 = load %struct.edge_t*, %struct.edge_t** %e, align 4
  %weight = getelementptr inbounds %struct.edge_t, %struct.edge_t* %50, i32 0, i32 1
  %51 = load i32, i32* %weight, align 4
  %add = add nsw i32 %49, %51
  %52 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %dist22 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %52, i32 0, i32 3
  %53 = load i32, i32* %dist22, align 4
  %cmp23 = icmp sle i32 %add, %53
  br i1 %cmp23, label %if.then24, label %if.end32

if.then24:                                        ; preds = %land.lhs.true
  %54 = load i32, i32* %i, align 4
  %55 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %prev25 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %55, i32 0, i32 4
  store i32 %54, i32* %prev25, align 4
  %56 = load %struct.vertex_t*, %struct.vertex_t** %v2, align 4
  %dist26 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %56, i32 0, i32 3
  %57 = load i32, i32* %dist26, align 4
  %58 = load %struct.edge_t*, %struct.edge_t** %e, align 4
  %weight27 = getelementptr inbounds %struct.edge_t, %struct.edge_t* %58, i32 0, i32 1
  %59 = load i32, i32* %weight27, align 4
  %add28 = add nsw i32 %57, %59
  %60 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %dist29 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %60, i32 0, i32 3
  store i32 %add28, i32* %dist29, align 4
  %61 = load %struct.heap_t*, %struct.heap_t** %h, align 4
  %62 = load %struct.edge_t*, %struct.edge_t** %e, align 4
  %vertex30 = getelementptr inbounds %struct.edge_t, %struct.edge_t* %62, i32 0, i32 0
  %63 = load i32, i32* %vertex30, align 4
  %64 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %dist31 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %64, i32 0, i32 3
  %65 = load i32, i32* %dist31, align 4
  call void @push_heap(%struct.heap_t* %61, i32 %63, i32 %65)
  br label %if.end32

if.end32:                                         ; preds = %if.then24, %land.lhs.true, %for.body15
  br label %for.inc33

for.inc33:                                        ; preds = %if.end32
  %66 = load i32, i32* %j, align 4
  %inc34 = add nsw i32 %66, 1
  store i32 %inc34, i32* %j, align 4
  br label %for.cond13

for.end35:                                        ; preds = %for.cond13
  br label %while.cond

while.end:                                        ; preds = %if.then, %while.cond
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden void @print_path(%struct.graph_t* %g, i32 %i) #0 {
entry:
  %g.addr = alloca %struct.graph_t*, align 4
  %i.addr = alloca i32, align 4
  %n = alloca i32, align 4
  %j = alloca i32, align 4
  %v = alloca %struct.vertex_t*, align 4
  %u = alloca %struct.vertex_t*, align 4
  %path = alloca i8*, align 4
  store %struct.graph_t* %g, %struct.graph_t** %g.addr, align 4
  store i32 %i, i32* %i.addr, align 4
  %0 = load i32, i32* %i.addr, align 4
  %sub = sub nsw i32 %0, 97
  store i32 %sub, i32* %i.addr, align 4
  %1 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices = getelementptr inbounds %struct.graph_t, %struct.graph_t* %1, i32 0, i32 0
  %2 = load %struct.vertex_t**, %struct.vertex_t*** %vertices, align 4
  %3 = load i32, i32* %i.addr, align 4
  %arrayidx = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %2, i32 %3
  %4 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx, align 4
  store %struct.vertex_t* %4, %struct.vertex_t** %v, align 4
  %5 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %dist = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %5, i32 0, i32 3
  %6 = load i32, i32* %dist, align 4
  %cmp = icmp eq i32 %6, 2147483647
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0))
  br label %return

if.end:                                           ; preds = %entry
  store i32 1, i32* %n, align 4
  %7 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  store %struct.vertex_t* %7, %struct.vertex_t** %u, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %8 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %dist1 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %8, i32 0, i32 3
  %9 = load i32, i32* %dist1, align 4
  %tobool = icmp ne i32 %9, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices2 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %10, i32 0, i32 0
  %11 = load %struct.vertex_t**, %struct.vertex_t*** %vertices2, align 4
  %12 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %prev = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %12, i32 0, i32 4
  %13 = load i32, i32* %prev, align 4
  %arrayidx3 = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %11, i32 %13
  %14 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx3, align 4
  store %struct.vertex_t* %14, %struct.vertex_t** %u, align 4
  %15 = load i32, i32* %n, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %n, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %16 = load i32, i32* %n, align 4
  %call4 = call noalias i8* @malloc(i32 %16)
  store i8* %call4, i8** %path, align 4
  %17 = load i32, i32* %i.addr, align 4
  %add = add nsw i32 97, %17
  %conv = trunc i32 %add to i8
  %18 = load i8*, i8** %path, align 4
  %19 = load i32, i32* %n, align 4
  %sub5 = sub nsw i32 %19, 1
  %arrayidx6 = getelementptr inbounds i8, i8* %18, i32 %sub5
  store i8 %conv, i8* %arrayidx6, align 1
  store i32 0, i32* %j, align 4
  %20 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  store %struct.vertex_t* %20, %struct.vertex_t** %u, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc17, %for.end
  %21 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %dist8 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %21, i32 0, i32 3
  %22 = load i32, i32* %dist8, align 4
  %tobool9 = icmp ne i32 %22, 0
  br i1 %tobool9, label %for.body10, label %for.end22

for.body10:                                       ; preds = %for.cond7
  %23 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %prev11 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %23, i32 0, i32 4
  %24 = load i32, i32* %prev11, align 4
  %add12 = add nsw i32 97, %24
  %conv13 = trunc i32 %add12 to i8
  %25 = load i8*, i8** %path, align 4
  %26 = load i32, i32* %n, align 4
  %27 = load i32, i32* %j, align 4
  %sub14 = sub nsw i32 %26, %27
  %sub15 = sub nsw i32 %sub14, 2
  %arrayidx16 = getelementptr inbounds i8, i8* %25, i32 %sub15
  store i8 %conv13, i8* %arrayidx16, align 1
  br label %for.inc17

for.inc17:                                        ; preds = %for.body10
  %28 = load %struct.graph_t*, %struct.graph_t** %g.addr, align 4
  %vertices18 = getelementptr inbounds %struct.graph_t, %struct.graph_t* %28, i32 0, i32 0
  %29 = load %struct.vertex_t**, %struct.vertex_t*** %vertices18, align 4
  %30 = load %struct.vertex_t*, %struct.vertex_t** %u, align 4
  %prev19 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %30, i32 0, i32 4
  %31 = load i32, i32* %prev19, align 4
  %arrayidx20 = getelementptr inbounds %struct.vertex_t*, %struct.vertex_t** %29, i32 %31
  %32 = load %struct.vertex_t*, %struct.vertex_t** %arrayidx20, align 4
  store %struct.vertex_t* %32, %struct.vertex_t** %u, align 4
  %33 = load i32, i32* %j, align 4
  %inc21 = add nsw i32 %33, 1
  store i32 %inc21, i32* %j, align 4
  br label %for.cond7

for.end22:                                        ; preds = %for.cond7
  %34 = load %struct.vertex_t*, %struct.vertex_t** %v, align 4
  %dist23 = getelementptr inbounds %struct.vertex_t, %struct.vertex_t* %34, i32 0, i32 3
  %35 = load i32, i32* %dist23, align 4
  %36 = load i32, i32* %n, align 4
  %37 = load i8*, i8** %path, align 4
  %call24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i32 0, i32 0), i32 %35, i32 %36, i8* %37)
  br label %return

return:                                           ; preds = %for.end22, %if.then
  ret void
}

declare i32 @printf(i8* %0, ...) #1

declare noalias i8* @malloc(i32 %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %g = alloca %struct.graph_t*, align 4
  store i32 0, i32* %retval, align 4
  %call = call noalias i8* @calloc(i32 1, i32 12)
  %0 = bitcast i8* %call to %struct.graph_t*
  store %struct.graph_t* %0, %struct.graph_t** %g, align 4
  %1 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %1, i32 97, i32 98, i32 7)
  %2 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %2, i32 97, i32 99, i32 9)
  %3 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %3, i32 97, i32 102, i32 14)
  %4 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %4, i32 98, i32 99, i32 10)
  %5 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %5, i32 98, i32 100, i32 15)
  %6 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %6, i32 99, i32 100, i32 11)
  %7 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %7, i32 99, i32 102, i32 2)
  %8 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %8, i32 100, i32 101, i32 6)
  %9 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @add_edge(%struct.graph_t* %9, i32 101, i32 102, i32 9)
  %10 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @dijkstra(%struct.graph_t* %10, i32 97, i32 101)
  %11 = load %struct.graph_t*, %struct.graph_t** %g, align 4
  call void @print_path(%struct.graph_t* %11, i32 101)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
