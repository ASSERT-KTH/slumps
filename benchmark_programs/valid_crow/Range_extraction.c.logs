
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for rprint()

; ModuleID = './Range_extraction.c.bc'
source_filename = "./Range_extraction.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [8 x i8] c"%s%d-%d\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c",\00", align 1
@.str.2 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"%s%d\00", align 1
@__const.main.x = private unnamed_addr constant [33 x i32] [i32 0, i32 1, i32 2, i32 4, i32 6, i32 7, i32 8, i32 11, i32 12, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 35, i32 36, i32 37, i32 38, i32 39], align 16
@.str.4 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @rprint(i8* %s, i32* %x, i32 %len) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %x.addr = alloca i32*, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %a = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  store i32* %x, i32** %x.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load i8*, i8** %s.addr, align 4
  store i8* %0, i8** %a, align 4
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc29, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end31

for.body:                                         ; preds = %for.cond
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load i32, i32* %len.addr, align 4
  %sub = sub nsw i32 %4, 1
  %cmp2 = icmp slt i32 %3, %sub
  br i1 %cmp2, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond1
  %5 = load i32*, i32** %x.addr, align 4
  %6 = load i32, i32* %j, align 4
  %add = add nsw i32 %6, 1
  %arrayidx = getelementptr inbounds i32, i32* %5, i32 %add
  %7 = load i32, i32* %arrayidx, align 4
  %8 = load i32*, i32** %x.addr, align 4
  %9 = load i32, i32* %j, align 4
  %arrayidx3 = getelementptr inbounds i32, i32* %8, i32 %9
  %10 = load i32, i32* %arrayidx3, align 4
  %add4 = add nsw i32 %10, 1
  %cmp5 = icmp eq i32 %7, %add4
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond1
  %11 = phi i1 [ false, %for.cond1 ], [ %cmp5, %land.rhs ]
  br i1 %11, label %for.body6, label %for.end

for.body6:                                        ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %for.body6
  %12 = load i32, i32* %j, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %land.end
  %13 = load i32, i32* %i, align 4
  %add7 = add nsw i32 %13, 1
  %14 = load i32, i32* %j, align 4
  %cmp8 = icmp slt i32 %add7, %14
  br i1 %cmp8, label %if.then, label %if.else

if.then:                                          ; preds = %for.end
  %15 = load i8*, i8** %s.addr, align 4
  %tobool = icmp ne i8* %15, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %16 = load i8*, i8** %a, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %17 = load i8*, i8** %s.addr, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %16, %cond.true ], [ %17, %cond.false ]
  %18 = load i8*, i8** %s.addr, align 4
  %tobool9 = icmp ne i8* %18, null
  %19 = zext i1 %tobool9 to i64
  %cond10 = select i1 %tobool9, i32 100, i32 0
  %20 = load i8*, i8** %a, align 4
  %21 = load i8*, i8** %s.addr, align 4
  %cmp11 = icmp ugt i8* %20, %21
  %22 = zext i1 %cmp11 to i64
  %cond12 = select i1 %cmp11, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2, i32 0, i32 0)
  %23 = load i32*, i32** %x.addr, align 4
  %24 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds i32, i32* %23, i32 %24
  %25 = load i32, i32* %arrayidx13, align 4
  %26 = load i32*, i32** %x.addr, align 4
  %27 = load i32, i32* %j, align 4
  %arrayidx14 = getelementptr inbounds i32, i32* %26, i32 %27
  %28 = load i32, i32* %arrayidx14, align 4
  %call = call i32 (i8*, i32, i8*, ...) @snprintf(i8* %cond, i32 %cond10, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i8* %cond12, i32 %25, i32 %28)
  %29 = load i8*, i8** %a, align 4
  %add.ptr = getelementptr inbounds i8, i8* %29, i32 %call
  store i8* %add.ptr, i8** %a, align 4
  br label %if.end

if.else:                                          ; preds = %for.end
  br label %while.cond

while.cond:                                       ; preds = %cond.end19, %if.else
  %30 = load i32, i32* %i, align 4
  %31 = load i32, i32* %j, align 4
  %cmp15 = icmp sle i32 %30, %31
  br i1 %cmp15, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %32 = load i8*, i8** %s.addr, align 4
  %tobool16 = icmp ne i8* %32, null
  br i1 %tobool16, label %cond.true17, label %cond.false18

cond.true17:                                      ; preds = %while.body
  %33 = load i8*, i8** %a, align 4
  br label %cond.end19

cond.false18:                                     ; preds = %while.body
  %34 = load i8*, i8** %s.addr, align 4
  br label %cond.end19

cond.end19:                                       ; preds = %cond.false18, %cond.true17
  %cond20 = phi i8* [ %33, %cond.true17 ], [ %34, %cond.false18 ]
  %35 = load i8*, i8** %s.addr, align 4
  %tobool21 = icmp ne i8* %35, null
  %36 = zext i1 %tobool21 to i64
  %cond22 = select i1 %tobool21, i32 100, i32 0
  %37 = load i8*, i8** %a, align 4
  %38 = load i8*, i8** %s.addr, align 4
  %cmp23 = icmp ugt i8* %37, %38
  %39 = zext i1 %cmp23 to i64
  %cond24 = select i1 %cmp23, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2, i32 0, i32 0)
  %40 = load i32*, i32** %x.addr, align 4
  %41 = load i32, i32* %i, align 4
  %inc25 = add nsw i32 %41, 1
  store i32 %inc25, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds i32, i32* %40, i32 %41
  %42 = load i32, i32* %arrayidx26, align 4
  %call27 = call i32 (i8*, i32, i8*, ...) @snprintf(i8* %cond20, i32 %cond22, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i8* %cond24, i32 %42)
  %43 = load i8*, i8** %a, align 4
  %add.ptr28 = getelementptr inbounds i8, i8* %43, i32 %call27
  store i8* %add.ptr28, i8** %a, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end

if.end:                                           ; preds = %while.end, %cond.end
  br label %for.inc29

for.inc29:                                        ; preds = %if.end
  %44 = load i32, i32* %j, align 4
  %inc30 = add nsw i32 %44, 1
  store i32 %inc30, i32* %j, align 4
  store i32 %inc30, i32* %i, align 4
  br label %for.cond

for.end31:                                        ; preds = %for.cond
  %45 = load i8*, i8** %a, align 4
  %46 = load i8*, i8** %s.addr, align 4
  %sub.ptr.lhs.cast = ptrtoint i8* %45 to i32
  %sub.ptr.rhs.cast = ptrtoint i8* %46 to i32
  %sub.ptr.sub = sub i32 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  ret i32 %sub.ptr.sub
}

declare i32 @snprintf(i8* %0, i32 %1, i8* %2, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %x = alloca [33 x i32], align 16
  %s = alloca i8*, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [33 x i32]* %x to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([33 x i32]* @__const.main.x to i8*), i32 132, i1 false)
  %arraydecay = getelementptr inbounds [33 x i32], [33 x i32]* %x, i32 0, i32 0
  %call = call i32 @rprint(i8* null, i32* %arraydecay, i32 33)
  %add = add i32 %call, 1
  %call1 = call noalias i8* @malloc(i32 %add)
  store i8* %call1, i8** %s, align 4
  %1 = load i8*, i8** %s, align 4
  %arraydecay2 = getelementptr inbounds [33 x i32], [33 x i32]* %x, i32 0, i32 0
  %call3 = call i32 @rprint(i8* %1, i32* %arraydecay2, i32 33)
  %2 = load i8*, i8** %s, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), i8* %2)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare noalias i8* @malloc(i32 %0) #1

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %1, %2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %len.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub = sub nsw i32 %4, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1

; *****
; For LLVM instruction:
;  %cmp2 = icmp slt i32 %3, %sub
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = slt %0, %2
infer %3

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add nsw i32 %6, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %arrayidx3, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add4 = add nsw i32 %10, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cmp5 = icmp eq i32 %7, %add4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1
%3:i1 = eq %0, %2
infer %3

; *****
; For LLVM instruction:
;  %11 = phi i1 [ false, %for.cond1 ], [ %cmp5, %land.rhs ]
; Looking for a replacement for:
%0:i1 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %12, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add7 = add nsw i32 %13, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp8 = icmp slt i32 %add7, %14
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = var
%3:i1 = slt %1, %2
infer %3

; *****
; For LLVM instruction:
;  %tobool = icmp ne i8* %15, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool9 = icmp ne i8* %18, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cond10 = select i1 %tobool9, i32 100, i32 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0 (hasExternalUses)
%2:i32 = select %1, 100:i32, 0:i32
infer %2

; *****
; For LLVM instruction:
;  %cmp11 = icmp ugt i8* %20, %21
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %24 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %25 = load i32, i32* %arrayidx13, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %27 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %28 = load i32, i32* %arrayidx14, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 (i8*, i32, i8*, ...) @snprintf(i8* %cond, i32 %cond10, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i8* %cond12, i32 %25, i32 %28)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %30 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %31 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp15 = icmp sle i32 %30, %31
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2

; *****
; For LLVM instruction:
;  %tobool16 = icmp ne i8* %32, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %tobool21 = icmp ne i8* %35, null
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %cond22 = select i1 %tobool21, i32 100, i32 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0 (hasExternalUses)
%2:i32 = select %1, 100:i32, 0:i32
infer %2

; *****
; For LLVM instruction:
;  %cmp23 = icmp ugt i8* %37, %38
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %41 = load i32, i32* %i, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc25 = add nsw i32 %41, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %42 = load i32, i32* %arrayidx26, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call27 = call i32 (i8*, i32, i8*, ...) @snprintf(i8* %cond20, i32 %cond22, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i8* %cond24, i32 %42)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %44 = load i32, i32* %j, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc30 = add nsw i32 %44, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %sub.ptr.lhs.cast = ptrtoint i8* %45 to i32
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub.ptr.rhs.cast = ptrtoint i8* %46 to i32
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %sub.ptr.sub = sub i32 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1
infer %2
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = subnsw %0, 1:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 536870911
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = subnsw %1, 1:i32
%3:i1 = slt %0, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = addnsw 1:i32, %1
%3:i1 = eq %0, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 1 candidates from LHS

-------------------------------------------------
%0:i1 = var
infer %0


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
%2:i32 = var
%3:i1 = slt %1, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0 (hasExternalUses)
%2:i32 = select %1, 100:i32, 0:i32
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 100
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = sle %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = sub %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for rprint()

; entering Souper's runOnFunction() for main()

; ModuleID = './Range_extraction.c.bc'
source_filename = "./Range_extraction.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [8 x i8] c"%s%d-%d\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c",\00", align 1
@.str.2 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"%s%d\00", align 1
@__const.main.x = private unnamed_addr constant [33 x i32] [i32 0, i32 1, i32 2, i32 4, i32 6, i32 7, i32 8, i32 11, i32 12, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 35, i32 36, i32 37, i32 38, i32 39], align 16
@.str.4 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @rprint(i8* %s, i32* %x, i32 %len) #0 {
entry:
  %s.addr = alloca i8*, align 4
  %x.addr = alloca i32*, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %a = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  store i32* %x, i32** %x.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  %0 = load i8*, i8** %s.addr, align 4
  store i8* %0, i8** %a, align 4
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc29, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end31

for.body:                                         ; preds = %for.cond
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load i32, i32* %len.addr, align 4
  %sub = sub nsw i32 %4, 1
  %cmp2 = icmp slt i32 %3, %sub
  br i1 %cmp2, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond1
  %5 = load i32*, i32** %x.addr, align 4
  %6 = load i32, i32* %j, align 4
  %add = add nsw i32 %6, 1
  %arrayidx = getelementptr inbounds i32, i32* %5, i32 %add
  %7 = load i32, i32* %arrayidx, align 4
  %8 = load i32*, i32** %x.addr, align 4
  %9 = load i32, i32* %j, align 4
  %arrayidx3 = getelementptr inbounds i32, i32* %8, i32 %9
  %10 = load i32, i32* %arrayidx3, align 4
  %add4 = add nsw i32 %10, 1
  %cmp5 = icmp eq i32 %7, %add4
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond1
  %11 = phi i1 [ false, %for.cond1 ], [ %cmp5, %land.rhs ]
  br i1 %11, label %for.body6, label %for.end

for.body6:                                        ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %for.body6
  %12 = load i32, i32* %j, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %land.end
  %13 = load i32, i32* %i, align 4
  %add7 = add nsw i32 %13, 1
  %14 = load i32, i32* %j, align 4
  %cmp8 = icmp slt i32 %add7, %14
  br i1 %cmp8, label %if.then, label %if.else

if.then:                                          ; preds = %for.end
  %15 = load i8*, i8** %s.addr, align 4
  %tobool = icmp ne i8* %15, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %16 = load i8*, i8** %a, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %17 = load i8*, i8** %s.addr, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %16, %cond.true ], [ %17, %cond.false ]
  %18 = load i8*, i8** %s.addr, align 4
  %tobool9 = icmp ne i8* %18, null
  %19 = zext i1 %tobool9 to i64
  %cond10 = select i1 %tobool9, i32 100, i32 0
  %20 = load i8*, i8** %a, align 4
  %21 = load i8*, i8** %s.addr, align 4
  %cmp11 = icmp ugt i8* %20, %21
  %22 = zext i1 %cmp11 to i64
  %cond12 = select i1 %cmp11, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2, i32 0, i32 0)
  %23 = load i32*, i32** %x.addr, align 4
  %24 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds i32, i32* %23, i32 %24
  %25 = load i32, i32* %arrayidx13, align 4
  %26 = load i32*, i32** %x.addr, align 4
  %27 = load i32, i32* %j, align 4
  %arrayidx14 = getelementptr inbounds i32, i32* %26, i32 %27
  %28 = load i32, i32* %arrayidx14, align 4
  %call = call i32 (i8*, i32, i8*, ...) @snprintf(i8* %cond, i32 %cond10, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i8* %cond12, i32 %25, i32 %28)
  %29 = load i8*, i8** %a, align 4
  %add.ptr = getelementptr inbounds i8, i8* %29, i32 %call
  store i8* %add.ptr, i8** %a, align 4
  br label %if.end

if.else:                                          ; preds = %for.end
  br label %while.cond

while.cond:                                       ; preds = %cond.end19, %if.else
  %30 = load i32, i32* %i, align 4
  %31 = load i32, i32* %j, align 4
  %cmp15 = icmp sle i32 %30, %31
  br i1 %cmp15, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %32 = load i8*, i8** %s.addr, align 4
  %tobool16 = icmp ne i8* %32, null
  br i1 %tobool16, label %cond.true17, label %cond.false18

cond.true17:                                      ; preds = %while.body
  %33 = load i8*, i8** %a, align 4
  br label %cond.end19

cond.false18:                                     ; preds = %while.body
  %34 = load i8*, i8** %s.addr, align 4
  br label %cond.end19

cond.end19:                                       ; preds = %cond.false18, %cond.true17
  %cond20 = phi i8* [ %33, %cond.true17 ], [ %34, %cond.false18 ]
  %35 = load i8*, i8** %s.addr, align 4
  %tobool21 = icmp ne i8* %35, null
  %36 = zext i1 %tobool21 to i64
  %cond22 = select i1 %tobool21, i32 100, i32 0
  %37 = load i8*, i8** %a, align 4
  %38 = load i8*, i8** %s.addr, align 4
  %cmp23 = icmp ugt i8* %37, %38
  %39 = zext i1 %cmp23 to i64
  %cond24 = select i1 %cmp23, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2, i32 0, i32 0)
  %40 = load i32*, i32** %x.addr, align 4
  %41 = load i32, i32* %i, align 4
  %inc25 = add nsw i32 %41, 1
  store i32 %inc25, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds i32, i32* %40, i32 %41
  %42 = load i32, i32* %arrayidx26, align 4
  %call27 = call i32 (i8*, i32, i8*, ...) @snprintf(i8* %cond20, i32 %cond22, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i8* %cond24, i32 %42)
  %43 = load i8*, i8** %a, align 4
  %add.ptr28 = getelementptr inbounds i8, i8* %43, i32 %call27
  store i8* %add.ptr28, i8** %a, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end

if.end:                                           ; preds = %while.end, %cond.end
  br label %for.inc29

for.inc29:                                        ; preds = %if.end
  %44 = load i32, i32* %j, align 4
  %inc30 = add nsw i32 %44, 1
  store i32 %inc30, i32* %j, align 4
  store i32 %inc30, i32* %i, align 4
  br label %for.cond

for.end31:                                        ; preds = %for.cond
  %45 = load i8*, i8** %a, align 4
  %46 = load i8*, i8** %s.addr, align 4
  %sub.ptr.lhs.cast = ptrtoint i8* %45 to i32
  %sub.ptr.rhs.cast = ptrtoint i8* %46 to i32
  %sub.ptr.sub = sub i32 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  ret i32 %sub.ptr.sub
}

declare i32 @snprintf(i8* %0, i32 %1, i8* %2, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %x = alloca [33 x i32], align 16
  %s = alloca i8*, align 4
  store i32 0, i32* %retval, align 4
  %0 = bitcast [33 x i32]* %x to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 16 %0, i8* align 16 bitcast ([33 x i32]* @__const.main.x to i8*), i32 132, i1 false)
  %arraydecay = getelementptr inbounds [33 x i32], [33 x i32]* %x, i32 0, i32 0
  %call = call i32 @rprint(i8* null, i32* %arraydecay, i32 33)
  %add = add i32 %call, 1
  %call1 = call noalias i8* @malloc(i32 %add)
  store i8* %call1, i8** %s, align 4
  %1 = load i8*, i8** %s, align 4
  %arraydecay2 = getelementptr inbounds [33 x i32], [33 x i32]* %x, i32 0, i32 0
  %call3 = call i32 @rprint(i8* %1, i32* %arraydecay2, i32 33)
  %2 = load i8*, i8** %s, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), i8* %2)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly %0, i8* noalias nocapture readonly %1, i32 %2, i1 immarg %3) #2

declare noalias i8* @malloc(i32 %0) #1

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %call = call i32 @rprint(i8* null, i32* %arraydecay, i32 33)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add i32 %call, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
