
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for numPrimeFactors()

; ModuleID = './Smith_numbers.c.bc'
source_filename = "./Smith_numbers.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [5 x i8] c"%4u \00", align 1
@.str.1 = private unnamed_addr constant [36 x i8] c"All the Smith Numbers < 10000 are:\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden i32 @numPrimeFactors(i32 %x) #0 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca i32, align 4
  %p = alloca i32, align 4
  %pf = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 2, i32* %p, align 4
  store i32 0, i32* %pf, align 4
  %0 = load i32, i32* %x.addr, align 4
  %cmp = icmp eq i32 %0, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  br label %while.body

while.body:                                       ; preds = %if.else, %if.end6
  %1 = load i32, i32* %x.addr, align 4
  %2 = load i32, i32* %p, align 4
  %rem = urem i32 %1, %2
  %tobool = icmp ne i32 %rem, 0
  br i1 %tobool, label %if.else4, label %if.then1

if.then1:                                         ; preds = %while.body
  %3 = load i32, i32* %pf, align 4
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %pf, align 4
  %4 = load i32, i32* %p, align 4
  %5 = load i32, i32* %x.addr, align 4
  %div = udiv i32 %5, %4
  store i32 %div, i32* %x.addr, align 4
  %6 = load i32, i32* %x.addr, align 4
  %cmp2 = icmp eq i32 %6, 1
  br i1 %cmp2, label %if.then3, label %if.end

if.then3:                                         ; preds = %if.then1
  %7 = load i32, i32* %pf, align 4
  store i32 %7, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %if.then1
  br label %if.end6

if.else4:                                         ; preds = %while.body
  %8 = load i32, i32* %p, align 4
  %inc5 = add i32 %8, 1
  store i32 %inc5, i32* %p, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.else4, %if.end
  br label %while.body

return:                                           ; preds = %if.then3, %if.then
  %9 = load i32, i32* %retval, align 4
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone
define hidden void @primeFactors(i32 %x, i32* %arr) #0 {
entry:
  %x.addr = alloca i32, align 4
  %arr.addr = alloca i32*, align 4
  %p = alloca i32, align 4
  %pf = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32* %arr, i32** %arr.addr, align 4
  store i32 2, i32* %p, align 4
  store i32 0, i32* %pf, align 4
  %0 = load i32, i32* %x.addr, align 4
  %cmp = icmp eq i32 %0, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i32*, i32** %arr.addr, align 4
  %2 = load i32, i32* %pf, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 %2
  store i32 1, i32* %arrayidx, align 4
  br label %if.end8

if.else:                                          ; preds = %entry
  br label %while.body

while.body:                                       ; preds = %if.else, %if.end7
  %3 = load i32, i32* %x.addr, align 4
  %4 = load i32, i32* %p, align 4
  %rem = urem i32 %3, %4
  %tobool = icmp ne i32 %rem, 0
  br i1 %tobool, label %if.else5, label %if.then1

if.then1:                                         ; preds = %while.body
  %5 = load i32, i32* %p, align 4
  %6 = load i32*, i32** %arr.addr, align 4
  %7 = load i32, i32* %pf, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %pf, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %6, i32 %7
  store i32 %5, i32* %arrayidx2, align 4
  %8 = load i32, i32* %p, align 4
  %9 = load i32, i32* %x.addr, align 4
  %div = udiv i32 %9, %8
  store i32 %div, i32* %x.addr, align 4
  %10 = load i32, i32* %x.addr, align 4
  %cmp3 = icmp eq i32 %10, 1
  br i1 %cmp3, label %if.then4, label %if.end

if.then4:                                         ; preds = %if.then1
  br label %if.end8

if.end:                                           ; preds = %if.then1
  br label %if.end7

if.else5:                                         ; preds = %while.body
  %11 = load i32, i32* %p, align 4
  %inc6 = add i32 %11, 1
  store i32 %inc6, i32* %p, align 4
  br label %if.end7

if.end7:                                          ; preds = %if.else5, %if.end
  br label %while.body

if.end8:                                          ; preds = %if.then4, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @sumDigits(i32 %x) #0 {
entry:
  %x.addr = alloca i32, align 4
  %sum = alloca i32, align 4
  %y = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 0, i32* %sum, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %x.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i32, i32* %x.addr, align 4
  %rem = urem i32 %1, 10
  store i32 %rem, i32* %y, align 4
  %2 = load i32, i32* %y, align 4
  %3 = load i32, i32* %sum, align 4
  %add = add i32 %3, %2
  store i32 %add, i32* %sum, align 4
  %4 = load i32, i32* %x.addr, align 4
  %div = udiv i32 %4, 10
  store i32 %div, i32* %x.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %5 = load i32, i32* %sum, align 4
  ret i32 %5
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @sumFactors(i32* %arr, i32 %size) #0 {
entry:
  %arr.addr = alloca i32*, align 4
  %size.addr = alloca i32, align 4
  %sum = alloca i32, align 4
  %a = alloca i32, align 4
  store i32* %arr, i32** %arr.addr, align 4
  store i32 %size, i32* %size.addr, align 4
  store i32 0, i32* %sum, align 4
  store i32 0, i32* %a, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %a, align 4
  %1 = load i32, i32* %size.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32*, i32** %arr.addr, align 4
  %3 = load i32, i32* %a, align 4
  %arrayidx = getelementptr inbounds i32, i32* %2, i32 %3
  %4 = load i32, i32* %arrayidx, align 4
  %call = call i32 @sumDigits(i32 %4)
  %5 = load i32, i32* %sum, align 4
  %add = add i32 %5, %call
  store i32 %add, i32* %sum, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %a, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %a, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %7 = load i32, i32* %sum, align 4
  ret i32 %7
}

; Function Attrs: noinline nounwind optnone
define hidden void @listAllSmithNumbers(i32 %x) #0 {
entry:
  %x.addr = alloca i32, align 4
  %arr = alloca i32*, align 4
  %a = alloca i32, align 4
  %numfactors = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 4, i32* %a, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %a, align 4
  %1 = load i32, i32* %x.addr, align 4
  %cmp = icmp ult i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %a, align 4
  %call = call i32 @numPrimeFactors(i32 %2)
  store i32 %call, i32* %numfactors, align 4
  %3 = load i32, i32* %numfactors, align 4
  %mul = mul i32 %3, 4
  %call1 = call noalias i8* @malloc(i32 %mul)
  %4 = bitcast i8* %call1 to i32*
  store i32* %4, i32** %arr, align 4
  %5 = load i32, i32* %numfactors, align 4
  %cmp2 = icmp slt i32 %5, 2
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.inc

if.end:                                           ; preds = %for.body
  %6 = load i32, i32* %a, align 4
  %7 = load i32*, i32** %arr, align 4
  call void @primeFactors(i32 %6, i32* %7)
  %8 = load i32, i32* %a, align 4
  %call3 = call i32 @sumDigits(i32 %8)
  %9 = load i32*, i32** %arr, align 4
  %10 = load i32, i32* %numfactors, align 4
  %call4 = call i32 @sumFactors(i32* %9, i32 %10)
  %cmp5 = icmp eq i32 %call3, %call4
  br i1 %cmp5, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.end
  %11 = load i32, i32* %a, align 4
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i32 %11)
  br label %if.end8

if.end8:                                          ; preds = %if.then6, %if.end
  %12 = load i32*, i32** %arr, align 4
  %13 = bitcast i32* %12 to i8*
  call void @free(i8* %13)
  br label %for.inc

for.inc:                                          ; preds = %if.end8, %if.then
  %14 = load i32, i32* %a, align 4
  %inc = add i32 %14, 1
  store i32 %inc, i32* %a, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare noalias i8* @malloc(i32 %0) #1

declare i32 @printf(i8* %0, ...) #1

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.1, i32 0, i32 0))
  call void @listAllSmithNumbers(i32 10000)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %x.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %0, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %x.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %p, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem = urem i32 %1, %2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = urem %0, %1
infer %2

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %rem, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = urem %0, %1
%3:i1 = ne 0:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %pf, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %3, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %p, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %x.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div = udiv i32 %5, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = udiv %0, %1
infer %2

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %x.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp eq i32 %6, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %pf, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %p, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc5 = add i32 %8, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %retval, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = eq 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = urem %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 109431
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 4 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = urem %0, %1
%3:i1 = ne 0:i32, %2
infer %3


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 268435457
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = udiv %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 22789806
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for numPrimeFactors()

; entering Souper's runOnFunction() for primeFactors()

; ModuleID = './Smith_numbers.c.bc'
source_filename = "./Smith_numbers.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [5 x i8] c"%4u \00", align 1
@.str.1 = private unnamed_addr constant [36 x i8] c"All the Smith Numbers < 10000 are:\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden i32 @numPrimeFactors(i32 %x) #0 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca i32, align 4
  %p = alloca i32, align 4
  %pf = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 2, i32* %p, align 4
  store i32 0, i32* %pf, align 4
  %0 = load i32, i32* %x.addr, align 4
  %cmp = icmp eq i32 %0, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  br label %while.body

while.body:                                       ; preds = %if.else, %if.end6
  %1 = load i32, i32* %x.addr, align 4
  %2 = load i32, i32* %p, align 4
  %rem = urem i32 %1, %2
  %tobool = icmp ne i32 %rem, 0
  br i1 %tobool, label %if.else4, label %if.then1

if.then1:                                         ; preds = %while.body
  %3 = load i32, i32* %pf, align 4
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %pf, align 4
  %4 = load i32, i32* %p, align 4
  %5 = load i32, i32* %x.addr, align 4
  %div = udiv i32 %5, %4
  store i32 %div, i32* %x.addr, align 4
  %6 = load i32, i32* %x.addr, align 4
  %cmp2 = icmp eq i32 %6, 1
  br i1 %cmp2, label %if.then3, label %if.end

if.then3:                                         ; preds = %if.then1
  %7 = load i32, i32* %pf, align 4
  store i32 %7, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %if.then1
  br label %if.end6

if.else4:                                         ; preds = %while.body
  %8 = load i32, i32* %p, align 4
  %inc5 = add i32 %8, 1
  store i32 %inc5, i32* %p, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.else4, %if.end
  br label %while.body

return:                                           ; preds = %if.then3, %if.then
  %9 = load i32, i32* %retval, align 4
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone
define hidden void @primeFactors(i32 %x, i32* %arr) #0 {
entry:
  %x.addr = alloca i32, align 4
  %arr.addr = alloca i32*, align 4
  %p = alloca i32, align 4
  %pf = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32* %arr, i32** %arr.addr, align 4
  store i32 2, i32* %p, align 4
  store i32 0, i32* %pf, align 4
  %0 = load i32, i32* %x.addr, align 4
  %cmp = icmp eq i32 %0, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i32*, i32** %arr.addr, align 4
  %2 = load i32, i32* %pf, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 %2
  store i32 1, i32* %arrayidx, align 4
  br label %if.end8

if.else:                                          ; preds = %entry
  br label %while.body

while.body:                                       ; preds = %if.else, %if.end7
  %3 = load i32, i32* %x.addr, align 4
  %4 = load i32, i32* %p, align 4
  %rem = urem i32 %3, %4
  %tobool = icmp ne i32 %rem, 0
  br i1 %tobool, label %if.else5, label %if.then1

if.then1:                                         ; preds = %while.body
  %5 = load i32, i32* %p, align 4
  %6 = load i32*, i32** %arr.addr, align 4
  %7 = load i32, i32* %pf, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %pf, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %6, i32 %7
  store i32 %5, i32* %arrayidx2, align 4
  %8 = load i32, i32* %p, align 4
  %9 = load i32, i32* %x.addr, align 4
  %div = udiv i32 %9, %8
  store i32 %div, i32* %x.addr, align 4
  %10 = load i32, i32* %x.addr, align 4
  %cmp3 = icmp eq i32 %10, 1
  br i1 %cmp3, label %if.then4, label %if.end

if.then4:                                         ; preds = %if.then1
  br label %if.end8

if.end:                                           ; preds = %if.then1
  br label %if.end7

if.else5:                                         ; preds = %while.body
  %11 = load i32, i32* %p, align 4
  %inc6 = add i32 %11, 1
  store i32 %inc6, i32* %p, align 4
  br label %if.end7

if.end7:                                          ; preds = %if.else5, %if.end
  br label %while.body

if.end8:                                          ; preds = %if.then4, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @sumDigits(i32 %x) #0 {
entry:
  %x.addr = alloca i32, align 4
  %sum = alloca i32, align 4
  %y = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 0, i32* %sum, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %x.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i32, i32* %x.addr, align 4
  %rem = urem i32 %1, 10
  store i32 %rem, i32* %y, align 4
  %2 = load i32, i32* %y, align 4
  %3 = load i32, i32* %sum, align 4
  %add = add i32 %3, %2
  store i32 %add, i32* %sum, align 4
  %4 = load i32, i32* %x.addr, align 4
  %div = udiv i32 %4, 10
  store i32 %div, i32* %x.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %5 = load i32, i32* %sum, align 4
  ret i32 %5
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @sumFactors(i32* %arr, i32 %size) #0 {
entry:
  %arr.addr = alloca i32*, align 4
  %size.addr = alloca i32, align 4
  %sum = alloca i32, align 4
  %a = alloca i32, align 4
  store i32* %arr, i32** %arr.addr, align 4
  store i32 %size, i32* %size.addr, align 4
  store i32 0, i32* %sum, align 4
  store i32 0, i32* %a, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %a, align 4
  %1 = load i32, i32* %size.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32*, i32** %arr.addr, align 4
  %3 = load i32, i32* %a, align 4
  %arrayidx = getelementptr inbounds i32, i32* %2, i32 %3
  %4 = load i32, i32* %arrayidx, align 4
  %call = call i32 @sumDigits(i32 %4)
  %5 = load i32, i32* %sum, align 4
  %add = add i32 %5, %call
  store i32 %add, i32* %sum, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %a, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %a, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %7 = load i32, i32* %sum, align 4
  ret i32 %7
}

; Function Attrs: noinline nounwind optnone
define hidden void @listAllSmithNumbers(i32 %x) #0 {
entry:
  %x.addr = alloca i32, align 4
  %arr = alloca i32*, align 4
  %a = alloca i32, align 4
  %numfactors = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 4, i32* %a, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %a, align 4
  %1 = load i32, i32* %x.addr, align 4
  %cmp = icmp ult i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %a, align 4
  %call = call i32 @numPrimeFactors(i32 %2)
  store i32 %call, i32* %numfactors, align 4
  %3 = load i32, i32* %numfactors, align 4
  %mul = mul i32 %3, 4
  %call1 = call noalias i8* @malloc(i32 %mul)
  %4 = bitcast i8* %call1 to i32*
  store i32* %4, i32** %arr, align 4
  %5 = load i32, i32* %numfactors, align 4
  %cmp2 = icmp slt i32 %5, 2
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.inc

if.end:                                           ; preds = %for.body
  %6 = load i32, i32* %a, align 4
  %7 = load i32*, i32** %arr, align 4
  call void @primeFactors(i32 %6, i32* %7)
  %8 = load i32, i32* %a, align 4
  %call3 = call i32 @sumDigits(i32 %8)
  %9 = load i32*, i32** %arr, align 4
  %10 = load i32, i32* %numfactors, align 4
  %call4 = call i32 @sumFactors(i32* %9, i32 %10)
  %cmp5 = icmp eq i32 %call3, %call4
  br i1 %cmp5, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.end
  %11 = load i32, i32* %a, align 4
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i32 %11)
  br label %if.end8

if.end8:                                          ; preds = %if.then6, %if.end
  %12 = load i32*, i32** %arr, align 4
  %13 = bitcast i32* %12 to i8*
  call void @free(i8* %13)
  br label %for.inc

for.inc:                                          ; preds = %if.end8, %if.then
  %14 = load i32, i32* %a, align 4
  %inc = add i32 %14, 1
  store i32 %inc, i32* %a, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare noalias i8* @malloc(i32 %0) #1

declare i32 @printf(i8* %0, ...) #1

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.1, i32 0, i32 0))
  call void @listAllSmithNumbers(i32 10000)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %x.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp eq i32 %0, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %pf, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %x.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %p, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem = urem i32 %3, %4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = urem %0, %1
infer %2

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %rem, 0
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = urem %0, %1
%3:i1 = ne 0:i32, %2
infer %3

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %p, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %pf, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %7, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %p, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %x.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div = udiv i32 %9, %8
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = udiv %0, %1
infer %2

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %x.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp3 = icmp eq i32 %10, 1
; Looking for a replacement for:
%0:i32 = var
%1:i1 = eq 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %p, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc6 = add i32 %11, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for primeFactors()

; entering Souper's runOnFunction() for sumDigits()

; ModuleID = './Smith_numbers.c.bc'
source_filename = "./Smith_numbers.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [5 x i8] c"%4u \00", align 1
@.str.1 = private unnamed_addr constant [36 x i8] c"All the Smith Numbers < 10000 are:\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden i32 @numPrimeFactors(i32 %x) #0 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca i32, align 4
  %p = alloca i32, align 4
  %pf = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 2, i32* %p, align 4
  store i32 0, i32* %pf, align 4
  %0 = load i32, i32* %x.addr, align 4
  %cmp = icmp eq i32 %0, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  br label %while.body

while.body:                                       ; preds = %if.else, %if.end6
  %1 = load i32, i32* %x.addr, align 4
  %2 = load i32, i32* %p, align 4
  %rem = urem i32 %1, %2
  %tobool = icmp ne i32 %rem, 0
  br i1 %tobool, label %if.else4, label %if.then1

if.then1:                                         ; preds = %while.body
  %3 = load i32, i32* %pf, align 4
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %pf, align 4
  %4 = load i32, i32* %p, align 4
  %5 = load i32, i32* %x.addr, align 4
  %div = udiv i32 %5, %4
  store i32 %div, i32* %x.addr, align 4
  %6 = load i32, i32* %x.addr, align 4
  %cmp2 = icmp eq i32 %6, 1
  br i1 %cmp2, label %if.then3, label %if.end

if.then3:                                         ; preds = %if.then1
  %7 = load i32, i32* %pf, align 4
  store i32 %7, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %if.then1
  br label %if.end6

if.else4:                                         ; preds = %while.body
  %8 = load i32, i32* %p, align 4
  %inc5 = add i32 %8, 1
  store i32 %inc5, i32* %p, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.else4, %if.end
  br label %while.body

return:                                           ; preds = %if.then3, %if.then
  %9 = load i32, i32* %retval, align 4
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone
define hidden void @primeFactors(i32 %x, i32* %arr) #0 {
entry:
  %x.addr = alloca i32, align 4
  %arr.addr = alloca i32*, align 4
  %p = alloca i32, align 4
  %pf = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32* %arr, i32** %arr.addr, align 4
  store i32 2, i32* %p, align 4
  store i32 0, i32* %pf, align 4
  %0 = load i32, i32* %x.addr, align 4
  %cmp = icmp eq i32 %0, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i32*, i32** %arr.addr, align 4
  %2 = load i32, i32* %pf, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 %2
  store i32 1, i32* %arrayidx, align 4
  br label %if.end8

if.else:                                          ; preds = %entry
  br label %while.body

while.body:                                       ; preds = %if.else, %if.end7
  %3 = load i32, i32* %x.addr, align 4
  %4 = load i32, i32* %p, align 4
  %rem = urem i32 %3, %4
  %tobool = icmp ne i32 %rem, 0
  br i1 %tobool, label %if.else5, label %if.then1

if.then1:                                         ; preds = %while.body
  %5 = load i32, i32* %p, align 4
  %6 = load i32*, i32** %arr.addr, align 4
  %7 = load i32, i32* %pf, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %pf, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %6, i32 %7
  store i32 %5, i32* %arrayidx2, align 4
  %8 = load i32, i32* %p, align 4
  %9 = load i32, i32* %x.addr, align 4
  %div = udiv i32 %9, %8
  store i32 %div, i32* %x.addr, align 4
  %10 = load i32, i32* %x.addr, align 4
  %cmp3 = icmp eq i32 %10, 1
  br i1 %cmp3, label %if.then4, label %if.end

if.then4:                                         ; preds = %if.then1
  br label %if.end8

if.end:                                           ; preds = %if.then1
  br label %if.end7

if.else5:                                         ; preds = %while.body
  %11 = load i32, i32* %p, align 4
  %inc6 = add i32 %11, 1
  store i32 %inc6, i32* %p, align 4
  br label %if.end7

if.end7:                                          ; preds = %if.else5, %if.end
  br label %while.body

if.end8:                                          ; preds = %if.then4, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @sumDigits(i32 %x) #0 {
entry:
  %x.addr = alloca i32, align 4
  %sum = alloca i32, align 4
  %y = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 0, i32* %sum, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %x.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i32, i32* %x.addr, align 4
  %rem = urem i32 %1, 10
  store i32 %rem, i32* %y, align 4
  %2 = load i32, i32* %y, align 4
  %3 = load i32, i32* %sum, align 4
  %add = add i32 %3, %2
  store i32 %add, i32* %sum, align 4
  %4 = load i32, i32* %x.addr, align 4
  %div = udiv i32 %4, 10
  store i32 %div, i32* %x.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %5 = load i32, i32* %sum, align 4
  ret i32 %5
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @sumFactors(i32* %arr, i32 %size) #0 {
entry:
  %arr.addr = alloca i32*, align 4
  %size.addr = alloca i32, align 4
  %sum = alloca i32, align 4
  %a = alloca i32, align 4
  store i32* %arr, i32** %arr.addr, align 4
  store i32 %size, i32* %size.addr, align 4
  store i32 0, i32* %sum, align 4
  store i32 0, i32* %a, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %a, align 4
  %1 = load i32, i32* %size.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32*, i32** %arr.addr, align 4
  %3 = load i32, i32* %a, align 4
  %arrayidx = getelementptr inbounds i32, i32* %2, i32 %3
  %4 = load i32, i32* %arrayidx, align 4
  %call = call i32 @sumDigits(i32 %4)
  %5 = load i32, i32* %sum, align 4
  %add = add i32 %5, %call
  store i32 %add, i32* %sum, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %a, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %a, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %7 = load i32, i32* %sum, align 4
  ret i32 %7
}

; Function Attrs: noinline nounwind optnone
define hidden void @listAllSmithNumbers(i32 %x) #0 {
entry:
  %x.addr = alloca i32, align 4
  %arr = alloca i32*, align 4
  %a = alloca i32, align 4
  %numfactors = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 4, i32* %a, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %a, align 4
  %1 = load i32, i32* %x.addr, align 4
  %cmp = icmp ult i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %a, align 4
  %call = call i32 @numPrimeFactors(i32 %2)
  store i32 %call, i32* %numfactors, align 4
  %3 = load i32, i32* %numfactors, align 4
  %mul = mul i32 %3, 4
  %call1 = call noalias i8* @malloc(i32 %mul)
  %4 = bitcast i8* %call1 to i32*
  store i32* %4, i32** %arr, align 4
  %5 = load i32, i32* %numfactors, align 4
  %cmp2 = icmp slt i32 %5, 2
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.inc

if.end:                                           ; preds = %for.body
  %6 = load i32, i32* %a, align 4
  %7 = load i32*, i32** %arr, align 4
  call void @primeFactors(i32 %6, i32* %7)
  %8 = load i32, i32* %a, align 4
  %call3 = call i32 @sumDigits(i32 %8)
  %9 = load i32*, i32** %arr, align 4
  %10 = load i32, i32* %numfactors, align 4
  %call4 = call i32 @sumFactors(i32* %9, i32 %10)
  %cmp5 = icmp eq i32 %call3, %call4
  br i1 %cmp5, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.end
  %11 = load i32, i32* %a, align 4
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i32 %11)
  br label %if.end8

if.end8:                                          ; preds = %if.then6, %if.end
  %12 = load i32*, i32** %arr, align 4
  %13 = bitcast i32* %12 to i8*
  call void @free(i8* %13)
  br label %for.inc

for.inc:                                          ; preds = %if.end8, %if.then
  %14 = load i32, i32* %a, align 4
  %inc = add i32 %14, 1
  store i32 %inc, i32* %a, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare noalias i8* @malloc(i32 %0) #1

declare i32 @printf(i8* %0, ...) #1

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.1, i32 0, i32 0))
  call void @listAllSmithNumbers(i32 10000)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %x.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %tobool = icmp ne i32 %0, 0
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %x.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %rem = urem i32 %1, 10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = urem %0, 10:i32
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %y, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %sum, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add i32 %3, %2
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %x.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %div = udiv i32 %4, 10
; Looking for a replacement for:
%0:i32 = var
%1:i32 = udiv %0, 10:i32
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %sum, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ne 0:i32, %0
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = urem %0, 10:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work

--------------------------------
guess 2

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 3 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = udiv %0, 10:i32
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 85041980
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for sumDigits()

; entering Souper's runOnFunction() for sumFactors()

; ModuleID = './Smith_numbers.c.bc'
source_filename = "./Smith_numbers.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [5 x i8] c"%4u \00", align 1
@.str.1 = private unnamed_addr constant [36 x i8] c"All the Smith Numbers < 10000 are:\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden i32 @numPrimeFactors(i32 %x) #0 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca i32, align 4
  %p = alloca i32, align 4
  %pf = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 2, i32* %p, align 4
  store i32 0, i32* %pf, align 4
  %0 = load i32, i32* %x.addr, align 4
  %cmp = icmp eq i32 %0, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  br label %while.body

while.body:                                       ; preds = %if.else, %if.end6
  %1 = load i32, i32* %x.addr, align 4
  %2 = load i32, i32* %p, align 4
  %rem = urem i32 %1, %2
  %tobool = icmp ne i32 %rem, 0
  br i1 %tobool, label %if.else4, label %if.then1

if.then1:                                         ; preds = %while.body
  %3 = load i32, i32* %pf, align 4
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %pf, align 4
  %4 = load i32, i32* %p, align 4
  %5 = load i32, i32* %x.addr, align 4
  %div = udiv i32 %5, %4
  store i32 %div, i32* %x.addr, align 4
  %6 = load i32, i32* %x.addr, align 4
  %cmp2 = icmp eq i32 %6, 1
  br i1 %cmp2, label %if.then3, label %if.end

if.then3:                                         ; preds = %if.then1
  %7 = load i32, i32* %pf, align 4
  store i32 %7, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %if.then1
  br label %if.end6

if.else4:                                         ; preds = %while.body
  %8 = load i32, i32* %p, align 4
  %inc5 = add i32 %8, 1
  store i32 %inc5, i32* %p, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.else4, %if.end
  br label %while.body

return:                                           ; preds = %if.then3, %if.then
  %9 = load i32, i32* %retval, align 4
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone
define hidden void @primeFactors(i32 %x, i32* %arr) #0 {
entry:
  %x.addr = alloca i32, align 4
  %arr.addr = alloca i32*, align 4
  %p = alloca i32, align 4
  %pf = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32* %arr, i32** %arr.addr, align 4
  store i32 2, i32* %p, align 4
  store i32 0, i32* %pf, align 4
  %0 = load i32, i32* %x.addr, align 4
  %cmp = icmp eq i32 %0, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i32*, i32** %arr.addr, align 4
  %2 = load i32, i32* %pf, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 %2
  store i32 1, i32* %arrayidx, align 4
  br label %if.end8

if.else:                                          ; preds = %entry
  br label %while.body

while.body:                                       ; preds = %if.else, %if.end7
  %3 = load i32, i32* %x.addr, align 4
  %4 = load i32, i32* %p, align 4
  %rem = urem i32 %3, %4
  %tobool = icmp ne i32 %rem, 0
  br i1 %tobool, label %if.else5, label %if.then1

if.then1:                                         ; preds = %while.body
  %5 = load i32, i32* %p, align 4
  %6 = load i32*, i32** %arr.addr, align 4
  %7 = load i32, i32* %pf, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %pf, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %6, i32 %7
  store i32 %5, i32* %arrayidx2, align 4
  %8 = load i32, i32* %p, align 4
  %9 = load i32, i32* %x.addr, align 4
  %div = udiv i32 %9, %8
  store i32 %div, i32* %x.addr, align 4
  %10 = load i32, i32* %x.addr, align 4
  %cmp3 = icmp eq i32 %10, 1
  br i1 %cmp3, label %if.then4, label %if.end

if.then4:                                         ; preds = %if.then1
  br label %if.end8

if.end:                                           ; preds = %if.then1
  br label %if.end7

if.else5:                                         ; preds = %while.body
  %11 = load i32, i32* %p, align 4
  %inc6 = add i32 %11, 1
  store i32 %inc6, i32* %p, align 4
  br label %if.end7

if.end7:                                          ; preds = %if.else5, %if.end
  br label %while.body

if.end8:                                          ; preds = %if.then4, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @sumDigits(i32 %x) #0 {
entry:
  %x.addr = alloca i32, align 4
  %sum = alloca i32, align 4
  %y = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 0, i32* %sum, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %x.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i32, i32* %x.addr, align 4
  %rem = urem i32 %1, 10
  store i32 %rem, i32* %y, align 4
  %2 = load i32, i32* %y, align 4
  %3 = load i32, i32* %sum, align 4
  %add = add i32 %3, %2
  store i32 %add, i32* %sum, align 4
  %4 = load i32, i32* %x.addr, align 4
  %div = udiv i32 %4, 10
  store i32 %div, i32* %x.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %5 = load i32, i32* %sum, align 4
  ret i32 %5
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @sumFactors(i32* %arr, i32 %size) #0 {
entry:
  %arr.addr = alloca i32*, align 4
  %size.addr = alloca i32, align 4
  %sum = alloca i32, align 4
  %a = alloca i32, align 4
  store i32* %arr, i32** %arr.addr, align 4
  store i32 %size, i32* %size.addr, align 4
  store i32 0, i32* %sum, align 4
  store i32 0, i32* %a, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %a, align 4
  %1 = load i32, i32* %size.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32*, i32** %arr.addr, align 4
  %3 = load i32, i32* %a, align 4
  %arrayidx = getelementptr inbounds i32, i32* %2, i32 %3
  %4 = load i32, i32* %arrayidx, align 4
  %call = call i32 @sumDigits(i32 %4)
  %5 = load i32, i32* %sum, align 4
  %add = add i32 %5, %call
  store i32 %add, i32* %sum, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %a, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %a, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %7 = load i32, i32* %sum, align 4
  ret i32 %7
}

; Function Attrs: noinline nounwind optnone
define hidden void @listAllSmithNumbers(i32 %x) #0 {
entry:
  %x.addr = alloca i32, align 4
  %arr = alloca i32*, align 4
  %a = alloca i32, align 4
  %numfactors = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 4, i32* %a, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %a, align 4
  %1 = load i32, i32* %x.addr, align 4
  %cmp = icmp ult i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %a, align 4
  %call = call i32 @numPrimeFactors(i32 %2)
  store i32 %call, i32* %numfactors, align 4
  %3 = load i32, i32* %numfactors, align 4
  %mul = mul i32 %3, 4
  %call1 = call noalias i8* @malloc(i32 %mul)
  %4 = bitcast i8* %call1 to i32*
  store i32* %4, i32** %arr, align 4
  %5 = load i32, i32* %numfactors, align 4
  %cmp2 = icmp slt i32 %5, 2
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.inc

if.end:                                           ; preds = %for.body
  %6 = load i32, i32* %a, align 4
  %7 = load i32*, i32** %arr, align 4
  call void @primeFactors(i32 %6, i32* %7)
  %8 = load i32, i32* %a, align 4
  %call3 = call i32 @sumDigits(i32 %8)
  %9 = load i32*, i32** %arr, align 4
  %10 = load i32, i32* %numfactors, align 4
  %call4 = call i32 @sumFactors(i32* %9, i32 %10)
  %cmp5 = icmp eq i32 %call3, %call4
  br i1 %cmp5, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.end
  %11 = load i32, i32* %a, align 4
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i32 %11)
  br label %if.end8

if.end8:                                          ; preds = %if.then6, %if.end
  %12 = load i32*, i32** %arr, align 4
  %13 = bitcast i32* %12 to i8*
  call void @free(i8* %13)
  br label %for.inc

for.inc:                                          ; preds = %if.end8, %if.then
  %14 = load i32, i32* %a, align 4
  %inc = add i32 %14, 1
  store i32 %inc, i32* %a, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare noalias i8* @malloc(i32 %0) #1

declare i32 @printf(i8* %0, ...) #1

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.1, i32 0, i32 0))
  call void @listAllSmithNumbers(i32 10000)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %size.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp slt i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %arrayidx, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 @sumDigits(i32 %4)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %sum, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %add = add i32 %5, %call
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i32 = add %0, %1
infer %2

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add nsw i32 %6, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = addnsw 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i32, i32* %sum, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = slt %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for sumFactors()

; entering Souper's runOnFunction() for listAllSmithNumbers()

; ModuleID = './Smith_numbers.c.bc'
source_filename = "./Smith_numbers.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [5 x i8] c"%4u \00", align 1
@.str.1 = private unnamed_addr constant [36 x i8] c"All the Smith Numbers < 10000 are:\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden i32 @numPrimeFactors(i32 %x) #0 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca i32, align 4
  %p = alloca i32, align 4
  %pf = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 2, i32* %p, align 4
  store i32 0, i32* %pf, align 4
  %0 = load i32, i32* %x.addr, align 4
  %cmp = icmp eq i32 %0, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  br label %while.body

while.body:                                       ; preds = %if.else, %if.end6
  %1 = load i32, i32* %x.addr, align 4
  %2 = load i32, i32* %p, align 4
  %rem = urem i32 %1, %2
  %tobool = icmp ne i32 %rem, 0
  br i1 %tobool, label %if.else4, label %if.then1

if.then1:                                         ; preds = %while.body
  %3 = load i32, i32* %pf, align 4
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %pf, align 4
  %4 = load i32, i32* %p, align 4
  %5 = load i32, i32* %x.addr, align 4
  %div = udiv i32 %5, %4
  store i32 %div, i32* %x.addr, align 4
  %6 = load i32, i32* %x.addr, align 4
  %cmp2 = icmp eq i32 %6, 1
  br i1 %cmp2, label %if.then3, label %if.end

if.then3:                                         ; preds = %if.then1
  %7 = load i32, i32* %pf, align 4
  store i32 %7, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %if.then1
  br label %if.end6

if.else4:                                         ; preds = %while.body
  %8 = load i32, i32* %p, align 4
  %inc5 = add i32 %8, 1
  store i32 %inc5, i32* %p, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.else4, %if.end
  br label %while.body

return:                                           ; preds = %if.then3, %if.then
  %9 = load i32, i32* %retval, align 4
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone
define hidden void @primeFactors(i32 %x, i32* %arr) #0 {
entry:
  %x.addr = alloca i32, align 4
  %arr.addr = alloca i32*, align 4
  %p = alloca i32, align 4
  %pf = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32* %arr, i32** %arr.addr, align 4
  store i32 2, i32* %p, align 4
  store i32 0, i32* %pf, align 4
  %0 = load i32, i32* %x.addr, align 4
  %cmp = icmp eq i32 %0, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i32*, i32** %arr.addr, align 4
  %2 = load i32, i32* %pf, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 %2
  store i32 1, i32* %arrayidx, align 4
  br label %if.end8

if.else:                                          ; preds = %entry
  br label %while.body

while.body:                                       ; preds = %if.else, %if.end7
  %3 = load i32, i32* %x.addr, align 4
  %4 = load i32, i32* %p, align 4
  %rem = urem i32 %3, %4
  %tobool = icmp ne i32 %rem, 0
  br i1 %tobool, label %if.else5, label %if.then1

if.then1:                                         ; preds = %while.body
  %5 = load i32, i32* %p, align 4
  %6 = load i32*, i32** %arr.addr, align 4
  %7 = load i32, i32* %pf, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %pf, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %6, i32 %7
  store i32 %5, i32* %arrayidx2, align 4
  %8 = load i32, i32* %p, align 4
  %9 = load i32, i32* %x.addr, align 4
  %div = udiv i32 %9, %8
  store i32 %div, i32* %x.addr, align 4
  %10 = load i32, i32* %x.addr, align 4
  %cmp3 = icmp eq i32 %10, 1
  br i1 %cmp3, label %if.then4, label %if.end

if.then4:                                         ; preds = %if.then1
  br label %if.end8

if.end:                                           ; preds = %if.then1
  br label %if.end7

if.else5:                                         ; preds = %while.body
  %11 = load i32, i32* %p, align 4
  %inc6 = add i32 %11, 1
  store i32 %inc6, i32* %p, align 4
  br label %if.end7

if.end7:                                          ; preds = %if.else5, %if.end
  br label %while.body

if.end8:                                          ; preds = %if.then4, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @sumDigits(i32 %x) #0 {
entry:
  %x.addr = alloca i32, align 4
  %sum = alloca i32, align 4
  %y = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 0, i32* %sum, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %x.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i32, i32* %x.addr, align 4
  %rem = urem i32 %1, 10
  store i32 %rem, i32* %y, align 4
  %2 = load i32, i32* %y, align 4
  %3 = load i32, i32* %sum, align 4
  %add = add i32 %3, %2
  store i32 %add, i32* %sum, align 4
  %4 = load i32, i32* %x.addr, align 4
  %div = udiv i32 %4, 10
  store i32 %div, i32* %x.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %5 = load i32, i32* %sum, align 4
  ret i32 %5
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @sumFactors(i32* %arr, i32 %size) #0 {
entry:
  %arr.addr = alloca i32*, align 4
  %size.addr = alloca i32, align 4
  %sum = alloca i32, align 4
  %a = alloca i32, align 4
  store i32* %arr, i32** %arr.addr, align 4
  store i32 %size, i32* %size.addr, align 4
  store i32 0, i32* %sum, align 4
  store i32 0, i32* %a, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %a, align 4
  %1 = load i32, i32* %size.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32*, i32** %arr.addr, align 4
  %3 = load i32, i32* %a, align 4
  %arrayidx = getelementptr inbounds i32, i32* %2, i32 %3
  %4 = load i32, i32* %arrayidx, align 4
  %call = call i32 @sumDigits(i32 %4)
  %5 = load i32, i32* %sum, align 4
  %add = add i32 %5, %call
  store i32 %add, i32* %sum, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %a, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %a, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %7 = load i32, i32* %sum, align 4
  ret i32 %7
}

; Function Attrs: noinline nounwind optnone
define hidden void @listAllSmithNumbers(i32 %x) #0 {
entry:
  %x.addr = alloca i32, align 4
  %arr = alloca i32*, align 4
  %a = alloca i32, align 4
  %numfactors = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 4, i32* %a, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %a, align 4
  %1 = load i32, i32* %x.addr, align 4
  %cmp = icmp ult i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %a, align 4
  %call = call i32 @numPrimeFactors(i32 %2)
  store i32 %call, i32* %numfactors, align 4
  %3 = load i32, i32* %numfactors, align 4
  %mul = mul i32 %3, 4
  %call1 = call noalias i8* @malloc(i32 %mul)
  %4 = bitcast i8* %call1 to i32*
  store i32* %4, i32** %arr, align 4
  %5 = load i32, i32* %numfactors, align 4
  %cmp2 = icmp slt i32 %5, 2
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.inc

if.end:                                           ; preds = %for.body
  %6 = load i32, i32* %a, align 4
  %7 = load i32*, i32** %arr, align 4
  call void @primeFactors(i32 %6, i32* %7)
  %8 = load i32, i32* %a, align 4
  %call3 = call i32 @sumDigits(i32 %8)
  %9 = load i32*, i32** %arr, align 4
  %10 = load i32, i32* %numfactors, align 4
  %call4 = call i32 @sumFactors(i32* %9, i32 %10)
  %cmp5 = icmp eq i32 %call3, %call4
  br i1 %cmp5, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.end
  %11 = load i32, i32* %a, align 4
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i32 %11)
  br label %if.end8

if.end8:                                          ; preds = %if.then6, %if.end
  %12 = load i32*, i32** %arr, align 4
  %13 = bitcast i32* %12 to i8*
  call void @free(i8* %13)
  br label %for.inc

for.inc:                                          ; preds = %if.end8, %if.then
  %14 = load i32, i32* %a, align 4
  %inc = add i32 %14, 1
  store i32 %inc, i32* %a, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare noalias i8* @malloc(i32 %0) #1

declare i32 @printf(i8* %0, ...) #1

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.1, i32 0, i32 0))
  call void @listAllSmithNumbers(i32 10000)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %x.addr, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ult i32 %0, %1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call = call i32 @numPrimeFactors(i32 %2)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %numfactors, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %mul = mul i32 %3, 4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %numfactors, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp slt i32 %5, 2
; Looking for a replacement for:
%0:i32 = var
%1:i1 = slt %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call3 = call i32 @sumDigits(i32 %8)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %numfactors, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %call4 = call i32 @sumFactors(i32* %9, i32 %10)
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp5 = icmp eq i32 %call3, %call4
; Looking for a replacement for:
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2

; *****
; For LLVM instruction:
;  %11 = load i32, i32* %a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %14 = load i32, i32* %a, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add i32 %14, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = ult %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = mul 4:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 1073741824
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = slt %0, 2:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 3 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = var
%2:i1 = eq %0, %1
infer %2


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for listAllSmithNumbers()

; entering Souper's runOnFunction() for __main_argc_argv()

; ModuleID = './Smith_numbers.c.bc'
source_filename = "./Smith_numbers.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [5 x i8] c"%4u \00", align 1
@.str.1 = private unnamed_addr constant [36 x i8] c"All the Smith Numbers < 10000 are:\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define hidden i32 @numPrimeFactors(i32 %x) #0 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca i32, align 4
  %p = alloca i32, align 4
  %pf = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 2, i32* %p, align 4
  store i32 0, i32* %pf, align 4
  %0 = load i32, i32* %x.addr, align 4
  %cmp = icmp eq i32 %0, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  br label %while.body

while.body:                                       ; preds = %if.else, %if.end6
  %1 = load i32, i32* %x.addr, align 4
  %2 = load i32, i32* %p, align 4
  %rem = urem i32 %1, %2
  %tobool = icmp ne i32 %rem, 0
  br i1 %tobool, label %if.else4, label %if.then1

if.then1:                                         ; preds = %while.body
  %3 = load i32, i32* %pf, align 4
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %pf, align 4
  %4 = load i32, i32* %p, align 4
  %5 = load i32, i32* %x.addr, align 4
  %div = udiv i32 %5, %4
  store i32 %div, i32* %x.addr, align 4
  %6 = load i32, i32* %x.addr, align 4
  %cmp2 = icmp eq i32 %6, 1
  br i1 %cmp2, label %if.then3, label %if.end

if.then3:                                         ; preds = %if.then1
  %7 = load i32, i32* %pf, align 4
  store i32 %7, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %if.then1
  br label %if.end6

if.else4:                                         ; preds = %while.body
  %8 = load i32, i32* %p, align 4
  %inc5 = add i32 %8, 1
  store i32 %inc5, i32* %p, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.else4, %if.end
  br label %while.body

return:                                           ; preds = %if.then3, %if.then
  %9 = load i32, i32* %retval, align 4
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone
define hidden void @primeFactors(i32 %x, i32* %arr) #0 {
entry:
  %x.addr = alloca i32, align 4
  %arr.addr = alloca i32*, align 4
  %p = alloca i32, align 4
  %pf = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32* %arr, i32** %arr.addr, align 4
  store i32 2, i32* %p, align 4
  store i32 0, i32* %pf, align 4
  %0 = load i32, i32* %x.addr, align 4
  %cmp = icmp eq i32 %0, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i32*, i32** %arr.addr, align 4
  %2 = load i32, i32* %pf, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 %2
  store i32 1, i32* %arrayidx, align 4
  br label %if.end8

if.else:                                          ; preds = %entry
  br label %while.body

while.body:                                       ; preds = %if.else, %if.end7
  %3 = load i32, i32* %x.addr, align 4
  %4 = load i32, i32* %p, align 4
  %rem = urem i32 %3, %4
  %tobool = icmp ne i32 %rem, 0
  br i1 %tobool, label %if.else5, label %if.then1

if.then1:                                         ; preds = %while.body
  %5 = load i32, i32* %p, align 4
  %6 = load i32*, i32** %arr.addr, align 4
  %7 = load i32, i32* %pf, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %pf, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %6, i32 %7
  store i32 %5, i32* %arrayidx2, align 4
  %8 = load i32, i32* %p, align 4
  %9 = load i32, i32* %x.addr, align 4
  %div = udiv i32 %9, %8
  store i32 %div, i32* %x.addr, align 4
  %10 = load i32, i32* %x.addr, align 4
  %cmp3 = icmp eq i32 %10, 1
  br i1 %cmp3, label %if.then4, label %if.end

if.then4:                                         ; preds = %if.then1
  br label %if.end8

if.end:                                           ; preds = %if.then1
  br label %if.end7

if.else5:                                         ; preds = %while.body
  %11 = load i32, i32* %p, align 4
  %inc6 = add i32 %11, 1
  store i32 %inc6, i32* %p, align 4
  br label %if.end7

if.end7:                                          ; preds = %if.else5, %if.end
  br label %while.body

if.end8:                                          ; preds = %if.then4, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @sumDigits(i32 %x) #0 {
entry:
  %x.addr = alloca i32, align 4
  %sum = alloca i32, align 4
  %y = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 0, i32* %sum, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %x.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i32, i32* %x.addr, align 4
  %rem = urem i32 %1, 10
  store i32 %rem, i32* %y, align 4
  %2 = load i32, i32* %y, align 4
  %3 = load i32, i32* %sum, align 4
  %add = add i32 %3, %2
  store i32 %add, i32* %sum, align 4
  %4 = load i32, i32* %x.addr, align 4
  %div = udiv i32 %4, 10
  store i32 %div, i32* %x.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %5 = load i32, i32* %sum, align 4
  ret i32 %5
}

; Function Attrs: noinline nounwind optnone
define hidden i32 @sumFactors(i32* %arr, i32 %size) #0 {
entry:
  %arr.addr = alloca i32*, align 4
  %size.addr = alloca i32, align 4
  %sum = alloca i32, align 4
  %a = alloca i32, align 4
  store i32* %arr, i32** %arr.addr, align 4
  store i32 %size, i32* %size.addr, align 4
  store i32 0, i32* %sum, align 4
  store i32 0, i32* %a, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %a, align 4
  %1 = load i32, i32* %size.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32*, i32** %arr.addr, align 4
  %3 = load i32, i32* %a, align 4
  %arrayidx = getelementptr inbounds i32, i32* %2, i32 %3
  %4 = load i32, i32* %arrayidx, align 4
  %call = call i32 @sumDigits(i32 %4)
  %5 = load i32, i32* %sum, align 4
  %add = add i32 %5, %call
  store i32 %add, i32* %sum, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %a, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %a, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %7 = load i32, i32* %sum, align 4
  ret i32 %7
}

; Function Attrs: noinline nounwind optnone
define hidden void @listAllSmithNumbers(i32 %x) #0 {
entry:
  %x.addr = alloca i32, align 4
  %arr = alloca i32*, align 4
  %a = alloca i32, align 4
  %numfactors = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 4, i32* %a, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %a, align 4
  %1 = load i32, i32* %x.addr, align 4
  %cmp = icmp ult i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %a, align 4
  %call = call i32 @numPrimeFactors(i32 %2)
  store i32 %call, i32* %numfactors, align 4
  %3 = load i32, i32* %numfactors, align 4
  %mul = mul i32 %3, 4
  %call1 = call noalias i8* @malloc(i32 %mul)
  %4 = bitcast i8* %call1 to i32*
  store i32* %4, i32** %arr, align 4
  %5 = load i32, i32* %numfactors, align 4
  %cmp2 = icmp slt i32 %5, 2
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.inc

if.end:                                           ; preds = %for.body
  %6 = load i32, i32* %a, align 4
  %7 = load i32*, i32** %arr, align 4
  call void @primeFactors(i32 %6, i32* %7)
  %8 = load i32, i32* %a, align 4
  %call3 = call i32 @sumDigits(i32 %8)
  %9 = load i32*, i32** %arr, align 4
  %10 = load i32, i32* %numfactors, align 4
  %call4 = call i32 @sumFactors(i32* %9, i32 %10)
  %cmp5 = icmp eq i32 %call3, %call4
  br i1 %cmp5, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.end
  %11 = load i32, i32* %a, align 4
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i32 %11)
  br label %if.end8

if.end8:                                          ; preds = %if.then6, %if.end
  %12 = load i32*, i32** %arr, align 4
  %13 = bitcast i32* %12 to i8*
  call void @free(i8* %13)
  br label %for.inc

for.inc:                                          ; preds = %if.end8, %if.then
  %14 = load i32, i32* %a, align 4
  %inc = add i32 %14, 1
  store i32 %inc, i32* %a, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare noalias i8* @malloc(i32 %0) #1

declare i32 @printf(i8* %0, ...) #1

declare void @free(i8* %0) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @__main_argc_argv(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.1, i32 0, i32 0))
  call void @listAllSmithNumbers(i32 10000)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates
#########################################################
; exiting Souper's runOnFunction() for __main_argc_argv()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
