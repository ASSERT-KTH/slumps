
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for main()

; ModuleID = './Quine.c.bc'
source_filename = "./Quine.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@.str = private unnamed_addr constant [339 x i8] c"#include <stdio.h>%c%cstatic char sym[] = %c%cn%ct%c%c%c%c%c;%c%cint main(void) {%c%cconst char *code = %c%s%c;%c%cprintf(code, sym[0], sym[0], sym[3], sym[2], sym[2], sym[2], sym[2], sym[2], sym[3], sym[3], sym[0], sym[0], sym[0], sym[1], sym[3], code, sym[3], sym[0], sym[1], sym[0], sym[0], sym[1], sym[0], sym[0]);%c%c%creturn 0;%c}%c\00", align 1
@sym = internal global [5 x i8] c"\0A\09\\\22\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %code = alloca i8*, align 4
  store i32 0, i32* %retval, align 4
  store i8* getelementptr inbounds ([339 x i8], [339 x i8]* @.str, i32 0, i32 0), i8** %code, align 4
  %0 = load i8*, i8** %code, align 4
  %1 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @sym, i32 0, i32 0), align 1
  %conv = sext i8 %1 to i32
  %2 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @sym, i32 0, i32 0), align 1
  %conv1 = sext i8 %2 to i32
  %3 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @sym, i32 0, i32 3), align 1
  %conv2 = sext i8 %3 to i32
  %4 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @sym, i32 0, i32 2), align 1
  %conv3 = sext i8 %4 to i32
  %5 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @sym, i32 0, i32 2), align 1
  %conv4 = sext i8 %5 to i32
  %6 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @sym, i32 0, i32 2), align 1
  %conv5 = sext i8 %6 to i32
  %7 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @sym, i32 0, i32 2), align 1
  %conv6 = sext i8 %7 to i32
  %8 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @sym, i32 0, i32 2), align 1
  %conv7 = sext i8 %8 to i32
  %9 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @sym, i32 0, i32 3), align 1
  %conv8 = sext i8 %9 to i32
  %10 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @sym, i32 0, i32 3), align 1
  %conv9 = sext i8 %10 to i32
  %11 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @sym, i32 0, i32 0), align 1
  %conv10 = sext i8 %11 to i32
  %12 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @sym, i32 0, i32 0), align 1
  %conv11 = sext i8 %12 to i32
  %13 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @sym, i32 0, i32 0), align 1
  %conv12 = sext i8 %13 to i32
  %14 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @sym, i32 0, i32 1), align 1
  %conv13 = sext i8 %14 to i32
  %15 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @sym, i32 0, i32 3), align 1
  %conv14 = sext i8 %15 to i32
  %16 = load i8*, i8** %code, align 4
  %17 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @sym, i32 0, i32 3), align 1
  %conv15 = sext i8 %17 to i32
  %18 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @sym, i32 0, i32 0), align 1
  %conv16 = sext i8 %18 to i32
  %19 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @sym, i32 0, i32 1), align 1
  %conv17 = sext i8 %19 to i32
  %20 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @sym, i32 0, i32 0), align 1
  %conv18 = sext i8 %20 to i32
  %21 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @sym, i32 0, i32 0), align 1
  %conv19 = sext i8 %21 to i32
  %22 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @sym, i32 0, i32 1), align 1
  %conv20 = sext i8 %22 to i32
  %23 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @sym, i32 0, i32 0), align 1
  %conv21 = sext i8 %23 to i32
  %24 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @sym, i32 0, i32 0), align 1
  %conv22 = sext i8 %24 to i32
  %call = call i32 (i8*, ...) @printf(i8* %0, i32 %conv, i32 %conv1, i32 %conv2, i32 %conv3, i32 %conv4, i32 %conv5, i32 %conv6, i32 %conv7, i32 %conv8, i32 %conv9, i32 %conv10, i32 %conv11, i32 %conv12, i32 %conv13, i32 %conv14, i8* %16, i32 %conv15, i32 %conv16, i32 %conv17, i32 %conv18, i32 %conv19, i32 %conv20, i32 %conv21, i32 %conv22)
  ret i32 0
}

declare i32 @printf(i8* %0, ...) #1

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %1 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @sym, i32 0, i32 0), align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv = sext i8 %1 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %2 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @sym, i32 0, i32 0), align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv1 = sext i8 %2 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %3 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @sym, i32 0, i32 3), align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv2 = sext i8 %3 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %4 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @sym, i32 0, i32 2), align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv3 = sext i8 %4 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %5 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @sym, i32 0, i32 2), align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv4 = sext i8 %5 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %6 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @sym, i32 0, i32 2), align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv5 = sext i8 %6 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %7 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @sym, i32 0, i32 2), align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv6 = sext i8 %7 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %8 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @sym, i32 0, i32 2), align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv7 = sext i8 %8 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %9 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @sym, i32 0, i32 3), align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv8 = sext i8 %9 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %10 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @sym, i32 0, i32 3), align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv9 = sext i8 %10 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %11 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @sym, i32 0, i32 0), align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv10 = sext i8 %11 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %12 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @sym, i32 0, i32 0), align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv11 = sext i8 %12 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %13 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @sym, i32 0, i32 0), align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv12 = sext i8 %13 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %14 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @sym, i32 0, i32 1), align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv13 = sext i8 %14 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %15 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @sym, i32 0, i32 3), align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv14 = sext i8 %15 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %17 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @sym, i32 0, i32 3), align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv15 = sext i8 %17 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %18 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @sym, i32 0, i32 0), align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv16 = sext i8 %18 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %19 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @sym, i32 0, i32 1), align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv17 = sext i8 %19 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %20 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @sym, i32 0, i32 0), align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv18 = sext i8 %20 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %21 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @sym, i32 0, i32 0), align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv19 = sext i8 %21 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %22 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @sym, i32 0, i32 1), align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv20 = sext i8 %22 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %23 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @sym, i32 0, i32 0), align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv21 = sext i8 %23 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1

; *****
; For LLVM instruction:
;  %24 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @sym, i32 0, i32 0), align 1
; Looking for a replacement for:
%0:i8 = var
infer %0

; *****
; For LLVM instruction:
;  %conv22 = sext i8 %24 to i32
; Looking for a replacement for:
%0:i8 = var
%1:i32 = sext %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i8 = var
infer %0


--------------------------------
guess 0

%0:i8 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i8 = var
%1:i32 = sext %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
