
Entering the Souper pass's runOnModule()


; entering Souper's runOnFunction() for demo_binary_op()

; ModuleID = './Ternary_logic.c.bc'
source_filename = "./Ternary_logic.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@tritNot = hidden global [3 x i32] [i32 2, i32 1, i32 0], align 4
@tritAnd = hidden global [3 x [3 x i32]] [[3 x i32] [i32 0, i32 1, i32 2], [3 x i32] [i32 1, i32 1, i32 2], [3 x i32] [i32 2, i32 2, i32 2]], align 16
@tritOr = hidden global [3 x [3 x i32]] [[3 x i32] zeroinitializer, [3 x i32] [i32 0, i32 1, i32 1], [3 x i32] [i32 0, i32 1, i32 2]], align 16
@tritThen = hidden global [3 x [3 x i32]] [[3 x i32] [i32 0, i32 1, i32 2], [3 x i32] [i32 0, i32 1, i32 1], [3 x i32] zeroinitializer], align 16
@tritEquiv = hidden global [3 x [3 x i32]] [[3 x i32] [i32 0, i32 1, i32 2], [3 x i32] [i32 1, i32 1, i32 1], [3 x i32] [i32 2, i32 1, i32 0]], align 16
@.str = private unnamed_addr constant [2 x i8] c"T\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"F\00", align 1
@tritString = hidden global [3 x i8*] [i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0)], align 4
@.str.3 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.4 = private unnamed_addr constant [14 x i8] c"%s %s %s: %s\0A\00", align 1
@.str.5 = private unnamed_addr constant [12 x i8] c"Not %s: %s\0A\00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"And\00", align 1
@.str.7 = private unnamed_addr constant [3 x i8] c"Or\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"Then\00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"Equiv\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @demo_binary_op([3 x i32]* %operator, i8* %name) #0 {
entry:
  %operator.addr = alloca [3 x i32]*, align 4
  %name.addr = alloca i8*, align 4
  %operand1 = alloca i32, align 4
  %operand2 = alloca i32, align 4
  store [3 x i32]* %operator, [3 x i32]** %operator.addr, align 4
  store i8* %name, i8** %name.addr, align 4
  store i32 0, i32* %operand1, align 4
  store i32 0, i32* %operand2, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0))
  store i32 0, i32* %operand1, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc9, %entry
  %0 = load i32, i32* %operand1, align 4
  %cmp = icmp ule i32 %0, 2
  br i1 %cmp, label %for.body, label %for.end11

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %operand2, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %1 = load i32, i32* %operand2, align 4
  %cmp2 = icmp ule i32 %1, 2
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %2 = load i32, i32* %operand1, align 4
  %arrayidx = getelementptr inbounds [3 x i8*], [3 x i8*]* @tritString, i32 0, i32 %2
  %3 = load i8*, i8** %arrayidx, align 4
  %4 = load i8*, i8** %name.addr, align 4
  %5 = load i32, i32* %operand2, align 4
  %arrayidx4 = getelementptr inbounds [3 x i8*], [3 x i8*]* @tritString, i32 0, i32 %5
  %6 = load i8*, i8** %arrayidx4, align 4
  %7 = load [3 x i32]*, [3 x i32]** %operator.addr, align 4
  %8 = load i32, i32* %operand1, align 4
  %arrayidx5 = getelementptr inbounds [3 x i32], [3 x i32]* %7, i32 %8
  %9 = load i32, i32* %operand2, align 4
  %arrayidx6 = getelementptr inbounds [3 x i32], [3 x i32]* %arrayidx5, i32 0, i32 %9
  %10 = load i32, i32* %arrayidx6, align 4
  %arrayidx7 = getelementptr inbounds [3 x i8*], [3 x i8*]* @tritString, i32 0, i32 %10
  %11 = load i8*, i8** %arrayidx7, align 4
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i32 0, i32 0), i8* %3, i8* %4, i8* %6, i8* %11)
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %12 = load i32, i32* %operand2, align 4
  %inc = add i32 %12, 1
  store i32 %inc, i32* %operand2, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc9

for.inc9:                                         ; preds = %for.end
  %13 = load i32, i32* %operand1, align 4
  %inc10 = add i32 %13, 1
  store i32 %inc10, i32* %operand1, align 4
  br label %for.cond

for.end11:                                        ; preds = %for.cond
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %op1 = alloca i32, align 4
  %op2 = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 0, i32* %op1, align 4
  store i32 0, i32* %op2, align 4
  store i32 0, i32* %op1, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %op1, align 4
  %cmp = icmp ule i32 %0, 2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %op1, align 4
  %arrayidx = getelementptr inbounds [3 x i8*], [3 x i8*]* @tritString, i32 0, i32 %1
  %2 = load i8*, i8** %arrayidx, align 4
  %3 = load i32, i32* %op1, align 4
  %arrayidx1 = getelementptr inbounds [3 x i32], [3 x i32]* @tritNot, i32 0, i32 %3
  %4 = load i32, i32* %arrayidx1, align 4
  %arrayidx2 = getelementptr inbounds [3 x i8*], [3 x i8*]* @tritString, i32 0, i32 %4
  %5 = load i8*, i8** %arrayidx2, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.5, i32 0, i32 0), i8* %2, i8* %5)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %op1, align 4
  %inc = add i32 %6, 1
  store i32 %inc, i32* %op1, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  call void @demo_binary_op([3 x i32]* getelementptr inbounds ([3 x [3 x i32]], [3 x [3 x i32]]* @tritAnd, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0))
  call void @demo_binary_op([3 x i32]* getelementptr inbounds ([3 x [3 x i32]], [3 x [3 x i32]]* @tritOr, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i32 0, i32 0))
  call void @demo_binary_op([3 x i32]* getelementptr inbounds ([3 x [3 x i32]], [3 x [3 x i32]]* @tritThen, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0))
  call void @demo_binary_op([3 x i32]* getelementptr inbounds ([3 x [3 x i32]], [3 x [3 x i32]]* @tritEquiv, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i32 0, i32 0))
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %operand1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ule i32 %0, 2
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ule %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %operand2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp2 = icmp ule i32 %1, 2
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ule %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %2 = load i32, i32* %operand1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %5 = load i32, i32* %operand2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %8 = load i32, i32* %operand1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %9 = load i32, i32* %operand2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %10 = load i32, i32* %arrayidx6, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %12 = load i32, i32* %operand2, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add i32 %12, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1

; *****
; For LLVM instruction:
;  %13 = load i32, i32* %operand1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc10 = add i32 %13, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1
got 1 candidates from LHS

-------------------------------------------------
%0:i32 = var
infer %0


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 0
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: -1
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i1 = ule %0, 2:i32
infer %1


--------------------------------
guess 0

%0:i1 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: -1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses
Dataflow Pruned 0/0
There are 1 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
got 2 candidates from LHS

-------------------------------------------------
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1


--------------------------------
guess 0

%0:i32 = var ; reservedconst_1

Cost = 0
first query is SAT, returning the model:
reservedconst_1: 1
0 th attempt: second query is SAT-- constant doesn't work
first query is SAT, returning the model:
reservedconst_1: 0
1 th attempt: second query is SAT-- constant doesn't work
first query is UNSAT-- no more guesses

--------------------------------
guess 1

%0:i32 = var

Cost = 0
second query is SAT-- constant doesn't work
Dataflow Pruned 0/0
There are 2 Guesses
There are 0 RHSs before deduplication
There are 0 RHSs after deduplication
#########################################################
; exiting Souper's runOnFunction() for demo_binary_op()

; entering Souper's runOnFunction() for main()

; ModuleID = './Ternary_logic.c.bc'
source_filename = "./Ternary_logic.c"
target datalayout = "e-m:e-p:32:32-i64:64-n32:64-S128"
target triple = "wasm32-unknown-wasi"

@tritNot = hidden global [3 x i32] [i32 2, i32 1, i32 0], align 4
@tritAnd = hidden global [3 x [3 x i32]] [[3 x i32] [i32 0, i32 1, i32 2], [3 x i32] [i32 1, i32 1, i32 2], [3 x i32] [i32 2, i32 2, i32 2]], align 16
@tritOr = hidden global [3 x [3 x i32]] [[3 x i32] zeroinitializer, [3 x i32] [i32 0, i32 1, i32 1], [3 x i32] [i32 0, i32 1, i32 2]], align 16
@tritThen = hidden global [3 x [3 x i32]] [[3 x i32] [i32 0, i32 1, i32 2], [3 x i32] [i32 0, i32 1, i32 1], [3 x i32] zeroinitializer], align 16
@tritEquiv = hidden global [3 x [3 x i32]] [[3 x i32] [i32 0, i32 1, i32 2], [3 x i32] [i32 1, i32 1, i32 1], [3 x i32] [i32 2, i32 1, i32 0]], align 16
@.str = private unnamed_addr constant [2 x i8] c"T\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"F\00", align 1
@tritString = hidden global [3 x i8*] [i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0)], align 4
@.str.3 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.4 = private unnamed_addr constant [14 x i8] c"%s %s %s: %s\0A\00", align 1
@.str.5 = private unnamed_addr constant [12 x i8] c"Not %s: %s\0A\00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"And\00", align 1
@.str.7 = private unnamed_addr constant [3 x i8] c"Or\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"Then\00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"Equiv\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 ()* @__main_void to i8*)], section "llvm.metadata"

@__main_void = alias i32 (), i32 ()* @main

; Function Attrs: noinline nounwind optnone
define hidden void @demo_binary_op([3 x i32]* %operator, i8* %name) #0 {
entry:
  %operator.addr = alloca [3 x i32]*, align 4
  %name.addr = alloca i8*, align 4
  %operand1 = alloca i32, align 4
  %operand2 = alloca i32, align 4
  store [3 x i32]* %operator, [3 x i32]** %operator.addr, align 4
  store i8* %name, i8** %name.addr, align 4
  store i32 0, i32* %operand1, align 4
  store i32 0, i32* %operand2, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0))
  store i32 0, i32* %operand1, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc9, %entry
  %0 = load i32, i32* %operand1, align 4
  %cmp = icmp ule i32 %0, 2
  br i1 %cmp, label %for.body, label %for.end11

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %operand2, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %1 = load i32, i32* %operand2, align 4
  %cmp2 = icmp ule i32 %1, 2
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %2 = load i32, i32* %operand1, align 4
  %arrayidx = getelementptr inbounds [3 x i8*], [3 x i8*]* @tritString, i32 0, i32 %2
  %3 = load i8*, i8** %arrayidx, align 4
  %4 = load i8*, i8** %name.addr, align 4
  %5 = load i32, i32* %operand2, align 4
  %arrayidx4 = getelementptr inbounds [3 x i8*], [3 x i8*]* @tritString, i32 0, i32 %5
  %6 = load i8*, i8** %arrayidx4, align 4
  %7 = load [3 x i32]*, [3 x i32]** %operator.addr, align 4
  %8 = load i32, i32* %operand1, align 4
  %arrayidx5 = getelementptr inbounds [3 x i32], [3 x i32]* %7, i32 %8
  %9 = load i32, i32* %operand2, align 4
  %arrayidx6 = getelementptr inbounds [3 x i32], [3 x i32]* %arrayidx5, i32 0, i32 %9
  %10 = load i32, i32* %arrayidx6, align 4
  %arrayidx7 = getelementptr inbounds [3 x i8*], [3 x i8*]* @tritString, i32 0, i32 %10
  %11 = load i8*, i8** %arrayidx7, align 4
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i32 0, i32 0), i8* %3, i8* %4, i8* %6, i8* %11)
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %12 = load i32, i32* %operand2, align 4
  %inc = add i32 %12, 1
  store i32 %inc, i32* %operand2, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc9

for.inc9:                                         ; preds = %for.end
  %13 = load i32, i32* %operand1, align 4
  %inc10 = add i32 %13, 1
  store i32 %inc10, i32* %operand1, align 4
  br label %for.cond

for.end11:                                        ; preds = %for.cond
  ret void
}

declare i32 @printf(i8* %0, ...) #1

; Function Attrs: noinline nounwind optnone
define hidden i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %op1 = alloca i32, align 4
  %op2 = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 0, i32* %op1, align 4
  store i32 0, i32* %op2, align 4
  store i32 0, i32* %op1, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %op1, align 4
  %cmp = icmp ule i32 %0, 2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %op1, align 4
  %arrayidx = getelementptr inbounds [3 x i8*], [3 x i8*]* @tritString, i32 0, i32 %1
  %2 = load i8*, i8** %arrayidx, align 4
  %3 = load i32, i32* %op1, align 4
  %arrayidx1 = getelementptr inbounds [3 x i32], [3 x i32]* @tritNot, i32 0, i32 %3
  %4 = load i32, i32* %arrayidx1, align 4
  %arrayidx2 = getelementptr inbounds [3 x i8*], [3 x i8*]* @tritString, i32 0, i32 %4
  %5 = load i8*, i8** %arrayidx2, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.5, i32 0, i32 0), i8* %2, i8* %5)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %op1, align 4
  %inc = add i32 %6, 1
  store i32 %inc, i32* %op1, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  call void @demo_binary_op([3 x i32]* getelementptr inbounds ([3 x [3 x i32]], [3 x [3 x i32]]* @tritAnd, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0))
  call void @demo_binary_op([3 x i32]* getelementptr inbounds ([3 x [3 x i32]], [3 x [3 x i32]]* @tritOr, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i32 0, i32 0))
  call void @demo_binary_op([3 x i32]* getelementptr inbounds ([3 x [3 x i32]], [3 x [3 x i32]]* @tritThen, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0))
  call void @demo_binary_op([3 x i32]* getelementptr inbounds ([3 x [3 x i32]], [3 x [3 x i32]]* @tritEquiv, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i32 0, i32 0))
  ret i32 0
}

attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.0.0 (https://github.com/Jacarte/llvm-project.git 0f6dea67136cc1e0b3d200eb2bb165628970c44b)"}

; extracted candidates

; *****
; For LLVM instruction:
;  %0 = load i32, i32* %op1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %cmp = icmp ule i32 %0, 2
; Looking for a replacement for:
%0:i32 = var
%1:i1 = ule %0, 2:i32
infer %1

; *****
; For LLVM instruction:
;  %1 = load i32, i32* %op1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %3 = load i32, i32* %op1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %4 = load i32, i32* %arrayidx1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %6 = load i32, i32* %op1, align 4
; Looking for a replacement for:
%0:i32 = var
infer %0

; *****
; For LLVM instruction:
;  %inc = add i32 %6, 1
; Looking for a replacement for:
%0:i32 = var
%1:i32 = add 1:i32, %0
infer %1
#########################################################
; exiting Souper's runOnFunction() for main()
Total of 0 replacements done on this module
Total of 0 replacements candidates on this module
